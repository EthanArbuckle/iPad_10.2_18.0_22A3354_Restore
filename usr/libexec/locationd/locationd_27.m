void sub_1010D380C()
{
  operator delete();
}

void sub_1010D38B4(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = sub_101105B78(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v6 = off_1021A0148;
  *(_QWORD *)(v6 + 176) = 0;
  *(CLLocationCoordinate2D *)(v6 + 200) = kCLLocationCoordinate2DInvalid;
  *(_BYTE *)(v6 + 216) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_QWORD *)(v6 + 288) = 0;
  operator new();
}

void sub_1010D43BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,os_activity_scope_state_s state)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v39;

  sub_100261F44(v36);
  sub_100261F44(v37 - 208);
  os_activity_scope_leave(&state);
  v39 = *(std::__shared_weak_count **)(v35 + 272);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  sub_10110619C(v35);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D44B0(uint64_t a1, const void *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  NSObject *v18;
  _BOOL4 v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  int v32;
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  _BOOL4 v41;
  __int16 v42;
  int v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  id v47;
  __int16 v48;
  uint64_t v49;

  v3 = *(_QWORD *)(a1 + 32);
  if ((*(unsigned int (**)(const void *))(*(_QWORD *)a2 + 24))(a2) != 2)
    return 0;
  result = (uint64_t)objc_msgSend(*(id *)(v3 + 16), "isEqual:", sub_100026CC8((uint64_t)a2));
  if (!(_DWORD)result)
    return result;
  if (*((_DWORD *)v5 + 46) != *(_DWORD *)(v3 + 184))
    return 0;
  v6 = v5;
  if (*((double *)v5 + 25) != *(double *)(v3 + 200)
    || *((double *)v5 + 26) != *(double *)(v3 + 208)
    || *((double *)v5 + 24) != *(double *)(v3 + 192))
  {
    return 0;
  }
  result = (uint64_t)objc_msgSend(*((id *)v5 + 28), "isEqualToDateInterval:", *(_QWORD *)(v3 + 224));
  if (!(_DWORD)result)
    return result;
  v7 = v6[34];
  if (v7 && *(_QWORD *)(v7 + 8) != -1 || *(_QWORD *)v6[17] != *(_QWORD *)(v6[17] + 8))
  {
    v8 = *(_QWORD *)(v3 + 280);
    *(_QWORD *)(v3 + 280) = v6[35];
    v6[35] = v8;
    v9 = *(_QWORD *)(v3 + 264);
    *(_QWORD *)(v3 + 264) = v6[33];
    v6[33] = v9;
    v10 = *(_QWORD *)(v3 + 272);
    *(_QWORD *)(v3 + 272) = v6[34];
    v6[34] = v10;
    v11 = *(_QWORD *)(v3 + 288);
    *(_QWORD *)(v3 + 288) = v6[36];
    v6[36] = v11;
    v12 = *(_QWORD *)(v3 + 136);
    *(_QWORD *)(v3 + 136) = v6[17];
    v6[17] = v12;
    objc_msgSend(*(id *)(v3 + 280), "setUpdater:", v3);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A0280);
    v13 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 24))(a2);
      v15 = *(_QWORD *)(v3 + 16);
      v16 = *(_QWORD *)(v3 + 272);
      v17 = !v16 || *(_QWORD *)(v16 + 8) == -1;
      v20 = (*(_QWORD *)(*(_QWORD *)(v3 + 136) + 8) - **(_QWORD **)(v3 + 136)) >> 4;
      v21 = *(void **)(v3 + 280);
      v32 = 68290818;
      v33 = 0;
      v34 = 2082;
      v35 = "";
      v36 = 1026;
      v37 = v14;
      v38 = 2114;
      v39 = v15;
      v40 = 1026;
      v41 = v17;
      v42 = 1026;
      v43 = v20;
      v44 = 2050;
      v45 = v21;
      v46 = 2050;
      v47 = objc_msgSend(v21, "updater");
      v48 = 2050;
      v49 = v3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical #dic consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"IsSessionExpired\":%{public}hhd, \"fPendingMessagesSize\":%{public}d, \"fAdapter\":\"%{public}p\", \"updater\":\"%{public}p\", \"this\":\"%{public}p\"}", (uint8_t *)&v32, 0x4Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A0280);
    }
    v22 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v23 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 24))(a2);
      v24 = *(_QWORD *)(v3 + 16);
      v25 = *(_QWORD *)(v3 + 272);
      if (v25)
        v26 = *(_QWORD *)(v25 + 8) == -1;
      else
        v26 = 1;
      v27 = *(uint64_t **)(v3 + 136);
      v29 = *v27;
      v28 = v27[1];
      v30 = *(void **)(v3 + 280);
      v31 = objc_msgSend(v30, "updater");
      v32 = 68290818;
      v33 = 0;
      v34 = 2082;
      v35 = "";
      v36 = 1026;
      v37 = v23;
      v38 = 2114;
      v39 = v24;
      v40 = 1026;
      v41 = v26;
      v42 = 1026;
      v43 = (unint64_t)(v28 - v29) >> 4;
      v44 = 2050;
      v45 = v30;
      v46 = 2050;
      v47 = v31;
      v48 = 2050;
      v49 = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luHistorical #dic consumeMatchingButterfly", "{\"msg%{public}.0s\":\"#luHistorical #dic consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"IsSessionExpired\":%{public}hhd, \"fPendingMessagesSize\":%{public}d, \"fAdapter\":\"%{public}p\", \"updater\":\"%{public}p\", \"this\":\"%{public}p\"}", (uint8_t *)&v32, 0x4Cu);
    }
    return 1;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A0280);
  v18 = qword_1022A01D8;
  v19 = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v19)
  {
    v32 = 68289026;
    v33 = 0;
    v34 = 2082;
    v35 = "";
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical #dic not matching butterfly with dead session and empty pending queue\"}", (uint8_t *)&v32, 0x12u);
    return 0;
  }
  return result;
}

void ***sub_1010D4928(void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    sub_1002A3684(&v3);
    operator delete();
  }
  return result;
}

void sub_1010D4978(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  id v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  id v25;
  __int16 v26;
  uint64_t v27;

  if (!a3)
  {
LABEL_9:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A0280);
    goto LABEL_11;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A0280);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
  {
    v7 = *((_QWORD *)objc_msgSend(*(id *)(a1 + 32), "updater") + 2);
    *(_DWORD *)buf = 68289794;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2114;
    v23 = v7;
    v24 = 2114;
    v25 = a3;
    v26 = 2114;
    v27 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#luHistorical #warning an error occurred when getting fetchLookbackWindowStartDate from CoreRoutine\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@}", buf, 0x30u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A0280);
  }
  v8 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v9 = *((_QWORD *)objc_msgSend(*(id *)(a1 + 32), "updater") + 2);
    *(_DWORD *)buf = 68289794;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2114;
    v23 = v9;
    v24 = 2114;
    v25 = a3;
    v26 = 2114;
    v27 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luHistorical #warning an error occurred when getting fetchLookbackWindowStartDate from CoreRoutine", "{\"msg%{public}.0s\":\"#luHistorical #warning an error occurred when getting fetchLookbackWindowStartDate from CoreRoutine\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@}", buf, 0x30u);
    goto LABEL_9;
  }
LABEL_11:
  v10 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = objc_msgSend(*(id *)(a1 + 32), "updater");
    *(_DWORD *)buf = 68289538;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2114;
    v23 = a2;
    v24 = 2050;
    v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical routine has responded with the lookbackWindow\", \"lookbackWindowStartDate\":%{public, location:escape_only}@, \"updater\":\"%{public}p\"}", buf, 0x26u);
  }
  v12 = objc_msgSend(*(id *)(a1 + 32), "updater");
  v13 = *(std::__shared_weak_count **)(a1 + 48);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_1010D4C70((uint64_t)v12, a2);
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1010D4C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1010D4C70(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[5];
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  uint64_t v33;
  uint8_t buf[8];
  _WORD v35[5];
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  id v41;
  __int16 v42;
  id v43;

  v4 = *(_DWORD *)(a1 + 184);
  if (v4 <= 0)
  {
    *(_DWORD *)(a1 + 184) = 3;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A0260);
    v5 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v35[0] = 2082;
      *(_QWORD *)&v35[1] = "";
      v36 = 2114;
      v37 = v8;
      v38 = 2050;
      v39 = a1;
      v7 = "{\"msg%{public}.0s\":\"#luHistorical sampleCount is clamping to MIN sample count\", \"ClientKeyPath\":%{publi"
           "c, location:escape_only}@, \"self\":\"%{public}p\"}";
      goto LABEL_11;
    }
  }
  else if (v4 >= 0xBB9)
  {
    *(_DWORD *)(a1 + 184) = 3000;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A0260);
    v5 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v35[0] = 2082;
      *(_QWORD *)&v35[1] = "";
      v36 = 2114;
      v37 = v6;
      v38 = 2050;
      v39 = a1;
      v7 = "{\"msg%{public}.0s\":\"#luHistorical sampleCount is clamping to MAX sample count\", \"ClientKeyPath\":%{publi"
           "c, location:escape_only}@, \"self\":\"%{public}p\"}";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, buf, 0x26u);
    }
  }
  if (!*(_BYTE *)(a1 + 216))
  {
LABEL_17:
    v28 = 0;
    v29 = &v28;
    v30 = 0x3052000000;
    v31 = sub_100207280;
    v32 = sub_100207DAC;
    v33 = 0;
    v10 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    v11 = *(void **)(a1 + 224);
    v12 = *(void **)(a1 + 176);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1010D5A8C;
    v27[3] = &unk_1021A01F8;
    v27[4] = &v28;
    sub_1007D1BA4(v9, v10, v11, v12, a2, (uint64_t)v27);
    if (objc_msgSend((id)v29[5], "count"))
      sub_1010D3698(*(unsigned int *)(a1 + 184), (void *)v29[5]);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A0280);
    v20 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_QWORD *)(a1 + 16);
      v22 = objc_msgSend(*(id *)(a1 + 224), "startDate");
      v23 = objc_msgSend(*(id *)(a1 + 224), "endDate");
      *(_DWORD *)buf = 68290050;
      v35[0] = 2082;
      *(_DWORD *)&buf[4] = 0;
      *(_QWORD *)&v35[1] = "";
      v36 = 2114;
      v37 = v21;
      v38 = 2050;
      v39 = a1;
      v40 = 2114;
      v41 = v22;
      v42 = 2114;
      v43 = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical no allowed historical dateIntervals found.\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"ReceiverDateStartDate\":%{public, location:escape_only}@, \"ReceiverDateEndDate\":%{public, location:escape_only}@}", buf, 0x3Au);
    }
    _Block_object_dispose(&v28, 8);
    return;
  }
  if ((sub_101107250(*(double *)(a1 + 200), *(double *)(a1 + 208)) & 1) != 0)
  {
    if (!*(_BYTE *)(a1 + 216)
      || !sub_101107250(*(double *)(a1 + 200), *(double *)(a1 + 208))
      || *(double *)(a1 + 192) > 0.0)
    {
      goto LABEL_17;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A0280);
    v24 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(_QWORD *)(a1 + 16);
      v26 = *(void **)(a1 + 192);
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v35[0] = 2082;
      *(_QWORD *)&v35[1] = "";
      v36 = 2114;
      v37 = v25;
      v38 = 2050;
      v39 = a1;
      v40 = 2050;
      v41 = v26;
      v17 = "{\"msg%{public}.0s\":\"#luHistorical radius cannot be zero or less when center is specified\", \"ClientKeyPa"
            "th\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Radius\":\"%{public}f\"}";
      v18 = v24;
      v19 = 48;
      goto LABEL_23;
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A0280);
    v13 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(void **)(a1 + 200);
      v16 = *(void **)(a1 + 208);
      *(_DWORD *)buf = 68290050;
      v35[0] = 2082;
      *(_DWORD *)&buf[4] = 0;
      *(_QWORD *)&v35[1] = "";
      v36 = 2114;
      v37 = v14;
      v38 = 2050;
      v39 = a1;
      v40 = 2050;
      v41 = v15;
      v42 = 2050;
      v43 = v16;
      v17 = "{\"msg%{public}.0s\":\"#luHistorical specified Center is not valid\", \"ClientKeyPath\":%{public, location:e"
            "scape_only}@, \"self\":\"%{public}p\", \"Center.lat\":\"%{public}f\", \"Center.lon\":\"%{public}f\"}";
      v18 = v13;
      v19 = 58;
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    }
  }
}

void sub_1010D5534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D55D4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1010D55F8(uint64_t a1)
{
  return sub_100261F44(a1 + 40);
}

uint64_t sub_1010D5604(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  id *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)a1 = off_1021A0148;
  sub_1011078A4(a1, 2);
  v2 = *(std::__shared_weak_count **)(a1 + 272);
  if (v2)
  {
    if (v2->__shared_owners_ != -1)
    {
      v3 = std::__shared_weak_count::lock(v2);
      v4 = *(id **)(a1 + 264);

      *v4 = 0;
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }

  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  objc_msgSend(*(id *)(a1 + 280), "invalidate");

  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 256) = 0;

  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 272);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  return sub_10110619C(a1);
}

void sub_1010D5700(uint64_t a1)
{
  sub_1010D5604(a1);
  operator delete();
}

void sub_1010D5724(uint64_t a1, CLConnectionMessage **a2)
{
  _QWORD *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t *v18;

  v4 = (_QWORD *)CLConnectionMessage::name(*a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44)
      goto LABEL_7;
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 44)
  {
    goto LABEL_7;
  }
  if (!memcmp(v4, "kCLConnectionMessageDestroyUponDisconnection", 0x2CuLL))
  {
    *(_BYTE *)(a1 + 48) = 1;
    return;
  }
LABEL_7:
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A0260);
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = (uint64_t *)CLConnectionMessage::name(*a2);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10[0] = 68289794;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2114;
    v14 = v7;
    v15 = 2050;
    v16 = a1;
    v17 = 2082;
    v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #luHistorical received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x30u);
  }
}

BOOL sub_1010D5894(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 272);
  return !v1 || *(_QWORD *)(v1 + 8) == -1 || *(_BYTE *)(a1 + 48) != 0;
}

uint64_t sub_1010D58C0()
{
  return 2;
}

NSDictionary *sub_1010D58C8(uint64_t a1)
{
  NSNumber *v2;
  _QWORD v4[2];
  _QWORD v5[2];
  _QWORD v6[7];
  _QWORD v7[7];

  if (!objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("com.apple.developer.corelocation.wilderness-safety")))sub_10193E7AC();
  if (!objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("com.apple.locationd.transcript-session")))
    sub_10193E924();
  v6[0] = CFSTR("kCLConnectionMessageTranscriptFetchSampleCountKey");
  v7[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 184));
  v6[1] = CFSTR("kCLConnectionMessageTranscriptFetchRadiusKey");
  v7[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 192));
  v6[2] = CFSTR("kCLConnectionMessageLocationUpdaterStartDateKey");
  v7[2] = objc_msgSend(*(id *)(a1 + 224), "startDate");
  v6[3] = CFSTR("kCLConnectionMessageLocationUpdaterEndDateKey");
  v7[3] = objc_msgSend(*(id *)(a1 + 224), "endDate");
  v6[4] = CFSTR("kCLConnectionMessageTranscriptFetchCenterLatitudeKey");
  v7[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 200));
  v6[5] = CFSTR("kCLConnectionMessageTranscriptFetchCenterLongitudeKey");
  v7[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 208));
  v6[6] = CFSTR("kCLConnectionMessageLocationUpdaterEntitlementDictKey");
  v4[0] = CFSTR("com.apple.developer.corelocation.wilderness-safety");
  v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("com.apple.developer.corelocation.wilderness-safety")), "BOOLValue"));
  v4[1] = CFSTR("com.apple.locationd.transcript-session");
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("com.apple.locationd.transcript-session")), "BOOLValue"));
  v7[6] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 7);
}

uint64_t sub_1010D5A8C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a2;
  return result;
}

void sub_1010D5A9C(uint64_t a1, void *a2, void *a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  id v23;
  uint8_t buf[8];
  _BYTE v25[10];
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  id v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  id v35;
  __int16 v36;
  int v37;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A0260);
  v8 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *((_QWORD *)objc_msgSend(*(id *)(a1 + 32), "updater") + 2);
    v10 = *(_QWORD *)(a1 + 40);
    v11 = objc_msgSend(*(id *)(a1 + 32), "updater");
    *(_DWORD *)buf = 68290562;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v25 = 2082;
    *(_QWORD *)&v25[2] = "";
    v26 = 2114;
    v27 = v9;
    v28 = 2050;
    v29 = v10;
    v30 = 2050;
    v31 = v11;
    v32 = 1026;
    v33 = objc_msgSend(a2, "count");
    v34 = 2082;
    v35 = objc_msgSend(objc_msgSend(a3, "description"), "UTF8String");
    v36 = 1026;
    v37 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical received update from CoreRoutine\", \"ClientKeyPath\":%{public, location:escape_only}@, \"session\":\"%{public}p\", \"updater\":\"%{public}p\", \"locationCount\":%{public}d, \"Error\":%{public, location:escape_only}s, \"enumerationCompleted\":%{public}hhd}", buf, 0x46u);
  }
  if (objc_msgSend(a2, "count"))
  {
    v23 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    objc_msgSend(v23, "setObject:forKeyedSubscript:", a2, CFSTR("Locations"));
    sub_10067D07C("kCLConnectionMessageHistoricalLocations", &v23, buf);
    v12 = objc_msgSend(*(id *)(a1 + 32), "updater");
    v21 = *(_QWORD *)buf;
    v22 = *(std::__shared_weak_count **)v25;
    if (*(_QWORD *)v25)
    {
      v13 = (unint64_t *)(*(_QWORD *)v25 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    sub_101106984((uint64_t)v12, (uint64_t)&v21, 0, 1, 0.0);
    v15 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = *(std::__shared_weak_count **)v25;
    if (*(_QWORD *)v25)
    {
      v19 = (unint64_t *)(*(_QWORD *)v25 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_1010D5CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (a14)
  {
    v17 = (unint64_t *)&a14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

id sub_1010D5D88(_QWORD *a1, uint64_t a2)
{
  id result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  a1[4] = 0;
  result = *(id *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  a1[4] = result;
  a1[5] = v6;
  a1[6] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_1010D5DD8(uint64_t a1)
{
  sub_100261F44(a1 + 40);

}

id *sub_1010D5E08(id *a1)
{
  sub_100261F44((uint64_t)(a1 + 1));

  return a1;
}

void sub_1010D5E3C(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_1010D5E68(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

_QWORD *sub_1010D5E94@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_100E492C8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1010D5ED8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1010D5EEC@<X0>(void **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x20uLL);
  result = sub_1010D5F44(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1010D5F30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1010D5F44(_QWORD *a1, void **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021A02B0;
  sub_1010D5FE8(a1 + 3, *a2);
  return a1;
}

void sub_1010D5F80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1010D5F94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021A02B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010D5FA8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021A02B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

id *sub_1010D5FDC(uint64_t a1)
{
  return sub_1010D60DC((id *)(a1 + 24));
}

uint64_t *sub_1010D5FE8(uint64_t *a1, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;

  *a1 = (uint64_t)a2;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A0280);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2050;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#luHistorical  LocationUpdaterHistoricalSession()\", \"adapter\":\"%{public}p\"}", (uint8_t *)v6, 0x1Cu);
  }
  return a1;
}

id *sub_1010D60DC(id *a1)
{
  id v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  id v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  id v25;

  if (objc_msgSend(*a1, "updater"))
  {
    sub_1010D5E94("kCLConnectionMessageHistoricalLocationsFinished", &v18);
    v2 = objc_msgSend(*a1, "updater");
    v16 = v18;
    v17 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    sub_101106984((uint64_t)v2, (uint64_t)&v16, 0, 1, 0.0);
    v5 = v17;
    if (v17)
    {
      v6 = (unint64_t *)&v17->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A0280);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = objc_msgSend(*a1, "updater", v16);
      *(_DWORD *)buf = 68289282;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2050;
      v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical fetch and sending finished\", \"updater\":\"%{public}p\"}", buf, 0x1Cu);
    }
    v10 = v19;
    if (v19)
    {
      v11 = (unint64_t *)&v19->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    goto LABEL_23;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A0280);
  v13 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical historical session has been invalidated\"}", buf, 0x12u);
LABEL_23:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A0280);
  }
  v14 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical LocationUpdaterHistoricalSession deallocating\"}", buf, 0x12u);
  }

  *a1 = 0;
  return a1;
}

void sub_1010D63B0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1010D63BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  _BYTE v12[24];
  int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  sub_101353978(a1 + 8, a3, (uint64_t)v12);
  if (!v12[0])
    return a2;
  v5 = sub_100793C68(2, a2);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A0338);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a3 + 120);
    *(_DWORD *)buf = 134218496;
    v20 = v7;
    v21 = 1026;
    v22 = a2;
    v23 = 1026;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Overriding youth type for elevation credit, beginTime, %f, before, %{public}d, after, %{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A0338);
    v8 = *(_QWORD *)(a3 + 120);
    v13 = 134218496;
    v14 = v8;
    v15 = 1026;
    v16 = a2;
    v17 = 1026;
    v18 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Overriding youth type for elevation credit, beginTime, %f, before, %{public}d, after, %{public}d", &v13, 24);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMotionActivity::TypeYouth CLFitnessYouthElevationCreditOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return v5;
}

void sub_1010D65D0()
{
  operator delete();
}

void sub_1010D65E4(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1010D6610(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_1010D6700(a1, "CLPredictedWalkDistanceBoutRecorderDb", a2, a3, 1, 2.56);
  *v4 = off_1021A0368;
  v4[9] = off_1021A0430;
  v4[53] = off_1021A0480;
  sub_100E81598(v4 + 54, 0, 0);
  sub_100E81598((_QWORD *)(a1 + 448), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 464), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 480), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 496), 0, 0);
  *(_OWORD *)(a1 + 512) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  *(_QWORD *)(a1 + 160) = -[CLPredictedWalkDistanceCloudKitDelegate initWithPredictedWalkDistanceBoutRecorderDb:]([CLPredictedWalkDistanceCloudKitDelegate alloc], "initWithPredictedWalkDistanceBoutRecorderDb:", a1);
  return a1;
}

void sub_1010D66EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1010D6B80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D6700(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_1021A0598;
  *(_QWORD *)(a1 + 72) = off_1021A0640;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021A0598;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 72) = off_1021A0640;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 344) = 12000;
  *(_QWORD *)(a1 + 352) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 360));
  *(_QWORD *)(a1 + 360) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_1010D6AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[44] = off_102138DA8;
  sub_100427950(v27);
  sub_10081FA88(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_1010D6B78()
{
  JUMPOUT(0x1010D6B58);
}

_QWORD *sub_1010D6B80(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021A0640;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021A0598;
  a1[44] = off_102138DA8;
  sub_100427950(a1 + 45);
  sub_10081FA88(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_1010D6BFC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021A0368;
  a1[9] = off_1021A0430;
  a1[53] = off_1021A0480;
  sub_1010D6C58((uint64_t)a1, 0, 0);
  v2 = (void *)a1[20];
  if (v2)
  {

    a1[20] = 0;
  }
  return sub_1010D6B80(a1);
}

void sub_1010D6C58(uint64_t a1, void *a2, const void *a3)
{
  const void *v6;
  uint64_t v7;

  if ((a2 != 0) == (a3 != 0))
  {

    *(_QWORD *)(a1 + 520) = a2;
    v6 = *(const void **)(a1 + 512);
    if (v6)
      _Block_release(v6);
    if (a3)
      *(_QWORD *)(a1 + 512) = _Block_copy(a3);
  }
  else
  {
    v7 = sub_10193EA9C();
    sub_1010D6CCC(v7);
  }
}

_QWORD *sub_1010D6CD0(uint64_t a1)
{
  return sub_1010D6BFC((_QWORD *)(a1 - 72));
}

_QWORD *sub_1010D6CD8(uint64_t a1)
{
  return sub_1010D6BFC((_QWORD *)(a1 - 424));
}

void sub_1010D6CE0(_QWORD *a1)
{
  sub_1010D6BFC(a1);
  operator delete();
}

void sub_1010D6D04(uint64_t a1)
{
  sub_1010D6BFC((_QWORD *)(a1 - 72));
  operator delete();
}

void sub_1010D6D2C(uint64_t a1)
{
  sub_1010D6BFC((_QWORD *)(a1 - 424));
  operator delete();
}

uint64_t sub_1010D6D54(uint64_t a1)
{
  uint64_t v1;
  sqlite3_stmt *v3;
  int v4;
  sqlite3_stmt *v5;
  uint64_t v6;
  uint64_t v8;

  if (!sub_10008950C(a1 + 72))
    return 0xFFFFFFFFLL;
  sub_100087AF4((_QWORD *)(a1 + 496), &v8);
  v3 = (sqlite3_stmt *)sub_100026CC8(v8);
  v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    v5 = (sqlite3_stmt *)sub_100026CC8(v8);
    v1 = sqlite3_column_int(v5, 0);
  }
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v4 != 100)
    return 0xFFFFFFFFLL;
  return v1;
}

void sub_1010D6DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010D6E0C(uint64_t a1)
{
  return sub_1010D6D54(a1 - 72);
}

uint64_t sub_1010D6E14(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  pthread_mutex_t *v26;
  __int16 v27;
  uint8_t buf[12];

  v9 = *(_QWORD *)(a1 + 112);
  v8 = a1 + 112;
  v10 = v8 - 40;
  v25 = v8;
  (*(void (**)(void))(v9 + 16))();
  v27 = 256;
  if ((sub_10008950C(v10) & 1) != 0)
  {
    v15 = 0;
    v23 = 0;
    v24 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v20 = 0;
    v21 = 0;
    v19 = 0;
    v22 = 0;
    if (a3)
    {
      if (a5)
        sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM PredictedWalkDistanceBoutHistory WHERE endTime BETWEEN ? and ? ORDER BY startTime ASC LIMIT ?");
      sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM PredictedWalkDistanceBoutHistory WHERE endTime > ? and endTime < ? ORDER BY startTime ASC LIMIT ?");
    }
    if (a5)
      sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM PredictedWalkDistanceBoutHistory WHERE endTime BETWEEN ? and ? AND boutType != ? ORDER BY startTime ASC LIMIT ?");
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM PredictedWalkDistanceBoutHistory WHERE endTime > ? and endTime < ? AND boutType != ? ORDER BY startTime ASC LIMIT ?");
  }
  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_1021A0548);
  v11 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLPredictedWalkDistanceBoutRecorderDb - DB, not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_1021A0548);
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 1, "CLPredictedWalkDistanceBoutRecorderDb - DB, not accessible", &v15, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "virtual CMError CLPredictedWalkDistanceBoutRecorderDb::queryBoutDataInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry> &, BOOL, int, BOOL) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if ((_BYTE)v27)
    pthread_mutex_unlock(v26);
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
  return 109;
}

void sub_1010D7700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  sub_10187E514((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D7764(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  sub_1010D87B4(a1, a2);
  return 0;
}

uint64_t sub_1010D77C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  return sub_1010D6E14(a1 - 424, a2, a3, a4, a5);
}

uint64_t sub_1010D77C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint8_t buf[1640];

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v11 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v12 = 256;
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308)
  {
    if (sub_10008950C(a1 + 72))
    {
      sub_10001E638(*(_QWORD *)(a1 + 80));
      CFAbsoluteTimeGetCurrent();
      sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM PredictedWalkDistanceBoutHistory WHERE endTime < ?");
    }
  }
  else
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_1021A0548);
    v6 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "CLPredictedWalkDistanceBoutRecorderDb - Failed to expire records.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_1021A0548);
      v10 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 17, "CLPredictedWalkDistanceBoutRecorderDb - Failed to expire records.", &v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "virtual long CLPredictedWalkDistanceBoutRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return -1;
}

void sub_1010D7A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D7AC4(uint64_t a1, uint64_t a2)
{
  return sub_1010D77C8(a1 - 72, a2);
}

_QWORD *sub_1010D7ACC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "PredictedWalkDistanceBoutHistory");
}

_QWORD *sub_1010D7ADC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "PredictedWalkDistanceBoutHistory");
}

uint64_t sub_1010D7AEC(_QWORD *a1, uint64_t a2)
{
  return sub_10041B300(a1, a2, 0);
}

uint64_t sub_1010D7AF4(uint64_t a1, uint64_t a2)
{
  return sub_10041B300((_QWORD *)(a1 - 424), a2, 0);
}

BOOL sub_1010D7B00(uint64_t a1, uint64_t *a2, NSArray **a3)
{
  id v6;
  int v7;
  CLSerializablePredictedWalkDistanceBout *v8;
  NSData *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  NSArray *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint8_t buf[4];
  uint64_t v33;

  if (!a3)
    return 0;
  v6 = objc_alloc_init((Class)NSMutableArray);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = 0;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  v7 = sub_100427DA8(a1, a2, (uint64_t)&v18);
  if (!v7)
  {
    do
    {
      v17 = 0;
      v8 = -[CLSerializablePredictedWalkDistanceBout initWithPredictedWalkDistanceBout:]([CLSerializablePredictedWalkDistanceBout alloc], "initWithPredictedWalkDistanceBout:", &v18);
      v9 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v8, 1, &v17);
      if (v17)
      {
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_1021A0548);
        v10 = qword_10229FEA8;
        if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v33 = v17;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to serialize bout data: %@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FEA0 != -1)
            dispatch_once(&qword_10229FEA0, &stru_1021A0548);
          v30 = 138412290;
          v31 = v17;
          LODWORD(v16) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 16, "Unable to serialize bout data: %@", &v30, v16);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLPredictedWalkDistanceBoutRecorderDb::convertToDataBlobWithCode(const CLSqliteScopedStatement &, NSArray<NSData *> **)", "%s\n", v11);
          if (v12 != buf)
            free(v12);
        }
      }
      else
      {
        objc_msgSend(v6, "addObject:", v9);
      }

      v13 = sub_100427DA8(a1, a2, (uint64_t)&v18);
    }
    while (!v13);
    v7 = v13;
  }
  v15 = (NSArray *)objc_msgSend(v6, "count");
  if (v15)
    v15 = +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v6);
  *a3 = v15;

  return v7 == 1;
}

BOOL sub_1010D7DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  v10 = 0;
  v4 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(CLSerializablePredictedWalkDistanceBout, a2), a2, &v10);
  v5 = v10;
  if (v10)
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_1021A0548);
    v6 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to deserialize bout data: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_1021A0548);
      v11 = 138412290;
      v12 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 16, "Unable to deserialize bout data: %@", &v11, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLPredictedWalkDistanceBoutRecorderDb::dataBlobToEntry(NSData *, CLPredictedWalkDistanceBoutEntry &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    objc_msgSend(v4, "getPredictedWalkDistanceBout:", a3);
  }
  return v5 == 0;
}

void sub_1010D7FC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(*(_QWORD *)(a1 + 80)))
  {
    sub_100634364(*(_QWORD *)(a1 + 80), "PredictedWalkDistanceBoutHistory", (const char **)&qword_10230C530, (const std::string::value_type **)&qword_10230C770, 0);
    *(_QWORD *)(a1 + 432) = sub_10063D314(*(_QWORD *)(a1 + 80), "INSERT INTO PredictedWalkDistanceBoutHistory (startTime, endTime, stepCount, distance, activeTime, elevationAscended, elevationDescended, stepCountGPS, distanceGPS, boutType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(_QWORD *)(a1 + 440) = v2;
    *(_QWORD *)(a1 + 448) = sub_10063D314(*(_QWORD *)(a1 + 80), "UPDATE PredictedWalkDistanceBoutHistory SET startTime = ?, endTime = ?, stepCount = ?, distance = ?, activeTime = ?, elevationAscended = ?, elevationDescended = ?, stepCountGPS = ?, distanceGPS = ?, boutType = ? WHERE id = ?");
    *(_QWORD *)(a1 + 456) = v3;
    *(_QWORD *)(a1 + 464) = sub_10063D314(*(_QWORD *)(a1 + 80), "DELETE FROM PredictedWalkDistanceBoutHistory WHERE id = ?");
    *(_QWORD *)(a1 + 472) = v4;
    *(_QWORD *)(a1 + 480) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM PredictedWalkDistanceBoutHistory ORDER BY startTime DESC LIMIT 1");
    *(_QWORD *)(a1 + 488) = v5;
    *(_QWORD *)(a1 + 496) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM PredictedWalkDistanceBoutHistory");
    *(_QWORD *)(a1 + 504) = v6;
    *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  }
  else
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_1021A0548);
    v7 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLPredictedWalkDistanceBoutRecorderDb: Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_1021A0548);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "CLPredictedWalkDistanceBoutRecorderDb: Device is locked and we are unable to open the database", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPredictedWalkDistanceBoutRecorderDb::prepareSQLStatements()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

uint64_t sub_1010D81F4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  uint64_t v15;
  sqlite3_stmt *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  void *v21;
  NSObject *v22;
  const char *v23;
  uint8_t *v24;
  _QWORD v25[5];
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  uint8_t buf[16];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 432), &v36);
    if (v36)
    {
      v5 = (sqlite3_stmt *)sub_100026CC8(v36);
      if (sub_1000890C4(v5, 1, *(double *)(a2 + 8)))
      {
        v6 = (sqlite3_stmt *)sub_100026CC8(v36);
        if (sub_1000890C4(v6, 2, *(double *)(a2 + 16)))
        {
          v7 = (sqlite3_stmt *)sub_100026CC8(v36);
          if (sub_10023C77C(v7, 3, *(_DWORD *)(a2 + 24)))
          {
            v8 = (sqlite3_stmt *)sub_100026CC8(v36);
            if (sub_1000890C4(v8, 4, *(double *)(a2 + 32)))
            {
              v9 = (sqlite3_stmt *)sub_100026CC8(v36);
              if (sub_1000890C4(v9, 5, *(double *)(a2 + 40)))
              {
                v10 = (sqlite3_stmt *)sub_100026CC8(v36);
                if (sub_10023C77C(v10, 6, *(_DWORD *)(a2 + 48)))
                {
                  v11 = (sqlite3_stmt *)sub_100026CC8(v36);
                  if (sub_10023C77C(v11, 7, *(_DWORD *)(a2 + 52)))
                  {
                    v12 = (sqlite3_stmt *)sub_100026CC8(v36);
                    if (sub_10023C77C(v12, 8, *(_DWORD *)(a2 + 56)))
                    {
                      v13 = (sqlite3_stmt *)sub_100026CC8(v36);
                      if (sub_1000890C4(v13, 9, *(double *)(a2 + 64)))
                      {
                        v14 = (sqlite3_stmt *)sub_100026CC8(v36);
                        if (sub_1000CD75C(v14, 10, *(_DWORD *)(a2 + 72)))
                        {
                          v15 = *(_QWORD *)(a1 + 80);
                          v16 = (sqlite3_stmt *)sub_100026CC8(v36);
                          sub_10023C9B0(v15, v16);
                          ++*(_DWORD *)(a1 + 132);
                          if (*(_QWORD *)(a1 + 520))
                          {
                            if (*(_QWORD *)(a1 + 512))
                            {
                              v17 = *(_OWORD *)(a2 + 84);
                              v41 = *(_OWORD *)(a2 + 68);
                              v42 = v17;
                              v43 = *(_OWORD *)(a2 + 100);
                              v44 = *(_DWORD *)(a2 + 116);
                              v18 = *(_OWORD *)(a2 + 20);
                              *(_OWORD *)buf = *(_OWORD *)(a2 + 4);
                              v38 = v18;
                              v19 = *(_OWORD *)(a2 + 52);
                              v39 = *(_OWORD *)(a2 + 36);
                              v40 = v19;
                              v20 = sub_10063E99C(*(_QWORD *)(a1 + 80));
                              v25[1] = 3221225472;
                              v31 = v41;
                              v32 = v42;
                              v33 = v43;
                              v27 = *(_OWORD *)buf;
                              v28 = v38;
                              v29 = v39;
                              v21 = *(void **)(a1 + 520);
                              v25[0] = _NSConcreteStackBlock;
                              v25[2] = sub_1010D85C4;
                              v25[3] = &unk_1021A04A8;
                              v25[4] = a1;
                              v26 = v20;
                              v34 = v44;
                              v30 = v40;
                              objc_msgSend(v21, "async:", v25);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_1021A0548);
      v22 = qword_10229FEA8;
      if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "PredictedWalkDistanceBoutRecorderDb: failed to prepare insert #InvalidPreparedSQLStatement", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_1021A0548);
        v35 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 17, "PredictedWalkDistanceBoutRecorderDb: failed to prepare insert #InvalidPreparedSQLStatement", &v35, 2);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLPredictedWalkDistanceBoutRecorderDb::insertRecordUL(const CLPredictedWalkDistanceBoutEntry &, BOOL)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
    }
    result = v36;
    v36 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1010D8590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a32)
    (*(void (**)(uint64_t))(*(_QWORD *)a32 + 8))(a32);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010D85C4(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[7];
  uint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 512);
  v2 = *(_OWORD *)(a1 + 120);
  v6[4] = *(_OWORD *)(a1 + 104);
  v6[5] = v2;
  v6[6] = *(_OWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 152);
  v3 = *(_OWORD *)(a1 + 56);
  v4 = *(_OWORD *)(a1 + 88);
  v6[2] = *(_OWORD *)(a1 + 72);
  v6[3] = v4;
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v6);
}

uint64_t sub_1010D8628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  __int128 v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 480), &v15);
  v7 = 0;
  v13 = 0;
  v14 = 0;
  v8 = 0uLL;
  v9 = 0;
  v11 = 0;
  v10 = 0uLL;
  v12 = 0;
  v4 = sub_1010D7764(&v15, (uint64_t)&v7);
  if (!(_DWORD)v4)
  {
    *(_DWORD *)a2 = v7;
    *(_OWORD *)(a2 + 8) = v8;
    *(_DWORD *)(a2 + 24) = v9;
    *(_OWORD *)(a2 + 32) = v10;
    *(_QWORD *)(a2 + 48) = v11;
    *(_DWORD *)(a2 + 56) = v12;
    *(_QWORD *)(a2 + 64) = v13;
    *(_DWORD *)(a2 + 72) = v14;
  }
  v5 = v15;
  v15 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v4;
}

void sub_1010D8700(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  *(_QWORD *)(v1 - 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

double sub_1010D8724(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double result;
  int v5;
  __int128 v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  double v11;
  int v12;

  v5 = 0;
  v11 = 0.0;
  v12 = 0;
  v6 = 0uLL;
  v7 = 0;
  v9 = 0;
  v8 = 0uLL;
  v10 = 0;
  sub_1010D87B4(a2, (uint64_t)&v5);
  *(_DWORD *)a3 = v5;
  *(_OWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 24) = v7;
  *(_OWORD *)(a3 + 32) = v8;
  *(_QWORD *)(a3 + 48) = v9;
  *(_DWORD *)(a3 + 56) = v10;
  result = v11;
  *(double *)(a3 + 64) = v11;
  *(_DWORD *)(a3 + 72) = v12;
  return result;
}

uint64_t sub_1010D87B4(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v4, 0);
  v5 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v7, 3);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 4);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 5);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 48) = sqlite3_column_int(v10, 6);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 52) = sqlite3_column_int(v11, 7);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 56) = sqlite3_column_int(v12, 8);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v13, 9);
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  result = sqlite3_column_int(v14, 10);
  *(_DWORD *)(a2 + 72) = result;
  return result;
}

uint64_t sub_1010D88B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[3];
  __int16 v10;
  uint8_t buf[8];

  v3 = a1 + 112;
  v2 = *(_QWORD *)(a1 + 112);
  v4 = a1 + 72;
  v9[1] = a1 + 112;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
  v10 = 256;
  if ((sub_10008950C(v4) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from PredictedWalkDistanceBoutHistory ORDER BY startTime ASC");
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021A0568);
  v5 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "PredictedWalkDistanceBoutHistory not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0568);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "PredictedWalkDistanceBoutHistory not accessible", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual CMError CLPredictedWalkDistanceBoutRecorderDb::queryBoutAllRecords(std::vector<CLPredictedWalkDistanceBoutEntry> &) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return 109;
}

void sub_1010D8CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D8D34(uint64_t a1)
{
  return sub_1010D88B0(a1 - 424);
}

uint64_t sub_1010D8D3C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10193EC24(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1010D90C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  sub_1018B38B4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D9128(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_10193ED90(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_1010D94F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D9558(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021A0680);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A0680);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A0680);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1010D9B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1010D9B70(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  result = (__n128)a3[4];
  v7 = a3[5];
  v8 = a3[6];
  *(_QWORD *)(a2 + 112) = *((_QWORD *)a3 + 14);
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  *(__n128 *)(a2 + 64) = result;
  return result;
}

id *sub_1010D9B9C(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  double v36;
  int v37;
  double v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  id v49[2];
  int v50;
  double v51;
  __int16 v52;
  uint64_t v53;
  uint8_t buf[4];
  double v55;
  __int16 v56;
  uint64_t v57;

  v49[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v49[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v49);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v37 = 0;
  v38 = 0.0;
  v39 = 0;
  v40 = 0;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v44 = 0;
  v47 = 0u;
  v48 = 0;
  v45 = 0u;
  v46 = 0u;
  v6 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, &v37);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A0680);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A0680);
        LOWORD(v50) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v50, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 1);
    v8 = v38;
    v9 = v7 - v38;
    if (v7 - v38 < 0.0)
      v9 = -(v7 - v38);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A0680);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        v55 = v38;
        v56 = 2050;
        v57 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A0680);
        v28 = *((_QWORD *)a2 + 1);
        v50 = 134349312;
        v51 = v38;
        v52 = 2050;
        v53 = v28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v50, 22);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 1);
      v8 = v38;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A0680);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          v55 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021A0680);
          v31 = *((double *)a2 + 1);
          v50 = 134217984;
          v51 = v31;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v50));
          v33 = (uint8_t *)v32;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v32);
          if (v33 != buf)
            free(v33);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v36 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021A0680);
        v18 = v36;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v55 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A0680);
        v50 = 134217984;
        v51 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v50));
        v35 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, int *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, &v37, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[1];
  v23 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
  v24 = a2[4];
  v25 = a2[5];
  v26 = a2[6];
  *(_QWORD *)(a1 + 336) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 304) = v25;
  *(_OWORD *)(a1 + 320) = v26;
  *(_OWORD *)(a1 + 288) = v24;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v49);
}

void sub_1010DA330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  sub_100131740(&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_1010DA35C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10193EEFC(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1010DA5BC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10193F068(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1010DA7F4(uint64_t a1)
{
  return sub_1010D9558(a1 - 72);
}

void sub_1010DA7FC(id a1)
{
  qword_10229FEA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

void sub_1010DA828(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1010DA854(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10193F1D4(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1010DAA7C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1010DAAA8()
{
  qword_10230C530 = (uint64_t)"id";
  dword_10230C538 = 1;
  word_10230C53C = 257;
  byte_10230C540 = 0;
  byte_10230C558 = 0;
  qword_10230C560 = (uint64_t)"startTime";
  dword_10230C568 = 2;
  word_10230C56C = 0;
  byte_10230C570 = 0;
  byte_10230C588 = 0;
  qword_10230C590 = (uint64_t)"endTime";
  dword_10230C598 = 2;
  word_10230C59C = 0;
  byte_10230C5A0 = 0;
  byte_10230C5B8 = 0;
  qword_10230C5C0 = (uint64_t)"stepCount";
  dword_10230C5C8 = 1;
  word_10230C5CC = 0;
  byte_10230C5D0 = 0;
  byte_10230C5E8 = 0;
  qword_10230C5F0 = (uint64_t)"distance";
  dword_10230C5F8 = 2;
  word_10230C5FC = 0;
  byte_10230C600 = 0;
  byte_10230C618 = 0;
  qword_10230C620 = (uint64_t)"activeTime";
  dword_10230C628 = 2;
  word_10230C62C = 0;
  byte_10230C630 = 0;
  byte_10230C648 = 0;
  qword_10230C650 = (uint64_t)"elevationAscended";
  dword_10230C658 = 1;
  word_10230C65C = 0;
  byte_10230C660 = 0;
  byte_10230C678 = 0;
  qword_10230C680 = (uint64_t)"elevationDescended";
  dword_10230C688 = 1;
  word_10230C68C = 0;
  byte_10230C690 = 0;
  byte_10230C6A8 = 0;
  qword_10230C6B0 = (uint64_t)"stepCountGPS";
  dword_10230C6B8 = 1;
  word_10230C6BC = 0;
  byte_10230C6C0 = 0;
  byte_10230C6D8 = 0;
  qword_10230C6E0 = (uint64_t)"distanceGPS";
  dword_10230C6E8 = 2;
  word_10230C6EC = 0;
  byte_10230C6F0 = 0;
  byte_10230C708 = 0;
  qword_10230C710 = (uint64_t)"boutType";
  dword_10230C718 = 1;
  word_10230C71C = 0;
  byte_10230C720 = 0;
  byte_10230C738 = 0;
  qword_10230C740 = 0;
  dword_10230C748 = 5;
  word_10230C74C = 0;
  byte_10230C750 = 0;
  byte_10230C768 = 0;
  qword_10230C770 = (uint64_t)"startTime";
  *(_QWORD *)algn_10230C778 = 0;
}

uint64_t sub_1010DAC18(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  __int128 v8;

  *(_QWORD *)a1 = off_1021A06B0;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (_BYTE *)(a1 + 24);
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(v7, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a1 + 48) = 0x600000006;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q0;
  *(_WORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 114) = 1;
  return a1;
}

void sub_1010DACBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010DACD0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1021A06B0;
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  sub_100261F44(a1 + 8);
  return a1;
}

void sub_1010DAD2C(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v4;
  int v6;
  int v7;

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((_BYTE *)a2 + 23) != 6)
    {
      v2 = a2;
      if (*((_BYTE *)a2 + 23) != 8)
        goto LABEL_27;
      goto LABEL_17;
    }
    if (*(_DWORD *)a2 != 1886218611 || *((_WORD *)a2 + 2) != 25964)
    {
      if (*(_DWORD *)a2 != 1919902579 || *((_WORD *)a2 + 2) != 25701)
LABEL_27:
        operator new();
LABEL_29:
      operator new();
    }
LABEL_28:
    operator new();
  }
  v3 = a2[1];
  if (v3 == 6)
  {
    v4 = (int *)*a2;
    if (*(_DWORD *)*a2 == 1886218611 && *(_WORD *)(*a2 + 4) == 25964)
      goto LABEL_28;
    v6 = *v4;
    v7 = *((unsigned __int16 *)v4 + 2);
    if (v6 == 1919902579 && v7 == 25701)
      goto LABEL_29;
    v3 = a2[1];
  }
  if (v3 != 8)
    goto LABEL_27;
  v2 = (_QWORD *)*a2;
LABEL_17:
  if (*v2 == 0x656C636974726170)
    operator new();
  goto LABEL_27;
}

void sub_1010DB038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1010DB0DC(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1[3].n128_u64[0] = *(_QWORD *)a2;
  if (&a1[3] != (__n128 *)a2)
    sub_1008AFA64(&a1[3].n128_i8[8], *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  result = *(__n128 *)(a2 + 32);
  a1[5] = result;
  return result;
}

BOOL sub_1010DB138(uint64_t a1, double a2)
{
  _DWORD *v2;

  v2 = (_DWORD *)(a1 + 48);
  return !sub_1002199F0(a1 + 48, a2, 6.0) && *v2 == 1;
}

double sub_1010DB178(uint64_t a1, uint64_t a2)
{
  double result;

  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 108);
  result = *(double *)(a1 + 100);
  *(double *)(a2 + 40) = result;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  return result;
}

uint64_t sub_1010DB194(uint64_t result, char a2)
{
  *(_BYTE *)(result + 96) = a2;
  return result;
}

void sub_1010DB19C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_1010DB1A4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1010DB1FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010DB21C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1010DB234(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1010DB274(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1010DB2CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010DB2EC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1010DB304(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1010DB344(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1010DB39C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010DB3BC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1010DB3D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1010DB8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010DB8CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

void sub_1010DB944(uint64_t a1)
{
  _QWORD v2[3];
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  sub_1010DD408((uint64_t)v2);
  v4 = xmmword_101C3FFD0;
  v5 = xmmword_101C3FFE0;
  v6 = xmmword_101C3FFF0;
  v7 = 0x4006A09E667F3BCCLL;
  swan::BatchedGNSSDataSmoother::Configure(a1, v2);
  sub_1010DBA3C(a1);
  v2[0] = off_102155C20;
  if (v3 < 0)
    operator delete((void *)v2[1]);
}

void sub_1010DBA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

double sub_1010DBA3C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021A0928);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 1960);
    *(_DWORD *)buf = 134283521;
    v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "GPSODOM,resetting storing distance %{private}.3lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A0928);
    v9 = *(_QWORD *)(a1 + 1960);
    v12 = 134283521;
    v13 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM,resetting storing distance %{private}.3lf", &v12, 12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometrySmoother::reset()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  *(double *)(a1 + 1952) = *(double *)(a1 + 1960) + *(double *)(a1 + 1952);
  v4 = *(void ***)(a1 + 1656);
  v5 = *(_QWORD *)(a1 + 1664);
  *(_QWORD *)(a1 + 1688) = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v4 = (void **)(*(_QWORD *)(a1 + 1656) + 8);
      *(_QWORD *)(a1 + 1656) = v4;
      v6 = *(_QWORD *)(a1 + 1664) - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v7 = 8;
    goto LABEL_12;
  }
  if (v6 >> 3 == 2)
  {
    v7 = 16;
LABEL_12:
    *(_QWORD *)(a1 + 1680) = v7;
  }
  *(_QWORD *)(a1 + 1984) = 0xBFF0000000000000;
  result = 0.0;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_BYTE *)(a1 + 1944) = 0;
  return result;
}

uint64_t sub_1010DBC74(uint64_t a1)
{
  *(_QWORD *)a1 = off_102155C20;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

double sub_1010DBCB4(uint64_t a1)
{
  return *(double *)(a1 + 1968) + *(double *)(a1 + 1952);
}

double sub_1010DBCC4(uint64_t a1)
{
  return *(double *)(a1 + 1984);
}

BOOL sub_1010DBCCC(__int128 *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  float64x2_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v9 = *a1;
  v10 = *((_QWORD *)a1 + 2);
  v5 = cnnavigation::ECEFToLLA(&v9, 1, &v7);
  if (!v5)
  {
    *(float64x2_t *)(a3 + 8) = vdivq_f64(vmulq_f64(v7, (float64x2_t)vdupq_n_s64(0x4066800000000000uLL)), (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL));
    *(_QWORD *)(a3 + 64) = v8;
    *(double *)(a3 + 48) = sqrt(*((double *)a1 + 4) * *((double *)a1 + 4) + *((double *)a1 + 3) * *((double *)a1 + 3));
  }
  return v5 == 0;
}

uint64_t sub_1010DBD98(uint64_t a1, double *a2)
{
  double v2;
  double v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  __int128 *v15;
  unint64_t v16;
  char *v17;
  __int128 *v18;
  int v19;
  unint64_t v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  uint64_t i;
  _OWORD *v25;
  _OWORD *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  char *v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t j;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  NSObject *v63;
  uint64_t v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  NSObject *v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  NSObject *v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  NSObject *v93;
  const char *v94;
  const char *v95;
  uint8_t *v96;
  const char *v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint8_t *v103;
  const char *v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint8_t *v112;
  uint64_t v113;
  __int16 v114[8];
  void *v115[3];
  uint64_t v116;
  int v117;
  void *__p;
  char *v119;
  char *v120;
  void *v121;
  void *v122;
  uint64_t v123;
  void *v124;
  void *v125;
  uint64_t v126;
  void *v127[3];
  void *v128;
  void *v129;
  uint64_t v130;
  void *v131;
  void *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  _BYTE v137[32];
  _BYTE v138[32];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint8_t buf[4];
  double v152;
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  uint64_t v156;
  __int16 v157;
  double v158;
  __int16 v159;
  double v160;
  __int16 v161;
  double v162;
  __int16 v163;
  uint64_t v164;

  v2 = *(double *)(a1 + 1968);
  *(double *)(a1 + 1960) = v2;
  *(_QWORD *)(a1 + 1984) = 0xBFF0000000000000;
  if (a2[14] > 0.0 && a2[30] > 0.0)
  {
    if (a2[9] <= 0.0)
      v5 = 0.0;
    else
      v5 = a2[8];
    v6 = a1 + 1648;
    sub_1010DCFF8((_QWORD *)(a1 + 1648), (__int128 *)a2);
    v7 = *(_QWORD *)(a1 + 1688);
    if (v7 == 1)
      return 1;
    v10 = *(_QWORD *)(a1 + 1688);
    if (v7 >= 0x3D)
    {
      v11 = *(_QWORD *)(a1 + 1680);
      *(_QWORD *)(a1 + 1688) = v7 - 1;
      *(_QWORD *)(a1 + 1680) = v11 + 1;
      sub_100A0FA18(v6, 1);
      v10 = *(_QWORD *)(a1 + 1688);
    }
    v134 = 0;
    v135 = 0;
    v136 = 0;
    sub_100407BF8(&v134, v10);
    v131 = 0;
    v132 = 0;
    v133 = 0;
    sub_100407BF8(&v131, v10);
    v128 = 0;
    v129 = 0;
    v130 = 0;
    sub_1002778C8(&v128, v10);
    memset(v127, 0, sizeof(v127));
    sub_1002FFF40((char **)v127, v10);
    v124 = 0;
    v125 = 0;
    v126 = 0;
    sub_1010DD0C8(&v124, v10);
    v121 = 0;
    v122 = 0;
    v123 = 0;
    sub_1010DD1A4(&v121, v10);
    __p = 0;
    v119 = 0;
    v120 = 0;
    sub_1010DD2A8(&__p, 0x3CuLL);
    v117 = 0;
    v116 = 0;
    v12 = *(_QWORD *)(a1 + 1656);
    v13 = *(_QWORD *)(a1 + 1680);
    v14 = (char *)(v12 + 8 * (v13 >> 4));
    if (*(_QWORD *)(a1 + 1664) == v12)
    {
      v15 = 0;
      v18 = 0;
      v17 = (char *)(v12 + 8 * ((*(_QWORD *)(a1 + 1688) + v13) >> 4));
    }
    else
    {
      v15 = (__int128 *)(*(_QWORD *)v14 + 248 * (*(_QWORD *)(a1 + 1680) & 0xFLL));
      v16 = *(_QWORD *)(a1 + 1688) + v13;
      v17 = (char *)(v12 + 8 * (v16 >> 4));
      v18 = (__int128 *)(*(_QWORD *)v17 + 248 * (v16 & 0xF));
    }
    sub_1010DE0F4((uint64_t)v115, v14, v15, v17, v18);
    v19 = swan::BatchedGNSSDataSmoother::Run(a1, v115, v10, &v117, &v134, &v131, &v128, &v124, &v121, &v116, v127);
    if (v19 | v117)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A0928);
      v21 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "GPSODOM,smoother is unhealthy", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021A0928);
        *(_WORD *)v137 = 0;
        LODWORD(v113) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM,smoother is unhealthy", v137, v113);
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometrySmoother::update(const swan::stGPSsa &)", "%s\n", v22);
LABEL_120:
        if (v23 != buf)
          free(v23);
        goto LABEL_65;
      }
      goto LABEL_65;
    }
    if (v116 != v10)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A0928);
      v63 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&v152 = v10 - v116;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "GPSODOM,samples rejected,%{public}lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021A0928);
        *(_DWORD *)v137 = 134349056;
        *(_QWORD *)&v137[4] = v10 - v116;
        LODWORD(v113) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM,samples rejected,%{public}lu", v137, v113);
        v23 = (uint8_t *)v97;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometrySmoother::update(const swan::stGPSsa &)", "%s\n", v97);
        goto LABEL_120;
      }
      goto LABEL_65;
    }
    if (v10)
    {
      for (i = 0; i != v10; ++i)
      {
        if (!sub_1010DBCCC((__int128 *)v124 + 3 * i, v20, (uint64_t)v137))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021A0928);
          v92 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "GPSODOM,Conversion Failed", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021A0928);
            v114[0] = 0;
            LODWORD(v113) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM,Conversion Failed", v114, v113);
            v105 = (uint8_t *)v104;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometrySmoother::update(const swan::stGPSsa &)", "%s\n", v104);
            if (v105 != buf)
              free(v105);
          }
          sub_1010DBA3C(a1);
          goto LABEL_66;
        }
        v25 = v119;
        if (v119 >= v120)
        {
          v26 = __p;
          v27 = 0xEF7BDEF7BDEF7BDFLL * ((v119 - (_BYTE *)__p) >> 3);
          v28 = v27 + 1;
          if (v27 + 1 > 0x108421084210842)
            sub_100259694();
          if (0xDEF7BDEF7BDEF7BELL * ((v120 - (_BYTE *)__p) >> 3) > v28)
            v28 = 0xDEF7BDEF7BDEF7BELL * ((v120 - (_BYTE *)__p) >> 3);
          if (0xEF7BDEF7BDEF7BDFLL * ((v120 - (_BYTE *)__p) >> 3) >= 0x84210842108421)
            v20 = 0x108421084210842;
          else
            v20 = v28;
          if (v20)
          {
            v29 = (char *)sub_10091CA64((uint64_t)&v120, v20);
            v26 = __p;
            v25 = v119;
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[248 * v27];
          *((_OWORD *)v30 + 12) = v147;
          *((_OWORD *)v30 + 13) = v148;
          *((_OWORD *)v30 + 14) = v149;
          *((_QWORD *)v30 + 30) = v150;
          *((_OWORD *)v30 + 8) = v143;
          *((_OWORD *)v30 + 9) = v144;
          *((_OWORD *)v30 + 10) = v145;
          *((_OWORD *)v30 + 11) = v146;
          *((_OWORD *)v30 + 4) = v139;
          *((_OWORD *)v30 + 5) = v140;
          *((_OWORD *)v30 + 6) = v141;
          *((_OWORD *)v30 + 7) = v142;
          *(_OWORD *)v30 = *(_OWORD *)v137;
          *((_OWORD *)v30 + 1) = *(_OWORD *)&v137[16];
          *((_OWORD *)v30 + 2) = *(_OWORD *)v138;
          *((_OWORD *)v30 + 3) = *(_OWORD *)&v138[16];
          if (v25 == v26)
          {
            v44 = &v29[248 * v27];
          }
          else
          {
            v31 = &v29[248 * v27];
            do
            {
              v32 = *(_OWORD *)((char *)v25 - 248);
              v33 = *(_OWORD *)((char *)v25 - 232);
              v34 = *(_OWORD *)((char *)v25 - 216);
              *(_OWORD *)(v31 - 200) = *(_OWORD *)((char *)v25 - 200);
              *(_OWORD *)(v31 - 216) = v34;
              *(_OWORD *)(v31 - 232) = v33;
              *(_OWORD *)(v31 - 248) = v32;
              v35 = *(_OWORD *)((char *)v25 - 184);
              v36 = *(_OWORD *)((char *)v25 - 168);
              v37 = *(_OWORD *)((char *)v25 - 152);
              *(_OWORD *)(v31 - 136) = *(_OWORD *)((char *)v25 - 136);
              *(_OWORD *)(v31 - 152) = v37;
              *(_OWORD *)(v31 - 168) = v36;
              *(_OWORD *)(v31 - 184) = v35;
              v38 = *(_OWORD *)((char *)v25 - 120);
              v39 = *(_OWORD *)((char *)v25 - 104);
              v40 = *(_OWORD *)((char *)v25 - 88);
              *(_OWORD *)(v31 - 72) = *(_OWORD *)((char *)v25 - 72);
              *(_OWORD *)(v31 - 88) = v40;
              *(_OWORD *)(v31 - 104) = v39;
              *(_OWORD *)(v31 - 120) = v38;
              v41 = *(_OWORD *)((char *)v25 - 56);
              v42 = *(_OWORD *)((char *)v25 - 40);
              v43 = *(_OWORD *)((char *)v25 - 24);
              v44 = v31 - 248;
              *((_QWORD *)v31 - 1) = *((_QWORD *)v25 - 1);
              *(_OWORD *)(v31 - 24) = v43;
              *(_OWORD *)(v31 - 40) = v42;
              *(_OWORD *)(v31 - 56) = v41;
              v25 = (_OWORD *)((char *)v25 - 248);
              v31 -= 248;
            }
            while (v25 != v26);
          }
          v45 = v30 + 248;
          __p = v44;
          v119 = v30 + 248;
          v120 = &v29[248 * v20];
          if (v26)
            operator delete(v26);
          v119 = v45;
        }
        else
        {
          *((_OWORD *)v119 + 12) = v147;
          v25[13] = v148;
          v25[14] = v149;
          *((_QWORD *)v25 + 30) = v150;
          v25[8] = v143;
          v25[9] = v144;
          v25[10] = v145;
          v25[11] = v146;
          v25[4] = v139;
          v25[5] = v140;
          v25[6] = v141;
          v25[7] = v142;
          *v25 = *(_OWORD *)v137;
          v25[1] = *(_OWORD *)&v137[16];
          v25[2] = *(_OWORD *)v138;
          v25[3] = *(_OWORD *)&v138[16];
          v119 = (char *)v25 + 248;
        }
      }
      if (v7 > 0x3C)
        goto LABEL_85;
      v46 = 0.0;
      v47 = 0.0;
      if (v10 >= 2)
      {
        v48 = 264;
        for (j = 1; j != v10; ++j)
        {
          v46 = v46
              + sub_10011E634((double *)(a1 + 1992), *(double *)((char *)__p + v48 - 256), *(double *)((char *)__p + v48 - 248), *(double *)((char *)__p + v48 - 8), *(double *)((char *)__p + v48), v5);
          if (v10 == 60 && j == 30)
          {
            v50 = __p;
            v51 = *((_OWORD *)__p + 466);
            v52 = *((_OWORD *)__p + 468);
            v53 = *((_OWORD *)__p + 465);
            *(_OWORD *)(a1 + 1728) = *((_OWORD *)__p + 467);
            *(_OWORD *)(a1 + 1744) = v52;
            *(_OWORD *)(a1 + 1696) = v53;
            *(_OWORD *)(a1 + 1712) = v51;
            v54 = v50[470];
            v55 = v50[472];
            v56 = v50[469];
            *(_OWORD *)(a1 + 1792) = v50[471];
            *(_OWORD *)(a1 + 1808) = v55;
            *(_OWORD *)(a1 + 1760) = v56;
            *(_OWORD *)(a1 + 1776) = v54;
            v57 = v50[474];
            v58 = v50[476];
            v59 = v50[473];
            *(_OWORD *)(a1 + 1856) = v50[475];
            *(_OWORD *)(a1 + 1872) = v58;
            *(_OWORD *)(a1 + 1824) = v59;
            *(_OWORD *)(a1 + 1840) = v57;
            v60 = v50[478];
            v61 = v50[479];
            v62 = v50[477];
            *(_QWORD *)(a1 + 1936) = *((_QWORD *)v50 + 960);
            *(_OWORD *)(a1 + 1904) = v60;
            *(_OWORD *)(a1 + 1920) = v61;
            *(_OWORD *)(a1 + 1888) = v62;
            *(_BYTE *)(a1 + 1944) = 1;
            *(double *)(a1 + 1976) = v46;
            v46 = 0.0;
          }
          v48 += 248;
        }
        v47 = 0.0;
      }
    }
    else
    {
      v46 = 0.0;
      v47 = 0.0;
      if (v7 > 0x3C)
      {
LABEL_85:
        if (!*(_BYTE *)(a1 + 1944))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021A0928);
          v93 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, "GPSODOM,Invalid prior location", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021A0928);
            *(_WORD *)v137 = 0;
            LODWORD(v113) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM,Invalid prior location", v137, v113);
            v23 = (uint8_t *)v94;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometrySmoother::update(const swan::stGPSsa &)", "%s\n", v94);
            goto LABEL_120;
          }
LABEL_65:
          sub_1010DBA3C(a1);
LABEL_66:
          v8 = 0;
          goto LABEL_67;
        }
        v46 = 0.0;
        v65 = -7192;
        do
        {
          v46 = v46
              + sub_10011E634((double *)(a1 + 1992), *(double *)((char *)__p + v65 + 14640), *(double *)((char *)__p + v65 + 14648), *(double *)((char *)__p + v65 + 14888), *(double *)((char *)__p + v65 + 14896), v5);
          v65 += 248;
        }
        while (v65);
        v47 = sub_10011E634((double *)(a1 + 1992), *(double *)(a1 + 1704), *(double *)(a1 + 1712), *((double *)__p + 931), *((double *)__p + 932), v5);
        *(double *)(a1 + 1976) = v47 + *(double *)(a1 + 1976);
        v66 = __p;
        v67 = *((_OWORD *)__p + 466);
        v68 = *((_OWORD *)__p + 467);
        v69 = *((_OWORD *)__p + 468);
        *(_OWORD *)(a1 + 1696) = *((_OWORD *)__p + 465);
        *(_OWORD *)(a1 + 1744) = v69;
        *(_OWORD *)(a1 + 1728) = v68;
        *(_OWORD *)(a1 + 1712) = v67;
        v70 = v66[470];
        v71 = v66[471];
        v72 = v66[472];
        *(_OWORD *)(a1 + 1760) = v66[469];
        *(_OWORD *)(a1 + 1808) = v72;
        *(_OWORD *)(a1 + 1792) = v71;
        *(_OWORD *)(a1 + 1776) = v70;
        v73 = v66[474];
        v74 = v66[475];
        v75 = v66[476];
        *(_OWORD *)(a1 + 1824) = v66[473];
        *(_OWORD *)(a1 + 1872) = v75;
        *(_OWORD *)(a1 + 1856) = v74;
        *(_OWORD *)(a1 + 1840) = v73;
        v76 = v66[478];
        v77 = v66[479];
        v78 = *((_QWORD *)v66 + 960);
        *(_OWORD *)(a1 + 1888) = v66[477];
        *(_QWORD *)(a1 + 1936) = v78;
        *(_OWORD *)(a1 + 1920) = v77;
        *(_OWORD *)(a1 + 1904) = v76;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021A0928);
        v79 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v80 = *((double *)v115[0] + 930);
          v81 = *(_QWORD *)(a1 + 1704);
          v82 = *(_QWORD *)(a1 + 1712);
          v83 = *(double *)(a1 + 1760);
          v84 = *(double *)(a1 + 1744);
          *(_DWORD *)buf = 134284545;
          v152 = v80;
          v153 = 2049;
          v154 = v81;
          v155 = 2049;
          v156 = v82;
          v157 = 2049;
          v158 = v83;
          v159 = 2050;
          v160 = v84;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "GPSODOM,time,%{private}.3lf,lat,%{private}.10lf,lon,%{private}.10lf,altWGS84,%{private}.3lf,horizontalSpeed,%{public}.3lf", buf, 0x34u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021A0928);
          v106 = *((_QWORD *)v115[0] + 930);
          v107 = *(_QWORD *)(a1 + 1704);
          v108 = *(_QWORD *)(a1 + 1712);
          v109 = *(_QWORD *)(a1 + 1760);
          v110 = *(_QWORD *)(a1 + 1744);
          *(_DWORD *)v137 = 134284545;
          *(_QWORD *)&v137[4] = v106;
          *(_WORD *)&v137[12] = 2049;
          *(_QWORD *)&v137[14] = v107;
          *(_WORD *)&v137[22] = 2049;
          *(_QWORD *)&v137[24] = v108;
          *(_WORD *)v138 = 2049;
          *(_QWORD *)&v138[2] = v109;
          *(_WORD *)&v138[10] = 2050;
          *(_QWORD *)&v138[12] = v110;
          LODWORD(v113) = 52;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,time,%{private}.3lf,lat,%{private}.10lf,lon,%{private}.10lf,altWGS84,%{private}.3lf,horizontalSpeed,%{public}.3lf", v137, v113);
          v112 = (uint8_t *)v111;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometrySmoother::update(const swan::stGPSsa &)", "%s\n", v111);
          if (v112 != buf)
            free(v112);
        }
      }
    }
    v85 = v46 + *(double *)(a1 + 1976);
    v86 = fmax(*(double *)(a1 + 1968), v85);
    *(double *)(a1 + 1968) = v86;
    *(double *)(a1 + 1984) = v86 - v2;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A0928);
    v87 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v88 = *a2;
      v89 = *(_QWORD *)(a1 + 1968);
      v90 = *(_QWORD *)(a1 + 1984);
      v91 = *(_QWORD *)(a1 + 1976);
      *(_DWORD *)buf = 134350592;
      v152 = v88;
      v153 = 2050;
      v154 = v89;
      v155 = 2050;
      v156 = v90;
      v157 = 2050;
      v158 = v85;
      v159 = 2050;
      v160 = v46;
      v161 = 2050;
      v162 = v47;
      v163 = 2050;
      v164 = v91;
      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "GPSODOM,time,%{public}.3lf,greatestD,%{public}.3lf,deltaGreatestD,%{public}.3lf,totalD,%{public}.3lf,windowD,%{public}.3lf,deltaD,%{public}.3lf,sumDeltaD,%{public}.3lf", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A0928);
      v98 = *a2;
      v99 = *(_QWORD *)(a1 + 1968);
      v100 = *(_QWORD *)(a1 + 1984);
      v101 = *(_QWORD *)(a1 + 1976);
      *(_DWORD *)v137 = 134350592;
      *(double *)&v137[4] = v98;
      *(_WORD *)&v137[12] = 2050;
      *(_QWORD *)&v137[14] = v99;
      *(_WORD *)&v137[22] = 2050;
      *(_QWORD *)&v137[24] = v100;
      *(_WORD *)v138 = 2050;
      *(double *)&v138[2] = v85;
      *(_WORD *)&v138[10] = 2050;
      *(double *)&v138[12] = v46;
      *(_WORD *)&v138[20] = 2050;
      *(double *)&v138[22] = v47;
      *(_WORD *)&v138[30] = 2050;
      *(_QWORD *)&v139 = v101;
      LODWORD(v113) = 72;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,time,%{public}.3lf,greatestD,%{public}.3lf,deltaGreatestD,%{public}.3lf,totalD,%{public}.3lf,windowD,%{public}.3lf,deltaD,%{public}.3lf,sumDeltaD,%{public}.3lf", v137, v113);
      v103 = (uint8_t *)v102;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometrySmoother::update(const swan::stGPSsa &)", "%s\n", v102);
      if (v103 != buf)
        free(v103);
    }
    v8 = 1;
LABEL_67:
    if (v115[0])
    {
      v115[1] = v115[0];
      operator delete(v115[0]);
    }
    if (__p)
    {
      v119 = (char *)__p;
      operator delete(__p);
    }
    if (v121)
    {
      v122 = v121;
      operator delete(v121);
    }
    if (v124)
    {
      v125 = v124;
      operator delete(v124);
    }
    if (v127[0])
      operator delete(v127[0]);
    if (v128)
    {
      v129 = v128;
      operator delete(v128);
    }
    if (v131)
    {
      v132 = v131;
      operator delete(v131);
    }
    if (v134)
    {
      v135 = v134;
      operator delete(v134);
    }
    return v8;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021A0928);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,GPSODOM,position missing speed information", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A0928);
    *(_WORD *)v137 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,GPSODOM,position missing speed information", v137, 2);
    v96 = (uint8_t *)v95;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometrySmoother::update(const swan::stGPSsa &)", "%s\n", v95);
    if (v96 != buf)
      free(v96);
  }
  return 0;
}

void sub_1010DCF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  if (a35)
    operator delete(a35);
  if (a38)
    operator delete(a38);
  _Unwind_Resume(exception_object);
}

__n128 sub_1010DCFF8(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  __int128 v19;
  __int128 v20;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 2 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1010DDD98(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 248 * (v7 & 0xF);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  v12 = a2[4];
  v13 = a2[5];
  v14 = a2[7];
  *(_OWORD *)(v8 + 96) = a2[6];
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 64) = v12;
  *(_OWORD *)(v8 + 80) = v13;
  v15 = a2[8];
  v16 = a2[9];
  v17 = a2[11];
  *(_OWORD *)(v8 + 160) = a2[10];
  *(_OWORD *)(v8 + 176) = v17;
  *(_OWORD *)(v8 + 128) = v15;
  *(_OWORD *)(v8 + 144) = v16;
  result = (__n128)a2[12];
  v19 = a2[13];
  v20 = a2[14];
  *(_QWORD *)(v8 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(v8 + 208) = v19;
  *(_OWORD *)(v8 + 224) = v20;
  *(__n128 *)(v8 + 192) = result;
  ++a1[5];
  return result;
}

void sub_1010DD0C8(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      sub_100259694();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 48;
    v6 = (char *)sub_100313718(v3, a2);
    v7 = &v6[48 * v5];
    v9 = &v6[48 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 3);
        v14 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v14;
        *((_OWORD *)v12 - 3) = v13;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1010DD1A4(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - (_BYTE *)*a1) >> 5) < a2)
  {
    if (a2 >= 0xE38E38E38E38E4)
      sub_100259694();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 288;
    v6 = (char *)sub_1010DE0AC(v3, a2);
    v7 = &v6[288 * v5];
    v9 = &v6[288 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v12 -= 288;
        v10 -= 288;
        memcpy(v12, v10, 0x120uLL);
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1010DD2A8(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xEF7BDEF7BDEF7BDFLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x108421084210843)
      sub_100259694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_10091CA64(v3, a2);
    v7 = &v6[248 * (v5 / 248)];
    v9 = &v6[248 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 248);
        v14 = *(_OWORD *)(v10 - 232);
        v15 = *(_OWORD *)(v10 - 216);
        *(_OWORD *)(v12 - 200) = *(_OWORD *)(v10 - 200);
        *(_OWORD *)(v12 - 216) = v15;
        *(_OWORD *)(v12 - 232) = v14;
        *(_OWORD *)(v12 - 248) = v13;
        v16 = *(_OWORD *)(v10 - 184);
        v17 = *(_OWORD *)(v10 - 168);
        v18 = *(_OWORD *)(v10 - 152);
        *(_OWORD *)(v12 - 136) = *(_OWORD *)(v10 - 136);
        *(_OWORD *)(v12 - 152) = v18;
        *(_OWORD *)(v12 - 168) = v17;
        *(_OWORD *)(v12 - 184) = v16;
        v19 = *(_OWORD *)(v10 - 120);
        v20 = *(_OWORD *)(v10 - 104);
        v21 = *(_OWORD *)(v10 - 88);
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v10 - 72);
        *(_OWORD *)(v12 - 88) = v21;
        *(_OWORD *)(v12 - 104) = v20;
        *(_OWORD *)(v12 - 120) = v19;
        v22 = *(_OWORD *)(v10 - 56);
        v23 = *(_OWORD *)(v10 - 40);
        v24 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v24;
        *(_OWORD *)(v12 - 40) = v23;
        *(_OWORD *)(v12 - 56) = v22;
        v12 -= 248;
        v10 -= 248;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1010DD408(uint64_t a1)
{
  *(_QWORD *)a1 = off_102155C20;
  sub_1015A2E04((_QWORD *)(a1 + 8), "");
  *(_QWORD *)a1 = off_1021A08E8;
  *(_WORD *)(a1 + 33) = 0;
  *(_BYTE *)(a1 + 35) = 0;
  *(_WORD *)(a1 + 291) = 0;
  *(_WORD *)(a1 + 548) = 0;
  *(_WORD *)(a1 + 805) = 0;
  *(_BYTE *)(a1 + 1062) = 0;
  *(_WORD *)(a1 + 1318) = 0;
  *(_BYTE *)(a1 + 1575) = 0;
  *(_QWORD *)(a1 + 1576) = 0x4014000000000000;
  *(_OWORD *)(a1 + 1584) = xmmword_101C40000;
  *(_OWORD *)(a1 + 1600) = xmmword_101C40010;
  *(_OWORD *)(a1 + 1616) = xmmword_101C3FFF0;
  *(_QWORD *)(a1 + 1632) = 0x4006A09E667F3BCCLL;
  return a1;
}

void sub_1010DD4BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_102155C20;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

uint64_t sub_1010DD50C(uint64_t a1)
{
  _BYTE *v2;
  _QWORD *v3;
  const std::locale::facet *v4;
  uint64_t v5;
  _BYTE *v6;
  const std::locale::facet *v7;
  _BYTE *v8;
  const std::locale::facet *v9;
  _BYTE *v10;
  const std::locale::facet *v11;
  _BYTE *v12;
  const std::locale::facet *v13;
  const std::locale::facet *v14;
  uint64_t v15;
  _BYTE *v17;
  const std::locale::facet *v18;
  std::locale v19;

  v2 = (_BYTE *)(a1 + 34);
  if ((sub_1010DDADC(a1, (char *)(a1 + 34), "use_input_locationd_data_file") & 1) != 0)
  {
    if (*v2 && (sub_100839194(a1, (char *)(a1 + 35), "input_locationd_data_file", "") & 1) == 0)
    {
      v3 = sub_100263F7C(&std::cout, (uint64_t)"Invalid input_locationd_batched_data_file", 41);
      std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
      v4 = std::locale::use_facet(&v19, &std::ctype<char>::id);
      v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
LABEL_29:
      v15 = v5;
      std::locale::~locale(&v19);
      std::ostream::put(v3, v15);
      std::ostream::flush(v3);
      return 0;
    }
  }
  else
  {
    *v2 = 0;
  }
  if ((sub_1010DDADC(a1, (char *)(a1 + 33), "load_batched_data_from_locationd") & 1) == 0)
    *(_BYTE *)(a1 + 33) = 0;
  v6 = (_BYTE *)(a1 + 291);
  if ((sub_1010DDADC(a1, (char *)(a1 + 291), "use_input_ascii_batched_data_file") & 1) != 0)
  {
    if (*v6 && (sub_100839194(a1, (char *)(a1 + 292), "input_ascii_batched_data_file", "") & 1) == 0)
    {
      v3 = sub_100263F7C(&std::cout, (uint64_t)"Invalid input_ascii_batched_data_file", 37);
      std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
      v7 = std::locale::use_facet(&v19, &std::ctype<char>::id);
      v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *v6 = 0;
  }
  v8 = (_BYTE *)(a1 + 548);
  if ((sub_1010DDADC(a1, (char *)(a1 + 548), "save_results_to_disk") & 1) != 0)
  {
    if (*v8 && (sub_100839194(a1, (char *)(a1 + 549), "save_results_path", "") & 1) == 0)
    {
      v3 = sub_100263F7C(&std::cout, (uint64_t)"Invalid save_results_path", 25);
      std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
      v9 = std::locale::use_facet(&v19, &std::ctype<char>::id);
      v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *v8 = 0;
  }
  v10 = (_BYTE *)(a1 + 805);
  if ((sub_1010DDADC(a1, (char *)(a1 + 805), "load_matlab_inputs") & 1) != 0)
  {
    if (*v10 && (sub_100839194(a1, (char *)(a1 + 806), "load_matlab_inputs_path", "") & 1) == 0)
    {
      v3 = sub_100263F7C(&std::cout, (uint64_t)"Invalid load_matlab_inputs_path", 31);
      std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
      v11 = std::locale::use_facet(&v19, &std::ctype<char>::id);
      v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *v10 = 0;
  }
  if ((sub_100839194(a1, (char *)(a1 + 1062), "temp_writable_path", "") & 1) == 0)
  {
    v3 = sub_100263F7C(&std::cout, (uint64_t)"Invalid temp_writable_path", 26);
    std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
    v14 = std::locale::use_facet(&v19, &std::ctype<char>::id);
    v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    goto LABEL_29;
  }
  v12 = (_BYTE *)(a1 + 1318);
  if ((sub_1010DDADC(a1, (char *)(a1 + 1318), "use_truth_reference") & 1) != 0)
  {
    if (*v12 && (sub_100839194(a1, (char *)(a1 + 1319), "truth_reference_filename", "") & 1) == 0)
    {
      v3 = sub_100263F7C(&std::cout, (uint64_t)"Invalid truth_reference_filename", 32);
      std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
      v13 = std::locale::use_facet(&v19, &std::ctype<char>::id);
      v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *v12 = 0;
  }
  v17 = (_BYTE *)(a1 + 1575);
  if ((sub_1010DDADC(a1, (char *)(a1 + 1575), "enable_data_editing") & 1) != 0)
  {
    if (*v17 && (sub_100839624(a1, (_QWORD *)(a1 + 1576), "data_editing_sigma_threshold") & 1) == 0)
    {
      *(_QWORD *)(a1 + 1576) = 0x4008000000000000;
      v3 = sub_100263F7C(&std::cout, (uint64_t)"Invalid data_editing_sigma_threshold", 36);
      std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
      v18 = std::locale::use_facet(&v19, &std::ctype<char>::id);
      v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *v17 = 0;
  }
  if ((sub_100839624(a1, (_QWORD *)(a1 + 1584), "horizontal_position_process_noise") & 1) == 0)
    *(_QWORD *)(a1 + 1584) = 0x3FF0000000000000;
  if ((sub_100839624(a1, (_QWORD *)(a1 + 1592), "vertical_position_process_noise") & 1) == 0)
    *(_QWORD *)(a1 + 1592) = 0x3FB999999999999ALL;
  if ((sub_100839624(a1, (_QWORD *)(a1 + 1600), "velocity_sigma_fudge_factor") & 1) == 0)
    *(_QWORD *)(a1 + 1600) = 0x3FF0000000000000;
  if ((sub_100839624(a1, (_QWORD *)(a1 + 1608), "vertical_speed_limit") & 1) == 0)
    *(_QWORD *)(a1 + 1608) = 0x4049000000000000;
  if ((sub_100839624(a1, (_QWORD *)(a1 + 1616), "minimum_single_component_speed_standard_deviation") & 1) == 0)
    *(_QWORD *)(a1 + 1616) = 0x3FD6A09E667F3BD1;
  if ((sub_100839624(a1, (_QWORD *)(a1 + 1624), "mimimum_driving_speed_that_requires_speed_uncertainty_inflation") & 1) == 0)
    *(_QWORD *)(a1 + 1624) = 0x4024000000000000;
  if ((sub_100839624(a1, (_QWORD *)(a1 + 1632), "minimum_driving_speed_standard_deviation") & 1) == 0)
    *(_QWORD *)(a1 + 1632) = 0x4006A09E667F3BCCLL;
  return 1;
}

void sub_1010DDAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1010DDADC(uint64_t a1, char *a2, const std::string::value_type *a3)
{
  int v4;
  uint64_t result;
  char __dst[256];

  v4 = a1;
  result = sub_100839194(a1, __dst, a3, "");
  if ((_DWORD)result)
    return sub_1010DDB5C(v4, a2, __dst);
  return result;
}

uint64_t sub_1010DDB5C(int a1, char *a2, char *__s)
{
  char *p_p;
  unsigned __int8 v5;
  char *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  _BOOL4 v15;
  void *__p;
  uint64_t v17;
  unsigned __int8 v18;

  if (!*__s)
  {
    v8 = 0;
    *a2 = 0;
    return v8;
  }
  p_p = (char *)&__p;
  sub_1015A2E04(&__p, __s);
  v5 = v18;
  if ((v18 & 0x80u) == 0)
    v6 = (char *)&__p + v18;
  else
    v6 = (char *)__p + v17;
  if ((v18 & 0x80u) != 0)
    p_p = (char *)__p;
  if (p_p != v6)
  {
    do
    {
      *p_p = __tolower(*p_p);
      ++p_p;
    }
    while (p_p != v6);
    v5 = v18;
  }
  if ((v5 & 0x80) != 0)
  {
    v9 = (unsigned __int8 *)__p;
    if (*(_BYTE *)__p == 49)
      goto LABEL_19;
    v11 = v17;
    if (v17 != 1)
    {
      if (v17 == 4 && *(_DWORD *)__p == 1702195828)
        goto LABEL_19;
      goto LABEL_29;
    }
    if (*(_BYTE *)__p == 121)
      goto LABEL_19;
LABEL_28:
    v9 = (unsigned __int8 *)__p;
    v11 = v17;
LABEL_29:
    if (v11 != 3 || (*(_WORD *)v9 == 25977 ? (v12 = v9[2] == 115) : (v12 = 0), !v12))
    {
      v7 = *v9;
      goto LABEL_39;
    }
    goto LABEL_19;
  }
  v7 = __p;
  if (__p == 49)
    goto LABEL_19;
  if (v5 == 1)
  {
    if (__p == 121)
      goto LABEL_19;
    if ((v5 & 0x80) == 0)
      goto LABEL_39;
    goto LABEL_28;
  }
  if (v5 != 3)
  {
    if (v5 != 4 || (_DWORD)__p != 1702195828)
      goto LABEL_39;
LABEL_19:
    v10 = 1;
LABEL_43:
    v8 = 1;
    goto LABEL_44;
  }
  if ((unsigned __int16)__p == 25977 && BYTE2(__p) == 115)
    goto LABEL_19;
LABEL_39:
  if (v7 == 48 || sub_100839084(&__p, "false") || sub_100839084(&__p, "n"))
  {
    v10 = 0;
    goto LABEL_43;
  }
  v15 = sub_100839084(&__p, "no");
  v10 = 0;
  v8 = 0;
  if (v15)
    goto LABEL_43;
LABEL_44:
  *a2 = v10;
  if ((char)v18 < 0)
    operator delete(__p);
  return v8;
}

void sub_1010DDD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010DDD6C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1010DDD98(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x10;
  v4 = v2 - 16;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xF80uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xF80uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xF80uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1010DE060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *sub_1010DE0AC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4)
    sub_10025955C();
  return operator new(288 * a2);
}

uint64_t sub_1010DE0F4(uint64_t a1, char *a2, __int128 *a3, char *a4, __int128 *a5)
{
  unint64_t v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a5 == a3)
    v6 = 0;
  else
    v6 = 0xEF7BDEF7BDEF7BDFLL * (((uint64_t)a5 - *(_QWORD *)a4) >> 3)
       + 2 * (a4 - a2)
       + 0x1084210842108421 * (((uint64_t)a3 - *(_QWORD *)a2) >> 3);
  sub_1010DE17C((char *)a1, a2, a3, (uint64_t)a4, a5, v6);
  return a1;
}

char *sub_1010DE17C(char *result, _QWORD *a2, __int128 *a3, uint64_t a4, __int128 *a5, unint64_t a6)
{
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;

  if (a6)
  {
    v9 = result;
    result = sub_10091CA10(result, a6);
    v10 = *((_QWORD *)v9 + 1);
    while (a3 != a5)
    {
      v11 = *a3;
      v12 = a3[1];
      v13 = a3[3];
      *(_OWORD *)(v10 + 32) = a3[2];
      *(_OWORD *)(v10 + 48) = v13;
      *(_OWORD *)v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      v14 = a3[4];
      v15 = a3[5];
      v16 = a3[7];
      *(_OWORD *)(v10 + 96) = a3[6];
      *(_OWORD *)(v10 + 112) = v16;
      *(_OWORD *)(v10 + 64) = v14;
      *(_OWORD *)(v10 + 80) = v15;
      v17 = a3[8];
      v18 = a3[9];
      v19 = a3[11];
      *(_OWORD *)(v10 + 160) = a3[10];
      *(_OWORD *)(v10 + 176) = v19;
      *(_OWORD *)(v10 + 128) = v17;
      *(_OWORD *)(v10 + 144) = v18;
      v20 = a3[12];
      v21 = a3[13];
      v22 = a3[14];
      *(_QWORD *)(v10 + 240) = *((_QWORD *)a3 + 30);
      *(_OWORD *)(v10 + 208) = v21;
      *(_OWORD *)(v10 + 224) = v22;
      *(_OWORD *)(v10 + 192) = v20;
      a3 = (__int128 *)((char *)a3 + 248);
      if ((__int128 *)((char *)a3 - *a2) == (__int128 *)3968)
      {
        v23 = (__int128 *)a2[1];
        ++a2;
        a3 = v23;
      }
      v10 += 248;
    }
    *((_QWORD *)v9 + 1) = v10;
  }
  return result;
}

void sub_1010DE230(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1010DE24C(_QWORD *a1)
{
  *a1 = objc_alloc_init((Class)HKHealthStore);
  return a1;
}

id *sub_1010DE27C(id *a1)
{

  *a1 = 0;
  return a1;
}

void sub_1010DE2B0(id *a1, uint64_t a2, double a3, double a4)
{
  id v8;
  id v9;
  NSCompoundPredicate *v10;
  id v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  _QWORD v15[5];
  void *__p;
  void *v17;
  uint64_t v18;
  __int16 v19;
  NSSortDescriptor *v20;
  _QWORD v21[2];
  uint8_t buf[1640];

  if (+[HKHealthStore isHealthDataAvailable](HKHealthStore, "isHealthDataAvailable"))
  {
    v8 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a3);
    v9 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a4);
    v21[0] = +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", v8, v9, 0);
    v21[1] = +[HKQuery _predicateForObjectsFromAppleWatches](HKQuery, "_predicateForObjectsFromAppleWatches");
    v10 = +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v21, 2));
    v20 = +[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", HKSampleSortIdentifierStartDate, 0);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1010DE618;
    v15[3] = &unk_1021A0950;
    v15[4] = a2;
    v11 = objc_msgSend(objc_alloc((Class)HKSampleQuery), "initWithSampleType:predicate:limit:sortDescriptors:resultsHandler:", +[HKSampleType workoutType](HKSampleType, "workoutType"), v10, 0, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v20, 1), v15);
    objc_msgSend(*a1, "executeQuery:", v11);

  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
    v12 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Workout query, health data is not available.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
      v19 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "Workout query, health data is not available.", &v19, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWorkoutsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, WorkoutsHandlerFunction)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    __p = 0;
    v17 = 0;
    v18 = 0;
    sub_10041D904(&__p, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, void **))(a2 + 16))(a2, 109, &__p);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
}

void sub_1010DE5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010DE618(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v6;
  uint64_t v7;
  void *v8;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unsigned int v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  id v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  const char *v48;
  uint8_t *v49;
  const char *v50;
  uint8_t *v51;
  uint64_t v52;
  void *__p;
  void *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  int v70;
  id v71;
  __int16 v72;
  unsigned int v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint8_t v78[128];
  uint8_t buf[4];
  id v80;
  __int16 v81;
  unsigned int v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;

  if (a4)
  {
    if (objc_msgSend(a4, "code") == (id)6)
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
      v6 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HealthKit Workout query failed due to device lock", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
        LOWORD(v70) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "HealthKit Workout query failed due to device lock", &v70, 2);
        v49 = (uint8_t *)v48;
        sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWorkoutsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, WorkoutsHandlerFunction)_block_invoke", "%s\n", v48);
        if (v49 != buf)
          free(v49);
      }
      v7 = *(_QWORD *)(a1 + 32);
      v68 = 0;
      v69 = 0;
      v67 = 0;
      sub_10041D904(&v67, 0, 0, 0);
      (*(void (**)(uint64_t, uint64_t, void **))(v7 + 16))(v7, 109, &v67);
      v8 = v67;
      if (v67)
      {
        v68 = v67;
LABEL_54:
        operator delete(v8);
      }
    }
    else
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
      v46 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v80 = a4;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "HealthKit Workout query encountered error,%{public}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
        v70 = 138543362;
        v71 = a4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "HealthKit Workout query encountered error,%{public}@", &v70, 12);
        v51 = (uint8_t *)v50;
        sub_100512490("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWorkoutsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, WorkoutsHandlerFunction)_block_invoke", "%s\n", v50);
        if (v51 != buf)
          free(v51);
      }
      v47 = *(_QWORD *)(a1 + 32);
      v65 = 0;
      v66 = 0;
      v64 = 0;
      sub_10041D904(&v64, 0, 0, 0);
      (*(void (**)(uint64_t, uint64_t, void **))(v47 + 16))(v47, 103, &v64);
      v8 = v64;
      if (v64)
      {
        v65 = v64;
        goto LABEL_54;
      }
    }
  }
  else
  {
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v10 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v57, v78, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v58;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v58 != v11)
            objc_enumerationMutation(a3);
          v13 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * (_QWORD)v12);
          v14 = objc_msgSend(objc_msgSend(objc_msgSend(v13, "metadata"), "objectForKeyedSubscript:", HKMetadataKeyIndoorWorkout), "BOOLValue");
          if (qword_10229FE90 != -1)
            dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
          v15 = qword_10229FE98;
          if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
          {
            v16 = objc_msgSend(v13, "workoutActivityType");
            objc_msgSend(objc_msgSend(v13, "startDate"), "timeIntervalSinceReferenceDate");
            v18 = v17;
            objc_msgSend(objc_msgSend(v13, "endDate"), "timeIntervalSinceReferenceDate");
            *(_DWORD *)buf = 134284289;
            v80 = v16;
            v81 = 1025;
            v82 = v14;
            v83 = 2049;
            v84 = v18;
            v85 = 2049;
            v86 = v19;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Found workout... Type: %{private}lu, indoor: %{private}d, startTime: %{private}f, endTime: %{private}f", buf, 0x26u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE90 != -1)
              dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
            v37 = qword_10229FE98;
            v38 = objc_msgSend(v13, "workoutActivityType");
            objc_msgSend(objc_msgSend(v13, "startDate"), "timeIntervalSinceReferenceDate");
            v40 = v39;
            objc_msgSend(objc_msgSend(v13, "endDate"), "timeIntervalSinceReferenceDate");
            v70 = 134284289;
            v71 = v38;
            v72 = 1025;
            v73 = v14;
            v74 = 2049;
            v75 = v40;
            v76 = 2049;
            v77 = v41;
            LODWORD(v52) = 38;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 2, "Found workout... Type: %{private}lu, indoor: %{private}d, startTime: %{private}f, endTime: %{private}f", &v70, v52);
            v43 = (uint8_t *)v42;
            sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWorkoutsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, WorkoutsHandlerFunction)_block_invoke", "%s\n", v42);
            if (v43 != buf)
              free(v43);
          }
          objc_msgSend(objc_msgSend(v13, "startDate"), "timeIntervalSinceReferenceDate");
          v21 = v20;
          objc_msgSend(objc_msgSend(v13, "endDate"), "timeIntervalSinceReferenceDate");
          v23 = v22;
          v24 = objc_msgSend(v13, "workoutActivityType");
          v25 = v24;
          v26 = v62;
          if ((unint64_t)v62 >= v63)
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (v62 - v61);
            v29 = v28 + 1;
            if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_100259694();
            if (0x5555555555555556 * ((uint64_t)(v63 - (_QWORD)v61) >> 3) > v29)
              v29 = 0x5555555555555556 * ((uint64_t)(v63 - (_QWORD)v61) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (_QWORD)v61) >> 3) >= 0x555555555555555)
              v30 = 0xAAAAAAAAAAAAAAALL;
            else
              v30 = v29;
            if (v30)
              v31 = (char *)sub_1002596A8((uint64_t)&v63, v30);
            else
              v31 = 0;
            v32 = &v31[24 * v28];
            *(_QWORD *)v32 = v21;
            *((_QWORD *)v32 + 1) = v23;
            *((_DWORD *)v32 + 4) = v25;
            v32[20] = v14;
            v34 = v61;
            v33 = v62;
            v35 = v32;
            if (v62 != v61)
            {
              do
              {
                v36 = *(_OWORD *)(v33 - 3);
                *(_QWORD *)(v35 - 11) = *(_QWORD *)((char *)v33 - 11);
                *(_OWORD *)(v35 - 24) = v36;
                v35 -= 24;
                v33 -= 3;
              }
              while (v33 != v34);
              v33 = v61;
            }
            v27 = v32 + 24;
            v61 = v35;
            v62 = v32 + 24;
            v63 = (unint64_t)&v31[24 * v30];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *v62 = v21;
            v26[1] = v23;
            *((_DWORD *)v26 + 4) = v24;
            v27 = v26 + 3;
            *((_BYTE *)v26 + 20) = v14;
          }
          v62 = v27;
          v12 = (char *)v12 + 1;
        }
        while (v12 != v10);
        v44 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v57, v78, 16);
        v10 = v44;
      }
      while (v44);
    }
    v45 = *(_QWORD *)(a1 + 32);
    v55 = 0;
    v56 = 0;
    __p = 0;
    sub_10041D904(&__p, v61, (uint64_t)v62, 0xAAAAAAAAAAAAAAABLL * (v62 - v61));
    (*(void (**)(uint64_t, uint64_t, void **))(v45 + 16))(v45, 100, &__p);
    if (__p)
    {
      v55 = __p;
      operator delete(__p);
    }
    v8 = v61;
    if (v61)
    {
      v62 = v61;
      goto LABEL_54;
    }
  }
}

void sub_1010DEDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010DEE6C(id *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, double a6, double a7)
{
  char v13;
  NSObject *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  NSCompoundPredicate *v19;
  id v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  _QWORD v27[8];
  char v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *__p;
  void *v33;
  uint64_t v34;
  NSSortDescriptor *v35;
  int v36;
  double v37;
  __int16 v38;
  double v39;
  uint8_t buf[4];
  double v41;
  __int16 v42;
  double v43;

  if (+[HKHealthStore isHealthDataAvailable](HKHealthStore, "isHealthDataAvailable"))
  {
    if ((a4 & 1) != 0)
      v13 = 1;
    else
      v13 = sub_1010DF3C8();
    v16 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a6);
    v17 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a7);
    v18 = +[NSMutableArray array](NSMutableArray, "array");
    objc_msgSend(v18, "addObject:", +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", v16, v17, 0));
    if ((v13 & 1) != 0)
      goto LABEL_16;
    if (a3)
    {
      objc_msgSend(v18, "addObject:", +[HKQuery predicateForObjectsWithMetadataKey:](HKQuery, "predicateForObjectsWithMetadataKey:", _HKPrivateMetadataKeyCoreMotionSourceIdentifier));
LABEL_16:
      v19 = +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v18);
      v35 = +[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", HKSampleSortIdentifierStartDate, 0);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_1010DF60C;
      v27[3] = &unk_1021A0978;
      v28 = v13;
      v27[4] = a3;
      v27[5] = v16;
      v27[6] = v17;
      v27[7] = a5;
      v20 = objc_msgSend(objc_alloc((Class)HKSampleQuery), "initWithSampleType:predicate:limit:sortDescriptors:resultsHandler:", +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierAppleWalkingSteadiness), v19, a2, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v35, 1), v27);
      objc_msgSend(*a1, "executeQuery:", v20);

      return;
    }
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
    v21 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Missing Database  UUID", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
      LOWORD(v36) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "Missing Database  UUID", &v36, 2);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    v29 = 0;
    v30 = 0;
    v31 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(a5 + 16))(a5, 109, &v29);
    v15 = v29;
    if (v29)
    {
      v30 = v29;
      goto LABEL_11;
    }
  }
  else
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
    v14 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283777;
      v41 = a6;
      v42 = 2049;
      v43 = a7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Steadiness query failed, health data unavailable (%{private}f, %{private}f)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      v36 = 134283777;
      v37 = a6;
      v38 = 2049;
      v39 = a7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 16, "Steadiness query failed, health data unavailable (%{private}f, %{private}f)", &v36, 22);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    __p = 0;
    v33 = 0;
    v34 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(a5 + 16))(a5, 109, &__p);
    v15 = __p;
    if (__p)
    {
      v33 = __p;
LABEL_11:
      operator delete(v15);
    }
  }
}

void sub_1010DF394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _QWORD *v25;

  if (__p)
  {
    *v25 = __p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010DF3C8()
{
  uint64_t result;
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;
  const char *v6;
  char *v7;
  BOOL v8;
  int v9;
  const char *v10;
  _OWORD buf[102];

  sub_100197040();
  result = sub_10075D288();
  if ((_DWORD)result)
  {
    v8 = 0;
    v1 = sub_100127B9C();
    sub_100081C10(v1, buf);
    sub_1001E4874(*(uint64_t *)&buf[0], "MobilityQuerySamplesFromAnyDevice", &v8);
    v2 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
    if (*((_QWORD *)&buf[0] + 1))
    {
      v3 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    if (v8)
    {
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      v5 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315138;
        *(_QWORD *)((char *)buf + 4) = "MobilityQuerySamplesFromAnyDevice";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#WARNING: Testing mode. Querying HK samples from any device (%s)", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
        v9 = 136315138;
        v10 = "MobilityQuerySamplesFromAnyDevice";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "#WARNING: Testing mode. Querying HK samples from any device (%s)", (const char *)&v9);
        v7 = (char *)v6;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLMobility::HealthKitQueryDelegate::allowSamplesFromAnyDevice() const", "%s\n", v6);
        if (v7 != (char *)buf)
          free(v7);
      }
    }
    return v8;
  }
  return result;
}

void sub_1010DF5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1010DF60C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v6;
  uint64_t v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  NSObject *v35;
  const char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint8_t *v52;
  const char *v53;
  uint8_t *v54;
  const char *v55;
  uint8_t *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  void *__p;
  _QWORD *v66;
  _QWORD v67[7];
  int v68;
  unint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  uint8_t v74[128];
  uint8_t buf[4];
  unint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;

  if (a4)
  {
    if (objc_msgSend(a4, "code") == (id)6)
    {
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      v6 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HealthKit Steadiness query failed due to device lock", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
        LOWORD(v68) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "HealthKit Steadiness query failed due to device lock", &v68, 2);
        v54 = (uint8_t *)v53;
        sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)_block_invoke", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
      v7 = *(_QWORD *)(a1 + 56);
      memset(&v67[4], 0, 24);
      (*(void (**)(void))(v7 + 16))();
    }
    else
    {
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      v47 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v76 = (unint64_t)a4;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "HealthKit Steadiness query encountered error: %{public}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
        v68 = 138543362;
        v69 = (unint64_t)a4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 16, "HealthKit Steadiness query encountered error: %{public}@", &v68, 12);
        v56 = (uint8_t *)v55;
        sub_100512490("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)_block_invoke", "%s\n", v55);
        if (v56 != buf)
          free(v56);
      }
      v48 = *(_QWORD *)(a1 + 56);
      memset(&v67[1], 0, 24);
      (*(void (**)(void))(v48 + 16))();
    }
    return;
  }
  __p = 0;
  v66 = 0;
  v67[0] = 0;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v9 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v61, v74, 16);
  if (!v9)
    goto LABEL_55;
  v10 = *(_QWORD *)v62;
  v11 = _HKPrivateMetadataKeyCoreMotionSourceIdentifier;
  do
  {
    v12 = 0;
    do
    {
      if (*(_QWORD *)v62 != v10)
        objc_enumerationMutation(a3);
      v13 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)v12);
      if (objc_msgSend(objc_msgSend(v13, "metadata"), "objectForKey:", v11) || *(_BYTE *)(a1 + 64))
      {
        if ((objc_msgSend(objc_msgSend(objc_msgSend(v13, "metadata"), "objectForKeyedSubscript:", v11), "isEqualToString:", *(_QWORD *)(a1 + 32)) & 1) != 0|| *(_BYTE *)(a1 + 64))
        {
          objc_msgSend(objc_msgSend(v13, "startDate"), "timeIntervalSinceReferenceDate");
          v15 = v14;
          objc_msgSend(objc_msgSend(v13, "endDate"), "timeIntervalSinceReferenceDate");
          v17 = v16;
          objc_msgSend(objc_msgSend(v13, "quantity"), "doubleValueForUnit:", +[HKUnit percentUnit](HKUnit, "percentUnit"));
          v19 = v18;
          v20 = v66;
          if ((unint64_t)v66 >= v67[0])
          {
            v22 = __p;
            v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (_BYTE *)__p) >> 3);
            v24 = v23 + 1;
            if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_100259694();
            if (0x5555555555555556 * ((uint64_t)(v67[0] - (_QWORD)__p) >> 3) > v24)
              v24 = 0x5555555555555556 * ((uint64_t)(v67[0] - (_QWORD)__p) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67[0] - (_QWORD)__p) >> 3) >= 0x555555555555555)
              v25 = 0xAAAAAAAAAAAAAAALL;
            else
              v25 = v24;
            if (v25)
            {
              v26 = (char *)sub_1002596A8((uint64_t)v67, v25);
              v22 = __p;
              v20 = v66;
            }
            else
            {
              v26 = 0;
            }
            v37 = &v26[24 * v23];
            *(_QWORD *)v37 = v15;
            *((_QWORD *)v37 + 1) = v17;
            *((_QWORD *)v37 + 2) = v19;
            v38 = v37;
            if (v20 != v22)
            {
              do
              {
                v39 = *(_OWORD *)(v20 - 3);
                *((_QWORD *)v38 - 1) = *(v20 - 1);
                *(_OWORD *)(v38 - 24) = v39;
                v38 -= 24;
                v20 -= 3;
              }
              while (v20 != v22);
              v22 = __p;
            }
            v21 = v37 + 24;
            __p = v38;
            v66 = v37 + 24;
            v67[0] = &v26[24 * v25];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v66 = v15;
            v20[1] = v17;
            v21 = v20 + 3;
            v20[2] = v18;
          }
          v66 = v21;
          goto LABEL_53;
        }
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
        v27 = qword_10229FC48;
        if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
        {
          v28 = objc_msgSend(objc_msgSend(v13, "metadata"), "objectForKeyedSubscript:", v11);
          v29 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 138478083;
          v76 = (unint64_t)v28;
          v77 = 2113;
          v78 = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Sample's source UUID %{private}@ did not match dBUUID %{private}@", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC40 != -1)
            dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
          v30 = qword_10229FC48;
          v31 = objc_msgSend(objc_msgSend(v13, "metadata"), "objectForKeyedSubscript:", v11);
          v32 = *(_QWORD *)(a1 + 32);
          v68 = 138478083;
          v69 = (unint64_t)v31;
          v70 = 2113;
          v71 = v32;
          LODWORD(v57) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "Sample's source UUID %{private}@ did not match dBUUID %{private}@", &v68, v57);
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)_block_invoke", "%s\n", v33);
LABEL_44:
          if (v34 != buf)
            free(v34);
        }
      }
      else
      {
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
        v35 = qword_10229FC48;
        if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Sample did not contain the source UUID metadata", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC40 != -1)
            dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
          LOWORD(v68) = 0;
          LODWORD(v57) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "Sample did not contain the source UUID metadata", &v68, v57);
          v34 = (uint8_t *)v36;
          sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)_block_invoke", "%s\n", v36);
          goto LABEL_44;
        }
      }
LABEL_53:
      v12 = (char *)v12 + 1;
    }
    while (v12 != v9);
    v9 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v61, v74, 16);
  }
  while (v9);
LABEL_55:
  v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (_BYTE *)__p) >> 3);
  if (v40 >= 2)
  {
    v41 = 126 - 2 * __clz(v40);
    if (v66 == __p)
      v42 = 0;
    else
      v42 = v41;
    sub_1010E3B78((uint64_t)__p, (unint64_t)v66, v42, 1);
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
  v43 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
  {
    v44 = *(_QWORD *)(a1 + 40);
    v45 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 134349570;
    v76 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (_BYTE *)__p) >> 3);
    v77 = 2114;
    v78 = v44;
    v79 = 2114;
    v80 = v45;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "[WalkingSteadiness] numSamples, %{public}lu, startDate, %{public}@, endDate, %{public}@", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
    v49 = *(_QWORD *)(a1 + 40);
    v50 = *(_QWORD *)(a1 + 48);
    v68 = 134349570;
    v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (_BYTE *)__p) >> 3);
    v70 = 2114;
    v71 = v49;
    v72 = 2114;
    v73 = v50;
    LODWORD(v57) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "[WalkingSteadiness] numSamples, %{public}lu, startDate, %{public}@, endDate, %{public}@", &v68, v57);
    v52 = (uint8_t *)v51;
    sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)_block_invoke", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  v46 = *(_QWORD *)(a1 + 56);
  v59 = 0;
  v60 = 0;
  v58 = 0;
  sub_1002782D0(&v58, __p, (uint64_t)v66, 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (_BYTE *)__p) >> 3));
  (*(void (**)(uint64_t, uint64_t, void **))(v46 + 16))(v46, 100, &v58);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (__p)
  {
    v66 = __p;
    operator delete(__p);
  }
}

void sub_1010E00A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010E0130(id *a1, uint64_t a2, double a3, double a4)
{
  id v8;
  id v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  _QWORD v13[5];
  id v14;
  uint64_t v15;
  int v16;
  double v17;
  __int16 v18;
  double v19;
  uint8_t buf[4];
  double v21;
  __int16 v22;
  double v23;

  if (+[HKHealthStore isHealthDataAvailable](HKHealthStore, "isHealthDataAvailable"))
  {
    v8 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a3);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1010E0408;
    v13[3] = &unk_1021A09A0;
    v14 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a4);
    v15 = a2;
    v13[4] = v8;
    v9 = objc_msgSend(objc_alloc((Class)HKStatisticsQuery), "initWithQuantityType:quantitySamplePredicate:options:completionHandler:", +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierNumberOfTimesFallen), +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", v8, v14, 0), 16, v13);
    objc_msgSend(*a1, "executeQuery:", v9);

  }
  else
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
    v10 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283777;
      v21 = a3;
      v22 = 2049;
      v23 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Falls query failed, health data unavailable (%{private}f, %{private}f)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      v16 = 134283777;
      v17 = a3;
      v18 = 2049;
      v19 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 16, "Falls query failed, health data unavailable (%{private}f, %{private}f)", &v16, 22);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryNumFalls(CFAbsoluteTime, CFAbsoluteTime, StatisticHandlerFunction)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD))(a2 + 16))(a2, 109, 0);
  }
}

uint64_t sub_1010E0408(_QWORD *a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v6;
  uint64_t (*v7)(void);
  double v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _BYTE v24[14];
  __int16 v25;
  uint64_t v26;
  uint8_t buf[4];
  _BYTE v28[14];
  __int16 v29;
  uint64_t v30;

  if (!a4)
  {
    objc_msgSend(objc_msgSend(a3, "sumQuantity"), "_value");
    v9 = (int)v8;
LABEL_12:
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
    v10 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
    {
      v11 = a1[4];
      v12 = a1[5];
      *(_DWORD *)buf = 67175171;
      *(_DWORD *)v28 = v9;
      *(_WORD *)&v28[4] = 2114;
      *(_QWORD *)&v28[6] = v11;
      v29 = 2114;
      v30 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[NumFalls] sumQuantity, %{private}d, startDate, %{public}@, endDate, %{public}@", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      v15 = a1[4];
      v16 = a1[5];
      v23 = 67175171;
      *(_DWORD *)v24 = v9;
      *(_WORD *)&v24[4] = 2114;
      *(_QWORD *)&v24[6] = v15;
      v25 = 2114;
      v26 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "[NumFalls] sumQuantity, %{private}d, startDate, %{public}@, endDate, %{public}@", &v23, 28);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryNumFalls(CFAbsoluteTime, CFAbsoluteTime, StatisticHandlerFunction)_block_invoke", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v7 = *(uint64_t (**)(void))(a1[6] + 16);
    return v7();
  }
  if (objc_msgSend(a4, "code") == (id)6)
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
    v6 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HealthKit numFalls query failed due to device lock", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      LOWORD(v23) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "HealthKit numFalls query failed due to device lock", &v23, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryNumFalls(CFAbsoluteTime, CFAbsoluteTime, StatisticHandlerFunction)_block_invoke", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v7 = *(uint64_t (**)(void))(a1[6] + 16);
    return v7();
  }
  if (objc_msgSend(a4, "code") == (id)11)
  {
    v9 = 0;
    goto LABEL_12;
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
  v13 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)v28 = a4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "HealthKit numFalls query encountered error: %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
    v23 = 138543362;
    *(_QWORD *)v24 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 16, "HealthKit numFalls query encountered error: %{public}@", &v23, 12);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryNumFalls(CFAbsoluteTime, CFAbsoluteTime, StatisticHandlerFunction)_block_invoke", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  v7 = *(uint64_t (**)(void))(a1[6] + 16);
  return v7();
}

void sub_1010E08D0(id *a1, uint64_t a2, double a3, double a4)
{
  sub_1010E092C(a1, +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierStepCount), a2, a3, a4);
}

void sub_1010E092C(id *a1, void *a2, uint64_t a3, double a4, double a5)
{
  char v10;
  id v11;
  id v12;
  id v13;
  NSCompoundPredicate *v14;
  id v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  _QWORD v21[8];
  void *__p;
  void *v23;
  uint64_t v24;
  int v25;
  id v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  uint8_t buf[4];
  id v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;

  if (+[HKHealthStore isHealthDataAvailable](HKHealthStore, "isHealthDataAvailable"))
  {
    v10 = sub_1010DF3C8();
    v11 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a4);
    v12 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a5);
    v13 = +[NSMutableArray array](NSMutableArray, "array");
    objc_msgSend(v13, "addObject:", +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", v11, v12, 0));
    if ((v10 & 1) == 0)
      objc_msgSend(v13, "addObject:", +[HKQuery predicateForObjectsWithDeviceProperty:allowedValues:](HKQuery, "predicateForObjectsWithDeviceProperty:allowedValues:", HKDevicePropertyKeyName, +[NSSet setWithObject:](NSSet, "setWithObject:", CFSTR("iPhone"))));
    v14 = +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v13);
    v15 = objc_alloc_init((Class)NSDateComponents);
    objc_msgSend(v15, "setDay:", 1);
    v16 = objc_msgSend(objc_alloc((Class)HKStatisticsCollectionQuery), "initWithQuantityType:quantitySamplePredicate:options:anchorDate:intervalComponents:", a2, v14, 16, v12, v15);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1010E1D04;
    v21[3] = &unk_1021A09C8;
    v21[4] = a2;
    v21[5] = v11;
    v21[6] = v12;
    v21[7] = a3;
    objc_msgSend(v16, "setInitialResultsHandler:", v21);
    objc_msgSend(*a1, "executeQuery:", v16);

  }
  else
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
    v17 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543875;
      v32 = objc_msgSend(a2, "identifier");
      v33 = 2049;
      v34 = a4;
      v35 = 2049;
      v36 = a5;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "QuantityType %{public}@ query failed, health data unavailable (%{private}f, %{private}f)", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      v18 = qword_10229FC48;
      v25 = 138543875;
      v26 = objc_msgSend(a2, "identifier");
      v27 = 2049;
      v28 = a4;
      v29 = 2049;
      v30 = a5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 16, "QuantityType %{public}@ query failed, health data unavailable (%{private}f, %{private}f)", &v25, 32);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::_queryLocalDeviceDailyQuantitySum(CFAbsoluteTime, CFAbsoluteTime, HKQuantityType *, QuantityHandlerFunction)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    __p = 0;
    v23 = 0;
    v24 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(a3 + 16))(a3, 109, &__p);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
  }
}

void sub_1010E0CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010E0CF4(id *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  id v10;
  char v11;
  id v12;
  id v13;
  NSCompoundPredicate *v14;
  HKCategoryType *v15;
  id v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  _QWORD v24[8];
  char v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *__p;
  void *v30;
  uint64_t v31;
  NSSortDescriptor *v32;
  int v33;
  double v34;
  __int16 v35;
  double v36;
  uint8_t buf[4];
  double v38;
  __int16 v39;
  double v40;

  if (+[HKHealthStore isHealthDataAvailable](HKHealthStore, "isHealthDataAvailable"))
  {
    v10 = +[NSMutableArray array](NSMutableArray, "array");
    v11 = sub_1010DF3C8();
    v12 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a4);
    v13 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a5);
    objc_msgSend(v10, "addObject:", +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", v12, v13, 0));
    if ((v11 & 1) != 0)
    {
LABEL_5:
      v14 = +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v10);
      v15 = +[HKObjectType categoryTypeForIdentifier:](HKObjectType, "categoryTypeForIdentifier:", HKCategoryTypeIdentifierAppleWalkingSteadinessEvent);
      v32 = +[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", HKSampleSortIdentifierStartDate, 0);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_1010E1238;
      v24[3] = &unk_1021A0978;
      v25 = v11;
      v24[4] = a2;
      v24[5] = v12;
      v24[6] = v13;
      v24[7] = a3;
      v16 = objc_msgSend(objc_alloc((Class)HKSampleQuery), "initWithSampleType:predicate:limit:sortDescriptors:resultsHandler:", v15, v14, 0, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v32, 1), v24);
      objc_msgSend(*a1, "executeQuery:", v16);

      return;
    }
    if (a2)
    {
      objc_msgSend(v10, "addObject:", +[HKQuery predicateForObjectsWithMetadataKey:](HKQuery, "predicateForObjectsWithMetadataKey:", _HKPrivateMetadataKeyCoreMotionSourceIdentifier));
      goto LABEL_5;
    }
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
    v19 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Missing Database  UUID", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
      LOWORD(v33) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "Missing Database  UUID", &v33, 2);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    v26 = 0;
    v27 = 0;
    v28 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(a3 + 16))(a3, 109, &v26);
    v18 = v26;
    if (v26)
    {
      v27 = v26;
      goto LABEL_13;
    }
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
    v17 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283777;
      v38 = a4;
      v39 = 2049;
      v40 = a5;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Steadiness Events query failed, health data unavailable (%{private}f, %{private}f)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
      v33 = 134283777;
      v34 = a4;
      v35 = 2049;
      v36 = a5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "Steadiness Events query failed, health data unavailable (%{private}f, %{private}f)", &v33, 22);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    __p = 0;
    v30 = 0;
    v31 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(a3 + 16))(a3, 109, &__p);
    v18 = __p;
    if (__p)
    {
      v30 = __p;
LABEL_13:
      operator delete(v18);
    }
  }
}

void sub_1010E1204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23)
{
  _QWORD *v23;

  if (__p)
  {
    *v23 = __p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E1238(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v6;
  uint64_t v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  NSObject *v35;
  const char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint8_t *v49;
  const char *v50;
  uint8_t *v51;
  const char *v52;
  uint8_t *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void *__p;
  _QWORD *v63;
  _QWORD v64[7];
  int v65;
  unint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint8_t v71[128];
  uint8_t buf[4];
  unint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;

  if (a4)
  {
    if (objc_msgSend(a4, "code") == (id)6)
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
      v6 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HealthKit SteadinessEvent query failed due to device lock", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
        LOWORD(v65) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "HealthKit SteadinessEvent query failed due to device lock", &v65, 2);
        v51 = (uint8_t *)v50;
        sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)_block_invoke", "%s\n", v50);
        if (v51 != buf)
          free(v51);
      }
      v7 = *(_QWORD *)(a1 + 56);
      memset(&v64[4], 0, 24);
      (*(void (**)(void))(v7 + 16))();
    }
    else
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
      v44 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v73 = (unint64_t)a4;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "HealthKit SteadinessEvent query encountered error: %{public}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
        v65 = 138543362;
        v66 = (unint64_t)a4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "HealthKit SteadinessEvent query encountered error: %{public}@", &v65, 12);
        v53 = (uint8_t *)v52;
        sub_100512490("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)_block_invoke", "%s\n", v52);
        if (v53 != buf)
          free(v53);
      }
      v45 = *(_QWORD *)(a1 + 56);
      memset(&v64[1], 0, 24);
      (*(void (**)(void))(v45 + 16))();
    }
    return;
  }
  __p = 0;
  v63 = 0;
  v64[0] = 0;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v9 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v58, v71, 16);
  if (!v9)
    goto LABEL_55;
  v10 = *(_QWORD *)v59;
  v11 = _HKPrivateMetadataKeyCoreMotionSourceIdentifier;
  do
  {
    v12 = 0;
    do
    {
      if (*(_QWORD *)v59 != v10)
        objc_enumerationMutation(a3);
      v13 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * (_QWORD)v12);
      if (objc_msgSend(objc_msgSend(v13, "metadata"), "objectForKey:", v11) || *(_BYTE *)(a1 + 64))
      {
        if ((objc_msgSend(objc_msgSend(objc_msgSend(v13, "metadata"), "objectForKeyedSubscript:", v11), "isEqualToString:", *(_QWORD *)(a1 + 32)) & 1) != 0|| *(_BYTE *)(a1 + 64))
        {
          objc_msgSend(objc_msgSend(v13, "startDate"), "timeIntervalSinceReferenceDate");
          v15 = v14;
          objc_msgSend(objc_msgSend(v13, "endDate"), "timeIntervalSinceReferenceDate");
          v17 = v16;
          v18 = objc_msgSend(v13, "value");
          v19 = v18;
          v20 = v63;
          if ((unint64_t)v63 >= v64[0])
          {
            v22 = __p;
            v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (_BYTE *)__p) >> 3);
            v24 = v23 + 1;
            if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_100259694();
            if (0x5555555555555556 * ((uint64_t)(v64[0] - (_QWORD)__p) >> 3) > v24)
              v24 = 0x5555555555555556 * ((uint64_t)(v64[0] - (_QWORD)__p) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64[0] - (_QWORD)__p) >> 3) >= 0x555555555555555)
              v25 = 0xAAAAAAAAAAAAAAALL;
            else
              v25 = v24;
            if (v25)
            {
              v26 = (char *)sub_1002596A8((uint64_t)v64, v25);
              v22 = __p;
              v20 = v63;
            }
            else
            {
              v26 = 0;
            }
            v37 = &v26[24 * v23];
            *(_QWORD *)v37 = v15;
            *((_QWORD *)v37 + 1) = v17;
            *((_QWORD *)v37 + 2) = v19;
            v38 = v37;
            if (v20 != v22)
            {
              do
              {
                v39 = *(_OWORD *)(v20 - 3);
                *((_QWORD *)v38 - 1) = *(v20 - 1);
                *(_OWORD *)(v38 - 24) = v39;
                v38 -= 24;
                v20 -= 3;
              }
              while (v20 != v22);
              v22 = __p;
            }
            v21 = v37 + 24;
            __p = v38;
            v63 = v37 + 24;
            v64[0] = &v26[24 * v25];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v63 = v15;
            v20[1] = v17;
            v21 = v20 + 3;
            v20[2] = v18;
          }
          v63 = v21;
          goto LABEL_53;
        }
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
        v27 = qword_10229FC48;
        if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
        {
          v28 = objc_msgSend(objc_msgSend(v13, "metadata"), "objectForKeyedSubscript:", v11);
          v29 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 138478083;
          v73 = (unint64_t)v28;
          v74 = 2113;
          v75 = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Sample's source UUID %{private}@ did not match dBUUID %{private}@", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC40 != -1)
            dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
          v30 = qword_10229FC48;
          v31 = objc_msgSend(objc_msgSend(v13, "metadata"), "objectForKeyedSubscript:", v11);
          v32 = *(_QWORD *)(a1 + 32);
          v65 = 138478083;
          v66 = (unint64_t)v31;
          v67 = 2113;
          v68 = v32;
          LODWORD(v54) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "Sample's source UUID %{private}@ did not match dBUUID %{private}@", &v65, v54);
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)_block_invoke", "%s\n", v33);
LABEL_44:
          if (v34 != buf)
            free(v34);
        }
      }
      else
      {
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
        v35 = qword_10229FC48;
        if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Sample did not contain the source UUID metadata", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC40 != -1)
            dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
          LOWORD(v65) = 0;
          LODWORD(v54) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "Sample did not contain the source UUID metadata", &v65, v54);
          v34 = (uint8_t *)v36;
          sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)_block_invoke", "%s\n", v36);
          goto LABEL_44;
        }
      }
LABEL_53:
      v12 = (char *)v12 + 1;
    }
    while (v12 != v9);
    v9 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v58, v71, 16);
  }
  while (v9);
LABEL_55:
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
  v40 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
  {
    v41 = *(_QWORD *)(a1 + 40);
    v42 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 134349570;
    v73 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (_BYTE *)__p) >> 3);
    v74 = 2114;
    v75 = v41;
    v76 = 2114;
    v77 = v42;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "[SteadinessEvent] numSamples, %{public}lu, startDate, %{public}@, endDate, %{public}@", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
    v46 = *(_QWORD *)(a1 + 40);
    v47 = *(_QWORD *)(a1 + 48);
    v65 = 134349570;
    v66 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (_BYTE *)__p) >> 3);
    v67 = 2114;
    v68 = v46;
    v69 = 2114;
    v70 = v47;
    LODWORD(v54) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "[SteadinessEvent] numSamples, %{public}lu, startDate, %{public}@, endDate, %{public}@", &v65, v54);
    v49 = (uint8_t *)v48;
    sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)_block_invoke", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
  v43 = *(_QWORD *)(a1 + 56);
  v56 = 0;
  v57 = 0;
  v55 = 0;
  sub_1002782D0(&v55, __p, (uint64_t)v63, 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (_BYTE *)__p) >> 3));
  (*(void (**)(uint64_t, uint64_t, void **))(v43 + 16))(v43, 100, &v55);
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  if (__p)
  {
    v63 = __p;
    operator delete(__p);
  }
}

void sub_1010E1C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010E1D04(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  id v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  id v32;
  const char *v33;
  uint8_t *v34;
  void *__p;
  void *v36;
  uint64_t v37;
  _QWORD v38[11];
  int v39;
  id v40;
  __int16 v41;
  unint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  _BYTE v47[24];
  __n128 (*v48)(__n128 *, __n128 *);
  void (*v49)(uint64_t);
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint8_t buf[4];
  id v55;
  __int16 v56;
  unint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;

  if (a4)
  {
    if (objc_msgSend(a4, "code") == (id)6)
    {
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      v6 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
      {
        v7 = objc_msgSend(*(id *)(a1 + 32), "identifier");
        *(_DWORD *)buf = 138543362;
        v55 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HealthKit  %{public}@ query failed due to device lock", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
        v27 = qword_10229FC48;
        v28 = objc_msgSend(*(id *)(a1 + 32), "identifier");
        *(_DWORD *)v47 = 138543362;
        *(_QWORD *)&v47[4] = v28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 2, "HealthKit  %{public}@ query failed due to device lock", v47, 12);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::_queryLocalDeviceDailyQuantitySum(CFAbsoluteTime, CFAbsoluteTime, HKQuantityType *, QuantityHandlerFunction)_block_invoke", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      v8 = *(_QWORD *)(a1 + 56);
      memset(&v38[8], 0, 24);
      (*(void (**)(void))(v8 + 16))();
    }
    else
    {
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      v17 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_ERROR))
      {
        v18 = objc_msgSend(*(id *)(a1 + 32), "identifier");
        *(_DWORD *)buf = 138543618;
        v55 = v18;
        v56 = 2114;
        v57 = (unint64_t)a4;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "HealthKit %{public}@ query encountered error: %{public}@", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
        v31 = qword_10229FC48;
        v32 = objc_msgSend(*(id *)(a1 + 32), "identifier");
        *(_DWORD *)v47 = 138543618;
        *(_QWORD *)&v47[4] = v32;
        *(_WORD *)&v47[12] = 2114;
        *(_QWORD *)&v47[14] = a4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 16, "HealthKit %{public}@ query encountered error: %{public}@", v47, 22);
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::_queryLocalDeviceDailyQuantitySum(CFAbsoluteTime, CFAbsoluteTime, HKQuantityType *, QuantityHandlerFunction)_block_invoke", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
      v19 = *(_QWORD *)(a1 + 56);
      memset(&v38[5], 0, 24);
      (*(void (**)(void))(v19 + 16))();
    }
  }
  else
  {
    *(_QWORD *)v47 = 0;
    *(_QWORD *)&v47[8] = v47;
    *(_QWORD *)&v47[16] = 0x4812000000;
    v48 = sub_1002072A0;
    v49 = sub_100207DC4;
    v50 = &unk_102080316;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v10 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_1010E23EC;
    v38[3] = &unk_102162940;
    v38[4] = v47;
    objc_msgSend(a3, "enumerateStatisticsFromDate:toDate:withBlock:", v10, v9, v38);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
    v11 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
    {
      v12 = objc_msgSend(*(id *)(a1 + 32), "identifier");
      v13 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(*(_QWORD *)(*(_QWORD *)&v47[8] + 56) - *(_QWORD *)(*(_QWORD *)&v47[8] + 48)) >> 3);
      v14 = *(_QWORD *)(a1 + 40);
      v15 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138544131;
      v55 = v12;
      v56 = 2049;
      v57 = v13;
      v58 = 2113;
      v59 = v14;
      v60 = 2113;
      v61 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[%{public}@] daysOfData, %{private}lu, startDate, %{private}@, endDate, %{private}@", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      v20 = qword_10229FC48;
      v21 = objc_msgSend(*(id *)(a1 + 32), "identifier");
      v22 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(*(_QWORD *)(*(_QWORD *)&v47[8] + 56) - *(_QWORD *)(*(_QWORD *)&v47[8] + 48)) >> 3);
      v23 = *(_QWORD *)(a1 + 40);
      v24 = *(_QWORD *)(a1 + 48);
      v39 = 138544131;
      v40 = v21;
      v41 = 2049;
      v42 = v22;
      v43 = 2113;
      v44 = v23;
      v45 = 2113;
      v46 = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 2, "[%{public}@] daysOfData, %{private}lu, startDate, %{private}@, endDate, %{private}@", &v39, 42);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::_queryLocalDeviceDailyQuantitySum(CFAbsoluteTime, CFAbsoluteTime, HKQuantityType *, QuantityHandlerFunction)_block_invoke", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v16 = *(_QWORD *)(a1 + 56);
    v36 = 0;
    v37 = 0;
    __p = 0;
    sub_1002782D0(&__p, *(const void **)(*(_QWORD *)&v47[8] + 48), *(_QWORD *)(*(_QWORD *)&v47[8] + 56), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)&v47[8] + 56) - *(_QWORD *)(*(_QWORD *)&v47[8] + 48)) >> 3));
    (*(void (**)(uint64_t, uint64_t, void **))(v16 + 16))(v16, 100, &__p);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(v47, 8);
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1010E2370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  _Block_object_dispose(&a31, 8);
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1010E23EC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;

  if (a2)
  {
    objc_msgSend(objc_msgSend(a2, "startDate"), "timeIntervalSinceReferenceDate");
    v5 = v4;
    objc_msgSend(objc_msgSend(a2, "endDate"), "timeIntervalSinceReferenceDate");
    v7 = v6;
    objc_msgSend(objc_msgSend(a2, "sumQuantity"), "doubleValueForUnit:", +[HKUnit countUnit](HKUnit, "countUnit"));
    v9 = v8;
    v10 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v11 = (char *)v10[7];
    v12 = v10[8];
    if ((unint64_t)v11 >= v12)
    {
      v14 = (char *)v10[6];
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v14) >> 3);
      v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v14) >> 3);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)sub_1002596A8((uint64_t)(v10 + 8), v18);
        v14 = (char *)v10[6];
        v11 = (char *)v10[7];
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[24 * v15];
      v21 = &v19[24 * v18];
      *(_QWORD *)v20 = v5;
      *((_QWORD *)v20 + 1) = v7;
      *((_QWORD *)v20 + 2) = v9;
      v13 = v20 + 24;
      if (v11 != v14)
      {
        do
        {
          v22 = *(_OWORD *)(v11 - 24);
          *((_QWORD *)v20 - 1) = *((_QWORD *)v11 - 1);
          *(_OWORD *)(v20 - 24) = v22;
          v20 -= 24;
          v11 -= 24;
        }
        while (v11 != v14);
        v14 = (char *)v10[6];
      }
      v10[6] = v20;
      v10[7] = v13;
      v10[8] = v21;
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v11 = v5;
      *((_QWORD *)v11 + 1) = v7;
      v13 = v11 + 24;
      *((_QWORD *)v11 + 2) = v8;
    }
    v10[7] = v13;
  }
}

void sub_1010E2574(id *a1, uint64_t a2)
{
  id v3;
  _QWORD v4[5];
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  uint64_t v11;

  v6 = 0;
  v7 = &v6;
  v8 = 0x3052000000;
  v9 = sub_1010E2670;
  v10 = sub_1010E2680;
  v11 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1010E268C;
  v5[3] = &unk_1021A09F0;
  v5[5] = &v6;
  v5[6] = a1;
  v5[4] = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1010E2708;
  v4[3] = &unk_1021A0A18;
  v4[4] = v5;
  v3 = objc_msgSend(objc_alloc((Class)HKMCPregnancyStateQuery), "initWithUpdateHandler:", v4);
  v7[5] = (uint64_t)v3;
  objc_msgSend(*a1, "executeQuery:", v3);
  _Block_object_dispose(&v6, 8);
}

void sub_1010E2658(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1010E2670(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1010E2680(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1010E268C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;

  objc_msgSend(**(id **)(a1 + 48), "stopQuery:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

  v6 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a3 + 32);
  v7 = *(_OWORD *)(a3 + 16);
  v11[0] = *(_OWORD *)a3;
  v11[1] = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(v6 + 16))(v6, a2, v11, v8, v9);
}

void sub_1010E2708(uint64_t a1, uint64_t a2, void *a3, char *a4)
{
  NSObject *v6;
  void (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;

  if (a4)
  {
    if (objc_msgSend(a4, "code") == (id)6)
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
      v6 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[PregnancyState] HealthKit PregnancyState query failed due to device lock", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
        LOWORD(v27) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "[PregnancyState] HealthKit PregnancyState query failed due to device lock", &v27, 2);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryLatestPregnancyState(PregnancyHandlerFunction)_block_invoke", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      v7 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
    }
    else
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
      v17 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v36 = a4;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[PregnancyState] HealthKit PregnancyState query encountered error: %{public}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021A0AD8);
        v27 = 138543362;
        v28 = a4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "[PregnancyState] HealthKit PregnancyState query encountered error: %{public}@", &v27, 12);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryLatestPregnancyState(PregnancyHandlerFunction)_block_invoke", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      v7 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
    }
LABEL_31:
    v7();
    return;
  }
  if (!a3)
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
    v18 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "[PregnancyState] not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      LOWORD(v27) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "[PregnancyState] not available", &v27, 2);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryLatestPregnancyState(PregnancyHandlerFunction)_block_invoke", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v7 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
    goto LABEL_31;
  }
  if (objc_msgSend(a3, "state") == (id)1)
  {
    objc_msgSend(objc_msgSend(a3, "pregnancyStartDate"), "timeIntervalSinceReferenceDate");
    v10 = v9;
    objc_msgSend(objc_msgSend(a3, "pregnancyEndDate"), "timeIntervalSinceReferenceDate");
    objc_msgSend(objc_msgSend(a3, "estimatedDueDate"), "timeIntervalSinceReferenceDate");
    v12 = v11;
    objc_msgSend(objc_msgSend(a3, "pregnancyDuration"), "duration");
    v14 = v13;
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
    v15 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136643587;
      v36 = "True";
      v37 = 2053;
      v38 = v14;
      v39 = 2053;
      v40 = v10;
      v41 = 2053;
      v42 = v12;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[PregnancyState] %{sensitive}s, duration, %{sensitive}f, startDate, %{sensitive}f, dueDate, %{sensitive}f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      v27 = 136643587;
      v28 = "True";
      v29 = 2053;
      v30 = v14;
      v31 = 2053;
      v32 = v10;
      v33 = 2053;
      v34 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "[PregnancyState] %{sensitive}s, duration, %{sensitive}f, startDate, %{sensitive}f, dueDate, %{sensitive}f", &v27, 42);
LABEL_41:
      v20 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryLatestPregnancyState(PregnancyHandlerFunction)_block_invoke", "%s\n", v16);
      if (v20 != buf)
        free(v20);
    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
    v19 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136643587;
      v36 = "Not ongoing";
      v37 = 2053;
      v38 = 0;
      v39 = 2053;
      v40 = 0;
      v41 = 2053;
      v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "[PregnancyState] %{sensitive}s, duration, %{sensitive}f, startDate, %{sensitive}f, dueDate, %{sensitive}f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
      v27 = 136643587;
      v28 = "Not ongoing";
      v29 = 2053;
      v30 = 0;
      v31 = 2053;
      v32 = 0;
      v33 = 2053;
      v34 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "[PregnancyState] %{sensitive}s, duration, %{sensitive}f, startDate, %{sensitive}f, dueDate, %{sensitive}f", &v27, 42);
      goto LABEL_41;
    }
  }
}

void sub_1010E2EFC(id *a1, void *a2, double *a3, uint64_t a4, uint64_t a5)
{
  NSObject *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _QWORD block[18];
  _QWORD v22[7];
  _QWORD v23[7];
  _QWORD v24[7];
  _QWORD v25[7];
  _QWORD v26[7];
  _QWORD v27[7];
  _QWORD v28[6];
  char v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[3];
  char v33;
  _QWORD v34[6];
  void *__p;
  void *v36;
  uint64_t v37;
  _QWORD v38[3];
  char v39;
  _QWORD v40[6];
  void *v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[3];
  char v45;
  _QWORD v46[6];
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[3];
  char v51;
  _QWORD v52[3];
  int v53;
  _QWORD v54[3];
  char v55;
  _QWORD v56[6];
  void *v57;
  void *v58;
  uint64_t v59;
  _QWORD v60[3];
  char v61;

  v60[0] = 0;
  v60[1] = v60;
  v60[2] = 0x2020000000;
  v61 = 0;
  v56[0] = 0;
  v56[1] = v56;
  v56[2] = 0x4812000000;
  v56[3] = sub_1002072A0;
  v56[4] = sub_100207DC4;
  v56[5] = &unk_102080316;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v54[0] = 0;
  v54[1] = v54;
  v54[2] = 0x2020000000;
  v55 = 0;
  v52[0] = 0;
  v52[1] = v52;
  v52[2] = 0x2020000000;
  v53 = 0;
  v50[0] = 0;
  v50[1] = v50;
  v50[2] = 0x2020000000;
  v51 = 0;
  v46[0] = 0;
  v46[1] = v46;
  v46[2] = 0x4812000000;
  v46[3] = sub_1002072A0;
  v46[4] = sub_100207DC4;
  v46[5] = &unk_102080316;
  v47 = 0;
  v49 = 0;
  v48 = 0;
  v44[0] = 0;
  v44[1] = v44;
  v44[2] = 0x2020000000;
  v45 = 0;
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x4812000000;
  v40[3] = sub_1002072A0;
  v40[4] = sub_100207DC4;
  v40[5] = &unk_102080316;
  v41 = 0;
  v43 = 0;
  v42 = 0;
  v38[0] = 0;
  v38[1] = v38;
  v38[2] = 0x2020000000;
  v39 = 0;
  v34[0] = 0;
  v34[1] = v34;
  v34[2] = 0x4812000000;
  v34[3] = sub_1010E3514;
  v34[4] = sub_1010E3538;
  v34[5] = &unk_102080316;
  __p = 0;
  v37 = 0;
  v36 = 0;
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2020000000;
  v33 = 0;
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x5812000000;
  v28[3] = sub_1010E3550;
  v28[4] = nullsub_1424;
  v28[5] = &unk_102080316;
  v29 = 0;
  v30 = 0u;
  v31 = 0u;
  v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  v9 = *a3;
  v10 = a3[1];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_1010E3568;
  v27[3] = &unk_1021A0A40;
  v27[5] = v56;
  v27[6] = v60;
  v27[4] = v8;
  sub_1010DEE6C(a1, 0, a4, 0, (uint64_t)v27, v9, v10);
  dispatch_group_enter(v8);
  v11 = a3[2];
  v12 = a3[3];
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_1010E35D0;
  v26[3] = &unk_1021A0A68;
  v26[5] = v52;
  v26[6] = v54;
  v26[4] = v8;
  sub_1010E0130(a1, (uint64_t)v26, v11, v12);
  dispatch_group_enter(v8);
  v13 = a3[4];
  v14 = a3[5];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1010E35F8;
  v25[3] = &unk_1021A0A40;
  v25[5] = v46;
  v25[6] = v50;
  v25[4] = v8;
  sub_1010E092C(a1, +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierStepCount), (uint64_t)v25, v13, v14);
  dispatch_group_enter(v8);
  v15 = a3[6];
  v16 = a3[7];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1010E3660;
  v24[3] = &unk_1021A0A40;
  v24[5] = v40;
  v24[6] = v44;
  v24[4] = v8;
  sub_1010E092C(a1, +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierFlightsClimbed), (uint64_t)v24, v15, v16);
  dispatch_group_enter(v8);
  v17 = a3[8];
  v18 = a3[9];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1010E36C8;
  v23[3] = &unk_1021A0A90;
  v23[5] = v34;
  v23[6] = v38;
  v23[4] = v8;
  sub_1010E0CF4(a1, a4, (uint64_t)v23, v17, v18);
  dispatch_group_enter(v8);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1010E3730;
  v22[3] = &unk_1021A0AB8;
  v22[5] = v28;
  v22[6] = v32;
  v22[4] = v8;
  sub_1010E2574(a1, (uint64_t)v22);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1010E3764;
  block[3] = &unk_102138120;
  block[6] = v60;
  block[7] = v54;
  block[8] = v50;
  block[9] = v44;
  block[10] = v38;
  block[11] = v32;
  block[4] = v8;
  block[5] = a5;
  block[12] = v56;
  block[13] = v52;
  block[14] = v46;
  block[15] = v40;
  block[16] = v34;
  block[17] = v28;
  dispatch_group_notify(v8, (dispatch_queue_t)objc_msgSend(a2, "queue"), block);
  _Block_object_dispose(v28, 8);
  _Block_object_dispose(v32, 8);
  _Block_object_dispose(v34, 8);
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(v38, 8);
  _Block_object_dispose(v40, 8);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  _Block_object_dispose(v44, 8);
  _Block_object_dispose(v46, 8);
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  _Block_object_dispose(v50, 8);
  _Block_object_dispose(v52, 8);
  _Block_object_dispose(v54, 8);
  _Block_object_dispose(v56, 8);
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  _Block_object_dispose(v60, 8);
}

void sub_1010E3438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;
  void *v73;
  void *v74;
  void *v75;
  void *v76;

  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x248], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  v73 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v73;
    operator delete(v73);
  }
  _Block_object_dispose(&STACK[0x2B0], 8);
  _Block_object_dispose(&STACK[0x2D0], 8);
  v74 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v74;
    operator delete(v74);
  }
  _Block_object_dispose(&STACK[0x318], 8);
  _Block_object_dispose(&STACK[0x338], 8);
  v75 = (void *)STACK[0x368];
  if (STACK[0x368])
  {
    STACK[0x370] = (unint64_t)v75;
    operator delete(v75);
  }
  _Block_object_dispose(&STACK[0x380], 8);
  _Block_object_dispose(&STACK[0x3A0], 8);
  _Block_object_dispose((const void *)(v71 - 256), 8);
  _Block_object_dispose((const void *)(v71 - 224), 8);
  v76 = *(void **)(v71 - 176);
  if (v76)
  {
    *(_QWORD *)(v71 - 168) = v76;
    operator delete(v76);
  }
  _Block_object_dispose((const void *)(v71 - 152), 8);
  _Unwind_Resume(a1);
}

__n128 sub_1010E3514(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1010E3538(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

__n128 sub_1010E3550(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1010E3568(uint64_t a1, int a2, uint64_t a3)
{
  char *v5;

  v5 = (char *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  if (v5 != (char *)a3)
    sub_10031F73C(v5, *(char **)a3, *(_QWORD *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2 == 100;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1010E35D0(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2 == 100;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1010E35F8(uint64_t a1, int a2, uint64_t a3)
{
  char *v5;

  v5 = (char *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  if (v5 != (char *)a3)
    sub_10031F73C(v5, *(char **)a3, *(_QWORD *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2 == 100;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1010E3660(uint64_t a1, int a2, uint64_t a3)
{
  char *v5;

  v5 = (char *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  if (v5 != (char *)a3)
    sub_10031F73C(v5, *(char **)a3, *(_QWORD *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2 == 100;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1010E36C8(uint64_t a1, int a2, uint64_t a3)
{
  char *v5;

  v5 = (char *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  if (v5 != (char *)a3)
    sub_10031F73C(v5, *(char **)a3, *(_QWORD *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2 == 100;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1010E3730(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *a3;
  v5 = a3[1];
  *(_QWORD *)(v3 + 80) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(v3 + 48) = v4;
  *(_OWORD *)(v3 + 64) = v5;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2 == 100;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1010E3764(uint64_t a1)
{
  _BOOL8 v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  const char *v12;
  uint8_t *v13;
  _OWORD v14[2];
  uint64_t v15;
  void *__p;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  _DWORD v28[4];
  uint8_t buf[4];
  _BOOL4 v30;

  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  v2 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) != 0;
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
  v3 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v30 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Steadiness HealthKit inputs queried success, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021A0AF8);
    v28[0] = 67240192;
    v28[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "Steadiness HealthKit inputs queried success, %{public}d", v28, 8);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::querySteadinessHealthKitInputs(CLSilo *, SteadinessHealthKitQueryBounds, NSString *, SteadinessInputsHandler)_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  v26 = 0;
  v27 = 0;
  v25 = 0;
  sub_1002782D0(&v25, *(const void **)(v5 + 48), *(_QWORD *)(v5 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 56) - *(_QWORD *)(v5 + 48)) >> 3));
  v6 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
  v23 = 0;
  v24 = 0;
  v22 = 0;
  sub_1002782D0(&v22, *(const void **)(v7 + 48), *(_QWORD *)(v7 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 56) - *(_QWORD *)(v7 + 48)) >> 3));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
  v20 = 0;
  v21 = 0;
  v19 = 0;
  sub_1002782D0(&v19, *(const void **)(v8 + 48), *(_QWORD *)(v8 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 56) - *(_QWORD *)(v8 + 48)) >> 3));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  sub_1002782D0(&__p, *(const void **)(v9 + 48), *(_QWORD *)(v9 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48)) >> 3));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
  v15 = *(_QWORD *)(v10 + 80);
  v11 = *(_OWORD *)(v10 + 64);
  v14[0] = *(_OWORD *)(v10 + 48);
  v14[1] = v11;
  (*(void (**)(uint64_t, _BOOL8, void **, uint64_t, void **, void **, void **, _OWORD *))(v4 + 16))(v4, v2, &v25, v6, &v22, &v19, &__p, v14);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void sub_1010E3AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void sub_1010E3B20(id a1)
{
  qword_10229FE98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_1010E3B4C(id a1)
{
  qword_10229FC48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_1010E3B78(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  double v30;
  double v31;
  __int128 v32;
  BOOL v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  double v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  __int128 v43;
  double v44;
  double v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  __int128 *v49;
  __int128 *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  _QWORD *v58;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  double v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  _QWORD *v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  double *v104;
  double v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

__int128 *sub_1010E4420(__int128 *result, double *a2, double *a3)
{
  double v3;
  double v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2[1];
  v4 = a3[1];
  if (v3 >= *((double *)result + 1))
  {
    if (v4 < v3)
    {
      v8 = *((_QWORD *)a2 + 2);
      v9 = *(_OWORD *)a2;
      v10 = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_QWORD *)a2 + 2) = v10;
      *(_OWORD *)a3 = v9;
      *((_QWORD *)a3 + 2) = v8;
      if (a2[1] < *((double *)result + 1))
      {
        v11 = *((_QWORD *)result + 2);
        v12 = *result;
        v13 = *((_QWORD *)a2 + 2);
        *result = *(_OWORD *)a2;
        *((_QWORD *)result + 2) = v13;
        *(_OWORD *)a2 = v12;
        *((_QWORD *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_QWORD *)result + 2);
      v15 = *result;
      v16 = *((_QWORD *)a2 + 2);
      *result = *(_OWORD *)a2;
      *((_QWORD *)result + 2) = v16;
      *(_OWORD *)a2 = v15;
      *((_QWORD *)a2 + 2) = v14;
      if (a3[1] >= a2[1])
        return result;
      v5 = *((_QWORD *)a2 + 2);
      v6 = *(_OWORD *)a2;
      v17 = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_QWORD *)a2 + 2) = v17;
    }
    else
    {
      v5 = *((_QWORD *)result + 2);
      v6 = *result;
      v7 = *((_QWORD *)a3 + 2);
      *result = *(_OWORD *)a3;
      *((_QWORD *)result + 2) = v7;
    }
    *(_OWORD *)a3 = v6;
    *((_QWORD *)a3 + 2) = v5;
  }
  return result;
}

BOOL sub_1010E4510(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      sub_1010E4420((__int128 *)a1, (double *)(a1 + 24), (double *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1010E4784(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      v19 = (__int128 *)(a1 + 24);
      v20 = (__int128 *)(a1 + 48);
      v21 = (__int128 *)(a1 + 72);
      sub_1010E4784(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(double *)(a2 - 16) < *(double *)(a1 + 80))
      {
        v22 = *(_QWORD *)(a1 + 88);
        v23 = *v21;
        v24 = *(_QWORD *)(a2 - 8);
        *v21 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 88) = v24;
        *(_OWORD *)(a2 - 24) = v23;
        *(_QWORD *)(a2 - 8) = v22;
        if (*(double *)(a1 + 80) < *(double *)(a1 + 56))
        {
          v25 = *(_QWORD *)(a1 + 64);
          v26 = *v20;
          *v20 = *v21;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v21 = v26;
          *(_QWORD *)(a1 + 88) = v25;
          if (*(double *)(a1 + 56) < *(double *)(a1 + 32))
          {
            v27 = *(_QWORD *)(a1 + 40);
            v28 = *v19;
            *v19 = *v20;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v20 = v28;
            *(_QWORD *)(a1 + 64) = v27;
            if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
            {
              v29 = *(_QWORD *)(a1 + 16);
              v30 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v19 = v30;
              *(_QWORD *)(a1 + 40) = v29;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 48;
      sub_1010E4420((__int128 *)a1, (double *)(a1 + 24), (double *)(a1 + 48));
      v10 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      v15 = *(_QWORD *)(v10 + 16);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (v13 >= *(double *)(v17 + 32))
        {
          v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_QWORD *)(v18 + 16) = v15;
      if (++v12 == 8)
        return v10 + 24 == a2;
    }
    v9 = v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2)
      return 1;
  }
}

__n128 sub_1010E4784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1010E4420((__int128 *)a1, (double *)a2, (double *)a3);
  result.n128_u64[0] = *(_QWORD *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    v9 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v10 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    result.n128_u64[0] = *(_QWORD *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      v11 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v12 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v11;
      result.n128_u64[0] = *(_QWORD *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

uint64_t sub_1010E4850(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  void *v27;

  v8 = sub_101105B78(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = off_1021A0B28;
  *(_QWORD *)(v8 + 176) = 0;
  *(_WORD *)(v8 + 188) = 0;
  v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonServiceSession(ctor) #clss", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A0BB0);
  v10 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2114;
    v23 = v11;
    v24 = 2050;
    v25 = a1;
    v26 = 2114;
    v27 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDaemonServiceSession(ctor) #clss\", \"event\":%{public, location:escape_only}s, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"Config\":%{public, location:escape_only}@}", buf, 0x3Au);
  }
  *(_DWORD *)(a1 + 184) = objc_msgSend(objc_msgSend(a4, "objectForKey:", CFSTR("SessionType")), "integerValue");
  v12 = *(_QWORD *)(a1 + 24);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1010E4A54;
  v14[3] = &unk_10214A578;
  v14[4] = a1;
  sub_1007C9E5C(v12, (uint64_t)v14);
  *(_BYTE *)(a1 + 189) = sub_1011060EC(a1);
  sub_1010E4CA8(a1);
  os_activity_scope_leave(&state);
  return a1;
}

void sub_1010E4A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  uint64_t v15;
  uint64_t *v16;

  os_activity_scope_leave(&state);
  sub_1010E5A38(v16, 0);
  sub_10110619C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E4A54(uint64_t a1, const void *a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 32);
  if ((*(unsigned int (**)(const void *))(*(_QWORD *)a2 + 24))(a2) != 6)
    return 0;
  result = (uint64_t)objc_msgSend(*(id *)(v3 + 16), "isEqual:", sub_100026CC8((uint64_t)a2));
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(v3 + 176);
    *(_QWORD *)(v3 + 176) = v5[22];
    v5[22] = v6;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A0BD0);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 24))(a2);
      v9 = *(_QWORD *)(v3 + 16);
      v13 = 68289794;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v8;
      v19 = 2114;
      v20 = v9;
      v21 = 2050;
      v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clss consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x2Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A0BD0);
    }
    v10 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v11 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 24))(a2);
      v12 = *(_QWORD *)(v3 + 16);
      v13 = 68289794;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v11;
      v19 = 2114;
      v20 = v12;
      v21 = 2050;
      v22 = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clss consumeMatchingButterfly", "{\"msg%{public}.0s\":\"#clss consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x2Cu);
    }
    return 1;
  }
  return result;
}

void sub_1010E4CA8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  int v11;
  _BOOL4 v12;
  unsigned int v13;
  unsigned int v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD v26[5];
  uint8_t buf[8];
  __int16 v28;
  const char *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  _BOOL4 v35;
  __int16 v36;
  _BOOL4 v37;
  __int16 v38;
  unsigned int v39;

  v2 = (uint64_t *)(a1 + 176);
  v3 = *(_QWORD *)(a1 + 176);
  if (!v3)
  {
    if (*(_DWORD *)(a1 + 184) != 2
      || *(_BYTE *)(a1 + 189)
      || (objc_msgSend(*(id *)(a1 + 40), "inUseLevelIsAtLeast:", 5) & 1) != 0
      || objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceType:", 19))
    {
      operator new();
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A0BD0);
    v16 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(a1 + 16);
      v18 = *(_DWORD *)(a1 + 184);
      v19 = objc_msgSend(*(id *)(a1 + 40), "inUseLevel");
      v20 = objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceType:", 19);
      *(_DWORD *)buf = 68290306;
      *(_DWORD *)&buf[4] = 0;
      v28 = 2082;
      v29 = "";
      v30 = 2114;
      v31 = v17;
      v32 = 2050;
      v33 = a1;
      v34 = 1026;
      v35 = v18;
      v36 = 1026;
      v37 = v19;
      v38 = 1026;
      v39 = v20;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#clss can't create ServiceSessionAssertion\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"SessionType\":%{public}d, \"InUseLevel\":%{public}d, \"ServiceSession\":%{public}hhd}", buf, 0x38u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A0BD0);
    }
    v21 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v22 = *(_QWORD *)(a1 + 16);
      v23 = *(_DWORD *)(a1 + 184);
      v24 = objc_msgSend(*(id *)(a1 + 40), "inUseLevel");
      v25 = objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceType:", 19);
      *(_DWORD *)buf = 68290306;
      *(_DWORD *)&buf[4] = 0;
      v28 = 2082;
      v29 = "";
      v30 = 2114;
      v31 = v22;
      v32 = 2050;
      v33 = a1;
      v34 = 1026;
      v35 = v23;
      v36 = 1026;
      v37 = v24;
      v38 = 1026;
      v39 = v25;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clss can't create ServiceSessionAssertion", "{\"msg%{public}.0s\":\"#clss can't create ServiceSessionAssertion\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"SessionType\":%{public}d, \"InUseLevel\":%{public}d, \"ServiceSession\":%{public}hhd}", buf, 0x38u);
    }
  }
  v4 = *v2;
  if ((v3 != 0) != (*v2 != 0))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A0BB0);
    v5 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68290050;
      *(_DWORD *)&buf[4] = 0;
      v28 = 2082;
      v29 = "";
      v30 = 2114;
      v31 = v6;
      v32 = 2050;
      v33 = a1;
      v34 = 1026;
      v35 = v3 != 0;
      v36 = 1026;
      v37 = v4 != 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clss active state changed. persist for #dic rehydration\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"wasActive\":%{public}hhd, \"isActive\":%{public}hhd}", buf, 0x32u);
    }
    sub_1015A2E04(buf, (char *)-[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%p"), a1), "UTF8String"));
    v8 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 24);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v10 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    sub_1007BBF94(v7, v8, (uint64_t *)buf, v9, v10, 1);
    if (SBYTE3(v31) < 0)
      operator delete(*(void **)buf);
    v4 = *v2;
  }
  if (v4 && sub_1011085C4(a1))
    sub_101108720(a1);
  sub_101108804((id *)a1);
  v11 = *(_DWORD *)(a1 + 184);
  v12 = objc_msgSend(*(id *)(a1 + 40), "registrationResult") != 1
     && objc_msgSend(*(id *)(a1 + 40), "registrationResult") != 8;
  v13 = objc_msgSend(*(id *)(a1 + 40), "transientAwareRegistrationResult");
  if (v11 == 2)
  {
    v14 = v13;
    if (!sub_1011060EC(a1)
      && !v12
      && !((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) & 1 | (v14 == 0)))
    {
      if (sub_100762064())
      {
        *(_BYTE *)(a1 + 188) = 1;
        if (!sub_101107BE4(a1, 7))
        {
          v15 = objc_msgSend(*(id *)(a1 + 32), "silo");
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          v26[2] = sub_1010E593C;
          v26[3] = &unk_10212ECA0;
          v26[4] = a1;
          objc_msgSend(v15, "async:", v26);
        }
      }
    }
    if (*(_BYTE *)(a1 + 188) && (!v14 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1)))
      *(_BYTE *)(a1 + 188) = 0;
  }
  sub_10110883C((_QWORD *)a1);
}

void sub_1010E5298(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  operator delete();
}

uint64_t sub_1010E52E0(_QWORD *a1)
{
  *a1 = off_1021A0B28;
  sub_1011078A4((uint64_t)a1, 6);
  sub_1010E5A38(a1 + 22, 0);
  return sub_10110619C((uint64_t)a1);
}

void sub_1010E5328(_QWORD *a1)
{
  sub_1010E52E0(a1);
  operator delete();
}

void sub_1010E534C(uint64_t a1, CLConnectionMessage **a2)
{
  _QWORD *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;

  v4 = (_QWORD *)CLConnectionMessage::name(*a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44)
      goto LABEL_7;
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 44)
  {
    goto LABEL_7;
  }
  if (!memcmp(v4, "kCLConnectionMessageDestroyUponDisconnection", 0x2CuLL))
  {
    *(_BYTE *)(a1 + 48) = 1;
    return;
  }
LABEL_7:
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A0BB0);
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = CLConnectionMessage::name(*a2);
    v9 = *(char *)(v8 + 23) >= 0 ? (uint64_t *)v8 : *(uint64_t **)v8;
    v14 = 68289794;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = v7;
    v20 = 2050;
    v21 = a1;
    v22 = 2082;
    v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #clss received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x30u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A0BB0);
  }
  v10 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = (uint64_t *)CLConnectionMessage::name(*a2);
    if (*((char *)v12 + 23) >= 0)
      v13 = v12;
    else
      v13 = (uint64_t *)*v12;
    v14 = 68289794;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = v11;
    v20 = 2050;
    v21 = a1;
    v22 = 2082;
    v23 = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning #clss received unhandled message", "{\"msg%{public}.0s\":\"#Warning #clss received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x30u);
  }
}

uint64_t sub_1010E5590()
{
  return 6;
}

uint64_t sub_1010E5598(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 184);
  v2 = 3;
  if (!v1)
    v2 = 4099;
  if ((v1 - 1) < 2)
    v2 |= 0x2014uLL;
  if (v1 == 2)
    return v2 | 0x400;
  else
    return v2;
}

void sub_1010E55D0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A0BB0);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v6 = 68289538;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = v3;
    v12 = 2050;
    v13 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clss authContext has changed\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v6, 0x26u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A0BB0);
  }
  v4 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = 68289538;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = v5;
    v12 = 2050;
    v13 = a1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clss authContext has changed", "{\"msg%{public}.0s\":\"#clss authContext has changed\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v6, 0x26u);
  }
  sub_1010E4CA8(a1);
}

uint64_t sub_1010E577C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

NSDictionary *sub_1010E5784(uint64_t a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v3[0] = CFSTR("SessionType");
  v4[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 184));
  v3[1] = CFSTR("SDKAtLeast2024");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80));
  v3[2] = CFSTR("SessionActive");
  v4[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_QWORD *)(a1 + 176) != 0);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

BOOL sub_1010E584C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 184) - 1) < 2;
}

uint64_t sub_1010E5860(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 184) || objc_msgSend(*(id *)(a1 + 40), "transientAwareRegistrationResult") != 4)
    return 16 * (*(_QWORD *)(a1 + 176) == 0);
  else
    return 4096;
}

uint64_t sub_1010E58AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 188);
}

BOOL sub_1010E58B4(uint64_t a1)
{
  return (objc_msgSend(*(id *)(a1 + 40), "diagnosticMask") & 0x400) != 0
      || *(_DWORD *)(a1 + 184) == 2
      && (objc_msgSend(*(id *)(a1 + 40), "transientAwareRegistrationResult") == 1
       && objc_msgSend(*(id *)(a1 + 40), "registrationResult") == 4
       || objc_msgSend(*(id *)(a1 + 40), "registrationResult") == 2
       || objc_msgSend(*(id *)(a1 + 40), "registrationResult") == 1 && !sub_100762064());
}

void sub_1010E593C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *__p[2];
  char v4;
  _DWORD v5[18];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 16);
  sub_1015A2E04(__p, "");
  sub_1007F5908((uint64_t)v5, 7, v2, 0, (__int128 *)__p);
  sub_101107F88(v1, v5, 0);
  sub_100235568((uint64_t)v5);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1010E59B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_100235568((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1010E59E0(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_1010E5A0C(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1010E5A38(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1010E5A74(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1010E5A74(uint64_t a1)
{
  sub_1007D6064(*(_QWORD *)(a1 + 16), *(void **)a1, *(_DWORD *)(a1 + 8) == 0, *(_DWORD *)(a1 + 8) == 1, *(_DWORD *)(a1 + 8) == 2, *(unsigned __int8 *)(a1 + 24), 0);

  return a1;
}

uint64_t sub_1010E5AD0(uint64_t a1, void *a2, int a3, int a4, uint64_t a5)
{
  id v9;

  *(_BYTE *)(a1 + 24) = 0;
  v9 = a2;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 24) = a4;
  sub_1007D6064(a5, v9, a3 == 0, a3 == 1, a3 == 2, a4, 1);
  return a1;
}

void sub_1010E5B48(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 29) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = (_QWORD *)(a1 + 72);
  sub_1010E7544(a1 + 64, *(_QWORD **)(a1 + 72));
  *(_QWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 80) = 0;
  *v2 = 0;
}

double sub_1010E5B8C(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 29) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

uint64_t sub_1010E5BAC(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 29) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = (_QWORD *)(a1 + 72);
  sub_1010E7544(a1 + 64, *(_QWORD **)(a1 + 72));
  *(_QWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 80) = 0;
  *v2 = 0;
  return a1;
}

void sub_1010E5BF4(uint64_t a1, float32x2_t *a2, double a3, int32x4_t a4)
{
  float32x2_t v6;
  double v7;
  signed int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  signed int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t **v18;
  _QWORD *v19;
  float v20;
  _OWORD v21[3];
  int v22;
  int *v23;

  v20 = *(float *)&a3;
  *(float *)a4.i32 = *(float *)(a1 + 4) + (float)(*(float *)&a3 * *(float *)&a3);
  *(float *)a1 = *(float *)a1 + *(float *)&a3;
  *(_DWORD *)(a1 + 4) = a4.i32[0];
  v6 = *a2;
  *(float32x2_t *)a4.i8 = vadd_f32(*a2, *(float32x2_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = a4.i64[0];
  a4.i32[0] = a2[1].i32[0];
  *(float *)(a1 + 16) = *(float *)a4.i32 + *(float *)(a1 + 16);
  v7 = COERCE_DOUBLE(vmla_n_f32(*(float32x2_t *)(a1 + 20), v6, *(float *)&a3));
  *(double *)(a1 + 20) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 28);
  *(float *)a4.i32 = *(float *)&v7 + (float)(*(float *)&a3 * *(float *)a4.i32);
  *(_DWORD *)(a1 + 28) = a4.i32[0];
  ++*(_DWORD *)(a1 + 32);
  sub_1010E5D98(a1, a3, a4, v7, *(double *)&v6);
  v8 = llroundf(v20);
  v22 = v8;
  v11 = *(_QWORD *)(a1 + 72);
  v10 = a1 + 72;
  v9 = v11;
  if (!v11)
    goto LABEL_11;
  v12 = v10;
  do
  {
    v13 = *(_DWORD *)(v9 + 32);
    v14 = v13 < v8;
    if (v13 >= v8)
      v15 = (uint64_t *)v9;
    else
      v15 = (uint64_t *)(v9 + 8);
    if (!v14)
      v12 = v9;
    v9 = *v15;
  }
  while (*v15);
  if (v12 != v10 && *(_DWORD *)(v12 + 32) <= v8)
  {
    v19 = (_QWORD *)(v12 + 40);
    if (*(_QWORD *)(v12 + 80) == 10)
    {
      ++*(_QWORD *)(v12 + 72);
      *(_QWORD *)(v12 + 80) = 9;
      sub_1010E7864(v12 + 40, 1);
    }
    sub_1010E5E38(v19, (uint64_t *)a2);
  }
  else
  {
LABEL_11:
    v16 = (uint64_t **)(v10 - 8);
    memset(v21, 0, sizeof(v21));
    v23 = &v22;
    v17 = sub_1010E758C(v16, &v22, (uint64_t)&unk_101B9EB60, &v23);
    sub_1010E7754(v17 + 5, (uint64_t)v21);
    sub_1010E76C0(v21);
    *(_QWORD *)&v21[0] = &v22;
    v18 = sub_1010E758C(v16, &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)v21);
    sub_1010E5E38(v18 + 5, (uint64_t *)a2);
  }
}

void sub_1010E5D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1010E76C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E5D98(uint64_t result, double a2, int32x4_t a3, double a4, double a5)
{
  float v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x2_t v11;
  char v12;

  *(float *)a3.i32 = (float)*(int *)(result + 32);
  LODWORD(a5) = *(_DWORD *)result;
  v5 = *(float *)(result + 4);
  *(float *)&a4 = (float)(*(float *)a3.i32 * v5) - (float)(*(float *)&a5 * *(float *)&a5);
  if (fabsf(*(float *)&a4) <= 0.000001)
  {
    v12 = 0;
  }
  else
  {
    *(float *)&a5 = -*(float *)&a5;
    *(float *)&a4 = 1.0 / *(float *)&a4;
    v6 = *(float32x4_t *)(result + 8);
    v7 = a3;
    v7.i32[1] = *(_DWORD *)(result + 4);
    v8 = (float32x4_t)vzip1q_s32(v7, v7);
    v8.f32[2] = (float)*(int *)(result + 32);
    v9 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL);
    v10 = (float32x4_t)vextq_s8((int8x16_t)v6, v9, 0xCuLL);
    v11 = *(float32x2_t *)(result + 24);
    *(float32x2_t *)&v10.i32[1] = v11;
    *(float32x4_t *)(result + 40) = vmulq_n_f32(vmlaq_f32(vmulq_n_f32(v6, *(float *)&a5), v10, v8), *(float *)&a4);
    *(float32x2_t *)(result + 56) = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&a4, 0), vmla_n_f32(vmul_f32(v11, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&a5, 0)), (float32x2_t)vext_s8(*(int8x8_t *)v6.f32, *(int8x8_t *)v9.i8, 4uLL), v5));
    v12 = 1;
  }
  *(_BYTE *)(result + 36) = v12;
  return result;
}

void sub_1010E5E38(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1010E7A60(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v8 = v9;
  ++a1[5];
}

BOOL sub_1010E5EF4(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    *a2 = 1;
    a2[8] = *(_DWORD *)(a1 + 40);
    a2[9] = *(_DWORD *)(a1 + 44);
    a2[10] = *(_DWORD *)(a1 + 48);
    a2[11] = *(_DWORD *)(a1 + 52);
    a2[12] = *(_DWORD *)(a1 + 56);
    a2[13] = *(_DWORD *)(a1 + 60);
  }
  return v2 != 0;
}

void sub_1010E5F40(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int32x4_t v4;
  double v5;
  double v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  NSObject *v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  float v22;
  float v23;
  float v24;
  double v25;
  void *v26;
  float v27;
  float v28;
  float v29;
  double v30;
  const char *v31;
  char *v32;
  void *v33;
  float v34;
  float v35;
  float v36;
  double v37;
  const char *v38;
  char *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  NSObject *v49;
  float v50;
  float v51;
  float v52;
  double v53;
  uint64_t v54;
  const char *v55;
  double v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  int v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  _BYTE buf[32];
  _QWORD v71[201];

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A0C10);
  v2 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Begin.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A0C10);
    LOWORD(v62) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Begin.", &v62, 2);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (*(int *)(a1 + 32) < 2 || !*(_BYTE *)(a1 + 36))
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A0C10);
    v13 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Too few points.  End.", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A0C10);
    LOWORD(v62) = 0;
    LODWORD(v56) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Too few points.  End.", &v62, *(_QWORD *)&v56);
    v15 = (char *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v14);
LABEL_68:
    if (v15 != buf)
      free(v15);
    return;
  }
  v61 = 0;
  v60 = 0.0;
  *(float *)&v3 = sub_1010E69C0(a1, (float *)&v61 + 1, (float *)&v61, &v60);
  if (*(_QWORD *)(a1 + 80))
  {
    v7 = *(_QWORD **)(a1 + 64);
    v8 = a1 + 72;
    v9 = v7[9];
    v10 = v7[6];
    v11 = (_QWORD *)(v10 + 8 * (v9 / 0x155));
    if (v7[7] == v10)
      v12 = 0;
    else
      v12 = *v11 + 12 * (v9 % 0x155);
    *(_QWORD *)&v57 = *(_QWORD *)(a1 + 64);
    *((_QWORD *)&v57 + 1) = a1 + 72;
    *(_QWORD *)&v58 = v11;
    *((_QWORD *)&v58 + 1) = v12;
  }
  else
  {
    v8 = a1 + 72;
    v58 = 0uLL;
    *(_QWORD *)&v57 = a1 + 72;
    *((_QWORD *)&v57 + 1) = a1 + 72;
    v7 = (_QWORD *)(a1 + 72);
  }
  v59 = 0;
  v16 = a1 + 72;
  if (v7 == (_QWORD *)(a1 + 72))
    goto LABEL_28;
  do
  {
    do
    {
      v40 = *(float *)sub_1018B393C((uint64_t)&v57);
      v41 = *(float *)(a1 + 40);
      v42 = *(float *)(a1 + 52);
      v43 = *(float *)(sub_1018B393C((uint64_t)&v57) + 4);
      v44 = *(float *)(a1 + 44);
      v45 = *(float *)(a1 + 56);
      v46 = *(float *)(sub_1018B393C((uint64_t)&v57) + 8);
      HIDWORD(v56) = *(_DWORD *)(a1 + 48);
      v47 = *(float *)(a1 + 60);
      v48 = sub_1018B393C((uint64_t)&v57);
      if (fabsf((float)(v42 + (float)(v40 * v41)) - v43) <= (float)(*((float *)&v61 + 1) * 3.5)
        && fabsf((float)(v45 + (float)(v40 * v44)) - v46) <= (float)(*(float *)&v61 * 3.5)
        && fabsf((float)(v47 + (float)(v40 * *((float *)&v56 + 1))) - *(float *)(v48 + 12)) <= (float)(v60 * 3.5))
      {
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_1021A0C10);
        v21 = off_10229FD58;
        if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
        {
          v22 = *(float *)sub_1018B393C((uint64_t)&v57);
          v23 = *(float *)(sub_1018B393C((uint64_t)&v57) + 4);
          v24 = *(float *)(sub_1018B393C((uint64_t)&v57) + 8);
          v25 = *(float *)(sub_1018B393C((uint64_t)&v57) + 12);
          *(_DWORD *)buf = 134218752;
          *(double *)&buf[4] = v22;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v23;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v24;
          LOWORD(v71[0]) = 2048;
          *(double *)((char *)v71 + 2) = v25;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,0", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_1021A0C10);
          v33 = off_10229FD58;
          v34 = *(float *)sub_1018B393C((uint64_t)&v57);
          v35 = *(float *)(sub_1018B393C((uint64_t)&v57) + 4);
          v36 = *(float *)(sub_1018B393C((uint64_t)&v57) + 8);
          v37 = *(float *)(sub_1018B393C((uint64_t)&v57) + 12);
          v62 = 134218752;
          v63 = v34;
          v64 = 2048;
          v65 = v35;
          v66 = 2048;
          v67 = v36;
          v68 = 2048;
          v69 = v37;
          LODWORD(v56) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 1, "temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,0", COERCE_DOUBLE(&v62), v56, *(double *)&v57, *((double *)&v57 + 1));
          v39 = (char *)v38;
          sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v38);
          if (v39 != buf)
            free(v39);
        }
        sub_1018B39C0(&v57);
      }
      else
      {
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_1021A0C10);
        v49 = off_10229FD58;
        if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
        {
          v50 = *(float *)sub_1018B393C((uint64_t)&v57);
          v51 = *(float *)(sub_1018B393C((uint64_t)&v57) + 4);
          v52 = *(float *)(sub_1018B393C((uint64_t)&v57) + 8);
          v53 = *(float *)(sub_1018B393C((uint64_t)&v57) + 12);
          *(_DWORD *)buf = 134218752;
          *(double *)&buf[4] = v50;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v51;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v52;
          LOWORD(v71[0]) = 2048;
          *(double *)((char *)v71 + 2) = v53;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,1", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_1021A0C10);
          v26 = off_10229FD58;
          v27 = *(float *)sub_1018B393C((uint64_t)&v57);
          v28 = *(float *)(sub_1018B393C((uint64_t)&v57) + 4);
          v29 = *(float *)(sub_1018B393C((uint64_t)&v57) + 8);
          v30 = *(float *)(sub_1018B393C((uint64_t)&v57) + 12);
          v62 = 134218752;
          v63 = v27;
          v64 = 2048;
          v65 = v28;
          v66 = 2048;
          v67 = v29;
          v68 = 2048;
          v69 = v30;
          LODWORD(v56) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 1, "temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,1", COERCE_DOUBLE(&v62), v56, *(double *)&v57, *((double *)&v57 + 1));
          v32 = (char *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
        sub_1010E6CA4(a1, (uint64_t)&v57, buf);
        v57 = *(_OWORD *)buf;
        v3 = *(double *)&buf[16];
        v58 = *(_OWORD *)&buf[16];
        v54 = v59;
        v59 = 0;
        if (v54)
          operator delete();
        if (v71[0])
          operator delete();
      }
    }
    while ((_QWORD)v57 != v16);
    v8 = *((_QWORD *)&v57 + 1);
LABEL_28:
    ;
  }
  while (v8 != v16);
  v19 = v59;
  v59 = 0;
  if (v19)
    operator delete();
  sub_1010E6E20(a1, v3, v4, v5, v6);
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A0C10);
  v20 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "End.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A0C10);
    LOWORD(v62) = 0;
    LODWORD(v56) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "End.", &v62, *(_QWORD *)&v56);
    v15 = (char *)v55;
    sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v55);
    goto LABEL_68;
  }
}

void sub_1010E6964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    operator delete();
  _Unwind_Resume(exception_object);
}

float sub_1010E69C0(uint64_t a1, float *a2, float *a3, float *a4)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  int v34;
  float result;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;

  if (*(_QWORD *)(a1 + 80))
  {
    v8 = *(_QWORD **)(a1 + 64);
    v9 = v8[9];
    v10 = v8[6];
    v11 = (_QWORD *)(v10 + 8 * (v9 / 0x155));
    if (v8[7] == v10)
      v12 = 0;
    else
      v12 = *v11 + 12 * (v9 % 0x155);
    v43 = *(_QWORD *)(a1 + 64);
    v44 = a1 + 72;
    v45 = v11;
    v46 = v12;
  }
  else
  {
    v45 = 0;
    v46 = 0;
    v43 = a1 + 72;
    v44 = a1 + 72;
  }
  v47 = 0;
  v13 = a1 + 72;
  v14 = 0.0;
  v15 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  v18 = 0.0;
  v19 = 0.0;
  while (v43 != v13 || v44 != v13)
  {
    v21 = *(float *)sub_1018B393C((uint64_t)&v43);
    v42 = *(float *)(a1 + 52);
    v36 = *(float *)(a1 + 40);
    v37 = v19;
    v38 = v18;
    v39 = v17;
    v40 = v15;
    v41 = v16;
    v22 = v14;
    v23 = *(float *)(sub_1018B393C((uint64_t)&v43) + 4);
    v24 = *(float *)(a1 + 44);
    v25 = *(float *)(a1 + 56);
    v26 = *(float *)(sub_1018B393C((uint64_t)&v43) + 8);
    v27 = *(float *)(a1 + 48);
    v28 = *(float *)(a1 + 60);
    v29 = sub_1018B393C((uint64_t)&v43);
    v30 = (float)(v42 + (float)(v21 * v36)) - v23;
    v31 = (float)(v25 + (float)(v21 * v24)) - v26;
    v32 = (float)(v28 + (float)(v21 * v27)) - *(float *)(v29 + 12);
    v19 = v37 + v30;
    v14 = v22 + (float)(v30 * v30);
    v18 = v38 + v31;
    v15 = v40 + (float)(v31 * v31);
    v17 = v39 + v32;
    v16 = v41 + (float)(v32 * v32);
    sub_1018B39C0(&v43);
  }
  v33 = v47;
  v47 = 0;
  if (v33)
    operator delete();
  v34 = *(_DWORD *)(a1 + 32) - 1;
  *a2 = sqrtf((float)(v14 - (float)(v19 * v19)) / (float)v34);
  *a3 = sqrtf((float)(v15 - (float)(v18 * v18)) / (float)v34);
  result = sqrtf((float)(v16 - (float)(v17 * v17)) / (float)v34);
  *a4 = result;
  return result;
}

void sub_1010E6BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    operator delete();
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010E6C10@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;

  if (*(_QWORD *)(result + 80))
  {
    v2 = *(_QWORD **)(result + 64);
    v3 = v2[9];
    v4 = v2[6];
    v5 = (_QWORD *)(v4 + 8 * (v3 / 0x155));
    if (v2[7] == v4)
      v6 = 0;
    else
      v6 = *v5 + 12 * (v3 % 0x155);
    *a2 = v2;
    a2[1] = result + 72;
    a2[2] = v5;
    a2[3] = v6;
  }
  else
  {
    a2[2] = 0;
    a2[3] = 0;
    *a2 = result + 72;
    a2[1] = result + 72;
  }
  a2[4] = 0;
  return result;
}

uint64_t sub_1010E6C90@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  a2[2] = 0;
  a2[3] = 0;
  *a2 = result + 72;
  a2[1] = result + 72;
  a2[4] = 0;
  return result;
}

void sub_1010E6CA4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v7 = (_QWORD *)sub_1010E6FB8((int64x2_t *)(*(_QWORD *)a2 + 40), *(_QWORD **)(a2 + 16), *(char **)(a2 + 24));
  v8 = v6;
  v9 = *(_QWORD **)a2;
  v10 = *(_QWORD *)(*(_QWORD *)a2 + 48);
  if (*(_QWORD *)(*(_QWORD *)a2 + 56) == v10)
  {
    v12 = 0;
  }
  else
  {
    v11 = v9[10] + v9[9];
    v12 = *(_QWORD *)(v10 + 8 * (v11 / 0x155)) + 12 * (v11 % 0x155);
  }
  if (v12 == v6)
  {
    v14 = (_QWORD *)v9[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v16 = *(_QWORD **)a2;
      do
      {
        v15 = (_QWORD *)v16[2];
        v17 = *v15 == (_QWORD)v16;
        v16 = v15;
      }
      while (!v17);
    }
    if (!v9[10])
    {
      sub_10008A9F0((uint64_t **)(a1 + 64), *(uint64_t **)a2);
      sub_1010E76C0(v9 + 5);
      operator delete(v9);
    }
    v13 = *(_QWORD **)(a2 + 8);
    if (v15 != v13)
    {
      v18 = v15[9];
      v19 = v15[6];
      v7 = (_QWORD *)(v19 + 8 * (v18 / 0x155));
      if (v15[7] == v19)
        v8 = 0;
      else
        v8 = *v7 + 12 * (v18 % 0x155);
    }
    *a3 = v15;
  }
  else
  {
    v13 = *(_QWORD **)(a2 + 8);
    *a3 = v9;
  }
  a3[1] = v13;
  a3[2] = v7;
  a3[3] = v8;
  a3[4] = 0;
}

uint64_t sub_1010E6E20(uint64_t a1, double a2, int32x4_t a3, double a4, double a5)
{
  double v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  float v15;
  float v16;
  float32x2_t v17;
  uint64_t v18;
  float v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;

  *(_DWORD *)(a1 + 32) = 0;
  v6 = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(_QWORD *)(a1 + 80))
  {
    v7 = *(_QWORD **)(a1 + 64);
    v8 = v7[9];
    v9 = v7[6];
    v10 = (_QWORD *)(v9 + 8 * (v8 / 0x155));
    if (v7[7] == v9)
      v11 = 0;
    else
      v11 = *v10 + 12 * (v8 % 0x155);
    v21 = *(_QWORD *)(a1 + 64);
    v22 = a1 + 72;
    v23 = v10;
    v24 = v11;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v21 = a1 + 72;
    v22 = a1 + 72;
  }
  v25 = 0;
  v12 = a1 + 72;
  while (v21 != v12 || v22 != v12)
  {
    v20 = *(float *)sub_1018B393C((uint64_t)&v21);
    v14 = sub_1018B393C((uint64_t)&v21);
    v15 = *(float *)(v14 + 12);
    v16 = *(float *)(a1 + 4) + (float)(v20 * v20);
    v17 = *(float32x2_t *)(v14 + 4);
    *(float *)a1 = v20 + *(float *)a1;
    *(float *)(a1 + 4) = v16;
    *(float32x2_t *)(a1 + 8) = vadd_f32(v17, *(float32x2_t *)(a1 + 8));
    *(float *)(a1 + 16) = v15 + *(float *)(a1 + 16);
    *(float32x2_t *)(a1 + 20) = vmla_n_f32(*(float32x2_t *)(a1 + 20), v17, v20);
    *(float *)(a1 + 28) = *(float *)(a1 + 28) + (float)(v20 * v15);
    ++*(_DWORD *)(a1 + 32);
    sub_1018B39C0(&v21);
  }
  v18 = v25;
  v25 = 0;
  if (v18)
    operator delete();
  return sub_1010E5D98(a1, v6, a3, a4, a5);
}

void sub_1010E6F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    operator delete();
  _Unwind_Resume(exception_object);
}

unint64_t sub_1010E6FB8(int64x2_t *a1, _QWORD *a2, char *a3)
{
  unint64_t v4;
  uint64_t v5;
  char **v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE **v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  __n128 v33[2];

  v4 = a1[2].u64[0];
  v5 = a1->i64[1];
  v6 = (char **)(v5 + 8 * (v4 / 0x155));
  if (a1[1].i64[0] == v5)
    v7 = 0;
  else
    v7 = &(*v6)[12 * (v4 % 0x155)];
  if (a3 == v7)
    v8 = 0;
  else
    v8 = 341 * ((char **)a2 - v6)
       - 0x5555555555555555 * ((uint64_t)&a3[-*a2] >> 2)
       + 0x5555555555555555 * ((v7 - *v6) >> 2);
  v33[0].n128_u64[0] = v5 + 8 * (v4 / 0x155);
  v33[0].n128_u64[1] = (unint64_t)v7;
  sub_1010E7D74(v33, v8);
  v9 = a1[2].i64[1];
  v10 = v33[0].n128_u64[1] - *(_QWORD *)v33[0].n128_u64[0];
  v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 2);
  if (v8 <= (unint64_t)(v9 - 1) >> 1)
  {
    if (v10 < -11)
    {
      v25 = 339 - v11;
      v26 = ((339 - v11) * (unsigned __int128)0x8060180601806019) >> 64;
      v27 = (v26 + ((v25 - v26) >> 1)) >> 8;
      v18 = (_QWORD *)(v33[0].n128_u64[0] - 8 * v27);
      v19 = (char *)(*v18 + 12 * (341 * v27 - v25) + 4080);
    }
    else
    {
      v15 = v11 + 1;
      v16 = ((v11 + 1) * (unsigned __int128)0x8060180601806019) >> 64;
      v17 = (v16 + ((v15 - v16) >> 1)) >> 8;
      v18 = (_QWORD *)(v33[0].n128_u64[0] + 8 * v17);
      v19 = (char *)(*v18 + 12 * (v15 - 341 * v17));
    }
    sub_1010E7E30(v6, v7, (char **)v33[0].n128_u64[0], (char *)v33[0].n128_u64[1], v18, v19, v33);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101B9DFC0);
    sub_1010E7864((uint64_t)a1, 1);
  }
  else
  {
    if (v10 < -11)
    {
      v20 = 339 - v11;
      v13 = (_QWORD *)(v33[0].n128_u64[0] - 8 * (v20 / 0x155));
      v14 = (_BYTE *)(*v13 + 12 * (341 * (v20 / 0x155) - v20) + 4080);
    }
    else
    {
      v12 = v11 + 1;
      v13 = (_QWORD *)(v33[0].n128_u64[0] + 8 * (v12 / 0x155));
      v14 = (_BYTE *)(*v13 + 12 * (v12 % 0x155));
    }
    v21 = a1[2].i64[0] + v9;
    v22 = a1->i64[1];
    v23 = (_BYTE **)(v22 + 8 * (v21 / 0x155));
    if (a1[1].i64[0] == v22)
      v24 = 0;
    else
      v24 = &(*v23)[12 * (v21 % 0x155)];
    sub_1010E7FDC(v13, v14, v23, v24, (uint64_t)v33);
    --a1[2].i64[1];
    sub_1010E78C0(a1, 1);
  }
  v28 = a1[2].u64[0];
  v29 = a1->i64[1];
  v30 = (_QWORD *)(v29 + 8 * (v28 / 0x155));
  if (a1[1].i64[0] == v29)
    v31 = 0;
  else
    v31 = *v30 + 12 * (v28 % 0x155);
  v33[0].n128_u64[0] = (unint64_t)v30;
  v33[0].n128_u64[1] = v31;
  sub_1010E7D74(v33, v8);
  return v33[0].n128_u64[0];
}

uint64_t sub_1010E72F4(uint64_t a1, float32x2_t *a2, double a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float32_t v22;
  uint64_t v23;
  float v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;

  if (!*(_BYTE *)(a1 + 36) || *(int *)(a1 + 32) < 1)
    return 0;
  a2[1].i32[0] = 0;
  *a2 = 0;
  if (*(_QWORD *)(a1 + 80))
  {
    v5 = *(_QWORD **)(a1 + 64);
    v6 = v5[9];
    v7 = v5[6];
    v8 = (_QWORD *)(v7 + 8 * (v6 / 0x155));
    v9 = v5[7] == v7 ? 0 : *v8 + 12 * (v6 % 0x155);
    v26 = *(_QWORD *)(a1 + 64);
    v27 = a1 + 72;
    v28 = v8;
    v29 = v9;
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v26 = a1 + 72;
    v27 = a1 + 72;
  }
  v10 = 0;
  v30 = 0;
  v11 = a1 + 72;
  while (v26 != v11 || v27 != v11)
  {
    v13 = *(float *)sub_1018B393C((uint64_t)&v26);
    v14 = *(float *)(a1 + 40);
    v15 = *(float *)(a1 + 52);
    v16 = *(float *)(sub_1018B393C((uint64_t)&v26) + 4);
    v25 = *(float *)(a1 + 44);
    v17 = *(float *)(a1 + 56);
    v18 = *(float *)(sub_1018B393C((uint64_t)&v26) + 8);
    v19 = *(float *)(a1 + 48);
    v20 = *(float *)(a1 + 60);
    v21 = (float)(v20 + (float)(v13 * v19)) - *(float *)(sub_1018B393C((uint64_t)&v26) + 12);
    v22 = a2->f32[1]
        + (float)((float)((float)(v17 + (float)(v13 * v25)) - v18) * (float)((float)(v17 + (float)(v13 * v25)) - v18));
    a2->f32[0] = a2->f32[0]
               + (float)((float)((float)(v15 + (float)(v13 * v14)) - v16)
                       * (float)((float)(v15 + (float)(v13 * v14)) - v16));
    a2->f32[1] = v22;
    a2[1].f32[0] = a2[1].f32[0] + (float)(v21 * v21);
    --v10;
    sub_1018B39C0(&v26);
  }
  v23 = v30;
  v30 = 0;
  if (v23)
    operator delete();
  if (!v10)
    return 0;
  *(float *)&a3 = (float)-v10;
  *a2 = vdiv_f32(*a2, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  a2[1].f32[0] = a2[1].f32[0] / *(float *)&a3;
  return 1;
}

void sub_1010E74DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    operator delete();
  _Unwind_Resume(exception_object);
}

void sub_1010E7518(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1010E7544(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1010E7544(a1, *a2);
    sub_1010E7544(a1, a2[1]);
    sub_1010E76C0(a2 + 5);
    operator delete(a2);
  }
}

uint64_t **sub_1010E758C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int v11;
  char *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (char *)operator new(0x58uLL);
    v14[1] = v7;
    *((_DWORD *)v12 + 8) = **a4;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    v15 = 1;
    sub_1000145B0(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_1010E767C((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_1010E767C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1010E76C0(v2 + 5);
    operator delete(v2);
  }
}

uint64_t sub_1010E76C0(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 170;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 341;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

uint64_t sub_1010E7754(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 170;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 341;
LABEL_7:
    a1[4] = v8;
  }
  sub_1010E77F4(a1);
  result = sub_1010E79F4((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1010E77F4(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_1010E7864((uint64_t)a1, 0);
    sub_1010E78C0(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_1010E7934((uint64_t)a1);
}

uint64_t sub_1010E7864(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x155)
    a2 = 1;
  if (v2 < 0x2AA)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 341;
  }
  return v4 ^ 1u;
}

uint64_t sub_1010E78C0(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 341 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x155)
    a2 = 1;
  if (v5 < 0x2AA)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_1010E7934(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_1010E79F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1010E7934(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_1010E7A60(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFFCuLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFFCuLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFFCuLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1010E7D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_1010E7D74(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 2);
    if ((uint64_t)v3 < 1)
    {
      v5 = 340 - v3;
      v6 = &v2[-(v5 / 0x155)];
      *result = v6;
      v4 = *v6 + 12 * (341 * (v5 / 0x155) - v5) + 4080;
    }
    else
    {
      *result = &v2[v3 / 0x155];
      v4 = v2[v3 / 0x155] + 12 * (v3 % 0x155);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_1010E7E30@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_1010E7EFC(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4092;
    }
    v18 = *a1 + 4092;
    v19 = a2;
  }
  sub_1010E7EFC(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1010E7EFC@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-v10] >> 2);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 2)) < v12)
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 2);
      v11 -= 12 * v12;
      a4 -= 12 * v12;
      if (v12)
        result = memmove(a4, v11, 12 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4092);
    }
    if ((char *)(*v6 + 4092) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_1010E7FDC(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4092); ; i = v12 + 4092)
    {
      sub_1010E806C(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1010E806C(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_1010E806C@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - __dst + 4092) >> 2);
      v12 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 2)) >= v11 ? v11 : 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 2);
      if (v12)
        result = memmove(__dst, v7, 12 * v12);
      v7 += 12 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 12 * v12;
    if ((char *)*(v6 - 1) + 4092 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

_QWORD *sub_1010E8154(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = (std::__shared_weak_count *)a2[1];
  v11 = *a2;
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_1010DAC18((uint64_t)a1, &v11, a3);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *a1 = &off_1021A0C40;
  return a1;
}

void sub_1010E81EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1010E820C(uint64_t a1)
{
  sub_1010DACD0(a1);
  operator delete();
}

uint64_t sub_1010E8230(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  double v10;
  uint64_t *v11;
  double v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  ++*(_DWORD *)(a1 + 100);
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v19 = v5;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v5 + 48))(v5, a2, 450.0);
  v16 = (uint64_t)&v16;
  v17 = &v16;
  v18 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _QWORD, double))(*(_QWORD *)v5 + 64))(v5, &v16, a2, 0, 30.0);
  if ((v8 & 1) != 0)
  {
    v9 = v17;
    if (v17 == &v16)
      goto LABEL_18;
    v10 = *(double *)(a2 + 104);
    v11 = &v16;
    do
    {
      if (v10 == -1.0)
        goto LABEL_12;
      v12 = vabdd_f64(v10, *((float *)v9 + 10));
      if (v12 > 180.0)
        v12 = 360.0 - v12;
      if (v12 <= 15.0)
      {
LABEL_12:
        if (v11 == &v16 || *((float *)v9 + 8) < *((float *)v11 + 8))
          v11 = v9;
      }
      v9 = (uint64_t *)v9[1];
    }
    while (v9 != &v16);
    if (v11 == &v16)
    {
LABEL_18:
      *(_OWORD *)(a2 + 152) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a2 + 168) = *(_QWORD *)(a2 + 104);
      ++*(_DWORD *)(a1 + 104);
    }
    else
    {
      sub_1010CE30C(a2, v11 + 2);
      *(_DWORD *)(a2 + 176) = *((_DWORD *)v11 + 8);
      v4 = v20;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    ++*(_DWORD *)(a1 + 108);
  }
  sub_1001A5CBC(&v16);
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v8;
}

void sub_1010E8408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_1001A5CBC((uint64_t *)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E8430(uint64_t a1)
{
  unsigned __int8 *v2;

  *(_WORD *)a1 = 0;
  v2 = (unsigned __int8 *)(a1 + 1);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1010FD690(a1 + 80);
  sub_1010FD690(a1 + 3416);
  *(_QWORD *)(a1 + 6768) = 0;
  *(_OWORD *)(a1 + 6752) = 0u;
  sub_1010FD690(a1 + 6776);
  sub_1010FD830(a1 + 10112);
  sub_1010FDA10(a1 + 11544);
  sub_1010FDBD0(a1 + 13272);
  sub_1010E8510(v2);
  sub_1010E854C(a1, 1);
  atomic_store(0, v2);
  return a1;
}

void *sub_1010E84D4(uint64_t a1)
{
  unsigned __int8 *v2;
  void *result;

  v2 = (unsigned __int8 *)(a1 + 1);
  sub_1010E8510((unsigned __int8 *)(a1 + 1));
  result = sub_1010E854C(a1, 1);
  atomic_store(0, v2);
  return result;
}

unsigned __int8 *sub_1010E8510(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;

  v1 = result;
  while (1)
  {
    do
      v2 = __ldaxr(v1);
    while (__stxr(1u, v1));
    if ((v2 & 1) == 0)
      break;
    result = (unsigned __int8 *)sched_yield();
  }
  return result;
}

void *sub_1010E854C(uint64_t a1, int a2)
{
  _BYTE *v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;
  double *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *result;
  __int128 v30;
  char *v36;
  _BYTE *v37;
  _WORD v38[8];
  uint8_t buf[16];
  _BYTE v40[32];
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[312];
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[296];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char v88;

  v37 = (_BYTE *)(a1 + 11568);
  v4 = (_BYTE *)(a1 + 10704);
  v5 = (_BYTE *)(a1 + 10168);
  v6 = (unsigned __int8 *)(a1 + 1);
  do
    v7 = __ldaxr(v6);
  while (__stxr(1u, v6));
  if ((v7 & 1) == 0)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v8 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVLF,reset,Called without locking vision buffers", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v38[0] = 0;
      v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,reset,Called without locking vision buffers", v38, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::reset(const BOOL)", "%s\n", v36);
      if (v36 != (char *)buf)
        free(v36);
    }
  }
  if (!a2)
  {
    v12 = *(_QWORD *)(a1 + 40);
    v13 = a1 + 32;
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 32) == v12)
    {
      if (v14 == v15)
      {
        sub_1010ECD84(a1, 2.4);
        goto LABEL_27;
      }
      sub_1010F6E4C(a1, *(double *)(v15 - 1776));
    }
    else
    {
      if (v14 == v15)
      {
        sub_1010F6E4C(a1, *(double *)(v12 - 3152));
        sub_1010F7244(v13, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40) - 3160);
        goto LABEL_27;
      }
      v16 = (double *)(v15 - 1776);
      v17 = *v16;
      v18 = (double *)(v12 - 3152);
      if (*v18 < *v16)
        v17 = *v18;
      sub_1010ECD84(a1, v17);
      sub_1010F7244(v13, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40) - 3160);
    }
    sub_1010F7288(a1 + 56, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64) - 1792);
    goto LABEL_27;
  }
  v9 = *(void **)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 16) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (v10)
  {
    *(_QWORD *)(a1 + 40) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (v11)
  {
    *(_QWORD *)(a1 + 64) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
LABEL_27:
  bzero(buf, 0xD08uLL);
  sub_1010FD690((uint64_t)buf);
  sub_1010F5314(a1 + 80, (uint64_t)buf);
  bzero(buf, 0xD08uLL);
  sub_1010FD690((uint64_t)buf);
  sub_1010F5314(a1 + 3416, (uint64_t)buf);
  v19 = *(void **)(a1 + 6752);
  if (v19)
  {
    *(_QWORD *)(a1 + 6760) = v19;
    operator delete(v19);
  }
  *(_QWORD *)(a1 + 6752) = 0;
  *(_QWORD *)(a1 + 6760) = 0;
  *(_QWORD *)(a1 + 6768) = 0;
  bzero(buf, 0xD08uLL);
  sub_1010FD690((uint64_t)buf);
  sub_1010F5314(a1 + 6776, (uint64_t)buf);
  bzero(buf, 0x598uLL);
  sub_1010FD830((uint64_t)buf);
  v20 = *(_OWORD *)v40;
  *(_OWORD *)(a1 + 10112) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 10128) = v20;
  *(_OWORD *)(a1 + 10144) = *(_OWORD *)&v40[16];
  *(_QWORD *)(a1 + 10160) = v41;
  *v5 = v42;
  *(_OWORD *)(a1 + 10184) = v43;
  *(_OWORD *)(a1 + 10200) = v44;
  *(_QWORD *)(a1 + 10216) = v45;
  *(_OWORD *)(a1 + 10232) = v46;
  v21 = v47;
  v22 = v48;
  v23 = v49;
  *(_OWORD *)(a1 + 10296) = v50;
  *(_OWORD *)(a1 + 10280) = v23;
  *(_OWORD *)(a1 + 10264) = v22;
  *(_OWORD *)(a1 + 10248) = v21;
  v24 = v52;
  *(_OWORD *)(a1 + 10320) = v51;
  *(_OWORD *)(a1 + 10336) = v24;
  *(_QWORD *)(a1 + 10352) = v53;
  v25 = v55;
  *(_OWORD *)(a1 + 10368) = v54;
  *(_OWORD *)(a1 + 10384) = v25;
  memcpy((void *)(a1 + 10408), v56, 0x128uLL);
  v26 = v58;
  *(_OWORD *)(a1 + 10720) = v57;
  *(_OWORD *)(a1 + 10736) = v26;
  v27 = v60;
  *(_OWORD *)(a1 + 10784) = v61;
  v28 = v63;
  *(_OWORD *)(a1 + 10800) = v62;
  *(_OWORD *)(a1 + 10816) = v28;
  *(_OWORD *)(a1 + 10832) = v64;
  *v4 = v56[296];
  *(_QWORD *)(a1 + 10752) = v59;
  *(_OWORD *)(a1 + 10768) = v27;
  *(_OWORD *)(a1 + 10856) = v65;
  *(_OWORD *)(a1 + 10872) = v66;
  *(_QWORD *)(a1 + 10888) = v67;
  *(_OWORD *)(a1 + 10904) = v68;
  *(_OWORD *)(a1 + 10920) = v69;
  result = memcpy((void *)(a1 + 10944), v70, 0x128uLL);
  *(_OWORD *)(a1 + 11248) = v71;
  *(_OWORD *)(a1 + 11264) = v72;
  *(_OWORD *)(a1 + 11304) = v74;
  *(_OWORD *)(a1 + 11320) = v75;
  *(_OWORD *)(a1 + 11336) = v76;
  *(_OWORD *)(a1 + 11352) = v77;
  *(_OWORD *)(a1 + 11288) = v73;
  v4[664] = v78;
  v30 = v79;
  *(_OWORD *)(a1 + 11400) = v80;
  *(_OWORD *)(a1 + 11384) = v30;
  *(_OWORD *)(a1 + 11440) = v82;
  *(_OWORD *)(a1 + 11456) = v83;
  *(_OWORD *)(a1 + 11472) = v84;
  *(_OWORD *)(a1 + 11488) = v85;
  *(_OWORD *)(a1 + 11424) = v81;
  *(_OWORD *)(a1 + 11504) = v86;
  *(_OWORD *)(a1 + 11520) = v87;
  *(_BYTE *)(a1 + 11536) = v88;
  *(_OWORD *)buf = 0u;
  memset(v40, 0, 25);
  *(_QWORD *)(a1 + 11544) = 0xBFF0000000000000;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 11552) = _Q1;
  *v37 = 0;
  *(_OWORD *)(a1 + 11584) = 0u;
  *(_OWORD *)(a1 + 11600) = 0u;
  *(_QWORD *)(a1 + 11616) = 0;
  *(_OWORD *)(a1 + 11632) = 0u;
  *(_OWORD *)(a1 + 11648) = 0u;
  *(_OWORD *)(a1 + 11664) = 0u;
  *(_OWORD *)(a1 + 11680) = 0u;
  *(_OWORD *)(a1 + 11696) = 0u;
  *(_OWORD *)(a1 + 11720) = 0u;
  *(_OWORD *)(a1 + 11736) = 0u;
  *(_QWORD *)(a1 + 11752) = 0;
  *(_OWORD *)(a1 + 12089) = 0u;
  *(_OWORD *)(a1 + 11768) = 0u;
  *(_OWORD *)(a1 + 11784) = 0u;
  *(_OWORD *)(a1 + 12080) = 0u;
  *(_OWORD *)(a1 + 12064) = 0u;
  *(_OWORD *)(a1 + 12048) = 0u;
  *(_OWORD *)(a1 + 12032) = 0u;
  *(_OWORD *)(a1 + 12016) = 0u;
  *(_OWORD *)(a1 + 12000) = 0u;
  *(_OWORD *)(a1 + 11984) = 0u;
  *(_OWORD *)(a1 + 11968) = 0u;
  *(_OWORD *)(a1 + 11952) = 0u;
  *(_OWORD *)(a1 + 11936) = 0u;
  *(_OWORD *)(a1 + 11920) = 0u;
  *(_OWORD *)(a1 + 11904) = 0u;
  *(_OWORD *)(a1 + 11888) = 0u;
  *(_OWORD *)(a1 + 11872) = 0u;
  *(_OWORD *)(a1 + 11856) = 0u;
  *(_OWORD *)(a1 + 11840) = 0u;
  *(_OWORD *)(a1 + 11824) = 0u;
  *(_OWORD *)(a1 + 11808) = 0u;
  *(_QWORD *)(a1 + 12152) = 0;
  *(_OWORD *)(a1 + 12120) = 0u;
  *(_OWORD *)(a1 + 12136) = 0u;
  *(_OWORD *)(a1 + 12168) = 0u;
  *(_OWORD *)(a1 + 12184) = 0u;
  *(_OWORD *)(a1 + 12200) = 0u;
  *(_OWORD *)(a1 + 12216) = 0u;
  *(_OWORD *)(a1 + 12232) = 0u;
  *(_OWORD *)(a1 + 12256) = 0u;
  *(_OWORD *)(a1 + 12272) = 0u;
  *(_QWORD *)(a1 + 12288) = 0;
  *(_OWORD *)(a1 + 12304) = 0u;
  *(_OWORD *)(a1 + 12320) = 0u;
  *(_OWORD *)(a1 + 12344) = 0u;
  *(_OWORD *)(a1 + 12360) = 0u;
  *(_OWORD *)(a1 + 12376) = 0u;
  *(_OWORD *)(a1 + 12392) = 0u;
  *(_OWORD *)(a1 + 12408) = 0u;
  *(_OWORD *)(a1 + 12424) = 0u;
  *(_OWORD *)(a1 + 12440) = 0u;
  *(_OWORD *)(a1 + 12456) = 0u;
  *(_OWORD *)(a1 + 12472) = 0u;
  *(_OWORD *)(a1 + 12488) = 0u;
  *(_OWORD *)(a1 + 12504) = 0u;
  *(_OWORD *)(a1 + 12520) = 0u;
  *(_OWORD *)(a1 + 12536) = 0u;
  *(_OWORD *)(a1 + 12552) = 0u;
  *(_OWORD *)(a1 + 12568) = 0u;
  *(_OWORD *)(a1 + 12584) = 0u;
  *(_OWORD *)(a1 + 12600) = 0u;
  *(_OWORD *)(a1 + 12616) = 0u;
  *(_QWORD *)(a1 + 12632) = 0;
  *(_OWORD *)(a1 + 12664) = 0u;
  *(_OWORD *)(a1 + 12648) = 0u;
  *(_QWORD *)(a1 + 12680) = *(_QWORD *)&v40[16];
  *(_BYTE *)(a1 + 12688) = v40[24];
  *(_OWORD *)(a1 + 12704) = 0u;
  *(_OWORD *)(a1 + 12720) = 0u;
  *(_BYTE *)(a1 + 12736) = 0;
  *(_OWORD *)(a1 + 12752) = 0u;
  *(_OWORD *)(a1 + 12768) = 0u;
  *(_QWORD *)(a1 + 12784) = 0;
  *(_OWORD *)(a1 + 12800) = 0u;
  *(_OWORD *)(a1 + 12816) = 0u;
  *(_OWORD *)(a1 + 12832) = 0u;
  *(_OWORD *)(a1 + 12848) = 0u;
  *(_OWORD *)(a1 + 12864) = 0u;
  *(_OWORD *)(a1 + 12888) = 0u;
  *(_OWORD *)(a1 + 12904) = 0u;
  *(_QWORD *)(a1 + 12920) = 0;
  *(_OWORD *)(a1 + 12952) = 0u;
  *(_OWORD *)(a1 + 12936) = 0u;
  *(_OWORD *)(a1 + 12976) = 0u;
  *(_OWORD *)(a1 + 12992) = 0u;
  *(_OWORD *)(a1 + 13008) = 0u;
  *(_OWORD *)(a1 + 13024) = 0u;
  *(_OWORD *)(a1 + 13040) = 0u;
  *(_OWORD *)(a1 + 13056) = 0u;
  *(_OWORD *)(a1 + 13072) = 0u;
  *(_OWORD *)(a1 + 13088) = 0u;
  *(_OWORD *)(a1 + 13104) = 0u;
  *(_OWORD *)(a1 + 13120) = 0u;
  *(_OWORD *)(a1 + 13136) = 0u;
  *(_OWORD *)(a1 + 13152) = 0u;
  *(_OWORD *)(a1 + 13168) = 0u;
  *(_OWORD *)(a1 + 13184) = 0u;
  *(_OWORD *)(a1 + 13200) = 0u;
  *(_OWORD *)(a1 + 13216) = 0u;
  *(_OWORD *)(a1 + 13232) = 0u;
  *(_OWORD *)(a1 + 13248) = 0u;
  *(_QWORD *)(a1 + 13264) = 0;
  *(_QWORD *)(a1 + 13272) = 0;
  *(_OWORD *)(a1 + 13280) = _Q1;
  *(_QWORD *)(a1 + 13296) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 13312) = 0u;
  *(_OWORD *)(a1 + 13328) = 0u;
  *(_OWORD *)(a1 + 13352) = 0u;
  *(_OWORD *)(a1 + 13368) = 0u;
  *(_QWORD *)(a1 + 13384) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 13392) = _Q1;
  *(_OWORD *)(a1 + 13408) = _Q1;
  *(_QWORD *)(a1 + 13424) = 0xBFF0000000000000;
  v37[1864] = 0;
  *(_OWORD *)(a1 + 13448) = 0u;
  *(_OWORD *)(a1 + 13464) = 0u;
  *(_OWORD *)(a1 + 13488) = 0u;
  *(_OWORD *)(a1 + 13504) = 0u;
  *(_QWORD *)(a1 + 13608) = 0;
  *(_OWORD *)(a1 + 13576) = 0u;
  *(_OWORD *)(a1 + 13592) = 0u;
  *(_OWORD *)(a1 + 13544) = 0u;
  *(_OWORD *)(a1 + 13560) = 0u;
  *(_OWORD *)(a1 + 13528) = 0u;
  *(_OWORD *)(a1 + 13616) = _Q1;
  *(_QWORD *)(a1 + 13632) = 0;
  if ((v7 & 1) == 0)
    atomic_store(0, v6);
  return result;
}

void sub_1010E8C7C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1010E8C88(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  double v8;
  double v9;
  double v10;
  NSObject *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  double v32;
  _BOOL4 v33;
  unsigned int v34;
  double v35;
  double v36;
  _BOOL4 v37;
  double v38;
  _OWORD *v39;
  double v40;
  double v41;
  int v42;
  int v43;
  _BOOL4 v44;
  NSObject *v45;
  uint64_t v46;
  int v47;
  double v48;
  _QWORD *v49;
  BOOL v50;
  uint64_t v51;
  int v52;
  double v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  char v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double *v63;
  double v64;
  double v65;
  double v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  NSObject *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  _BOOL4 v86;
  double v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  _BOOL4 v99;
  double v100;
  int v101;
  char *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  _BYTE v114[108];
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  _BOOL4 v124;
  __int16 v125;
  double v126;
  __int16 v127;
  int v128;
  __int16 v129;
  _BOOL4 v130;
  _BYTE buf[108];
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  double v137;
  __int16 v138;
  double v139;
  __int16 v140;
  _BOOL4 v141;
  __int16 v142;
  double v143;
  __int16 v144;
  int v145;
  __int16 v146;
  _BOOL4 v147;

  *(_WORD *)(a3 + 424) = 0;
  v5 = *(_DWORD *)(a2 + 96);
  if (v5 != 1 && v5 != 11)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v27 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      v28 = *(_QWORD *)(a3 + 32);
      v29 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)buf = 134349313;
      *(_QWORD *)&buf[4] = v28;
      *(_WORD *)&buf[12] = 1025;
      *(_DWORD *)&buf[14] = v29;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLVLF,getFusedLocation,Nonsupporting provider,machAbsTime,%{public}.3lf,locationType,%{private}d", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v103 = *(_QWORD *)(a3 + 32);
    v104 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)v114 = 134349313;
    *(_QWORD *)&v114[4] = v103;
    *(_WORD *)&v114[12] = 1025;
    *(_DWORD *)&v114[14] = v104;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,getFusedLocation,Nonsupporting provider,machAbsTime,%{public}.3lf,locationType,%{private}d", v114, 18);
    sub_100512490("Generic", 1, 0, 2, "int CLVisionLocationFuser::getFusedLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v19);
LABEL_157:
    if (v19 != buf)
      free(v19);
    return 0;
  }
  v8 = *(double *)(a3 + 32);
  if (!*a1)
  {
    v9 = *((double *)a1 + 1444);
    v10 = vabdd_f64(v8, v9);
    if (v9 <= 0.0 || v10 > 24.0)
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v12 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        v13 = *(_QWORD *)(a3 + 32);
        v14 = *a1;
        v15 = *((_QWORD *)a1 + 1444);
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)&buf[4] = v13;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v14;
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLVLF,getFusedLocation,Filter inactive,machAbsTime,%{public}.3lf,activated,%{public}d,lastValidVlf,%{public}.3lf", buf, 0x1Cu);
      }
      if (!sub_1001BFF7C(115, 0))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v16 = *(_QWORD *)(a3 + 32);
      v17 = *a1;
      v18 = *((_QWORD *)a1 + 1444);
      *(_DWORD *)v114 = 134349568;
      *(_QWORD *)&v114[4] = v16;
      *(_WORD *)&v114[12] = 1026;
      *(_DWORD *)&v114[14] = v17;
      *(_WORD *)&v114[18] = 2050;
      *(_QWORD *)&v114[20] = v18;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,getFusedLocation,Filter inactive,machAbsTime,%{public}.3lf,activated,%{public}d,lastValidVlf,%{public}.3lf", v114, 28);
      sub_100512490("Generic", 1, 0, 0, "int CLVisionLocationFuser::getFusedLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v19);
      goto LABEL_157;
    }
  }
  v20 = a1 + 6776;
  if (!a1[6777] && !*v20)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v45 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      v46 = *(_QWORD *)(a3 + 32);
      if (v20[1])
        v47 = 1;
      else
        v47 = *v20;
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v46;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v47;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLVLF,getFusedLocation,Filter not initialized,machAbsTime,%{public}.3lf,initialized,%{public}d", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v51 = *(_QWORD *)(a3 + 32);
    if (v20[1])
      v52 = 1;
    else
      v52 = *v20;
    *(_DWORD *)v114 = 134349312;
    *(_QWORD *)&v114[4] = v51;
    *(_WORD *)&v114[12] = 1026;
    *(_DWORD *)&v114[14] = v52;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,getFusedLocation,Filter not initialized,machAbsTime,%{public}.3lf,initialized,%{public}d", v114, 18);
    sub_100512490("Generic", 1, 0, 2, "int CLVisionLocationFuser::getFusedLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v19);
    goto LABEL_157;
  }
  if (v8 != *((double *)a1 + 994))
  {
    v21 = (uint64_t *)(a1 + 7952);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v22 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      v23 = *(_QWORD *)(a3 + 32);
      v24 = *v21;
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v23;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLVLF,getFusedLocation,Outdated state,machAbsTime,%{public}.3lf,stateMachAbsTime,%{public}.3lf", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v25 = *(_QWORD *)(a3 + 32);
    v26 = *v21;
    *(_DWORD *)v114 = 134349312;
    *(_QWORD *)&v114[4] = v25;
    *(_WORD *)&v114[12] = 2050;
    *(_QWORD *)&v114[14] = v26;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,getFusedLocation,Outdated state,machAbsTime,%{public}.3lf,stateMachAbsTime,%{public}.3lf", v114, 22);
    sub_100512490("Generic", 1, 0, 2, "int CLVisionLocationFuser::getFusedLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v19);
    goto LABEL_157;
  }
  v32 = *((double *)a1 + 1444);
  v33 = vabdd_f64(v8, v32) <= 24.0 && v32 > 0.0;
  v34 = *((_DWORD *)a1 + 2074);
  v35 = -1.0;
  if ((v34 & 1) == 0 || (v36 = *((double *)a1 + 1006), v37 = v36 > 0.0, v36 <= 0.0))
  {
    HIDWORD(v113) = 0;
    v43 = 0;
    v42 = 0;
    v30 = 0;
    v40 = -1.0;
    v41 = -1.0;
    if ((v34 & 2) != 0)
      goto LABEL_83;
LABEL_45:
    v44 = 0;
    goto LABEL_110;
  }
  v38 = *((double *)a1 + 998) * 57.2957795;
  *(double *)buf = *((double *)a1 + 997) * 57.2957795;
  *(double *)&buf[8] = v38;
  v39 = (_OWORD *)(a2 + 4);
  v40 = sub_10011E634(dbl_10230C7F8, *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)buf, v38, *(double *)(a2 + 28));
  HIDWORD(v113) = v37 & (v34 >> 2);
  if (*((double *)a1 + 1006) > 32.0)
    goto LABEL_43;
  if (v33)
  {
    *v39 = *(_OWORD *)buf;
    v48 = *((double *)a1 + 1006) * 0.7;
    if (v48 < 1.6)
      v48 = 1.6;
    *(double *)(a2 + 20) = v48;
    v49 = (_QWORD *)(a2 + 20);
    if (HIDWORD(v113))
      v30 = 5;
    else
      v30 = 1;
    *(_BYTE *)(a3 + 424) = 1;
    v50 = *a1 != 0;
  }
  else
  {
    v49 = (_QWORD *)(a2 + 20);
    v53 = *(double *)(a2 + 20);
    if (v53 > 0.0 && v40 > v53 * *(double *)&qword_10230C820)
    {
LABEL_43:
      v30 = 0;
      v41 = -1.0;
      v42 = 1;
      goto LABEL_82;
    }
    v50 = 0;
    *v39 = *(_OWORD *)buf;
    *v49 = *((_QWORD *)a1 + 1006);
    if (HIDWORD(v113))
      v30 = 5;
    else
      v30 = 1;
    *(_BYTE *)(a3 + 424) = 1;
  }
  *(_BYTE *)(a3 + 425) = v50;
  *(_OWORD *)(a3 + 432) = *v39;
  *(_QWORD *)(a3 + 448) = *v49;
  *(_QWORD *)v114 = 0;
  if (sub_1014A0444(*(_DWORD *)(a3 + 312), (double *)buf, (double *)v114, *((double *)a1 + 999), *((double *)a1 + 1007), *(float *)(a3 + 316)))
  {
    v54 = *(_QWORD *)v114;
    v41 = vabdd_f64(*(double *)(a2 + 28), *(double *)v114);
    v55 = *((double *)a1 + 1007);
    if (v55 > 8.0)
    {
LABEL_73:
      v42 = 0;
      goto LABEL_82;
    }
    if (v33)
    {
      *(_QWORD *)(a2 + 28) = *(_QWORD *)v114;
      v55 = v55 * 0.8;
      *(double *)(a2 + 36) = v55;
      if (v55 < 0.8)
      {
        *(_QWORD *)(a2 + 36) = 0x3FE999999999999ALL;
        v55 = 0.8;
      }
    }
    else
    {
      v56 = *(double *)(a2 + 36);
      if (v56 > 0.0 && v41 > v55 + v56 + v55 + v56)
        goto LABEL_73;
      *(_QWORD *)(a2 + 28) = *(_QWORD *)v114;
      *(double *)(a2 + 36) = v55;
    }
    v42 = 0;
    *(_QWORD *)(a3 + 464) = v54;
    *(double *)(a3 + 472) = v55;
  }
  else
  {
    v42 = 0;
    v41 = -1.0;
  }
LABEL_82:
  v43 = 1;
  if ((*((_DWORD *)a1 + 2074) & 2) == 0)
    goto LABEL_45;
LABEL_83:
  v57 = *((double *)a1 + 1009);
  v44 = v57 > 0.0;
  if (v57 <= 0.0)
    v58 = 1;
  else
    v58 = v42;
  if ((v58 & 1) == 0)
  {
    v59 = 1.57079633 - *((double *)a1 + 1008);
    if (v59 < 0.0 || v59 >= 6.28318531)
    {
      v59 = fmod(v59, 6.28318531);
      if (v59 < 0.0 || v59 == 0.0 && (*(_QWORD *)&v59 & 0x8000000000000000) == 0)
        v59 = v59 + 6.28318531;
    }
    v60 = v57 * 57.2957795;
    if (v33)
    {
      v60 = v60 * 0.4;
      if (v60 < 7.5)
        v60 = 7.5;
      if (v60 > 180.0)
        v60 = 180.0;
    }
    v61 = v59 * 57.2957795;
    v62 = *(double *)(a2 + 60);
    if (v62 < 0.0 || (v63 = (double *)(a2 + 68), v64 = *(double *)(a2 + 68), v64 <= 0.0))
    {
      *(double *)(a2 + 60) = v61;
      v63 = (double *)(a2 + 68);
      v35 = -1.0;
    }
    else
    {
      v65 = vabdd_f64(v61, v62);
      if (360.0 - v65 >= v65)
        v35 = v65;
      else
        v35 = 360.0 - v65;
      if (!v33)
      {
        v66 = v60 + v64 + v60 + v64;
        if (v66 > 180.0)
          v66 = 180.0;
        if (v35 > v66)
          goto LABEL_110;
      }
      *(double *)(a2 + 60) = v61;
    }
    *v63 = v60;
    v30 = v30 | 2;
    *(double *)(a3 + 480) = v61;
    *(double *)(a3 + 488) = v60;
  }
LABEL_110:
  if (v42)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v67 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      v68 = *(_QWORD *)(a3 + 32);
      v69 = *((_QWORD *)a1 + 1006);
      v70 = *(_QWORD *)(a2 + 20);
      v71 = *((_QWORD *)a1 + 1007);
      v72 = *(_QWORD *)(a2 + 36);
      v73 = *((double *)a1 + 1009) * 57.2957795;
      v74 = *(_QWORD *)(a2 + 68);
      *(_DWORD *)buf = 134351361;
      *(_QWORD *)&buf[4] = v68;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v69;
      *(_WORD *)&buf[22] = 2049;
      *(_QWORD *)&buf[24] = v70;
      *(_WORD *)&buf[32] = 2049;
      *(double *)&buf[34] = v40;
      *(_WORD *)&buf[42] = 2049;
      *(_QWORD *)&buf[44] = v71;
      *(_WORD *)&buf[52] = 2049;
      *(_QWORD *)&buf[54] = v72;
      *(_WORD *)&buf[62] = 2049;
      *(double *)&buf[64] = v41;
      *(_WORD *)&buf[72] = 2049;
      *(double *)&buf[74] = v73;
      *(_WORD *)&buf[82] = 2049;
      *(_QWORD *)&buf[84] = v74;
      *(_WORD *)&buf[92] = 2049;
      *(double *)&buf[94] = v35;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "CLVLF,getFusedLocation,Filter reset,diverged,machAbsTime,%{public}.3lf,fusedHorizontalAccuracy,%{private}.3lf,locationHorizontalAccuracy,%{private}.3lf,horzDistToRaw,%{private}.3lf,fusedVerticalAccuracy,%{private}.3lf,locationVerticalAccuracy,%{private}.3lf,vertDistToRaw,%{private}.3lf,fusedCourseAccuracy,%{private}.3lf,locationCourseAccuracy,%{private}.3lf,courseDiffToRaw,%{private}.3lf", buf, 0x66u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v105 = *(_QWORD *)(a3 + 32);
      v106 = *((_QWORD *)a1 + 1006);
      v107 = *(_QWORD *)(a2 + 20);
      v108 = *((_QWORD *)a1 + 1007);
      v109 = *(_QWORD *)(a2 + 36);
      v110 = *((double *)a1 + 1009) * 57.2957795;
      v111 = *(_QWORD *)(a2 + 68);
      *(_DWORD *)v114 = 134351361;
      *(_QWORD *)&v114[4] = v105;
      *(_WORD *)&v114[12] = 2049;
      *(_QWORD *)&v114[14] = v106;
      *(_WORD *)&v114[22] = 2049;
      *(_QWORD *)&v114[24] = v107;
      *(_WORD *)&v114[32] = 2049;
      *(double *)&v114[34] = v40;
      *(_WORD *)&v114[42] = 2049;
      *(_QWORD *)&v114[44] = v108;
      *(_WORD *)&v114[52] = 2049;
      *(_QWORD *)&v114[54] = v109;
      *(_WORD *)&v114[62] = 2049;
      *(double *)&v114[64] = v41;
      *(_WORD *)&v114[72] = 2049;
      *(double *)&v114[74] = v110;
      *(_WORD *)&v114[82] = 2049;
      *(_QWORD *)&v114[84] = v111;
      *(_WORD *)&v114[92] = 2049;
      *(double *)&v114[94] = v35;
      LODWORD(v113) = 102;
      v112 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,getFusedLocation,Filter reset,diverged,machAbsTime,%{public}.3lf,fusedHorizontalAccuracy,%{private}.3lf,locationHorizontalAccuracy,%{private}.3lf,horzDistToRaw,%{private}.3lf,fusedVerticalAccuracy,%{private}.3lf,locationVerticalAccuracy,%{private}.3lf,vertDistToRaw,%{private}.3lf,fusedCourseAccuracy,%{private}.3lf,locationCourseAccuracy,%{private}.3lf,courseDiffToRaw,%{private}.3lf", v114, v113);
      sub_100512490("Generic", 1, 0, 0, "int CLVisionLocationFuser::getFusedLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v112);
      if (v112 != buf)
        free(v112);
    }
    sub_1010E8510(a1 + 1);
    sub_1010E854C((uint64_t)a1, 0);
    v30 = 0;
    atomic_store(0, a1 + 1);
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v75 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      v76 = *(_DWORD *)(a2 + 96);
      v77 = *(_QWORD *)(a2 + 76);
      v78 = *(_QWORD *)(a3 + 32);
      v79 = *(_QWORD *)(a3 + 344);
      v80 = *(double *)(a2 + 4);
      v81 = *(double *)(a2 + 12);
      v82 = *(double *)(a2 + 20);
      v83 = *(double *)(a2 + 28);
      v84 = *(double *)(a2 + 36);
      v85 = *(double *)(a2 + 60);
      v86 = v80 == *(double *)(a3 + 432);
      if (v81 != *(double *)(a3 + 440))
        v86 = 0;
      if (v82 != *(double *)(a3 + 448))
        v86 = 0;
      if (v83 != *(double *)(a3 + 464))
        v86 = 0;
      if (v84 != *(double *)(a3 + 472))
        v86 = 0;
      v87 = *(double *)(a2 + 68);
      v88 = *(unsigned __int8 *)(a3 + 424);
      if (v85 != *(double *)(a3 + 480))
        v86 = 0;
      if (v87 != *(double *)(a3 + 488))
        v86 = 0;
      if (*(_DWORD *)(a2 + 132) != *(_DWORD *)(a3 + 456))
        v86 = 0;
      *(_DWORD *)buf = 67179265;
      *(_DWORD *)&buf[4] = v76;
      *(_WORD *)&buf[8] = 2050;
      *(_QWORD *)&buf[10] = v77;
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v78;
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = v79;
      *(_WORD *)&buf[38] = 2049;
      *(double *)&buf[40] = v80;
      *(_WORD *)&buf[48] = 2049;
      *(double *)&buf[50] = v81;
      *(_WORD *)&buf[58] = 2049;
      *(double *)&buf[60] = v82;
      *(_WORD *)&buf[68] = 2049;
      *(double *)&buf[70] = v83;
      *(_WORD *)&buf[78] = 2049;
      *(double *)&buf[80] = v84;
      *(_WORD *)&buf[88] = 2049;
      *(double *)&buf[90] = v85;
      *(_WORD *)&buf[98] = 2049;
      *(double *)&buf[100] = v87;
      v132 = 1026;
      v133 = v43;
      v134 = 1026;
      v135 = HIDWORD(v113);
      v136 = 2049;
      v137 = v40;
      v138 = 2049;
      v139 = v41;
      v140 = 1026;
      v141 = v44;
      v142 = 2049;
      v143 = v35;
      v144 = 1026;
      v145 = v88;
      v146 = 1026;
      v147 = v86;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "CLVLF,getFusedLocation,Output,type,%{private}d,timestamp,%{public}.3lf,machtime,%{public}.3lf,machContinuousTime,%{public}.3lf,latitude,%{private}.8lf,longitude,%{private}.8lf,horizontalAccuracy,%{private}.3lf,altitude,%{private}.3lf,verticalAccuracy,%{private}.3lf,course,%{private}.3lf,courseAccuracy,%{private}.3lf,isLocationFused,%{public}d,isLocationPropagated,%{public}d,horzDistToOriginal,%{private}.3lf,vertDistToOriginal,%{private}.3lf,isCourseFused,%{public}d,courseDiffToOriginal,%{private}.3lf,isCoordinateFused,%{public}d,isCoordinateEqualToFusedCoordinate,%{public}d", buf, 0xA8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v89 = *(_DWORD *)(a2 + 96);
      v90 = *(_QWORD *)(a2 + 76);
      v91 = *(_QWORD *)(a3 + 32);
      v92 = *(_QWORD *)(a3 + 344);
      v93 = *(double *)(a2 + 4);
      v94 = *(double *)(a2 + 12);
      v95 = *(double *)(a2 + 20);
      v96 = *(double *)(a2 + 28);
      v97 = *(double *)(a2 + 36);
      v98 = *(double *)(a2 + 60);
      v99 = v93 == *(double *)(a3 + 432);
      if (v94 != *(double *)(a3 + 440))
        v99 = 0;
      if (v95 != *(double *)(a3 + 448))
        v99 = 0;
      if (v96 != *(double *)(a3 + 464))
        v99 = 0;
      if (v97 != *(double *)(a3 + 472))
        v99 = 0;
      v100 = *(double *)(a2 + 68);
      v101 = *(unsigned __int8 *)(a3 + 424);
      if (v98 != *(double *)(a3 + 480))
        v99 = 0;
      if (v100 != *(double *)(a3 + 488))
        v99 = 0;
      if (*(_DWORD *)(a2 + 132) != *(_DWORD *)(a3 + 456))
        v99 = 0;
      *(_DWORD *)v114 = 67179265;
      *(_DWORD *)&v114[4] = v89;
      *(_WORD *)&v114[8] = 2050;
      *(_QWORD *)&v114[10] = v90;
      *(_WORD *)&v114[18] = 2050;
      *(_QWORD *)&v114[20] = v91;
      *(_WORD *)&v114[28] = 2050;
      *(_QWORD *)&v114[30] = v92;
      *(_WORD *)&v114[38] = 2049;
      *(double *)&v114[40] = v93;
      *(_WORD *)&v114[48] = 2049;
      *(double *)&v114[50] = v94;
      *(_WORD *)&v114[58] = 2049;
      *(double *)&v114[60] = v95;
      *(_WORD *)&v114[68] = 2049;
      *(double *)&v114[70] = v96;
      *(_WORD *)&v114[78] = 2049;
      *(double *)&v114[80] = v97;
      *(_WORD *)&v114[88] = 2049;
      *(double *)&v114[90] = v98;
      *(_WORD *)&v114[98] = 2049;
      *(double *)&v114[100] = v100;
      v115 = 1026;
      v116 = v43;
      v117 = 1026;
      v118 = HIDWORD(v113);
      v119 = 2049;
      v120 = v40;
      v121 = 2049;
      v122 = v41;
      v123 = 1026;
      v124 = v44;
      v125 = 2049;
      v126 = v35;
      v127 = 1026;
      v128 = v101;
      v129 = 1026;
      v130 = v99;
      LODWORD(v113) = 168;
      v102 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,getFusedLocation,Output,type,%{private}d,timestamp,%{public}.3lf,machtime,%{public}.3lf,machContinuousTime,%{public}.3lf,latitude,%{private}.8lf,longitude,%{private}.8lf,horizontalAccuracy,%{private}.3lf,altitude,%{private}.3lf,verticalAccuracy,%{private}.3lf,course,%{private}.3lf,courseAccuracy,%{private}.3lf,isLocationFused,%{public}d,isLocationPropagated,%{public}d,horzDistToOriginal,%{private}.3lf,vertDistToOriginal,%{private}.3lf,isCourseFused,%{public}d,courseDiffToOriginal,%{private}.3lf,isCoordinateFused,%{public}d,isCoordinateEqualToFusedCoordinate,%{public}d", v114, v113);
      sub_100512490("Generic", 1, 0, 2, "int CLVisionLocationFuser::getFusedLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v102);
      if (v102 != buf)
        free(v102);
    }
  }
  return v30;
}

void sub_1010E9C9C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1010E9CA8(unsigned __int8 *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint8_t buf[4];
  int v21;

  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
  v4 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLVLF,pushARSessionState,sessionState,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v18 = 67240192;
    v19 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,pushARSessionState,sessionState,%{public}d", &v18, 8);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushARSessionState(const _CLARSessionState)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (a2 == 1)
  {
    if (a1[6777] || a1[6776])
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v5 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
      {
        v6 = *a1;
        *(_DWORD *)buf = 67240192;
        v21 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLVLF,pushARSessionState,Filter reset,AR session started,activated,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v11 = *a1;
        v18 = 67240192;
        v19 = v11;
        LODWORD(v17) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,pushARSessionState,Filter reset,AR session started,activated,%{public}d", &v18, v17);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushARSessionState(const _CLARSessionState)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      sub_1010E8510(a1 + 1);
      sub_1010E854C((uint64_t)a1, 1);
      atomic_store(0, a1 + 1);
    }
    *a1 = 1;
    sub_1010EA1A0((uint64_t *)a1 + 1, 0x1EuLL);
    sub_1010EA2DC((uint64_t *)a1 + 4, 0x14uLL);
    sub_1010EA420((uint64_t *)a1 + 7, 0xAuLL);
    sub_1010EA55C((uint64_t *)a1 + 844, 4uLL);
  }
  else
  {
    *a1 = 0;
    if (*((double *)a1 + 1444) <= 0.0)
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v7 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
      {
        v8 = *a1;
        *(_DWORD *)buf = 67240192;
        v21 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLVLF,pushARSessionState,Filter reset,AR session closed,activated,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v14 = *a1;
        v18 = 67240192;
        v19 = v14;
        LODWORD(v17) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,pushARSessionState,Filter reset,AR session closed,activated,%{public}d", &v18, v17);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushARSessionState(const _CLARSessionState)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      sub_1010E8510(a1 + 1);
      sub_1010E854C((uint64_t)a1, 1);
      atomic_store(0, a1 + 1);
    }
  }
}

void sub_1010EA194(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1010EA1A0(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xED6866F8D962AE7BLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2DC3EED6866F8ELL)
      sub_100259694();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = sub_1010FE604(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 1432 * v6;
    sub_1010FE580(a1, &__p);
    if (v9 != v8)
      v9 = &v8[(v9 - v8 - 1432) % 0x598uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_1010EA288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010EA2DC(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xEBE8AB1946A49E23 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x14BD3EDDA68FE1)
      sub_100259694();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = sub_1010FE6C0(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 3160 * v6;
    sub_1010FE64C(a1, &__p);
    if (v9 != v8)
      v9 = &v8[(v9 - v8 - 3160) % 0xC58uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_1010EA3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010EA420(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 8) < a2)
  {
    if (a2 >= 0x24924924924925)
      sub_100259694();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = sub_1010FE7F8(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 1792 * v6;
    sub_1010FE784(a1, &__p);
    if (v9 != v8)
      v9 += -1792
          - 1792 * ((((unint64_t)(v9 - v8 - 1792) >> 8) * (unsigned __int128)0x2492492492492493uLL) >> 64);
    if (__p)
      operator delete(__p);
  }
}

void sub_1010EA508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010EA55C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x13A524387AC82261 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x13A524387AC823)
      sub_100259694();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = sub_1010FE9F0(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 3336 * v6;
    sub_1010FE96C(a1, &__p);
    if (v9 != v8)
      v9 = &v8[(v9 - v8 - 3336) % 0xD08uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_1010EA644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010EA698(unsigned __int8 *a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  id v14;
  id v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  int v19;
  int v20;
  const char *v21;
  double v22;
  double v23;
  BOOL v25;
  double v26;
  double v27;
  unint64_t v31;
  uint64_t v32;
  double v33;
  NSObject *v34;
  double v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  const char *v42;
  double v43;
  const char *v44;
  char *v45;
  char v46[8];
  int64x2_t v47;
  __int128 v48;
  double *v49;
  uint64_t *v50;
  char v51;
  int v52;
  uint64_t v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  int v58;
  _BYTE v59[36];
  double *v60;
  uint64_t *v61;
  __int128 v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE buf[12];
  __int16 v69;
  _BYTE v70[24];

  if (*a1)
  {
    v51 = 1;
    sub_10149EBD8(a2, &v51, (char *)v62);
    if (v51)
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v4 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend(a2, "timestamp");
        v6 = v5;
        v7 = objc_msgSend(a2, "trackingState");
        v8 = objc_msgSend(a2, "inertialState");
        v9 = objc_msgSend(a2, "inertialCovariance");
        *(_DWORD *)buf = 134349825;
        *(_QWORD *)&buf[4] = v6;
        v69 = 1026;
        *(_DWORD *)v70 = v7;
        *(_WORD *)&v70[4] = 2049;
        *(_QWORD *)&v70[6] = v8;
        *(_WORD *)&v70[14] = 2049;
        *(_QWORD *)&v70[16] = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLVLF,pushVIOEstimation,Unable to construct VioData,machAbsTime,%{public}.3lf,trackingState,%{public}d,inertialState,%{private}p,inertialCovariance,%{private}p", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v10 = qword_1022A00C8;
        objc_msgSend(a2, "timestamp");
        v12 = v11;
        v13 = objc_msgSend(a2, "trackingState");
        v14 = objc_msgSend(a2, "inertialState");
        v15 = objc_msgSend(a2, "inertialCovariance");
        v58 = 134349825;
        *(_QWORD *)v59 = v12;
        *(_WORD *)&v59[8] = 1026;
        *(_DWORD *)&v59[10] = v13;
        *(_WORD *)&v59[14] = 2049;
        *(_QWORD *)&v59[16] = v14;
        *(_WORD *)&v59[24] = 2049;
        *(_QWORD *)&v59[26] = v15;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "CLVLF,pushVIOEstimation,Unable to construct VioData,machAbsTime,%{public}.3lf,trackingState,%{public}d,inertialState,%{private}p,inertialCovariance,%{private}p", &v58, 38);
        v17 = (char *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushVIOEstimation(const _CLVIOEstimation *const)", "%s\n", v16);
LABEL_68:
        if (v17 != buf)
          free(v17);
      }
    }
    else if (sub_1010EAFAC((uint64_t)a1, (uint64_t)v62))
    {
      LOBYTE(v58) = 1;
      *(int64x2_t *)&v59[4] = vdupq_n_s64(3uLL);
      *(_OWORD *)&v59[20] = xmmword_101B9B430;
      v60 = (double *)&v64;
      v61 = &v65;
      sub_1010FED34((uint64_t)&v58, &dbl_101C401A0);
      v22 = *v60
          + v60[*(_QWORD *)&v59[28] + *(_QWORD *)&v59[20]]
          + v60[2 * *(_QWORD *)&v59[28] + 2 * *(_QWORD *)&v59[20]];
      v23 = sqrt(v22);
      v25 = (v23 < 0.0 || ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(_QWORD *)&v23 - 1) > 0xFFFFFFFFFFFFELL;
      if (!v25 && v23 < 0.041887902)
      {
        *(double *)buf = 0.00175459634 / v22;
        sub_1010FED34((uint64_t)&v58, (const double *)buf);
      }
      v46[0] = 1;
      v47 = vdupq_n_s64(3uLL);
      v48 = xmmword_101B9B430;
      v49 = (double *)&v66;
      v50 = &v67;
      sub_1010FED34((uint64_t)v46, &dbl_101C401A8);
      v26 = *v49 + v49[*((_QWORD *)&v48 + 1) + (_QWORD)v48] + v49[2 * *((_QWORD *)&v48 + 1) + 2 * (_QWORD)v48];
      v27 = sqrt(v26);
      if ((v27 >= 0.0 && ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
         || (unint64_t)(*(_QWORD *)&v27 - 1) <= 0xFFFFFFFFFFFFELL)
        && v27 < 1.5)
      {
        *(double *)buf = 2.25 / v26;
        sub_1010FED34((uint64_t)v46, (const double *)buf);
      }
      sub_1010E8510(a1 + 1);
      v31 = *((_QWORD *)a1 + 1);
      v32 = *((_QWORD *)a1 + 2);
      if (v31 != v32)
      {
        v33 = *(double *)(v32 - 1392) - *(double *)(v31 + 40);
        v31 = *((_QWORD *)a1 + 2);
        if (v33 >= 3.0)
        {
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
          v34 = qword_1022A00C8;
          if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
          {
            v35 = (double)(unint64_t)(*((_QWORD *)a1 + 2) - *((_QWORD *)a1 + 1)) * 0.000000953674316;
            *(_DWORD *)buf = 134349569;
            *(_QWORD *)&buf[4] = v63;
            v69 = 2050;
            *(double *)v70 = v33;
            *(_WORD *)&v70[8] = 2049;
            *(double *)&v70[10] = v35;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLVLF,pushVIOEstimation,VIO buffer reached its maximum size,machAbsTime,%{public}.3lf,sizeInSec,%{public}.3lf,sizeInMB,%{private}.3lf", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00C0 != -1)
              dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
            v43 = (double)(unint64_t)(*((_QWORD *)a1 + 2) - *((_QWORD *)a1 + 1)) * 0.000000953674316;
            v52 = 134349569;
            v53 = v63;
            v54 = 2050;
            v55 = v33;
            v56 = 2049;
            v57 = v43;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,pushVIOEstimation,VIO buffer reached its maximum size,machAbsTime,%{public}.3lf,sizeInSec,%{public}.3lf,sizeInMB,%{private}.3lf", &v52, 32);
            v45 = (char *)v44;
            sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushVIOEstimation(const _CLVIOEstimation *const)", "%s\n", v44);
            if (v45 != buf)
              free(v45);
          }
          sub_1010EB010((uint64_t)a1, 0.3);
          v31 = *((_QWORD *)a1 + 2);
        }
      }
      if (v31 >= *((_QWORD *)a1 + 3))
        v36 = sub_1010FEEA0((uint64_t *)a1 + 1, v62);
      else
        v36 = sub_1010FDEF8(v31, v62) + 1432;
      *((_QWORD *)a1 + 2) = v36;
      atomic_store(0, a1 + 1);
    }
    else
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v37 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
      {
        v38 = *((_QWORD *)a1 + 2);
        if (*((_QWORD *)a1 + 1) == v38)
          v39 = 0xBFF0000000000000;
        else
          v39 = *(_QWORD *)(v38 - 1392);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v63;
        v69 = 2050;
        *(_QWORD *)v70 = v39;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLVLF,pushVIOEstimation,Invalid measurement,machAbsTime,%{public}.3lf,prevMachAbsTime,%{public}.3lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v40 = *((_QWORD *)a1 + 2);
        if (*((_QWORD *)a1 + 1) == v40)
          v41 = 0xBFF0000000000000;
        else
          v41 = *(_QWORD *)(v40 - 1392);
        v58 = 134349312;
        *(_QWORD *)v59 = v63;
        *(_WORD *)&v59[8] = 2050;
        *(_QWORD *)&v59[10] = v41;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,pushVIOEstimation,Invalid measurement,machAbsTime,%{public}.3lf,prevMachAbsTime,%{public}.3lf", &v58, 22);
        v17 = (char *)v42;
        sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushVIOEstimation(const _CLVIOEstimation *const)", "%s\n", v42);
        goto LABEL_68;
      }
    }
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v18 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      v19 = *a1;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLVLF,pushVIOEstimation,activated,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v20 = *a1;
      LODWORD(v62[0]) = 67240192;
      DWORD1(v62[0]) = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,pushVIOEstimation,activated,%{public}d", v62, 8);
      v17 = (char *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushVIOEstimation(const _CLVIOEstimation *const)", "%s\n", v21);
      goto LABEL_68;
    }
  }
}

void sub_1010EAFA0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_1010EAFAC(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v4;

  v2 = *(double *)(a2 + 40);
  if (v2 > 0.0
    && ((v4 = *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8) == v4) || *(double *)(v4 - 1392) < v2)
    && sub_10149D11C((_BYTE *)(a2 + 56)))
  {
    return sub_10149D11C((_BYTE *)(a2 + 592));
  }
  else
  {
    return 0;
  }
}

void sub_1010EB010(uint64_t a1, double a2)
{
  unsigned __int8 *v4;
  unsigned __int8 v5;
  NSObject *v6;
  __int128 *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 *v40;
  const char *v41;
  uint8_t *v42;
  _WORD v43[8];
  uint8_t buf[1640];

  v4 = (unsigned __int8 *)(a1 + 1);
  do
    v5 = __ldaxr(v4);
  while (__stxr(1u, v4));
  if ((v5 & 1) == 0)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v6 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLVLF,removeAllVioDataForFirstNSeconds,Called without locking vision buffers", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v43[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,removeAllVioDataForFirstNSeconds,Called without locking vision buffers", v43, 2);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::removeAllVioDataForFirstNSeconds(const CFTimeInterval)", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(__int128 **)(a1 + 16);
  if ((__int128 *)v8 != v7)
  {
    v9 = *(double *)(v8 + 40) + a2;
    while (*(double *)(v8 + 40) >= v9)
    {
      v8 += 1432;
      if ((__int128 *)v8 == v7)
      {
        v10 = *(_QWORD *)(a1 + 16);
        goto LABEL_22;
      }
    }
    if ((__int128 *)v8 == v7 || (__int128 *)(v8 + 1432) == v7)
    {
      v10 = v8;
    }
    else
    {
      v10 = v8;
      do
      {
        if (*(double *)(v8 + 1472) >= v9)
        {
          v11 = *(_OWORD *)(v8 + 1432);
          v12 = *(_OWORD *)(v8 + 1448);
          v13 = *(_OWORD *)(v8 + 1464);
          *(_QWORD *)(v10 + 48) = *(_QWORD *)(v8 + 1480);
          *(_OWORD *)(v10 + 16) = v12;
          *(_OWORD *)(v10 + 32) = v13;
          *(_OWORD *)v10 = v11;
          *(_BYTE *)(v10 + 56) = *(_BYTE *)(v8 + 1488);
          v14 = *(_OWORD *)(v8 + 1504);
          v15 = *(_OWORD *)(v8 + 1520);
          *(_QWORD *)(v10 + 104) = *(_QWORD *)(v8 + 1536);
          *(_OWORD *)(v10 + 88) = v15;
          *(_OWORD *)(v10 + 72) = v14;
          v16 = *(_OWORD *)(v8 + 1584);
          v17 = *(_OWORD *)(v8 + 1600);
          v18 = *(_OWORD *)(v8 + 1616);
          *(_OWORD *)(v10 + 136) = *(_OWORD *)(v8 + 1568);
          *(_OWORD *)(v10 + 184) = v18;
          *(_OWORD *)(v10 + 168) = v17;
          *(_OWORD *)(v10 + 152) = v16;
          *(_OWORD *)(v10 + 120) = *(_OWORD *)(v8 + 1552);
          v19 = *(_OWORD *)(v8 + 1640);
          v20 = *(_OWORD *)(v8 + 1656);
          *(_QWORD *)(v10 + 240) = *(_QWORD *)(v8 + 1672);
          *(_OWORD *)(v10 + 208) = v19;
          *(_OWORD *)(v10 + 224) = v20;
          v21 = *(_OWORD *)(v8 + 1704);
          *(_OWORD *)(v10 + 256) = *(_OWORD *)(v8 + 1688);
          *(_OWORD *)(v10 + 272) = v21;
          memcpy((void *)(v10 + 296), (const void *)(v8 + 1728), 0x129uLL);
          v23 = *(_OWORD *)(v8 + 2040);
          v22 = *(_OWORD *)(v8 + 2056);
          *(_QWORD *)(v10 + 640) = *(_QWORD *)(v8 + 2072);
          *(_OWORD *)(v10 + 608) = v23;
          *(_OWORD *)(v10 + 624) = v22;
          v25 = *(_OWORD *)(v8 + 2104);
          v24 = *(_OWORD *)(v8 + 2120);
          v26 = *(_OWORD *)(v8 + 2152);
          *(_OWORD *)(v10 + 704) = *(_OWORD *)(v8 + 2136);
          *(_OWORD *)(v10 + 720) = v26;
          *(_OWORD *)(v10 + 672) = v25;
          *(_OWORD *)(v10 + 688) = v24;
          *(_OWORD *)(v10 + 656) = *(_OWORD *)(v8 + 2088);
          v27 = *(_OWORD *)(v8 + 2176);
          v28 = *(_OWORD *)(v8 + 2192);
          *(_QWORD *)(v10 + 776) = *(_QWORD *)(v8 + 2208);
          *(_OWORD *)(v10 + 760) = v28;
          *(_OWORD *)(v10 + 744) = v27;
          v29 = *(_OWORD *)(v8 + 2224);
          *(_OWORD *)(v10 + 808) = *(_OWORD *)(v8 + 2240);
          *(_OWORD *)(v10 + 792) = v29;
          memcpy((void *)(v10 + 832), (const void *)(v8 + 2264), 0x128uLL);
          v30 = *(_OWORD *)(v8 + 2568);
          *(_OWORD *)(v10 + 1152) = *(_OWORD *)(v8 + 2584);
          *(_OWORD *)(v10 + 1136) = v30;
          *(_OWORD *)(v10 + 1176) = *(_OWORD *)(v8 + 2608);
          v31 = *(_OWORD *)(v8 + 2640);
          v32 = *(_OWORD *)(v8 + 2656);
          v33 = *(_OWORD *)(v8 + 2672);
          *(_OWORD *)(v10 + 1192) = *(_OWORD *)(v8 + 2624);
          *(_OWORD *)(v10 + 1240) = v33;
          *(_OWORD *)(v10 + 1224) = v32;
          *(_OWORD *)(v10 + 1208) = v31;
          *(_BYTE *)(v10 + 1256) = *(_BYTE *)(v8 + 2688);
          v34 = *(_OWORD *)(v8 + 2704);
          *(_OWORD *)(v10 + 1288) = *(_OWORD *)(v8 + 2720);
          *(_OWORD *)(v10 + 1272) = v34;
          *(_OWORD *)(v10 + 1312) = *(_OWORD *)(v8 + 2744);
          v35 = *(_OWORD *)(v8 + 2792);
          v36 = *(_OWORD *)(v8 + 2808);
          v37 = *(_OWORD *)(v8 + 2776);
          *(_OWORD *)(v10 + 1328) = *(_OWORD *)(v8 + 2760);
          *(_OWORD *)(v10 + 1376) = v36;
          *(_OWORD *)(v10 + 1360) = v35;
          *(_OWORD *)(v10 + 1344) = v37;
          v38 = *(_OWORD *)(v8 + 2824);
          v39 = *(_OWORD *)(v8 + 2840);
          *(_BYTE *)(v10 + 1424) = *(_BYTE *)(v8 + 2856);
          *(_OWORD *)(v10 + 1408) = v39;
          *(_OWORD *)(v10 + 1392) = v38;
          v10 += 1432;
        }
        v40 = (__int128 *)(v8 + 2864);
        v8 += 1432;
      }
      while (v40 != v7);
      v7 = *(__int128 **)(a1 + 16);
    }
LABEL_22:
    sub_1010FD1CC(a1 + 8, v10, v7);
  }
  if ((v5 & 1) == 0)
    atomic_store(0, v4);
}

void sub_1010EB404(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1010EB410(unsigned __int8 *a1, void *a2)
{
  uint64_t v3;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  int v17;
  int v18;
  const char *v19;
  unsigned __int8 *v20;
  _BYTE *v21;
  double v22;
  double v23;
  BOOL v25;
  double v26;
  double v27;
  BOOL v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  double v64;
  NSObject *v65;
  double v66;
  NSObject *v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  NSObject *v76;
  uint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  const char *v89;
  double v90;
  const char *v91;
  uint8_t *v92;
  uint64_t v93;
  unint64_t v94;
  const char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char v101[8];
  int64x2_t v102;
  __int128 v103;
  double *v104;
  _QWORD *v105;
  char v106[8];
  int64x2_t v107;
  __int128 v108;
  double *v109;
  _QWORD *v110;
  char v111;
  int v112;
  uint64_t v113;
  __int16 v114;
  double v115;
  __int16 v116;
  double v117;
  uint8_t v118[4];
  uint64_t v119;
  __int16 v120;
  double v121;
  __int16 v122;
  double v123;
  _BYTE buf[24];
  uint64_t v125;
  uint64_t (**v126)();
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t (**v130)();
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t (**v136)();
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  uint64_t (**v140)();
  __int128 v141;
  __int128 v142;
  uint64_t (**v143)();
  _BYTE v144[296];
  char v145;
  uint64_t (**v146)();
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t (**v150)();
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t (**v156)();
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t (**v160)();
  __int128 v161;
  __int128 v162;
  uint64_t (**v163)();
  _BYTE v164[296];
  uint64_t (**v165)();
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  unsigned __int8 v169;
  uint64_t (**v170)();
  __int128 v171;
  __int128 v172;
  char v173;
  uint64_t (**v174)();
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t (**v178)();
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t (**v184)();
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  uint64_t (**v188)();
  __int128 v189;
  __int128 v190;
  uint64_t (**v191)();
  _BYTE v192[296];
  __int128 v193;
  unint64_t v194;
  char v195;
  uint64_t (**v196)();
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  uint64_t (**v200)();
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t (**v206)();
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t (**v210)();
  __int128 v211;
  __int128 v212;
  uint64_t (**v213)();
  _BYTE v214[297];
  uint64_t (**v215)();
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  uint64_t (**v219)();
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t (**v225)();
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  uint64_t (**v229)();
  __int128 v230;
  __int128 v231;
  uint64_t (**v232)();
  _QWORD v233[38];
  __int128 v234;
  _OWORD v235[2];
  uint64_t (**v236)();
  __int128 v237;
  __int128 v238;
  char v239;
  uint64_t (**v240)();
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t (**v244)();
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t (**v250)();
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  uint64_t (**v254)();
  __int128 v255;
  __int128 v256;
  uint64_t (**v257)();
  _QWORD v258[37];
  __int128 v259[89];

  if (!*a1)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v16 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      v17 = *a1;
      LODWORD(v193) = 67240192;
      DWORD1(v193) = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLVLF,pushVLLocalizationResult,activated,%{public}d", (uint8_t *)&v193, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&v193, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v18 = *a1;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v18;
      v13 = (char *)&v193;
      _os_log_send_and_compose_impl(2, 0, &v193, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,pushVLLocalizationResult,activated,%{public}d", buf, 8);
      v15 = (char *)v19;
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v19);
      goto LABEL_108;
    }
    return;
  }
  v3 = *((_QWORD *)a1 + 1704);
  if (v3 != -1)
    *((_QWORD *)a1 + 1704) = v3 + 1;
  v111 = 1;
  __asm { FMOV            V0.2D, #-1.0 }
  v193 = _Q0;
  v194 = 0xBFF0000000000000;
  v195 = 0;
  v197 = 0u;
  v198 = 0u;
  v199 = 0;
  v196 = off_1021A0EF0;
  v201 = 0u;
  v202 = 0u;
  v203 = 0u;
  v204 = 0u;
  v205 = 0u;
  v200 = off_1021A0F28;
  v206 = off_1021A0D18;
  v207 = 0u;
  v208 = 0u;
  v209 = 0;
  v210 = off_1021A1298;
  v211 = 0u;
  v212 = 0u;
  memset(v214, 0, sizeof(v214));
  v216 = 0u;
  v217 = 0u;
  v218 = 0;
  v213 = off_1021A10E0;
  v215 = off_1021A0EF0;
  v219 = off_1021A0F28;
  v220 = 0u;
  v221 = 0u;
  v222 = 0u;
  v223 = 0u;
  v224 = 0u;
  v226 = 0u;
  v225 = off_1021A0D18;
  v227 = 0u;
  v228 = 0;
  v230 = 0u;
  v229 = off_1021A1298;
  v231 = 0u;
  v232 = off_1021A10E0;
  memset(v233, 0, 296);
  v233[37] = off_1021A1298;
  v234 = 0u;
  memset(v235, 0, 25);
  v236 = off_1021A1298;
  v241 = 0u;
  v242 = 0u;
  v243 = 0;
  v237 = 0u;
  v238 = 0u;
  v239 = 0;
  v240 = off_1021A0EF0;
  v244 = off_1021A0F28;
  v245 = 0u;
  v246 = 0u;
  v247 = 0u;
  v248 = 0u;
  v249 = 0u;
  v250 = off_1021A0D18;
  v251 = 0u;
  v252 = 0u;
  v253 = 0;
  v254 = off_1021A1298;
  v255 = 0u;
  v256 = 0u;
  v257 = off_1021A10E0;
  memset(v258, 0, sizeof(v258));
  sub_1010FD830((uint64_t)v259);
  sub_10149F630(a2, &v111, (uint64_t)buf);
  v193 = *(_OWORD *)buf;
  v194 = *(_QWORD *)&buf[16];
  v195 = v125;
  v197 = v127;
  v198 = v128;
  v205 = v135;
  v204 = v134;
  v203 = v133;
  v202 = v132;
  v201 = v131;
  v199 = v129;
  v209 = v139;
  v207 = v137;
  v208 = v138;
  v211 = v141;
  v212 = v142;
  memcpy(v214, v144, 0x128uLL);
  v214[296] = v145;
  v216 = v147;
  v217 = v148;
  v218 = v149;
  v222 = v153;
  v223 = v154;
  v224 = v155;
  v220 = v151;
  v221 = v152;
  v227 = v158;
  v226 = v157;
  v228 = v159;
  v231 = v162;
  v230 = v161;
  memcpy(v233, v164, 0x128uLL);
  v234 = v166;
  v235[0] = v167;
  v237 = v171;
  v238 = v172;
  v242 = v176;
  v241 = v175;
  v246 = v180;
  v247 = v181;
  *(_QWORD *)&v235[1] = v168;
  BYTE8(v235[1]) = v169;
  v239 = v173;
  v243 = v177;
  v245 = v179;
  v248 = v182;
  v249 = v183;
  v251 = v185;
  v252 = v186;
  v253 = v187;
  v255 = v189;
  v256 = v190;
  memcpy(v258, v192, sizeof(v258));
  if (!v111)
  {
    v20 = a1 + 1;
    sub_1010E8510(a1 + 1);
    if (sub_1010ECB14((uint64_t)a1, (uint64_t)&v193, (uint64_t)v259))
      sub_1010ECD84((uint64_t)a1, 2.4);
    atomic_store(0, v20);
    if (sub_1010ED188((uint64_t)a1, (uint64_t)&v193))
    {
      v98 = (char *)(a1 + 12736);
      v97 = (char *)(a1 + 12104);
      v21 = a1 + 11568;
      v106[0] = 1;
      v107 = vdupq_n_s64(3uLL);
      v108 = xmmword_101B9B430;
      v109 = (double *)v233;
      v110 = &v233[15];
      sub_1010FED34((uint64_t)v106, &dbl_101C401B0);
      v22 = *v109 + v109[*((_QWORD *)&v108 + 1) + (_QWORD)v108] + v109[2 * *((_QWORD *)&v108 + 1) + 2 * (_QWORD)v108];
      v23 = sqrt(v22);
      v25 = (v23 < 0.0 || ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(_QWORD *)&v23 - 1) > 0xFFFFFFFFFFFFELL;
      if (!v25 && v23 < 0.0200712864)
      {
        *(double *)buf = 0.000402856538 / v22;
        sub_1010FED34((uint64_t)v106, (const double *)buf);
      }
      v101[0] = 1;
      v102 = vdupq_n_s64(3uLL);
      v103 = xmmword_101B9B430;
      v104 = (double *)&v233[21];
      v105 = &v233[36];
      sub_1010FED34((uint64_t)v101, &dbl_101C401B8);
      v26 = *v104 + v104[*((_QWORD *)&v103 + 1) + (_QWORD)v103] + v104[2 * *((_QWORD *)&v103 + 1) + 2 * (_QWORD)v103];
      v27 = sqrt(v26);
      v29 = (v27 < 0.0 || ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(_QWORD *)&v27 - 1) > 0xFFFFFFFFFFFFELL;
      if (!v29 && v27 < 0.7)
      {
        *(double *)buf = 0.49 / v26;
        sub_1010FED34((uint64_t)v101, (const double *)buf);
      }
      *(_QWORD *)&buf[16] = *((_QWORD *)a1 + 1445);
      *(_OWORD *)buf = *(_OWORD *)(a1 + 11544);
      LOBYTE(v125) = *v21;
      v127 = *((_OWORD *)a1 + 724);
      v128 = *((_OWORD *)a1 + 725);
      v129 = *((_QWORD *)a1 + 1452);
      v126 = off_1021A0EF0;
      v131 = *((_OWORD *)a1 + 727);
      v30 = *((_OWORD *)a1 + 728);
      v31 = *((_OWORD *)a1 + 729);
      v32 = *((_OWORD *)a1 + 730);
      v135 = *((_OWORD *)a1 + 731);
      v134 = v32;
      v133 = v31;
      v132 = v30;
      v130 = off_1021A0F28;
      v136 = off_1021A0D18;
      v33 = *(_OWORD *)(a1 + 11736);
      v137 = *(_OWORD *)(a1 + 11720);
      v138 = v33;
      v139 = *((_QWORD *)a1 + 1469);
      v140 = off_1021A1298;
      v34 = *(_OWORD *)(a1 + 11784);
      v141 = *(_OWORD *)(a1 + 11768);
      v142 = v34;
      v143 = off_1021A10E0;
      memcpy(v144, a1 + 11808, sizeof(v144));
      v145 = *v97;
      v35 = *(_OWORD *)(a1 + 12136);
      v147 = *(_OWORD *)(a1 + 12120);
      v148 = v35;
      v149 = *((_QWORD *)a1 + 1519);
      v146 = off_1021A0EF0;
      v150 = off_1021A0F28;
      v36 = *(_OWORD *)(a1 + 12216);
      v153 = *(_OWORD *)(a1 + 12200);
      v154 = v36;
      v155 = *(_OWORD *)(a1 + 12232);
      v37 = *(_OWORD *)(a1 + 12184);
      v151 = *(_OWORD *)(a1 + 12168);
      v152 = v37;
      v156 = off_1021A0D18;
      v157 = *((_OWORD *)a1 + 766);
      v158 = *((_OWORD *)a1 + 767);
      v159 = *((_QWORD *)a1 + 1536);
      v160 = off_1021A1298;
      v161 = *((_OWORD *)a1 + 769);
      v162 = *((_OWORD *)a1 + 770);
      v163 = off_1021A10E0;
      memcpy(v164, a1 + 12344, sizeof(v164));
      v165 = off_1021A1298;
      v166 = *(_OWORD *)(a1 + 12648);
      v167 = *(_OWORD *)(a1 + 12664);
      v168 = *((_QWORD *)a1 + 1585);
      v169 = a1[12688];
      v170 = off_1021A1298;
      v171 = *((_OWORD *)a1 + 794);
      v172 = *((_OWORD *)a1 + 795);
      v173 = *v98;
      v38 = *((_QWORD *)a1 + 1598);
      v39 = *((_OWORD *)a1 + 798);
      v175 = *((_OWORD *)a1 + 797);
      v176 = v39;
      v177 = v38;
      v174 = off_1021A0EF0;
      v178 = off_1021A0F28;
      v40 = (uint64_t)a1;
      v41 = *((_OWORD *)a1 + 801);
      v42 = *((_OWORD *)a1 + 803);
      v181 = *((_OWORD *)a1 + 802);
      v182 = v42;
      v183 = *((_OWORD *)a1 + 804);
      v179 = *((_OWORD *)a1 + 800);
      v180 = v41;
      v184 = off_1021A0D18;
      v43 = *(_OWORD *)(a1 + 12888);
      v44 = *(_OWORD *)(a1 + 12904);
      v187 = *((_QWORD *)a1 + 1615);
      v186 = v44;
      v185 = v43;
      v188 = off_1021A1298;
      v190 = *(_OWORD *)(a1 + 12952);
      v189 = *(_OWORD *)(a1 + 12936);
      v191 = off_1021A10E0;
      memcpy(v192, a1 + 12976, sizeof(v192));
      *(_OWORD *)(a1 + 11544) = v193;
      v45 = v198;
      *((_OWORD *)a1 + 724) = v197;
      *((_OWORD *)a1 + 725) = v45;
      v46 = v201;
      *((_OWORD *)a1 + 728) = v202;
      v47 = v204;
      *((_OWORD *)a1 + 729) = v203;
      *((_QWORD *)a1 + 1445) = v194;
      *v21 = v195;
      *((_QWORD *)a1 + 1452) = v199;
      *((_OWORD *)a1 + 730) = v47;
      *((_OWORD *)a1 + 731) = v205;
      *((_OWORD *)a1 + 727) = v46;
      *((_QWORD *)a1 + 1469) = v209;
      v48 = v208;
      *(_OWORD *)(a1 + 11720) = v207;
      *(_OWORD *)(a1 + 11736) = v48;
      v49 = v212;
      *(_OWORD *)(a1 + 11768) = v211;
      *(_OWORD *)(a1 + 11784) = v49;
      memcpy(a1 + 11808, v214, 0x128uLL);
      v50 = v217;
      *(_OWORD *)(a1 + 12120) = v216;
      *(_OWORD *)(a1 + 12136) = v50;
      v51 = v223;
      *(_OWORD *)(a1 + 12200) = v222;
      *(_OWORD *)(a1 + 12216) = v51;
      *(_OWORD *)(a1 + 12232) = v224;
      v52 = v221;
      *(_OWORD *)(a1 + 12168) = v220;
      *(_OWORD *)(a1 + 12184) = v52;
      v53 = v226;
      *((_OWORD *)a1 + 767) = v227;
      *((_OWORD *)a1 + 766) = v53;
      v54 = v230;
      *((_OWORD *)a1 + 770) = v231;
      *v97 = v214[296];
      *((_QWORD *)a1 + 1519) = v218;
      *((_QWORD *)a1 + 1536) = v228;
      *((_OWORD *)a1 + 769) = v54;
      memcpy(a1 + 12344, v233, 0x128uLL);
      v55 = v235[0];
      *(_OWORD *)(a1 + 12648) = v234;
      *(_OWORD *)(a1 + 12664) = v55;
      v56 = v238;
      *((_OWORD *)a1 + 794) = v237;
      *((_OWORD *)a1 + 795) = v56;
      v57 = v241;
      *((_OWORD *)a1 + 798) = v242;
      *((_OWORD *)a1 + 797) = v57;
      v58 = v245;
      *((_OWORD *)a1 + 801) = v246;
      v59 = v248;
      *((_OWORD *)a1 + 802) = v247;
      *((_QWORD *)a1 + 1585) = *(_QWORD *)&v235[1];
      a1[12688] = BYTE8(v235[1]);
      *v98 = v239;
      *((_QWORD *)a1 + 1598) = v243;
      *((_OWORD *)a1 + 800) = v58;
      *((_OWORD *)a1 + 804) = v249;
      *((_OWORD *)a1 + 803) = v59;
      v60 = v252;
      *(_OWORD *)(a1 + 12888) = v251;
      *(_OWORD *)(a1 + 12904) = v60;
      *((_QWORD *)a1 + 1615) = v253;
      v61 = v256;
      *(_OWORD *)(a1 + 12936) = v255;
      *(_OWORD *)(a1 + 12952) = v61;
      memcpy(a1 + 12976, v258, 0x128uLL);
      if (*(double *)&buf[8] <= 0.0 || (sub_1010ED82C((uint64_t)a1, (uint64_t)buf, (uint64_t)&v193) & 1) != 0)
      {
        sub_1010E8510(v20);
        v63 = *((_QWORD *)a1 + 4);
        v62 = *((_QWORD *)a1 + 5);
        if (v63 != v62)
        {
          v64 = *(double *)(v62 - 3152) - *(double *)(v63 + 8);
          v63 = *((_QWORD *)a1 + 5);
          if (v64 >= 10.0)
          {
            if (qword_1022A00C0 != -1)
              dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
            v65 = qword_1022A00C8;
            if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
            {
              v66 = (double)(0x80B70FBB5A19BE48 * ((uint64_t)(*((_QWORD *)a1 + 2) - *((_QWORD *)a1 + 1)) >> 3))
                  * 0.000000953674316;
              *(_DWORD *)v118 = 134349569;
              v119 = *((_QWORD *)&v193 + 1);
              v120 = 2050;
              v121 = v64;
              v122 = 2049;
              v123 = v66;
              _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "CLVLF,pushVLLocalizationResult,VL buffer reached its maximum size,machAbsTime,%{public}.3lf,sizeInSec,%{public}.3lf,sizeInMB,%{private}.3lf", v118, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(v118, 0x65CuLL);
              if (qword_1022A00C0 != -1)
                dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
              v90 = (double)(0x80B70FBB5A19BE48 * ((uint64_t)(*((_QWORD *)a1 + 2) - *((_QWORD *)a1 + 1)) >> 3))
                  * 0.000000953674316;
              v112 = 134349569;
              v113 = *((_QWORD *)&v193 + 1);
              v114 = 2050;
              v115 = v64;
              v116 = 2049;
              v117 = v90;
              _os_log_send_and_compose_impl(2, 0, v118, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,pushVLLocalizationResult,VL buffer reached its maximum size,machAbsTime,%{public}.3lf,sizeInSec,%{public}.3lf,sizeInMB,%{private}.3lf", &v112, 32);
              v92 = (uint8_t *)v91;
              sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v91);
              if (v92 != v118)
                free(v92);
              v40 = (uint64_t)a1;
            }
            sub_1010EDABC(v40, 1.0);
            v63 = *(_QWORD *)(v40 + 40);
          }
        }
        if (v63 >= *(_QWORD *)(v40 + 48))
        {
          v70 = sub_1010FF038((uint64_t *)a1 + 4, &v193);
        }
        else
        {
          sub_1010FDC78(v63, &v193);
          sub_1010FDEF8(v63 + 1728, v259);
          v70 = v63 + 3160;
        }
        *(_QWORD *)(v40 + 40) = v70;
        atomic_store(0, (unsigned __int8 *)(v40 + 1));
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v71 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(a2, "timestamp");
          *(_DWORD *)v118 = 134349056;
          v119 = v72;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "CLVLF,pushVLLocalizationResult,VL added to queue,machAbsTime,%{public}.3lf", v118, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v118, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
          v73 = qword_1022A00C8;
          objc_msgSend(a2, "timestamp");
          v112 = 134349056;
          v113 = v74;
          LODWORD(v96) = 12;
          v13 = (char *)v118;
          _os_log_send_and_compose_impl(2, 0, v118, 1628, &_mh_execute_header, v73, 2, "CLVLF,pushVLLocalizationResult,VL added to queue,machAbsTime,%{public}.3lf", &v112, v96);
          v15 = (char *)v75;
          sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v75);
          goto LABEL_108;
        }
        return;
      }
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v76 = qword_1022A00C8;
      if (!os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
LABEL_84:
        if (!sub_1001BFF7C(115, 0))
          return;
        bzero(v118, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v83 = *((_QWORD *)a1 + 5);
        if (*((_QWORD *)a1 + 4) == v83)
        {
          v93 = *((_QWORD *)a1 + 845);
          if (*((_QWORD *)a1 + 844) == v93)
          {
            v94 = 0xBFF0000000000000;
            goto LABEL_107;
          }
          v84 = (unint64_t *)(v93 - 2160);
        }
        else
        {
          v84 = (unint64_t *)(v83 - 3152);
        }
        v94 = *v84;
LABEL_107:
        v112 = 134349568;
        v113 = *((_QWORD *)&v193 + 1);
        v114 = 2050;
        v115 = *(double *)&v94;
        v116 = 2050;
        v117 = *(double *)&v235[1];
        v13 = (char *)v118;
        _os_log_send_and_compose_impl(2, 0, v118, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,pushVLLocalizationResult,Invalid measurement,machAbsTime,%{public}.3lf,prevMachAbsTime,%{public}.3lf,confidence,%{public}.3lf,", &v112, 32);
        v15 = (char *)v95;
        sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v95);
LABEL_108:
        if (v15 != v13)
          free(v15);
        return;
      }
      v77 = *((_QWORD *)a1 + 5);
      if (*((_QWORD *)a1 + 4) == v77)
      {
        v81 = *((_QWORD *)a1 + 845);
        if (*((_QWORD *)a1 + 844) == v81)
        {
          v82 = 0xBFF0000000000000;
          goto LABEL_83;
        }
        v78 = (unint64_t *)(v81 - 2160);
      }
      else
      {
        v78 = (unint64_t *)(v77 - 3152);
      }
      v82 = *v78;
LABEL_83:
      *(_DWORD *)v118 = 134349568;
      v119 = *((_QWORD *)&v193 + 1);
      v120 = 2050;
      v121 = *(double *)&v82;
      v122 = 2050;
      v123 = *(double *)&v235[1];
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "CLVLF,pushVLLocalizationResult,Invalid measurement,machAbsTime,%{public}.3lf,prevMachAbsTime,%{public}.3lf,confidence,%{public}.3lf,", v118, 0x20u);
      goto LABEL_84;
    }
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v67 = qword_1022A00C8;
    if (!os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
LABEL_77:
      if (!sub_1001BFF7C(115, 0))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v85 = *((_QWORD *)a1 + 5);
      if (*((_QWORD *)a1 + 4) == v85)
      {
        v87 = *((_QWORD *)a1 + 845);
        if (*((_QWORD *)a1 + 844) == v87)
        {
          v88 = 0xBFF0000000000000;
          goto LABEL_97;
        }
        v86 = (unint64_t *)(v87 - 2160);
      }
      else
      {
        v86 = (unint64_t *)(v85 - 3152);
      }
      v88 = *v86;
LABEL_97:
      *(_DWORD *)v118 = 134349568;
      v119 = *((_QWORD *)&v193 + 1);
      v120 = 2050;
      v121 = *(double *)&v88;
      v122 = 2050;
      v123 = *(double *)&v235[1];
      v13 = buf;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,pushVLLocalizationResult,Invalid measurement,machAbsTime,%{public}.3lf,prevMachAbsTime,%{public}.3lf,confidence,%{public}.3lf,", v118, 32);
      v15 = (char *)v89;
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v89);
      goto LABEL_108;
    }
    v68 = *((_QWORD *)a1 + 5);
    if (*((_QWORD *)a1 + 4) == v68)
    {
      v79 = *((_QWORD *)a1 + 845);
      if (*((_QWORD *)a1 + 844) == v79)
      {
        v80 = 0xBFF0000000000000;
        goto LABEL_76;
      }
      v69 = (unint64_t *)(v79 - 2160);
    }
    else
    {
      v69 = (unint64_t *)(v68 - 3152);
    }
    v80 = *v69;
LABEL_76:
    *(_DWORD *)buf = 134349568;
    *(_QWORD *)&buf[4] = *((_QWORD *)&v193 + 1);
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v80;
    *(_WORD *)&buf[22] = 2050;
    v125 = *(_QWORD *)&v235[1];
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "CLVLF,pushVLLocalizationResult,Invalid measurement,machAbsTime,%{public}.3lf,prevMachAbsTime,%{public}.3lf,confidence,%{public}.3lf,", buf, 0x20u);
    goto LABEL_77;
  }
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
  v9 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(a2, "timestamp");
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLVLF,pushVLLocalizationResult,Unable to construct VlfData,machAbsTime,%{public}.3lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v11 = qword_1022A00C8;
    objc_msgSend(a2, "timestamp");
    *(_DWORD *)v118 = 134349056;
    v119 = v12;
    v13 = buf;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 16, "CLVLF,pushVLLocalizationResult,Unable to construct VlfData,machAbsTime,%{public}.3lf", v118, 12);
    v15 = (char *)v14;
    sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v14);
    goto LABEL_108;
  }
}

void sub_1010EC94C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1010EC958(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v5 = *(__int128 *)((char *)a2 + 40);
  v6 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  v7 = *(__int128 *)((char *)a2 + 120);
  v8 = *(__int128 *)((char *)a2 + 136);
  v9 = *(__int128 *)((char *)a2 + 152);
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  v10 = a2[11];
  v11 = a2[12];
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  v12 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v12;
  memcpy((void *)(a1 + 264), (char *)a2 + 264, 0x128uLL);
  *(_BYTE *)(a1 + 560) = *((_BYTE *)a2 + 560);
  v14 = a2[36];
  v13 = a2[37];
  *(_QWORD *)(a1 + 608) = *((_QWORD *)a2 + 76);
  *(_OWORD *)(a1 + 576) = v14;
  *(_OWORD *)(a1 + 592) = v13;
  v16 = a2[40];
  v15 = a2[41];
  v17 = a2[43];
  *(_OWORD *)(a1 + 672) = a2[42];
  *(_OWORD *)(a1 + 688) = v17;
  *(_OWORD *)(a1 + 640) = v16;
  *(_OWORD *)(a1 + 656) = v15;
  *(_OWORD *)(a1 + 624) = a2[39];
  v18 = *(__int128 *)((char *)a2 + 712);
  v19 = *(__int128 *)((char *)a2 + 728);
  *(_QWORD *)(a1 + 744) = *((_QWORD *)a2 + 93);
  *(_OWORD *)(a1 + 728) = v19;
  *(_OWORD *)(a1 + 712) = v18;
  v20 = *(__int128 *)((char *)a2 + 760);
  *(_OWORD *)(a1 + 776) = *(__int128 *)((char *)a2 + 776);
  *(_OWORD *)(a1 + 760) = v20;
  memcpy((void *)(a1 + 800), a2 + 50, 0x128uLL);
  v21 = a2[69];
  *(_OWORD *)(a1 + 1120) = a2[70];
  *(_OWORD *)(a1 + 1104) = v21;
  v22 = *((_BYTE *)a2 + 1144);
  *(_QWORD *)(a1 + 1136) = *((_QWORD *)a2 + 142);
  *(_BYTE *)(a1 + 1144) = v22;
  v23 = *(__int128 *)((char *)a2 + 1176);
  *(_OWORD *)(a1 + 1160) = *(__int128 *)((char *)a2 + 1160);
  *(_OWORD *)(a1 + 1176) = v23;
  *(_BYTE *)(a1 + 1192) = *((_BYTE *)a2 + 1192);
  v25 = *(__int128 *)((char *)a2 + 1208);
  v24 = *(__int128 *)((char *)a2 + 1224);
  *(_QWORD *)(a1 + 1240) = *((_QWORD *)a2 + 155);
  *(_OWORD *)(a1 + 1208) = v25;
  *(_OWORD *)(a1 + 1224) = v24;
  v27 = *(__int128 *)((char *)a2 + 1272);
  v26 = *(__int128 *)((char *)a2 + 1288);
  v28 = *(__int128 *)((char *)a2 + 1320);
  *(_OWORD *)(a1 + 1304) = *(__int128 *)((char *)a2 + 1304);
  *(_OWORD *)(a1 + 1320) = v28;
  *(_OWORD *)(a1 + 1272) = v27;
  *(_OWORD *)(a1 + 1288) = v26;
  *(_OWORD *)(a1 + 1256) = *(__int128 *)((char *)a2 + 1256);
  v29 = a2[84];
  v30 = a2[85];
  *(_QWORD *)(a1 + 1376) = *((_QWORD *)a2 + 172);
  *(_OWORD *)(a1 + 1360) = v30;
  *(_OWORD *)(a1 + 1344) = v29;
  v31 = a2[87];
  *(_OWORD *)(a1 + 1408) = a2[88];
  *(_OWORD *)(a1 + 1392) = v31;
  memcpy((void *)(a1 + 1432), (char *)a2 + 1432, 0x128uLL);
  return a1;
}

BOOL sub_1010ECB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 v7;
  NSObject *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  _BOOL8 result;
  char *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  v6 = (unsigned __int8 *)(a1 + 1);
  do
    v7 = __ldaxr(v6);
  while (__stxr(1u, v6));
  if ((v7 & 1) == 0)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v8 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVLF,synchronizeVioDataAt,Called without locking vision buffers", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v16[0] = 0;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,synchronizeVioDataAt,Called without locking vision buffers", v16, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::synchronizeVioDataAt(const CLVisionTime &, fusion::VioData &)", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
  }
  v9 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 48) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 32) = v9;
  *(_BYTE *)(a3 + 1424) = 0;
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  if (0xED6866F8D962AE7BLL * ((v10 - v11) >> 3) <= 1)
    goto LABEL_15;
  v12 = *(double *)(a2 + 8);
  if (*(double *)(v11 + 40) > v12)
    goto LABEL_15;
  v13 = *(double *)(v10 - 1392);
  if (v13 >= v12)
  {
    result = sub_1010FB66C(a1, a2, a3);
    goto LABEL_16;
  }
  if (v13 < v12 + -0.6)
LABEL_15:
    result = 0;
  else
    result = sub_1010FC254(a1, (__int128 *)a2, a3);
LABEL_16:
  if ((v7 & 1) == 0)
    atomic_store(0, v6);
  return result;
}

void sub_1010ECD78(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1010ECD84(uint64_t a1, double a2)
{
  unsigned __int8 *v4;
  unsigned __int8 v5;
  NSObject *v6;
  __int128 *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 *v40;
  char *v41;
  _WORD v42[8];
  uint8_t buf[1640];

  v4 = (unsigned __int8 *)(a1 + 1);
  do
    v5 = __ldaxr(v4);
  while (__stxr(1u, v4));
  if ((v5 & 1) == 0)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v6 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLVLF,removeAllVioDataExceptLastNSeconds,Called without locking vision buffers", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v42[0] = 0;
      v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,removeAllVioDataExceptLastNSeconds,Called without locking vision buffers", v42, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::removeAllVioDataExceptLastNSeconds(const CFTimeInterval)", "%s\n", v41);
      if (v41 != (char *)buf)
        free(v41);
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(__int128 **)(a1 + 16);
  if ((__int128 *)v8 != v7)
  {
    v9 = *((double *)v7 - 174) - a2;
    while (*(double *)(v8 + 40) >= v9)
    {
      v8 += 1432;
      if ((__int128 *)v8 == v7)
      {
        v10 = *(_QWORD *)(a1 + 16);
        goto LABEL_22;
      }
    }
    if ((__int128 *)v8 == v7 || (__int128 *)(v8 + 1432) == v7)
    {
      v10 = v8;
    }
    else
    {
      v10 = v8;
      do
      {
        if (*(double *)(v8 + 1472) >= v9)
        {
          v11 = *(_OWORD *)(v8 + 1432);
          v12 = *(_OWORD *)(v8 + 1448);
          v13 = *(_OWORD *)(v8 + 1464);
          *(_QWORD *)(v10 + 48) = *(_QWORD *)(v8 + 1480);
          *(_OWORD *)(v10 + 16) = v12;
          *(_OWORD *)(v10 + 32) = v13;
          *(_OWORD *)v10 = v11;
          *(_BYTE *)(v10 + 56) = *(_BYTE *)(v8 + 1488);
          v14 = *(_OWORD *)(v8 + 1504);
          v15 = *(_OWORD *)(v8 + 1520);
          *(_QWORD *)(v10 + 104) = *(_QWORD *)(v8 + 1536);
          *(_OWORD *)(v10 + 88) = v15;
          *(_OWORD *)(v10 + 72) = v14;
          v16 = *(_OWORD *)(v8 + 1584);
          v17 = *(_OWORD *)(v8 + 1600);
          v18 = *(_OWORD *)(v8 + 1616);
          *(_OWORD *)(v10 + 136) = *(_OWORD *)(v8 + 1568);
          *(_OWORD *)(v10 + 184) = v18;
          *(_OWORD *)(v10 + 168) = v17;
          *(_OWORD *)(v10 + 152) = v16;
          *(_OWORD *)(v10 + 120) = *(_OWORD *)(v8 + 1552);
          v19 = *(_OWORD *)(v8 + 1640);
          v20 = *(_OWORD *)(v8 + 1656);
          *(_QWORD *)(v10 + 240) = *(_QWORD *)(v8 + 1672);
          *(_OWORD *)(v10 + 208) = v19;
          *(_OWORD *)(v10 + 224) = v20;
          v21 = *(_OWORD *)(v8 + 1704);
          *(_OWORD *)(v10 + 256) = *(_OWORD *)(v8 + 1688);
          *(_OWORD *)(v10 + 272) = v21;
          memcpy((void *)(v10 + 296), (const void *)(v8 + 1728), 0x129uLL);
          v23 = *(_OWORD *)(v8 + 2040);
          v22 = *(_OWORD *)(v8 + 2056);
          *(_QWORD *)(v10 + 640) = *(_QWORD *)(v8 + 2072);
          *(_OWORD *)(v10 + 608) = v23;
          *(_OWORD *)(v10 + 624) = v22;
          v25 = *(_OWORD *)(v8 + 2104);
          v24 = *(_OWORD *)(v8 + 2120);
          v26 = *(_OWORD *)(v8 + 2152);
          *(_OWORD *)(v10 + 704) = *(_OWORD *)(v8 + 2136);
          *(_OWORD *)(v10 + 720) = v26;
          *(_OWORD *)(v10 + 672) = v25;
          *(_OWORD *)(v10 + 688) = v24;
          *(_OWORD *)(v10 + 656) = *(_OWORD *)(v8 + 2088);
          v27 = *(_OWORD *)(v8 + 2176);
          v28 = *(_OWORD *)(v8 + 2192);
          *(_QWORD *)(v10 + 776) = *(_QWORD *)(v8 + 2208);
          *(_OWORD *)(v10 + 760) = v28;
          *(_OWORD *)(v10 + 744) = v27;
          v29 = *(_OWORD *)(v8 + 2224);
          *(_OWORD *)(v10 + 808) = *(_OWORD *)(v8 + 2240);
          *(_OWORD *)(v10 + 792) = v29;
          memcpy((void *)(v10 + 832), (const void *)(v8 + 2264), 0x128uLL);
          v30 = *(_OWORD *)(v8 + 2568);
          *(_OWORD *)(v10 + 1152) = *(_OWORD *)(v8 + 2584);
          *(_OWORD *)(v10 + 1136) = v30;
          *(_OWORD *)(v10 + 1176) = *(_OWORD *)(v8 + 2608);
          v31 = *(_OWORD *)(v8 + 2640);
          v32 = *(_OWORD *)(v8 + 2656);
          v33 = *(_OWORD *)(v8 + 2672);
          *(_OWORD *)(v10 + 1192) = *(_OWORD *)(v8 + 2624);
          *(_OWORD *)(v10 + 1240) = v33;
          *(_OWORD *)(v10 + 1224) = v32;
          *(_OWORD *)(v10 + 1208) = v31;
          *(_BYTE *)(v10 + 1256) = *(_BYTE *)(v8 + 2688);
          v34 = *(_OWORD *)(v8 + 2704);
          *(_OWORD *)(v10 + 1288) = *(_OWORD *)(v8 + 2720);
          *(_OWORD *)(v10 + 1272) = v34;
          *(_OWORD *)(v10 + 1312) = *(_OWORD *)(v8 + 2744);
          v35 = *(_OWORD *)(v8 + 2792);
          v36 = *(_OWORD *)(v8 + 2808);
          v37 = *(_OWORD *)(v8 + 2776);
          *(_OWORD *)(v10 + 1328) = *(_OWORD *)(v8 + 2760);
          *(_OWORD *)(v10 + 1376) = v36;
          *(_OWORD *)(v10 + 1360) = v35;
          *(_OWORD *)(v10 + 1344) = v37;
          v38 = *(_OWORD *)(v8 + 2824);
          v39 = *(_OWORD *)(v8 + 2840);
          *(_BYTE *)(v10 + 1424) = *(_BYTE *)(v8 + 2856);
          *(_OWORD *)(v10 + 1408) = v39;
          *(_OWORD *)(v10 + 1392) = v38;
          v10 += 1432;
        }
        v40 = (__int128 *)(v8 + 2864);
        v8 += 1432;
      }
      while (v40 != v7);
      v7 = *(__int128 **)(a1 + 16);
    }
LABEL_22:
    sub_1010FD1CC(a1 + 8, v10, v7);
  }
  if ((v5 & 1) == 0)
    atomic_store(0, v4);
}

void sub_1010ED17C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_1010ED188(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v5;
  uint64_t v6;
  double v7;
  _BOOL8 result;
  double v10;
  NSObject *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  double v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  double v21;
  double v22;
  NSObject *v23;
  const char *v24;
  int v25;
  double v26;
  __int16 v27;
  double v28;
  uint8_t v29[4];
  double v30;
  __int16 v31;
  double v32;
  uint8_t buf[1392];
  long double __x;
  long double __y;
  double v36;

  v2 = *(double *)(a2 + 8);
  if (v2 <= 0.0)
    return 0;
  v5 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) != v5 && *(double *)(v5 - 3152) >= v2)
    return 0;
  v6 = *(_QWORD *)(a1 + 6760);
  if (*(_QWORD *)(a1 + 6752) != v6 && *(double *)(v6 - 2160) >= v2 + 2.4)
    return 0;
  v7 = *(double *)(a2 + 1136);
  if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  if (v7 < 0.6827 || v7 > 1.0)
    return 0;
  if (sub_10149D11C((_BYTE *)(a2 + 24)))
  {
    v10 = *(double *)(a1 + 13288);
    if (v10 <= 0.0 || vabdd_f64(v10, *(double *)(a2 + 8)) > 6.0)
      return 1;
    sub_1010FDC78((uint64_t)buf, (__int128 *)a2);
    if (sub_10149F2B4((uint64_t)buf, a1 + 13304))
    {
      v15 = hypot(__x, __y);
      if (*(double *)&qword_10230C820 * *(double *)(a1 + 13384) >= 64.0)
        v16 = *(double *)&qword_10230C820 * *(double *)(a1 + 13384);
      else
        v16 = 64.0;
      if (v15 <= v16)
      {
        v21 = fabs(v36);
        if (*(double *)&qword_10230C828 * *(double *)(a1 + 13392) >= 48.0)
          v22 = *(double *)&qword_10230C828 * *(double *)(a1 + 13392);
        else
          v22 = 48.0;
        if (v21 <= v22)
          return 1;
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v23 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v29 = 134283777;
          v30 = v21;
          v31 = 2049;
          v32 = v22;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "CLVLF,isValid,Invalid VL,CL-VL vertical distance,%{private}.3lf,vertDistThres,%{private}.3lf", v29, 0x16u);
        }
        if (!sub_1001BFF7C(115, 0))
          return 0;
        bzero(v29, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v25 = 134283777;
        v26 = v21;
        v27 = 2049;
        v28 = v22;
        v12 = v29;
        _os_log_send_and_compose_impl(2, 0, v29, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,isValid,Invalid VL,CL-VL vertical distance,%{private}.3lf,vertDistThres,%{private}.3lf", &v25, 22);
        v14 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::isValid(const fusion::VlfData &) const", "%s\n", v24);
      }
      else
      {
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v17 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v29 = 134283777;
          v30 = v15;
          v31 = 2049;
          v32 = v16;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLVLF,isValid,Invalid VL,CL-VL horizontal distance,%{private}.3lf,horzDistThres,%{private}.3lf", v29, 0x16u);
        }
        if (!sub_1001BFF7C(115, 0))
          return 0;
        bzero(v29, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v25 = 134283777;
        v26 = v15;
        v27 = 2049;
        v28 = v16;
        v12 = v29;
        _os_log_send_and_compose_impl(2, 0, v29, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,isValid,Invalid VL,CL-VL horizontal distance,%{private}.3lf,horzDistThres,%{private}.3lf", &v25, 22);
        v14 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::isValid(const fusion::VlfData &) const", "%s\n", v18);
      }
    }
    else
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v19 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLVLF,isValid,Invalid VL,Unable to compute ENU from ECEF", v29, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 0;
      bzero(v29, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      LOWORD(v25) = 0;
      v12 = v29;
      _os_log_send_and_compose_impl(2, 0, v29, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,isValid,Invalid VL,Unable to compute ENU from ECEF", &v25, 2);
      v14 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::isValid(const fusion::VlfData &) const", "%s\n", v20);
    }
LABEL_25:
    if (v14 != v12)
      free(v14);
    return 0;
  }
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
  v11 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLVLF,isValid,Invalid VL,inf or nan value in estimates or covariance", buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    *(_WORD *)v29 = 0;
    v12 = buf;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,isValid,Invalid VL,inf or nan value in estimates or covariance", v29, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::isValid(const fusion::VlfData &) const", "%s\n", v13);
    goto LABEL_25;
  }
  return result;
}

void sub_1010ED820(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1010ED82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double v4;
  __int128 v5;
  double v6;
  double v7;
  double v8;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t (**v14)();
  __int128 v15;
  __int128 v16;
  int v17;
  double v18;
  __int16 v19;
  double v20;
  uint8_t buf[4];
  double v22;
  __int16 v23;
  double v24;

  if (!*(_BYTE *)(a1 + 6777) && !*(_BYTE *)(a1 + 6776))
    return 1;
  v3 = 0;
  v4 = *(double *)(a3 + 8) - *(double *)(a2 + 8);
  v14 = off_1021A1298;
  v5 = *(_OWORD *)(a3 + 776);
  v15 = *(_OWORD *)(a3 + 760);
  v16 = v5;
  do
  {
    *(double *)&(&v14)[v3 + 1] = *(double *)&(&v14)[v3 + 1] - *(double *)(a2 + 760 + v3 * 8);
    ++v3;
  }
  while (v3 != 3);
  v6 = fabs(v4);
  v7 = *((double *)&v15 + 1) * *((double *)&v15 + 1)
     + *(double *)&v15 * *(double *)&v15
     + *(double *)&v16 * *(double *)&v16;
  v8 = v6 * (v6 * 81.0);
  if (v7 <= 0.04 || v7 <= v8)
    return 1;
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
  v11 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134283777;
    v22 = sqrt(v7);
    v23 = 2049;
    v24 = sqrt(v8);
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLVLF,isValid,Invalid VL,VL-VL distance,%{private}.3lf,distThres,%{private}.3lf", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v17 = 134283777;
    v18 = sqrt(v7);
    v19 = 2049;
    v20 = sqrt(v8);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,isValid,Invalid VL,VL-VL distance,%{private}.3lf,distThres,%{private}.3lf", &v17, 22);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::isValid(const fusion::VlfData &, const fusion::VlfData &) const", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  return 0;
}

void sub_1010EDAB0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1010EDABC(uint64_t a1, double a2)
{
  unsigned __int8 *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  v4 = (unsigned __int8 *)(a1 + 1);
  do
    v5 = __ldaxr(v4);
  while (__stxr(1u, v4));
  if ((v5 & 1) == 0)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v6 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLVLF,removeAllVlfDataForFirstNSeconds,Called without locking vision buffers", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,removeAllVlfDataForFirstNSeconds,Called without locking vision buffers", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::removeAllVlfDataForFirstNSeconds(const CFTimeInterval)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (v8 != v7)
  {
    v9 = *(double *)(v8 + 8) + a2;
    while (*(double *)(v8 + 8) >= v9)
    {
      v8 += 3160;
      if (v8 == v7)
      {
        v8 = *(_QWORD *)(a1 + 40);
        goto LABEL_20;
      }
    }
    if (v8 != v7)
    {
      v10 = v8 + 3160;
      if (v8 + 3160 != v7)
      {
        do
        {
          if (*(double *)(v10 + 8) >= v9)
          {
            sub_1010FF554(v8, v10);
            v8 += 3160;
          }
          v10 += 3160;
        }
        while (v10 != v7);
        v7 = *(_QWORD *)(a1 + 40);
      }
    }
LABEL_20:
    sub_1010F7244(a1 + 32, v8, v7);
  }
  if ((v5 & 1) == 0)
    atomic_store(0, v4);
}

void sub_1010EDD08(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1010EDD14(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  NSObject *v37;
  double v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  double v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  int v58;
  uint64_t v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  _BYTE v64[32];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unsigned __int8 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  unint64_t v83;
  _BYTE buf[32];
  uint64_t (**v85)();
  __int128 v86;
  __int128 v87;
  uint64_t (**v88)();
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  unsigned __int8 v94;
  uint64_t (**v95)();
  __int128 v96;
  __int128 v97;
  uint64_t (**v98)();
  __int128 v99;
  __int128 v100;
  uint64_t (**v101)();
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  unint64_t v108;
  _BYTE v109[1440];

  if (!*a1)
  {
    v6 = *((double *)a1 + 1444);
    v7 = vabdd_f64(*(double *)(a3 + 32), v6);
    if (v6 <= 0.0 || v7 > 24.0)
    {
      if (v6 > 0.0)
      {
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v9 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
        {
          v10 = *(_QWORD *)(a3 + 32);
          v11 = *a1;
          v12 = *((_QWORD *)a1 + 1444);
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)&buf[4] = v10;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v11;
          *(_WORD *)&buf[18] = 2050;
          *(_QWORD *)&buf[20] = v12;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLVLF,pushLocation,Filter reset,this should not happen,machAbsTime,%{public}.3lf,activated,%{public}d,lastValidVlf,%{public}.3lf", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
          v47 = *(_QWORD *)(a3 + 32);
          v48 = *a1;
          v49 = *((_QWORD *)a1 + 1444);
          *(_DWORD *)v64 = 134349568;
          *(_QWORD *)&v64[4] = v47;
          *(_WORD *)&v64[12] = 1026;
          *(_DWORD *)&v64[14] = v48;
          *(_WORD *)&v64[18] = 2050;
          *(_QWORD *)&v64[20] = v49;
          v50 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,pushLocation,Filter reset,this should not happen,machAbsTime,%{public}.3lf,activated,%{public}d,lastValidVlf,%{public}.3lf", v64, 28);
          sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v50);
          if (v50 != buf)
            free(v50);
        }
        sub_1010E8510(a1 + 1);
        sub_1010E854C((uint64_t)a1, 1);
        atomic_store(0, a1 + 1);
      }
      return;
    }
  }
  v57 = 1;
  *(_DWORD *)buf = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&buf[8] = _Q0;
  *(_QWORD *)&buf[24] = 0xBFF0000000000000;
  v85 = off_1021A1298;
  v86 = 0u;
  v87 = 0u;
  v88 = off_1021A1298;
  v89 = 0u;
  v90 = 0u;
  v91 = _Q0;
  v92 = _Q0;
  v93 = _Q0;
  v94 = 0;
  v95 = off_1021A1298;
  v96 = 0u;
  v97 = 0u;
  v100 = 0u;
  v99 = 0u;
  v98 = off_1021A1298;
  v101 = off_1021A0F28;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  LOBYTE(v107) = 0;
  *((_QWORD *)&v107 + 1) = 0xBFF0000000000000;
  v108 = 0xBFF0000000000000;
  sub_1010FD830((uint64_t)v109);
  sub_10149FB38(a2, a3, &v57, (uint64_t)v64);
  *(_OWORD *)buf = *(_OWORD *)v64;
  *(_OWORD *)&buf[16] = *(_OWORD *)&v64[16];
  v86 = v65;
  v87 = v66;
  v89 = v67;
  v90 = v68;
  v94 = v72;
  v93 = v71;
  v92 = v70;
  v91 = v69;
  v97 = v74;
  v96 = v73;
  v100 = v76;
  v99 = v75;
  v103 = v78;
  v102 = v77;
  v104 = v79;
  v105 = v80;
  v106 = v81;
  v107 = v82;
  v108 = v83;
  if (!v57)
  {
    sub_1010E8510(a1 + 1);
    if (sub_1010ECB14((uint64_t)a1, (uint64_t)&buf[8], (uint64_t)v109))
      sub_1010ECD84((uint64_t)a1, 2.4);
    atomic_store(0, a1 + 1);
    if (sub_1010EE74C(a1, (uint64_t)buf))
    {
      if (((unint64_t)v91 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
        && *(double *)&v91 > 0.0
        && *(double *)&v91 < 4.0)
      {
        *(_QWORD *)&v91 = 0x4010000000000000;
      }
      v55 = *(_OWORD *)&buf[8];
      v56 = *(_QWORD *)&buf[24];
      v22 = *(_OWORD *)&buf[16];
      *(_OWORD *)(a1 + 13272) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 13288) = v22;
      v23 = v87;
      *((_OWORD *)a1 + 832) = v86;
      *((_OWORD *)a1 + 833) = v23;
      v24 = v90;
      *(_OWORD *)(a1 + 13352) = v89;
      *(_OWORD *)(a1 + 13368) = v24;
      v25 = v91;
      v26 = v92;
      v27 = v93;
      a1[13432] = v94;
      *(_OWORD *)(a1 + 13400) = v26;
      *(_OWORD *)(a1 + 13416) = v27;
      *(_OWORD *)(a1 + 13384) = v25;
      v28 = v97;
      *(_OWORD *)(a1 + 13448) = v96;
      *(_OWORD *)(a1 + 13464) = v28;
      v29 = v99;
      *((_OWORD *)a1 + 844) = v100;
      *((_OWORD *)a1 + 843) = v29;
      v30 = v105;
      *(_OWORD *)(a1 + 13560) = v104;
      *(_OWORD *)(a1 + 13576) = v30;
      v31 = v106;
      v32 = v103;
      *(_OWORD *)(a1 + 13528) = v102;
      *(_OWORD *)(a1 + 13544) = v32;
      v33 = v107;
      *((_QWORD *)a1 + 1703) = v108;
      *(_OWORD *)(a1 + 13592) = v31;
      *(_OWORD *)(a1 + 13608) = v33;
      v35 = *((_QWORD *)a1 + 7);
      v34 = *((_QWORD *)a1 + 8);
      if (v35 != v34)
      {
        v36 = *(double *)(v34 - 1776) - *(double *)(v35 + 16);
        v35 = *((_QWORD *)a1 + 8);
        if (v36 >= 10.0)
        {
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
          v37 = qword_1022A00C8;
          if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
          {
            v38 = (double)(unint64_t)(*((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7)) * 0.000000953674316;
            *(_DWORD *)v64 = 134349569;
            *(_QWORD *)&v64[4] = *(_QWORD *)&buf[16];
            *(_WORD *)&v64[12] = 2050;
            *(double *)&v64[14] = v36;
            *(_WORD *)&v64[22] = 2049;
            *(double *)&v64[24] = v38;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLVLF,pushLocation,LOC buffer reached its maximum size,machAbsTime,%{public}.3lf,sizeInSec,%{public}.3lf,sizeInMB,%{private}.3lf", v64, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(v64, 0x65CuLL);
            if (qword_1022A00C0 != -1)
              dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
            v53 = (double)(unint64_t)(*((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7)) * 0.000000953674316;
            v58 = 134349569;
            v59 = *(_QWORD *)&buf[16];
            v60 = 2050;
            v61 = v36;
            v62 = 2049;
            v63 = v53;
            v54 = (char *)_os_log_send_and_compose_impl(2, 0, v64, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,pushLocation,LOC buffer reached its maximum size,machAbsTime,%{public}.3lf,sizeInSec,%{public}.3lf,sizeInMB,%{private}.3lf", &v58, 32, v55, v56);
            sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v54);
            if (v54 != v64)
              free(v54);
          }
          sub_1010EE950((uint64_t)a1, 1.0);
          v35 = *((_QWORD *)a1 + 8);
        }
      }
      if (v35 >= *((_QWORD *)a1 + 9))
      {
        v39 = sub_1010FF2BC((uint64_t *)a1 + 7, (uint64_t)buf);
      }
      else
      {
        sub_1010FF1E4((uint64_t)(a1 + 56), (uint64_t)buf);
        v39 = v35 + 1792;
      }
      *((_QWORD *)a1 + 8) = v39;
      sub_1010EEA10((uint64_t)a1, (uint64_t)&v55);
      return;
    }
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v40 = qword_1022A00C8;
    if (!os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
LABEL_50:
      if (!sub_1001BFF7C(115, 0))
        return;
      bzero(v64, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v45 = *((_QWORD *)a1 + 8);
      if (*((_QWORD *)a1 + 7) == v45)
      {
        v51 = *((_QWORD *)a1 + 845);
        if (*((_QWORD *)a1 + 844) == v51)
        {
          v52 = 0xBFF0000000000000;
          goto LABEL_64;
        }
        v46 = (unint64_t *)(v51 - 2160);
      }
      else
      {
        v46 = (unint64_t *)(v45 - 1776);
      }
      v52 = *v46;
LABEL_64:
      v58 = 134349569;
      v59 = *(_QWORD *)&buf[16];
      v60 = 2050;
      v61 = *(double *)&v52;
      v62 = 1025;
      LODWORD(v63) = *(_DWORD *)buf;
      v21 = (char *)_os_log_send_and_compose_impl(2, 0, v64, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,pushLocation,Invalid measurement,machAbsTime,%{public}.3lf,prevMachAbsTime,%{public}.3lf,locationType,%{private}d", &v58, 28);
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v21);
LABEL_65:
      if (v21 != v64)
        free(v21);
      return;
    }
    v41 = *((_QWORD *)a1 + 8);
    if (*((_QWORD *)a1 + 7) == v41)
    {
      v43 = *((_QWORD *)a1 + 845);
      if (*((_QWORD *)a1 + 844) == v43)
      {
        v44 = 0xBFF0000000000000;
        goto LABEL_49;
      }
      v42 = (unint64_t *)(v43 - 2160);
    }
    else
    {
      v42 = (unint64_t *)(v41 - 1776);
    }
    v44 = *v42;
LABEL_49:
    *(_DWORD *)v64 = 134349569;
    *(_QWORD *)&v64[4] = *(_QWORD *)&buf[16];
    *(_WORD *)&v64[12] = 2050;
    *(_QWORD *)&v64[14] = v44;
    *(_WORD *)&v64[22] = 1025;
    *(_DWORD *)&v64[24] = *(_DWORD *)buf;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "CLVLF,pushLocation,Invalid measurement,machAbsTime,%{public}.3lf,prevMachAbsTime,%{public}.3lf,locationType,%{private}d", v64, 0x1Cu);
    goto LABEL_50;
  }
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
  v18 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
  {
    v19 = *(_QWORD *)(a3 + 32);
    *(_DWORD *)v64 = 134349056;
    *(_QWORD *)&v64[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLVLF,pushLocation,Unable to construct LocData,machAbsTime,%{public}.3lf", v64, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(v64, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v20 = *(_QWORD *)(a3 + 32);
    v58 = 134349056;
    v59 = v20;
    v21 = (char *)_os_log_send_and_compose_impl(2, 0, v64, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,pushLocation,Unable to construct LocData,machAbsTime,%{public}.3lf", &v58, 12);
    sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v21);
    goto LABEL_65;
  }
}

void sub_1010EE740(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_1010EE74C(_QWORD *a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  NSObject *v7;
  char *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (*(_DWORD *)a2 != 11 && *(_DWORD *)a2 != 1)
    return 0;
  v3 = *(double *)(a2 + 16);
  if (v3 <= 0.0)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v7 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLVLF,isValid,Invalid CL,maybe a simulated location", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v9[0] = 0;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,isValid,Invalid CL,maybe a simulated location", v9, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::isValid(const fusion::LocData &) const", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
      return 0;
    }
  }
  else
  {
    v4 = a1[8];
    if (a1[7] != v4 && *(double *)(v4 - 1776) >= v3)
      return 0;
    v5 = a1[845];
    if (a1[844] != v5 && *(double *)(v5 - 2160) >= v3)
      return 0;
    return *(double *)(a2 + 120) > 0.0 || *(double *)(a2 + 112) > 0.0;
  }
  return result;
}

void sub_1010EE944(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1010EE950(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;

  v4 = *(_QWORD *)(result + 56);
  v3 = *(_QWORD *)(result + 64);
  v2 = result + 56;
  if (v4 != v3)
  {
    v5 = result;
    v6 = *(double *)(v4 + 16) + a2;
    while (*(double *)(v4 + 16) >= v6)
    {
      v4 += 1792;
      if (v4 == v3)
      {
        v4 = *(_QWORD *)(result + 64);
        return sub_1010F7288(v2, v4, v3);
      }
    }
    if (v4 != v3)
    {
      v7 = v4 + 1792;
      if (v4 + 1792 != v3)
      {
        do
        {
          if (*(double *)(v7 + 16) >= v6)
          {
            sub_1010F6AAC(v4, v7);
            v4 += 1792;
          }
          v7 += 1792;
        }
        while (v7 != v3);
        v3 = *(_QWORD *)(v5 + 64);
      }
    }
    return sub_1010F7288(v2, v4, v3);
  }
  return result;
}

void sub_1010EEA10(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;

  v4 = (_BYTE *)(a1 + 6776);
  if (*(_BYTE *)(a1 + 6777))
  {
    if (!*(_BYTE *)(a1 + 6776))
      sub_1010EEB20(a1, a2);
  }
  else if (!*(_BYTE *)(a1 + 6776))
  {
    sub_1010EEAC8(a1, a2);
  }
  if (v4[1] || *v4)
  {
    if (*(_BYTE *)a1)
    {
      sub_1010EEE2C(a1, a2);
      sub_1010F0580(a1);
    }
    else if (*(double *)(a1 + 11552) > 0.0)
    {
      sub_1010F1708(a1);
    }
  }
}

void sub_1010EEAC8(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;

  v3 = (_BYTE *)(a1 + 6776);
  *(_WORD *)(a1 + 6776) = 0;
  sub_1010F72CC(a1, a2);
  if (!v3[1] && !*v3 && *(_QWORD *)(a1 + 13632) <= 1uLL)
    sub_1010F8BF4(a1);
}

void sub_1010EEB20(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  NSObject *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v2 = (_BYTE *)(a1 + 6776);
  if (*(_BYTE *)(a1 + 6777))
  {
    if (!*v2)
    {
      v5 = (unsigned __int8 *)(a1 + 1);
      sub_1010E8510((unsigned __int8 *)(a1 + 1));
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(_QWORD *)(a1 + 40);
      atomic_store(0, v5);
      if (v6 != v7)
      {
        sub_1010F72CC(a1, a2);
        if (*v2)
        {
          v2[1] = 0;
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
          v8 = qword_1022A00C8;
          if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLVLF,reinitWithFrames,filter re-initialized with frames", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00C0 != -1)
              dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
            v11[0] = 0;
            v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,reinitWithFrames,filter re-initialized with frames", v11, 2);
            sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::reinitWithFrames(const CLVisionTime &)", "%s\n", v9);
LABEL_22:
            if (v9 != (char *)buf)
              free(v9);
          }
        }
        else
        {
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
          v10 = qword_1022A00C8;
          if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLVLF,reinitWithFrames,filter still with points init", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00C0 != -1)
              dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
            v11[0] = 0;
            v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,reinitWithFrames,filter still with points init", v11, 2);
            sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::reinitWithFrames(const CLVisionTime &)", "%s\n", v9);
            goto LABEL_22;
          }
        }
      }
    }
  }
}

void sub_1010EEE20(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1010EEE2C(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  double v65;
  double v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t i;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  double v100;
  double v101;
  int8x16_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  NSObject *v138;
  uint64_t v139;
  int v140;
  unsigned __int8 *v141;
  NSObject *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  NSObject *v146;
  char *v147;
  NSObject *v148;
  NSObject *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  _OWORD *v156;
  _OWORD *v157;
  _OWORD *v158;
  _OWORD *v159;
  void *v160;
  _OWORD *v161;
  uint64_t v162;
  _OWORD *v163;
  uint64_t v164;
  void *v165;
  _OWORD *v166;
  uint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  _BYTE *v172;
  _OWORD *v173;
  uint64_t v174;
  _OWORD *v175;
  _OWORD *v176;
  _OWORD *v177;
  _OWORD *v178;
  void *v179;
  _OWORD *v180;
  uint64_t v181;
  _OWORD *v182;
  uint64_t v183;
  void *v184;
  _OWORD *v185;
  uint64_t v186;
  _OWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _OWORD *v191;
  _OWORD *v192;
  _OWORD *v193;
  uint64_t v194;
  _OWORD *v195;
  _OWORD *v196;
  _OWORD *v197;
  uint64_t v198;
  _OWORD *v199;
  _OWORD *v200;
  uint64_t v201;
  _OWORD *v202;
  _OWORD *v203;
  _OWORD *v204;
  __int128 *v205;
  __int128 *v206;
  _BYTE *v207;
  _BYTE *v208;
  uint64_t v209;
  unsigned __int8 *v211;
  int v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  char v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  char v235;
  __int128 v236;
  uint64_t v237;
  char v238;
  uint64_t (**v239)();
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  uint64_t (**v243)();
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  uint64_t (**v249)();
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  uint64_t (**v253)();
  __int128 v254;
  __int128 v255;
  uint64_t (**v256)();
  _BYTE v257[297];
  uint64_t (**v258)();
  __int128 v259;
  __int128 v260;
  uint64_t v261;
  uint64_t (**v262)();
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  uint64_t (**v268)();
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  uint64_t (**v272)();
  __int128 v273;
  __int128 v274;
  uint64_t (**v275)();
  _BYTE v276[296];
  uint64_t (**v277)();
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  char v281;
  uint64_t (**v282)();
  __int128 v283;
  __int128 v284;
  char v285;
  uint64_t (**v286)();
  __int128 v287;
  __int128 v288;
  uint64_t v289;
  uint64_t (**v290)();
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  uint64_t (**v296)();
  __int128 v297;
  __int128 v298;
  uint64_t v299;
  uint64_t (**v300)();
  __int128 v301;
  __int128 v302;
  uint64_t (**v303)();
  _BYTE v304[296];
  __int128 v305;
  __int128 v306;
  __int128 v307;
  uint64_t v308;
  char v309;
  uint64_t (**v310)();
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  uint64_t (**v314)();
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  uint64_t (**v320)();
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  uint64_t (**v324)();
  __int128 v325;
  __int128 v326;
  uint64_t (**v327)();
  _BYTE v328[297];
  uint64_t (**v329)();
  __int128 v330;
  __int128 v331;
  uint64_t v332;
  uint64_t (**v333)();
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  uint64_t (**v339)();
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  uint64_t (**v343)();
  __int128 v344;
  __int128 v345;
  uint64_t (**v346)();
  _BYTE v347[296];
  uint64_t (**v348)();
  __int128 v349;
  __int128 v350;
  uint64_t (**v351)();
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  char v357;
  uint64_t (**v358)();
  __int128 v359;
  __int128 v360;
  uint64_t (**v361)();
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  char v369;
  int v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  __int16 v374;
  uint64_t v375;
  __int16 v376;
  uint64_t v377;
  int v378;
  uint64_t v379;
  __int16 v380;
  uint64_t v381;
  __int16 v382;
  uint64_t v383;

  v172 = (_BYTE *)(a1 + 10704);
  v171 = (_BYTE *)(a1 + 10168);
  v208 = (_BYTE *)(a1 + 9272);
  v207 = (_BYTE *)(a1 + 8736);
  v3 = (_BYTE *)(a1 + 6776);
  v170 = a1 + 10112;
  v169 = a1 + 10184;
  v168 = (_OWORD *)(a1 + 10232);
  v167 = a1 + 10320;
  v166 = (_OWORD *)(a1 + 10368);
  v165 = (void *)(a1 + 10408);
  v164 = a1 + 10720;
  v163 = (_OWORD *)(a1 + 10768);
  v162 = a1 + 10856;
  v161 = (_OWORD *)(a1 + 10904);
  v160 = (void *)(a1 + 10944);
  v159 = (_OWORD *)(a1 + 11248);
  v158 = (_OWORD *)(a1 + 11288);
  v157 = (_OWORD *)(a1 + 11384);
  v156 = (_OWORD *)(a1 + 11424);
  v155 = a1 + 11504;
  v209 = a1 + 4496;
  v206 = (__int128 *)(a1 + 13400);
  v205 = (__int128 *)(a1 + 13416);
  v153 = (uint64_t *)(a1 + 6752);
  v204 = (_OWORD *)(a1 + 7936);
  v203 = (_OWORD *)(a1 + 7976);
  v202 = (_OWORD *)(a1 + 8016);
  v201 = a1 + 8048;
  v200 = (_OWORD *)(a1 + 8112);
  v199 = (_OWORD *)(a1 + 8152);
  v198 = a1 + 8272;
  v197 = (_OWORD *)(a1 + 8320);
  v196 = (_OWORD *)(a1 + 8360);
  v195 = (_OWORD *)(a1 + 8400);
  v194 = a1 + 8432;
  v193 = (_OWORD *)(a1 + 8496);
  v192 = (_OWORD *)(a1 + 8536);
  v191 = (_OWORD *)(a1 + 8576);
  v190 = a1 + 8656;
  v189 = a1 + 8680;
  v188 = a1 + 8752;
  v187 = (_OWORD *)(a1 + 8800);
  v186 = a1 + 8888;
  v185 = (_OWORD *)(a1 + 8936);
  v184 = (void *)(a1 + 8976);
  v183 = a1 + 9288;
  v182 = (_OWORD *)(a1 + 9336);
  v181 = a1 + 9424;
  v180 = (_OWORD *)(a1 + 9472);
  v179 = (void *)(a1 + 9512);
  v178 = (_OWORD *)(a1 + 9816);
  v177 = (_OWORD *)(a1 + 9856);
  v176 = (_OWORD *)(a1 + 9952);
  v175 = (_OWORD *)(a1 + 9992);
  v174 = a1 + 10072;
  v211 = (unsigned __int8 *)(a1 + 1);
  v154 = a1 + 3416;
  v173 = (_OWORD *)(a1 + 0x2000);
  v213 = a1 + 6776;
  v4 = (unsigned __int8 *)(a1 + 6776);
  while (1)
  {
    if (!v3[1] && !*v3)
      return;
    sub_1010E8510(v211);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    if (v5 == v6 || *(double *)(v5 + 8) > *(double *)(a2 + 8))
    {
      v141 = v211;
      goto LABEL_68;
    }
    v7 = *(_OWORD *)v5;
    v237 = *(_QWORD *)(v5 + 16);
    v236 = v7;
    v238 = *(_BYTE *)(v5 + 24);
    v8 = *(_OWORD *)(v5 + 40);
    v9 = *(_OWORD *)(v5 + 56);
    v242 = *(_QWORD *)(v5 + 72);
    v240 = v8;
    v241 = v9;
    v239 = off_1021A0EF0;
    v243 = off_1021A0F28;
    v244 = *(_OWORD *)(v5 + 88);
    v10 = *(_OWORD *)(v5 + 104);
    v11 = *(_OWORD *)(v5 + 120);
    v12 = *(_OWORD *)(v5 + 152);
    v247 = *(_OWORD *)(v5 + 136);
    v248 = v12;
    v245 = v10;
    v246 = v11;
    v13 = *(_OWORD *)(v5 + 176);
    v14 = *(_OWORD *)(v5 + 192);
    v252 = *(_QWORD *)(v5 + 208);
    v250 = v13;
    v251 = v14;
    v249 = off_1021A0D18;
    v253 = off_1021A1298;
    v15 = *(_OWORD *)(v5 + 240);
    v254 = *(_OWORD *)(v5 + 224);
    v255 = v15;
    v256 = off_1021A10E0;
    memcpy(v257, (const void *)(v5 + 264), sizeof(v257));
    v16 = *(_OWORD *)(v5 + 576);
    v17 = *(_OWORD *)(v5 + 592);
    v261 = *(_QWORD *)(v5 + 608);
    v259 = v16;
    v260 = v17;
    v258 = off_1021A0EF0;
    v262 = off_1021A0F28;
    v263 = *(_OWORD *)(v5 + 624);
    v18 = *(_OWORD *)(v5 + 640);
    v19 = *(_OWORD *)(v5 + 656);
    v20 = *(_OWORD *)(v5 + 688);
    v266 = *(_OWORD *)(v5 + 672);
    v267 = v20;
    v264 = v18;
    v265 = v19;
    v268 = off_1021A0D18;
    v21 = *(_OWORD *)(v5 + 712);
    v22 = *(_OWORD *)(v5 + 728);
    v271 = *(_QWORD *)(v5 + 744);
    v269 = v21;
    v270 = v22;
    v272 = off_1021A1298;
    v23 = *(_OWORD *)(v5 + 776);
    v273 = *(_OWORD *)(v5 + 760);
    v274 = v23;
    v275 = off_1021A10E0;
    memcpy(v276, (const void *)(v5 + 800), sizeof(v276));
    v277 = off_1021A1298;
    v24 = *(_OWORD *)(v5 + 1120);
    v278 = *(_OWORD *)(v5 + 1104);
    v279 = v24;
    v25 = *(_BYTE *)(v5 + 1144);
    v280 = *(_QWORD *)(v5 + 1136);
    v281 = v25;
    v282 = off_1021A1298;
    v26 = *(_OWORD *)(v5 + 1176);
    v283 = *(_OWORD *)(v5 + 1160);
    v284 = v26;
    v285 = *(_BYTE *)(v5 + 1192);
    v27 = *(_OWORD *)(v5 + 1208);
    v28 = *(_OWORD *)(v5 + 1224);
    v289 = *(_QWORD *)(v5 + 1240);
    v287 = v27;
    v288 = v28;
    v286 = off_1021A0EF0;
    v290 = off_1021A0F28;
    v291 = *(_OWORD *)(v5 + 1256);
    v29 = *(_OWORD *)(v5 + 1272);
    v30 = *(_OWORD *)(v5 + 1288);
    v31 = *(_OWORD *)(v5 + 1320);
    v294 = *(_OWORD *)(v5 + 1304);
    v295 = v31;
    v292 = v29;
    v293 = v30;
    v296 = off_1021A0D18;
    v32 = *(_OWORD *)(v5 + 1344);
    v33 = *(_OWORD *)(v5 + 1360);
    v299 = *(_QWORD *)(v5 + 1376);
    v297 = v32;
    v298 = v33;
    v300 = off_1021A1298;
    v34 = *(_OWORD *)(v5 + 1408);
    v301 = *(_OWORD *)(v5 + 1392);
    v302 = v34;
    v303 = off_1021A10E0;
    memcpy(v304, (const void *)(v5 + 1432), sizeof(v304));
    v35 = *(_OWORD *)(v5 + 1728);
    v36 = *(_OWORD *)(v5 + 1744);
    v37 = *(_OWORD *)(v5 + 1760);
    v308 = *(_QWORD *)(v5 + 1776);
    v306 = v36;
    v307 = v37;
    v305 = v35;
    v309 = *(_BYTE *)(v5 + 1784);
    v38 = *(_QWORD *)(v5 + 1832);
    v39 = *(_OWORD *)(v5 + 1816);
    v311 = *(_OWORD *)(v5 + 1800);
    v312 = v39;
    v313 = v38;
    v310 = off_1021A0EF0;
    v314 = off_1021A0F28;
    v315 = *(_OWORD *)(v5 + 1848);
    v40 = *(_OWORD *)(v5 + 1864);
    v41 = *(_OWORD *)(v5 + 1880);
    v42 = *(_OWORD *)(v5 + 1912);
    v318 = *(_OWORD *)(v5 + 1896);
    v319 = v42;
    v316 = v40;
    v317 = v41;
    v320 = off_1021A0D18;
    v43 = *(_OWORD *)(v5 + 1936);
    v44 = *(_OWORD *)(v5 + 1952);
    v323 = *(_QWORD *)(v5 + 1968);
    v321 = v43;
    v322 = v44;
    v324 = off_1021A1298;
    v45 = *(_OWORD *)(v5 + 2000);
    v325 = *(_OWORD *)(v5 + 1984);
    v326 = v45;
    v327 = off_1021A10E0;
    memcpy(v328, (const void *)(v5 + 2024), sizeof(v328));
    v46 = *(_OWORD *)(v5 + 2336);
    v47 = *(_OWORD *)(v5 + 2352);
    v332 = *(_QWORD *)(v5 + 2368);
    v330 = v46;
    v331 = v47;
    v329 = off_1021A0EF0;
    v333 = off_1021A0F28;
    v334 = *(_OWORD *)(v5 + 2384);
    v48 = *(_OWORD *)(v5 + 2400);
    v49 = *(_OWORD *)(v5 + 2416);
    v50 = *(_OWORD *)(v5 + 2448);
    v337 = *(_OWORD *)(v5 + 2432);
    v338 = v50;
    v335 = v48;
    v336 = v49;
    v339 = off_1021A0D18;
    v51 = *(_OWORD *)(v5 + 2472);
    v52 = *(_OWORD *)(v5 + 2488);
    v342 = *(_QWORD *)(v5 + 2504);
    v340 = v51;
    v341 = v52;
    v343 = off_1021A1298;
    v53 = *(_OWORD *)(v5 + 2536);
    v344 = *(_OWORD *)(v5 + 2520);
    v345 = v53;
    v346 = off_1021A10E0;
    memcpy(v347, (const void *)(v5 + 2560), sizeof(v347));
    v348 = off_1021A1298;
    v54 = *(_OWORD *)(v5 + 2880);
    v349 = *(_OWORD *)(v5 + 2864);
    v350 = v54;
    v351 = off_1021A0F28;
    v55 = *(_OWORD *)(v5 + 2968);
    v56 = *(_OWORD *)(v5 + 2952);
    v57 = *(_OWORD *)(v5 + 2936);
    v353 = *(_OWORD *)(v5 + 2920);
    v354 = v57;
    v355 = v56;
    v356 = v55;
    v352 = *(_OWORD *)(v5 + 2904);
    v357 = *(_BYTE *)(v5 + 2984);
    v358 = off_1021A1298;
    v58 = *(_OWORD *)(v5 + 3016);
    v359 = *(_OWORD *)(v5 + 3000);
    v360 = v58;
    v361 = off_1021A0F28;
    v362 = *(_OWORD *)(v5 + 3040);
    v59 = *(_OWORD *)(v5 + 3056);
    v60 = *(_OWORD *)(v5 + 3072);
    v61 = *(_OWORD *)(v5 + 3104);
    v365 = *(_OWORD *)(v5 + 3088);
    v366 = v61;
    v363 = v59;
    v364 = v60;
    v62 = *(_OWORD *)(v5 + 3120);
    v63 = *(_OWORD *)(v5 + 3136);
    v369 = *(_BYTE *)(v5 + 3152);
    v367 = v62;
    v368 = v63;
    sub_1010FF4F8(v5 + 3160, v6, v5);
    *(_QWORD *)(a1 + 40) = v64;
    atomic_store(0, (unsigned __int8 *)(a1 + 1));
    v65 = *(double *)(a1 + 2000);
    if (v65 > 0.0 && v369 && *(double *)&v306 != v65)
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v142 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        v143 = *(_QWORD *)(a1 + 2000);
        v378 = 134349568;
        v379 = *((_QWORD *)&v307 + 1);
        v380 = 2050;
        v381 = v143;
        v382 = 2050;
        v383 = v306;
        _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithFrames,Filter reset,VIO session is re-initialized,machAbsTime,%{public}.3lf,prevOriginTimestamp,%{public}.3lf,currOriginTimestamp,%{public}.3lf", (uint8_t *)&v378, 0x20u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_66;
      bzero(&v378, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v144 = *(_QWORD *)(a1 + 2000);
      v372 = 134349568;
      v373 = *((_QWORD *)&v307 + 1);
      v374 = 2050;
      v375 = v144;
      v376 = 2050;
      v377 = v306;
      v145 = (char *)_os_log_send_and_compose_impl(2, 0, &v378, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,fuseWithFrames,Filter reset,VIO session is re-initialized,machAbsTime,%{public}.3lf,prevOriginTimestamp,%{public}.3lf,currOriginTimestamp,%{public}.3lf", &v372, 32);
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithFrames(const CLVisionTime &)", "%s\n", v145);
      goto LABEL_77;
    }
    v66 = *(double *)(a1 + 10152);
    if (v66 > 0.0 && *((double *)&v307 + 1) >= v66 && *((double *)&v307 + 1) > v66 + 8.0)
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v149 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        v150 = *(_QWORD *)(a1 + 10152);
        v378 = 134349568;
        v379 = 0x4020000000000000;
        v380 = 2050;
        v381 = *((_QWORD *)&v307 + 1);
        v382 = 2050;
        v383 = v150;
        _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithFrames,Filter reset,VIO measurements were unacceptable for %{public}.3lf sec,machAbsTime,%{public}.3lf,lastNominalVioMachAbsTime,%{public}.3lf", (uint8_t *)&v378, 0x20u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_66;
      bzero(&v378, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v152 = *(_QWORD *)(a1 + 10152);
      v372 = 134349568;
      v373 = 0x4020000000000000;
      v374 = 2050;
      v375 = *((_QWORD *)&v307 + 1);
      v376 = 2050;
      v377 = v152;
      v145 = (char *)_os_log_send_and_compose_impl(2, 0, &v378, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,fuseWithFrames,Filter reset,VIO measurements were unacceptable for %{public}.3lf sec,machAbsTime,%{public}.3lf,lastNominalVioMachAbsTime,%{public}.3lf", &v372, 32);
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithFrames(const CLVisionTime &)", "%s\n", v145);
LABEL_77:
      if (v145 != (char *)&v378)
        free(v145);
LABEL_66:
      sub_1010E8510(v211);
      v139 = a1;
      v140 = 1;
      goto LABEL_67;
    }
    if (*((double *)&v307 + 1) >= v66 && v369 && !(_DWORD)v305)
    {
      v67 = v306;
      *(_OWORD *)v170 = v305;
      *(_OWORD *)(v170 + 16) = v67;
      *(_OWORD *)(v170 + 32) = v307;
      *(_QWORD *)(v170 + 48) = v308;
      *v171 = v309;
      v68 = v312;
      *(_OWORD *)v169 = v311;
      *(_OWORD *)(v169 + 16) = v68;
      *(_QWORD *)(v169 + 32) = v313;
      v69 = v315;
      v70 = v316;
      v71 = v319;
      v168[3] = v318;
      v168[4] = v71;
      v72 = v317;
      v168[1] = v70;
      v168[2] = v72;
      *v168 = v69;
      v73 = v321;
      v74 = v322;
      *(_QWORD *)(v167 + 32) = v323;
      *(_OWORD *)v167 = v73;
      *(_OWORD *)(v167 + 16) = v74;
      v75 = v326;
      *v166 = v325;
      v166[1] = v75;
      memcpy(v165, v328, 0x128uLL);
      *v172 = v328[296];
      v76 = v331;
      *(_OWORD *)v164 = v330;
      *(_OWORD *)(v164 + 16) = v76;
      *(_QWORD *)(v164 + 32) = v332;
      v77 = v337;
      v163[2] = v336;
      v163[3] = v77;
      v163[4] = v338;
      v78 = v335;
      *v163 = v334;
      v163[1] = v78;
      v79 = v341;
      *(_OWORD *)v162 = v340;
      *(_OWORD *)(v162 + 16) = v79;
      *(_QWORD *)(v162 + 32) = v342;
      v80 = v345;
      *v161 = v344;
      v161[1] = v80;
      memcpy(v160, v347, 0x128uLL);
      v81 = v350;
      *v159 = v349;
      v159[1] = v81;
      v82 = v355;
      v158[2] = v354;
      v158[3] = v82;
      v158[4] = v356;
      v83 = v353;
      *v158 = v352;
      v158[1] = v83;
      v172[664] = v357;
      v84 = v360;
      *v157 = v359;
      v157[1] = v84;
      v85 = v365;
      v156[2] = v364;
      v156[3] = v85;
      v156[4] = v366;
      v86 = v363;
      *v156 = v362;
      v156[1] = v86;
      v87 = v368;
      *(_OWORD *)v155 = v367;
      *(_OWORD *)(v155 + 16) = v87;
      *(_BYTE *)(v155 + 32) = v369;
    }
    if (!sub_10149F2B4((uint64_t)&v236, v209))
      break;
    v235 = 1;
    sub_1014A02EC((uint64_t)&v236, &v235, (uint64_t)&v214);
    if (v235)
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v148 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        v378 = 134349056;
        v379 = *((_QWORD *)&v236 + 1);
        _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithFrames,Unable to convert VLF to LOC,machAbsTime,%{public}.3lf", (uint8_t *)&v378, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&v378, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v372 = 134349056;
        v373 = *((_QWORD *)&v236 + 1);
        v147 = (char *)_os_log_send_and_compose_impl(2, 0, &v378, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,fuseWithFrames,Unable to convert VLF to LOC,machAbsTime,%{public}.3lf", &v372, 12);
        sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithFrames(const CLVisionTime &)", "%s\n", v147);
        goto LABEL_59;
      }
      return;
    }
    LODWORD(v214) = *(_DWORD *)(a1 + 13272);
    v88 = *v205;
    v221 = *v206;
    v222 = v88;
    v89 = *(_QWORD *)(a1 + 6752);
    sub_1010F25F8(v89 + 1544, (uint64_t)&v214, (uint64_t)&v214);
    for (i = 0; i != 24; i += 8)
      *(double *)((char *)&v325 + i) = *(double *)((char *)&v325 + i) - *(double *)(a1 + i + 4544);
    sub_1010F2880(*(_QWORD *)(a1 + 6760) - 1432, (uint64_t)&v305, (uint64_t)&v305);
    sub_1010F29D4(v89 + 1904, (uint64_t)&v305, (uint64_t)&v305);
    sub_1010FD690((uint64_t)&v378);
    sub_1010F2C5C(a1, (uint64_t)&v214, (uint64_t)&v305, (uint64_t)&v378);
    v212 = sub_1010F2F84(a1, (uint64_t)&v236, (uint64_t)&v378);
    v91 = v215;
    *v204 = v214;
    v204[1] = v91;
    v92 = v217;
    *v203 = v216;
    v203[1] = v92;
    v93 = v219;
    *v202 = v218;
    v202[1] = v93;
    *(_BYTE *)(v201 + 48) = v223;
    v94 = v222;
    v95 = v220;
    *(_OWORD *)(v201 + 16) = v221;
    *(_OWORD *)(v201 + 32) = v94;
    *(_OWORD *)v201 = v95;
    v96 = v225;
    *v200 = v224;
    v200[1] = v96;
    v97 = v227;
    *v199 = v226;
    v199[1] = v97;
    v98 = v231;
    v173[2] = v230;
    v173[3] = v98;
    v173[4] = v232;
    v99 = v229;
    *v173 = v228;
    v173[1] = v99;
    *(_QWORD *)(v198 + 16) = v234;
    *(_OWORD *)v198 = v233;
    *(_DWORD *)(a1 + 8296) = 0;
    sub_1010F3B10((uint64_t)&v305, v4);
    sub_1010F3D5C((uint64_t)&v305, v4);
    sub_1010F3F7C((uint64_t)v4, v100, v101, v102);
    sub_1010F424C(a1, (uint64_t)&v214);
    sub_1010F4DDC(a1, (uint64_t)&v305);
    v103 = v215;
    *v197 = v214;
    v197[1] = v103;
    v104 = v217;
    *v196 = v216;
    v196[1] = v104;
    v105 = v219;
    *v195 = v218;
    v195[1] = v105;
    *(_BYTE *)(v194 + 48) = v223;
    v106 = v222;
    v107 = v220;
    *(_OWORD *)(v194 + 16) = v221;
    *(_OWORD *)(v194 + 32) = v106;
    *(_OWORD *)v194 = v107;
    v108 = v225;
    *v193 = v224;
    v193[1] = v108;
    v109 = v227;
    *v192 = v226;
    v192[1] = v109;
    v110 = v231;
    v191[2] = v230;
    v191[3] = v110;
    v191[4] = v232;
    v111 = v229;
    *v191 = v228;
    v191[1] = v111;
    *(_QWORD *)(v190 + 16) = v234;
    *(_OWORD *)v190 = v233;
    *(_QWORD *)(v189 + 48) = v308;
    v112 = v307;
    v113 = v305;
    *(_OWORD *)(v189 + 16) = v306;
    *(_OWORD *)(v189 + 32) = v112;
    *(_OWORD *)v189 = v113;
    *v207 = v309;
    v114 = v312;
    *(_OWORD *)v188 = v311;
    *(_OWORD *)(v188 + 16) = v114;
    *(_QWORD *)(v188 + 32) = v313;
    v115 = v315;
    v116 = v316;
    v117 = v319;
    v187[3] = v318;
    v187[4] = v117;
    v118 = v317;
    v187[1] = v116;
    v187[2] = v118;
    *v187 = v115;
    v119 = v321;
    v120 = v322;
    *(_QWORD *)(v186 + 32) = v323;
    *(_OWORD *)v186 = v119;
    *(_OWORD *)(v186 + 16) = v120;
    v121 = v326;
    *v185 = v325;
    v185[1] = v121;
    memcpy(v184, v328, 0x128uLL);
    *v208 = v328[296];
    v122 = v331;
    *(_OWORD *)v183 = v330;
    *(_OWORD *)(v183 + 16) = v122;
    *(_QWORD *)(v183 + 32) = v332;
    v123 = v337;
    v182[2] = v336;
    v182[3] = v123;
    v182[4] = v338;
    v124 = v335;
    *v182 = v334;
    v182[1] = v124;
    v125 = v341;
    *(_OWORD *)v181 = v340;
    *(_OWORD *)(v181 + 16) = v125;
    *(_QWORD *)(v181 + 32) = v342;
    v126 = v345;
    *v180 = v344;
    v180[1] = v126;
    memcpy(v179, v347, 0x128uLL);
    v127 = v350;
    *v178 = v349;
    v178[1] = v127;
    v128 = v355;
    v177[2] = v354;
    v177[3] = v128;
    v177[4] = v356;
    v129 = v353;
    *v177 = v352;
    v177[1] = v129;
    v208[664] = v357;
    v3 = (_BYTE *)v213;
    v130 = v360;
    *v176 = v359;
    v176[1] = v130;
    v131 = v365;
    v175[2] = v364;
    v175[3] = v131;
    v175[4] = v366;
    v132 = v363;
    *v175 = v362;
    v175[1] = v132;
    v133 = v368;
    *(_OWORD *)v174 = v367;
    *(_OWORD *)(v174 + 16) = v133;
    *(_BYTE *)(v174 + 32) = v369;
    if (v212)
      sub_1010F5314(v154, v213);
    v134 = *(_QWORD *)(a1 + 6760);
    v135 = *(_QWORD *)(a1 + 6752);
    if ((unint64_t)(0x13A524387AC82261 * ((uint64_t)(v134 - v135) >> 3)) >= 4)
    {
      sub_1010FF74C(v135 + 3336, *(_QWORD *)(a1 + 6760), v135);
      v134 = v136;
      *(_QWORD *)(a1 + 6760) = v136;
    }
    if (v134 >= *(_QWORD *)(a1 + 6768))
    {
      v137 = sub_1010FF7A8(v153, v213);
    }
    else
    {
      sub_1010FEA38(v134, v213);
      v137 = v134 + 3336;
    }
    *(_QWORD *)(a1 + 6760) = v137;
    if (!sub_1010F54E4((_QWORD *)a1))
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v138 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        v372 = 134349056;
        v373 = *((_QWORD *)&v236 + 1);
        _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithFrames,Filter reset,unhealthy state,machAbsTime,%{public}.3lf", (uint8_t *)&v372, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&v372, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v370 = 134349056;
        v371 = *((_QWORD *)&v236 + 1);
        v151 = (char *)_os_log_send_and_compose_impl(2, 0, &v372, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,fuseWithFrames,Filter reset,unhealthy state,machAbsTime,%{public}.3lf", &v370, 12);
        sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithFrames(const CLVisionTime &)", "%s\n", v151);
        if (v151 != (char *)&v372)
          free(v151);
      }
      sub_1010E8510(v211);
      v139 = a1;
      v140 = 0;
LABEL_67:
      sub_1010E854C(v139, v140);
      v141 = (unsigned __int8 *)(a1 + 1);
LABEL_68:
      atomic_store(0, v141);
      return;
    }
  }
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
  v146 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
  {
    v378 = 134349056;
    v379 = *((_QWORD *)&v236 + 1);
    _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithFrames,Unable to compute VLF for ENU,machAbsTime,%{public}.3lf", (uint8_t *)&v378, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&v378, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v372 = 134349056;
    v373 = *((_QWORD *)&v236 + 1);
    v147 = (char *)_os_log_send_and_compose_impl(2, 0, &v378, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,fuseWithFrames,Unable to compute VLF for ENU,machAbsTime,%{public}.3lf", &v372, 12);
    sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithFrames(const CLVisionTime &)", "%s\n", v147);
LABEL_59:
    if (v147 != (char *)&v378)
      free(v147);
  }
}

void sub_1010F0570(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010F0580(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t i;
  double v72;
  _BOOL4 v73;
  _BOOL4 v74;
  _BOOL4 v75;
  _BOOL4 v76;
  _BOOL4 v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  double v103;
  double v104;
  int8x16_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  NSObject *v128;
  uint64_t v129;
  unsigned __int8 *v130;
  uint64_t v131;
  int v132;
  NSObject *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  char *v141;
  _OWORD *v142;
  _OWORD *v143;
  _OWORD *v144;
  _OWORD *v145;
  void *v146;
  _OWORD *v147;
  char *v148;
  _OWORD *v149;
  char *v150;
  void *v151;
  _OWORD *v152;
  char *v153;
  _OWORD *v154;
  char *v155;
  char *v156;
  _BYTE *v157;
  _BYTE *v158;
  _OWORD *v159;
  uint64_t v160;
  char *v161;
  _OWORD *v162;
  _OWORD *v163;
  char *v164;
  _OWORD *v165;
  _OWORD *v166;
  _OWORD *v167;
  uint64_t v168;
  unsigned __int8 *v169;
  __int128 v170;
  __int128 v171;
  uint64_t (**v172)();
  __int128 v173;
  __int128 v174;
  uint64_t (**v175)();
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  char v181;
  uint64_t (**v182)();
  __int128 v183;
  __int128 v184;
  uint64_t (**v185)();
  __int128 v186;
  __int128 v187;
  uint64_t (**v188)();
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  char v200;
  uint64_t (**v201)();
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t (**v205)();
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t (**v211)();
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  uint64_t (**v215)();
  __int128 v216;
  __int128 v217;
  uint64_t (**v218)();
  _BYTE v219[297];
  uint64_t (**v220)();
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  uint64_t (**v224)();
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t (**v230)();
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  uint64_t (**v234)();
  __int128 v235;
  __int128 v236;
  uint64_t (**v237)();
  _BYTE v238[296];
  uint64_t (**v239)();
  __int128 v240;
  __int128 v241;
  uint64_t (**v242)();
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  char v248;
  uint64_t (**v249)();
  __int128 v250;
  __int128 v251;
  uint64_t (**v252)();
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  char v260;
  int v261;
  uint64_t v262;
  __int16 v263;
  _BOOL4 v264;
  __int16 v265;
  _BOOL4 v266;
  __int16 v267;
  _BOOL4 v268;
  __int16 v269;
  uint64_t v270;
  __int16 v271;
  uint64_t v272;
  __int16 v273;
  uint64_t v274;
  __int16 v275;
  double v276;
  __int16 v277;
  uint64_t v278;
  __int16 v279;
  uint64_t v280;
  __int16 v281;
  uint64_t v282;
  __int16 v283;
  uint64_t v284;
  __int16 v285;
  uint64_t v286;
  __int16 v287;
  uint64_t v288;
  __int16 v289;
  uint64_t v290;
  __int16 v291;
  uint64_t v292;
  __int16 v293;
  uint64_t v294;
  uint8_t buf[4];
  uint64_t v296;
  __int16 v297;
  _BYTE v298[10];
  uint64_t v299;
  uint64_t v300;
  __int16 v301;
  uint64_t v302;
  __int16 v303;
  uint64_t v304;
  __int16 v305;
  double v306;
  __int16 v307;
  uint64_t v308;
  __int16 v309;
  uint64_t v310;
  __int16 v311;
  uint64_t v312;
  __int16 v313;
  uint64_t v314;
  __int16 v315;
  uint64_t v316;
  __int16 v317;
  uint64_t v318;
  __int16 v319;
  uint64_t v320;
  __int16 v321;
  uint64_t v322;
  __int16 v323;
  uint64_t v324;
  uint8_t v325[4];
  uint64_t v326;
  __int16 v327;
  uint64_t v328;
  __int16 v329;
  uint64_t v330;

  v1 = result;
  v158 = (_BYTE *)(result + 10704);
  v157 = (_BYTE *)(result + 10168);
  v169 = (unsigned __int8 *)(result + 6776);
  v156 = (char *)(result + 10112);
  v155 = (char *)(result + 10184);
  v154 = (_OWORD *)(result + 10232);
  v153 = (char *)(result + 10320);
  v152 = (_OWORD *)(result + 10368);
  v151 = (void *)(result + 10408);
  v150 = (char *)(result + 10720);
  v149 = (_OWORD *)(result + 10768);
  v148 = (char *)(result + 10856);
  v147 = (_OWORD *)(result + 10904);
  v146 = (void *)(result + 10944);
  v145 = (_OWORD *)(result + 11248);
  v144 = (_OWORD *)(result + 11288);
  v143 = (_OWORD *)(result + 11384);
  v142 = (_OWORD *)(result + 11424);
  v141 = (char *)(result + 11504);
  v139 = (uint64_t *)(result + 6752);
  v167 = (_OWORD *)(result + 7936);
  v166 = (_OWORD *)(result + 7976);
  v165 = (_OWORD *)(result + 8016);
  v164 = (char *)(result + 8048);
  v163 = (_OWORD *)(result + 8112);
  v162 = (_OWORD *)(result + 8152);
  v161 = (char *)(result + 8272);
  v160 = result + 8320;
  v140 = result + 3416;
  v159 = (_OWORD *)(result + 0x2000);
  while (v169[1] || *v169)
  {
    v3 = *(_QWORD *)(v1 + 56);
    v2 = *(_QWORD *)(v1 + 64);
    if (v3 == v2)
      break;
    v4 = *(_OWORD *)(v3 + 16);
    v170 = *(_OWORD *)v3;
    v171 = v4;
    v5 = *(_OWORD *)(v3 + 56);
    v173 = *(_OWORD *)(v3 + 40);
    v174 = v5;
    v172 = off_1021A1298;
    v175 = off_1021A1298;
    v6 = *(_OWORD *)(v3 + 96);
    v176 = *(_OWORD *)(v3 + 80);
    v177 = v6;
    v7 = *(_OWORD *)(v3 + 112);
    v8 = *(_OWORD *)(v3 + 128);
    v9 = *(_OWORD *)(v3 + 144);
    v181 = *(_BYTE *)(v3 + 160);
    v179 = v8;
    v180 = v9;
    v178 = v7;
    v10 = *(_OWORD *)(v3 + 192);
    v183 = *(_OWORD *)(v3 + 176);
    v184 = v10;
    v182 = off_1021A1298;
    v185 = off_1021A1298;
    v11 = *(_OWORD *)(v3 + 232);
    v186 = *(_OWORD *)(v3 + 216);
    v187 = v11;
    v188 = off_1021A0F28;
    v189 = *(_OWORD *)(v3 + 256);
    v12 = *(_OWORD *)(v3 + 272);
    v13 = *(_OWORD *)(v3 + 288);
    v14 = *(_OWORD *)(v3 + 320);
    v192 = *(_OWORD *)(v3 + 304);
    v193 = v14;
    v190 = v12;
    v191 = v13;
    v15 = *(_OWORD *)(v3 + 336);
    v195 = *(_QWORD *)(v3 + 352);
    v194 = v15;
    v16 = *(_OWORD *)(v3 + 360);
    v17 = *(_OWORD *)(v3 + 376);
    v18 = *(_OWORD *)(v3 + 392);
    v199 = *(_QWORD *)(v3 + 408);
    v197 = v17;
    v198 = v18;
    v196 = v16;
    v200 = *(_BYTE *)(v3 + 416);
    v19 = *(_OWORD *)(v3 + 432);
    v20 = *(_OWORD *)(v3 + 448);
    v204 = *(_QWORD *)(v3 + 464);
    v202 = v19;
    v203 = v20;
    v201 = off_1021A0EF0;
    v205 = off_1021A0F28;
    v206 = *(_OWORD *)(v3 + 480);
    v21 = *(_OWORD *)(v3 + 496);
    v22 = *(_OWORD *)(v3 + 512);
    v23 = *(_OWORD *)(v3 + 544);
    v209 = *(_OWORD *)(v3 + 528);
    v210 = v23;
    v207 = v21;
    v208 = v22;
    v211 = off_1021A0D18;
    v24 = *(_OWORD *)(v3 + 568);
    v25 = *(_OWORD *)(v3 + 584);
    v214 = *(_QWORD *)(v3 + 600);
    v212 = v24;
    v213 = v25;
    v215 = off_1021A1298;
    v26 = *(_OWORD *)(v3 + 632);
    v216 = *(_OWORD *)(v3 + 616);
    v217 = v26;
    v168 = v2;
    v218 = off_1021A10E0;
    memcpy(v219, (const void *)(v3 + 656), sizeof(v219));
    v27 = *(_OWORD *)(v3 + 968);
    v28 = *(_OWORD *)(v3 + 984);
    v223 = *(_QWORD *)(v3 + 1000);
    v221 = v27;
    v222 = v28;
    v220 = off_1021A0EF0;
    v224 = off_1021A0F28;
    v225 = *(_OWORD *)(v3 + 1016);
    v29 = *(_OWORD *)(v3 + 1032);
    v30 = *(_OWORD *)(v3 + 1048);
    v31 = *(_OWORD *)(v3 + 1080);
    v228 = *(_OWORD *)(v3 + 1064);
    v229 = v31;
    v226 = v29;
    v227 = v30;
    v230 = off_1021A0D18;
    v32 = *(_OWORD *)(v3 + 1104);
    v33 = *(_OWORD *)(v3 + 1120);
    v233 = *(_QWORD *)(v3 + 1136);
    v231 = v32;
    v232 = v33;
    v234 = off_1021A1298;
    v34 = *(_OWORD *)(v3 + 1168);
    v235 = *(_OWORD *)(v3 + 1152);
    v236 = v34;
    v237 = off_1021A10E0;
    memcpy(v238, (const void *)(v3 + 1192), sizeof(v238));
    v239 = off_1021A1298;
    v35 = *(_OWORD *)(v3 + 1512);
    v240 = *(_OWORD *)(v3 + 1496);
    v241 = v35;
    v242 = off_1021A0F28;
    v36 = *(_OWORD *)(v3 + 1600);
    v37 = *(_OWORD *)(v3 + 1584);
    v38 = *(_OWORD *)(v3 + 1568);
    v244 = *(_OWORD *)(v3 + 1552);
    v245 = v38;
    v246 = v37;
    v247 = v36;
    v243 = *(_OWORD *)(v3 + 1536);
    v248 = *(_BYTE *)(v3 + 1616);
    v249 = off_1021A1298;
    v39 = *(_OWORD *)(v3 + 1648);
    v250 = *(_OWORD *)(v3 + 1632);
    v251 = v39;
    v252 = off_1021A0F28;
    v253 = *(_OWORD *)(v3 + 1672);
    v40 = *(_OWORD *)(v3 + 1688);
    v41 = *(_OWORD *)(v3 + 1704);
    v42 = *(_OWORD *)(v3 + 1736);
    v256 = *(_OWORD *)(v3 + 1720);
    v257 = v42;
    v254 = v40;
    v255 = v41;
    v43 = *(_OWORD *)(v3 + 1752);
    v44 = *(_OWORD *)(v3 + 1768);
    v260 = *(_BYTE *)(v3 + 1784);
    v258 = v43;
    v259 = v44;
    sub_1010FF940(v3 + 1792, v168, v3);
    *(_QWORD *)(v1 + 64) = v45;
    v46 = *(double *)(v1 + 2000);
    if (v46 > 0.0 && v260 && *(double *)&v197 != v46)
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v124 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        v125 = *(_QWORD *)(v1 + 2000);
        *(_DWORD *)v325 = 134349568;
        v326 = *((_QWORD *)&v198 + 1);
        v327 = 2050;
        v328 = v125;
        v329 = 2050;
        v330 = v197;
        _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithPoints,Filter reset,VIO session is re-initialized,machAbsTime,%{public}.3lf,prevOriginTimestamp,%{public}.3lf,currOriginTimestamp,%{public}.3lf", v325, 0x20u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(v325, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v126 = *(_QWORD *)(v1 + 2000);
        *(_DWORD *)buf = 134349568;
        v296 = *((_QWORD *)&v198 + 1);
        v297 = 2050;
        *(_QWORD *)v298 = v126;
        *(_WORD *)&v298[8] = 2050;
        v299 = v197;
        LODWORD(v138) = 32;
        v127 = (char *)_os_log_send_and_compose_impl(2, 0, v325, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,fuseWithPoints,Filter reset,VIO session is re-initialized,machAbsTime,%{public}.3lf,prevOriginTimestamp,%{public}.3lf,currOriginTimestamp,%{public}.3lf", buf, v138);
        sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithPoints()", "%s\n", v127);
LABEL_75:
        if (v127 != (char *)v325)
          free(v127);
      }
LABEL_65:
      v130 = (unsigned __int8 *)(v1 + 1);
      sub_1010E8510((unsigned __int8 *)(v1 + 1));
      v131 = v1;
      v132 = 1;
LABEL_66:
      result = (uint64_t)sub_1010E854C(v131, v132);
      atomic_store(0, v130);
      return result;
    }
    v47 = *(double *)(v1 + 10152);
    if (v47 > 0.0 && *((double *)&v198 + 1) >= v47 && *((double *)&v198 + 1) > v47 + 8.0)
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v133 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        v134 = *(_QWORD *)(v1 + 10152);
        *(_DWORD *)v325 = 134349568;
        v326 = 0x4020000000000000;
        v327 = 2050;
        v328 = *((_QWORD *)&v198 + 1);
        v329 = 2050;
        v330 = v134;
        _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithPoints,Filter reset,VIO measurements were unacceptable for %{public}.3lf sec,machAbsTime,%{public}.3lf,lastNominalVioMachAbsTime,%{public}.3lf", v325, 0x20u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(v325, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v137 = *(_QWORD *)(v1 + 10152);
        *(_DWORD *)buf = 134349568;
        v296 = 0x4020000000000000;
        v297 = 2050;
        *(_QWORD *)v298 = *((_QWORD *)&v198 + 1);
        *(_WORD *)&v298[8] = 2050;
        v299 = v137;
        LODWORD(v138) = 32;
        v127 = (char *)_os_log_send_and_compose_impl(2, 0, v325, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,fuseWithPoints,Filter reset,VIO measurements were unacceptable for %{public}.3lf sec,machAbsTime,%{public}.3lf,lastNominalVioMachAbsTime,%{public}.3lf", buf, v138);
        sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithPoints()", "%s\n", v127);
        goto LABEL_75;
      }
      goto LABEL_65;
    }
    if (*((double *)&v198 + 1) >= v47 && v260 && !(_DWORD)v196)
    {
      v48 = v197;
      *(_OWORD *)v156 = v196;
      *((_OWORD *)v156 + 1) = v48;
      *((_OWORD *)v156 + 2) = v198;
      *((_QWORD *)v156 + 6) = v199;
      *v157 = v200;
      v49 = v203;
      *(_OWORD *)v155 = v202;
      *((_OWORD *)v155 + 1) = v49;
      *((_QWORD *)v155 + 4) = v204;
      v50 = v206;
      v51 = v207;
      v52 = v210;
      v154[3] = v209;
      v154[4] = v52;
      v53 = v208;
      v154[1] = v51;
      v154[2] = v53;
      *v154 = v50;
      v54 = v212;
      v55 = v213;
      *((_QWORD *)v153 + 4) = v214;
      *(_OWORD *)v153 = v54;
      *((_OWORD *)v153 + 1) = v55;
      v56 = v217;
      *v152 = v216;
      v152[1] = v56;
      memcpy(v151, v219, 0x128uLL);
      *v158 = v219[296];
      v57 = v222;
      *(_OWORD *)v150 = v221;
      *((_OWORD *)v150 + 1) = v57;
      *((_QWORD *)v150 + 4) = v223;
      v58 = v228;
      v149[2] = v227;
      v149[3] = v58;
      v149[4] = v229;
      v59 = v226;
      *v149 = v225;
      v149[1] = v59;
      v60 = v232;
      *(_OWORD *)v148 = v231;
      *((_OWORD *)v148 + 1) = v60;
      *((_QWORD *)v148 + 4) = v233;
      v61 = v236;
      *v147 = v235;
      v147[1] = v61;
      memcpy(v146, v238, 0x128uLL);
      v62 = v241;
      *v145 = v240;
      v145[1] = v62;
      v63 = v246;
      v144[2] = v245;
      v144[3] = v63;
      v144[4] = v247;
      v64 = v244;
      *v144 = v243;
      v144[1] = v64;
      v158[664] = v248;
      v65 = v251;
      *v143 = v250;
      v143[1] = v65;
      v66 = v256;
      v142[2] = v255;
      v142[3] = v66;
      v142[4] = v257;
      v67 = v254;
      *v142 = v253;
      v142[1] = v67;
      v68 = v259;
      *(_OWORD *)v141 = v258;
      *((_OWORD *)v141 + 1) = v68;
      v141[32] = v260;
    }
    v69 = *(_QWORD *)(v1 + 6752);
    v70 = *(_QWORD *)(v1 + 6760);
    sub_1010F598C((uint64_t)&v175, v70 - 1624, (uint64_t)&v170);
    sub_1010F25F8(v69 + 1544, (uint64_t)&v170, (uint64_t)&v170);
    for (i = 0; i != 24; i += 8)
      *(double *)((char *)&v216 + i) = *(double *)((char *)&v216 + i) - *(double *)(v1 + i + 4544);
    sub_1010F2880(v70 - 1432, (uint64_t)&v196, (uint64_t)&v196);
    sub_1010F29D4(v69 + 1904, (uint64_t)&v196, (uint64_t)&v196);
    sub_1010FD690((uint64_t)v325);
    sub_1010F2C5C(v1, (uint64_t)&v170, (uint64_t)&v196, (uint64_t)v325);
    if (v169[1] || *v169)
    {
      v72 = *(double *)(v1 + 11552);
      v73 = v72 > 0.0;
    }
    else
    {
      v73 = 0;
      v72 = *(double *)(v1 + 11552);
    }
    v74 = vabdd_f64(*(double *)&v171, v72) > 24.0 || v72 <= 0.0;
    v75 = sub_1010F5CCC((uint64_t)&v170);
    v76 = v75;
    if (v73 && !v74 || v75)
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v78 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
      {
        v79 = *(_QWORD *)(v1 + 6936);
        v80 = *(_QWORD *)(v1 + 6944);
        v81 = *(_QWORD *)(v1 + 6952);
        v82 = *(double *)(v1 + 6960) * 57.2957795;
        v83 = *(_QWORD *)(v1 + 6984);
        v84 = *(_QWORD *)(v1 + 6992);
        v85 = *(_QWORD *)(v1 + 7000);
        v86 = *(_QWORD *)(v1 + 7024);
        v87 = *(_QWORD *)(v1 + 7080);
        v88 = *(_QWORD *)(v1 + 7136);
        v89 = *(_QWORD *)(v1 + 7192);
        v90 = *(_QWORD *)(v1 + 7248);
        v91 = *(_QWORD *)(v1 + 7304);
        *(_DWORD *)buf = 134353153;
        v296 = v171;
        v297 = 1026;
        *(_DWORD *)v298 = v73;
        *(_WORD *)&v298[4] = 1026;
        *(_DWORD *)&v298[6] = v74;
        LOWORD(v299) = 1026;
        *(_DWORD *)((char *)&v299 + 2) = v76;
        HIWORD(v299) = 2049;
        v300 = v79;
        v301 = 2049;
        v302 = v80;
        v303 = 2049;
        v304 = v81;
        v305 = 2049;
        v306 = v82;
        v307 = 2049;
        v308 = v83;
        v309 = 2049;
        v310 = v84;
        v311 = 2049;
        v312 = v85;
        v313 = 2049;
        v314 = v86;
        v315 = 2049;
        v316 = v87;
        v317 = 2049;
        v318 = v88;
        v319 = 2049;
        v320 = v89;
        v321 = 2049;
        v322 = v90;
        v323 = 2049;
        v324 = v91;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "CLVLF,fuseWithPoints,Update skipped,machAbsTime,%{public}.3lf,hasVlfEngaged,%{public}d,hasVlfTimedOut,%{public}d,isDevicestatic,%{public}d,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", buf, 0xA0u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v110 = *(_QWORD *)(v1 + 6936);
        v111 = *(_QWORD *)(v1 + 6944);
        v112 = *(_QWORD *)(v1 + 6952);
        v113 = *(double *)(v1 + 6960) * 57.2957795;
        v114 = *(_QWORD *)(v1 + 6984);
        v115 = *(_QWORD *)(v1 + 6992);
        v116 = *(_QWORD *)(v1 + 7000);
        v117 = *(_QWORD *)(v1 + 7024);
        v118 = *(_QWORD *)(v1 + 7080);
        v119 = *(_QWORD *)(v1 + 7136);
        v120 = *(_QWORD *)(v1 + 7192);
        v121 = *(_QWORD *)(v1 + 7248);
        v122 = *(_QWORD *)(v1 + 7304);
        v261 = 134353153;
        v262 = v171;
        v263 = 1026;
        v264 = v73;
        v265 = 1026;
        v266 = v74;
        v267 = 1026;
        v268 = v76;
        v269 = 2049;
        v270 = v110;
        v271 = 2049;
        v272 = v111;
        v273 = 2049;
        v274 = v112;
        v275 = 2049;
        v276 = v113;
        v277 = 2049;
        v278 = v114;
        v279 = 2049;
        v280 = v115;
        v281 = 2049;
        v282 = v116;
        v283 = 2049;
        v284 = v117;
        v285 = 2049;
        v286 = v118;
        v287 = 2049;
        v288 = v119;
        v289 = 2049;
        v290 = v120;
        v291 = 2049;
        v292 = v121;
        v293 = 2049;
        v294 = v122;
        LODWORD(v138) = 160;
        v123 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,fuseWithPoints,Update skipped,machAbsTime,%{public}.3lf,hasVlfEngaged,%{public}d,hasVlfTimedOut,%{public}d,isDevicestatic,%{public}d,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", &v261, v138);
        sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::fuseWithPoints()", "%s\n", v123);
        if (v123 != (char *)buf)
          free(v123);
      }
      v77 = 0;
    }
    else
    {
      v77 = sub_1010F5D60(v1, (uint64_t)&v170, (uint64_t)v325);
    }
    v92 = v171;
    *v167 = v170;
    v167[1] = v92;
    v93 = v174;
    *v166 = v173;
    v166[1] = v93;
    v94 = v177;
    *v165 = v176;
    v165[1] = v94;
    v164[48] = v181;
    v95 = v180;
    v96 = v178;
    *((_OWORD *)v164 + 1) = v179;
    *((_OWORD *)v164 + 2) = v95;
    *(_OWORD *)v164 = v96;
    v97 = v184;
    *v163 = v183;
    v163[1] = v97;
    v98 = v187;
    *v162 = v186;
    v162[1] = v98;
    v99 = v193;
    v100 = v191;
    v159[3] = v192;
    v159[4] = v99;
    v101 = v190;
    *v159 = v189;
    v159[1] = v101;
    v159[2] = v100;
    v102 = v194;
    *((_QWORD *)v161 + 2) = v195;
    *(_OWORD *)v161 = v102;
    *(_DWORD *)(v1 + 8296) = 0;
    sub_1010F3B10((uint64_t)&v196, v169);
    sub_1010F3D5C((uint64_t)&v196, v169);
    sub_1010F3F7C((uint64_t)v169, v103, v104, v105);
    sub_1010F424C(v1, (uint64_t)&v170);
    sub_1010F4DDC(v1, (uint64_t)&v196);
    sub_1010F6AAC(v160, (uint64_t)&v170);
    if (v77)
      sub_1010F5314(v140, (uint64_t)v169);
    v106 = *(_QWORD *)(v1 + 6760);
    v107 = *(_QWORD *)(v1 + 6752);
    if ((unint64_t)(0x13A524387AC82261 * ((uint64_t)(v106 - v107) >> 3)) >= 4)
    {
      sub_1010FF74C(v107 + 3336, *(_QWORD *)(v1 + 6760), v107);
      v106 = v108;
      *(_QWORD *)(v1 + 6760) = v108;
    }
    if (v106 >= *(_QWORD *)(v1 + 6768))
    {
      v109 = sub_1010FF7A8(v139, (uint64_t)v169);
    }
    else
    {
      sub_1010FEA38(v106, (uint64_t)v169);
      v109 = v106 + 3336;
    }
    *(_QWORD *)(v1 + 6760) = v109;
    result = sub_1010F54E4((_QWORD *)v1);
    if ((result & 1) == 0)
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v128 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        v129 = *(_QWORD *)(v1 + 8336);
        *(_DWORD *)buf = 134349056;
        v296 = v129;
        _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithPoints,Filter reset,unhealthy state,machAbsTime,%{public}.3lf", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v135 = *(_QWORD *)(v1 + 8336);
        v261 = 134349056;
        v262 = v135;
        LODWORD(v138) = 12;
        v136 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,fuseWithPoints,Filter reset,unhealthy state,machAbsTime,%{public}.3lf", &v261, v138);
        sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithPoints()", "%s\n", v136);
        if (v136 != (char *)buf)
          free(v136);
      }
      v130 = (unsigned __int8 *)(v1 + 1);
      sub_1010E8510((unsigned __int8 *)(v1 + 1));
      v131 = v1;
      v132 = 0;
      goto LABEL_66;
    }
  }
  return result;
}

void sub_1010F16F8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_1010F1708(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  _BOOL4 v49;
  int v50;
  __int128 v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  unint64_t v61;
  __int128 v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  double v68;
  uint64_t i;
  uint64_t v70;
  __int128 v71;
  double v72;
  uint64_t v73;
  uint64_t j;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  char *v87;
  NSObject *v88;
  char *v89;
  NSObject *v90;
  NSObject *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE v106[32];
  uint64_t (**v107)();
  __int128 v108;
  __int128 v109;
  uint64_t (**v110)();
  __int128 v111;
  __int128 v112;
  __int128 __x;
  __int128 v114;
  __int128 v115;
  char v116;
  uint64_t (**v117)();
  __int128 v118;
  __int128 v119;
  uint64_t (**v120)();
  __int128 v121;
  __int128 v122;
  uint64_t (**v123)();
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  char v135;
  uint64_t (**v136)();
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  uint64_t (**v140)();
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t (**v146)();
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t (**v150)();
  __int128 v151;
  __int128 v152;
  uint64_t (**v153)();
  _BYTE v154[297];
  uint64_t (**v155)();
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t (**v159)();
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t (**v165)();
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t (**v169)();
  __int128 v170;
  __int128 v171;
  uint64_t (**v172)();
  _BYTE v173[296];
  uint64_t (**v174)();
  __int128 v175;
  __int128 v176;
  uint64_t (**v177)();
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  char v183;
  uint64_t (**v184)();
  __int128 v185;
  __int128 v186;
  uint64_t (**v187)();
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  char v195;
  _BYTE __B[24];
  __int128 v197;
  _BYTE buf[24];
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;

  v1 = a1;
  v2 = (_BYTE *)(a1 + 6776);
  v94 = a1 + 7936;
  v103 = a1 + 7944;
  v99 = a1 + 7856;
  v102 = (_OWORD *)(a1 + 8152);
  v97 = a1 + 7864;
  v101 = a1 + 8016;
  v95 = a1 + 7976;
  v98 = a1 + 8232;
  v100 = a1 + 8320;
  v96 = (uint64_t *)(a1 + 6752);
  v3 = a1 + 0x2000;
  v104 = a1 + 6776;
  while (v2[1] || *v2)
  {
    v4 = *(_QWORD *)(v1 + 56);
    v5 = *(_QWORD *)(v1 + 64);
    if (v4 == v5)
      break;
    v6 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v106 = *(_OWORD *)v4;
    *(_OWORD *)&v106[16] = v6;
    v7 = *(_OWORD *)(v4 + 56);
    v108 = *(_OWORD *)(v4 + 40);
    v109 = v7;
    v107 = off_1021A1298;
    v110 = off_1021A1298;
    v8 = *(_OWORD *)(v4 + 96);
    v111 = *(_OWORD *)(v4 + 80);
    v112 = v8;
    v9 = *(_OWORD *)(v4 + 112);
    v10 = *(_OWORD *)(v4 + 128);
    v11 = *(_OWORD *)(v4 + 144);
    v116 = *(_BYTE *)(v4 + 160);
    v114 = v10;
    v115 = v11;
    __x = v9;
    v12 = *(_OWORD *)(v4 + 192);
    v118 = *(_OWORD *)(v4 + 176);
    v119 = v12;
    v117 = off_1021A1298;
    v120 = off_1021A1298;
    v13 = *(_OWORD *)(v4 + 232);
    v121 = *(_OWORD *)(v4 + 216);
    v122 = v13;
    v123 = off_1021A0F28;
    v124 = *(_OWORD *)(v4 + 256);
    v14 = *(_OWORD *)(v4 + 272);
    v15 = *(_OWORD *)(v4 + 288);
    v16 = *(_OWORD *)(v4 + 320);
    v127 = *(_OWORD *)(v4 + 304);
    v128 = v16;
    v125 = v14;
    v126 = v15;
    v17 = *(_OWORD *)(v4 + 336);
    v130 = *(_QWORD *)(v4 + 352);
    v129 = v17;
    v18 = *(_OWORD *)(v4 + 360);
    v19 = *(_OWORD *)(v4 + 376);
    v20 = *(_OWORD *)(v4 + 392);
    v134 = *(_QWORD *)(v4 + 408);
    v132 = v19;
    v133 = v20;
    v131 = v18;
    v135 = *(_BYTE *)(v4 + 416);
    v21 = *(_OWORD *)(v4 + 432);
    v22 = *(_OWORD *)(v4 + 448);
    v139 = *(_QWORD *)(v4 + 464);
    v137 = v21;
    v138 = v22;
    v136 = off_1021A0EF0;
    v140 = off_1021A0F28;
    v141 = *(_OWORD *)(v4 + 480);
    v23 = *(_OWORD *)(v4 + 496);
    v24 = *(_OWORD *)(v4 + 512);
    v25 = *(_OWORD *)(v4 + 544);
    v144 = *(_OWORD *)(v4 + 528);
    v145 = v25;
    v142 = v23;
    v143 = v24;
    v146 = off_1021A0D18;
    v26 = *(_OWORD *)(v4 + 568);
    v27 = *(_OWORD *)(v4 + 584);
    v149 = *(_QWORD *)(v4 + 600);
    v147 = v26;
    v148 = v27;
    v150 = off_1021A1298;
    v28 = *(_OWORD *)(v4 + 632);
    v151 = *(_OWORD *)(v4 + 616);
    v152 = v28;
    v153 = off_1021A10E0;
    memcpy(v154, (const void *)(v4 + 656), sizeof(v154));
    v29 = *(_OWORD *)(v4 + 968);
    v30 = *(_OWORD *)(v4 + 984);
    v158 = *(_QWORD *)(v4 + 1000);
    v156 = v29;
    v157 = v30;
    v155 = off_1021A0EF0;
    v159 = off_1021A0F28;
    v160 = *(_OWORD *)(v4 + 1016);
    v31 = *(_OWORD *)(v4 + 1032);
    v32 = *(_OWORD *)(v4 + 1048);
    v33 = *(_OWORD *)(v4 + 1080);
    v163 = *(_OWORD *)(v4 + 1064);
    v164 = v33;
    v161 = v31;
    v162 = v32;
    v165 = off_1021A0D18;
    v34 = *(_OWORD *)(v4 + 1104);
    v35 = *(_OWORD *)(v4 + 1120);
    v168 = *(_QWORD *)(v4 + 1136);
    v166 = v34;
    v167 = v35;
    v169 = off_1021A1298;
    v36 = *(_OWORD *)(v4 + 1168);
    v170 = *(_OWORD *)(v4 + 1152);
    v171 = v36;
    v172 = off_1021A10E0;
    memcpy(v173, (const void *)(v4 + 1192), sizeof(v173));
    v174 = off_1021A1298;
    v37 = *(_OWORD *)(v4 + 1512);
    v175 = *(_OWORD *)(v4 + 1496);
    v176 = v37;
    v177 = off_1021A0F28;
    v38 = *(_OWORD *)(v4 + 1600);
    v39 = *(_OWORD *)(v4 + 1584);
    v40 = *(_OWORD *)(v4 + 1568);
    v179 = *(_OWORD *)(v4 + 1552);
    v180 = v40;
    v181 = v39;
    v182 = v38;
    v178 = *(_OWORD *)(v4 + 1536);
    v183 = *(_BYTE *)(v4 + 1616);
    v184 = off_1021A1298;
    v1 = a1;
    v41 = *(_OWORD *)(v4 + 1648);
    v185 = *(_OWORD *)(v4 + 1632);
    v186 = v41;
    v187 = off_1021A0F28;
    v188 = *(_OWORD *)(v4 + 1672);
    v42 = *(_OWORD *)(v4 + 1688);
    v43 = *(_OWORD *)(v4 + 1704);
    v44 = *(_OWORD *)(v4 + 1736);
    v191 = *(_OWORD *)(v4 + 1720);
    v192 = v44;
    v189 = v42;
    v190 = v43;
    v45 = *(_OWORD *)(v4 + 1752);
    v46 = *(_OWORD *)(v4 + 1768);
    v2 = (_BYTE *)v104;
    v195 = *(_BYTE *)(v4 + 1784);
    v193 = v45;
    v194 = v46;
    sub_1010FF940(v4 + 1792, v5, v4);
    *(_QWORD *)(a1 + 64) = v47;
    if (!*(_BYTE *)(v104 + 1320))
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v88 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = *(_QWORD *)&v106[16];
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "CLVLF,propagateAfterSessionEnded,Filter reset,prev ENU invalid,machAbsTime,%{public}.3lf", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_94;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      *(_DWORD *)__B = 134349056;
      *(_QWORD *)&__B[4] = *(_QWORD *)&v106[16];
      LODWORD(v93) = 12;
      v89 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,propagateAfterSessionEnded,Filter reset,prev ENU invalid,machAbsTime,%{public}.3lf", __B, v93);
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::propagateAfterSessionEnded()", "%s\n", v89);
LABEL_87:
      if (v89 != buf)
        free(v89);
LABEL_94:
      sub_1010E8510((unsigned __int8 *)(v1 + 1));
      sub_1010E854C(v1, 1);
      atomic_store(0, (unsigned __int8 *)(v1 + 1));
      return;
    }
    v48 = vabdd_f64(*(double *)&v106[16], *(double *)(a1 + 7952));
    v49 = sub_1010F5CCC((uint64_t)v106);
    *(_DWORD *)(a1 + 7936) = *(_DWORD *)v106;
    *(_OWORD *)v103 = *(_OWORD *)&v106[8];
    *(_QWORD *)(v103 + 16) = *(_QWORD *)&v106[24];
    *(_BYTE *)(v104 + 1496) = 0;
    *(_DWORD *)(a1 + 8296) = 0;
    if (v49)
    {
      *(double *)__B = *((double *)&v115 + 1) * (v48 * (v48 * 0.5) * *((double *)&v115 + 1));
      v50 = 1;
      buf[0] = 1;
      *(_OWORD *)&buf[8] = xmmword_101C1EE00;
      v199 = xmmword_101C40140;
      *(_QWORD *)&v200 = v3;
      *((_QWORD *)&v200 + 1) = v98;
      sub_1010FF99C((uint64_t)buf, (const double *)__B);
      *(double *)(a1 + 8048) = sqrt(*(double *)(a1 + 0x2000) + *(double *)(a1 + 8224));
      v51 = v115;
      *(_OWORD *)(a1 + 8064) = v114;
      *(_OWORD *)(a1 + 8080) = v51;
      goto LABEL_45;
    }
    v52 = *((double *)&v114 + 1);
    v53 = *((double *)&v115 + 1);
    if (*((double *)&v114 + 1) > 0.0)
    {
      if (*((double *)&v115 + 1) > 0.0)
      {
        v54 = *(double *)&v114;
        v55 = *(double *)&v115;
        goto LABEL_19;
      }
      v56 = *(double *)(a1 + 8088);
      if (v56 > 0.0)
      {
        v54 = *(double *)&v114;
        v55 = *(double *)(a1 + 8080);
LABEL_18:
        v53 = v56;
        goto LABEL_19;
      }
    }
    if (*(double *)(a1 + 8072) <= 0.0)
      goto LABEL_20;
    if (*((double *)&v115 + 1) <= 0.0)
    {
      v56 = *(double *)(a1 + 8088);
      if (v56 <= 0.0)
      {
LABEL_20:
        v57 = v115;
        *(_QWORD *)(a1 + 8064) = v114;
        *(double *)(a1 + 8072) = v52;
        *(_QWORD *)(a1 + 8080) = v57;
        *(double *)(a1 + 8088) = v53;
        goto LABEL_21;
      }
      v54 = *(double *)(a1 + 8064);
      v55 = *(double *)(a1 + 8080);
      v52 = *(double *)(a1 + 8072);
      goto LABEL_18;
    }
    v54 = *(double *)(a1 + 8064);
    v55 = *(double *)&v115;
    v52 = *(double *)(a1 + 8072);
LABEL_19:
    sub_1010F6CC0(v94, v54, v52, v55, v53, v48);
LABEL_21:
    if (sub_1010F598C((uint64_t)&v110, v99, (uint64_t)v106))
    {
      v58 = hypot(*(long double *)(a1 + 8048), *(long double *)(a1 + 8056));
      v59 = hypot(*(long double *)&__x, *((long double *)&__x + 1));
      v60 = v58 + v59;
      v61 = (unint64_t)(COERCE__INT64(fabs(v58 + v59)) - 0x10000000000000) >> 53;
      if ((COERCE__INT64(v58 + v59) <= -1 || v61 >= 0x3FF)
        && (unint64_t)(COERCE__INT64(v58 + v59) - 1) >= 0xFFFFFFFFFFFFFLL)
      {
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v91 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)&buf[4] = *(_QWORD *)&v106[16];
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v58;
          *(_WORD *)&buf[22] = 2050;
          *(double *)&v199 = v59;
          _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "CLVLF,propagateAfterSessionEnded,Filter reset,Invalid horzAcc,machAbsTime,%{public}.3lf,prevHorzAcc,%{public}.3lf,currHorzAcc,%{public}.3lf", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
          *(_DWORD *)__B = 134349568;
          *(_QWORD *)&__B[4] = *(_QWORD *)&v106[16];
          *(_WORD *)&__B[12] = 2050;
          *(double *)&__B[14] = v58;
          *(_WORD *)&__B[22] = 2050;
          *(double *)&v197 = v59;
          LODWORD(v93) = 32;
          v92 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,propagateAfterSessionEnded,Filter reset,Invalid horzAcc,machAbsTime,%{public}.3lf,prevHorzAcc,%{public}.3lf,currHorzAcc,%{public}.3lf", __B, v93);
          sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::propagateAfterSessionEnded()", "%s\n", v92);
          if (v92 != buf)
            free(v92);
          v1 = a1;
        }
        goto LABEL_94;
      }
      *(_QWORD *)buf = off_1021A1298;
      v64 = v102[1];
      *(_OWORD *)&buf[8] = *v102;
      v199 = v64;
      v65 = 8;
      v66 = v59 / v60;
      do
      {
        *(double *)&buf[v65] = v66 * *(double *)&buf[v65];
        v65 += 8;
      }
      while (v65 != 32);
      *(_QWORD *)__B = off_1021A1298;
      *(_OWORD *)&__B[8] = v121;
      v197 = v122;
      v67 = 8;
      v68 = v58 / v60;
      do
      {
        *(double *)&__B[v67] = v68 * *(double *)&__B[v67];
        v67 += 8;
      }
      while (v67 != 32);
      for (i = 8; i != 32; i += 8)
        *(double *)&buf[i] = *(double *)&buf[i] + *(double *)&__B[i];
      v70 = 0;
      v71 = v199;
      *v102 = *(_OWORD *)&buf[8];
      v102[1] = v71;
      v72 = v66 * v66;
      do
      {
        *(double *)(v3 + v70) = v72 * *(double *)(v3 + v70);
        v70 += 8;
      }
      while (v70 != 72);
      *(_QWORD *)buf = off_1021A0F28;
      v200 = v126;
      v201 = v127;
      v202 = v128;
      v73 = 8;
      *(_OWORD *)&buf[8] = v124;
      v199 = v125;
      do
      {
        *(double *)&buf[v73] = v68 * v68 * *(double *)&buf[v73];
        v73 += 8;
      }
      while (v73 != 80);
      for (j = 0; j != 72; j += 8)
        *(double *)(v3 + j) = *(double *)(v3 + j) + *(double *)&buf[j + 8];
      *(double *)(a1 + 8048) = sqrt(*(double *)(a1 + 0x2000) + *(double *)(a1 + 8224));
      *(double *)(a1 + 8056) = sqrt(*(double *)(a1 + 8256));
    }
    if (cnnavigation::ENUToECEF(v102, 1, 1, v97, 0, v101)
      || cnnavigation::ECEFToLLA(v101, 1, v95))
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v90 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = *(_QWORD *)&v106[16];
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_ERROR, "CLVLF,propagateAfterSessionEnded,Filter reset,Propagated LLA invalid,machAbsTime,%{public}.3lf", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        *(_DWORD *)__B = 134349056;
        *(_QWORD *)&__B[4] = *(_QWORD *)&v106[16];
        LODWORD(v93) = 12;
        v89 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,propagateAfterSessionEnded,Filter reset,Propagated LLA invalid,machAbsTime,%{public}.3lf", __B, v93);
        sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::propagateAfterSessionEnded()", "%s\n", v89);
        goto LABEL_87;
      }
      goto LABEL_94;
    }
    v50 = 5;
LABEL_45:
    *(_DWORD *)(a1 + 8296) = v50;
    sub_1010F6AAC(v100, (uint64_t)v106);
    v75 = *(_QWORD *)(a1 + 6760);
    v76 = *(_QWORD *)(a1 + 6752);
    if ((unint64_t)(0x13A524387AC82261 * ((uint64_t)(v75 - v76) >> 3)) >= 4)
    {
      sub_1010FF74C(v76 + 3336, *(_QWORD *)(a1 + 6760), v76);
      v75 = v77;
      *(_QWORD *)(a1 + 6760) = v77;
    }
    if (v75 >= *(_QWORD *)(a1 + 6768))
    {
      v78 = sub_1010FF7A8(v96, v104);
    }
    else
    {
      sub_1010FEA38(v75, v104);
      v78 = v75 + 3336;
    }
    *(_QWORD *)(a1 + 6760) = v78;
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v79 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      v80 = *(_QWORD *)(a1 + 8336);
      v81 = 1.57079633 - *(double *)(a1 + 8064);
      if (v81 < 0.0 || v81 >= 6.28318531)
      {
        v81 = fmod(v81, 6.28318531);
        if (v81 < 0.0 || v81 == 0.0 && (*(_QWORD *)&v81 & 0x8000000000000000) == 0)
          v81 = v81 + 6.28318531;
      }
      v82 = *(_QWORD *)(a1 + 8080);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v80;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v81 * 57.2957795;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&v199 = v82;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "CLVLF,propagateAfterSessionEnded,Location propagated,machAbsTime,%{public}.3lf,course,%{public}.3lf,speed,%{public}.3lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v83 = qword_1022A00C8;
      v84 = *(_QWORD *)(a1 + 8336);
      v85 = 1.57079633 - *(double *)(a1 + 8064);
      if (v85 < 0.0 || v85 >= 6.28318531)
      {
        v85 = fmod(v85, 6.28318531);
        if (v85 < 0.0 || v85 == 0.0 && (*(_QWORD *)&v85 & 0x8000000000000000) == 0)
          v85 = v85 + 6.28318531;
      }
      v86 = *(_QWORD *)(a1 + 8080);
      *(_DWORD *)__B = 134349568;
      *(_QWORD *)&__B[4] = v84;
      *(_WORD *)&__B[12] = 2050;
      *(double *)&__B[14] = v85 * 57.2957795;
      *(_WORD *)&__B[22] = 2050;
      *(_QWORD *)&v197 = v86;
      LODWORD(v93) = 32;
      v87 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v83, 2, "CLVLF,propagateAfterSessionEnded,Location propagated,machAbsTime,%{public}.3lf,course,%{public}.3lf,speed,%{public}.3lf", __B, v93);
      sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::propagateAfterSessionEnded()", "%s\n", v87);
      if (v87 != buf)
        free(v87);
    }
  }
}

void sub_1010F25E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

BOOL sub_1010F25F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v3;
  BOOL v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  const double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _QWORD v17[4];
  _QWORD v18[3];
  double v19[2];
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  int64x2_t v23;
  double *v24;
  uint64_t *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 __dst;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;

  v3 = 0;
  *(_BYTE *)(a3 + 336) = 0;
  *(_QWORD *)(a3 + 352) = 0xBFF0000000000000;
  if (*(_BYTE *)(a1 + 160))
    v4 = *(_BYTE *)(a2 + 160) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = 0;
    v7 = *(_OWORD *)(a2 + 232);
    v35 = *(_OWORD *)(a2 + 216);
    v36 = v7;
    do
    {
      *(double *)&v34[v6 + 8] = *(double *)&v34[v6 + 8] - *(double *)(a1 + 216 + v6);
      v6 += 8;
    }
    while (v6 != 24);
    v8 = v35;
    v9 = *((double *)&v35 + 1) * *((double *)&v35 + 1) + *(double *)&v35 * *(double *)&v35;
    if (v9 >= 1.44)
    {
      LOBYTE(v21) = 0;
      v22 = vdupq_n_s64(2uLL);
      v23 = (int64x2_t)xmmword_101C40150;
      v24 = (double *)(a2 + 256);
      v25 = (uint64_t *)(a2 + 296);
      v10 = (const double *)(a1 + 256);
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v30 = 0;
      sub_1010FE440((uint64_t *)&v26, &v21);
      sub_101100490(*((const double **)&v27 + 1), 1, v27, v10, 1, 3, *((double **)&v27 + 1), v27, v26, *((uint64_t *)&v26 + 1));
      v33 = 0;
      __dst = 0u;
      v32 = 0u;
      v11 = 0.0;
      v12 = 0.0;
      v13 = 0.0;
      v14 = 0.0;
      v15 = 0.0;
      if (*((_QWORD *)&v27 + 1) != (_QWORD)v28)
      {
        memcpy(&__dst, *((const void **)&v27 + 1), ((v28 - *((_QWORD *)&v27 + 1) - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
        v13 = *((double *)&__dst + 1);
        v15 = *(double *)&__dst;
        v12 = *((double *)&v32 + 1);
        v14 = *(double *)&v32;
      }
      sub_1010FE154(&v26);
      v18[2] = off_1021A1B30;
      v19[0] = -*((double *)&v8 + 1) / v9;
      v19[1] = *(double *)&v8 / v9;
      v20 = 0;
      LOBYTE(v21) = 0;
      v22 = (int64x2_t)xmmword_101C40160;
      v23 = vdupq_n_s64(1uLL);
      v24 = v19;
      v25 = &v20;
      v17[0] = off_1021A1B30;
      v17[3] = 0;
      *(double *)&v17[1] = v14 * (*(double *)&v8 / v9) + v15 * v19[0];
      *(double *)&v17[2] = *(double *)&v8 / v9 * v12 + v13 * v19[0];
      sub_1010FD21C((uint64_t)&v21, (uint64_t)v17, (uint64_t *)&v26);
      v18[0] = 0;
      v18[1] = 0;
      if (*((_QWORD *)&v27 + 1) != (_QWORD)v28)
      {
        memcpy(v18, *((const void **)&v27 + 1), ((v28 - *((_QWORD *)&v27 + 1) - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
        v11 = *(double *)v18;
      }
      sub_1010FE154(&v26);
      v3 = 0;
      if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v11 >= 0.0)
      {
        *(long double *)(a3 + 344) = atan2(*((long double *)&v8 + 1), *(long double *)&v8);
        *(double *)(a3 + 352) = v11;
        v3 = sqrt(v11) <= 3.14159265;
        *(_BYTE *)(a3 + 336) = v3;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_1010F2880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  int64x2_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[4];
  uint64_t v22;

  *(_BYTE *)(a3 + 1256) = 0;
  if (*(_BYTE *)(a1 + 1424))
    v3 = *(_BYTE *)(a2 + 1424) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (!v3)
  {
    v8 = 0;
    v9 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)((char *)v21 + 8) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)((char *)&v21[1] + 8) = v9;
    do
    {
      *(double *)((char *)v21 + v8 + 8) = *(double *)((char *)v21 + v8 + 8) - *(double *)(a1 + 256 + v8);
      v8 += 8;
    }
    while (v8 != 24);
    v10 = *(_OWORD *)((char *)&v21[1] + 8);
    *(_OWORD *)(a3 + 1272) = *(_OWORD *)((char *)v21 + 8);
    *(_OWORD *)(a3 + 1288) = v10;
    LOBYTE(v16) = 0;
    v17 = vdupq_n_s64(3uLL);
    v18 = xmmword_101B9B430;
    v19 = a2 + 464;
    v20 = a2 + 584;
    memset(v21, 0, sizeof(v21));
    v22 = 0;
    sub_1010FE440((uint64_t *)v21, &v16);
    sub_101100490(*((const double **)&v21[1] + 1), 1, *(uint64_t *)&v21[1], (const double *)(a1 + 464), 1, 6, *((double **)&v21[1] + 1), *(uint64_t *)&v21[1], *(vDSP_Length *)&v21[0], *((uint64_t *)&v21[0] + 1));
    v12 = *(uint64_t **)&v21[2];
    v11 = (uint64_t *)*((_QWORD *)&v21[1] + 1);
    if (*((_QWORD *)&v21[1] + 1) != *(_QWORD *)&v21[2])
    {
      v13 = (_QWORD *)(a3 + 1312);
      do
      {
        v14 = *v11++;
        *v13++ = v14;
      }
      while (v11 != v12);
    }
    sub_1010FE154(v21);
    *(double *)(a3 + 1392) = *(double *)(a2 + 40) - *(double *)(a1 + 40);
    *(_BYTE *)(a3 + 1256) = 1;
  }
  return v4;
}

BOOL sub_1010F29D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v3;
  BOOL v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  const double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _QWORD v17[4];
  _QWORD v18[3];
  double v19[2];
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  int64x2_t v23;
  double *v24;
  uint64_t *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 __dst;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;

  v3 = 0;
  *(_BYTE *)(a3 + 1400) = 0;
  *(_QWORD *)(a3 + 1416) = 0xBFF0000000000000;
  if (*(_BYTE *)(a1 + 1424))
    v4 = *(_BYTE *)(a2 + 1424) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = 0;
    v7 = *(_OWORD *)(a2 + 272);
    v35 = *(_OWORD *)(a2 + 256);
    v36 = v7;
    do
    {
      *(double *)&v34[v6 + 8] = *(double *)&v34[v6 + 8] - *(double *)(a1 + 256 + v6);
      v6 += 8;
    }
    while (v6 != 24);
    v8 = v35;
    v9 = *((double *)&v35 + 1) * *((double *)&v35 + 1) + *(double *)&v35 * *(double *)&v35;
    if (v9 >= 1.44)
    {
      LOBYTE(v21) = 0;
      v22 = vdupq_n_s64(2uLL);
      v23 = (int64x2_t)xmmword_101B9B430;
      v24 = (double *)(a2 + 464);
      v25 = (uint64_t *)(a2 + 528);
      v10 = (const double *)(a1 + 464);
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v30 = 0;
      sub_1010FE440((uint64_t *)&v26, &v21);
      sub_101100490(*((const double **)&v27 + 1), 1, v27, v10, 1, 6, *((double **)&v27 + 1), v27, v26, *((uint64_t *)&v26 + 1));
      v33 = 0;
      __dst = 0u;
      v32 = 0u;
      v11 = 0.0;
      v12 = 0.0;
      v13 = 0.0;
      v14 = 0.0;
      v15 = 0.0;
      if (*((_QWORD *)&v27 + 1) != (_QWORD)v28)
      {
        memcpy(&__dst, *((const void **)&v27 + 1), ((v28 - *((_QWORD *)&v27 + 1) - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
        v13 = *((double *)&__dst + 1);
        v15 = *(double *)&__dst;
        v12 = *((double *)&v32 + 1);
        v14 = *(double *)&v32;
      }
      sub_1010FE154(&v26);
      v18[2] = off_1021A1B30;
      v19[0] = -*((double *)&v8 + 1) / v9;
      v19[1] = *(double *)&v8 / v9;
      v20 = 0;
      LOBYTE(v21) = 0;
      v22 = (int64x2_t)xmmword_101C40160;
      v23 = vdupq_n_s64(1uLL);
      v24 = v19;
      v25 = &v20;
      v17[0] = off_1021A1B30;
      v17[3] = 0;
      *(double *)&v17[1] = v14 * (*(double *)&v8 / v9) + v15 * v19[0];
      *(double *)&v17[2] = *(double *)&v8 / v9 * v12 + v13 * v19[0];
      sub_1010FD21C((uint64_t)&v21, (uint64_t)v17, (uint64_t *)&v26);
      v18[0] = 0;
      v18[1] = 0;
      if (*((_QWORD *)&v27 + 1) != (_QWORD)v28)
      {
        memcpy(v18, *((const void **)&v27 + 1), ((v28 - *((_QWORD *)&v27 + 1) - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
        v11 = *(double *)v18;
      }
      sub_1010FE154(&v26);
      v3 = 0;
      if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v11 >= 0.0)
      {
        *(long double *)(a3 + 1408) = atan2(*((long double *)&v8 + 1), *(long double *)&v8);
        *(double *)(a3 + 1416) = v11;
        v3 = sqrt(v11) <= 3.14159265;
        *(_BYTE *)(a3 + 1400) = v3;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_1010F2C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  double v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;

  v8 = vabdd_f64(*(double *)(a2 + 16), *(double *)(*(_QWORD *)(a1 + 6760) - 1776));
  sub_1010F5314(a4, a1 + 3416);
  *(_DWORD *)(a4 + 1520) = 0;
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a4 + 1160) = *(_OWORD *)a2;
  *(_OWORD *)(a4 + 1176) = v9;
  v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a4 + 1200) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a4 + 1216) = v10;
  v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a4 + 1240) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a4 + 1256) = v11;
  v12 = *(_BYTE *)(a2 + 160);
  v14 = *(_OWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a4 + 1272) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a4 + 1288) = v14;
  *(_OWORD *)(a4 + 1304) = v13;
  *(_BYTE *)(a4 + 1320) = v12;
  v15 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a4 + 1336) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a4 + 1352) = v15;
  v16 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a4 + 1376) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a4 + 1392) = v16;
  *(_OWORD *)(a4 + 1416) = *(_OWORD *)(a2 + 256);
  v17 = *(_OWORD *)(a2 + 320);
  v19 = *(_OWORD *)(a2 + 272);
  v18 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a4 + 1464) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a4 + 1480) = v17;
  *(_OWORD *)(a4 + 1432) = v19;
  *(_OWORD *)(a4 + 1448) = v18;
  v20 = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a4 + 1512) = *(_QWORD *)(a2 + 352);
  *(_OWORD *)(a4 + 1496) = v20;
  sub_1010F3B10(a3, (unsigned __int8 *)a4);
  v21 = v8 * 0.00523598776;
  *(double *)(a1 + 7024) = v8 * 0.00523598776 * (v8 * 0.00523598776) + *(double *)(a1 + 7024);
  *(double *)(a1 + 7080) = v8 * 0.00523598776 * (v8 * 0.00523598776) + *(double *)(a1 + 7080);
  *(double *)(a1 + 7136) = v8 * 0.00523598776 * (v8 * 0.00523598776) + *(double *)(a1 + 7136);
  v22 = v8 * 0.3;
  *(double *)(a1 + 7192) = v22 * v22 + *(double *)(a1 + 7192);
  *(double *)(a1 + 7248) = v22 * v22 + *(double *)(a1 + 7248);
  *(double *)(a1 + 7304) = v22 * v22 + *(double *)(a1 + 7304);
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
  v23 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
  {
    v24 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)buf = 134349568;
    v35 = v24;
    v36 = 2050;
    v37 = v21 * 57.2957795;
    v38 = 2050;
    v39 = v22;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLVLF,propagate,Filter propagated,machAbsTime,%{public}.3lf,rotProcNoiseStd,%{public}.3lf,posProcNoiseStd,%{public}.3lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v26 = *(_QWORD *)(a2 + 16);
    v28 = 134349568;
    v29 = v26;
    v30 = 2050;
    v31 = v21 * 57.2957795;
    v32 = 2050;
    v33 = v22;
    v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,propagate,Filter propagated,machAbsTime,%{public}.3lf,rotProcNoiseStd,%{public}.3lf,posProcNoiseStd,%{public}.3lf", &v28, 32);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::propagate(const fusion::LocData &, const fusion::VioData &, fusion::LocationFuserState &)", "%s\n", v27);
    if (v27 != (char *)buf)
      free(v27);
  }
  return 1;
}

void sub_1010F2F78(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1010F2F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  double *v19;
  double *v20;
  float64x2_t *v21;
  float64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int8x16_t v27;
  double v28;
  int8x16_t v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void *v64;
  char *v65;
  uint64_t v66;
  _BOOL4 v67;
  uint64_t v68;
  int64x2_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  __int128 v73;
  __int128 v74;
  char v75[8];
  double v76;
  double v77;
  double v78;
  float64x2_t v79;
  double v80;
  uint64_t (**v81)();
  float64x2_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  _QWORD __dst[2];
  char v93[8];
  float64x2_t v94;
  double v95;
  float64x2_t v96;
  double v97;
  float64x2_t v98;
  double v99;
  uint64_t (**v100)();
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t (**v106)();
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t (**v112)();
  _OWORD v113[4];
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (**v123)();
  __int128 v124;
  __int128 v125;
  int v126;
  _BYTE v127[20];
  _BYTE v128[38];
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  void *__p[3];
  int64x2_t v146;
  __int128 *v147;
  char *v148;
  uint64_t v149;
  uint8_t buf[72];
  _BYTE v151[10];
  __int16 v152;
  uint64_t v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  uint64_t v157;
  __int16 v158;
  uint64_t v159;
  __int16 v160;
  uint64_t v161;
  __int16 v162;
  uint64_t v163;

  v67 = sub_1010FAD6C(a1 + 4960, a2, a3);
  v7 = 0;
  v123 = off_1021A1298;
  v124 = *(_OWORD *)(a2 + 1392);
  v125 = *(_OWORD *)(a2 + 1408);
  do
  {
    *(double *)&(&v123)[v7 + 1] = *(double *)&(&v123)[v7 + 1] - *(double *)(a3 + 744 + v7 * 8);
    ++v7;
  }
  while (v7 != 3);
  v116 = 0u;
  v117 = 0;
  v119 = 0u;
  v120 = 0;
  v112 = off_1021A1608;
  v122 = 0;
  v68 = a1 + 6784;
  sub_10149E0BC((double *)(a1 + 6840), a1 + 6928, (double *)(a2 + 1976), (uint64_t)buf, (int8x16_t)0, v6);
  v113[0] = *(_OWORD *)&buf[8];
  v113[1] = *(_OWORD *)&buf[24];
  v113[2] = *(_OWORD *)&buf[40];
  v113[3] = *(_OWORD *)&buf[56];
  v114 = *(_QWORD *)v151;
  v121 = 0x3FF0000000000000;
  v118 = 0x3FF0000000000000;
  v115 = 0x3FF0000000000000;
  LOBYTE(__p[0]) = 0;
  *(int64x2_t *)&__p[1] = vdupq_n_s64(3uLL);
  v146 = (int64x2_t)xmmword_101B9B430;
  v147 = (__int128 *)(a2 + 2192);
  v148 = (char *)(a2 + 2312);
  sub_1010FAE94(a1 + 6840, (uint64_t *)__p, (uint64_t *)buf);
  v106 = off_1021A0F28;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v8 = *(uint64_t **)&buf[24];
  v9 = *(uint64_t **)&buf[32];
  if (*(_QWORD *)&buf[24] != *(_QWORD *)&buf[32])
  {
    v10 = &v107;
    do
    {
      v11 = *v8++;
      *(_QWORD *)v10 = v11;
      v10 = (__int128 *)((char *)v10 + 8);
    }
    while (v8 != v9);
  }
  sub_1010FE154(buf);
  buf[0] = 0;
  v69 = vdupq_n_s64(3uLL);
  *(int64x2_t *)&buf[8] = v69;
  *(_OWORD *)&buf[24] = xmmword_101C40170;
  *(_QWORD *)&buf[40] = a1 + 6848;
  *(_QWORD *)&buf[48] = a1 + 6920;
  sub_1010FFD80((double *)&v106, buf);
  buf[0] = 0;
  *(int64x2_t *)&buf[8] = v69;
  *(_OWORD *)&buf[24] = xmmword_101B9B430;
  *(_QWORD *)&buf[40] = a2 + 1600;
  *(_QWORD *)&buf[48] = a2 + 1720;
  sub_1010FAF68((double *)&v106, buf);
  sub_1010FB0E4((uint64_t)&v112, a1 + 7016, (uint64_t)buf);
  LOBYTE(v81) = 1;
  v82 = (float64x2_t)xmmword_101C40180;
  v83 = xmmword_101C40170;
  *(_QWORD *)&v84 = v113;
  *((_QWORD *)&v84 + 1) = &v122;
  sub_1010FB010((uint64_t)buf, (uint64_t *)&v81, (uint64_t *)__p);
  v12 = 0;
  v100 = off_1021A0F28;
  v102 = v108;
  v103 = v109;
  v104 = v110;
  v105 = v111;
  v101 = v107;
  v13 = v146.i64[0];
  do
  {
    *(double *)&(&v100)[v12 + 1] = *(double *)&(&v100)[v12 + 1] + *(double *)(v13 + v12 * 8);
    ++v12;
  }
  while (v12 != 9);
  sub_1010FE154(__p);
  memset(buf, 0, 24);
  memset(__p, 0, sizeof(__p));
  sub_1010FB184((uint64_t)&v100, (uint64_t)v93);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)&__p[1] = xmmword_101C40150;
  v146 = vdupq_n_s64(1uLL);
  v147 = &v124;
  v148 = (char *)&v125 + 8;
  v81 = off_1021A1298;
  *((_QWORD *)&v83 + 1) = 0;
  v82 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v96, *((double *)&v124 + 1)), v94, *(double *)&v124), v98, *(double *)&v125);
  *(double *)&v83 = *((double *)&v124 + 1) * v97 + v95 * *(double *)&v124 + v99 * *(double *)&v125;
  sub_1010FB260((uint64_t)__p, (uint64_t)&v81, (uint64_t *)buf);
  __dst[0] = 0;
  __dst[1] = 0;
  v14 = &qword_1022A0000;
  if (*(_QWORD *)&buf[24] == *(_QWORD *)&buf[32])
  {
    sub_1010FE154(buf);
  }
  else
  {
    memcpy(__dst, *(const void **)&buf[24], ((*(_QWORD *)&buf[32] - *(_QWORD *)&buf[24] - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    v15 = *(double *)__dst;
    sub_1010FE154(buf);
    if (v15 > 8.02488176)
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v16 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
      {
        v17 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v17;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v67;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLVLF,updateWithVLPoints,Mahalanobis test failed,machAbsTime,%{public}.3lf,forceUpdateNeeded,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v64 = *(void **)(a2 + 8);
        LODWORD(__p[0]) = 134349312;
        *(void **)((char *)__p + 4) = v64;
        WORD2(__p[1]) = 1026;
        *(_DWORD *)((char *)&__p[1] + 6) = v67;
        v65 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,updateWithVLPoints,Mahalanobis test failed,machAbsTime,%{public}.3lf,forceUpdateNeeded,%{public}d", __p, 18);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::updateWithPoints(const fusion::LocationFuserMeasurement<fusion::VlfData> &, const fusion::LocationFuserState &)", "%s\n", v65);
        if (v65 != (char *)buf)
          free(v65);
      }
      v14 = &qword_1022A0000;
      if (!v67)
        return 0;
    }
  }
  sub_1010FB0E4((uint64_t)&v112, a1 + 7016, (uint64_t)__p);
  LOBYTE(v126) = 0;
  *(_OWORD *)&v127[4] = xmmword_101C40180;
  *(_OWORD *)v128 = xmmword_101C40170;
  *(_QWORD *)&v128[16] = &__p[1];
  *(_QWORD *)&v128[24] = &v149;
  sub_1010FB2F0((uint64_t)&v126, (uint64_t)v93, (uint64_t *)buf);
  v81 = off_1021A17C0;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0;
  v19 = *(double **)&buf[24];
  v20 = *(double **)&buf[32];
  if (*(_QWORD *)&buf[24] != *(_QWORD *)&buf[32])
  {
    v21 = &v82;
    do
    {
      v22 = *v19++;
      v21->f64[0] = v22;
      v21 = (float64x2_t *)((char *)v21 + 8);
    }
    while (v19 != v20);
  }
  sub_1010FE154(buf);
  sub_1010FB390((uint64_t)&v81, (uint64_t)&v123, (uint64_t)v75);
  *(float64x2_t *)(a1 + 6984) = vaddq_f64(v79, *(float64x2_t *)(a1 + 6984));
  *(double *)(a1 + 7000) = v80 + *(double *)(a1 + 7000);
  sub_1010FB408((uint64_t)&v81, (uint64_t)__p, (uint64_t)buf);
  sub_1010FFD4C(a1 + 7016, (uint64_t)buf);
  if (sqrt(v77 * v77 + v76 * v76 + v78 * v78) != 0.0)
  {
    LOBYTE(v126) = 0;
    *(_OWORD *)&v127[4] = xmmword_101C40170;
    *(int64x2_t *)v128 = vdupq_n_s64(1uLL);
    *(_QWORD *)&v128[16] = a1 + 6936;
    *(_QWORD *)&v128[24] = a1 + 6960;
    memset(buf, 0, sizeof(buf));
    sub_1010FE440((uint64_t *)buf, &v126);
    sub_1010FFB08((uint64_t)buf, (const double *)(a1 + 6960));
    v73 = 0u;
    v74 = 0u;
    if (*(_QWORD *)&buf[24] == *(_QWORD *)&buf[32])
    {
      v25 = 0.0;
      v23 = 0.0;
      v24 = 0.0;
    }
    else
    {
      memcpy(&v73, *(const void **)&buf[24], ((*(_QWORD *)&buf[32] - *(_QWORD *)&buf[24] - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
      v23 = *((double *)&v73 + 1);
      v24 = *(double *)&v73;
      v25 = *(double *)&v74;
    }
    sub_1010FE154(buf);
    v26 = v76 + v24;
    *(double *)v27.i64 = v77 + v23;
    v28 = v78 + v25;
    *(double *)v29.i64 = sqrt(*(double *)v27.i64 * *(double *)v27.i64 + v26 * v26 + v28 * v28);
    if (*(double *)v29.i64 == 0.0)
    {
      v29 = 0uLL;
      memset(&buf[8], 0, 32);
      *(_QWORD *)buf = off_1021A0D18;
    }
    else
    {
      v30 = v26 / *(double *)v29.i64;
      v31 = *(double *)v27.i64 / *(double *)v29.i64;
      v27.i64[0] = 0x400921FB54442D18;
      v32 = v28 / *(double *)v29.i64;
      if (*(double *)v29.i64 > 3.14159265)
      {
        v33.f64[0] = NAN;
        v33.f64[1] = NAN;
        v71 = (int8x16_t)vnegq_f64(v33);
        v72 = vbslq_s8(v71, v27, v29);
        v70 = v27;
        *(double *)v29.i64 = fmod(*(double *)v29.i64 + *(double *)v72.i64, 6.28318531);
        *(_QWORD *)&v28 = vbslq_s8(v71, v70, v29).u64[0];
        v27.i64[1] = v72.i64[1];
        *(double *)v27.i64 = *(double *)v29.i64 - *(double *)v72.i64;
        if (*(double *)v29.i64 == 0.0)
          *(double *)v29.i64 = v28;
        else
          *(double *)v29.i64 = *(double *)v29.i64 - *(double *)v72.i64;
      }
      *(_QWORD *)buf = off_1021A0D18;
      *(double *)&buf[8] = v30;
      *(double *)&buf[16] = v31;
      *(double *)&buf[24] = v32;
      *(_QWORD *)&buf[32] = v29.i64[0];
    }
    *(_QWORD *)&buf[40] = 0;
    sub_10149CEB4(v68, (uint64_t)buf, v29, v28, v27);
  }
  sub_10149D5F0(v68);
  if (v14[24] != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
  v34 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(_QWORD *)(a1 + 6936);
    v37 = *(_QWORD *)(a1 + 6944);
    v38 = *(_QWORD *)(a1 + 6952);
    v39 = *(double *)(a1 + 6960) * 57.2957795;
    v40 = *(_QWORD *)(a1 + 6984);
    v41 = *(_QWORD *)(a1 + 6992);
    v42 = *(_QWORD *)(a1 + 7000);
    v43 = *(_QWORD *)(a1 + 7024);
    v44 = *(_QWORD *)(a1 + 7080);
    v45 = *(_QWORD *)(a1 + 7136);
    v46 = *(_QWORD *)(a1 + 7192);
    v47 = *(_QWORD *)(a1 + 7248);
    v48 = *(_QWORD *)(a1 + 7304);
    *(_DWORD *)buf = 134352385;
    *(_QWORD *)&buf[4] = v35;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v36;
    *(_WORD *)&buf[22] = 2049;
    *(_QWORD *)&buf[24] = v37;
    *(_WORD *)&buf[32] = 2049;
    *(_QWORD *)&buf[34] = v38;
    *(_WORD *)&buf[42] = 2049;
    *(double *)&buf[44] = v39;
    *(_WORD *)&buf[52] = 2049;
    *(_QWORD *)&buf[54] = v40;
    *(_WORD *)&buf[62] = 2049;
    *(_QWORD *)&buf[64] = v41;
    *(_WORD *)v151 = 2049;
    *(_QWORD *)&v151[2] = v42;
    v152 = 2049;
    v153 = v43;
    v154 = 2049;
    v155 = v44;
    v156 = 2049;
    v157 = v45;
    v158 = 2049;
    v159 = v46;
    v160 = 2049;
    v161 = v47;
    v162 = 2049;
    v163 = v48;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLVLF,updateWithVLPoints,Filter updated,machAbsTime,%{public}.3lf,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", buf, 0x8Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v49 = *(_QWORD *)(a2 + 8);
    v50 = *(_QWORD *)(a1 + 6936);
    v51 = *(_QWORD *)(a1 + 6944);
    v52 = *(_QWORD *)(a1 + 6952);
    v53 = *(double *)(a1 + 6960) * 57.2957795;
    v54 = *(_QWORD *)(a1 + 6984);
    v55 = *(_QWORD *)(a1 + 6992);
    v56 = *(_QWORD *)(a1 + 7000);
    v57 = *(_QWORD *)(a1 + 7024);
    v58 = *(_QWORD *)(a1 + 7080);
    v59 = *(_QWORD *)(a1 + 7136);
    v60 = *(_QWORD *)(a1 + 7192);
    v61 = *(_QWORD *)(a1 + 7248);
    v62 = *(_QWORD *)(a1 + 7304);
    v126 = 134352385;
    *(_QWORD *)v127 = v49;
    *(_WORD *)&v127[8] = 2049;
    *(_QWORD *)&v127[10] = v50;
    *(_WORD *)&v127[18] = 2049;
    *(_QWORD *)v128 = v51;
    *(_WORD *)&v128[8] = 2049;
    *(_QWORD *)&v128[10] = v52;
    *(_WORD *)&v128[18] = 2049;
    *(double *)&v128[20] = v53;
    *(_WORD *)&v128[28] = 2049;
    *(_QWORD *)&v128[30] = v54;
    v129 = 2049;
    v130 = v55;
    v131 = 2049;
    v132 = v56;
    v133 = 2049;
    v134 = v57;
    v135 = 2049;
    v136 = v58;
    v137 = 2049;
    v138 = v59;
    v139 = 2049;
    v140 = v60;
    v141 = 2049;
    v142 = v61;
    v143 = 2049;
    v144 = v62;
    LODWORD(v66) = 142;
    v63 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,updateWithVLPoints,Filter updated,machAbsTime,%{public}.3lf,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", &v126, v66);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::updateWithPoints(const fusion::LocationFuserMeasurement<fusion::VlfData> &, const fusion::LocationFuserState &)", "%s\n", v63);
    if (v63 != (char *)buf)
      free(v63);
  }
  return 1;
}

void sub_1010F3B04(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1010F3B10(uint64_t a1, unsigned __int8 *a2)
{
  BOOL v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[40];
  unsigned __int8 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[296];

  a2[1320] = 0;
  if (a2[1] | *a2)
    v3 = *(_BYTE *)(a1 + 1424) == 0;
  else
    v3 = 1;
  if (!v3)
  {
    sub_10149E800((uint64_t)(a2 + 8), a1 + 56, 1, (uint64_t)&v17);
    a2[544] = v17;
    v5 = *(_OWORD *)&v18[24];
    *((_OWORD *)a2 + 35) = *(_OWORD *)&v18[8];
    *((_OWORD *)a2 + 36) = v5;
    *((_QWORD *)a2 + 74) = v19;
    v6 = v23;
    *((_OWORD *)a2 + 40) = v22;
    *((_OWORD *)a2 + 41) = v6;
    *((_OWORD *)a2 + 42) = v24;
    v7 = v25;
    *(_OWORD *)(a2 + 712) = v26;
    *(_OWORD *)(a2 + 696) = v7;
    *(_OWORD *)(a2 + 744) = v28;
    *(_OWORD *)(a2 + 760) = v29;
    v8 = v21;
    v9 = v20;
    *((_QWORD *)a2 + 91) = v27;
    v10 = a2 + 784;
    *((_OWORD *)a2 + 38) = v9;
    *((_OWORD *)a2 + 39) = v8;
    memcpy(a2 + 784, v30, 0x128uLL);
    v11 = 0;
    while ((*(_QWORD *)&a2[v11 + 160] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v11 += 8;
      if (v11 == 32)
      {
        v12 = 0;
        while ((*(_QWORD *)&a2[v12 + 208] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v12 += 8;
          if (v12 == 24)
          {
            v13 = 0;
            while ((*(_QWORD *)&v10[v13] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            {
              v13 += 8;
              if (v13 == 288)
              {
                v14 = 0;
                while (*(double *)&v10[v14] >= 0.0)
                {
                  v14 += 56;
                  if (v14 == 336)
                  {
                    v15 = *(_OWORD *)(a2 + 760);
                    *((_OWORD *)a2 + 86) = *(_OWORD *)(a2 + 744);
                    *((_OWORD *)a2 + 87) = v15;
                    LOBYTE(v17) = 1;
                    *(int64x2_t *)v18 = vdupq_n_s64(3uLL);
                    *(_OWORD *)&v18[16] = xmmword_101B9B430;
                    *(_QWORD *)&v18[32] = a2 + 952;
                    v19 = a2 + 1072;
                    sub_1010FD380((uint64_t)(a2 + 1408), &v17);
                    *((double *)a2 + 159) = sqrt(*((double *)a2 + 177) + *((double *)a2 + 181));
                    *((double *)a2 + 160) = sqrt(*((double *)a2 + 185));
                    v16 = *((_OWORD *)a2 + 69);
                    *(_OWORD *)(a2 + 1336) = *((_OWORD *)a2 + 68);
                    *(_OWORD *)(a2 + 1352) = v16;
                    if (!cnnavigation::ENUToECEF(a2 + 1376, 1, 1, a2 + 1336, 0, a2 + 1240)
                      && !cnnavigation::ECEFToLLA(a2 + 1240, 1, a2 + 1200))
                    {
                      a2[1320] = 1;
                      result = *((_DWORD *)a2 + 380) | 1u;
                      *((_DWORD *)a2 + 380) = result;
                      return result;
                    }
                    return *((unsigned int *)a2 + 380);
                  }
                }
                return *((unsigned int *)a2 + 380);
              }
            }
            return *((unsigned int *)a2 + 380);
          }
        }
        return *((unsigned int *)a2 + 380);
      }
    }
  }
  return *((unsigned int *)a2 + 380);
}

uint64_t sub_1010F3D5C(uint64_t a1, unsigned __int8 *a2)
{
  __double2 v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t result;
  char v18[8];
  int64x2_t v19;
  __int128 v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23[3];
  _BYTE *v24;
  _BYTE *v25;
  double __dst;
  double v27;
  uint64_t v28;
  uint64_t (**v29)();
  double v30;
  double v31;
  uint64_t v32;
  uint64_t (**v33)();
  _BYTE v34[80];
  uint64_t (**v35)();
  __int128 v36;
  __int128 v37;
  double v38[2];
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  double v46[5];

  a2[1496] = 0;
  if (a2[1] | *a2)
    _ZF = *(_BYTE *)(a1 + 1424) == 0;
  else
    _ZF = 1;
  if (_ZF || *(_BYTE *)(a1 + 1400) == 0)
    return *((unsigned int *)a2 + 380);
  v6 = __sincos_stret(*(double *)(a1 + 1408));
  v7 = *(double *)(a1 + 1416);
  *(_QWORD *)&v46[0] = off_1021A1298;
  v46[1] = v6.__cosval;
  v46[2] = v6.__sinval;
  v46[3] = 0.0;
  v46[4] = 0.0;
  *(_QWORD *)&v38[0] = off_1021A0F28;
  v38[1] = v6.__sinval * (v7 * v6.__sinval);
  v39 = -(v7 * v6.__sinval * v6.__cosval);
  v40 = 0;
  v41 = v39;
  v42 = v6.__cosval * (v7 * v6.__cosval);
  v43 = 0u;
  v44 = 0u;
  v45 = 0;
  v35 = off_1021A1298;
  v36 = 0u;
  v37 = 0u;
  v33 = off_1021A0F28;
  memset(v34, 0, sizeof(v34));
  sub_10149E450((uint64_t)(a2 + 8), v46, v38, (uint64_t)&v35, (uint64_t)&v33, 1);
  v29 = off_1021A1B30;
  v30 = -*((double *)&v36 + 1);
  v31 = *(double *)&v36;
  v32 = 0;
  v18[0] = 1;
  v19 = vdupq_n_s64(2uLL);
  v20 = xmmword_101C40150;
  v21 = v34;
  v22 = &v34[40];
  sub_1010FD21C((uint64_t)v18, (uint64_t)&v29, v23);
  __dst = 0.0;
  v27 = 0.0;
  v28 = 0;
  if (v24 == v25)
  {
    v8 = 0.0;
    v9 = 0.0;
  }
  else
  {
    memcpy(&__dst, v24, ((v25 - v24 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    v9 = __dst;
    v8 = v27;
  }
  sub_1010FE154(v23);
  v10 = atan2(*((long double *)&v36 + 1), *(long double *)&v36);
  *((double *)a2 + 188) = v10;
  v11 = v31 * v8 + v30 * v9;
  *((double *)a2 + 189) = v11;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v11 < 0.0)
    return *((unsigned int *)a2 + 380);
  *((double *)a2 + 161) = v10;
  v12 = sqrt(v11);
  *((double *)a2 + 162) = v12;
  if (v12 > 3.14159265)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a2 + 1288) = _Q0;
    return *((unsigned int *)a2 + 380);
  }
  a2[1496] = 1;
  result = *((_DWORD *)a2 + 380) | 2u;
  *((_DWORD *)a2 + 380) = result;
  return result;
}

BOOL sub_1010F3F7C(uint64_t a1, double a2, double a3, int8x16_t a4)
{
  long double v10;
  long double v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  double v16;
  _BOOL8 result;
  double v18;
  double v19;
  int64x2_t v20;
  _BYTE v21[8];
  int64x2_t v22;
  __int128 v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  int64x2_t v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;
  int64x2_t v33;
  double *v34;
  uint64_t *v35;
  _QWORD __dst[2];
  uint64_t (**v37)();
  double v38[2];
  uint64_t v39;
  uint64_t v40[9];
  uint64_t v41[3];
  uint64_t *v42;
  uint64_t *v43;
  uint64_t (**v44)();
  _BYTE v45[80];
  _BYTE v46[8];
  uint64_t v47;
  uint64_t v48;
  uint64_t (**v49)();
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64x2_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1528) = _Q0;
  LOBYTE(v53) = 1;
  v20 = vdupq_n_s64(3uLL);
  v54 = v20;
  v55 = xmmword_101B9B430;
  v56 = a1 + 784;
  v57 = a1 + 904;
  v49 = off_1021A1298;
  v51 = 0x3FF0000000000000;
  v52 = 0;
  v50 = xmmword_101C401C0;
  v10 = *(double *)(a1 + 656);
  v11 = *(double *)(a1 + 664);
  sub_10149E0BC((double *)(a1 + 600), a1 + 688, (double *)&v49, (uint64_t)v46, (int8x16_t)xmmword_101C401C0, a4);
  sub_1010FAE94((uint64_t)v46, &v53, v40);
  LOBYTE(v26) = 0;
  v27 = v20;
  v28 = xmmword_101C40170;
  v29 = &v47;
  v30 = &v48;
  sub_1010FCD84(v40, &v26, v41);
  v44 = off_1021A0F28;
  memset(v45, 0, sizeof(v45));
  v12 = v42;
  v13 = v43;
  if (v42 != v43)
  {
    v14 = v45;
    do
    {
      v15 = *v12++;
      *v14++ = v15;
    }
    while (v12 != v13);
  }
  sub_1010FE154(v41);
  sub_1010FE154(v40);
  v16 = v11 * v11 + v10 * v10;
  if (sqrt(v16) == 0.0)
    return 0;
  v37 = off_1021A1B30;
  v38[0] = -v11 / v16;
  v38[1] = v10 / v16;
  v39 = 0;
  LOBYTE(v31) = 0;
  v32 = xmmword_101C40160;
  v33 = vdupq_n_s64(1uLL);
  v34 = v38;
  v35 = &v39;
  memset(v40, 0, sizeof(v40));
  sub_1010FE440(v40, &v31);
  v21[0] = 0;
  v22 = vdupq_n_s64(2uLL);
  v23 = xmmword_101C40150;
  v24 = v45;
  v25 = &v45[40];
  sub_1010FD21C((uint64_t)v21, (uint64_t)&v37, &v26);
  sub_1010FD3F0(v40, (uint64_t)&v26, v41);
  __dst[0] = 0;
  __dst[1] = 0;
  if (v42 == v43)
  {
    v18 = 0.0;
  }
  else
  {
    memcpy(__dst, v42, (((char *)v43 - (char *)v42 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    v18 = *(double *)__dst;
  }
  sub_1010FE154(v41);
  sub_1010FE154(&v26);
  sub_1010FE154(v40);
  result = 0;
  if ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v18 >= 0.0)
  {
    *(long double *)(a1 + 1528) = atan2(v11, v10);
    v19 = sqrt(v18);
    *(double *)(a1 + 1536) = v19;
    result = v19 <= 3.14159265;
    *(_BYTE *)(a1 + 1524) = result;
  }
  return result;
}

void sub_1010F424C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  double v20;
  double v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  NSObject *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  char *v39;
  NSObject *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  unint64_t v50;
  uint64_t v53;
  double v54;
  uint64_t v55;
  double v56;
  uint64_t i;
  uint64_t v58;
  double v59;
  __int128 v60;
  __int128 v61;
  double v62;
  uint64_t v63;
  uint64_t j;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE __B[24];
  __int128 v72;
  _BYTE v73[32];
  uint64_t (**v74)();
  __int128 v75;
  __int128 v76;
  uint64_t (**v77)();
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char v83;
  uint64_t (**v84)();
  __int128 v85;
  __int128 v86;
  uint64_t (**v87)();
  __int128 v88;
  __int128 v89;
  uint64_t (**v90)();
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  _BYTE buf[24];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;

  if ((*(_BYTE *)(a1 + 8296) & 1) != 0)
    return;
  v3 = *(_QWORD *)(a1 + 6760);
  if ((unint64_t)(0x13A524387AC82261 * ((v3 - *(_QWORD *)(a1 + 6752)) >> 3)) < 2)
    return;
  if (!*(_BYTE *)(a2 + 160))
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v40 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      v41 = *(_QWORD *)(a2 + 16);
      v42 = *(unsigned __int8 *)(a2 + 160);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v41;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v42;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "CLVLF,filterUnfusedLocation,Invalid LocData,machAbsTime,%{public}.3lf,currLocIsEnuValid,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v43 = *(_QWORD *)(a2 + 16);
      v44 = *(unsigned __int8 *)(a2 + 160);
      *(_DWORD *)v73 = 134349312;
      *(_QWORD *)&v73[4] = v43;
      *(_WORD *)&v73[12] = 1026;
      *(_DWORD *)&v73[14] = v44;
      v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,filterUnfusedLocation,Invalid LocData,machAbsTime,%{public}.3lf,currLocIsEnuValid,%{public}d", v73, 18);
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::filterUnfusedLocation(const fusion::LocData &)", "%s\n", v39);
      goto LABEL_85;
    }
    return;
  }
  v5 = v3 - 3336;
  v6 = (_OWORD *)(v3 - 2176);
  v7 = v6[1];
  *(_OWORD *)v73 = *v6;
  *(_OWORD *)&v73[16] = v7;
  v74 = off_1021A1298;
  v8 = *(_OWORD *)(v5 + 1200);
  v76 = *(_OWORD *)(v5 + 1216);
  v75 = v8;
  v77 = off_1021A1298;
  v9 = v6[6];
  v78 = v6[5];
  v79 = v9;
  v10 = v6[7];
  v11 = v6[8];
  v12 = v6[9];
  v83 = *(_BYTE *)(v5 + 1320);
  v81 = v11;
  v82 = v12;
  v80 = v10;
  v84 = off_1021A1298;
  v13 = v6[12];
  v85 = v6[11];
  v86 = v13;
  v87 = off_1021A1298;
  v14 = *(_OWORD *)(v5 + 1376);
  v89 = *(_OWORD *)(v5 + 1392);
  v88 = v14;
  v90 = off_1021A0F28;
  v91 = v6[16];
  v15 = v6[17];
  v16 = v6[18];
  v17 = v6[20];
  v94 = v6[19];
  v95 = v17;
  v92 = v15;
  v93 = v16;
  v18 = v6[21];
  v97 = *(_QWORD *)(v5 + 1512);
  v96 = v18;
  v19 = *(double *)(a2 + 16) - *(double *)&v73[16];
  *(_DWORD *)v73 = *(_DWORD *)a2;
  *(_OWORD *)&v73[8] = *(_OWORD *)(a2 + 8);
  *(_QWORD *)&v73[24] = *(_QWORD *)(a2 + 24);
  LOBYTE(v96) = 0;
  v20 = *(double *)(a2 + 144);
  v21 = *(double *)(a2 + 152);
  if (v21 > 0.0 && v20 < 0.5)
  {
    *(double *)__B = v21 * (v19 * (v19 * 0.5) * v21);
    buf[0] = 1;
    *(_OWORD *)&buf[8] = xmmword_101C1EE00;
    v99 = xmmword_101C40140;
    *(_QWORD *)&v100 = &v91;
    *((_QWORD *)&v100 + 1) = (char *)&v93 + 8;
    sub_1010FF99C((uint64_t)buf, (const double *)__B);
    *(_QWORD *)&v80 = sqrt(*(double *)&v91 + *(double *)&v93);
    v22 = *(_OWORD *)(a2 + 144);
    v81 = *(_OWORD *)(a2 + 128);
    v82 = v22;
LABEL_7:
    v23 = *(_OWORD *)&v73[16];
    *(_OWORD *)(a1 + 7936) = *(_OWORD *)v73;
    *(_OWORD *)(a1 + 7952) = v23;
    v24 = v76;
    *(_OWORD *)(a1 + 7976) = v75;
    *(_OWORD *)(a1 + 7992) = v24;
    v25 = v79;
    *(_OWORD *)(a1 + 8016) = v78;
    *(_OWORD *)(a1 + 8032) = v25;
    *(_OWORD *)(a1 + 8080) = v82;
    v26 = v80;
    *(_OWORD *)(a1 + 8064) = v81;
    *(_OWORD *)(a1 + 8048) = v26;
    v27 = v85;
    *(_OWORD *)(a1 + 8128) = v86;
    *(_OWORD *)(a1 + 8112) = v27;
    v28 = v89;
    *(_OWORD *)(a1 + 8152) = v88;
    *(_OWORD *)(a1 + 8168) = v28;
    *(_OWORD *)(a1 + 8256) = v95;
    v29 = v93;
    *(_OWORD *)(a1 + 8240) = v94;
    *(_OWORD *)(a1 + 8224) = v29;
    v30 = v91;
    *(_OWORD *)(a1 + 8208) = v92;
    *(_BYTE *)(a1 + 8096) = v83;
    *(_OWORD *)(a1 + 0x2000) = v30;
    *(_QWORD *)(a1 + 8288) = v97;
    *(_OWORD *)(a1 + 8272) = v96;
    *(_DWORD *)(a1 + 8296) = 5;
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v31 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      v32 = *(_QWORD *)(a2 + 16);
      v33 = 1.57079633 - *(double *)(a1 + 8064);
      if (v33 < 0.0 || v33 >= 6.28318531)
      {
        v33 = fmod(v33, 6.28318531);
        if (v33 < 0.0 || v33 == 0.0 && (*(_QWORD *)&v33 & 0x8000000000000000) == 0)
          v33 = v33 + 6.28318531;
      }
      v34 = *(_QWORD *)(a1 + 8080);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v32;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v33 * 57.2957795;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&v99 = v34;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLVLF,filterUnfusedLocation,Location propagated,machAbsTime,%{public}.3lf,course,%{public}.3lf,speed,%{public}.3lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v35 = qword_1022A00C8;
      v36 = *(_QWORD *)(a2 + 16);
      v37 = 1.57079633 - *(double *)(a1 + 8064);
      if (v37 < 0.0 || v37 >= 6.28318531)
      {
        v37 = fmod(v37, 6.28318531);
        if (v37 < 0.0 || v37 == 0.0 && (*(_QWORD *)&v37 & 0x8000000000000000) == 0)
          v37 = v37 + 6.28318531;
      }
      v38 = *(_QWORD *)(a1 + 8080);
      *(_DWORD *)__B = 134349568;
      *(_QWORD *)&__B[4] = v36;
      *(_WORD *)&__B[12] = 2050;
      *(double *)&__B[14] = v37 * 57.2957795;
      *(_WORD *)&__B[22] = 2050;
      *(_QWORD *)&v72 = v38;
      v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 2, "CLVLF,filterUnfusedLocation,Location propagated,machAbsTime,%{public}.3lf,course,%{public}.3lf,speed,%{public}.3lf", __B, 32);
      sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::filterUnfusedLocation(const fusion::LocData &)", "%s\n", v39);
LABEL_85:
      if (v39 != buf)
        free(v39);
      return;
    }
    return;
  }
  v45 = *(double *)(a2 + 136);
  if (v45 <= 0.0)
  {
    if (*((double *)&v81 + 1) > 0.0)
    {
      if (v21 > 0.0)
      {
        v45 = *((double *)&v81 + 1);
        v46 = *(double *)&v81;
        goto LABEL_45;
      }
      if (*((double *)&v82 + 1) > 0.0)
      {
        v46 = *(double *)&v81;
        v20 = *(double *)&v82;
        v45 = *((double *)&v81 + 1);
        v21 = *((double *)&v82 + 1);
        goto LABEL_45;
      }
    }
  }
  else
  {
    if (v21 > 0.0)
    {
      v46 = *(double *)(a2 + 128);
LABEL_45:
      sub_1010F6CC0((uint64_t)v73, v46, v45, v20, v21, v19);
      goto LABEL_47;
    }
    if (*((double *)&v82 + 1) > 0.0)
    {
      v46 = *(double *)(a2 + 128);
      v21 = *((double *)&v82 + 1);
      v20 = *(double *)&v82;
      goto LABEL_45;
    }
  }
  *(_QWORD *)&v81 = *(_QWORD *)(a2 + 128);
  *((double *)&v81 + 1) = v45;
  *(double *)&v82 = v20;
  *((double *)&v82 + 1) = v21;
LABEL_47:
  v47 = hypot(*(long double *)&v80, *((long double *)&v80 + 1));
  v48 = hypot(*(long double *)(a2 + 112), *(long double *)(a2 + 120));
  v49 = v47 + v48;
  v50 = (unint64_t)(COERCE__INT64(fabs(v47 + v48)) - 0x10000000000000) >> 53;
  if ((COERCE__INT64(v47 + v48) <= -1 || v50 >= 0x3FF)
    && (unint64_t)(COERCE__INT64(v47 + v48) - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v68 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      v69 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v69;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v47;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&v99 = v48;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "CLVLF,filterUnfusedLocation,Invalid horzAcc,machAbsTime,%{public}.3lf,prevHorzAcc,%{public}.3lf,currHorzAcc,%{public}.3lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v70 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)__B = 134349568;
      *(_QWORD *)&__B[4] = v70;
      *(_WORD *)&__B[12] = 2050;
      *(double *)&__B[14] = v47;
      *(_WORD *)&__B[22] = 2050;
      *(double *)&v72 = v48;
      v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,filterUnfusedLocation,Invalid horzAcc,machAbsTime,%{public}.3lf,prevHorzAcc,%{public}.3lf,currHorzAcc,%{public}.3lf", __B, 32);
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::filterUnfusedLocation(const fusion::LocData &)", "%s\n", v39);
      goto LABEL_85;
    }
    return;
  }
  *(_QWORD *)buf = off_1021A1298;
  *(_OWORD *)&buf[8] = v88;
  v99 = v89;
  v53 = 8;
  v54 = v48 / v49;
  do
  {
    *(double *)&buf[v53] = v54 * *(double *)&buf[v53];
    v53 += 8;
  }
  while (v53 != 32);
  *(_QWORD *)__B = off_1021A1298;
  *(_OWORD *)&__B[8] = *(_OWORD *)(a2 + 216);
  v72 = *(_OWORD *)(a2 + 232);
  v55 = 8;
  v56 = v47 / v49;
  do
  {
    *(double *)&__B[v55] = v56 * *(double *)&__B[v55];
    v55 += 8;
  }
  while (v55 != 32);
  for (i = 8; i != 32; i += 8)
    *(double *)&buf[i] = *(double *)&buf[i] + *(double *)&__B[i];
  v58 = 0;
  v88 = *(_OWORD *)&buf[8];
  v89 = v99;
  v59 = v54 * v54;
  do
  {
    *(double *)((char *)&v91 + v58) = v59 * *(double *)((char *)&v91 + v58);
    v58 += 8;
  }
  while (v58 != 72);
  v60 = *(_OWORD *)(a2 + 256);
  v99 = *(_OWORD *)(a2 + 272);
  v61 = *(_OWORD *)(a2 + 304);
  v100 = *(_OWORD *)(a2 + 288);
  v101 = v61;
  v102 = *(_OWORD *)(a2 + 320);
  v62 = v56 * v56;
  *(_QWORD *)buf = off_1021A0F28;
  v63 = 8;
  *(_OWORD *)&buf[8] = v60;
  do
  {
    *(double *)&buf[v63] = v62 * *(double *)&buf[v63];
    v63 += 8;
  }
  while (v63 != 80);
  for (j = 0; j != 72; j += 8)
    *(double *)((char *)&v91 + j) = *(double *)((char *)&v91 + j) + *(double *)&buf[j + 8];
  *(_QWORD *)&v80 = sqrt(*(double *)&v91 + *(double *)&v93);
  *((_QWORD *)&v80 + 1) = sqrt(*(double *)&v95);
  if (!cnnavigation::ENUToECEF(&v88, 1, 1, a1 + 7864, 0, &v78)
    && !cnnavigation::ECEFToLLA(&v78, 1, &v75))
  {
    goto LABEL_7;
  }
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
  v65 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
  {
    v66 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v66;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "CLVLF,filterUnfusedLocation,Propagated LLA invalid,machAbsTime,%{public}.3lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v67 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)__B = 134349056;
    *(_QWORD *)&__B[4] = v67;
    v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,filterUnfusedLocation,Propagated LLA invalid,machAbsTime,%{public}.3lf", __B, 12);
    sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::filterUnfusedLocation(const fusion::LocData &)", "%s\n", v39);
    goto LABEL_85;
  }
}

void sub_1010F4DD0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1010F4DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unint64_t v25;
  double v28;
  double v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t (**v38)();
  __int128 v39;
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  uint64_t (**v48)();
  __int128 v49;
  __int128 v50;
  uint64_t (**v51)();
  __int128 v52;
  __int128 v53;
  uint64_t (**v54)();
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  double v61;
  int v62;
  uint64_t v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  uint8_t buf[4];
  uint64_t v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;

  if ((*(_BYTE *)(a1 + 8296) & 2) != 0)
  {
    v3 = *(_QWORD *)(a1 + 6752);
    if (v3 != *(_QWORD *)(a1 + 6760))
    {
      if (*(_DWORD *)(v3 + 1904) | *(_DWORD *)a2)
      {
        v5 = *(_OWORD *)(a1 + 7952);
        v37[0] = *(_OWORD *)(a1 + 7936);
        v37[1] = v5;
        v38 = off_1021A1298;
        v39 = *(_OWORD *)(a1 + 7976);
        v40 = *(_OWORD *)(a1 + 7992);
        v41 = off_1021A1298;
        v6 = *(_OWORD *)(a1 + 8032);
        v42 = *(_OWORD *)(a1 + 8016);
        v43 = v6;
        v7 = *(_OWORD *)(a1 + 8048);
        v8 = *(_OWORD *)(a1 + 8064);
        v9 = *(_OWORD *)(a1 + 8080);
        v47 = *(_BYTE *)(a1 + 8096);
        v45 = v8;
        v46 = v9;
        v44 = v7;
        v48 = off_1021A1298;
        v10 = *(_OWORD *)(a1 + 8128);
        v49 = *(_OWORD *)(a1 + 8112);
        v50 = v10;
        v52 = *(_OWORD *)(a1 + 8152);
        v53 = *(_OWORD *)(a1 + 8168);
        v51 = off_1021A1298;
        v54 = off_1021A0F28;
        v11 = *(_OWORD *)(a1 + 0x2000);
        v12 = *(_OWORD *)(a1 + 8208);
        v13 = *(_OWORD *)(a1 + 8240);
        v14 = *(_OWORD *)(a1 + 8256);
        v57 = *(_OWORD *)(a1 + 8224);
        v58 = v13;
        v55 = v11;
        v56 = v12;
        v15 = *(_OWORD *)(a1 + 8272);
        v61 = *(double *)(a1 + 8288);
        v59 = v14;
        v60 = v15;
        if (sub_1010F25F8(v3 + 1160, (uint64_t)v37, (uint64_t)v37))
        {
          v16 = *((_QWORD *)&v60 + 1);
          v17 = *(double *)(a1 + 8064);
          v18 = vabdd_f64(*((double *)&v60 + 1), v17);
          if (6.28318531 - v18 >= v18)
            v19 = v18;
          else
            v19 = 6.28318531 - v18;
          v20 = *(double *)(a1 + 8072);
          v21 = v20 * 1.5;
          if (v20 * 1.5 > 3.14159265)
            v21 = 3.14159265;
          if (v19 > v21)
          {
            v22 = v61;
            v23 = sqrt(v61);
            v24 = v20 + v23;
            v25 = (unint64_t)(COERCE__INT64(fabs(v20 + v23)) - 0x10000000000000) >> 53;
            if ((COERCE__INT64(v20 + v23) <= -1 || v25 >= 0x3FF)
              && (unint64_t)(COERCE__INT64(v20 + v23) - 1) >= 0xFFFFFFFFFFFFFLL)
            {
              if (qword_1022A00C0 != -1)
                dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
              v34 = qword_1022A00C8;
              if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
              {
                v35 = *(_QWORD *)(a2 + 40);
                *(_DWORD *)buf = 134349568;
                v69 = v35;
                v70 = 2050;
                v71 = v20;
                v72 = 2050;
                v73 = v23;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLVLF,filterFusedCourse,Invalid courseAcc,machAbsTime,%{public}.3lf,prevCourseAcc,%{public}.3lf,currCourseAcc,%{public}.3lf", buf, 0x20u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00C0 != -1)
                  dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
                v36 = *(_QWORD *)(a2 + 40);
                v62 = 134349568;
                v63 = v36;
                v64 = 2050;
                v65 = v20;
                v66 = 2050;
                v67 = v23;
                v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,filterFusedCourse,Invalid courseAcc,machAbsTime,%{public}.3lf,prevCourseAcc,%{public}.3lf,currCourseAcc,%{public}.3lf", &v62, 32);
                sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::filterFusedCourse(const fusion::VioData &)", "%s\n", v33);
                goto LABEL_35;
              }
            }
            else
            {
              v28 = v23 / v24;
              v29 = v20 / v24;
              *(double *)(a1 + 8064) = *((double *)&v60 + 1) * v29 + v28 * v17;
              *(double *)(a1 + 8072) = sqrt(v22 * (v29 * v29) + v20 * (v28 * v28) * v20);
              *(_BYTE *)(a1 + 8272) = v60;
              *(_QWORD *)(a1 + 8280) = v16;
              *(double *)(a1 + 8288) = v22;
              if (qword_1022A00C0 != -1)
                dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
              v30 = qword_1022A00C8;
              if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
              {
                v31 = *(_QWORD *)(a2 + 40);
                *(_DWORD *)buf = 134349312;
                v69 = v31;
                v70 = 2050;
                v71 = v19 * 57.2957795;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLVLF,filterFusedCourse,Course adjusted,machAbsTime,%{public}.3lf,courseDiff,%{public}.3lf", buf, 0x16u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00C0 != -1)
                  dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
                v32 = *(_QWORD *)(a2 + 40);
                v62 = 134349312;
                v63 = v32;
                v64 = 2050;
                v65 = v19 * 57.2957795;
                v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,filterFusedCourse,Course adjusted,machAbsTime,%{public}.3lf,courseDiff,%{public}.3lf", &v62, 22);
                sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::filterFusedCourse(const fusion::VioData &)", "%s\n", v33);
LABEL_35:
                if (v33 != (char *)buf)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
}

void sub_1010F5308(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1010F5314(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  v6 = *(_OWORD *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 120);
  v8 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  v11 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v11;
  memcpy((void *)(a1 + 248), (const void *)(a2 + 248), 0x128uLL);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  v13 = *(_OWORD *)(a2 + 560);
  v12 = *(_OWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 560) = v13;
  *(_OWORD *)(a1 + 576) = v12;
  v15 = *(_OWORD *)(a2 + 624);
  v14 = *(_OWORD *)(a2 + 640);
  v16 = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 672) = v16;
  *(_OWORD *)(a1 + 624) = v15;
  *(_OWORD *)(a1 + 640) = v14;
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  v17 = *(_OWORD *)(a2 + 696);
  v18 = *(_OWORD *)(a2 + 712);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = v18;
  *(_OWORD *)(a1 + 696) = v17;
  v19 = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 744) = v19;
  memcpy((void *)(a1 + 784), (const void *)(a2 + 784), 0x128uLL);
  v20 = *(_OWORD *)(a2 + 1088);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
  *(_OWORD *)(a1 + 1088) = v20;
  v21 = *(_OWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1144) = v21;
  v22 = *(_OWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 1176) = v22;
  v23 = *(_OWORD *)(a2 + 1216);
  *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a2 + 1200);
  *(_OWORD *)(a1 + 1216) = v23;
  v24 = *(_OWORD *)(a2 + 1256);
  *(_OWORD *)(a1 + 1240) = *(_OWORD *)(a2 + 1240);
  *(_OWORD *)(a1 + 1256) = v24;
  v25 = *(_BYTE *)(a2 + 1320);
  v27 = *(_OWORD *)(a2 + 1288);
  v26 = *(_OWORD *)(a2 + 1304);
  *(_OWORD *)(a1 + 1272) = *(_OWORD *)(a2 + 1272);
  *(_OWORD *)(a1 + 1288) = v27;
  *(_OWORD *)(a1 + 1304) = v26;
  *(_BYTE *)(a1 + 1320) = v25;
  v28 = *(_OWORD *)(a2 + 1352);
  *(_OWORD *)(a1 + 1336) = *(_OWORD *)(a2 + 1336);
  *(_OWORD *)(a1 + 1352) = v28;
  v29 = *(_OWORD *)(a2 + 1392);
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
  *(_OWORD *)(a1 + 1392) = v29;
  *(_OWORD *)(a1 + 1416) = *(_OWORD *)(a2 + 1416);
  v30 = *(_OWORD *)(a2 + 1480);
  v32 = *(_OWORD *)(a2 + 1432);
  v31 = *(_OWORD *)(a2 + 1448);
  *(_OWORD *)(a1 + 1464) = *(_OWORD *)(a2 + 1464);
  *(_OWORD *)(a1 + 1480) = v30;
  *(_OWORD *)(a1 + 1432) = v32;
  *(_OWORD *)(a1 + 1448) = v31;
  v33 = *(_OWORD *)(a2 + 1496);
  *(_QWORD *)(a1 + 1512) = *(_QWORD *)(a2 + 1512);
  *(_OWORD *)(a1 + 1496) = v33;
  v34 = *(_QWORD *)(a2 + 1536);
  *(_OWORD *)(a1 + 1520) = *(_OWORD *)(a2 + 1520);
  *(_QWORD *)(a1 + 1536) = v34;
  sub_1010F6AAC(a1 + 1544, a2 + 1544);
  return a1;
}

BOOL sub_1010F54E4(_QWORD *a1)
{
  uint64_t i;
  uint64_t j;
  uint64_t v4;
  _QWORD *v5;
  uint64_t k;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;

  for (i = 0; i != 4; ++i)
  {
    if ((a1[i + 867] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      return 0;
  }
  for (j = 0; j != 3; ++j)
  {
    if ((a1[j + 873] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      return 0;
  }
  v4 = 0;
  v5 = a1 + 878;
  do
  {
    if ((v5[v4] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      return 0;
    ++v4;
  }
  while (v4 != 36);
  for (k = 0; k != 42; k += 7)
  {
    if (*(double *)&v5[k] <= 0.0)
      return 0;
  }
  v7 = a1[844];
  v8 = a1[845];
  if (v7 == v8)
    return 1;
  LOBYTE(v9) = 1;
  v10 = 1;
  do
  {
    v10 &= (*(_DWORD *)(v7 + 1520) & 3) == 0;
    v9 &= (*(_DWORD *)(v7 + 1520) & 4u) >> 2;
    v7 += 3336;
  }
  while (v7 != v8);
  if ((v10 & 1) != 0)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v11 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      v12 = 0x13A524387AC82261 * ((uint64_t)(a1[845] - a1[844]) >> 3);
      v13 = a1[994];
      *(_DWORD *)buf = 134218240;
      v28 = v12;
      v29 = 2050;
      v30 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLVLF,checkStateHealth,Location not fused consecutively for last %zu epochs,machAbsTime,%{public}.3lf", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v15 = 0x13A524387AC82261 * ((uint64_t)(a1[845] - a1[844]) >> 3);
    v16 = a1[994];
    v23 = 134218240;
    v24 = v15;
    v25 = 2050;
    v26 = v16;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,checkStateHealth,Location not fused consecutively for last %zu epochs,machAbsTime,%{public}.3lf", &v23, 22);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::checkStateHealth()", "%s\n", v17);
    goto LABEL_34;
  }
  if (!v9)
    return 1;
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
  v18 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
  {
    v19 = 0x13A524387AC82261 * ((uint64_t)(a1[845] - a1[844]) >> 3);
    v20 = a1[994];
    *(_DWORD *)buf = 134218240;
    v28 = v19;
    v29 = 2050;
    v30 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLVLF,checkStateHealth,Location propagated consecutively for last %zu epochs,machAbsTime,%{public}.3lf", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 2);
  if (!result)
    return result;
  bzero(buf, 0x65CuLL);
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
  v21 = 0x13A524387AC82261 * ((uint64_t)(a1[845] - a1[844]) >> 3);
  v22 = a1[994];
  v23 = 134218240;
  v24 = v21;
  v25 = 2050;
  v26 = v22;
  v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,checkStateHealth,Location propagated consecutively for last %zu epochs,machAbsTime,%{public}.3lf", &v23, 22);
  sub_100512490("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::checkStateHealth()", "%s\n", v17);
LABEL_34:
  if (v17 != (char *)buf)
    free(v17);
  return 0;
}

void sub_1010F5980(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_1010F598C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  int v5;
  _BOOL8 result;
  NSObject *v7;
  char *v8;
  NSObject *v9;
  double v10;
  double v11;
  double v12;
  _WORD v13[8];
  uint8_t buf[1640];

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a3 + 176) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a3 + 192) = v3;
  *(_BYTE *)(a3 + 160) = 0;
  if (*(double *)(a3 + 112) <= 0.0)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v7 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLVLF,computeEnuFromEcef,latitude/longitude unavailable", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v13[0] = 0;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,computeEnuFromEcef,latitude/longitude unavailable", v13, 2);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLVisionLocationFuser::computeEnuFromEcef(const math::Vector3 &, const math::Vector3 &, fusion::LocData &)", "%s\n", v8);
LABEL_21:
    if (v8 != (char *)buf)
      free(v8);
    return 0;
  }
  if (*(double *)(a3 + 120) <= 0.0)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v9 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLVLF,computeEnuFromEcef,altitude unavailable", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v13[0] = 0;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,computeEnuFromEcef,altitude unavailable", v13, 2);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLVisionLocationFuser::computeEnuFromEcef(const math::Vector3 &, const math::Vector3 &, fusion::LocData &)", "%s\n", v8);
    goto LABEL_21;
  }
  v5 = cnnavigation::ECEFToENU(a1 + 8, 1, 1, a2 + 8, 0, a3 + 216);
  *(_BYTE *)(a3 + 160) = v5 == 0;
  if (v5)
    return 0;
  v10 = *(double *)(a3 + 120);
  v11 = *(double *)(a3 + 112) * (*(double *)(a3 + 112) * 0.5);
  *(double *)(a3 + 288) = v11;
  *(double *)(a3 + 256) = v11;
  v12 = v10 * v10;
  if (v10 < 0.0)
    v12 = 0.0;
  *(double *)(a3 + 320) = v12;
  return 1;
}

void sub_1010F5CC0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_1010F5CCC(uint64_t a1)
{
  double v2;
  BOOL v3;
  _BOOL4 v4;

  v2 = *(double *)(a1 + 152);
  if (*(_BYTE *)(a1 + 1784))
    v3 = *(_BYTE *)(a1 + 1616) == 0;
  else
    v3 = 1;
  if (v3 || v2 <= 0.0)
  {
    return v2 > 0.0 && *(double *)(a1 + 144) < 0.5;
  }
  else
  {
    v4 = hypot(*(long double *)(a1 + 1632), *(long double *)(a1 + 1640)) / *(double *)(a1 + 1752) < 0.4;
    return *(double *)(a1 + 144) < 0.5 && v4;
  }
}

BOOL sub_1010F5D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  _BOOL8 result;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  char *v17;
  int8x16_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  double v29;
  NSObject *v30;
  uint64_t v31;
  double *v32;
  double *v33;
  float64x2_t *v34;
  float64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  int8x16_t v40;
  double v41;
  int8x16_t v42;
  double v43;
  double v44;
  double v45;
  float64x2_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void *v77;
  char *v78;
  uint64_t v79;
  int8x16_t v80;
  uint64_t v81;
  int8x16_t v82;
  int8x16_t v83;
  __int128 v84;
  __int128 v85;
  char v86[8];
  double v87;
  double v88;
  double v89;
  float64x2_t v90;
  double v91;
  uint64_t (**v92)();
  float64x2_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  _QWORD __dst[2];
  char v104[8];
  float64x2_t v105;
  double v106;
  float64x2_t v107;
  double v108;
  float64x2_t v109;
  double v110;
  uint64_t (**v111)();
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t (**v117)();
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t (**v123)();
  __int128 v124;
  __int128 v125;
  int v126;
  _BYTE v127[20];
  _BYTE v128[38];
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  void *__p[3];
  int64x2_t v146;
  __int128 *v147;
  char *v148;
  uint64_t v149;
  _BYTE v150[24];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint8_t buf[72];
  _BYTE v161[10];
  __int16 v162;
  uint64_t v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  uint64_t v167;
  __int16 v168;
  uint64_t v169;
  __int16 v170;
  uint64_t v171;
  __int16 v172;
  uint64_t v173;

  if (*(_BYTE *)(a2 + 1784))
    v5 = *(_BYTE *)(a2 + 160) == 0;
  else
    v5 = 1;
  if (v5 || *(_BYTE *)(a3 + 1320) == 0)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v7 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a2 + 16);
      v9 = *(unsigned __int8 *)(a2 + 1784);
      v10 = *(unsigned __int8 *)(a2 + 160);
      v11 = *(unsigned __int8 *)(a3 + 1320);
      *(_DWORD *)buf = 134349824;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v9;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v10;
      *(_WORD *)&buf[24] = 1026;
      *(_DWORD *)&buf[26] = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLVLF,updateWithCLPoints,Invalid measurement,machAbsTime,%{public}.3lf,isVioSynced,%{public}d,isLocEnuValid,%{public}d,isPredictedStateEnuValid,%{public}d", buf, 0x1Eu);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v13 = *(_QWORD *)(a2 + 16);
      v14 = *(unsigned __int8 *)(a2 + 1784);
      v15 = *(unsigned __int8 *)(a2 + 160);
      v16 = *(unsigned __int8 *)(a3 + 1320);
      *(_DWORD *)v150 = 134349824;
      *(_QWORD *)&v150[4] = v13;
      *(_WORD *)&v150[12] = 1026;
      *(_DWORD *)&v150[14] = v14;
      *(_WORD *)&v150[18] = 1026;
      *(_DWORD *)&v150[20] = v15;
      LOWORD(v151) = 1026;
      *(_DWORD *)((char *)&v151 + 2) = v16;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,updateWithCLPoints,Invalid measurement,machAbsTime,%{public}.3lf,isVioSynced,%{public}d,isLocEnuValid,%{public}d,isPredictedStateEnuValid,%{public}d", v150, 30);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::updateWithPoints(const fusion::LocationFuserMeasurement<fusion::LocData> &, const fusion::LocationFuserState &)", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
      return 0;
    }
  }
  else
  {
    HIDWORD(v79) = sub_1010FB4C8(a1 + 4960, a2, a3);
    v20 = 0;
    v123 = off_1021A1298;
    v124 = *(_OWORD *)(a2 + 216);
    v125 = *(_OWORD *)(a2 + 232);
    do
    {
      *(double *)&(&v123)[v20 + 1] = *(double *)&(&v123)[v20 + 1] - *(double *)(a3 + 744 + v20 * 8);
      ++v20;
    }
    while (v20 != 3);
    *(_OWORD *)&v150[8] = 0u;
    v151 = 0u;
    v152 = 0u;
    v153 = 0u;
    v154 = 0u;
    v155 = 0u;
    v156 = 0u;
    v157 = 0u;
    v158 = 0u;
    *(_QWORD *)v150 = off_1021A1608;
    v159 = 0;
    v81 = a1 + 6784;
    sub_10149E0BC((double *)(a1 + 6840), a1 + 6928, (double *)(a2 + 608), (uint64_t)buf, (int8x16_t)0, v19);
    *(_OWORD *)&v150[8] = *(_OWORD *)&buf[8];
    v151 = *(_OWORD *)&buf[24];
    v152 = *(_OWORD *)&buf[40];
    v153 = *(_OWORD *)&buf[56];
    *(_QWORD *)&v154 = *(_QWORD *)v161;
    *((_QWORD *)&v158 + 1) = 0x3FF0000000000000;
    *((_QWORD *)&v156 + 1) = 0x3FF0000000000000;
    *((_QWORD *)&v154 + 1) = 0x3FF0000000000000;
    LOBYTE(__p[0]) = 0;
    *(int64x2_t *)&__p[1] = vdupq_n_s64(3uLL);
    v146 = (int64x2_t)xmmword_101B9B430;
    v147 = (__int128 *)(a2 + 824);
    v148 = (char *)(a2 + 944);
    sub_1010FAE94(a1 + 6840, (uint64_t *)__p, (uint64_t *)buf);
    v117 = off_1021A0F28;
    v118 = 0u;
    v119 = 0u;
    v120 = 0u;
    v121 = 0u;
    v122 = 0u;
    v21 = *(uint64_t **)&buf[24];
    v22 = *(uint64_t **)&buf[32];
    if (*(_QWORD *)&buf[24] != *(_QWORD *)&buf[32])
    {
      v23 = &v118;
      do
      {
        v24 = *v21++;
        *(_QWORD *)v23 = v24;
        v23 = (__int128 *)((char *)v23 + 8);
      }
      while (v21 != v22);
    }
    sub_1010FE154(buf);
    buf[0] = 0;
    *(int64x2_t *)&buf[8] = vdupq_n_s64(3uLL);
    *(_OWORD *)&buf[24] = xmmword_101C40170;
    *(_QWORD *)&buf[40] = a1 + 6848;
    *(_QWORD *)&buf[48] = a1 + 6920;
    sub_1010FFD80((double *)&v117, buf);
    for (i = 0; i != 9; ++i)
      *(double *)&(&v117)[i + 1] = *(double *)&(&v117)[i + 1] + *(double *)(a2 + 256 + i * 8);
    sub_1010FB0E4((uint64_t)v150, a1 + 7016, (uint64_t)buf);
    LOBYTE(v92) = 1;
    v93 = (float64x2_t)xmmword_101C40180;
    v94 = xmmword_101C40170;
    *(_QWORD *)&v95 = &v150[8];
    *((_QWORD *)&v95 + 1) = &v159;
    sub_1010FB010((uint64_t)buf, (uint64_t *)&v92, (uint64_t *)__p);
    v26 = 0;
    v113 = v119;
    v114 = v120;
    v115 = v121;
    v116 = v122;
    v111 = off_1021A0F28;
    v112 = v118;
    v27 = v146.i64[0];
    do
    {
      *(double *)&(&v111)[v26 + 1] = *(double *)&(&v111)[v26 + 1] + *(double *)(v27 + v26 * 8);
      ++v26;
    }
    while (v26 != 9);
    sub_1010FE154(__p);
    memset(buf, 0, 24);
    memset(__p, 0, sizeof(__p));
    sub_1010FB184((uint64_t)&v111, (uint64_t)v104);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    LOBYTE(__p[0]) = 0;
    *(_OWORD *)&__p[1] = xmmword_101C40150;
    v146 = vdupq_n_s64(1uLL);
    v147 = &v124;
    v148 = (char *)&v125 + 8;
    v92 = off_1021A1298;
    *((_QWORD *)&v94 + 1) = 0;
    v93 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v107, *((double *)&v124 + 1)), v105, *(double *)&v124), v109, *(double *)&v125);
    *(double *)&v94 = *((double *)&v124 + 1) * v108 + v106 * *(double *)&v124 + v110 * *(double *)&v125;
    sub_1010FB260((uint64_t)__p, (uint64_t)&v92, (uint64_t *)buf);
    __dst[0] = 0;
    __dst[1] = 0;
    v28 = &qword_1022A0000;
    if (*(_QWORD *)&buf[24] == *(_QWORD *)&buf[32])
    {
      sub_1010FE154(buf);
    }
    else
    {
      memcpy(__dst, *(const void **)&buf[24], ((*(_QWORD *)&buf[32] - *(_QWORD *)&buf[24] - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
      v29 = *(double *)__dst;
      sub_1010FE154(buf);
      if (v29 > 6.7553467)
      {
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v30 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
        {
          v31 = *(_QWORD *)(a2 + 16);
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)&buf[4] = v31;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = HIDWORD(v79);
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLVLF,updateWithCLPoints,Mahalanobis test failed,machAbsTime,%{public}.3lf,forceUpdateNeeded,%{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
          v77 = *(void **)(a2 + 16);
          LODWORD(__p[0]) = 134349312;
          *(void **)((char *)__p + 4) = v77;
          WORD2(__p[1]) = 1026;
          *(_DWORD *)((char *)&__p[1] + 6) = HIDWORD(v79);
          LODWORD(v79) = 18;
          v78 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,updateWithCLPoints,Mahalanobis test failed,machAbsTime,%{public}.3lf,forceUpdateNeeded,%{public}d", __p, v79);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::updateWithPoints(const fusion::LocationFuserMeasurement<fusion::LocData> &, const fusion::LocationFuserState &)", "%s\n", v78);
          if (v78 != (char *)buf)
            free(v78);
        }
        v28 = &qword_1022A0000;
        if (!HIDWORD(v79))
          return 0;
      }
    }
    sub_1010FB0E4((uint64_t)v150, a1 + 7016, (uint64_t)__p);
    LOBYTE(v126) = 0;
    *(_OWORD *)&v127[4] = xmmword_101C40180;
    *(_OWORD *)v128 = xmmword_101C40170;
    *(_QWORD *)&v128[16] = &__p[1];
    *(_QWORD *)&v128[24] = &v149;
    sub_1010FB2F0((uint64_t)&v126, (uint64_t)v104, (uint64_t *)buf);
    v92 = off_1021A17C0;
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v100 = 0u;
    v101 = 0u;
    v102 = 0;
    v32 = *(double **)&buf[24];
    v33 = *(double **)&buf[32];
    if (*(_QWORD *)&buf[24] != *(_QWORD *)&buf[32])
    {
      v34 = &v93;
      do
      {
        v35 = *v32++;
        v34->f64[0] = v35;
        v34 = (float64x2_t *)((char *)v34 + 8);
      }
      while (v32 != v33);
    }
    sub_1010FE154(buf);
    sub_1010FB390((uint64_t)&v92, (uint64_t)&v123, (uint64_t)v86);
    *(float64x2_t *)(a1 + 6984) = vaddq_f64(v90, *(float64x2_t *)(a1 + 6984));
    *(double *)(a1 + 7000) = v91 + *(double *)(a1 + 7000);
    sub_1010FB408((uint64_t)&v92, (uint64_t)__p, (uint64_t)buf);
    sub_1010FFD4C(a1 + 7016, (uint64_t)buf);
    if (sqrt(v88 * v88 + v87 * v87 + v89 * v89) != 0.0)
    {
      LOBYTE(v126) = 0;
      *(_OWORD *)&v127[4] = xmmword_101C40170;
      *(int64x2_t *)v128 = vdupq_n_s64(1uLL);
      *(_QWORD *)&v128[16] = a1 + 6936;
      *(_QWORD *)&v128[24] = a1 + 6960;
      memset(buf, 0, sizeof(buf));
      sub_1010FE440((uint64_t *)buf, &v126);
      sub_1010FFB08((uint64_t)buf, (const double *)(a1 + 6960));
      v84 = 0u;
      v85 = 0u;
      if (*(_QWORD *)&buf[24] == *(_QWORD *)&buf[32])
      {
        v38 = 0.0;
        v36 = 0.0;
        v37 = 0.0;
      }
      else
      {
        memcpy(&v84, *(const void **)&buf[24], ((*(_QWORD *)&buf[32] - *(_QWORD *)&buf[24] - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
        v36 = *((double *)&v84 + 1);
        v37 = *(double *)&v84;
        v38 = *(double *)&v85;
      }
      sub_1010FE154(buf);
      v39 = v87 + v37;
      *(double *)v40.i64 = v88 + v36;
      v41 = v89 + v38;
      *(double *)v42.i64 = sqrt(*(double *)v40.i64 * *(double *)v40.i64 + v39 * v39 + v41 * v41);
      if (*(double *)v42.i64 == 0.0)
      {
        v42 = 0uLL;
        memset(&buf[8], 0, 32);
        *(_QWORD *)buf = off_1021A0D18;
      }
      else
      {
        v43 = v39 / *(double *)v42.i64;
        v44 = *(double *)v40.i64 / *(double *)v42.i64;
        v40.i64[0] = 0x400921FB54442D18;
        v45 = v41 / *(double *)v42.i64;
        if (*(double *)v42.i64 > 3.14159265)
        {
          v46.f64[0] = NAN;
          v46.f64[1] = NAN;
          v82 = (int8x16_t)vnegq_f64(v46);
          v83 = vbslq_s8(v82, v40, v42);
          v80 = v40;
          *(double *)v42.i64 = fmod(*(double *)v42.i64 + *(double *)v83.i64, 6.28318531);
          *(_QWORD *)&v41 = vbslq_s8(v82, v80, v42).u64[0];
          v40.i64[1] = v83.i64[1];
          *(double *)v40.i64 = *(double *)v42.i64 - *(double *)v83.i64;
          if (*(double *)v42.i64 == 0.0)
            *(double *)v42.i64 = v41;
          else
            *(double *)v42.i64 = *(double *)v42.i64 - *(double *)v83.i64;
        }
        *(_QWORD *)buf = off_1021A0D18;
        *(double *)&buf[8] = v43;
        *(double *)&buf[16] = v44;
        *(double *)&buf[24] = v45;
        *(_QWORD *)&buf[32] = v42.i64[0];
      }
      *(_QWORD *)&buf[40] = 0;
      sub_10149CEB4(v81, (uint64_t)buf, v42, v41, v40);
    }
    sub_10149D5F0(v81);
    if (v28[24] != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v47 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      v48 = *(_QWORD *)(a2 + 16);
      v49 = *(_QWORD *)(a1 + 6936);
      v50 = *(_QWORD *)(a1 + 6944);
      v51 = *(_QWORD *)(a1 + 6952);
      v52 = *(double *)(a1 + 6960) * 57.2957795;
      v53 = *(_QWORD *)(a1 + 6984);
      v54 = *(_QWORD *)(a1 + 6992);
      v55 = *(_QWORD *)(a1 + 7000);
      v56 = *(_QWORD *)(a1 + 7024);
      v57 = *(_QWORD *)(a1 + 7080);
      v58 = *(_QWORD *)(a1 + 7136);
      v59 = *(_QWORD *)(a1 + 7192);
      v60 = *(_QWORD *)(a1 + 7248);
      v61 = *(_QWORD *)(a1 + 7304);
      *(_DWORD *)buf = 134352385;
      *(_QWORD *)&buf[4] = v48;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v49;
      *(_WORD *)&buf[22] = 2049;
      *(_QWORD *)&buf[24] = v50;
      *(_WORD *)&buf[32] = 2049;
      *(_QWORD *)&buf[34] = v51;
      *(_WORD *)&buf[42] = 2049;
      *(double *)&buf[44] = v52;
      *(_WORD *)&buf[52] = 2049;
      *(_QWORD *)&buf[54] = v53;
      *(_WORD *)&buf[62] = 2049;
      *(_QWORD *)&buf[64] = v54;
      *(_WORD *)v161 = 2049;
      *(_QWORD *)&v161[2] = v55;
      v162 = 2049;
      v163 = v56;
      v164 = 2049;
      v165 = v57;
      v166 = 2049;
      v167 = v58;
      v168 = 2049;
      v169 = v59;
      v170 = 2049;
      v171 = v60;
      v172 = 2049;
      v173 = v61;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "CLVLF,updateWithCLPoints,Filter updated,machAbsTime,%{public}.3lf,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", buf, 0x8Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v62 = *(_QWORD *)(a2 + 16);
      v63 = *(_QWORD *)(a1 + 6936);
      v64 = *(_QWORD *)(a1 + 6944);
      v65 = *(_QWORD *)(a1 + 6952);
      v66 = *(double *)(a1 + 6960) * 57.2957795;
      v67 = *(_QWORD *)(a1 + 6984);
      v68 = *(_QWORD *)(a1 + 6992);
      v69 = *(_QWORD *)(a1 + 7000);
      v70 = *(_QWORD *)(a1 + 7024);
      v71 = *(_QWORD *)(a1 + 7080);
      v72 = *(_QWORD *)(a1 + 7136);
      v73 = *(_QWORD *)(a1 + 7192);
      v74 = *(_QWORD *)(a1 + 7248);
      v75 = *(_QWORD *)(a1 + 7304);
      v126 = 134352385;
      *(_QWORD *)v127 = v62;
      *(_WORD *)&v127[8] = 2049;
      *(_QWORD *)&v127[10] = v63;
      *(_WORD *)&v127[18] = 2049;
      *(_QWORD *)v128 = v64;
      *(_WORD *)&v128[8] = 2049;
      *(_QWORD *)&v128[10] = v65;
      *(_WORD *)&v128[18] = 2049;
      *(double *)&v128[20] = v66;
      *(_WORD *)&v128[28] = 2049;
      *(_QWORD *)&v128[30] = v67;
      v129 = 2049;
      v130 = v68;
      v131 = 2049;
      v132 = v69;
      v133 = 2049;
      v134 = v70;
      v135 = 2049;
      v136 = v71;
      v137 = 2049;
      v138 = v72;
      v139 = 2049;
      v140 = v73;
      v141 = 2049;
      v142 = v74;
      v143 = 2049;
      v144 = v75;
      LODWORD(v79) = 142;
      v76 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,updateWithCLPoints,Filter updated,machAbsTime,%{public}.3lf,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", &v126, v79);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::updateWithPoints(const fusion::LocationFuserMeasurement<fusion::LocData> &, const fusion::LocationFuserState &)", "%s\n", v76);
      if (v76 != (char *)buf)
        free(v76);
    }
    return 1;
  }
  return result;
}

void sub_1010F6AA0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1010F6AAC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  v9 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  v11 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v11;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  v12 = *(_OWORD *)(a2 + 272);
  v13 = *(_OWORD *)(a2 + 288);
  v14 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v14;
  *(_OWORD *)(a1 + 272) = v12;
  *(_OWORD *)(a1 + 288) = v13;
  v15 = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = v15;
  v16 = (_OWORD *)(a1 + 360);
  v17 = (_OWORD *)(a2 + 360);
  v18 = *(_OWORD *)(a2 + 360);
  v19 = *(_OWORD *)(a2 + 376);
  v20 = *(_OWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 376) = v19;
  *(_OWORD *)(a1 + 392) = v20;
  *(_OWORD *)(a1 + 360) = v18;
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  v21 = *(_OWORD *)(a2 + 432);
  v22 = *(_OWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 432) = v21;
  *(_OWORD *)(a1 + 448) = v22;
  v23 = *(_OWORD *)(a2 + 544);
  v25 = *(_OWORD *)(a2 + 496);
  v24 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 544) = v23;
  *(_OWORD *)(a1 + 496) = v25;
  *(_OWORD *)(a1 + 512) = v24;
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  v26 = *(_OWORD *)(a2 + 568);
  v27 = *(_OWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 568) = v26;
  *(_OWORD *)(a1 + 584) = v27;
  v28 = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 616) = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 632) = v28;
  memcpy((void *)(a1 + 656), (const void *)(a2 + 656), 0x128uLL);
  *(_BYTE *)(a1 + 952) = *(_BYTE *)(a2 + 952);
  v30 = v17[38];
  v29 = v17[39];
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  v16[38] = v30;
  v16[39] = v29;
  v32 = v17[42];
  v31 = v17[43];
  v33 = v17[45];
  v16[44] = v17[44];
  v16[45] = v33;
  v16[42] = v32;
  v16[43] = v31;
  v16[41] = v17[41];
  v34 = *(_OWORD *)(a2 + 1104);
  v35 = *(_OWORD *)(a2 + 1120);
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 1136);
  *(_OWORD *)(a1 + 1120) = v35;
  *(_OWORD *)(a1 + 1104) = v34;
  v36 = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  *(_OWORD *)(a1 + 1152) = v36;
  memcpy((void *)(a1 + 1192), (const void *)(a2 + 1192), 0x128uLL);
  v37 = v17[71];
  v16[72] = v17[72];
  v16[71] = v37;
  *(_OWORD *)(a1 + 1536) = *(_OWORD *)(a2 + 1536);
  v38 = *(_OWORD *)(a2 + 1568);
  v39 = *(_OWORD *)(a2 + 1584);
  v40 = *(_OWORD *)(a2 + 1600);
  *(_OWORD *)(a1 + 1552) = *(_OWORD *)(a2 + 1552);
  *(_OWORD *)(a1 + 1600) = v40;
  *(_OWORD *)(a1 + 1584) = v39;
  *(_OWORD *)(a1 + 1568) = v38;
  *(_BYTE *)(a1 + 1616) = *(_BYTE *)(a2 + 1616);
  v41 = *(_OWORD *)(a2 + 1632);
  *(_OWORD *)(a1 + 1648) = *(_OWORD *)(a2 + 1648);
  *(_OWORD *)(a1 + 1632) = v41;
  v16[82] = v17[82];
  v42 = v17[84];
  v43 = v17[85];
  v44 = v17[86];
  v16[83] = v17[83];
  v16[86] = v44;
  v16[85] = v43;
  v16[84] = v42;
  v45 = v17[87];
  v46 = v17[88];
  *(_BYTE *)(a1 + 1784) = *(_BYTE *)(a2 + 1784);
  v16[88] = v46;
  v16[87] = v45;
  return a1;
}

BOOL sub_1010F6CC0(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  _BOOL4 v7;
  __double2 v14;
  double v15;
  int64x2_t v17;
  uint64_t v18;
  int64x2_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t v24;
  __int128 v25;
  double *v26;
  uint64_t *v27;
  _QWORD v28[6];
  uint64_t v29[10];
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;

  v7 = a3 < 0.0 || *(_BYTE *)(a1 + 160) == 0 || a5 < 0.0;
  if (!v7)
  {
    v14 = __sincos_stret(a2);
    v15 = v14.__sinval * a6 * a4 + *(double *)(a1 + 224);
    *(double *)(a1 + 216) = v14.__cosval * a6 * a4 + *(double *)(a1 + 216);
    *(double *)(a1 + 224) = v15;
    v29[9] = (uint64_t)off_1021A1978;
    v30 = -(v14.__sinval * a6 * a4);
    v31 = v14.__cosval * a6 * a4;
    v32 = v14.__cosval * a6;
    v33 = v14.__sinval * a6;
    v34 = 0;
    v27 = &v34;
    v28[0] = off_1021A1978;
    v28[5] = 0;
    *(double *)&v28[1] = v14.__cosval * a6 * 0.0 - v14.__sinval * a6 * a4 * (a3 * a3);
    *(double *)&v28[2] = v14.__sinval * a6 * 0.0 + v31 * (a3 * a3);
    *(double *)&v28[3] = a5 * a5 * (v14.__cosval * a6) - v14.__sinval * a6 * a4 * 0.0;
    *(double *)&v28[4] = a5 * a5 * (v14.__sinval * a6) + v31 * 0.0;
    LOBYTE(v23) = 0;
    v17 = vdupq_n_s64(2uLL);
    v24 = v17;
    v25 = xmmword_101C1EE00;
    v26 = &v30;
    sub_1010FD2AC((uint64_t)v28, &v23, v29);
    LOBYTE(v18) = 1;
    v19 = v17;
    v20 = xmmword_101C40150;
    v21 = a1 + 256;
    v22 = a1 + 296;
    sub_101100654(&v18, (uint64_t)v29);
    sub_1010FE154(v29);
    *(double *)(a1 + 112) = sqrt(*(double *)(a1 + 256) + *(double *)(a1 + 288));
    *(double *)(a1 + 128) = a2;
    *(double *)(a1 + 136) = a3;
    *(double *)(a1 + 144) = a4;
    *(double *)(a1 + 152) = a5;
  }
  return !v7;
}

void sub_1010F6E4C(uint64_t a1, double a2)
{
  unsigned __int8 *v4;
  unsigned __int8 v5;
  NSObject *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 *v39;
  char *v40;
  _WORD v41[8];
  uint8_t buf[1640];

  v4 = (unsigned __int8 *)(a1 + 1);
  do
    v5 = __ldaxr(v4);
  while (__stxr(1u, v4));
  if ((v5 & 1) == 0)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v6 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLVLF,removeAllVioDataLessThanMachAbsoluteTime,Called without locking vision buffers", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v41[0] = 0;
      v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,removeAllVioDataLessThanMachAbsoluteTime,Called without locking vision buffers", v41, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::removeAllVioDataLessThanMachAbsoluteTime(const CFTimeInterval)", "%s\n", v40);
      if (v40 != (char *)buf)
        free(v40);
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(__int128 **)(a1 + 16);
  if ((__int128 *)v8 != v7)
  {
    while (*(double *)(v8 + 40) >= a2)
    {
      v8 += 1432;
      if ((__int128 *)v8 == v7)
      {
        v9 = *(_QWORD *)(a1 + 16);
        goto LABEL_21;
      }
    }
    if ((__int128 *)v8 == v7 || (__int128 *)(v8 + 1432) == v7)
    {
      v9 = v8;
    }
    else
    {
      v9 = v8;
      do
      {
        if (*(double *)(v8 + 1472) >= a2)
        {
          v10 = *(_OWORD *)(v8 + 1432);
          v11 = *(_OWORD *)(v8 + 1448);
          v12 = *(_OWORD *)(v8 + 1464);
          *(_QWORD *)(v9 + 48) = *(_QWORD *)(v8 + 1480);
          *(_OWORD *)(v9 + 16) = v11;
          *(_OWORD *)(v9 + 32) = v12;
          *(_OWORD *)v9 = v10;
          *(_BYTE *)(v9 + 56) = *(_BYTE *)(v8 + 1488);
          v13 = *(_OWORD *)(v8 + 1504);
          v14 = *(_OWORD *)(v8 + 1520);
          *(_QWORD *)(v9 + 104) = *(_QWORD *)(v8 + 1536);
          *(_OWORD *)(v9 + 88) = v14;
          *(_OWORD *)(v9 + 72) = v13;
          v15 = *(_OWORD *)(v8 + 1584);
          v16 = *(_OWORD *)(v8 + 1600);
          v17 = *(_OWORD *)(v8 + 1616);
          *(_OWORD *)(v9 + 136) = *(_OWORD *)(v8 + 1568);
          *(_OWORD *)(v9 + 184) = v17;
          *(_OWORD *)(v9 + 168) = v16;
          *(_OWORD *)(v9 + 152) = v15;
          *(_OWORD *)(v9 + 120) = *(_OWORD *)(v8 + 1552);
          v18 = *(_OWORD *)(v8 + 1640);
          v19 = *(_OWORD *)(v8 + 1656);
          *(_QWORD *)(v9 + 240) = *(_QWORD *)(v8 + 1672);
          *(_OWORD *)(v9 + 208) = v18;
          *(_OWORD *)(v9 + 224) = v19;
          v20 = *(_OWORD *)(v8 + 1704);
          *(_OWORD *)(v9 + 256) = *(_OWORD *)(v8 + 1688);
          *(_OWORD *)(v9 + 272) = v20;
          memcpy((void *)(v9 + 296), (const void *)(v8 + 1728), 0x129uLL);
          v22 = *(_OWORD *)(v8 + 2040);
          v21 = *(_OWORD *)(v8 + 2056);
          *(_QWORD *)(v9 + 640) = *(_QWORD *)(v8 + 2072);
          *(_OWORD *)(v9 + 608) = v22;
          *(_OWORD *)(v9 + 624) = v21;
          v24 = *(_OWORD *)(v8 + 2104);
          v23 = *(_OWORD *)(v8 + 2120);
          v25 = *(_OWORD *)(v8 + 2152);
          *(_OWORD *)(v9 + 704) = *(_OWORD *)(v8 + 2136);
          *(_OWORD *)(v9 + 720) = v25;
          *(_OWORD *)(v9 + 672) = v24;
          *(_OWORD *)(v9 + 688) = v23;
          *(_OWORD *)(v9 + 656) = *(_OWORD *)(v8 + 2088);
          v26 = *(_OWORD *)(v8 + 2176);
          v27 = *(_OWORD *)(v8 + 2192);
          *(_QWORD *)(v9 + 776) = *(_QWORD *)(v8 + 2208);
          *(_OWORD *)(v9 + 760) = v27;
          *(_OWORD *)(v9 + 744) = v26;
          v28 = *(_OWORD *)(v8 + 2224);
          *(_OWORD *)(v9 + 808) = *(_OWORD *)(v8 + 2240);
          *(_OWORD *)(v9 + 792) = v28;
          memcpy((void *)(v9 + 832), (const void *)(v8 + 2264), 0x128uLL);
          v29 = *(_OWORD *)(v8 + 2568);
          *(_OWORD *)(v9 + 1152) = *(_OWORD *)(v8 + 2584);
          *(_OWORD *)(v9 + 1136) = v29;
          *(_OWORD *)(v9 + 1176) = *(_OWORD *)(v8 + 2608);
          v30 = *(_OWORD *)(v8 + 2640);
          v31 = *(_OWORD *)(v8 + 2656);
          v32 = *(_OWORD *)(v8 + 2672);
          *(_OWORD *)(v9 + 1192) = *(_OWORD *)(v8 + 2624);
          *(_OWORD *)(v9 + 1240) = v32;
          *(_OWORD *)(v9 + 1224) = v31;
          *(_OWORD *)(v9 + 1208) = v30;
          *(_BYTE *)(v9 + 1256) = *(_BYTE *)(v8 + 2688);
          v33 = *(_OWORD *)(v8 + 2704);
          *(_OWORD *)(v9 + 1288) = *(_OWORD *)(v8 + 2720);
          *(_OWORD *)(v9 + 1272) = v33;
          *(_OWORD *)(v9 + 1312) = *(_OWORD *)(v8 + 2744);
          v34 = *(_OWORD *)(v8 + 2792);
          v35 = *(_OWORD *)(v8 + 2808);
          v36 = *(_OWORD *)(v8 + 2776);
          *(_OWORD *)(v9 + 1328) = *(_OWORD *)(v8 + 2760);
          *(_OWORD *)(v9 + 1376) = v35;
          *(_OWORD *)(v9 + 1360) = v34;
          *(_OWORD *)(v9 + 1344) = v36;
          v37 = *(_OWORD *)(v8 + 2824);
          v38 = *(_OWORD *)(v8 + 2840);
          *(_BYTE *)(v9 + 1424) = *(_BYTE *)(v8 + 2856);
          *(_OWORD *)(v9 + 1408) = v38;
          *(_OWORD *)(v9 + 1392) = v37;
          v9 += 1432;
        }
        v39 = (__int128 *)(v8 + 2864);
        v8 += 1432;
      }
      while (v39 != v7);
      v7 = *(__int128 **)(a1 + 16);
    }
LABEL_21:
    sub_1010FD1CC(a1 + 8, v9, v7);
  }
  if ((v5 & 1) == 0)
    atomic_store(0, v4);
}

void sub_1010F7238(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1010F7244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a2 != a3)
  {
    sub_1010FF4F8(a3, *(_QWORD *)(a1 + 8), a2);
    *(_QWORD *)(a1 + 8) = v5;
  }
  return a2;
}

uint64_t sub_1010F7288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a2 != a3)
  {
    sub_1010FF940(a3, *(_QWORD *)(a1 + 8), a2);
    *(_QWORD *)(a1 + 8) = v5;
  }
  return a2;
}

void sub_1010F72CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  char *v70;
  NSObject *v71;
  int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  double v80;
  double v81;
  BOOL v83;
  double v84;
  double v85;
  BOOL v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  double v99;
  double v100;
  int8x16_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  NSObject *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  NSObject *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  int64x2_t v184;
  _OWORD *v185;
  _OWORD *v186;
  _OWORD *v187;
  _OWORD *v188;
  _OWORD *v189;
  void *v190;
  _OWORD *v191;
  _OWORD *v192;
  _OWORD *v193;
  _OWORD *v194;
  void *v195;
  _OWORD *v196;
  _OWORD *v197;
  _OWORD *v198;
  _OWORD *v199;
  _OWORD *v200;
  _BYTE *v201;
  _BYTE *v202;
  unsigned __int8 *v204;
  unsigned __int8 *v205;
  char v206[8];
  int64x2_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  char v211[8];
  int64x2_t v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  char v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  char v239;
  uint64_t (**v240)();
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  char v245;
  uint64_t (**v246)();
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  uint64_t (**v250)();
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t (**v256)();
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  uint64_t (**v260)();
  __int128 v261;
  __int128 v262;
  uint64_t (**v263)();
  _BYTE v264[297];
  uint64_t (**v265)();
  __int128 v266;
  __int128 v267;
  uint64_t v268;
  uint64_t (**v269)();
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  uint64_t (**v275)();
  __int128 v276;
  __int128 v277;
  uint64_t v278;
  uint64_t (**v279)();
  __int128 v280;
  __int128 v281;
  uint64_t (**v282)();
  _BYTE v283[296];
  uint64_t (**v284)();
  __int128 v285;
  __int128 v286;
  uint64_t v287;
  char v288;
  uint64_t (**v289)();
  __int128 v290;
  __int128 v291;
  _BYTE v292[8];
  uint64_t (**v293)();
  __int128 v294;
  __int128 v295;
  uint64_t v296;
  uint64_t (**v297)();
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  uint64_t (**v303)();
  __int128 v304;
  __int128 v305;
  uint64_t v306;
  uint64_t (**v307)();
  __int128 v308;
  __int128 v309;
  uint64_t (**v310)();
  _BYTE v311[296];
  __int128 v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  _BYTE v316[8];
  uint64_t (**v317)();
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  uint64_t (**v321)();
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  uint64_t (**v327)();
  __int128 v328;
  __int128 v329;
  uint64_t v330;
  uint64_t (**v331)();
  __int128 v332;
  __int128 v333;
  uint64_t (**v334)();
  _BYTE v335[297];
  uint64_t (**v336)();
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  uint64_t (**v340)();
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  uint64_t (**v346)();
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  uint64_t (**v350)();
  __int128 v351;
  __int128 v352;
  uint64_t (**v353)();
  _BYTE v354[296];
  uint64_t (**v355)();
  __int128 v356;
  __int128 v357;
  uint64_t (**v358)();
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  char v364;
  uint64_t (**v365)();
  __int128 v366;
  __int128 v367;
  uint64_t (**v368)();
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  char v376;
  int v377;
  uint64_t v378;
  __int16 v379;
  uint64_t v380;
  __int16 v381;
  uint64_t v382;
  __int16 v383;
  uint64_t v384;
  __int16 v385;
  double v386;
  __int16 v387;
  uint64_t v388;
  __int16 v389;
  uint64_t v390;
  __int16 v391;
  uint64_t v392;
  __int16 v393;
  uint64_t v394;
  __int16 v395;
  uint64_t v396;
  __int16 v397;
  uint64_t v398;
  __int16 v399;
  uint64_t v400;
  __int16 v401;
  uint64_t v402;
  __int16 v403;
  uint64_t v404;
  _BYTE v405[12];
  __int16 v406;
  _BYTE v407[18];
  _BYTE v408[30];
  __int16 v409;
  _BYTE v410[48];
  _BYTE v411[32];
  __int128 v412;
  __int128 v413;
  uint64_t v414;
  __int128 v415;
  __int128 v416;
  _BYTE v417[296];

  v204 = (unsigned __int8 *)(a1 + 1);
  sub_1010E8510((unsigned __int8 *)(a1 + 1));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (v3 == v4)
  {
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    while (*(_BYTE *)(v3 + 3152) && *(double *)(v3 + 1136) >= 0.6827)
    {
      v3 += 3160;
      if (v3 == v4)
      {
        v3 = *(_QWORD *)(a1 + 40);
        goto LABEL_14;
      }
    }
    if (v3 != v4)
    {
      v5 = v3 + 3160;
      if (v3 + 3160 != v4)
      {
        do
        {
          if (*(_BYTE *)(v5 + 3152) && *(double *)(v5 + 1136) >= 0.6827)
          {
            sub_1010FF554(v3, v5);
            v3 += 3160;
          }
          v5 += 3160;
        }
        while (v5 != v4);
        v4 = *(_QWORD *)(a1 + 40);
      }
    }
  }
LABEL_14:
  sub_1010F7244(a1 + 32, v3, v4);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  atomic_store(0, (unsigned __int8 *)(a1 + 1));
  if (v6 == v7)
    return;
  v202 = (_BYTE *)(a1 + 9272);
  v201 = (_BYTE *)(a1 + 8736);
  v200 = (_OWORD *)(a1 + 8680);
  v199 = (_OWORD *)(a1 + 8752);
  v198 = (_OWORD *)(a1 + 8800);
  v197 = (_OWORD *)(a1 + 8888);
  v196 = (_OWORD *)(a1 + 8936);
  v195 = (void *)(a1 + 8976);
  v194 = (_OWORD *)(a1 + 9288);
  v193 = (_OWORD *)(a1 + 9336);
  v192 = (_OWORD *)(a1 + 9424);
  v191 = (_OWORD *)(a1 + 9472);
  v190 = (void *)(a1 + 9512);
  v189 = (_OWORD *)(a1 + 9816);
  v188 = (_OWORD *)(a1 + 9856);
  v187 = (_OWORD *)(a1 + 9952);
  v186 = (_OWORD *)(a1 + 9992);
  v185 = (_OWORD *)(a1 + 10072);
  v184 = vdupq_n_s64(3uLL);
  v205 = (unsigned __int8 *)(a1 + 6776);
  while (1)
  {
    sub_1010E8510(v204);
    v9 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    if (v9 == v8 || *(double *)(v9 + 8) > *(double *)(a2 + 8))
      break;
    v10 = *(_OWORD *)v9;
    v244 = *(_QWORD *)(v9 + 16);
    v243 = v10;
    v245 = *(_BYTE *)(v9 + 24);
    v11 = *(_OWORD *)(v9 + 40);
    v12 = *(_OWORD *)(v9 + 56);
    v249 = *(_QWORD *)(v9 + 72);
    v247 = v11;
    v248 = v12;
    v246 = off_1021A0EF0;
    v250 = off_1021A0F28;
    v251 = *(_OWORD *)(v9 + 88);
    v13 = *(_OWORD *)(v9 + 104);
    v14 = *(_OWORD *)(v9 + 120);
    v15 = *(_OWORD *)(v9 + 152);
    v254 = *(_OWORD *)(v9 + 136);
    v255 = v15;
    v252 = v13;
    v253 = v14;
    v16 = *(_OWORD *)(v9 + 176);
    v17 = *(_OWORD *)(v9 + 192);
    v259 = *(_QWORD *)(v9 + 208);
    v257 = v16;
    v258 = v17;
    v256 = off_1021A0D18;
    v260 = off_1021A1298;
    v18 = *(_OWORD *)(v9 + 240);
    v261 = *(_OWORD *)(v9 + 224);
    v262 = v18;
    v263 = off_1021A10E0;
    memcpy(v264, (const void *)(v9 + 264), sizeof(v264));
    v19 = *(_OWORD *)(v9 + 576);
    v20 = *(_OWORD *)(v9 + 592);
    v268 = *(_QWORD *)(v9 + 608);
    v266 = v19;
    v267 = v20;
    v265 = off_1021A0EF0;
    v269 = off_1021A0F28;
    v270 = *(_OWORD *)(v9 + 624);
    v21 = *(_OWORD *)(v9 + 640);
    v22 = *(_OWORD *)(v9 + 656);
    v23 = *(_OWORD *)(v9 + 688);
    v273 = *(_OWORD *)(v9 + 672);
    v274 = v23;
    v271 = v21;
    v272 = v22;
    v275 = off_1021A0D18;
    v24 = *(_OWORD *)(v9 + 712);
    v25 = *(_OWORD *)(v9 + 728);
    v278 = *(_QWORD *)(v9 + 744);
    v276 = v24;
    v277 = v25;
    v279 = off_1021A1298;
    v26 = *(_OWORD *)(v9 + 776);
    v280 = *(_OWORD *)(v9 + 760);
    v281 = v26;
    v282 = off_1021A10E0;
    memcpy(v283, (const void *)(v9 + 800), sizeof(v283));
    v284 = off_1021A1298;
    v27 = *(_OWORD *)(v9 + 1120);
    v285 = *(_OWORD *)(v9 + 1104);
    v286 = v27;
    v28 = *(_BYTE *)(v9 + 1144);
    v287 = *(_QWORD *)(v9 + 1136);
    v288 = v28;
    v289 = off_1021A1298;
    v29 = *(_OWORD *)(v9 + 1176);
    v290 = *(_OWORD *)(v9 + 1160);
    v291 = v29;
    v292[0] = *(_BYTE *)(v9 + 1192);
    v30 = *(_OWORD *)(v9 + 1208);
    v31 = *(_OWORD *)(v9 + 1224);
    v296 = *(_QWORD *)(v9 + 1240);
    v294 = v30;
    v295 = v31;
    v293 = off_1021A0EF0;
    v297 = off_1021A0F28;
    v298 = *(_OWORD *)(v9 + 1256);
    v32 = *(_OWORD *)(v9 + 1272);
    v33 = *(_OWORD *)(v9 + 1288);
    v34 = *(_OWORD *)(v9 + 1320);
    v301 = *(_OWORD *)(v9 + 1304);
    v302 = v34;
    v299 = v32;
    v300 = v33;
    v303 = off_1021A0D18;
    v35 = *(_OWORD *)(v9 + 1344);
    v36 = *(_OWORD *)(v9 + 1360);
    v306 = *(_QWORD *)(v9 + 1376);
    v304 = v35;
    v305 = v36;
    v307 = off_1021A1298;
    v37 = *(_OWORD *)(v9 + 1408);
    v308 = *(_OWORD *)(v9 + 1392);
    v309 = v37;
    v310 = off_1021A10E0;
    memcpy(v311, (const void *)(v9 + 1432), sizeof(v311));
    v38 = *(_OWORD *)(v9 + 1728);
    v39 = *(_OWORD *)(v9 + 1744);
    v40 = *(_OWORD *)(v9 + 1760);
    v315 = *(_QWORD *)(v9 + 1776);
    v313 = v39;
    v314 = v40;
    v312 = v38;
    v316[0] = *(_BYTE *)(v9 + 1784);
    v41 = *(_QWORD *)(v9 + 1832);
    v42 = *(_OWORD *)(v9 + 1816);
    v318 = *(_OWORD *)(v9 + 1800);
    v319 = v42;
    v320 = v41;
    v317 = off_1021A0EF0;
    v321 = off_1021A0F28;
    v322 = *(_OWORD *)(v9 + 1848);
    v43 = *(_OWORD *)(v9 + 1864);
    v44 = *(_OWORD *)(v9 + 1880);
    v45 = *(_OWORD *)(v9 + 1912);
    v325 = *(_OWORD *)(v9 + 1896);
    v326 = v45;
    v323 = v43;
    v324 = v44;
    v327 = off_1021A0D18;
    v46 = *(_OWORD *)(v9 + 1936);
    v47 = *(_OWORD *)(v9 + 1952);
    v330 = *(_QWORD *)(v9 + 1968);
    v328 = v46;
    v329 = v47;
    v331 = off_1021A1298;
    v48 = *(_OWORD *)(v9 + 2000);
    v332 = *(_OWORD *)(v9 + 1984);
    v333 = v48;
    v334 = off_1021A10E0;
    memcpy(v335, (const void *)(v9 + 2024), sizeof(v335));
    v49 = *(_OWORD *)(v9 + 2336);
    v50 = *(_OWORD *)(v9 + 2352);
    v339 = *(_QWORD *)(v9 + 2368);
    v337 = v49;
    v338 = v50;
    v336 = off_1021A0EF0;
    v340 = off_1021A0F28;
    v341 = *(_OWORD *)(v9 + 2384);
    v51 = *(_OWORD *)(v9 + 2400);
    v52 = *(_OWORD *)(v9 + 2416);
    v53 = *(_OWORD *)(v9 + 2448);
    v344 = *(_OWORD *)(v9 + 2432);
    v345 = v53;
    v342 = v51;
    v343 = v52;
    v346 = off_1021A0D18;
    v54 = *(_OWORD *)(v9 + 2472);
    v55 = *(_OWORD *)(v9 + 2488);
    v349 = *(_QWORD *)(v9 + 2504);
    v347 = v54;
    v348 = v55;
    v350 = off_1021A1298;
    v56 = *(_OWORD *)(v9 + 2536);
    v351 = *(_OWORD *)(v9 + 2520);
    v352 = v56;
    v353 = off_1021A10E0;
    memcpy(v354, (const void *)(v9 + 2560), sizeof(v354));
    v355 = off_1021A1298;
    v57 = *(_OWORD *)(v9 + 2880);
    v356 = *(_OWORD *)(v9 + 2864);
    v357 = v57;
    v358 = off_1021A0F28;
    v58 = *(_OWORD *)(v9 + 2968);
    v59 = *(_OWORD *)(v9 + 2952);
    v60 = *(_OWORD *)(v9 + 2936);
    v360 = *(_OWORD *)(v9 + 2920);
    v361 = v60;
    v362 = v59;
    v363 = v58;
    v359 = *(_OWORD *)(v9 + 2904);
    v364 = *(_BYTE *)(v9 + 2984);
    v365 = off_1021A1298;
    v61 = *(_OWORD *)(v9 + 3016);
    v366 = *(_OWORD *)(v9 + 3000);
    v367 = v61;
    v368 = off_1021A0F28;
    v369 = *(_OWORD *)(v9 + 3040);
    v62 = *(_OWORD *)(v9 + 3056);
    v63 = *(_OWORD *)(v9 + 3072);
    v64 = *(_OWORD *)(v9 + 3104);
    v372 = *(_OWORD *)(v9 + 3088);
    v373 = v64;
    v370 = v62;
    v371 = v63;
    v65 = *(_OWORD *)(v9 + 3120);
    v66 = *(_OWORD *)(v9 + 3136);
    v376 = *(_BYTE *)(v9 + 3152);
    v374 = v65;
    v375 = v66;
    sub_1010FF4F8(v9 + 3160, v8, v9);
    *(_QWORD *)(a1 + 40) = v67;
    atomic_store(0, (unsigned __int8 *)(a1 + 1));
    v240 = off_1021A1298;
    v241 = v285;
    v242 = v286;
    if (!sub_10149F2B4((uint64_t)&v243, (uint64_t)&v240))
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v71 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v405 = 134349056;
        *(_QWORD *)&v405[4] = *((_QWORD *)&v243 + 1);
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "CLVLF,initWithFrames,Unable to compute VLF for ENU,machAbsTime,%{public}.3lf", v405, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_33;
      bzero(v405, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v377 = 134349056;
      v378 = *((_QWORD *)&v243 + 1);
      LODWORD(v183) = 12;
      v70 = (char *)_os_log_send_and_compose_impl(2, 0, v405, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,initWithFrames,Unable to compute VLF for ENU,machAbsTime,%{public}.3lf", &v377, v183);
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::initWithFrames(const CLVisionTime &)", "%s\n", v70);
      goto LABEL_75;
    }
    v239 = 1;
    sub_1014A02EC((uint64_t)&v243, &v239, (uint64_t)&v218);
    if (v239)
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v69 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v405 = 134349056;
        *(_QWORD *)&v405[4] = *((_QWORD *)&v243 + 1);
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "CLVLF,initWithFrames,Unable to convert VLF to LOC,machAbsTime,%{public}.3lf", v405, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_33;
      bzero(v405, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v377 = 134349056;
      v378 = *((_QWORD *)&v243 + 1);
      LODWORD(v183) = 12;
      v70 = (char *)_os_log_send_and_compose_impl(2, 0, v405, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,initWithFrames,Unable to convert VLF to LOC,machAbsTime,%{public}.3lf", &v377, v183);
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::initWithFrames(const CLVisionTime &)", "%s\n", v70);
      goto LABEL_75;
    }
    LODWORD(v218) = *(_DWORD *)(a1 + 13272);
    v73 = *(_OWORD *)(a1 + 13416);
    v225 = *(_OWORD *)(a1 + 13400);
    v226 = v73;
    if (sub_1010FA0C8(v68, (uint64_t)&v243))
    {
      v216 = v332;
      v217 = v333;
      *(_QWORD *)&v333 = 0;
      v332 = 0uLL;
      sub_10149E72C((uint64_t)v316, (uint64_t)&v377);
      sub_10149E800((uint64_t)v292, (uint64_t)&v377, 1, (uint64_t)v405);
      *(_BYTE *)(a1 + 6784) = v405[0];
      v74 = *(_OWORD *)v408;
      *(_OWORD *)(a1 + 6800) = *(_OWORD *)&v407[2];
      *(_OWORD *)(a1 + 6816) = v74;
      *(_QWORD *)(a1 + 6832) = *(_QWORD *)&v408[16];
      v75 = *(_OWORD *)v411;
      *(_OWORD *)(a1 + 6880) = *(_OWORD *)&v410[32];
      *(_OWORD *)(a1 + 6896) = v75;
      *(_OWORD *)(a1 + 6912) = *(_OWORD *)&v411[16];
      v76 = *(_OWORD *)&v410[16];
      *(_OWORD *)(a1 + 6848) = *(_OWORD *)v410;
      *(_OWORD *)(a1 + 6864) = v76;
      v77 = v412;
      v78 = v413;
      *(_QWORD *)(a1 + 6968) = v414;
      *(_OWORD *)(a1 + 6936) = v77;
      *(_OWORD *)(a1 + 6952) = v78;
      v79 = v416;
      *(_OWORD *)(a1 + 6984) = v415;
      *(_OWORD *)(a1 + 7000) = v79;
      memcpy((void *)(a1 + 7024), v417, 0x128uLL);
      v211[0] = 1;
      v212 = v184;
      v213 = xmmword_101B9B430;
      v214 = a1 + 7024;
      v215 = a1 + 7144;
      v80 = *(double *)(a1 + 7024) + *(double *)(a1 + 7080) + *(double *)(a1 + 7136);
      v81 = sqrt(v80);
      v83 = (v81 < 0.0 || ((*(_QWORD *)&v81 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(_QWORD *)&v81 - 1) > 0xFFFFFFFFFFFFELL;
      if (!v83 && v81 < 0.261799388)
      {
        *(double *)v405 = 0.0685389195 / v80;
        sub_1010FED34((uint64_t)v211, (const double *)v405);
      }
      v206[0] = 1;
      v207 = vdupq_n_s64(3uLL);
      v208 = xmmword_101B9B430;
      v209 = a1 + 7192;
      v210 = a1 + 7312;
      v84 = *(double *)(a1 + 7192) + *(double *)(a1 + 7248) + *(double *)(a1 + 7304);
      v85 = sqrt(v84);
      v87 = (v85 < 0.0 || ((*(_QWORD *)&v85 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(_QWORD *)&v85 - 1) > 0xFFFFFFFFFFFFELL;
      if (!v87 && v85 < 3.0)
      {
        *(double *)v405 = 9.0 / v84;
        sub_1010FED34((uint64_t)v206, (const double *)v405);
      }
      *v205 = 1;
      v88 = v242;
      *(_OWORD *)(a1 + 7864) = v241;
      *(_OWORD *)(a1 + 7880) = v88;
      v89 = v217;
      *(_OWORD *)(a1 + 7904) = v216;
      *(_OWORD *)(a1 + 7920) = v89;
      v90 = v219;
      *(_OWORD *)(a1 + 7936) = v218;
      *(_OWORD *)(a1 + 7952) = v90;
      v91 = v221;
      *(_OWORD *)(a1 + 7976) = v220;
      *(_OWORD *)(a1 + 7992) = v91;
      v92 = v223;
      *(_OWORD *)(a1 + 8016) = v222;
      *(_OWORD *)(a1 + 8032) = v92;
      v93 = v225;
      *(_OWORD *)(a1 + 8048) = v224;
      *(_OWORD *)(a1 + 8064) = v93;
      *(_OWORD *)(a1 + 8080) = v226;
      *(_BYTE *)(a1 + 8096) = v227;
      v94 = v229;
      *(_OWORD *)(a1 + 8112) = v228;
      *(_OWORD *)(a1 + 8128) = v94;
      v95 = v231;
      *(_OWORD *)(a1 + 8152) = v230;
      *(_OWORD *)(a1 + 8168) = v95;
      v96 = v236;
      v97 = v234;
      *(_OWORD *)(a1 + 8240) = v235;
      *(_OWORD *)(a1 + 8256) = v96;
      v98 = v233;
      *(_OWORD *)(a1 + 0x2000) = v232;
      *(_OWORD *)(a1 + 8208) = v98;
      *(_OWORD *)(a1 + 8224) = v97;
      *(_QWORD *)(a1 + 8288) = v238;
      *(_OWORD *)(a1 + 8272) = v237;
      *(_DWORD *)(a1 + 8296) = 0;
      sub_1010F3B10((uint64_t)&v312, v205);
      sub_1010F3D5C((uint64_t)&v312, v205);
      sub_1010F3F7C((uint64_t)v205, v99, v100, v101);
      v102 = v219;
      *(_OWORD *)(a1 + 8320) = v218;
      *(_OWORD *)(a1 + 8336) = v102;
      v103 = v221;
      *(_OWORD *)(a1 + 8360) = v220;
      *(_OWORD *)(a1 + 8376) = v103;
      v104 = v223;
      *(_OWORD *)(a1 + 8400) = v222;
      *(_OWORD *)(a1 + 8416) = v104;
      *(_BYTE *)(a1 + 8480) = v227;
      v105 = v226;
      v106 = v224;
      *(_OWORD *)(a1 + 8448) = v225;
      *(_OWORD *)(a1 + 8464) = v105;
      *(_OWORD *)(a1 + 8432) = v106;
      v107 = v229;
      *(_OWORD *)(a1 + 8496) = v228;
      *(_OWORD *)(a1 + 8512) = v107;
      v108 = v231;
      *(_OWORD *)(a1 + 8536) = v230;
      *(_OWORD *)(a1 + 8552) = v108;
      v109 = v235;
      *(_OWORD *)(a1 + 8608) = v234;
      *(_OWORD *)(a1 + 8624) = v109;
      *(_OWORD *)(a1 + 8640) = v236;
      v110 = v233;
      *(_OWORD *)(a1 + 8576) = v232;
      *(_OWORD *)(a1 + 8592) = v110;
      *(_QWORD *)(a1 + 8672) = v238;
      *(_OWORD *)(a1 + 8656) = v237;
      *(_QWORD *)(a1 + 8728) = v315;
      v111 = v314;
      v112 = v312;
      *(_OWORD *)(a1 + 8696) = v313;
      *(_OWORD *)(a1 + 8712) = v111;
      *v200 = v112;
      *v201 = v316[0];
      v113 = v319;
      *v199 = v318;
      *(_OWORD *)(a1 + 8768) = v113;
      *(_QWORD *)(a1 + 8784) = v320;
      v114 = v322;
      v115 = v323;
      v116 = v326;
      *(_OWORD *)(a1 + 8848) = v325;
      *(_OWORD *)(a1 + 8864) = v116;
      v117 = v324;
      *(_OWORD *)(a1 + 8816) = v115;
      *(_OWORD *)(a1 + 8832) = v117;
      *v198 = v114;
      v118 = v328;
      v119 = v329;
      *(_QWORD *)(a1 + 8920) = v330;
      *v197 = v118;
      *(_OWORD *)(a1 + 8904) = v119;
      v120 = v333;
      *v196 = v332;
      *(_OWORD *)(a1 + 8952) = v120;
      memcpy(v195, v335, 0x128uLL);
      *v202 = v335[296];
      v121 = v338;
      *v194 = v337;
      *(_OWORD *)(a1 + 9304) = v121;
      *(_QWORD *)(a1 + 9320) = v339;
      v122 = v344;
      *(_OWORD *)(a1 + 9368) = v343;
      *(_OWORD *)(a1 + 9384) = v122;
      *(_OWORD *)(a1 + 9400) = v345;
      v123 = v342;
      *v193 = v341;
      *(_OWORD *)(a1 + 9352) = v123;
      v124 = v348;
      *v192 = v347;
      *(_OWORD *)(a1 + 9440) = v124;
      *(_QWORD *)(a1 + 9456) = v349;
      v125 = v352;
      *v191 = v351;
      *(_OWORD *)(a1 + 9488) = v125;
      memcpy(v190, v354, 0x128uLL);
      v126 = v357;
      *v189 = v356;
      *(_OWORD *)(a1 + 9832) = v126;
      v127 = v362;
      *(_OWORD *)(a1 + 9888) = v361;
      *(_OWORD *)(a1 + 9904) = v127;
      *(_OWORD *)(a1 + 9920) = v363;
      v128 = v360;
      *v188 = v359;
      *(_OWORD *)(a1 + 9872) = v128;
      *(_BYTE *)(a1 + 9936) = v364;
      v129 = v367;
      *v187 = v366;
      *(_OWORD *)(a1 + 9968) = v129;
      v130 = v372;
      *(_OWORD *)(a1 + 10024) = v371;
      *(_OWORD *)(a1 + 10040) = v130;
      *(_OWORD *)(a1 + 10056) = v373;
      v131 = v370;
      *v186 = v369;
      *(_OWORD *)(a1 + 10008) = v131;
      v132 = v375;
      *v185 = v374;
      *(_OWORD *)(a1 + 10088) = v132;
      *(_BYTE *)(a1 + 10104) = v376;
      v133 = sub_1010F5314(a1 + 3416, (uint64_t)v205);
      sub_1010F5314(a1 + 80, v133);
      v134 = *(_QWORD *)(a1 + 6752);
      *(_QWORD *)(a1 + 6760) = v134;
      if (v134 >= *(_QWORD *)(a1 + 6768))
        v135 = sub_1010FF7A8((uint64_t *)(a1 + 6752), (uint64_t)v205);
      else
        v135 = sub_1010FEA38(v134, (uint64_t)v205) + 3336;
      *(_QWORD *)(a1 + 6760) = v135;
      v137 = *(_OWORD *)(a1 + 8696);
      *(_OWORD *)(a1 + 10112) = *v200;
      *(_OWORD *)(a1 + 10128) = v137;
      *(_OWORD *)(a1 + 10144) = *(_OWORD *)(a1 + 8712);
      *(_QWORD *)(a1 + 10160) = *(_QWORD *)(a1 + 8728);
      *(_BYTE *)(a1 + 10168) = *v201;
      v138 = *(_OWORD *)(a1 + 8768);
      *(_OWORD *)(a1 + 10184) = *v199;
      *(_OWORD *)(a1 + 10200) = v138;
      *(_QWORD *)(a1 + 10216) = *(_QWORD *)(a1 + 8784);
      v139 = *(_OWORD *)(a1 + 8848);
      *(_OWORD *)(a1 + 10264) = *(_OWORD *)(a1 + 8832);
      *(_OWORD *)(a1 + 10280) = v139;
      *(_OWORD *)(a1 + 10296) = *(_OWORD *)(a1 + 8864);
      v140 = *(_OWORD *)(a1 + 8816);
      *(_OWORD *)(a1 + 10232) = *v198;
      *(_OWORD *)(a1 + 10248) = v140;
      v141 = *(_OWORD *)(a1 + 8904);
      *(_OWORD *)(a1 + 10320) = *v197;
      *(_OWORD *)(a1 + 10336) = v141;
      *(_QWORD *)(a1 + 10352) = *(_QWORD *)(a1 + 8920);
      v142 = *(_OWORD *)(a1 + 8952);
      *(_OWORD *)(a1 + 10368) = *v196;
      *(_OWORD *)(a1 + 10384) = v142;
      memcpy((void *)(a1 + 10408), v195, 0x128uLL);
      *(_BYTE *)(a1 + 10704) = *v202;
      v143 = *(_OWORD *)(a1 + 9304);
      *(_OWORD *)(a1 + 10720) = *v194;
      *(_OWORD *)(a1 + 10736) = v143;
      *(_QWORD *)(a1 + 10752) = *(_QWORD *)(a1 + 9320);
      v144 = *(_OWORD *)(a1 + 9384);
      *(_OWORD *)(a1 + 10800) = *(_OWORD *)(a1 + 9368);
      *(_OWORD *)(a1 + 10816) = v144;
      *(_OWORD *)(a1 + 10832) = *(_OWORD *)(a1 + 9400);
      v145 = *(_OWORD *)(a1 + 9352);
      *(_OWORD *)(a1 + 10768) = *v193;
      *(_OWORD *)(a1 + 10784) = v145;
      v146 = *(_OWORD *)(a1 + 9440);
      *(_OWORD *)(a1 + 10856) = *v192;
      *(_OWORD *)(a1 + 10872) = v146;
      *(_QWORD *)(a1 + 10888) = *(_QWORD *)(a1 + 9456);
      v147 = *(_OWORD *)(a1 + 9488);
      *(_OWORD *)(a1 + 10904) = *v191;
      *(_OWORD *)(a1 + 10920) = v147;
      memcpy((void *)(a1 + 10944), v190, 0x128uLL);
      v148 = *(_OWORD *)(a1 + 9832);
      *(_OWORD *)(a1 + 11248) = *v189;
      *(_OWORD *)(a1 + 11264) = v148;
      v149 = *(_OWORD *)(a1 + 9904);
      *(_OWORD *)(a1 + 11320) = *(_OWORD *)(a1 + 9888);
      *(_OWORD *)(a1 + 11336) = v149;
      *(_OWORD *)(a1 + 11352) = *(_OWORD *)(a1 + 9920);
      v150 = *(_OWORD *)(a1 + 9872);
      *(_OWORD *)(a1 + 11288) = *v188;
      *(_OWORD *)(a1 + 11304) = v150;
      *(_BYTE *)(a1 + 11368) = *(_BYTE *)(a1 + 9936);
      v151 = *(_OWORD *)(a1 + 9968);
      *(_OWORD *)(a1 + 11384) = *v187;
      *(_OWORD *)(a1 + 11400) = v151;
      v152 = *(_OWORD *)(a1 + 10040);
      *(_OWORD *)(a1 + 11456) = *(_OWORD *)(a1 + 10024);
      *(_OWORD *)(a1 + 11472) = v152;
      *(_OWORD *)(a1 + 11488) = *(_OWORD *)(a1 + 10056);
      v153 = *(_OWORD *)(a1 + 10008);
      *(_OWORD *)(a1 + 11424) = *v186;
      *(_OWORD *)(a1 + 11440) = v153;
      v154 = *(_OWORD *)(a1 + 10088);
      *(_OWORD *)(a1 + 11504) = *v185;
      *(_OWORD *)(a1 + 11520) = v154;
      *(_BYTE *)(a1 + 11536) = *(_BYTE *)(a1 + 10104);
      sub_1010FA374(a1, *(double *)(a1 + 7952));
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v155 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
      {
        v156 = *(_QWORD *)(a1 + 6936);
        v157 = *(_QWORD *)(a1 + 6944);
        v158 = *(_QWORD *)(a1 + 6952);
        v159 = *(double *)(a1 + 6960) * 57.2957795;
        v160 = *(_QWORD *)(a1 + 6984);
        v161 = *(_QWORD *)(a1 + 6992);
        v162 = *(_QWORD *)(a1 + 7000);
        v163 = *(_QWORD *)(a1 + 7024);
        v164 = *(_QWORD *)(a1 + 7080);
        v165 = *(_QWORD *)(a1 + 7136);
        v166 = *(_QWORD *)(a1 + 7192);
        v167 = *(_QWORD *)(a1 + 7248);
        v168 = *(_QWORD *)(a1 + 7304);
        *(_DWORD *)v405 = 134352385;
        *(_QWORD *)&v405[4] = *((_QWORD *)&v243 + 1);
        v406 = 2049;
        *(_QWORD *)v407 = v156;
        *(_WORD *)&v407[8] = 2049;
        *(_QWORD *)&v407[10] = v157;
        *(_WORD *)v408 = 2049;
        *(_QWORD *)&v408[2] = v158;
        *(_WORD *)&v408[10] = 2049;
        *(double *)&v408[12] = v159;
        *(_WORD *)&v408[20] = 2049;
        *(_QWORD *)&v408[22] = v160;
        v409 = 2049;
        *(_QWORD *)v410 = v161;
        *(_WORD *)&v410[8] = 2049;
        *(_QWORD *)&v410[10] = v162;
        *(_WORD *)&v410[18] = 2049;
        *(_QWORD *)&v410[20] = v163;
        *(_WORD *)&v410[28] = 2049;
        *(_QWORD *)&v410[30] = v164;
        *(_WORD *)&v410[38] = 2049;
        *(_QWORD *)&v410[40] = v165;
        *(_WORD *)v411 = 2049;
        *(_QWORD *)&v411[2] = v166;
        *(_WORD *)&v411[10] = 2049;
        *(_QWORD *)&v411[12] = v167;
        *(_WORD *)&v411[20] = 2049;
        *(_QWORD *)&v411[22] = v168;
        _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEBUG, "CLVLF,initWithFrames,Filter initialized,machAbsTime,%{public}.3lf,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", v405, 0x8Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(v405, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v169 = *(_QWORD *)(a1 + 6936);
        v170 = *(_QWORD *)(a1 + 6944);
        v171 = *(_QWORD *)(a1 + 6952);
        v172 = *(double *)(a1 + 6960) * 57.2957795;
        v173 = *(_QWORD *)(a1 + 6984);
        v174 = *(_QWORD *)(a1 + 6992);
        v175 = *(_QWORD *)(a1 + 7000);
        v176 = *(_QWORD *)(a1 + 7024);
        v177 = *(_QWORD *)(a1 + 7080);
        v178 = *(_QWORD *)(a1 + 7136);
        v179 = *(_QWORD *)(a1 + 7192);
        v180 = *(_QWORD *)(a1 + 7248);
        v181 = *(_QWORD *)(a1 + 7304);
        v377 = 134352385;
        v378 = *((_QWORD *)&v243 + 1);
        v379 = 2049;
        v380 = v169;
        v381 = 2049;
        v382 = v170;
        v383 = 2049;
        v384 = v171;
        v385 = 2049;
        v386 = v172;
        v387 = 2049;
        v388 = v173;
        v389 = 2049;
        v390 = v174;
        v391 = 2049;
        v392 = v175;
        v393 = 2049;
        v394 = v176;
        v395 = 2049;
        v396 = v177;
        v397 = 2049;
        v398 = v178;
        v399 = 2049;
        v400 = v179;
        v401 = 2049;
        v402 = v180;
        v403 = 2049;
        v404 = v181;
        LODWORD(v183) = 142;
        v182 = (char *)_os_log_send_and_compose_impl(2, 0, v405, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,initWithFrames,Filter initialized,machAbsTime,%{public}.3lf,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", &v377, v183);
        sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithFrames(const CLVisionTime &)", "%s\n", v182);
        if (v182 != v405)
          free(v182);
      }
      v72 = 3;
      goto LABEL_34;
    }
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v136 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v405 = 134349056;
      *(_QWORD *)&v405[4] = *((_QWORD *)&v243 + 1);
      _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_ERROR, "CLVLF,initWithFrames,Invalid measurement,machAbsTime,%{public}.3lf", v405, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(v405, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v377 = 134349056;
      v378 = *((_QWORD *)&v243 + 1);
      LODWORD(v183) = 12;
      v70 = (char *)_os_log_send_and_compose_impl(2, 0, v405, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,initWithFrames,Invalid measurement,machAbsTime,%{public}.3lf", &v377, v183);
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::initWithFrames(const CLVisionTime &)", "%s\n", v70);
LABEL_75:
      if (v70 != v405)
        free(v70);
    }
LABEL_33:
    v72 = 2;
LABEL_34:
    if (v72 != 2)
      return;
  }
  atomic_store(0, v204);
}

void sub_1010F8BE4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_1010F8BF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t i;
  double v12;
  __int128 *v13;
  double v14;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  double *v24;
  double v25;
  double *v26;
  NSObject *v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t j;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t k;
  uint64_t m;
  __int128 v44;
  double v45;
  double v46;
  BOOL v48;
  double v49;
  double v50;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  double v68;
  double v69;
  int8x16_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  NSObject *v83;
  uint64_t v84;
  double v85;
  double v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  double v105;
  double v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 *v119;
  _OWORD *v120;
  char v121[8];
  int64x2_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  char v126[8];
  int64x2_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (**v131)();
  __int128 v132;
  __int128 v133;
  uint64_t (**v134)();
  __int128 v135;
  __int128 v136;
  int v137;
  uint64_t v138;
  __int16 v139;
  double v140;
  __int16 v141;
  double v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  double v146;
  __int16 v147;
  uint64_t v148;
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  uint64_t v156;
  __int16 v157;
  uint64_t v158;
  __int16 v159;
  uint64_t v160;
  __int16 v161;
  uint64_t v162;
  __int16 v163;
  uint64_t v164;
  _BYTE buf[12];
  __int16 v166;
  double v167;
  __int16 v168;
  double v169;
  __int16 v170;
  uint64_t v171;
  __int16 v172;
  double v173;
  __int16 v174;
  uint64_t v175;
  __int16 v176;
  uint64_t v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  uint64_t v181;
  __int16 v182;
  uint64_t v183;
  __int16 v184;
  uint64_t v185;
  __int16 v186;
  uint64_t v187;
  __int16 v188;
  uint64_t v189;
  __int16 v190;
  uint64_t v191;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = a1 + 56;
  if (v2 == v3)
  {
    v3 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v5 = *(_DWORD *)(v3 - 1792);
    while (*(_BYTE *)(v2 + 1784) && *(_DWORD *)v2 == v5)
    {
      v2 += 1792;
      if (v2 == v3)
      {
        v2 = *(_QWORD *)(a1 + 64);
        goto LABEL_15;
      }
    }
    if (v2 != v3)
    {
      v6 = v2 + 1792;
      if (v2 + 1792 != v3)
      {
        do
        {
          if (*(_BYTE *)(v6 + 1784) && *(_DWORD *)v6 == v5)
          {
            sub_1010F6AAC(v2, v6);
            v2 += 1792;
          }
          v6 += 1792;
        }
        while (v6 != v3);
        v3 = *(_QWORD *)(a1 + 64);
      }
    }
  }
LABEL_15:
  sub_1010F7288(v4, v2, v3);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 8)) >= 3)
  {
    v134 = off_1021A1298;
    v9 = *(_OWORD *)(v8 - 1160);
    v119 = (__int128 *)(v8 - 1176);
    v135 = *(_OWORD *)(v8 - 1176);
    v136 = v9;
    v10 = v7 + 616;
    for (i = 77; i != 80; ++i)
      *(double *)&(&v134)[i - 76] = *(double *)&(&v134)[i - 76] - *(double *)(v7 + i * 8);
    v12 = hypot(*(long double *)&v135, *((long double *)&v135 + 1));
    v120 = (_OWORD *)(v8 - 1792);
    v13 = (__int128 *)(v8 - 1752);
    v14 = sub_10011E634(dbl_10230C7F8, *(double *)(v8 - 1752) * 57.2957795, *(double *)(v8 - 1744) * 57.2957795, *(double *)(v7 + 40) * 57.2957795, *(double *)(v7 + 48) * 57.2957795, *(double *)(v8 - 1736));
    if (v12 < 8.0 || v14 < 8.0)
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v16 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
      {
        v17 = *(_QWORD *)(v8 - 1776);
        *(_DWORD *)buf = 134349569;
        *(_QWORD *)&buf[4] = v17;
        v166 = 2049;
        v167 = v12;
        v168 = 2049;
        v169 = v14;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLVLF,initWithPoints,Not enough movement,machAbsTime,%{public}.3lf,vioHorzDist,%{private}.3lf,locHorzDist,%{private}.3lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v18 = *(_QWORD *)(v8 - 1776);
        v137 = 134349569;
        v138 = v18;
        v139 = 2049;
        v140 = v12;
        v141 = 2049;
        v142 = v14;
        v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,initWithPoints,Not enough movement,machAbsTime,%{public}.3lf,vioHorzDist,%{private}.3lf,locHorzDist,%{private}.3lf", &v137, 32);
        sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v19);
        goto LABEL_136;
      }
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(a1 + 64);
      if (v20 == v21)
      {
LABEL_34:
        if (!sub_1010F25F8(v7, (uint64_t)v120, (uint64_t)v120))
        {
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
          v22 = qword_1022A00C8;
          if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
          {
            v23 = *(_QWORD *)(v8 - 1776);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)&buf[4] = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLVLF,initWithPoints,Unable to compute course in ENU,machAbsTime,%{public}.3lf", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00C0 != -1)
              dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
            v98 = *(_QWORD *)(v8 - 1776);
            v137 = 134349056;
            v138 = v98;
            v99 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,initWithPoints,Unable to compute course in ENU,machAbsTime,%{public}.3lf", &v137, 12);
            sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v99);
            if (v99 != buf)
              free(v99);
          }
        }
        v24 = (double *)(v8 - 1664);
        v25 = vabdd_f64(*(double *)(v8 - 1448), *(double *)(v8 - 1664));
        if (6.28318531 - v25 < v25)
          v25 = 6.28318531 - v25;
        if (v25 <= 1.83259571)
        {
          v34 = 0;
          v35 = v7 + 360;
          v131 = off_1021A1298;
          v36 = *(_OWORD *)(v8 - 1160);
          v132 = *v119;
          v133 = v36;
          do
          {
            *(double *)(v10 + v34 * 8) = *(double *)(v10 + v34 * 8) - *(double *)&(&v131)[v34 + 1];
            ++v34;
          }
          while (v34 != 3);
          for (j = 1; j != 4; ++j)
            *(double *)(v8 + j * 8 - 1184) = *(double *)(v8 + j * 8 - 1184) - *(double *)&(&v131)[j];
          if ((sub_1010F2880(v35, v8 - 1432, v8 - 1432) & 1) == 0)
          {
            if (qword_1022A00C0 != -1)
              dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
            v38 = qword_1022A00C8;
            if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
            {
              v39 = *(_QWORD *)(v8 - 1776);
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)&buf[4] = v39;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "CLVLF,initWithPoints,Unable to compute delta position in VIO,machAbsTime,%{public}.3lf", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00C0 != -1)
                dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
              v100 = *(_QWORD *)(v8 - 1776);
              v137 = 134349056;
              v138 = v100;
              LODWORD(v118) = 12;
              v101 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,initWithPoints,Unable to compute delta position in VIO,machAbsTime,%{public}.3lf", &v137, v118);
              sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v101);
              if (v101 != buf)
                free(v101);
            }
          }
          if (!sub_1010F29D4(v35, v8 - 1432, v8 - 1432))
          {
            if (qword_1022A00C0 != -1)
              dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
            v40 = qword_1022A00C8;
            if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
            {
              v41 = *(_QWORD *)(v8 - 1776);
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)&buf[4] = v41;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "CLVLF,initWithPoints,Unable to compute course in VIO,machAbsTime,%{public}.3lf", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00C0 != -1)
                dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
              v102 = *(_QWORD *)(v8 - 1776);
              v137 = 134349056;
              v138 = v102;
              LODWORD(v118) = 12;
              v103 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,initWithPoints,Unable to compute course in VIO,machAbsTime,%{public}.3lf", &v137, v118);
              sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v103);
              if (v103 != buf)
                free(v103);
            }
          }
          for (k = 0; k != 3; ++k)
            *(double *)(v10 + k * 8) = *(double *)(v10 + k * 8) + *(double *)&(&v131)[k + 1];
          for (m = 1; m != 4; ++m)
            *(double *)(v8 + m * 8 - 1184) = *(double *)(v8 + m * 8 - 1184) + *(double *)&(&v131)[m];
          if ((sub_1010FA430((uint64_t *)v4, a1 + 6784, 1) & 1) != 0)
          {
            v126[0] = 1;
            v44 = xmmword_101B9B430;
            v127 = vdupq_n_s64(3uLL);
            v128 = xmmword_101B9B430;
            v129 = a1 + 7024;
            v130 = a1 + 7144;
            v45 = *(double *)(a1 + 7024) + *(double *)(a1 + 7080) + *(double *)(a1 + 7136);
            v46 = sqrt(v45);
            v48 = (v46 < 0.0 || ((*(_QWORD *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
               && (unint64_t)(*(_QWORD *)&v46 - 1) > 0xFFFFFFFFFFFFELL;
            if (!v48 && v46 < 0.261799388)
            {
              *(double *)buf = 0.0685389195 / v45;
              sub_1010FED34((uint64_t)v126, (const double *)buf);
              v44 = xmmword_101B9B430;
            }
            v121[0] = 1;
            v122 = vdupq_n_s64(3uLL);
            v123 = v44;
            v124 = a1 + 7192;
            v125 = a1 + 7312;
            v49 = *(double *)(a1 + 7192) + *(double *)(a1 + 7248) + *(double *)(a1 + 7304);
            v50 = sqrt(v49);
            if ((v50 >= 0.0 && ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
               || (unint64_t)(*(_QWORD *)&v50 - 1) <= 0xFFFFFFFFFFFFELL)
              && v50 < 3.0)
            {
              *(double *)buf = 9.0 / v49;
              sub_1010FED34((uint64_t)v121, (const double *)buf);
            }
            *(_QWORD *)v119 = 0;
            *(_QWORD *)(v8 - 1168) = 0;
            *(_QWORD *)(v8 - 1160) = 0;
            *(_BYTE *)(v4 + 6721) = 1;
            v54 = *v13;
            *(_OWORD *)(a1 + 7880) = *(_OWORD *)(v8 - 1736);
            *(_OWORD *)(a1 + 7864) = v54;
            v55 = v133;
            *(_OWORD *)(a1 + 7904) = v132;
            *(_OWORD *)(a1 + 7920) = v55;
            v56 = *(_OWORD *)(v8 - 1776);
            *(_OWORD *)(a1 + 7936) = *v120;
            *(_OWORD *)(a1 + 7952) = v56;
            v57 = *(_OWORD *)(v8 - 1736);
            *(_OWORD *)(a1 + 7976) = *v13;
            *(_OWORD *)(a1 + 7992) = v57;
            v58 = *(_OWORD *)(v8 - 1696);
            *(_OWORD *)(a1 + 8016) = *(_OWORD *)(v8 - 1712);
            *(_OWORD *)(a1 + 8032) = v58;
            v59 = *(_BYTE *)(v8 - 1632);
            v61 = *(_OWORD *)(v8 - 1664);
            v60 = *(_OWORD *)(v8 - 1648);
            *(_OWORD *)(a1 + 8048) = *(_OWORD *)(v8 - 1680);
            *(_OWORD *)(a1 + 8064) = v61;
            *(_OWORD *)(a1 + 8080) = v60;
            *(_BYTE *)(a1 + 8096) = v59;
            v62 = *(_OWORD *)(v8 - 1600);
            *(_OWORD *)(a1 + 8112) = *(_OWORD *)(v8 - 1616);
            *(_OWORD *)(a1 + 8128) = v62;
            v63 = *(_OWORD *)(v8 - 1560);
            *(_OWORD *)(a1 + 8152) = *(_OWORD *)(v8 - 1576);
            *(_OWORD *)(a1 + 8168) = v63;
            *(_OWORD *)(a1 + 0x2000) = *(_OWORD *)(v8 - 1536);
            v64 = *(_OWORD *)(v8 - 1488);
            v65 = *(_OWORD *)(v8 - 1472);
            v66 = *(_OWORD *)(v8 - 1504);
            *(_OWORD *)(a1 + 8208) = *(_OWORD *)(v8 - 1520);
            *(_OWORD *)(a1 + 8256) = v65;
            *(_OWORD *)(a1 + 8240) = v64;
            *(_OWORD *)(a1 + 8224) = v66;
            v67 = *(_OWORD *)(v8 - 1456);
            *(_QWORD *)(a1 + 8288) = *(_QWORD *)(v8 - 1440);
            *(_OWORD *)(a1 + 8272) = v67;
            *(_DWORD *)(a1 + 8296) = 0;
            sub_1010F3B10(v8 - 1432, (unsigned __int8 *)(a1 + 6776));
            sub_1010F3D5C(v8 - 1432, (unsigned __int8 *)(a1 + 6776));
            sub_1010F3F7C(a1 + 6776, v68, v69, v70);
            sub_1010F6AAC(a1 + 8320, (uint64_t)v120);
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
            v71 = sub_1010F5314(a1 + 3416, a1 + 6776);
            sub_1010F5314(a1 + 80, v71);
            v72 = *(_QWORD *)(a1 + 6752);
            *(_QWORD *)(a1 + 6760) = v72;
            if (v72 >= *(_QWORD *)(a1 + 6768))
              v73 = sub_1010FF7A8((uint64_t *)(a1 + 6752), a1 + 6776);
            else
              v73 = sub_1010FEA38(v72, a1 + 6776) + 3336;
            *(_QWORD *)(a1 + 6760) = v73;
            *(_QWORD *)(a1 + 10160) = *(_QWORD *)(a1 + 8728);
            *(_OWORD *)(a1 + 10112) = *(_OWORD *)(a1 + 8680);
            *(_OWORD *)(a1 + 10128) = *(_OWORD *)(a1 + 8696);
            *(_OWORD *)(a1 + 10144) = *(_OWORD *)(a1 + 8712);
            *(_BYTE *)(v4 + 10112) = *(_BYTE *)(v4 + 8680);
            *(_QWORD *)(a1 + 10216) = *(_QWORD *)(a1 + 8784);
            *(_OWORD *)(a1 + 10184) = *(_OWORD *)(a1 + 8752);
            *(_OWORD *)(a1 + 10200) = *(_OWORD *)(a1 + 8768);
            *(_OWORD *)(a1 + 10232) = *(_OWORD *)(a1 + 8800);
            *(_OWORD *)(a1 + 10296) = *(_OWORD *)(a1 + 8864);
            *(_OWORD *)(a1 + 10280) = *(_OWORD *)(a1 + 8848);
            *(_OWORD *)(a1 + 10264) = *(_OWORD *)(a1 + 8832);
            *(_OWORD *)(a1 + 10248) = *(_OWORD *)(a1 + 8816);
            *(_OWORD *)(a1 + 10320) = *(_OWORD *)(a1 + 8888);
            *(_OWORD *)(a1 + 10336) = *(_OWORD *)(a1 + 8904);
            *(_QWORD *)(a1 + 10352) = *(_QWORD *)(a1 + 8920);
            v80 = *(_OWORD *)(a1 + 8936);
            *(_OWORD *)(a1 + 10384) = *(_OWORD *)(a1 + 8952);
            *(_OWORD *)(a1 + 10368) = v80;
            memcpy((void *)(a1 + 10408), (const void *)(a1 + 8976), 0x128uLL);
            *(_BYTE *)(v4 + 10648) = *(_BYTE *)(v4 + 9216);
            *(_OWORD *)(a1 + 10720) = *(_OWORD *)(a1 + 9288);
            *(_OWORD *)(a1 + 10736) = *(_OWORD *)(a1 + 9304);
            *(_QWORD *)(a1 + 10752) = *(_QWORD *)(a1 + 9320);
            *(_OWORD *)(a1 + 10784) = *(_OWORD *)(a1 + 9352);
            *(_OWORD *)(a1 + 10800) = *(_OWORD *)(a1 + 9368);
            *(_OWORD *)(a1 + 10816) = *(_OWORD *)(a1 + 9384);
            *(_OWORD *)(a1 + 10832) = *(_OWORD *)(a1 + 9400);
            *(_OWORD *)(a1 + 10872) = *(_OWORD *)(a1 + 9440);
            *(_OWORD *)(a1 + 10856) = *(_OWORD *)(a1 + 9424);
            *(_OWORD *)(a1 + 10904) = *(_OWORD *)(a1 + 9472);
            *(_OWORD *)(a1 + 10920) = *(_OWORD *)(a1 + 9488);
            v81 = *(_OWORD *)(a1 + 9336);
            *(_QWORD *)(a1 + 10888) = *(_QWORD *)(a1 + 9456);
            *(_OWORD *)(a1 + 10768) = v81;
            memcpy((void *)(a1 + 10944), (const void *)(a1 + 9512), 0x128uLL);
            *(_OWORD *)(a1 + 11248) = *(_OWORD *)(a1 + 9816);
            *(_OWORD *)(a1 + 11264) = *(_OWORD *)(a1 + 9832);
            *(_OWORD *)(a1 + 11304) = *(_OWORD *)(a1 + 9872);
            *(_OWORD *)(a1 + 11320) = *(_OWORD *)(a1 + 9888);
            *(_OWORD *)(a1 + 11336) = *(_OWORD *)(a1 + 9904);
            *(_OWORD *)(a1 + 11352) = *(_OWORD *)(a1 + 9920);
            *(_OWORD *)(a1 + 11288) = *(_OWORD *)(a1 + 9856);
            *(_BYTE *)(v4 + 11312) = *(_BYTE *)(v4 + 9880);
            v82 = *(_OWORD *)(a1 + 9952);
            *(_OWORD *)(a1 + 11400) = *(_OWORD *)(a1 + 9968);
            *(_OWORD *)(a1 + 11384) = v82;
            *(_OWORD *)(a1 + 11488) = *(_OWORD *)(a1 + 10056);
            *(_OWORD *)(a1 + 11472) = *(_OWORD *)(a1 + 10040);
            *(_OWORD *)(a1 + 11456) = *(_OWORD *)(a1 + 10024);
            *(_OWORD *)(a1 + 11440) = *(_OWORD *)(a1 + 10008);
            *(_OWORD *)(a1 + 11424) = *(_OWORD *)(a1 + 9992);
            *(_OWORD *)(a1 + 11504) = *(_OWORD *)(a1 + 10072);
            *(_OWORD *)(a1 + 11520) = *(_OWORD *)(a1 + 10088);
            *(_BYTE *)(a1 + 11536) = *(_BYTE *)(a1 + 10104);
            sub_1010E8510((unsigned __int8 *)(a1 + 1));
            sub_1010FA98C(a1, *(double *)(a1 + 7952));
            atomic_store(0, (unsigned __int8 *)(a1 + 1));
            if (qword_1022A00C0 != -1)
              dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
            v83 = qword_1022A00C8;
            if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
            {
              v84 = *(_QWORD *)(a1 + 8336);
              v85 = *(double *)(a1 + 6936);
              v86 = *(double *)(a1 + 6944);
              v87 = *(_QWORD *)(a1 + 6952);
              v88 = *(double *)(a1 + 6960) * 57.2957795;
              v89 = *(_QWORD *)(a1 + 6984);
              v90 = *(_QWORD *)(a1 + 6992);
              v91 = *(_QWORD *)(a1 + 7000);
              v92 = *(_QWORD *)(a1 + 7024);
              v93 = *(_QWORD *)(a1 + 7080);
              v94 = *(_QWORD *)(a1 + 7136);
              v95 = *(_QWORD *)(a1 + 7192);
              v96 = *(_QWORD *)(a1 + 7248);
              v97 = *(_QWORD *)(a1 + 7304);
              *(_DWORD *)buf = 134352385;
              *(_QWORD *)&buf[4] = v84;
              v166 = 2049;
              v167 = v85;
              v168 = 2049;
              v169 = v86;
              v170 = 2049;
              v171 = v87;
              v172 = 2049;
              v173 = v88;
              v174 = 2049;
              v175 = v89;
              v176 = 2049;
              v177 = v90;
              v178 = 2049;
              v179 = v91;
              v180 = 2049;
              v181 = v92;
              v182 = 2049;
              v183 = v93;
              v184 = 2049;
              v185 = v94;
              v186 = 2049;
              v187 = v95;
              v188 = 2049;
              v189 = v96;
              v190 = 2049;
              v191 = v97;
              _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "CLVLF,initWithPoints,Filter initialized,machAbsTime,%{public}.3lf,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", buf, 0x8Eu);
            }
            if (!sub_1001BFF7C(115, 2))
              return;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00C0 != -1)
              dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
            v104 = *(_QWORD *)(a1 + 8336);
            v105 = *(double *)(a1 + 6936);
            v106 = *(double *)(a1 + 6944);
            v107 = *(_QWORD *)(a1 + 6952);
            v108 = *(double *)(a1 + 6960) * 57.2957795;
            v109 = *(_QWORD *)(a1 + 6984);
            v110 = *(_QWORD *)(a1 + 6992);
            v111 = *(_QWORD *)(a1 + 7000);
            v112 = *(_QWORD *)(a1 + 7024);
            v113 = *(_QWORD *)(a1 + 7080);
            v114 = *(_QWORD *)(a1 + 7136);
            v115 = *(_QWORD *)(a1 + 7192);
            v116 = *(_QWORD *)(a1 + 7248);
            v117 = *(_QWORD *)(a1 + 7304);
            v137 = 134352385;
            v138 = v104;
            v139 = 2049;
            v140 = v105;
            v141 = 2049;
            v142 = v106;
            v143 = 2049;
            v144 = v107;
            v145 = 2049;
            v146 = v108;
            v147 = 2049;
            v148 = v109;
            v149 = 2049;
            v150 = v110;
            v151 = 2049;
            v152 = v111;
            v153 = 2049;
            v154 = v112;
            v155 = 2049;
            v156 = v113;
            v157 = 2049;
            v158 = v114;
            v159 = 2049;
            v160 = v115;
            v161 = 2049;
            v162 = v116;
            v163 = 2049;
            v164 = v117;
            LODWORD(v118) = 142;
            v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,initWithPoints,Filter initialized,machAbsTime,%{public}.3lf,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", &v137, v118);
            sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v19);
          }
          else
          {
            if (qword_1022A00C0 != -1)
              dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
            v77 = qword_1022A00C8;
            if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
            {
              v78 = *(_QWORD *)(v8 - 1776);
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)&buf[4] = v78;
              _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "CLVLF,initWithPoints,Unable to initialize transform_vio2enu,machAbsTime,%{public}.3lf", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 0))
              return;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00C0 != -1)
              dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
            v79 = *(_QWORD *)(v8 - 1776);
            v137 = 134349056;
            v138 = v79;
            LODWORD(v118) = 12;
            v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,initWithPoints,Unable to initialize transform_vio2enu,machAbsTime,%{public}.3lf", &v137, v118);
            sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v19);
          }
        }
        else
        {
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
          v26 = (double *)(v8 - 1448);
          v27 = qword_1022A00C8;
          if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
          {
            v28 = *(_QWORD *)(v8 - 1776);
            v29 = *v26 * 57.2957795;
            v30 = *v24 * 57.2957795;
            *(_DWORD *)buf = 134349569;
            *(_QWORD *)&buf[4] = v28;
            v166 = 2049;
            v167 = v29;
            v168 = 2049;
            v169 = v30;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLVLF,initialize,Computed course and reported course are too different,machAbsTime,%{public}.3lf,courseEnuFromPos,%{private}.3lf,courseEnu,%{private}.3lf", buf, 0x20u);
          }
          if (!sub_1001BFF7C(115, 2))
            return;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
          v31 = *(_QWORD *)(v8 - 1776);
          v32 = *v26 * 57.2957795;
          v33 = *v24 * 57.2957795;
          v137 = 134349569;
          v138 = v31;
          v139 = 2049;
          v140 = v32;
          v141 = 2049;
          v142 = v33;
          LODWORD(v118) = 32;
          v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLF,initialize,Computed course and reported course are too different,machAbsTime,%{public}.3lf,courseEnuFromPos,%{private}.3lf,courseEnu,%{private}.3lf", &v137, v118);
          sub_100512490("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v19);
        }
LABEL_136:
        if (v19 != buf)
          free(v19);
        return;
      }
      while (sub_1010F598C(v20 + 72, v8 - 1760, v20))
      {
        v20 += 1792;
        if (v20 == v21)
          goto LABEL_34;
      }
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v74 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        v75 = *(_QWORD *)(v8 - 1776);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v75;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "CLVLF,initWithPoints,Unable to compute ENU potisions,machAbsTime,%{public}.3lf", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
        v76 = *(_QWORD *)(v8 - 1776);
        v137 = 134349056;
        v138 = v76;
        v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,initWithPoints,Unable to compute ENU potisions,machAbsTime,%{public}.3lf", &v137, 12);
        sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v19);
        goto LABEL_136;
      }
    }
  }
}

void sub_1010FA0BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_1010FA0C8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _BOOL8 result;
  NSObject *v11;
  char *v12;
  int v13;
  double v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  double v18;
  __int16 v19;
  uint64_t v20;

  if (*(_BYTE *)(a2 + 1144))
    v2 = *(_BYTE *)(a2 + 3152) == 0;
  else
    v2 = 1;
  if (v2)
    return 1;
  v4 = *(double *)(a2 + 1864);
  v5 = -1.57079633;
  v6 = -1.57079633;
  if (v4 < 1.0)
  {
    if (v4 <= -1.0)
      v6 = 1.57079633;
    else
      v6 = asin(-v4);
  }
  v7 = *(double *)(a2 + 1272);
  if (v7 < 1.0)
  {
    if (v7 <= -1.0)
      v5 = 1.57079633;
    else
      v5 = asin(-v7);
  }
  v8 = vabdd_f64(v6, v5);
  v9 = 6.28318531 - v8 >= v8 ? v8 : 6.28318531 - v8;
  if (v9 <= 0.261799388)
    return 1;
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
  v11 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134283777;
    v18 = v9 * 57.2957795;
    v19 = 2049;
    v20 = 0x402DFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLVLF,isValid,Invalid VL,VL-VIO pitchDiff,%{private}.3lf,pitchDiffThres,%{private}.3lf", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v13 = 134283777;
    v14 = v9 * 57.2957795;
    v15 = 2049;
    v16 = 0x402DFFFFFFFFFFFFLL;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,isValid,Invalid VL,VL-VIO pitchDiff,%{private}.3lf,pitchDiffThres,%{private}.3lf", &v13, 22);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::isValid(const fusion::LocationFuserMeasurement<fusion::VlfData> &) const", "%s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
    return 0;
  }
  return result;
}

void sub_1010FA368(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1010FA374(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(result + 56);
  v3 = *(_QWORD *)(result + 64);
  v2 = result + 56;
  if (v4 != v3)
  {
    v6 = result;
    while (*(double *)(v4 + 16) >= a2)
    {
      v4 += 1792;
      if (v4 == v3)
      {
        v4 = *(_QWORD *)(result + 64);
        return sub_1010F7288(v2, v4, v3);
      }
    }
    if (v4 != v3)
    {
      v7 = v4 + 1792;
      if (v4 + 1792 != v3)
      {
        do
        {
          if (*(double *)(v7 + 16) >= a2)
          {
            sub_1010F6AAC(v4, v7);
            v4 += 1792;
          }
          v7 += 1792;
        }
        while (v7 != v3);
        v3 = *(_QWORD *)(v6 + 64);
      }
    }
    return sub_1010F7288(v2, v4, v3);
  }
  return result;
}

uint64_t sub_1010FA430(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  __double2 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  __int128 v27;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  int64x2_t v32;
  double *v33;
  void *v34;
  __int128 __B;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int64x2_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[9];
  void *__p;
  int8x16_t v47;
  __int128 v48;
  uint64_t (**v49)();
  __int128 v50;
  __int128 v51;
  uint64_t (**v52)();
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t (**v66)();
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _QWORD v72[11];
  _QWORD v73[12];

  sub_10149D1CC(a2);
  *(_BYTE *)a2 = a3 ^ 1;
  v6 = a1[1];
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v6 - *a1) >> 8)) < 3
    || !*(_BYTE *)(v6 - 1632)
    || !*(_BYTE *)(v6 - 1456)
    || !*(_BYTE *)(v6 - 32))
  {
    return 0;
  }
  v7 = __sincos_stret(*(double *)(v6 - 1448) - *(double *)(v6 - 24));
  v73[0] = off_1021A0F28;
  v73[1] = *(_QWORD *)&v7.__cosval;
  v73[2] = *(_QWORD *)&v7.__sinval;
  v73[3] = 0;
  *(double *)&v73[4] = -v7.__sinval;
  v73[5] = *(_QWORD *)&v7.__cosval;
  memset(&v73[6], 0, 24);
  v73[9] = 0x3FF0000000000000;
  v73[10] = 0;
  sub_10149CC94((double *)a2, (uint64_t)v73);
  v8 = *(_OWORD *)(v6 - 1576);
  *(_OWORD *)(a2 + 216) = *(_OWORD *)(v6 - 1560);
  *(_OWORD *)(a2 + 200) = v8;
  if (a3)
  {
    v9 = *(_QWORD *)(a2 + 72);
    v11 = *(_QWORD *)(a2 + 80);
    v10 = *(_QWORD *)(a2 + 88);
    v72[1] = *(_QWORD *)(a2 + 64);
    v72[2] = v10;
    v12 = *(_QWORD *)(a2 + 120);
    v72[3] = *(_QWORD *)(a2 + 112);
    v72[4] = v9;
    v13 = *(_QWORD *)(a2 + 104);
    v72[5] = *(_QWORD *)(a2 + 96);
    v72[6] = v12;
    v33 = (double *)(a2 + 56);
    v72[0] = off_1021A0F28;
    v72[10] = 0;
    v72[7] = v11;
    v72[8] = v13;
    v72[9] = *(_QWORD *)(a2 + 128);
    v66 = off_1021A0F28;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v63 = 0;
    v60 = 0;
    v57 = 0;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v59 = 0u;
    v62 = 0u;
    v65 = 0;
    v64 = 0xBFF0000000000000;
    v61 = 0xBFF0000000000000;
    v52 = off_1021A1608;
    v58 = 0xBFF0000000000000;
    v49 = off_1021A1298;
    v50 = 0u;
    v51 = 0u;
    v14 = *a1;
    v15 = a1[1];
    if (*a1 != v15)
    {
      v16 = *a1;
      do
      {
        v34 = off_1021A1298;
        v17 = *(_OWORD *)(v16 + 632);
        __B = *(_OWORD *)(v16 + 616);
        v36 = v17;
        for (i = 8; i != 32; i += 8)
          *(double *)((char *)&v34 + i) = *(double *)((char *)&v34 + i) - *(double *)(v6 + i - 1184);
        for (j = 1; j != 4; ++j)
          *(double *)&(&v49)[j] = *(double *)&(&v49)[j] + *(double *)((char *)&v34 + j * 8);
        v16 += 1792;
      }
      while (v16 != v15);
    }
    for (k = 1; k != 4; ++k)
      *(double *)&(&v49)[k] = *(double *)&(&v49)[k]
                            / (double)(unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 8));
    if (v14 != v15)
    {
      v32 = vdupq_n_s64(3uLL);
      do
      {
        if (*(_BYTE *)(v14 + 160))
        {
          LOBYTE(v40) = 0;
          v41 = v32;
          v42 = xmmword_101B9B430;
          v43 = v14 + 824;
          v44 = v14 + 944;
          sub_1010FAE94((uint64_t)v33, &v40, v45);
          sub_1010FD4C0((uint64_t)v45, (uint64_t)v72, (uint64_t *)&__p);
          v21 = 0;
          v34 = off_1021A0F28;
          v22 = *(_OWORD *)(v14 + 304);
          v37 = *(_OWORD *)(v14 + 288);
          v38 = v22;
          v39 = *(_OWORD *)(v14 + 320);
          v23 = *(_OWORD *)(v14 + 272);
          __B = *(_OWORD *)(v14 + 256);
          v36 = v23;
          v24 = v48;
          do
          {
            *(double *)((char *)&v34 + v21 + 8) = *(double *)((char *)&v34 + v21 + 8) + *(double *)(v24 + v21);
            v21 += 8;
          }
          while (v21 != 72);
          v69 = v37;
          v70 = v38;
          v71 = v39;
          v67 = __B;
          v68 = v36;
          sub_1010FE154(&__p);
          sub_1010FE154(v45);
          v34 = 0;
          __B = 0uLL;
          __p = 0;
          v47 = 0uLL;
          sub_1010FD550((double *)&v66);
          if (__p)
          {
            v47.i64[0] = (uint64_t)__p;
            operator delete(__p);
          }
          if (v34)
          {
            *(_QWORD *)&__B = v34;
            operator delete(v34);
          }
          __p = off_1021A1298;
          v26 = *(int8x16_t *)(v14 + 616);
          v27 = *(_OWORD *)(v14 + 632);
          v47 = v26;
          v48 = v27;
          for (m = 8; m != 32; m += 8)
            *(double *)((char *)&__p + m) = *(double *)((char *)&__p + m) - *(double *)(v6 + m - 1184);
          for (n = 1; n != 4; ++n)
          {
            *(double *)v26.i64 = *(double *)((char *)&__p + n * 8) - *(double *)&(&v49)[n];
            *(void **)((char *)&__p + n * 8) = (void *)v26.i64[0];
          }
          sub_10149E0BC(v33, a2 + 144, (double *)&__p, (uint64_t)&v34, v26, v25);
          for (ii = 8; ii != 80; ii += 8)
            *(double *)((char *)&v34 + ii) = -*(double *)((char *)&v34 + ii);
          v53 = __B;
          v54 = v36;
          v55 = v37;
          v56 = v38;
          v57 = v39;
          sub_1010FD5F4((uint64_t)&v66, (uint64_t)&v52, (uint64_t)&v34);
          cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, 6, 6, 3, 1.0, (const double *)&v53, 3, (const double *)&__B, 3, 1.0, (double *)(a2 + 240), 6);
        }
        v14 += 1792;
      }
      while (v14 != v15);
    }
    v34 = 0;
    __B = 0uLL;
    __p = 0;
    v47 = 0uLL;
    sub_1010FFC74((__CLPK_doublereal *)(a2 + 240), 6uLL, (__CLPK_doublereal **)&v34, (__CLPK_integer **)&__p);
    if (__p)
    {
      v47.i64[0] = (uint64_t)__p;
      operator delete(__p);
    }
    if (v34)
    {
      *(_QWORD *)&__B = v34;
      operator delete(v34);
    }
  }
  return 1;
}

void sub_1010FA98C(uint64_t a1, double a2)
{
  unsigned __int8 *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v4 = (unsigned __int8 *)(a1 + 1);
  do
    v5 = __ldaxr(v4);
  while (__stxr(1u, v4));
  if ((v5 & 1) == 0)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v6 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLVLF,removeAllVlfDataLessThanMachAbsoluteTime,Called without locking vision buffers", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v11[0] = 0;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,removeAllVlfDataLessThanMachAbsoluteTime,Called without locking vision buffers", v11, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLVisionLocationFuser::removeAllVlfDataLessThanMachAbsoluteTime(const CFTimeInterval)", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (v8 != v7)
  {
    while (*(double *)(v8 + 8) >= a2)
    {
      v8 += 3160;
      if (v8 == v7)
      {
        v8 = *(_QWORD *)(a1 + 40);
        goto LABEL_19;
      }
    }
    if (v8 != v7)
    {
      v9 = v8 + 3160;
      if (v8 + 3160 != v7)
      {
        do
        {
          if (*(double *)(v9 + 8) >= a2)
          {
            sub_1010FF554(v8, v9);
            v8 += 3160;
          }
          v9 += 3160;
        }
        while (v9 != v7);
        v7 = *(_QWORD *)(a1 + 40);
      }
    }
LABEL_19:
    sub_1010F7244(a1 + 32, v8, v7);
  }
  if ((v5 & 1) == 0)
    atomic_store(0, v4);
}

void sub_1010FABD0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1010FABDC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  const double *v7;
  uint64_t v8;
  double *__Y;
  uint64_t __incY;
  uint64_t v11;
  CBLAS_TRANSPOSE v12;

  v5 = sub_1010FFC2C(a3, 6, a2[2]);
  v6 = a2[2];
  if (v6)
  {
    v7 = (const double *)a2[5];
    v8 = a2[3];
    __incY = v5[2];
    __Y = (double *)v5[3];
    if (v6 == 1)
    {
      cblas_dgemv(CblasColMajor, CblasNoTrans, 6, 6, 1.0, (const double *)(a1 + 8), 6, v7, v8, 0.0, __Y, __incY);
    }
    else
    {
      v11 = a2[4];
      if (v8 == 1)
      {
        v12 = CblasNoTrans;
      }
      else
      {
        v11 = a2[3];
        v12 = CblasTrans;
      }
      cblas_dgemm(CblasColMajor, CblasNoTrans, v12, 6, v6, 6, 1.0, (const double *)(a1 + 8), 6, v7, v11, 0.0, __Y, __incY);
    }
  }
}

void sub_1010FACB0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t __C;

  *(_QWORD *)a3 = off_1021A10E0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_QWORD *)(a3 + 296) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  __C = a3 + 8;
  *(_OWORD *)(__C + 256) = 0u;
  *(_OWORD *)(__C + 272) = 0u;
  cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 6, 6, 6, 1.0, (const double *)(a1 + 8), 6, (const double *)(a2 + 8), 6, 0.0, (double *)__C, 6);
}

BOOL sub_1010FAD6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _BYTE v15[8];
  __int128 v16;
  __int128 v17;
  _BYTE v18[8];
  __int128 v19;
  __int128 v20;

  v6 = 0;
  v7 = *(_OWORD *)(a2 + 2000);
  v19 = *(_OWORD *)(a2 + 1984);
  v20 = v7;
  do
  {
    *(double *)&v18[v6 + 8] = *(double *)&v18[v6 + 8] - *(double *)(a1 + 616 + v6);
    v6 += 8;
  }
  while (v6 != 24);
  v8 = 0;
  v9 = v19;
  v16 = *(_OWORD *)(a3 + 1376);
  v17 = *(_OWORD *)(a3 + 1392);
  do
  {
    *(double *)&v15[v8 + 8] = *(double *)&v15[v8 + 8] - *(double *)(a2 + 1392 + v8);
    v8 += 8;
  }
  while (v8 != 24);
  v10 = hypot(*(long double *)&v9, *((long double *)&v9 + 1));
  v11 = hypot(*(long double *)&v16, *((long double *)&v16 + 1));
  if (v10 < 8.0
    && ((v12 = sqrt(*(double *)(a2 + 1600) + *(double *)(a2 + 1656)), v12 <= 0.0)
     || (v13 = *(double *)(a3 + 1272), v13 <= 0.0)
     || v13 + *(double *)&qword_10230C820 * v12 >= v11))
  {
    return vabdd_f64(*(double *)(a2 + 8), *(double *)(a1 + 16)) >= 16.0;
  }
  else
  {
    return 1;
  }
}

void sub_1010FAE94(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  const double *v7;
  uint64_t v8;
  double *__Y;
  uint64_t __incY;
  uint64_t v11;
  CBLAS_TRANSPOSE v12;

  v5 = sub_1010FFC2C(a3, 3, a2[2]);
  v6 = a2[2];
  if (v6)
  {
    v7 = (const double *)a2[5];
    v8 = a2[3];
    __incY = v5[2];
    __Y = (double *)v5[3];
    if (v6 == 1)
    {
      cblas_dgemv(CblasColMajor, CblasNoTrans, 3, 3, 1.0, (const double *)(a1 + 8), 3, v7, v8, 0.0, __Y, __incY);
    }
    else
    {
      v11 = a2[4];
      if (v8 == 1)
      {
        v12 = CblasNoTrans;
      }
      else
      {
        v11 = a2[3];
        v12 = CblasTrans;
      }
      cblas_dgemm(CblasColMajor, CblasNoTrans, v12, 3, v6, 3, 1.0, (const double *)(a1 + 8), 3, v7, v11, 0.0, __Y, __incY);
    }
  }
}

double sub_1010FAF68(double *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double result;

  v2 = a2[3];
  v3 = a2[4];
  v4 = (double *)a2[5];
  v5 = a1[2];
  a1[1] = *v4 + a1[1];
  a1[2] = v4[v2] + v5;
  v6 = a1[4];
  a1[3] = v4[2 * v2] + a1[3];
  a1[4] = v4[v3] + v6;
  v7 = a1[6];
  a1[5] = v4[v3 + v2] + a1[5];
  a1[6] = v4[2 * v2 + v3] + v7;
  v8 = a1[8];
  a1[7] = v4[2 * v3] + a1[7];
  a1[8] = v4[2 * v3 + v2] + v8;
  result = v4[2 * v3 + 2 * v2] + a1[9];
  a1[9] = result;
  return result;
}

void sub_1010FB010(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  const double *v7;
  uint64_t v8;
  double *__Y;
  uint64_t __incY;
  uint64_t v11;
  CBLAS_TRANSPOSE v12;

  v5 = sub_1010FFC2C(a3, 3, a2[2]);
  v6 = a2[2];
  if (v6)
  {
    v7 = (const double *)a2[5];
    v8 = a2[3];
    __incY = v5[2];
    __Y = (double *)v5[3];
    if (v6 == 1)
    {
      cblas_dgemv(CblasColMajor, CblasNoTrans, 3, 6, 1.0, (const double *)(a1 + 8), 3, v7, v8, 0.0, __Y, __incY);
    }
    else
    {
      v11 = a2[4];
      if (v8 == 1)
      {
        v12 = CblasNoTrans;
      }
      else
      {
        v11 = a2[3];
        v12 = CblasTrans;
      }
      cblas_dgemm(CblasColMajor, CblasNoTrans, v12, 3, v6, 6, 1.0, (const double *)(a1 + 8), 3, v7, v11, 0.0, __Y, __incY);
    }
  }
}

void sub_1010FB0E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = off_1021A1608;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_QWORD *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 3, 6, 6, 1.0, (const double *)(a1 + 8), 3, (const double *)(a2 + 8), 6, 0.0, (double *)(a3 + 8), 3);
}

double sub_1010FB184@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double result;

  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  v2 = *(double *)(a2 + 8);
  v3 = *(double *)(a2 + 16);
  v4 = *(double *)(a2 + 24);
  v5 = *(double *)(a2 + 32);
  v6 = *(double *)(a2 + 40);
  v7 = *(double *)(a2 + 48);
  v8 = *(double *)(a2 + 56);
  v9 = *(double *)(a2 + 64);
  v10 = *(double *)(a2 + 72);
  v11 = v6 * v10 - v9 * v7;
  v12 = v9 * v4 - v3 * v10;
  v13 = v3 * v7 - v6 * v4;
  v14 = v5 * v12 + v11 * v2 + v13 * v8;
  *(_QWORD *)a2 = off_1021A0F28;
  *(double *)(a2 + 8) = v11 / v14;
  *(double *)(a2 + 16) = v12 / v14;
  *(double *)(a2 + 24) = v13 / v14;
  *(double *)(a2 + 32) = (v8 * v7 - v5 * v10) / v14;
  *(double *)(a2 + 40) = (v2 * v10 - v8 * v4) / v14;
  *(double *)(a2 + 48) = (v5 * v4 - v2 * v7) / v14;
  *(double *)(a2 + 56) = (v5 * v9 - v8 * v6) / v14;
  *(double *)(a2 + 64) = (v8 * v3 - v2 * v9) / v14;
  result = (v2 * v6 - v5 * v3) / v14;
  *(double *)(a2 + 72) = result;
  return result;
}

void sub_1010FB260(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  CBLAS_TRANSPOSE v7;
  int v8;
  int v9;
  int v10;

  v5 = sub_1010FFC2C(a3, *(_QWORD *)(a1 + 8), 1);
  if (*(_QWORD *)(a1 + 8))
  {
    v6 = *(_QWORD *)(a1 + 24);
    if (v6 == 1)
      v7 = CblasNoTrans;
    else
      v7 = CblasTrans;
    if (v6 == 1)
      v8 = *(_QWORD *)(a1 + 8);
    else
      v8 = 3;
    if (v6 == 1)
      v9 = 3;
    else
      v9 = *(_QWORD *)(a1 + 8);
    if (v6 == 1)
      v10 = *(_DWORD *)(a1 + 32);
    else
      v10 = *(_QWORD *)(a1 + 24);
    cblas_dgemv(CblasColMajor, v7, v8, v9, 1.0, *(const double **)(a1 + 40), v10, (const double *)(a2 + 8), 1, 0.0, (double *)v5[3], v5[2]);
  }
}

void sub_1010FB2F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  CBLAS_TRANSPOSE v8;
  int v9;

  v5 = sub_1010FFC2C(a3, *(_QWORD *)(a1 + 8), 3);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 24);
    if (v7 == 1)
      v8 = CblasNoTrans;
    else
      v8 = CblasTrans;
    if (v7 == 1)
      v9 = *(_DWORD *)(a1 + 32);
    else
      v9 = *(_QWORD *)(a1 + 24);
    cblas_dgemm(CblasColMajor, v8, CblasNoTrans, v6, 3, 3, 1.0, *(const double **)(a1 + 40), v9, (const double *)(a2 + 8), 3, 0.0, (double *)v5[3], v5[2]);
  }
}

void sub_1010FB390(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = off_1021A1450;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  cblas_dgemv(CblasColMajor, CblasNoTrans, 6, 3, 1.0, (const double *)(a1 + 8), 6, (const double *)(a2 + 8), 1, 0.0, (double *)(a3 + 8), 1);
}

void sub_1010FB408(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t __C;

  *(_QWORD *)a3 = off_1021A10E0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_QWORD *)(a3 + 296) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  __C = a3 + 8;
  *(_OWORD *)(__C + 256) = 0u;
  *(_OWORD *)(__C + 272) = 0u;
  cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 6, 6, 3, 1.0, (const double *)(a1 + 8), 6, (const double *)(a2 + 8), 3, 0.0, (double *)__C, 6);
}

BOOL sub_1010FB4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _BYTE v15[8];
  __int128 v16;
  __int128 v17;
  _BYTE v18[8];
  __int128 v19;
  __int128 v20;

  v6 = 0;
  v7 = *(_OWORD *)(a2 + 632);
  v19 = *(_OWORD *)(a2 + 616);
  v20 = v7;
  do
  {
    *(double *)&v18[v6 + 8] = *(double *)&v18[v6 + 8] - *(double *)(a1 + 616 + v6);
    v6 += 8;
  }
  while (v6 != 24);
  v8 = 0;
  v9 = v19;
  v16 = *(_OWORD *)(a3 + 1376);
  v17 = *(_OWORD *)(a3 + 1392);
  do
  {
    *(double *)&v15[v8 + 8] = *(double *)&v15[v8 + 8] - *(double *)(a2 + 216 + v8);
    v8 += 8;
  }
  while (v8 != 24);
  v10 = hypot(*(long double *)&v9, *((long double *)&v9 + 1));
  v11 = hypot(*(long double *)&v16, *((long double *)&v16 + 1));
  if (v10 < 8.0
    && ((v12 = *(double *)(a2 + 112), v12 <= 0.0)
     || (v13 = *(double *)(a3 + 1272), v13 <= 0.0)
     || v13 + *(double *)&qword_10230C820 * v12 >= v11))
  {
    return vabdd_f64(*(double *)(a2 + 16), *(double *)(a1 + 16)) >= 16.0;
  }
  else
  {
    return 1;
  }
}

BOOL sub_1010FB5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double v4;
  double v5;
  __int128 v6;
  double v7;
  double v8;
  double v9;
  _BYTE v12[8];
  __int128 v13;
  __int128 v14;

  v3 = 0;
  v4 = *(double *)(a3 + 40);
  v5 = *(double *)(a2 + 40);
  v6 = *(_OWORD *)(a3 + 272);
  v13 = *(_OWORD *)(a3 + 256);
  v14 = v6;
  do
  {
    *(double *)&v12[v3 + 8] = *(double *)&v12[v3 + 8] - *(double *)(a2 + 256 + v3);
    v3 += 8;
  }
  while (v3 != 24);
  v7 = *((double *)&v13 + 1) * *((double *)&v13 + 1) + *(double *)&v13 * *(double *)&v13;
  v8 = vabdd_f64(v4, v5);
  v9 = v8 * (v8 * 36.0);
  return v7 <= 0.0576 || v7 <= v9;
}

BOOL sub_1010FB66C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  unint64_t v6;
  _BOOL8 v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  double v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  double v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _DWORD *v74;
  double v75;
  double v76;
  double v77;
  uint64_t *v78;
  uint64_t *v79;
  _QWORD *v80;
  uint64_t v81;
  double v82;
  double v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t i;
  uint64_t v90;
  char *v91;
  uint64_t j;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  int64x2_t v96;
  int64x2_t v97;
  char v98[8];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t (**v104)();
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  int64x2_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int64x2_t v116;
  _BYTE v117[24];
  char *v118;
  __int128 v119;
  uint64_t v120;
  uint64_t (**v121)();
  int64x2_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  int64x2_t v128;
  __int128 v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t (**v132)();
  double v133[5];
  uint64_t (**v134)();
  double v135[5];
  uint64_t (**v136)();
  _BYTE v137[32];
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  _QWORD buf[3];
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _OWORD v149[98];

  v5 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 48) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 32) = v5;
  *(_BYTE *)(a3 + 1424) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  v140 = *(_QWORD *)(a1 + 8);
  v139 = v6;
  v7 = sub_1010FCA60(v140, v6, a2, &v140, (unint64_t *)&v139);
  if (v7)
  {
    v8 = v140;
    v9 = v139;
    result = sub_1010FB5E4(v7, v140, v139);
    if (!result)
      return result;
    v11 = *(double *)(v8 + 40);
    v12 = *(double *)(a2 + 8);
    if (v11 == v12)
    {
      v13 = *(_OWORD *)v8;
      v14 = *(_OWORD *)(v8 + 16);
      v15 = *(_OWORD *)(v8 + 32);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(v8 + 48);
      *(_OWORD *)(a3 + 16) = v14;
      *(_OWORD *)(a3 + 32) = v15;
      *(_OWORD *)a3 = v13;
      *(_BYTE *)(a3 + 56) = *(_BYTE *)(v8 + 56);
      v16 = *(_OWORD *)(v8 + 72);
      v17 = *(_OWORD *)(v8 + 88);
      *(_QWORD *)(a3 + 104) = *(_QWORD *)(v8 + 104);
      *(_OWORD *)(a3 + 88) = v17;
      *(_OWORD *)(a3 + 72) = v16;
      v18 = *(_OWORD *)(v8 + 152);
      v19 = *(_OWORD *)(v8 + 168);
      v20 = *(_OWORD *)(v8 + 184);
      *(_OWORD *)(a3 + 136) = *(_OWORD *)(v8 + 136);
      *(_OWORD *)(a3 + 184) = v20;
      *(_OWORD *)(a3 + 168) = v19;
      *(_OWORD *)(a3 + 152) = v18;
      *(_OWORD *)(a3 + 120) = *(_OWORD *)(v8 + 120);
      v21 = *(_OWORD *)(v8 + 208);
      v22 = *(_OWORD *)(v8 + 224);
      *(_QWORD *)(a3 + 240) = *(_QWORD *)(v8 + 240);
      *(_OWORD *)(a3 + 208) = v21;
      *(_OWORD *)(a3 + 224) = v22;
      v23 = *(_OWORD *)(v8 + 272);
      *(_OWORD *)(a3 + 256) = *(_OWORD *)(v8 + 256);
      *(_OWORD *)(a3 + 272) = v23;
      memcpy((void *)(a3 + 296), (const void *)(v8 + 296), 0x129uLL);
      v25 = *(_OWORD *)(v8 + 608);
      v24 = *(_OWORD *)(v8 + 624);
      *(_QWORD *)(a3 + 640) = *(_QWORD *)(v8 + 640);
      *(_OWORD *)(a3 + 608) = v25;
      *(_OWORD *)(a3 + 624) = v24;
      v27 = *(_OWORD *)(v8 + 672);
      v26 = *(_OWORD *)(v8 + 688);
      v28 = *(_OWORD *)(v8 + 720);
      *(_OWORD *)(a3 + 704) = *(_OWORD *)(v8 + 704);
      *(_OWORD *)(a3 + 720) = v28;
      *(_OWORD *)(a3 + 672) = v27;
      *(_OWORD *)(a3 + 688) = v26;
      *(_OWORD *)(a3 + 656) = *(_OWORD *)(v8 + 656);
      v29 = *(_OWORD *)(v8 + 744);
      v30 = *(_OWORD *)(v8 + 760);
      *(_QWORD *)(a3 + 776) = *(_QWORD *)(v8 + 776);
      *(_OWORD *)(a3 + 760) = v30;
      *(_OWORD *)(a3 + 744) = v29;
      v31 = *(_OWORD *)(v8 + 792);
      *(_OWORD *)(a3 + 808) = *(_OWORD *)(v8 + 808);
      *(_OWORD *)(a3 + 792) = v31;
      memcpy((void *)(a3 + 832), (const void *)(v8 + 832), 0x128uLL);
      v32 = *(_OWORD *)(v8 + 1136);
      *(_OWORD *)(a3 + 1152) = *(_OWORD *)(v8 + 1152);
      *(_OWORD *)(a3 + 1136) = v32;
      *(_OWORD *)(a3 + 1176) = *(_OWORD *)(v8 + 1176);
      v33 = *(_OWORD *)(v8 + 1208);
      v34 = *(_OWORD *)(v8 + 1224);
      v35 = *(_OWORD *)(v8 + 1240);
      *(_OWORD *)(a3 + 1192) = *(_OWORD *)(v8 + 1192);
      *(_OWORD *)(a3 + 1240) = v35;
      *(_OWORD *)(a3 + 1224) = v34;
      *(_OWORD *)(a3 + 1208) = v33;
      *(_BYTE *)(a3 + 1256) = *(_BYTE *)(v8 + 1256);
      v36 = *(_OWORD *)(v8 + 1272);
      *(_OWORD *)(a3 + 1288) = *(_OWORD *)(v8 + 1288);
      *(_OWORD *)(a3 + 1272) = v36;
      *(_OWORD *)(a3 + 1312) = *(_OWORD *)(v8 + 1312);
      v37 = *(_OWORD *)(v8 + 1344);
      v38 = *(_OWORD *)(v8 + 1360);
      v39 = *(_OWORD *)(v8 + 1376);
      *(_OWORD *)(a3 + 1328) = *(_OWORD *)(v8 + 1328);
      *(_OWORD *)(a3 + 1376) = v39;
      *(_OWORD *)(a3 + 1360) = v38;
      *(_OWORD *)(a3 + 1344) = v37;
      v40 = *(_OWORD *)(v8 + 1392);
      v41 = *(_OWORD *)(v8 + 1408);
LABEL_17:
      *(_OWORD *)(a3 + 1408) = v41;
      *(_OWORD *)(a3 + 1392) = v40;
LABEL_18:
      result = 1;
      *(_BYTE *)(a3 + 1424) = 1;
      return result;
    }
    v46 = *(double *)(v9 + 40);
    if (v46 == v12)
    {
      v47 = *(_OWORD *)v9;
      v48 = *(_OWORD *)(v9 + 16);
      v49 = *(_OWORD *)(v9 + 32);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(v9 + 48);
      *(_OWORD *)(a3 + 16) = v48;
      *(_OWORD *)(a3 + 32) = v49;
      *(_OWORD *)a3 = v47;
      *(_BYTE *)(a3 + 56) = *(_BYTE *)(v9 + 56);
      v50 = *(_OWORD *)(v9 + 72);
      v51 = *(_OWORD *)(v9 + 88);
      *(_QWORD *)(a3 + 104) = *(_QWORD *)(v9 + 104);
      *(_OWORD *)(a3 + 88) = v51;
      *(_OWORD *)(a3 + 72) = v50;
      v52 = *(_OWORD *)(v9 + 152);
      v53 = *(_OWORD *)(v9 + 168);
      v54 = *(_OWORD *)(v9 + 184);
      *(_OWORD *)(a3 + 136) = *(_OWORD *)(v9 + 136);
      *(_OWORD *)(a3 + 184) = v54;
      *(_OWORD *)(a3 + 168) = v53;
      *(_OWORD *)(a3 + 152) = v52;
      *(_OWORD *)(a3 + 120) = *(_OWORD *)(v9 + 120);
      v55 = *(_OWORD *)(v9 + 208);
      v56 = *(_OWORD *)(v9 + 224);
      *(_QWORD *)(a3 + 240) = *(_QWORD *)(v9 + 240);
      *(_OWORD *)(a3 + 208) = v55;
      *(_OWORD *)(a3 + 224) = v56;
      v57 = *(_OWORD *)(v9 + 272);
      *(_OWORD *)(a3 + 256) = *(_OWORD *)(v9 + 256);
      *(_OWORD *)(a3 + 272) = v57;
      memcpy((void *)(a3 + 296), (const void *)(v9 + 296), 0x129uLL);
      v59 = *(_OWORD *)(v9 + 608);
      v58 = *(_OWORD *)(v9 + 624);
      *(_QWORD *)(a3 + 640) = *(_QWORD *)(v9 + 640);
      *(_OWORD *)(a3 + 608) = v59;
      *(_OWORD *)(a3 + 624) = v58;
      v61 = *(_OWORD *)(v9 + 672);
      v60 = *(_OWORD *)(v9 + 688);
      v62 = *(_OWORD *)(v9 + 720);
      *(_OWORD *)(a3 + 704) = *(_OWORD *)(v9 + 704);
      *(_OWORD *)(a3 + 720) = v62;
      *(_OWORD *)(a3 + 672) = v61;
      *(_OWORD *)(a3 + 688) = v60;
      *(_OWORD *)(a3 + 656) = *(_OWORD *)(v9 + 656);
      v63 = *(_OWORD *)(v9 + 744);
      v64 = *(_OWORD *)(v9 + 760);
      *(_QWORD *)(a3 + 776) = *(_QWORD *)(v9 + 776);
      *(_OWORD *)(a3 + 760) = v64;
      *(_OWORD *)(a3 + 744) = v63;
      v65 = *(_OWORD *)(v9 + 792);
      *(_OWORD *)(a3 + 808) = *(_OWORD *)(v9 + 808);
      *(_OWORD *)(a3 + 792) = v65;
      memcpy((void *)(a3 + 832), (const void *)(v9 + 832), 0x128uLL);
      v66 = *(_OWORD *)(v9 + 1136);
      *(_OWORD *)(a3 + 1152) = *(_OWORD *)(v9 + 1152);
      *(_OWORD *)(a3 + 1136) = v66;
      *(_OWORD *)(a3 + 1176) = *(_OWORD *)(v9 + 1176);
      v67 = *(_OWORD *)(v9 + 1208);
      v68 = *(_OWORD *)(v9 + 1224);
      v69 = *(_OWORD *)(v9 + 1240);
      *(_OWORD *)(a3 + 1192) = *(_OWORD *)(v9 + 1192);
      *(_OWORD *)(a3 + 1240) = v69;
      *(_OWORD *)(a3 + 1224) = v68;
      *(_OWORD *)(a3 + 1208) = v67;
      *(_BYTE *)(a3 + 1256) = *(_BYTE *)(v9 + 1256);
      v70 = *(_OWORD *)(v9 + 1272);
      *(_OWORD *)(a3 + 1288) = *(_OWORD *)(v9 + 1288);
      *(_OWORD *)(a3 + 1272) = v70;
      *(_OWORD *)(a3 + 1312) = *(_OWORD *)(v9 + 1312);
      v71 = *(_OWORD *)(v9 + 1344);
      v72 = *(_OWORD *)(v9 + 1360);
      v73 = *(_OWORD *)(v9 + 1376);
      *(_OWORD *)(a3 + 1328) = *(_OWORD *)(v9 + 1328);
      *(_OWORD *)(a3 + 1376) = v73;
      *(_OWORD *)(a3 + 1360) = v72;
      *(_OWORD *)(a3 + 1344) = v71;
      v40 = *(_OWORD *)(v9 + 1392);
      v41 = *(_OWORD *)(v9 + 1408);
      goto LABEL_17;
    }
    if (*(_DWORD *)v9)
      v74 = (_DWORD *)v9;
    else
      v74 = (_DWORD *)v8;
    *(_DWORD *)a3 = *v74;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v9 + 16);
    memset(v137, 0, sizeof(v137));
    v138 = 0;
    v136 = off_1021A0EF0;
    sub_1010FE1A4((double *)&v136, v8 + 112);
    memset(v135, 0, sizeof(v135));
    v134 = off_1021A0EF0;
    sub_1010FE1A4((double *)&v134, v139 + 112);
    memset(v133, 0, sizeof(v133));
    v132 = off_1021A0EF0;
    if (sub_1010FCB80((uint64_t)v137, v135, v133, *(double *)(v140 + 40), *(double *)(v139 + 40), *(double *)(a2 + 8)))
    {
      v75 = v46 - v11;
      v76 = v46 - v12;
      buf[0] = off_1021A0F28;
      *(_OWORD *)&buf[1] = 0u;
      v77 = v12 - v11;
      v146 = 0u;
      v147 = 0u;
      v148 = 0u;
      v149[0] = 0u;
      sub_1010FFEB8(v133, (double *)&buf[1]);
      sub_10149CC94((double *)(a3 + 56), (uint64_t)buf);
      LOBYTE(v127) = 0;
      v128 = vdupq_n_s64(3uLL);
      v129 = xmmword_101C40170;
      v130 = v140 + 120;
      v131 = v140 + 192;
      sub_1010FAE94(a3 + 112, &v127, (uint64_t *)&v141);
      buf[0] = off_1021A0F28;
      *(_OWORD *)&buf[1] = 0u;
      v146 = 0u;
      v147 = 0u;
      v148 = 0u;
      v149[0] = 0u;
      v78 = v143;
      v79 = v144;
      if (v143 != v144)
      {
        v80 = &buf[1];
        do
        {
          v81 = *v78++;
          *v80++ = v81;
        }
        while (v78 != v79);
      }
      v82 = v76 / v75;
      v83 = v77 / v75;
      sub_1010FE154(&v141);
      LOBYTE(v121) = 0;
      v96 = vdupq_n_s64(3uLL);
      v122 = v96;
      v123 = xmmword_101B9B430;
      *(_QWORD *)&v124 = v140 + 296;
      *((_QWORD *)&v124 + 1) = v140 + 416;
      sub_1010FAE94((uint64_t)buf, (uint64_t *)&v121, &v127);
      LOBYTE(v115) = 0;
      v116 = v96;
      *(_OWORD *)v117 = xmmword_101C40170;
      *(_QWORD *)&v117[16] = &buf[1];
      v118 = (char *)v149 + 8;
      sub_1010FCD84(&v127, &v115, (uint64_t *)&v141);
      LOBYTE(v110) = 1;
      v111 = v96;
      v112 = xmmword_101B9B430;
      v113 = a3 + 296;
      v114 = a3 + 416;
      sub_1010FFB3C(&v110, (uint64_t *)&v141);
      sub_1010FE154(&v141);
      sub_1010FE154(&v127);
      LOBYTE(v127) = 0;
      v128 = v96;
      v129 = xmmword_101B9B430;
      v130 = v140 + 320;
      v131 = v140 + 440;
      LOBYTE(v121) = 0;
      v122 = v96;
      v123 = xmmword_101C40170;
      *(_QWORD *)&v124 = &buf[1];
      *((_QWORD *)&v124 + 1) = (char *)v149 + 8;
      sub_1010FCE68(&v127, (uint64_t *)&v121, (uint64_t *)&v141);
      LOBYTE(v115) = 1;
      v116 = v96;
      *(_OWORD *)v117 = xmmword_101B9B430;
      *(_QWORD *)&v117[16] = a3 + 320;
      v118 = (char *)(a3 + 440);
      sub_1010FFB3C(&v115, (uint64_t *)&v141);
      sub_1010FE154(&v141);
      LOBYTE(v127) = 0;
      v128 = v96;
      v129 = xmmword_101B9B430;
      v130 = v140 + 440;
      v131 = v140 + 560;
      sub_1010FAE94((uint64_t)buf, &v127, (uint64_t *)&v141);
      LOBYTE(v121) = 1;
      v122 = v96;
      v123 = xmmword_101B9B430;
      *(_QWORD *)&v124 = a3 + 440;
      *((_QWORD *)&v124 + 1) = a3 + 560;
      sub_1010FFB3C(&v121, (uint64_t *)&v141);
      sub_1010FE154(&v141);
      v84 = 0;
      v85 = v140;
      v86 = v139;
      v87 = v140 + 256;
      v88 = v139 + 256;
      do
      {
        *(double *)(a3 + 256 + v84) = v83 * *(double *)(v88 + v84) + v82 * *(double *)(v87 + v84);
        v84 += 8;
      }
      while (v84 != 24);
      v97 = vdupq_n_s64(3uLL);
      LOBYTE(v127) = 0;
      v128 = v97;
      v129 = xmmword_101B9B430;
      v130 = v85 + 464;
      v131 = v85 + 584;
      sub_1010FCF60(&v127, (uint64_t)&v141);
      LOBYTE(v121) = 0;
      v122 = v97;
      v123 = xmmword_101B9B430;
      *(_QWORD *)&v124 = v86 + 464;
      *((_QWORD *)&v124 + 1) = v86 + 584;
      sub_1010FCF60(&v121, (uint64_t)&v127);
      v121 = off_1021A0F28;
      v122 = 0u;
      v123 = 0u;
      v124 = 0u;
      v125 = 0u;
      v126 = 0u;
      for (i = 1; i != 10; ++i)
        *(double *)&(&v121)[i] = v83 * *(double *)((char *)&v127 + i * 8) + v82 * *(double *)((char *)&v141 + i * 8);
      sub_1010FD008((double *)&v121, (uint64_t)&v115);
      v90 = 0;
      *(int64x2_t *)(a3 + 464) = v116;
      v91 = v118;
      *(_QWORD *)(a3 + 480) = *(_QWORD *)v117;
      *(_OWORD *)(a3 + 512) = *(_OWORD *)&v117[8];
      *(_QWORD *)(a3 + 528) = v91;
      *(_OWORD *)(a3 + 560) = v119;
      *(_QWORD *)(a3 + 576) = v120;
      do
      {
        *(double *)(a3 + 1136 + v90) = v83 * *(double *)(v86 + 1136 + v90) + v82 * *(double *)(v85 + 1136 + v90);
        v90 += 8;
      }
      while (v90 != 24);
      sub_1010FD088((double *)(v85 + 1168), (uint64_t)&v115);
      sub_1010FD088((double *)(v86 + 1168), (uint64_t)&v110);
      v104 = off_1021A0F28;
      v105 = 0u;
      v106 = 0u;
      v107 = 0u;
      v108 = 0u;
      v109 = 0u;
      for (j = 1; j != 10; ++j)
        *(double *)&(&v104)[j] = v83 * *(double *)((char *)&v110 + j * 8) + v82 * *(double *)((char *)&v115 + j * 8);
      sub_1010FD008((double *)&v104, (uint64_t)v98);
      *(_OWORD *)(a3 + 1192) = v100;
      *(_OWORD *)(a3 + 1208) = v101;
      *(_OWORD *)(a3 + 1224) = v102;
      *(_OWORD *)(a3 + 1240) = v103;
      *(_OWORD *)(a3 + 1176) = v99;
      goto LABEL_18;
    }
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v93 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      v94 = *(_QWORD *)(a2 + 8);
      LODWORD(buf[0]) = 134349056;
      *(_QWORD *)((char *)buf + 4) = v94;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, "CLVLF,interpolateVioDataAt,mach::SphericalLinearInterpolator::interpolate error,machAbsTime,%{public}.3lf", (uint8_t *)buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v95 = *(_QWORD *)(a2 + 8);
    v141 = 134349056;
    v142 = v95;
    v45 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,interpolateVioDataAt,mach::SphericalLinearInterpolator::interpolate error,machAbsTime,%{public}.3lf", &v141, 12);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::interpolateVioDataAt(const CLVisionTime &, fusion::VioData &)", "%s\n", v45);
LABEL_13:
    if (v45 != (char *)buf)
      free(v45);
    return 0;
  }
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
  v42 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
  {
    v43 = *(_QWORD *)(a2 + 8);
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v43;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "CLVLF,interpolateVioDataAt,util::binary_find_nearest error,machAbsTime,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v44 = *(_QWORD *)(a2 + 8);
    v141 = 134349056;
    v142 = v44;
    v45 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,interpolateVioDataAt,util::binary_find_nearest error,machAbsTime,%{public}.3lf", &v141, 12);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::interpolateVioDataAt(const CLVisionTime &, fusion::VioData &)", "%s\n", v45);
    goto LABEL_13;
  }
  return result;
}

void sub_1010FC248(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_1010FC254(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _BOOL8 result;
  uint64_t v9;
  char *v10;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _DWORD *v18;
  __double2 v19;
  double v20;
  double v21;
  double v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  double v27;
  uint64_t i;
  uint64_t j;
  uint64_t v30;
  char *v31;
  uint64_t k;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  char v36[8];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (**v42)();
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int64x2_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64x2_t v54;
  _BYTE v55[24];
  char *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t (**v59)();
  int64x2_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  int64x2_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (**v70)();
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t (**v74)();
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78[3];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 buf;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;

  v4 = *a2;
  *(_QWORD *)(a3 + 48) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a3 + 32) = v4;
  *(_BYTE *)(a3 + 1424) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (0xED6866F8D962AE7BLL * ((v5 - *(_QWORD *)(a1 + 8)) >> 3) > 1)
  {
    result = sub_1010FB5E4(a1, v5 - 2864, v5 - 1432);
    if (result)
    {
      v12 = *(double *)(v5 - 1392);
      v13 = *(double *)(v5 - 2824);
      v14 = v12 - v13;
      v15 = *((double *)a2 + 1);
      v16 = v12 - v15;
      v17 = (v15 - v13) / (v12 - v13);
      if (*(_DWORD *)(v5 - 2864))
        v18 = (_DWORD *)(v5 - 2864);
      else
        v18 = (_DWORD *)(v5 - 1432);
      *(_DWORD *)a3 = *v18;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v5 - 1416);
      LOBYTE(v78[0]) = 0;
      v35 = vdupq_n_s64(3uLL);
      *(int64x2_t *)&v78[1] = v35;
      v79 = xmmword_101C40170;
      *(_QWORD *)&v80 = v5 - 2744;
      *((_QWORD *)&v80 + 1) = v5 - 2672;
      sub_1010FAE94(v5 - 1320, v78, (uint64_t *)&buf);
      v72 = 0u;
      v71 = 0u;
      v73 = 0;
      v70 = off_1021A0EF0;
      sub_1010FE3B8((double *)&v70, (uint64_t)&buf);
      v75 = 0u;
      v76 = 0u;
      v74 = off_1021A0D18;
      v77 = 0;
      sub_101100048((double *)&v71, (uint64_t)&v75);
      sub_1010FE154(&buf);
      *((double *)&v76 + 1) = v17 * *((double *)&v76 + 1);
      *(_QWORD *)&buf = off_1021A0F28;
      v92 = 0;
      v19 = __sincos_stret(*((double *)&v76 + 1));
      v20 = (1.0 - v19.__cosval) * (*(double *)&v75 * *((double *)&v75 + 1));
      v21 = (1.0 - v19.__cosval) * (*(double *)&v75 * *(double *)&v76);
      v22 = (1.0 - v19.__cosval) * (*((double *)&v75 + 1) * *(double *)&v76);
      *((double *)&buf + 1) = v19.__cosval + *(double *)&v75 * *(double *)&v75 * (1.0 - v19.__cosval);
      v84 = v19.__sinval * *(double *)&v76 + v20;
      v85 = v21 - v19.__sinval * *((double *)&v75 + 1);
      v86 = v20 - v19.__sinval * *(double *)&v76;
      v87 = v19.__cosval + (1.0 - v19.__cosval) * (*((double *)&v75 + 1) * *((double *)&v75 + 1));
      v88 = *(double *)&v75 * v19.__sinval + v22;
      v89 = v19.__sinval * *((double *)&v75 + 1) + v21;
      v90 = v22 - *(double *)&v75 * v19.__sinval;
      v91 = v19.__cosval + (1.0 - v19.__cosval) * (*(double *)&v76 * *(double *)&v76);
      sub_1010FD10C((double *)&buf, (double *)(v5 - 2752), (uint64_t)v78);
      sub_10149CC94((double *)(a3 + 56), (uint64_t)v78);
      LOBYTE(v65) = 0;
      v66 = v35;
      v67 = xmmword_101C40170;
      v68 = v5 - 1312;
      v69 = v5 - 1240;
      sub_1010FAE94(a3 + 112, &v65, (uint64_t *)&v70);
      v78[0] = (uint64_t)off_1021A0F28;
      *(_OWORD *)&v78[1] = 0u;
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      v24 = (uint64_t *)*((_QWORD *)&v72 + 1);
      v23 = (uint64_t *)v72;
      if ((_QWORD)v72 != *((_QWORD *)&v72 + 1))
      {
        v25 = &v78[1];
        do
        {
          v26 = *v23++;
          *v25++ = v26;
        }
        while (v23 != v24);
      }
      v27 = v16 / v14;
      sub_1010FE154(&v70);
      LOBYTE(v59) = 0;
      v33 = vdupq_n_s64(3uLL);
      v60 = v33;
      v61 = xmmword_101B9B430;
      *(_QWORD *)&v62 = v5 - 1136;
      *((_QWORD *)&v62 + 1) = v5 - 1016;
      sub_1010FAE94((uint64_t)v78, (uint64_t *)&v59, &v65);
      LOBYTE(v53) = 0;
      v54 = v33;
      *(_OWORD *)v55 = xmmword_101C40170;
      *(_QWORD *)&v55[16] = &v78[1];
      v56 = (char *)&v82 + 8;
      sub_1010FCD84(&v65, &v53, (uint64_t *)&v70);
      LOBYTE(v48) = 1;
      v49 = v33;
      v50 = xmmword_101B9B430;
      v51 = a3 + 296;
      v52 = a3 + 416;
      sub_1010FFB3C(&v48, (uint64_t *)&v70);
      sub_1010FE154(&v70);
      sub_1010FE154(&v65);
      LOBYTE(v65) = 0;
      v66 = v33;
      v67 = xmmword_101B9B430;
      v68 = v5 - 1112;
      v69 = v5 - 992;
      LOBYTE(v59) = 0;
      v60 = v33;
      v61 = xmmword_101C40170;
      *(_QWORD *)&v62 = &v78[1];
      *((_QWORD *)&v62 + 1) = (char *)&v82 + 8;
      sub_1010FCE68(&v65, (uint64_t *)&v59, (uint64_t *)&v70);
      LOBYTE(v53) = 1;
      v54 = v33;
      *(_OWORD *)v55 = xmmword_101B9B430;
      *(_QWORD *)&v55[16] = a3 + 320;
      v56 = (char *)(a3 + 440);
      sub_1010FFB3C(&v53, (uint64_t *)&v70);
      sub_1010FE154(&v70);
      LOBYTE(v65) = 0;
      v66 = v33;
      v67 = xmmword_101B9B430;
      v68 = v5 - 992;
      v69 = v5 - 872;
      sub_1010FAE94((uint64_t)v78, &v65, (uint64_t *)&v70);
      LOBYTE(v59) = 1;
      v60 = v33;
      v61 = xmmword_101B9B430;
      *(_QWORD *)&v62 = a3 + 440;
      *((_QWORD *)&v62 + 1) = a3 + 560;
      sub_1010FFB3C(&v59, (uint64_t *)&v70);
      sub_1010FE154(&v70);
      for (i = 0; i != 24; i += 8)
        *(double *)(a3 + 256 + i) = v17 * *(double *)(v5 + i - 1176) + v27 * *(double *)(v5 + i - 2608);
      v34 = vdupq_n_s64(3uLL);
      LOBYTE(v65) = 0;
      v66 = v34;
      v67 = xmmword_101B9B430;
      v68 = v5 - 2400;
      v69 = v5 - 2280;
      sub_1010FCF60(&v65, (uint64_t)&v70);
      LOBYTE(v59) = 0;
      v60 = v34;
      v61 = xmmword_101B9B430;
      *(_QWORD *)&v62 = v5 - 968;
      *((_QWORD *)&v62 + 1) = v5 - 848;
      sub_1010FCF60(&v59, (uint64_t)&v65);
      v59 = off_1021A0F28;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0u;
      for (j = 1; j != 10; ++j)
        *(double *)&(&v59)[j] = v17 * *(double *)((char *)&v65 + j * 8) + v27 * *(double *)&(&v70)[j];
      sub_1010FD008((double *)&v59, (uint64_t)&v53);
      v30 = 0;
      *(int64x2_t *)(a3 + 464) = v54;
      v31 = v56;
      *(_QWORD *)(a3 + 480) = *(_QWORD *)v55;
      *(_OWORD *)(a3 + 512) = *(_OWORD *)&v55[8];
      *(_QWORD *)(a3 + 528) = v31;
      *(_OWORD *)(a3 + 560) = v57;
      *(_QWORD *)(a3 + 576) = v58;
      do
      {
        *(double *)(a3 + 1136 + v30) = v17 * *(double *)(v5 + v30 - 296) + v27 * *(double *)(v5 + v30 - 1728);
        v30 += 8;
      }
      while (v30 != 24);
      sub_1010FD088((double *)(v5 - 1696), (uint64_t)&v53);
      sub_1010FD088((double *)(v5 - 264), (uint64_t)&v48);
      v42 = off_1021A0F28;
      v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      for (k = 1; k != 10; ++k)
        *(double *)&(&v42)[k] = v17 * *(double *)((char *)&v48 + k * 8) + v27 * *(double *)((char *)&v53 + k * 8);
      sub_1010FD008((double *)&v42, (uint64_t)v36);
      *(_OWORD *)(a3 + 1192) = v38;
      *(_OWORD *)(a3 + 1208) = v39;
      *(_OWORD *)(a3 + 1224) = v40;
      *(_OWORD *)(a3 + 1240) = v41;
      *(_OWORD *)(a3 + 1176) = v37;
      result = 1;
      *(_BYTE *)(a3 + 1424) = 1;
    }
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
    v6 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      v7 = *((_QWORD *)a2 + 1);
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLVLF,extrapolateVioDataAt,Not enough VIO data,machAbsTime,%{public}.3lf", (uint8_t *)&buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021A0EC0);
      v9 = *((_QWORD *)a2 + 1);
      LODWORD(v78[0]) = 134349056;
      *(uint64_t *)((char *)v78 + 4) = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVLF,extrapolateVioDataAt,Not enough VIO data,machAbsTime,%{public}.3lf", v78, 12);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::extrapolateVioDataAt(const CLVisionTime &, fusion::VioData &)", "%s\n", v10);
      if (v10 != (char *)&buf)
        free(v10);
      return 0;
    }
  }
  return result;
}

void sub_1010FCA54(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_1010FCA60(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  double v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  int v13;

  if (a1 >= a2)
  {
    v6 = 0;
    *a4 = a1;
    *a5 = a2;
    return v6;
  }
  v5 = *(double *)(a3 + 8);
  if (*(double *)(a1 + 40) > v5)
  {
    v6 = 0;
    *a5 = a1;
    *a4 = a1;
    return v6;
  }
  if (*(double *)(a2 - 1392) < v5)
  {
    v6 = 0;
    *a5 = a2;
    *a4 = a2;
    return v6;
  }
  v7 = a2;
  if (a2 != a1)
  {
    v8 = 0xED6866F8D962AE7BLL * ((uint64_t)(a2 - a1) >> 3);
    v7 = a1;
    do
    {
      v9 = v8 >> 1;
      v10 = v7 + 1432 * (v8 >> 1);
      v11 = *(double *)(v10 + 40);
      v12 = v10 + 1432;
      v8 += ~(v8 >> 1);
      if (v11 < v5)
        v7 = v12;
      else
        v8 = v9;
    }
    while (v8);
  }
  *a4 = v7 - 1432;
  *a5 = v7;
  if (v7 == a1)
  {
    v13 = 1;
    goto LABEL_17;
  }
  if (v7 == a2)
  {
    v13 = -1;
LABEL_17:
    *a4 += 1432 * v13;
    v7 = *a5 + 1432 * v13;
    *a5 = v7;
  }
  v6 = 0;
  if (*a4 >= a1 && *a4 < a2)
    return v7 >= a1 && v7 < a2;
  return v6;
}

BOOL sub_1010FCB80(uint64_t a1, double *a2, double *a3, double a4, double a5, double a6)
{
  _BOOL8 v6;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  __int128 v19;
  double v21;
  long double v22;
  long double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;

  v6 = a5 >= a6 && a6 >= a4;
  if (v6)
  {
    if (a4 == a5
      || (v10 = *(double *)(a1 + 24),
          v11 = a2[2],
          v12 = a2[3],
          v13 = *(double *)(a1 + 8) * a2[1] + *(double *)a1 * *a2 + *(double *)(a1 + 16) * v11 + v10 * v12,
          fabs(v13) >= 1.0))
    {
      v19 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *((_OWORD *)a3 + 1) = v19;
    }
    else
    {
      v14 = -v13;
      if (v13 >= 0.0)
        v14 = *(double *)(a1 + 8) * a2[1] + *(double *)a1 * *a2 + *(double *)(a1 + 16) * v11 + v10 * v12;
      v15 = (a6 - a4) / (a5 - a4);
      v16 = sqrt(1.0 - v14 * v14);
      if (fabs(v16) >= 2.22044605e-16)
      {
        v21 = acos(v14);
        v22 = sin((1.0 - v15) * v21);
        v23 = v15 * v21;
        v24 = v22 / v16;
        v25 = sin(v23) / v16;
        v26 = 0;
        if (v13 >= 0.0)
        {
          do
          {
            a3[v26] = v25 * a2[v26] + v24 * *(double *)(a1 + v26 * 8);
            ++v26;
          }
          while (v26 != 4);
        }
        else
        {
          v27 = -v25;
          do
          {
            a3[v26] = a2[v26] * v27 + v24 * *(double *)(a1 + v26 * 8);
            ++v26;
          }
          while (v26 != 4);
        }
        v28 = *a3;
        v29 = a3[1];
        v30 = a3[2];
        v31 = a3[3];
        v32 = sqrt(v29 * v29 + v28 * v28 + v30 * v30 + v31 * v31);
        if (v32 == 0.0)
        {
          v33 = 1.0;
          v34 = 0.0;
          v35 = 0.0;
          v36 = 0.0;
        }
        else
        {
          v34 = v28 / v32;
          v35 = v29 / v32;
          v36 = v30 / v32;
          v33 = v31 / v32;
        }
        *a3 = v34;
        a3[1] = v35;
        a3[2] = v36;
        a3[3] = v33;
      }
      else
      {
        v17 = 1.0 - v15;
        v18 = 0;
        if (v13 >= 0.0)
        {
          do
          {
            a3[v18] = v15 * a2[v18] + v17 * *(double *)(a1 + v18 * 8);
            ++v18;
          }
          while (v18 != 4);
        }
        else
        {
          do
          {
            a3[v18] = a2[v18] * -v15 + v17 * *(double *)(a1 + v18 * 8);
            ++v18;
          }
          while (v18 != 4);
        }
      }
    }
  }
  return v6;
}

void sub_1010FCD84(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const double *v9;
  const double *v10;
  uint64_t v11;
  double *__Y;
  uint64_t __incY;
  uint64_t v14;
  int v15;
  CBLAS_TRANSPOSE v16;

  v5 = sub_1010FFC2C(a3, *a1, a2[2]);
  v6 = *a1;
  if (*a1)
  {
    v7 = a1[1];
    if (v7)
    {
      v8 = a2[2];
      if (v8)
      {
        v9 = (const double *)a1[3];
        v10 = (const double *)a2[5];
        v11 = a2[3];
        __incY = v5[2];
        __Y = (double *)v5[3];
        if (v8 == 1)
        {
          cblas_dgemv(CblasColMajor, CblasNoTrans, v6, v7, 1.0, v9, a1[2], v10, v11, 0.0, __Y, __incY);
        }
        else
        {
          v14 = a2[4];
          if (v7 == 1)
            v15 = *a1;
          else
            v15 = a1[2];
          if (v11 == 1)
          {
            v16 = CblasNoTrans;
          }
          else
          {
            v14 = a2[3];
            v16 = CblasTrans;
          }
          cblas_dgemm(CblasColMajor, CblasNoTrans, v16, v6, v8, v7, 1.0, v9, v15, v10, v14, 0.0, __Y, __incY);
        }
      }
    }
  }
}

void sub_1010FCE68(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const double *v9;
  uint64_t v10;
  uint64_t v11;
  const double *v12;
  uint64_t v13;
  double *__Y;
  uint64_t __incY;
  CBLAS_TRANSPOSE v16;
  int v17;
  int v18;
  CBLAS_TRANSPOSE v19;
  uint64_t v20;
  CBLAS_TRANSPOSE v21;

  v5 = sub_1010FFC2C(a3, a1[1], a2[2]);
  v6 = a1[1];
  if (v6)
  {
    v7 = a1[2];
    if (v7)
    {
      v8 = a2[2];
      if (v8)
      {
        v10 = a1[4];
        v9 = (const double *)a1[5];
        v11 = a1[3];
        v12 = (const double *)a2[5];
        v13 = a2[3];
        __incY = v5[2];
        __Y = (double *)v5[3];
        if (v8 == 1)
        {
          if (v11 == 1)
            v16 = CblasNoTrans;
          else
            v16 = CblasTrans;
          if (v11 == 1)
            v17 = a1[1];
          else
            v17 = a1[2];
          if (v11 == 1)
          {
            LODWORD(v6) = a1[2];
            v18 = a1[4];
          }
          else
          {
            v18 = a1[3];
          }
          cblas_dgemv(CblasColMajor, v16, v17, v6, 1.0, v9, v18, v12, v13, 0.0, __Y, __incY);
        }
        else
        {
          if (v7 == 1)
            LODWORD(v10) = a1[1];
          if (v11 == 1)
            v19 = CblasNoTrans;
          else
            v19 = CblasTrans;
          if (v11 == 1)
            LODWORD(v11) = v10;
          if (v13 == 1)
            v20 = a2[4];
          else
            v20 = a2[3];
          if (v13 == 1)
            v21 = CblasNoTrans;
          else
            v21 = CblasTrans;
          cblas_dgemm(CblasColMajor, v19, v21, v6, v8, v7, 1.0, v9, v11, v12, v20, 0.0, __Y, __incY);
        }
      }
    }
  }
}

double sub_1010FCF60@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double result;

  *(_QWORD *)a2 = off_1021A0F28;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  v3 = a1[4];
  v2 = (double *)a1[5];
  v4 = a1[3];
  v5 = 8;
  v6 = v2;
  do
  {
    *(double *)(a2 + v5) = sqrt(*v6);
    v5 += 32;
    v6 += v3 + v4;
  }
  while (v5 != 104);
  v7 = *(double *)(a2 + 40);
  v8 = *(double *)(a2 + 8);
  v9 = v2[v4] / (v7 * v8);
  v10 = *(double *)(a2 + 72);
  v11 = v2[2 * v4] / (v8 * v10);
  *(double *)(a2 + 16) = v9;
  *(double *)(a2 + 24) = v11;
  v12 = v2[2 * v4 + v3];
  *(double *)(a2 + 32) = v9;
  result = v12 / (v7 * v10);
  *(double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = v11;
  *(double *)(a2 + 64) = result;
  return result;
}

double sub_1010FD008@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  double v3;
  double v4;
  double v5;
  double result;
  double v7;
  double v8;
  double v9;

  *(_QWORD *)a2 = off_1021A0F28;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  for (i = 1; i != 13; i += 4)
    *(double *)(a2 + i * 8) = a1[i] * a1[i];
  v3 = a1[1];
  v4 = a1[5];
  v5 = a1[6];
  result = a1[2] * v4 * v3;
  v7 = a1[9];
  v8 = v3 * (a1[3] * v7);
  *(double *)(a2 + 16) = result;
  *(double *)(a2 + 24) = v8;
  v9 = v4 * (v7 * v5);
  *(double *)(a2 + 32) = result;
  *(double *)(a2 + 48) = v9;
  *(double *)(a2 + 56) = v8;
  *(double *)(a2 + 64) = v9;
  return result;
}

double sub_1010FD088@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double result;

  *(_QWORD *)a2 = off_1021A0F28;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  for (i = 1; i != 13; i += 4)
    *(double *)(a2 + i * 8) = sqrt(a1[i]);
  v3 = *(double *)(a2 + 40);
  v4 = *(double *)(a2 + 8);
  v5 = a1[2] / (v3 * v4);
  v6 = *(double *)(a2 + 72);
  v7 = a1[3] / (v4 * v6);
  *(double *)(a2 + 16) = v5;
  *(double *)(a2 + 24) = v7;
  v8 = a1[6];
  *(double *)(a2 + 32) = v5;
  result = v8 / (v3 * v6);
  *(double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = v7;
  *(double *)(a2 + 64) = result;
  return result;
}

double sub_1010FD10C@<D0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double result;

  *(_QWORD *)a3 = off_1021A0F28;
  *(_QWORD *)(a3 + 80) = 0;
  v3 = a2[1];
  v4 = a2[2];
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a2[3];
  v12 = a2[4];
  v13 = a1[5];
  v14 = a1[6];
  *(double *)(a3 + 8) = v5 * v4 + v7 * v3 + v9 * v11;
  *(double *)(a3 + 16) = v4 * v13 + v8 * v3 + v10 * v11;
  v15 = v4 * v14 + v6 * v3;
  v16 = a1[9];
  v17 = v15 + v16 * v11;
  v18 = a2[5];
  v19 = a2[6];
  *(double *)(a3 + 24) = v17;
  *(double *)(a3 + 32) = v5 * v18 + v7 * v12 + v9 * v19;
  *(double *)(a3 + 40) = v13 * v18 + v8 * v12 + v10 * v19;
  *(double *)(a3 + 48) = v14 * v18 + v6 * v12 + v16 * v19;
  v20 = a2[7];
  v21 = a2[8];
  v22 = v5 * v21 + v7 * v20;
  v23 = a2[9];
  *(double *)(a3 + 56) = v22 + v9 * v23;
  *(double *)(a3 + 64) = v13 * v21 + v8 * v20 + v10 * v23;
  result = v14 * v21 + v6 * v20 + v16 * v23;
  *(double *)(a3 + 72) = result;
  return result;
}

uint64_t sub_1010FD1CC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  char v7;

  if ((__int128 *)a2 != a3)
  {
    sub_1011002C4((uint64_t)&v7, a3, *(__int128 **)(a1 + 8), a2);
    *(_QWORD *)(a1 + 8) = v5;
  }
  return a2;
}

void sub_1010FD21C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  CBLAS_TRANSPOSE v7;
  int v8;
  int v9;
  int v10;

  v5 = sub_1010FFC2C(a3, *(_QWORD *)(a1 + 8), 1);
  if (*(_QWORD *)(a1 + 8))
  {
    v6 = *(_QWORD *)(a1 + 24);
    if (v6 == 1)
      v7 = CblasNoTrans;
    else
      v7 = CblasTrans;
    if (v6 == 1)
      v8 = *(_QWORD *)(a1 + 8);
    else
      v8 = 2;
    if (v6 == 1)
      v9 = 2;
    else
      v9 = *(_QWORD *)(a1 + 8);
    if (v6 == 1)
      v10 = *(_DWORD *)(a1 + 32);
    else
      v10 = *(_QWORD *)(a1 + 24);
    cblas_dgemv(CblasColMajor, v7, v8, v9, 1.0, *(const double **)(a1 + 40), v10, (const double *)(a2 + 8), 1, 0.0, (double *)v5[3], v5[2]);
  }
}

void sub_1010FD2AC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  const double *v7;
  uint64_t v8;
  double *__Y;
  uint64_t __incY;
  uint64_t v11;
  CBLAS_TRANSPOSE v12;

  v5 = sub_1010FFC2C(a3, 2, a2[2]);
  v6 = a2[2];
  if (v6)
  {
    v7 = (const double *)a2[5];
    v8 = a2[3];
    __incY = v5[2];
    __Y = (double *)v5[3];
    if (v6 == 1)
    {
      cblas_dgemv(CblasColMajor, CblasNoTrans, 2, 2, 1.0, (const double *)(a1 + 8), 2, v7, v8, 0.0, __Y, __incY);
    }
    else
    {
      v11 = a2[4];
      if (v8 == 1)
      {
        v12 = CblasNoTrans;
      }
      else
      {
        v11 = a2[3];
        v12 = CblasTrans;
      }
      cblas_dgemm(CblasColMajor, CblasNoTrans, v12, 2, v6, 2, 1.0, (const double *)(a1 + 8), 2, v7, v11, 0.0, __Y, __incY);
    }
  }
}

double sub_1010FD380(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  double result;

  v2 = a2[3];
  v3 = a2[4];
  v4 = (_QWORD *)a2[5];
  *(_QWORD *)(a1 + 8) = *v4;
  *(_QWORD *)(a1 + 16) = v4[v2];
  *(_QWORD *)(a1 + 24) = v4[2 * v2];
  *(_QWORD *)(a1 + 32) = v4[v3];
  *(_QWORD *)(a1 + 40) = v4[v3 + v2];
  *(_QWORD *)(a1 + 48) = v4[2 * v2 + v3];
  *(_QWORD *)(a1 + 56) = v4[2 * v3];
  *(_QWORD *)(a1 + 64) = v4[2 * v3 + v2];
  result = *(double *)&v4[2 * v3 + 2 * v2];
  *(double *)(a1 + 72) = result;
  return result;
}

void sub_1010FD3F0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  const double *v11;
  const double *v12;
  double *__Y;

  v5 = sub_1010FFC2C(a3, *a1, *(_QWORD *)(a2 + 8));
  v7 = *a1;
  v6 = a1[1];
  v8 = *(_QWORD *)(a2 + 8);
  if (*a1)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (!v9 && v8 != 0)
  {
    v11 = (const double *)a1[3];
    v12 = *(const double **)(a2 + 24);
    __Y = (double *)v5[3];
    if (v8 == 1)
      cblas_dgemv(CblasColMajor, CblasNoTrans, v7, v6, 1.0, v11, v7, v12, 1, 0.0, __Y, 1);
    else
      cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, v7, v8, v6, 1.0, v11, v7, v12, v6, 0.0, __Y, *a1);
  }
}

void sub_1010FD4C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;

  v5 = sub_1010FFC2C(a3, *(_QWORD *)a1, 3);
  if (*(_QWORD *)a1)
    cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, *(_QWORD *)a1, 3, 3, 1.0, *(const double **)(a1 + 24), *(_QWORD *)a1, (const double *)(a2 + 8), 3, 0.0, (double *)v5[3], *(_QWORD *)a1);
}

double sub_1010FD550(double *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double result;

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = v5 * v9 - v8 * v6;
  v11 = v8 * v3 - v2 * v9;
  v12 = v2 * v6 - v5 * v3;
  v13 = v4 * v11 + v10 * v1 + v12 * v7;
  a1[1] = v10 / v13;
  a1[2] = v11 / v13;
  a1[3] = v12 / v13;
  a1[4] = (v7 * v6 - v4 * v9) / v13;
  a1[5] = (v1 * v9 - v7 * v3) / v13;
  a1[6] = (v4 * v3 - v1 * v6) / v13;
  a1[7] = (v4 * v8 - v7 * v5) / v13;
  a1[8] = (v7 * v2 - v1 * v8) / v13;
  result = (v1 * v5 - v4 * v2) / v13;
  a1[9] = result;
  return result;
}

void sub_1010FD5F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = off_1021A1608;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_QWORD *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 3, 6, 3, 1.0, (const double *)(a1 + 8), 3, (const double *)(a2 + 8), 3, 0.0, (double *)(a3 + 8), 3);
}

uint64_t sub_1010FD690(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 16) = off_1021A0EF0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = off_1021A0F28;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = off_1021A0D18;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = off_1021A1298;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = off_1021A10E0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 529) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_QWORD *)(a1 + 552) = off_1021A0EF0;
  *(_QWORD *)(a1 + 600) = off_1021A0F28;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_QWORD *)(a1 + 688) = off_1021A0D18;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 736) = off_1021A1298;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_QWORD *)(a1 + 776) = off_1021A10E0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_QWORD *)(a1 + 1080) = off_1021A1298;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_QWORD *)(a1 + 1120) = off_1021A1298;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  sub_1010FDBD0(a1 + 1160);
  *(_DWORD *)(a1 + 1520) = 0;
  *(_BYTE *)(a1 + 1524) = 0;
  *(_QWORD *)(a1 + 1528) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1536) = 0xBFF0000000000000;
  sub_1010FDBD0(a1 + 1544);
  sub_1010FD830(a1 + 1904);
  return a1;
}

void sub_1010FD81C()
{
  operator delete();
}

uint64_t sub_1010FD830(uint64_t a1)
{
  _OWORD *v7;
  uint64_t v8;
  __int128 v10;

  *(_DWORD *)a1 = 1;
  __asm { FMOV            V0.2D, #-1.0 }
  v10 = _Q0;
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(_BYTE *)(a1 + 56) = 0;
  v7 = (_OWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 64) = off_1021A0EF0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = off_1021A0F28;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = off_1021A0D18;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = off_1021A1298;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = off_1021A10E0;
  v8 = a1 + 592;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 640) = 0;
  v7[15] = 0u;
  v7[16] = 0u;
  v7[17] = 0u;
  v7[18] = 0u;
  v7[19] = 0u;
  v7[20] = 0u;
  v7[21] = 0u;
  v7[22] = 0u;
  v7[23] = 0u;
  v7[24] = 0u;
  v7[25] = 0u;
  v7[26] = 0u;
  v7[27] = 0u;
  v7[28] = 0u;
  v7[29] = 0u;
  v7[30] = 0u;
  v7[31] = 0u;
  v7[32] = 0u;
  *(_OWORD *)(a1 + 577) = 0u;
  *(_QWORD *)(a1 + 600) = off_1021A0EF0;
  *(_QWORD *)(a1 + 648) = off_1021A0F28;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_QWORD *)(a1 + 736) = off_1021A0D18;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_QWORD *)(a1 + 776) = 0;
  *(_QWORD *)(a1 + 784) = off_1021A1298;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_QWORD *)(a1 + 824) = off_1021A10E0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_QWORD *)(a1 + 1120) = 0;
  sub_10149D1CC(v8);
  *(_QWORD *)(a1 + 1128) = off_1021A1298;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_QWORD *)(a1 + 1168) = off_1021A0F28;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_BYTE *)(a1 + 1256) = 0;
  *(_QWORD *)(a1 + 1264) = off_1021A1298;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_QWORD *)(a1 + 1304) = off_1021A0F28;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_QWORD *)(a1 + 1392) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 1400) = 0;
  *(_OWORD *)(a1 + 1408) = v10;
  *(_BYTE *)(a1 + 1424) = 0;
  return a1;
}

double sub_1010FDA10(uint64_t a1)
{
  double result;

  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a1 = _Q0;
  *(_QWORD *)(a1 + 16) = 0xBFF0000000000000;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 32) = off_1021A0EF0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = off_1021A0F28;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = off_1021A0D18;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = off_1021A1298;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = off_1021A10E0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 568) = off_1021A0EF0;
  *(_QWORD *)(a1 + 616) = off_1021A0F28;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_QWORD *)(a1 + 704) = off_1021A0D18;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 752) = off_1021A1298;
  *(_QWORD *)(a1 + 792) = off_1021A10E0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_QWORD *)(a1 + 1200) = off_1021A0EF0;
  *(_QWORD *)(a1 + 1096) = off_1021A1298;
  *(_QWORD *)(a1 + 1248) = off_1021A0F28;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_QWORD *)(a1 + 1152) = off_1021A1298;
  *(_QWORD *)(a1 + 1336) = off_1021A0D18;
  *(_QWORD *)(a1 + 1240) = 0;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_QWORD *)(a1 + 1376) = 0;
  *(_QWORD *)(a1 + 1384) = off_1021A1298;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_QWORD *)(a1 + 1424) = off_1021A10E0;
  *(_QWORD *)(a1 + 1720) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 545) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 1129) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  return result;
}

__n128 sub_1010FDBD0(uint64_t a1)
{
  __n128 result;

  *(_DWORD *)a1 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 32) = off_1021A1298;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = off_1021A1298;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(__n128 *)(a1 + 112) = result;
  *(__n128 *)(a1 + 128) = result;
  *(__n128 *)(a1 + 144) = result;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = off_1021A1298;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = off_1021A1298;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 248) = off_1021A0F28;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 352) = 0xBFF0000000000000;
  return result;
}

void sub_1010FDC4C(id a1)
{
  qword_1022A00C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Vision");
}

uint64_t sub_1010FDC78(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 32) = off_1021A0D18;
  v5 = *(__int128 *)((char *)a2 + 40);
  v6 = *((_QWORD *)a2 + 9);
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 32) = off_1021A0EF0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = off_1021A0F28;
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  v7 = *(__int128 *)((char *)a2 + 104);
  v8 = *(__int128 *)((char *)a2 + 120);
  v9 = *(__int128 *)((char *)a2 + 136);
  *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
  *(_OWORD *)(a1 + 136) = v9;
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 168) = off_1021A0D18;
  v10 = a2[12];
  v11 = *((_QWORD *)a2 + 26);
  *(_OWORD *)(a1 + 176) = a2[11];
  *(_OWORD *)(a1 + 192) = v10;
  *(_QWORD *)(a1 + 208) = v11;
  *(_QWORD *)(a1 + 216) = off_1021A1298;
  v12 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v12;
  *(_QWORD *)(a1 + 256) = off_1021A10E0;
  memcpy((void *)(a1 + 264), (char *)a2 + 264, 0x128uLL);
  *(_BYTE *)(a1 + 560) = *((_BYTE *)a2 + 560);
  *(_QWORD *)(a1 + 568) = off_1021A0D18;
  v14 = a2[36];
  v13 = a2[37];
  *(_QWORD *)(a1 + 608) = *((_QWORD *)a2 + 76);
  *(_OWORD *)(a1 + 576) = v14;
  *(_OWORD *)(a1 + 592) = v13;
  *(_QWORD *)(a1 + 568) = off_1021A0EF0;
  *(_QWORD *)(a1 + 616) = off_1021A0F28;
  *(_OWORD *)(a1 + 624) = a2[39];
  v15 = a2[40];
  v16 = a2[41];
  v17 = a2[43];
  *(_OWORD *)(a1 + 672) = a2[42];
  *(_OWORD *)(a1 + 688) = v17;
  *(_OWORD *)(a1 + 640) = v15;
  *(_OWORD *)(a1 + 656) = v16;
  *(_QWORD *)(a1 + 704) = off_1021A0D18;
  v18 = *((_QWORD *)a2 + 93);
  v19 = *(__int128 *)((char *)a2 + 728);
  *(_OWORD *)(a1 + 712) = *(__int128 *)((char *)a2 + 712);
  *(_OWORD *)(a1 + 728) = v19;
  *(_QWORD *)(a1 + 744) = v18;
  *(_QWORD *)(a1 + 752) = off_1021A1298;
  v20 = *(__int128 *)((char *)a2 + 760);
  *(_OWORD *)(a1 + 776) = *(__int128 *)((char *)a2 + 776);
  *(_OWORD *)(a1 + 760) = v20;
  *(_QWORD *)(a1 + 792) = off_1021A10E0;
  memcpy((void *)(a1 + 800), a2 + 50, 0x128uLL);
  *(_QWORD *)(a1 + 1096) = off_1021A1298;
  v21 = a2[70];
  *(_OWORD *)(a1 + 1104) = a2[69];
  *(_OWORD *)(a1 + 1120) = v21;
  v22 = *((_QWORD *)a2 + 142);
  *(_BYTE *)(a1 + 1144) = *((_BYTE *)a2 + 1144);
  *(_QWORD *)(a1 + 1136) = v22;
  *(_QWORD *)(a1 + 1152) = off_1021A1298;
  v23 = *(__int128 *)((char *)a2 + 1160);
  *(_OWORD *)(a1 + 1176) = *(__int128 *)((char *)a2 + 1176);
  *(_OWORD *)(a1 + 1160) = v23;
  *(_BYTE *)(a1 + 1192) = *((_BYTE *)a2 + 1192);
  *(_QWORD *)(a1 + 1200) = off_1021A0D18;
  v25 = *(__int128 *)((char *)a2 + 1208);
  v24 = *(__int128 *)((char *)a2 + 1224);
  *(_QWORD *)(a1 + 1240) = *((_QWORD *)a2 + 155);
  *(_OWORD *)(a1 + 1208) = v25;
  *(_OWORD *)(a1 + 1224) = v24;
  *(_QWORD *)(a1 + 1200) = off_1021A0EF0;
  *(_QWORD *)(a1 + 1248) = off_1021A0F28;
  *(_OWORD *)(a1 + 1256) = *(__int128 *)((char *)a2 + 1256);
  v26 = *(__int128 *)((char *)a2 + 1272);
  v27 = *(__int128 *)((char *)a2 + 1288);
  v28 = *(__int128 *)((char *)a2 + 1320);
  *(_OWORD *)(a1 + 1304) = *(__int128 *)((char *)a2 + 1304);
  *(_OWORD *)(a1 + 1320) = v28;
  *(_OWORD *)(a1 + 1272) = v26;
  *(_OWORD *)(a1 + 1288) = v27;
  *(_QWORD *)(a1 + 1336) = off_1021A0D18;
  v29 = *((_QWORD *)a2 + 172);
  v30 = a2[85];
  *(_OWORD *)(a1 + 1344) = a2[84];
  *(_OWORD *)(a1 + 1360) = v30;
  *(_QWORD *)(a1 + 1376) = v29;
  *(_QWORD *)(a1 + 1384) = off_1021A1298;
  v31 = a2[87];
  *(_OWORD *)(a1 + 1408) = a2[88];
  *(_OWORD *)(a1 + 1392) = v31;
  *(_QWORD *)(a1 + 1424) = off_1021A10E0;
  memcpy((void *)(a1 + 1432), (char *)a2 + 1432, 0x128uLL);
  return a1;
}

void sub_1010FDED0()
{
  operator delete();
}

void sub_1010FDEE4()
{
  operator delete();
}

uint64_t sub_1010FDEF8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 64) = off_1021A0D18;
  v7 = *(__int128 *)((char *)a2 + 72);
  v8 = *((_QWORD *)a2 + 13);
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 64) = off_1021A0EF0;
  *(_QWORD *)(a1 + 104) = v8;
  *(_QWORD *)(a1 + 112) = off_1021A0F28;
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  v9 = *(__int128 *)((char *)a2 + 136);
  v10 = *(__int128 *)((char *)a2 + 152);
  v11 = *(__int128 *)((char *)a2 + 168);
  *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 136) = v9;
  *(_QWORD *)(a1 + 200) = off_1021A0D18;
  v12 = a2[14];
  v13 = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(_QWORD *)(a1 + 240) = v13;
  *(_QWORD *)(a1 + 248) = off_1021A1298;
  v14 = a2[17];
  *(_OWORD *)(a1 + 256) = a2[16];
  *(_OWORD *)(a1 + 272) = v14;
  *(_QWORD *)(a1 + 288) = off_1021A10E0;
  memcpy((void *)(a1 + 296), (char *)a2 + 296, 0x128uLL);
  *(_BYTE *)(a1 + 592) = *((_BYTE *)a2 + 592);
  *(_QWORD *)(a1 + 600) = off_1021A0D18;
  v16 = a2[38];
  v15 = a2[39];
  *(_QWORD *)(a1 + 640) = *((_QWORD *)a2 + 80);
  *(_OWORD *)(a1 + 608) = v16;
  *(_OWORD *)(a1 + 624) = v15;
  *(_QWORD *)(a1 + 600) = off_1021A0EF0;
  *(_QWORD *)(a1 + 648) = off_1021A0F28;
  *(_OWORD *)(a1 + 656) = a2[41];
  v17 = a2[42];
  v18 = a2[43];
  v19 = a2[45];
  *(_OWORD *)(a1 + 704) = a2[44];
  *(_OWORD *)(a1 + 720) = v19;
  *(_OWORD *)(a1 + 672) = v17;
  *(_OWORD *)(a1 + 688) = v18;
  *(_QWORD *)(a1 + 736) = off_1021A0D18;
  v20 = *((_QWORD *)a2 + 97);
  v21 = *(__int128 *)((char *)a2 + 760);
  *(_OWORD *)(a1 + 744) = *(__int128 *)((char *)a2 + 744);
  *(_OWORD *)(a1 + 760) = v21;
  *(_QWORD *)(a1 + 776) = v20;
  *(_QWORD *)(a1 + 784) = off_1021A1298;
  v22 = *(__int128 *)((char *)a2 + 792);
  *(_OWORD *)(a1 + 808) = *(__int128 *)((char *)a2 + 808);
  *(_OWORD *)(a1 + 792) = v22;
  *(_QWORD *)(a1 + 824) = off_1021A10E0;
  memcpy((void *)(a1 + 832), a2 + 52, 0x128uLL);
  *(_QWORD *)(a1 + 1128) = off_1021A1298;
  v23 = a2[72];
  *(_OWORD *)(a1 + 1136) = a2[71];
  *(_OWORD *)(a1 + 1152) = v23;
  *(_QWORD *)(a1 + 1168) = off_1021A0F28;
  *(_OWORD *)(a1 + 1176) = *(__int128 *)((char *)a2 + 1176);
  v24 = *(__int128 *)((char *)a2 + 1192);
  v25 = *(__int128 *)((char *)a2 + 1208);
  v26 = *(__int128 *)((char *)a2 + 1224);
  *(_OWORD *)(a1 + 1240) = *(__int128 *)((char *)a2 + 1240);
  *(_OWORD *)(a1 + 1224) = v26;
  *(_OWORD *)(a1 + 1208) = v25;
  *(_OWORD *)(a1 + 1192) = v24;
  *(_BYTE *)(a1 + 1256) = *((_BYTE *)a2 + 1256);
  *(_QWORD *)(a1 + 1264) = off_1021A1298;
  v27 = *(__int128 *)((char *)a2 + 1272);
  *(_OWORD *)(a1 + 1288) = *(__int128 *)((char *)a2 + 1288);
  *(_OWORD *)(a1 + 1272) = v27;
  *(_QWORD *)(a1 + 1304) = off_1021A0F28;
  *(_OWORD *)(a1 + 1312) = a2[82];
  v28 = a2[84];
  v29 = a2[85];
  v30 = a2[86];
  *(_OWORD *)(a1 + 1328) = a2[83];
  *(_OWORD *)(a1 + 1376) = v30;
  *(_OWORD *)(a1 + 1360) = v29;
  *(_OWORD *)(a1 + 1344) = v28;
  v31 = a2[87];
  v32 = a2[88];
  *(_BYTE *)(a1 + 1424) = *((_BYTE *)a2 + 1424);
  *(_OWORD *)(a1 + 1408) = v32;
  *(_OWORD *)(a1 + 1392) = v31;
  return a1;
}

void sub_1010FE140()
{
  operator delete();
}

_QWORD *sub_1010FE154(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[6];
  if (v2)
    operator delete(v2);
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1010FE190()
{
  operator delete();
}

void sub_1010FE1A4(double *a1, uint64_t a2)
{
  _QWORD *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v3 = a1 + 1;
  sub_1010FE22C((double *)(a2 + 8), a1 + 1);
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = sqrt(v4 * v4 + v5 * v5 + v6 * v6 + v7 * v7);
  if (v8 == 0.0)
  {
    *v3 = 0;
    a1[2] = 0.0;
    v9 = 1.0;
    a1[3] = 0.0;
  }
  else
  {
    if (v8 == 1.0)
      return;
    a1[1] = v5 / v8;
    a1[2] = v4 / v8;
    a1[3] = v6 / v8;
    v9 = v7 / v8;
  }
  a1[4] = v9;
}

double sub_1010FE22C(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;
  BOOL v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double result;

  v2 = *a1;
  v3 = a1[4];
  v4 = a1[8];
  v5 = *a1 + v3 + v4;
  if (v5 <= 0.0)
  {
    if (v2 > v3)
    {
      v8 = v2 == v4;
      v9 = v2 < v4;
    }
    else
    {
      v8 = 1;
      v9 = 0;
    }
    if (v9 || v8)
    {
      v10 = 1.0 - v2;
      if (v3 <= v4)
      {
        v15 = sqrt(v10 - v3 + v4);
        v6 = v15 + v15;
        *a2 = (a1[2] + a1[6]) / v6;
        a2[1] = (a1[7] + a1[5]) / v6;
        a2[2] = v6 * 0.25;
        v13 = a1[3];
        v14 = a1[1];
      }
      else
      {
        v11 = sqrt(v10 + v3 - v4);
        v6 = v11 + v11;
        *a2 = (a1[3] + a1[1]) / v6;
        a2[1] = v6 * 0.25;
        a2[2] = (a1[7] + a1[5]) / v6;
        v13 = a1[2];
        v14 = a1[6];
      }
    }
    else
    {
      v12 = sqrt(v2 + 1.0 - v3 - v4);
      v6 = v12 + v12;
      *a2 = v6 * 0.25;
      a2[1] = (a1[3] + a1[1]) / v6;
      a2[2] = (a1[2] + a1[6]) / v6;
      v13 = a1[7];
      v14 = a1[5];
    }
    v7 = v13 - v14;
  }
  else
  {
    v6 = 0.5 / sqrt(v5 + 1.0);
    *a2 = v6 * (a1[7] - a1[5]);
    a2[1] = v6 * (a1[2] - a1[6]);
    a2[2] = v6 * (a1[3] - a1[1]);
    v7 = 0.25;
  }
  result = v7 / v6;
  a2[3] = result;
  return result;
}

void sub_1010FE3B8(double *a1, uint64_t a2)
{
  _QWORD *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v3 = a1 + 1;
  sub_1010FE22C(*(double **)(a2 + 24), a1 + 1);
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = sqrt(v4 * v4 + v5 * v5 + v6 * v6 + v7 * v7);
  if (v8 == 0.0)
  {
    *v3 = 0;
    a1[2] = 0.0;
    v9 = 1.0;
    a1[3] = 0.0;
  }
  else
  {
    if (v8 == 1.0)
      return;
    a1[1] = v5 / v8;
    a1[2] = v4 / v8;
    a1[3] = v6 / v8;
    v9 = v7 / v8;
  }
  a1[4] = v9;
}

void sub_1010FE440(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v4 = a2[1];
  v5 = a2[2];
  *a1 = v4;
  a1[1] = v5;
  if (v5 == 1)
    v6 = 1;
  else
    v6 = v4;
  a1[2] = v6;
  v7 = (void **)(a1 + 3);
  sub_1000F3860((uint64_t)(a1 + 3), v5 * v4);
  v8 = a2[1];
  v9 = a2[4];
  if (v8 == v9)
  {
    v10 = (_BYTE *)a2[5];
    v11 = (_BYTE *)a2[6];
    if (v11 != v10)
      memmove(*v7, v10, v11 - v10);
  }
  else
  {
    v12 = a2[3];
    v13 = a1[1];
    if (v12 == 1)
    {
      if (v13)
      {
        for (i = 0; i < v13; ++i)
        {
          if (v8)
          {
            memmove((void *)(a1[3] + 8 * a1[2] * i), (const void *)(a2[5] + 8 * a2[4] * i), 8 * v8);
            v13 = a1[1];
          }
        }
      }
    }
    else if (v13)
    {
      v15 = 0;
      v16 = 0;
      v17 = *a1;
      v18 = 8 * a1[2];
      v19 = (_QWORD *)a2[5];
      v20 = 8 * v9;
      v21 = 8 * v12;
      do
      {
        if (v17)
        {
          v22 = (char *)*v7 + v15;
          v23 = v19;
          v24 = v17;
          do
          {
            *v22++ = *v23;
            v23 = (_QWORD *)((char *)v23 + v21);
            --v24;
          }
          while (v24);
        }
        ++v16;
        v15 += v18;
        v19 = (_QWORD *)((char *)v19 + v20);
      }
      while (v16 != v13);
    }
  }
}

uint64_t sub_1010FE580(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 = (__int128 *)((char *)v4 - 1432);
    result = sub_1010FDEF8(result - 1432, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_1010FE604(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2DC3EED6866F8ELL)
    sub_10025955C();
  return operator new(1432 * a2);
}

uint64_t sub_1010FE64C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1010FE708((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1010FE6C0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x14BD3EDDA68FE1)
    sub_10025955C();
  return operator new(3160 * a2);
}

uint64_t sub_1010FE708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;

  v7 = a7;
  if (a3 != a5)
  {
    v10 = a3;
    v11 = a7 - 3160;
    do
    {
      sub_1010FDC78(v11, (__int128 *)(v10 - 3160));
      sub_1010FDEF8(v11 + 1728, (__int128 *)(v10 - 1432));
      v7 -= 3160;
      v11 -= 3160;
      v10 -= 3160;
    }
    while (v10 != a5);
  }
  return a6;
}

uint64_t sub_1010FE784(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1010FE840((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1010FE7F8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924925)
    sub_10025955C();
  return operator new(1792 * a2);
}

uint64_t sub_1010FE840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v7 = a7;
  if (a3 != a5)
  {
    v10 = a7 - 1792;
    do
    {
      v11 = a3 - 1792;
      v12 = *(_OWORD *)(a3 - 1776);
      *(_OWORD *)v10 = *(_OWORD *)(a3 - 1792);
      *(_OWORD *)(v10 + 16) = v12;
      *(_QWORD *)(v10 + 32) = off_1021A1298;
      v13 = *(_OWORD *)(a3 - 1752);
      *(_OWORD *)(v10 + 56) = *(_OWORD *)(a3 - 1736);
      *(_OWORD *)(v10 + 40) = v13;
      *(_QWORD *)(v10 + 72) = off_1021A1298;
      v14 = *(_OWORD *)(a3 - 1696);
      *(_OWORD *)(v10 + 80) = *(_OWORD *)(a3 - 1712);
      *(_OWORD *)(v10 + 96) = v14;
      v15 = *(_OWORD *)(a3 - 1680);
      v16 = *(_OWORD *)(a3 - 1664);
      v17 = *(_OWORD *)(a3 - 1648);
      *(_BYTE *)(v10 + 160) = *(_BYTE *)(a3 - 1632);
      *(_OWORD *)(v10 + 128) = v16;
      *(_OWORD *)(v10 + 144) = v17;
      *(_OWORD *)(v10 + 112) = v15;
      *(_QWORD *)(v10 + 168) = off_1021A1298;
      v18 = *(_OWORD *)(a3 - 1600);
      *(_OWORD *)(v10 + 176) = *(_OWORD *)(a3 - 1616);
      *(_OWORD *)(v10 + 192) = v18;
      *(_QWORD *)(v10 + 208) = off_1021A1298;
      v19 = *(_OWORD *)(a3 - 1576);
      *(_OWORD *)(v10 + 232) = *(_OWORD *)(a3 - 1560);
      *(_OWORD *)(v10 + 216) = v19;
      *(_QWORD *)(v10 + 248) = off_1021A0F28;
      *(_OWORD *)(v10 + 256) = *(_OWORD *)(a3 - 1536);
      v20 = *(_OWORD *)(a3 - 1520);
      v21 = *(_OWORD *)(a3 - 1504);
      v22 = *(_OWORD *)(a3 - 1472);
      *(_OWORD *)(v10 + 304) = *(_OWORD *)(a3 - 1488);
      *(_OWORD *)(v10 + 320) = v22;
      *(_OWORD *)(v10 + 272) = v20;
      *(_OWORD *)(v10 + 288) = v21;
      v23 = *(_OWORD *)(a3 - 1456);
      *(_QWORD *)(v10 + 352) = *(_QWORD *)(a3 - 1440);
      *(_OWORD *)(v10 + 336) = v23;
      sub_1010FDEF8(v10 + 360, (__int128 *)(a3 - 1432));
      v10 -= 1792;
      v7 -= 1792;
      a3 = v11;
    }
    while (v11 != a5);
  }
  return a6;
}

uint64_t sub_1010FE96C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 3336;
    result = sub_1010FEA38(result - 3336, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_1010FE9F0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x13A524387AC823)
    sub_10025955C();
  return operator new(3336 * a2);
}

uint64_t sub_1010FEA38(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = off_1021A0D18;
  v4 = *(_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 16) = off_1021A0EF0;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = off_1021A0F28;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 152) = off_1021A0D18;
  v9 = *(_OWORD *)(a2 + 176);
  v10 = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  *(_QWORD *)(a1 + 192) = v10;
  *(_QWORD *)(a1 + 200) = off_1021A1298;
  v11 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v11;
  *(_QWORD *)(a1 + 240) = off_1021A10E0;
  memcpy((void *)(a1 + 248), (const void *)(a2 + 248), 0x128uLL);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(_QWORD *)(a1 + 552) = off_1021A0D18;
  v13 = *(_OWORD *)(a2 + 560);
  v12 = *(_OWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 560) = v13;
  *(_OWORD *)(a1 + 576) = v12;
  *(_QWORD *)(a1 + 552) = off_1021A0EF0;
  *(_QWORD *)(a1 + 600) = off_1021A0F28;
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  v14 = *(_OWORD *)(a2 + 624);
  v15 = *(_OWORD *)(a2 + 640);
  v16 = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 672) = v16;
  *(_OWORD *)(a1 + 624) = v14;
  *(_OWORD *)(a1 + 640) = v15;
  *(_QWORD *)(a1 + 688) = off_1021A0D18;
  v17 = *(_QWORD *)(a2 + 728);
  v18 = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 712) = v18;
  *(_QWORD *)(a1 + 728) = v17;
  *(_QWORD *)(a1 + 736) = off_1021A1298;
  v19 = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 744) = v19;
  *(_QWORD *)(a1 + 776) = off_1021A10E0;
  memcpy((void *)(a1 + 784), (const void *)(a2 + 784), 0x128uLL);
  *(_QWORD *)(a1 + 1080) = off_1021A1298;
  v20 = *(_OWORD *)(a2 + 1104);
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(_OWORD *)(a1 + 1104) = v20;
  *(_QWORD *)(a1 + 1120) = off_1021A1298;
  v21 = *(_OWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1144) = v21;
  v22 = *(_OWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 1176) = v22;
  *(_QWORD *)(a1 + 1192) = off_1021A1298;
  v23 = *(_OWORD *)(a2 + 1216);
  *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a2 + 1200);
  *(_OWORD *)(a1 + 1216) = v23;
  *(_QWORD *)(a1 + 1232) = off_1021A1298;
  v24 = *(_OWORD *)(a2 + 1256);
  *(_OWORD *)(a1 + 1240) = *(_OWORD *)(a2 + 1240);
  *(_OWORD *)(a1 + 1256) = v24;
  v26 = *(_OWORD *)(a2 + 1288);
  v25 = *(_OWORD *)(a2 + 1304);
  v27 = *(_OWORD *)(a2 + 1272);
  *(_BYTE *)(a1 + 1320) = *(_BYTE *)(a2 + 1320);
  *(_OWORD *)(a1 + 1288) = v26;
  *(_OWORD *)(a1 + 1304) = v25;
  *(_OWORD *)(a1 + 1272) = v27;
  *(_QWORD *)(a1 + 1328) = off_1021A1298;
  v28 = *(_OWORD *)(a2 + 1352);
  *(_OWORD *)(a1 + 1336) = *(_OWORD *)(a2 + 1336);
  *(_OWORD *)(a1 + 1352) = v28;
  *(_QWORD *)(a1 + 1368) = off_1021A1298;
  v29 = *(_OWORD *)(a2 + 1392);
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
  *(_OWORD *)(a1 + 1392) = v29;
  *(_QWORD *)(a1 + 1408) = off_1021A0F28;
  *(_OWORD *)(a1 + 1416) = *(_OWORD *)(a2 + 1416);
  v30 = *(_OWORD *)(a2 + 1480);
  v32 = *(_OWORD *)(a2 + 1432);
  v31 = *(_OWORD *)(a2 + 1448);
  *(_OWORD *)(a1 + 1464) = *(_OWORD *)(a2 + 1464);
  *(_OWORD *)(a1 + 1480) = v30;
  *(_OWORD *)(a1 + 1432) = v32;
  *(_OWORD *)(a1 + 1448) = v31;
  v33 = *(_OWORD *)(a2 + 1496);
  *(_QWORD *)(a1 + 1512) = *(_QWORD *)(a2 + 1512);
  *(_OWORD *)(a1 + 1496) = v33;
  v34 = *(_QWORD *)(a2 + 1536);
  *(_OWORD *)(a1 + 1520) = *(_OWORD *)(a2 + 1520);
  *(_QWORD *)(a1 + 1536) = v34;
  v35 = *(_OWORD *)(a2 + 1560);
  *(_OWORD *)(a1 + 1544) = *(_OWORD *)(a2 + 1544);
  *(_OWORD *)(a1 + 1560) = v35;
  *(_QWORD *)(a1 + 1576) = off_1021A1298;
  v36 = *(_OWORD *)(a2 + 1600);
  *(_OWORD *)(a1 + 1584) = *(_OWORD *)(a2 + 1584);
  *(_OWORD *)(a1 + 1600) = v36;
  *(_QWORD *)(a1 + 1616) = off_1021A1298;
  v37 = *(_OWORD *)(a2 + 1640);
  *(_OWORD *)(a1 + 1624) = *(_OWORD *)(a2 + 1624);
  *(_OWORD *)(a1 + 1640) = v37;
  v39 = *(_OWORD *)(a2 + 1672);
  v38 = *(_OWORD *)(a2 + 1688);
  v40 = *(_OWORD *)(a2 + 1656);
  *(_BYTE *)(a1 + 1704) = *(_BYTE *)(a2 + 1704);
  *(_OWORD *)(a1 + 1672) = v39;
  *(_OWORD *)(a1 + 1688) = v38;
  *(_OWORD *)(a1 + 1656) = v40;
  *(_QWORD *)(a1 + 1712) = off_1021A1298;
  v41 = *(_OWORD *)(a2 + 1736);
  *(_OWORD *)(a1 + 1720) = *(_OWORD *)(a2 + 1720);
  *(_OWORD *)(a1 + 1736) = v41;
  *(_QWORD *)(a1 + 1752) = off_1021A1298;
  v42 = *(_OWORD *)(a2 + 1776);
  *(_OWORD *)(a1 + 1760) = *(_OWORD *)(a2 + 1760);
  *(_OWORD *)(a1 + 1776) = v42;
  *(_QWORD *)(a1 + 1792) = off_1021A0F28;
  *(_OWORD *)(a1 + 1800) = *(_OWORD *)(a2 + 1800);
  v43 = *(_OWORD *)(a2 + 1864);
  v45 = *(_OWORD *)(a2 + 1816);
  v44 = *(_OWORD *)(a2 + 1832);
  *(_OWORD *)(a1 + 1848) = *(_OWORD *)(a2 + 1848);
  *(_OWORD *)(a1 + 1864) = v43;
  *(_OWORD *)(a1 + 1816) = v45;
  *(_OWORD *)(a1 + 1832) = v44;
  v46 = *(_OWORD *)(a2 + 1880);
  *(_QWORD *)(a1 + 1896) = *(_QWORD *)(a2 + 1896);
  *(_OWORD *)(a1 + 1880) = v46;
  sub_1010FDEF8(a1 + 1904, (__int128 *)(a2 + 1904));
  return a1;
}

void sub_1010FED34(uint64_t a1, const double *__B)
{
  double *v3;
  vDSP_Stride v4;
  uint64_t v5;
  vDSP_Length v6;
  uint64_t v7;
  BOOL v8;
  vDSP_Length v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double *v18;
  vDSP_Length v19;

  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(double **)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 == 1)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      if (v6 == v4)
      {
        vDSP_vsmulD(*(const double **)(a1 + 40), 1, __B, v3, 1, v7 * v4);
      }
      else
      {
        v12 = 8 * v4;
        do
        {
          vDSP_vsmulD(v3, 1, __B, v3, 1, v6);
          v3 = (double *)((char *)v3 + v12);
          --v7;
        }
        while (v7);
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      if (v9 == v5)
      {
        vDSP_vsmulD(*(const double **)(a1 + 40), 1, __B, v3, 1, v10 * v5);
      }
      else if (v4 == 1 || v10 == 1)
      {
        v14 = 8 * v5;
        do
        {
          vDSP_vsmulD(v3, v4, __B, v3, 1, v9);
          v3 = (double *)((char *)v3 + v14);
          --v10;
        }
        while (v10);
      }
      else
      {
        v15 = 0;
        v16 = 8 * v5;
        do
        {
          v17 = v3;
          v18 = v3;
          v19 = v9;
          do
          {
            *v18++ = *v17 * *__B;
            v17 += v4;
            --v19;
          }
          while (v19);
          ++v15;
          v3 = (double *)((char *)v3 + v16);
        }
        while (v15 != v10);
      }
    }
  }
}

uint64_t sub_1010FEEA0(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xED6866F8D962AE7BLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2DC3EED6866F8DLL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xED6866F8D962AE7BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x16E1F76B4337C6)
    v9 = 0x2DC3EED6866F8DLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1010FE604(v7, v9);
  else
    v10 = 0;
  __p = v10;
  v14 = &v10[1432 * v4];
  v16 = &v10[1432 * v9];
  sub_1010FDEF8((uint64_t)v14, a2);
  v15 = v14 + 1432;
  sub_1010FE580(a1, &__p);
  v11 = a1[1];
  if (v15 != v14)
    v15 = &v14[(v15 - v14 - 1432) % 0x598uLL];
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_1010FEFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010FF038(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xEBE8AB1946A49E23 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x14BD3EDDA68FE0)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEBE8AB1946A49E23 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xA5E9F6ED347F0)
    v9 = 0x14BD3EDDA68FE0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1010FE6C0(v7, v9);
  else
    v10 = 0;
  __p = v10;
  v14 = &v10[3160 * v4];
  v16 = &v10[3160 * v9];
  sub_1010FDC78((uint64_t)v14, a2);
  sub_1010FDEF8((uint64_t)(v14 + 1728), a2 + 108);
  v15 = v14 + 3160;
  sub_1010FE64C(a1, &__p);
  v11 = a1[1];
  if (v15 != v14)
    v15 = &v14[(v15 - v14 - 3160) % 0xC58uLL];
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_1010FF18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010FF1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 32) = off_1021A1298;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 72) = off_1021A1298;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v3 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  v9 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(v3 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(v3 + 128) = v8;
  *(_OWORD *)(v3 + 144) = v9;
  *(_OWORD *)(v3 + 112) = v7;
  *(_QWORD *)(v3 + 168) = off_1021A1298;
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(v3 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v3 + 192) = v10;
  *(_QWORD *)(v3 + 208) = off_1021A1298;
  v11 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v3 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v3 + 216) = v11;
  *(_QWORD *)(v3 + 248) = off_1021A0F28;
  *(_OWORD *)(v3 + 256) = *(_OWORD *)(a2 + 256);
  v12 = *(_OWORD *)(a2 + 272);
  v13 = *(_OWORD *)(a2 + 288);
  v14 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(v3 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(v3 + 320) = v14;
  *(_OWORD *)(v3 + 272) = v12;
  *(_OWORD *)(v3 + 288) = v13;
  v15 = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(v3 + 352) = *(_QWORD *)(a2 + 352);
  *(_OWORD *)(v3 + 336) = v15;
  result = sub_1010FDEF8(v3 + 360, (__int128 *)(a2 + 360));
  *(_QWORD *)(a1 + 8) = v3 + 1792;
  return result;
}

uint64_t sub_1010FF2BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t *v30;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 8);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x24924924924924)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 8);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x12492492492492)
    v9 = 0x24924924924924;
  else
    v9 = v5;
  v30 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1010FE7F8(v7, v9);
  else
    v10 = 0;
  v11 = &v10[1792 * v4];
  __p = v10;
  v27 = v11;
  v29 = &v10[1792 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 4) = off_1021A1298;
  v13 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v11 + 40) = v13;
  *((_QWORD *)v11 + 9) = off_1021A1298;
  v14 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v11 + 5) = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v11 + 6) = v14;
  v15 = *(_OWORD *)(a2 + 112);
  v16 = *(_OWORD *)(a2 + 128);
  v17 = *(_OWORD *)(a2 + 144);
  v11[160] = *(_BYTE *)(a2 + 160);
  *((_OWORD *)v11 + 8) = v16;
  *((_OWORD *)v11 + 9) = v17;
  *((_OWORD *)v11 + 7) = v15;
  *((_QWORD *)v11 + 21) = off_1021A1298;
  v18 = *(_OWORD *)(a2 + 192);
  *((_OWORD *)v11 + 11) = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v11 + 12) = v18;
  *((_QWORD *)v11 + 26) = off_1021A1298;
  v19 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v11 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v11 + 216) = v19;
  *((_QWORD *)v11 + 31) = off_1021A0F28;
  *((_OWORD *)v11 + 16) = *(_OWORD *)(a2 + 256);
  v20 = *(_OWORD *)(a2 + 272);
  v21 = *(_OWORD *)(a2 + 288);
  v22 = *(_OWORD *)(a2 + 320);
  *((_OWORD *)v11 + 19) = *(_OWORD *)(a2 + 304);
  *((_OWORD *)v11 + 20) = v22;
  *((_OWORD *)v11 + 17) = v20;
  *((_OWORD *)v11 + 18) = v21;
  v23 = *(_OWORD *)(a2 + 336);
  *((_QWORD *)v11 + 44) = *(_QWORD *)(a2 + 352);
  *((_OWORD *)v11 + 21) = v23;
  sub_1010FDEF8((uint64_t)(v11 + 360), (__int128 *)(a2 + 360));
  v28 = v11 + 1792;
  sub_1010FE784(a1, &__p);
  v24 = a1[1];
  if (v28 != v27)
    v28 += -1792
         - 1792 * ((((unint64_t)(v28 - v27 - 1792) >> 8) * (unsigned __int128)0x2492492492492493uLL) >> 64);
  if (__p)
    operator delete(__p);
  return v24;
}

void sub_1010FF4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010FF4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_1010FF554(a3, v4);
      v4 += 3160;
      a3 += 3160;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_1010FF554(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  sub_1010EC958(a1, (__int128 *)a2);
  v4 = *(_OWORD *)(a2 + 1744);
  v5 = *(_OWORD *)(a2 + 1760);
  v6 = *(_QWORD *)(a2 + 1776);
  *(_OWORD *)(a1 + 1728) = *(_OWORD *)(a2 + 1728);
  *(_QWORD *)(a1 + 1776) = v6;
  *(_OWORD *)(a1 + 1760) = v5;
  *(_OWORD *)(a1 + 1744) = v4;
  *(_BYTE *)(a1 + 1784) = *(_BYTE *)(a2 + 1784);
  v7 = *(_OWORD *)(a2 + 1816);
  v8 = *(_OWORD *)(a2 + 1800);
  *(_QWORD *)(a1 + 1832) = *(_QWORD *)(a2 + 1832);
  *(_OWORD *)(a1 + 1800) = v8;
  *(_OWORD *)(a1 + 1816) = v7;
  v9 = *(_OWORD *)(a2 + 1880);
  v10 = *(_OWORD *)(a2 + 1896);
  v11 = *(_OWORD *)(a2 + 1864);
  *(_OWORD *)(a1 + 1912) = *(_OWORD *)(a2 + 1912);
  *(_OWORD *)(a1 + 1864) = v11;
  *(_OWORD *)(a1 + 1896) = v10;
  *(_OWORD *)(a1 + 1880) = v9;
  *(_OWORD *)(a1 + 1848) = *(_OWORD *)(a2 + 1848);
  v12 = *(_OWORD *)(a2 + 1936);
  v13 = *(_OWORD *)(a2 + 1952);
  *(_QWORD *)(a1 + 1968) = *(_QWORD *)(a2 + 1968);
  *(_OWORD *)(a1 + 1952) = v13;
  *(_OWORD *)(a1 + 1936) = v12;
  v14 = *(_OWORD *)(a2 + 1984);
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a2 + 2000);
  *(_OWORD *)(a1 + 1984) = v14;
  memcpy((void *)(a1 + 2024), (const void *)(a2 + 2024), 0x129uLL);
  v15 = *(_OWORD *)(a2 + 2352);
  v16 = *(_OWORD *)(a2 + 2336);
  *(_QWORD *)(a1 + 2368) = *(_QWORD *)(a2 + 2368);
  *(_OWORD *)(a1 + 2336) = v16;
  *(_OWORD *)(a1 + 2352) = v15;
  v17 = *(_OWORD *)(a2 + 2416);
  v18 = *(_OWORD *)(a2 + 2432);
  v19 = *(_OWORD *)(a2 + 2400);
  *(_OWORD *)(a1 + 2448) = *(_OWORD *)(a2 + 2448);
  *(_OWORD *)(a1 + 2400) = v19;
  *(_OWORD *)(a1 + 2432) = v18;
  *(_OWORD *)(a1 + 2416) = v17;
  *(_OWORD *)(a1 + 2384) = *(_OWORD *)(a2 + 2384);
  v20 = *(_OWORD *)(a2 + 2472);
  v21 = *(_OWORD *)(a2 + 2488);
  *(_QWORD *)(a1 + 2504) = *(_QWORD *)(a2 + 2504);
  *(_OWORD *)(a1 + 2488) = v21;
  *(_OWORD *)(a1 + 2472) = v20;
  v22 = *(_OWORD *)(a2 + 2520);
  *(_OWORD *)(a1 + 2536) = *(_OWORD *)(a2 + 2536);
  *(_OWORD *)(a1 + 2520) = v22;
  memcpy((void *)(a1 + 2560), (const void *)(a2 + 2560), 0x128uLL);
  v23 = *(_OWORD *)(a2 + 2864);
  *(_OWORD *)(a1 + 2880) = *(_OWORD *)(a2 + 2880);
  *(_OWORD *)(a1 + 2864) = v23;
  *(_OWORD *)(a1 + 2904) = *(_OWORD *)(a2 + 2904);
  v24 = *(_OWORD *)(a2 + 2936);
  v25 = *(_OWORD *)(a2 + 2952);
  v26 = *(_OWORD *)(a2 + 2968);
  *(_OWORD *)(a1 + 2920) = *(_OWORD *)(a2 + 2920);
  *(_OWORD *)(a1 + 2968) = v26;
  *(_OWORD *)(a1 + 2952) = v25;
  *(_OWORD *)(a1 + 2936) = v24;
  *(_BYTE *)(a1 + 2984) = *(_BYTE *)(a2 + 2984);
  v27 = *(_OWORD *)(a2 + 3000);
  *(_OWORD *)(a1 + 3016) = *(_OWORD *)(a2 + 3016);
  *(_OWORD *)(a1 + 3000) = v27;
  *(_OWORD *)(a1 + 3040) = *(_OWORD *)(a2 + 3040);
  v28 = *(_OWORD *)(a2 + 3072);
  v29 = *(_OWORD *)(a2 + 3088);
  v30 = *(_OWORD *)(a2 + 3104);
  *(_OWORD *)(a1 + 3056) = *(_OWORD *)(a2 + 3056);
  *(_OWORD *)(a1 + 3104) = v30;
  *(_OWORD *)(a1 + 3088) = v29;
  *(_OWORD *)(a1 + 3072) = v28;
  v31 = *(_OWORD *)(a2 + 3120);
  v32 = *(_OWORD *)(a2 + 3136);
  *(_BYTE *)(a1 + 3152) = *(_BYTE *)(a2 + 3152);
  *(_OWORD *)(a1 + 3136) = v32;
  *(_OWORD *)(a1 + 3120) = v31;
  return a1;
}

uint64_t sub_1010FF74C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_1010F5314(a3, v4);
      v4 += 3336;
      a3 += 3336;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_1010FF7A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x13A524387AC82261 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x13A524387AC822)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x13A524387AC82261 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x9D2921C3D6411)
    v9 = 0x13A524387AC822;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1010FE9F0(v7, v9);
  else
    v10 = 0;
  __p = v10;
  v14 = &v10[3336 * v4];
  v16 = &v10[3336 * v9];
  sub_1010FEA38((uint64_t)v14, a2);
  v15 = v14 + 3336;
  sub_1010FE96C(a1, &__p);
  v11 = a1[1];
  if (v15 != v14)
    v15 = &v14[(v15 - v14 - 3336) % 0xD08uLL];
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_1010FF8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010FF940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_1010F6AAC(a3, v4);
      v4 += 1792;
      a3 += 1792;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_1010FF99C(uint64_t a1, const double *__B)
{
  double *v3;
  vDSP_Stride v4;
  uint64_t v5;
  vDSP_Length v6;
  uint64_t v7;
  BOOL v8;
  vDSP_Length v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double *v18;
  vDSP_Length v19;

  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(double **)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 == 1)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      if (v6 == v4)
      {
        vDSP_vsaddD(*(const double **)(a1 + 40), 1, __B, v3, 1, v7 * v4);
      }
      else
      {
        v12 = 8 * v4;
        do
        {
          vDSP_vsaddD(v3, 1, __B, v3, 1, v6);
          v3 = (double *)((char *)v3 + v12);
          --v7;
        }
        while (v7);
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      if (v9 == v5)
      {
        vDSP_vsaddD(*(const double **)(a1 + 40), 1, __B, v3, 1, v10 * v5);
      }
      else if (v4 == 1 || v10 == 1)
      {
        v14 = 8 * v5;
        do
        {
          vDSP_vsaddD(v3, v4, __B, v3, 1, v9);
          v3 = (double *)((char *)v3 + v14);
          --v10;
        }
        while (v10);
      }
      else
      {
        v15 = 0;
        v16 = 8 * v5;
        do
        {
          v17 = v3;
          v18 = v3;
          v19 = v9;
          do
          {
            *v18++ = *v17 + *__B;
            v17 += v4;
            --v19;
          }
          while (v19);
          ++v15;
          v3 = (double *)((char *)v3 + v16);
        }
        while (v15 != v10);
      }
    }
  }
}

void sub_1010FFB08(uint64_t a1, const double *__B)
{
  vDSP_vsmulD(*(const double **)(a1 + 24), 1, __B, *(double **)(a1 + 24), 1, *(_QWORD *)(a1 + 8) * *(_QWORD *)a1);
}

_QWORD *sub_1010FFB3C(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v2 = result[4];
  v3 = result[1];
  if (v2 == v3)
  {
    v4 = (uint64_t *)a2[3];
    v5 = (uint64_t *)a2[4];
    if (v4 != v5)
    {
      v6 = (_QWORD *)result[5];
      do
      {
        v7 = *v4++;
        *v6++ = v7;
      }
      while (v4 != v5);
    }
  }
  else
  {
    v8 = result[3];
    v9 = a2[1];
    v10 = a2[2];
    if (v8 == 1)
    {
      if (v9)
      {
        v11 = 0;
        v12 = a2[3];
        v13 = result[5];
        do
        {
          if (v3)
          {
            v14 = (uint64_t *)(v12 + 8 * v11 * v10);
            v15 = (_QWORD *)(v13 + 8 * v11 * v2);
            result = (_QWORD *)(8 * v3);
            do
            {
              v16 = *v14++;
              *v15++ = v16;
              --result;
            }
            while (result);
          }
          ++v11;
        }
        while (v11 != v9);
      }
    }
    else if (v9)
    {
      v17 = 0;
      v18 = 0;
      v19 = *a2;
      v20 = 8 * v2;
      v21 = (uint64_t *)a2[3];
      v22 = 8 * v8;
      v23 = 8 * v10;
      do
      {
        if (v19)
        {
          v24 = (_QWORD *)(result[5] + v17);
          v25 = v21;
          v26 = v19;
          do
          {
            v27 = *v25++;
            *v24 = v27;
            v24 = (_QWORD *)((char *)v24 + v22);
            --v26;
          }
          while (v26);
        }
        ++v18;
        v17 += v20;
        v21 = (uint64_t *)((char *)v21 + v23);
      }
      while (v18 != v9);
    }
  }
  return result;
}

uint64_t *sub_1010FFC2C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = a2;
  a1[1] = a3;
  if (a3 == 1)
    v4 = 1;
  else
    v4 = a2;
  a1[2] = v4;
  sub_1000ECE2C(a1 + 3, a3 * a2);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  return a1;
}

__CLPK_doublereal *sub_1010FFC74(__CLPK_doublereal *result, unint64_t a2, __CLPK_doublereal **a3, __CLPK_integer **a4)
{
  __CLPK_doublereal *v6;
  __CLPK_doublereal __work;
  __CLPK_integer __lwork;
  __CLPK_integer __info;
  __CLPK_integer __lda;
  __CLPK_integer __n;

  if (a2)
  {
    v6 = result;
    __lda = a2;
    __n = a2;
    sub_1002F3170((uint64_t)a4, a2);
    __info = 1;
    dgetrf_(&__n, &__n, v6, &__lda, *a4, &__info);
    __lwork = -1;
    __info = 1;
    __work = 0.0;
    dgetri_(&__n, v6, &__lda, *a4, &__work, &__lwork, &__info);
    sub_1000F3860((uint64_t)a3, (unint64_t)__work);
    __lwork = (int)__work;
    __info = 1;
    return (__CLPK_doublereal *)dgetri_(&__n, v6, &__lda, *a4, *a3, &__lwork, &__info);
  }
  return result;
}

void sub_1010FFD4C(uint64_t a1, uint64_t a2)
{
  vDSP_vsubD((const double *)(a2 + 8), 1, (const double *)(a1 + 8), 1, (double *)(a1 + 8), 1, 0x24uLL);
}

double sub_1010FFD80(double *a1, _QWORD *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double result;

  v3 = a1[1];
  v2 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v7 = a1[5];
  v6 = a1[6];
  v9 = a1[7];
  v8 = a1[8];
  v10 = a1[9];
  v12 = a2[4];
  v11 = (double *)a2[5];
  v13 = a2[3];
  v14 = v12 + v13;
  v15 = v12 + 2 * v13;
  v16 = v13 + 2 * v12;
  a1[1] = v5 * v11[v13] + v3 * *v11 + v9 * v11[2 * v13];
  a1[2] = v7 * v11[v13] + v2 * *v11 + v8 * v11[2 * v13];
  a1[3] = v6 * v11[v13] + v4 * *v11 + v10 * v11[2 * v13];
  a1[4] = v5 * v11[v12 + v13] + v3 * v11[v12] + v9 * v11[v15];
  v17 = v11[v12 + v13];
  v18 = 2 * v12 + 2 * v13;
  a1[5] = v7 * v17 + v2 * v11[v12] + v8 * v11[v15];
  a1[6] = v6 * v11[v14] + v4 * v11[v12] + v10 * v11[v15];
  v12 *= 16;
  a1[7] = v5 * v11[v16] + v3 * *(double *)((char *)v11 + v12) + v9 * v11[v18];
  a1[8] = v7 * v11[v16] + v2 * *(double *)((char *)v11 + v12) + v8 * v11[v18];
  result = v6 * v11[v16] + v4 * *(double *)((char *)v11 + v12) + v10 * v11[v18];
  a1[9] = result;
  return result;
}

double sub_1010FFEB8(double *a1, double *a2)
{
  double v2;
  double v3;
  double result;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;

  v3 = *a1;
  v2 = a1[1];
  result = v2 * v2;
  v5 = a1[2];
  v6 = a1[3];
  v7 = sqrt(v2 * v2 + v3 * v3 + v5 * v5 + v6 * v6);
  if (v7 == 0.0)
  {
    *a2 = 1.0;
    a2[1] = 0.0;
    a2[2] = 0.0;
    a2[3] = 0.0;
    a2[4] = 1.0;
    a2[5] = 0.0;
    a2[6] = 0.0;
    a2[7] = 0.0;
    a2[8] = 1.0;
  }
  else
  {
    if (v7 == 1.0)
    {
      v25 = v3 * v3;
      v26 = v3 * v2;
      v27 = v3 * v5;
      v28 = v3 * v6;
      v29 = v2 * v5;
      v30 = v2 * v6;
      v31 = v5 * v5;
      v32 = v5 * v6;
      v21 = v6 * v6;
      v33 = v26 + v26;
      *a2 = v25 - result - v31 + v21;
      a2[1] = v33 - v32 - v32;
      v34 = v27 + v27;
      a2[2] = v30 + v34 + v30;
      a2[3] = v32 + v33 + v32;
      a2[4] = result - v25 - v31 + v21;
      a2[5] = v29 + v29 - v28 - v28;
      a2[6] = v34 - v30 - v30;
      a2[7] = v28 + v29 + v29 + v28;
      v24 = v31 - v25 - result;
    }
    else
    {
      v8 = v3 / v7;
      v9 = v2 / v7;
      v10 = v5 / v7;
      v11 = v6 / v7;
      v12 = v8 * v8;
      v13 = v8 * v9;
      v14 = v8 * v10;
      v15 = v8 * v11;
      v16 = v9 * v9;
      v17 = v9 * v10;
      v18 = v9 * v11;
      v19 = v10 * v10;
      v20 = v10 * v11;
      v21 = v11 * v11;
      v22 = v13 + v13;
      *a2 = v21 + v12 - v16 - v19;
      a2[1] = v22 - v20 - v20;
      v23 = v14 + v14;
      a2[2] = v18 + v18 + v23;
      a2[3] = v20 + v20 + v22;
      a2[4] = v21 + v16 - v12 - v19;
      a2[5] = v17 + v17 - v15 - v15;
      a2[6] = v23 - v18 - v18;
      a2[7] = v15 + v15 + v17 + v17;
      v24 = v19 - v12 - v16;
    }
    result = v21 + v24;
    a2[8] = result;
  }
  return result;
}

void sub_101100048(double *a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  long double v13;
  int8x16_t v14;
  int8x16_t v15;
  float64x2_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  long double v22;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = sqrt(v4 * v4 + v3 * v3 + v5 * v5 + v6 * v6);
  if (v7 == 0.0)
  {
    a1 = (double *)&unk_101C41878;
LABEL_3:
    sub_1011001A0(a1, (double *)a2);
    return;
  }
  if (v7 == 1.0)
    goto LABEL_3;
  v8 = v3 / v7;
  v9 = v4 / v7;
  v10 = v5 / v7;
  v11 = sqrt(v9 * v9 + v8 * v8 + v10 * v10);
  if (v11 <= 1.0)
    v12 = v11;
  else
    v12 = 1.0;
  v13 = asin(v12);
  if (v13 == 0.0)
  {
    *(_QWORD *)a2 = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *(double *)v14.i64 = v6 / v7;
    v16.f64[0] = NAN;
    v16.f64[1] = NAN;
    v15.i64[0] = 1.0;
    *(_QWORD *)&v17 = vbslq_s8((int8x16_t)vnegq_f64(v16), v15, v14).u64[0];
    v18 = -v8;
    v19 = -v9;
    v20 = -v10;
    v21 = fabs(v6 / v7);
    if (fabs(v13) >= 2.22044605e-16)
    {
      *(double *)a2 = v17 * (v18 / v12);
      *(double *)(a2 + 8) = v17 * (v19 / v12);
      *(double *)(a2 + 16) = v17 * (v20 / v12);
      v13 = v12;
    }
    else
    {
      *(long double *)a2 = v17 * (v18 / v13);
      *(long double *)(a2 + 8) = v17 * (v19 / v13);
      *(long double *)(a2 + 16) = v17 * (v20 / v13);
    }
    v22 = atan2(v13, v21);
    *(long double *)(a2 + 24) = v22 + v22;
  }
}

void sub_1011001A0(double *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  long double v7;
  int8x16_t v8;
  int8x16_t v9;
  float64x2_t v10;
  double v11;
  double v12;
  long double v13;

  v4 = *a1;
  v5 = sqrt(a1[1] * a1[1] + v4 * v4 + a1[2] * a1[2]);
  if (v5 <= 1.0)
    v6 = v5;
  else
    v6 = 1.0;
  v7 = asin(v6);
  if (v7 == 0.0)
  {
    *a2 = 1.0;
    a2[1] = 0.0;
    a2[2] = 0.0;
    a2[3] = 0.0;
  }
  else
  {
    v8.i64[0] = (uint64_t)a1[3];
    v10.f64[0] = NAN;
    v10.f64[1] = NAN;
    v9.i64[0] = 1.0;
    v8.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v10), v9, v8).u64[0];
    v11 = -v4;
    if (fabs(v7) >= 2.22044605e-16)
    {
      *a2 = *(double *)v8.i64 * (v11 / v6);
      a2[1] = *(double *)v8.i64 * (-a1[1] / v6);
      a2[2] = *(double *)v8.i64 * (-a1[2] / v6);
      v12 = fabs(a1[3]);
      v7 = v6;
    }
    else
    {
      *a2 = v11 / v7 * *(double *)v8.i64;
      a2[1] = *(double *)v8.i64 * (-a1[1] / v7);
      a2[2] = *(double *)v8.i64 * (-a1[2] / v7);
      v12 = fabs(a1[3]);
    }
    v13 = atan2(v7, v12);
    a2[3] = v13 + v13;
  }
}

__int128 *sub_1011002C4(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *v5;
    v8 = v5[1];
    v9 = v5[2];
    *(_QWORD *)(a4 + 48) = *((_QWORD *)v5 + 6);
    *(_OWORD *)(a4 + 16) = v8;
    *(_OWORD *)(a4 + 32) = v9;
    *(_OWORD *)a4 = v7;
    *(_BYTE *)(a4 + 56) = *((_BYTE *)v5 + 56);
    v10 = *(__int128 *)((char *)v5 + 72);
    v11 = *(__int128 *)((char *)v5 + 88);
    *(_QWORD *)(a4 + 104) = *((_QWORD *)v5 + 13);
    *(_OWORD *)(a4 + 88) = v11;
    *(_OWORD *)(a4 + 72) = v10;
    v12 = *(__int128 *)((char *)v5 + 152);
    v13 = *(__int128 *)((char *)v5 + 168);
    v14 = *(__int128 *)((char *)v5 + 184);
    *(_OWORD *)(a4 + 136) = *(__int128 *)((char *)v5 + 136);
    *(_OWORD *)(a4 + 184) = v14;
    *(_OWORD *)(a4 + 168) = v13;
    *(_OWORD *)(a4 + 152) = v12;
    *(_OWORD *)(a4 + 120) = *(__int128 *)((char *)v5 + 120);
    v15 = v5[13];
    v16 = v5[14];
    *(_QWORD *)(a4 + 240) = *((_QWORD *)v5 + 30);
    *(_OWORD *)(a4 + 208) = v15;
    *(_OWORD *)(a4 + 224) = v16;
    v17 = v5[17];
    *(_OWORD *)(a4 + 256) = v5[16];
    *(_OWORD *)(a4 + 272) = v17;
    memcpy((void *)(a4 + 296), (char *)v5 + 296, 0x129uLL);
    v19 = v5[38];
    v18 = v5[39];
    *(_QWORD *)(a4 + 640) = *((_QWORD *)v5 + 80);
    *(_OWORD *)(a4 + 608) = v19;
    *(_OWORD *)(a4 + 624) = v18;
    v21 = v5[42];
    v20 = v5[43];
    v22 = v5[45];
    *(_OWORD *)(a4 + 704) = v5[44];
    *(_OWORD *)(a4 + 720) = v22;
    *(_OWORD *)(a4 + 672) = v21;
    *(_OWORD *)(a4 + 688) = v20;
    *(_OWORD *)(a4 + 656) = v5[41];
    v23 = *(__int128 *)((char *)v5 + 744);
    v24 = *(__int128 *)((char *)v5 + 760);
    *(_QWORD *)(a4 + 776) = *((_QWORD *)v5 + 97);
    *(_OWORD *)(a4 + 744) = v23;
    *(_OWORD *)(a4 + 760) = v24;
    v25 = *(__int128 *)((char *)v5 + 808);
    *(_OWORD *)(a4 + 792) = *(__int128 *)((char *)v5 + 792);
    *(_OWORD *)(a4 + 808) = v25;
    memcpy((void *)(a4 + 832), v5 + 52, 0x128uLL);
    v26 = v5[71];
    *(_OWORD *)(a4 + 1152) = v5[72];
    *(_OWORD *)(a4 + 1136) = v26;
    *(_OWORD *)(a4 + 1176) = *(__int128 *)((char *)v5 + 1176);
    v27 = *(__int128 *)((char *)v5 + 1240);
    v29 = *(__int128 *)((char *)v5 + 1192);
    v28 = *(__int128 *)((char *)v5 + 1208);
    *(_OWORD *)(a4 + 1224) = *(__int128 *)((char *)v5 + 1224);
    *(_OWORD *)(a4 + 1240) = v27;
    *(_OWORD *)(a4 + 1192) = v29;
    *(_OWORD *)(a4 + 1208) = v28;
    *(_BYTE *)(a4 + 1256) = *((_BYTE *)v5 + 1256);
    v30 = *(__int128 *)((char *)v5 + 1288);
    *(_OWORD *)(a4 + 1272) = *(__int128 *)((char *)v5 + 1272);
    *(_OWORD *)(a4 + 1288) = v30;
    *(_OWORD *)(a4 + 1312) = v5[82];
    v31 = v5[84];
    v32 = v5[85];
    v33 = v5[86];
    *(_OWORD *)(a4 + 1328) = v5[83];
    *(_OWORD *)(a4 + 1376) = v33;
    *(_OWORD *)(a4 + 1360) = v32;
    *(_OWORD *)(a4 + 1344) = v31;
    v34 = v5[87];
    v35 = v5[88];
    *(_BYTE *)(a4 + 1424) = *((_BYTE *)v5 + 1424);
    *(_OWORD *)(a4 + 1408) = v35;
    *(_OWORD *)(a4 + 1392) = v34;
    a4 += 1432;
    v5 = (__int128 *)((char *)v5 + 1432);
  }
  while (v5 != v6);
  return v6;
}

void sub_101100490(const double *__A, vDSP_Stride __IA, uint64_t a3, const double *__B, vDSP_Stride __IB, uint64_t a6, double *__C, uint64_t a8, vDSP_Length a9, uint64_t a10)
{
  uint64_t v10;
  BOOL v11;
  double *v12;
  const double *v13;
  const double *v14;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  double *v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  double *v31;
  double *v32;
  vDSP_Length v33;

  v10 = a10;
  if (a9)
    v11 = a10 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = __C;
    v13 = __B;
    v14 = __A;
    if (a9 == a8 && a9 == a3 && a9 == a6)
    {
      vDSP_vaddD(__A, 1, __B, 1, __C, 1, a10 * a9);
    }
    else
    {
      v19 = __IB == 1 && __IA == 1;
      if (v19 || a10 == 1)
      {
        v26 = 8 * a8;
        v27 = 8 * a6;
        v28 = 8 * a3;
        do
        {
          vDSP_vaddD(v14, __IA, v13, __IB, v12, 1, a9);
          v12 = (double *)((char *)v12 + v26);
          v13 = (const double *)((char *)v13 + v27);
          v14 = (const double *)((char *)v14 + v28);
          --v10;
        }
        while (v10);
      }
      else if (a10 == __IA && a10 == __IB)
      {
        v20 = 0;
        v21 = 8 * a10;
        do
        {
          v22 = (double *)v14;
          v23 = (double *)v13;
          v24 = v12;
          v25 = a10;
          do
          {
            *v24 = *v22 + *v23;
            v24 += a8;
            v23 += a6;
            v22 += a3;
            --v25;
          }
          while (v25);
          ++v20;
          ++v12;
          v13 = (const double *)((char *)v13 + v21);
          v14 = (const double *)((char *)v14 + v21);
        }
        while (v20 != a9);
      }
      else
      {
        v29 = 0;
        do
        {
          v30 = (double *)v14;
          v31 = (double *)v13;
          v32 = v12;
          v33 = a9;
          do
          {
            *v32++ = *v30 + *v31;
            v31 += __IB;
            v30 += __IA;
            --v33;
          }
          while (v33);
          ++v29;
          v12 += a8;
          v13 += a6;
          v14 += a3;
        }
        while (v29 != a10);
      }
    }
  }
}

void sub_101100654(_QWORD *a1, uint64_t a2)
{
  double *v3;
  uint64_t v4;
  uint64_t v5;
  const double *v6;
  uint64_t v7;

  v3 = (double *)a1[5];
  v5 = a1[3];
  v4 = a1[4];
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(const double **)(a2 + 24);
  if (v5 == 1)
    sub_101100490(v3, 1, v4, v6, 1, v7, v3, v4, a1[1], a1[2]);
  else
    sub_101100490(v3, v4, v5, v6, v7, 1, v3, v5, a1[2], a1[1]);
}

double sub_1011006C0()
{
  sub_1015A2E04(qword_10230C780, "[");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C780, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230C798, "]");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C798, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230C7B0, " ");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C7B0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230C7C8, ";");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C7C8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230C7E0, ", ");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C7E0, (void *)&_mh_execute_header);
  qword_10230C828 = 0x4008000000000000;
  qword_10230C820 = 0x400374B791E38EA2;
  return sub_1002433B8((uint64_t)dbl_10230C7F8);
}

uint64_t sub_1011007E4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v15;
  int v16;
  int v18;
  const char *v19;
  uint8_t *v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _DWORD v24[4];
  uint8_t buf[4];
  int v26;

  v4 = a2[1];
  v22 = *a2;
  v23 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_1010E8154((_QWORD *)a1, &v22, a3);
  v7 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)a1 = off_1021A1CE8;
  __asm { FMOV            V1.2D, #-1.0 }
  v21 = _Q1;
  *(_OWORD *)(a1 + 136) = _Q1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_WORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 467) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 334) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 544) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_BYTE *)(a1 + 568) = 1;
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_BYTE *)(a1 + 600) = 0;
  sub_1002433B8(a1 + 608);
  *(_DWORD *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_QWORD *)(a1 + 680) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = v21;
  *(_WORD *)(a1 + 752) = 256;
  *(_DWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 768) = 0;
  *(_WORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 780) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_BYTE *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_WORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_BYTE *)(a1 + 600) = sub_1000FDBD0();
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
  v15 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v16 = *(unsigned __int8 *)(a1 + 600);
    *(_DWORD *)buf = 67240192;
    v26 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLMM,skipRMSECheckForScalingEntryThresholds,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
    v18 = *(unsigned __int8 *)(a1 + 600);
    v24[0] = 67240192;
    v24[1] = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,skipRMSECheckForScalingEntryThresholds,%{public}d", v24, 8);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "CLScoredMapMatcher::CLScoredMapMatcher(CLMapGeometryPtr, const std::string &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return a1;
}

void sub_101100B0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100261F44(v2);
  if (*(char *)(v1 + 271) < 0)
    operator delete(*(void **)(v1 + 248));
  sub_1010E8204(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101100B50(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A1CE8;
  sub_100261F44(a1 + 552);
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  return sub_1010E8204(a1);
}

void sub_101100B98(uint64_t a1)
{
  sub_101100B50(a1);
  operator delete();
}

void sub_101100BBC(uint64_t a1)
{
  __int128 v7;
  _BYTE v8[88];
  __int128 v9;
  _QWORD v10[35];

  *(_BYTE *)(a1 + 568) = 1;
  *(_DWORD *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v7 = _Q0;
  *(_QWORD *)v8 = 0xBFF0000000000000;
  v10[15] = 0;
  LODWORD(v10[16]) = 0;
  memset(&v10[10], 0, 34);
  memset(&v10[17], 0, 75);
  memset(&v10[27], 0, 56);
  memset(&v8[8], 0, 80);
  memset(v10, 0, 78);
  v9 = 0u;
  v10[34] = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v8[64];
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v8[48];
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v8[32];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v8[16];
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)&v8[80]);
  memcpy((void *)(a1 + 272), v10, 0x118uLL);
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 736) = v7;
  *(_WORD *)(a1 + 752) = 256;
  *(_DWORD *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  *(_WORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 780) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 840) = 0;
  if (SHIBYTE(v9) < 0)
    operator delete(*(void **)&v8[80]);
}

void sub_101100D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101100D40(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(a2 + 229);
  v3 = *(_QWORD *)(a2 + 8);
  if (*(unsigned __int8 *)(result + 816) != v2 || *(double *)(result + 832) == 0.0)
  {
    *(_QWORD *)(result + 832) = v3;
    *(_BYTE *)(result + 816) = v2;
  }
  *(_QWORD *)(result + 824) = v3;
  return result;
}

uint64_t sub_101100D70(uint64_t a1, uint64_t *a2)
{
  double v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v17[2];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  if (*(_BYTE *)(a1 + 840))
  {
    *a2 = 0x4066800000000000;
    return 1;
  }
  if (*(_BYTE *)(a1 + 776))
  {
    if (!*(_BYTE *)(a1 + 808) || (v5 = *(double *)(a1 + 792), v5 > 15.0) && v5 > *(double *)(a1 + 800) * 0.5)
    {
      *a2 = 0x4066800000000000;
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
        v6 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v7 = *(unsigned __int8 *)(a1 + 776);
          v8 = *(_QWORD *)(a1 + 792);
          v9 = *(_QWORD *)(a1 + 800);
          v10 = *a2;
          *(_DWORD *)buf = 67240960;
          v25 = v7;
          v26 = 2050;
          v27 = v8;
          v28 = 2050;
          v29 = v9;
          v30 = 2050;
          v31 = v10;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,holdCourseEngaged,%{public}d,fabsCourseDiffWithPriorSnap,%{public}.1lf,rawCourseUnc,%{public}.1lf,newCourseUnc,%{public}.1f", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
          v11 = *(unsigned __int8 *)(a1 + 776);
          v12 = *(_QWORD *)(a1 + 792);
          v13 = *(_QWORD *)(a1 + 800);
          v14 = *a2;
          v17[0] = 67240960;
          v17[1] = v11;
          v18 = 2050;
          v19 = v12;
          v20 = 2050;
          v21 = v13;
          v22 = 2050;
          v23 = v14;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,holdCourseEngaged,%{public}d,fabsCourseDiffWithPriorSnap,%{public}.1lf,rawCourseUnc,%{public}.1lf,newCourseUnc,%{public}.1f", v17, 38);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::shouldOverrideCourseUnc(double &)", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
      }
      return 1;
    }
  }
  return 0;
}

void sub_101100FDC(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = *(double *)(a2 + 104);
  if (v3 < 0.0)
    goto LABEL_2;
  v4 = *(double *)(a1 + 224);
  if (v4 < 0.0 || vabdd_f64(*(double *)(a2 + 8), *(double *)(a1 + 128)) >= 2.2)
    goto LABEL_2;
  v5 = fmod(v3 - v4, 360.0);
  if (v5 < 0.0)
    v5 = v5 + 360.0;
  if (v5 > 180.0)
    v5 = v5 + -360.0;
  v6 = fabs(v5);
  if (*(_BYTE *)(a1 + 752))
  {
    if (v6 >= 8.0)
      return;
LABEL_2:
    *(_BYTE *)(a1 + 752) = 0;
    return;
  }
  if (v6 > 14.0)
    *(_BYTE *)(a1 + 752) = 1;
}

double sub_1011010A8(long double a1)
{
  double v1;

  v1 = fmod(a1, 360.0);
  if (v1 < 0.0)
    v1 = v1 + 360.0;
  if (v1 > 180.0)
    v1 = v1 + -360.0;
  return fabs(v1);
}

uint64_t sub_1011010FC(uint64_t result, double a2, double a3)
{
  *(double *)(result + 848) = a2;
  *(double *)(result + 856) = a3;
  return result;
}

void sub_101101108(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v18;
  double v19;
  float v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v39;
  uint64_t v40;
  float v41;
  float v42;
  double v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int v53;
  BOOL v54;
  int v56;
  double v57;
  double v58;
  double v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  double v66;
  int v67;
  double v68;
  _BOOL4 v70;
  int v71;
  int v72;
  double v73;
  NSObject *v74;
  double v75;
  int v76;
  int v77;
  double v78;
  NSObject *v79;
  double v80;
  char v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  int v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  char *v96;
  int v97;
  uint64_t v98;
  const char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  char *v104;
  double v105;
  const char *v106;
  char *v107;
  const char *v108;
  char *v109;
  const char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE v120[32];
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  double v124;
  __int16 v125;
  int v126;
  __int16 v127;
  double v128;
  _BYTE buf[32];
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  double v133;
  __int16 v134;
  int v135;
  __int16 v136;
  double v137;

  v4 = *(double *)(a2 + 8);
  v5 = *(double *)(a1 + 128);
  v6 = (double *)(a1 + 608);
  v7 = sub_10011E634((double *)(a1 + 608), *(double *)(a1 + 176), *(double *)(a1 + 184), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 72));
  *(_BYTE *)(a1 + 840) = 0;
  v8 = *(double *)(a2 + 192);
  if (v8 > 179.0)
    *(_BYTE *)(a1 + 840) = 1;
  v9 = *(double *)(a2 + 104);
  if (v8 > 0.0 || v9 < 0.0)
  {
    v10 = *(double *)(a2 + 192);
  }
  else
  {
    v10 = sub_1005170B4(*(double *)(a2 + 96));
    *(double *)(a2 + 192) = v10;
    v9 = *(double *)(a2 + 104);
  }
  v11 = vabdd_f64(v4, v5);
  if (v9 < 0.0 && v10 > 0.0 && *(double *)(a2 + 96) < 0.001 && v11 < 2.2)
  {
    v12 = *(double *)(a1 + 224);
    if (v12 >= 0.0)
    {
      v13 = *(double *)(a1 + 312);
      if (v13 > 0.0 && v13 < 90.0)
      {
        *(double *)(a2 + 104) = v12;
        v9 = v12;
      }
    }
  }
  if (v9 >= 0.0 && *(_BYTE *)(a1 + 840))
  {
    if (*(_BYTE *)(a1 + 652))
    {
      v9 = *(double *)(a1 + 424);
      *(double *)(a2 + 104) = v9;
      v10 = 29.9;
    }
    else if (v11 >= 2.2
           || (v9 = *(double *)(a1 + 224), v9 < 0.0)
           || (v14 = *(double *)(a1 + 312), v14 <= 0.0)
           || v14 >= 90.0)
    {
      *(_QWORD *)(a2 + 104) = 0xBFF0000000000000;
      v10 = -1.0;
      v9 = -1.0;
    }
    else
    {
      *(double *)(a2 + 104) = v9;
      if (v14 >= 29.9)
        v10 = v14;
      else
        v10 = 29.9;
    }
    *(double *)(a2 + 192) = v10;
    *(double *)(a1 + 848) = v9;
    *(double *)(a1 + 856) = v10;
  }
  v15 = *(double *)(a2 + 96);
  v16 = 12.0;
  if (v10 < 12.0 && (v10 > 0.0 ? (_NF = v15 < 2.0) : (_NF = 0), _NF)
    || ((v16 = 6.5, v10 > 0.0) ? (v18 = v10 < 6.5) : (v18 = 0), v18))
  {
    *(double *)(a2 + 192) = v16;
    v10 = v16;
  }
  v19 = v4 - v5;
  if (v9 >= 0.0 && v10 > 0.0 && v10 < 30.0)
  {
    v22 = *(double *)(a1 + 224);
    if (v22 >= 0.0 && v19 != 0.0)
    {
      v23 = fmod(v9 - v22, 360.0);
      if (v23 < 0.0)
        v23 = v23 + 360.0;
      if (v23 > 180.0)
        v23 = v23 + -360.0;
      if (fabs(v23 / v19) > 45.0)
      {
        *(_QWORD *)(a2 + 192) = 0x403E000000000000;
        v10 = 30.0;
      }
    }
  }
  v20 = v7;
  if (!*(_BYTE *)(a1 + 776))
  {
    if (*(_BYTE *)(a1 + 384))
    {
      if (v19 != 0.0 && v11 < 1.4 && v9 >= 0.0 && v15 < 5.0 && v20 < 5.0)
      {
        v24 = *(double *)(a1 + 224);
        if (v24 >= 0.0)
        {
          v25 = *(double *)(a1 + 312);
          if (v25 > 0.0 && v25 <= 29.9)
          {
            v26 = fmod(v9 - v24, 360.0);
            if (v26 < 0.0)
              v26 = v26 + 360.0;
            if (v26 > 180.0)
              v26 = v26 + -360.0;
            v27 = fabs(v26 / v19);
            if (v27 > 135.0)
            {
              if (*(_BYTE *)(a1 + 96))
              {
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
                v28 = qword_1022A00D8;
                if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                {
                  v29 = *(_QWORD *)(a2 + 8);
                  v30 = *(_QWORD *)(a1 + 224);
                  v32 = *(_QWORD *)(a2 + 96);
                  v31 = *(_QWORD *)(a2 + 104);
                  *(_DWORD *)buf = 134350080;
                  *(_QWORD *)&buf[4] = v29;
                  *(_WORD *)&buf[12] = 2050;
                  *(_QWORD *)&buf[14] = v31;
                  *(_WORD *)&buf[22] = 2050;
                  *(_QWORD *)&buf[24] = v30;
                  v130 = 2050;
                  v131 = v32;
                  v132 = 2050;
                  v133 = v27;
                  _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,high course rate,course,%{public}.1lf,priorCourse,%{public}.1lf,speed,%{public}.1lf,fabsCourseRate,%{public}.1lf", buf, 0x34u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
                  v112 = *(_QWORD *)(a2 + 8);
                  v113 = *(_QWORD *)(a1 + 224);
                  v115 = *(_QWORD *)(a2 + 96);
                  v114 = *(_QWORD *)(a2 + 104);
                  *(_DWORD *)v120 = 134350080;
                  *(_QWORD *)&v120[4] = v112;
                  *(_WORD *)&v120[12] = 2050;
                  *(_QWORD *)&v120[14] = v114;
                  *(_WORD *)&v120[22] = 2050;
                  *(_QWORD *)&v120[24] = v113;
                  v121 = 2050;
                  v122 = v115;
                  v123 = 2050;
                  v124 = v27;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,high course rate,course,%{public}.1lf,priorCourse,%{public}.1lf,speed,%{public}.1lf,fabsCourseRate,%{public}.1lf", v120, 52);
                  v117 = (char *)v116;
                  sub_100512490("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v116);
                  if (v117 != buf)
                    free(v117);
                }
              }
              v9 = *(double *)(a1 + 224);
              *(double *)(a2 + 104) = v9;
              v10 = *(double *)(a1 + 312);
              *(double *)(a2 + 192) = v10;
              *(double *)(a1 + 848) = v9;
              *(double *)(a1 + 856) = v10;
            }
          }
        }
      }
    }
  }
  if (v9 >= 0.0)
  {
    v21 = *(double *)(a2 + 96);
    if (v10 <= 0.0 || v10 >= 20.0 || v21 <= 5.0)
    {
      v33 = *(double *)(a1 + 736);
      if (v33 >= 0.0)
      {
        v34 = fmod(v9 - v33, 360.0);
        if (v34 < 0.0)
          v34 = v34 + 360.0;
        if (v34 > 180.0)
          v34 = v34 + -360.0;
        if (fabs(v34) < 30.0 && v21 < 5.0)
        {
          v39 = *(double *)(a1 + 744);
          if (v39 < v10)
            *(double *)(a2 + 192) = v39;
        }
        else
        {
          __asm { FMOV            V0.2D, #-1.0 }
          *(_OWORD *)(a1 + 736) = _Q0;
        }
      }
    }
    else
    {
      *(double *)(a1 + 736) = v9;
      *(double *)(a1 + 744) = v10;
    }
  }
  sub_101100FDC(a1, a2);
  if (!*(_BYTE *)(a1 + 652) || v11 > 4.9)
  {
    *(_WORD *)(a1 + 776) = 0;
    *(_DWORD *)(a1 + 780) = 0;
    *(_BYTE *)(a1 + 784) = 0;
    *(_QWORD *)(a1 + 800) = 0;
    *(_QWORD *)(a1 + 792) = 0;
    *(_BYTE *)(a1 + 808) = 0;
    return;
  }
  v41 = sub_101102460(v40, *(_DWORD *)(a1 + 780), *(unsigned __int8 *)(a1 + 777));
  if (v41 >= 11.1000001)
    v42 = v41;
  else
    v42 = 11.1;
  *(_QWORD *)buf = 0;
  v119 = 0;
  *(_QWORD *)v120 = 0;
  sub_10011E780(v6, (double *)v120, (double *)buf, (double *)&v119, *(double *)(a1 + 408), *(double *)(a1 + 416), *(double *)(a2 + 72), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 72));
  v43 = *(double *)(a1 + 424);
  v44 = *(double *)v120 * *(double *)v120 + *(double *)buf * *(double *)buf;
  v45 = sqrtf(v44);
  v46 = *(double *)buf;
  v47 = *(double *)v120;
  v48 = atan2f(v46, v47);
  v49 = v43 * -0.0174532925;
  v50 = sinf(v48 + v49) * v45;
  v51 = fabsf(v50);
  v52 = (float)(v42 * 0.5) + 7.5;
  if (*(_BYTE *)(a1 + 777) && v51 < v52)
    goto LABEL_106;
  v53 = *(_DWORD *)(a1 + 760);
  if (v53 == 1)
  {
    v54 = v50 <= (float)-v52;
    v52 = 7.5;
  }
  else
  {
    if (v53 != 2)
      goto LABEL_105;
    v54 = v50 <= -7.5;
  }
  if (!v54 && v50 < v52)
    goto LABEL_106;
LABEL_105:
  if (v51 < (float)((float)(v42 * 0.5) * 0.5))
  {
LABEL_106:
    v56 = 1;
    goto LABEL_107;
  }
  v56 = 0;
LABEL_107:
  v57 = *(double *)(a2 + 104);
  v58 = 0.0;
  if (v57 >= 0.0)
  {
    v59 = fmod(v57 - v43, 360.0);
    if (v59 < 0.0)
      v59 = v59 + 360.0;
    if (v59 > 180.0)
      v59 = v59 + -360.0;
    v58 = fabs(v59);
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
    v60 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v61 = *(_QWORD *)(a2 + 192);
      v62 = *(_QWORD *)(a1 + 424);
      v64 = *(_QWORD *)(a2 + 96);
      v63 = *(_QWORD *)(a2 + 104);
      *(_DWORD *)buf = 134350592;
      *(_QWORD *)&buf[4] = v63;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v61;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = v62;
      v130 = 2050;
      v131 = v64;
      v132 = 2050;
      v133 = v50;
      v134 = 1026;
      v135 = v56;
      v136 = 2050;
      v137 = v42;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLMM,course,%{public}.1lf,courseUnc,%{public}.1lf,lastSnapCourse,%{public}.1lf,speed,%{public}.1lf,acrossTrack,%{public}.1f,onRoad,%{public}d,widthUsed,%{public}.1lf", buf, 0x44u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
      v91 = *(_QWORD *)(a2 + 192);
      v92 = *(_QWORD *)(a1 + 424);
      v94 = *(_QWORD *)(a2 + 96);
      v93 = *(_QWORD *)(a2 + 104);
      *(_DWORD *)v120 = 134350592;
      *(_QWORD *)&v120[4] = v93;
      *(_WORD *)&v120[12] = 2050;
      *(_QWORD *)&v120[14] = v91;
      *(_WORD *)&v120[22] = 2050;
      *(_QWORD *)&v120[24] = v92;
      v121 = 2050;
      v122 = v94;
      v123 = 2050;
      v124 = v50;
      v125 = 1026;
      v126 = v56;
      v127 = 2050;
      v128 = v42;
      LODWORD(v118) = 68;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,course,%{public}.1lf,courseUnc,%{public}.1lf,lastSnapCourse,%{public}.1lf,speed,%{public}.1lf,acrossTrack,%{public}.1f,onRoad,%{public}d,widthUsed,%{public}.1lf", v120, v118);
      v96 = (char *)v95;
      sub_100512490("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v95);
      if (v96 != buf)
        free(v96);
    }
  }
  if (*(_BYTE *)(a2 + 228))
  {
    v65 = 1;
  }
  else
  {
    v66 = *(double *)(a2 + 96);
    v65 = v66 >= 0.0 && v66 < 0.35;
  }
  v67 = sub_10075CD10();
  v68 = *(double *)(a2 + 96);
  if (v67 && *(double *)(a2 + 184) > 0.0 && v68 >= 0.0 && v65 && v68 < 0.002)
  {
    v70 = v11 >= 1.1 || *(_BYTE *)(a2 + 228) != 0;
    v65 = v20 <= 0.7 || v70;
  }
  if (v11 >= 3.0)
    v71 = (v58 > 135.0) & ~v65;
  else
    v71 = 0;
  if (v58 > 30.0)
    v72 = v56;
  else
    v72 = 0;
  if (v72 != 1
    || (v71 & 1) != 0
    || *(_BYTE *)(a2 + 229)
    || *(_BYTE *)(a1 + 816)
    || (v73 = *(double *)(a1 + 824) - *(double *)(a1 + 832), v73 < 0.0)
    || v73 >= 30.0)
  {
    if (*(_BYTE *)(a1 + 776))
    {
      if (v68 > 3.0 || ((v56 | v65) ^ 1 | v71) == 1)
      {
        *(_WORD *)(a1 + 776) = 0;
        *(_DWORD *)(a1 + 780) = 0;
        *(_BYTE *)(a1 + 784) = 0;
        *(_QWORD *)(a1 + 800) = 0;
        *(_QWORD *)(a1 + 792) = 0;
        v76 = 1;
        *(_BYTE *)(a1 + 808) = 0;
        goto LABEL_166;
      }
    }
    else
    {
      v76 = 1;
      if (!v56 || v68 >= 1.5 && v20 >= 1.5)
      {
LABEL_166:
        if (*(double *)(a2 + 192) >= 30.0)
          v77 = v65;
        else
          v77 = 0;
        if (v77 == 1)
        {
          *(_BYTE *)(a1 + 776) = 1;
        }
        else
        {
          if (!*(_BYTE *)(a2 + 228))
            v76 = 0;
          if (v76 == 1)
          {
            v78 = *(double *)(a2 + 96);
            if (v78 < 0.0 || v78 < 0.35)
            {
              if (*(_BYTE *)(a1 + 384))
              {
                if (v11 < 2.2 && v58 > 30.0)
                {
                  *(_BYTE *)(a1 + 776) = 1;
                  if (*(_BYTE *)(a1 + 96))
                  {
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
                    v79 = qword_1022A00D8;
                    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 134349056;
                      *(double *)&buf[4] = v58;
                      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,engaged,large course diff when static,fabsCourseDiffWithPriorSnap,%{public}.1lf", buf, 0xCu);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A00D0 != -1)
                        dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
                      *(_DWORD *)v120 = 134349056;
                      *(double *)&v120[4] = v58;
                      LODWORD(v118) = 12;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,holdCourse,engaged,large course diff when static,fabsCourseDiffWithPriorSnap,%{public}.1lf", v120, v118);
                      v109 = (char *)v108;
                      sub_100512490("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v108);
                      if (v109 != buf)
                        free(v109);
                    }
                  }
                }
              }
            }
          }
        }
        if (sub_10075CD10())
        {
          if (!*(_BYTE *)(a1 + 776) && v11 < 1.1 && *(double *)(a2 + 184) > 0.0)
          {
            v80 = *(double *)(a2 + 96);
            if (v80 >= 0.0 && v80 < 5.0 && v20 < 5.0)
            {
              v81 = *(double *)(a2 + 104) < 0.0 ? 1 : v71;
              if ((v81 & 1) == 0 && v58 >= 135.0)
              {
                if (*(_BYTE *)(a1 + 96))
                {
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
                  v82 = qword_1022A00D8;
                  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349056;
                    *(double *)&buf[4] = v58;
                    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,engaged,large course diff at slow speed within one second,fabsCourseDiffWithPriorSnap,%{public}.1lf", buf, 0xCu);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
                    *(_DWORD *)v120 = 134349056;
                    *(double *)&v120[4] = v58;
                    LODWORD(v118) = 12;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,holdCourse,engaged,large course diff at slow speed within one second,fabsCourseDiffWithPriorSnap,%{public}.1lf", v120, v118);
                    v111 = (char *)v110;
                    sub_100512490("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v110);
                    if (v111 != buf)
                      free(v111);
                  }
                }
                v83 = *(_QWORD *)(a1 + 224);
                *(_QWORD *)(a2 + 104) = v83;
                v84 = *(_QWORD *)(a1 + 312);
                *(_QWORD *)(a2 + 192) = v84;
                *(_QWORD *)(a1 + 848) = v83;
                *(_QWORD *)(a1 + 856) = v84;
              }
            }
          }
        }
        goto LABEL_204;
      }
      *(_BYTE *)(a1 + 776) = 1;
    }
    v76 = 0;
    goto LABEL_166;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
    v74 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v75 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v75;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "CLMM,detected course swing after a recent dismount,intervalSinceDismount,%{public}.1lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
      v105 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
      *(_DWORD *)v120 = 134349056;
      *(double *)&v120[4] = v105;
      LODWORD(v118) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,detected course swing after a recent dismount,intervalSinceDismount,%{public}.1lf", v120, v118);
      v107 = (char *)v106;
      sub_100512490("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v106);
      if (v107 != buf)
        free(v107);
    }
  }
  *(_BYTE *)(a1 + 776) = 1;
LABEL_204:
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
    v85 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v86 = *(unsigned __int8 *)(a1 + 776);
      v87 = *(_QWORD *)(a2 + 96);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v86;
      *(_WORD *)&buf[8] = 2050;
      *(_QWORD *)&buf[10] = v87;
      *(_WORD *)&buf[18] = 2050;
      *(double *)&buf[20] = v20;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,engaged,%{public}d,speed,%{public}.1lf,distance,%{public}.1lf", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
      v97 = *(unsigned __int8 *)(a1 + 776);
      v98 = *(_QWORD *)(a2 + 96);
      *(_DWORD *)v120 = 67240704;
      *(_DWORD *)&v120[4] = v97;
      *(_WORD *)&v120[8] = 2050;
      *(_QWORD *)&v120[10] = v98;
      *(_WORD *)&v120[18] = 2050;
      *(double *)&v120[20] = v20;
      LODWORD(v118) = 28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,holdCourse,engaged,%{public}d,speed,%{public}.1lf,distance,%{public}.1lf", v120, v118);
      v100 = (char *)v99;
      sub_100512490("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v99);
      if (v100 != buf)
        free(v100);
    }
  }
  if (*(_BYTE *)(a1 + 776))
  {
    *(_BYTE *)(a1 + 808) = *(double *)(a2 + 104) >= 0.0;
    *(double *)(a1 + 792) = v58;
    *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
    *(_QWORD *)(a2 + 192) = 0x403DE66666666666;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
      v88 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v89 = *(_QWORD *)(a2 + 104);
        v90 = *(_QWORD *)(a2 + 192);
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)&buf[4] = v89;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v90;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&buf[24] = v58;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,using prior snap,course,%{public}.1lf,courseUnc,%{public}.1lf,fabsCourseDiff,%{public}.1lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
        v101 = *(_QWORD *)(a2 + 104);
        v102 = *(_QWORD *)(a2 + 192);
        *(_DWORD *)v120 = 134349568;
        *(_QWORD *)&v120[4] = v101;
        *(_WORD *)&v120[12] = 2050;
        *(_QWORD *)&v120[14] = v102;
        *(_WORD *)&v120[22] = 2050;
        *(double *)&v120[24] = v58;
        LODWORD(v118) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,holdCourse,using prior snap,course,%{public}.1lf,courseUnc,%{public}.1lf,fabsCourseDiff,%{public}.1lf", v120, v118);
        v104 = (char *)v103;
        sub_100512490("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v103);
        if (v104 != buf)
          free(v104);
      }
    }
  }
}

float sub_101102460(uint64_t a1, unsigned int a2, int a3)
{
  float result;
  float *v4;

  result = 1.0;
  if ((a2 & 0xFFFFFFFE) != 8)
  {
    result = 7.4;
    if (a3)
      result = 5.55;
    if (a2 <= 7)
    {
      v4 = (float *)&unk_101C42130;
      if (a3)
        v4 = (float *)&unk_101C42110;
      return v4[a2];
    }
  }
  return result;
}

void sub_1011024B0(uint64_t a1, uint64_t a2)
{
  sub_100583BE8(a1 + 656, a2, *(unsigned __int8 *)(a1 + 752));
}

void sub_1011024C0(uint64_t a1, double *a2, double *a3, double *a4, double *a5, float *a6, double *a7, double *a8, char a9)
{
  double v17;
  double v18;
  double v19;
  float v20;
  double v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  __float2 v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  double v34;
  double v35;
  int v36;
  float v37;
  float v38;
  float v39;
  __float2 v40;

  v17 = *a3;
  v18 = *a2;
  if (*a3 != 0.0 || v18 != 0.0)
  {
    if ((a9 & 1) != 0)
      v20 = 80.0;
    else
      v20 = sub_101102460(a1, *(_DWORD *)(*(_QWORD *)a6 + 20), *(unsigned __int8 *)(*(_QWORD *)a6 + 16));
    v21 = a6[6];
    v22 = v17 * v17 + v18 * v18;
    v23 = sqrtf(v22);
    v24 = v18;
    v25 = v17;
    v26 = atan2f(v24, v25);
    v27 = v21 * 0.0174532925;
    v28 = __sincosf_stret(v26 - v27);
    v29 = v23 * v28.__cosval;
    v30 = v23 * v28.__sinval;
    if (!*(_BYTE *)(a1 + 753))
      goto LABEL_25;
    v31 = v20 * 0.5;
    v32 = fabsf(v30);
    if (*(_BYTE *)(*(_QWORD *)a6 + 16))
    {
      if (v32 < v31)
        goto LABEL_10;
      v37 = -v31;
      if (v30 < 0.0)
        v37 = v20 * 0.5;
      goto LABEL_23;
    }
    v35 = *(double *)(a1 + 768);
    if (v35 == 0.0 || vabdd_f64(a7[1], v35) > 120.0)
    {
      v36 = sub_1011DF880(a7[7], a7[8]);
      *(_DWORD *)(a1 + 760) = v36;
      *(double *)(a1 + 768) = a7[1];
      if (v36)
        goto LABEL_17;
    }
    else
    {
      v36 = *(_DWORD *)(a1 + 760);
      if (v36)
      {
LABEL_17:
        if (v36 != 2 || v30 <= 0.0)
        {
          if (v30 >= 0.0)
            goto LABEL_24;
          if (v32 >= v31)
          {
            *a8 = v31;
            v30 = v31 + v30;
            goto LABEL_24;
          }
          v34 = v32;
          goto LABEL_13;
        }
        if (v30 >= v31)
        {
          *a8 = (float)-v31;
          v30 = v30 - v31;
          goto LABEL_24;
        }
        v33 = -v32;
LABEL_12:
        v34 = v33;
LABEL_13:
        *a8 = v34;
        v30 = 0.0;
LABEL_24:
        v38 = sqrtf((float)(v29 * v29) + (float)(v30 * v30));
        v39 = atan2f(v30, v29);
        v40 = __sincosf_stret(v39 + v27);
        *a3 = (float)(v38 * v40.__cosval);
        *a2 = (float)(v38 * v40.__sinval);
LABEL_25:
        *a4 = v29;
        v19 = v30;
        goto LABEL_26;
      }
    }
    v37 = v20 * 0.25;
    if (v32 < (float)(v20 * 0.25))
    {
LABEL_10:
      v33 = -v32;
      if (v30 < 0.0)
        v33 = v32;
      goto LABEL_12;
    }
    if (v30 >= 0.0)
      v37 = -v37;
LABEL_23:
    *a8 = v37;
    v30 = v30 + v37;
    goto LABEL_24;
  }
  *a4 = 0.0;
  v19 = 0.0;
LABEL_26:
  *a5 = v19;
}

BOOL sub_10110271C(uint64_t a1, uint64_t a2, int a3)
{
  double v6;
  double v7;
  int v8;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  double v15;
  int v17;
  NSObject *v18;
  int v19;
  double v20;
  double v21;
  NSObject *v23;
  int v24;
  _OWORD *v25;
  double v26;
  double v27;
  double v28;
  int v30;
  double v31;
  int v32;
  NSObject *v33;
  char v34;
  NSObject *v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double v43;
  double v44;
  double v45;
  NSObject *v46;
  int v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  NSObject *v53;
  int v54;
  int v55;
  double v56;
  NSObject *v57;
  uint64_t v58;
  _BOOL4 v59;
  NSObject *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  NSObject *v68;
  int v69;
  int v70;
  const char *v71;
  char *v72;
  int v73;
  const char *v74;
  char *v75;
  int v76;
  const char *v77;
  char *v78;
  int v79;
  const char *v80;
  char *v81;
  const char *v82;
  char *v83;
  int v84;
  const char *v85;
  char *v86;
  const char *v87;
  char *v88;
  int v89;
  const char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  double v98;
  double v99;
  __int16 v100;
  double v101;
  double v102;
  unsigned __int8 v103;
  _BYTE v104[22];
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  int v108;
  _BYTE buf[22];
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  int v113;

  v103 = 0;
  v6 = *(double *)(a2 + 232);
  v7 = fabs(*(double *)(a2 + 240));
  v101 = fabs(*(double *)(a1 + 360));
  v102 = v7;
  v8 = (int)v6;
  if (v7 >= 25.0 && a3 == 0)
  {
    v10 = 0;
    v11 = 0;
    v12 = 1;
    switch(v8)
    {
      case 0:
      case 1:
      case 2:
LABEL_9:
        v10 = 0;
        v11 = -1;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        break;
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      case 11:
      case 12:
LABEL_10:
        v12 = 2;
        goto LABEL_12;
      case 13:
      case 14:
      case 15:
      case 16:
LABEL_7:
        v12 = 3;
        goto LABEL_12;
      case 17:
      case 18:
      case 19:
      case 20:
LABEL_8:
        v12 = 4;
        goto LABEL_12;
      default:
LABEL_11:
        v12 = 10;
LABEL_12:
        v10 = 1;
        v103 = 1;
        v11 = v12;
        break;
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 1;
    switch(v8)
    {
      case 0:
      case 1:
      case 2:
        goto LABEL_9;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        break;
      case 13:
        goto LABEL_12;
      case 14:
        goto LABEL_10;
      case 15:
      case 16:
        goto LABEL_7;
      case 17:
      case 18:
      case 19:
      case 20:
        goto LABEL_8;
      default:
        goto LABEL_11;
    }
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
    v13 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_DWORD *)(a1 + 648);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v14 + v11;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,varFactorCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
      v73 = *(_DWORD *)(a1 + 648);
      *(_DWORD *)v104 = 67240448;
      *(_DWORD *)&v104[4] = v73;
      *(_WORD *)&v104[8] = 1026;
      *(_DWORD *)&v104[10] = v73 + v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,varFactorCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", v104, 14);
      v75 = (char *)v74;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v74);
      if (v75 != buf)
        free(v75);
    }
  }
  *(_DWORD *)(a1 + 648) = (*(_DWORD *)(a1 + 648) + v11) & ~((*(_DWORD *)(a1 + 648) + v11) >> 31);
  v100 = 0;
  sub_10130AAB0(a2, (BOOL *)&v100 + 1, &v100);
  if (HIBYTE(v100))
  {
    if ((_BYTE)v100)
    {
      v15 = *(double *)(a2 + 96);
      if (v15 > 0.0 || !*(_BYTE *)(a2 + 228))
      {
        if (a3)
        {
          if (v7 <= 67.5)
            goto LABEL_52;
          if (*(double *)(a2 + 192) >= 20.0 && v15 <= 8.33333333)
            v17 = 4;
          else
            v17 = 6;
          goto LABEL_45;
        }
        if (v15 > 8.33333333 || *(double *)(a2 + 192) < 20.0)
        {
          if (v7 > 67.5)
          {
            v17 = 18;
LABEL_45:
            v103 = 1;
            if (*(_BYTE *)(a1 + 96))
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
              v18 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                v19 = *(_DWORD *)(a1 + 648);
                *(_DWORD *)buf = 67240448;
                *(_DWORD *)&buf[4] = v19;
                *(_WORD *)&buf[8] = 1026;
                *(_DWORD *)&buf[10] = v19 + v17;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0xEu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
                v84 = *(_DWORD *)(a1 + 648);
                *(_DWORD *)v104 = 67240448;
                *(_DWORD *)&v104[4] = v84;
                *(_WORD *)&v104[8] = 1026;
                *(_DWORD *)&v104[10] = v84 + v17;
                LODWORD(v94) = 14;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", v104, v94);
                v86 = (char *)v85;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v85);
                if (v86 != buf)
                  free(v86);
              }
            }
            *(_DWORD *)(a1 + 648) += v17;
            v10 = 1;
            goto LABEL_52;
          }
          if (v7 > 45.0)
          {
LABEL_40:
            v17 = 6;
            goto LABEL_45;
          }
          if (v7 > 30.0)
          {
LABEL_42:
            v17 = 2;
            goto LABEL_45;
          }
          if (v7 > 20.0)
          {
LABEL_44:
            v17 = 1;
            goto LABEL_45;
          }
        }
        if (v7 <= 67.5)
        {
          if (v7 <= 45.0)
          {
            if (v7 <= 30.0)
              goto LABEL_52;
            goto LABEL_44;
          }
          goto LABEL_42;
        }
        goto LABEL_40;
      }
    }
  }
LABEL_52:
  v20 = sub_10130AA74((double *)a2);
  if (v20 >= 10.0)
    v21 = v20;
  else
    v21 = 10.0;
  v99 = v21;
  if (v21 < 50.0 && v10 == 0)
  {
    if (fabs(*(double *)(a2 + 256)) <= 75.0 && fabs(*(double *)(a2 + 248)) <= 150.0)
    {
      v10 = 0;
    }
    else
    {
      v103 = 1;
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
        v23 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v24 = *(_DWORD *)(a1 + 648);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)&buf[4] = v24;
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)&buf[10] = v24 + 1;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
          v79 = *(_DWORD *)(a1 + 648);
          *(_DWORD *)v104 = 67240448;
          *(_DWORD *)&v104[4] = v79;
          *(_WORD *)&v104[8] = 1026;
          *(_DWORD *)&v104[10] = v79 + 1;
          LODWORD(v94) = 14;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", v104, v94);
          v81 = (char *)v80;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v80);
          if (v81 != buf)
            free(v81);
        }
      }
      ++*(_DWORD *)(a1 + 648);
      v10 = 1;
    }
  }
  v25 = (_OWORD *)(a1 + 120);
  v26 = *(double *)(a1 + 128);
  v27 = *(double *)(a2 + 8) - v26;
  if (v26 == 0.0)
    v27 = 0.0;
  if (v27 >= 0.0)
    v28 = v27;
  else
    v28 = 0.0;
  if (v28 <= 4.9)
  {
    if (v28 <= 75.0)
      goto LABEL_80;
  }
  else if (v28 <= 75.0 && *(_BYTE *)(a2 + 228) != 0)
  {
LABEL_80:
    v30 = *(unsigned __int8 *)(a1 + 384);
    v31 = 10000.0;
    if (*(_BYTE *)(a1 + 384) && *(_BYTE *)(a1 + 481))
    {
      if (*(_BYTE *)(a2 + 361))
        v32 = a3;
      else
        v32 = 1;
      if (v32)
        v31 = 10000.0;
      else
        v31 = 40000.0;
    }
    v98 = *(double *)(a2 + 256) * *(double *)(a2 + 256) + *(double *)(a2 + 248) * *(double *)(a2 + 248);
    if (v98 > v31)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
        v33 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)&buf[4] = sqrt(v31);
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = a3;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,distance > %{public}.0lfm,Intersection,%{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
          *(_DWORD *)v104 = 134349312;
          *(_QWORD *)&v104[4] = sqrt(v31);
          *(_WORD *)&v104[12] = 1026;
          *(_DWORD *)&v104[14] = a3;
          LODWORD(v94) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,stopSnapping,distance > %{public}.0lfm,Intersection,%{public}d", v104, v94);
          v83 = (char *)v82;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v82);
          if (v83 != buf)
            free(v83);
        }
      }
      v34 = 0;
      *(_BYTE *)(a1 + 652) = 0;
      goto LABEL_173;
    }
    if (*(_BYTE *)(a1 + 652))
    {
      v43 = *(double *)(a2 + 232);
      if (!v30)
        goto LABEL_120;
      if (v43 > 13.0)
      {
        v44 = *(double *)(a1 + 216);
        v45 = v44 <= 0.0 ? *(double *)(a2 + 96) : (v44 + *(double *)(a2 + 96)) * 0.5;
        if (sub_10011E634((double *)(a1 + 608), *(double *)(a1 + 272), *(double *)(a1 + 280), *(double *)(a2 + 152), *(double *)(a2 + 160), *(double *)(a2 + 72))- v28 * v45 > 100.0)
        {
          if (*(_BYTE *)(a1 + 96))
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
            v46 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v47 = *(_DWORD *)(a1 + 648);
              *(_DWORD *)buf = 67240448;
              *(_DWORD *)&buf[4] = v47;
              *(_WORD *)&buf[8] = 2050;
              *(double *)&buf[10] = (double)v47 + 18.0;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "CLMM,jumpDistanceCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}.0f", buf, 0x12u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
              v89 = *(_DWORD *)(a1 + 648);
              *(_DWORD *)v104 = 67240448;
              *(_DWORD *)&v104[4] = v89;
              *(_WORD *)&v104[8] = 2050;
              *(double *)&v104[10] = (double)v89 + 18.0;
              LODWORD(v94) = 18;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,jumpDistanceCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}.0f", v104, v94);
              v91 = (char *)v90;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v90);
              if (v91 != buf)
                free(v91);
            }
          }
          *(_DWORD *)(a1 + 648) += 18;
          v10 = 1;
          v103 = 1;
        }
      }
      if (*(_BYTE *)(a1 + 652))
      {
        v43 = *(double *)(a2 + 232);
LABEL_120:
        if (v43 <= 70.0)
        {
          if (*(int *)(a1 + 648) < 18)
          {
            if (!*(_BYTE *)(a2 + 265) || (v56 = v20 * 3.5, fabs(*(double *)(a2 + 256)) <= v56))
            {
              if (v43 < 6.5 && !v10)
              {
                *(_DWORD *)(a1 + 648) = 0;
                if (*(_BYTE *)(a1 + 96))
                {
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
                  v68 = qword_1022A00D8;
                  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                  {
                    v69 = *(_DWORD *)(a1 + 648);
                    *(_DWORD *)buf = 67240192;
                    *(_DWORD *)&buf[4] = v69;
                    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "CLMM,reseting offRoadCount,%{public}d", buf, 8u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
                    v70 = *(_DWORD *)(a1 + 648);
                    *(_DWORD *)v104 = 67240192;
                    *(_DWORD *)&v104[4] = v70;
                    LODWORD(v94) = 8;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,reseting offRoadCount,%{public}d", v104, v94);
                    v72 = (char *)v71;
                    sub_100512490("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v71);
                    if (v72 != buf)
                      free(v72);
                  }
                }
              }
              goto LABEL_166;
            }
            if (!*(_BYTE *)(a1 + 96))
              goto LABEL_155;
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
            v57 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v58 = *(_QWORD *)(a2 + 256);
              *(_DWORD *)buf = 134349312;
              *(_QWORD *)&buf[4] = v58;
              *(_WORD *)&buf[12] = 2050;
              *(double *)&buf[14] = v56;
              _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,isAmbiguous,1,acrossTrack,%{public}.1lf,acrossTrackThreshold,%{public}.1lf", buf, 0x16u);
            }
            if (!sub_1001BFF7C(115, 2))
            {
LABEL_155:
              *(_BYTE *)(a1 + 652) = 0;
LABEL_166:
              if (*(_BYTE *)(a1 + 841))
              {
                v34 = *(_BYTE *)(a1 + 652);
                if (v34 && !*(_BYTE *)(a2 + 265) && fabs(*(double *)(a2 + 256)) <= 10.0)
                  v34 = 1;
                else
                  *(_BYTE *)(a1 + 841) = 0;
              }
              else
              {
                *(_QWORD *)buf = 0x4079000000000000;
                *(_QWORD *)v104 = 0x3FE0000000000000;
                *(_BYTE *)(a1 + 841) = sub_101103D7C(a1, a2, &v98, (double *)buf, (double *)v104, (_BYTE *)&v100 + 1, &v100, &v99, &v102, &v101, &v103);
                v34 = *(_BYTE *)(a1 + 652);
              }
LABEL_173:
              v61 = *(_OWORD *)a2;
              v62 = *(_OWORD *)(a2 + 16);
              v63 = *(_OWORD *)(a2 + 48);
              *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 32);
              *(_OWORD *)(a1 + 168) = v63;
              *v25 = v61;
              *(_OWORD *)(a1 + 136) = v62;
              v64 = *(_OWORD *)(a2 + 64);
              v65 = *(_OWORD *)(a2 + 80);
              v66 = *(_OWORD *)(a2 + 112);
              *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 96);
              *(_OWORD *)(a1 + 232) = v66;
              *(_OWORD *)(a1 + 184) = v64;
              *(_OWORD *)(a1 + 200) = v65;
              std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 128));
              memcpy((void *)(a1 + 272), (const void *)(a2 + 152), 0x118uLL);
              *(_BYTE *)(a1 + 384) = v34;
              return *(_BYTE *)(a1 + 652) != 0;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
            v92 = *(_QWORD *)(a2 + 256);
            *(_DWORD *)v104 = 134349312;
            *(_QWORD *)&v104[4] = v92;
            *(_WORD *)&v104[12] = 2050;
            *(double *)&v104[14] = v56;
            LODWORD(v94) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,stopSnapping,isAmbiguous,1,acrossTrack,%{public}.1lf,acrossTrackThreshold,%{public}.1lf", v104, v94);
          }
          else
          {
            if (!*(_BYTE *)(a1 + 96))
              goto LABEL_155;
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
            v53 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v54 = *(_DWORD *)(a1 + 648);
              *(_DWORD *)buf = 67240448;
              *(_DWORD *)&buf[4] = v54;
              *(_WORD *)&buf[8] = 2050;
              *(_QWORD *)&buf[10] = 0x4032000000000000;
              _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,offRoadCount,%{public}d,threshold,%{public}.0f", buf, 0x12u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_155;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
            v55 = *(_DWORD *)(a1 + 648);
            *(_DWORD *)v104 = 67240448;
            *(_DWORD *)&v104[4] = v55;
            *(_WORD *)&v104[8] = 2050;
            *(_QWORD *)&v104[10] = 0x4032000000000000;
            LODWORD(v94) = 18;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,stopSnapping,offRoadCount,%{public}d,threshold,%{public}.0f", v104, v94);
          }
        }
        else
        {
          if (!*(_BYTE *)(a1 + 96))
            goto LABEL_155;
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
          v48 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            v49 = *(_QWORD *)(a2 + 232);
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)&buf[4] = v49;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = 0x4051800000000000;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,varFactor,%{public}.1lf,threshold,%{public}.1lf", buf, 0x16u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_155;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
          v50 = *(_QWORD *)(a2 + 232);
          *(_DWORD *)v104 = 134349312;
          *(_QWORD *)&v104[4] = v50;
          *(_WORD *)&v104[12] = 2050;
          *(_QWORD *)&v104[14] = 0x4051800000000000;
          LODWORD(v94) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,stopSnapping,varFactor,%{public}.1lf,threshold,%{public}.1lf", v104, v94);
        }
        v93 = (char *)v51;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v51);
        if (v93 != buf)
          free(v93);
        goto LABEL_155;
      }
    }
    *(_QWORD *)v104 = 0x4079000000000000;
    v97 = 0x4034000000000000;
    if (*(_BYTE *)(a2 + 348))
    {
      if (v20 > 7.5)
        goto LABEL_158;
      v52 = 0x401E000000000000;
    }
    else if (*(_BYTE *)(a1 + 600) || v21 >= 30.0)
    {
      *(_QWORD *)v104 = 0x4093240000000000;
      v52 = 0x4041800000000000;
    }
    else
    {
      if (v20 > 7.5)
        goto LABEL_158;
      v52 = 0x402B000000000000;
    }
    v97 = v52;
LABEL_158:
    v59 = sub_101103D7C(a1, a2, &v98, (double *)v104, (double *)&v97, (_BYTE *)&v100 + 1, &v100, &v99, &v102, &v101, &v103);
    *(_BYTE *)(a1 + 652) = v59;
    if (v59)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
        v60 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLMM,startSnapping", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
          v96 = 0;
          LODWORD(v95) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,startSnapping", &v96, v95);
          v88 = (char *)v87;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v87);
          if (v88 != buf)
            free(v88);
        }
      }
      *(_DWORD *)(a1 + 648) = 0;
    }
    goto LABEL_166;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
    v35 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v36 = *(unsigned __int8 *)(a2 + 228);
      *(_DWORD *)buf = 134349824;
      *(double *)&buf[4] = v28;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = 0x401399999999999ALL;
      v110 = 2050;
      v111 = 0x4052C00000000000;
      v112 = 1026;
      v113 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,timeout,dT,%{public}.1lf,threshold1,%{public}.1lf,threshold2,%{public}.1lf,static,%{public}d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
      v76 = *(unsigned __int8 *)(a2 + 228);
      *(_DWORD *)v104 = 134349824;
      *(double *)&v104[4] = v28;
      *(_WORD *)&v104[12] = 2050;
      *(_QWORD *)&v104[14] = 0x401399999999999ALL;
      v105 = 2050;
      v106 = 0x4052C00000000000;
      v107 = 1026;
      v108 = v76;
      LODWORD(v94) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,stopSnapping,timeout,dT,%{public}.1lf,threshold1,%{public}.1lf,threshold2,%{public}.1lf,static,%{public}d", v104, v94);
      v78 = (char *)v77;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v77);
      if (v78 != buf)
        free(v78);
    }
  }
  *(_BYTE *)(a1 + 652) = 0;
  v37 = *(_OWORD *)a2;
  v38 = *(_OWORD *)(a2 + 16);
  v39 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 168) = v39;
  *v25 = v37;
  *(_OWORD *)(a1 + 136) = v38;
  v40 = *(_OWORD *)(a2 + 64);
  v41 = *(_OWORD *)(a2 + 80);
  v42 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 232) = v42;
  *(_OWORD *)(a1 + 184) = v40;
  *(_OWORD *)(a1 + 200) = v41;
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 128));
  memcpy((void *)(a1 + 272), (const void *)(a2 + 152), 0x118uLL);
  *(_BYTE *)(a1 + 384) = 0;
  return *(_BYTE *)(a1 + 652) != 0;
}

BOOL sub_101103D7C(uint64_t a1, uint64_t a2, double *a3, double *a4, double *a5, _BYTE *a6, _BYTE *a7, double *a8, double *a9, double *a10, unsigned __int8 *a11)
{
  _BOOL8 result;
  double v13;
  double v14;
  float v15;
  float v16;

  if (*a11 | *(unsigned __int8 *)(a2 + 265) || *(_BYTE *)(a1 + 385) || *a3 >= *a4)
    return 0;
  result = 0;
  if (fabs(*(double *)(a2 + 256)) >= *a5 || *a8 >= 101.0)
    return result;
  v13 = *(double *)(a2 + 232);
  if (v13 >= 3.0)
    return 0;
  result = 0;
  v14 = *(double *)(a1 + 352);
  if (v14 >= 3.0)
    return result;
  if (*(double *)(a2 + 96) <= 1.67)
    return result;
  result = 0;
  if (*(double *)(a1 + 216) <= 1.67)
    return result;
  if (*(double *)(a2 + 104) < 0.0)
    return result;
  result = 0;
  if (*(double *)(a1 + 224) < 0.0 || *a9 >= 30.0 || *a10 >= 30.0)
    return result;
  if (*a6 && *a7 && *(double *)(a2 + 192) < 20.0)
  {
    if (*a9 < 40.0)
    {
      v15 = *(float *)(a2 + 180);
      v16 = 2.5;
      goto LABEL_21;
    }
    return 0;
  }
  v15 = *(float *)(a2 + 180);
  v16 = 3.0;
LABEL_21:
  if (v15 > v16)
    return 1;
  result = 0;
  if (v13 < 1.0 && v14 < 1.0)
    return v15 > 1.1 || v15 == 0.0;
  return result;
}

double sub_101103EF0(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, _QWORD *a5, _QWORD *a6)
{
  double result;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int v15;
  double v16;
  double v17;
  double v18;

  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  v12 = 0x3FF0000000000000;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  sub_101104010(a1, a2, a3, a4, &v18, &v17, &v16, (uint64_t)v10, 0);
  result = *(double *)v10;
  v9 = v11;
  *a5 = v10[0];
  *a6 = v9;
  return result;
}

void sub_101103F58(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5)
{
  double v5;
  double v6;
  double v7;

  sub_101104010(a1, a2, a3, a4, &v7, &v6, &v5, a5, 0);
}

double sub_101103F88(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, _QWORD *a5, _QWORD *a6, double *a7, double *a8, _QWORD *a9, double *a10, char a11)
{
  uint64_t v13;
  double result;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;

  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v17 = 0x3FF0000000000000;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  sub_101104010(a1, a2, a3, a4, a7, a8, a10, (uint64_t)v15, a11);
  v13 = v16;
  *a5 = v15[0];
  *a6 = v13;
  result = *((double *)&v19 + 1);
  *a9 = *((_QWORD *)&v19 + 1);
  return result;
}

void sub_101104010(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5, double *a6, double *a7, uint64_t a8, char a9)
{
  char v16;
  double *v17;
  double *v18;
  NSObject *v19;
  double v20;
  const char *v21;
  uint8_t *v22;
  double *v23;
  _WORD v25[8];
  uint8_t buf[1632];

  v16 = a9;
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 16) = 0;
  v17 = (double *)(a8 + 40);
  v18 = (double *)(a8 + 32);
  sub_10011E780((double *)(a1 + 608), (double *)(a8 + 40), (double *)(a8 + 32), (double *)(a8 + 48), *(double *)(a3 + 32), *(double *)(a3 + 40), a4[9], a4[7], a4[8], a4[9]);
  if (!*(_QWORD *)a3)
  {
    v23 = a7;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
    v19 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning CLMM, NULL road", buf, 2u);
    }
    a7 = v23;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A1DB0);
      v25[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "#Warning CLMM, NULL road", v25, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLScoredMapMatcher::calculateScoreAndVarFactor(CLMapDataUtil::CovarInvDet &, const struct CLMapGeometry::DistanceQueryResult &, const CLMapCrumb &, double &, double &, double &, CLMapDataUtil::MapMatcherScore &, BOOL)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
      a7 = v23;
      v16 = a9;
    }
  }
  sub_1011024C0(a1, v18, v17, a5, a6, (float *)a3, a4, a7, v16);
  if (*(_BYTE *)(a2 + 40))
  {
    v20 = fmod(a4[13] - *(float *)(a3 + 24), 360.0);
    if (v20 < 0.0)
      v20 = v20 + 360.0;
    if (v20 > 180.0)
      v20 = v20 + -360.0;
    *(double *)(a8 + 56) = fabs(v20);
  }
  sub_1005846E4(a2, a8);
}

uint64_t sub_1011042F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  uint64_t v9;
  double v10;
  __n128 v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  int v19;
  char v20;
  int v21;
  double v22;
  double v23;
  double v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  char v29;
  int v30;
  double v31;
  BOOL v32;
  int v33;
  int v34;
  double v35;
  BOOL v36;
  char v37;
  BOOL v38;
  double v39;
  double v40;
  float v41;
  float v42;
  BOOL v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  double v68[2];

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v57 = v4;
  v58 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *(unsigned __int8 *)(a2 + 229);
  v9 = *(_QWORD *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 816) != v8 || *(double *)(a1 + 832) == 0.0)
  {
    *(_QWORD *)(a1 + 832) = v9;
    *(_BYTE *)(a1 + 816) = v8;
  }
  *(_QWORD *)(a1 + 824) = v9;
  ++*(_DWORD *)(a1 + 100);
  (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v4 + 48))(v4, a2, 450.0);
  v54 = (uint64_t)&v54;
  v55 = &v54;
  v56 = 0;
  v50 = (_QWORD *)(a1 + 552);
  if (*(_QWORD *)(a1 + 552))
  {
    v10 = *(double *)(a2 + 8) - *(double *)(a1 + 592);
    if (v10 <= 5.0
      && ((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, _QWORD, uint64_t, double, double))(*(_QWORD *)v4 + 72))(v4, &v54, v50, *(unsigned __int8 *)(a1 + 568), 1, *(double *)(a1 + 576), v10 * ((*(double *)(a2 + 96) + *(double *)(a1 + 584)) * 0.5)) & 1) == 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      v16 = 0;
      ++*(_DWORD *)(a1 + 108);
      goto LABEL_81;
    }
  }
  sub_101101108(a1, a2);
  v49 = a1 + 656;
  sub_100583BE8(a1 + 656, a2, *(unsigned __int8 *)(a1 + 752));
  v11.n128_u64[0] = *(_QWORD *)(a2 + 80);
  v12 = *(double *)(a2 + 200);
  if (v12 > 0.0)
  {
    v13 = *(double *)(a2 + 208);
    if (v13 > 0.0)
      v11.n128_f64[0] = sqrt(v13 / 2.45 * (v13 / 2.45) + v12 / 2.45 * (v12 / 2.45));
  }
  v14 = v11.n128_f64[0] * 4.0;
  v11.n128_u64[0] = 0x4052C00000000000;
  if (v14 >= 75.0)
  {
    v11.n128_f64[0] = v14;
    if (v14 > 249.9999)
      v11.n128_u64[0] = 0x406F3FFF2E48E8A7;
  }
  v51 = (uint64_t)&v51;
  v52 = &v51;
  v53 = 0;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, __n128))(*(_QWORD *)v4 + 64))(v4, &v51, a2, 1, v11);
  v16 = v15;
  if ((v15 & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    ++*(_DWORD *)(a1 + 108);
    goto LABEL_80;
  }
  v48 = a2;
  v17 = v52;
  if (v52 == &v51)
  {
LABEL_79:
    *(_OWORD *)(v48 + 152) = *(_OWORD *)(v48 + 56);
    *(_QWORD *)(v48 + 168) = *(_QWORD *)(v48 + 104);
    sub_100346F9C(v50);
    ++*(_DWORD *)(a1 + 104);
    goto LABEL_80;
  }
  v47 = v15;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0.0;
  v23 = 0.0;
  v24 = 0.0;
  v25 = &v51;
  do
  {
    if (*(_BYTE *)(v17[2] + 17))
      goto LABEL_65;
    v59 = 0.0;
    v60 = 0;
    v61 = 0;
    v62 = 0x3FF0000000000000;
    v63 = 0u;
    v64 = 0u;
    v65 = 0;
    sub_101104010(a1, v49, (uint64_t)(v17 + 2), (double *)v48, v68, (double *)&v67, (double *)&v66, (uint64_t)&v59, 0);
    v26 = (_QWORD *)*v50;
    if (!*v50)
    {
      v30 = 1;
      v31 = v59;
      goto LABEL_34;
    }
    v27 = *(_QWORD *)v17[2];
    if (*v26 == v27)
      goto LABEL_31;
    v28 = v55;
    if (v55 == &v54)
      goto LABEL_29;
    v29 = 0;
    do
    {
      if (v28[2] == v27 && *((unsigned __int8 *)v28 + 24) == *((unsigned __int8 *)v17 + 36))
        v29 = 1;
      v28 = (uint64_t *)v28[1];
    }
    while (v28 != &v54);
    if ((v29 & 1) != 0)
    {
LABEL_31:
      v30 = 1;
      v31 = v59;
      if (!*((_BYTE *)v17 + 37))
LABEL_32:
        v31 = v31 / 10.0;
    }
    else
    {
LABEL_29:
      v30 = 0;
      v31 = v59 / 500.0;
      if (!*((_BYTE *)v17 + 37))
        goto LABEL_32;
    }
LABEL_34:
    v22 = v22 + v59;
    if (*((_BYTE *)v17 + 37))
      v32 = 1;
    else
      v32 = v26 == 0;
    v33 = v32;
    if (v31 > v23)
      v34 = v30;
    else
      v34 = v21;
    if (v31 > v23)
      v35 = v31;
    else
      v35 = v23;
    if (v31 <= v23)
      v33 = v19;
    if (*((_BYTE *)v17 + 37))
      v36 = 1;
    else
      v36 = v26 == 0;
    v37 = v36;
    v38 = v31 <= v24;
    if (v31 <= v24)
      v21 = v34;
    else
      v25 = v17;
    if (v31 > v24)
      v23 = v24;
    else
      v23 = v35;
    if (v31 > v24)
    {
      v24 = v31;
      v20 = v30;
    }
    if (v38)
      v19 = v33;
    else
      v18 = v37;
LABEL_65:
    v17 = (uint64_t *)v17[1];
  }
  while (v17 != &v51);
  v16 = v47;
  if (v25 == &v51)
    goto LABEL_79;
  sub_1010CE30C(v48, v25 + 2);
  v39 = v24 * 500.0;
  if ((v20 & 1) != 0)
    v39 = v24;
  v40 = v23 * 500.0;
  if ((v21 & 1) != 0)
    v40 = v23;
  if ((v18 & 1) == 0)
    v39 = v39 * 10.0;
  if ((v19 & 1) == 0)
    v40 = v40 * 10.0;
  v41 = v39 / v22;
  v42 = v39 / v40;
  *(float *)(v48 + 176) = v41;
  *(float *)(v48 + 180) = v42;
  sub_100349198(v50, v25 + 2);
  *(_BYTE *)(a1 + 568) = *((_BYTE *)v25 + 36);
  *(_QWORD *)(a1 + 576) = v25[8];
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(v48 + 96);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(v48 + 8);
  v67 = 0;
  v68[0] = 0.0;
  v66 = 0;
  v59 = 0.0;
  v60 = 0;
  v61 = 0;
  v62 = 0x3FF0000000000000;
  v63 = 0u;
  v64 = 0u;
  v65 = 0;
  sub_101104010(a1, v49, (uint64_t)(v25 + 2), (double *)v48, v68, (double *)&v67, (double *)&v66, (uint64_t)&v59, 0);
  *(_OWORD *)(v48 + 288) = *(_OWORD *)(v48 + 152);
  *(_QWORD *)(v48 + 304) = *(_QWORD *)(v48 + 168);
  v43 = sub_10110271C(a1, v48, 0);
  *(_BYTE *)(v48 + 264) = v43;
  if (!v43)
    ++*(_DWORD *)(a1 + 104);
  v5 = v58;
LABEL_80:
  sub_1001A5CBC(&v51);
LABEL_81:
  sub_1011048CC(&v54);
  if (v5)
  {
    v44 = (unint64_t *)&v5->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v16;
}

void sub_101104858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  sub_1001A5CBC((uint64_t *)va);
  sub_1011048CC((uint64_t *)va1);
  sub_100261F44((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1011048A0(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_1011048CC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_100261F44((uint64_t)(v3 + 4));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

float *sub_10110493C(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  unint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  float v13;
  float v14;
  float *result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = sub_101105AA4(a1);
  v6 = v5;
  v8 = v7;
  v9 = 0;
  v10 = (unsigned __int16 *)(a1 + 28);
  v11 = (unsigned __int16 *)(a1 + 1076);
  v12 = (unsigned __int16 *)(a1 + 2124);
  do
  {
    v13 = *(float *)sub_1004784C4(v10, v9);
    v14 = (float)(v6 * *(float *)sub_1004784C4(v11, v9)) + (float)(v13 * v4);
    result = (float *)sub_1004784C4(v12, v9);
    v16 = *(unsigned __int16 *)(a2 + 18);
    v17 = *(unsigned int *)(a2 + 20);
    v18 = *(unsigned __int16 *)(a2 + 16);
    if (v18 + v16 >= v17)
      v19 = *(unsigned int *)(a2 + 20);
    else
      v19 = 0;
    *(float *)(a2 + 24 + 4 * (v18 + v16 - v19)) = v14 + (float)(*result * v8);
    if (v17 <= v16)
    {
      if (v18 + 1 < v17)
        LOWORD(v17) = 0;
      *(_WORD *)(a2 + 16) = v18 + 1 - v17;
    }
    else
    {
      *(_WORD *)(a2 + 18) = v16 + 1;
    }
    *(_BYTE *)a2 = 1;
    ++v9;
  }
  while (v9 != 256);
  return result;
}

float sub_101104A40(uint64_t a1, int a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unsigned __int16 *v10;
  uint64_t v12;

  v5 = *(unsigned __int16 *)(a1 + 18);
  __chkstk_darwin(a1);
  v8 = (char *)&v12 - v7;
  if (v5)
  {
    v9 = 0;
    v10 = (unsigned __int16 *)(v6 + 16);
    do
    {
      *(_DWORD *)&v8[4 * v9] = *(_DWORD *)sub_1004784C4(v10, v9);
      ++v9;
    }
    while (v5 != v9);
  }
  sub_100A409B0(v8, 4uLL, v5, (uint64_t (*)(char *, char *))sub_101105B64);
  return *(float *)&v8[4 * (((int)v5 - 1) * a2 / 100) + 4 * a3];
}

float sub_101104B38(uint64_t a1, float a2)
{
  uint64_t v2;
  unint64_t v4;
  unsigned __int16 *v5;
  float v6;

  v2 = *(unsigned __int16 *)(a1 + 18);
  if (*(_WORD *)(a1 + 18))
  {
    v4 = 0;
    v5 = (unsigned __int16 *)(a1 + 16);
    v6 = 0.0;
    do
      v6 = v6 + vabds_f32(*(float *)sub_1004784C4(v5, v4++), a2);
    while (v2 != v4);
  }
  else
  {
    v6 = 0.0;
  }
  return v6 / (float)v2;
}

void sub_101104BAC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  float v6;
  int v7;
  float v8;
  int v9;
  int32x2_t v10;
  float32x2_t v11;
  float v12;
  int v13;
  float v14;
  int v15;
  int32x2_t v16;
  float v17;
  float32x2_t v18;
  _BYTE v19[2200];
  _DWORD v20[128];
  uint64_t v21;
  int v22;
  uint64_t v23[129];

  sub_1014022D8(v19);
  sub_101104DF0(a1, &v18);
  v6 = sub_100D043B4(*(_DWORD *)(a1 + 8), 0x80uLL, 0.39);
  v7 = sub_100D041E0(v6);
  v8 = sub_100D043B4(*(_DWORD *)(a1 + 8), 0x80uLL, 4.29);
  v9 = sub_100D041E0(v8);
  LOBYTE(v21) = 1;
  v23[0] = 0x10000000000;
  v22 = 1031798784;
  sub_101104E80((unsigned __int16 *)a1, (float *)&v18, (uint64_t)&v21);
  sub_1014022DC((uint64_t)v19, v20, (unsigned __int16 *)v23);
  v17 = sub_100D04400(v7, v9, (uint64_t)v20);
  *(float *)a3 = v17;
  if (a2)
    *(float *)(a3 + 24) = sub_101104A40((uint64_t)&v21, 90, 0);
  v21 = 0x10000000000;
  sub_101104F38((unsigned __int16 *)a1, (float *)&v18, (unsigned __int16 *)&v21);
  sub_1014022DC((uint64_t)v19, v20, (unsigned __int16 *)&v21);
  *(float *)v10.i32 = sub_100D04400(v7, v9, (uint64_t)v20);
  v16 = v10;
  *(_DWORD *)(a3 + 4) = v10.i32[0];
  v21 = 0x10000000000;
  sub_1011050AC((unsigned __int16 *)a1, (float *)&v18, (unsigned __int16 *)&v21);
  sub_1014022DC((uint64_t)v19, v20, (unsigned __int16 *)&v21);
  v11.f32[0] = sub_100D04400(v7, v9, (uint64_t)v20);
  *(_DWORD *)(a3 + 8) = v11.i32[0];
  v11.f32[1] = v17;
  *(int8x8_t *)(a3 + 12) = vand_s8((int8x8_t)vdiv_f32((float32x2_t)vdup_lane_s32(v16, 0), v11), (int8x8_t)vcgtz_f32(v11));
  sub_1014022DC((uint64_t)v19, &v21, (unsigned __int16 *)(a1 + 28));
  v12 = sub_100D043B4(*(_DWORD *)(a1 + 8), 0x80uLL, 0.4);
  v13 = sub_100D041E0(v12);
  v14 = sub_100D043B4(*(_DWORD *)(a1 + 8), 0x80uLL, 50.0);
  v15 = sub_100D041E0(v14);
  *(float *)(a3 + 20) = sub_100D04400(v13, v15, (uint64_t)&v21);
}

float sub_101104DF0(uint64_t a1, float32x2_t *a2)
{
  unint64_t v3;
  __int32 v4;
  float v5;
  float v6;
  int32x2_t v7;
  float32x2_t v9;
  float v10;

  v3 = 0;
  v9.i32[0] = sub_101105AA4(a1);
  v9.i32[1] = v4;
  v10 = v5;
  v6 = 0.0;
  do
  {
    *(float *)v7.i32 = sub_100533668((uint64_t)&v9, v3);
    v6 = v6 + (float)((float)(*(float *)v7.i32 * 0.25) * (float)(*(float *)v7.i32 * 0.25));
    ++v3;
  }
  while (v3 != 3);
  *(float *)v7.i32 = sqrtf(v6) * 4.0;
  *a2 = vdiv_f32(v9, (float32x2_t)vdup_lane_s32(v7, 0));
  *(float *)v7.i32 = v10 / *(float *)v7.i32;
  a2[1].i32[0] = v7.i32[0];
  return *(float *)v7.i32;
}

void sub_101104E80(unsigned __int16 *a1, float *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = 0;
  v7 = a3 + 24;
  do
  {
    v8 = sub_101105B08(a1, v6);
    v11 = (float)((float)(v9 * a2[2]) + (float)(v10 * a2[1])) + (float)(v8 * *a2);
    v12 = *(unsigned __int16 *)(a3 + 18);
    v13 = *(unsigned int *)(a3 + 20);
    v14 = *(unsigned __int16 *)(a3 + 16);
    if (v14 + v12 >= v13)
      v15 = *(unsigned int *)(a3 + 20);
    else
      v15 = 0;
    *(float *)(v7 + 4 * (v14 + v12 - v15)) = v11;
    if (v13 <= v12)
    {
      if (v14 + 1 < v13)
        LOWORD(v13) = 0;
      *(_WORD *)(a3 + 16) = v14 + 1 - v13;
    }
    else
    {
      *(_WORD *)(a3 + 18) = v12 + 1;
    }
    *(_BYTE *)a3 = 1;
    ++v6;
  }
  while (v6 != 256);
}

float *sub_101104F38(unsigned __int16 *a1, float *a2, unsigned __int16 *a3)
{
  unsigned __int8 v5;
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *result;
  float *v27;
  int v28;
  float v29;
  float v30;
  float v31;

  v5 = atomic_load((unsigned __int8 *)&qword_10230C840);
  if ((v5 & 1) == 0)
  {
    v27 = a2;
    v28 = __cxa_guard_acquire(&qword_10230C840);
    a2 = v27;
    if (v28)
    {
      qword_10230C830 = 1065353216;
      dword_10230C838 = 0;
      __cxa_guard_release(&qword_10230C840);
      a2 = v27;
    }
  }
  v6 = 0;
  v8 = a2[1];
  v7 = a2[2];
  v9 = (float)(v8 * *(float *)&dword_10230C838) - (float)(v7 * *((float *)&qword_10230C830 + 1));
  v10 = (float)(v7 * *(float *)&qword_10230C830) - (float)(*a2 * *(float *)&dword_10230C838);
  v11 = (float)(*a2 * *((float *)&qword_10230C830 + 1)) - (float)(v8 * *(float *)&qword_10230C830);
  v12 = (float)(v10 * v7) - (float)(v11 * v8);
  v13 = (float)(v11 * *a2) - (float)(v9 * v7);
  v14 = (float)(v9 * v8) - (float)(v10 * *a2);
  v29 = v12;
  v30 = v13;
  v31 = v14;
  v15 = 0.0;
  do
  {
    v16 = sub_100533668((uint64_t)&v29, v6);
    v15 = v15 + (float)((float)(v16 * 0.25) * (float)(v16 * 0.25));
    ++v6;
  }
  while (v6 != 3);
  v17 = 0;
  v18 = sqrtf(v15) * 4.0;
  v19 = v29 / v18;
  v20 = v30 / v18;
  v21 = v31 / v18;
  do
  {
    v22 = sub_101105B08(a1, v17);
    v25 = (float)((float)(v21 * v23) + (float)(v24 * v20)) + (float)(v22 * v19);
    result = (float *)sub_1004784C4(a3, v17);
    *result = v25;
    ++v17;
  }
  while (v17 != 256);
  return result;
}

float *sub_1011050AC(unsigned __int16 *a1, float *a2, unsigned __int16 *a3)
{
  unsigned __int8 v5;
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float *result;
  float *v23;
  int v24;
  float v25;
  float v26;
  float v27;

  v5 = atomic_load((unsigned __int8 *)&qword_10230C858);
  if ((v5 & 1) == 0)
  {
    v23 = a2;
    v24 = __cxa_guard_acquire(&qword_10230C858);
    a2 = v23;
    if (v24)
    {
      qword_10230C848 = 1065353216;
      dword_10230C850 = 0;
      __cxa_guard_release(&qword_10230C858);
      a2 = v23;
    }
  }
  v6 = 0;
  v8 = a2[1];
  v7 = a2[2];
  v9 = (float)(v7 * *(float *)&qword_10230C848) - (float)(*a2 * *(float *)&dword_10230C850);
  v10 = (float)(*a2 * *((float *)&qword_10230C848 + 1)) - (float)(v8 * *(float *)&qword_10230C848);
  v25 = (float)(v8 * *(float *)&dword_10230C850) - (float)(v7 * *((float *)&qword_10230C848 + 1));
  v26 = v9;
  v27 = v10;
  v11 = 0.0;
  do
  {
    v12 = sub_100533668((uint64_t)&v25, v6);
    v11 = v11 + (float)((float)(v12 * 0.25) * (float)(v12 * 0.25));
    ++v6;
  }
  while (v6 != 3);
  v13 = 0;
  v14 = sqrtf(v11) * 4.0;
  v15 = v25 / v14;
  v16 = v26 / v14;
  v17 = v27 / v14;
  do
  {
    v18 = sub_101105B08(a1, v13);
    v21 = (float)((float)(v17 * v19) + (float)(v20 * v16)) + (float)(v18 * v15);
    result = (float *)sub_1004784C4(a3, v13);
    *result = v21;
    ++v13;
  }
  while (v13 != 256);
  return result;
}

double sub_101105208(unsigned __int16 *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  double result;
  __int128 v10;
  __int128 v11;
  _BYTE v12[28];
  _BYTE v13[12];
  int v14;
  uint64_t v15;

  v13[0] = 1;
  v15 = 0x10000000000;
  v14 = 1031798784;
  sub_10110493C((uint64_t)a1, (uint64_t)v13);
  sub_101105300((uint64_t)v13, a1, (uint64_t)&v10);
  v8 = v11;
  *a2 = v10;
  a2[1] = v8;
  a2[2] = *(_OWORD *)v12;
  *(_OWORD *)((char *)a2 + 44) = *(_OWORD *)&v12[12];
  sub_1011056AC((uint64_t)v13, (uint64_t)&v10);
  *(_OWORD *)a4 = v10;
  *(_DWORD *)(a4 + 16) = v11;
  sub_101105774(a1, (uint64_t)&v10);
  result = *(double *)&v10;
  *(_OWORD *)a3 = v10;
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

void sub_101105300(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t i;
  uint64_t v12;
  BOOL v13;
  float *v14;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v27;
  uint64_t j;
  float v29;
  uint64_t k;
  float v31;
  uint64_t m;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  float v45;
  _BYTE v46[2200];
  float v47[128];
  _DWORD v48[128];
  _DWORD v49[128];
  float v50[128];

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 44) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_DWORD *)(a3 + 8) = -1;
  *(_DWORD *)(a3 + 16) = -1;
  v6 = sub_101105964((uint64_t)a2);
  v8 = v7;
  v10 = v9;
  *(float *)a3 = sqrtf((float)(v9 * v9) + (float)((float)(v6 * v6) + (float)(v7 * v7)));
  sub_1014022D8(v46);
  sub_1014022DC((uint64_t)v46, v50, a2 + 14);
  sub_1014022DC((uint64_t)v46, v49, a2 + 538);
  sub_1014022DC((uint64_t)v46, v48, a2 + 1062);
  for (i = 0; i != 128; i += 4)
    *(float32x4_t *)&v47[i] = vsqrtq_f32(vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)&v50[i], *(float32x4_t *)&v50[i]), vmulq_f32(*(float32x4_t *)&v49[i], *(float32x4_t *)&v49[i])), vmulq_f32(*(float32x4_t *)&v48[i], *(float32x4_t *)&v48[i])));
  v12 = 0;
  v13 = v8 <= v10 || v8 <= v6;
  v14 = (float *)v48;
  if (!v13)
    v14 = (float *)v49;
  if (v6 > v10 && v6 > v8)
    v14 = v50;
  v16 = 0.0;
  do
  {
    v17 = v14[v12];
    if (v17 > v16)
    {
      *(float *)(a3 + 28) = v17;
      *(float *)(a3 + 32) = (float)(int)v12;
      v16 = v17;
    }
    ++v12;
  }
  while (v12 != 128);
  v18 = 0;
  v19 = 0.0;
  v20 = -1;
  v21 = 0.0;
  do
  {
    v22 = v47[v18];
    if (v22 > v21)
    {
      *(float *)(a3 + 4) = v22;
      *(_DWORD *)(a3 + 8) = v18;
      v20 = v18;
      v21 = v22;
    }
    v19 = v19 + v22;
    ++v18;
  }
  while (v18 != 128);
  v23 = v19 * 0.0078125;
  *(float *)(a3 + 24) = v23;
  if (v23 != 0.0)
  {
    v24 = v21 / v23;
    v25 = v23 + v21;
    if (v24 > 2.0 && v25 > 0.125)
    {
      *(float *)(a3 + 12) = v21;
      *(_DWORD *)(a3 + 16) = v20;
    }
  }
  v27 = 0.0;
  for (j = 2; j != 15; ++j)
    v27 = v27 + v47[j];
  *(float *)(a3 + 52) = v27;
  v29 = 0.0;
  for (k = 46; k != 128; ++k)
    v29 = v29 + v47[k];
  v31 = 0.0;
  *(float *)(a3 + 56) = (float)((float)(v47[0] + 0.0) + v47[1]) / v29;
  for (m = 46; m != 128; ++m)
    v31 = v31 + v47[m];
  v33 = 0;
  *(float *)(a3 + 20) = v31;
  v34 = 0.0;
  do
  {
    v35 = v50[v33];
    if (v35 > v34)
    {
      *(float *)(a3 + 48) = v35;
      v34 = v35;
    }
    v36 = *(float *)&v49[v33];
    if (v36 > v34)
    {
      *(float *)(a3 + 48) = v36;
      v34 = v36;
    }
    v37 = *(float *)&v48[v33];
    if (v37 > v34)
    {
      *(float *)(a3 + 48) = v37;
      v34 = v37;
    }
    ++v33;
  }
  while (v33 != 128);
  v50[0] = 0.0;
  sub_1014022DC((uint64_t)v46, v50, (unsigned __int16 *)(a1 + 16));
  v38 = 0;
  v39 = 0.0;
  do
  {
    v40 = v50[v38];
    if (v40 > v34)
    {
      *(float *)(a3 + 48) = v40;
      v34 = v40;
    }
    if (v40 > v39)
    {
      *(float *)(a3 + 40) = (float)(int)v38;
      *(float *)(a3 + 44) = v40;
      v39 = v40;
    }
    ++v38;
  }
  while (v38 != 128);
  v41 = 0;
  v42 = 0.0;
  do
    v42 = v42 + v50[v41++];
  while (v41 != 128);
  v43 = 0;
  v44 = 0.0;
  do
  {
    v45 = v50[v43];
    if (v45 != 0.0)
      v44 = v44 - (float)(logf(v45 / v42) * (float)(v45 / v42));
    ++v43;
  }
  while (v43 != 128);
  *(float *)(a3 + 36) = v44;
}

void sub_1011056AC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  float v5;
  float v6;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 4) = sub_101104A40(a1, 10, 0);
  v4 = sub_101104A40(a1, 50, 0);
  *(float *)(a2 + 8) = v4;
  if (*(_BYTE *)a1)
  {
    sub_1004786E8(a1);
    v5 = *(float *)(a1 + 4);
    if (*(_BYTE *)a1)
      sub_1004786E8(a1);
  }
  else
  {
    v5 = *(float *)(a1 + 4);
  }
  v6 = sqrtf(*(float *)(a1 + 8)) / v5;
  if (v5 == 0.0)
    v6 = 1000.0;
  *(float *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)a2 = sub_1011059CC(a1, v4);
  *(float *)(a2 + 16) = sub_101104B38(a1, v4);
}

void sub_101105774(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  _BYTE v27[2200];
  float v28[128];

  v4 = 0;
  v5 = a1 + 14;
  v6 = a1 + 538;
  v7 = a1 + 1062;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  do
  {
    v11 = (float *)sub_1004784C4(v5, v4);
    v8 = v8 + (float)(*v11 * *v11);
    v12 = (float *)sub_1004784C4(v6, v4);
    v9 = v9 + (float)(*v12 * *v12);
    v13 = (float *)sub_1004784C4(v7, v4);
    v10 = v10 + (float)(*v13 * *v13);
    ++v4;
  }
  while (v4 != 256);
  if (v8 <= v9 || v8 <= v10)
  {
    if (v9 <= v8 || v9 <= v10)
      v16 = (uint64_t)(a1 + 1054);
    else
      v16 = (uint64_t)(a1 + 530);
  }
  else
  {
    v16 = (uint64_t)(a1 + 6);
  }
  *(float *)a2 = sub_101104A40(v16, 25, 0);
  v17 = sub_101104A40(v16, 90, 0);
  if (v9 <= v10)
    v18 = v10;
  else
    v18 = v9;
  if (v8 > v18)
    v18 = v8;
  *(float *)(a2 + 4) = v17;
  *(float *)(a2 + 8) = v18;
  sub_1014022D8(v27);
  sub_1014022DC((uint64_t)v27, v28, (unsigned __int16 *)(v16 + 16));
  v19 = 0;
  *(_DWORD *)(a2 + 12) = 0;
  v20 = 0.0;
  do
  {
    v21 = v28[v19];
    if (v21 > v20)
    {
      *(float *)(a2 + 12) = (float)(int)v19;
      v20 = v21;
    }
    ++v19;
  }
  while (v19 != 128);
  v22 = 0;
  v23 = 0.0;
  do
    v23 = v23 + v28[v22++];
  while (v22 != 128);
  v24 = 0;
  v25 = 0.0;
  do
  {
    v26 = v28[v24];
    if (v26 != 0.0)
      v25 = v25 - (float)(logf(v26 / v23) * (float)(v26 / v23));
    ++v24;
  }
  while (v24 != 128);
  *(float *)(a2 + 16) = v25;
}

float sub_101105964(uint64_t a1)
{
  uint64_t v2;
  int v3;
  float v4;

  v3 = *(unsigned __int8 *)(a1 + 12);
  v2 = a1 + 12;
  if (v3)
    sub_1004786E8(v2);
  v4 = *(float *)(a1 + 20);
  if (*(_BYTE *)(a1 + 1060))
    sub_1004786E8(a1 + 1060);
  if (*(_BYTE *)(a1 + 2108))
    sub_1004786E8(a1 + 2108);
  return sqrtf(v4);
}

float sub_1011059CC(uint64_t a1, float a2)
{
  unint64_t v2;
  float v3;
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  float *v8;

  v2 = *(unsigned __int16 *)(a1 + 18);
  v3 = 0.0;
  if (v2 >= 2)
  {
    v5 = 0;
    v6 = (v2 - 1);
    v7 = (unsigned __int16 *)(a1 + 16);
    do
    {
      if (*(float *)sub_1004784C4(v7, v5) > a2 && *(float *)sub_1004784C4(v7, v5 + 1) <= a2)
      {
        v3 = v3 + 1.0;
        ++v5;
      }
      else
      {
        v8 = (float *)sub_1004784C4(v7, v5++);
        if (*v8 <= a2 && *(float *)sub_1004784C4(v7, v5) > a2)
          v3 = v3 + 1.0;
      }
    }
    while (v5 != v6);
  }
  return v3;
}

float sub_101105AA4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  float v4;

  v3 = *(unsigned __int8 *)(a1 + 12);
  v2 = a1 + 12;
  if (v3)
    sub_1004786E8(v2);
  v4 = *(float *)(a1 + 16);
  if (*(_BYTE *)(a1 + 1060))
    sub_1004786E8(a1 + 1060);
  if (*(_BYTE *)(a1 + 2108))
    sub_1004786E8(a1 + 2108);
  return v4;
}

float sub_101105B08(unsigned __int16 *a1, unint64_t a2)
{
  float v4;

  v4 = *(float *)sub_1004784C4(a1 + 14, a2);
  sub_1004784C4(a1 + 538, a2);
  sub_1004784C4(a1 + 1062, a2);
  return v4;
}

BOOL sub_101105B64(float *a1, float *a2)
{
  return *a1 > *a2;
}

uint64_t sub_101105B78(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  CLClientManagerAuthorizationContext *v17;
  CLClientManagerAuthorizationContext *v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  const char *v24;
  _QWORD v26[5];
  _QWORD v27[5];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;

  *(_QWORD *)a1 = off_1021A1DE0;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = a2;
  *(_QWORD *)(a1 + 56) = off_102141E98;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  v12 = operator new(0x20uLL);
  v12[2] = 0;
  *v12 = off_102141ED0;
  v12[1] = 0;
  *(_QWORD *)(a1 + 72) = v12;
  *((_DWORD *)v12 + 6) = 31337;
  *(_QWORD *)(a1 + 64) = v12 + 3;
  *(_BYTE *)(a1 + 80) = 0;
  v13 = mach_continuous_time();
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a3;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = -1;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v14 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonIdentifiableClient(ctor)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v14, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
  v15 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 68289794;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2082;
    v34 = "activity";
    v35 = 2114;
    v36 = v16;
    v37 = 2050;
    v38 = a1;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDaemonIdentifiableClient(ctor)\", \"event\":%{public, location:escape_only}s, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x30u);
  }
  *(_BYTE *)(a1 + 80) = objc_msgSend(objc_msgSend(a4, "objectForKey:", CFSTR("SDKAtLeast2024")), "BOOLValue");
  sub_1007BBC40(*(id **)(a1 + 24), *(_QWORD *)(a1 + 16));
  v17 = sub_1000B9630(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16), &xmmword_101C17478);
  *(_QWORD *)(a1 + 40) = v17;
  v18 = v17;
  v19 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
  *(_QWORD *)(a1 + 168) = v19;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_101105FC8;
  v27[3] = &unk_10212ECA0;
  v27[4] = a1;
  objc_msgSend(v19, "setHandler:", v27);
  v20 = *(_QWORD *)(a1 + 120);
  if (v20)
  {
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1011060FC;
    v26[3] = &unk_10213D510;
    v26[4] = a1;
    CLConnection::setDefaultMessageHandler(v20, v26);
    CLConnection::start(*(CLConnection **)(a1 + 120));
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
    v21 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2114;
      v34 = v22;
      v35 = 2050;
      v36 = a1;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDaemonIdentifiableClient(ctor) #dic butterfly is created\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
    }
    v23 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v24 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2114;
      v34 = v24;
      v35 = 2050;
      v36 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLDaemonIdentifiableClient(ctor) #dic butterfly is created", "{\"msg%{public}.0s\":\"CLDaemonIdentifiableClient(ctor) #dic butterfly is created\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  sub_1007D6064(*(_QWORD *)(a1 + 24), *(void **)(a1 + 16), 0, 0, 0, *(_BYTE *)(a1 + 80) == 0, 1);
  os_activity_scope_leave(&state);
  return a1;
}

void sub_101105F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  _QWORD *v19;

  sub_100090A0C(v19);
  _Unwind_Resume(a1);
}

void sub_101105FC8(uint64_t a1)
{
  sub_101105FD0(*(_QWORD *)(a1 + 32));
}

void sub_101105FD0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v5[0] = 68289538;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2114;
    v9 = v3;
    v10 = 2050;
    v11 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#dic procesAssertion timer fired\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)v5, 0x26u);
  }
  objc_msgSend(*(id *)(a1 + 168), "setNextFireDelay:", 1.79769313e308);
  v4 = *(void **)(a1 + 160);
  if (v4)
  {
    objc_msgSend(v4, "invalidate");

    *(_QWORD *)(a1 + 160) = 0;
  }
}

BOOL sub_1011060EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) == 0;
}

void sub_1011060FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_101106188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10110619C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  *(_QWORD *)a1 = off_1021A1DE0;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v7[0] = 68289538;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = v3;
    v12 = 2050;
    v13 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"~CLDaemonIdentifiableClient(dtor)\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)v7, 0x26u);
  }
  sub_1007D6064(*(_QWORD *)(a1 + 24), *(void **)(a1 + 16), 0, 0, 0, *(_BYTE *)(a1 + 80) == 0, 0);
  v4 = *(void **)(a1 + 168);
  if (v4)
  {
    objc_msgSend(v4, "invalidate");

    *(_QWORD *)(a1 + 168) = 0;
  }
  v5 = *(void **)(a1 + 160);
  if (v5)
  {
    objc_msgSend(v5, "invalidate");

    *(_QWORD *)(a1 + 160) = 0;
  }

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_1010D4928((void ***)(a1 + 136), 0);
  sub_100090A0C((_QWORD *)(a1 + 56));
  return a1;
}

void sub_101106320(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_101106330(uint64_t a1)
{
  sub_10110619C(a1);
  operator delete();
}

NSMutableDictionary *sub_101106354(CLConnection **a1)
{
  NSMutableDictionary *v2;
  uint64_t v3;
  CLConnection *v4;
  audit_token_t v6;

  v2 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", (*((uint64_t (**)(CLConnection **))*a1 + 5))(a1));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", -[CLConnection clientKey](a1[2], "clientKey"), CFSTR("ClientKeyPath"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", a1[5]), CFSTR("AuthContext"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (*((uint64_t (**)(CLConnection **))*a1 + 3))(a1)), CFSTR("Type"));
  v3 = (*((uint64_t (**)(CLConnection **))*a1 + 5))(a1);
  if (v3)
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v3, CFSTR("RehydrationPayload"));
  v4 = a1[15];
  if (v4)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", CLConnection::getRemotePid(v4)), CFSTR("PID"));
    CLConnection::getAuditToken(a1[15]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", -[CLClientKeyPath clientKey](sub_1001A4450(&v6), "clientKey"), CFSTR("NaturalConnectedIdentity"));
  }
  return v2;
}

void sub_1011064A0(id *a1, void *a2)
{
  unsigned __int8 v4;
  id v5;

  v4 = objc_msgSend(a1[5], "isEqual:", a2);
  v5 = a2;

  a1[5] = a2;
  if ((v4 & 1) == 0)
    (*((void (**)(id *))*a1 + 7))(a1);
}

void sub_101106508(uint64_t a1)
{
  sub_1007C3E9C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16), 4);
  *(_BYTE *)(a1 + 152) = 0;
}

void sub_101106538(uint64_t a1, double a2)
{
  id v4;
  uint64_t *p_shared_weak_owners;
  unint64_t v6;
  _QWORD v7[6];
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  sub_10052D218(a1 + 56, &v9);
  v4 = objc_msgSend(*(id *)(a1 + 32), "silo");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  v7[2] = sub_10110661C;
  v7[3] = &unk_10217B348;
  v7[4] = a1;
  v7[5] = v9;
  v8 = v10;
  if (v10)
  {
    p_shared_weak_owners = &v10->__shared_weak_owners_;
    do
      v6 = __ldxr((unint64_t *)p_shared_weak_owners);
    while (__stxr(v6 + 1, (unint64_t *)p_shared_weak_owners));
  }
  objc_msgSend(v4, "afterInterval:async:", v7, a2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

void sub_1011065F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  uint64_t v16;
  std::__shared_weak_count *v18;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  v18 = *(std::__shared_weak_count **)(v16 - 40);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(exception_object);
}

void sub_10110661C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8) != -1)
      sub_1007CA05C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 32));
  }
}

id sub_101106640(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  NSArray *v7;
  id v8;
  uint64_t *v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  RBSDomainAttribute *v28;

  if (!*(_QWORD *)(a1 + 160))
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = (uint64_t *)*a2;
    v28 = +[RBSDomainAttribute attributeWithDomain:name:](RBSDomainAttribute, "attributeWithDomain:name:", CFSTR("com.apple.locationd"), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
    v7 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v28, 1);
    v8 = objc_alloc((Class)RBSAssertion);
    if (*((char *)a3 + 23) >= 0)
      v9 = a3;
    else
      v9 = (uint64_t *)*a3;
    v10 = objc_msgSend(v8, "initWithExplanation:target:attributes:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9), +[RBSTarget targetWithPid:](RBSTarget, "targetWithPid:", CLConnection::getRemotePid(*(CLConnection **)(a1 + 120))), v7);
    *(_QWORD *)(a1 + 160) = v10;
    v17 = 0;
    if (objc_msgSend(v10, "acquireWithError:", &v17))
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
      v11 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 68289538;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 2114;
        v23 = v12;
        v24 = 2050;
        v25 = a1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic processAssertion acquired\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A1E80);
      v13 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v14 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 68289794;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 2114;
        v23 = v14;
        v24 = 2050;
        v25 = a1;
        v26 = 2114;
        v27 = v17;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dic couldn't initialize process assertion\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"error\":%{public, location:escape_only}@}", buf, 0x30u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021A1E80);
      }
      v15 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v16 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 68289794;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 2114;
        v23 = v16;
        v24 = 2050;
        v25 = a1;
        v26 = 2114;
        v27 = v17;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic couldn't initialize process assertion", "{\"msg%{public}.0s\":\"#dic couldn't initialize process assertion\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"error\":%{public, location:escape_only}@}", buf, 0x30u);
      }
    }
  }
  return objc_msgSend(*(id *)(a1 + 168), "setNextFireDelay:", 10.0);
}

void sub_101106984(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  char **v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  _BOOL4 v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint8_t buf[8];
  __int16 v41;
  const char *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  _BYTE v46[18];

  if (*(_QWORD *)(a1 + 120))
  {
    if ((objc_msgSend(*(id *)(a1 + 40), "isNonProvisionallyAuthorizedForServiceTypeMask:", a3) & 1) != 0)
    {
      sub_1015A2E04(buf, "Location");
      sub_1015A2E04(__p, "Location subscription");
      sub_101106640(a1, (uint64_t *)buf, (uint64_t *)__p);
      if (v39 < 0)
        operator delete(__p[0]);
      if (SBYTE3(v44) < 0)
        operator delete(*(void **)buf);
      v10 = *(_QWORD *)(a1 + 120);
      v11 = *(std::__shared_weak_count **)(a2 + 8);
      v37 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      CLConnection::sendMessage(v10);
      if (!v37)
        goto LABEL_14;
      v14 = (unint64_t *)&v37->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
        if ((a4 & 1) != 0)
          return;
      }
      else
      {
LABEL_14:
        if ((a4 & 1) != 0)
          return;
      }
      if ((a3 & 0x10) == 0)
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
        v16 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
        {
          v17 = *(_QWORD *)(a1 + 16);
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&buf[4] = 0;
          v41 = 2082;
          v42 = "";
          v43 = 2114;
          v44 = v17;
          v45 = 2050;
          *(_QWORD *)v46 = a1;
          *(_WORD *)&v46[8] = 1026;
          *(_DWORD *)&v46[10] = a3;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"currently location attribution is only supported for ClientServiceLocation - #dic\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"serviceTypeMask\":%{public}d}", buf, 0x2Cu);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
        }
        v18 = qword_1022A01C8;
        if (os_signpost_enabled((os_log_t)qword_1022A01C8))
        {
          v19 = *(_QWORD *)(a1 + 16);
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&buf[4] = 0;
          v41 = 2082;
          v42 = "";
          v43 = 2114;
          v44 = v19;
          v45 = 2050;
          *(_QWORD *)v46 = a1;
          *(_WORD *)&v46[8] = 1026;
          *(_DWORD *)&v46[10] = a3;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "currently location attribution is only supported for ClientServiceLocation - #dic", "{\"msg%{public}.0s\":\"currently location attribution is only supported for ClientServiceLocation - #dic\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"serviceTypeMask\":%{public}d}", buf, 0x2Cu);
        }
        return;
      }
      v28 = *(unsigned __int8 *)(a1 + 152);
      if (!*(_BYTE *)(a1 + 152))
        *(_BYTE *)(a1 + 152) = 1;
      v30 = *(_QWORD *)(a1 + 24);
      v29 = (uint64_t *)(a1 + 24);
      v31 = v29 - 1;
      sub_1001966C4(v30, *(v29 - 1), 4, v28 == 0, a5);
      v32 = *v29;
      v33 = *v31;
      v34 = (_QWORD *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
      v35 = *((char *)v34 + 23);
      if (v35 < 0)
      {
        if (v34[1] != 39)
        {
LABEL_48:
          v36 = 1;
          goto LABEL_49;
        }
        v34 = (_QWORD *)*v34;
      }
      else if (v35 != 39)
      {
        goto LABEL_48;
      }
      v36 = memcmp(v34, "kCLConnectionMessageCompensatedLocation", 0x27uLL) != 0;
LABEL_49:
      sub_10019808C(v32, v33, v36, 1);
      return;
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
    v24 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v25 = *(_QWORD *)(a1 + 16);
      v26 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
      if (*((char *)v26 + 23) >= 0)
        v27 = v26;
      else
        v27 = (uint64_t *)*v26;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v41 = 2082;
      v42 = "";
      v43 = 2114;
      v44 = v25;
      v45 = 2050;
      *(_QWORD *)v46 = a1;
      *(_WORD *)&v46[8] = 2082;
      *(_QWORD *)&v46[10] = v27;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Client not NonProvisionally authorized for message.\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", buf, 0x30u);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
    v20 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_QWORD *)(a1 + 16);
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v41 = 2082;
      v42 = "";
      v43 = 2114;
      v44 = v21;
      v45 = 1026;
      *(_DWORD *)v46 = v22;
      *(_WORD *)&v46[4] = 2050;
      *(_QWORD *)&v46[6] = a1;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic sending message to disconnected client. skip messageSending and performAppLaunch\", \"ClientKeyPath\":%{public, location:escape_only}@, \"dicType\":%{public}d, \"this\":\"%{public}p\"}", buf, 0x2Cu);
    }
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLApplicationLifecycleManager")), "launchApplication:requiringAuthForServiceMask:", objc_msgSend(*(id *)(a1 + 16), "legacyClientKey"), a3);
    if (!*(_QWORD *)(a1 + 96))
      *(_QWORD *)(a1 + 96) = mach_continuous_time();
    v23 = *(char ***)(a1 + 136);
    if (v23)
      sub_10033F68C(v23, (__int128 *)a2);
  }
}

void sub_101106EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_100261F44((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_101106F00(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _BOOL4 v4;
  NSObject *v5;
  uint64_t v6;
  _BOOL4 v7;
  CLConnection *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  _QWORD *v20;
  __int16 v21;
  _BOOL4 v22;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[2];
    v4 = a1[15] == 0;
    v13 = 68289794;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2114;
    v18 = v3;
    v19 = 2050;
    v20 = a1;
    v21 = 1026;
    v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic handleDisconnection\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"isDisconnected\":%{public}hhd}", (uint8_t *)&v13, 0x2Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
  }
  v5 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v6 = a1[2];
    v7 = a1[15] == 0;
    v13 = 68289794;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2114;
    v18 = v6;
    v19 = 2050;
    v20 = a1;
    v21 = 1026;
    v22 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic handleDisconnection", "{\"msg%{public}.0s\":\"#dic handleDisconnection\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"isDisconnected\":%{public}hhd}", (uint8_t *)&v13, 0x2Cu);
  }
  v8 = (CLConnection *)a1[15];
  if (v8)
  {
    CLConnection::deferredDelete(v8);
    a1[15] = 0;
    a1[13] = mach_continuous_time();
  }
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
  {
    sub_101106538((uint64_t)a1, 0.0);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
    v9 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = a1[2];
      v13 = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2114;
      v18 = v10;
      v19 = 2050;
      v20 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic handleDisconnection - destruction deferred - becoming a butterfly\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
    }
    v11 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v12 = a1[2];
      v13 = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2114;
      v18 = v12;
      v19 = 2050;
      v20 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic handleDisconnection - destruction deferred - becoming a butterfly", "{\"msg%{public}.0s\":\"#dic handleDisconnection - destruction deferred - becoming a butterfly\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x26u);
    }
  }
}

uint64_t sub_101107244(uint64_t result)
{
  *(_BYTE *)(result + 48) = 1;
  return result;
}

uint64_t sub_101107250(double a1, double a2)
{
  uint64_t result;
  _BOOL4 v3;

  result = 0;
  if (a2 >= -180.0 && a1 <= 90.0 && a1 >= -90.0 && a2 <= 180.0)
  {
    v3 = fabs(a1) >= 0.0000001;
    return fabs(a2) >= 0.0000001 || v3;
  }
  return result;
}

void sub_1011072B8(uint64_t a1)
{
  id v2;
  uint64_t *p_shared_weak_owners;
  unint64_t v4;
  _QWORD v5[6];
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  objc_msgSend(*(id *)(a1 + 32), "silo");
  *(_QWORD *)(a1 + 112) = mach_continuous_time();
  sub_10052D218(a1 + 56, &v7);
  v2 = objc_msgSend(*(id *)(a1 + 32), "silo");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_1011073A0;
  v5[3] = &unk_10217B348;
  v5[4] = a1;
  v5[5] = v7;
  v6 = v8;
  if (v8)
  {
    p_shared_weak_owners = &v8->__shared_weak_owners_;
    do
      v4 = __ldxr((unint64_t *)p_shared_weak_owners);
    while (__stxr(v4 + 1, (unint64_t *)p_shared_weak_owners));
  }
  objc_msgSend(v2, "afterInterval:async:", v5, 5.0);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_101107374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  uint64_t v16;
  std::__shared_weak_count *v18;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(exception_object);
}

void sub_1011073A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = *(_QWORD *)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_101107408;
  v3[3] = &unk_10212ECA0;
  v3[4] = v1;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8) != -1)
      sub_101107408((uint64_t)v3);
  }
}

void sub_101107408(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  uint64_t v15;
  double v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  _QWORD *v32;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = mach_continuous_time();
  v3 = v1[14];
  if (v3)
  {
    v4 = v2 >= v3;
    v5 = v2 - v3;
    if (v4)
    {
      v16 = sub_100127828(v5);
      if (v16 >= 3.0)
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
        v21 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v22 = v1[2];
          v23 = 68289538;
          v24 = 0;
          v25 = 2082;
          v26 = "";
          v27 = 2114;
          v28 = v22;
          v29 = 2050;
          v30 = *(double *)&v1;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic retirement completed\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v23, 0x26u);
        }
        sub_1007CA05C(v1[3], (unint64_t)v1);
      }
      else
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
        v17 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
        {
          v18 = v1[2];
          v23 = 68289794;
          v24 = 0;
          v25 = 2082;
          v26 = "";
          v27 = 2114;
          v28 = v18;
          v29 = 2050;
          v30 = v16;
          v31 = 2050;
          v32 = v1;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dic retirement tickstamp is too early, skip retirement\", \"ClientKeyPath\":%{public, location:escape_only}@, \"timeDifferenceInSeconds\":\"%{public}.6f\", \"this\":\"%{public}p\"}", (uint8_t *)&v23, 0x30u);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
        }
        v19 = qword_1022A01C8;
        if (os_signpost_enabled((os_log_t)qword_1022A01C8))
        {
          v20 = v1[2];
          v23 = 68289794;
          v24 = 0;
          v25 = 2082;
          v26 = "";
          v27 = 2114;
          v28 = v20;
          v29 = 2050;
          v30 = v16;
          v31 = 2050;
          v32 = v1;
          v10 = "#dic retirement tickstamp is too early, skip retirement";
          v11 = "{\"msg%{public}.0s\":\"#dic retirement tickstamp is too early, skip retirement\", \"ClientKeyPath\":%{pu"
                "blic, location:escape_only}@, \"timeDifferenceInSeconds\":\"%{public}.6f\", \"this\":\"%{public}p\"}";
          v12 = v19;
          v13 = 48;
          goto LABEL_22;
        }
      }
    }
    else
    {
      v1[14] = 0;
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
      v6 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        v7 = v1[2];
        v23 = 68289538;
        v24 = 0;
        v25 = 2082;
        v26 = "";
        v27 = 2114;
        v28 = v7;
        v29 = 2050;
        v30 = *(double *)&v1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dic #error retirement tickstamp should not be greater than 'now'\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v23, 0x26u);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
      }
      v8 = qword_1022A01C8;
      if (os_signpost_enabled((os_log_t)qword_1022A01C8))
      {
        v9 = v1[2];
        v23 = 68289538;
        v24 = 0;
        v25 = 2082;
        v26 = "";
        v27 = 2114;
        v28 = v9;
        v29 = 2050;
        v30 = *(double *)&v1;
        v10 = "#dic #error retirement tickstamp should not be greater than 'now'";
        v11 = "{\"msg%{public}.0s\":\"#dic #error retirement tickstamp should not be greater than 'now'\", \"ClientKeyPat"
              "h\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}";
        v12 = v8;
        v13 = 38;
LABEL_22:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v10, v11, (uint8_t *)&v23, v13);
      }
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
    v14 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v15 = v1[2];
      v23 = 68289538;
      v24 = 0;
      v25 = 2082;
      v26 = "";
      v27 = 2114;
      v28 = v15;
      v29 = 2050;
      v30 = *(double *)&v1;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#dic abandoning retirement because client has already stopped running\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v23, 0x26u);
    }
  }
}

uint64_t sub_10110789C(uint64_t result)
{
  *(_QWORD *)(result + 112) = 0;
  return result;
}

uint64_t sub_1011078A4(uint64_t a1, int a2)
{
  _QWORD v3[5];
  int v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_101107900;
  v3[3] = &unk_10215F390;
  v3[4] = a1;
  v4 = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.daemonidentifiableclient-lifecycle"), v3);
}

NSDictionary *sub_101107900(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  NSObject *v19;
  int v20;
  _QWORD v22[7];
  _QWORD v23[7];
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const __CFString *v29;
  __int16 v30;
  const __CFString *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  uint64_t v43;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = mach_continuous_time();
  v4 = *(_QWORD *)(v2 + 88);
  v5 = -1.0;
  v6 = -1.0;
  if (v3 >= v4)
    v6 = sub_100127828(v3 - v4);
  v7 = *(_QWORD *)(v2 + 104);
  if (v3 >= v7)
  {
    v5 = sub_100127828(v3 - v7);
    v7 = *(_QWORD *)(v2 + 104);
    if (!v7)
    {
      v9 = -1.0;
      goto LABEL_11;
    }
  }
  v8 = *(_QWORD *)(v2 + 96);
  if (v8 <= v7)
  {
    v14 = *(_QWORD *)(v2 + 8);
    v9 = -1.0;
    v13 = v14 - v7;
    if (v14 > v7)
      goto LABEL_9;
LABEL_11:
    v12 = -1.0;
    goto LABEL_12;
  }
  v9 = sub_100127828(v8 - v7);
  v10 = *(_QWORD *)(v2 + 8);
  v11 = *(_QWORD *)(v2 + 96);
  v12 = -1.0;
  v13 = v10 - v11;
  if (v10 > v11)
LABEL_9:
    v12 = sub_100127828(v13);
LABEL_12:
  v15 = (const __CFString *)objc_msgSend(*(id *)(v2 + 16), "clientAnchorWithType");
  if (v15)
    v16 = v15;
  else
    v16 = &stru_1021D8FB8;
  v17 = (const __CFString *)objc_msgSend(*(id *)(v2 + 16), "subIdentityIdWithType");
  if (v17)
    v18 = v17;
  else
    v18 = &stru_1021D8FB8;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A1E80);
  v19 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v20 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 68291074;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    v28 = 2114;
    v29 = v16;
    v30 = 2114;
    v31 = v18;
    v32 = 1026;
    v33 = v20;
    v34 = 2050;
    v35 = v9;
    v36 = 2050;
    v37 = v12;
    v38 = 2050;
    v39 = v5;
    v40 = 2050;
    v41 = v6;
    v42 = 2050;
    v43 = v2;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#dic sending event to coreanalytics\", \"Anchor\":%{public, location:escape_only}@, \"SubIdentity\":%{public, location:escape_only}@, \"DICType\":%{public}d, \"StingDelay\":\"%{public}.6f\", \"EatDelay\":\"%{public}.6f\", \"DisconnectToDeathDelay\":\"%{public}.6f\", \"TotalDuration\":\"%{public}.6f\", \"this\":\"%{public}p\"}", buf, 0x5Eu);
  }
  v23[0] = v16;
  v23[1] = v18;
  v23[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40), CFSTR("Anchor"), CFSTR("SubIdentity"), CFSTR("DICType"));
  v22[3] = CFSTR("StingDelay");
  v23[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v9);
  v22[4] = CFSTR("EatDelay");
  v23[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v12);
  v22[5] = CFSTR("DisconnectToDeathDelay");
  v23[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v5);
  v22[6] = CFSTR("TotalDuration");
  v23[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v6);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 7);
}

uint64_t sub_101107BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 120);
  if (!v2)
    sub_10193F340();
  return CLConnection::isEntitled(v2, a2);
}

uint64_t sub_101107BE4(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  int v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  v4 = 7;
  if (a2 == 7)
    v4 = 1031;
  if (a2 == 9)
    v5 = 2055;
  else
    v5 = v4;
  v6 = (unint64_t)objc_msgSend(*(id *)(a1 + 40), "diagnosticMask") & v5;
  if (sub_100195F08())
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
    v7 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 16);
      v17 = 68289538;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2114;
      v22 = v8;
      v23 = 2050;
      v24 = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#dic failureReason sharing mode enabled\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v17, 0x26u);
    }
    v6 |= 4uLL;
  }
  if ((sub_1007BCED8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16)) & 1) != 0
    || objc_msgSend(*(id *)(a1 + 16), "isAuthLimited"))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
    v9 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 16);
      v17 = 68289538;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2114;
      v22 = v10;
      v23 = 2050;
      v24 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Warning #dic #AutoPrompt System services may not request authorization\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v17, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
    }
    v11 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v12 = *(_QWORD *)(a1 + 16);
      v17 = 68289538;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2114;
      v22 = v12;
      v23 = 2050;
      v24 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Warning #dic #AutoPrompt System services may not request authorization", "{\"msg%{public}.0s\":\"Warning #dic #AutoPrompt System services may not request authorization\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v17, 0x26u);
    }
    v6 |= 1uLL;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "inUseLevelIsAtLeast:", 5))
    v13 = v6;
  else
    v13 = v6 | 0x10;
  if (sub_100240954(*(_QWORD *)(a1 + 24)) && !sub_100247EA0(*(void **)(a1 + 16)))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
    v14 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a1 + 16);
      v17 = 68289538;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2114;
      v22 = v15;
      v23 = 2050;
      v24 = a1;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic #AuthPrompt Authorization request ignored, at lock-screen\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v17, 0x26u);
    }
    v13 |= 4uLL;
  }
  if (a2 == 7
    && objc_msgSend(*(id *)(a1 + 40), "registrationResult") == 4
    && objc_msgSend(*(id *)(a1 + 40), "transientAwareRegistrationResult") == 1)
  {
    return v13 | 4;
  }
  return v13;
}

void sub_101107F88(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  unint64_t v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  NSObject *v19;
  unint64_t v20;
  id v21;
  unsigned int v22;
  NSObject *v23;
  unint64_t v24;
  id v25;
  unsigned int v26;
  NSObject *v27;
  unint64_t v28;
  NSMutableDictionary *v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint8_t v37[72];
  uint8_t buf[4];
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  unint64_t v43;
  __int16 v44;
  id v45;
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  double v51;

  if ((_os_feature_enabled_impl("CoreLocation", "CLAutoPrompt") & 1) != 0)
  {
    if (sub_100240384(*(_QWORD *)(a1 + 24)))
    {
      v6 = sub_1007F05E0(*(_QWORD *)(a1 + 24));
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "currentLatchedAbsoluteTimestamp");
      v8 = v7 - v6;
      if (v8 < 900.0)
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
        v9 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1007BCD78(*(_QWORD *)(a1 + 24));
          v10 = sub_1007BCD78(*(_QWORD *)(a1 + 24));
          v11 = sub_1007BCD90(*(_QWORD *)(a1 + 24));
          v12 = *(_QWORD *)(a1 + 16);
          *(_DWORD *)buf = 68290306;
          v39 = 0;
          v40 = 2082;
          v41 = "";
          v42 = 2050;
          v43 = v10;
          v44 = 2114;
          v45 = v11;
          v46 = 2114;
          v47 = v12;
          v48 = 2050;
          v49 = a1;
          v50 = 2050;
          *(_QWORD *)&v51 = (uint64_t)v8;
          v13 = "{\"msg%{public}.0s\":\"#dic #AutoPrompt ignored inflight request found\", \"existingRequestType\":%{publ"
                "ic, location:CLClientManager_Type::AuthorizationRequestType}lld, \"existingClientKey\":%{public, locatio"
                "n:escape_only}@, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"Inflight"
                "RequestSquattingDurationSeconds\":%{public}ld}";
          v14 = v9;
          v15 = 68;
LABEL_30:
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
          return;
        }
        return;
      }
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
      v19 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
      {
        v20 = *(_QWORD *)(a1 + 16);
        v21 = sub_1007BCD90(*(_QWORD *)(a1 + 24));
        sub_1007BCD78(*(_QWORD *)(a1 + 24));
        v22 = sub_1007BCD78(*(_QWORD *)(a1 + 24));
        *(_DWORD *)buf = 68290306;
        v39 = 0;
        v40 = 2082;
        v41 = "";
        v42 = 2114;
        v43 = v20;
        v44 = 2050;
        v45 = (id)a1;
        v46 = 2114;
        v47 = (unint64_t)v21;
        v48 = 2050;
        v49 = v22;
        v50 = 2050;
        v51 = v8 / 60.0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#dic #AutoPrompt Inflight auth-request squatting for more than 15 mins. TearingDown\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"squattingClient\":%{public, location:escape_only}@, \"squattingRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"InflightRequestSquattingDurationMinutes\":\"%{public}.2f\"}", buf, 0x44u);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
      }
      v23 = qword_1022A01C8;
      if (os_signpost_enabled((os_log_t)qword_1022A01C8))
      {
        v24 = *(_QWORD *)(a1 + 16);
        v25 = sub_1007BCD90(*(_QWORD *)(a1 + 24));
        sub_1007BCD78(*(_QWORD *)(a1 + 24));
        v26 = sub_1007BCD78(*(_QWORD *)(a1 + 24));
        *(_DWORD *)buf = 68290306;
        v39 = 0;
        v40 = 2082;
        v41 = "";
        v42 = 2114;
        v43 = v24;
        v44 = 2050;
        v45 = (id)a1;
        v46 = 2114;
        v47 = (unint64_t)v25;
        v48 = 2050;
        v49 = v26;
        v50 = 2050;
        v51 = v8 / 60.0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic #AutoPrompt Inflight auth-request squatting for more than 15 mins. TearingDown", "{\"msg%{public}.0s\":\"#dic #AutoPrompt Inflight auth-request squatting for more than 15 mins. TearingDown\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"squattingClient\":%{public, location:escape_only}@, \"squattingRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"InflightRequestSquattingDurationMinutes\":\"%{public}.2f\"}", buf, 0x44u);
      }
      sub_1007EABB4(*(_QWORD *)(a1 + 24), 1, 0);
    }
    if (*a2 == 7)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A1E80);
      v27 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v28 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 68289538;
        v39 = 0;
        v40 = 2082;
        v41 = "";
        v42 = 2114;
        v43 = v28;
        v44 = 2050;
        v45 = (id)a1;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#AutoPrompt AuthorizationUpgradeAvailable updated\", \"Client\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}", buf, 0x26u);
      }
      sub_1007F1400(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16));
    }
    v29 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", a3);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v29, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("isAutoPrompting"));
    v31 = *(void **)(a1 + 16);
    v30 = *(_QWORD *)(a1 + 24);
    v32 = objc_msgSend(v31, "bundleId");
    sub_1007F5A68((uint64_t)v37, (uint64_t)a2);
    sub_1007BDDB4(v30, (uint64_t)v31, v32, (uint64_t)v37, (uint64_t)v29);
    sub_100235568((uint64_t)v37);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A1E80);
    v33 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v34 = *(void **)(a1 + 16);
      v35 = objc_msgSend(objc_msgSend(v34, "bundleId"), "UTF8String");
      v36 = *a2;
      *(_DWORD *)buf = 68290050;
      v39 = 0;
      v40 = 2082;
      v41 = "";
      v42 = 2114;
      v43 = (unint64_t)v34;
      v44 = 2050;
      v45 = (id)a1;
      v46 = 2082;
      v47 = (unint64_t)v35;
      v48 = 2050;
      v49 = v36;
      v13 = "{\"msg%{public}.0s\":\"#AutoPrompt posted\", \"Client\":%{public, location:escape_only}@, \"self\":\"%{publi"
            "c}p\", \"CKP.BundleId\":%{public, location:escape_only}s, \"type\":%{public, location:CLClientManager_Type::"
            "AuthorizationRequestType}lld}";
      v14 = v33;
      v15 = 58;
      goto LABEL_30;
    }
    return;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A1E80);
  v16 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *a2;
    *(_DWORD *)buf = 68289794;
    v39 = 0;
    v40 = 2082;
    v41 = "";
    v42 = 2114;
    v43 = v17;
    v44 = 2050;
    v45 = (id)a1;
    v46 = 2050;
    v47 = v18;
    v13 = "{\"msg%{public}.0s\":\"#dic #AutoPrompt AutoPrompt disabled\", \"Client\":%{public, location:escape_only}@, \""
          "this\":\"%{public}p\", \"type\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}";
    v14 = v16;
    v15 = 48;
    goto LABEL_30;
  }
}

void sub_1011085A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100235568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011085C4(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 120))
    return 0;
  if ((objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceType:", 20) & 1) != 0
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1), (_DWORD)result))
  {
    if (objc_msgSend(*(id *)(a1 + 40), "transientAwareRegistrationResult") != 4)
      return 0;
    if ((_os_feature_enabled_impl("CoreLocation", "CLAutoPrompt") & 1) != 0)
      return 1;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A1E80);
    v3 = qword_1022A01D8;
    v4 = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6[0] = 68289538;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2114;
      v10 = v5;
      v11 = 2050;
      v12 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic WhenInUse #AutoPrompt FF disabled\", \"Client\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)v6, 0x26u);
      return 0;
    }
  }
  return result;
}

void sub_101108720(uint64_t a1)
{
  int v2;
  uint64_t v3;
  void *__p[2];
  char v5;
  _DWORD v6[18];

  *(_BYTE *)(a1 + 128) = 1;
  if (!sub_101107BE4(a1, 2))
  {
    if (objc_msgSend(sub_1001AA814(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16)), "BOOLForKey:defaultValue:", CFSTR("DefaultAccuracyReduced"), 0))v2 = 1;
    else
      v2 = 2;
    v3 = *(_QWORD *)(a1 + 16);
    sub_1015A2E04(__p, "");
    sub_1007F5908((uint64_t)v6, v2, v3, 0, (__int128 *)__p);
    sub_101107F88(a1, v6, 0);
    sub_100235568((uint64_t)v6);
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_1011087D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_100235568((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id *sub_101108804(id *result)
{
  id *v1;

  if (*((_BYTE *)result + 128))
  {
    v1 = result;
    result = (id *)objc_msgSend(result[5], "transientAwareRegistrationResult");
    if ((_DWORD)result != 4)
      *((_BYTE *)v1 + 128) = 0;
  }
  return result;
}

void sub_10110883C(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  id v24;
  uint8_t buf[8];
  _BYTE v26[10];
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  _QWORD *v30;
  __int16 v31;
  int v32;

  if (a1[15])
  {
    v2 = (unint64_t)objc_msgSend((id)a1[5], "diagnosticMask");
    if (*((_BYTE *)a1 + 128))
      v2 |= sub_101107BE4((uint64_t)a1, 2) | 0x2000;
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 72))(a1))
      v2 |= sub_101107BE4((uint64_t)a1, 9) | 0x2000;
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 80))(a1))
      v2 |= sub_101107BE4((uint64_t)a1, 7) | 0x2000;
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 96))(a1))
      v2 |= 0x400uLL;
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 104))(a1))
      v2 |= 0x800uLL;
    v3 = (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1) | v2;
    v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1) & v3;
    if (v4 == a1[18])
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A1E80);
      v5 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v6 = a1[2];
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v26 = 2082;
        *(_QWORD *)&v26[2] = "";
        v27 = 2114;
        v28 = v6;
        v29 = 2050;
        v30 = a1;
        v31 = 1026;
        v32 = v4;
        v7 = "{\"msg%{public}.0s\":\"#dic skip sending diagnostic mask - same as last one\", \"ClientKeyPath\":%{public, "
             "location:escape_only}@, \"self\":\"%{public}p\", \"DiagnosticMask\":%{public}d}";
        v8 = v5;
        v9 = 44;
LABEL_21:
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, buf, v9);
      }
    }
    else
    {
      a1[18] = v4;
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A1E80);
      v12 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v13 = a1[2];
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v26 = 2082;
        *(_QWORD *)&v26[2] = "";
        v27 = 2114;
        v28 = v13;
        v29 = 2050;
        v30 = a1;
        v31 = 1026;
        v32 = v4;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic sending diagnostic mask\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"DiagnosticMask\":%{public}d}", buf, 0x2Cu);
      }
      v24 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
      objc_msgSend(v24, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v4), CFSTR("kCLConnectionMessageDiagnosticsKey"));
      sub_101108D00("kCLConnectionMessageDiagnostics", &v24, buf);
      v22 = *(_QWORD *)buf;
      v23 = *(std::__shared_weak_count **)v26;
      if (*(_QWORD *)v26)
      {
        v14 = (unint64_t *)(*(_QWORD *)v26 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      sub_101106984((uint64_t)a1, (uint64_t)&v22, 0, 1, 0.0);
      v16 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = *(std::__shared_weak_count **)v26;
      if (*(_QWORD *)v26)
      {
        v20 = (unint64_t *)(*(_QWORD *)v26 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A1E80);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = a1[2];
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v26 = 2082;
      *(_QWORD *)&v26[2] = "";
      v27 = 2114;
      v28 = v11;
      v29 = 2050;
      v30 = a1;
      v7 = "{\"msg%{public}.0s\":\"disconnected #dic skip sending diagnostic mask\", \"ClientKeyPath\":%{public, location"
           ":escape_only}@, \"self\":\"%{public}p\"}";
      v8 = v10;
      v9 = 38;
      goto LABEL_21;
    }
  }
}

void sub_101108C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_101108CA8(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_101108CD4(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

_QWORD *sub_101108D00@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_101108D4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101108D60(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uuid_clear((unsigned __int8 *)(a1 + 17));
  *(_BYTE *)(a1 + 16) = 0;
  return a1;
}

void sub_101108DC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_10050C79C(v2);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_101108DE0(uint64_t a1)
{
  uuid_clear((unsigned __int8 *)(a1 + 17));
  *(_BYTE *)(a1 + 16) = 0;
}

id *sub_101108E0C@<X0>(id *result@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  BOOL v5;
  id *v7;
  const unsigned __int8 *v8;
  unint64_t v9;
  void **v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  NSObject *v43;
  const char *v44;
  uint8_t *v45;
  id v46[2];
  _DWORD v47[4];
  uint8_t buf[16];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(_QWORD *)(a2 + 80);
  if (v4)
    v5 = v4 == 26;
  else
    v5 = 1;
  if (!v5)
  {
    v7 = result;
    v8 = (const unsigned __int8 *)(a2 + 8);
    result = (id *)uuid_is_null((const unsigned __int8 *)(a2 + 8));
    if (!(_DWORD)result)
    {
      if (uuid_compare(v8, (const unsigned __int8 *)v7 + 17))
      {
        *((_BYTE *)v7 + 16) = 0;
        uuid_copy((unsigned __int8 *)v7 + 17, v8);
      }
      v9 = (unint64_t)v7[10];
      if (v9 >= 0x41)
      {
        v7[9] = (char *)v7[9] + 1;
        v7[10] = (id)(v9 - 1);
        sub_101109E6C((uint64_t)(v7 + 5), 1);
      }
      sub_1011092C0(v7 + 5, (__int128 *)a2);
      result = (id *)sub_10008950C((char *)*v7 + 72);
      if ((_DWORD)result)
      {
        sub_100131938(v46, (uint64_t)"CLVO2MaxInputStore::add", 0);
        sub_101109384((uint64_t *)*v7, v7 + 5);
        v10 = (void **)v7[6];
        v11 = v7[7];
        v7[10] = 0;
        v12 = v11 - (_BYTE *)v10;
        if (v12 >= 0x11)
        {
          do
          {
            operator delete(*v10);
            v13 = v7[7];
            v10 = (void **)((char *)v7[6] + 8);
            v7[6] = v10;
            v12 = v13 - (_BYTE *)v10;
          }
          while (v12 > 0x10);
        }
        if (v12 >> 3 == 1)
        {
          v14 = 18;
        }
        else
        {
          if (v12 >> 3 != 2)
          {
LABEL_18:
            if (*((_BYTE *)v7 + 16))
            {
              *(_QWORD *)&v50 = 0xFFEFFFFFFFFFFFFFLL;
              *(_QWORD *)&v51 = 0xFFEFFFFFFFFFFFFFLL;
              v15 = sub_1009D8A5C((uint64_t)*v7);
              v16 = (unint64_t)a3[2];
              v17 = a3[1];
              if ((unint64_t)v17 >= v16)
              {
                v24 = *a3;
                v25 = 0x6DB6DB6DB6DB6DB7 * ((v17 - *a3) >> 4);
                v26 = v25 + 1;
                if ((unint64_t)(v25 + 1) > 0x249249249249249)
                  sub_100259694();
                v27 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v16 - (_QWORD)v24) >> 4);
                if (2 * v27 > v26)
                  v26 = 2 * v27;
                if (v27 >= 0x124924924924924)
                  v28 = 0x249249249249249;
                else
                  v28 = v26;
                if (v28)
                {
                  v29 = (char *)sub_1002A7588((uint64_t)(a3 + 2), v28);
                  v24 = *a3;
                  v17 = a3[1];
                }
                else
                {
                  v29 = 0;
                }
                v30 = &v29[112 * v25];
                v31 = &v29[112 * v28];
                v32 = *(_OWORD *)buf;
                v33 = v50;
                *((_OWORD *)v30 + 1) = v49;
                *((_OWORD *)v30 + 2) = v33;
                *(_OWORD *)v30 = v32;
                v34 = v51;
                v35 = v52;
                v36 = v54;
                *((_OWORD *)v30 + 5) = v53;
                *((_OWORD *)v30 + 6) = v36;
                *((_OWORD *)v30 + 3) = v34;
                *((_OWORD *)v30 + 4) = v35;
                v23 = v30 + 112;
                if (v17 == v24)
                {
                  v42 = v30;
                }
                else
                {
                  do
                  {
                    v37 = *((_OWORD *)v17 - 7);
                    v38 = *((_OWORD *)v17 - 5);
                    *((_OWORD *)v30 - 6) = *((_OWORD *)v17 - 6);
                    *((_OWORD *)v30 - 5) = v38;
                    *((_OWORD *)v30 - 7) = v37;
                    v39 = *((_OWORD *)v17 - 4);
                    v40 = *((_OWORD *)v17 - 3);
                    v41 = *((_OWORD *)v17 - 2);
                    v42 = v30 - 112;
                    *(_OWORD *)(v30 - 23) = *(_OWORD *)(v17 - 23);
                    *((_OWORD *)v30 - 3) = v40;
                    *((_OWORD *)v30 - 2) = v41;
                    *((_OWORD *)v30 - 4) = v39;
                    v17 -= 112;
                    v30 -= 112;
                  }
                  while (v17 != v24);
                }
                *a3 = v42;
                a3[1] = v23;
                a3[2] = v31;
                if (v24)
                  operator delete(v24);
              }
              else
              {
                v18 = *(_OWORD *)buf;
                v19 = v50;
                *((_OWORD *)v17 + 1) = v49;
                *((_OWORD *)v17 + 2) = v19;
                *(_OWORD *)v17 = v18;
                v20 = v51;
                v21 = v52;
                v22 = v54;
                *((_OWORD *)v17 + 5) = v53;
                *((_OWORD *)v17 + 6) = v22;
                *((_OWORD *)v17 + 3) = v20;
                *((_OWORD *)v17 + 4) = v21;
                v23 = v17 + 112;
              }
              a3[1] = v23;
            }
            else
            {
              v15 = sub_1009D56DC((uint64_t)*v7, (const unsigned __int8 *)v7 + 17, a3);
              *((_BYTE *)v7 + 16) = v15 == 100;
            }
            if (v15 != 100)
            {
              if (qword_10229FC90 != -1)
                dispatch_once(&qword_10229FC90, &stru_1021A1EA0);
              v43 = qword_10229FC98;
              if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v15;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "failed to write VO2MaxInput entry, error %d", buf, 8u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FC90 != -1)
                  dispatch_once(&qword_10229FC90, &stru_1021A1EA0);
                v47[0] = 67109120;
                v47[1] = v15;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "failed to write VO2MaxInput entry, error %d", v47);
                v45 = (uint8_t *)v44;
                sub_100512490("Generic", 1, 0, 0, "std::vector<VO2MaxInput> CLVO2MaxInputStore::add(const VO2MaxInput &)", "%s\n", v44);
                if (v45 != buf)
                  free(v45);
              }
            }
            return sub_100131740(v46);
          }
          v14 = 36;
        }
        v7[9] = (id)v14;
        goto LABEL_18;
      }
    }
  }
  return result;
}

void sub_101109284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  sub_100131740((id *)va);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

__n128 sub_1011092C0(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 36 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101109EC8(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x24)) + 112 * (v7 % 0x24);
  v9 = *a2;
  v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)v8 = v9;
  result = (__n128)a2[3];
  v12 = a2[4];
  v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(__n128 *)(v8 + 48) = result;
  *(_OWORD *)(v8 + 64) = v12;
  ++a1[5];
  return result;
}

uint64_t sub_101109384(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10001E638(a1[10]);
    v5 = a2[1];
    if (a2[2] != v5)
    {
      v6 = a2[4];
      v7 = a2[5];
      v8 = (_QWORD *)(v5 + 8 * (v6 / 0x24));
      v9 = *v8 + 112 * (v6 % 0x24);
      v10 = *(_QWORD *)(v5 + 8 * ((v7 + v6) / 0x24)) + 112 * ((v7 + v6) % 0x24);
      while (v9 != v10)
      {
        (*(void (**)(uint64_t *, unint64_t, _QWORD))(*a1 + 120))(a1, v9, 0);
        v9 += 112;
        if (v9 - *v8 == 4032)
        {
          v11 = v8[1];
          ++v8;
          v9 = v11;
        }
      }
    }
    return sub_10001E99C(a1[10]);
  }
  return result;
}

void sub_101109468(unsigned __int8 *uu@<X1>, uint64_t *a2@<X0>, _QWORD *a3@<X8>)
{
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!uuid_is_null(uu))
  {
    v6 = sub_1009D56DC(*a2, uu, a3);
    if (v6 != 100)
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A1EA0);
      v7 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to get VO2MaxInput entries for session, error %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A1EA0);
        v10[0] = 67109120;
        v10[1] = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "Failed to get VO2MaxInput entries for session, error %d", v10);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 0, "std::vector<VO2MaxInput> CLVO2MaxInputStore::getBySessionId(unsigned char *)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
    }
  }
}

void sub_101109648(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10110966C(_QWORD *a1)
{
  unsigned __int8 v1;
  _QWORD *v3;
  int v4;
  __int128 v5;
  uint64_t v6;

  v1 = atomic_load((unsigned __int8 *)&qword_10230C878);
  if ((v1 & 1) == 0)
  {
    v3 = a1;
    v4 = __cxa_guard_acquire(&qword_10230C878);
    a1 = v3;
    if (v4)
    {
      v6 = 0;
      v5 = xmmword_101C42178;
      sub_101109778(qword_10230C860, &v5, 1uLL);
      __cxa_atexit((void (*)(void *))sub_1004A6E3C, qword_10230C860, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10230C878);
      a1 = v3;
    }
  }
  return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 32))(*a1, qword_10230C860);
}

void sub_101109758(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230C878);
  _Unwind_Resume(a1);
}

_QWORD *sub_101109778(_QWORD *a1, const void *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_100259C18(a1, a3);
    v6 = 3 * a3;
    v7 = 24 * a3;
    v8 = (char *)a1[1];
    memmove(v8, a2, v7 - 7);
    a1[1] = &v8[8 * v6];
  }
  return a1;
}

void sub_1011097E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101109800(uint64_t a1)
{
  return sub_101139070((_QWORD *)(*(_QWORD *)a1 + 72));
}

BOOL sub_10110980C(uint64_t *a1, const unsigned __int8 *a2)
{
  return (int)sub_1009D9584(*a1, a2) > 0;
}

BOOL sub_10110982C(uint64_t *a1, const unsigned __int8 *a2, void *a3)
{
  id v6;
  id v7;
  int v8;
  char *v9;
  char *v10;
  void *__p;
  char *v13;
  uint64_t v14;

  v6 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2);
  objc_msgSend(a3, "setSessionId:", objc_msgSend(v6, "UUIDString"));

  __p = 0;
  v13 = 0;
  v14 = 0;
  v7 = (id)sub_1009D91B0(*a1, a2, &__p);
  v8 = (int)v7;
  v9 = (char *)__p;
  if ((_DWORD)v7 != 109)
  {
    v10 = v13;
    if (__p != v13)
    {
      do
      {
        v7 = objc_msgSend(a3, "addInputs:", sub_10110991C((uint64_t)v7, (uint64_t)v9));
        v9 += 112;
      }
      while (v9 != v10);
      v9 = (char *)__p;
    }
  }
  if (v9)
  {
    v13 = v9;
    operator delete(v9);
  }
  return v8 != 109;
}

void sub_1011098FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CLCKVO2MaxCalorimetryInput *sub_10110991C(uint64_t a1, uint64_t a2)
{
  CLCKVO2MaxCalorimetryInput *v3;
  double v4;
  double v5;
  double v6;

  v3 = objc_alloc_init(CLCKVO2MaxCalorimetryInput);
  -[CLCKVO2MaxCalorimetryInput setStartTime:](v3, "setStartTime:", *(double *)(a2 + 32));
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  -[CLCKVO2MaxCalorimetryInput setMets:](v3, "setMets:", v4);
  -[CLCKVO2MaxCalorimetryInput setMetSource:](v3, "setMetSource:", *(unsigned int *)(a2 + 76));
  LODWORD(v5) = *(_DWORD *)(a2 + 40);
  -[CLCKVO2MaxCalorimetryInput setHr:](v3, "setHr:", v5);
  LODWORD(v6) = *(_DWORD *)(a2 + 44);
  -[CLCKVO2MaxCalorimetryInput setHrConfidence:](v3, "setHrConfidence:", v6);
  -[CLCKVO2MaxCalorimetryInput setHrTime:](v3, "setHrTime:", *(double *)(a2 + 48));
  -[CLCKVO2MaxCalorimetryInput setGrade:](v3, "setGrade:", *(double *)(a2 + 64));
  -[CLCKVO2MaxCalorimetryInput setGradeType:](v3, "setGradeType:", *(unsigned int *)(a2 + 56));
  -[CLCKVO2MaxCalorimetryInput setHasGPS:](v3, "setHasGPS:", *(unsigned __int8 *)(a2 + 72));
  -[CLCKVO2MaxCalorimetryInput setHasStrideCal:](v3, "setHasStrideCal:", *(unsigned __int8 *)(a2 + 73));
  -[CLCKVO2MaxCalorimetryInput setWorkoutType:](v3, "setWorkoutType:", *(unsigned int *)(a2 + 80));
  -[CLCKVO2MaxCalorimetryInput setCadence:](v3, "setCadence:", *(double *)(a2 + 88));
  -[CLCKVO2MaxCalorimetryInput setPace:](v3, "setPace:", *(double *)(a2 + 96));
  -[CLCKVO2MaxCalorimetryInput setIsStroller:](v3, "setIsStroller:", *(unsigned __int8 *)(a2 + 104));
  return v3;
}

uint64_t sub_1011099F4(uint64_t *a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  void *v9;
  uint64_t v10;
  _QWORD v11[2];

  v4 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", objc_msgSend(a2, "sessionId"));
  v11[0] = 0;
  v11[1] = 0;
  objc_msgSend(v4, "getUUIDBytes:", v11);

  __p = 0;
  v9 = 0;
  v10 = 0;
  sub_101109AF0(v5, a2, &__p);
  v6 = sub_1009D96B8(*a1, (const unsigned __int8 *)v11);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_101109ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_101109AF0(uint64_t a1, void *a2, void **a3)
{
  id result;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  id obj;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];

  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  obj = objc_msgSend(a2, "inputs");
  result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v54, 16);
  v5 = result;
  if (result)
  {
    v49 = *(_QWORD *)v51;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v51 != v49)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)v6);
        objc_msgSend(v7, "startTime");
        v9 = v8;
        objc_msgSend(v7, "mets");
        v11 = v10;
        v12 = objc_msgSend(v7, "metSource");
        objc_msgSend(v7, "hr");
        v14 = v13;
        objc_msgSend(v7, "hrConfidence");
        v16 = v15;
        objc_msgSend(v7, "hrTime");
        v18 = v17;
        objc_msgSend(v7, "grade");
        v20 = v19;
        v21 = objc_msgSend(v7, "gradeType");
        v22 = objc_msgSend(v7, "hasGPS");
        v23 = objc_msgSend(v7, "hasStrideCal");
        v24 = objc_msgSend(v7, "workoutType");
        objc_msgSend(v7, "cadence");
        v26 = v25;
        objc_msgSend(v7, "pace");
        v28 = v27;
        v29 = objc_msgSend(v7, "isStroller");
        v30 = v29;
        v31 = (char *)a3[1];
        v32 = (char *)a3[2];
        if (v31 >= v32)
        {
          v34 = 0x6DB6DB6DB6DB6DB7 * ((v31 - (_BYTE *)*a3) >> 4);
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) > 0x249249249249249)
            sub_100259694();
          v36 = 0x6DB6DB6DB6DB6DB7 * ((v32 - (_BYTE *)*a3) >> 4);
          if (2 * v36 > v35)
            v35 = 2 * v36;
          if (v36 >= 0x124924924924924)
            v37 = 0x249249249249249;
          else
            v37 = v35;
          if (v37)
            v38 = (char *)sub_1002A7588((uint64_t)(a3 + 2), v37);
          else
            v38 = 0;
          v39 = &v38[112 * v34];
          *((_DWORD *)v39 + 6) = v11;
          *((_QWORD *)v39 + 4) = v9;
          *((_DWORD *)v39 + 10) = v14;
          *((_DWORD *)v39 + 11) = v16;
          *((_QWORD *)v39 + 6) = v18;
          *((_DWORD *)v39 + 14) = v21;
          *((_QWORD *)v39 + 8) = v20;
          v39[72] = v22;
          v39[73] = v23;
          *((_DWORD *)v39 + 19) = v12;
          *((_QWORD *)v39 + 10) = v24;
          *((_QWORD *)v39 + 11) = v26;
          *((_QWORD *)v39 + 12) = v28;
          v39[104] = v30;
          v41 = (char *)*a3;
          v40 = (char *)a3[1];
          v42 = v39;
          if (v40 != *a3)
          {
            do
            {
              v43 = *((_OWORD *)v40 - 7);
              v44 = *((_OWORD *)v40 - 5);
              *((_OWORD *)v42 - 6) = *((_OWORD *)v40 - 6);
              *((_OWORD *)v42 - 5) = v44;
              *((_OWORD *)v42 - 7) = v43;
              v45 = *((_OWORD *)v40 - 4);
              v46 = *((_OWORD *)v40 - 3);
              v47 = *((_OWORD *)v40 - 2);
              *(_OWORD *)(v42 - 23) = *(_OWORD *)(v40 - 23);
              *((_OWORD *)v42 - 3) = v46;
              *((_OWORD *)v42 - 2) = v47;
              *((_OWORD *)v42 - 4) = v45;
              v42 -= 112;
              v40 -= 112;
            }
            while (v40 != v41);
            v40 = (char *)*a3;
          }
          v33 = v39 + 112;
          *a3 = v42;
          a3[1] = v39 + 112;
          a3[2] = &v38[112 * v37];
          if (v40)
            operator delete(v40);
        }
        else
        {
          *((_DWORD *)v31 + 6) = v11;
          *((_QWORD *)v31 + 4) = v9;
          *((_DWORD *)v31 + 10) = v14;
          *((_DWORD *)v31 + 11) = v16;
          *((_QWORD *)v31 + 6) = v18;
          *((_DWORD *)v31 + 14) = v21;
          *((_QWORD *)v31 + 8) = v20;
          v31[72] = v22;
          v31[73] = v23;
          *((_DWORD *)v31 + 19) = v12;
          *((_QWORD *)v31 + 10) = v24;
          *((_QWORD *)v31 + 11) = v26;
          *((_QWORD *)v31 + 12) = v28;
          v33 = v31 + 112;
          v31[104] = v29;
        }
        a3[1] = v33;
        v6 = (char *)v6 + 1;
      }
      while (v6 != v5);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v54, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_101109E40(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_101109E6C(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x24)
    a2 = 1;
  if (v2 < 0x48)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 36;
  }
  return v4 ^ 1u;
}

void sub_101109EC8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x24;
  v4 = v2 - 36;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10110A190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10110A1DC(uint64_t result, double a2)
{
  *(double *)result = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 8) = result + 16;
  return result;
}

uint64_t sub_10110A1F4(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _QWORD v6[4];
  int v7;
  int v8;
  int v9;
  int v10;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10110A250;
  v6[3] = &unk_102139B90;
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = a5;
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.trace.submissionstats"), v6);
}

NSDictionary *sub_10110A250(unsigned int *a1)
{
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("traceType");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[8]);
  v3[1] = CFSTR("uploadStatus");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[9]);
  v3[2] = CFSTR("discardReason");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[10]);
  v3[3] = CFSTR("fileSizeKB");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[11] >> 10);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

uint64_t sub_10110A330(uint64_t a1, int a2, int a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t **v10;
  _QWORD v12[4];
  int v13;
  int v14;
  int v15;
  int *v16;

  v15 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = a1 + 16;
    do
    {
      v7 = *(_DWORD *)(v5 + 32);
      v8 = v7 < a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v5;
      else
        v9 = (uint64_t *)(v5 + 8);
      if (!v8)
        v6 = v5;
      v5 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 16 && *(_DWORD *)(v6 + 32) <= a2 && *(double *)(v6 + 40) + *(double *)a1 >= a4)
      return 0;
  }
  v10 = (uint64_t **)(a1 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10110A42C;
  v12[3] = &unk_102131FE8;
  v13 = a2;
  v14 = a3;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.trace.blockstats"), v12);
  v16 = &v15;
  *((double *)sub_100041CE0(v10, &v15, (uint64_t)&unk_101B9EB60, &v16) + 5) = a4;
  return 1;
}

NSDictionary *sub_10110A42C(uint64_t a1)
{
  NSNumber *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("traceType");
  v2 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  v4[1] = CFSTR("blockReason");
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 36));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

NSDictionary *sub_10110A4CC(uint64_t a1)
{
  _QWORD v3[6];
  _QWORD v4[6];

  v3[0] = CFSTR("triggeredByLocation");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", ***(unsigned int ***)(a1 + 32));
  v3[1] = CFSTR("triggeredByLocationOfInterest");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(**(_QWORD **)(a1 + 32) + 8));
  v3[2] = CFSTR("triggeredByWalking");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(**(_QWORD **)(a1 + 32) + 16));
  v3[3] = CFSTR("triggeredByLocationFailed");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(**(_QWORD **)(a1 + 32) + 4));
  v3[4] = CFSTR("triggeredByLocationOfInterestFailed");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(**(_QWORD **)(a1 + 32) + 12));
  v3[5] = CFSTR("triggeredByWalkingFailed");
  v4[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(**(_QWORD **)(a1 + 32) + 20));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 6);
}

void sub_10110A610()
{
  operator new();
}

void sub_10110A668()
{
  operator delete();
}

void sub_10110A68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint8_t buf[8];
  std::__shared_weak_count *v8;

  *(_QWORD *)a1 = off_1021A1ED0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0x40D5180000000000;
  v3 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  sub_1001E4804(buf);
  sub_1001FD98C(*(uint64_t *)buf, "CleanupInterval", v3);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_1001B6A0C();
}

void sub_10110AB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a23 < 0)
    operator delete(__p);
  v27 = v24[9];
  v24[9] = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = v24[8];
  v24[8] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = v24[7];
  v24[7] = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = v24[6];
  v24[6] = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *v25;
  *v25 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  _Unwind_Resume(exception_object);
}

void sub_10110AC30(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLCellTilesManager::onClientNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A1F30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCellTilesManager::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A1F30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCellTilesManager::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10116D188(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10110ADF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10110AE18(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLCellTilesManager::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A1F30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCellTilesManager::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A1F30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCellTilesManager::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10116BF84(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10110AFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10110B000(uint64_t a1, int *a2, char *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLCellTilesManager::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A1F30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCellTilesManager::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A1F30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCellTilesManager::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10116DA14(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10110B1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10110B1E8(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLCellTilesManager::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A1F30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCellTilesManager::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A1F30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCellTilesManager::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10116CE50(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10110B3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_10110B3D0(uint64_t a1)
{
  return sub_10116E228(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

uint64_t sub_10110B3DC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1021A1ED0;
  objc_msgSend(*(id *)(a1 + 24), "invalidate");

  *(_QWORD *)(a1 + 24) = 0;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {

    *(_QWORD *)(a1 + 80) = 0;
  }
  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

void sub_10110B4AC(uint64_t a1)
{
  sub_10110B3DC(a1);
  operator delete();
}

uint64_t sub_10110B4D0()
{
  sub_100197040();
  return sub_100195F08();
}

uint64_t sub_10110B4E4()
{
  sub_100197040();
  return sub_1001B796C() & 1;
}

id sub_10110B500(_QWORD *a1)
{
  CLTileDownloadSchedulingClient *v2;
  CLTileDownloadSchedulingClient *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (CLTileDownloadSchedulingClient *)a1[10];
  if (!v2)
  {
    v3 = [CLTileDownloadSchedulingClient alloc];
    v4 = a1[1];
    if (v4)
      v5 = v4 + 112;
    else
      v5 = 0;
    v2 = -[CLTileDownloadSchedulingClient initWithUniverse:andDelegate:](v3, "initWithUniverse:andDelegate:", a1[2], v5);
    a1[10] = v2;
  }
  return (id)-[CLTileDownloadSchedulingClient scheduleTileDownloadIfNecessary](v2, "scheduleTileDownloadIfNecessary");
}

id sub_10110B548(uint64_t a1)
{
  id v1;
  uint64_t *v2;

  v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
  if (byte_10230C8AF >= 0)
    v2 = &qword_10230C898;
  else
    v2 = (uint64_t *)qword_10230C898;
  return objc_msgSend(v1, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
}

void sub_10110B5A4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10110B5D0(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10110B5FC()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C421B0;
      v1[3] = unk_101C421C0;
      v1[4] = xmmword_101C421D0;
      v1[0] = xmmword_101C42190;
      v1[1] = unk_101C421A0;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10110B6D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_10110B6E8()
{
  sub_1015A2E04(qword_10230C880, "t");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C880, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230C898, "CellTilesManager");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230C898, (void *)&_mh_execute_header);
}

uint64_t sub_10110B764(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v17;
  double v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _DWORD v31[2];
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  uint64_t v37;

  v4 = a2[1];
  v29 = *a2;
  v30 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_1011007E4(a1, &v29, a3);
  v7 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = off_1021A1F80;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_QWORD *)(a1 + 912) = a1 + 912;
  *(_QWORD *)(a1 + 920) = a1 + 912;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_QWORD *)(a1 + 976) = 0;
  sub_1011233B8(a1 + 1008);
  v28 = v10;
  sub_1011233B8(a1 + 1848);
  v27 = v11;
  *(_BYTE *)(a1 + 2688) = 0;
  *(_DWORD *)(a1 + 2728) = 0;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_WORD *)(a1 + 2732) = 1;
  *(_DWORD *)(a1 + 2736) = 0;
  *(_BYTE *)(a1 + 2792) = 0;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_QWORD *)(a1 + 2800) = 0;
  *(_DWORD *)(a1 + 2824) = 0;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_DWORD *)(a1 + 2872) = 0;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_BYTE *)(a1 + 2848) = 0;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_WORD *)(a1 + 2876) = 1;
  *(_DWORD *)(a1 + 2880) = 0;
  *(_QWORD *)(a1 + 2952) = 0;
  *(_QWORD *)(a1 + 2944) = 0;
  *(_QWORD *)(a1 + 2960) = 0;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_BYTE *)(a1 + 2936) = 0;
  *(_QWORD *)(a1 + 2968) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 2976) = off_102138370;
  *(_QWORD *)(a1 + 2984) = 30;
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_OWORD *)(a1 + 3008) = 0u;
  *(_OWORD *)(a1 + 3024) = 0u;
  *(_QWORD *)(a1 + 3040) = 0;
  *(_QWORD *)(a1 + 3048) = a1 + 3048;
  *(_QWORD *)(a1 + 3056) = a1 + 3048;
  *(_QWORD *)(a1 + 3064) = 0;
  *(_QWORD *)(a1 + 3072) = a1 + 3072;
  *(_QWORD *)(a1 + 3080) = a1 + 3072;
  *(_QWORD *)(a1 + 3088) = 0;
  *(_QWORD *)(a1 + 3096) = a1 + 3096;
  *(_QWORD *)(a1 + 3104) = a1 + 3096;
  *(_QWORD *)(a1 + 3112) = 0;
  *(_QWORD *)(a1 + 3120) = a1 + 3120;
  *(_QWORD *)(a1 + 3128) = a1 + 3120;
  *(_QWORD *)(a1 + 3144) = 0;
  *(_QWORD *)(a1 + 3136) = 0;
  *(_QWORD *)(a1 + 3152) = 0;
  *(_QWORD *)(a1 + 3160) = 0xBFF0000000000000;
  sub_1011234A8(a1 + 3184);
  *(_BYTE *)(a1 + 3720) = 0;
  *(_BYTE *)(a1 + 3832) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 3840) = _Q0;
  *(_QWORD *)(a1 + 3856) = 0;
  *(_QWORD *)(a1 + 3872) = 0;
  *(_QWORD *)(a1 + 3864) = 0;
  *(_QWORD *)(a1 + 3880) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3888) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3904) = 0;
  *(_QWORD *)(a1 + 3896) = 0;
  *(_DWORD *)(a1 + 3912) = 0;
  *(_WORD *)(a1 + 3916) = 1;
  *(_DWORD *)(a1 + 3920) = 0;
  *(_QWORD *)(a1 + 3984) = 0;
  *(_QWORD *)(a1 + 4000) = 0;
  *(_QWORD *)(a1 + 3992) = 0;
  *(_BYTE *)(a1 + 3976) = 0;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_QWORD *)(a1 + 4008) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 4016) = _Q0;
  *(_QWORD *)(a1 + 4032) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4040) = 0;
  *(_OWORD *)(a1 + 4048) = 0u;
  *(_OWORD *)(a1 + 4064) = 0u;
  *(_OWORD *)(a1 + 4080) = 0u;
  *(_OWORD *)(a1 + 4096) = 0u;
  *(_QWORD *)(a1 + 4112) = 0;
  *(_QWORD *)(a1 + 4120) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 4128) = 0xBFF0000000000000;
  if (sub_1000FDBD0())
  {
    *(_BYTE *)(a1 + 3168) = 0;
LABEL_12:
    v18 = 30.0;
    goto LABEL_14;
  }
  v17 = sub_10075CD10();
  *(_BYTE *)(a1 + 3168) = v17 ^ 1;
  if (((v17 ^ 1) & 1) == 0)
    goto LABEL_12;
  v18 = 70.0;
LABEL_14:
  *(double *)(a1 + 3176) = v18;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2048);
  v19 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v20 = *(unsigned __int8 *)(a1 + 3168);
    v21 = *(_QWORD *)(a1 + 3176);
    *(_DWORD *)buf = 67240448;
    v35 = v20;
    v36 = 2050;
    v37 = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLMM,Constructor,fUseSpeedCheckForDOT,%{public}d,fMaxDistanceForTIntersectionForDOT,%{public}.1lf", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v23 = *(unsigned __int8 *)(a1 + 3168);
    v24 = *(_QWORD *)(a1 + 3176);
    v31[0] = 67240448;
    v31[1] = v23;
    v32 = 2050;
    v33 = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Constructor,fUseSpeedCheckForDOT,%{public}d,fMaxDistanceForTIntersectionForDOT,%{public}.1lf", v31, 18, a1 + 3048, v27, v28, a1 + 912, v29);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "CLParticleMapMatcher::CLParticleMapMatcher(CLMapGeometryPtr, const std::string &)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  srandom(0);
  bzero((void *)(a1 + 3728), 0x68uLL);
  return a1;
}

void sub_10110BBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  void *v29;
  void *v30;

  a21 = (void **)(v21 + 4096);
  sub_10083CB88(&a21);
  a21 = (void **)(v21 + 4072);
  sub_10083CB88(&a21);
  a21 = (void **)(v21 + 4048);
  sub_10083CBFC(&a21);
  sub_10110BD0C(v22);
  if (*(char *)(v21 + 3399) < 0)
    operator delete(*(void **)(v21 + 3376));
  sub_1001A5CBC(v27);
  sub_1001A5CBC(v26);
  sub_1001A5CBC(v25);
  sub_1001A5CBC(a11);
  *(_QWORD *)(v21 + 2976) = off_102138370;
  sub_100412390((_QWORD *)(v21 + 3000));
  sub_10110BD44(v24);
  sub_10110BD7C(v23);
  sub_10110BDB4(a12);
  sub_10110BDB4(a13);
  sub_10112437C(v21 + 984, *(_QWORD **)(v21 + 992));
  v29 = *(void **)(v21 + 960);
  if (v29)
  {
    *(_QWORD *)(v21 + 968) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(v21 + 936);
  if (v30)
  {
    *(_QWORD *)(v21 + 944) = v30;
    operator delete(v30);
  }
  sub_1000F34E0(a14);
  a21 = (void **)(v21 + 888);
  sub_10083CC6C(&a21);
  a21 = (void **)(v21 + 864);
  sub_10083CC6C(&a21);
  sub_101100B50(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_10110BD0C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 64);
  return a1;
}

uint64_t sub_10110BD44(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 8);
  return a1;
}

uint64_t sub_10110BD7C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 24);
  return a1;
}

uint64_t sub_10110BDB4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = a1 + 672;
  v3 = *(void **)(a1 + 760);
  if (v3)
  {
    *(_QWORD *)(a1 + 768) = v3;
    operator delete(v3);
  }
  sub_100261F44(v2);
  sub_100261F44(a1 + 648);
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  sub_100261F44(a1 + 8);
  return a1;
}

uint64_t sub_10110BE24(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v12;

  *(_QWORD *)a1 = off_1021A1F80;
  v12 = (void **)(a1 + 4096);
  sub_10083CB88(&v12);
  v12 = (void **)(a1 + 4072);
  sub_10083CB88(&v12);
  v12 = (void **)(a1 + 4048);
  sub_10083CBFC(&v12);
  v2 = *(void **)(a1 + 3984);
  if (v2)
  {
    *(_QWORD *)(a1 + 3992) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 3896);
  if (*(char *)(a1 + 3399) < 0)
    operator delete(*(void **)(a1 + 3376));
  sub_1001A5CBC((uint64_t *)(a1 + 3120));
  sub_1001A5CBC((uint64_t *)(a1 + 3096));
  sub_1001A5CBC((uint64_t *)(a1 + 3072));
  sub_1001A5CBC((uint64_t *)(a1 + 3048));
  *(_QWORD *)(a1 + 2976) = off_102138370;
  sub_100412390((_QWORD *)(a1 + 3000));
  v3 = *(void **)(a1 + 2944);
  if (v3)
  {
    *(_QWORD *)(a1 + 2952) = v3;
    operator delete(v3);
  }
  sub_100261F44(a1 + 2856);
  v4 = *(void **)(a1 + 2800);
  if (v4)
  {
    *(_QWORD *)(a1 + 2808) = v4;
    operator delete(v4);
  }
  sub_100261F44(a1 + 2712);
  v5 = *(void **)(a1 + 2608);
  if (v5)
  {
    *(_QWORD *)(a1 + 2616) = v5;
    operator delete(v5);
  }
  sub_100261F44(a1 + 2520);
  sub_100261F44(a1 + 2496);
  if (*(char *)(a1 + 2119) < 0)
    operator delete(*(void **)(a1 + 2096));
  v6 = *(void **)(a1 + 1944);
  if (v6)
  {
    *(_QWORD *)(a1 + 1952) = v6;
    operator delete(v6);
  }
  sub_100261F44(a1 + 1856);
  v7 = *(void **)(a1 + 1768);
  if (v7)
  {
    *(_QWORD *)(a1 + 1776) = v7;
    operator delete(v7);
  }
  sub_100261F44(a1 + 1680);
  sub_100261F44(a1 + 1656);
  if (*(char *)(a1 + 1279) < 0)
    operator delete(*(void **)(a1 + 1256));
  v8 = *(void **)(a1 + 1104);
  if (v8)
  {
    *(_QWORD *)(a1 + 1112) = v8;
    operator delete(v8);
  }
  sub_100261F44(a1 + 1016);
  sub_10112437C(a1 + 984, *(_QWORD **)(a1 + 992));
  v9 = *(void **)(a1 + 960);
  if (v9)
  {
    *(_QWORD *)(a1 + 968) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 936);
  if (v10)
  {
    *(_QWORD *)(a1 + 944) = v10;
    operator delete(v10);
  }
  sub_1000F34E0((_QWORD *)(a1 + 912));
  v12 = (void **)(a1 + 888);
  sub_10083CC6C(&v12);
  v12 = (void **)(a1 + 864);
  sub_10083CC6C(&v12);
  return sub_101100B50(a1);
}

void sub_10110C00C(uint64_t a1)
{
  sub_10110BE24(a1);
  operator delete();
}

uint64_t sub_10110C030(uint64_t a1, uint64_t a2, int *a3, double a4)
{
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __n128 *v16[3];
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v20 = 0;
  v21 = 0;
  LODWORD(v22) = 0;
  WORD2(v22) = 1;
  DWORD2(v22) = 0;
  v24 = 0;
  v23 = 0uLL;
  sub_100349198(&v20, (uint64_t *)a2);
  BYTE4(v22) = *(_BYTE *)(a2 + 20);
  v24 = *(_QWORD *)(a2 + 48);
  v18 = 0;
  v19 = 0;
  v17[0] = (uint64_t)v17;
  v17[1] = (uint64_t)v17;
  v17[2] = 0;
  v16[0] = (__n128 *)v16;
  v16[1] = (__n128 *)v16;
  v16[2] = 0;
  *a3 = 0;
  v8 = sub_10110C198(a1, &v20, a3, v17, v16, &v19, &v18, a4);
  if (*a3 > 1)
    v9 = v8;
  else
    v9 = 0;
  if ((v9 & 1) != 0)
  {
    sub_100349198((_QWORD *)a2, (uint64_t *)&v20);
    v10 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v10;
    *(_QWORD *)(a2 + 48) = v24;
    v11 = v18;
    *(_QWORD *)(a2 + 32) = v19;
    *(_QWORD *)(a2 + 40) = v11;
    *(_DWORD *)(a2 + 24) = -1082130432;
  }
  sub_1001A5CBC((uint64_t *)v16);
  sub_1001A5CBC(v17);
  v12 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v9;
}

void sub_10110C174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_1001A5CBC((uint64_t *)va);
  sub_1001A5CBC((uint64_t *)va1);
  sub_100261F44((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_10110C198(uint64_t a1, uint64_t **a2, int *a3, uint64_t *a4, __n128 **a5, _QWORD *a6, _QWORD *a7, double a8)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  double v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 *v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char v40;
  __int128 v41;
  _QWORD v42[2];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[64];
  __int16 v57;
  uint64_t *v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[80];
  uint64_t v64;
  unint64_t v65;
  double v66;
  uint64_t v67;
  std::__shared_weak_count *v68;

  v12 = *(std::__shared_weak_count **)(a1 + 16);
  v67 = *(_QWORD *)(a1 + 8);
  v68 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = 0;
  *a6 = 0;
  *a7 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v41 = _Q0;
  while (1)
  {
    sub_1001A5CBC(a4);
    *a3 = 0;
    v66 = 0.0;
    v42[0] = 0;
    v42[1] = 0;
    v43 = v41;
    v44 = 0;
    v45 = 0;
    v46 = 0xBFF0000000000000;
    v58 = 0;
    v59 = 0;
    memset(&v56[32], 0, 32);
    v57 = 0;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    memset(v63, 0, 27);
    memset(&v63[32], 0, 48);
    v55 = 0u;
    memset(v56, 0, 30);
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v64 = 0;
    v65 = 0xBFF0000000000000;
    if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, _QWORD, uint64_t, uint64_t **, _QWORD, double *, double, double))(*(_QWORD *)v67 + 80))(v67, v42, a4, 0, 1, a2, *((unsigned __int8 *)a2 + 20), &v66, *((double *)a2 + 6), a8) & 1) == 0)
    {
      v22 = 0;
      v40 = 0;
      goto LABEL_23;
    }
    v21 = v66;
    if (v66 == -1.0)
    {
      v22 = 0;
LABEL_22:
      v40 = 1;
      goto LABEL_23;
    }
    v23 = a4[1];
    v24 = *a3;
    if ((uint64_t *)v23 == a4)
    {
      v25 = 0;
      v28 = a4;
    }
    else
    {
      v25 = 0;
      v26 = **a2;
      v27 = *((unsigned __int8 *)a2 + 20);
      v28 = a4;
      do
      {
        if (**(_QWORD **)(v23 + 16) == v26 && *(unsigned __int8 *)(v23 + 32) != v27)
        {
          v28 = (uint64_t *)v23;
        }
        else
        {
          *a3 = ++v24;
          v25 = v23;
        }
        v23 = *(_QWORD *)(v23 + 8);
      }
      while ((uint64_t *)v23 != a4);
    }
    a8 = a8 - v21;
    if (v24 >= 2)
    {
      if (v28 != a4)
      {
        v29 = *v28;
        *(_QWORD *)(v29 + 8) = v28[1];
        *(_QWORD *)v28[1] = v29;
        --a4[2];
        sub_100261F44((uint64_t)(v28 + 2));
        operator delete(v28);
      }
      v22 = 0;
      v30 = *((_QWORD *)&v53 + 1);
      *a6 = v53;
      *a7 = v30;
      a2[6] = v58;
      goto LABEL_22;
    }
    if (v24 == 1)
    {
      sub_100349198(a2, (uint64_t *)(v25 + 16));
      *((_BYTE *)a2 + 20) = *(_BYTE *)(v25 + 32);
      a2[6] = *(uint64_t **)(v25 + 40);
      *a3 = 0;
      v31 = (__n128 *)a4[1];
      if (v31 == (__n128 *)a4)
      {
        v22 = 1;
      }
      else
      {
        do
        {
          if (*(_QWORD *)v31[1].n128_u64[0] != **a2 || v31[2].n128_u8[0] == *((unsigned __int8 *)a2 + 20))
            sub_101008368(a5, v31 + 1);
          v31 = (__n128 *)v31->n128_u64[1];
          v22 = 1;
        }
        while (v31 != (__n128 *)a4);
      }
    }
    else
    {
      sub_1001A5CBC(a4);
      v22 = 0;
      v40 = 1;
    }
LABEL_23:
    if (SHIBYTE(v52) < 0)
      operator delete(*((void **)&v51 + 1));
    if ((v22 & 1) == 0)
      break;
    if (++v15 == 30)
    {
      v32 = 1;
      goto LABEL_38;
    }
  }
  v32 = v40;
LABEL_38:
  v33 = v68;
  if (v68)
  {
    v34 = (unint64_t *)&v68->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return v32 & 1;
}

void sub_10110C4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a38 < 0)
    operator delete(__p);
  sub_100261F44(v38 - 120);
  _Unwind_Resume(a1);
}

double sub_10110C524(uint64_t a1, double a2)
{
  int v4;
  double v5;
  double v6;
  double v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v12;
  __n128 *v13[3];
  uint64_t v14[3];
  double v15;
  double v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(_BYTE *)(a1 + 1008))
    return -1.0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  sub_100349198(&v17, (uint64_t *)(a1 + 1016));
  LOBYTE(v20) = *(_BYTE *)(a1 + 1036);
  v24 = *(_QWORD *)(a1 + 1064);
  v15 = 0.0;
  v16 = 0.0;
  v14[0] = (uint64_t)v14;
  v14[1] = (uint64_t)v14;
  v14[2] = 0;
  v13[0] = (__n128 *)v13;
  v13[1] = (__n128 *)v13;
  v13[2] = 0;
  v12 = 0;
  v4 = sub_10110C198(a1, &v17, &v12, v14, v13, &v16, &v15, a2);
  v5 = -1.0;
  if (v4)
  {
    v7 = v15;
    v6 = v16;
    if (!sub_10011CE64(v16, v15))
      v5 = sub_10011E634((double *)(a1 + 608), *(double *)(a1 + 1280), *(double *)(a1 + 1288), v6, v7, *(double *)(a1 + 1200));
  }
  sub_1001A5CBC((uint64_t *)v13);
  sub_1001A5CBC(v14);
  v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v5;
}

void sub_10110C670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_1001A5CBC((uint64_t *)va);
  sub_1001A5CBC((uint64_t *)va1);
  sub_100261F44((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_10110C694(uint64_t a1, uint64_t *a2, uint64_t *a3, double a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v20 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  sub_100349198(&v16, (uint64_t *)(a1 + 1856));
  LOBYTE(v19) = *(_BYTE *)(a1 + 1876);
  v23 = *(_QWORD *)(a1 + 1904);
  sub_1001A5CBC(a2);
  sub_1001A5CBC(a3);
  v13 = 0;
  v8 = sub_10110C198(a1, &v16, &v13, a2, (__n128 **)a3, &v15, &v14, a4);
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

void sub_10110C784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10110C798(uint64_t a1, uint64_t *a2, char a3, double a4, double a5, double a6)
{
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int *v17;
  int *v18;
  uint64_t v19;
  double *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  const char *v34;
  char *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  int v38;
  std::__shared_weak_count *v39;
  void *v40;
  void *v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  double v46;
  double v47;
  double v48;
  void *v49;
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  void *v60;
  void *v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *__p;
  char v67;

  v11 = a2[1];
  v51 = *a2;
  v52 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_100F5C398((uint64_t)&v53, (uint64_t)&v51, a3);
  v14 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (int *)sub_101124434(a1 + 984, (uint64_t)&v53);
  v18 = v17;
  if ((int *)(a1 + 992) == v17)
  {
    sub_1011235B0((uint64_t)&v36);
    sub_100349198(&v36, a2);
    v46 = a5;
    v47 = a6;
    v48 = a4;
    v38 = 1;
    v55 = v53;
    v56 = v54;
    sub_10112383C((uint64_t)&v57, (uint64_t)&v36);
    sub_1011244AC((uint64_t **)(a1 + 984), (uint64_t)&v55, &v55);
    if (v67 < 0)
      operator delete(__p);
    if (v65 < 0)
      operator delete(v64);
    if (v63 < 0)
      operator delete(v62);
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    v21 = v59;
    if (v59)
    {
      v22 = (unint64_t *)&v59->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v58;
    if (v58)
    {
      v25 = (unint64_t *)&v58->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v50 < 0)
      operator delete(v49);
    if (v45 < 0)
      operator delete(v44);
    if (v43 < 0)
      operator delete(v42);
    if (v40)
    {
      v41 = v40;
      operator delete(v40);
    }
    v27 = v39;
    if (v39)
    {
      v28 = (unint64_t *)&v39->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = v37;
    if (v37)
    {
      v31 = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  else if (v17[18] > 95)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v33 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v55) = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "CLMM,Unexpected out of bounds array access attempt", (uint8_t *)&v55, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&v55, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      LOWORD(v36) = 0;
      _os_log_send_and_compose_impl(2, 0, &v55, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected out of bounds array access attempt", &v36, 2);
      v35 = (char *)v34;
      sub_100512490("Generic", 1, 0, 0, "void CLParticleMapMatcher::updateCandidate(const CLMapRoadPtr &, BOOL, double, double, double)", "%s\n", v34);
      if (v35 != (char *)&v55)
        free(v35);
    }
  }
  else
  {
    sub_100349198((_QWORD *)v17 + 7, a2);
    v19 = v18[18];
    v20 = (double *)&v18[2 * v19 + 14];
    v20[134] = a5;
    v20[230] = a6;
    v20[326] = a4;
    v18[18] = v19 + 1;
  }
}

void sub_10110CC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10110CC68((uint64_t)&STACK[0x1540]);
  sub_10110CCE0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10110CC68(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 5087) < 0)
    operator delete(*(void **)(a1 + 5064));
  if (*(char *)(a1 + 807) < 0)
    operator delete(*(void **)(a1 + 784));
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 48);
  sub_100261F44(a1 + 24);
  return a1;
}

uint64_t sub_10110CCE0(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 5063) < 0)
    operator delete(*(void **)(a1 + 5040));
  if (*(char *)(a1 + 783) < 0)
    operator delete(*(void **)(a1 + 760));
  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 24);
  return sub_100261F44(a1);
}

uint64_t sub_10110CD4C(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double *v14;
  uint64_t v15;
  int v16;
  double *v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int *v30;
  int *v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  int *v40;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  double v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int *v64;
  int *v65;
  uint64_t v66;
  int v67;
  double v68;
  int *v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __n128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint8_t *v97;
  NSObject *v98;
  int v99;
  NSObject *v100;
  const char *v101;
  uint8_t *v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  NSObject *v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  int *v112;
  NSObject *v113;
  const char *v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  const char *v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  const char *v129;
  uint8_t *v130;
  const char *v131;
  uint8_t *v132;
  NSObject *v133;
  const char *v134;
  uint8_t *v135;
  NSObject *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  const char *v141;
  uint8_t *v142;
  const char *v143;
  uint64_t v144;
  _OWORD *v145;
  int v146;
  __int128 v147;
  unint64_t v148;
  int __str;
  int *v150;
  __n128 *v151;
  std::__shared_weak_count *v152;
  double v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  _BYTE v156[24];
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  int v163;
  uint64_t v164;
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  int v168;
  __int16 v169;
  int v170;
  _BYTE v171[48];
  _BYTE v172[88];
  __int128 v173;
  double v174[35];
  uint8_t buf[4];
  uint64_t v176;
  __int16 v177;
  uint64_t v178;
  __int16 v179;
  int v180;
  __int16 v181;
  int v182;

  if (*(_QWORD *)(a1 + 872) == *(_QWORD *)(a1 + 864))
    return 1;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v2 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,Assessing candidates", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      *(_WORD *)v171 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Assessing candidates", v171, 2);
      v142 = (uint8_t *)v141;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v141);
      if (v142 != buf)
        free(v142);
    }
  }
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v161 = *(_QWORD *)(a1 + 8);
  v162 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v148 = *(_QWORD *)(a1 + 1000);
  v6 = *(_QWORD **)(a1 + 984);
  v150 = (int *)(a1 + 992);
  if (v6 != (_QWORD *)(a1 + 992))
  {
    while (1)
    {
      v7 = v6[7];
      *((_BYTE *)v6 + 200) = 0;
      *((_BYTE *)v6 + 192) = 0;
      if (!v7)
        break;
      if (*(_BYTE *)(v7 + 17))
        *(_BYTE *)(a1 + 1844) = 1;
      v8 = *(_OWORD *)(a1 + 1128);
      v9 = *(_OWORD *)(a1 + 1144);
      v10 = *(_OWORD *)(a1 + 1160);
      *(_OWORD *)(v6 + 627) = *(_OWORD *)(a1 + 1176);
      *(_OWORD *)(v6 + 625) = v10;
      *(_OWORD *)(v6 + 623) = v9;
      *(_OWORD *)(v6 + 621) = v8;
      v11 = *(_OWORD *)(a1 + 1192);
      v12 = *(_OWORD *)(a1 + 1208);
      v13 = *(_OWORD *)(a1 + 1224);
      *(_OWORD *)(v6 + 635) = *(_OWORD *)(a1 + 1240);
      *(_OWORD *)(v6 + 633) = v13;
      *(_OWORD *)(v6 + 631) = v12;
      *(_OWORD *)(v6 + 629) = v11;
      std::string::operator=((std::string *)(v6 + 637), (const std::string *)(a1 + 1256));
      memcpy(v6 + 640, (const void *)(a1 + 1280), 0x118uLL);
      if (!sub_1010CEB60(v161, (uint64_t)(v6 + 621), (double **)v6 + 7, *((_BYTE *)v6 + 48), (double *)v6 + 333, *((_DWORD *)v6 + 18)))
      {
        if (!*(_BYTE *)(a1 + 96))
          goto LABEL_218;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v136 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEBUG, "CLMM,interpolateOnRoad returned false, determining mean road position", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_218;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        *(_WORD *)v171 = 0;
        LODWORD(v144) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateOnRoad returned false, determining mean road position", v171, v144);
        v135 = (uint8_t *)v143;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v143);
LABEL_233:
        if (v135 != buf)
          free(v135);
LABEL_218:
        v39 = 0;
        ++*(_DWORD *)(a1 + 104);
        goto LABEL_219;
      }
      v14 = (double *)(v6 + 677);
      *(_OWORD *)(v6 + 677) = xmmword_101BAFDC0;
      if (*((int *)v6 + 18) < 1)
      {
        v16 = 0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
        do
        {
          if (sub_10011E634((double *)(a1 + 608), *((double *)v6 + 640), *((double *)v6 + 641), *(double *)&v6[v15 + 141], *(double *)&v6[v15 + 237], *(double *)(a1 + 1200)) <= 40.0)
          {
            v17 = (double *)&v6[v15];
            v18 = v17[333];
            if (v18 > *((double *)v6 + 678))
            {
              *((double *)v6 + 678) = v18;
              v18 = v17[333];
            }
            ++v16;
            if (v18 < *v14)
              *v14 = v18;
          }
          ++v15;
        }
        while (v15 < *((int *)v6 + 18));
      }
      *((_DWORD *)v6 + 19) = v16;
      v19 = *(_QWORD *)(a1 + 872);
      v20 = *(_QWORD *)(a1 + 864);
      if (v20 != v19)
      {
        v21 = 0.0;
        do
        {
          sub_10110E724((uint64_t *)v20, (uint64_t)buf);
          if (sub_100F5C3F4((uint64_t)buf, (uint64_t)(v6 + 4)) && *(double *)(v20 + 56) > v21)
          {
            v19 = v20;
            v21 = *(double *)(v20 + 56);
          }
          v20 += 112;
        }
        while (v20 != *(_QWORD *)(a1 + 872));
        if (v20 != v19)
        {
          sub_100349198(v6 + 10, (uint64_t *)v19);
          v22 = *(_QWORD *)(v19 + 48);
          v23 = *(_OWORD *)(v19 + 32);
          *((_OWORD *)v6 + 6) = *(_OWORD *)(v19 + 16);
          *((_OWORD *)v6 + 7) = v23;
          v6[16] = v22;
          v24 = *(_OWORD *)(v19 + 56);
          *(_OWORD *)((char *)v6 + 145) = *(_OWORD *)(v19 + 65);
          *(_OWORD *)(v6 + 17) = v24;
          if (v6 + 10 != (_QWORD *)v19)
            sub_100F5F1C8((char *)v6 + 168, *(char **)(v19 + 88), *(_QWORD *)(v19 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v19 + 96) - *(_QWORD *)(v19 + 88)) >> 3));
        }
      }
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v25 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v26 = *(_QWORD *)(a1 + 1136);
          v27 = v6[4];
          v28 = *((unsigned __int8 *)v6 + 48);
          v29 = *((_DWORD *)v6 + 19);
          *(_DWORD *)buf = 134349825;
          v176 = v26;
          v177 = 2049;
          v178 = v27;
          v179 = 1026;
          v180 = v28;
          v181 = 1026;
          v182 = v29;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,candidate,roadID,%{private}llu,fwd,%{public}d,countAroundMean,%{public}d", buf, 0x22u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v33 = *(_QWORD *)(a1 + 1136);
          v34 = v6[4];
          v35 = *((unsigned __int8 *)v6 + 48);
          v36 = *((_DWORD *)v6 + 19);
          *(_DWORD *)v171 = 134349825;
          *(_QWORD *)&v171[4] = v33;
          *(_WORD *)&v171[12] = 2049;
          *(_QWORD *)&v171[14] = v34;
          *(_WORD *)&v171[22] = 1026;
          *(_DWORD *)&v171[24] = v35;
          *(_WORD *)&v171[28] = 1026;
          *(_DWORD *)&v171[30] = v36;
          LODWORD(v144) = 34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Time,%{public}.1lf,candidate,roadID,%{private}llu,fwd,%{public}d,countAroundMean,%{public}d", v171, v144);
          v38 = (uint8_t *)v37;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v37);
          if (v38 != buf)
            free(v38);
        }
      }
      v30 = (int *)v6[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = *(int **)v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (int *)v6[2];
          _ZF = *(_QWORD *)v31 == (_QWORD)v6;
          v6 = v31;
        }
        while (!_ZF);
      }
      v6 = v31;
      if (v31 == v150)
        goto LABEL_53;
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v133 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_ERROR, "CLMM,NULL road, bad candidate", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_218;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    *(_WORD *)v171 = 0;
    LODWORD(v144) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,NULL road, bad candidate", v171, v144);
    v135 = (uint8_t *)v134;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v134);
    goto LABEL_233;
  }
LABEL_53:
  if (v148 < 2)
    goto LABEL_54;
  v40 = *(int **)(a1 + 984);
  v39 = 1;
  if (v40 == v150)
    goto LABEL_219;
  __asm { FMOV            V0.2D, #-1.0 }
  v147 = _Q0;
  while (2)
  {
    v160 = 0;
    v45 = *(_QWORD *)(a1 + 1136);
    *(_QWORD *)v171 = 0;
    *(_QWORD *)&v171[8] = v45;
    *(_OWORD *)&v171[16] = v147;
    *(_OWORD *)&v171[32] = 0uLL;
    *(_QWORD *)v172 = 0xBFF0000000000000;
    v174[15] = 0.0;
    LODWORD(v174[16]) = 0;
    memset(&v174[10], 0, 34);
    memset(&v174[17], 0, 75);
    memset(&v174[27], 0, 56);
    memset(v174, 0, 78);
    v173 = 0u;
    memset(&v172[8], 0, 80);
    v174[34] = -1.0;
    v157 = (uint64_t)&v157;
    v158 = &v157;
    v159 = 0;
    v46 = 1354;
    if (!*((_BYTE *)v40 + 48))
      v46 = 1356;
    if (((*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *, _QWORD, uint64_t, _QWORD *, double, double))(*(_QWORD *)v161 + 80))(v161, v171, &v157, 0, 1, (_QWORD *)v40 + 7, *(double *)&v40[v46], 40.0) & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v98 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEBUG, "CLMM,roadsAtIntersection returned false, searching for connected candidates", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          LOWORD(v163) = 0;
          LODWORD(v144) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,roadsAtIntersection returned false, searching for connected candidates", &v163, v144);
          v115 = (uint8_t *)v114;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v114);
          if (v115 != buf)
            free(v115);
        }
      }
      ++*(_DWORD *)(a1 + 108);
LABEL_133:
      v99 = 1;
      goto LABEL_161;
    }
    if (!v159)
      goto LABEL_160;
    v47 = v40[18];
    if (v47 < 1)
    {
LABEL_134:
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v100 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "CLMM,unexpected incomingCount < 1", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          LOWORD(v163) = 0;
          LODWORD(v144) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,unexpected incomingCount < 1", &v163, v144);
          v102 = (uint8_t *)v101;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v101);
          if (v102 != buf)
            free(v102);
        }
      }
      goto LABEL_160;
    }
    v48 = 0;
    v49 = 0;
    do
    {
      v50 = *(double *)&v40[2 * v48 + 666];
      if (*((_BYTE *)v40 + 48))
      {
        if (v50 < v174[15])
          goto LABEL_70;
      }
      else if (v50 < v174[15])
      {
        goto LABEL_70;
      }
      if (sub_10011E634((double *)(a1 + 608), v174[0], v174[1], *(double *)&v40[2 * v48 + 282], *(double *)&v40[2 * v48 + 474], *(double *)(a1 + 1200)) <= 40.0)++v49;
      v47 = v40[18];
LABEL_70:
      ++v48;
    }
    while (v48 < v47);
    if (v49 < 1)
      goto LABEL_134;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v51 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v52 = *(_QWORD *)(a1 + 1136);
        v53 = *((_QWORD *)v40 + 4);
        v54 = v40[19];
        *(_DWORD *)buf = 134349569;
        v176 = v52;
        v177 = 2049;
        v178 = v53;
        v179 = 1026;
        v180 = v54;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,incoming,countAroundMean,%{public}d", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v116 = *(_QWORD *)(a1 + 1136);
        v117 = *((_QWORD *)v40 + 4);
        v118 = v40[19];
        v163 = 134349569;
        v164 = v116;
        v165 = 2049;
        v166 = v117;
        v167 = 1026;
        v168 = v118;
        LODWORD(v144) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,incoming,countAroundMean,%{public}d", &v163, v144);
        v120 = (uint8_t *)v119;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v119);
        if (v120 != buf)
          free(v120);
      }
    }
    v40[52] = v49;
    v55 = v158;
    if (v158 == &v157)
      goto LABEL_154;
    v56 = 0;
    v146 = 0;
    v57 = 0;
    v145 = v40 + 172;
    while (2)
    {
      if (*(_QWORD *)v55[2] == *((_QWORD *)v40 + 4)
        && *((unsigned __int8 *)v55 + 32) == (*((unsigned __int8 *)v40 + 48) ^ 1))
      {
        goto LABEL_120;
      }
      __str = v57;
      v58 = (std::__shared_weak_count *)v55[3];
      v154 = v55[2];
      v155 = v58;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      sub_100F5C398((uint64_t)v156, (uint64_t)&v154, *((_BYTE *)v55 + 32));
      v61 = v155;
      if (v155)
      {
        v62 = (unint64_t *)&v155->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = (int *)sub_101124434(a1 + 984, (uint64_t)v156);
      v65 = v64;
      v153 = 0.0;
      if (v150 == v64 || v64[18] < 1)
      {
LABEL_118:
        v73 = v56;
        goto LABEL_119;
      }
      v66 = 0;
      v67 = 0;
      v68 = 0.0;
      while (2)
      {
        v69 = &v65[2 * v66];
        v70 = *((double *)v69 + 333);
        v71 = *((double *)v55 + 5);
        if (*((_BYTE *)v65 + 48))
        {
          if (v70 <= v71)
            goto LABEL_99;
        }
        else if (v70 >= v71)
        {
          goto LABEL_99;
        }
        v72 = sub_10011E634((double *)(a1 + 608), v174[0], v174[1], *(double *)&v65[2 * v66 + 282], *(double *)&v65[2 * v66 + 474], *(double *)(a1 + 1200));
        if (v72 <= 40.0)
        {
          v153 = *((double *)v69 + 333) + v153;
          v68 = v68 + v72;
          ++v67;
        }
LABEL_99:
        if (++v66 < v65[18])
          continue;
        break;
      }
      if (!v67)
        goto LABEL_118;
      ++v146;
      v153 = v153 / (double)v67;
      v73 = (v67 + v49);
      if ((int)v73 <= (int)v56)
        goto LABEL_118;
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v74 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v75 = *(_QWORD *)(a1 + 1136);
          v76 = *((_QWORD *)v40 + 4);
          *(_DWORD *)buf = 134349825;
          v176 = v75;
          v177 = 2049;
          v178 = v76;
          v179 = 1026;
          v180 = v49;
          v181 = 1026;
          v182 = v67;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,combinedBest,roadID,%{private}llu,incomingCount,%{public}d,outgoingCount,%{public}d", buf, 0x22u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v94 = *(_QWORD *)(a1 + 1136);
          v95 = *((_QWORD *)v40 + 4);
          v163 = 134349825;
          v164 = v94;
          v165 = 2049;
          v166 = v95;
          v167 = 1026;
          v168 = v49;
          v169 = 1026;
          v170 = v67;
          LODWORD(v144) = 34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Time,%{public}.1lf,combinedBest,roadID,%{private}llu,incomingCount,%{public}d,outgoingCount,%{public}d", &v163, v144);
          v97 = (uint8_t *)v96;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v96);
          if (v97 != buf)
            free(v97);
        }
      }
      v77 = *(_OWORD *)&v172[32];
      *((_OWORD *)v40 + 20) = *(_OWORD *)&v172[16];
      *((_OWORD *)v40 + 21) = v77;
      v78 = *(_OWORD *)&v172[64];
      *((_OWORD *)v40 + 22) = *(_OWORD *)&v172[48];
      *((_OWORD *)v40 + 23) = v78;
      v79 = *(_OWORD *)&v171[16];
      *((_OWORD *)v40 + 16) = *(_OWORD *)v171;
      *((_OWORD *)v40 + 17) = v79;
      v80 = *(_OWORD *)v172;
      *((_OWORD *)v40 + 18) = *(_OWORD *)&v171[32];
      *((_OWORD *)v40 + 19) = v80;
      std::string::operator=((std::string *)v40 + 16, (const std::string *)&v172[80]);
      memcpy(v40 + 102, v174, 0x118uLL);
      v40[53] = v67;
      v40[54] = v73;
      *((double *)v40 + 31) = v68 / (double)v67;
      *((_QWORD *)v40 + 140) = v55[5];
      v81 = (std::__shared_weak_count *)*((_QWORD *)v65 + 8);
      v151 = (__n128 *)*((_QWORD *)v65 + 7);
      v152 = v81;
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = sub_100F5C384((__n128 *)v40 + 14, &v151, *((_BYTE *)v65 + 48));
      v85 = v152;
      if (v152)
      {
        v86 = (unint64_t *)&v152->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v85->__on_zero_shared)(v85, v84);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v88 = *(_OWORD *)(a1 + 1128);
      v89 = *(_OWORD *)(a1 + 1144);
      v90 = *(_OWORD *)(a1 + 1176);
      *((_OWORD *)v40 + 45) = *(_OWORD *)(a1 + 1160);
      *((_OWORD *)v40 + 46) = v90;
      *v145 = v88;
      *((_OWORD *)v40 + 44) = v89;
      v91 = *(_OWORD *)(a1 + 1192);
      v92 = *(_OWORD *)(a1 + 1208);
      v93 = *(_OWORD *)(a1 + 1240);
      *((_OWORD *)v40 + 49) = *(_OWORD *)(a1 + 1224);
      *((_OWORD *)v40 + 50) = v93;
      *((_OWORD *)v40 + 47) = v91;
      *((_OWORD *)v40 + 48) = v92;
      std::string::operator=((std::string *)v40 + 34, (const std::string *)(a1 + 1256));
      memcpy(v40 + 210, (const void *)(a1 + 1280), 0x118uLL);
      if (!sub_1010CEB60(v161, (uint64_t)v145, (double **)v65 + 7, *((_BYTE *)v65 + 48), &v153, 1))
      {
        if (*(_BYTE *)(a1 + 96))
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v113 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "CLMM,interpolateOnRoad returned false, determining outgoing road position", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            LOWORD(v163) = 0;
            LODWORD(v144) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateOnRoad returned false, determining outgoing road position", &v163, v144);
            v132 = (uint8_t *)v131;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v131);
            if (v132 != buf)
              free(v132);
          }
        }
        ++*(_DWORD *)(a1 + 104);
        goto LABEL_133;
      }
LABEL_119:
      v57 = __str + 1;
      v56 = v73;
LABEL_120:
      v55 = (uint64_t *)v55[1];
      if (v55 != &v157)
        continue;
      break;
    }
    if ((int)v56 >= 1)
    {
      *((_BYTE *)v40 + 200) = 1;
      if (v57 > 1)
        *((_BYTE *)v40 + 192) = 1;
      v40[49] = v146;
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_153;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v103 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v104 = *(_QWORD *)(a1 + 1136);
        v105 = *((_QWORD *)v40 + 4);
        v106 = *((unsigned __int8 *)v40 + 200);
        v107 = *((unsigned __int8 *)v40 + 192);
        *(_DWORD *)buf = 134349825;
        v176 = v104;
        v177 = 2049;
        v178 = v105;
        v179 = 1026;
        v180 = v106;
        v181 = 1026;
        v182 = v107;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,isCombined,%{public}d,isMulti,%{public}d", buf, 0x22u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v125 = *(_QWORD *)(a1 + 1136);
        v126 = *((_QWORD *)v40 + 4);
        v127 = *((unsigned __int8 *)v40 + 200);
        v128 = *((unsigned __int8 *)v40 + 192);
        v163 = 134349825;
        v164 = v125;
        v165 = 2049;
        v166 = v126;
        v167 = 1026;
        v168 = v127;
        v169 = 1026;
        v170 = v128;
        LODWORD(v144) = 34;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,isCombined,%{public}d,isMulti,%{public}d", &v163, v144);
        v130 = (uint8_t *)v129;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v129);
        if (v130 != buf)
          free(v130);
        v99 = 0;
      }
      else
      {
LABEL_153:
        v99 = 0;
      }
      goto LABEL_161;
    }
LABEL_154:
    if (!*(_BYTE *)(a1 + 96))
    {
      v99 = 37;
      goto LABEL_161;
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v108 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v109 = *(_QWORD *)(a1 + 1136);
      v110 = *((_QWORD *)v40 + 4);
      *(_DWORD *)buf = 134349313;
      v176 = v109;
      v177 = 2049;
      v178 = v110;
      _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,no particles after the intersection", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
    {
LABEL_160:
      v99 = 37;
      goto LABEL_161;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v121 = *(_QWORD *)(a1 + 1136);
    v122 = *((_QWORD *)v40 + 4);
    v163 = 134349313;
    v164 = v121;
    v165 = 2049;
    v166 = v122;
    LODWORD(v144) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,no particles after the intersection", &v163, v144);
    v124 = (uint8_t *)v123;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v123);
    if (v124 != buf)
      free(v124);
    v99 = 37;
LABEL_161:
    sub_1001A5CBC(&v157);
    if (SHIBYTE(v173) < 0)
      operator delete(*(void **)&v172[80]);
    if (v99 == 37 || !v99)
    {
      v111 = (int *)*((_QWORD *)v40 + 1);
      if (v111)
      {
        do
        {
          v112 = v111;
          v111 = *(int **)v111;
        }
        while (v111);
      }
      else
      {
        do
        {
          v112 = (int *)*((_QWORD *)v40 + 2);
          _ZF = *(_QWORD *)v112 == (_QWORD)v40;
          v40 = v112;
        }
        while (!_ZF);
      }
      v40 = v112;
      if (v112 == v150)
      {
LABEL_54:
        v39 = 1;
        goto LABEL_219;
      }
      continue;
    }
    break;
  }
  v39 = 0;
LABEL_219:
  v137 = v162;
  if (v162)
  {
    v138 = (unint64_t *)&v162->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  return v39;
}

void sub_10110E67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_100261F44((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_10110E724(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a1[1];
  v10 = *a1;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_100F5C398(a2, (uint64_t)&v10, *((_BYTE *)a1 + 20));
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_10110E7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10110E7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  sub_100349198((_QWORD *)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 56) = v6;
  if (a1 != a2)
    sub_100F5F1C8((char *)(a1 + 88), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
  return a1;
}

uint64_t sub_10110E83C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v10;
  double v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  NSObject *v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  BOOL v36;
  double v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  char v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  char *v85;
  NSObject *v86;
  uint64_t *v87;
  int v88;
  uint64_t **v89;
  __int128 v90;
  __int128 v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  char *v104;
  int v105;
  unint64_t v106;
  int v107;
  int v108;
  NSObject *v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  double v114;
  double v115;
  double *v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  double v122;
  double v123;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  int v131;
  char v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  NSObject *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  char **v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  char *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  char *v162;
  char *v163;
  char *v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  const char *v173;
  char *v174;
  NSObject *v175;
  uint64_t v176;
  uint64_t v177;
  NSObject *v178;
  const char *v179;
  uint64_t v180;
  void **v181;
  _QWORD *v182;
  float *v183;
  double v184;
  uint64_t v185;
  double v186;
  float v187;
  float *v188;
  float *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  float *v195;
  int v196;
  uint64_t v197;
  double v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  NSObject *v203;
  const char *v204;
  NSObject *v205;
  const char *v206;
  char *v207;
  NSObject *v208;
  const char *v209;
  NSObject *v210;
  const char *v211;
  NSObject *v212;
  uint64_t v213;
  uint64_t v214;
  const char *v215;
  char *v216;
  uint64_t v217;
  const char *v218;
  int v219;
  const char *v220;
  char *v221;
  const char *v222;
  char *v223;
  const char *v224;
  char *v225;
  const char *v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  double v233;
  int v234;
  double v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  _QWORD v248[11];
  void *v249;
  _BYTE *v250;
  uint64_t v251;
  _BYTE v252[32];
  _BYTE v253[24];
  _BYTE buf[32];
  _OWORD v255[2];
  __int128 v256;
  char v257;
  void *__p;
  void *v259;
  uint64_t v260;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  v246 = *(_QWORD *)(a1 + 8);
  v247 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(double *)(a1 + 2064);
  v6 = 0.0;
  if (v5 >= 0.0)
  {
    if (*(double *)(a1 + 2152) > 0.0)
      v6 = *(double *)(a1 + 2152);
    else
      v6 = 0.0;
  }
  v7 = *(double *)(a1 + 1224);
  if (v7 >= 0.0)
  {
    v8 = *(double *)(a1 + 1640);
    if (v5 >= 0.0 && v8 < 2.2)
      v7 = (v5 + v7) * 0.5;
    *(double *)(a1 + 1792) = v7;
  }
  else
  {
    *(_QWORD *)(a1 + 1792) = 0;
    v8 = *(double *)(a1 + 1640);
    v7 = 0.0;
  }
  v10 = v7 * v8;
  if (*(double *)(a1 + 2048) > 0.0 && v8 < 2.2)
  {
    v12 = sub_10011E634((double *)(a1 + 608), *(double *)(a1 + 1184), *(double *)(a1 + 1192), *(double *)(a1 + 2024), *(double *)(a1 + 2032), *(double *)(a1 + 1200));
    if (v12 > 300.0)
    {
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_84;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v26 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v27 = *(_QWORD *)(a1 + 1640);
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLMM, Position jump(m),%{public}.1lf,dT(s),%{public}.1lf", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_84;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v28 = *(_QWORD *)(a1 + 1640);
      LODWORD(v248[0]) = 134349312;
      *(double *)((char *)v248 + 4) = v12;
      WORD2(v248[1]) = 2050;
      *(_QWORD *)((char *)&v248[1] + 6) = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM, Position jump(m),%{public}.1lf,dT(s),%{public}.1lf", v248, 22);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v29);
LABEL_417:
      if (v30 != buf)
        free(v30);
      goto LABEL_84;
    }
    *(double *)(a1 + 1800) = v10;
    if (*(double *)(a1 + 1792) <= 0.0 || v12 < 0.0 || *(_BYTE *)(a1 + 1356))
    {
      if (v12 >= 0.0 && !*(_BYTE *)(a1 + 1356))
        *(double *)(a1 + 1800) = v12;
    }
    else
    {
      *(double *)(a1 + 1800) = (v10 + v12) * 0.5;
    }
  }
  else
  {
    *(double *)(a1 + 1800) = v10;
    v12 = -1.0;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v13 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)(a1 + 1136);
      v15 = *(_QWORD *)(a1 + 1800);
      *(_DWORD *)buf = 134349824;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v15;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v10;
      LOWORD(v255[0]) = 2050;
      *(double *)((char *)v255 + 2) = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,predictionAndUpdate,distance,%{public}.1lf,distBasedOnSpeed,%{public}.1lf,distBasedOnPos,%{public}.1lf", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v213 = *(_QWORD *)(a1 + 1136);
      v214 = *(_QWORD *)(a1 + 1800);
      LODWORD(v248[0]) = 134349824;
      *(_QWORD *)((char *)v248 + 4) = v213;
      WORD2(v248[1]) = 2050;
      *(_QWORD *)((char *)&v248[1] + 6) = v214;
      HIWORD(v248[2]) = 2050;
      *(double *)&v248[3] = v10;
      LOWORD(v248[4]) = 2050;
      *(double *)((char *)&v248[4] + 2) = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,predictionAndUpdate,distance,%{public}.1lf,distBasedOnSpeed,%{public}.1lf,distBasedOnPos,%{public}.1lf", v248, 42);
      v216 = (char *)v215;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v215);
      if (v216 != buf)
        free(v216);
    }
  }
  *(_QWORD *)(a1 + 1608) = 0xBFF0000000000000;
  v16 = *(_QWORD *)(a1 + 872);
  v17 = *(_QWORD *)(a1 + 864);
  v18 = v16 - v17;
  if (v16 == v17)
  {
LABEL_360:
    v44 = 1;
    goto LABEL_361;
  }
  v19 = *(double *)(a1 + 1800);
  v20 = *(double *)(a1 + 1640);
  v21 = v20 * v20;
  if (*(_BYTE *)(a1 + 1356) && v20 > 4.9)
  {
    v22 = 24.01;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v23 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v21;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = 0x4038028F5C28F5C4;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLMM,dT2 limited,from,%{public}.1lf,to,%{public}.1lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        LODWORD(v248[0]) = 134349312;
        *(double *)((char *)v248 + 4) = v21;
        WORD2(v248[1]) = 2050;
        *(_QWORD *)((char *)&v248[1] + 6) = 0x4038028F5C28F5C4;
        LODWORD(v227) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,dT2 limited,from,%{public}.1lf,to,%{public}.1lf", v248, v227);
        v25 = (char *)v24;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
    }
  }
  else
  {
    v22 = v20 * v20;
  }
  v31 = v22 * ((v6 * v6 + *(double *)(a1 + 1312) * *(double *)(a1 + 1312)) * 0.25);
  *(double *)(a1 + 1808) = v31;
  v32 = *(double *)(a1 + 1792);
  v33 = v22 * 3.0;
  if (v32 >= 8.05555556)
    v33 = v22;
  *(double *)(a1 + 1816) = v33;
  v34 = v22 * (v32 * v32 * 0.25);
  *(double *)(a1 + 1824) = v34;
  *(double *)(a1 + 1832) = sqrt(v31 + v33 + v34);
  v35 = *(double *)(a1 + 1640);
  if (v35 <= 0.0 || (v35 > 4.9 ? (v36 = *(_BYTE *)(a1 + 1356) == 0) : (v36 = 0), v36 || v35 > 75.0))
  {
    if (!*(_BYTE *)(a1 + 96))
      goto LABEL_84;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v42 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v43 = *(_QWORD *)(a1 + 1640);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v43;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = 0x401399999999999ALL;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = 0x4052C00000000000;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "#Warning CLMM,unexpected,dT,%{public}.1lf,minMoreThan,0,threshold1,%{public}.1lf,threshold2,%{public}.1lf", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_84;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v217 = *(_QWORD *)(a1 + 1640);
    LODWORD(v248[0]) = 134349568;
    *(_QWORD *)((char *)v248 + 4) = v217;
    WORD2(v248[1]) = 2050;
    *(_QWORD *)((char *)&v248[1] + 6) = 0x401399999999999ALL;
    HIWORD(v248[2]) = 2050;
    v248[3] = 0x4052C00000000000;
    LODWORD(v227) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "#Warning CLMM,unexpected,dT,%{public}.1lf,minMoreThan,0,threshold1,%{public}.1lf,threshold2,%{public}.1lf", v248, v227);
    v30 = (char *)v218;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v218);
    goto LABEL_417;
  }
  v242 = (uint64_t *)(a1 + 864);
  if (*(_BYTE *)(a1 + 2688))
  {
    v37 = sub_10011E634((double *)(a1 + 608), *(double *)(a1 + 2120), *(double *)(a1 + 2128), *(double *)(a1 + 2744), *(double *)(a1 + 2752), *(double *)(a1 + 1200));
    v38 = *(_DWORD *)(a1 + 2824);
    v39 = 4 * v38;
    if (v38 >= 1)
    {
      if (v39 <= 1)
        v40 = 1;
      else
        v40 = 4 * v38;
      v41 = *(_QWORD *)(a1 + 872);
      do
      {
        if (v41 >= *(_QWORD *)(a1 + 880))
        {
          v41 = sub_1011247EC(v242, a1 + 2712);
        }
        else
        {
          sub_101124910(a1 + 880, v41, a1 + 2712);
          v41 += 112;
          *(_QWORD *)(a1 + 872) = v41;
        }
        *(_QWORD *)(a1 + 872) = v41;
        --v40;
      }
      while (v40);
    }
  }
  else
  {
    v39 = 0;
    v37 = 0.0;
  }
  v232 = v18;
  v234 = v39;
  if (*(_BYTE *)(a1 + 2232))
  {
    v45 = a1 + 3048;
    v46 = a1 + 3096;
    if ((sub_10110C694(a1, (uint64_t *)(a1 + 3048), (uint64_t *)(a1 + 3096), 80.0) & 1) == 0)
      goto LABEL_409;
    v47 = *(_QWORD *)(a1 + 3104);
    if (v47 == v46)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      do
      {
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&buf[24] = 0;
        v259 = 0;
        v260 = 0;
        __p = 0;
        memset(v255, 0, sizeof(v255));
        v256 = 0u;
        v257 = 0;
        sub_100349198(buf, (uint64_t *)(v47 + 16));
        *(_QWORD *)&v255[1] = *(_QWORD *)(v47 + 40);
        buf[20] = *(_BYTE *)(v47 + 32);
        v48 += 6;
        v49 = *(_QWORD *)(a1 + 872);
        v50 = 6;
        do
        {
          if (v49 >= *(_QWORD *)(a1 + 880))
          {
            v49 = sub_1011247EC(v242, (uint64_t)buf);
          }
          else
          {
            sub_101124910(a1 + 880, v49, (uint64_t)buf);
            v49 += 112;
            *(_QWORD *)(a1 + 872) = v49;
          }
          *(_QWORD *)(a1 + 872) = v49;
          --v50;
        }
        while (v50);
        if (__p)
        {
          v259 = __p;
          operator delete(__p);
        }
        v51 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v52 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v47 = *(_QWORD *)(v47 + 8);
      }
      while (v47 != v46);
    }
    v55 = *(_QWORD *)(a1 + 3056);
    v240 = v48;
    if (v55 != v45)
    {
      v240 = v48;
      do
      {
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&buf[24] = 0;
        v259 = 0;
        v260 = 0;
        __p = 0;
        memset(v255, 0, sizeof(v255));
        v256 = 0u;
        v257 = 0;
        sub_100349198(buf, (uint64_t *)(v55 + 16));
        *(_QWORD *)&v255[1] = *(_QWORD *)(v55 + 40);
        buf[20] = *(_BYTE *)(v55 + 32);
        v240 += 6;
        v56 = *(_QWORD *)(a1 + 872);
        v57 = 6;
        do
        {
          if (v56 >= *(_QWORD *)(a1 + 880))
          {
            v56 = sub_1011247EC(v242, (uint64_t)buf);
          }
          else
          {
            sub_101124910(a1 + 880, v56, (uint64_t)buf);
            v56 += 112;
            *(_QWORD *)(a1 + 872) = v56;
          }
          *(_QWORD *)(a1 + 872) = v56;
          --v57;
        }
        while (v57);
        if (__p)
        {
          v259 = __p;
          operator delete(__p);
        }
        v58 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v59 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v55 = *(_QWORD *)(v55 + 8);
      }
      while (v55 != v45);
    }
    v54 = v48 + v234 + v240;
    if (*(_BYTE *)(a1 + 2232))
    {
      v61 = *(_QWORD *)(a1 + 872);
      v62 = 12;
      do
      {
        if (v61 >= *(_QWORD *)(a1 + 880))
        {
          v61 = sub_1011247EC(v242, a1 + 1856);
        }
        else
        {
          sub_101124910(a1 + 880, v61, a1 + 1856);
          v61 += 112;
          *(_QWORD *)(a1 + 872) = v61;
        }
        *(_QWORD *)(a1 + 872) = v61;
        --v62;
      }
      while (v62);
      v54 += 12;
      v229 = 12;
    }
    else
    {
      v229 = 0;
    }
  }
  else
  {
    v240 = 0;
    v229 = 0;
    v54 = v39;
  }
  v239 = v54;
  if (!*(_BYTE *)(a1 + 114)
    || sub_1002199F0(a1 + 48, *(double *)(a1 + 1152), 6.0)
    || (v63 = *(_QWORD *)(a1 + 4048), v236 = *(_QWORD *)(a1 + 4056), v63 == v236))
  {
    v238 = 0;
  }
  else
  {
    v238 = 0;
    do
    {
      v64 = *(_QWORD *)(v63 + 8);
      *(_QWORD *)v252 = *(_QWORD *)v63;
      *(_QWORD *)&v252[8] = v64;
      if (v64)
      {
        v65 = (unint64_t *)(v64 + 8);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v67 = *(_OWORD *)(v63 + 16);
      v68 = *(_OWORD *)(v63 + 32);
      *(_QWORD *)&v253[16] = *(_QWORD *)(v63 + 48);
      *(_OWORD *)&v252[16] = v67;
      *(_OWORD *)v253 = v68;
      v238 += 2;
      v239 += 2;
      v69 = 1;
      do
      {
        v70 = v69;
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&buf[24] = 0;
        v259 = 0;
        v260 = 0;
        __p = 0;
        memset(v255, 0, sizeof(v255));
        v256 = 0u;
        v257 = 0;
        sub_100349198(buf, (uint64_t *)v252);
        *(_OWORD *)&buf[16] = *(_OWORD *)&v252[16];
        v255[0] = *(_OWORD *)v253;
        *(_QWORD *)&v255[1] = *(_QWORD *)&v253[16];
        v71 = *(_QWORD *)(a1 + 872);
        if (v71 >= *(_QWORD *)(a1 + 880))
        {
          v72 = sub_1011247EC(v242, (uint64_t)buf);
        }
        else
        {
          sub_101124910(a1 + 880, *(_QWORD *)(a1 + 872), (uint64_t)buf);
          v72 = v71 + 112;
          *(_QWORD *)(a1 + 872) = v71 + 112;
        }
        *(_QWORD *)(a1 + 872) = v72;
        if (__p)
        {
          v259 = __p;
          operator delete(__p);
        }
        v73 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v74 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v69 = 0;
      }
      while ((v70 & 1) != 0);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v76 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v77 = *(_QWORD *)(a1 + 1136);
        v78 = **(_QWORD **)v252;
        *(_DWORD *)buf = 134350337;
        *(_QWORD *)&buf[4] = v77;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = *(_QWORD *)v253;
        *(_WORD *)&buf[22] = 2049;
        *(_QWORD *)&buf[24] = *(_QWORD *)&v253[8];
        LOWORD(v255[0]) = 2050;
        *(double *)((char *)v255 + 2) = *(float *)&v252[24];
        WORD5(v255[0]) = 2049;
        *(_QWORD *)((char *)v255 + 12) = v78;
        WORD2(v255[1]) = 1026;
        *(_DWORD *)((char *)&v255[1] + 6) = v252[20];
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHint,add particle,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,rseg,%{private}lld,fwd,%{public}d", buf, 0x3Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v82 = *(_QWORD *)(a1 + 1136);
        v83 = **(_QWORD **)v252;
        LODWORD(v248[0]) = 134350337;
        *(_QWORD *)((char *)v248 + 4) = v82;
        WORD2(v248[1]) = 2049;
        *(_QWORD *)((char *)&v248[1] + 6) = *(_QWORD *)v253;
        HIWORD(v248[2]) = 2049;
        v248[3] = *(_QWORD *)&v253[8];
        LOWORD(v248[4]) = 2050;
        *(double *)((char *)&v248[4] + 2) = *(float *)&v252[24];
        WORD1(v248[5]) = 2049;
        *(_QWORD *)((char *)&v248[5] + 4) = v83;
        WORD2(v248[6]) = 1026;
        *(_DWORD *)((char *)&v248[6] + 6) = v252[20];
        LODWORD(v227) = 58;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHint,add particle,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,rseg,%{private}lld,fwd,%{public}d", v248, v227);
        v85 = (char *)v84;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v84);
        if (v85 != buf)
          free(v85);
      }
      v79 = *(std::__shared_weak_count **)&v252[8];
      if (*(_QWORD *)&v252[8])
      {
        v80 = (unint64_t *)(*(_QWORD *)&v252[8] + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v63 += 56;
    }
    while (v63 != v236);
  }
  if (*(_BYTE *)(a1 + 2684))
  {
    v243 = (uint64_t)&v243;
    v244 = &v243;
    v245 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v246 + 64))(v246, &v243, 40.0) & 1) == 0
      && *(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v86 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "CLMM,railway search,roadsWithinDistance returned false", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        LOWORD(v248[0]) = 0;
        LODWORD(v227) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,railway search,roadsWithinDistance returned false", v248, v227);
        v225 = (char *)v224;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v224);
        if (v225 != buf)
          free(v225);
      }
    }
    if (!v245 || (v87 = v244, v244 == &v243))
    {
      v88 = 0;
    }
    else
    {
      v88 = 0;
      do
      {
        v89 = (uint64_t **)(v87 + 2);
        if (*(_BYTE *)(v87[2] + 17))
        {
          memset(v248, 0, 20);
          WORD2(v248[2]) = 1;
          LODWORD(v248[3]) = 0;
          v250 = 0;
          v251 = 0;
          v249 = 0;
          memset(&v248[4], 0, 49);
          sub_100349198(v248, v87 + 2);
          v90 = *((_OWORD *)v87 + 2);
          v91 = *((_OWORD *)v87 + 3);
          v248[6] = v87[8];
          *(_OWORD *)&v248[2] = v90;
          *(_OWORD *)&v248[4] = v91;
          v92 = *(_QWORD *)(a1 + 872);
          if (v92 >= *(_QWORD *)(a1 + 880))
          {
            v93 = sub_1011247EC(v242, (uint64_t)v248);
          }
          else
          {
            sub_101124910(a1 + 880, *(_QWORD *)(a1 + 872), (uint64_t)v248);
            v93 = v92 + 112;
            *(_QWORD *)(a1 + 872) = v93;
          }
          *(_QWORD *)(a1 + 872) = v93;
          if (v93 >= *(_QWORD *)(a1 + 880))
          {
            v94 = sub_1011247EC(v242, (uint64_t)v248);
          }
          else
          {
            sub_101124910(a1 + 880, v93, (uint64_t)v248);
            v94 = v93 + 112;
            *(_QWORD *)(a1 + 872) = v93 + 112;
          }
          *(_QWORD *)(a1 + 872) = v94;
          if (*(_BYTE *)(a1 + 96))
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v95 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v96 = *(_QWORD *)(a1 + 1136);
              v97 = **v89;
              *(_DWORD *)buf = 134350081;
              *(_QWORD *)&buf[4] = v96;
              *(_WORD *)&buf[12] = 2049;
              *(_QWORD *)&buf[14] = v248[4];
              *(_WORD *)&buf[22] = 2049;
              *(_QWORD *)&buf[24] = v248[5];
              LOWORD(v255[0]) = 2050;
              *(double *)((char *)v255 + 2) = *(float *)&v248[3];
              WORD5(v255[0]) = 2049;
              *(_QWORD *)((char *)v255 + 12) = v97;
              _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "CLMM,railwayParticle,timestamp,%{public}.3lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.3lf,rseg,%{private}lld", buf, 0x34u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v101 = *(_QWORD *)(a1 + 1136);
              v102 = **v89;
              *(_DWORD *)v252 = 134350081;
              *(_QWORD *)&v252[4] = v101;
              *(_WORD *)&v252[12] = 2049;
              *(_QWORD *)&v252[14] = v248[4];
              *(_WORD *)&v252[22] = 2049;
              *(_QWORD *)&v252[24] = v248[5];
              *(_WORD *)v253 = 2050;
              *(double *)&v253[2] = *(float *)&v248[3];
              *(_WORD *)&v253[10] = 2049;
              *(_QWORD *)&v253[12] = v102;
              LODWORD(v227) = 52;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,railwayParticle,timestamp,%{public}.3lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.3lf,rseg,%{private}lld", v252, v227);
              v104 = (char *)v103;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v103);
              if (v104 != buf)
                free(v104);
            }
          }
          if (v249)
          {
            v250 = v249;
            operator delete(v249);
          }
          v98 = (std::__shared_weak_count *)v248[1];
          if (v248[1])
          {
            v99 = (unint64_t *)(v248[1] + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          v88 += 2;
        }
        v87 = (uint64_t *)v87[1];
      }
      while (v87 != &v243);
    }
    sub_1001A5CBC(&v243);
  }
  else
  {
    v88 = 0;
  }
  v105 = v239;
  if (*(_BYTE *)(a1 + 2512) && *(_BYTE *)(a1 + 2233))
  {
    v106 = *(_QWORD *)(a1 + 872);
    v107 = 4;
    do
    {
      if (v106 >= *(_QWORD *)(a1 + 880))
      {
        v106 = sub_1011247EC(v242, a1 + 2520);
      }
      else
      {
        sub_101124910(a1 + 880, v106, a1 + 2520);
        v106 += 112;
        *(_QWORD *)(a1 + 872) = v106;
      }
      *(_QWORD *)(a1 + 872) = v106;
      --v107;
    }
    while (v107);
    v105 = v239 + 4;
    v108 = 4;
  }
  else
  {
    v108 = 0;
  }
  v237 = 0x6DB6DB6DB6DB6DB7 * (v232 >> 4);
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v109 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v110 = -1227133513 * ((*(_QWORD *)(a1 + 872) - *(_QWORD *)(a1 + 864)) >> 4);
      *(_DWORD *)buf = 67242240;
      *(_DWORD *)&buf[4] = v110;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = -1227133513 * (v232 >> 4);
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v105;
      *(_WORD *)&buf[20] = 1026;
      *(_DWORD *)&buf[22] = v234;
      *(_WORD *)&buf[26] = 1026;
      *(_DWORD *)&buf[28] = 0;
      LOWORD(v255[0]) = 1026;
      *(_DWORD *)((char *)v255 + 2) = v240;
      WORD3(v255[0]) = 1026;
      DWORD2(v255[0]) = v229;
      WORD6(v255[0]) = 1026;
      *(_DWORD *)((char *)v255 + 14) = v108;
      WORD1(v255[1]) = 1026;
      DWORD1(v255[1]) = v238;
      _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "CLMM,prediction,NrParticles,%{public}d,NrStandard,%{public}d,NrNew,%{public}d,NrPriorIntersectionParticles,%{public}d,NrNewAlternateCandidateNoiseParticles,%{public}d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPrior,%{public}d,NrNewAmbiguous,%{public}d,NrNewRouteParticles,%{public}d", buf, 0x38u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v219 = -1227133513 * ((*(_QWORD *)(a1 + 872) - *(_QWORD *)(a1 + 864)) >> 4);
      LODWORD(v248[0]) = 67242240;
      HIDWORD(v248[0]) = v219;
      LOWORD(v248[1]) = 1026;
      *(_DWORD *)((char *)&v248[1] + 2) = -1227133513 * (v232 >> 4);
      HIWORD(v248[1]) = 1026;
      LODWORD(v248[2]) = v105;
      WORD2(v248[2]) = 1026;
      *(_DWORD *)((char *)&v248[2] + 6) = v234;
      WORD1(v248[3]) = 1026;
      HIDWORD(v248[3]) = 0;
      LOWORD(v248[4]) = 1026;
      *(_DWORD *)((char *)&v248[4] + 2) = v240;
      HIWORD(v248[4]) = 1026;
      LODWORD(v248[5]) = v229;
      WORD2(v248[5]) = 1026;
      *(_DWORD *)((char *)&v248[5] + 6) = v108;
      WORD1(v248[6]) = 1026;
      HIDWORD(v248[6]) = v238;
      LODWORD(v227) = 56;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,prediction,NrParticles,%{public}d,NrStandard,%{public}d,NrNew,%{public}d,NrPriorIntersectionParticles,%{public}d,NrNewAlternateCandidateNoiseParticles,%{public}d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPrior,%{public}d,NrNewAmbiguous,%{public}d,NrNewRouteParticles,%{public}d", v248, v227);
      v221 = (char *)v220;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v220);
      if (v221 != buf)
        free(v221);
    }
  }
  v111 = *(_QWORD *)(a1 + 864);
  if (v111 == *(_QWORD *)(a1 + 872))
  {
    v115 = 0.0;
LABEL_318:
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v175 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v115;
        _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_ERROR, "CLMM,totalScore<=0,%{public}.1lf", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        LODWORD(v248[0]) = 134349056;
        *(double *)((char *)v248 + 4) = v115;
        LODWORD(v227) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,totalScore<=0,%{public}.1lf", v248, v227);
        v223 = (char *)v222;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v222);
        if (v223 != buf)
          free(v223);
      }
    }
    v176 = *(_QWORD *)(a1 + 872);
    v177 = *(_QWORD *)(a1 + 864);
    while (v176 != v177)
    {
      v176 -= 112;
      sub_10083CCF0(a1 + 880, v176);
    }
    v44 = 0;
    *(_QWORD *)(a1 + 872) = v177;
    goto LABEL_85;
  }
  v112 = 0;
  v231 = v234 - 1227133513 * (v232 >> 4);
  v230 = v240 + v231;
  v113 = v238 + v229 + v240 + v231;
  if (v113 <= v88 + v113)
    v113 += v88;
  v228 = v113;
  v241 = a1 + 912;
  v233 = v19;
  if (v19 + v37 + 0.0 <= 0.0)
    v114 = 0.1;
  else
    v114 = v19 + v37 + 0.0;
  v115 = 0.0;
  v116 = (double *)(a1 + 1128);
  v235 = v114;
  while (1)
  {
    if (v112 >= (int)v237)
    {
      if (v112 >= v231)
      {
        if (v112 >= v230)
        {
          if (v112 >= v229 + v230)
          {
            if (v112 >= v228)
            {
              if (byte_1022FD418)
              {
                byte_1022FD418 = 0;
                v168 = *(float *)&dword_1022FD41C;
              }
              else
              {
                do
                {
                  v169 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                  v170 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                  v171 = (float)(v170 * v170) + (float)(v169 * v169);
                }
                while (v171 >= 1.0);
                v168 = 0.0;
                if (v171 != 0.0)
                {
                  v172 = sqrtf((float)(logf((float)(v170 * v170) + (float)(v169 * v169)) * -2.0) / v171);
                  *(float *)&dword_1022FD41C = v170 * v172;
                  byte_1022FD418 = 1;
                  v168 = v169 * v172;
                }
              }
              v114 = v235;
              if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v246 + 88))(v246, v111, v241, v233 + *(double *)(a1 + 1832) * v168) & 1) == 0)
              {
                if (!*(_BYTE *)(a1 + 96))
                  goto LABEL_409;
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                v212 = qword_1022A00D8;
                if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v212, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,alternate ambiguous particles", buf, 2u);
                }
                if (!sub_1001BFF7C(115, 2))
                {
LABEL_409:
                  v44 = 0;
                  ++*(_DWORD *)(a1 + 108);
                  goto LABEL_361;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                LOWORD(v248[0]) = 0;
                LODWORD(v227) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,moveOnRoad returned false,alternate ambiguous particles", v248, v227);
                v207 = (char *)v226;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v226);
LABEL_435:
                if (v207 != buf)
                  free(v207);
                goto LABEL_409;
              }
            }
          }
          else
          {
            if (byte_1022FD418)
            {
              byte_1022FD418 = 0;
              v136 = *(float *)&dword_1022FD41C;
            }
            else
            {
              do
              {
                v137 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                v138 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                v139 = (float)(v138 * v138) + (float)(v137 * v137);
              }
              while (v139 >= 1.0);
              v136 = 0.0;
              if (v139 != 0.0)
              {
                v140 = sqrtf((float)(logf((float)(v138 * v138) + (float)(v137 * v137)) * -2.0) / v139);
                *(float *)&dword_1022FD41C = v138 * v140;
                byte_1022FD418 = 1;
                v136 = v137 * v140;
              }
            }
            v114 = v235;
            if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v246 + 88))(v246, v111, v241, *(double *)(a1 + 1832) * v136 + 0.0) & 1) == 0)
            {
              if (!*(_BYTE *)(a1 + 96))
                goto LABEL_409;
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v210 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,prior snap particles", buf, 2u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_409;
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              LOWORD(v248[0]) = 0;
              LODWORD(v227) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,moveOnRoad returned false,prior snap particles", v248, v227);
              v207 = (char *)v211;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v211);
              goto LABEL_435;
            }
          }
        }
        else if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v246 + 88))(v246, v111, v241, (double)((v112 - v231) % 6 + 1) * 3.5 + 0.0) & 1) == 0)
        {
          if (!*(_BYTE *)(a1 + 96))
            goto LABEL_409;
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v208 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v208, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,fwd intersection particles", buf, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_409;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          LOWORD(v248[0]) = 0;
          LODWORD(v227) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,moveOnRoad returned false,fwd intersection particles", v248, v227);
          v207 = (char *)v209;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v209);
          goto LABEL_435;
        }
      }
      else
      {
        v125 = *(_QWORD *)(v111 + 8);
        v248[0] = *(_QWORD *)v111;
        v248[1] = v125;
        if (v125)
        {
          v126 = (unint64_t *)(v125 + 8);
          do
            v127 = __ldxr(v126);
          while (__stxr(v127 + 1, v126));
        }
        v128 = *(_OWORD *)(v111 + 16);
        v129 = *(_OWORD *)(v111 + 32);
        v248[6] = *(_QWORD *)(v111 + 48);
        *(_OWORD *)&v248[2] = v128;
        *(_OWORD *)&v248[4] = v129;
        v130 = *(_OWORD *)(v111 + 65);
        *(_OWORD *)&v248[7] = *(_OWORD *)(v111 + 56);
        *(_OWORD *)((char *)&v248[8] + 1) = v130;
        v250 = 0;
        v251 = 0;
        v249 = 0;
        sub_100F5F150(&v249, *(const void **)(v111 + 88), *(_QWORD *)(v111 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v111 + 96) - *(_QWORD *)(v111 + 88)) >> 3));
        v131 = 4;
        while (1)
        {
          v132 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v246 + 88))(v246, v111, v241, v114);
          if ((v132 & 1) == 0)
            break;
          if (**(_QWORD **)v111 == *(_QWORD *)v248[0] && *(unsigned __int8 *)(v111 + 20) != BYTE4(v248[2]))
          {
            sub_100349198((_QWORD *)v111, v248);
            v133 = *(_OWORD *)&v248[2];
            v134 = *(_OWORD *)&v248[4];
            *(_QWORD *)(v111 + 48) = v248[6];
            *(_OWORD *)(v111 + 16) = v133;
            *(_OWORD *)(v111 + 32) = v134;
            v135 = *(_OWORD *)&v248[7];
            *(_OWORD *)(v111 + 65) = *(_OWORD *)((char *)&v248[8] + 1);
            *(_OWORD *)(v111 + 56) = v135;
            if ((_QWORD *)v111 != v248)
              sub_100F5F1C8((char *)(v111 + 88), (char *)v249, (uint64_t)v250, 0x8E38E38E38E38E39 * ((v250 - (_BYTE *)v249) >> 3));
            if (--v131)
              continue;
          }
          goto LABEL_275;
        }
        if (*(_BYTE *)(a1 + 96))
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v141 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,prior intersection particles", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            *(_WORD *)v252 = 0;
            LODWORD(v227) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,moveOnRoad returned false,prior intersection particles", v252, v227);
            v174 = (char *)v173;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v173);
            if (v174 != buf)
              free(v174);
            v114 = v235;
          }
        }
        ++*(_DWORD *)(a1 + 108);
LABEL_275:
        if (v249)
        {
          v250 = v249;
          operator delete(v249);
        }
        v142 = (std::__shared_weak_count *)v248[1];
        v116 = (double *)(a1 + 1128);
        if (v248[1])
        {
          v143 = (unint64_t *)(v248[1] + 8);
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        if ((v132 & 1) == 0)
        {
          v44 = 0;
          goto LABEL_361;
        }
      }
    }
    else
    {
      if (byte_1022FD418)
      {
        byte_1022FD418 = 0;
        v117 = *(float *)&dword_1022FD41C;
      }
      else
      {
        do
        {
          v118 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v119 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v120 = (float)(v119 * v119) + (float)(v118 * v118);
        }
        while (v120 >= 1.0);
        v117 = 0.0;
        if (v120 != 0.0)
        {
          v121 = sqrtf((float)(logf((float)(v119 * v119) + (float)(v118 * v118)) * -2.0) / v120);
          *(float *)&dword_1022FD41C = v119 * v121;
          byte_1022FD418 = 1;
          v117 = v118 * v121;
        }
      }
      v122 = *(double *)(a1 + 1832);
      v123 = v122 * v117;
      if ((-1171354717 * v112) <= 0x1745D174 && v122 < 8.0)
      {
        v123 = fabs(v123) / v122 * 8.0;
        v114 = v235;
      }
      else
      {
        v114 = v235;
        if ((-252645135 * v112) <= 0xF0F0F0F)
          v123 = fabs(v123) / v122 * 34.0;
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v246 + 88))(v246, v111, v241, v233 + v123) & 1) == 0)
      {
        if (!*(_BYTE *)(a1 + 96))
          goto LABEL_409;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v205 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v205, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,standard particles", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_409;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        LOWORD(v248[0]) = 0;
        LODWORD(v227) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,moveOnRoad returned false,standard particles", v248, v227);
        v207 = (char *)v206;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v206);
        goto LABEL_435;
      }
    }
    if (!*(_QWORD *)v111)
      break;
    if (*(double *)(v111 + 32) == 0.0 && *(double *)(v111 + 40) == 0.0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v203 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v203, OS_LOG_TYPE_ERROR, "CLMM,Unexpected particle with snapLat == snapLon == 0", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        LOWORD(v248[0]) = 0;
        LODWORD(v227) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected particle with snapLat == snapLon == 0", v248, v227);
        v30 = (char *)v204;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v204);
        goto LABEL_417;
      }
      goto LABEL_84;
    }
    *(_QWORD *)(v111 + 56) = 0;
    *(_QWORD *)(v111 + 64) = 0;
    *(_QWORD *)(v111 + 72) = 0;
    v145 = (char **)(v111 + 88);
    *(_QWORD *)(v111 + 96) = *(_QWORD *)(v111 + 88);
    memset(buf, 0, 24);
    *(_QWORD *)&buf[24] = 0x3FF0000000000000;
    memset(v255, 0, sizeof(v255));
    LODWORD(v256) = 0;
    sub_101103F58(a1, a1 + 656, v111, v116, (uint64_t)buf);
    v146 = *(_QWORD *)(v111 + 104);
    v147 = *(_QWORD *)&buf[16];
    *(_QWORD *)(v111 + 56) = *(_QWORD *)buf;
    *(_QWORD *)(v111 + 72) = v147;
    LODWORD(v256) = 1;
    *(_QWORD *)&buf[24] = 0x3FF0000000000000;
    v148 = *(_QWORD *)(v111 + 96);
    if (v148 >= v146)
    {
      v153 = 0x8E38E38E38E38E39 * ((uint64_t)(v148 - (_QWORD)*v145) >> 3);
      v154 = v153 + 1;
      if (v153 + 1 > 0x38E38E38E38E38ELL)
        sub_100259694();
      v155 = 0x8E38E38E38E38E39 * ((uint64_t)(v146 - (_QWORD)*v145) >> 3);
      if (2 * v155 > v154)
        v154 = 2 * v155;
      if (v155 >= 0x1C71C71C71C71C7)
        v156 = 0x38E38E38E38E38ELL;
      else
        v156 = v154;
      if (v156)
        v157 = (char *)sub_10029D26C(v111 + 104, v156);
      else
        v157 = 0;
      v158 = &v157[72 * v153];
      *(_OWORD *)v158 = *(_OWORD *)buf;
      v159 = *(_OWORD *)&buf[16];
      v160 = v255[0];
      v161 = v255[1];
      *((_QWORD *)v158 + 8) = v256;
      *((_OWORD *)v158 + 2) = v160;
      *((_OWORD *)v158 + 3) = v161;
      *((_OWORD *)v158 + 1) = v159;
      v163 = *(char **)(v111 + 88);
      v162 = *(char **)(v111 + 96);
      v164 = v158;
      if (v162 != v163)
      {
        do
        {
          *(_OWORD *)(v164 - 72) = *(_OWORD *)(v162 - 72);
          v165 = *(_OWORD *)(v162 - 56);
          v166 = *(_OWORD *)(v162 - 40);
          v167 = *(_OWORD *)(v162 - 24);
          *((_DWORD *)v164 - 2) = *((_DWORD *)v162 - 2);
          *(_OWORD *)(v164 - 24) = v167;
          *(_OWORD *)(v164 - 40) = v166;
          *(_OWORD *)(v164 - 56) = v165;
          v164 -= 72;
          v162 -= 72;
        }
        while (v162 != v163);
        v162 = *v145;
      }
      v152 = v158 + 72;
      *(_QWORD *)(v111 + 88) = v164;
      *(_QWORD *)(v111 + 96) = v158 + 72;
      *(_QWORD *)(v111 + 104) = &v157[72 * v156];
      if (v162)
        operator delete(v162);
    }
    else
    {
      *(_OWORD *)v148 = *(_OWORD *)buf;
      v149 = *(_OWORD *)&buf[16];
      v150 = v255[0];
      v151 = v255[1];
      *(_QWORD *)(v148 + 64) = v256;
      *(_OWORD *)(v148 + 32) = v150;
      *(_OWORD *)(v148 + 48) = v151;
      *(_OWORD *)(v148 + 16) = v149;
      v152 = (char *)(v148 + 72);
    }
    ++v112;
    *(_QWORD *)(v111 + 96) = v152;
    v115 = v115 + *(double *)(v111 + 56);
    v111 += 112;
    if (v111 == *(_QWORD *)(a1 + 872))
    {
      if (v115 <= 0.0)
        goto LABEL_318;
      v180 = *v242;
      if (*v242 != v111)
      {
        v181 = (void **)(a1 + 936);
        v182 = (_QWORD *)(a1 + 952);
        v183 = *(float **)(a1 + 944);
        v184 = 0.0;
        do
        {
          v185 = v180;
          v186 = *(double *)(v180 + 56) / v115;
          *(double *)(v180 + 64) = v186;
          v184 = v184 + v186;
          v187 = v184;
          if ((unint64_t)v183 >= *v182)
          {
            v189 = (float *)*v181;
            v190 = ((char *)v183 - (_BYTE *)*v181) >> 2;
            v191 = v190 + 1;
            if ((unint64_t)(v190 + 1) >> 62)
              sub_100259694();
            v192 = *v182 - (_QWORD)v189;
            if (v192 >> 1 > v191)
              v191 = v192 >> 1;
            if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFFCLL)
              v193 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v193 = v191;
            if (v193)
            {
              v194 = (char *)sub_100260634(a1 + 952, v193);
              v183 = *(float **)(a1 + 944);
              v189 = *(float **)(a1 + 936);
            }
            else
            {
              v194 = 0;
            }
            v195 = (float *)&v194[4 * v190];
            *v195 = v187;
            v188 = v195 + 1;
            while (v183 != v189)
            {
              v196 = *((_DWORD *)v183-- - 1);
              *((_DWORD *)v195-- - 1) = v196;
            }
            *(_QWORD *)(a1 + 936) = v195;
            *(_QWORD *)(a1 + 944) = v188;
            *(_QWORD *)(a1 + 952) = &v194[4 * v193];
            if (v189)
              operator delete(v189);
          }
          else
          {
            *v183 = v187;
            v188 = v183 + 1;
          }
          *(_QWORD *)(a1 + 944) = v188;
          v180 = v185 + 112;
          v183 = v188;
        }
        while (v185 + 112 != *(_QWORD *)(a1 + 872));
        if (v180 != *v242)
        {
          v197 = *v242 - 112;
          v198 = 0.0;
          do
          {
            v198 = v198 + *(double *)(v197 + 176) * *(double *)(v197 + 176);
            v197 += 112;
          }
          while (v197 != v185);
          if (v198 > 0.0)
            *(double *)(a1 + 1608) = 1.0 / v198;
        }
      }
      goto LABEL_360;
    }
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2048);
  v178 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v178, OS_LOG_TYPE_ERROR, "CLMM,NULL road", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    LOWORD(v248[0]) = 0;
    LODWORD(v227) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,NULL road", v248, v227);
    v30 = (char *)v179;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v179);
    goto LABEL_417;
  }
LABEL_84:
  v44 = 0;
LABEL_85:
  ++*(_DWORD *)(a1 + 104);
LABEL_361:
  v199 = v247;
  if (v247)
  {
    v200 = (unint64_t *)&v247->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  return v44;
}

void sub_1011113C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_100261F44((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_101111528(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  float *v14;
  float *v15;
  unint64_t v16;
  unint64_t v17;
  float *v18;
  float *v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  void *__p;
  _BYTE *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  _DWORD v46[4];
  uint8_t buf[8];

  sub_10112437C(a1 + 984, *(_QWORD **)(a1 + 992));
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  v2 = *(_QWORD *)(a1 + 872);
  v3 = *(_QWORD *)(a1 + 864);
  v4 = v2 - v3;
  if (v2 == v3)
    return 1;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,resample", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      LOWORD(v43) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,resample", &v43, 2);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::resample()", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
  if (*(double *)(a1 + 1224) == 0.0 || *(_BYTE *)(a1 + 1356))
  {
    v6 = 48;
    v7 = 5;
  }
  else
  {
    v6 = 96;
    v7 = 10;
  }
  v43 = 0;
  v44 = 0;
  v8 = v6;
  v45[0] = 0;
  sub_101111B50(&v43, v6);
  *(_DWORD *)buf = 0;
  sub_100CB0348(&__p, 0x6DB6DB6DB6DB6DB7 * (v4 >> 4), buf);
  if (*(_BYTE *)(a1 + 2232) && *(_BYTE *)(a1 + 2489) && *(_QWORD *)(a1 + 1856))
  {
    v9 = v7;
    do
    {
      v10 = v44;
      if (v44 >= v45[0])
      {
        v11 = sub_1011247EC(&v43, a1 + 1856);
      }
      else
      {
        sub_101124910((uint64_t)v45, v44, a1 + 1856);
        v11 = v10 + 112;
      }
      v44 = v11;
      sub_10110C798(a1, (uint64_t *)(a1 + 1856), *(_BYTE *)(a1 + 1876), *(double *)(a1 + 1904), *(double *)(a1 + 1888), *(double *)(a1 + 1896));
      --v9;
    }
    while (v9);
  }
  else
  {
    v7 = 0;
  }
  v12 = 0;
  do
  {
    v13 = random();
    v14 = *(float **)(a1 + 936);
    v15 = *(float **)(a1 + 944);
    if (v15 != v14)
    {
      v16 = v15 - v14;
      v15 = *(float **)(a1 + 936);
      do
      {
        v17 = v16 >> 1;
        v18 = &v15[v16 >> 1];
        v20 = *v18;
        v19 = v18 + 1;
        v16 += ~(v16 >> 1);
        if (v20 < (float)((float)v13 * 4.6566e-10))
          v15 = v19;
        else
          v16 = v17;
      }
      while (v16);
    }
    ++*(_DWORD *)((char *)__p + (((char *)v15 - (char *)v14) << 30 >> 30));
    ++v12;
  }
  while (v12 != (_DWORD)v8 - v7);
  v21 = *(_QWORD *)(a1 + 864);
  v22 = *(_QWORD *)(a1 + 872);
  if (v21 == v22)
  {
    v22 = *(_QWORD *)(a1 + 864);
  }
  else
  {
    v23 = 0;
    v24 = __p;
    do
    {
      if (v23 >= (v42 - v24) >> 2)
        break;
      if (*(int *)&v24[4 * v23] >= 1)
      {
        v25 = 0;
        do
        {
          v26 = v44;
          if (v44 >= v45[0])
          {
            v27 = sub_1011247EC(&v43, v21);
          }
          else
          {
            sub_101124910((uint64_t)v45, v44, v21);
            v27 = v26 + 112;
          }
          v44 = v27;
          sub_10110C798(a1, (uint64_t *)v21, *(_BYTE *)(v21 + 20), *(double *)(v21 + 48), *(double *)(v21 + 32), *(double *)(v21 + 40));
          ++v25;
          v24 = __p;
        }
        while (v25 < *((_DWORD *)__p + v23));
        v22 = *(_QWORD *)(a1 + 872);
      }
      v21 += 112;
      ++v23;
    }
    while (v21 != v22);
  }
  v29 = v44;
  v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v44 - v43) >> 4);
  v31 = v30 > v8;
  v28 = v30 <= v8;
  if (v31)
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v34 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v30;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLMM,Unexpected number of particles after resampling,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v46[0] = 67240192;
        v46[1] = v30;
        LODWORD(v40) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected number of particles after resampling,%{public}d", v46, v40);
        v39 = (uint8_t *)v38;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::resample()", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
    }
  }
  else
  {
    v32 = *(_QWORD *)(a1 + 864);
    *(_QWORD *)(a1 + 864) = v43;
    *(_QWORD *)(a1 + 872) = v29;
    v43 = v32;
    v44 = v22;
    v33 = *(_QWORD *)(a1 + 880);
    *(_QWORD *)(a1 + 880) = v45[0];
    v45[0] = v33;
  }
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  *(_QWORD *)buf = &v43;
  sub_10083CC6C((void ***)buf);
  return v28;
}

void sub_101111AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21)
{
  if (__p)
    operator delete(__p);
  a21 = &a15;
  sub_10083CC6C((void ***)&a21);
  _Unwind_Resume(a1);
}

void **sub_101111B50(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL)
      sub_100259694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1002A7588((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 112 * v6;
    sub_1011249B0(a1, v7);
    return sub_101124B74(v7);
  }
  return result;
}

void sub_101111BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_101124B74((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101111C0C(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  double **v4;
  double *v5;
  double *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  float v19;
  double v20;
  NSObject *v21;
  const char *v22;
  std::string *v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  std::string *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  NSObject *v39;
  const char *v40;
  NSObject *v41;
  const char *v42;
  NSObject *v43;
  double v44;
  double v45;
  _BOOL4 v46;
  _BOOL4 v47;
  _BOOL4 v48;
  NSObject *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  NSObject *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  _BOOL4 v60;
  _BOOL4 v61;
  NSObject *v62;
  std::string::size_type v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  __int128 v75;
  double *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  NSObject *v83;
  std::string::size_type v84;
  std::string::size_type v85;
  double v86;
  NSObject *v87;
  std::string::size_type v88;
  std::string::size_type v89;
  double v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  NSObject *v97;
  uint64_t v98;
  double v99;
  double *v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  NSObject *v109;
  double *v110;
  double *v111;
  const char *v112;
  std::string *v113;
  uint64_t *v114;
  uint64_t *v115;
  std::__shared_weak_count *v116;
  unint64_t *p_shared_owners;
  unint64_t v118;
  _BOOL4 v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  NSObject *v123;
  std::string::size_type v124;
  NSObject *v125;
  double v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  uint64_t v131;
  float v132;
  double v133;
  double v134;
  double v135;
  double v136;
  NSObject *v137;
  double v138;
  _BOOL4 v139;
  double v140;
  double v141;
  NSObject *v142;
  int v143;
  int v144;
  const char *v145;
  std::string *v146;
  NSObject *v147;
  NSObject *v149;
  std::string::size_type v150;
  double v151;
  NSObject *v152;
  std::string::size_type v153;
  NSObject *v154;
  std::string::size_type v155;
  std::string::size_type v156;
  double v157;
  NSObject *v158;
  std::string::size_type v159;
  std::string::size_type v160;
  double v161;
  NSObject *v162;
  std::string::size_type v163;
  std::string::size_type v164;
  double v165;
  NSObject *v166;
  std::string::size_type v167;
  std::string::size_type v168;
  double v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  NSObject *v173;
  double v174;
  double v175;
  const char *v176;
  std::string *v177;
  const char *v178;
  const char *v179;
  std::string *v180;
  uint64_t v181;
  uint64_t v182;
  const char *v183;
  std::string *v184;
  const char *v185;
  std::string *v186;
  uint64_t v187;
  const char *v188;
  std::string *v189;
  uint64_t v190;
  uint64_t v191;
  double v192;
  const char *v193;
  std::string *v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  const char *v198;
  std::string *v199;
  uint64_t v200;
  const char *v201;
  std::string *v202;
  const char *v203;
  const char *v204;
  std::string *v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  const char *v209;
  std::string *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  std::string *v217;
  uint64_t v218;
  const char *v219;
  std::string *v220;
  const char *v221;
  std::string *v222;
  uint64_t v223;
  uint64_t v224;
  double v225;
  const char *v226;
  std::string *v227;
  uint64_t v228;
  const char *v229;
  std::string *v230;
  uint64_t v231;
  uint64_t v232;
  const char *v233;
  std::string *v234;
  uint64_t v235;
  uint64_t v236;
  double v237;
  const char *v238;
  std::string *v239;
  uint64_t v240;
  uint64_t v241;
  double v242;
  const char *v243;
  std::string *v244;
  uint64_t v245;
  double **v246;
  uint64_t v247;
  _QWORD *v248;
  double *v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  double v256;
  __int16 v257;
  __int128 v258;
  int v259;
  __int16 v260;
  int v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  char v265;
  __int128 v266;
  __int128 v267;
  uint64_t v268;
  __int128 v269;
  __int128 v270;
  unint64_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  _BYTE v281[64];
  __int16 v282;
  uint64_t v283;
  int v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  _BYTE v288[80];
  uint64_t v289;
  unint64_t v290;
  char v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  _BYTE v296[19];
  __int128 v297;
  char v298;
  __int128 v299;
  int v300;
  __int16 v301;
  int v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  char v306;
  __int128 __p;
  __int128 v308;
  __int128 v309;
  _BYTE v310[30];
  _BYTE v311[12];
  __int16 v312;
  uint64_t v313;
  _WORD v314[41];
  _BOOL4 v315;
  void *__src;
  _BYTE *v317;
  uint64_t v318;
  _BYTE v319[22];
  __int16 v320;
  double v321;
  __int128 v322;
  uint64_t v323;
  std::string buf;
  double v325;
  __int16 v326;
  double v327;
  __int16 v328;
  uint64_t v329;
  __int16 v330;
  _BOOL4 v331;
  __int16 v332;
  uint64_t v333;
  __int16 v334;
  _BOOL4 v335;
  __int16 v336;
  _BOOL4 v337;
  __int16 v338;
  _BOOL4 v339;

  v2 = (_QWORD *)(a1 + 1656);
  if (*(_QWORD *)(a1 + 1656))
    sub_100346F9C((_QWORD *)(a1 + 1656));
  if (*(_QWORD *)(a1 + 872) == *(_QWORD *)(a1 + 864))
    return 1;
  v248 = v2;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v3 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLMM,extractSolution", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v257 = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,extractSolution", &v257, 2);
      v177 = (std::string *)v176;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v176);
      if (v177 != &buf)
        free(v177);
    }
  }
  LOBYTE(v257) = 0;
  v4 = (double **)(a1 + 984);
  v258 = 0u;
  v5 = (double *)(a1 + 992);
  v259 = 0;
  v260 = 1;
  v261 = 0;
  v262 = 0u;
  v263 = 0u;
  v264 = 0u;
  v265 = 0;
  v266 = 0u;
  v267 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  v269 = _Q1;
  v270 = 0u;
  v268 = 0;
  v271 = 0xBFF0000000000000;
  v283 = 0;
  v284 = 0;
  v282 = 0;
  memset(&v281[32], 0, 32);
  v285 = 0u;
  v286 = 0u;
  v287 = 0u;
  memset(v288, 0, 27);
  memset(&v288[32], 0, 48);
  v272 = 0u;
  v273 = 0u;
  v274 = 0u;
  v275 = 0u;
  v276 = 0u;
  v277 = 0u;
  v278 = 0u;
  v279 = 0u;
  v280 = 0u;
  memset(v281, 0, 30);
  v290 = 0xBFF0000000000000;
  v289 = 0;
  v291 = 0;
  v299 = 0u;
  v300 = 0;
  v292 = 0u;
  v293 = 0u;
  v294 = 0u;
  v295 = 0u;
  memset(v296, 0, sizeof(v296));
  v297 = 0u;
  v298 = 0;
  v301 = 1;
  v302 = 0;
  v306 = 0;
  v304 = 0u;
  v305 = 0u;
  v303 = 0u;
  memset(v310, 0, sizeof(v310));
  v309 = 0u;
  v308 = 0u;
  *(_QWORD *)&_Q1 = *(_QWORD *)(a1 + 1224);
  __p = 0u;
  if (*(double *)&_Q1 == 0.0 || *(_BYTE *)(a1 + 1356))
    *(_QWORD *)(a1 + 3144) = *(_QWORD *)(a1 + 1136);
  v10 = *v4;
  if (*v4 == v5)
    goto LABEL_45;
  v11 = 0;
  v249 = (double *)(a1 + 1128);
  v12 = a1 + 992;
  do
  {
    if (!*((_QWORD *)v10 + 7))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v28 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "CLMM,NULL road, bad candidate", (uint8_t *)&buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_58;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v314[0] = 0;
      LODWORD(v245) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,NULL road, bad candidate", v314, v245);
      v27 = (std::string *)v178;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v178);
LABEL_446:
      if (v27 != &buf)
        free(v27);
      goto LABEL_58;
    }
    if (*((_BYTE *)v10 + 200))
      v13 = 216;
    else
      v13 = 76;
    v14 = *(_DWORD *)((char *)v10 + v13);
    if (v14 > v11)
    {
      v12 = (uint64_t)v10;
      v11 = v14;
    }
    v15 = (double *)*((_QWORD *)v10 + 1);
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = *(double **)v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (double *)*((_QWORD *)v10 + 2);
        _ZF = *(_QWORD *)v16 == (_QWORD)v10;
        v10 = v16;
      }
      while (!_ZF);
    }
    v10 = v16;
  }
  while (v16 != v5);
  if (v11 <= 0)
  {
LABEL_45:
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLMM,Unexpected bestCount<=0", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_58;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v314[0] = 0;
    LODWORD(v245) = 2;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected bestCount<=0", v314, v245);
    v27 = (std::string *)v26;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v26);
    goto LABEL_446;
  }
  if ((double *)v12 == v5)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v39 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "CLMM,Unexpected no best candidate found", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_58;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v314[0] = 0;
    LODWORD(v245) = 2;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected no best candidate found", v314, v245);
    v27 = (std::string *)v40;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v40);
    goto LABEL_446;
  }
  *(_WORD *)(a1 + 1649) = 0;
  if (!*(_BYTE *)(v12 + 200) || !*(_BYTE *)(v12 + 192) || *(_DWORD *)(v12 + 212) <= *(_DWORD *)(v12 + 208))
    goto LABEL_148;
  v17 = (double *)sub_101124434(a1 + 984, v12 + 224);
  v18 = v17;
  if (v5 == v17)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v41 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "CLMM,Unexpected. There should be an outgoing road", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_58;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v314[0] = 0;
    LODWORD(v245) = 2;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected. There should be an outgoing road", v314, v245);
    v27 = (std::string *)v42;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v42);
    goto LABEL_446;
  }
  memset(v319, 0, 20);
  *(_WORD *)&v319[20] = 1;
  LODWORD(v321) = 0;
  v323 = 0;
  v322 = 0uLL;
  sub_100349198(v319, (uint64_t *)v17 + 7);
  if (!*(_QWORD *)v319)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v43 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "CLMM,Unexpected NULL outgoing road candidate", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v314[0] = 0;
      LODWORD(v245) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected NULL outgoing road candidate", v314, v245);
      v23 = (std::string *)v203;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v203);
LABEL_481:
      if (v23 != &buf)
        free(v23);
    }
LABEL_102:
    sub_100261F44((uint64_t)v319);
LABEL_58:
    v24 = 0;
    goto LABEL_59;
  }
  *(_DWORD *)&v319[16] = 0;
  *(_WORD *)&v319[20] = *((unsigned __int8 *)v18 + 48);
  v19 = *(double *)(v12 + 856);
  *(float *)&v321 = v19;
  v20 = *(double *)(v12 + 848);
  *(_QWORD *)&v322 = *(_QWORD *)(v12 + 840);
  *((double *)&v322 + 1) = v20;
  v323 = *(_QWORD *)(v12 + 960);
  if (*(double *)&v322 == 0.0 && v20 == 0.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v21 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM,Unexpected outgoing snapLat==snapLon==0", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v314[0] = 0;
      LODWORD(v245) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected outgoing snapLat==snapLon==0", v314, v245);
      v23 = (std::string *)v22;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v22);
      goto LABEL_481;
    }
    goto LABEL_102;
  }
  *(_QWORD *)v311 = 0;
  v255 = 0;
  v256 = 0.0;
  v253 = 0;
  v254 = 0;
  v252 = 0;
  sub_101103F88(a1, a1 + 656, (uint64_t)v319, v249, v311, &v256, (double *)&v255, (double *)&v254, &v253, (double *)&v252, 0);
  v44 = sub_1011010A8(*(double *)(v12 + 5136) - *(float *)&v321);
  v45 = *(double *)(a1 + 1232);
  if (v45 >= 0.0)
  {
    v174 = sub_1011010A8(v45 - *(float *)&v321);
    v47 = 0;
    v46 = v174 < 25.0;
    v48 = v174 < 25.0 || *(double *)(v12 + 248) >= 7.5;
    if (v48 && v44 >= 45.0 && v174 >= 25.0)
    {
      if (*(double *)(a1 + 1320) >= 20.0)
      {
        v46 = 0;
        v47 = 0;
      }
      else
      {
        v175 = sub_1011010A8(*(double *)(v12 + 5136) - *(double *)(a1 + 1232));
        v46 = 0;
        v47 = v175 < 10.0;
        v48 = v175 >= 10.0;
      }
    }
  }
  else
  {
    v46 = 0;
    v47 = 0;
    v48 = 1;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v49 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v50 = *(_QWORD *)(a1 + 1136);
      v51 = *(_QWORD *)(v12 + 5136);
      v52 = *(double *)(a1 + 1232);
      v53 = *(_QWORD *)(v12 + 248);
      v54 = *(_QWORD *)(a1 + 1320);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134351360;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v50;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v51;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      v325 = *(float *)&v321;
      v326 = 2050;
      v327 = v52;
      v328 = 2050;
      v329 = v53;
      v330 = 1026;
      v331 = v48;
      v332 = 2050;
      v333 = v54;
      v334 = 1026;
      v335 = v44 >= 45.0;
      v336 = 1026;
      v337 = v46;
      v338 = 1026;
      v339 = v47;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf, crumbCourse,%{public}.2lf, outgoingDistanceFromIntersection,%{public}.2lf,outgoingCondition,%{public}d,crumbCourseUnc,%{public}.2lf,significantCourseChange,%{public}d,isCourseAligned,%{public}d, isMeanCandidateAlignedWithCourse,%{public}d", (uint8_t *)&buf, 0x56u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v211 = *(_QWORD *)(a1 + 1136);
      v212 = *(_QWORD *)(v12 + 5136);
      v213 = *(_QWORD *)(a1 + 1232);
      v214 = *(_QWORD *)(v12 + 248);
      v215 = *(_QWORD *)(a1 + 1320);
      *(_DWORD *)v314 = 134351360;
      *(_QWORD *)&v314[2] = v211;
      v314[6] = 2050;
      *(_QWORD *)&v314[7] = v212;
      v314[11] = 2050;
      *(double *)&v314[12] = *(float *)&v321;
      v314[16] = 2050;
      *(_QWORD *)&v314[17] = v213;
      v314[21] = 2050;
      *(_QWORD *)&v314[22] = v214;
      v314[26] = 1026;
      *(_DWORD *)&v314[27] = v48;
      v314[29] = 2050;
      *(_QWORD *)&v314[30] = v215;
      v314[34] = 1026;
      *(_DWORD *)&v314[35] = v44 >= 45.0;
      v314[37] = 1026;
      *(_DWORD *)&v314[38] = v46;
      v314[40] = 1026;
      v315 = v47;
      LODWORD(v245) = 86;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Time,%{public}.1lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf, crumbCourse,%{public}.2lf, outgoingDistanceFromIntersection,%{public}.2lf,outgoingCondition,%{public}d,crumbCourseUnc,%{public}.2lf,significantCourseChange,%{public}d,isCourseAligned,%{public}d, isMeanCandidateAlignedWithCourse,%{public}d", v314, v245);
      v217 = (std::string *)v216;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v216);
      if (v217 != &buf)
        free(v217);
    }
  }
  if (*(double *)(a1 + 1792) < 8.05555556 && (*(int *)(v12 + 196) > 1 || *(double *)(a1 + 1208) > 10.0))
  {
    v55 = 15.0;
    if (*(double *)(a1 + 1224) > 0.0
      && !*(_BYTE *)(a1 + 1356)
      && vabdd_f64(*(double *)(a1 + 1136), *(double *)(a1 + 3144)) < 20.0)
    {
      v55 = 7.5;
    }
    if (v44 >= 45.0 && v46)
      v56 = v55 * 0.6;
    else
      v56 = v55;
    if (!*(_BYTE *)(a1 + 96))
      goto LABEL_127;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v57 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v58 = *(_QWORD *)(a1 + 1136);
      v59 = *(_QWORD *)(v12 + 248);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v58;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v59;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      v325 = v56;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,exit distance check,distance,%{public}.2lf,exitDistance,%{public}.2lf", (uint8_t *)&buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v231 = *(_QWORD *)(a1 + 1136);
      v232 = *(_QWORD *)(v12 + 248);
      *(_DWORD *)v314 = 134349568;
      *(_QWORD *)&v314[2] = v231;
      v314[6] = 2050;
      *(_QWORD *)&v314[7] = v232;
      v314[11] = 2050;
      *(double *)&v314[12] = v56;
      LODWORD(v245) = 32;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Time,%{public}.1lf,exit distance check,distance,%{public}.2lf,exitDistance,%{public}.2lf", v314, v245);
      v234 = (std::string *)v233;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v233);
      if (v234 != &buf)
        free(v234);
      if (v48)
LABEL_128:
        v48 = *(double *)(v12 + 248) > v56;
    }
    else
    {
LABEL_127:
      if (v48)
        goto LABEL_128;
    }
  }
  v60 = v44 >= 45.0 && v46;
  if (v60 && *(double *)(a1 + 1320) < 20.0)
  {
    if (!v48)
      goto LABEL_140;
LABEL_138:
    if (*(double *)(a1 + 1224) <= 0.0)
      goto LABEL_140;
    v61 = *(_BYTE *)(a1 + 1356) == 0;
  }
  else
  {
    if (v48 && *(int *)(v12 + 212) > 2 * *(int *)(v12 + 208))
      goto LABEL_138;
LABEL_140:
    v61 = 0;
  }
  *(_BYTE *)(a1 + 1650) = v61;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v62 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v63 = *(_QWORD *)(a1 + 1136);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v63;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v61;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,outgoing condition,%{public}d", (uint8_t *)&buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v218 = *(_QWORD *)(a1 + 1136);
      *(_DWORD *)v314 = 134349312;
      *(_QWORD *)&v314[2] = v218;
      v314[6] = 1026;
      *(_DWORD *)&v314[7] = v61;
      LODWORD(v245) = 18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Time,%{public}.1lf,outgoing condition,%{public}d", v314, v245);
      v220 = (std::string *)v219;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v219);
      if (v220 != &buf)
        free(v220);
    }
  }
  *(_BYTE *)(a1 + 1649) = 1;
  sub_100261F44((uint64_t)v319);
  v4 = (double **)(a1 + 984);
LABEL_148:
  v246 = v4;
  memset(v314, 0, 20);
  v314[10] = 1;
  *(_DWORD *)&v314[12] = 0;
  v318 = 0;
  __src = 0;
  v317 = 0;
  memset(&v314[16], 0, 49);
  v64 = *(double *)(a1 + 1320);
  if (v64 < 19.0)
  {
    *(_QWORD *)(a1 + 1320) = 0x4033000000000000;
    sub_1011024B0(a1, (uint64_t)v249);
  }
  v65 = *(_QWORD *)(a1 + 864);
  if (v65 != *(_QWORD *)(a1 + 872))
  {
    v247 = v12 + 224;
    do
    {
      *(_BYTE *)(v65 + 80) = 0;
      sub_10110E724((uint64_t *)v65, (uint64_t)&buf);
      if (sub_100F5C3F4((uint64_t)&buf, v12 + 32))
      {
        if (*(_BYTE *)(a1 + 1650) || !*(_BYTE *)(v12 + 200) || !*(_BYTE *)(v12 + 192))
          goto LABEL_154;
        v71 = *(double *)(v65 + 48);
        v72 = *(double *)(v12 + 528);
        if (*(_BYTE *)(v12 + 48))
        {
          if (v71 <= v72)
            goto LABEL_154;
        }
        else if (v71 >= v72)
        {
          goto LABEL_154;
        }
      }
      else
      {
        if (*(_BYTE *)(a1 + 1650))
        {
          if (*(_BYTE *)(v12 + 200))
          {
            if (*(_BYTE *)(v12 + 192))
            {
              sub_10110E724((uint64_t *)v65, (uint64_t)&buf);
              if (sub_100F5C3F4((uint64_t)&buf, v247))
              {
                v69 = *(double *)(v65 + 48);
                v70 = *(double *)(v12 + 1120);
                if (*(_BYTE *)(v12 + 240))
                {
                  if (v69 >= v70)
                    goto LABEL_154;
                }
                else if (v69 <= v70)
                {
                  goto LABEL_154;
                }
              }
            }
          }
        }
        if (*(_BYTE *)(v12 + 200))
        {
          if (!*(_BYTE *)(v12 + 192))
          {
            sub_10110E724((uint64_t *)v65, (uint64_t)&buf);
            if (sub_100F5C3F4((uint64_t)&buf, v247))
            {
              v73 = *(double *)(v65 + 48);
              v74 = *(double *)(v12 + 1120);
              if (*(_BYTE *)(v12 + 240))
              {
                if (v73 >= v74)
                  goto LABEL_181;
              }
              else if (v73 <= v74)
              {
LABEL_181:
                *(_BYTE *)(v65 + 80) = 1;
LABEL_154:
                *(_BYTE *)(v65 + 80) = 1;
                sub_101103EF0(a1, a1 + 656, v65, v249, (_QWORD *)(v65 + 56), (_QWORD *)(v65 + 72));
                if (*(double *)(v65 + 56) > *(double *)&v314[28])
                {
                  sub_100349198(v314, (uint64_t *)v65);
                  v66 = *(_QWORD *)(v65 + 48);
                  v67 = *(_OWORD *)(v65 + 32);
                  *(_OWORD *)&v314[8] = *(_OWORD *)(v65 + 16);
                  *(_OWORD *)&v314[16] = v67;
                  *(_QWORD *)&v314[24] = v66;
                  v68 = *(_OWORD *)(v65 + 56);
                  *(_OWORD *)((char *)&v314[32] + 1) = *(_OWORD *)(v65 + 65);
                  *(_OWORD *)&v314[28] = v68;
                  if ((_WORD *)v65 != v314)
                    sub_100F5F1C8((char *)&__src, *(char **)(v65 + 88), *(_QWORD *)(v65 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v65 + 96) - *(_QWORD *)(v65 + 88)) >> 3));
                }
                goto LABEL_178;
              }
            }
          }
        }
      }
      *(_BYTE *)(v65 + 80) = 0;
LABEL_178:
      v65 += 112;
    }
    while (v65 != *(_QWORD *)(a1 + 872));
  }
  *(_BYTE *)(a1 + 1008) = 1;
  sub_100349198((_QWORD *)(a1 + 1016), (uint64_t *)v314);
  v75 = *(_OWORD *)&v314[16];
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)&v314[8];
  *(_OWORD *)(a1 + 1048) = v75;
  *(_QWORD *)(a1 + 1064) = *(_QWORD *)&v314[24];
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v314[28];
  *(_OWORD *)(a1 + 1081) = *(_OWORD *)((char *)&v314[32] + 1);
  if ((_WORD *)(a1 + 1016) != v314)
    sub_100F5F1C8((char *)(a1 + 1104), (char *)__src, (uint64_t)v317, 0x8E38E38E38E38E39 * ((v317 - (_BYTE *)__src) >> 3));
  if (*(_BYTE *)(a1 + 1650))
  {
    sub_10110E724((uint64_t *)v314, (uint64_t)&buf);
    v76 = (double *)(v12 + 224);
    if (sub_100F5C3F4(v12 + 224, (uint64_t)&buf))
    {
      v77 = *(_OWORD *)(v12 + 688);
      v78 = *(_OWORD *)(v12 + 704);
      v79 = *(_OWORD *)(v12 + 736);
      *(_OWORD *)(a1 + 1160) = *(_OWORD *)(v12 + 720);
      *(_OWORD *)(a1 + 1176) = v79;
      *(_OWORD *)v249 = v77;
      *(_OWORD *)(a1 + 1144) = v78;
      v80 = *(_OWORD *)(v12 + 752);
      v81 = *(_OWORD *)(v12 + 768);
      v82 = *(_OWORD *)(v12 + 800);
      *(_OWORD *)(a1 + 1224) = *(_OWORD *)(v12 + 784);
      *(_OWORD *)(a1 + 1240) = v82;
      *(_OWORD *)(a1 + 1192) = v80;
      *(_OWORD *)(a1 + 1208) = v81;
      std::string::operator=((std::string *)(a1 + 1256), (const std::string *)(v12 + 816));
      memcpy((void *)(a1 + 1280), (const void *)(v12 + 840), 0x118uLL);
      sub_100349198(v248, (uint64_t *)(v12 + 56));
      if (*(_BYTE *)(a1 + 96) && *v248)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v83 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v84 = *(_QWORD *)(a1 + 1136);
          v85 = **(_QWORD **)(a1 + 1656);
          v86 = *v76;
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349569;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v84;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v85;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
          v325 = v86;
          _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Using outgoing,incomingID,%{private}lld,outgoingID,%{private}lld", (uint8_t *)&buf, 0x20u);
        }
        v4 = v246;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v190 = *(_QWORD *)(a1 + 1136);
          v191 = **(_QWORD **)(a1 + 1656);
          v192 = *v76;
          *(_DWORD *)v319 = 134349569;
          *(_QWORD *)&v319[4] = v190;
          *(_WORD *)&v319[12] = 2049;
          *(_QWORD *)&v319[14] = v191;
          v320 = 2049;
          v321 = v192;
          LODWORD(v245) = 32;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,Using outgoing,incomingID,%{private}lld,outgoingID,%{private}lld", v319, v245);
          v194 = (std::string *)v193;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v193);
          if (v194 != &buf)
            free(v194);
          v4 = v246;
        }
      }
      if (v64 >= 19.0)
        goto LABEL_214;
LABEL_213:
      *(double *)(a1 + 1320) = v64;
      sub_1011024B0(a1, (uint64_t)v249);
      goto LABEL_214;
    }
  }
  if (*(_BYTE *)(v12 + 200))
  {
    if (!*(_BYTE *)(v12 + 192))
    {
      sub_10110E724((uint64_t *)v314, (uint64_t)&buf);
      if (sub_100F5C3F4(v12 + 224, (uint64_t)&buf))
      {
        sub_100349198(v248, (uint64_t *)(v12 + 56));
        if (*(_BYTE *)(a1 + 96))
        {
          if (*v248)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v87 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v88 = *(_QWORD *)(a1 + 1136);
              v89 = **(_QWORD **)(a1 + 1656);
              v90 = **(double **)v314;
              LODWORD(buf.__r_.__value_.__l.__data_) = 134349569;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v88;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v89;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
              v325 = v90;
              _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Using particle on outgoing,incomingID,%{private}lld,outgoingID,%{private}lld", (uint8_t *)&buf, 0x20u);
            }
            v4 = v246;
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v206 = *(_QWORD *)(a1 + 1136);
              v207 = **(_QWORD **)(a1 + 1656);
              v208 = **(double **)v314;
              *(_DWORD *)v319 = 134349569;
              *(_QWORD *)&v319[4] = v206;
              *(_WORD *)&v319[12] = 2049;
              *(_QWORD *)&v319[14] = v207;
              v320 = 2049;
              v321 = v208;
              LODWORD(v245) = 32;
              _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,Using particle on outgoing,incomingID,%{private}lld,outgoingID,%{private}lld", v319, v245);
              v210 = (std::string *)v209;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v209);
              if (v210 != &buf)
                free(v210);
              v4 = v246;
            }
          }
        }
      }
    }
  }
  v91 = *(_OWORD *)(v12 + 4968);
  v92 = *(_OWORD *)(v12 + 4984);
  v93 = *(_OWORD *)(v12 + 5016);
  *(_OWORD *)(a1 + 1160) = *(_OWORD *)(v12 + 5000);
  *(_OWORD *)(a1 + 1176) = v93;
  *(_OWORD *)v249 = v91;
  *(_OWORD *)(a1 + 1144) = v92;
  v94 = *(_OWORD *)(v12 + 5032);
  v95 = *(_OWORD *)(v12 + 5048);
  v96 = *(_OWORD *)(v12 + 5080);
  *(_OWORD *)(a1 + 1224) = *(_OWORD *)(v12 + 5064);
  *(_OWORD *)(a1 + 1240) = v96;
  *(_OWORD *)(a1 + 1192) = v94;
  *(_OWORD *)(a1 + 1208) = v95;
  std::string::operator=((std::string *)(a1 + 1256), (const std::string *)(v12 + 5096));
  memcpy((void *)(a1 + 1280), (const void *)(v12 + 5120), 0x118uLL);
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v97 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v98 = *(_QWORD *)(a1 + 1136);
      sub_10110E724((uint64_t *)v314, (uint64_t)&buf);
      *(_DWORD *)v319 = 134349313;
      *(_QWORD *)&v319[4] = v98;
      *(_WORD *)&v319[12] = 2049;
      *(_QWORD *)&v319[14] = buf.__r_.__value_.__r.__words[0];
      _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,bestParticleRoadID,%{private}lld", v319, 0x16u);
    }
    v4 = v246;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v181 = qword_1022A00D8;
      v182 = *(_QWORD *)(a1 + 1136);
      sub_10110E724((uint64_t *)v314, (uint64_t)v319);
      *(_DWORD *)v311 = 134349313;
      *(_QWORD *)&v311[4] = v182;
      v312 = 2049;
      v313 = *(_QWORD *)v319;
      LODWORD(v245) = 22;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v181, 2, "CLMM,%{public}.1lf,bestParticleRoadID,%{private}lld", v311, v245);
      v184 = (std::string *)v183;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v183);
      if (v184 != &buf)
        free(v184);
      v4 = v246;
    }
  }
  if (v64 < 19.0 && !*(_BYTE *)(a1 + 1649))
    goto LABEL_213;
LABEL_214:
  if (*(_BYTE *)(a1 + 1490))
  {
    v99 = 0.0;
    if (*(_DWORD *)(a1 + 1528) == 1)
      goto LABEL_260;
  }
  if (*(_BYTE *)(a1 + 1649) && !*(_BYTE *)(a1 + 1650) || (v100 = *v4, *v4 == v5))
  {
    v99 = 0.0;
    goto LABEL_260;
  }
  v99 = 0.0;
  while (2)
  {
    if (v100 == (double *)v12 || *(_BYTE *)(v12 + 200) && sub_100F5C3F4((uint64_t)(v100 + 4), v12 + 224))
      goto LABEL_248;
    v101 = v100[17];
    if (v101 == 0.0)
      goto LABEL_248;
    if (v101 > v99)
      v99 = v100[17];
    v102 = *(double *)(v12 + 136) / v101;
    v103 = v102 <= 1000000.0 ? v102 : 1000000.0;
    if (v103 > 3.0
      || (v104 = sub_1011010A8(*(double *)(v12 + 5136) - v100[642]),
          *(_QWORD *)v311 = 0,
          v256 = 0.0,
          sub_1010B9950((double *)(a1 + 608), (double *)v311, &v256, *(double *)(v12 + 5120), *(double *)(v12 + 5128), *(double *)(v12 + 5040), *(double *)(v12 + 5136), v100[640], v100[641]), v104 >= 35.0))
    {
LABEL_248:
      v110 = (double *)*((_QWORD *)v100 + 1);
      if (v110)
      {
        do
        {
          v111 = v110;
          v110 = *(double **)v110;
        }
        while (v110);
      }
      else
      {
        do
        {
          v111 = (double *)*((_QWORD *)v100 + 2);
          _ZF = *(_QWORD *)v111 == (_QWORD)v100;
          v100 = v111;
        }
        while (!_ZF);
      }
      v100 = v111;
      if (v111 == v5)
        goto LABEL_260;
      continue;
    }
    break;
  }
  if (*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 2233))
  {
    v105 = fabs(v256);
    v106 = fabs(*(double *)v311);
    _NF = v106 > 2.0 && v105 < 1.5;
    if (!_NF && v106 <= 10.0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v109 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349824;
          *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v104;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = *(_QWORD *)v311;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          v325 = v103;
          v326 = 2050;
          v327 = v256;
          _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "CLMM,ambiguous solution not detected,fabsCourseDiff,%{public}.1lf,acrossTrack,%{public}.1lf,ratio,%{public}.3lf,alongTrackToAlt,%{public}.1lf", (uint8_t *)&buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          *(_DWORD *)v319 = 134349824;
          *(double *)&v319[4] = v104;
          *(_WORD *)&v319[12] = 2050;
          *(_QWORD *)&v319[14] = *(_QWORD *)v311;
          v320 = 2050;
          v321 = v103;
          LOWORD(v322) = 2050;
          *(double *)((char *)&v322 + 2) = v256;
          LODWORD(v245) = 42;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,ambiguous solution not detected,fabsCourseDiff,%{public}.1lf,acrossTrack,%{public}.1lf,ratio,%{public}.3lf,alongTrackToAlt,%{public}.1lf", v319, v245);
          v113 = (std::string *)v112;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v112);
          if (v113 != &buf)
            free(v113);
        }
      }
      if (*(_BYTE *)(a1 + 1393))
        goto LABEL_420;
      goto LABEL_248;
    }
  }
  *(_BYTE *)(a1 + 1393) = 1;
LABEL_420:
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v173 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349824;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v104;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = *(_QWORD *)v311;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      v325 = v103;
      v326 = 2050;
      v327 = v256;
      _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_DEBUG, "CLMM,ambiguous solution detected,fabsCourseDiff,%{public}.1lf,acrossTrack,%{public}.1lf,ratio,%{public}.3lf,alongTrackToAlt,%{public}.1lf", (uint8_t *)&buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      *(_DWORD *)v319 = 134349824;
      *(double *)&v319[4] = v104;
      *(_WORD *)&v319[12] = 2050;
      *(_QWORD *)&v319[14] = *(_QWORD *)v311;
      v320 = 2050;
      v321 = v103;
      LOWORD(v322) = 2050;
      *(double *)((char *)&v322 + 2) = v256;
      LODWORD(v245) = 42;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,ambiguous solution detected,fabsCourseDiff,%{public}.1lf,acrossTrack,%{public}.1lf,ratio,%{public}.3lf,alongTrackToAlt,%{public}.1lf", v319, v245);
      v222 = (std::string *)v221;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v221);
      if (v222 != &buf)
        free(v222);
    }
  }
  *(_BYTE *)(a1 + 1648) = 1;
  sub_10110E7C4(a1 + 1680, (uint64_t)(v100 + 10));
  *(_BYTE *)(a1 + 1672) = 1;
  if (*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 2233))
    *(_QWORD *)(a1 + 3152) = *(_QWORD *)(a1 + 1136);
LABEL_260:
  if (*(_BYTE *)(a1 + 1393))
  {
    v114 = *(uint64_t **)(a1 + 4048);
    v115 = *(uint64_t **)(a1 + 4056);
    while (v114 != v115)
    {
      sub_10110E724((uint64_t *)(a1 + 1016), (uint64_t)&buf);
      v116 = (std::__shared_weak_count *)v114[1];
      v250 = *v114;
      v251 = v116;
      if (v116)
      {
        p_shared_owners = (unint64_t *)&v116->__shared_owners_;
        do
          v118 = __ldxr(p_shared_owners);
        while (__stxr(v118 + 1, p_shared_owners));
      }
      sub_100F5C398((uint64_t)v319, (uint64_t)&v250, *((_BYTE *)v114 + 20));
      v119 = sub_100F5C3F4((uint64_t)&buf, (uint64_t)v319);
      v120 = v251;
      if (v251)
      {
        v121 = (unint64_t *)&v251->__shared_owners_;
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      if (v119)
      {
        *(_BYTE *)(a1 + 1393) = 0;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v123 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v124 = *(_QWORD *)(a1 + 1136);
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v124;
          _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEBUG, "%{public}.1lf,CLMM,ambiguity reverted using route-hints", (uint8_t *)&buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v187 = *(_QWORD *)(a1 + 1136);
          *(_DWORD *)v319 = 134349056;
          *(_QWORD *)&v319[4] = v187;
          LODWORD(v245) = 12;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "%{public}.1lf,CLMM,ambiguity reverted using route-hints", v319, v245);
          v189 = (std::string *)v188;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v188);
          if (v189 != &buf)
            free(v189);
        }
        break;
      }
      v114 += 7;
    }
  }
  if (*(_BYTE *)(a1 + 1848)
    && *(_BYTE *)(a1 + 2233)
    && !*(_BYTE *)(a1 + 1393)
    && *(double *)(a1 + 1136) - *(double *)(a1 + 3152) < 3.1)
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v125 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEBUG, "CLMM,ambiguous solution hysteresis", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        *(_WORD *)v319 = 0;
        LODWORD(v245) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,ambiguous solution hysteresis", v319, v245);
        v205 = (std::string *)v204;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v204);
        if (v205 != &buf)
          free(v205);
      }
    }
    *(_BYTE *)(a1 + 1393) = 1;
    *(_BYTE *)(a1 + 1648) = 1;
    *(_BYTE *)(a1 + 1672) = 0;
  }
  v126 = *(double *)&v314[28];
  *(_QWORD *)(a1 + 1616) = *(_QWORD *)&v314[28];
  if (v99 <= 0.0)
  {
    v127 = *(double *)(a1 + 1632);
  }
  else
  {
    v127 = v126 / v99;
    *(double *)(a1 + 1632) = v127;
    if (v127 > 1000000.0)
    {
      *(_QWORD *)(a1 + 1632) = 0x412E848000000000;
      v127 = 1000000.0;
    }
  }
  *(_DWORD *)(a1 + 1408) = 1;
  v128 = *(_QWORD *)&v314[16];
  v129 = *(_QWORD *)&v314[20];
  *(_QWORD *)(a1 + 1280) = *(_QWORD *)&v314[16];
  *(_QWORD *)(a1 + 1288) = v129;
  v130 = *(float *)&v314[12];
  *(double *)(a1 + 1296) = *(float *)&v314[12];
  *(_QWORD *)(a1 + 1416) = v128;
  *(_QWORD *)(a1 + 1424) = v129;
  *(double *)(a1 + 1432) = v130;
  v131 = *(_QWORD *)v314;
  *(_QWORD *)(a1 + 1248) = *(_QWORD *)(*(_QWORD *)v314 + 20);
  *(_QWORD *)(a1 + 1400) = *(_QWORD *)&v314[24];
  *(float *)(a1 + 1304) = (float)v11;
  v132 = v127;
  *(float *)(a1 + 1308) = v132;
  if (*(char *)(v131 + 71) < 0)
    sub_100115CE4(&buf, *(void **)(v131 + 48), *(_QWORD *)(v131 + 56));
  else
    buf = *(std::string *)(v131 + 48);
  std::string::operator=((std::string *)(a1 + 1256), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 1240) = **(_QWORD **)v314;
  v133 = *(double *)(a1 + 1232);
  v134 = -1.0;
  if (v133 >= 0.0)
    v134 = sub_1011010A8(v133 - *(double *)(a1 + 1296));
  *(double *)(a1 + 1600) = v134;
  if (!*(_BYTE *)(a1 + 1357) && !*(_BYTE *)(a1 + 816))
  {
    v141 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
    if (v141 >= 0.0 && v141 < 30.0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v142 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v143 = *(unsigned __int8 *)(a1 + 1648);
          LODWORD(buf.__r_.__value_.__l.__data_) = 67240192;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v143;
          _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_DEBUG, "CLMM,dismounted recently,doNotSnapCourse,%{public}d", (uint8_t *)&buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v144 = *(unsigned __int8 *)(a1 + 1648);
          *(_DWORD *)v319 = 67240192;
          *(_DWORD *)&v319[4] = v144;
          LODWORD(v245) = 8;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,dismounted recently,doNotSnapCourse,%{public}d", v319, v245);
          v146 = (std::string *)v145;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v145);
          if (v146 != &buf)
            free(v146);
        }
      }
      goto LABEL_409;
    }
  }
  v135 = sub_10011E634((double *)(a1 + 608), *(double *)(a1 + 1184), *(double *)(a1 + 1192), *(double *)(a1 + 2024), *(double *)(a1 + 2032), *(double *)(a1 + 1200));
  v136 = sub_10110C524(a1, 35.0);
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v137 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v136;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v135;
      _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEBUG, "CLMM,distToNextMulti,%{public}.1lf, distFromPriorCrumb,%{public}.1lf", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      *(_DWORD *)v319 = 134349312;
      *(double *)&v319[4] = v136;
      *(_WORD *)&v319[12] = 2050;
      *(double *)&v319[14] = v135;
      LODWORD(v245) = 22;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,distToNextMulti,%{public}.1lf, distFromPriorCrumb,%{public}.1lf", v319, v245);
      v180 = (std::string *)v179;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v179);
      if (v180 != &buf)
        free(v180);
    }
  }
  v138 = *(double *)(a1 + 1320);
  if (v138 <= 0.0 || v138 >= 45.0 || *(double *)(a1 + 1600) <= 30.0)
  {
    if (*(_BYTE *)(a1 + 776))
    {
      v139 = 0;
      v140 = *(double *)(a1 + 800);
      if (v140 > 0.0 && v140 < 45.0)
        v139 = *(double *)(a1 + 792) > 30.0;
    }
    else
    {
      v139 = 0;
    }
  }
  else
  {
    v139 = 1;
  }
  if (*(_BYTE *)(a1 + 1648) || v136 < 0.0 || v136 >= 35.0 || !v139)
  {
LABEL_339:
    if (!*(_BYTE *)(a1 + 1648) && *(_BYTE *)(a1 + 1649) && v139)
    {
      if (*(_BYTE *)(v12 + 200))
      {
        if (*(_BYTE *)(v12 + 192))
        {
          if (sub_10011E634((double *)(a1 + 608), *(double *)(a1 + 1280), *(double *)(a1 + 1288), *(double *)(v12 + 408), *(double *)(v12 + 416), *(double *)(a1 + 1200)) < 35.0)
          {
            *(_BYTE *)(a1 + 1648) = 1;
            if (*(_BYTE *)(a1 + 96))
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v149 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                v150 = *(_QWORD *)(a1 + 1600);
                LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v150;
                _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEBUG, "CLMM,not snapping course,reason,at intersection,fabsCourseDifference,%{public}.1lf", (uint8_t *)&buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                v228 = *(_QWORD *)(a1 + 1600);
                *(_DWORD *)v319 = 134349056;
                *(_QWORD *)&v319[4] = v228;
                LODWORD(v245) = 12;
                _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,not snapping course,reason,at intersection,fabsCourseDifference,%{public}.1lf", v319, v245);
                v230 = (std::string *)v229;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v229);
                if (v230 != &buf)
                  free(v230);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 1648) = 1;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v147 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
        *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v136;
        _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_DEBUG, "CLMM,not snapping course,reason,distanceToIntersection,%{public}.1lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        *(_DWORD *)v319 = 134349056;
        *(double *)&v319[4] = v136;
        LODWORD(v245) = 12;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,not snapping course,reason,distanceToIntersection,%{public}.1lf", v319, v245);
        v186 = (std::string *)v185;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v185);
        if (v186 != &buf)
          free(v186);
      }
      goto LABEL_339;
    }
  }
  v151 = *(double *)(a1 + 1320);
  if (v151 > 0.0 && v151 < 5.0 && *(_BYTE *)(a1 + 752) && *(double *)(a1 + 1600) > 45.0)
  {
    *(_BYTE *)(a1 + 1648) = 1;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v152 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v153 = *(_QWORD *)(a1 + 1600);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v153;
        _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEBUG, "CLMM,not snapping course,reason,turning,fabsCourseDifference,%{public}.1lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v200 = *(_QWORD *)(a1 + 1600);
        *(_DWORD *)v319 = 134349056;
        *(_QWORD *)&v319[4] = v200;
        LODWORD(v245) = 12;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,not snapping course,reason,turning,fabsCourseDifference,%{public}.1lf", v319, v245);
        v202 = (std::string *)v201;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v201);
        if (v202 != &buf)
          free(v202);
      }
      goto LABEL_363;
    }
  }
  else
  {
LABEL_363:
    if (!*(_BYTE *)(a1 + 1648))
      goto LABEL_409;
  }
  if ((*(double *)(a1 + 1224) < 0.2 || *(_BYTE *)(a1 + 1356))
    && v135 < 2.5
    && (*(double *)(a1 + 1600) > 135.0 || *(_BYTE *)(a1 + 776) && *(double *)(a1 + 792) > 30.0))
  {
    *(_BYTE *)(a1 + 1648) = 0;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v154 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v155 = *(_QWORD *)(a1 + 1136);
        v156 = *(_QWORD *)(a1 + 1600);
        v157 = *(double *)(a1 + 792);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v155;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v156;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
        v325 = v157;
        _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,snapping course,reason,gps course not reliable,%{public}.1lf,fabsCourseDiffWithPriorSnap,%{public}.1lf", (uint8_t *)&buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v195 = *(_QWORD *)(a1 + 1136);
        v196 = *(_QWORD *)(a1 + 1600);
        v197 = *(double *)(a1 + 792);
        *(_DWORD *)v319 = 134349568;
        *(_QWORD *)&v319[4] = v195;
        *(_WORD *)&v319[12] = 2050;
        *(_QWORD *)&v319[14] = v196;
        v320 = 2050;
        v321 = v197;
        LODWORD(v245) = 32;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,snapping course,reason,gps course not reliable,%{public}.1lf,fabsCourseDiffWithPriorSnap,%{public}.1lf", v319, v245);
        v199 = (std::string *)v198;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v198);
        if (v199 != &buf)
          free(v199);
      }
    }
    if (*(double *)(a1 + 1600) > 135.0 && !*(_BYTE *)(a1 + 776))
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v158 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v159 = *(_QWORD *)(a1 + 1136);
          v160 = *(_QWORD *)(a1 + 1232);
          v161 = *(double *)(a1 + 1296);
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v159;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v160;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          v325 = v161;
          _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,overwriting unreliable GPS course,static case, priorCourse,%{public}.1lf,newCourse,%{public}.1lf", (uint8_t *)&buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v223 = *(_QWORD *)(a1 + 1136);
          v224 = *(_QWORD *)(a1 + 1232);
          v225 = *(double *)(a1 + 1296);
          *(_DWORD *)v319 = 134349568;
          *(_QWORD *)&v319[4] = v223;
          *(_WORD *)&v319[12] = 2050;
          *(_QWORD *)&v319[14] = v224;
          v320 = 2050;
          v321 = v225;
          LODWORD(v245) = 32;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,overwriting unreliable GPS course,static case, priorCourse,%{public}.1lf,newCourse,%{public}.1lf", v319, v245);
          v227 = (std::string *)v226;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v226);
          if (v227 != &buf)
            free(v227);
        }
      }
      *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a1 + 1296);
      *(_QWORD *)(a1 + 1320) = 0x403DE66666666666;
      *(_QWORD *)(a1 + 1600) = 0;
    }
  }
  if (*(_BYTE *)(a1 + 1648)
    && *(_BYTE *)(a1 + 384)
    && *(double *)(a1 + 1224) < 5.0
    && v135 < 5.0
    && fabs(*(double *)(a1 + 1640)) < 1.4
    && sub_1011010A8(*(double *)(a1 + 1296) - *(double *)(a1 + 288)) < 10.0
    && (*(double *)(a1 + 1600) > 135.0 || *(_BYTE *)(a1 + 776) && *(double *)(a1 + 792) > 135.0))
  {
    *(_BYTE *)(a1 + 1648) = 0;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v162 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v163 = *(_QWORD *)(a1 + 1136);
        v164 = *(_QWORD *)(a1 + 1600);
        v165 = *(double *)(a1 + 792);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v163;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v164;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
        v325 = v165;
        _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,snapping course, reason,gps course flipping at low speeds,%{public}.1lf,fabsCourseDiffWithPriorSnap,%{public}.1lf", (uint8_t *)&buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v235 = *(_QWORD *)(a1 + 1136);
        v236 = *(_QWORD *)(a1 + 1600);
        v237 = *(double *)(a1 + 792);
        *(_DWORD *)v319 = 134349568;
        *(_QWORD *)&v319[4] = v235;
        *(_WORD *)&v319[12] = 2050;
        *(_QWORD *)&v319[14] = v236;
        v320 = 2050;
        v321 = v237;
        LODWORD(v245) = 32;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,snapping course, reason,gps course flipping at low speeds,%{public}.1lf,fabsCourseDiffWithPriorSnap,%{public}.1lf", v319, v245);
        v239 = (std::string *)v238;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v238);
        if (v239 != &buf)
          free(v239);
      }
    }
    if (*(double *)(a1 + 1600) > 135.0 && !*(_BYTE *)(a1 + 776))
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v166 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v167 = *(_QWORD *)(a1 + 1136);
          v168 = *(_QWORD *)(a1 + 1232);
          v169 = *(double *)(a1 + 1296);
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v167;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v168;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          v325 = v169;
          _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,overwriting unreliable GPS course,low speed case,priorCourse,%{public}.1lf,newCourse,%{public}.1lf", (uint8_t *)&buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v240 = *(_QWORD *)(a1 + 1136);
          v241 = *(_QWORD *)(a1 + 1232);
          v242 = *(double *)(a1 + 1296);
          *(_DWORD *)v319 = 134349568;
          *(_QWORD *)&v319[4] = v240;
          *(_WORD *)&v319[12] = 2050;
          *(_QWORD *)&v319[14] = v241;
          v320 = 2050;
          v321 = v242;
          LODWORD(v245) = 32;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,overwriting unreliable GPS course,low speed case,priorCourse,%{public}.1lf,newCourse,%{public}.1lf", v319, v245);
          v244 = (std::string *)v243;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v243);
          if (v244 != &buf)
            free(v244);
        }
      }
      *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a1 + 1296);
      *(_QWORD *)(a1 + 1320) = 0x403DE66666666666;
      *(_QWORD *)(a1 + 1600) = 0;
    }
  }
LABEL_409:
  if (*(_BYTE *)(a1 + 1648))
    *(_QWORD *)(a1 + 1296) = *(_QWORD *)(a1 + 1232);
  sub_101103F88(a1, a1 + 656, a1 + 1016, v249, (_QWORD *)(a1 + 1072), (_QWORD *)(a1 + 1088), (double *)(a1 + 1576), (double *)(a1 + 1584), (_QWORD *)(a1 + 1592), (double *)(a1 + 1568), *(_BYTE *)(a1 + 1393));
  *(_QWORD *)(a1 + 1616) = *(_QWORD *)(a1 + 1072);
  *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a1 + 1088);
  if (__src)
  {
    v317 = __src;
    operator delete(__src);
  }
  v170 = *(std::__shared_weak_count **)&v314[4];
  if (*(_QWORD *)&v314[4])
  {
    v171 = (unint64_t *)(*(_QWORD *)&v314[4] + 8);
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v24 = 1;
LABEL_59:
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
  if (*((_QWORD *)&v299 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v297 + 1);
  if (*((_QWORD *)&v297 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v297 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (SHIBYTE(v277) < 0)
    operator delete(*((void **)&v276 + 1));
  if ((_QWORD)v266)
  {
    *((_QWORD *)&v266 + 1) = v266;
    operator delete((void *)v266);
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
  if (*((_QWORD *)&v258 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return v24;
}

void sub_1011153AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_100F5EA24((uint64_t)&STACK[0x3F0]);
  sub_10110BDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011154DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  _BOOL4 v6;
  double *v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint8_t *v30;
  int v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const char *v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  int v57;
  uint64_t v58;
  __int16 v59;
  _BYTE v60[10];
  _BYTE v61[10];
  _BYTE v62[10];
  uint8_t buf[4];
  uint64_t v64;
  __int16 v65;
  _BYTE v66[10];
  _BYTE v67[10];
  double v68[200];

  if (*(_QWORD *)(a1 + 872) == *(_QWORD *)(a1 + 864))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v17 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_QWORD *)(a1 + 1136);
      *(_DWORD *)buf = 134349056;
      v64 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,roadWithAdustment,number of particles are 0", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v19 = *(_QWORD *)(a1 + 1136);
    v57 = 134349056;
    v58 = v19;
    v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,roadWithAdustment,number of particles are 0", &v57, 12);
LABEL_41:
    v25 = v20;
    sub_100512490("Generic", 1, 0, 2, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "%s\n", v21);
LABEL_42:
    if (v25 != buf)
      free(v25);
    return;
  }
  *(_QWORD *)(a1 + 1448) = 0;
  *(_QWORD *)(a1 + 1440) = 0;
  if (!*(_BYTE *)(a1 + 1008))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v22 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v23 = *(_QWORD *)(a1 + 1136);
      *(_DWORD *)buf = 134349056;
      v64 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,roadWithAdustment,snap invalid or frc = 9", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v24 = *(_QWORD *)(a1 + 1136);
    v57 = 134349056;
    v58 = v24;
    v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,roadWithAdustment,snap invalid or frc = 9", &v57, 12);
    goto LABEL_41;
  }
  if (!*(_QWORD *)(a1 + 1016))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v26 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_QWORD *)(a1 + 1136);
      *(_DWORD *)buf = 134349056;
      v64 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,roadWithAdustment,road is nullptr", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v28 = *(_QWORD *)(a1 + 1136);
      v57 = 134349056;
      v58 = v28;
      v29 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,roadWithAdustment,road is nullptr", &v57, 12);
      v25 = v30;
      sub_100512490("Generic", 1, 0, 0, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "%s\n", v29);
      goto LABEL_42;
    }
    return;
  }
  v55 = 0;
  v56 = 0.0;
  sub_1010B9950((double *)(a1 + 608), &v56, (double *)&v55, *(double *)(a1 + 1416), *(double *)(a1 + 1424), *(double *)(a1 + 1200), *(double *)(a1 + 1432), *(double *)(a1 + 1184), *(double *)(a1 + 1192));
  v2 = *(_QWORD *)(a1 + 1016);
  if (!v2)
    return;
  v3 = *(int *)(v2 + 20);
  if ((_DWORD)v3 == 9 || ((v4 = *(_DWORD *)(v2 + 72), v4 != 255) ? (v5 = v4 == 6) : (v5 = 1), v5))
  {
    v6 = *(_BYTE *)(v2 + 16) == 0;
    v7 = dbl_101C42270;
LABEL_12:
    v8 = v7[v6];
    goto LABEL_13;
  }
  v8 = *(double *)(v2 + 96);
  if (v8 < 0.000001)
  {
    v39 = *(unsigned __int8 *)(v2 + 16);
    if ((v3 & 0xFFFFFFFE) == 8)
    {
      v6 = v39 == 0;
      v7 = dbl_101BAFD30;
      goto LABEL_12;
    }
    if (v39)
    {
      if (v3 < 8)
      {
        v45 = (double *)&unk_101C42298;
LABEL_90:
        v8 = v45[v3];
        goto LABEL_13;
      }
      v8 = 5.55000019;
    }
    else
    {
      if (v3 < 8)
      {
        v45 = (double *)&unk_101C422D8;
        goto LABEL_90;
      }
      v8 = 7.4000001;
    }
  }
LABEL_13:
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2048);
  v9 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_QWORD *)(a1 + 1136);
    v11 = *(_QWORD *)(a1 + 1016);
    v12 = *(_DWORD *)(v11 + 20);
    LODWORD(v11) = *(unsigned __int8 *)(v11 + 16);
    *(_DWORD *)buf = 134350080;
    v64 = v10;
    v65 = 1026;
    *(_DWORD *)v66 = v12;
    *(_WORD *)&v66[4] = 1026;
    *(_DWORD *)&v66[6] = v11;
    *(_WORD *)v67 = 2050;
    *(double *)&v67[2] = v8;
    LOWORD(v68[0]) = 2050;
    *(double *)((char *)v68 + 2) = v56;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,frc,%{public}d,oneway,%{public}d,roadWidth,%{public}.1lf,acrossTrack,%{public}.3lf", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v46 = *(_QWORD *)(a1 + 1136);
    v47 = *(_QWORD *)(a1 + 1016);
    v48 = *(_DWORD *)(v47 + 20);
    LODWORD(v47) = *(unsigned __int8 *)(v47 + 16);
    v57 = 134350080;
    v58 = v46;
    v59 = 1026;
    *(_DWORD *)v60 = v48;
    *(_WORD *)&v60[4] = 1026;
    *(_DWORD *)&v60[6] = v47;
    *(_WORD *)v61 = 2050;
    *(double *)&v61[2] = v8;
    *(_WORD *)v62 = 2050;
    *(double *)&v62[2] = v56;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,frc,%{public}d,oneway,%{public}d,roadWidth,%{public}.1lf,acrossTrack,%{public}.3lf", &v57, 44);
    v50 = (uint8_t *)v49;
    sub_100512490("Generic", 1, 0, 2, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "%s\n", v49);
    if (v50 != buf)
      free(v50);
  }
  if (v8 >= 0.000001)
  {
    *(double *)(a1 + 1552) = v8;
    v13 = *(_QWORD *)(a1 + 1280);
    v53 = *(_QWORD *)(a1 + 1288);
    v54 = v13;
    v14 = *(double *)(a1 + 768);
    if (v14 <= 0.0 || vabdd_f64(*(double *)(a1 + 1136), v14) > 120.0)
    {
      *(_DWORD *)(a1 + 760) = sub_1011DF880(*(double *)(a1 + 1184), *(double *)(a1 + 1192));
      *(_QWORD *)(a1 + 768) = *(_QWORD *)(a1 + 1136);
    }
    v15 = v8 * 0.5;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 1016) + 16))
      goto LABEL_23;
    v31 = *(_DWORD *)(a1 + 760);
    v32 = 0.0;
    switch(v31)
    {
      case 2:
        if (v56 <= 0.0)
        {
          if (v56 < 0.0)
            v32 = fabs(v56) + 1.85000002;
          goto LABEL_61;
        }
        v40 = fabs(v56);
        if (v40 < v15)
          goto LABEL_24;
        v41 = v15 + -1.85000002;
        if (v15 <= 1.85000002)
          v41 = v15 * 0.85;
        v42 = v40 - v41;
        break;
      case 1:
        if (v56 < 0.0)
        {
          v43 = fabs(v56);
          if (v43 < v15)
            goto LABEL_24;
          v44 = v15 + -1.85000002;
          if (v15 <= 1.85000002)
            v44 = v15 * 0.85;
          v32 = v43 - v44;
          goto LABEL_61;
        }
        if (v56 <= 0.0)
        {
LABEL_61:
          sub_100081058((double *)(a1 + 608), (double *)&v54, (double *)&v53, *(double *)(a1 + 1184), *(double *)(a1 + 1192), *(double *)(a1 + 1200), *(double *)(a1 + 1432), v32);
          *(double *)(a1 + 1568) = v32;
          *(_DWORD *)(a1 + 1408) = 2;
          v36 = v53;
          v35 = v54;
          *(_QWORD *)(a1 + 1280) = v54;
          *(_QWORD *)(a1 + 1288) = v36;
          *(_QWORD *)(a1 + 1440) = v35;
          *(_QWORD *)(a1 + 1448) = v36;
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v37 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            v38 = *(_QWORD *)(a1 + 1136);
            *(_DWORD *)buf = 134349824;
            v64 = v38;
            v65 = 2050;
            *(double *)v66 = v56;
            *(_WORD *)&v66[8] = 2050;
            *(double *)v67 = v32;
            *(_WORD *)&v67[8] = 2050;
            v68[0] = v15;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,roadWidthCorrection,acrossTrack,%{public}.2lf,correction,%{public}.2lf,halfRoadWidth,%{public}.2lf", buf, 0x2Au);
          }
          if (!sub_1001BFF7C(115, 2))
            return;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v51 = *(_QWORD *)(a1 + 1136);
          v57 = 134349824;
          v58 = v51;
          v59 = 2050;
          *(double *)v60 = v56;
          *(_WORD *)&v60[8] = 2050;
          *(double *)v61 = v32;
          *(_WORD *)&v61[8] = 2050;
          *(double *)v62 = v15;
          LODWORD(v52) = 42;
          v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,roadWidthCorrection,acrossTrack,%{public}.2lf,correction,%{public}.2lf,halfRoadWidth,%{public}.2lf", &v57, v52);
          goto LABEL_41;
        }
        v42 = fabs(v56) + 1.85000002;
        break;
      case 0:
LABEL_23:
        v16 = fabs(v56);
        if (v16 < v15)
        {
LABEL_24:
          *(_OWORD *)(a1 + 1280) = *(_OWORD *)(a1 + 1184);
          return;
        }
        v33 = v15 + -1.85000002;
        if (v15 <= 1.85000002)
          v33 = v15 * 0.85;
        v34 = v16 - v33;
        if (v56 >= 0.0)
          v32 = -v34;
        else
          v32 = v34;
        goto LABEL_61;
      default:
        goto LABEL_61;
    }
    v32 = -v42;
    goto LABEL_61;
  }
}

void sub_101115EB0(uint64_t a1)
{
  NSObject *v2;
  double v3;
  double v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  double v8;
  double v9;
  int v11;
  int v12;
  double v13;
  NSObject *v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  _DWORD v23[2];
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;

  if (*(_QWORD *)(a1 + 872) == *(_QWORD *)(a1 + 864) || !*(_BYTE *)(a1 + 1392))
    return;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v2 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,performPartialMatching", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      LOWORD(v23[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,performPartialMatching", v23, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLParticleMapMatcher::performPartialMatching()", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  v3 = *(double *)(a1 + 1280);
  v4 = *(double *)(a1 + 1288);
  if (*(_BYTE *)(a1 + 1490) && *(_DWORD *)(a1 + 1528) == 1)
  {
    *(double *)(a1 + 1456) = v3;
    *(double *)(a1 + 1464) = v4;
    *(_DWORD *)(a1 + 2972) = 0;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,skipping partial match as solution is inside tunnel", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      LOWORD(v23[0]) = 0;
      LODWORD(v22) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,skipping partial match as solution is inside tunnel", v23, v22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLParticleMapMatcher::performPartialMatching()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    return;
  }
  if (*(double *)(a1 + 2200) < 4.0)
    *(_DWORD *)(a1 + 2972) = 0;
  v8 = *(double *)(a1 + 1600);
  v9 = *(double *)(a1 + 1360);
  if (v8 >= 0.0 && v8 < 25.0)
  {
    v12 = *(_DWORD *)(a1 + 2972);
    if (v9 > 10.0)
    {
LABEL_33:
      v11 = v12 + 2;
      goto LABEL_38;
    }
LABEL_35:
    if (v12 <= 0)
      v11 = 0;
    else
      v11 = v12 - 1;
    goto LABEL_38;
  }
  if (v9 <= 6.0)
  {
    if (v8 > 45.0)
    {
      if (v9 <= 8.0)
      {
        v16 = *(_DWORD *)(a1 + 2972);
        if (v9 <= 10.0)
          v11 = v16 + 4;
        else
          v11 = v16 + 3;
        goto LABEL_38;
      }
      v12 = *(_DWORD *)(a1 + 2972);
      goto LABEL_33;
    }
    v12 = *(_DWORD *)(a1 + 2972);
    goto LABEL_35;
  }
  v11 = *(_DWORD *)(a1 + 2972) + 1;
LABEL_38:
  *(_DWORD *)(a1 + 2972) = v11;
  if (v11 >= 1)
  {
    if (v11 >= 0x1F)
    {
      v11 = 30;
      *(_DWORD *)(a1 + 2972) = 30;
    }
    v13 = (double)v11 / 40.0;
    v3 = *(double *)(a1 + 1184) * v13 + (1.0 - v13) * v3;
    v4 = v13 * *(double *)(a1 + 1192) + (1.0 - v13) * v4;
    if (v8 >= 0.0 && v8 > 20.0)
      *(_QWORD *)(a1 + 1296) = *(_QWORD *)(a1 + 1232);
    *(_DWORD *)(a1 + 1408) = 3;
    *(double *)(a1 + 1280) = v3;
    *(double *)(a1 + 1288) = v4;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v14 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v15 = *(_DWORD *)(a1 + 2972);
        *(_DWORD *)buf = 67240704;
        v29 = v15;
        v30 = 2050;
        v31 = v13;
        v32 = 2050;
        v33 = 1.0 - v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMM,partial snapping,poorVarFactorCount,%{public}d,weightGPS,%{public}.2lf,weightSnap,%{public}.2lf", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v19 = *(_DWORD *)(a1 + 2972);
        v23[0] = 67240704;
        v23[1] = v19;
        v24 = 2050;
        v25 = v13;
        v26 = 2050;
        v27 = 1.0 - v13;
        LODWORD(v22) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,partial snapping,poorVarFactorCount,%{public}d,weightGPS,%{public}.2lf,weightSnap,%{public}.2lf", v23, v22);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLParticleMapMatcher::performPartialMatching()", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
    }
  }
  *(double *)(a1 + 1456) = v3;
  *(double *)(a1 + 1464) = v4;
}

uint64_t sub_101116478(uint64_t a1, double *a2, double *a3, _BYTE *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  void *v25;
  void *v26;
  int v27;
  void **v28;
  uint64_t v29;
  void **v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v36;
  BOOL v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  char v42;
  NSObject *v43;
  NSObject *v44;
  char v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  const char *v50;
  uint8_t *v51;
  const char *v52;
  uint8_t *v53;
  const char *v54;
  uint8_t *v55;
  uint64_t v56;
  void *__p[2];
  uint64_t v58;
  void *__s1[2];
  uint64_t v60;
  _OWORD v61[3];
  _BYTE v62[32];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _QWORD v68[35];
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint8_t buf[8];
  std::__shared_weak_count *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  *a4 = 1;
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v72 = v9;
  v73 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v69 = (uint64_t)&v69;
  v70 = &v69;
  v71 = 0;
  v12 = *(_OWORD *)(a1 + 1208);
  *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 1192);
  v63 = v12;
  v13 = *(_OWORD *)(a1 + 1240);
  v64 = *(_OWORD *)(a1 + 1224);
  v65 = v13;
  v14 = *(_OWORD *)(a1 + 1144);
  v61[0] = *(_OWORD *)(a1 + 1128);
  v61[1] = v14;
  v15 = *(_OWORD *)(a1 + 1176);
  v61[2] = *(_OWORD *)(a1 + 1160);
  *(_OWORD *)v62 = v15;
  if (*(char *)(a1 + 1279) < 0)
  {
    sub_100115CE4(&v66, *(void **)(a1 + 1256), *(_QWORD *)(a1 + 1264));
  }
  else
  {
    v66 = *(_OWORD *)(a1 + 1256);
    v67 = *(_QWORD *)(a1 + 1272);
  }
  memcpy(v68, (const void *)(a1 + 1280), sizeof(v68));
  *(_OWORD *)&v62[8] = *(_OWORD *)&v68[17];
  *((_QWORD *)&v64 + 1) = v68[19];
  if (((*(uint64_t (**)(uint64_t, uint64_t *, _OWORD *, uint64_t, double))(*(_QWORD *)v9 + 64))(v9, &v69, v61, 1, *a2) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v41 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLMM,roadsWithinDistance returned false", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        LOWORD(__s1[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,roadsWithinDistance returned false", __s1, 2);
        v51 = (uint8_t *)v50;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)", "%s\n", v50);
        if (v51 != buf)
          free(v51);
      }
    }
    v42 = 0;
    ++*(_DWORD *)(a1 + 108);
    goto LABEL_87;
  }
  if (!v71)
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v43 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "CLMM,Unexpected roadsWithinDistance returned empty list", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        LOWORD(__s1[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected roadsWithinDistance returned empty list", __s1, 2);
        v55 = (uint8_t *)v54;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)", "%s\n", v54);
        if (v55 != buf)
          free(v55);
      }
    }
    v42 = 0;
    goto LABEL_87;
  }
  v16 = v70;
  if (v70 == &v69)
  {
LABEL_77:
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v44 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "CLMM,Unexpected roadsWithinDistance returned only railways", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        LOWORD(__s1[0]) = 0;
        LODWORD(v56) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,Unexpected roadsWithinDistance returned only railways", __s1, v56);
        v53 = (uint8_t *)v52;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)", "%s\n", v52);
        if (v53 != buf)
          free(v53);
      }
    }
    v45 = 0;
    v38 = 1;
    goto LABEL_86;
  }
  v17 = 1;
  do
  {
    v18 = v16[2];
    if (*(_BYTE *)(v18 + 17))
      goto LABEL_54;
    v19 = (std::__shared_weak_count *)v16[3];
    *(_QWORD *)buf = v16[2];
    v75 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *((_OWORD *)v16 + 3);
    v76 = *((_OWORD *)v16 + 2);
    v77 = v22;
    v78 = v16[8];
    v23 = *(_QWORD *)(a1 + 1016);
    if (*(_QWORD *)v23 == *(_QWORD *)v18)
      goto LABEL_46;
    if (*(char *)(v23 + 71) < 0)
    {
      sub_100115CE4(__s1, *(void **)(v23 + 48), *(_QWORD *)(v23 + 56));
    }
    else
    {
      *(_OWORD *)__s1 = *(_OWORD *)(v23 + 48);
      v60 = *(_QWORD *)(v23 + 64);
    }
    if (*(char *)(v18 + 71) < 0)
    {
      sub_100115CE4(__p, *(void **)(v18 + 48), *(_QWORD *)(v18 + 56));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v18 + 48);
      v58 = *(_QWORD *)(v18 + 64);
    }
    v24 = HIBYTE(v60);
    if (v60 >= 0)
      v25 = (void *)HIBYTE(v60);
    else
      v25 = __s1[1];
    v26 = (void *)HIBYTE(v58);
    v27 = SHIBYTE(v58);
    if (v58 < 0)
      v26 = __p[1];
    if (v25 != v26)
    {
      v37 = 0;
      if ((SHIBYTE(v58) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_57;
    }
    if (v58 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if (SHIBYTE(v60) < 0)
    {
      v37 = memcmp(__s1[0], v28, (size_t)__s1[1]) == 0;
      goto LABEL_43;
    }
    if (HIBYTE(v60))
    {
      v29 = HIBYTE(v60) - 1;
      v30 = __s1;
      do
      {
        v32 = *(unsigned __int8 *)v30;
        v30 = (void **)((char *)v30 + 1);
        v31 = v32;
        v34 = *(unsigned __int8 *)v28;
        v28 = (void **)((char *)v28 + 1);
        v33 = v34;
        v36 = v29-- != 0;
        v37 = v31 == v33;
      }
      while (v31 == v33 && v36);
LABEL_43:
      if ((v27 & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_57;
    }
    v37 = 1;
    if ((SHIBYTE(v58) & 0x80000000) == 0)
    {
LABEL_44:
      if ((v24 & 0x80) == 0)
        goto LABEL_45;
      goto LABEL_58;
    }
LABEL_57:
    operator delete(__p[0]);
    if ((v60 & 0x8000000000000000) == 0)
    {
LABEL_45:
      if (!v37)
        goto LABEL_59;
      goto LABEL_46;
    }
LABEL_58:
    operator delete(__s1[0]);
    if (!v37)
    {
LABEL_59:
      if (sub_1011010A8(*(double *)(a1 + 1432) - *((float *)&v76 + 2)) >= *a3)
      {
        v38 = 0;
      }
      else
      {
        v38 = 1;
        *a4 = 1;
        HIDWORD(v56) = 1;
      }
      goto LABEL_47;
    }
LABEL_46:
    v38 = 16;
LABEL_47:
    if (v19)
    {
      v39 = (unint64_t *)&v19->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if ((v38 | 0x10) != 0x10)
      goto LABEL_85;
    v17 = 0;
LABEL_54:
    v16 = (uint64_t *)v16[1];
  }
  while (v16 != &v69);
  if ((v17 & 1) != 0)
    goto LABEL_77;
  v38 = 0;
  *a4 = 0;
LABEL_85:
  v45 = BYTE4(v56);
LABEL_86:
  v42 = (v38 == 0) | v45;
LABEL_87:
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  sub_1001A5CBC(&v69);
  v46 = v73;
  if (v73)
  {
    v47 = (unint64_t *)&v73->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  return v42 & 1;
}

void sub_101116C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  sub_1001A5CBC((uint64_t *)&STACK[0x208]);
  sub_100261F44((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t sub_101116CB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  _DWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  NSObject *v13;
  const char *v14;
  char *v15;
  double v16;
  double v17;
  NSObject *v18;
  double v19;
  double v20;
  NSObject *v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  double v27;
  double v28;
  double v29;
  NSObject *v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  double v34;
  NSObject *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  const char *v41;
  char *v42;
  const char *v43;
  char *v44;
  NSObject *v45;
  uint64_t v46;
  _QWORD *v47;
  float *v48;
  double v49;
  double v50;
  float v51;
  float *v52;
  float *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  float *v59;
  int v60;
  uint64_t *v61;
  void **v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  void *v67;
  void *v68;
  int v69;
  uint64_t v70;
  void **v71;
  int v72;
  int v73;
  int v74;
  int v75;
  BOOL v77;
  BOOL v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  double v82;
  double v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  const char *v90;
  char *v91;
  const char *v92;
  char *v93;
  const char *v94;
  uint64_t v95;
  void **v96;
  uint64_t *v97;
  double *v98;
  void *__dst[2];
  uint64_t v100;
  void *__s1[2];
  __int128 v102;
  __int128 v103;
  _QWORD v104[5];
  void *__p;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _DWORD *v111;
  std::__shared_weak_count *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _BYTE v116[33];
  void *v117;
  void *v118;
  uint64_t v119;
  __int128 buf;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  char v125;
  void *v126;
  void *v127;
  uint64_t v128;

  v2 = *(_QWORD *)(a1 + 872);
  v3 = *(_QWORD *)(a1 + 864);
  if (v2 != v3 && *(_BYTE *)(a1 + 652))
    return 1;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,prepareSeeding", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      LOWORD(v113) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,prepareSeeding", &v113, 2);
      v91 = (char *)v90;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v90);
      if (v91 != (char *)&buf)
        free(v91);
    }
  }
  v7 = *(_DWORD **)(a1 + 8);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  v111 = v7;
  v112 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v98 = (double *)(a1 + 1128);
  v10 = sub_10130AA74((double *)(a1 + 1128)) * 4.0;
  v11 = 75.0;
  if (v10 >= 75.0)
  {
    v11 = v10;
    if (v10 > 249.9999)
      v11 = 249.9999;
  }
  if (v2 == v3 || !*(_BYTE *)(a1 + 1008))
  {
LABEL_39:
    v20 = 249.9999 * 5.0;
    if (v11 <= 249.9999 * 5.0)
    {
      v20 = v11;
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v21 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134349056;
        *(double *)((char *)&buf + 4) = v11;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM,Unexpected maxDistance,%{public}.1lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        LODWORD(v113) = 134349056;
        *(double *)((char *)&v113 + 4) = v11;
        LODWORD(v95) = 12;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected maxDistance,%{public}.1lf", &v113, v95);
        v23 = (char *)v22;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v22);
        if (v23 != (char *)&buf)
          free(v23);
      }
    }
    v7[9] = 0;
    v108 = (uint64_t)&v108;
    v109 = &v108;
    v110 = 0;
    if (((*(uint64_t (**)(_DWORD *, uint64_t *, double *, uint64_t, double))(*(_QWORD *)v7 + 64))(v7, &v108, v98, 1, v20) & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v45 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLMM,roadsWithinDistance returned false", (uint8_t *)&buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          LOWORD(v113) = 0;
          LODWORD(v95) = 2;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,roadsWithinDistance returned false", &v113, v95);
          v93 = (char *)v92;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v92);
          if (v93 != (char *)&buf)
            free(v93);
        }
      }
      v4 = 0;
      ++*(_DWORD *)(a1 + 108);
LABEL_188:
      sub_1001A5CBC(&v108);
      if (!v6)
        return v4;
      goto LABEL_189;
    }
    if (!v110)
    {
      v4 = 0;
      ++*(_DWORD *)(a1 + 104);
      goto LABEL_188;
    }
    v97 = (uint64_t *)(a1 + 888);
    v24 = *(_QWORD *)(a1 + 896);
    v25 = *(_QWORD *)(a1 + 888);
    while (v24 != v25)
    {
      v24 -= 112;
      sub_10083CCF0(a1 + 904, v24);
    }
    *(_QWORD *)(a1 + 896) = v25;
    sub_101111B50(v97, 0x60uLL);
    *(_QWORD *)(a1 + 968) = *(_QWORD *)(a1 + 960);
    sub_1003908C0((void **)(a1 + 960), 0x60uLL);
    v96 = (void **)(a1 + 960);
    v113 = 0uLL;
    LODWORD(v114) = 0;
    WORD2(v114) = 1;
    DWORD2(v114) = 0;
    v118 = 0;
    v119 = 0;
    v117 = 0;
    v115 = 0u;
    memset(v116, 0, sizeof(v116));
    v26 = v109;
    if (v109 != &v108)
    {
      v27 = 0.0;
      v28 = 0.0;
      v29 = 0.0;
      while (1)
      {
        if (*(_BYTE *)(v26[2] + 17) && *(_BYTE *)(a1 + 96))
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v30 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf) = 0;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMM,including railway", (uint8_t *)&buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            LOWORD(__s1[0]) = 0;
            LODWORD(v95) = 2;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,including railway", __s1, v95);
            v42 = (char *)v41;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v41);
            if (v42 != (char *)&buf)
              free(v42);
          }
        }
        __s1[0] = 0;
        __s1[1] = 0;
        LODWORD(v102) = 0;
        WORD2(v102) = 1;
        DWORD2(v102) = 0;
        v106 = 0;
        v107 = 0;
        __p = 0;
        v103 = 0u;
        memset(v104, 0, 33);
        sub_100349198(__s1, v26 + 2);
        v31 = *((_OWORD *)v26 + 2);
        v32 = *((_OWORD *)v26 + 3);
        v104[0] = v26[8];
        v102 = v31;
        v103 = v32;
        v33 = __s1[0];
        if (__s1[0])
        {
          sub_101103EF0(a1, a1 + 656, (uint64_t)(v26 + 2), v98, &v104[1], &v104[3]);
          if (*(double *)&v104[1] <= v29)
          {
            v34 = v29;
            if (*(double *)&v104[1] > v28)
              v28 = *(double *)&v104[1];
          }
          else
          {
            sub_100349198(&v113, (uint64_t *)__s1);
            v114 = v102;
            v115 = v103;
            *(_QWORD *)v116 = v104[0];
            *(_OWORD *)&v116[8] = *(_OWORD *)&v104[1];
            *(_OWORD *)&v116[17] = *(_OWORD *)((char *)&v104[2] + 1);
            sub_100F5F1C8((char *)&v117, (char *)__p, (uint64_t)v106, 0x8E38E38E38E38E39 * ((v106 - (_BYTE *)__p) >> 3));
            v34 = *(double *)&v104[1];
            v28 = v29;
          }
          v36 = *(_QWORD *)(a1 + 896);
          if (v36 >= *(_QWORD *)(a1 + 904))
          {
            v37 = sub_1011247EC(v97, (uint64_t)__s1);
          }
          else
          {
            sub_101124910(a1 + 904, *(_QWORD *)(a1 + 896), (uint64_t)__s1);
            v37 = v36 + 112;
            *(_QWORD *)(a1 + 896) = v36 + 112;
          }
          *(_QWORD *)(a1 + 896) = v37;
          v27 = v27 + *(double *)&v104[1];
          v29 = v34;
        }
        else
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v35 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "CLMM,Unexpected NULL road", (uint8_t *)&buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            LOWORD(__dst[0]) = 0;
            LODWORD(v95) = 2;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected NULL road", __dst, v95);
            v44 = (char *)v43;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v43);
            if (v44 != (char *)&buf)
              free(v44);
          }
          ++*(_DWORD *)(a1 + 104);
        }
        if (__p)
        {
          v106 = __p;
          operator delete(__p);
        }
        v38 = (std::__shared_weak_count *)__s1[1];
        if (__s1[1])
        {
          v39 = (unint64_t *)((char *)__s1[1] + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        if (!v33)
          break;
        v26 = (uint64_t *)v26[1];
        if (v26 == &v108)
          goto LABEL_105;
      }
      v4 = 0;
      goto LABEL_180;
    }
    v27 = 0.0;
LABEL_105:
    v46 = *(_QWORD *)(a1 + 888);
    if (v46 == *(_QWORD *)(a1 + 896))
    {
      v4 = 0;
      ++*(_DWORD *)(a1 + 104);
    }
    else
    {
      v47 = (_QWORD *)(a1 + 976);
      v48 = *(float **)(a1 + 968);
      v49 = 0.0;
      do
      {
        v50 = *(double *)(v46 + 56) / v27;
        *(double *)(v46 + 64) = v50;
        v49 = v49 + v50;
        v51 = v49;
        if ((unint64_t)v48 >= *v47)
        {
          v53 = (float *)*v96;
          v54 = ((char *)v48 - (_BYTE *)*v96) >> 2;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 62)
            sub_100259694();
          v56 = *v47 - (_QWORD)v53;
          if (v56 >> 1 > v55)
            v55 = v56 >> 1;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
            v57 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            v58 = (char *)sub_100260634(a1 + 976, v57);
            v48 = *(float **)(a1 + 968);
            v53 = *(float **)(a1 + 960);
          }
          else
          {
            v58 = 0;
          }
          v59 = (float *)&v58[4 * v54];
          *v59 = v51;
          v52 = v59 + 1;
          while (v48 != v53)
          {
            v60 = *((_DWORD *)v48-- - 1);
            *((_DWORD *)v59-- - 1) = v60;
          }
          *(_QWORD *)(a1 + 960) = v59;
          *(_QWORD *)(a1 + 968) = v52;
          *(_QWORD *)(a1 + 976) = &v58[4 * v57];
          if (v53)
            operator delete(v53);
        }
        else
        {
          *v48 = v51;
          v52 = v48 + 1;
        }
        *(_QWORD *)(a1 + 968) = v52;
        v46 += 112;
        v48 = v52;
      }
      while (v46 != *(_QWORD *)(a1 + 896));
      *(_QWORD *)(a1 + 1624) = 0;
      if (v2 != v3)
      {
        v61 = v109;
        if (v109 == &v108)
        {
          *(_QWORD *)(a1 + 1632) = 0;
          goto LABEL_179;
        }
        while (1)
        {
          buf = 0uLL;
          LODWORD(v121) = 0;
          WORD2(v121) = 1;
          DWORD2(v121) = 0;
          v127 = 0;
          v128 = 0;
          v126 = 0;
          v122 = 0u;
          v123 = 0u;
          v124 = 0u;
          v125 = 0;
          sub_100349198(&buf, v61 + 2);
          v63 = *((_OWORD *)v61 + 2);
          v64 = *((_OWORD *)v61 + 3);
          *(_QWORD *)&v123 = v61[8];
          v121 = v63;
          v122 = v64;
          v65 = *(_QWORD *)(a1 + 1016);
          if ((_QWORD)buf == v65)
            goto LABEL_160;
          if (*(char *)(buf + 71) < 0)
          {
            sub_100115CE4(__s1, *(void **)(buf + 48), *(_QWORD *)(buf + 56));
            v65 = *(_QWORD *)(a1 + 1016);
          }
          else
          {
            *(_OWORD *)__s1 = *(_OWORD *)(buf + 48);
            *(_QWORD *)&v102 = *(_QWORD *)(buf + 64);
          }
          if (*(char *)(v65 + 71) < 0)
          {
            sub_100115CE4(__dst, *(void **)(v65 + 48), *(_QWORD *)(v65 + 56));
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(v65 + 48);
            v100 = *(_QWORD *)(v65 + 64);
          }
          v66 = BYTE7(v102);
          if ((SBYTE7(v102) & 0x80u) == 0)
            v67 = (void *)BYTE7(v102);
          else
            v67 = __s1[1];
          v68 = (void *)HIBYTE(v100);
          v69 = SHIBYTE(v100);
          if (v100 < 0)
            v68 = __dst[1];
          if (v67 == v68)
          {
            if (v100 >= 0)
              v62 = __dst;
            else
              v62 = (void **)__dst[0];
            if (SBYTE7(v102) < 0)
            {
              v78 = memcmp(__s1[0], v62, (size_t)__s1[1]) == 0;
              if ((v69 & 0x80000000) == 0)
                goto LABEL_151;
            }
            else if (BYTE7(v102))
            {
              v70 = BYTE7(v102) - 1;
              v71 = __s1;
              do
              {
                v73 = *(unsigned __int8 *)v71;
                v71 = (void **)((char *)v71 + 1);
                v72 = v73;
                v75 = *(unsigned __int8 *)v62;
                v62 = (void **)((char *)v62 + 1);
                v74 = v75;
                v77 = v70-- != 0;
                v78 = v72 == v74;
              }
              while (v72 == v74 && v77);
              if ((SHIBYTE(v100) & 0x80000000) == 0)
              {
LABEL_151:
                if ((v66 & 0x80) == 0)
                  goto LABEL_152;
                goto LABEL_156;
              }
            }
            else
            {
              v78 = 1;
              if ((SHIBYTE(v100) & 0x80000000) == 0)
                goto LABEL_151;
            }
          }
          else
          {
            v78 = 0;
            if ((SHIBYTE(v100) & 0x80000000) == 0)
              goto LABEL_151;
          }
          operator delete(__dst[0]);
          if ((BYTE7(v102) & 0x80) == 0)
          {
LABEL_152:
            if (!v78)
              goto LABEL_157;
            goto LABEL_160;
          }
LABEL_156:
          operator delete(__s1[0]);
          if (!v78)
          {
LABEL_157:
            if (*(_QWORD *)buf != **(_QWORD **)(a1 + 1016))
            {
              sub_101103EF0(a1, a1 + 656, (uint64_t)(v61 + 2), v98, (_QWORD *)&v123 + 1, (_QWORD *)&v124 + 1);
              if (*((double *)&v123 + 1) > *(double *)(a1 + 1624))
                *(_QWORD *)(a1 + 1624) = *((_QWORD *)&v123 + 1);
            }
          }
LABEL_160:
          if (v126)
          {
            v127 = v126;
            operator delete(v126);
          }
          v79 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1))
          {
            v80 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *, void **))v79->__on_zero_shared)(v79, v62);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          v61 = (uint64_t *)v61[1];
          if (v61 == &v108)
          {
            v82 = *(double *)(a1 + 1624);
            *(_QWORD *)(a1 + 1632) = 0;
            if (v82 > 0.0)
            {
              v83 = *(double *)(a1 + 1616) / v82;
              *(double *)(a1 + 1632) = v83;
              if (v83 > 1000000.0)
                *(_QWORD *)(a1 + 1632) = 0x412E848000000000;
            }
            break;
          }
        }
      }
LABEL_179:
      v4 = 1;
    }
LABEL_180:
    if (v117)
    {
      v118 = v117;
      operator delete(v117);
    }
    v84 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
    if (*((_QWORD *)&v113 + 1))
    {
      v85 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v6 = v112;
    goto LABEL_188;
  }
  v12 = *(double *)(a1 + 1184);
  if (v12 == 0.0 && *(double *)(a1 + 1192) == 0.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v13 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb lat==lon==0", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      LOWORD(v113) = 0;
      LODWORD(v95) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected crumb lat==lon==0", &v113, v95);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v14);
LABEL_205:
      if (v15 != (char *)&buf)
        free(v15);
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  v16 = *(double *)(a1 + 1280);
  v17 = *(double *)(a1 + 1288);
  if (v16 != 0.0 || v17 != 0.0)
  {
    v19 = sub_10011E634((double *)(a1 + 608), v12, *(double *)(a1 + 1192), v16, v17, *(double *)(a1 + 1200));
    if (v11 < v19)
      v11 = v19 + 10.0;
    goto LABEL_39;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2048);
  v18 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb snapLat==snapLon==0", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    LOWORD(v113) = 0;
    LODWORD(v95) = 2;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected crumb snapLat==snapLon==0", &v113, v95);
    v15 = (char *)v94;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v94);
    goto LABEL_205;
  }
LABEL_35:
  v4 = 0;
  ++*(_DWORD *)(a1 + 104);
  if (!v6)
    return v4;
LABEL_189:
  v87 = (unint64_t *)&v6->__shared_owners_;
  do
    v88 = __ldaxr(v87);
  while (__stlxr(v88 - 1, v87));
  if (!v88)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v4;
}

void sub_101117E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  sub_100261F44((uint64_t)&a46);
  _Unwind_Resume(a1);
}

uint64_t sub_101117EB0(uint64_t a1, _BYTE *a2)
{
  NSObject *v4;
  float v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t result;
  _BOOL4 v9;
  NSObject *v10;
  std::string *v11;
  BOOL v12;
  _BOOL4 v13;
  NSObject *v14;
  std::string::size_type v15;
  unsigned int v16;
  NSObject *v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  const char *v22;
  std::string *v23;
  double v24;
  NSObject *v25;
  const char *v26;
  std::string *v27;
  const char *v28;
  std::string *v29;
  uint64_t v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  std::string::size_type v34;
  const char *v35;
  std::string *v36;
  const char *v37;
  uint64_t v38;
  std::string v39;
  int v40;
  std::string *v41;
  std::string buf[68];

  if (*(_QWORD *)(a1 + 872) == *(_QWORD *)(a1 + 864))
  {
    result = 1;
    *a2 = 1;
    return result;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v4 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMM,assessMatchAndNeedForReseed", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      LOWORD(v39.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,assessMatchAndNeedForReseed", &v39, 2);
      v29 = (std::string *)v28;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
  }
  *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a1 + 1088);
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a1 + 1576);
  v5 = *(double *)(a1 + 1632);
  *(float *)(a1 + 1308) = v5;
  *(_QWORD *)(a1 + 1368) = *(_QWORD *)(a1 + 1592);
  v6 = *(_QWORD *)(a1 + 1016);
  *(_BYTE *)(a1 + 1489) = *(_BYTE *)(v6 + 19);
  *(_BYTE *)(a1 + 1490) = *(_BYTE *)(v6 + 18);
  if (*(_BYTE *)(a1 + 1649))
    v7 = *(_BYTE *)(a1 + 1650) == 0;
  else
    v7 = 0;
  v9 = sub_10110271C(a1, a1 + 1128, v7);
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v10 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      sub_10130B990(a1 + 1128, buf);
      v11 = (buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? buf
          : (std::string *)buf[0].__r_.__value_.__r.__words[0];
      LODWORD(v39.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,postEvaluateMatch,%{private}s", (uint8_t *)&v39, 0xCu);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v30 = qword_1022A00D8;
      sub_10130B990(a1 + 1128, &v39);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v39;
      else
        v31 = (std::string *)v39.__r_.__value_.__r.__words[0];
      v40 = 136380675;
      v41 = v31;
      LODWORD(v38) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "CLMM,postEvaluateMatch,%{private}s", &v40, v38);
      v33 = v32;
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "%s\n", (const char *)v33);
      if (v33 != buf)
        free(v33);
    }
  }
  *(_BYTE *)(a1 + 1392) = v9;
  if (*(_BYTE *)(a1 + 841))
    v12 = v9;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 1478) = v12;
  if (!*(_BYTE *)(a1 + 1488))
    sub_100F5E954(a1 + 3832, a1 + 1016, v9, *(double *)(a1 + 1136), *(double *)(a1 + 1208), *(double *)(a1 + 1200), *(double *)(a1 + 1216));
  sub_100F5EA54(a1 + 3184, (__int128 *)(a1 + 1128));
  v13 = sub_100F5EC98((uint64_t *)(a1 + 3184), *(unsigned __int8 *)(a1 + 96));
  if (!v13)
  {
    if (v9)
    {
      *(_DWORD *)(a1 + 2968) = 0;
      *(_OWORD *)(a1 + 2832) = 0u;
      return !v13;
    }
    *(_DWORD *)(a1 + 1408) = 0;
    *(_OWORD *)(a1 + 1280) = *(_OWORD *)(a1 + 1184);
    *(_QWORD *)(a1 + 1296) = *(_QWORD *)(a1 + 1232);
    if (*(double *)(a1 + 1088) > 70.0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v14 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v15 = *(_QWORD *)(a1 + 1088);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349312;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v15;
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 0x4051800000000000;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to varFactor,%{public}.1lf,max,%{public}.1lf", (uint8_t *)buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v34 = *(_QWORD *)(a1 + 1088);
          LODWORD(v39.__r_.__value_.__l.__data_) = 134349312;
          *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = v34;
          WORD2(v39.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&v39.__r_.__value_.__r.__words[1] + 6) = 0x4051800000000000;
          LODWORD(v38) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Reseeding due to varFactor,%{public}.1lf,max,%{public}.1lf", &v39, v38);
          v36 = (std::string *)v35;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "%s\n", v35);
          if (v36 != buf)
            free(v36);
        }
      }
      *a2 = 1;
    }
    v16 = *(_DWORD *)(a1 + 2968);
    if ((v16 & 0x80000000) != 0 || (*(_DWORD *)(a1 + 2968) = v16 + 1, v16 < 0x1E))
    {
      if (*a2 || !*(_BYTE *)(a1 + 1848) || *(double *)(a1 + 1136) - *(double *)(a1 + 1976) >= 4.9)
        return !v13;
      if (*(double *)(a1 + 1088) <= 50.0
        || *(double *)(a1 + 1928) <= 50.0
        || (v18 = *(double *)(a1 + 1608), v18 < 0.0)
        || (v24 = *(double *)(a1 + 2448), v24 >= 2.5)
        || v18 >= 2.5
        || v24 < 0.0)
      {
        *(double *)(a1 + 2832) = *(double *)(a1 + 1800) + *(double *)(a1 + 2832);
        v19 = sub_10011E634((double *)(a1 + 608), *(double *)(a1 + 2120), *(double *)(a1 + 2128), *(double *)(a1 + 1280), *(double *)(a1 + 1288), *(double *)(a1 + 1200))+ *(double *)(a1 + 2840);
        *(double *)(a1 + 2840) = v19;
        v20 = *(double *)(a1 + 2832);
        if (v20 > 80.0 && v20 / v19 > 5.0)
        {
          *a2 = 1;
          if (*(_BYTE *)(a1 + 96))
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v21 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to stuck at dead-end while observations move away", (uint8_t *)buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              LOWORD(v39.__r_.__value_.__l.__data_) = 0;
              LODWORD(v38) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Reseeding due to stuck at dead-end while observations move away", &v39, v38);
              v23 = (std::string *)v22;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "%s\n", v22);
              if (v23 != buf)
                free(v23);
            }
          }
        }
        return !v13;
      }
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_47;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v25 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to Neff", (uint8_t *)buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_47;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      LOWORD(v39.__r_.__value_.__l.__data_) = 0;
      LODWORD(v38) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Reseeding due to Neff", &v39, v38);
      v27 = (std::string *)v26;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "%s\n", v26);
    }
    else
    {
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_47;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v17 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        buf[0].__r_.__value_.__r.__words[0] = 0x1E04020100;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to badMatchCount,max,%{public}d", (uint8_t *)buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_47;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v39.__r_.__value_.__r.__words[0] = 0x1E04020100;
      LODWORD(v38) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Reseeding due to badMatchCount,max,%{public}d", &v39, v38);
      v27 = (std::string *)v37;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "%s\n", v37);
    }
    if (v27 != buf)
      free(v27);
LABEL_47:
    *a2 = 1;
    return !v13;
  }
  *(_BYTE *)(a1 + 1392) = 0;
  *(_BYTE *)(a1 + 1478) = 0;
  return !v13;
}

BOOL sub_10111896C(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  unint64_t v18;
  float *v19;
  unint64_t v20;
  float *v21;
  float *v22;
  float v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BOOL8 v31;
  __int128 v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  uint64_t v42;
  void *__p;
  _BYTE *v44;
  __int128 v45;
  _QWORD v46[4];
  _DWORD v47[4];
  uint8_t buf[8];

  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v2 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,reseed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      LOWORD(v45) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,reseed", &v45, 2);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::reseed()", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
  }
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v46[2] = *(_QWORD *)(a1 + 8);
  v46[3] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_101119040(a1);
  if (*(_QWORD *)(a1 + 888) == *(_QWORD *)(a1 + 896) && (sub_101116CB4(a1) & 1) == 0)
  {
    v31 = 0;
    if (!v3)
      return v31;
    goto LABEL_58;
  }
  v45 = 0uLL;
  v46[0] = 0;
  sub_101111B50((uint64_t *)&v45, 0x60uLL);
  v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 896) - *(_QWORD *)(a1 + 888)) >> 4);
  *(_DWORD *)buf = 0;
  sub_100CB0348(&__p, v6, buf);
  sub_10112437C(a1 + 984, *(_QWORD **)(a1 + 992));
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  v7 = *(_QWORD *)(a1 + 896);
  v8 = *(_QWORD *)(a1 + 888);
  if ((int)(-1227133513 * ((unint64_t)(v7 - v8) >> 4)) <= 95 && v8 != v7)
  {
    v7 = *(_QWORD *)(a1 + 888);
    do
    {
      v10 = *((_QWORD *)&v45 + 1);
      if (*((_QWORD *)&v45 + 1) >= v46[0])
      {
        v11 = sub_1011247EC((uint64_t *)&v45, v7);
      }
      else
      {
        sub_101124910((uint64_t)v46, *((uint64_t *)&v45 + 1), v7);
        v11 = v10 + 112;
      }
      *((_QWORD *)&v45 + 1) = v11;
      sub_10110C798(a1, (uint64_t *)v7, *(_BYTE *)(v7 + 20), *(double *)(v7 + 48), *(double *)(v7 + 32), *(double *)(v7 + 40));
      v7 += 112;
    }
    while (v7 != *(_QWORD *)(a1 + 896));
  }
  v12 = *((_QWORD *)&v45 + 1);
  v13 = v45;
  if (*((_QWORD *)&v45 + 1) - (_QWORD)v45 != 10752)
  {
    v14 = 0;
    do
    {
      v15 = random();
      v16 = *(float **)(a1 + 960);
      v17 = *(float **)(a1 + 968);
      if (v17 == v16)
      {
        v19 = *(float **)(a1 + 968);
      }
      else
      {
        v18 = v17 - v16;
        v19 = *(float **)(a1 + 960);
        do
        {
          v20 = v18 >> 1;
          v21 = &v19[v18 >> 1];
          v23 = *v21;
          v22 = v21 + 1;
          v18 += ~(v18 >> 1);
          if (v23 < (float)((float)v15 * 4.6566e-10))
            v19 = v22;
          else
            v18 = v20;
        }
        while (v18);
      }
      if (v17 != v19)
        ++*(_DWORD *)((char *)__p + (((char *)v19 - (char *)v16) << 30 >> 30));
      ++v14;
      v12 = *((_QWORD *)&v45 + 1);
      v13 = v45;
    }
    while (96 - 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v45 + 1) - v45) >> 4) > v14);
    v7 = *(_QWORD *)(a1 + 896);
  }
  v24 = *(_QWORD *)(a1 + 888);
  if (v24 != v7)
  {
    v25 = 0;
    v26 = __p;
    do
    {
      if (v25 >= (v44 - v26) >> 2)
        break;
      if (*(int *)&v26[4 * v25] >= 1)
      {
        v27 = 0;
        do
        {
          v28 = *((_QWORD *)&v45 + 1);
          if (*((_QWORD *)&v45 + 1) >= v46[0])
          {
            v29 = sub_1011247EC((uint64_t *)&v45, v24);
          }
          else
          {
            sub_101124910((uint64_t)v46, *((uint64_t *)&v45 + 1), v24);
            v29 = v28 + 112;
          }
          *((_QWORD *)&v45 + 1) = v29;
          sub_10110C798(a1, (uint64_t *)v24, *(_BYTE *)(v24 + 20), *(double *)(v24 + 48), *(double *)(v24 + 32), *(double *)(v24 + 40));
          ++v27;
          v26 = __p;
        }
        while (v27 < *((_DWORD *)__p + v25));
        v7 = *(_QWORD *)(a1 + 896);
      }
      v24 += 112;
      ++v25;
    }
    while (v24 != v7);
    v12 = *((_QWORD *)&v45 + 1);
    v13 = v45;
  }
  v30 = 0x6DB6DB6DB6DB6DB7 * ((v12 - v13) >> 4);
  v31 = v30 < 0x61;
  if (v30 >= 0x61)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v34 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLMM,Unexpected number of particles after resampling,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v47[0] = 67240192;
      v47[1] = v30;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected number of particles after resampling,%{public}d", v47, v42);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::reseed()", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
    ++*(_DWORD *)(a1 + 104);
  }
  else
  {
    v32 = *(_OWORD *)(a1 + 864);
    *(_QWORD *)(a1 + 864) = v13;
    *(_QWORD *)(a1 + 872) = v12;
    v45 = v32;
    v33 = *(_QWORD *)(a1 + 880);
    *(_QWORD *)(a1 + 880) = v46[0];
    v46[0] = v33;
  }
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  *(_QWORD *)buf = &v45;
  sub_10083CC6C((void ***)buf);
  if (v3)
  {
LABEL_58:
    v35 = (unint64_t *)&v3->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v31;
}

void sub_101118FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23)
{
  if (__p)
    operator delete(__p);
  a23 = &a15;
  sub_10083CC6C((void ***)&a23);
  sub_100261F44((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_101119040(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  int v19;
  _BYTE v20[20];
  __int128 v21;
  __int128 v22;
  _BYTE v23[33];
  void *__p;
  _BYTE *v25;
  uint64_t v26;
  _BYTE buf[24];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[5];
  void *v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;

  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2048);
  v2 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 1136);
    v4 = *(_QWORD *)(a1 + 1184);
    v5 = *(_QWORD *)(a1 + 1192);
    *(_DWORD *)buf = 134349569;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v4;
    *(_WORD *)&buf[22] = 2049;
    *(_QWORD *)&v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,filterResetForReseed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v14 = *(_QWORD *)(a1 + 1136);
    v15 = *(_QWORD *)(a1 + 1184);
    v16 = *(_QWORD *)(a1 + 1192);
    v19 = 134349569;
    *(_QWORD *)v20 = v14;
    *(_WORD *)&v20[8] = 2049;
    *(_QWORD *)&v20[10] = v15;
    *(_WORD *)&v20[18] = 2049;
    *(_QWORD *)&v21 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,filterResetForReseed,LL,%{private}.7lf,%{private}.7lf", &v19, 32);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLParticleMapMatcher::resetForReseed()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  sub_101100BBC(a1);
  *(_DWORD *)(a1 + 2968) = -1;
  v6 = *(_QWORD *)(a1 + 872);
  v7 = *(_QWORD *)(a1 + 864);
  while (v6 != v7)
  {
    v6 -= 112;
    sub_10083CCF0(a1 + 880, v6);
  }
  *(_QWORD *)(a1 + 872) = v7;
  sub_10112437C(a1 + 984, *(_QWORD **)(a1 + 992));
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 2832) = 0u;
  sub_1000F34E0((_QWORD *)(a1 + 912));
  buf[0] = 0;
  *(_OWORD *)&buf[8] = 0u;
  v28 = 0u;
  LODWORD(v29) = 0;
  WORD2(v29) = 1;
  DWORD2(v29) = 0;
  v30 = 0u;
  memset(v31, 0, 33);
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v35 = 0;
  *(_QWORD *)(a1 + 2704) = 0;
  *(_OWORD *)(a1 + 2688) = *(_OWORD *)buf;
  sub_100349198((_QWORD *)(a1 + 2712), (uint64_t *)&v28);
  *(_OWORD *)(a1 + 2728) = v29;
  *(_OWORD *)(a1 + 2744) = v30;
  *(_QWORD *)(a1 + 2760) = v31[0];
  *(_OWORD *)(a1 + 2768) = *(_OWORD *)&v31[1];
  *(_OWORD *)(a1 + 2777) = *(_OWORD *)((char *)&v31[2] + 1);
  if ((_BYTE *)(a1 + 2688) != buf)
    sub_100F5F1C8((char *)(a1 + 2800), (char *)v32, (uint64_t)v33, 0x8E38E38E38E38E39 * ((v33 - (_BYTE *)v32) >> 3));
  *(_DWORD *)(a1 + 2824) = v35;
  *(_DWORD *)(a1 + 2972) = 0;
  LOBYTE(v19) = 0;
  *(_QWORD *)&v20[4] = 0;
  *(_QWORD *)&v20[12] = 0;
  LODWORD(v21) = 0;
  WORD2(v21) = 1;
  DWORD2(v21) = 0;
  v25 = 0;
  v26 = 0;
  __p = 0;
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_BYTE *)(a1 + 2848) = 0;
  sub_100349198((_QWORD *)(a1 + 2856), (uint64_t *)&v20[4]);
  *(_OWORD *)(a1 + 2872) = v21;
  *(_OWORD *)(a1 + 2888) = v22;
  *(_QWORD *)(a1 + 2904) = *(_QWORD *)v23;
  *(_OWORD *)(a1 + 2912) = *(_OWORD *)&v23[8];
  *(_OWORD *)(a1 + 2921) = *(_OWORD *)&v23[17];
  if ((int *)(a1 + 2848) != &v19)
    sub_100F5F1C8((char *)(a1 + 2944), (char *)__p, (uint64_t)v25, 0x8E38E38E38E38E39 * ((v25 - (_BYTE *)__p) >> 3));
  sub_100229284(a1 + 3832);
  *(_DWORD *)(a1 + 4040) = 0;
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  v8 = *(std::__shared_weak_count **)&v20[12];
  if (*(_QWORD *)&v20[12])
  {
    v9 = (unint64_t *)(*(_QWORD *)&v20[12] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_101119498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_10110BD7C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_1011194C4(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2048);
  v2 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[142];
    v4 = a1[148];
    v5 = a1[149];
    *(_DWORD *)buf = 134349569;
    v20 = v3;
    v21 = 2049;
    v22 = v4;
    v23 = 2049;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,filterReset,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v8 = a1[142];
    v9 = a1[148];
    v10 = a1[149];
    v13 = 134349569;
    v14 = v8;
    v15 = 2049;
    v16 = v9;
    v17 = 2049;
    v18 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,filterReset,LL,%{private}.7lf,%{private}.7lf", &v13, 32);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLParticleMapMatcher::reset()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_101119040((uint64_t)a1);
  v6 = a1[112];
  v7 = a1[111];
  while (v6 != v7)
  {
    v6 -= 112;
    sub_10083CCF0((uint64_t)(a1 + 113), v6);
  }
  a1[112] = v7;
  a1[121] = a1[120];
  sub_101119720((uint64_t)(a1 + 126));
  sub_101119720((uint64_t)(a1 + 231));
  sub_1001A5CBC(a1 + 381);
  sub_1001A5CBC(a1 + 384);
  sub_1001A5CBC(a1 + 387);
  sub_1001A5CBC(a1 + 390);
}

void sub_101119720(uint64_t a1)
{
  uint64_t *v2;
  __int128 v3;
  __int128 v4;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BYTE v13[88];
  __int128 v14;
  _BYTE v15[280];
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[33];
  char *v21;
  char *v22;
  uint64_t v23;

  v16 = 0;
  v17 = 0;
  LODWORD(v18) = 0;
  WORD2(v18) = 1;
  DWORD2(v18) = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  v2 = (uint64_t *)(a1 + 8);
  sub_100349198((_QWORD *)(a1 + 8), &v16);
  v3 = v19;
  *(_OWORD *)(a1 + 24) = v18;
  *(_OWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)v20;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v20[8];
  *(_OWORD *)(a1 + 73) = *(_OWORD *)&v20[17];
  if (v2 != &v16)
    sub_100F5F1C8((char *)(a1 + 96), v21, (uint64_t)v22, 0x8E38E38E38E38E39 * ((v22 - v21) >> 3));
  sub_100349198((_QWORD *)(a1 + 672), &v16);
  v4 = v19;
  *(_OWORD *)(a1 + 688) = v18;
  *(_OWORD *)(a1 + 704) = v4;
  *(_QWORD *)(a1 + 720) = *(_QWORD *)v20;
  *(_OWORD *)(a1 + 728) = *(_OWORD *)&v20[8];
  *(_OWORD *)(a1 + 737) = *(_OWORD *)&v20[17];
  if ((uint64_t *)(a1 + 672) != &v16)
    sub_100F5F1C8((char *)(a1 + 760), v21, (uint64_t)v22, 0x8E38E38E38E38E39 * ((v22 - v21) >> 3));
  __asm { FMOV            V0.2D, #-1.0 }
  *(_QWORD *)v13 = 0xBFF0000000000000;
  *(_QWORD *)&v15[120] = 0;
  *(_DWORD *)&v15[128] = 0;
  memset(&v15[80], 0, 34);
  memset(&v15[136], 0, 75);
  memset(&v15[216], 0, 56);
  memset(&v13[8], 0, 80);
  memset(v15, 0, 78);
  v14 = 0u;
  *(_QWORD *)&v15[272] = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)v13;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v13[64];
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v13[48];
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v13[32];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v13[16];
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)&v13[80]);
  memcpy((void *)(a1 + 272), v15, 0x118uLL);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 639) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 830) = 0;
  if (SHIBYTE(v14) < 0)
    operator delete(*(void **)&v13[80]);
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1011199A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a30 < 0)
    operator delete(__p);
  sub_100F5EA24(v30 - 160);
  _Unwind_Resume(a1);
}

BOOL sub_1011199D4(uint64_t a1, uint64_t *a2, double a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL8 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v6 = (unsigned __int8 *)(a1 + 3832);
  v14 = v5;
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = sub_100F5C480(v6, a2, &v14, *(unsigned __int8 *)(a1 + 96), a3);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_101119A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101119A7C(uint64_t a1, uint64_t a2)
{
  double *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v3 = (double *)(a1 + 3832);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = sub_100F5D5E4(v3, a2, &v12, *(unsigned __int8 *)(a1 + 96));
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_101119B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101119B24(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  _QWORD *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  double v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  NSObject *v25;
  unsigned int v26;
  unint64_t v27;
  float v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  double v42;
  double v43;
  NSObject *v44;
  const char *v45;
  double v46;
  double v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  _BOOL4 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v59;
  uint64_t v60;
  const char *v61;
  char *v62;
  const char *v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  double *v74;
  _QWORD *v75;
  double v76;
  double v77;
  double v78;
  double *v79;
  double v80;
  double *v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  double *v91;
  double v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  uint64_t v97;
  double v98;
  int v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  double *v111;
  double v112;
  double v113;
  double v114;
  uint64_t v115;
  double v116;
  BOOL v117;
  NSObject *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BOOL4 v123;
  uint64_t v124;
  const char *v125;
  char *v126;
  const char *v127;
  char *v128;
  NSObject *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  _QWORD *v140;
  int v141;
  double v142;
  long double v143;
  NSObject *v144;
  NSObject *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  NSObject *v152;
  int v153;
  _QWORD *v154;
  const char *v155;
  char *v156;
  const char *v157;
  const char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  const char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD **v181;
  std::string *__str;
  double *__dst;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  char v188;
  _QWORD *v189;
  std::__shared_weak_count *v190;
  int v191;
  uint64_t v192;
  __int16 v193;
  _BYTE v194[34];
  __int16 v195;
  uint64_t v196;
  _BYTE buf[12];
  __int16 v198;
  _BYTE v199[34];
  __int16 v200;
  uint64_t v201;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v189 = v5;
  v190 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v5)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v20 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v21 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_106;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v22 = *(_QWORD *)(a2 + 8);
    v191 = 134349056;
    v192 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", &v191, 12);
    v24 = (char *)v23;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v23);
LABEL_72:
    if (v24 != buf)
      free(v24);
    goto LABEL_106;
  }
  if (*(_BYTE *)(a1 + 96))
    sub_1010CE3C0((uint64_t)v5);
  v8 = (_BYTE *)(a1 + 1008);
  *(_BYTE *)(a1 + 1848) = *(_BYTE *)(a1 + 1008);
  v181 = (_QWORD **)(a1 + 1856);
  sub_100349198((_QWORD *)(a1 + 1856), (uint64_t *)(a1 + 1016));
  *(_OWORD *)(a1 + 1872) = *(_OWORD *)(a1 + 1032);
  *(_OWORD *)(a1 + 1888) = *(_OWORD *)(a1 + 1048);
  *(_QWORD *)(a1 + 1904) = *(_QWORD *)(a1 + 1064);
  *(_OWORD *)(a1 + 1912) = *(_OWORD *)(a1 + 1072);
  *(_OWORD *)(a1 + 1921) = *(_OWORD *)(a1 + 1081);
  sub_100F5F1C8((char *)(a1 + 1944), *(char **)(a1 + 1104), *(_QWORD *)(a1 + 1112), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 1112) - *(_QWORD *)(a1 + 1104)) >> 3));
  *(_OWORD *)(a1 + 2032) = *(_OWORD *)(a1 + 1192);
  *(_OWORD *)(a1 + 2048) = *(_OWORD *)(a1 + 1208);
  *(_OWORD *)(a1 + 2064) = *(_OWORD *)(a1 + 1224);
  *(_OWORD *)(a1 + 2080) = *(_OWORD *)(a1 + 1240);
  *(_OWORD *)(a1 + 1968) = *(_OWORD *)(a1 + 1128);
  *(_OWORD *)(a1 + 1984) = *(_OWORD *)(a1 + 1144);
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a1 + 1160);
  *(_OWORD *)(a1 + 2016) = *(_OWORD *)(a1 + 1176);
  __str = (std::string *)(a1 + 1256);
  std::string::operator=((std::string *)(a1 + 2096), (const std::string *)(a1 + 1256));
  memcpy((void *)(a1 + 2120), (const void *)(a1 + 1280), 0x118uLL);
  v9 = *(_OWORD *)(a1 + 1608);
  *(_OWORD *)(a1 + 2432) = *(_OWORD *)(a1 + 1592);
  *(_OWORD *)(a1 + 2448) = v9;
  *(_OWORD *)(a1 + 2464) = *(_OWORD *)(a1 + 1624);
  *(_OWORD *)(a1 + 2475) = *(_OWORD *)(a1 + 1635);
  v10 = *(_OWORD *)(a1 + 1576);
  *(_OWORD *)(a1 + 2400) = *(_OWORD *)(a1 + 1560);
  *(_OWORD *)(a1 + 2416) = v10;
  v179 = a1 + 1656;
  sub_100349198((_QWORD *)(a1 + 2496), (uint64_t *)(a1 + 1656));
  *(_BYTE *)(a1 + 2512) = *(_BYTE *)(a1 + 1672);
  sub_100349198((_QWORD *)(a1 + 2520), (uint64_t *)(a1 + 1680));
  v11 = *(_OWORD *)(a1 + 1712);
  *(_OWORD *)(a1 + 2536) = *(_OWORD *)(a1 + 1696);
  *(_OWORD *)(a1 + 2552) = v11;
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 1728);
  *(_OWORD *)(a1 + 2576) = *(_OWORD *)(a1 + 1736);
  *(_OWORD *)(a1 + 2585) = *(_OWORD *)(a1 + 1745);
  sub_100F5F1C8((char *)(a1 + 2608), *(char **)(a1 + 1768), *(_QWORD *)(a1 + 1776), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 1776) - *(_QWORD *)(a1 + 1768)) >> 3));
  v12 = *(_OWORD *)(a1 + 1808);
  *(_OWORD *)(a1 + 2632) = *(_OWORD *)(a1 + 1792);
  *(_OWORD *)(a1 + 2648) = v12;
  *(_OWORD *)(a1 + 2664) = *(_OWORD *)(a1 + 1824);
  *(_QWORD *)(a1 + 2678) = *(_QWORD *)(a1 + 1838);
  v13 = *(double *)(a2 + 96);
  if (v13 >= 0.0)
  {
    *(_QWORD *)(a1 + 3880) = *(_QWORD *)(a2 + 8);
    *(double *)(a1 + 3840) = v13;
  }
  *(_BYTE *)(a1 + 3720) = 0;
  sub_1011010FC(a1, *(double *)(a2 + 104), *(double *)(a2 + 192));
  v14 = (__int128 *)(a1 + 1128);
  sub_101100D40(a1, a1 + 1128);
  __dst = (double *)(a1 + 1280);
  v180 = a1 + 1016;
  v15 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 152) = v15;
  v16 = *(_QWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 160) = v16;
  *(_QWORD *)(a2 + 168) = v17;
  *(_QWORD *)(a2 + 288) = v15;
  *(_QWORD *)(a2 + 296) = v16;
  *(_QWORD *)(a2 + 304) = v17;
  *(_QWORD *)(a2 + 312) = v15;
  *(_QWORD *)(a2 + 320) = v16;
  *(_QWORD *)(a2 + 328) = v15;
  *(_QWORD *)(a2 + 336) = v16;
  *(_DWORD *)(a2 + 280) = 0;
  if (*(double *)(a2 + 8) - *(double *)(a1 + 1976) > 6.0)
    sub_10041250C((_QWORD *)(a1 + 2976));
  v18 = *(double *)(a2 + 96);
  *(float *)buf = v18;
  sub_10007D084(a1 + 2976, (float *)buf);
  v19 = *(double *)(a1 + 4032);
  if (v19 < 0.0)
  {
    if (*(double *)(a2 + 24) - *(double *)(a1 + 4016) >= 900.0)
      v19 = 5.55555556;
    else
      v19 = 1.66666667;
  }
  if (*(double *)(a2 + 96) <= v19 && !*(_BYTE *)(a1 + 2232))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v29 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v30 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, not matching", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v124 = *(_QWORD *)(a2 + 8);
        v191 = 134349056;
        v192 = v124;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf, not matching", &v191, 12);
        v126 = (char *)v125;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v125);
        if (v126 != buf)
          free(v126);
      }
    }
    goto LABEL_42;
  }
  if (*(_BYTE *)(a2 + 348))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v25 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMM,opportunistic tile download only, favorable GPS conditions", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        LOWORD(v191) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,opportunistic tile download only, favorable GPS conditions", &v191, 2);
        v64 = (char *)v63;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v63);
        if (v64 != buf)
          free(v64);
      }
    }
    v26 = *(unsigned __int8 *)(a1 + 112);
    if (!*(_BYTE *)(a1 + 112))
      goto LABEL_53;
  }
  v27 = *(_QWORD *)(a1 + 3040);
  if (v27 < *(_QWORD *)(a1 + 2984) || (!v27 ? (v28 = 0.0) : (v28 = *(float *)(a1 + 2992) / (float)v27), v28 <= 22.222))
  {
    v26 = 1;
LABEL_53:
    if (*(_BYTE *)(a1 + 113))
      v33 = 0;
    else
      v33 = v26;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v34 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v35 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v35;
        v198 = 1026;
        *(_DWORD *)v199 = v33;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMM,match,%{public}.1lf,allowsNetworkUsage,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v60 = *(_QWORD *)(a2 + 8);
        v191 = 134349312;
        v192 = v60;
        v193 = 1026;
        *(_DWORD *)v194 = v33;
        LODWORD(v178) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,match,%{public}.1lf,allowsNetworkUsage,%{public}d", &v191, v178);
        v62 = (char *)v61;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v61);
        if (v62 != buf)
          free(v62);
      }
    }
    goto LABEL_62;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v32 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLMM,opportunistic tile download only, high speed threshold", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      LOWORD(v191) = 0;
      LODWORD(v178) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,opportunistic tile download only, high speed threshold", &v191, v178);
      v128 = (char *)v127;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v127);
      if (v128 != buf)
        free(v128);
    }
    v26 = 0;
    goto LABEL_53;
  }
  v33 = 0;
LABEL_62:
  (*(void (**)(_QWORD *, uint64_t))(*v5 + 32))(v5, v33);
  (*(void (**)(_QWORD *, uint64_t, double))(*v5 + 48))(v5, a2, 450.0);
  v5[1] = *(_QWORD *)(a2 + 8);
  (*(void (**)(_QWORD *))(*v5 + 96))(v5);
  sub_10112437C(a1 + 984, *(_QWORD **)(a1 + 992));
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  *(_QWORD *)(a1 + 944) = *(_QWORD *)(a1 + 936);
  sub_1003908C0((void **)(a1 + 936), 0xC0uLL);
  sub_101119720(a1 + 1008);
  v36 = *(_OWORD *)a2;
  v37 = *(_OWORD *)(a2 + 16);
  v38 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 1176) = v38;
  *v14 = v36;
  *(_OWORD *)(a1 + 1144) = v37;
  v39 = *(_OWORD *)(a2 + 64);
  v40 = *(_OWORD *)(a2 + 80);
  v41 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 1240) = v41;
  *(_OWORD *)(a1 + 1192) = v39;
  *(_OWORD *)(a1 + 1208) = v40;
  std::string::operator=(__str, (const std::string *)(a2 + 128));
  memcpy(__dst, (const void *)(a2 + 152), 0x118uLL);
  v42 = *(double *)(a1 + 1976);
  v43 = *(double *)(a1 + 1136) - v42;
  *(double *)(a1 + 1640) = v43;
  if (v43 == 0.0)
  {
    if (!*(_BYTE *)(a1 + 96))
      goto LABEL_106;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v44 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "CLMM,Time difference between updates is zero,update ignored", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_106;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    LOWORD(v191) = 0;
    LODWORD(v178) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,Time difference between updates is zero,update ignored", &v191, v178);
    v24 = (char *)v45;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v45);
    goto LABEL_72;
  }
  v46 = 4.9;
  if (*(_BYTE *)(a1 + 1356) && *(_BYTE *)(a1 + 2232) && v43 > 4.9)
  {
    v47 = *(double *)(a1 + 1480);
    if (v47 <= v42 + 1.2 && v47 > 0.0)
      v46 = 75.0;
  }
  if (v43 < 0.0 || v43 > v46)
    sub_101119040(a1);
  if (*(_QWORD *)(a1 + 864) == *(_QWORD *)(a1 + 872))
    *(_QWORD *)(a1 + 1640) = 0;
  sub_101101108(a1, a1 + 1128);
  sub_1011024B0(a1, a1 + 1128);
  sub_10111B964(a1, a1 + 1128);
  ++*(_DWORD *)(a1 + 100);
  if (!sub_10110E83C(a1))
    goto LABEL_105;
  *(_BYTE *)(a1 + 1845) = sub_10111BAB8(a1);
  if (!sub_10111C06C(a1))
    goto LABEL_105;
  if ((sub_101111528(a1) & 1) == 0)
    goto LABEL_114;
  if (!sub_10110CD4C(a1))
  {
LABEL_105:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
LABEL_106:
    v31 = 0;
    goto LABEL_107;
  }
  if ((sub_101111C0C(a1) & 1) == 0)
  {
LABEL_114:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
LABEL_115:
    v31 = 0;
    ++*(_DWORD *)(a1 + 104);
    goto LABEL_107;
  }
  sub_1011154DC(a1);
  if ((sub_101116CB4(a1) & 1) == 0)
    goto LABEL_105;
  v188 = 0;
  if ((sub_101117EB0(a1, &v188) & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    goto LABEL_115;
  }
  if (v188 && !sub_10111896C(a1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    goto LABEL_106;
  }
  if (*(_BYTE *)(a1 + 1392)
    && (v49 = *(_QWORD *)(a1 + 1016),
        *(_BYTE *)(a1 + 777) = *(_BYTE *)(v49 + 16),
        *(_DWORD *)(a1 + 780) = *(_DWORD *)(v49 + 20),
        *(_BYTE *)(a1 + 784) = *(_BYTE *)(a1 + 1649),
        *(_BYTE *)(a1 + 2232)))
  {
    if (*(_QWORD *)(a1 + 2080) != *(_QWORD *)(a1 + 1240)
      && sub_1011010A8(*(double *)(a1 + 1432) - *(double *)(a1 + 2272)) > 45.0)
    {
      v50 = *(_QWORD *)(a1 + 3080);
      if (v50 == a1 + 3072)
      {
        v54 = 1;
      }
      else
      {
        v51 = *(_QWORD *)(a1 + 1240);
        do
        {
          v52 = **(_QWORD **)(v50 + 16);
          v53 = v51 == v52;
          v54 = v51 != v52;
          if (v53)
            break;
          v50 = *(_QWORD *)(v50 + 8);
        }
        while (v50 != a1 + 3072);
      }
      v65 = *(_QWORD *)(a1 + 3128);
      if (v65 == a1 + 3120)
      {
LABEL_132:
        if (v54)
        {
          v66 = *(uint64_t **)(a1 + 1016);
          v67 = *(_QWORD *)(a1 + 1024);
          v186 = v66;
          v187 = v67;
          if (v67)
          {
            v68 = (unint64_t *)(v67 + 8);
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
          }
          v70 = *(_QWORD *)(a1 + 1856);
          v71 = *(_QWORD *)(a1 + 1864);
          v184 = (uint64_t *)v70;
          v185 = v71;
          if (v71)
          {
            v72 = (unint64_t *)(v71 + 8);
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          v75 = v66 + 17;
          v74 = (double *)v66[17];
          v76 = 0.0;
          v77 = 0.0;
          v78 = 0.0;
          if ((double *)v75[1] != v74)
          {
            v77 = *v74;
            v78 = v74[1];
          }
          v79 = *(double **)(v70 + 136);
          v80 = 0.0;
          if (*(double **)(v70 + 144) != v79)
          {
            v76 = *v79;
            v80 = v79[1];
          }
          if (sub_100512A74(v77, v78, v76, v80, 0.0000001))
            goto LABEL_159;
          v81 = (double *)v186[17];
          v82 = 0.0;
          v83 = 0.0;
          v84 = 0.0;
          if ((double *)v186[18] != v81)
          {
            v83 = *v81;
            v84 = v81[1];
          }
          v85 = v184[18];
          v86 = 0.0;
          if (v85 != v184[17])
          {
            v82 = *(double *)(v85 - 16);
            v86 = *(double *)(v85 - 8);
          }
          if (sub_100512A74(v83, v84, v82, v86, 0.0000001))
            goto LABEL_159;
          v87 = v186[18];
          v88 = 0.0;
          v89 = 0.0;
          v90 = 0.0;
          if (v87 != v186[17])
          {
            v89 = *(double *)(v87 - 16);
            v90 = *(double *)(v87 - 8);
          }
          v91 = (double *)v184[17];
          v92 = 0.0;
          if ((double *)v184[18] != v91)
          {
            v88 = *v91;
            v92 = v91[1];
          }
          if (sub_100512A74(v89, v90, v88, v92, 0.0000001))
            goto LABEL_159;
          v93 = v186[18];
          v94 = 0.0;
          v95 = 0.0;
          v96 = 0.0;
          if (v93 != v186[17])
          {
            v95 = *(double *)(v93 - 16);
            v96 = *(double *)(v93 - 8);
          }
          v97 = v184[18];
          v98 = 0.0;
          if (v97 != v184[17])
          {
            v94 = *(double *)(v97 - 16);
            v98 = *(double *)(v97 - 8);
          }
          if (sub_100512A74(v95, v96, v94, v98, 0.0000001))
LABEL_159:
            v99 = 1;
          else
            v99 = 0;
          if (*(_BYTE *)(a1 + 96))
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v100 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v101 = *(_QWORD *)(a1 + 1136);
              v102 = **(_QWORD **)(a1 + 1016);
              v103 = **(_QWORD **)(a1 + 1856);
              *(_DWORD *)buf = 134349825;
              *(_QWORD *)&buf[4] = v101;
              v198 = 1026;
              *(_DWORD *)v199 = v99;
              *(_WORD *)&v199[4] = 2049;
              *(_QWORD *)&v199[6] = v102;
              *(_WORD *)&v199[14] = 2049;
              *(_QWORD *)&v199[16] = v103;
              _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,hopping check,connecting roads,%{public}d,current road,%{private}lld,prior road,%{private}lld", buf, 0x26u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v160 = *(_QWORD *)(a1 + 1136);
              v161 = **(_QWORD **)(a1 + 1016);
              v162 = **(_QWORD **)(a1 + 1856);
              v191 = 134349825;
              v192 = v160;
              v193 = 1026;
              *(_DWORD *)v194 = v99;
              *(_WORD *)&v194[4] = 2049;
              *(_QWORD *)&v194[6] = v161;
              *(_WORD *)&v194[14] = 2049;
              *(_QWORD *)&v194[16] = v162;
              LODWORD(v178) = 38;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,hopping check,connecting roads,%{public}d,current road,%{private}lld,prior road,%{private}lld", &v191, v178);
              v164 = (char *)v163;
              sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v163);
              if (v164 != buf)
                free(v164);
            }
          }
          sub_100261F44((uint64_t)&v184);
          sub_100261F44((uint64_t)&v186);
          if ((v99 & 1) == 0)
          {
            if (!*(_QWORD *)v179 || !**(_QWORD **)v179)
              goto LABEL_203;
            v104 = *(_QWORD *)(a1 + 1024);
            v186 = *(uint64_t **)(a1 + 1016);
            v187 = v104;
            if (v104)
            {
              v105 = (unint64_t *)(v104 + 8);
              do
                v106 = __ldxr(v105);
              while (__stxr(v106 + 1, v105));
            }
            v107 = *(uint64_t **)(a1 + 1856);
            v108 = *(_QWORD *)(a1 + 1864);
            v184 = v107;
            v185 = v108;
            if (v108)
            {
              v109 = (unint64_t *)(v108 + 8);
              do
                v110 = __ldxr(v109);
              while (__stxr(v110 + 1, v109));
            }
            v111 = *(double **)(*(_QWORD *)v179 + 136);
            v112 = 0.0;
            v113 = 0.0;
            v114 = 0.0;
            if (*(double **)(*(_QWORD *)v179 + 144) != v111)
            {
              v113 = *v111;
              v114 = v111[1];
            }
            v115 = v107[18];
            v116 = 0.0;
            if (v115 != v107[17])
            {
              v112 = *(double *)(v115 - 16);
              v116 = *(double *)(v115 - 8);
            }
            v117 = sub_100512A74(v113, v114, v112, v116, 0.0000001);
            if (*(_BYTE *)(a1 + 96))
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v118 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                v119 = *(_QWORD *)(a1 + 1136);
                v120 = *v184;
                v121 = **(_QWORD **)(a1 + 1656);
                v122 = *v186;
                *(_DWORD *)buf = 134349825;
                *(_QWORD *)&buf[4] = v119;
                v198 = 2049;
                *(_QWORD *)v199 = v120;
                *(_WORD *)&v199[8] = 2049;
                *(_QWORD *)&v199[10] = v121;
                *(_WORD *)&v199[18] = 2049;
                *(_QWORD *)&v199[20] = v122;
                _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,hopping check,prior road,%{private}lld, connected to the incoming road,%{private}lld, of the current solution road,%{private}lld", buf, 0x2Au);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                v172 = *(_QWORD *)(a1 + 1136);
                v173 = *v184;
                v174 = **(_QWORD **)(a1 + 1656);
                v175 = *v186;
                v191 = 134349825;
                v192 = v172;
                v193 = 2049;
                *(_QWORD *)v194 = v173;
                *(_WORD *)&v194[8] = 2049;
                *(_QWORD *)&v194[10] = v174;
                *(_WORD *)&v194[18] = 2049;
                *(_QWORD *)&v194[20] = v175;
                LODWORD(v178) = 42;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,hopping check,prior road,%{private}lld, connected to the incoming road,%{private}lld, of the current solution road,%{private}lld", &v191, v178);
                v177 = (char *)v176;
                sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v176);
                if (v177 != buf)
                  free(v177);
              }
            }
            sub_100261F44((uint64_t)&v184);
            sub_100261F44((uint64_t)&v186);
            if (!v117)
            {
LABEL_203:
              v123 = sub_10011E634((double *)(a1 + 608), *(double *)(a1 + 2256), *(double *)(a1 + 2264), *(double *)(a1 + 1416), *(double *)(a1 + 1424), *(double *)(a1 + 1200)) > 35.0|| *(_DWORD *)(a1 + 2680) > 15;
              if (*(_BYTE *)(a1 + 96))
              {
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                v129 = qword_1022A00D8;
                if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                {
                  v130 = *(_QWORD *)(a1 + 1136);
                  v131 = *(_QWORD *)(a1 + 2272);
                  v132 = *(_QWORD *)(a1 + 1432);
                  v133 = **(_QWORD **)(a1 + 1016);
                  v134 = **(_QWORD **)(a1 + 1856);
                  *(_DWORD *)buf = 134350337;
                  *(_QWORD *)&buf[4] = v130;
                  v198 = 1026;
                  *(_DWORD *)v199 = v123;
                  *(_WORD *)&v199[4] = 2050;
                  *(_QWORD *)&v199[6] = v131;
                  *(_WORD *)&v199[14] = 2050;
                  *(_QWORD *)&v199[16] = v132;
                  *(_WORD *)&v199[24] = 2049;
                  *(_QWORD *)&v199[26] = v133;
                  v200 = 2049;
                  v201 = v134;
                  _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,hopping between roads detected,reset,%{public}d,priorfullSnapCourse,%{public}.1lf,currentFullSnapCourse,%{public}.1lf,priorId,%{private}llu,currentId,%{private}llu", buf, 0x3Au);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                  v165 = *(_QWORD *)(a1 + 1136);
                  v166 = *(_QWORD *)(a1 + 2272);
                  v167 = *(_QWORD *)(a1 + 1432);
                  v168 = **(_QWORD **)(a1 + 1016);
                  v169 = **(_QWORD **)(a1 + 1856);
                  v191 = 134350337;
                  v192 = v165;
                  v193 = 1026;
                  *(_DWORD *)v194 = v123;
                  *(_WORD *)&v194[4] = 2050;
                  *(_QWORD *)&v194[6] = v166;
                  *(_WORD *)&v194[14] = 2050;
                  *(_QWORD *)&v194[16] = v167;
                  *(_WORD *)&v194[24] = 2049;
                  *(_QWORD *)&v194[26] = v168;
                  v195 = 2049;
                  v196 = v169;
                  LODWORD(v178) = 58;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,hopping between roads detected,reset,%{public}d,priorfullSnapCourse,%{public}.1lf,currentFullSnapCourse,%{public}.1lf,priorId,%{private}llu,currentId,%{private}llu", &v191, v178);
                  v171 = (char *)v170;
                  sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v170);
                  if (v171 != buf)
                    free(v171);
                }
              }
              if (v123)
                goto LABEL_204;
            }
          }
        }
      }
      else
      {
        while (*(_QWORD *)(a1 + 1240) != **(_QWORD **)(v65 + 16))
        {
          v65 = *(_QWORD *)(v65 + 8);
          if (v65 == a1 + 3120)
            goto LABEL_132;
        }
      }
    }
    sub_10100C06C((uint64_t *)(a1 + 3072), *(_QWORD *)(a1 + 3056), a1 + 3048);
    sub_1001A5CBC((uint64_t *)(a1 + 3048));
    v59 = (uint64_t *)(a1 + 3096);
    sub_10100C06C((uint64_t *)(a1 + 3120), *(_QWORD *)(a1 + 3104), a1 + 3096);
  }
  else
  {
    sub_1001A5CBC((uint64_t *)(a1 + 3072));
    v59 = (uint64_t *)(a1 + 3120);
  }
  sub_1001A5CBC(v59);
  if (*v8)
  {
    v135 = **(_QWORD **)(a1 + 1016);
    v136 = *(unsigned __int8 *)(a1 + 1036);
    v137 = *(_QWORD *)(a1 + 928);
    if (!v137
      || (v138 = *(_QWORD *)(a1 + 920), v135 != *(_QWORD *)(v138 + 16))
      || v136 != *(unsigned __int8 *)(v138 + 24))
    {
      v139 = operator new(0x20uLL);
      v139[24] = v136;
      v140 = *(_QWORD **)(a1 + 920);
      *(_QWORD *)v139 = a1 + 912;
      *((_QWORD *)v139 + 1) = v140;
      *((_QWORD *)v139 + 2) = v135;
      *v140 = v139;
      *(_QWORD *)(a1 + 920) = v139;
      *(_QWORD *)(a1 + 928) = v137 + 1;
      if ((int)v137 + 1 >= 51)
        sub_10111C240((uint64_t **)(a1 + 912));
    }
    if (*v8)
    {
      v141 = *(unsigned __int8 *)(a1 + 1848);
      if (*(_BYTE *)(a1 + 1848))
      {
        if (v135 == **v181 && v136 == *(unsigned __int8 *)(a1 + 1876))
          v141 = *(_DWORD *)(a1 + 2680) + 1;
        else
          v141 = 0;
      }
      *(_DWORD *)(a1 + 1840) = v141;
      if (*(_BYTE *)(a1 + 1848))
      {
        v142 = sub_10011E634((double *)(a1 + 608), *(double *)(a1 + 1888), *(double *)(a1 + 1896), *(double *)(a1 + 1048), *(double *)(a1 + 1056), *(double *)(a1 + 1200));
        sub_100F5E8AC((uint64_t)buf, (uint64_t)v181);
        v191 = 0;
        if (sub_10110C030(a1, (uint64_t)buf, &v191, v142))
        {
          *(_BYTE *)(a1 + 2688) = 1;
          *(_DWORD *)(a1 + 2824) = v191;
          sub_10110E7C4(a1 + 2712, (uint64_t)buf);
          *(_QWORD *)(a1 + 2704) = *(_QWORD *)(a1 + 1976);
        }
        sub_100F5EA24((uint64_t)buf);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 1840) = 0;
    }
  }
  if (*(_BYTE *)(a1 + 2688))
  {
    if (!*v8
      || (v143 = sub_10011E634((double *)(a1 + 608), *(double *)(a1 + 2744), *(double *)(a1 + 2752), *(double *)(a1 + 1280), *(double *)(a1 + 1288), *(double *)(a1 + 1200)), *(long double *)(a1 + 2696) = v143, v143 > 450.0))
    {
      *(_BYTE *)(a1 + 2688) = 0;
    }
  }
  sub_101115EB0(a1);
  if (*(double *)(a1 + 1184) == 0.0 && *(double *)(a1 + 1192) == 0.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v144 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb lat==lon==0", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_204;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    LOWORD(v191) = 0;
    LODWORD(v178) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected crumb lat==lon==0", &v191, v178);
    v156 = (char *)v155;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v155);
    if (v156 == buf)
      goto LABEL_204;
    goto LABEL_266;
  }
  if (*v8)
  {
    if (*__dst == 0.0 && *(double *)(a1 + 1288) == 0.0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v145 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb snapLat==snapLon==0", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_204;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      LOWORD(v191) = 0;
      LODWORD(v178) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected crumb snapLat==snapLon==0", &v191, v178);
      v156 = (char *)v157;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v157);
      if (v156 == buf)
        goto LABEL_204;
LABEL_266:
      free(v156);
LABEL_204:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      goto LABEL_115;
    }
    if (*(_QWORD *)v180)
      *(_BYTE *)(a1 + 1477) = *(_BYTE *)(*(_QWORD *)v180 + 17);
  }
  v146 = *v14;
  v147 = *(_OWORD *)(a1 + 1144);
  v148 = *(_OWORD *)(a1 + 1176);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 1160);
  *(_OWORD *)(a2 + 48) = v148;
  *(_OWORD *)a2 = v146;
  *(_OWORD *)(a2 + 16) = v147;
  v149 = *(_OWORD *)(a1 + 1192);
  v150 = *(_OWORD *)(a1 + 1208);
  v151 = *(_OWORD *)(a1 + 1240);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 1224);
  *(_OWORD *)(a2 + 112) = v151;
  *(_OWORD *)(a2 + 64) = v149;
  *(_OWORD *)(a2 + 80) = v150;
  std::string::operator=((std::string *)(a2 + 128), __str);
  memcpy((void *)(a2 + 152), __dst, 0x118uLL);
  if (!*(_BYTE *)(a1 + 1392))
  {
    *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 848);
    ++*(_DWORD *)(a1 + 104);
    *(_QWORD *)buf = *(_QWORD *)(a2 + 192);
LABEL_260:
    v154 = (_QWORD *)(a1 + 856);
    goto LABEL_261;
  }
  *(_QWORD *)(a1 + 4016) = *(_QWORD *)(a1 + 1152);
  if (*(_BYTE *)(a1 + 776) && *(_BYTE *)(a1 + 1648))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v152 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse engaged but not snapping course", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        LOWORD(v191) = 0;
        LODWORD(v178) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,holdCourse engaged but not snapping course", &v191, v178);
        v159 = (char *)v158;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v158);
        if (v159 != buf)
          free(v159);
      }
    }
    *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 848);
  }
  sub_10111C268(a1, a2);
  v153 = *(unsigned __int8 *)(a1 + 1392);
  *(_QWORD *)buf = *(_QWORD *)(a2 + 192);
  if (!v153 || (sub_101100D70(a1, (uint64_t *)buf) & 1) == 0)
    goto LABEL_260;
  v154 = buf;
LABEL_261:
  *(_QWORD *)(a2 + 192) = *v154;
LABEL_42:
  v31 = 1;
LABEL_107:
  v55 = v190;
  if (v190)
  {
    v56 = (unint64_t *)&v190->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  return v31;
}

void sub_10111B8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va2);
  _Unwind_Resume(a1);
}

BOOL sub_10111B964(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = *(_QWORD *)(a1 + 4056);
  v5 = *(_QWORD *)(a1 + 4048);
  while (v4 != v5)
    v4 = sub_100261F44(v4 - 56);
  *(_QWORD *)(a1 + 4056) = v5;
  if (!*(_BYTE *)(a1 + 114))
    return 0;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  v21 = v6;
  v22 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v19 = v6;
    v20 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v19 = v6;
    v20 = 0;
  }
  v11 = sub_10111F4E0(a2, &v19, (double *)(a1 + 608), (_QWORD *)(a1 + 48), (uint64_t *)(a1 + 4048), 1, 200.0);
  v12 = v20;
  if (v20)
  {
    v13 = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v11;
}

void sub_10111BA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10111BAB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[30];
  __int128 v66;
  __int128 v67;
  __int16 v68;
  uint64_t v69;
  int v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[80];
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint8_t buf[16];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  if (*(_QWORD *)(a1 + 872) == *(_QWORD *)(a1 + 864) || !*(_BYTE *)(a1 + 114))
    goto LABEL_44;
  if ((sub_1011210FC(a1) & 1) == 0)
  {
    v42 = *(_QWORD *)(a1 + 4080);
    v43 = *(_QWORD *)(a1 + 4072);
    if (v42 != v43)
    {
      do
      {
        v44 = v42 - 264;
        sub_100261F44(v42 - 56);
        v42 = v44;
      }
      while (v44 != v43);
    }
    v4 = 0;
    *(_QWORD *)(a1 + 4080) = v43;
    return v4 & 1;
  }
  v2 = *(_QWORD *)(a1 + 4072);
  v3 = *(_QWORD *)(a1 + 4080);
  if (v2 == v3)
  {
LABEL_44:
    v4 = 0;
    return v4 & 1;
  }
  v4 = 0;
  v48 = *(_QWORD *)(a1 + 4080);
  while (1)
  {
    v5 = vabdd_f64(*(double *)(v2 + 184), *(double *)(a1 + 1152));
    if (v5 > 0.01)
    {
      v34 = *(_QWORD *)(a1 + 4080);
      v35 = *(_QWORD *)(a1 + 4072);
      if (v34 != v35)
      {
        do
        {
          v36 = v34 - 264;
          sub_100261F44(v34 - 56);
          v34 = v36;
        }
        while (v36 != v35);
      }
      *(_QWORD *)(a1 + 4080) = v35;
      v47 = v4;
    }
    else
    {
      v69 = 0;
      v70 = 0;
      v66 = 0u;
      v67 = 0u;
      v68 = 0;
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      memset(v74, 0, 27);
      memset(&v74[32], 0, 48);
      *(_OWORD *)&v65[14] = 0u;
      v64 = 0u;
      *(_OWORD *)v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v76 = 0xBFF0000000000000;
      v75 = 0;
      v55 = *(_OWORD *)(v2 + 80);
      v6 = *(_QWORD *)(v2 + 104);
      v7 = *(_QWORD *)(v2 + 112);
      v8 = *(_QWORD *)(v2 + 120);
      v56 = *(_QWORD *)(v2 + 96);
      v57 = v7;
      *((_QWORD *)&v64 + 1) = v8;
      *(_OWORD *)v65 = *(_OWORD *)(v2 + 160);
      *(_QWORD *)&v65[16] = *(_QWORD *)(v2 + 176);
      v9 = *(_QWORD *)(v2 + 144);
      *((_QWORD *)&v58 + 1) = *(_QWORD *)(v2 + 136);
      *(_QWORD *)&v59 = v6;
      v49 = 0;
      v52 = 0;
      v53 = 0;
      v54 = 0xBFF0000000000000;
      *(_QWORD *)&v64 = v9;
      v65[28] = *(_BYTE *)(v2 + 152);
      v51 = *(_QWORD *)(v2 + 184);
      v50 = vextq_s8(*(int8x16_t *)(v2 + 192), *(int8x16_t *)(v2 + 192), 8uLL);
      v10 = *(_QWORD *)(a1 + 864);
      v11 = *(_QWORD *)(a1 + 872);
      while (v10 != v11)
      {
        memset(buf, 0, sizeof(buf));
        *(_QWORD *)&v80 = 0;
        *((_QWORD *)&v80 + 1) = 0x3FF0000000000000;
        v81 = 0u;
        v82 = 0u;
        LODWORD(v83) = 0;
        sub_101103F58(a1, v2, v10, (double *)&v49, (uint64_t)buf);
        LODWORD(v83) = 2;
        *((_QWORD *)&v80 + 1) = *(_QWORD *)(v2 + 128);
        v12 = *(_QWORD *)(v10 + 104);
        v13 = *(_QWORD *)(v10 + 96);
        if (v13 >= v12)
        {
          v18 = *(_QWORD *)(v10 + 88);
          v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v13 - v18) >> 3);
          v20 = v19 + 1;
          if (v19 + 1 > 0x38E38E38E38E38ELL)
            sub_100259694();
          v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v12 - v18) >> 3);
          if (2 * v21 > v20)
            v20 = 2 * v21;
          if (v21 >= 0x1C71C71C71C71C7)
            v22 = 0x38E38E38E38E38ELL;
          else
            v22 = v20;
          if (v22)
            v23 = (char *)sub_10029D26C(v10 + 104, v22);
          else
            v23 = 0;
          v24 = &v23[72 * v19];
          *(_OWORD *)v24 = *(_OWORD *)buf;
          v25 = v80;
          v26 = v81;
          v27 = v82;
          *((_QWORD *)v24 + 8) = v83;
          *((_OWORD *)v24 + 2) = v26;
          *((_OWORD *)v24 + 3) = v27;
          *((_OWORD *)v24 + 1) = v25;
          v29 = *(char **)(v10 + 88);
          v28 = *(char **)(v10 + 96);
          v30 = v24;
          if (v28 != v29)
          {
            do
            {
              *(_OWORD *)(v30 - 72) = *(_OWORD *)(v28 - 72);
              v31 = *(_OWORD *)(v28 - 56);
              v32 = *(_OWORD *)(v28 - 40);
              v33 = *(_OWORD *)(v28 - 24);
              *((_DWORD *)v30 - 2) = *((_DWORD *)v28 - 2);
              *(_OWORD *)(v30 - 24) = v33;
              *(_OWORD *)(v30 - 40) = v32;
              *(_OWORD *)(v30 - 56) = v31;
              v30 -= 72;
              v28 -= 72;
            }
            while (v28 != v29);
            v28 = *(char **)(v10 + 88);
          }
          v17 = v24 + 72;
          *(_QWORD *)(v10 + 88) = v30;
          *(_QWORD *)(v10 + 96) = v24 + 72;
          *(_QWORD *)(v10 + 104) = &v23[72 * v22];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_OWORD *)v13 = *(_OWORD *)buf;
          v14 = v80;
          v15 = v81;
          v16 = v82;
          *(_QWORD *)(v13 + 64) = v83;
          *(_OWORD *)(v13 + 32) = v15;
          *(_OWORD *)(v13 + 48) = v16;
          *(_OWORD *)(v13 + 16) = v14;
          v17 = (char *)(v13 + 72);
        }
        *(_QWORD *)(v10 + 96) = v17;
        sub_10112329C((double *)v10);
        v10 += 112;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v3 = v48;
      v37 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v38 = *(_QWORD *)(a1 + 1136);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,used route-hint", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v39 = *(_QWORD *)(a1 + 1136);
        v77 = 134349056;
        v78 = v39;
        LODWORD(v46) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,used route-hint", &v77, v46);
        v41 = (uint8_t *)v40;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::integrateRouteHint()", "%s\n", v40);
        if (v41 != buf)
          free(v41);
      }
      if (SHIBYTE(v61) < 0)
        operator delete(*((void **)&v60 + 1));
      v4 = 1;
    }
    if (v5 > 0.01)
      break;
    v2 += 264;
    if (v2 == v3)
      return v4 & 1;
  }
  v4 = v47;
  return v4 & 1;
}

void sub_10111C044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10111C06C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  uint64_t v5;
  void **v6;
  float *v7;
  _QWORD *v8;
  double v9;
  uint64_t v10;
  double v11;
  float v12;
  float *v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  float *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 872);
  v2 = *(_QWORD *)(a1 + 864);
  if (v1 == v2)
    return 1;
  v4 = 0.0;
  v5 = *(_QWORD *)(a1 + 864);
  do
  {
    v4 = v4 + *(double *)(v5 + 56);
    v5 += 112;
  }
  while (v5 != v1);
  if (v4 > 0.0)
  {
    v6 = (void **)(a1 + 936);
    v7 = *(float **)(a1 + 936);
    *(_QWORD *)(a1 + 944) = v7;
    v8 = (_QWORD *)(a1 + 952);
    v9 = 0.0;
    do
    {
      v10 = v2;
      v11 = *(double *)(v2 + 56) / v4;
      *(double *)(v2 + 64) = v11;
      v9 = v9 + v11;
      v12 = v9;
      if ((unint64_t)v7 >= *v8)
      {
        v14 = (float *)*v6;
        v15 = ((char *)v7 - (_BYTE *)*v6) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          sub_100259694();
        v17 = *v8 - (_QWORD)v14;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)sub_100260634(a1 + 952, v18);
          v7 = *(float **)(a1 + 944);
          v14 = *(float **)(a1 + 936);
        }
        else
        {
          v19 = 0;
        }
        v20 = (float *)&v19[4 * v15];
        *v20 = v12;
        v13 = v20 + 1;
        while (v7 != v14)
        {
          v21 = *((_DWORD *)v7-- - 1);
          *((_DWORD *)v20-- - 1) = v21;
        }
        *(_QWORD *)(a1 + 936) = v20;
        *(_QWORD *)(a1 + 944) = v13;
        *(_QWORD *)(a1 + 952) = &v19[4 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v12;
        v13 = v7 + 1;
      }
      *(_QWORD *)(a1 + 944) = v13;
      v2 = v10 + 112;
      v7 = v13;
    }
    while (v10 + 112 != *(_QWORD *)(a1 + 872));
    v22 = *(_QWORD *)(a1 + 864);
    if (v2 != v22)
    {
      v23 = v22 - 112;
      v24 = 0.0;
      do
      {
        v24 = v24 + *(double *)(v23 + 176) * *(double *)(v23 + 176);
        v23 += 112;
      }
      while (v23 != v10);
      if (v24 > 0.0)
        *(double *)(a1 + 1608) = 1.0 / v24;
    }
    return 1;
  }
  do
  {
    v1 -= 112;
    sub_10083CCF0(a1 + 880, v1);
  }
  while (v1 != v2);
  result = 0;
  *(_QWORD *)(a1 + 872) = v2;
  return result;
}

void sub_10111C240(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = **a1;
  *(_QWORD *)(v2 + 8) = (*a1)[1];
  *(_QWORD *)v1[1] = v2;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  operator delete(v1);
}

uint64_t sub_10111C268(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;
  double v6;
  double v7;
  double v8;
  double v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint8_t *v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  double v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  double v55;
  uint8_t buf[4];
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  double v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  double v77;

  if (*(_BYTE *)(a2 + 264))
    v2 = *(_BYTE *)(a2 + 265) == 0;
  else
    v2 = 0;
  if (!v2)
    return 0;
  result = 0;
  v6 = *(double *)(a2 + 80);
  if (v6 < 400.0 && v6 > 0.0)
  {
    if (*(_BYTE *)(a1 + 1649) && !*(_BYTE *)(a1 + 1650))
    {
      v7 = *(double *)(a1 + 4024);
      v8 = vabdd_f64(*(double *)(a2 + 8), v7);
      if (v7 < 0.0 || v8 > 2.0)
        return 0;
    }
    v10 = sub_10011E634((double *)(a1 + 608), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 152), *(double *)(a2 + 160), 0.0);
    v11 = v10 / *(double *)(a2 + 80);
    if (v11 > 1.5)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v12 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v13 = *(_QWORD *)(a2 + 8);
          v14 = *(_QWORD *)(a2 + 56);
          v15 = *(_QWORD *)(a2 + 64);
          v16 = *(_QWORD *)(a2 + 104);
          v17 = *(_QWORD *)(a2 + 152);
          v18 = *(_QWORD *)(a2 + 160);
          v19 = *(_QWORD *)(a2 + 168);
          v20 = *(_QWORD *)(a2 + 72);
          v21 = *(_QWORD *)(a2 + 80);
          *(_DWORD *)buf = 134351617;
          v57 = v13;
          v58 = 2049;
          v59 = v14;
          v60 = 2049;
          v61 = v15;
          v62 = 2050;
          v63 = v20;
          v64 = 2050;
          v65 = v16;
          v66 = 2049;
          v67 = v17;
          v68 = 2049;
          v69 = v18;
          v70 = 2050;
          v71 = v19;
          v72 = 2050;
          v73 = v10;
          v74 = 2050;
          v75 = v21;
          v76 = 2050;
          v77 = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf,alt,%{public}.2lf,course,%{public}.1lf,snapLat,%{private}.8lf,snapLon,%{private}.8lf,snapCourse,%{public}.1lf,horizontalError,%{public}.2lf,hunc,%{public}.2lf,ratio,%{public}.2lf", buf, 0x70u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v23 = *(_QWORD *)(a2 + 8);
          v24 = *(_QWORD *)(a2 + 56);
          v25 = *(_QWORD *)(a2 + 64);
          v26 = *(_QWORD *)(a2 + 104);
          v27 = *(_QWORD *)(a2 + 152);
          v28 = *(_QWORD *)(a2 + 160);
          v29 = *(_QWORD *)(a2 + 168);
          v30 = *(_QWORD *)(a2 + 72);
          v31 = *(_QWORD *)(a2 + 80);
          v34 = 134351617;
          v35 = v23;
          v36 = 2049;
          v37 = v24;
          v38 = 2049;
          v39 = v25;
          v40 = 2050;
          v41 = v30;
          v42 = 2050;
          v43 = v26;
          v44 = 2049;
          v45 = v27;
          v46 = 2049;
          v47 = v28;
          v48 = 2050;
          v49 = v29;
          v50 = 2050;
          v51 = v10;
          v52 = 2050;
          v53 = v31;
          v54 = 2050;
          v55 = v11;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf,alt,%{public}.2lf,course,%{public}.1lf,snapLat,%{private}.8lf,snapLon,%{private}.8lf,snapCourse,%{public}.1lf,horizontalError,%{public}.2lf,hunc,%{public}.2lf,ratio,%{public}.2lf", &v34, 112);
          v33 = (uint8_t *)v32;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::modifyHorizontalUncertainty(CLMapCrumb &)", "%s\n", v32);
          if (v33 != buf)
            free(v33);
        }
      }
      v22 = v10 * 1.05;
      if (v10 * 1.05 > 400.0)
        v22 = 400.0;
      *(double *)(a2 + 80) = v22;
      *(_QWORD *)(a1 + 4024) = *(_QWORD *)(a2 + 8);
    }
    return 1;
  }
  return result;
}

BOOL sub_10111C5C8(uint64_t a1, double *a2, double a3, double a4, double a5)
{
  double v9;
  NSObject *v10;
  _BOOL8 result;
  const char *v12;
  NSObject *v13;
  NSObject *v14;
  uint8_t *v15;
  uint64_t v16;
  double v17;
  double v18[2];
  uint8_t buf[1640];

  v9 = sub_1011010A8(*(double *)(a1 + 1432) - a5);
  if (v9 > 8.0)
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v10 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,no DOT, course is not aligned", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        LOWORD(v18[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT, course is not aligned", v18, 2, v16);
LABEL_33:
        v15 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::runDirectionOfTravelHelper(double, double, double, double &)", "%s\n", v12);
        if (v15 != buf)
          free(v15);
        return 0;
      }
      return result;
    }
    return 0;
  }
  if (v9 > *a2)
    *a2 = v9;
  v17 = 0.0;
  v18[0] = 0.0;
  sub_1010B9950((double *)(a1 + 608), v18, &v17, *(double *)(a1 + 1416), *(double *)(a1 + 1424), *(double *)(a1 + 1200), *(double *)(a1 + 1432), a3, a4);
  if (fabs(v18[0]) <= 5.0)
  {
    if (fabs(v17) <= 45.0)
      return 1;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v14 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMM,along track too large, not suitable DOT assistance", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        LOWORD(v16) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,along track too large, not suitable DOT assistance", &v16, 2, v16);
        goto LABEL_33;
      }
      return result;
    }
    return 0;
  }
  if (!*(_BYTE *)(a1 + 96))
    return 0;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2048);
  v13 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,across track too large, not suitable DOT assistance", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    LOWORD(v16) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,across track too large, not suitable DOT assistance", &v16, 2, v16);
    goto LABEL_33;
  }
  return result;
}

uint64_t sub_10111C9AC(uint64_t a1, double *a2)
{
  double v4;
  NSObject *v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  NSObject *v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  const char *v29;
  char *v30;
  NSObject *v32;
  const char *v33;
  NSObject *v34;
  BOOL v35;
  double v36;
  NSObject *v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  NSObject *v41;
  const char *v42;
  char *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  BOOL v49;
  float64x2_t v54;
  int16x8_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  const char *v79;
  NSObject *v80;
  NSObject *v81;
  const char *v82;
  int v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  NSObject *v89;
  NSObject *v90;
  NSObject *v91;
  const char *v92;
  char *v93;
  const char *v94;
  const char *v95;
  const char *v96;
  const char *v97;
  const char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  int v116;
  const char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121[2];
  char v122;
  double v123[3];
  float v124;
  double v125;
  double v126;
  __int16 v127;
  _QWORD v128[3];
  float v129;
  double v130[10];
  void *__p[2];
  char v132;
  _WORD v133[12];
  float v134;
  double v135;
  double v136;
  _QWORD v137[2];
  double v138;
  _BYTE v139[12];
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  uint64_t v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  uint64_t v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  double v167;
  __int16 v168;
  int v169;
  __int16 v170;
  uint64_t v171;
  __int16 v172;
  double v173;
  __int16 v174;
  int v175;
  _BYTE buf[12];
  __int16 v177;
  uint64_t v178;
  __int16 v179;
  uint64_t v180;
  __int16 v181;
  uint64_t v182;
  __int16 v183;
  uint64_t v184;
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  uint64_t v188;
  __int16 v189;
  uint64_t v190;
  __int16 v191;
  uint64_t v192;
  __int16 v193;
  uint64_t v194;
  __int16 v195;
  int v196;
  __int16 v197;
  int v198;
  __int16 v199;
  int v200;
  __int16 v201;
  int v202;
  __int16 v203;
  double v204;
  __int16 v205;
  int v206;
  __int16 v207;
  uint64_t v208;
  __int16 v209;
  double v210;
  __int16 v211;
  int v212;

  bzero(a2, 0x68uLL);
  v4 = *(double *)(a1 + 3728);
  if (v4 > 0.0 && vabdd_f64(*(double *)(a1 + 1136), v4 + -1.0) < 0.9)
  {
    if (!*(_BYTE *)(a1 + 96))
      return 0;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,feedback interval check", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    *(_WORD *)v139 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT,feedback interval check", v139, 2);
    v7 = (char *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v6);
    goto LABEL_181;
  }
  if (!*(_DWORD *)(a1 + 1248) && sub_1002416C0() && (sub_10075CD10() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 96))
      return 0;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v10 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,frc,0", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    *(_WORD *)v139 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT,frc,0", v139, 2);
    v7 = (char *)v79;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v79);
    goto LABEL_181;
  }
  if (*(_BYTE *)(a1 + 2232)
    && *(_BYTE *)(a1 + 1392)
    && !*(_BYTE *)(a1 + 2233)
    && !*(_BYTE *)(a1 + 1393)
    && *(double *)(a1 + 1136) - *(double *)(a1 + 1976) <= 1.5)
  {
    if (*(_BYTE *)(a1 + 2688) && *(double *)(a1 + 2696) < 36.0)
    {
      if (!*(_BYTE *)(a1 + 96))
        return 0;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v8 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close to prior intersection", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      *(_WORD *)v139 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT,too close to prior intersection", v139, 2);
      v7 = (char *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v9);
      goto LABEL_181;
    }
    if (sub_1011010A8(*(double *)(a1 + 1296) - *(double *)(a1 + 1432)) > 1.0)
    {
      if (!*(_BYTE *)(a1 + 96))
        return 0;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v13 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,course not aligned to full snap", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      *(_WORD *)v139 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT,course not aligned to full snap", v139, 2);
      v7 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v14);
      goto LABEL_181;
    }
    v138 = -1.0;
    if (sub_10111C5C8(a1, &v138, *(double *)(a1 + 2256), *(double *)(a1 + 2264), *(double *)(a1 + 2272)))
    {
      if (*(_BYTE *)(a1 + 1490) && *(_DWORD *)(a1 + 1528) == 1)
        goto LABEL_63;
      *(_QWORD *)v139 = 0x4044000000000000;
      LOBYTE(v128[0]) = 1;
      *(_QWORD *)buf = 0x4046800000000000;
      if ((sub_101116478(a1, (double *)v139, (double *)buf, v128) & 1) != 0)
      {
        if (LOBYTE(v128[0]))
        {
          if (!*(_BYTE *)(a1 + 96))
            return 0;
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v15 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close to a road with similar course", buf, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v133[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT,too close to a road with similar course", v133, 2);
          v7 = (char *)v16;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v16);
          goto LABEL_181;
        }
LABEL_63:
        v17 = *(_QWORD *)(a1 + 16);
        v137[0] = *(_QWORD *)(a1 + 8);
        v137[1] = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = 70.0;
        v21 = sub_10110C524(a1, 70.0);
        v22 = *(double *)(a1 + 1224);
        if (v21 < 0.0)
        {
          if (v22 < 5.0)
          {
            sub_100F5E8AC((uint64_t)v139, a1 + 1016);
            if (((*(uint64_t (**)(_QWORD, _BYTE *, uint64_t, double))(*(_QWORD *)v137[0] + 88))(v137[0], v139, a1 + 912, *(double *)(a1 + 3176)) & 1) == 0)
            {
              if (!*(_BYTE *)(a1 + 96))
                goto LABEL_121;
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v34 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_121;
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v133[0] = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,moveOnRoad returned false,DOT particle assistance", v133, 2);
              v25 = (char *)v95;
              sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v95);
              goto LABEL_237;
            }
            if (sub_1011010A8(*(float *)&v143 - *(double *)(a1 + 1232)) > 8.0)
            {
              if (!*(_BYTE *)(a1 + 96))
                goto LABEL_121;
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v23 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close large road direction change", buf, 2u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_121;
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v133[0] = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT,too close large road direction change", v133, 2);
              v25 = (char *)v24;
              sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v24);
LABEL_237:
              if (v25 != buf)
                free(v25);
LABEL_121:
              sub_100F5EA24((uint64_t)v139);
LABEL_122:
              v11 = 0;
LABEL_147:
              sub_100261F44((uint64_t)v137);
              return v11;
            }
            sub_100F5EA24((uint64_t)v139);
          }
LABEL_124:
          sub_100F5E8AC((uint64_t)v133, a1 + 1016);
          if (((*(uint64_t (**)(_QWORD, _WORD *, uint64_t, double))(*(_QWORD *)v137[0] + 88))(v137[0], v133, a1 + 912, -15.0) & 1) != 0)
          {
            if (!sub_10111C5C8(a1, &v138, v135, v136, v134))
              goto LABEL_145;
            sub_1015A2E04(__p, "Start");
            v120 = a1 + 912;
            v35 = sub_10130C630(a1 + 1128, (double *)(a1 + 608), (uint64_t *)__p, a2 + 1, a2 + 2, v135, v136);
            if (v132 < 0)
              operator delete(__p[0]);
            if (v35)
            {
              v36 = sub_10011E634((double *)(a1 + 608), *(double *)(a1 + 1048), *(double *)(a1 + 1056), v135, v136, *(double *)(a1 + 1200));
              sub_100F5E8AC((uint64_t)v128, a1 + 1016);
              if (v20 - *(double *)(a1 + 1224) < 18.0)
              {
                if (!*(_BYTE *)(a1 + 96))
                  goto LABEL_189;
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                v37 = qword_1022A00D8;
                if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,predicted point is too close to intersection", buf, 2u);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_189;
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                *(_WORD *)v139 = 0;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT,predicted point is too close to intersection", v139, 2);
                v39 = (char *)v38;
                sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v38);
                goto LABEL_242;
              }
              if (((*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)v137[0] + 88))(v137[0], v128, v120) & 1) != 0)
              {
                if (!sub_10111C5C8(a1, &v138, v130[0], v130[1], v129))
                {
LABEL_189:
                  v11 = 0;
LABEL_190:
                  sub_100F5EA24((uint64_t)v128);
                  goto LABEL_146;
                }
                *(_OWORD *)(a2 + 3) = *(_OWORD *)v130;
                v44 = sub_101102460(a1, *(_DWORD *)(*(_QWORD *)(a1 + 1016) + 20), *(unsigned __int8 *)(*(_QWORD *)(a1 + 1016) + 16));
                a2[8] = v44;
                if (!*(_BYTE *)(*(_QWORD *)(a1 + 1016) + 16))
                {
                  v83 = *(_DWORD *)(a1 + 760);
                  if (v83)
                  {
                    v84 = v44 * 0.5;
                    a2[8] = v84;
                    v85 = v84 * 0.5;
                    v86 = -(v84 * 0.5);
                    if (v83 == 1)
                      v87 = v86;
                    else
                      v87 = v85;
                    *(_QWORD *)v139 = 0;
                    v123[0] = 0.0;
                    if (sub_100081058((double *)(a1 + 608), (double *)v139, v123, v130[0], v130[1], *(double *)(a1 + 1200), v129, v87))
                    {
                      v88 = v123[0];
                      a2[3] = *(double *)v139;
                      a2[4] = v88;
                      v44 = a2[8];
                    }
                    else
                    {
                      if (qword_1022A00D0 != -1)
                        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                      v90 = qword_1022A00D8;
                      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_ERROR, "CLMM,Unexpected calculateNewPosUsingAcrossTrack fail", buf, 2u);
                      }
                      if (sub_1001BFF7C(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A00D0 != -1)
                          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                        v127 = 0;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected calculateNewPosUsingAcrossTrack fail", &v127, 2);
                        v99 = (char *)v98;
                        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v98);
                        if (v99 != buf)
                          free(v99);
                      }
                      v44 = a2[8] + a2[8];
                      a2[8] = v44;
                    }
                  }
                }
                v45 = fmax(v44, 15.0);
                if (v20 > v45 + 1.0)
                {
                  sub_100F5E8AC((uint64_t)v123, a1 + 1016);
                  if (v20 - v45 >= (*(double *)(a1 + 1224) + 15.0) * 1.5)
                    v46 = (*(double *)(a1 + 1224) + 15.0) * 1.5;
                  else
                    v46 = v20 - v45;
                  if (((*(uint64_t (**)(_QWORD, double *, uint64_t, double))(*(_QWORD *)v137[0] + 88))(v137[0], v123, v120, v46) & 1) != 0)
                  {
                    if (!sub_10111C5C8(a1, &v138, v125, v126, v124))
                      goto LABEL_212;
                    v47 = fmin(v36, 15.0);
                    a2[5] = v47 + v46;
                    v48 = v138;
                    if (v138 < 3.0)
                      v48 = 3.0;
                    a2[7] = v48;
                    sub_1015A2E04(v121, "Predicted");
                    v49 = sub_10130C630(a1 + 1128, (double *)(a1 + 608), (uint64_t *)v121, a2 + 3, a2 + 4, a2[3], a2[4]);
                    if (v122 < 0)
                      operator delete(v121[0]);
                    if (v49)
                    {
                      a2[6] = v129;
                      *a2 = *(double *)(a1 + 1136) + 1.0;
                      __asm { FMOV            V1.2D, #1.0 }
                      v54 = vaddq_f64(*(float64x2_t *)(a1 + 1144), _Q1);
                      *(float64x2_t *)(a2 + 11) = v54;
                      LODWORD(v54.f64[0]) = *(_DWORD *)(v128[0] + 16);
                      v55 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v54.f64[0]);
                      *(int16x4_t *)v55.i8 = vuzp2_s16((int16x4_t)vext_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)v55.i8, 2uLL), *(int16x4_t *)v55.i8);
                      *((_DWORD *)a2 + 18) = vmovn_s16(v55).u32[0];
                      *((_BYTE *)a2 + 76) = *(_DWORD *)(a1 + 1248) == 0;
                      v11 = 1;
                      *((_DWORD *)a2 + 20) = 1;
                      if (*(_BYTE *)(a1 + 96))
                      {
                        if (qword_1022A00D0 != -1)
                          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                        v56 = qword_1022A00D8;
                        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                        {
                          v57 = *((_QWORD *)a2 + 6);
                          v58 = *((_QWORD *)a2 + 7);
                          v59 = *((_QWORD *)a2 + 8);
                          v60 = *a2;
                          v61 = *((_QWORD *)a2 + 1);
                          v63 = *((_QWORD *)a2 + 2);
                          v62 = *((_QWORD *)a2 + 3);
                          v64 = *((_QWORD *)a2 + 4);
                          v65 = *((_QWORD *)a2 + 5);
                          v66 = *(_QWORD *)(a1 + 1224);
                          v67 = *((unsigned __int8 *)a2 + 73);
                          v68 = *((unsigned __int8 *)a2 + 74);
                          v69 = *((unsigned __int8 *)a2 + 72);
                          v70 = *((unsigned __int8 *)a2 + 75);
                          v71 = *((unsigned __int8 *)a2 + 76);
                          v72 = *((_QWORD *)a2 + 12);
                          v73 = *((_DWORD *)a2 + 20);
                          *(_DWORD *)buf = 134353665;
                          *(double *)&buf[4] = v60;
                          v177 = 2049;
                          v178 = v62;
                          v179 = 2049;
                          v180 = v64;
                          v181 = 2050;
                          v182 = v57;
                          v183 = 2050;
                          v184 = v58;
                          v185 = 2050;
                          v186 = v59;
                          v187 = 2049;
                          v188 = v61;
                          v189 = 2049;
                          v190 = v63;
                          v191 = 2050;
                          v192 = v65;
                          v193 = 2050;
                          v194 = v66;
                          v195 = 1026;
                          v196 = v67;
                          v197 = 1026;
                          v198 = v68;
                          v199 = 1026;
                          v200 = v69;
                          v201 = 1026;
                          v202 = v70;
                          v203 = 2050;
                          v204 = v45;
                          v205 = 1026;
                          v206 = v71;
                          v207 = 2050;
                          v208 = v72;
                          v209 = 2050;
                          v210 = v47;
                          v211 = 1026;
                          v212 = v73;
                          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "CLMM,DOT,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.1lf,courseUnc,%{public}.1lf,rw,%{public}.1lf,startLat,%{private}.7lf,startLon,%{private}.7lf,length,%{public}.1lf,speed,%{public}.3lf,isOneWay,%{public}d,isRailWay,%{public}d,isTunnel,%{public}d,isBridge,%{public}d,distFromIntersection,%{public}.1lf,isFreeway,%{public}d,machContinuousTime,%{public}.3lf,lookBehindDistance,%{public}.2lf,type,%{public}d", buf, 0xA8u);
                        }
                        if (sub_1001BFF7C(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A00D0 != -1)
                            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                          v100 = *((_QWORD *)a2 + 6);
                          v101 = *((_QWORD *)a2 + 7);
                          v102 = *((_QWORD *)a2 + 8);
                          v103 = *a2;
                          v104 = *((_QWORD *)a2 + 1);
                          v106 = *((_QWORD *)a2 + 2);
                          v105 = *((_QWORD *)a2 + 3);
                          v107 = *((_QWORD *)a2 + 4);
                          v108 = *((_QWORD *)a2 + 5);
                          v109 = *(_QWORD *)(a1 + 1224);
                          v110 = *((unsigned __int8 *)a2 + 73);
                          v111 = *((unsigned __int8 *)a2 + 74);
                          v112 = *((unsigned __int8 *)a2 + 72);
                          v113 = *((unsigned __int8 *)a2 + 75);
                          v114 = *((unsigned __int8 *)a2 + 76);
                          v115 = *((_QWORD *)a2 + 12);
                          v116 = *((_DWORD *)a2 + 20);
                          *(_DWORD *)v139 = 134353665;
                          *(double *)&v139[4] = v103;
                          v140 = 2049;
                          v141 = v105;
                          v142 = 2049;
                          v143 = v107;
                          v144 = 2050;
                          v145 = v100;
                          v146 = 2050;
                          v147 = v101;
                          v148 = 2050;
                          v149 = v102;
                          v150 = 2049;
                          v151 = v104;
                          v152 = 2049;
                          v153 = v106;
                          v154 = 2050;
                          v155 = v108;
                          v156 = 2050;
                          v157 = v109;
                          v158 = 1026;
                          v159 = v110;
                          v160 = 1026;
                          v161 = v111;
                          v162 = 1026;
                          v163 = v112;
                          v164 = 1026;
                          v165 = v113;
                          v166 = 2050;
                          v167 = v45;
                          v168 = 1026;
                          v169 = v114;
                          v170 = 2050;
                          v171 = v115;
                          v172 = 2050;
                          v173 = v47;
                          v174 = 1026;
                          v175 = v116;
                          LODWORD(v119) = 168;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,DOT,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.1lf,courseUnc,%{public}.1lf,rw,%{public}.1lf,startLat,%{private}.7lf,startLon,%{private}.7lf,length,%{public}.1lf,speed,%{public}.3lf,isOneWay,%{public}d,isRailWay,%{public}d,isTunnel,%{public}d,isBridge,%{public}d,distFromIntersection,%{public}.1lf,isFreeway,%{public}d,machContinuousTime,%{public}.3lf,lookBehindDistance,%{public}.2lf,type,%{public}d", v139, v119);
                          v118 = (char *)v117;
                          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v117);
                          if (v118 != buf)
                            free(v118);
                        }
                      }
                      *(_BYTE *)(a1 + 3720) = 1;
                      v74 = *(_OWORD *)a2;
                      v75 = *((_OWORD *)a2 + 2);
                      *(_OWORD *)(a1 + 3744) = *((_OWORD *)a2 + 1);
                      *(_OWORD *)(a1 + 3760) = v75;
                      *(_OWORD *)(a1 + 3728) = v74;
                      v76 = *((_OWORD *)a2 + 3);
                      v77 = *((_OWORD *)a2 + 4);
                      v78 = *((_OWORD *)a2 + 5);
                      *(double *)(a1 + 3824) = a2[12];
                      *(_OWORD *)(a1 + 3792) = v77;
                      *(_OWORD *)(a1 + 3808) = v78;
                      *(_OWORD *)(a1 + 3776) = v76;
                      goto LABEL_213;
                    }
                    if (!*(_BYTE *)(a1 + 96))
                      goto LABEL_212;
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                    v91 = qword_1022A00D8;
                    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,computeSnapCoordinatesFromRawGPSCoordinates predicted returned false", buf, 2u);
                    }
                    if (!sub_1001BFF7C(115, 2))
                    {
LABEL_212:
                      v11 = 0;
LABEL_213:
                      sub_100F5EA24((uint64_t)v123);
                      goto LABEL_190;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                    *(_WORD *)v139 = 0;
                    LODWORD(v119) = 2;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT,computeSnapCoordinatesFromRawGPSCoordinates predicted returned false", v139, v119);
                    v93 = (char *)v92;
                    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v92);
                  }
                  else
                  {
                    if (!*(_BYTE *)(a1 + 96))
                      goto LABEL_212;
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                    v89 = qword_1022A00D8;
                    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
                    }
                    if (!sub_1001BFF7C(115, 2))
                      goto LABEL_212;
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                    *(_WORD *)v139 = 0;
                    LODWORD(v119) = 2;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,moveOnRoad returned false,DOT particle assistance", v139, v119);
                    v93 = (char *)v97;
                    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v97);
                  }
                  if (v93 != buf)
                    free(v93);
                  goto LABEL_212;
                }
                if (!*(_BYTE *)(a1 + 96))
                  goto LABEL_189;
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                v81 = qword_1022A00D8;
                if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,current particle within the stopDistanceFromIntersection", buf, 2u);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_189;
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                *(_WORD *)v139 = 0;
                LODWORD(v119) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT,current particle within the stopDistanceFromIntersection", v139, v119);
                v39 = (char *)v82;
                sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v82);
              }
              else
              {
                if (!*(_BYTE *)(a1 + 96))
                  goto LABEL_189;
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                v80 = qword_1022A00D8;
                if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_189;
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                *(_WORD *)v139 = 0;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,moveOnRoad returned false,DOT particle assistance", v139, 2);
                v39 = (char *)v96;
                sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v96);
              }
LABEL_242:
              if (v39 != buf)
                free(v39);
              goto LABEL_189;
            }
            if (!*(_BYTE *)(a1 + 96))
              goto LABEL_145;
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v41 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,computeSnapCoordinatesFromRawGPSCoordinates lookBehind returned false", buf, 2u);
            }
            if (!sub_1001BFF7C(115, 2))
            {
LABEL_145:
              v11 = 0;
LABEL_146:
              sub_100F5EA24((uint64_t)v133);
              goto LABEL_147;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            *(_WORD *)v139 = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT,computeSnapCoordinatesFromRawGPSCoordinates lookBehind returned false", v139, 2);
            v43 = (char *)v42;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v42);
          }
          else
          {
            if (!*(_BYTE *)(a1 + 96))
              goto LABEL_145;
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v40 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_145;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            *(_WORD *)v139 = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,moveOnRoad returned false,DOT particle assistance", v139, 2);
            v43 = (char *)v94;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v94);
          }
          if (v43 != buf)
            free(v43);
          goto LABEL_145;
        }
        if (v21 - v22 >= 18.0)
        {
          if (v22 >= 5.0 || *(_BYTE *)(a1 + 3168) == 0)
          {
            v20 = v21 + -1.0;
            goto LABEL_124;
          }
          if (!*(_BYTE *)(a1 + 96))
            goto LABEL_122;
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v32 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too slow when nearing intersection", buf, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_122;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          *(_WORD *)v139 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT,too slow when nearing intersection", v139, 2);
          v30 = (char *)v33;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v33);
        }
        else
        {
          if (!*(_BYTE *)(a1 + 96))
            goto LABEL_122;
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v28 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close to next intersection", buf, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_122;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          *(_WORD *)v139 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT,too close to next intersection", v139, 2);
          v30 = (char *)v29;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v29);
        }
        if (v30 != buf)
          free(v30);
        goto LABEL_122;
      }
      if (!*(_BYTE *)(a1 + 96))
        return 0;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v26 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,assessParallelRoadsWithinDist returned false,unexpected", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v133[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no DOT,assessParallelRoadsWithinDist returned false,unexpected", v133, 2);
      v7 = (char *)v27;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v27);
LABEL_181:
      if (v7 != buf)
        free(v7);
    }
  }
  return 0;
}

void sub_10111E7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  sub_100F5EA24((uint64_t)&a15);
  sub_100F5EA24((uint64_t)&a30);
  sub_100F5EA24((uint64_t)&a47);
  sub_100261F44((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t sub_10111E8D4(uint64_t a1, uint64_t *a2)
{
  double v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  _BYTE buf[12];
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;

  if (!*(_BYTE *)(a1 + 3720) || *(double *)(a1 + 1224) >= 22.222 || *(int *)(a1 + 1248) < 2)
    return 0;
  v25 = 0x4056800000000000;
  v4 = *(double *)(a1 + 1208);
  v5 = 0x4049000000000000;
  if (v4 <= 10.0)
    goto LABEL_7;
  if (v4 < 50.0)
  {
    v5 = 0x4052C00000000000;
LABEL_7:
    v25 = v5;
  }
  v24 = 1;
  *(_QWORD *)buf = 0x4024000000000000;
  if (!sub_101116478(a1, (double *)&v25, (double *)buf, &v24) || v24)
    return 0;
  *a2 = *(_QWORD *)(a1 + 3728);
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(a1 + 3752);
  a2[3] = 0x4059000000000000;
  a2[4] = *(_QWORD *)(a1 + 3792);
  a2[5] = *(_QWORD *)(a1 + 3776);
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v6 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *a2;
      v8 = a2[1];
      v9 = a2[2];
      v10 = a2[3];
      v11 = a2[4];
      v12 = a2[5];
      v13 = *(_QWORD *)(a1 + 1432);
      *(_DWORD *)buf = 134350593;
      *(_QWORD *)&buf[4] = v7;
      v41 = 2049;
      v42 = v8;
      v43 = 2049;
      v44 = v9;
      v45 = 2050;
      v46 = v10;
      v47 = 2050;
      v48 = v11;
      v49 = 2050;
      v50 = v12;
      v51 = 2050;
      v52 = v13;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,MMPA,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,a,%{public}.2lf,b,%{public}.2lf,az,%{public}.3lf,course,%{public}.3lf", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v15 = *a2;
      v16 = a2[1];
      v17 = a2[2];
      v18 = a2[3];
      v19 = a2[4];
      v20 = a2[5];
      v21 = *(_QWORD *)(a1 + 1432);
      v26 = 134350593;
      v27 = v15;
      v28 = 2049;
      v29 = v16;
      v30 = 2049;
      v31 = v17;
      v32 = 2050;
      v33 = v18;
      v34 = 2050;
      v35 = v19;
      v36 = 2050;
      v37 = v20;
      v38 = 2050;
      v39 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,MMPA,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,a,%{public}.2lf,b,%{public}.2lf,az,%{public}.3lf,course,%{public}.3lf", &v26, 72);
      v23 = (char *)v22;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getPosAssistanceForGps(CLGpsAssistant_Type::MapMatchedPositionAssistance &)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  return 1;
}

uint64_t sub_10111EBE4(uint64_t a1, uint64_t a2)
{
  double v2;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  uint64_t v9;
  double v10;
  double v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int v40;
  int v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  const char *v56;
  uint8_t *v57;
  _QWORD v58[2];
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *__p[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[64];
  __int16 v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[80];
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  uint8_t buf[4];
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;

  v2 = *(double *)(a2 + 8);
  if (v2 < 0.0 || *(double *)a2 < 0.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v8 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMM,TBA,Invalid time", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    LOWORD(v58[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,TBA,Invalid time", v58, 2);
    v7 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)", "%s\n", v42);
    goto LABEL_66;
  }
  if (vabdd_f64(*(double *)(a1 + 1136), v2) < 5.0)
  {
    if (*(_BYTE *)(a1 + 1392))
    {
      if (!*(_BYTE *)(a1 + 1393))
      {
        v40 = *(unsigned __int8 *)(a1 + 1489);
        *(_BYTE *)(a2 + 43) = v40;
        v41 = *(unsigned __int8 *)(a1 + 1490);
        *(_BYTE *)(a2 + 42) = v41;
        if (v41 | v40)
        {
          *(_BYTE *)(a2 + 40) = v41;
          *(_BYTE *)(a2 + 41) = v40;
          return 1;
        }
      }
    }
  }
  if (!sub_10011CE64(*(double *)(a2 + 16), *(double *)(a2 + 24)))
  {
    v84 = (uint64_t)&v84;
    v85 = &v84;
    v86 = 0;
    v10 = *(double *)(a1 + 3160);
    v11 = *(double *)a2;
    if (v10 > 0.0 && vabdd_f64(v10, v11) < *(double *)(a2 + 32) / 38.0)
    {
      v9 = 0;
LABEL_59:
      sub_1001A5CBC(&v84);
      return v9;
    }
    *(double *)(a1 + 3160) = v11;
    v13 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    v82 = v13;
    v83 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
    v58[0] = 0;
    v58[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v59 = _Q0;
    v60 = 0;
    v61 = 0;
    v62 = 0xBFF0000000000000;
    v74 = 0;
    v75 = 0;
    memset(&v72[32], 0, 32);
    v73 = 0;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    memset(v79, 0, 27);
    memset(&v79[32], 0, 48);
    memset(v72, 0, 30);
    v71 = 0u;
    v70 = 0u;
    v69 = 0u;
    v68 = 0u;
    *(_OWORD *)__p = 0u;
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    v80 = 0;
    v81 = 0xBFF0000000000000;
    v63 = *(_OWORD *)(a2 + 16);
    if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, uint64_t, double))(*(_QWORD *)v13 + 64))(v13, &v84, v58, 1, *(double *)(a2 + 32)) & 1) != 0)
    {
      if (v86)
      {
        v21 = v85;
        if (v85 != &v84)
        {
          v22 = 0;
          do
          {
            while (1)
            {
              v23 = v21[2];
              if (!v23)
                break;
              if (*(_BYTE *)(v23 + 18))
              {
                v22 = 1;
                *(_BYTE *)(a2 + 40) = 1;
              }
              if (!*(_BYTE *)(v23 + 19))
                break;
              v22 = 1;
              *(_BYTE *)(a2 + 41) = 1;
              v21 = (uint64_t *)v21[1];
              if (v21 == &v84)
                goto LABEL_39;
            }
            v21 = (uint64_t *)v21[1];
          }
          while (v21 != &v84);
          if ((v22 & 1) == 0)
            goto LABEL_51;
LABEL_39:
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v24 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            v25 = *(_QWORD *)(a2 + 16);
            v26 = *(_QWORD *)(a2 + 24);
            v27 = *(_QWORD *)(a1 + 1208);
            v28 = *(_QWORD *)(a2 + 32);
            v29 = *(unsigned __int8 *)(a2 + 40);
            v30 = *(unsigned __int8 *)(a2 + 41);
            v31 = *(unsigned __int8 *)(a2 + 42);
            v32 = *(unsigned __int8 *)(a2 + 43);
            *(_DWORD *)buf = 134285313;
            v104 = v25;
            v105 = 2049;
            v106 = v26;
            v107 = 2050;
            v108 = v27;
            v109 = 2050;
            v110 = v28;
            v111 = 1026;
            v112 = v29;
            v113 = 1026;
            v114 = v30;
            v115 = 1026;
            v116 = v31;
            v117 = 1026;
            v118 = v32;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLMM, TBA,lat,%{private}.8lf,lon,%{private}.8lf,unc,%{public}.2lf,searchRadius,%{public}.1lf,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,isTunnel,%{public}d,isBridge,%{public}d", buf, 0x42u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v48 = *(_QWORD *)(a2 + 16);
            v49 = *(_QWORD *)(a2 + 24);
            v50 = *(_QWORD *)(a1 + 1208);
            v51 = *(_QWORD *)(a2 + 32);
            v52 = *(unsigned __int8 *)(a2 + 40);
            v53 = *(unsigned __int8 *)(a2 + 41);
            v54 = *(unsigned __int8 *)(a2 + 42);
            v55 = *(unsigned __int8 *)(a2 + 43);
            v87 = 134285313;
            v88 = v48;
            v89 = 2049;
            v90 = v49;
            v91 = 2050;
            v92 = v50;
            v93 = 2050;
            v94 = v51;
            v95 = 1026;
            v96 = v52;
            v97 = 1026;
            v98 = v53;
            v99 = 1026;
            v100 = v54;
            v101 = 1026;
            v102 = v55;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM, TBA,lat,%{private}.8lf,lon,%{private}.8lf,unc,%{public}.2lf,searchRadius,%{public}.1lf,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,isTunnel,%{public}d,isBridge,%{public}d", &v87, 66);
            v57 = (uint8_t *)v56;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)", "%s\n", v56);
            if (v57 != buf)
              free(v57);
          }
          v9 = 1;
          goto LABEL_52;
        }
      }
    }
    else if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v33 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v34 = *(_QWORD *)(a1 + 1184);
        v35 = *(_QWORD *)(a1 + 1192);
        v36 = *(_QWORD *)(a2 + 32);
        *(_DWORD *)buf = 134284033;
        v104 = v34;
        v105 = 2049;
        v106 = v35;
        v107 = 2050;
        v108 = v36;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMM,TBA,roadsWithinDistance returns query failed,lat,%{private}.8lf,lon,%{private}.8lf,searchRadius,%{public}.1lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v43 = *(_QWORD *)(a1 + 1184);
        v44 = *(_QWORD *)(a1 + 1192);
        v45 = *(_QWORD *)(a2 + 32);
        v87 = 134284033;
        v88 = v43;
        v89 = 2049;
        v90 = v44;
        v91 = 2050;
        v92 = v45;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,TBA,roadsWithinDistance returns query failed,lat,%{private}.8lf,lon,%{private}.8lf,searchRadius,%{public}.1lf", &v87, 32);
        v47 = (uint8_t *)v46;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)", "%s\n", v46);
        if (v47 != buf)
          free(v47);
      }
    }
LABEL_51:
    v9 = 0;
LABEL_52:
    if (SHIBYTE(v68) < 0)
      operator delete(__p[1]);
    if (v12)
    {
      v37 = (unint64_t *)&v12->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    goto LABEL_59;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2048);
  v5 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,TBA,NULL Island", buf, 2u);
  }
  if (!sub_1001BFF7C(115, 2))
    return 0;
  bzero(buf, 0x65CuLL);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2048);
  LOWORD(v58[0]) = 0;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,TBA,NULL Island", v58, 2);
  v7 = (uint8_t *)v6;
  sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)", "%s\n", v6);
LABEL_66:
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_10111F49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t a71;

  if (a32 < 0)
    operator delete(__p);
  sub_100261F44((uint64_t)&a69);
  sub_1001A5CBC(&a71);
  _Unwind_Resume(a1);
}

BOOL sub_10111F4E0(uint64_t a1, _QWORD *a2, double *a3, _QWORD *a4, uint64_t *a5, int a6, double a7)
{
  uint64_t i;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  unint64_t v17;
  _BOOL8 v18;
  NSObject *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  double *v30;
  uint64_t *v31;
  char v32;
  _QWORD *v33;
  unint64_t **v34;
  double v35;
  double v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  _BOOL4 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  double v44;
  double v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _BOOL4 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  float v53;
  double v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  NSObject *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  const char *v66;
  char *v67;
  __n128 **v68;
  __n128 **v69;
  char v70;
  unint64_t **v71;
  unint64_t **v72;
  unint64_t v73;
  double v74;
  double v75;
  double v76;
  double *v77;
  double v78;
  char v79;
  char v80;
  unint64_t v81;
  double v82;
  double v83;
  double v84;
  unint64_t v85;
  double v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  NSObject *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  const char *v98;
  char *v99;
  unint64_t v100;
  __n128 *v101;
  unint64_t *v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  NSObject *v113;
  uint64_t v114;
  unint64_t v115;
  double *v116;
  double v117;
  double v118;
  double v119;
  double *v120;
  double v121;
  double *v122;
  double v123;
  double v124;
  double v125;
  unint64_t v126;
  double v127;
  _BOOL4 v128;
  uint64_t v129;
  unint64_t v130;
  const char *v131;
  unint64_t v132;
  __n128 *v133;
  unint64_t *v134;
  unint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  NSObject *v146;
  uint64_t v147;
  unint64_t v148;
  double v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  double v153;
  unint64_t v154;
  const char *v155;
  char *v156;
  NSObject *v157;
  uint64_t v158;
  unint64_t v159;
  NSObject *v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  char *v164;
  NSObject *v165;
  uint64_t v166;
  NSObject *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  double v171;
  unint64_t v172;
  uint64_t j;
  uint64_t v174;
  BOOL v175;
  NSObject *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v180;
  unint64_t v181;
  const char *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  const char *v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  double v192;
  unint64_t v193;
  const char *v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  const char *v198;
  char *v199;
  uint64_t v200;
  double *v201;
  uint64_t v203;
  __n128 *v204;
  std::__shared_weak_count *v205;
  __n128 *v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  _QWORD *v212;
  std::__shared_weak_count *v213;
  uint64_t v214;
  uint64_t v215;
  double v216;
  __n128 *v217;
  __n128 **v218;
  uint64_t v219;
  __n128 *v220;
  __n128 **v221;
  uint64_t v222;
  uint64_t *v223;
  _QWORD *v224[2];
  uint64_t v225;
  uint64_t *v226;
  unint64_t v227;
  _BYTE v228[12];
  __int16 v229;
  unint64_t v230;
  int v231;
  uint64_t v232;
  __int16 v233;
  unint64_t v234;
  int v235;
  uint64_t v236;
  __int16 v237;
  unint64_t v238;
  __int16 v239;
  unint64_t v240;
  __int16 v241;
  double v242;
  __int16 v243;
  unint64_t v244;
  _BYTE buf[12];
  __int16 v246;
  unint64_t v247;
  __int16 v248;
  unint64_t v249;
  __int16 v250;
  double v251;
  __int16 v252;
  unint64_t v253;

  v14 = *a5;
  for (i = a5[1]; i != v14; i = sub_100261F44(i - 56))
    ;
  a5[1] = v14;
  if (a4[2] == a4[1] || sub_1002199F0((uint64_t)a4, *(double *)(a1 + 24), 6.0))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v15 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_QWORD *)(a1 + 8);
      v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v16;
      v246 = 2050;
      v247 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routehint timed out or empty, segments,%{public}lu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v180 = *(_QWORD *)(a1 + 8);
      v181 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
      v235 = 134349312;
      v236 = v180;
      v237 = 2050;
      v238 = v181;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routehint timed out or empty, segments,%{public}lu", &v235, 22);
      v183 = (char *)v182;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v182);
      if (v183 != buf)
        free(v183);
    }
    v18 = 0;
    a4[2] = a4[1];
    return v18;
  }
  if (!*a2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v26 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,invalid geometry pointer, determineRouteHintRoadVectors", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v28 = *(_QWORD *)(a1 + 8);
    v235 = 134349056;
    v236 = v28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,Unexpected,invalid geometry pointer, determineRouteHintRoadVectors", &v235, 12);
    v25 = (char *)v29;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v29);
    goto LABEL_236;
  }
  if (a6)
  {
    if (!sub_1012A1B34(a4))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v19 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v20 = *(_QWORD *)(a1 + 8);
        v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v20;
        v246 = 2050;
        v247 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHint road search,isConnectivityGood,poorConnectivity caused by radar:58817500,%{public}lu,file radar if 58817500 is already fixed", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v22 = *(_QWORD *)(a1 + 8);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
      v235 = 134349312;
      v236 = v22;
      v237 = 2050;
      v238 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,routeHint road search,isConnectivityGood,poorConnectivity caused by radar:58817500,%{public}lu,file radar if 58817500 is already fixed", &v235, 22);
      v25 = (char *)v24;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v24);
LABEL_236:
      if (v25 != buf)
        free(v25);
      return 0;
    }
  }
  else if ((sub_1012A1DB0(a4) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v157 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v158 = *(_QWORD *)(a1 + 8);
      v159 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v158;
      v246 = 2050;
      v247 = v159;
      _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHint road search,getConnectedRouteSegments,poorConnectivity caused by radar:58817500,%{public}lu,file radar if 58817500 is already fixed", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v184 = *(_QWORD *)(a1 + 8);
    v185 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
    v235 = 134349312;
    v236 = v184;
    v237 = 2050;
    v238 = v185;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,routeHint road search,getConnectedRouteSegments,poorConnectivity caused by radar:58817500,%{public}lu,file radar if 58817500 is already fixed", &v235, 22);
    v25 = (char *)v186;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v186);
    goto LABEL_236;
  }
  v225 = (uint64_t)&v225;
  v226 = &v225;
  v227 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, uint64_t, double))(*(_QWORD *)*a2 + 64))(*a2, &v225, a1, 1, a7) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v160 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v161 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v161;
      _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,search, roadsWithinDistance returned false", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_205;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v162 = *(_QWORD *)(a1 + 8);
    v235 = 134349056;
    v236 = v162;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,search, roadsWithinDistance returned false", &v235, 12);
    v164 = (char *)v163;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v163);
    goto LABEL_241;
  }
  if (!v227)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v165 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v166 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v166;
      _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected, empty road list", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_205;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v187 = *(_QWORD *)(a1 + 8);
    v235 = 134349056;
    v236 = v187;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,Unexpected, empty road list", &v235, 12);
    v164 = (char *)v188;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v188);
LABEL_241:
    if (v164 != buf)
      free(v164);
LABEL_205:
    v18 = 0;
    goto LABEL_227;
  }
  v224[0] = 0;
  v224[1] = 0;
  v223 = (uint64_t *)v224;
  v30 = (double *)a4[1];
  v201 = (double *)a4[2];
  if (v30 == v201)
    goto LABEL_225;
  v203 = a1;
  do
  {
    v220 = (__n128 *)&v220;
    v221 = &v220;
    v222 = 0;
    v217 = (__n128 *)&v217;
    v218 = &v217;
    v219 = 0;
    v31 = v226;
    if (v226 == &v225)
      goto LABEL_180;
    v32 = 0;
    do
    {
      v34 = (unint64_t **)(v31 + 2);
      v33 = (_QWORD *)v31[2];
      if (*(_QWORD *)v30 != *v33)
        goto LABEL_76;
      *(_QWORD *)v228 = 0;
      v215 = 0;
      v216 = 0.0;
      v35 = v30[1];
      v36 = v30[2];
      v37 = (std::__shared_weak_count *)v31[3];
      v212 = v33;
      v213 = v37;
      v214 = 0;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(p_shared_owners);
        while (__stxr(v39 + 1, p_shared_owners));
      }
      v40 = sub_101123B2C(a3, (uint64_t *)&v212, (double *)&v215, (double *)v228, v35, v36);
      v41 = v213;
      if (v213)
      {
        v42 = (unint64_t *)&v213->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = v30[3];
      v45 = v30[4];
      v46 = (std::__shared_weak_count *)v31[3];
      v210 = v31[2];
      v211 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v49 = sub_101123B2C(a3, &v210, (double *)&v214, &v216, v44, v45);
      v50 = v211;
      if (v211)
      {
        v51 = (unint64_t *)&v211->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
          if (!v40)
            goto LABEL_56;
LABEL_55:
          sub_1010069D4(&v220, (__n128 *)v31 + 1);
          goto LABEL_56;
        }
      }
      if (v40)
        goto LABEL_55;
LABEL_56:
      if (v49)
      {
        sub_1010069D4(&v217, (__n128 *)v31 + 1);
        if (v40)
        {
          if (vabdd_f64(*(double *)v228, v216) < 0.0001)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v167 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
            {
              v168 = *(_QWORD *)(v203 + 8);
              v169 = *((_QWORD *)v30 + 1);
              v170 = *((_QWORD *)v30 + 2);
              v171 = v30[3];
              v172 = *((_QWORD *)v30 + 4);
              *(_DWORD *)buf = 134350081;
              *(_QWORD *)&buf[4] = v168;
              v246 = 2049;
              v247 = v169;
              v248 = 2049;
              v249 = v170;
              v250 = 2049;
              v251 = v171;
              v252 = 2049;
              v253 = v172;
              _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHints,road search, invalid data encountered, same start and end route coords, not using routehints,sLat,%{private}.7lf,sLon,%{private}.7lf,eLat,%{private}.7lf,eLon,%{private}.7lf", buf, 0x34u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v189 = *(_QWORD *)(v203 + 8);
              v190 = *((_QWORD *)v30 + 1);
              v191 = *((_QWORD *)v30 + 2);
              v192 = v30[3];
              v193 = *((_QWORD *)v30 + 4);
              v235 = 134350081;
              v236 = v189;
              v237 = 2049;
              v238 = v190;
              v239 = 2049;
              v240 = v191;
              v241 = 2049;
              v242 = v192;
              v243 = 2049;
              v244 = v193;
              LODWORD(v200) = 52;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,routeHints,road search, invalid data encountered, same start and end route coords, not using routehints,sLat,%{private}.7lf,sLon,%{private}.7lf,eLat,%{private}.7lf,eLon,%{private}.7lf", &v235, v200);
              v195 = (char *)v194;
              sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v194);
              if (v195 != buf)
                free(v195);
            }
            v174 = *a5;
            for (j = a5[1]; j != v174; j = sub_100261F44(j - 56))
              ;
            a5[1] = v174;
            sub_1001A5CBC((uint64_t *)&v217);
            sub_1001A5CBC((uint64_t *)&v220);
            v18 = 0;
            goto LABEL_226;
          }
          if (*(double *)v228 >= v216)
          {
            v53 = *((float *)v31 + 10) + 180.0;
            *((float *)v31 + 10) = v53;
            sub_1001C6800(v53);
            *(float *)&v54 = v54;
            *((_DWORD *)v31 + 10) = LODWORD(v54);
            *((_BYTE *)v31 + 36) ^= 1u;
          }
          v55 = (std::__shared_weak_count *)v31[3];
          v208 = v31[2];
          v209 = v55;
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          sub_100F5C398((uint64_t)&v231, (uint64_t)&v208, *((_BYTE *)v31 + 36));
          v58 = v209;
          if (v209)
          {
            v59 = (unint64_t *)&v209->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          if (!sub_101123FF0((uint64_t)&v223, (uint64_t)&v231))
          {
            *(_QWORD *)buf = &v231;
            *((_BYTE *)sub_101124058(&v223, (uint64_t)&v231, (uint64_t)&unk_101B9EB60, (_OWORD **)buf) + 56) = 1;
            v139 = a5[1];
            if (v139 >= a5[2])
            {
              v145 = sub_101124178(a5, (uint64_t)(v31 + 2));
            }
            else
            {
              *(_QWORD *)v139 = v31[2];
              v140 = v31[3];
              *(_QWORD *)(v139 + 8) = v140;
              if (v140)
              {
                v141 = (unint64_t *)(v140 + 8);
                do
                  v142 = __ldxr(v141);
                while (__stxr(v142 + 1, v141));
              }
              v143 = *((_OWORD *)v31 + 2);
              v144 = *((_OWORD *)v31 + 3);
              *(_QWORD *)(v139 + 48) = v31[8];
              *(_OWORD *)(v139 + 16) = v143;
              *(_OWORD *)(v139 + 32) = v144;
              v145 = v139 + 56;
            }
            a5[1] = v145;
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v146 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v147 = *(_QWORD *)(v203 + 8);
              v148 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
              v149 = *v30;
              v150 = **v34;
              *(_DWORD *)buf = 134350081;
              *(_QWORD *)&buf[4] = v147;
              v246 = 2050;
              v247 = v227;
              v248 = 2050;
              v249 = v148;
              v250 = 2049;
              v251 = v149;
              v252 = 2049;
              v253 = v150;
              _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,roadList,%{public}lu,routeRoads,%{public}lu,routeID,%{private}lld,matched,%{private}lld", buf, 0x34u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v151 = *(_QWORD *)(v203 + 8);
              v152 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
              v153 = *v30;
              v154 = **v34;
              v235 = 134350081;
              v236 = v151;
              v237 = 2050;
              v238 = v227;
              v239 = 2050;
              v240 = v152;
              v241 = 2049;
              v242 = v153;
              v243 = 2049;
              v244 = v154;
              LODWORD(v200) = 52;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,road search,roadList,%{public}lu,routeRoads,%{public}lu,routeID,%{private}lld,matched,%{private}lld", &v235, v200);
              v156 = (char *)v155;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v155);
              if (v156 != buf)
                free(v156);
            }
            goto LABEL_180;
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v61 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            v62 = *(_QWORD *)(v203 + 8);
            v63 = **v34;
            *(_DWORD *)buf = 134349313;
            *(_QWORD *)&buf[4] = v62;
            v246 = 2049;
            v247 = v63;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,road already present,%{private}lld", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v64 = *(_QWORD *)(v203 + 8);
            v65 = **v34;
            v235 = 134349313;
            v236 = v64;
            v237 = 2049;
            v238 = v65;
            LODWORD(v200) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,road search,road already present,%{private}lld", &v235, v200);
            v67 = (char *)v66;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v66);
            if (v67 != buf)
              free(v67);
          }
          v32 = 1;
        }
      }
LABEL_76:
      v31 = (uint64_t *)v31[1];
    }
    while (v31 != &v225);
    v68 = v221;
    if (v32 & 1 | (v221 == &v220))
      goto LABEL_180;
    while (2)
    {
      v69 = v218;
      if (v218 == &v217)
        goto LABEL_160;
      v70 = 0;
      v71 = (unint64_t **)(v68 + 2);
      while (2)
      {
        v72 = (unint64_t **)(v69 + 2);
        if ((v70 & 1) != 0)
          goto LABEL_102;
        v73 = (*v71)[18];
        v74 = 0.0;
        v75 = 0.0;
        v76 = 0.0;
        if (v73 != (*v71)[17])
        {
          v75 = *(double *)(v73 - 16);
          v76 = *(double *)(v73 - 8);
        }
        v77 = (double *)(*v72)[17];
        v78 = 0.0;
        if ((double *)(*v72)[18] != v77)
        {
          v74 = *v77;
          v78 = v77[1];
        }
        if (sub_100512A74(v75, v76, v74, v78, 0.0000001))
        {
          v79 = 1;
          goto LABEL_94;
        }
        v81 = (*v71)[18];
        v82 = 0.0;
        v83 = 0.0;
        v84 = 0.0;
        if (v81 != (*v71)[17])
        {
          v83 = *(double *)(v81 - 16);
          v84 = *(double *)(v81 - 8);
        }
        v85 = (*v72)[18];
        v86 = 0.0;
        if (v85 != (*v72)[17])
        {
          v82 = *(double *)(v85 - 16);
          v86 = *(double *)(v85 - 8);
        }
        if (sub_100512A74(v83, v84, v82, v86, 0.0000001))
        {
          v80 = 0;
          v79 = 1;
          goto LABEL_101;
        }
        v116 = (double *)(*v71)[17];
        v117 = 0.0;
        v118 = 0.0;
        v119 = 0.0;
        if ((double *)(*v71)[18] != v116)
        {
          v118 = *v116;
          v119 = v116[1];
        }
        v120 = (double *)(*v72)[17];
        v121 = 0.0;
        if ((double *)(*v72)[18] != v120)
        {
          v117 = *v120;
          v121 = v120[1];
        }
        if (sub_100512A74(v118, v119, v117, v121, 0.0000001))
        {
          v79 = 0;
LABEL_94:
          v80 = 1;
LABEL_101:
          *((_BYTE *)v68 + 36) = v79;
          *((_BYTE *)v69 + 36) = v80;
LABEL_102:
          v87 = (std::__shared_weak_count *)v68[3];
          v206 = v68[2];
          v207 = v87;
          if (v87)
          {
            v88 = (unint64_t *)&v87->__shared_owners_;
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
          }
          sub_100F5C398((uint64_t)&v235, (uint64_t)&v206, *((_BYTE *)v68 + 36));
          v90 = v207;
          if (v207)
          {
            v91 = (unint64_t *)&v207->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
          if (sub_101123FF0((uint64_t)&v223, (uint64_t)&v235))
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v93 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v94 = *(_QWORD *)(v203 + 8);
              v95 = **v71;
              *(_DWORD *)buf = 134349313;
              *(_QWORD *)&buf[4] = v94;
              v246 = 2049;
              v247 = v95;
              _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,road already present,start,%{private}lld", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v96 = *(_QWORD *)(v203 + 8);
              v97 = **v71;
              v231 = 134349313;
              v232 = v96;
              v233 = 2049;
              v234 = v97;
              LODWORD(v200) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,road search,road already present,start,%{private}lld", &v231, v200);
              v99 = (char *)v98;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v98);
              goto LABEL_157;
            }
          }
          else
          {
            *(_QWORD *)buf = &v235;
            *((_BYTE *)sub_101124058(&v223, (uint64_t)&v235, (uint64_t)&unk_101B9EB60, (_OWORD **)buf) + 56) = 1;
            v100 = a5[1];
            if (v100 >= a5[2])
            {
              v106 = sub_101124178(a5, (uint64_t)(v68 + 2));
            }
            else
            {
              *(_QWORD *)v100 = v68[2];
              v101 = v68[3];
              *(_QWORD *)(v100 + 8) = v101;
              if (v101)
              {
                v102 = &v101->n128_u64[1];
                do
                  v103 = __ldxr(v102);
                while (__stxr(v103 + 1, v102));
              }
              v104 = *((_OWORD *)v68 + 2);
              v105 = *((_OWORD *)v68 + 3);
              *(_QWORD *)(v100 + 48) = v68[8];
              *(_OWORD *)(v100 + 16) = v104;
              *(_OWORD *)(v100 + 32) = v105;
              v106 = v100 + 56;
            }
            a5[1] = v106;
            v107 = (std::__shared_weak_count *)v69[3];
            v204 = v69[2];
            v205 = v107;
            if (v107)
            {
              v108 = (unint64_t *)&v107->__shared_owners_;
              do
                v109 = __ldxr(v108);
              while (__stxr(v109 + 1, v108));
            }
            sub_100F5C398((uint64_t)&v231, (uint64_t)&v204, *((_BYTE *)v69 + 36));
            v110 = v205;
            if (v205)
            {
              v111 = (unint64_t *)&v205->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            if (!sub_101123FF0((uint64_t)&v223, (uint64_t)&v231))
            {
              *(_QWORD *)buf = &v231;
              *((_BYTE *)sub_101124058(&v223, (uint64_t)&v231, (uint64_t)&unk_101B9EB60, (_OWORD **)buf) + 56) = 1;
              v132 = a5[1];
              if (v132 >= a5[2])
              {
                v138 = sub_101124178(a5, (uint64_t)(v69 + 2));
              }
              else
              {
                *(_QWORD *)v132 = v69[2];
                v133 = v69[3];
                *(_QWORD *)(v132 + 8) = v133;
                if (v133)
                {
                  v134 = &v133->n128_u64[1];
                  do
                    v135 = __ldxr(v134);
                  while (__stxr(v135 + 1, v134));
                }
                v136 = *((_OWORD *)v69 + 2);
                v137 = *((_OWORD *)v69 + 3);
                *(_QWORD *)(v132 + 48) = v69[8];
                *(_OWORD *)(v132 + 16) = v136;
                *(_OWORD *)(v132 + 32) = v137;
                v138 = v132 + 56;
              }
              a5[1] = v138;
              goto LABEL_180;
            }
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v113 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v114 = *(_QWORD *)(v203 + 8);
              v115 = **v72;
              *(_DWORD *)buf = 134349313;
              *(_QWORD *)&buf[4] = v114;
              v246 = 2049;
              v247 = v115;
              _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,road already present,stop,%{private}lld", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v129 = *(_QWORD *)(v203 + 8);
              v130 = **v72;
              *(_DWORD *)v228 = 134349313;
              *(_QWORD *)&v228[4] = v129;
              v229 = 2049;
              v230 = v130;
              LODWORD(v200) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,road search,road already present,stop,%{private}lld", v228, v200);
              v99 = (char *)v131;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v131);
LABEL_157:
              if (v99 != buf)
                free(v99);
            }
          }
          v70 = 1;
        }
        else
        {
          v122 = (double *)(*v71)[17];
          v123 = 0.0;
          v124 = 0.0;
          v125 = 0.0;
          if ((double *)(*v71)[18] != v122)
          {
            v124 = *v122;
            v125 = v122[1];
          }
          v126 = (*v72)[18];
          v127 = 0.0;
          if (v126 != (*v72)[17])
          {
            v123 = *(double *)(v126 - 16);
            v127 = *(double *)(v126 - 8);
          }
          v128 = sub_100512A74(v124, v125, v123, v127, 0.0000001);
          v79 = 0;
          v80 = 0;
          v70 = 0;
          if (v128)
            goto LABEL_101;
        }
        v69 = (__n128 **)v69[1];
        if (v69 != &v217)
          continue;
        break;
      }
      if ((v70 & 1) != 0)
        break;
LABEL_160:
      v68 = (__n128 **)v68[1];
      if (v68 != &v220)
        continue;
      break;
    }
LABEL_180:
    sub_1001A5CBC((uint64_t *)&v217);
    sub_1001A5CBC((uint64_t *)&v220);
    v30 += 5;
  }
  while (v30 != v201);
  v175 = a4[2] == a4[1] || v227 == 0;
  if (!v175 && a5[1] == *a5)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v176 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v177 = *(_QWORD *)(v203 + 8);
      v178 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v177;
      v246 = 2050;
      v247 = v178;
      v248 = 2050;
      v249 = v227;
      _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_DEBUG, "#Warning,CLMM,%{public}.1lf,routeHints,unable to find routeHints road,segments,%{public}lu,roadList,%{public}lu", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v196 = *(_QWORD *)(v203 + 8);
      v197 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
      v235 = 134349568;
      v236 = v196;
      v237 = 2050;
      v238 = v197;
      v239 = 2050;
      v240 = v227;
      LODWORD(v200) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning,CLMM,%{public}.1lf,routeHints,unable to find routeHints road,segments,%{public}lu,roadList,%{public}lu", &v235, v200);
      v199 = (char *)v198;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v198);
      if (v199 != buf)
        free(v199);
    }
  }
LABEL_225:
  v18 = a5[1] != *a5;
LABEL_226:
  sub_100008848((uint64_t)&v223, v224[0]);
LABEL_227:
  sub_1001A5CBC(&v225);
  return v18;
}

void sub_101121034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,_QWORD *a38,uint64_t a39,uint64_t a40)
{
  sub_100008848((uint64_t)&a37, a38);
  sub_1001A5CBC(&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_1011210FC(uint64_t a1)
{
  _QWORD *v1;
  double *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __n128 *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  BOOL v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  BOOL v34;
  double v36;
  NSObject *v37;
  double v38;
  uint64_t v39;
  int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  char *v64;
  double v65;
  uint64_t v66;
  int v67;
  const char *v68;
  char *v69;
  uint64_t v70;
  NSObject *v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  __n128 **v85;
  uint64_t v86;
  unint64_t v87;
  double v88;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  double *v94;
  double v95;
  double v96;
  double v97;
  double *v98;
  double *v99;
  BOOL v100;
  double v101;
  double v102;
  _BOOL8 v104;
  unint64_t v105;
  NSObject *v106;
  const char *v107;
  char *v108;
  double v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  NSObject *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  const char *v133;
  char *v134;
  NSObject *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  double v139;
  double v140;
  int v141;
  NSObject *v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  char *v147;
  NSObject *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  const char *v153;
  NSObject *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  const char *v159;
  const char *v160;
  char *v161;
  const char *v162;
  char *v163;
  const char *v164;
  uint64_t v165;
  const char *v166;
  char *v167;
  const char *v168;
  char *v169;
  uint64_t v170;
  __int128 v171;
  uint64_t *v172;
  _QWORD *v173;
  _OWORD *v174;
  int8x16_t *v175;
  double *v176;
  int v177;
  __n128 *v178;
  __n128 **v179;
  unint64_t v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  _BYTE v183[24];
  _OWORD *v184;
  _OWORD *v185;
  unint64_t v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  int v189;
  uint64_t v190;
  __int16 v191;
  uint64_t v192;
  __int16 v193;
  uint64_t v194;
  __int16 v195;
  uint64_t v196;
  __int16 v197;
  uint64_t v198;
  __int16 v199;
  uint64_t v200;
  __int16 v201;
  uint64_t v202;
  _BYTE v203[48];
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  _OWORD v208[2];
  __int128 v209;
  __int128 v210;
  _OWORD v211[2];
  uint64_t v212;
  std::__shared_weak_count *v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  _BYTE v217[32];
  _BYTE v218[30];
  __int16 v219;
  uint64_t v220;
  __int16 v221;
  uint64_t v222;
  _BYTE buf[12];
  __int16 v224;
  _BYTE v225[18];
  __int16 v226;
  uint64_t v227;
  __int16 v228;
  uint64_t v229;
  __int16 v230;
  uint64_t v231;
  __int16 v232;
  uint64_t v233;
  __int16 v234;
  uint64_t v235;

  v1 = (_QWORD *)a1;
  v2 = (double *)(a1 + 4120);
  sub_100F5F0E8((double *)(a1 + 4120), *(double *)(a1 + 88));
  v3 = v1[510];
  v4 = v1[509];
  if (v3 != v4)
  {
    sub_101124BE8((uint64_t)(v1 + 512), v4, v1[510], 0xF83E0F83E0F83E1 * ((v3 - v4) >> 3));
    v5 = v1[510];
    v3 = v1[509];
    if (v5 != v3)
    {
      do
      {
        v6 = v5 - 264;
        sub_100261F44(v5 - 56);
        v5 = v6;
      }
      while (v6 != v3);
    }
  }
  v1[510] = v3;
  if (!*((_BYTE *)v1 + 114))
    return 0;
  if (v1[506] == v1[507])
    return 0;
  v7 = v1[142];
  if (sub_1002199F0((uint64_t)(v1 + 6), *((double *)v1 + 144), 2.5) || !sub_100F5F0D4(v2, *((double *)v1 + 11), 60.0))
    return 0;
  v8 = v1[1];
  v9 = (std::__shared_weak_count *)v1[2];
  v187 = v8;
  v188 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (!v8)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    v72 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "CLMM,Unexpected,invalid geometry pointer,generateRouteHint", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      *(_WORD *)v203 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,Unexpected,invalid geometry pointer,generateRouteHint", v203, 2);
      v161 = (char *)v160;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v160);
      if (v161 != buf)
        free(v161);
    }
    v70 = 0;
    goto LABEL_204;
  }
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v173 = v1;
  if (*((_BYTE *)v1 + 2232))
  {
    sub_10110E724(v1 + 232, (uint64_t)v183);
    v12 = (__n128 *)v1[506];
    if (v12 != (__n128 *)v1[507])
    {
      while (1)
      {
        v13 = v12->n128_u64[1];
        v181 = v12->n128_u64[0];
        v182 = (std::__shared_weak_count *)v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        sub_100F5C398((uint64_t)buf, (uint64_t)&v181, v12[1].n128_i8[4]);
        v16 = sub_100F5C3F4((uint64_t)v183, (uint64_t)buf);
        v17 = v182;
        if (v182)
        {
          v18 = (unint64_t *)&v182->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (v16)
          break;
        v12 = (__n128 *)((char *)v12 + 56);
        if (v12 == (__n128 *)v1[507])
          goto LABEL_24;
      }
      v73 = *((double *)v1 + 144);
      v74 = -1.0;
      if (v73 >= 0.0)
      {
        v75 = *((double *)v1 + 249);
        v76 = vabdd_f64(v73, v75);
        if (v75 >= 0.0)
          v74 = v76;
        else
          v74 = -1.0;
      }
      v77 = fmax(*((double *)v1 + 225), 0.0) + (float)((float)random() * 4.6566e-10) * 0.25;
      if (v77 <= v74 * 72.0)
        v78 = v77;
      else
        v78 = v74 * 72.0;
      sub_100F5E8AC((uint64_t)v217, (uint64_t)(v1 + 232));
      v178 = (__n128 *)&v178;
      v179 = &v178;
      v180 = 0;
      while (v12 != (__n128 *)v1[507])
      {
        sub_1010069D4(&v178, v12);
        v12 = (__n128 *)((char *)v12 + 56);
      }
      v177 = 0;
      if (((*(uint64_t (**)(uint64_t, _BYTE *, __n128 **, int *, double, double))(*(_QWORD *)v187 + 56))(v187, v217, &v178, &v177, *(double *)&v218[16], v78) & 1) != 0)
      {
        if (v180 <= v177)
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v135 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134349568;
            *(_QWORD *)&buf[4] = v7;
            v224 = 1026;
            *(_DWORD *)v225 = v177;
            *(_WORD *)&v225[4] = 2050;
            *(_QWORD *)&v225[6] = v180;
            _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,route index,%{public}d,is more than number of route roads,%{public}ld", buf, 0x1Cu);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_201;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          *(_DWORD *)v203 = 134349568;
          *(_QWORD *)&v203[4] = v7;
          *(_WORD *)&v203[12] = 1026;
          *(_DWORD *)&v203[14] = v177;
          *(_WORD *)&v203[18] = 2050;
          *(_QWORD *)&v203[20] = v180;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,route index,%{public}d,is more than number of route roads,%{public}ld", v203, 28);
          v134 = (char *)v164;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v164);
          goto LABEL_258;
        }
        v79 = *(float *)&v217[24];
        v80 = 5.0;
        if (*(double *)&v218[16] <= 0.97 && *(double *)&v218[16] >= 0.03)
        {
          if (*((double *)v1 + 165) <= 0.0 || (v81 = *((double *)v1 + 154), v81 < 0.0))
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v82 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349312;
              *(_QWORD *)&buf[4] = v7;
              v224 = 2050;
              *(_QWORD *)v225 = 0x403E000000000000;
              _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,course deweighted,unc,%{public}.2lf", buf, 0x16u);
            }
            v80 = 30.0;
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              *(_DWORD *)v203 = 134349312;
              *(_QWORD *)&v203[4] = v7;
              *(_WORD *)&v203[12] = 2050;
              *(_QWORD *)&v203[14] = 0x403E000000000000;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,course deweighted,unc,%{public}.2lf", v203, 22);
              v169 = (char *)v168;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v168);
              if (v169 != buf)
                free(v169);
            }
            goto LABEL_111;
          }
          v139 = fmod(v81 - v79, 360.0);
          if (v139 < 0.0)
            v139 = v139 + 360.0;
          if (v139 > 180.0)
            v139 = v139 + -360.0;
          v140 = fabs(v139);
          v141 = *((_DWORD *)v1 + 1010);
          if (v140 >= 135.0)
          {
            *((_DWORD *)v1 + 1010) = v141 + 1;
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v148 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v149 = v1[154];
              v150 = *((_DWORD *)v1 + 1010);
              *(_DWORD *)buf = 134349824;
              *(_QWORD *)&buf[4] = v7;
              v224 = 2050;
              *(double *)v225 = v79;
              *(_WORD *)&v225[8] = 2050;
              *(_QWORD *)&v225[10] = v149;
              v226 = 1026;
              LODWORD(v227) = v150;
              _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_201;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v151 = v1[154];
            v152 = *((_DWORD *)v1 + 1010);
            *(_DWORD *)v203 = 134349824;
            *(_QWORD *)&v203[4] = v7;
            *(_WORD *)&v203[12] = 2050;
            *(double *)&v203[14] = v79;
            *(_WORD *)&v203[22] = 2050;
            *(_QWORD *)&v203[24] = v151;
            *(_WORD *)&v203[32] = 1026;
            *(_DWORD *)&v203[34] = v152;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", v203, 38);
            v134 = (char *)v153;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v153);
            goto LABEL_258;
          }
          if (v140 > 60.0 && v141 >= 1)
          {
            *((_DWORD *)v1 + 1010) = v141 + 1;
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v154 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v155 = v1[154];
              v156 = *((_DWORD *)v1 + 1010);
              *(_DWORD *)buf = 134349824;
              *(_QWORD *)&buf[4] = v7;
              v224 = 2050;
              *(double *)v225 = v79;
              *(_WORD *)&v225[8] = 2050;
              *(_QWORD *)&v225[10] = v155;
              v226 = 1026;
              LODWORD(v227) = v156;
              _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is different than crumb course,%{public}.1lf, and rejections are high,rejection,%{public}d", buf, 0x26u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_201;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v157 = v1[154];
            v158 = *((_DWORD *)v1 + 1010);
            *(_DWORD *)v203 = 134349824;
            *(_QWORD *)&v203[4] = v7;
            *(_WORD *)&v203[12] = 2050;
            *(double *)&v203[14] = v79;
            *(_WORD *)&v203[22] = 2050;
            *(_QWORD *)&v203[24] = v157;
            *(_WORD *)&v203[32] = 1026;
            *(_DWORD *)&v203[34] = v158;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is different than crumb course,%{public}.1lf, and rejections are high,rejection,%{public}d", v203, 38);
            v134 = (char *)v159;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v159);
LABEL_258:
            if (v134 != buf)
              free(v134);
LABEL_201:
            sub_1001A5CBC((uint64_t *)&v178);
            sub_100F5EA24((uint64_t)v217);
LABEL_202:
            v70 = 0;
            goto LABEL_203;
          }
          if (v140 > 80.0)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2048);
            v143 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v144 = v1[154];
              *(_DWORD *)buf = 134349568;
              *(_QWORD *)&buf[4] = v7;
              v224 = 2050;
              *(double *)v225 = v79;
              *(_WORD *)&v225[8] = 2050;
              *(_QWORD *)&v225[10] = v144;
              _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,routeCourse,%{public}.1lf,is somewhat different than crumb course,%{public}.1lf", buf, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v145 = v1[154];
              *(_DWORD *)v203 = 134349568;
              *(_QWORD *)&v203[4] = v7;
              *(_WORD *)&v203[12] = 2050;
              *(double *)&v203[14] = v79;
              *(_WORD *)&v203[22] = 2050;
              *(_QWORD *)&v203[24] = v145;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,routeCourse,%{public}.1lf,is somewhat different than crumb course,%{public}.1lf", v203, 32);
              v147 = (char *)v146;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v146);
              if (v147 != buf)
                free(v147);
            }
            goto LABEL_126;
          }
        }
LABEL_111:
        v83 = *(_QWORD *)v218;
        v84 = *(_QWORD *)&v218[8];
        v85 = v179;
        v86 = v177;
        if (v177 < 0)
        {
          do
          {
            v85 = (__n128 **)*v85;
            _CF = __CFADD__(v86++, 1);
          }
          while (!_CF);
        }
        else if (v177)
        {
          v87 = v177 + 1;
          do
          {
            v85 = (__n128 **)v85[1];
            --v87;
          }
          while (v87 > 1);
        }
        v88 = sub_10011E634((double *)v1 + 76, *(double *)v218, *(double *)&v218[8], *((double *)v85 + 6), *((double *)v85 + 7), 0.0);
        memset(v203, 0, 24);
        *(_OWORD *)&v203[24] = xmmword_101BAFC90;
        v203[40] = 0;
        v204 = 0u;
        v205 = 0u;
        __asm { FMOV            V1.2D, #-1.0 }
        v210 = _Q1;
        *(_QWORD *)&v211[0] = 0xBFF0000000000000;
        v212 = 0;
        v213 = 0;
        LODWORD(v214) = 0;
        WORD2(v214) = 1;
        DWORD2(v214) = 0;
        v216 = 0;
        v215 = 0uLL;
        *(_QWORD *)&v206 = v83;
        *((_QWORD *)&v206 + 1) = v84;
        *(_QWORD *)&v207 = v1[150];
        *((double *)&v207 + 1) = v79;
        if (v88 < 8.0)
          v88 = 8.0;
        *(double *)v208 = v88;
        *((double *)v208 + 1) = v80;
        *(_QWORD *)&v208[1] = 0x3FF0000000000000;
        v90 = v1[164];
        *((_QWORD *)&v208[1] + 1) = v1[153];
        *(_QWORD *)&v209 = v90;
        BYTE8(v209) = *((_BYTE *)v1 + 1356);
        *(int8x16_t *)((char *)v211 + 8) = vextq_s8(*(int8x16_t *)(v1 + 143), *(int8x16_t *)(v1 + 143), 8uLL);
        *((_QWORD *)&v211[1] + 1) = v1[142];
        sub_1011230EC((uint64_t)v203, 0);
        sub_100349198(&v212, (uint64_t *)v217);
        v214 = *(_OWORD *)&v217[16];
        v215 = *(_OWORD *)v218;
        v216 = *(_QWORD *)&v218[16];
        sub_1011231F8((uint64_t *)&v184, (uint64_t)v203);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v91 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v92 = 0xF83E0F83E0F83E1 * ((uint64_t)(v1[510] - v1[509]) >> 3);
          *(_DWORD *)buf = 134350593;
          *(_QWORD *)&buf[4] = v7;
          v224 = 2049;
          *(_QWORD *)v225 = v206;
          *(_WORD *)&v225[8] = 2049;
          *(_QWORD *)&v225[10] = *((_QWORD *)&v206 + 1);
          v226 = 2050;
          v227 = *((_QWORD *)&v207 + 1);
          v228 = 2050;
          v229 = *(_QWORD *)&v208[0];
          v230 = 2050;
          v231 = *((_QWORD *)&v208[0] + 1);
          v232 = 2050;
          v233 = v92;
          _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,meas,moveOnRouteRoads,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu", buf, 0x48u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          v165 = 0xF83E0F83E0F83E1 * ((uint64_t)(v1[510] - v1[509]) >> 3);
          v189 = 134350593;
          v190 = v7;
          v191 = 2049;
          v192 = v206;
          v193 = 2049;
          v194 = *((_QWORD *)&v206 + 1);
          v195 = 2050;
          v196 = *((_QWORD *)&v207 + 1);
          v197 = 2050;
          v198 = *(_QWORD *)&v208[0];
          v199 = 2050;
          v200 = *((_QWORD *)&v208[0] + 1);
          v201 = 2050;
          v202 = v165;
          LODWORD(v170) = 72;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,meas,moveOnRouteRoads,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu", &v189, v170);
          v167 = (char *)v166;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v166);
          if (v167 != buf)
            free(v167);
        }
        sub_100261F44((uint64_t)&v212);
LABEL_126:
        sub_1001A5CBC((uint64_t *)&v178);
        sub_100F5EA24((uint64_t)v217);
        goto LABEL_24;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v132 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,failed as not enough route roads are available", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_201;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      *(_DWORD *)v203 = 134349056;
      *(_QWORD *)&v203[4] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,failed as not enough route roads are available", v203, 12);
      v134 = (char *)v133;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v133);
      goto LABEL_258;
    }
  }
LABEL_24:
  v20 = (uint64_t)v184;
  v174 = v185;
  if (v185 != v184)
    goto LABEL_135;
  v21 = v1[506];
  v22 = v1[507];
  if (v21 == v22)
    goto LABEL_134;
  v23 = 0;
  v175 = (int8x16_t *)(v1 + 143);
  v176 = (double *)(v1 + 76);
  __asm { FMOV            V0.2D, #-1.0 }
  v171 = _Q0;
  do
  {
    v26 = sub_10011E634(v176, *(double *)(v21 + 32), *(double *)(v21 + 40), *((double *)v1 + 145), *((double *)v1 + 146), 0.0);
    memset(v203, 0, 24);
    *(_OWORD *)&v203[24] = xmmword_101BAFC90;
    v203[40] = 0;
    v204 = 0u;
    v205 = 0u;
    v210 = v171;
    *(_QWORD *)&v211[0] = 0xBFF0000000000000;
    LODWORD(v214) = 0;
    v212 = 0;
    v213 = 0;
    WORD2(v214) = 1;
    DWORD2(v214) = 0;
    v216 = 0;
    v215 = 0uLL;
    v206 = *(_OWORD *)(v21 + 32);
    *(_QWORD *)&v207 = v1[150];
    if (v26 < 8.0)
      v26 = 8.0;
    *((double *)&v207 + 1) = *(float *)(v21 + 24);
    *(double *)v208 = v26;
    *(_OWORD *)((char *)v208 + 8) = xmmword_101BB7280;
    v27 = v1[164];
    *((_QWORD *)&v208[1] + 1) = v1[153];
    *(_QWORD *)&v209 = v27;
    BYTE8(v209) = *((_BYTE *)v1 + 1356);
    *(int8x16_t *)((char *)v211 + 8) = vextq_s8(*v175, *v175, 8uLL);
    *((_QWORD *)&v211[1] + 1) = v1[142];
    sub_1011230EC((uint64_t)v203, 0);
    *(double *)&v208[1] = 1.0 / *((double *)v208 + 1);
    sub_100349198(&v212, (uint64_t *)v21);
    v28 = *(_QWORD *)(v21 + 48);
    v29 = *(_OWORD *)(v21 + 32);
    v214 = *(_OWORD *)(v21 + 16);
    v215 = v29;
    v216 = v28;
    if (*((double *)v1 + 165) <= 0.0 || (v30 = *((double *)v1 + 154), v30 < 0.0))
    {
      if (!*((_BYTE *)v1 + 1848))
        goto LABEL_49;
      v30 = *((double *)v1 + 267);
      if (v30 < 0.0)
        goto LABEL_49;
    }
    v31 = fmod(v30 - *((double *)&v207 + 1), 360.0);
    if (v31 < 0.0)
      v31 = v31 + 360.0;
    v32 = v31 + -360.0;
    if (v31 <= 180.0)
      v32 = v31;
    v33 = fabs(v32);
    if (v33 < 135.0
      && (v33 > 60.0 ? (v34 = *((_DWORD *)v1 + 1010) <= 0) : (v34 = 1),
          v34
       && (v33 > 80.0
         ? (_CF = (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v1[507] - v1[506]) >> 3)) >= 2)
         : (_CF = 0),
           !_CF)))
    {
      if (v32 == 0.0)
        v36 = *(double *)&v208[1];
      else
        v36 = 1.0 / v33;
      *(double *)&v208[1] = v36;
      sub_1011230EC((uint64_t)v203, 0);
      v44 = v185;
      if ((unint64_t)v185 >= v186)
      {
        v59 = sub_101124FDC((uint64_t *)&v184, (uint64_t)v203);
      }
      else
      {
        *v185 = *(_OWORD *)v203;
        v45 = *(_OWORD *)&v203[16];
        v46 = *(_OWORD *)&v203[32];
        v47 = v205;
        v44[3] = v204;
        v44[4] = v47;
        v44[1] = v45;
        v44[2] = v46;
        v48 = v206;
        v49 = v207;
        v50 = v208[1];
        v44[7] = v208[0];
        v44[8] = v50;
        v44[5] = v48;
        v44[6] = v49;
        v51 = v209;
        v52 = v210;
        v53 = v211[1];
        v44[11] = v211[0];
        v44[12] = v53;
        v44[9] = v51;
        v44[10] = v52;
        *((_QWORD *)v44 + 26) = v212;
        v54 = v213;
        *((_QWORD *)v44 + 27) = v213;
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        v57 = v214;
        v58 = v215;
        *((_QWORD *)v44 + 32) = v216;
        v44[14] = v57;
        v44[15] = v58;
        v59 = (uint64_t)v44 + 264;
      }
      v185 = (_OWORD *)v59;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v60 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v61 = 0xF83E0F83E0F83E1 * ((uint64_t)(v1[510] - v1[509]) >> 3);
        *(_DWORD *)buf = 134350849;
        *(_QWORD *)&buf[4] = v7;
        v224 = 2049;
        *(_QWORD *)v225 = v206;
        *(_WORD *)&v225[8] = 2049;
        *(_QWORD *)&v225[10] = *((_QWORD *)&v206 + 1);
        v226 = 2050;
        v227 = *((_QWORD *)&v207 + 1);
        v228 = 2050;
        v229 = *(_QWORD *)&v208[0];
        v230 = 2050;
        v231 = *((_QWORD *)&v208[0] + 1);
        v232 = 2050;
        v233 = v61;
        v234 = 2050;
        v235 = *(_QWORD *)&v208[1];
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf", buf, 0x52u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v62 = 0xF83E0F83E0F83E1 * ((uint64_t)(v173[510] - v173[509]) >> 3);
        *(_DWORD *)v217 = 134350849;
        *(_QWORD *)&v217[4] = v7;
        *(_WORD *)&v217[12] = 2049;
        *(_QWORD *)&v217[14] = v206;
        *(_WORD *)&v217[22] = 2049;
        *(_QWORD *)&v217[24] = *((_QWORD *)&v206 + 1);
        *(_WORD *)v218 = 2050;
        *(_QWORD *)&v218[2] = *((_QWORD *)&v207 + 1);
        *(_WORD *)&v218[10] = 2050;
        *(_QWORD *)&v218[12] = *(_QWORD *)&v208[0];
        *(_WORD *)&v218[20] = 2050;
        *(_QWORD *)&v218[22] = *((_QWORD *)&v208[0] + 1);
        v219 = 2050;
        v220 = v62;
        v221 = 2050;
        v222 = *(_QWORD *)&v208[1];
        LODWORD(v170) = 82;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf", v217, v170);
        v64 = (char *)v63;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v63);
        if (v64 != buf)
          free(v64);
        v1 = v173;
      }
    }
    else
    {
LABEL_49:
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2048);
      v37 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v38 = *(float *)(v21 + 24);
        v39 = v1[154];
        v40 = *((_DWORD *)v1 + 1010);
        *(_DWORD *)buf = 134349824;
        *(_QWORD *)&buf[4] = v7;
        v224 = 2050;
        *(double *)v225 = v38;
        *(_WORD *)&v225[8] = 2050;
        *(_QWORD *)&v225[10] = v39;
        v226 = 1026;
        LODWORD(v227) = v40;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
      }
      ++v23;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v65 = *(float *)(v21 + 24);
        v66 = v1[154];
        v67 = *((_DWORD *)v1 + 1010);
        *(_DWORD *)v217 = 134349824;
        *(_QWORD *)&v217[4] = v7;
        *(_WORD *)&v217[12] = 2050;
        *(double *)&v217[14] = v65;
        *(_WORD *)&v217[22] = 2050;
        *(_QWORD *)&v217[24] = v66;
        *(_WORD *)v218 = 1026;
        *(_DWORD *)&v218[2] = v67;
        LODWORD(v170) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", v217, v170);
        v69 = (char *)v68;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v68);
        if (v69 != buf)
          free(v69);
      }
    }
    v41 = v213;
    if (v213)
    {
      v42 = (unint64_t *)&v213->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v21 += 56;
  }
  while (v21 != v22);
  if (v23 <= 0)
  {
LABEL_134:
    v20 = (uint64_t)v184;
    v174 = v185;
    goto LABEL_135;
  }
  v20 = (uint64_t)v184;
  v174 = v185;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v1[507] - v1[506]) >> 3) != v23 || v185 != v184)
  {
LABEL_135:
    if (v174 != (_OWORD *)v20)
    {
      v172 = v1 + 509;
      v94 = (double *)(v1 + 76);
      *((_DWORD *)v1 + 1010) = 0;
      v95 = -1.0;
      v96 = 0.0;
      v97 = -1.0;
      do
      {
        v98 = (double *)v1[512];
        v99 = (double *)v1[513];
        if (v98 == v99)
          goto LABEL_162;
        v100 = 1;
        do
        {
          v101 = vabdd_f64(v98[23], *(double *)(v20 + 184));
          if (v95 < 0.0)
            v95 = v101;
          v102 = sub_10011E634(v94, *(double *)(v20 + 80), *(double *)(v20 + 88), v98[10], v98[11], 0.0);
          if (v102 < v97 || v97 < 0.0)
            v97 = v102;
          if (v102 < 0.001)
          {
            v104 = *(double *)(v20 + 256) >= 0.2;
            *(_QWORD *)v217 = v217;
            *(_QWORD *)&v217[8] = v217;
            *(_QWORD *)&v217[16] = 0;
            if ((*(unsigned int (**)(uint64_t, _BYTE *, uint64_t, _BOOL8, _QWORD))(*(_QWORD *)v187 + 72))(v187, v217, v20 + 208, v104, 0))
            {
              v105 = *(_QWORD *)&v217[16];
              v100 = *(_QWORD *)&v217[16] > 1uLL;
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2048);
              v106 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134349568;
                *(_QWORD *)&buf[4] = v7;
                v224 = 1026;
                *(_DWORD *)v225 = v105 > 1;
                *(_WORD *)&v225[4] = 2050;
                *(_QWORD *)&v225[6] = *(_QWORD *)&v217[16];
                _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,duplicate measurement check,measurementGood,%{public}d,vector,%{public}lu", buf, 0x1Cu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021A2048);
                *(_DWORD *)v203 = 134349568;
                *(_QWORD *)&v203[4] = v7;
                *(_WORD *)&v203[12] = 1026;
                *(_DWORD *)&v203[14] = v105 > 1;
                *(_WORD *)&v203[18] = 2050;
                *(_QWORD *)&v203[20] = *(_QWORD *)&v217[16];
                LODWORD(v170) = 28;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,duplicate measurement check,measurementGood,%{public}d,vector,%{public}lu", v203, v170);
                v108 = (char *)v107;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v107);
                if (v108 != buf)
                  free(v108);
              }
            }
            sub_1011048CC((uint64_t *)v217);
          }
          v98 += 33;
        }
        while (v98 != v99);
        if (v100)
        {
LABEL_162:
          v109 = *(double *)(v20 + 128);
          v1 = v173;
          v110 = v173[510];
          if (v110 >= v173[511])
          {
            v125 = sub_101124FDC(v172, v20);
          }
          else
          {
            *(_OWORD *)v110 = *(_OWORD *)v20;
            v111 = *(_OWORD *)(v20 + 16);
            v112 = *(_OWORD *)(v20 + 32);
            v113 = *(_OWORD *)(v20 + 64);
            *(_OWORD *)(v110 + 48) = *(_OWORD *)(v20 + 48);
            *(_OWORD *)(v110 + 64) = v113;
            *(_OWORD *)(v110 + 16) = v111;
            *(_OWORD *)(v110 + 32) = v112;
            v114 = *(_OWORD *)(v20 + 80);
            v115 = *(_OWORD *)(v20 + 96);
            v116 = *(_OWORD *)(v20 + 128);
            *(_OWORD *)(v110 + 112) = *(_OWORD *)(v20 + 112);
            *(_OWORD *)(v110 + 128) = v116;
            *(_OWORD *)(v110 + 80) = v114;
            *(_OWORD *)(v110 + 96) = v115;
            v117 = *(_OWORD *)(v20 + 144);
            v118 = *(_OWORD *)(v20 + 160);
            v119 = *(_OWORD *)(v20 + 192);
            *(_OWORD *)(v110 + 176) = *(_OWORD *)(v20 + 176);
            *(_OWORD *)(v110 + 192) = v119;
            *(_OWORD *)(v110 + 144) = v117;
            *(_OWORD *)(v110 + 160) = v118;
            *(_QWORD *)(v110 + 208) = *(_QWORD *)(v20 + 208);
            v120 = *(_QWORD *)(v20 + 216);
            *(_QWORD *)(v110 + 216) = v120;
            if (v120)
            {
              v121 = (unint64_t *)(v120 + 8);
              do
                v122 = __ldxr(v121);
              while (__stxr(v122 + 1, v121));
            }
            v123 = *(_OWORD *)(v20 + 224);
            v124 = *(_OWORD *)(v20 + 240);
            *(_QWORD *)(v110 + 256) = *(_QWORD *)(v20 + 256);
            *(_OWORD *)(v110 + 224) = v123;
            *(_OWORD *)(v110 + 240) = v124;
            v125 = v110 + 264;
          }
          v96 = v96 + v109;
          v173[510] = v125;
        }
        else
        {
          v1 = v173;
        }
        v20 += 264;
      }
      while ((_OWORD *)v20 != v174);
      if (v97 < 0.0 || v95 <= 0.0 || v95 >= 5.0 || v97 <= v95 * 50.0)
      {
        if (v96 > 0.0)
        {
          v130 = v1[509];
          v131 = v1[510];
          while (v130 != v131)
          {
            *(double *)(v130 + 128) = *(double *)(v130 + 128) / v96;
            v130 += 264;
          }
        }
        v70 = 1;
      }
      else
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2048);
        v126 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)&buf[4] = v7;
          v224 = 2050;
          *(double *)v225 = v97;
          _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,jump in route hint measurement,%{public}.3lf,rejecting", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2048);
          *(_DWORD *)v203 = 134349312;
          *(_QWORD *)&v203[4] = v7;
          *(_WORD *)&v203[12] = 2050;
          *(double *)&v203[14] = v97;
          LODWORD(v170) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,routeHints,jump in route hint measurement,%{public}.3lf,rejecting", v203, v170);
          v163 = (char *)v162;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v162);
          if (v163 != buf)
            free(v163);
          v1 = v173;
        }
        v127 = v1[510];
        v128 = v1[509];
        if (v127 != v128)
        {
          do
          {
            v129 = v127 - 264;
            sub_100261F44(v127 - 56);
            v127 = v129;
          }
          while (v129 != v128);
        }
        v70 = 0;
        v1[510] = v128;
      }
      goto LABEL_203;
    }
    goto LABEL_202;
  }
  v70 = 0;
  ++*((_DWORD *)v1 + 1010);
LABEL_203:
  *(_QWORD *)buf = &v184;
  sub_10083CB88((void ***)buf);
LABEL_204:
  v136 = v188;
  if (v188)
  {
    v137 = (unint64_t *)&v188->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  return v70;
}

void sub_10112300C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_1001A5CBC(&a26);
  sub_100F5EA24((uint64_t)&STACK[0x250]);
  STACK[0x2C0] = (unint64_t)&a34;
  sub_10083CB88((void ***)&STACK[0x2C0]);
  sub_100261F44((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_1011230EC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[30];
  __int128 v24;
  __int128 v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[80];
  uint64_t v33;
  unint64_t v34;

  v24 = 0u;
  v25 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  memset(v32, 0, 27);
  memset(&v32[32], 0, 48);
  *(_OWORD *)&v23[14] = 0u;
  *(_OWORD *)v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  *(_OWORD *)__p = 0u;
  v17 = 0u;
  v16 = 0u;
  v13 = *(_OWORD *)(a1 + 80);
  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 96);
  v15 = v3;
  *(_OWORD *)v23 = *(_OWORD *)(a1 + 160);
  v5 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)&v23[16] = *(_QWORD *)(a1 + 176);
  v6 = *(_QWORD *)(a1 + 144);
  *((_QWORD *)&v16 + 1) = *(_QWORD *)(a1 + 136);
  *(_QWORD *)&v17 = v2;
  *(_QWORD *)&v22 = v6;
  *((_QWORD *)&v22 + 1) = v4;
  v7 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0xBFF0000000000000;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v33 = 0;
  v34 = 0xBFF0000000000000;
  v23[28] = *(_BYTE *)(a1 + 152);
  v9 = v5;
  v8 = vextq_s8(*(int8x16_t *)(a1 + 192), *(int8x16_t *)(a1 + 192), 8uLL);
  sub_100583BE8(a1, (uint64_t)&v7, a2);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[1]);
}

void sub_1011231DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011231F8(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = sub_101124FDC(a1, a2);
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)a2;
    v4 = *(_OWORD *)(a2 + 16);
    v5 = *(_OWORD *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v3 + 64) = v6;
    *(_OWORD *)(v3 + 16) = v4;
    *(_OWORD *)(v3 + 32) = v5;
    v7 = *(_OWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 96);
    v9 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v3 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v3 + 128) = v9;
    *(_OWORD *)(v3 + 80) = v7;
    *(_OWORD *)(v3 + 96) = v8;
    v10 = *(_OWORD *)(a2 + 144);
    v11 = *(_OWORD *)(a2 + 160);
    v12 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(v3 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(v3 + 192) = v12;
    *(_OWORD *)(v3 + 144) = v10;
    *(_OWORD *)(v3 + 160) = v11;
    v13 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(v3 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(v3 + 216) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = *(_OWORD *)(a2 + 224);
    v17 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(v3 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(v3 + 224) = v16;
    *(_OWORD *)(v3 + 240) = v17;
    result = v3 + 264;
  }
  a1[1] = result;
  return result;
}

void sub_10112329C(double *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  long double v12;

  a1[7] = 0.0;
  a1[8] = 0.0;
  a1[9] = 0.0;
  v1 = *((_QWORD *)a1 + 11);
  v2 = *((_QWORD *)a1 + 12);
  if (v1 != v2)
  {
    v4 = 0.0;
    v5 = 0.0;
    v6 = *((_QWORD *)a1 + 11);
    do
    {
      if (*(_DWORD *)(v6 + 64) == 2)
      {
        v7 = *(double *)(v6 + 24);
        v4 = v4 + *(double *)v6 * v7;
        v5 = v5 + *(double *)(v6 + 16) * v7;
      }
      v6 += 72;
    }
    while (v6 != v2);
    a1[7] = v4;
    v8 = v5 + 0.0;
    a1[9] = v5 + 0.0;
    while (v1 != v2)
    {
      if (*(_DWORD *)(v1 + 64) != 2)
      {
        v9 = *(double *)(v1 + 24);
        v10 = *(double *)v1 * v9;
        if (v4 > 0.0)
        {
          v11 = log(v4);
          v12 = log(v10);
          v10 = exp(v11 + v12);
        }
        a1[7] = v10;
        v8 = v8 + *(double *)(v1 + 16) * v9;
        a1[9] = v8;
        v4 = v10;
      }
      v1 += 72;
    }
  }
}

uint64_t sub_101123388@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 1024);
  *a2 = *(_QWORD *)(result + 1016);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1011233B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1036);
}

double sub_1011233B8(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 136) = _Q1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_WORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 467) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 334) = 0u;
  *(_QWORD *)(a1 + 544) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 639) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_WORD *)(a1 + 692) = 1;
  *(_DWORD *)(a1 + 696) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 822) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  return result;
}

uint64_t sub_1011234A8(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  *(_WORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 411) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 278) = 0u;
  *(_QWORD *)(a1 + 488) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 484) = 0;
  sub_1002433B8(a1 + 496);
  return a1;
}

void sub_101123568(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 215) < 0)
    operator delete(*(void **)(v1 + 192));
  _Unwind_Resume(exception_object);
}

void sub_101123584(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t sub_1011235B0(uint64_t a1)
{
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  sub_101123720(a1 + 152);
  *(_OWORD *)(a1 + 4912) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 4928) = _Q0;
  *(_OWORD *)(a1 + 4944) = 0u;
  *(_QWORD *)(a1 + 4960) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 5184) = 0;
  *(_DWORD *)(a1 + 5192) = 0;
  *(_WORD *)(a1 + 5176) = 0;
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_OWORD *)(a1 + 5200) = 0u;
  *(_OWORD *)(a1 + 5216) = 0u;
  *(_OWORD *)(a1 + 5232) = 0u;
  *(_OWORD *)(a1 + 5248) = 0u;
  *(_OWORD *)(a1 + 5259) = 0u;
  *(_OWORD *)(a1 + 5280) = 0u;
  *(_OWORD *)(a1 + 5296) = 0u;
  *(_OWORD *)(a1 + 5312) = 0u;
  *(_OWORD *)(a1 + 5126) = 0u;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(_OWORD *)(a1 + 5080) = 0u;
  *(_OWORD *)(a1 + 5064) = 0u;
  *(_OWORD *)(a1 + 5048) = 0u;
  *(_OWORD *)(a1 + 5032) = 0u;
  *(_OWORD *)(a1 + 5016) = 0u;
  *(_OWORD *)(a1 + 5000) = 0u;
  *(_OWORD *)(a1 + 4984) = 0u;
  *(_OWORD *)(a1 + 4968) = 0u;
  *(_QWORD *)(a1 + 5336) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 5328) = 0;
  *(_QWORD *)(a1 + 5360) = 0;
  *(_OWORD *)(a1 + 5344) = 0u;
  *(_QWORD *)(a1 + 5368) = 0x3FF0000000000000;
  bzero((void *)(a1 + 1072), 0xC00uLL);
  return a1;
}

void sub_1011236C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100F5EA24(v1 + 24);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011236E0(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0)
    operator delete(*(void **)(a1 + 608));
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  return a1;
}

double sub_101123720(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 64) = _Q1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_WORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 827) = 0u;
  *(_QWORD *)(a1 + 472) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = _Q1;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 528) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 760) = 0;
  *(_WORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_QWORD *)(a1 + 904) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 395) = 0u;
  *(_OWORD *)(a1 + 262) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 694) = 0u;
  return result;
}

uint64_t sub_10112383C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE *v38;
  __int128 v39;
  __int128 v40;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_OWORD *)(a2 + 40);
  v11 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v11;
  *(_OWORD *)(a1 + 40) = v10;
  v12 = *(_OWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 89);
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 89) = v13;
  *(_OWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  sub_100F5F150((_QWORD *)(a1 + 112), *(const void **)(a2 + 112), *(_QWORD *)(a2 + 120), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3));
  v14 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v14;
  v15 = *(_OWORD *)(a2 + 152);
  v16 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v16;
  *(_OWORD *)(a1 + 152) = v15;
  v17 = *(_OWORD *)(a2 + 312);
  v19 = *(_OWORD *)(a2 + 264);
  v18 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v17;
  *(_OWORD *)(a1 + 264) = v19;
  *(_OWORD *)(a1 + 280) = v18;
  v20 = *(_OWORD *)(a2 + 200);
  v21 = *(_OWORD *)(a2 + 216);
  v22 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v22;
  *(_OWORD *)(a1 + 216) = v21;
  *(_OWORD *)(a1 + 200) = v20;
  if (*(char *)(a2 + 351) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 328), *(void **)(a2 + 328), *(_QWORD *)(a2 + 336));
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = v23;
  }
  memcpy((void *)(a1 + 352), (const void *)(a2 + 352), 0x118uLL);
  v24 = *(_OWORD *)(a2 + 632);
  v25 = *(_OWORD *)(a2 + 648);
  v26 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 664) = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 680) = v26;
  *(_OWORD *)(a1 + 632) = v24;
  *(_OWORD *)(a1 + 648) = v25;
  v27 = *(_OWORD *)(a2 + 696);
  v28 = *(_OWORD *)(a2 + 712);
  v29 = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 744) = v29;
  *(_OWORD *)(a1 + 696) = v27;
  *(_OWORD *)(a1 + 712) = v28;
  v30 = (_BYTE *)(a1 + 760);
  if (*(char *)(a2 + 783) < 0)
  {
    sub_100115CE4(v30, *(void **)(a2 + 760), *(_QWORD *)(a2 + 768));
  }
  else
  {
    v31 = *(_OWORD *)(a2 + 760);
    *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
    *(_OWORD *)v30 = v31;
  }
  memcpy((void *)(a1 + 784), (const void *)(a2 + 784), 0x120uLL);
  memcpy((void *)(a1 + 1072), (const void *)(a2 + 1072), 0xF00uLL);
  v32 = *(_OWORD *)(a2 + 4912);
  v33 = *(_OWORD *)(a2 + 4928);
  v34 = *(_OWORD *)(a2 + 4944);
  *(_OWORD *)(a1 + 4960) = *(_OWORD *)(a2 + 4960);
  *(_OWORD *)(a1 + 4944) = v34;
  *(_OWORD *)(a1 + 4928) = v33;
  *(_OWORD *)(a1 + 4912) = v32;
  v35 = *(_OWORD *)(a2 + 4976);
  v36 = *(_OWORD *)(a2 + 4992);
  v37 = *(_OWORD *)(a2 + 5008);
  *(_OWORD *)(a1 + 5024) = *(_OWORD *)(a2 + 5024);
  *(_OWORD *)(a1 + 5008) = v37;
  *(_OWORD *)(a1 + 4992) = v36;
  *(_OWORD *)(a1 + 4976) = v35;
  v38 = (_BYTE *)(a1 + 5040);
  if (*(char *)(a2 + 5063) < 0)
  {
    sub_100115CE4(v38, *(void **)(a2 + 5040), *(_QWORD *)(a2 + 5048));
  }
  else
  {
    v39 = *(_OWORD *)(a2 + 5040);
    *(_QWORD *)(a1 + 5056) = *(_QWORD *)(a2 + 5056);
    *(_OWORD *)v38 = v39;
  }
  memcpy((void *)(a1 + 5064), (const void *)(a2 + 5064), 0x118uLL);
  v40 = *(_OWORD *)(a2 + 5360);
  *(_OWORD *)(a1 + 5344) = *(_OWORD *)(a2 + 5344);
  *(_OWORD *)(a1 + 5360) = v40;
  return a1;
}

void sub_101123AD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1011236E0(v3);
  sub_100F5EA24(v2);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

BOOL sub_101123B2C(double *a1, uint64_t *a2, double *a3, double *a4, double a5, double a6)
{
  uint64_t v6;
  double *v7;
  unint64_t v8;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  _BOOL8 result;
  NSObject *v35;
  NSObject *v36;
  _BOOL4 v37;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  uint64_t v42;
  double v43;
  double v44[2];
  uint64_t v45;
  uint8_t buf[8];
  double v47[204];

  v6 = *a2;
  v7 = *(double **)(*a2 + 136);
  v8 = *(_QWORD *)(*a2 + 144) - (_QWORD)v7;
  *a3 = -1.0;
  *a4 = -1.0;
  if ((int)(v8 >> 4) > 1)
  {
    v14 = *v7;
    v15 = v7[1];
    *(double *)buf = 0.0;
    v47[0] = 0.0;
    v43 = 0.0;
    sub_10011E780(a1, (double *)buf, v47, &v43, a5, a6, 0.0, v14, v15, 0.0);
    v16 = 0;
    v17 = (v8 >> 4) - 1;
    v18 = 0.0;
    v19 = 0.0;
    while (1)
    {
      v20 = *(_QWORD *)(v6 + 136) + v16;
      v21 = *(double *)(v20 + 16);
      v22 = *(double *)(v20 + 24);
      v43 = 0.0;
      v44[0] = 0.0;
      v45 = 0;
      sub_10011E780(a1, &v43, v44, (double *)&v45, a5, a6, 0.0, v21, v22, 0.0);
      v24 = v43;
      v23 = v44[0];
      v25 = (*(double *)buf - v43) * (*(double *)buf - v43) + (v47[0] - v44[0]) * (v47[0] - v44[0]);
      v26 = 0.0 - *(double *)buf;
      if (v25 >= 0.001)
      {
        v28 = ((0.0 - v47[0]) * (v44[0] - v47[0]) + v26 * (v43 - *(double *)buf)) / v25;
        if (v28 < 0.0)
        {
          v30 = v26 * v26 + (0.0 - v47[0]) * (0.0 - v47[0]);
          v28 = 0.0;
          goto LABEL_11;
        }
        if (v28 > 1.0)
        {
          v30 = (0.0 - v43) * (0.0 - v43) + (0.0 - v44[0]) * (0.0 - v44[0]);
          v28 = 1.0;
          goto LABEL_11;
        }
        v27 = (0.0 - (*(double *)buf + (v43 - *(double *)buf) * v28))
            * (0.0 - (*(double *)buf + (v43 - *(double *)buf) * v28));
        v29 = 0.0 - (v47[0] + (v44[0] - v47[0]) * v28);
      }
      else
      {
        v27 = v26 * v26;
        v28 = 0.0;
        v29 = 0.0 - v47[0];
      }
      v30 = v27 + v29 * v29;
LABEL_11:
      v31 = sqrt(v25);
      v32 = sqrt(v30);
      if (*a3 < 0.0 || v32 < *a3)
      {
        *a3 = v32;
        v18 = v19 + v31 * v28;
      }
      v19 = v19 + v31;
      *(double *)buf = v24;
      v47[0] = v23;
      v16 += 16;
      if (!--v17)
      {
        v33 = v18 / v19;
        if (v19 < 0.001)
          v33 = 0.0;
        *a4 = v33;
        return *a3 < 0.03;
      }
    }
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2048);
  v35 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    LOWORD(v43) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", &v43, 2);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2048);
  v36 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#Warning CLMM, findClosestPointOnRoad returned false", buf, 2u);
  }
  v37 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v37)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2048);
    LOWORD(v43) = 0;
    LODWORD(v42) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "#Warning CLMM, findClosestPointOnRoad returned false", &v43, v42);
    v41 = (uint8_t *)v40;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::isCoordinateOnRoadVector(CLDistanceCalc &, const double, const double, CLMapRoadPtr, double &, double &)", "%s\n", v40);
    if (v41 != buf)
      free(v41);
    return 0;
  }
  return result;
}

uint64_t sub_101123FF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if (!sub_100F5C430(a2, (uint64_t)(v2 + 4)))
      {
        if (!sub_100F5C430((uint64_t)(v2 + 4), a2))
          return v4;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

_OWORD *sub_101124058(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v11;

  v6 = (void **)sub_1011240E8((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v9;
    *((_BYTE *)v7 + 56) = 0;
    sub_1000145B0(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_1011240E8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!sub_100F5C430(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_100F5C430(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_101124178(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v20[5];

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v20[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_10025B800(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v20[0] = v10;
  v20[1] = v11;
  v20[3] = &v10[56 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v11 + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = &v10[56 * v4];
  v16 = *(_OWORD *)(a2 + 16);
  v17 = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v15 + 6) = *(_QWORD *)(a2 + 48);
  *((_OWORD *)v15 + 1) = v16;
  *((_OWORD *)v15 + 2) = v17;
  v20[2] = v11 + 56;
  sub_1011242C4(a1, v20);
  v18 = a1[1];
  sub_101124330((uint64_t)v20);
  return v18;
}

void sub_1011242B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_101124330((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1011242C4(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 56);
    v2 -= 56;
    *(_OWORD *)(v4 - 56) = v5;
    v4 -= 56;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v6 = *(_OWORD *)(v2 + 16);
    v7 = *(_OWORD *)(v2 + 32);
    *(_QWORD *)(v4 + 48) = *(_QWORD *)(v2 + 48);
    *(_OWORD *)(v4 + 16) = v6;
    *(_OWORD *)(v4 + 32) = v7;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_101124330(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    sub_100261F44(i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10112437C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10112437C(a1, *a2);
    sub_10112437C(a1, a2[1]);
    sub_1011243C4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1011243C4(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 5087) < 0)
    operator delete(*(void **)(a1 + 5064));
  if (*(char *)(a1 + 807) < 0)
    operator delete(*(void **)(a1 + 784));
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 48);
  return sub_100261F44(a1 + 24);
}

_QWORD *sub_101124434(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_100F5C430((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_100F5C430(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

uint64_t *sub_1011244AC(uint64_t **a1, uint64_t a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (uint64_t **)sub_1011240E8((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x1538uLL);
    v9[1] = a1 + 1;
    sub_101124558((uint64_t)(v6 + 4), a3);
    v10 = 1;
    sub_1000145B0(a1, v11, v7, v6);
    v9[0] = 0;
    sub_1011247A8((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_101124558(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  v4 = (uint64_t)a2 + 24;
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  v5 = (_OWORD *)(a1 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 48) = a2[3];
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  v6 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 113) = *(__int128 *)((char *)a2 + 113);
  *(_OWORD *)(a1 + 104) = v8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  v9 = *((_QWORD *)a2 + 20);
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  *(_QWORD *)(a1 + 160) = v9;
  v10 = a2[11];
  v11 = a2[13];
  *(_OWORD *)(a1 + 192) = a2[12];
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 176) = v10;
  v12 = a2[19];
  v13 = a2[21];
  v14 = a2[18];
  *(_OWORD *)(a1 + 320) = a2[20];
  *(_OWORD *)(a1 + 336) = v13;
  *(_OWORD *)(a1 + 288) = v14;
  *(_OWORD *)(a1 + 304) = v12;
  v15 = a2[14];
  v16 = a2[15];
  v17 = a2[17];
  *(_OWORD *)(a1 + 256) = a2[16];
  *(_OWORD *)(a1 + 272) = v17;
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 240) = v16;
  v18 = a2[22];
  *(_QWORD *)(a1 + 368) = *((_QWORD *)a2 + 46);
  *(_OWORD *)(a1 + 352) = v18;
  *((_QWORD *)a2 + 44) = 0;
  *((_QWORD *)a2 + 45) = 0;
  *((_QWORD *)a2 + 46) = 0;
  memcpy((void *)(a1 + 376), (char *)a2 + 376, 0x118uLL);
  v19 = *(_OWORD *)(v4 + 648);
  v20 = *(_OWORD *)(v4 + 680);
  v21 = *(_OWORD *)(v4 + 632);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(v4 + 664);
  *(_OWORD *)(a1 + 704) = v20;
  *(_OWORD *)(a1 + 656) = v21;
  *(_OWORD *)(a1 + 672) = v19;
  v22 = *(_OWORD *)(v4 + 712);
  v23 = *(_OWORD *)(v4 + 744);
  v24 = *(_OWORD *)(v4 + 696);
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(v4 + 728);
  *(_OWORD *)(a1 + 768) = v23;
  *(_OWORD *)(a1 + 720) = v24;
  *(_OWORD *)(a1 + 736) = v22;
  v25 = *(_OWORD *)(v4 + 760);
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(v4 + 776);
  *(_OWORD *)(a1 + 784) = v25;
  *(_QWORD *)(v4 + 760) = 0;
  *(_QWORD *)(v4 + 776) = 0;
  *(_QWORD *)(v4 + 768) = 0;
  memcpy((void *)(a1 + 808), (const void *)(v4 + 784), 0x120uLL);
  memcpy((void *)(a1 + 1096), (const void *)(v4 + 1072), 0xF00uLL);
  v26 = *(_OWORD *)(v4 + 4928);
  v27 = *(_OWORD *)(v4 + 4944);
  v28 = *(_OWORD *)(v4 + 4960);
  v5[307] = *(_OWORD *)(v4 + 4912);
  v5[310] = v28;
  v5[309] = v27;
  v5[308] = v26;
  v29 = *(_OWORD *)(v4 + 4992);
  v30 = *(_OWORD *)(v4 + 5008);
  v31 = *(_OWORD *)(v4 + 5024);
  v5[311] = *(_OWORD *)(v4 + 4976);
  v5[314] = v31;
  v5[313] = v30;
  v5[312] = v29;
  v32 = *(_OWORD *)(v4 + 5040);
  *(_QWORD *)(a1 + 5080) = *(_QWORD *)(v4 + 5056);
  v5[315] = v32;
  *(_QWORD *)(v4 + 5040) = 0;
  *(_QWORD *)(v4 + 5056) = 0;
  *(_QWORD *)(v4 + 5048) = 0;
  memcpy((void *)(a1 + 5088), (const void *)(v4 + 5064), 0x118uLL);
  v33 = *(_OWORD *)(v4 + 5360);
  v5[334] = *(_OWORD *)(v4 + 5344);
  v5[335] = v33;
  return a1;
}

void sub_1011247A8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1011243C4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_1011247EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249)
    sub_100259694();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924)
    v6 = 0x249249249249249;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_1002A7588((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[112 * v3];
  v13 = &v7[112 * v6];
  sub_101124910((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 112;
  sub_1011249B0(a1, &v10);
  v8 = a1[1];
  sub_101124B74(&v10);
  return v8;
}

void sub_1011248FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_101124B74((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_101124910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_OWORD *)(a3 + 16);
  v7 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  v8 = *(_OWORD *)(a3 + 56);
  v9 = *(_OWORD *)(a3 + 65);
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 65) = v9;
  *(_OWORD *)(a2 + 56) = v8;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return sub_100F5F150((_QWORD *)(a2 + 88), *(const void **)(a3 + 88), *(_QWORD *)(a3 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a3 + 96) - *(_QWORD *)(a3 + 88)) >> 3));
}

void sub_10112499C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011249B0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_101124A24((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_101124A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 112);
      a3 -= 112;
      *(_OWORD *)(v7 - 112) = v8;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v9 = *(_OWORD *)(a3 + 16);
      v10 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v7 - 64) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(v7 - 96) = v9;
      *(_OWORD *)(v7 - 80) = v10;
      v11 = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(v7 - 47) = *(_OWORD *)(a3 + 65);
      *(_OWORD *)(v7 - 56) = v11;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 88);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 104);
      *(_QWORD *)(a3 + 88) = 0;
      *(_QWORD *)(a3 + 96) = 0;
      *(_QWORD *)(a3 + 104) = 0;
      v7 = *((_QWORD *)&v17 + 1) - 112;
      *((_QWORD *)&v17 + 1) -= 112;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_101124AF0((uint64_t)v14);
  return v12;
}

uint64_t sub_101124AF0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_101124B24((uint64_t *)a1);
  return a1;
}

uint64_t *sub_101124B24(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_10083CCF0(v3, v1);
      v1 += 112;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_101124B74(void **a1)
{
  sub_101124BA4((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_101124BA4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 112;
      result = sub_10083CCF0(v4, v1 - 112);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_101124BE8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = a2;
  v8 = *(void **)a1;
  if (0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_101124E30((void **)a1);
    if (a4 > 0xF83E0F83E0F83ELL)
      sub_100259694();
    v9 = 0x1F07C1F07C1F07C2 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if ((unint64_t)(0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x7C1F07C1F07C1FLL)
      v10 = 0xF83E0F83E0F83ELL;
    else
      v10 = v9;
    result = (uint64_t)sub_101124E98((_QWORD *)a1, v10);
    v12 = *(_QWORD *)(a1 + 8);
    while (v6 != a3)
    {
      *(_OWORD *)v12 = *(_OWORD *)v6;
      v13 = *(_OWORD *)(v6 + 16);
      v14 = *(_OWORD *)(v6 + 32);
      v15 = *(_OWORD *)(v6 + 64);
      *(_OWORD *)(v12 + 48) = *(_OWORD *)(v6 + 48);
      *(_OWORD *)(v12 + 64) = v15;
      *(_OWORD *)(v12 + 16) = v13;
      *(_OWORD *)(v12 + 32) = v14;
      v16 = *(_OWORD *)(v6 + 80);
      v17 = *(_OWORD *)(v6 + 96);
      v18 = *(_OWORD *)(v6 + 128);
      *(_OWORD *)(v12 + 112) = *(_OWORD *)(v6 + 112);
      *(_OWORD *)(v12 + 128) = v18;
      *(_OWORD *)(v12 + 80) = v16;
      *(_OWORD *)(v12 + 96) = v17;
      v19 = *(_OWORD *)(v6 + 144);
      v20 = *(_OWORD *)(v6 + 160);
      v21 = *(_OWORD *)(v6 + 192);
      *(_OWORD *)(v12 + 176) = *(_OWORD *)(v6 + 176);
      *(_OWORD *)(v12 + 192) = v21;
      *(_OWORD *)(v12 + 144) = v19;
      *(_OWORD *)(v12 + 160) = v20;
      v22 = *(_QWORD *)(v6 + 216);
      *(_QWORD *)(v12 + 208) = *(_QWORD *)(v6 + 208);
      *(_QWORD *)(v12 + 216) = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = *(_OWORD *)(v6 + 224);
      v26 = *(_OWORD *)(v6 + 240);
      *(_QWORD *)(v12 + 256) = *(_QWORD *)(v6 + 256);
      *(_OWORD *)(v12 + 224) = v25;
      *(_OWORD *)(v12 + 240) = v26;
      v6 += 264;
      v12 += 264;
    }
LABEL_21:
    *(_QWORD *)(a1 + 8) = v12;
    return result;
  }
  if (0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3) < a4)
  {
    v27 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3);
    result = sub_101124EEC(a2, v27, (uint64_t)v8);
    v12 = *(_QWORD *)(a1 + 8);
    while (v27 != a3)
    {
      *(_OWORD *)v12 = *(_OWORD *)v27;
      v28 = *(_OWORD *)(v27 + 16);
      v29 = *(_OWORD *)(v27 + 32);
      v30 = *(_OWORD *)(v27 + 64);
      *(_OWORD *)(v12 + 48) = *(_OWORD *)(v27 + 48);
      *(_OWORD *)(v12 + 64) = v30;
      *(_OWORD *)(v12 + 16) = v28;
      *(_OWORD *)(v12 + 32) = v29;
      v31 = *(_OWORD *)(v27 + 80);
      v32 = *(_OWORD *)(v27 + 96);
      v33 = *(_OWORD *)(v27 + 128);
      *(_OWORD *)(v12 + 112) = *(_OWORD *)(v27 + 112);
      *(_OWORD *)(v12 + 128) = v33;
      *(_OWORD *)(v12 + 80) = v31;
      *(_OWORD *)(v12 + 96) = v32;
      v34 = *(_OWORD *)(v27 + 144);
      v35 = *(_OWORD *)(v27 + 160);
      v36 = *(_OWORD *)(v27 + 192);
      *(_OWORD *)(v12 + 176) = *(_OWORD *)(v27 + 176);
      *(_OWORD *)(v12 + 192) = v36;
      *(_OWORD *)(v12 + 144) = v34;
      *(_OWORD *)(v12 + 160) = v35;
      v37 = *(_QWORD *)(v27 + 216);
      *(_QWORD *)(v12 + 208) = *(_QWORD *)(v27 + 208);
      *(_QWORD *)(v12 + 216) = v37;
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = *(_OWORD *)(v27 + 224);
      v41 = *(_OWORD *)(v27 + 240);
      *(_QWORD *)(v12 + 256) = *(_QWORD *)(v27 + 256);
      *(_OWORD *)(v12 + 224) = v40;
      *(_OWORD *)(v12 + 240) = v41;
      v27 += 264;
      v12 += 264;
    }
    goto LABEL_21;
  }
  result = sub_101124EEC(a2, a3, (uint64_t)v8);
  v43 = v42;
  v44 = *(_QWORD *)(a1 + 8);
  if (v44 != v42)
  {
    do
    {
      v45 = v44 - 264;
      result = sub_100261F44(v44 - 56);
      v44 = v45;
    }
    while (v45 != v43);
  }
  *(_QWORD *)(a1 + 8) = v43;
  return result;
}

void sub_101124E30(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 264;
        sub_100261F44((uint64_t)(v3 - 56));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_101124E98(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xF83E0F83E0F83FLL)
    sub_100259694();
  result = (char *)sub_101124F94((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[264 * v4];
  return result;
}

uint64_t sub_101124EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *(_OWORD *)a3 = *(_OWORD *)v4;
    v6 = *(_OWORD *)(v4 + 16);
    v7 = *(_OWORD *)(v4 + 32);
    v8 = *(_OWORD *)(v4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(v4 + 48);
    *(_OWORD *)(a3 + 64) = v8;
    *(_OWORD *)(a3 + 16) = v6;
    *(_OWORD *)(a3 + 32) = v7;
    v9 = *(_OWORD *)(v4 + 80);
    v10 = *(_OWORD *)(v4 + 96);
    v11 = *(_OWORD *)(v4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(v4 + 112);
    *(_OWORD *)(a3 + 128) = v11;
    *(_OWORD *)(a3 + 80) = v9;
    *(_OWORD *)(a3 + 96) = v10;
    v12 = *(_OWORD *)(v4 + 144);
    v13 = *(_OWORD *)(v4 + 160);
    v14 = *(_OWORD *)(v4 + 192);
    *(_OWORD *)(a3 + 176) = *(_OWORD *)(v4 + 176);
    *(_OWORD *)(a3 + 192) = v14;
    *(_OWORD *)(a3 + 144) = v12;
    *(_OWORD *)(a3 + 160) = v13;
    sub_100349198((_QWORD *)(a3 + 208), (uint64_t *)(v4 + 208));
    v15 = *(_QWORD *)(v4 + 256);
    v16 = *(_OWORD *)(v4 + 240);
    *(_OWORD *)(a3 + 224) = *(_OWORD *)(v4 + 224);
    *(_OWORD *)(a3 + 240) = v16;
    *(_QWORD *)(a3 + 256) = v15;
    a3 += 264;
    v4 += 264;
  }
  while (v4 != v5);
  return v5;
}

void *sub_101124F94(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF83E0F83E0F83FLL)
    sub_10025955C();
  return operator new(264 * a2);
}

uint64_t sub_101124FDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v29[5];

  v3 = *a1;
  v4 = 0xF83E0F83E0F83E1 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xF83E0F83E0F83ELL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xF83E0F83E0F83E1 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x7C1F07C1F07C1FLL)
    v9 = 0xF83E0F83E0F83ELL;
  else
    v9 = v5;
  v29[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_101124F94(v7, v9);
  else
    v10 = 0;
  v11 = &v10[264 * v4];
  v29[0] = v10;
  v29[1] = v11;
  v29[3] = &v10[264 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v11 + 4) = v14;
  *((_OWORD *)v11 + 2) = v13;
  v15 = *(_OWORD *)(a2 + 128);
  v17 = *(_OWORD *)(a2 + 80);
  v16 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v11 + 8) = v15;
  *((_OWORD *)v11 + 5) = v17;
  *((_OWORD *)v11 + 6) = v16;
  v18 = *(_OWORD *)(a2 + 192);
  v20 = *(_OWORD *)(a2 + 144);
  v19 = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v11 + 11) = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v11 + 12) = v18;
  *((_OWORD *)v11 + 9) = v20;
  *((_OWORD *)v11 + 10) = v19;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 26) = *(_QWORD *)(a2 + 208);
  v21 = *(_QWORD *)(a2 + 216);
  *((_QWORD *)v11 + 27) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = &v10[264 * v4];
  v25 = *(_OWORD *)(a2 + 224);
  v26 = *(_OWORD *)(a2 + 240);
  *((_QWORD *)v24 + 32) = *(_QWORD *)(a2 + 256);
  *((_OWORD *)v24 + 14) = v25;
  *((_OWORD *)v24 + 15) = v26;
  v29[2] = v11 + 264;
  sub_101125160(a1, v29);
  v27 = a1[1];
  sub_101125220((uint64_t)v29);
  return v27;
}

void sub_10112514C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_101125220((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_101125160(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 != *result)
  {
    v5 = v4 - 56;
    v6 = v3 - 56;
    do
    {
      v7 = v6 - 208;
      *(_OWORD *)(v5 - 208) = *(_OWORD *)(v6 - 208);
      v8 = *(_OWORD *)(v6 - 192);
      v9 = *(_OWORD *)(v6 - 176);
      v10 = *(_OWORD *)(v6 - 144);
      *(_OWORD *)(v5 - 160) = *(_OWORD *)(v6 - 160);
      *(_OWORD *)(v5 - 144) = v10;
      *(_OWORD *)(v5 - 192) = v8;
      *(_OWORD *)(v5 - 176) = v9;
      v11 = *(_OWORD *)(v6 - 128);
      v12 = *(_OWORD *)(v6 - 112);
      v13 = *(_OWORD *)(v6 - 80);
      *(_OWORD *)(v5 - 96) = *(_OWORD *)(v6 - 96);
      *(_OWORD *)(v5 - 80) = v13;
      *(_OWORD *)(v5 - 128) = v11;
      *(_OWORD *)(v5 - 112) = v12;
      v14 = *(_OWORD *)(v6 - 64);
      v15 = *(_OWORD *)(v6 - 48);
      v16 = *(_OWORD *)(v6 - 16);
      *(_OWORD *)(v5 - 32) = *(_OWORD *)(v6 - 32);
      *(_OWORD *)(v5 - 16) = v16;
      *(_OWORD *)(v5 - 64) = v14;
      *(_OWORD *)(v5 - 48) = v15;
      *(_OWORD *)v5 = *(_OWORD *)v6;
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      v17 = *(_OWORD *)(v6 + 16);
      v18 = *(_OWORD *)(v6 + 32);
      *(_QWORD *)(v5 + 48) = *(_QWORD *)(v6 + 48);
      *(_OWORD *)(v5 + 16) = v17;
      *(_OWORD *)(v5 + 32) = v18;
      v5 -= 264;
      v6 -= 264;
    }
    while (v7 != v2);
    v4 = v5 + 56;
  }
  a2[1] = v4;
  v19 = *result;
  *result = v4;
  a2[1] = v19;
  v20 = result[1];
  result[1] = a2[2];
  a2[2] = v20;
  v21 = result[2];
  result[2] = a2[3];
  a2[3] = v21;
  *a2 = a2[1];
  return result;
}

uint64_t sub_101125220(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 264;
    sub_100261F44(i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_101125270(uint64_t a1@<X8>)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (qword_10229FF30 != -1)
    dispatch_once(&qword_10229FF30, &stru_1021A2068);
  v1 = qword_10229FF38;
  if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "GaitEventsModel: Tried to use GaitEvents CoreML Model without matching CoreMotionModels framework", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_1021A2068);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "GaitEventsModel: Tried to use GaitEvents CoreML Model without matching CoreMotionModels framework", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "CLGaitEvents::ModelOutput CLGaitEvents::CLGaitEventsClassifier::getPredictions() const", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

__n128 sub_101125400@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  return result;
}

void sub_10112541C(id a1)
{
  qword_10229FF38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "RunningForm");
}

uint64_t sub_101125448()
{
  _QWORD block[4];
  char v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1011254BC;
  block[3] = &unk_102146CB8;
  v2 = 0;
  if (qword_10230C8B0 != -1)
    dispatch_once(&qword_10230C8B0, block);
  return qword_102311CA0;
}

void sub_1011254BC()
{
  operator new();
}

void sub_101125504()
{
  operator delete();
}

uint64_t sub_101125528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1009DCDF4();
  sub_100681294(v4 + 320, a2);
  sub_101412C28(a1 + 776, a2);
  sub_1011E9EC0(a1 + 1200, a2);
  sub_100B63848(a1 + 1696, a2);
  return a1;
}

void sub_10112559C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1011E9EC4(v4);
  sub_101412C2C(v3);
  sub_100681298(v2);
  sub_1009DCDF8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011255E0(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v4;
  uint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_10230C8D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10230C8D0))
  {
    v5 = 0;
    v4 = xmmword_101C42318;
    sub_101109778(qword_10230C8B8, &v4, 1uLL);
    __cxa_atexit((void (*)(void *))sub_1004A6E3C, qword_10230C8B8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230C8D0);
  }
  sub_1009DCE50(a1, (uint64_t)qword_10230C8B8);
  sub_100681320(a1 + 320, (uint64_t)qword_10230C8B8);
  sub_101412C84(a1 + 776, (uint64_t)qword_10230C8B8);
  return sub_1011E9F1C(a1 + 1200, (uint64_t)qword_10230C8B8);
}

void sub_1011256E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230C8D0);
  _Unwind_Resume(a1);
}

uint64_t sub_101125704(_QWORD *a1)
{
  sub_101139070(a1 + 9);
  sub_101139070(a1 + 49);
  sub_101139070(a1 + 106);
  return sub_101139070(a1 + 159);
}

uint64_t sub_10112573C(uint64_t a1, uint64_t a2)
{
  return sub_101125744(a1 + 320, a2);
}

uint64_t sub_101125744(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  double v19[3];
  __int16 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _QWORD *v28;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  *(_QWORD *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v20 = 256;
  v19[0] = *(double *)(a2 + 24);
  if (sub_100013184(v6, v19))
  {
    if (sub_10008950C(v6))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 216);
      if (v13 > *(int *)(a1 + 368))
      {
        ++*(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 216) = v13 - 1;
        sub_1006B5478(a1 + 176, 1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A20A8);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021A20A8);
          v18[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Maximum number of entries exceeded, throwing out oldest entry.", v18, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v7 = sub_101126C40(v12, a2);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A20A8);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A20A8);
    }
    v10 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v11 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 24))(v5, v7);
}

void sub_101125B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101125B34(uint64_t a1, _QWORD *a2)
{
  return sub_100681460(a1 + 320, a2);
}

uint64_t sub_101125B3C(uint64_t a1, _QWORD *a2, int a3)
{
  return sub_100681A48(a1 + 320, a2, a3);
}

BOOL sub_101125B44(uint64_t a1, const unsigned __int8 *a2, _OWORD *a3)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_100681E54(a1 + 320, a2, &v13);
  v4 = v13;
  v5 = v14;
  if (v13 != v14)
  {
    *a3 = *v13;
    v6 = v4[1];
    v7 = v4[2];
    v8 = v4[4];
    a3[3] = v4[3];
    a3[4] = v8;
    a3[1] = v6;
    a3[2] = v7;
    v9 = v4[5];
    v10 = v4[6];
    v11 = v4[8];
    a3[7] = v4[7];
    a3[8] = v11;
    a3[5] = v9;
    a3[6] = v10;
LABEL_4:
    v14 = v4;
    operator delete(v4);
    return v4 != v5;
  }
  if (v13)
    goto LABEL_4;
  return v4 != v5;
}

void sub_101125BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101125BF0(uint64_t a1, _OWORD *a2)
{
  _OWORD *v3;
  BOOL v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  v4 = sub_100681A48(a1 + 320, &v13, 1) == 100;
  v3 = v13;
  v4 = !v4 || v13 == v14;
  v5 = !v4;
  if (v4)
  {
    if (!v13)
      return 0;
  }
  else
  {
    *a2 = *v13;
    v6 = v3[1];
    v7 = v3[2];
    v8 = v3[4];
    a2[3] = v3[3];
    a2[4] = v8;
    a2[1] = v6;
    a2[2] = v7;
    v9 = v3[5];
    v10 = v3[6];
    v11 = v3[8];
    a2[7] = v3[7];
    a2[8] = v11;
    a2[5] = v9;
    a2[6] = v10;
  }
  v14 = v3;
  operator delete(v3);
  return v5;
}

void sub_101125C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101125CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  v3 = a1 + 776;
  sub_10141346C(a1 + 776, (const unsigned __int8 *)(a2 + 16), (char **)&__p);
  if (__p == v5)
    sub_100423B04(v3, a2);
  else
    sub_101413290(v3, a2, *(_QWORD *)__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_101125D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101125D40(uint64_t a1)
{
  return sub_1014137E0(a1 + 776);
}

BOOL sub_101125D48(uint64_t a1, const unsigned __int8 *a2, _OWORD *a3)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char *v10;
  char *v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_10141346C(a1 + 776, a2, &v10);
  v4 = v10;
  v5 = v11;
  if (v10 != v11)
  {
    *a3 = *(_OWORD *)v10;
    v6 = *((_OWORD *)v4 + 1);
    v7 = *((_OWORD *)v4 + 2);
    v8 = *((_OWORD *)v4 + 4);
    a3[3] = *((_OWORD *)v4 + 3);
    a3[4] = v8;
    a3[1] = v6;
    a3[2] = v7;
LABEL_4:
    v11 = v4;
    operator delete(v4);
    return v4 != v5;
  }
  if (v10)
    goto LABEL_4;
  return v4 != v5;
}

void sub_101125DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_101125DE4(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  sub_10141346C(a1 + 776, a2, (char **)a3);
  return *(_QWORD *)a3 != *(_QWORD *)(a3 + 8);
}

uint64_t sub_101125E14(uint64_t a1, _QWORD *a2)
{
  return sub_1014138CC(a1 + 776, a2);
}

uint64_t sub_101125E1C(uint64_t a1, _QWORD *a2)
{
  return sub_101413C4C(a1 + 776, a2);
}

uint64_t sub_101125E24(uint64_t a1, uint64_t a2)
{
  return sub_10041B300((_QWORD *)(a1 + 1200), a2, 0);
}

uint64_t sub_101125E30(uint64_t a1, const unsigned __int8 *a2)
{
  return sub_1011EB79C(a1 + 1200, a2);
}

BOOL sub_101125E38(uint64_t a1, const unsigned __int8 *a2, _QWORD *a3)
{
  a3[1] = *a3;
  return sub_1011EB338(a1 + 1200, a2, a3) != 109;
}

uint64_t sub_101125E60(uint64_t a1, _QWORD *a2)
{
  return sub_1011EA628(a1 + 1200, a2);
}

uint64_t sub_101125E68(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_1011EAA70(a1 + 1200, a2, a3);
}

BOOL sub_101125E70(uint64_t a1, _QWORD *a2)
{
  return sub_1011EAED4(a1 + 1200, a2) != 109;
}

void sub_101125E90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  sqlite3_int64 v8;
  int64x2_t v9;
  uint64_t v10;
  uint8_t buf[1640];

  v8 = 0;
  v9 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v10 = 0;
  v3 = a1 + 1696;
  if (sub_10051DBC4((_QWORD *)(a1 + 1696), (uint64_t)&v8))
  {
    *(_QWORD *)(a2 + 8) = v9.i64[0];
    if ((sub_100B639AC(v3, a2, v8) & 1) != 0)
      return;
  }
  else if ((sub_100B638A4(v3) & 1) != 0)
  {
    return;
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_1021A2088);
  v4 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unexpected failure attempting to save VO2MaxCloudKitSyncEngineMetadata record", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021A2088);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 17, "Unexpected failure attempting to save VO2MaxCloudKitSyncEngineMetadata record", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "void CLVO2MaxOutputStore::addCloudKitSyncEngineMetadata(VO2MaxCloudKitSyncEngineMetadata &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

BOOL sub_101126070(uint64_t a1, uint64_t a2)
{
  return sub_10051DBC4((_QWORD *)(a1 + 1696), a2);
}

uint64_t sub_101126078(uint64_t a1)
{
  return sub_101139070((_QWORD *)(a1 + 1768));
}

BOOL sub_101126080(uint64_t a1, const unsigned __int8 *a2, void *a3)
{
  id v6;
  uint64_t v7;
  _BOOL8 v8;
  id v9;
  char *v10;
  char *v11;
  int v12;
  void *v13;
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;

  v6 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2);
  objc_msgSend(a3, "setSessionId:", objc_msgSend(v6, "UUIDString"));

  v21 = 0;
  v22 = 0;
  v23 = 0;
  v7 = sub_10141346C(a1 + 776, a2, (char **)&v21);
  if ((_DWORD)v7 == 109)
  {
    v8 = 0;
    goto LABEL_18;
  }
  if (v21 != v22)
    objc_msgSend(a3, "setSessionAttributes:", sub_101126244(v7, (uint64_t)v21));
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v9 = (id)sub_1011EB338(a1 + 1200, a2, &v18);
  if ((_DWORD)v9 != 109)
  {
    v10 = (char *)v18;
    v11 = v19;
    while (v10 != v11)
    {
      v9 = objc_msgSend(a3, "addSummaries:", sub_1011262BC((uint64_t)v9, (uint64_t)v10));
      v10 += 184;
    }
    __p = 0;
    v16 = 0;
    v17 = 0;
    v12 = sub_100681E54(a1 + 320, a2, &__p);
    v8 = v12 != 109;
    if (v12 != 109)
    {
      v13 = __p;
      if (__p == v16)
        goto LABEL_14;
      objc_msgSend(a3, "setEstimate:", sub_1011263E8((uint64_t)__p, (uint64_t)__p));
    }
    v13 = __p;
LABEL_14:
    if (v13)
    {
      v16 = v13;
      operator delete(v13);
    }
    goto LABEL_16;
  }
  v8 = 0;
LABEL_16:
  if (v18)
  {
    v19 = (char *)v18;
    operator delete(v18);
  }
LABEL_18:
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  return v8;
}

void sub_1011261F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

CLCKVO2MaxSessionAttributes *sub_101126244(uint64_t a1, uint64_t a2)
{
  CLCKVO2MaxSessionAttributes *v3;

  v3 = objc_alloc_init(CLCKVO2MaxSessionAttributes);
  -[CLCKVO2MaxSessionAttributes setStartTime:](v3, "setStartTime:", *(double *)(a2 + 8));
  -[CLCKVO2MaxSessionAttributes setMeanMaxMets:](v3, "setMeanMaxMets:", *(double *)(a2 + 32));
  -[CLCKVO2MaxSessionAttributes setPrior:](v3, "setPrior:", *(double *)(a2 + 40));
  -[CLCKVO2MaxSessionAttributes setHardwareType:](v3, "setHardwareType:", *(unsigned int *)(a2 + 48));
  -[CLCKVO2MaxSessionAttributes setBetaBlockerUse:](v3, "setBetaBlockerUse:", *(unsigned __int8 *)(a2 + 52));
  -[CLCKVO2MaxSessionAttributes setAlgorithmVersion:](v3, "setAlgorithmVersion:", *(unsigned int *)(a2 + 56));
  return v3;
}

CLCKVO2MaxSummary *sub_1011262BC(uint64_t a1, uint64_t a2)
{
  CLCKVO2MaxSummary *v3;

  v3 = objc_alloc_init(CLCKVO2MaxSummary);
  -[CLCKVO2MaxSummary setStartTime:](v3, "setStartTime:", *(double *)(a2 + 8));
  -[CLCKVO2MaxSummary setWorkoutType:](v3, "setWorkoutType:", *(unsigned int *)(a2 + 16));
  -[CLCKVO2MaxSummary setDurationInSeconds:](v3, "setDurationInSeconds:", *(double *)(a2 + 40));
  -[CLCKVO2MaxSummary setPointCount:](v3, "setPointCount:", *(_QWORD *)(a2 + 48));
  -[CLCKVO2MaxSummary setHrMax:](v3, "setHrMax:", *(double *)(a2 + 64));
  -[CLCKVO2MaxSummary setHrMin:](v3, "setHrMin:", *(double *)(a2 + 56));
  -[CLCKVO2MaxSummary setHrMean:](v3, "setHrMean:", *(double *)(a2 + 72));
  -[CLCKVO2MaxSummary setHrConfidenceMean:](v3, "setHrConfidenceMean:", *(double *)(a2 + 80));
  -[CLCKVO2MaxSummary setHrCadenceAgreementMean:](v3, "setHrCadenceAgreementMean:", *(double *)(a2 + 88));
  -[CLCKVO2MaxSummary setVo2Mean:](v3, "setVo2Mean:", *(double *)(a2 + 96));
  -[CLCKVO2MaxSummary setSpeedMean:](v3, "setSpeedMean:", *(double *)(a2 + 104));
  -[CLCKVO2MaxSummary setGradeMean:](v3, "setGradeMean:", *(double *)(a2 + 112));
  -[CLCKVO2MaxSummary setCadenceMean:](v3, "setCadenceMean:", *(double *)(a2 + 120));
  -[CLCKVO2MaxSummary setHrVariance:](v3, "setHrVariance:", *(double *)(a2 + 128));
  -[CLCKVO2MaxSummary setHrConfidenceVariance:](v3, "setHrConfidenceVariance:", *(double *)(a2 + 136));
  -[CLCKVO2MaxSummary setHrCadenceAgreementVariance:](v3, "setHrCadenceAgreementVariance:", *(double *)(a2 + 144));
  -[CLCKVO2MaxSummary setVo2Variance:](v3, "setVo2Variance:", *(double *)(a2 + 152));
  -[CLCKVO2MaxSummary setSpeedVariance:](v3, "setSpeedVariance:", *(double *)(a2 + 160));
  -[CLCKVO2MaxSummary setGradeVariance:](v3, "setGradeVariance:", *(double *)(a2 + 168));
  -[CLCKVO2MaxSummary setVo2MaxModelSource:](v3, "setVo2MaxModelSource:", *(unsigned int *)(a2 + 176));
  -[CLCKVO2MaxSummary setSessionType:](v3, "setSessionType:", *(unsigned int *)(a2 + 180));
  return v3;
}

CLCKVO2MaxEstimate *sub_1011263E8(uint64_t a1, uint64_t a2)
{
  CLCKVO2MaxEstimate *v3;

  v3 = objc_alloc_init(CLCKVO2MaxEstimate);
  -[CLCKVO2MaxEstimate setStartTime:](v3, "setStartTime:", *(double *)(a2 + 24));
  -[CLCKVO2MaxEstimate setEstimatedVo2Max:](v3, "setEstimatedVo2Max:", *(double *)(a2 + 32));
  -[CLCKVO2MaxEstimate setWorkoutType:](v3, "setWorkoutType:", *(unsigned int *)(a2 + 40));
  -[CLCKVO2MaxEstimate setDurationInSeconds:](v3, "setDurationInSeconds:", *(double *)(a2 + 48));
  -[CLCKVO2MaxEstimate setHrMax:](v3, "setHrMax:", *(double *)(a2 + 56));
  -[CLCKVO2MaxEstimate setHrMin:](v3, "setHrMin:", *(double *)(a2 + 64));
  -[CLCKVO2MaxEstimate setVariance:](v3, "setVariance:", *(double *)(a2 + 88));
  -[CLCKVO2MaxEstimate setFilteredVo2Max:](v3, "setFilteredVo2Max:", *(double *)(a2 + 96));
  -[CLCKVO2MaxEstimate setSessionType:](v3, "setSessionType:", *(unsigned int *)(a2 + 104));
  -[CLCKVO2MaxEstimate setEligibleForHealthKit:](v3, "setEligibleForHealthKit:", *(unsigned __int8 *)(a2 + 108));
  -[CLCKVO2MaxEstimate setEligibleForCalorimetry:](v3, "setEligibleForCalorimetry:", *(unsigned __int8 *)(a2 + 109));
  -[CLCKVO2MaxEstimate setNumWorkoutsContrToEstimate:](v3, "setNumWorkoutsContrToEstimate:", *(unsigned int *)(a2 + 112));
  -[CLCKVO2MaxEstimate setEstimatedHRResponseParam:](v3, "setEstimatedHRResponseParam:", *(double *)(a2 + 120));
  -[CLCKVO2MaxEstimate setEstimatedHRRecoveryParam:](v3, "setEstimatedHRRecoveryParam:", *(double *)(a2 + 128));
  -[CLCKVO2MaxEstimate setSessionVo2Max:](v3, "setSessionVo2Max:", *(double *)(a2 + 136));
  return v3;
}

uint64_t sub_1011264CC(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  void *__p;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[24];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[4];
  __int128 v26;
  _QWORD v27[2];

  v6 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", objc_msgSend(a2, "sessionId"));
  v27[0] = 0;
  v27[1] = 0;
  objc_msgSend(v6, "getUUIDBytes:", v27);

  *((_QWORD *)&v26 + 1) = 0;
  v8 = sub_10112662C(v7, a2, (uint64_t)v25);
  *(_QWORD *)&v26 = a3;
  __p = 0;
  v13 = 0;
  v14 = 0;
  v9 = sub_1011266B8((uint64_t)v8, a2, &__p);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  sub_101126AE4((uint64_t)v9, a2, (uint64_t)v20);
  v17 = v25[2];
  v18 = v25[3];
  v19 = v26;
  v15 = v25[0];
  v16 = v25[1];
  v10 = sub_101413FE8(a1 + 776, (const unsigned __int8 *)v27);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_101126604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10112662C(uint64_t a1, void *a2, uint64_t a3)
{
  id result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = objc_msgSend(a2, "hasSessionAttributes");
  if ((_DWORD)result)
  {
    objc_msgSend(objc_msgSend(a2, "sessionAttributes"), "startTime");
    *(_QWORD *)(a3 + 8) = v6;
    objc_msgSend(objc_msgSend(a2, "sessionAttributes"), "meanMaxMets");
    *(_QWORD *)(a3 + 32) = v7;
    objc_msgSend(objc_msgSend(a2, "sessionAttributes"), "prior");
    *(_QWORD *)(a3 + 40) = v8;
    *(_DWORD *)(a3 + 48) = objc_msgSend(objc_msgSend(a2, "sessionAttributes"), "hardwareType");
    *(_BYTE *)(a3 + 52) = objc_msgSend(objc_msgSend(a2, "sessionAttributes"), "betaBlockerUse");
    result = objc_msgSend(objc_msgSend(a2, "sessionAttributes"), "algorithmVersion");
    *(_DWORD *)(a3 + 56) = (_DWORD)result;
  }
  return result;
}

id sub_1011266B8(uint64_t a1, void *a2, void **a3)
{
  id v4;
  id result;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  signed int v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[128];

  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v4 = objc_msgSend(a2, "summaries");
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v71, v75, 16);
  v6 = result;
  if (result)
  {
    v7 = *(_QWORD *)v72;
    v61 = (uint64_t)(a3 + 2);
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v72 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * (_QWORD)v8);
        objc_msgSend(v9, "startTime", v61);
        v70 = v10;
        v11 = objc_msgSend(v9, "workoutType");
        objc_msgSend(v9, "durationInSeconds");
        v69 = v12;
        v13 = objc_msgSend(v9, "pointCount");
        objc_msgSend(v9, "hrMax");
        v68 = v14;
        objc_msgSend(v9, "hrMin");
        v67 = v15;
        objc_msgSend(v9, "hrMean");
        v66 = v16;
        objc_msgSend(v9, "hrConfidenceMean");
        v65 = v17;
        objc_msgSend(v9, "hrCadenceAgreementMean");
        v64 = v18;
        objc_msgSend(v9, "vo2Mean");
        v63 = v19;
        objc_msgSend(v9, "speedMean");
        v62 = v20;
        objc_msgSend(v9, "gradeMean");
        v22 = v21;
        objc_msgSend(v9, "cadenceMean");
        v24 = v23;
        objc_msgSend(v9, "hrVariance");
        v26 = v25;
        objc_msgSend(v9, "hrConfidenceVariance");
        v28 = v27;
        objc_msgSend(v9, "hrCadenceAgreementVariance");
        v30 = v29;
        objc_msgSend(v9, "vo2Variance");
        v32 = v31;
        objc_msgSend(v9, "speedVariance");
        v34 = v33;
        objc_msgSend(v9, "gradeVariance");
        v36 = v35;
        v37 = objc_msgSend(v9, "vo2MaxModelSource");
        v38 = objc_msgSend(v9, "sessionType");
        v39 = v38;
        v40 = (char *)a3[1];
        v41 = (char *)a3[2];
        if (v40 >= v41)
        {
          v43 = 0xD37A6F4DE9BD37A7 * ((v40 - (_BYTE *)*a3) >> 3);
          v44 = v43 + 1;
          if (v43 + 1 > 0x1642C8590B21642)
            sub_100259694();
          v45 = 0xD37A6F4DE9BD37A7 * ((v41 - (_BYTE *)*a3) >> 3);
          if (2 * v45 > v44)
            v44 = 2 * v45;
          if (v45 >= 0xB21642C8590B21)
            v46 = 0x1642C8590B21642;
          else
            v46 = v44;
          if (v46)
            v47 = (char *)sub_10055ADA8(v61, v46);
          else
            v47 = 0;
          v48 = &v47[184 * v43];
          *(_QWORD *)v48 = 0;
          *((_QWORD *)v48 + 1) = v70;
          *((_QWORD *)v48 + 2) = v11;
          *((_QWORD *)v48 + 5) = v69;
          *((_QWORD *)v48 + 6) = v13;
          *((_QWORD *)v48 + 7) = v67;
          *((_QWORD *)v48 + 8) = v68;
          *((_QWORD *)v48 + 9) = v66;
          *((_QWORD *)v48 + 10) = v65;
          *((_QWORD *)v48 + 11) = v64;
          *((_QWORD *)v48 + 12) = v63;
          *((_QWORD *)v48 + 13) = v62;
          *((_QWORD *)v48 + 14) = v22;
          *((_QWORD *)v48 + 15) = v24;
          *((_QWORD *)v48 + 16) = v26;
          *((_QWORD *)v48 + 17) = v28;
          *((_QWORD *)v48 + 18) = v30;
          *((_QWORD *)v48 + 19) = v32;
          *((_QWORD *)v48 + 20) = v34;
          *((_QWORD *)v48 + 21) = v36;
          *((_DWORD *)v48 + 44) = v37;
          *((_DWORD *)v48 + 45) = v39;
          v50 = (char *)*a3;
          v49 = (char *)a3[1];
          v51 = v48;
          if (v49 != *a3)
          {
            do
            {
              v52 = *(_OWORD *)(v49 - 184);
              v53 = *(_OWORD *)(v49 - 168);
              v54 = *(_OWORD *)(v49 - 152);
              *(_OWORD *)(v51 - 136) = *(_OWORD *)(v49 - 136);
              *(_OWORD *)(v51 - 152) = v54;
              *(_OWORD *)(v51 - 168) = v53;
              *(_OWORD *)(v51 - 184) = v52;
              v55 = *(_OWORD *)(v49 - 120);
              v56 = *(_OWORD *)(v49 - 104);
              v57 = *(_OWORD *)(v49 - 88);
              *(_OWORD *)(v51 - 72) = *(_OWORD *)(v49 - 72);
              *(_OWORD *)(v51 - 88) = v57;
              *(_OWORD *)(v51 - 104) = v56;
              *(_OWORD *)(v51 - 120) = v55;
              v58 = *(_OWORD *)(v49 - 56);
              v59 = *(_OWORD *)(v49 - 40);
              v60 = *(_OWORD *)(v49 - 24);
              *((_QWORD *)v51 - 1) = *((_QWORD *)v49 - 1);
              *(_OWORD *)(v51 - 24) = v60;
              *(_OWORD *)(v51 - 40) = v59;
              *(_OWORD *)(v51 - 56) = v58;
              v51 -= 184;
              v49 -= 184;
            }
            while (v49 != v50);
            v49 = (char *)*a3;
          }
          v42 = v48 + 184;
          *a3 = v51;
          a3[1] = v48 + 184;
          a3[2] = &v47[184 * v46];
          if (v49)
            operator delete(v49);
        }
        else
        {
          *(_QWORD *)v40 = 0;
          *((_QWORD *)v40 + 1) = v70;
          *((_QWORD *)v40 + 2) = v11;
          *((_QWORD *)v40 + 5) = v69;
          *((_QWORD *)v40 + 6) = v13;
          *((_QWORD *)v40 + 7) = v67;
          *((_QWORD *)v40 + 8) = v68;
          *((_QWORD *)v40 + 9) = v66;
          *((_QWORD *)v40 + 10) = v65;
          *((_QWORD *)v40 + 11) = v64;
          *((_QWORD *)v40 + 12) = v63;
          *((_QWORD *)v40 + 13) = v62;
          *((_QWORD *)v40 + 14) = v22;
          *((_QWORD *)v40 + 15) = v24;
          *((_QWORD *)v40 + 16) = v26;
          *((_QWORD *)v40 + 17) = v28;
          *((_QWORD *)v40 + 18) = v30;
          *((_QWORD *)v40 + 19) = v32;
          *((_QWORD *)v40 + 20) = v34;
          *((_QWORD *)v40 + 21) = v36;
          v42 = v40 + 184;
          *((_DWORD *)v40 + 44) = v37;
          *((_DWORD *)v40 + 45) = v38;
        }
        a3[1] = v42;
        v8 = (char *)v8 + 1;
      }
      while (v8 != v6);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v71, v75, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

id sub_101126AE4(uint64_t a1, void *a2, uint64_t a3)
{
  id result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = objc_msgSend(a2, "hasEstimate");
  if ((_DWORD)result)
  {
    objc_msgSend(objc_msgSend(a2, "estimate"), "startTime");
    *(_QWORD *)(a3 + 24) = v6;
    objc_msgSend(objc_msgSend(a2, "estimate"), "estimatedVo2Max");
    *(_QWORD *)(a3 + 32) = v7;
    *(_QWORD *)(a3 + 40) = (int)objc_msgSend(objc_msgSend(a2, "estimate"), "workoutType");
    objc_msgSend(objc_msgSend(a2, "estimate"), "durationInSeconds");
    *(_QWORD *)(a3 + 48) = v8;
    objc_msgSend(objc_msgSend(a2, "estimate"), "hrMax");
    *(_QWORD *)(a3 + 56) = v9;
    objc_msgSend(objc_msgSend(a2, "estimate"), "hrMin");
    *(_QWORD *)(a3 + 64) = v10;
    objc_msgSend(objc_msgSend(a2, "estimate"), "variance");
    *(_QWORD *)(a3 + 88) = v11;
    objc_msgSend(objc_msgSend(a2, "estimate"), "filteredVo2Max");
    *(_QWORD *)(a3 + 96) = v12;
    *(_DWORD *)(a3 + 104) = objc_msgSend(objc_msgSend(a2, "estimate"), "sessionType");
    *(_BYTE *)(a3 + 108) = objc_msgSend(objc_msgSend(a2, "estimate"), "eligibleForHealthKit");
    *(_BYTE *)(a3 + 109) = objc_msgSend(objc_msgSend(a2, "estimate"), "eligibleForCalorimetry");
    *(_DWORD *)(a3 + 112) = objc_msgSend(objc_msgSend(a2, "estimate"), "numWorkoutsContrToEstimate");
    objc_msgSend(objc_msgSend(a2, "estimate"), "estimatedHRResponseParam");
    *(_QWORD *)(a3 + 120) = v13;
    objc_msgSend(objc_msgSend(a2, "estimate"), "estimatedHRRecoveryParam");
    *(_QWORD *)(a3 + 128) = v14;
    result = objc_msgSend(objc_msgSend(a2, "estimate"), "sessionVo2Max");
    *(_QWORD *)(a3 + 136) = v15;
  }
  return result;
}

uint64_t sub_101126C04(uint64_t a1)
{
  return sub_1014175A8(a1 + 776);
}

double sub_101126C0C(uint64_t a1)
{
  return sub_10068429C(a1 + 320);
}

void sub_101126C14(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

__n128 sub_101126C40(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 28 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101126D3C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x1C)) + 144 * (v7 % 0x1C);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 16) = v9;
  *(_OWORD *)(v8 + 32) = v10;
  result = *(__n128 *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 96);
  v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 128) = v14;
  *(__n128 *)(v8 + 80) = result;
  *(_OWORD *)(v8 + 96) = v13;
  ++a1[5];
  return result;
}

void sub_101126D10(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101126D3C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1C;
  v4 = v2 - 28;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_101127004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1011270F4(id a1)
{
  qword_10230C8D8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLPencilStateSilo"));
}

uint64_t sub_1011271A8(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10112748C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230C8F8 != -1)
    dispatch_once(&qword_10230C8F8, block);
  return qword_102311CA8;
}

void sub_101127348(id a1)
{
  byte_10230C8E8 = sub_100081BD0();
}

void sub_10112748C()
{
  operator new();
}

void sub_1011274D4()
{
  operator delete();
}

uint64_t sub_1011274F8(uint64_t a1, void *a2)
{
  uint64_t v3;
  Class v4;
  NSObject *v5;
  void *v6;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[6];
  _WORD v11[8];
  uint8_t buf[1640];

  v3 = sub_101127730(a1, "CLPencilState", a2);
  *(_QWORD *)v3 = off_1021A2118;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_WORD *)(v3 + 128) = 0;
  v4 = off_1022FD540();
  if (v4)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021A22B0);
    v5 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ACCBLEPairingProvider is available.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021A22B0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "ACCBLEPairingProvider is available.", v11, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "CLPencilState::CLPencilState(id<CLIntersiloUniverse>)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    *(_QWORD *)(a1 + 120) = -[CLPencilStateAdapter initWithPencilState:]([CLPencilStateAdapter alloc], "initWithPencilState:", a1);
    v6 = *(void **)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1011277CC;
    v10[3] = &unk_102131360;
    v10[4] = v4;
    v10[5] = a1;
    objc_msgSend(v6, "async:", v10);
  }
  return a1;
}

void sub_101127718(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1011278D4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101127730(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021A22E0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1011277B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1011277CC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  sub_10112780C(v2);
  *(_QWORD *)(v2 + 112) = objc_msgSend(objc_alloc(*(Class *)(a1 + 32)), "initWithDelegate:", *(_QWORD *)(v2 + 120));
  return sub_101127858((_BYTE *)v2);
}

uint64_t sub_10112780C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  BOOL v4;

  v4 = 0;
  v2 = sub_1001FD94C();
  result = sub_1001E48E4(v2, (uint64_t)CFSTR("CMPencilStateAttachmentKey"), &v4);
  if ((_DWORD)result)
    *(_BYTE *)(a1 + 128) = v4;
  return result;
}

_BYTE *sub_101127858(_BYTE *result)
{
  uint64_t v1;
  char v2;
  int v3;
  char v4;

  v1 = (uint64_t)result;
  v2 = result[128];
  if (v2)
  {
    if (result[129])
    {
      v2 = 1;
    }
    else
    {
      result[129] = 0;
      v4 = 0;
      v3 = 0;
      (*(void (**)(_BYTE *, int *, char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 152))(result, &v3, &v4, 1, 0xFFFFFFFFLL, 0);
      result = (_BYTE *)sub_101127A70(v1);
      v2 = *(_BYTE *)(v1 + 128);
    }
  }
  *(_BYTE *)(v1 + 129) = v2;
  return result;
}

uint64_t sub_1011278D4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A22E0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_101127948(uint64_t a1)
{

  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
}

_QWORD *sub_10112797C@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

_BYTE *sub_1011279F4(uint64_t a1)
{
  return sub_101127A08(*(_BYTE **)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 0);
}

_BYTE *sub_101127A08(_BYTE *result, int a2, int a3)
{
  uint64_t v4;
  int v5;
  char v6;

  if (result[129] != a2 || a3 != 0)
  {
    v4 = (uint64_t)result;
    result[129] = a2;
    v6 = a2;
    v5 = 0;
    (*(void (**)(_BYTE *, int *, char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 152))(result, &v5, &v6, 1, 0xFFFFFFFFLL, 0);
    return (_BYTE *)sub_101127A70(v4);
  }
  return result;
}

uint64_t sub_101127A70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1001FD94C();
  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 129));
  sub_10023EC14(v2);
  v3 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 944))(v3);
}

void sub_101127AC4()
{
  operator new();
}

void sub_101127B70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_101127BAC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_1021A2430;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_101127C84(uint64_t a1)
{
  sub_1011278D4(a1);
  operator delete();
}

void sub_101127CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A2270);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021A2270);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_101127F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FD548);
}

uint64_t sub_101127F30(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10112A660();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FD549;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A2270);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2270);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_10112838C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2270);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A2270);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_10112860C(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A2270);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021A2270);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_101128994(uint64_t a1, int *a2, char *a3)
{
  _QWORD *v6;
  char v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_1021A23C0;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  *((_BYTE *)v6 + 24) = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_101128A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101128A7C(uint64_t a1, signed __int32 *a2, _BYTE *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2270);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_1021A23C0;
      v24[1] = 0;
      *((_BYTE *)v24 + 24) = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_101129804();
    os_activity_scope_leave(&state);
  }
}

void sub_1011290B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_101129100(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2270);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A2270);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::listClients() [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2270);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A2270);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::listClients() [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021A2270);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A2270);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::listClients() [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1011296AC(uint64_t a1)
{
  sub_10112A600(a1);
  operator delete();
}

id sub_1011296D0(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_101129DB4(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_10112971C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

Class sub_101129748()
{
  Class result;

  if (qword_10230C908 != -1)
    dispatch_once(&qword_10230C908, &stru_1021A2290);
  result = objc_getClass("ACCBLEPairingProvider");
  qword_10230C900 = (uint64_t)result;
  off_1022FD540 = sub_1011297A4;
  return result;
}

uint64_t sub_1011297A4()
{
  return qword_10230C900;
}

void sub_1011297B0(id a1)
{
  qword_10230C910 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AccessoryBLEPairing.framework/AccessoryBLEPairing", 2);
}

void sub_1011297D8(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_101129804()
{
  operator new();
}

void sub_101129894(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_101129DB4(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_101129C68(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A2270);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021A2270);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_101129C68(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_101129DB4(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_101129D44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021A23C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101129D58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021A23C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_101129D94(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_101129DB4(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_101129E2C(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_10112A1B4(a1);
  else
    return 0;
}

id sub_101129E2C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_10112A560((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A2400);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C42458 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A2400);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A2400);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C42458 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A2400);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPencilState_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_10112A1B4(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A2400);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C42458 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A2400);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A2400);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C42458 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A2400);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPencilState_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_10112A560(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221CE78))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)1)
      sub_10193F694();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_10112A5D4(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_10112A600(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_1021A2430;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_10112A660()
{
  operator new();
}

uint64_t sub_10112A6F0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_10112A710(uint64_t a1, char *a2, uint64_t a3, char *a4)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 16), a2);
  *(_QWORD *)(a1 + 40) = a3;
  sub_1015A2E04((_QWORD *)(a1 + 48), a4);
  sub_10112A7A4(a1);
  return a1;
}

void sub_10112A770(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10112A7A4(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  size_t v9;
  void **v10;
  _QWORD *v11;
  const void *v12;
  int v13;
  int v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **v18;
  int v19;
  NSObject *v20;
  _QWORD *v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  int v32;
  _QWORD handler[5];
  __int128 __p;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  uint8_t buf[4];
  _QWORD *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;

  if (sub_10112B02C())
  {
    if (*(_BYTE *)a1)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      v2 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
      {
        v3 = (_QWORD *)(a1 + 16);
        if (*(char *)(a1 + 39) < 0)
          v3 = (_QWORD *)*v3;
        *(_DWORD *)buf = 136315138;
        v47 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting %s is already enabled ", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A24A8);
        v4 = (_QWORD *)(a1 + 16);
        if (*(char *)(a1 + 39) < 0)
          v4 = (_QWORD *)*v4;
        LODWORD(v44[0]) = 136315138;
        *(void **)((char *)v44 + 4) = v4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "CLActivityLogger exporting %s is already enabled ", (const char *)v44);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()", "%s\n", v5);
        if (v6 != buf)
          free(v6);
      }
    }
    else
    {
      sub_10112AFF8(a1);
      if (*(char *)(a1 + 39) >= 0)
        v9 = *(unsigned __int8 *)(a1 + 39);
      else
        v9 = *(_QWORD *)(a1 + 24);
      v10 = v44;
      sub_100259584((uint64_t)v44, v9 + 10);
      v11 = (_QWORD *)(a1 + 16);
      if (v45 < 0)
        v10 = (void **)v44[0];
      if (v9)
      {
        if (*(char *)(a1 + 39) >= 0)
          v12 = (const void *)(a1 + 16);
        else
          v12 = *(const void **)(a1 + 16);
        memmove(v10, v12, v9);
      }
      strcpy((char *)v10 + v9, "LastDumped");
      v13 = sub_10112B6C8("MotionMetricsExportInterval");
      v14 = sub_10112B6C8("MotionMetricsExportTimerInterval");
      if (v13 <= 0)
      {
        v15 = sub_1001FD94C();
        if (v45 >= 0)
          v16 = v44;
        else
          v16 = (void **)v44[0];
        sub_100525484(v15, (const char *)v16, 0xFFFFFFFFLL);
        v13 = 864000;
      }
      if (v14 <= 0)
      {
        v17 = sub_1001FD94C();
        if (v45 >= 0)
          v18 = v44;
        else
          v18 = (void **)v44[0];
        sub_100525484(v17, (const char *)v18, 0xFFFFFFFFLL);
        v14 = 864000;
      }
      *(_BYTE *)a1 = 1;
      if (v14 <= 300)
        v19 = 300;
      else
        v19 = v14;
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
      {
        v21 = (_QWORD *)(a1 + 16);
        if (*(char *)(a1 + 39) < 0)
          v21 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136315650;
        v47 = v21;
        v48 = 1024;
        v49 = v19;
        v50 = 1024;
        v51 = v13;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting %s: MotionMetricsExportTimerInterval = %d, MotionMetricsExportInterval = %d", buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A24A8);
        if (*(char *)(a1 + 39) < 0)
          v11 = (_QWORD *)*v11;
        v38 = 136315650;
        v39 = v11;
        v40 = 1024;
        v41 = v19;
        v42 = 1024;
        v43 = v13;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "CLActivityLogger exporting %s: MotionMetricsExportTimerInterval = %d, MotionMetricsExportInterval = %d", (const char *)&v38, 24, v32);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      v22 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 40));
      *(_QWORD *)(a1 + 8) = v22;
      dispatch_source_set_timer(v22, 0, 0x45D964B800uLL, 0xDF8475800uLL);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3321888768;
      handler[2] = sub_10112B98C;
      handler[3] = &unk_1021A2478;
      handler[4] = a1;
      if (SHIBYTE(v45) < 0)
      {
        sub_100115CE4(&__p, v44[0], (unint64_t)v44[1]);
      }
      else
      {
        __p = *(_OWORD *)v44;
        v35 = v45;
      }
      v36 = v13;
      v37 = v19;
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      v23 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting timer enabled ", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A24A8);
        LOWORD(v38) = 0;
        LODWORD(v31) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "CLActivityLogger exporting timer enabled ", &v38, v31);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      dispatch_source_set_event_handler(*(dispatch_source_t *)(a1 + 8), handler);
      dispatch_resume(*(dispatch_object_t *)(a1 + 8));
      if (SHIBYTE(v35) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v45) < 0)
        operator delete(v44[0]);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A24A8);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0)
        v8 = (_QWORD *)*v8;
      *(_DWORD *)buf = 136315138;
      v47 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting %s is disabled ", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      v24 = (_QWORD *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0)
        v24 = (_QWORD *)*v24;
      LODWORD(v44[0]) = 136315138;
      *(void **)((char *)v44 + 4) = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "CLActivityLogger exporting %s is disabled ", (const char *)v44);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    sub_10112AFF8(a1);
    *(_BYTE *)a1 = 0;
  }
}

void sub_10112AFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a22 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void sub_10112AFF8(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
  }
}

BOOL sub_10112B02C()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _BOOL8 v3;
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  NSObject *v11;
  NSObject *v12;
  const char *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  _BYTE v20[23];
  BOOL v21;
  int v22;
  _BOOL4 v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  _BOOL4 v27;
  __int16 v28;
  int v29;

  sub_100197040();
  if (sub_10075D288())
  {
    v21 = 0;
    sub_100119F3C(v20);
    if (sub_10003CE20((uint64_t)v20, (uint64_t)"/Library/Managed Preferences/mobile/com.apple.nanolifestyle.plist")
      && sub_1001E48E4((uint64_t)v20, (uint64_t)CFSTR("AppleInternalDataCollectionEnabled"), &v21))
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      v0 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v27 = v21;
        _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "CLActivityLogger managed should enable data collection setting is %{public}d.", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_35;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      v22 = 67240192;
      v23 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "CLActivityLogger managed should enable data collection setting is %{public}d.", &v22, 8);
      v2 = (uint8_t *)v1;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLActivityDbExportAdapter::checkExportEnabled()", "%s\n", v1);
    }
    else
    {
      v4 = (const __CFBoolean *)CFPreferencesCopyValue(CFSTR("AppleInternalDataCollectionEnabled"), CFSTR("com.apple.nanolifestyle"), CFSTR("mobile"), kCFPreferencesAnyHost);
      v5 = v4;
      if (v4)
      {
        v21 = CFBooleanGetValue(v4) != 0;
        CFRelease(v5);
      }
      else
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A24A8);
        v6 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning CLActivityLogger Failed to get data collections enabled setting. It may not have been set yet.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021A24A8);
          LOWORD(v22) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning CLActivityLogger Failed to get data collections enabled setting. It may not have been set yet.", &v22, 2);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 2, "static BOOL CLActivityDbExportAdapter::checkExportEnabled()", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
        v7 = sub_10112B6C8("MotionMetricsExportInterval");
        v8 = sub_10112B6C8("MotionMetricsExportTimerInterval");
        v9 = v8;
        if (v7 < 1 || v8 <= 0)
        {
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021A24A8);
          v11 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109376;
            v27 = v7;
            v28 = 1024;
            v29 = v9;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting is disabled MotionMetricsExportInterval, %d, MotionMetricsExportTimerInterval, %d", buf, 0xEu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_1021A24A8);
            v22 = 67109376;
            v23 = v7;
            v24 = 1024;
            v25 = v9;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "CLActivityLogger exporting is disabled MotionMetricsExportInterval, %d, MotionMetricsExportTimerInterval, %d", &v22, 14);
            v18 = (uint8_t *)v17;
            sub_100512490("Generic", 1, 0, 2, "static BOOL CLActivityDbExportAdapter::checkExportEnabled()", "%s\n", v17);
            if (v18 != buf)
              free(v18);
          }
          v10 = 0;
        }
        else
        {
          v10 = 1;
        }
        v21 = v10;
      }
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      v12 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v27 = v21;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLActivityLogger should enable data collection is %{public}d.", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_35;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      v22 = 67240192;
      v23 = v21;
      LODWORD(v19) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "CLActivityLogger should enable data collection is %{public}d.", &v22, v19);
      v2 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLActivityDbExportAdapter::checkExportEnabled()", "%s\n", v14);
    }
    if (v2 != buf)
      free(v2);
LABEL_35:
    v3 = v21;
    sub_10011A5A8(v20);
    return v3;
  }
  return 0;
}

void sub_10112B690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10112B6C8(const char *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeID v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  CFTypeRef cf;
  unsigned int v20;
  int v21;
  const char *v22;
  _OWORD buf[102];

  v20 = 0;
  cf = 0;
  v2 = sub_100127B9C();
  sub_100081C10(v2, buf);
  v3 = sub_1001E4B84(*(uint64_t *)&buf[0], a1, &v20);
  v4 = v3;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_5;
  v6 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v4)
      return v20;
  }
  else
  {
LABEL_5:
    if (v3)
      return v20;
  }
  v9 = sub_100127B9C();
  sub_100081C10(v9, buf);
  v10 = sub_100525C58(*(uint64_t *)&buf[0], a1, &cf, 0xFFFFFFFFLL);
  v11 = v10;
  v12 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_12;
  v13 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((v11 & 1) != 0)
    {
LABEL_13:
      v15 = CFGetTypeID(cf);
      if (v15 == CFStringGetTypeID())
        return CFStringGetIntValue((CFStringRef)cf);
      return 0;
    }
  }
  else
  {
LABEL_12:
    if ((v10 & 1) != 0)
      goto LABEL_13;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021A24A8);
  v16 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = a1;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLActivityLogger read %s as CFStringRef failed", (uint8_t *)buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A24A8);
    v21 = 136315138;
    v22 = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "CLActivityLogger read %s as CFStringRef failed", (const char *)&v21);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "int readIntValueForMotionPreferenceKey(const char *)", "%s\n", v17);
    if (v18 != (char *)buf)
      free(v18);
    return 0;
  }
  return result;
}

void sub_10112B96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10112B98C(uint64_t a1)
{
  uint64_t v2;
  double Current;
  uint64_t v4;
  const char **v5;
  const char *v6;
  NSObject *v7;
  const char *v8;
  double v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v18;
  double v19;
  const char *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  double v27;
  void **v28;
  uint64_t v29;
  const char *v30;
  void *v31;
  uint64_t v32;
  __int128 __p;
  uint64_t v34;
  double v35;
  double v36;
  int v37;
  const char *v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  const char *v46;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  const char *v56;

  v2 = *(_QWORD *)(a1 + 32);
  v36 = 0.0;
  Current = CFAbsoluteTimeGetCurrent();
  v4 = sub_1001FD94C();
  v5 = (const char **)(a1 + 40);
  v6 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v6 = *v5;
  if ((sub_1001FD98C(v4, v6, &v36) & 1) == 0)
    v36 = Current - (double)*(int *)(a1 + 64);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021A24A8);
  v7 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v8 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v8 = *v5;
    v9 = v36 + (double)*(int *)(a1 + 68);
    v10 = "Dumping";
    if (Current < v9)
      v10 = "Skipping";
    *(_DWORD *)buf = 136316162;
    v48 = v8;
    v49 = 2048;
    v50 = v36;
    v51 = 2048;
    v52 = Current;
    v53 = 2048;
    v54 = v9;
    v55 = 2080;
    v56 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting %s is %f, currentTime is %f, next dumping time is %f, %s", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A24A8);
    v18 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v18 = *v5;
    v19 = v36 + (double)*(int *)(a1 + 68);
    v20 = "Dumping";
    if (Current < v19)
      v20 = "Skipping";
    v37 = 136316162;
    v38 = v18;
    v39 = 2048;
    v40 = v36;
    v41 = 2048;
    v42 = Current;
    v43 = 2048;
    v44 = v19;
    v45 = 2080;
    v46 = v20;
    LODWORD(v27) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "CLActivityLogger exporting %s is %f, currentTime is %f, next dumping time is %f, %s", (const char *)&v37, v27, *(double *)&v28, *(double *)&v29, v30);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()_block_invoke", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  if (Current >= v36 + (double)*(int *)(a1 + 68))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A24A8);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      v12 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
        v12 = *(const char **)v12;
      *(_DWORD *)buf = 136315138;
      v48 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting %s metrics with OSAWriteLogForSubmission", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      v23 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
        v23 = *(const char **)v23;
      v37 = 136315138;
      v38 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "CLActivityLogger exporting %s metrics with OSAWriteLogForSubmission", (const char *)&v37);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()_block_invoke", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    v13 = off_1022FD870();
    v28 = _NSConcreteStackBlock;
    v29 = 3321888768;
    v30 = (const char *)sub_10112C0E0;
    v31 = &unk_1021A2448;
    v32 = v2;
    if (*(char *)(a1 + 63) < 0)
    {
      sub_100115CE4(&__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      __p = *(_OWORD *)v5;
      v34 = *(_QWORD *)(a1 + 56);
    }
    v35 = Current;
    if (off_1022FD878(v13, (uint64_t)CFSTR("CMActivityLog"), 0, 0, (uint64_t)&v28))
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLActivityLogger successfully submit iOS data analysis with type kOSAProblemTypeMotionState", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_39;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      LOWORD(v37) = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "CLActivityLogger successfully submit iOS data analysis with type kOSAProblemTypeMotionState", &v37, *(_QWORD *)&v27, v28, v29, v30, v31, v32, __p, v34);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()_block_invoke", "%s\n", v15);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      v17 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning CLActivityLogger failed to submit iOS data analysis with type kOSAProblemTypeMotionState", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_39;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      LOWORD(v37) = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning CLActivityLogger failed to submit iOS data analysis with type kOSAProblemTypeMotionState", &v37, *(_QWORD *)&v27, v28, v29, v30, v31, v32, __p, v34);
      v16 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()_block_invoke", "%s\n", v26);
    }
    if (v16 != buf)
      free(v16);
LABEL_39:
    if (SHIBYTE(v34) < 0)
      operator delete((void *)__p);
  }
}

void sub_10112C0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10112C0E0(uint64_t a1, void *a2)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  NSFileHandle *v7;
  NSFileHandle *v8;
  NSData *v9;
  NSData *v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  double v14;
  uint8_t *v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  double v21;
  uint8_t *v22;
  int v23;
  const char *v24;
  uint8_t buf[4];
  const char *v26;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (const char *)(v4 + 48);
  v6 = (const char *)(v4 + 48);
  if (*(char *)(v4 + 71) < 0)
    v6 = *(const char **)v5;
  v7 = +[NSFileHandle fileHandleForReadingAtPath:](NSFileHandle, "fileHandleForReadingAtPath:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
  if (v7)
  {
    v8 = v7;
    v9 = -[NSFileHandle readDataOfLength:](v7, "readDataOfLength:", 1000);
    if (v9)
    {
      v10 = v9;
      do
      {
        if (!-[NSData length](v10, "length"))
          break;
        objc_msgSend(a2, "writeData:", v10);
        v10 = -[NSFileHandle readDataOfLength:](v8, "readDataOfLength:", 1000);
      }
      while (v10);
    }
    -[NSFileHandle closeFile](v8, "closeFile");
    v11 = (const char *)(v4 + 48);
    if (*(char *)(v4 + 71) < 0)
      v11 = *(const char **)v5;
    if (unlink(v11))
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      v12 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        v13 = (const char *)(v4 + 48);
        if (*(char *)(v4 + 71) < 0)
          v13 = *(const char **)v5;
        *(_DWORD *)buf = 136446210;
        v26 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "CLActivityLogger cannot unlink file %{public}s ", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A24A8);
        if (*(char *)(v4 + 71) < 0)
          v5 = *(const char **)v5;
        v23 = 136446210;
        v24 = v5;
        v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "CLActivityLogger cannot unlink file %{public}s ", &v23, 12);
        v16 = v15;
        sub_100512490("Generic", 1, 0, 0, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()_block_invoke", "%s\n", v14);
LABEL_39:
        if (v16 != buf)
          free(v16);
      }
    }
    else
    {
      v19 = sub_1001FD94C();
      v20 = (const char *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v20 = *(const char **)v20;
      sub_10018A4CC(v19, v20, (const void *)(a1 + 64));
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A24A8);
    v17 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v18 = (const char *)(v4 + 48);
      if (*(char *)(v4 + 71) < 0)
        v18 = *(const char **)v5;
      *(_DWORD *)buf = 136446210;
      v26 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "CLActivityLogger cannot open source file %{public}s ", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A24A8);
      if (*(char *)(v4 + 71) < 0)
        v5 = *(const char **)v5;
      v23 = 136446210;
      v24 = v5;
      v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "CLActivityLogger cannot open source file %{public}s ", &v23, 12);
      v16 = v22;
      sub_100512490("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()_block_invoke", "%s\n", v21);
      goto LABEL_39;
    }
  }
}

_QWORD *sub_10112C4E8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)result = v3;
  return result;
}

void sub_10112C518(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t sub_10112C52C(uint64_t a1)
{
  sub_10112AFF8(a1);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_10112C574(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10112C5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_10230C918 != -1)
    dispatch_once(&qword_10230C918, &stru_1021A24C8);
  off_1022FD878 = (uint64_t (*)())dlsym((void *)qword_10230C920, "OSAWriteLogForSubmission");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))off_1022FD878)(a1, a2, a3, a4, a5);
}

void sub_10112C638(id a1)
{
  qword_10230C920 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 2);
}

uint64_t sub_10112C660()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_10230C918 != -1)
    dispatch_once(&qword_10230C918, &stru_1021A24C8);
  v0 = (uint64_t *)dlsym((void *)qword_10230C920, "kOSAProblemTypeMotionState");
  if (v0)
  {
    result = *v0;
    qword_10230C928 = result;
  }
  else
  {
    result = qword_10230C928;
  }
  off_1022FD870 = sub_10112C6D8;
  return result;
}

uint64_t sub_10112C6D8()
{
  return qword_10230C928;
}

uint64_t sub_10112C6E4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0x80000000;
  *(_QWORD *)(a1 + 168) = a2;
  *(_QWORD *)(a1 + 176) = 0xBFF0000000000000;
  sub_100B4E02C(a1 + 184);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 11936) = _Q0;
  *(_DWORD *)(a1 + 11952) = 0;
  *(_WORD *)(a1 + 11956) = 0;
  *(_QWORD *)(a1 + 11960) = 0xBFF0000000000000;
  return a1;
}

__n128 sub_10112C788(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v5;
  __int128 v6;

  if (sub_100B4E3E0(a1 + 184))
  {
    result = *(__n128 *)(a1 + 11856);
    v5 = *(_OWORD *)(a1 + 11872);
    v6 = *(_OWORD *)(a1 + 11888);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 11904);
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v6;
    *(__n128 *)a2 = result;
  }
  return result;
}

uint64_t sub_10112C7D0(uint64_t result, uint64_t a2)
{
  if (*(int *)(result + 11952) >= 4 && !*(_DWORD *)(a2 + 124))
    *(_DWORD *)(a2 + 124) = 6;
  if (*(_BYTE *)(result + 11956))
  {
    if (!*(_DWORD *)(a2 + 100))
      *(_DWORD *)(a2 + 100) = 6;
  }
  return result;
}

float sub_10112C810(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  float v3;
  float v4;
  unint64_t v5;
  unint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  unint64_t v13;
  float v14;
  unint64_t v15;
  float v16;
  _OWORD v18[2];
  int v19;
  float v20[2];
  _DWORD v21[8];

  v2 = *(_QWORD *)(a2 + 8);
  v3 = 0.0;
  v4 = 0.0;
  if (v2)
    v4 = *(float *)a2 / (float)v2;
  *(float *)v21 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
    v3 = *(float *)(a2 + 16) / (float)v5;
  *(float *)&v21[1] = v3;
  v6 = *(_QWORD *)(a2 + 40);
  v7 = 0.0;
  v8 = 0.0;
  if (v6)
    v8 = *(float *)(a2 + 32) / (float)v6;
  *(float *)&v21[2] = v8;
  v9 = *(_QWORD *)(a2 + 88);
  if (v9)
    v7 = *(float *)(a2 + 80) / (float)v9;
  *(float *)&v21[3] = v7;
  v10 = *(_QWORD *)(a2 + 104);
  v11 = 0.0;
  v12 = 0.0;
  if (v10)
    v12 = *(float *)(a2 + 96) / (float)v10;
  *(float *)&v21[4] = v12;
  v13 = *(_QWORD *)(a2 + 120);
  if (v13)
    v11 = *(float *)(a2 + 112) / (float)v13;
  v14 = (float)*(int *)(a2 + 160);
  *(float *)&v21[5] = v11;
  *(float *)&v21[6] = v14;
  v15 = *(_QWORD *)(a2 + 152);
  if (v15)
    v16 = *(float *)(a2 + 144) / (float)v15;
  else
    v16 = 0.0;
  *(float *)&v21[7] = v16;
  v18[0] = xmmword_101C424B8;
  v18[1] = unk_101C424C8;
  v19 = 1037899651;
  sub_1000F08C0((uint64_t)v21, v20, (int *)v18, 2, 8);
  return v20[1];
}

void sub_10112C95C(uint64_t a1@<X0>, double **a2@<X8>, double a3@<D0>)
{
  int v6;
  uint64_t v7;
  int v8;
  double v9;
  float v10;
  _BOOL4 v11;
  BOOL v13;
  NSObject *v14;
  unint64_t v15;
  float v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  float v25;
  unint64_t v26;
  float v27;
  unint64_t v28;
  float v29;
  float v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  double v39;
  double v40;
  _QWORD *v41;
  double *v42;
  double *v43;
  double *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  float v53;
  float v54;
  unint64_t v55;
  unint64_t v56;
  float v57;
  unint64_t v58;
  double v59;
  double v60;
  unint64_t v61;
  unint64_t v62;
  float v63;
  double v64;
  double v65;
  unint64_t v66;
  unint64_t v67;
  double v68;
  double v69;
  unint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  int v75;
  unint64_t v76;
  double v77;
  const char *v78;
  uint8_t *v79;
  int v80;
  double v81;
  __int16 v82;
  _BOOL4 v83;
  __int16 v84;
  double v85;
  __int16 v86;
  int v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  __int16 v92;
  double v93;
  __int16 v94;
  double v95;
  __int16 v96;
  double v97;
  __int16 v98;
  double v99;
  __int16 v100;
  double v101;
  __int16 v102;
  double v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  double v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  int v115;
  __int16 v116;
  double v117;
  uint8_t buf[4];
  double v119;
  __int16 v120;
  _BOOL4 v121;
  __int16 v122;
  double v123;
  __int16 v124;
  int v125;
  __int16 v126;
  double v127;
  __int16 v128;
  double v129;
  __int16 v130;
  double v131;
  __int16 v132;
  double v133;
  __int16 v134;
  double v135;
  __int16 v136;
  double v137;
  __int16 v138;
  double v139;
  __int16 v140;
  double v141;
  __int16 v142;
  double v143;
  __int16 v144;
  double v145;
  __int16 v146;
  double v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  int v153;
  __int16 v154;
  double v155;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 128))(*(_QWORD *)(a1 + 168));
  v7 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 168) + 128))(*(_QWORD *)(a1 + 168), *(double *)(a1 + 176));
  v8 = v6 - v7;
  v9 = a3 - *(double *)(a1 + 176);
  v10 = sub_10112C810(v7, a1);
  v11 = 0;
  v13 = v8 <= 5 && v9 > 15.0 && v9 < 240.0;
  if (v13 && v10 > 0.275)
    v11 = *(float *)(a1 + 80) > 5.0;
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_1021A24E8);
  v14 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = 0.0;
    v17 = 0.0;
    if (v15)
      v17 = *(float *)a1 / (float)v15;
    v18 = *(_QWORD *)(a1 + 24);
    if (v18)
      v16 = *(float *)(a1 + 16) / (float)v18;
    v19 = *(_QWORD *)(a1 + 40);
    v20 = 0.0;
    v21 = 0.0;
    if (v19)
      v21 = *(float *)(a1 + 32) / (float)v19;
    v22 = *(_QWORD *)(a1 + 56);
    if (v22)
      v20 = *(float *)(a1 + 48) / (float)v22;
    v23 = *(_QWORD *)(a1 + 72);
    v24 = 0.0;
    v25 = 0.0;
    if (v23)
      v25 = *(float *)(a1 + 64) / (float)v23;
    v26 = *(_QWORD *)(a1 + 88);
    v27 = *(float *)(a1 + 80);
    if (v26)
      v24 = v27 / (float)v26;
    v28 = *(_QWORD *)(a1 + 104);
    v29 = 0.0;
    v30 = 0.0;
    if (v28)
      v30 = *(float *)(a1 + 96) / (float)v28;
    v31 = *(_QWORD *)(a1 + 120);
    if (v31)
      v29 = *(float *)(a1 + 112) / (float)v31;
    v32 = *(_QWORD *)(a1 + 136);
    v33 = 0.0;
    v34 = 0.0;
    if (v32)
      v34 = *(float *)(a1 + 128) / (float)v32;
    v35 = *(_QWORD *)(a1 + 11936);
    v36 = *(_QWORD *)(a1 + 11944);
    v37 = *(_DWORD *)(a1 + 160);
    v38 = *(_QWORD *)(a1 + 152);
    if (v38)
      v33 = *(float *)(a1 + 144) / (float)v38;
    *(_DWORD *)buf = 134222592;
    v119 = a3;
    v120 = 1024;
    v121 = v11;
    v122 = 2048;
    v123 = v10;
    v124 = 1024;
    v125 = v8;
    v126 = 2048;
    v127 = v9;
    v128 = 2048;
    v129 = v17;
    v130 = 2048;
    v131 = v16;
    v132 = 2048;
    v133 = v21;
    v134 = 2048;
    v135 = v20;
    v136 = 2048;
    v137 = v25;
    v138 = 2048;
    v139 = v24;
    v140 = 2048;
    v141 = v27;
    v142 = 2048;
    v143 = v30;
    v144 = 2048;
    v145 = v29;
    v146 = 2048;
    v147 = v34;
    v148 = 2048;
    v149 = v35;
    v150 = 2048;
    v151 = v36;
    v152 = 1024;
    v153 = v37;
    v154 = 2048;
    v155 = v33;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Kicking,turnTime,%f,isKicking,%d,prob,%f,strokes,%d,deltaT,%f,accelXY,%f,accelZ,%f,ratio,%f,peakAccel,%f,yaw,%f,meanEpoch,%f,totalEpoch,%f,vertToHoriz,%f,medianCross,%f,accelToGyroHF,%f,startTime,%f,endTime,%f,maxKicks,%d,trimmedYaw,%f", buf, 0xB4u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021A24E8);
    v52 = *(_QWORD *)(a1 + 8);
    v53 = 0.0;
    v54 = 0.0;
    if (v52)
      v54 = *(float *)a1 / (float)v52;
    v55 = *(_QWORD *)(a1 + 24);
    if (v55)
      v53 = *(float *)(a1 + 16) / (float)v55;
    v56 = *(_QWORD *)(a1 + 40);
    if (v56)
      v57 = *(float *)(a1 + 32) / (float)v56;
    else
      v57 = 0.0;
    v58 = *(_QWORD *)(a1 + 56);
    v59 = 0.0;
    v60 = 0.0;
    if (v58)
      v60 = (float)(*(float *)(a1 + 48) / (float)v58);
    v61 = *(_QWORD *)(a1 + 72);
    if (v61)
      v59 = (float)(*(float *)(a1 + 64) / (float)v61);
    v62 = *(_QWORD *)(a1 + 88);
    v63 = *(float *)(a1 + 80);
    v64 = 0.0;
    v65 = 0.0;
    if (v62)
      v65 = (float)(v63 / (float)v62);
    v66 = *(_QWORD *)(a1 + 104);
    if (v66)
      v64 = (float)(*(float *)(a1 + 96) / (float)v66);
    v67 = *(_QWORD *)(a1 + 120);
    v68 = 0.0;
    v69 = 0.0;
    if (v67)
      v69 = (float)(*(float *)(a1 + 112) / (float)v67);
    v70 = *(_QWORD *)(a1 + 136);
    if (v70)
      v68 = (float)(*(float *)(a1 + 128) / (float)v70);
    v71 = v53;
    v72 = *(_QWORD *)(a1 + 11936);
    v73 = *(_QWORD *)(a1 + 11944);
    v74 = v57;
    v75 = *(_DWORD *)(a1 + 160);
    v76 = *(_QWORD *)(a1 + 152);
    if (v76)
      v77 = (float)(*(float *)(a1 + 144) / (float)v76);
    else
      v77 = 0.0;
    v80 = 134222592;
    v81 = a3;
    v82 = 1024;
    v83 = v11;
    v84 = 2048;
    v85 = v10;
    v86 = 1024;
    v87 = v8;
    v88 = 2048;
    v89 = v9;
    v90 = 2048;
    v91 = v54;
    v92 = 2048;
    v93 = v71;
    v94 = 2048;
    v95 = v74;
    v96 = 2048;
    v97 = v60;
    v98 = 2048;
    v99 = v59;
    v100 = 2048;
    v101 = v65;
    v102 = 2048;
    v103 = v63;
    v104 = 2048;
    v105 = v64;
    v106 = 2048;
    v107 = v69;
    v108 = 2048;
    v109 = v68;
    v110 = 2048;
    v111 = v72;
    v112 = 2048;
    v113 = v73;
    v114 = 1024;
    v115 = v75;
    v116 = 2048;
    v117 = v77;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 0, "Kicking,turnTime,%f,isKicking,%d,prob,%f,strokes,%d,deltaT,%f,accelXY,%f,accelZ,%f,ratio,%f,peakAccel,%f,yaw,%f,meanEpoch,%f,totalEpoch,%f,vertToHoriz,%f,medianCross,%f,accelToGyroHF,%f,startTime,%f,endTime,%f,maxKicks,%d,trimmedYaw,%f", COERCE_DOUBLE(&v80), 180);
    v79 = (uint8_t *)v78;
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLMotionTypeTimestamp> CLSwimKickingDetector::addTurn(CLMotionTypeTimestamp)", "%s\n", v78);
    if (v79 != buf)
      free(v79);
  }
  if (v11)
  {
    v39 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 168))(*(_QWORD *)(a1 + 168));
    v40 = *(double *)(a1 + 176) + v39;
    if (v40 < a3)
    {
      v41 = a2 + 2;
      v42 = a2[1];
      do
      {
        if ((unint64_t)v42 >= *v41)
        {
          v44 = *a2;
          v45 = v42 - *a2;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 61)
            sub_100259694();
          v47 = *v41 - (_QWORD)v44;
          if (v47 >> 2 > v46)
            v46 = v47 >> 2;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48)
          {
            v49 = (char *)sub_10025E6A0((uint64_t)(a2 + 2), v48);
            v44 = *a2;
            v42 = a2[1];
          }
          else
          {
            v49 = 0;
          }
          v50 = (double *)&v49[8 * v45];
          *v50 = v40;
          v43 = v50 + 1;
          while (v42 != v44)
          {
            v51 = *((_QWORD *)v42-- - 1);
            *((_QWORD *)v50-- - 1) = v51;
          }
          *a2 = v50;
          a2[1] = v43;
          a2[2] = (double *)&v49[8 * v48];
          if (v44)
            operator delete(v44);
        }
        else
        {
          *v42 = v40;
          v43 = v42 + 1;
        }
        a2[1] = v43;
        v40 = v40 + v39;
        v42 = v43;
      }
      while (v40 < a3);
    }
  }
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0x80000000;
  *(double *)(a1 + 176) = a3;
  *(_QWORD *)(a1 + 11936) = *(_QWORD *)(a1 + 11944);
  *(_DWORD *)(a1 + 11952) = 0;
}

void sub_10112D0A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10112D0D4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  char *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  char v14;
  int v15;
  float v16;
  int v17;
  char v18;

  v7 = (char *)(a1 + 11904);
  if (sub_100B4E030(a1 + 184, (float *)a2, a3, a4))
  {
    v8 = *(float *)(a1 + 11868);
    v9 = *(float *)(a1 + 11876);
    v10 = *(float *)(a1 + 11884);
    v11 = *(float *)(a1 + 11888);
    v12 = *(float *)(a1 + 11896);
    v13 = *(float *)(a1 + 11900);
    v14 = *v7;
    *(float *)a1 = *(float *)(a1 + 11872) + *(float *)a1;
    ++*(_QWORD *)(a1 + 8);
    *(float *)(a1 + 16) = v9 + *(float *)(a1 + 16);
    ++*(_QWORD *)(a1 + 24);
    *(float *)(a1 + 32) = v10 + *(float *)(a1 + 32);
    v15 = *(_DWORD *)(a1 + 11892);
    ++*(_QWORD *)(a1 + 40);
    *(float *)(a1 + 48) = v11 + *(float *)(a1 + 48);
    ++*(_QWORD *)(a1 + 56);
    *(float *)(a1 + 64) = v8 + *(float *)(a1 + 64);
    ++*(_QWORD *)(a1 + 72);
    v16 = 1.0;
    if ((v14 & 1) == 0)
      v16 = 0.0;
    *(float *)(a1 + 80) = v16 + *(float *)(a1 + 80);
    ++*(_QWORD *)(a1 + 88);
    *(float *)(a1 + 96) = v12 + *(float *)(a1 + 96);
    ++*(_QWORD *)(a1 + 104);
    *(float *)(a1 + 112) = *(float *)(a1 + 112) + (float)v15;
    ++*(_QWORD *)(a1 + 120);
    *(float *)(a1 + 128) = v13 + *(float *)(a1 + 128);
    ++*(_QWORD *)(a1 + 136);
    v7[53] = v14 & 1;
    if ((v14 & 1) != 0)
    {
      v17 = *(_DWORD *)(a1 + 11952) + 1;
      *(_DWORD *)(a1 + 11952) = v17;
      *(float *)(a1 + 144) = v8 + *(float *)(a1 + 144);
      ++*(_QWORD *)(a1 + 152);
      *(double *)(a1 + 11960) = a3;
    }
    else
    {
      v17 = 0;
      *(_DWORD *)(a1 + 11952) = 0;
    }
    if (*(_DWORD *)(a1 + 160) < v17)
      *(_DWORD *)(a1 + 160) = v17;
  }
  else
  {
    v17 = *(_DWORD *)(a1 + 11952);
  }
  *(double *)(a1 + 11944) = a3;
  if (v17 <= 5)
  {
    if (vabdd_f64(a3, *(double *)(a1 + 11960)) <= 10.0)
      goto LABEL_15;
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  v7[52] = v18;
LABEL_15:
  if (*(double *)(a1 + 176) == -1.0)
  {
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 56);
    *(double *)(a1 + 11936) = a3;
  }
  return 0;
}

void sub_10112D2D0(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

uint64_t *sub_10112D2FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  objc_msgSend(*(id *)(v3 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v3 + 8), 18, 0);
  return a1;
}

uint64_t sub_10112D334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  char v6;
  int v7;
  BOOL v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  BOOL v15;

  *(_QWORD *)a1 = off_1021A2518;
  sub_10055D44C(a1 + 8, a2, 1, 1);
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_BYTE *)(a1 + 288) = 0;
  v5 = sub_1002433B8(a1 + 304);
  *(_QWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  objc_msgSend(*(id *)(a1 + 24), "silo", v5);
  CLMotionActivity::init((CLMotionActivity *)(a1 + 40));
  *(_QWORD *)(a1 + 344) = objc_alloc_init((Class)GEOLocationShifter);
  *(_DWORD *)(a1 + 196) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  sub_1001E4804(&v13);
  v6 = *(_BYTE *)(a1 + 356);
  v15 = 0;
  v7 = sub_1001E4874(v13, "EnableLaneEstimation", &v15);
  v8 = v15;
  if (!v7)
    v8 = v6;
  *(_BYTE *)(a1 + 356) = v8;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_10112D4E8(a1, *(unsigned __int8 *)(a1 + 356));
  return a1;
}

void sub_10112D474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  v7 = *(_QWORD *)(v3 + 360);
  *(_QWORD *)(v3 + 360) = 0;
  if (v7)
    sub_101134988(v3 + 360, v7);
  v8 = *v5;
  *v5 = 0;
  if (v8)
    sub_1004BAB48((uint64_t)v5, v8);
  sub_100261F44(v3 + 272);
  sub_100261F44(v3 + 256);
  sub_100261F44(v4);
  sub_10055D4D0(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10112D4E8(uint64_t result, int a2)
{
  *(_BYTE *)(result + 356) = a2;
  if (a2)
    operator new();
  return result;
}

uint64_t sub_10112D608(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;

  v6 = a1 + 8;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  if (CLMotionActivity::isStatic((CLMotionActivity *)a3)
    && (CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 40)) & 1) == 0)
  {
    *(_QWORD *)(a1 + 176) = *a2;
  }
  *(_QWORD *)(a1 + 32) = *a2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a3;
  v7 = *(_OWORD *)(a3 + 16);
  v8 = *(_OWORD *)(a3 + 32);
  v9 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  v10 = *(_OWORD *)(a3 + 80);
  v11 = *(_OWORD *)(a3 + 96);
  v12 = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  v13 = *(_DWORD *)(a1 + 352);
  if (v13)
  {
    *(_DWORD *)(a1 + 40) = v13;
    *(_DWORD *)(a1 + 44) = 2;
    *(_DWORD *)(a1 + 52) = 0;
    *(_QWORD *)(a1 + 176) = 0xBFF0000000000000;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return 1;
}

void sub_10112D6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10112D708(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v5;

  v5 = a1 + 8;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  *(_QWORD *)(v5 + 176) = *a3;
  *(_DWORD *)(v5 + 184) = *a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

uint64_t sub_10112D768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 256);
  if (v6)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 144))(v6, a2, a3);
  result = *(_QWORD *)(a1 + 272);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 144))(result, a2, a3);
  return result;
}

uint64_t sub_10112D7D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  v2 = v1[31];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  return (*(uint64_t (**)(_QWORD *))(*v1 + 24))(v1);
}

void sub_10112D83C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10112D854(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  v2 = v1[31];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  return (*(uint64_t (**)(_QWORD *))(*v1 + 24))(v1);
}

void sub_10112D8B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10112D8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + 8;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  v5 = *(_QWORD *)(v4 + 248);
  if (v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 104))(v5, a2);
  *(_BYTE *)(a1 + 288) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 24))(v4);
}

void sub_10112D94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10112D964(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  char *v8;
  void **v9;
  int v10;
  uint64_t v12;
  int v13;
  void **v14;
  int v15;
  char *v16;
  char *v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  __int16 v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  void **v25;
  __int16 v26;
  int v27;
  void **v28;
  __int16 v29;
  void **v30;
  __int16 v31;
  int v32;

  v5 = a1 + 8;
  v4 = *(_QWORD *)(a1 + 8);
  v20 = a1 + 8;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 8);
  v21 = 256;
  *(_QWORD *)(v5 + 188) = a2;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v6 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)(a1 + 196);
    v8 = (v7 - 1) > 5 ? "Unavailable" : (&off_1021A2630)[v7 - 1];
    sub_1015A2E04(&v28, v8);
    v9 = v32 >= 0 ? (void **)&v28 : v28;
    v10 = *(_DWORD *)(a1 + 200);
    *(_DWORD *)buf = 67240706;
    v23 = v7;
    v24 = 2082;
    v25 = v9;
    v26 = 1026;
    v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,signalEnvironment,%{public}d,name,%{public}s,fidelity,%{public}d", buf, 0x18u);
    if (SHIBYTE(v32) < 0)
      operator delete(v28);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v12 = qword_1022A00D8;
    v13 = *(_DWORD *)(a1 + 196);
    sub_100D54F84(v13, __p);
    if (v19 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    v15 = *(_DWORD *)(a1 + 200);
    LODWORD(v28) = 67240706;
    HIDWORD(v28) = v13;
    v29 = 2082;
    v30 = v14;
    v31 = 1026;
    v32 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "CLMM,signalEnvironment,%{public}d,name,%{public}s,fidelity,%{public}d", &v28, 24);
    v17 = v16;
    if (v19 < 0)
      operator delete(__p[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngineBase::setSignalEnvironment(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo)", "%s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_10112DC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10112DC40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  NSObject *v7;
  int v8;
  int v9;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;

  v4 = a1 + 8;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  v5 = *(_DWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 196) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 212) = v6;
  *(_DWORD *)(v4 + 228) = v5;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v7 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_DWORD *)(a1 + 212);
    v9 = *(_DWORD *)(a1 + 216);
    *(_DWORD *)buf = 67240448;
    v19 = v8;
    v20 = 1026;
    v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMM,fitnessSession,%{public}d,predicted,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v11 = *(_DWORD *)(a1 + 212);
    v12 = *(_DWORD *)(a1 + 216);
    v15[0] = 67240448;
    v15[1] = v11;
    v16 = 1026;
    v17 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,fitnessSession,%{public}d,predicted,%{public}d", v15, 14);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngineBase::setFitnessActivity(const CLWorkoutUpdate)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_10112DE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10112DE78(CLMotionActivity *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  double v11;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  _BYTE v28[12];
  _BYTE buf[1632];

  v8 = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a4 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a4 + 40) = v9;
  *(_QWORD *)(a4 + 56) = v8;
  *(_QWORD *)(a4 + 64) = v9;
  v10 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a4 + 404) = v10;
  *(_QWORD *)(a4 + 408) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a4 + 351) = *(_DWORD *)(a2 + 132) == 2;
  *(_QWORD *)(a4 + 104) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a4 + 192) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a4 + 72) = *(_QWORD *)(a2 + 28);
  if (v10 > 9 || ((1 << v10) & 0x20A) == 0 || (v11 = *(double *)(a3 + 24), v11 == 0.0))
    v11 = *(double *)(a2 + 76);
  *(double *)(a4 + 8) = v11;
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(a2 + 20);
  *(_OWORD *)(a4 + 88) = *(_OWORD *)(a2 + 36);
  *(_QWORD *)(a4 + 184) = *(_QWORD *)(a2 + 52);
  *(_DWORD *)(a4 + 224) = LODWORD(this->timestamp);
  *(_DWORD *)(a4 + 344) = HIDWORD(this->timestamp);
  *(_BYTE *)(a4 + 228) = CLMotionActivity::isStatic((CLMotionActivity *)&this->timestamp);
  *(_QWORD *)(a4 + 352) = *(_QWORD *)&this[2].mountedConfidence;
  *(_BYTE *)(a4 + 229) = CLMotionActivity::isMounted((CLMotionActivity *)&this->timestamp);
  *(_BYTE *)(a4 + 360) = *(_BYTE *)(a3 + 356);
  if (*(_DWORD *)&this[2].isStanding == 2 && *(double *)(a2 + 76) - this[2].conservativeMountedProbability < 60.0)
    *(_BYTE *)(a4 + 348) = 1;
  v12 = *(float *)(a3 + 40);
  if (v12 > 0.0)
  {
    v13 = *(float *)(a3 + 44);
    if (v13 > 0.0)
    {
      v14 = *(float *)(a3 + 48);
      if (v14 >= 0.0)
      {
        *(double *)(a4 + 200) = v12;
        *(double *)(a4 + 208) = v13;
        *(double *)(a4 + 216) = v14;
      }
    }
  }
  *(_OWORD *)(a4 + 368) = *(_OWORD *)(a2 + 4);
  v15 = *(double *)(a3 + 32);
  *(double *)(a4 + 16) = v15;
  v16 = *(double *)(a3 + 344);
  *(double *)(a4 + 24) = v16;
  v17 = *(double *)(a4 + 8);
  if (v17 > 0.0)
  {
    if (v15 <= 0.0)
    {
      v18 = *(_QWORD *)&this[3].estExitTime;
      if (!v18)
        operator new();
      *(_QWORD *)buf = 0xBFF0000000000000;
      *(double *)v28 = v17;
      sub_10010F24C(v18, (double *)v28, (double *)buf);
      v15 = *(double *)buf;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)buf;
      v16 = *(double *)(a4 + 24);
    }
    if (v16 <= 0.0)
    {
      v19 = *(_QWORD *)&this[3].estExitTime;
      if (!v19)
        operator new();
      *(_QWORD *)buf = 0xBFF0000000000000;
      *(double *)v28 = v15;
      sub_10010F7EC(v19, (double *)v28, (double *)buf);
      *(_QWORD *)(a4 + 24) = *(_QWORD *)buf;
    }
  }
  *(_DWORD *)(a4 + 400) = *(_DWORD *)(a3 + 536);
  *(_QWORD *)(a4 + 416) = *(_QWORD *)&this[2].tilt;
  v20 = sub_10112E2B4((uint64_t)this, a4, (char *)&v27 + 7);
  if ((v20 & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v21 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v22 = *(_QWORD *)(a4 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,applyChinaShift() returned false", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2610);
      v24 = *(_QWORD *)(a4 + 8);
      *(_DWORD *)v28 = 134349056;
      *(_QWORD *)&v28[4] = v24;
      LODWORD(v27) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,applyChinaShift() returned false", v28, v27);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatchingEngineBase::fillCrumb(const CLDaemonLocation &, const CLDaemonLocationPrivate &, CLMapCrumb &) const", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
  }
  return v20;
}

uint64_t sub_10112E2B4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result;
  double v7;
  double v8;
  double v9;
  char v10;
  uint64_t v11;
  __int128 v12;

  *a3 = 0;
  if (!sub_1001133C0(*(double *)(a2 + 56), *(double *)(a2 + 64)))
    return 1;
  if (*(_BYTE *)(a2 + 351))
  {
    result = 1;
    *a3 = 1;
    return result;
  }
  v7 = *(double *)(a2 + 56);
  v8 = *(double *)(a2 + 64);
  if ((+[GEOLocationShifter isLocationShiftRequiredForCoordinate:](GEOLocationShifter, "isLocationShiftRequiredForCoordinate:", v7, v8) & 1) == 0)
  {
    *a3 = 0;
    return 1;
  }
  v12 = 0uLL;
  v9 = *(double *)(a2 + 80);
  v11 = 0;
  result = (uint64_t)objc_msgSend(*(id *)(a1 + 344), "shiftCoordinate:accuracy:shiftedCoordinate:shiftedAccuracy:", &v12, &v11, v7, v8, v9);
  if ((_DWORD)result)
  {
    *(_OWORD *)(a2 + 56) = v12;
    *(_QWORD *)(a2 + 80) = v11;
    v10 = 1;
    *(_BYTE *)(a2 + 351) = 1;
  }
  else
  {
    v10 = 0;
  }
  *a3 = v10;
  return result;
}

double sub_10112E388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  sub_10130C38C(a2, (double *)(a1 + 304));
  if (!*(_BYTE *)(a2 + 265))
  {
    *(_OWORD *)(a3 + 4) = *(_OWORD *)(a2 + 368);
    *(_QWORD *)(a3 + 60) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a3 + 116) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a3 + 20) = *(_QWORD *)(a2 + 80);
  }
  result = *(double *)(a2 + 192);
  *(double *)(a3 + 68) = result;
  *(_BYTE *)(a4 + 52) = *(_BYTE *)(a2 + 350);
  return result;
}

uint64_t sub_10112E3F8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  NSObject *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  NSObject *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t v48;
  const char *v49;
  uint8_t *v50;
  uint64_t v51;
  const char *v52;
  uint8_t *v53;
  const char *v54;
  uint8_t *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint8_t *v63;
  const char *v64;
  uint8_t *v65;
  uint64_t v66;
  void *v67[2];
  char v68;
  void *__p[2];
  char v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  _QWORD *v73;
  pthread_mutex_t *v74;
  __int16 v75;
  int v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[32];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  std::string v102;
  _BYTE v103[280];
  uint8_t buf[4];
  uint64_t v105;
  __int16 v106;
  int v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;

  v9 = a1 + 1;
  v8 = a1[1];
  v73 = a1 + 1;
  (*(void (**)(_QWORD *))(v8 + 16))(a1 + 1);
  v75 = 256;
  v10 = v9[31];
  if (!v10 || !a1[30])
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v15 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a2 + 76);
      *(_DWORD *)buf = 134349056;
      v105 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,null pointers for matcher and geometry", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2610);
      v48 = *(_QWORD *)(a2 + 76);
      LODWORD(v94) = 134349056;
      *(_QWORD *)((char *)&v94 + 4) = v48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,null pointers for matcher and geometry", &v94, 12);
      v50 = (uint8_t *)v49;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLMapMatchingEngineBase::match(CLDaemonLocation &, CLDaemonLocationPrivate &, CLMapCrumb &)", "%s\n", v49);
      if (v50 != buf)
        free(v50);
    }
    v17 = 0;
    goto LABEL_60;
  }
  v11 = *(_OWORD *)(a4 + 80);
  v98 = *(_OWORD *)(a4 + 64);
  v99 = v11;
  v12 = *(_OWORD *)(a4 + 112);
  v100 = *(_OWORD *)(a4 + 96);
  v101 = v12;
  v13 = *(_OWORD *)(a4 + 16);
  v94 = *(_OWORD *)a4;
  v95 = v13;
  v14 = *(_OWORD *)(a4 + 48);
  v96 = *(_OWORD *)(a4 + 32);
  v97 = v14;
  if (*(char *)(a4 + 151) < 0)
  {
    sub_100115CE4(&v102, *(void **)(a4 + 128), *(_QWORD *)(a4 + 136));
    v10 = a1[32];
  }
  else
  {
    v102 = *(std::string *)(a4 + 128);
  }
  memcpy(v103, (const void *)(a4 + 152), sizeof(v103));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a4) & 1) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[32] + 160))(&v71);
    v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[32] + 168))(a1[32]);
    sub_1015A2E04(__p, "NoRouteHintCrumb");
    sub_10130B504(a4, (uint64_t *)__p);
    if (v70 < 0)
      operator delete(__p[0]);
    v19 = a1[34];
    if (v19 && (*(unsigned int (**)(uint64_t, double))(*(_QWORD *)v19 + 88))(v19, *(double *)(a4 + 24)))
    {
      if (((*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)a1[34] + 32))(a1[34], &v94) & 1) == 0)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2610);
        v43 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          v105 = *((_QWORD *)&v94 + 1);
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,matchRouteHints() returned false", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2610);
          LODWORD(v90) = 134349056;
          *(_QWORD *)((char *)&v90 + 4) = *((_QWORD *)&v94 + 1);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,matchRouteHints() returned false", &v90, 12);
          v55 = (uint8_t *)v54;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngineBase::match(CLDaemonLocation &, CLDaemonLocationPrivate &, CLMapCrumb &)", "%s\n", v54);
          if (v55 != buf)
            free(v55);
        }
        v17 = 0;
        goto LABEL_52;
      }
      sub_1015A2E04(v67, "RouteHintCrumb");
      sub_10130B504((uint64_t)&v94, (uint64_t *)v67);
      if (v68 < 0)
        operator delete(v67[0]);
      if (v103[112])
      {
        v20 = v99;
        *(_OWORD *)(a4 + 64) = v98;
        *(_OWORD *)(a4 + 80) = v20;
        v21 = v101;
        *(_OWORD *)(a4 + 96) = v100;
        *(_OWORD *)(a4 + 112) = v21;
        v22 = v95;
        *(_OWORD *)a4 = v94;
        *(_OWORD *)(a4 + 16) = v22;
        v23 = v97;
        *(_OWORD *)(a4 + 32) = v96;
        *(_OWORD *)(a4 + 48) = v23;
        std::string::operator=((std::string *)(a4 + 128), &v102);
        memcpy((void *)(a4 + 152), v103, 0x118uLL);
        (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)a1[34] + 160))(buf);
        sub_100349198(&v71, (uint64_t *)buf);
        sub_100261F44((uint64_t)buf);
        v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[32] + 168))(a1[32]);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2610);
        v24 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          v105 = *((_QWORD *)&v94 + 1);
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Using solution with route hints", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2610);
          LODWORD(v90) = 134349056;
          *(_QWORD *)((char *)&v90 + 4) = *((_QWORD *)&v94 + 1);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,Using solution with route hints", &v90, 12);
          v65 = (uint8_t *)v64;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngineBase::match(CLDaemonLocation &, CLDaemonLocationPrivate &, CLMapCrumb &)", "%s\n", v64);
          if (v65 != buf)
            free(v65);
        }
      }
    }
    v25.n128_f64[0] = sub_10112E388((uint64_t)a1, a4, a2, a3);
    v26 = a1[45];
    if (v26)
    {
      *(_DWORD *)(a3 + 124) = -1;
      *(_QWORD *)(a3 + 128) = 0xBFF0000000000000;
      *(_QWORD *)(a3 + 136) = -1;
      *(_QWORD *)(a3 + 144) = 0;
      *(_QWORD *)(a3 + 152) = 0;
      *(_QWORD *)(a3 + 160) = 0xBFF0000000000000;
      v17 = 1;
      if (!*(_BYTE *)(a4 + 264) || *(_BYTE *)(a4 + 265) || !sub_100739F3C(v26, &v71, v18, a4))
      {
LABEL_52:
        v44 = v72;
        if (v72)
        {
          p_shared_owners = (unint64_t *)&v72->__shared_owners_;
          do
            v46 = __ldaxr(p_shared_owners);
          while (__stlxr(v46 - 1, p_shared_owners));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v44->__on_zero_shared)(v44, v25);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        goto LABEL_57;
      }
      v27 = a1[45];
      v28 = *(_QWORD *)(v27 + 16);
      *(_QWORD *)&v90 = *(_QWORD *)(v27 + 8);
      *((_QWORD *)&v90 + 1) = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = *(_OWORD *)(v27 + 72);
      v32 = *(_OWORD *)(v27 + 56);
      v33 = *(_OWORD *)(v27 + 40);
      v91 = *(_OWORD *)(v27 + 24);
      *(_OWORD *)v92 = v33;
      *(_OWORD *)&v92[16] = v32;
      v93 = v31;
      *(_DWORD *)(a3 + 124) = v91;
      *(double *)(a3 + 128) = (double)(int)*((double *)&v91 + 1);
      *(_QWORD *)(a3 + 136) = *(_QWORD *)v92;
      *(_OWORD *)(a3 + 144) = *(_OWORD *)&v92[8];
      *(_QWORD *)(a3 + 160) = *(_QWORD *)&v92[24];
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2610);
      v34 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v35 = *(_DWORD *)(a3 + 124);
        v36 = *(_QWORD *)(a3 + 128);
        v37 = *(_QWORD *)(a3 + 136);
        v38 = *(_QWORD *)(a3 + 144);
        v39 = *(_QWORD *)(a3 + 152);
        v40 = *(_QWORD *)(a3 + 160);
        *(_DWORD *)buf = 134350593;
        v105 = *((_QWORD *)&v94 + 1);
        v106 = 1026;
        v107 = v35;
        v108 = 2050;
        v109 = v36;
        v110 = 2049;
        v111 = v37;
        v112 = 2050;
        v113 = v38;
        v114 = 2050;
        v115 = v39;
        v116 = 2050;
        v117 = v40;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMMLE,%{public}.1lf,estimatedLane,%{public}d,laneProbability,%{public}.2lf,featureId,%{private}lld,LL,%{public}.7lf,%{public}.7lf,course,%{public}.1lf", buf, 0x44u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2610);
        v56 = *(_DWORD *)(a3 + 124);
        v57 = *(_QWORD *)(a3 + 128);
        v58 = *(_QWORD *)(a3 + 136);
        v59 = *(_QWORD *)(a3 + 144);
        v60 = *(_QWORD *)(a3 + 152);
        v61 = *(_QWORD *)(a3 + 160);
        v76 = 134350593;
        v77 = *((_QWORD *)&v94 + 1);
        v78 = 1026;
        v79 = v56;
        v80 = 2050;
        v81 = v57;
        v82 = 2049;
        v83 = v58;
        v84 = 2050;
        v85 = v59;
        v86 = 2050;
        v87 = v60;
        v88 = 2050;
        v89 = v61;
        LODWORD(v66) = 68;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMLE,%{public}.1lf,estimatedLane,%{public}d,laneProbability,%{public}.2lf,featureId,%{private}lld,LL,%{public}.7lf,%{public}.7lf,course,%{public}.1lf", &v76, v66);
        v63 = (uint8_t *)v62;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngineBase::match(CLDaemonLocation &, CLDaemonLocationPrivate &, CLMapCrumb &)", "%s\n", v62);
        if (v63 != buf)
          free(v63);
      }
      sub_100261F44((uint64_t)&v90);
    }
    v17 = 1;
    goto LABEL_52;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v41 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v42 = *(_QWORD *)(a4 + 8);
    *(_DWORD *)buf = 134349056;
    v105 = v42;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,match() returned false", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v51 = *(_QWORD *)(a4 + 8);
    LODWORD(v90) = 134349056;
    *(_QWORD *)((char *)&v90 + 4) = v51;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,match() returned false", &v90, 12);
    v53 = (uint8_t *)v52;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngineBase::match(CLDaemonLocation &, CLDaemonLocationPrivate &, CLMapCrumb &)", "%s\n", v52);
    if (v53 != buf)
      free(v53);
  }
  v17 = 0;
LABEL_57:
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (HIBYTE(v75))
  {
LABEL_60:
    if ((_BYTE)v75)
      pthread_mutex_unlock(v74);
    else
      (*(void (**)(_QWORD *))(*v73 + 24))(v73);
  }
  return v17;
}

void sub_10112EF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  sub_100261F44((uint64_t)&a18);
  if (a64 < 0)
    operator delete(__p);
  sub_10187E514((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_10112EFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  int v19;
  int v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  int v26;
  int v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *v32;
  int v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  BOOL v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  char v46;
  void **v49;
  int v52;
  int v53;
  int v55;
  NSObject *v56;
  int v57;
  uint64_t v59;
  const char *v60;
  void **v61;
  uint64_t v62;
  int v63;
  const char *v64;
  void **v65;
  uint64_t v66;
  int v67;
  const char *v68;
  void **v69;
  uint64_t v70;
  int v71;
  const char *v72;
  void **v73;
  uint64_t v74;
  const char *v75;
  void **v76;
  uint64_t v77;
  std::string v78;
  BOOL v79;
  _QWORD v80[2];
  uint64_t v81;
  std::__shared_weak_count *v82;
  void *v83[2];
  uint64_t v84;
  void *__p[2];
  uint64_t v86;

  v5 = a1 + 369;
  v6 = sub_10112D334(a1, (uint64_t)"MapMatchingEngine", a2);
  *(_QWORD *)v6 = off_1021A2588;
  *(_BYTE *)(v6 + 368) = 1;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(a1 + 384) = objc_msgSend(objc_msgSend(*(id *)(v6 + 24), "vendor"), "proxyForService:", CFSTR("CLGpsAssistant"));
  *(_QWORD *)(a1 + 392) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 440) = xmmword_101C42528;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_BYTE *)(a1 + 400) = 1;
  *(_OWORD *)(a1 + 456) = unk_101C42538;
  *(_QWORD *)(a1 + 472) = 0x600000006;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 512) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = a1 + 536;
  *(_QWORD *)(a1 + 552) = 0x4014000000000000;
  *(_WORD *)(a1 + 560) = 257;
  *(_OWORD *)(v5 + 195) = xmmword_101C424E0;
  *(_DWORD *)(a1 + 580) = 125;
  *(_QWORD *)(a1 + 584) = 0x4059000000000000;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 656) = _Q1;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 688) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_WORD *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 987) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 854) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_QWORD *)(a1 + 1064) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1056) = 0;
  objc_msgSend(*(id *)(a1 + 24), "silo");
  sub_100DF7E90(__p);
  v11 = a1 + 240;
  sub_1002B7674(a1 + 240, (__int128 *)__p);
  v12 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v13 = (unint64_t *)((char *)__p[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (*(_QWORD *)v11)
  {
    v15 = *(_QWORD *)(a1 + 248);
    v80[0] = *(_QWORD *)v11;
    v80[1] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    sub_1015A2E04(__p, "particle");
    sub_1010DAD2C((uint64_t)v80, (uint64_t *)__p);
  }
  sub_10193FC60(__p);
  abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MapMatching/CLMapMatchingEngine.mm", LODWORD(__p[0]), "CLMapMatchingEngine");
  __break(1u);
  dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v18 = *(NSObject **)(v2 + 216);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 632) + 10);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,CyclingDirectionOfTravel,%d", (uint8_t *)__p, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (*(_QWORD *)(v3 + 208) != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v66 = *(_QWORD *)(v2 + 216);
    v67 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 632) + 10);
    LODWORD(v83[0]) = 67109120;
    HIDWORD(v83[0]) = v67;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v66, 2, "CLMMPED,CyclingDirectionOfTravel,%d", v83);
    v69 = (void **)v68;
    sub_100512490("Generic", 1, 0, 2, "CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)", "%s\n", v68);
    if (v69 != __p)
      free(v69);
  }
  v79 = 0;
  sub_1001E4804(__p);
  v20 = sub_1001E4874((uint64_t)__p[0], "EnableCyclingDirectionOfTravel", &v79);
  v21 = v20;
  v22 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_18;
  v23 = (unint64_t *)((char *)__p[1] + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (!v21)
      goto LABEL_24;
  }
  else
  {
LABEL_18:
    if (!v20)
      goto LABEL_24;
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 632) + 10) = v79;
  if (*(_QWORD *)(v3 + 208) != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v25 = *(NSObject **)(v2 + 216);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    v26 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 632) + 10);
    LODWORD(__p[0]) = 67240192;
    HIDWORD(__p[0]) = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMMPED,Overwrite,EnableCyclingDirectionOfTravel,%{public}d", (uint8_t *)__p, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (*(_QWORD *)(v3 + 208) != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v70 = *(_QWORD *)(v2 + 216);
    v71 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 632) + 10);
    LODWORD(v83[0]) = 67240192;
    HIDWORD(v83[0]) = v71;
    LODWORD(v77) = 8;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v70, 2, "CLMMPED,Overwrite,EnableCyclingDirectionOfTravel,%{public}d", v83, v77);
    v73 = (void **)v72;
    sub_100512490("Generic", 1, 0, 2, "CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)", "%s\n", v72);
    if (v73 != __p)
      free(v73);
  }
LABEL_24:
  v79 = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 632) + 11) = 1;
  sub_1001E4804(__p);
  v27 = sub_1001E4874((uint64_t)__p[0], "EnableActivityBasedCyclingDirectionOfTravel", &v79);
  v28 = v27;
  v29 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_28;
  v30 = (unint64_t *)((char *)__p[1] + 8);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (!v28)
      goto LABEL_34;
  }
  else
  {
LABEL_28:
    if (!v27)
      goto LABEL_34;
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 632) + 11) = v79;
  if (*(_QWORD *)(v3 + 208) != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v32 = *(NSObject **)(v2 + 216);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p[0]) = 67240192;
    HIDWORD(__p[0]) = v79;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLMMPED,Overwrite,EnableActivityBasedCyclingDirectionOfTravel,%{public}d", (uint8_t *)__p, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (*(_QWORD *)(v3 + 208) != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v74 = *(_QWORD *)(v2 + 216);
    LODWORD(v83[0]) = 67240192;
    HIDWORD(v83[0]) = v79;
    LODWORD(v77) = 8;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v74, 2, "CLMMPED,Overwrite,EnableActivityBasedCyclingDirectionOfTravel,%{public}d", v83, v77);
    v76 = (void **)v75;
    sub_100512490("Generic", 1, 0, 2, "CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)", "%s\n", v75);
    if (v76 != __p)
      free(v76);
  }
LABEL_34:
  *(_BYTE *)(a1 + 435) = 1;
  *(_BYTE *)(a1 + 433) = 1;
  sub_1001E4804(__p);
  v33 = sub_1001E4874((uint64_t)__p[0], "IntegrateRouteHintsInMapMatcher", &v79);
  v34 = v33;
  v35 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v36 = (unint64_t *)((char *)__p[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      if (v34)
        goto LABEL_39;
LABEL_46:
      v39 = 1;
      goto LABEL_47;
    }
  }
  if (!v33)
    goto LABEL_46;
LABEL_39:
  v38 = v79;
  v39 = v79;
  v40 = *(_QWORD *)(a1 + 608);
  if (v40)
    *(_BYTE *)(v40 + 9) = v79;
  v41 = *(_QWORD *)(a1 + 632);
  if (v41)
    *(_BYTE *)(v41 + 9) = v38;
  if (v12->__vftable)
    BYTE2(v12->__vftable[2].__on_zero_shared_weak) = v38;
LABEL_47:
  *(_BYTE *)(*(_QWORD *)v11 + 114) = 0;
  if (*(_QWORD *)(v3 + 208) != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v42 = *(NSObject **)(v2 + 216);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p[0]) = 67240192;
    HIDWORD(__p[0]) = v39;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLMM,IntegrateRouteHintsInMapMatcher,%{public}d", (uint8_t *)__p, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (*(_QWORD *)(v3 + 208) != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v59 = *(_QWORD *)(v2 + 216);
    LODWORD(v83[0]) = 67240192;
    HIDWORD(v83[0]) = v39;
    LODWORD(v77) = 8;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v59, 2, "CLMM,IntegrateRouteHintsInMapMatcher,%{public}d", v83, v77);
    v61 = (void **)v60;
    sub_100512490("Generic", 1, 0, 2, "CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)", "%s\n", v60);
    if (v61 != __p)
      free(v61);
  }
  *(_BYTE *)(a1 + 376) = sub_10075CD10();
  *(_DWORD *)(a1 + 352) = 0;
  sub_1001E4804(&v81);
  memset(&v78, 0, sizeof(v78));
  sub_1005F0F40(v81, "ForceUserActivity", &v78, (uint64_t)__p);
  *(_OWORD *)v83 = *(_OWORD *)__p;
  v84 = v86;
  HIBYTE(v86) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  v43 = v82;
  if (v82)
  {
    p_shared_owners = (unint64_t *)&v82->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = HIBYTE(v84);
  if ((v84 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v84) != 7)
      goto LABEL_93;
    if (LODWORD(v83[0]) != 1802264919 || *(_DWORD *)((char *)v83 + 3) != 1735289195)
    {
      if (LODWORD(v83[0]) != 1818458435 || *(_DWORD *)((char *)v83 + 3) != 1735289196)
      {
        v49 = v83;
        goto LABEL_80;
      }
LABEL_91:
      v55 = 6;
      goto LABEL_92;
    }
LABEL_86:
    v55 = 4;
    goto LABEL_92;
  }
  if (v83[1] != (void *)7)
    goto LABEL_93;
  if (*(_DWORD *)v83[0] == 1802264919 && *(_DWORD *)((char *)v83[0] + 3) == 1735289195)
    goto LABEL_86;
  if (*(_DWORD *)v83[0] == 1818458435 && *(_DWORD *)((char *)v83[0] + 3) == 1735289196)
    goto LABEL_91;
  v49 = (void **)v83[0];
LABEL_80:
  v52 = *(_DWORD *)v49;
  v53 = *(_DWORD *)((char *)v49 + 3);
  if (v52 == 1986622020 && v53 == 1735289206)
  {
    v55 = 5;
LABEL_92:
    *(_DWORD *)(a1 + 352) = v55;
  }
LABEL_93:
  if (*(_QWORD *)(v3 + 208) != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v56 = *(NSObject **)(v2 + 216);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
  {
    v57 = *(_DWORD *)(a1 + 352);
    LODWORD(__p[0]) = 67240192;
    HIDWORD(__p[0]) = v57;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "CLMM,ForceActivity,Activity,%{public}d", (uint8_t *)__p, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (*(_QWORD *)(v3 + 208) != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v62 = *(_QWORD *)(v2 + 216);
    v63 = *(_DWORD *)(a1 + 352);
    LODWORD(v81) = 67240192;
    HIDWORD(v81) = v63;
    LODWORD(v77) = 8;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v62, 2, "CLMM,ForceActivity,Activity,%{public}d", &v81, v77);
    v65 = (void **)v64;
    sub_100512490("Generic", 1, 0, 2, "CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)", "%s\n", v64);
    if (v65 != __p)
      free(v65);
  }
  if (v46 < 0)
    operator delete(v83[0]);
  return a1;
}

void sub_101130C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v41;
  uint64_t v42;

  if (*(char *)(v37 + 791) < 0)
    operator delete(*(void **)(v37 + 768));
  v41 = *(_QWORD *)(v37 + 632);
  *(_QWORD *)(v37 + 632) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  sub_100261F44(a13);
  v42 = *(_QWORD *)(v37 + 608);
  *(_QWORD *)(v37 + 608) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  sub_100261F44(a14);
  sub_101130E4C(v38);
  if (*(char *)(v37 + 431) < 0)
    operator delete(*v39);
  sub_101130E88(v37);
  _Unwind_Resume(a1);
}

uint64_t sub_101130E4C(uint64_t a1)
{
  void *v2;

  sub_10077B518(a1 + 96, *(_QWORD **)(a1 + 104));
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_101130E88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1021A2518;

  v2 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = 0;
  if (v2)
    sub_101134988(a1 + 360, v2);
  v3 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v3)
    sub_1004BAB48(a1 + 296, v3);
  sub_100261F44(a1 + 272);
  sub_100261F44(a1 + 256);
  sub_100261F44(a1 + 240);
  sub_10055D4D0(a1 + 8);
  return a1;
}

uint64_t sub_101130F0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1021A2588;

  *(_QWORD *)(a1 + 384) = 0;
  if (*(char *)(a1 + 791) < 0)
    operator delete(*(void **)(a1 + 768));
  v2 = *(_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 632) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_100261F44(a1 + 616);
  v3 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 608) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100261F44(a1 + 592);
  sub_10077B518(a1 + 528, *(_QWORD **)(a1 + 536));
  v4 = *(void **)(a1 + 480);
  if (v4)
  {
    *(_QWORD *)(a1 + 488) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  return sub_101130E88(a1);
}

void sub_101130FC8(uint64_t a1)
{
  sub_101130F0C(a1);
  operator delete();
}

void sub_101130FEC(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  const char *v32;
  uint8_t *v33;
  _DWORD v34[2];
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  uint8_t buf[8];
  std::__shared_weak_count *v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;

  v3 = (int *)(a1 + 528);
  sub_10077665C(a1 + 528, a2);
  sub_1011313D8(a1);
  v4 = *(_QWORD *)(a1 + 608);
  if (v4)
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 552);
  v5 = *(_QWORD *)(a1 + 632);
  if (v5)
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a1 + 552);
  v6 = *(_BYTE *)(a1 + 560);
  v7 = *(_BYTE *)(a1 + 561);
  sub_1001E4804(buf);
  LOBYTE(v34[0]) = 0;
  if (sub_1001E4874(*(uint64_t *)buf, "UseMapDataBuffer", (BOOL *)v34))
    v8 = v34[0];
  else
    v8 = v6;
  v9 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_1001E4804(buf);
  LOBYTE(v34[0]) = 0;
  if (sub_1001E4874(*(uint64_t *)buf, "UseXPCServiceForMapDataQuery", (BOOL *)v34))
    v7 = v34[0];
  v12 = v54;
  if (v54)
  {
    v13 = (unint64_t *)&v54->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  sub_1011322F8((_QWORD *)a1, v8 != 0, v7 != 0, v3);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v15 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(unsigned __int8 *)(a1 + 435);
    v17 = *(unsigned __int8 *)(a1 + 433);
    v18 = *(_QWORD *)(a1 + 552);
    v19 = *(_DWORD *)(a1 + 564);
    v20 = *(_DWORD *)(a1 + 568);
    v21 = *(_DWORD *)(a1 + 572);
    v22 = *(_DWORD *)(a1 + 576);
    v23 = *(_DWORD *)(a1 + 580);
    *(_DWORD *)buf = 67242496;
    *(_DWORD *)&buf[4] = v16;
    LOWORD(v54) = 1026;
    *(_DWORD *)((char *)&v54 + 2) = v17;
    HIWORD(v54) = 2050;
    v55 = v18;
    v56 = 1026;
    v57 = v8;
    v58 = 1026;
    v59 = v7;
    v60 = 1026;
    v61 = v19;
    v62 = 1026;
    v63 = v20;
    v64 = 1026;
    v65 = v21;
    v66 = 1026;
    v67 = v22;
    v68 = 1026;
    v69 = v23;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLMM,MA-OTA,FinalSettings,activityBasedPedMM,%{public}d,activityBasedCyclingMM,%{public}d,roadWidthBuffer,%{public}.1lf,useMapDataBuffer,%{public}d,useXPCForMapDataQueries,%{public}d,vehicleRadius,%{public}d,pedRadius,%{public}d,cyclingRadius,%{public}d,pedBldgRadius,%{public}d,cyclingBldgRadius,%{public}d", buf, 0x42u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v24 = *(unsigned __int8 *)(a1 + 435);
    v25 = *(unsigned __int8 *)(a1 + 433);
    v26 = *(_QWORD *)(a1 + 552);
    v27 = *(_DWORD *)(a1 + 564);
    v28 = *(_DWORD *)(a1 + 568);
    v29 = *(_DWORD *)(a1 + 572);
    v30 = *(_DWORD *)(a1 + 576);
    v31 = *(_DWORD *)(a1 + 580);
    v34[0] = 67242496;
    v34[1] = v24;
    v35 = 1026;
    v36 = v25;
    v37 = 2050;
    v38 = v26;
    v39 = 1026;
    v40 = v8;
    v41 = 1026;
    v42 = v7;
    v43 = 1026;
    v44 = v27;
    v45 = 1026;
    v46 = v28;
    v47 = 1026;
    v48 = v29;
    v49 = 1026;
    v50 = v30;
    v51 = 1026;
    v52 = v31;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLMM,MA-OTA,FinalSettings,activityBasedPedMM,%{public}d,activityBasedCyclingMM,%{public}d,roadWidthBuffer,%{public}.1lf,useMapDataBuffer,%{public}d,useXPCForMapDataQueries,%{public}d,vehicleRadius,%{public}d,pedRadius,%{public}d,cyclingRadius,%{public}d,pedBldgRadius,%{public}d,cyclingBldgRadius,%{public}d", v34, 66);
    v33 = (uint8_t *)v32;
    sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngine::setMapMatcherSettingsFromMobileAssets(const CLNameValuePair &)", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
}

void sub_1011313B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011313D8(uint64_t a1)
{
  int v2;
  std::__shared_weak_count *size;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string::size_type v19;
  int v20;
  NSObject *v21;
  std::string *p_p;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string::size_type v27;
  int v28;
  NSObject *v29;
  std::string *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::string::size_type v35;
  int v36;
  NSObject *v37;
  std::string *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::string::size_type v43;
  int v44;
  NSObject *v45;
  std::string *v46;
  std::string *v47;
  const char *v48;
  std::string *v49;
  std::string *v50;
  const char *v51;
  std::string *v52;
  std::string *v53;
  const char *v54;
  std::string *v55;
  std::string *v56;
  const char *v57;
  std::string *v58;
  int v59;
  const char *v60;
  std::string *v61;
  int v62;
  const char *v63;
  std::string *v64;
  uint64_t v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string __dst;
  BOOL v70;
  _BYTE v71[18];
  std::string v72;
  std::string v73;
  std::string v74;
  std::string __p;
  std::string buf[68];

  v70 = 0;
  sub_1001E4804(buf);
  v2 = sub_1001E4874((uint64_t)buf[0].__r_.__value_.__l.__data_, "EnableActivityBasedPedestrianMapMatching", &v70);
  size = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (buf[0].__r_.__value_.__l.__size_)
  {
    v4 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v2)
  {
    *(_BYTE *)(a1 + 435) = v70;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v6 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(unsigned __int8 *)(a1 + 435);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,Overwrote ActivityBasedPedestrianMapMatching setting,%{public}d", (uint8_t *)buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2610);
      v59 = *(unsigned __int8 *)(a1 + 435);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v59;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Overwrote ActivityBasedPedestrianMapMatching setting,%{public}d", &__p, 8);
      v61 = (std::string *)v60;
      sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngine::setActivityBasedMapMatcherSettingsFromDefaultsWrite()", "%s\n", v60);
      if (v61 != buf)
        free(v61);
    }
  }
  sub_1001E4804(buf);
  v8 = sub_1001E4874((uint64_t)buf[0].__r_.__value_.__l.__data_, "EnableActivityBasedCyclingMapMatching", &v70);
  v9 = v8;
  v10 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (!buf[0].__r_.__value_.__l.__size_)
    goto LABEL_16;
  v11 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v9)
      goto LABEL_22;
  }
  else
  {
LABEL_16:
    if (!v8)
      goto LABEL_22;
  }
  *(_BYTE *)(a1 + 433) = v70;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v13 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(unsigned __int8 *)(a1 + 433);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,Overwrote ActivityBasedCyclingMapMatching setting,%{public}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v62 = *(unsigned __int8 *)(a1 + 433);
    LODWORD(__p.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v62;
    LODWORD(v65) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Overwrote ActivityBasedCyclingMapMatching setting,%{public}d", &__p, v65);
    v64 = (std::string *)v63;
    sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngine::setActivityBasedMapMatcherSettingsFromDefaultsWrite()", "%s\n", v63);
    if (v64 != buf)
      free(v64);
  }
LABEL_22:
  memset(&__p, 0, sizeof(__p));
  sub_1001E4804(&v74);
  v15 = v74.__r_.__value_.__r.__words[0];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    sub_100115CE4(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __dst = __p;
  sub_1005F0F40(v15, "EnablePedestrianMMForCountryInSE", &__dst, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = buf[0];
  *((_BYTE *)&buf[0].__r_.__value_.__s + 23) = 0;
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v16 = (std::__shared_weak_count *)v74.__r_.__value_.__l.__size_;
  if (v74.__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(v74.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = __p.__r_.__value_.__l.__size_;
  if (v19)
  {
    v20 = sub_100772A1C(a1 + 432, 2, (uint64_t)&__p);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v21 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v20;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,EnablePedestrianMMForCountryInSE,%{public}s,success,%{public}d", (uint8_t *)buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2610);
      v47 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(v74.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
      WORD2(v74.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v74.__r_.__value_.__r.__words[1] + 6) = v20;
      LODWORD(v65) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,EnablePedestrianMMForCountryInSE,%{public}s,success,%{public}d", &v74, v65);
      v49 = (std::string *)v48;
      sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngine::setActivityBasedMapMatcherSettingsFromDefaultsWrite()", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
  }
  memset(&v74, 0, sizeof(v74));
  sub_1001E4804(&v73);
  v23 = v73.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    sub_100115CE4(&v68, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  else
    v68 = v74;
  sub_1005F0F40(v23, "EnableCyclingMMForCountryInSE", &v68, (uint64_t)buf);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  v74 = buf[0];
  *((_BYTE *)&buf[0].__r_.__value_.__s + 23) = 0;
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  v24 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
  if (v73.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v73.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = v74.__r_.__value_.__l.__size_;
  if (v27)
  {
    v28 = sub_100772A1C(a1 + 432, 3, (uint64_t)&v74);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v29 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v30 = &v74;
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v30 = (std::string *)v74.__r_.__value_.__r.__words[0];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v28;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMM,EnableCyclingMMForCountryInSE,%{public}s,success,%{public}d", (uint8_t *)buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2610);
      v50 = &v74;
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v50 = (std::string *)v74.__r_.__value_.__r.__words[0];
      LODWORD(v73.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v73.__r_.__value_.__r.__words + 4) = (std::string::size_type)v50;
      WORD2(v73.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v73.__r_.__value_.__r.__words[1] + 6) = v28;
      LODWORD(v65) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,EnableCyclingMMForCountryInSE,%{public}s,success,%{public}d", &v73, v65);
      v52 = (std::string *)v51;
      sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngine::setActivityBasedMapMatcherSettingsFromDefaultsWrite()", "%s\n", v51);
      if (v52 != buf)
        free(v52);
    }
  }
  memset(&v73, 0, sizeof(v73));
  sub_1001E4804(&v72);
  v31 = v72.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    sub_100115CE4(&v67, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  else
    v67 = v73;
  sub_1005F0F40(v31, "EnablePedestrianMMForCountryInPolygon", &v67, (uint64_t)buf);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  v73 = buf[0];
  *((_BYTE *)&buf[0].__r_.__value_.__s + 23) = 0;
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  v32 = (std::__shared_weak_count *)v72.__r_.__value_.__l.__size_;
  if (v72.__r_.__value_.__l.__size_)
  {
    v33 = (unint64_t *)(v72.__r_.__value_.__l.__size_ + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v35 = v73.__r_.__value_.__l.__size_;
  if (v35)
  {
    v36 = sub_1007734B8(a1 + 432, 2, (uint64_t)&v73);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v37 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v38 = &v73;
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v38 = (std::string *)v73.__r_.__value_.__r.__words[0];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v36;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLMM,EnablePedestrianMMForCountryInPolygon,%{public}s,success,%{public}d", (uint8_t *)buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2610);
      v53 = &v73;
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v53 = (std::string *)v73.__r_.__value_.__r.__words[0];
      LODWORD(v72.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = (std::string::size_type)v53;
      WORD2(v72.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v72.__r_.__value_.__r.__words[1] + 6) = v36;
      LODWORD(v65) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,EnablePedestrianMMForCountryInPolygon,%{public}s,success,%{public}d", &v72, v65);
      v55 = (std::string *)v54;
      sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngine::setActivityBasedMapMatcherSettingsFromDefaultsWrite()", "%s\n", v54);
      if (v55 != buf)
        free(v55);
    }
  }
  memset(&v72, 0, sizeof(v72));
  sub_1001E4804(v71);
  v39 = *(_QWORD *)v71;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    sub_100115CE4(&v66, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v66 = v72;
  sub_1005F0F40(v39, "EnableCyclingMMForCountryInPolygon", &v66, (uint64_t)buf);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  v72 = buf[0];
  *((_BYTE *)&buf[0].__r_.__value_.__s + 23) = 0;
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  v40 = *(std::__shared_weak_count **)&v71[8];
  if (*(_QWORD *)&v71[8])
  {
    v41 = (unint64_t *)(*(_QWORD *)&v71[8] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v43 = v72.__r_.__value_.__l.__size_;
  if (v43)
  {
    v44 = sub_1007734B8(a1 + 432, 3, (uint64_t)&v72);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v45 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v46 = &v72;
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v46 = (std::string *)v72.__r_.__value_.__r.__words[0];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v44;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLMM,EnableCyclingMMForCountryInPolygon,%{public}s,success,%{public}d", (uint8_t *)buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2610);
      v56 = &v72;
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v56 = (std::string *)v72.__r_.__value_.__r.__words[0];
      *(_DWORD *)v71 = 136446466;
      *(_QWORD *)&v71[4] = v56;
      *(_WORD *)&v71[12] = 1026;
      *(_DWORD *)&v71[14] = v44;
      LODWORD(v65) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,EnableCyclingMMForCountryInPolygon,%{public}s,success,%{public}d", v71, v65);
      v58 = (std::string *)v57;
      sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngine::setActivityBasedMapMatcherSettingsFromDefaultsWrite()", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1011321B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a36 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a50 < 0)
    operator delete(a45);
  if (a57 < 0)
    operator delete(a52);
  _Unwind_Resume(a1);
}

uint64_t sub_1011322F8(_QWORD *a1, int a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = a1[30];
  if (v8)
    sub_1010CDF8C(v8, a2, a3, a4[9]);
  v9 = a1[74];
  if (v9)
    sub_1010CDF8C(v9, a2, a3, a4[10]);
  v10 = a1[76];
  if (v10)
    sub_10128673C(v10, a2, a3, a4[12]);
  v11 = a1[77];
  if (v11)
    sub_1010CDF8C(v11, a2, a3, a4[11]);
  result = a1[79];
  if (result)
    sub_10128673C(result, a2, a3, a4[13]);
  return result;
}

uint64_t sub_1011323AC(uint64_t a1)
{
  double v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void **v7;
  NSObject *v8;
  void *v9;
  int v10;
  int v12;
  const char *v13;
  char *v14;
  int v15;
  void **v16;
  __int16 v17;
  int v18;
  _BYTE buf[1632];

  v2 = sub_1001FCBB4();
  if (*(double *)a1 < 0.0 || v2 - *(double *)a1 > 1800.0)
  {
    *(double *)a1 = v2;
    v3 = +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
    *(_BYTE *)(a1 + 8) = 1;
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v3, "countryCode");
      if (v5)
      {
        v6 = v5;
        *(_BYTE *)(a1 + 8) = objc_msgSend(v4, "currentCountrySupportsFeature:", 1);
        sub_1015A2E04(buf, (char *)objc_msgSend(v6, "UTF8String"));
        v7 = (void **)(a1 + 16);
        if (*(char *)(a1 + 39) < 0)
          operator delete(*v7);
        *(_OWORD *)v7 = *(_OWORD *)buf;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)&buf[16];
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2610);
        v8 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v9 = (void *)(a1 + 16);
          if (*(char *)(a1 + 39) < 0)
            v9 = *v7;
          v10 = *(unsigned __int8 *)(a1 + 8);
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMM,Country,%{private}s,supportsTBTFeature,%{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2610);
          if (*(char *)(a1 + 39) < 0)
            v7 = (void **)*v7;
          v12 = *(unsigned __int8 *)(a1 + 8);
          v15 = 136380931;
          v16 = v7;
          v17 = 1026;
          v18 = v12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,Country,%{private}s,supportsTBTFeature,%{public}d", &v15, 18);
          v14 = (char *)v13;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatchingEngine::CountryChecker::isDirectionsSupported()", "%s\n", v13);
          if (v14 != buf)
            free(v14);
        }
      }
    }
  }
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_101132630(_QWORD *a1, double *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  _BYTE v19[24];
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  if (a2[1] < 0.0 || sub_10011CE64(a2[7], a2[8]))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v6 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)a2 + 7);
      v9 = *((_QWORD *)a2 + 8);
      *(_DWORD *)buf = 134349569;
      v22 = v7;
      v23 = 2049;
      v24 = v8;
      v25 = 2049;
      v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,bufferMapData,invalid time or location,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2610);
      v15 = *((_QWORD *)a2 + 1);
      v16 = *((_QWORD *)a2 + 7);
      v17 = *((_QWORD *)a2 + 8);
      *(_DWORD *)v19 = 134349569;
      *(_QWORD *)&v19[4] = v15;
      *(_WORD *)&v19[12] = 2049;
      *(_QWORD *)&v19[14] = v16;
      *(_WORD *)&v19[22] = 2049;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,bufferMapData,invalid time or location,LL,%{private}.7lf,%{private}.7lf", v19, 32, *(_OWORD *)v19, *(_QWORD *)&v19[16], v17);
LABEL_27:
      v18 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLMapMatchingEngine::bufferMapData(const CLMapCrumb &, const CLMapMatcherOperatingPolicy::MatcherOperatingDynamicsEnum)", "%s\n", v13);
      if (v18 != buf)
        free(v18);
    }
  }
  else
  {
    switch(a3)
    {
      case 0:
      case 4:
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2610);
        v10 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          v11 = *((_QWORD *)a2 + 1);
          *(_DWORD *)buf = 134349312;
          v22 = v11;
          v23 = 1026;
          LODWORD(v24) = a3;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,bufferMapData,Unknown dynamics,%{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2610);
          v12 = *((_QWORD *)a2 + 1);
          *(_DWORD *)v19 = 134349312;
          *(_QWORD *)&v19[4] = v12;
          *(_WORD *)&v19[12] = 1026;
          *(_DWORD *)&v19[14] = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,bufferMapData,Unknown dynamics,%{public}d", v19, 18, *(_OWORD *)v19, *(_QWORD *)&v19[16], v20);
          goto LABEL_27;
        }
        break;
      case 1:
        v14 = a1[30];
        if (v14)
          goto LABEL_23;
        break;
      case 2:
        v14 = a1[74];
        if (v14)
          goto LABEL_23;
        break;
      case 3:
        v14 = a1[77];
        if (v14)
LABEL_23:
          sub_1010CEAC4(v14, a2[1], a2[7], a2[8]);
        break;
      default:
        return;
    }
  }
}

uint64_t sub_1011329CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  int *v10;
  int *v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v22;
  NSObject *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t *v35;
  char v36;
  uint64_t *v37;
  double v38;
  double v39;
  uint64_t v40;
  int v41;
  int32x2_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  double v47;
  NSObject *v48;
  int v49;
  NSObject *v50;
  int v51;
  int v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  int v69;
  int v70;
  const char *v71;
  uint8_t *v72;
  uint64_t v73;
  const char *v74;
  int v75;
  int v76;
  const char *v77;
  uint8_t *v78;
  int v79;
  const char *v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint8_t *v85;
  uint64_t v86;
  void *v87[2];
  char v88;
  void *__p[2];
  char v90;
  uint64_t v91;
  pthread_mutex_t *v92;
  __int16 v93;
  int v94;
  uint64_t v95;
  __int16 v96;
  _BYTE v97[10];
  _BYTE v98[10];
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  _BYTE v104[32];
  __int128 v105;
  _BYTE v106[88];
  __int128 v107;
  _QWORD v108[35];
  uint8_t buf[4];
  _BYTE v110[10];
  _BYTE v111[10];
  _BYTE v112[10];
  int v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;

  v6 = *(_QWORD *)(a1 + 8);
  v91 = a1 + 8;
  (*(void (**)(void))(v6 + 16))();
  v93 = 256;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v7 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(unsigned __int8 *)(a1 + 400);
    v9 = *(_DWORD *)(a1 + 352);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v110 = v8;
    *(_WORD *)&v110[4] = 1026;
    *(_DWORD *)&v110[6] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMM,match,nav,%{public}d,forceActivity,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v69 = *(unsigned __int8 *)(a1 + 400);
    v70 = *(_DWORD *)(a1 + 352);
    *(_DWORD *)v104 = 67240448;
    *(_DWORD *)&v104[4] = v69;
    *(_WORD *)&v104[8] = 1026;
    *(_DWORD *)&v104[10] = v70;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,match,nav,%{public}d,forceActivity,%{public}d", v104, 14);
    v72 = (uint8_t *)v71;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v71);
    if (v72 != buf)
      free(v72);
  }
  if (!sub_1011323AC(a1 + 392))
    goto LABEL_17;
  *(_OWORD *)(a3 + 104) = *(_OWORD *)(a2 + 60);
  v10 = (int *)(a1 + 40);
  v11 = (int *)(a1 + 212);
  sub_100770E84(a1 + 432, a2, a3, (CLMotionActivity *)(a1 + 40), (unsigned int *)(a1 + 212), (char *)(a1 + 408), *(_DWORD *)(a1 + 196), (int8x16_t *)(a2 + 4));
  if ((*(_DWORD *)(a1 + 436) & 0xFFFFFFFE) == 2 && !*(_BYTE *)(a1 + 520))
  {
    if (*(_DWORD *)(a3 + 276))
    {
      v12 = *(double *)(a3 + 280);
      if (v12 >= 0.0 && v12 < *(double *)(a1 + 584))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2610);
        v13 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v14 = *(_QWORD *)(a2 + 76);
          v15 = *(_QWORD *)(a3 + 280);
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)v110 = v14;
          *(_WORD *)&v110[8] = 2050;
          *(_QWORD *)v111 = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,near a running track,no matching,distanceToTrack,%{public}.2lf", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2610);
          v82 = *(_QWORD *)(a2 + 76);
          v83 = *(_QWORD *)(a3 + 280);
          *(_DWORD *)v104 = 134349312;
          *(_QWORD *)&v104[4] = v82;
          *(_WORD *)&v104[12] = 2050;
          *(_QWORD *)&v104[14] = v83;
          LODWORD(v86) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,near a running track,no matching,distanceToTrack,%{public}.2lf", v104, v86);
          v85 = (uint8_t *)v84;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v84);
          if (v85 != buf)
            free(v85);
        }
LABEL_17:
        v16 = 0;
        goto LABEL_38;
      }
    }
  }
  *(_QWORD *)v104 = 0;
  *(_QWORD *)&v104[8] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v104[16] = _Q0;
  v105 = 0uLL;
  *(_QWORD *)v106 = 0xBFF0000000000000;
  v108[15] = 0;
  LODWORD(v108[16]) = 0;
  memset(&v108[10], 0, 34);
  memset(&v108[17], 0, 75);
  memset(&v108[27], 0, 56);
  memset(v108, 0, 78);
  v107 = 0u;
  memset(&v106[8], 0, 80);
  v108[34] = 0xBFF0000000000000;
  v22 = sub_1001FCBB4();
  if ((sub_10112DE78((CLMotionActivity *)a1, a2, a3, (uint64_t)v104) & 1) != 0)
  {
    sub_1015A2E04(__p, "aPriori");
    sub_10130AB28((uint64_t *)v104, (uint64_t *)__p, -1.0);
    if (v90 < 0)
      operator delete(__p[0]);
    switch(*(_DWORD *)(a1 + 436))
    {
      case 0:
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2610);
        v23 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v24 = *(_QWORD *)(a2 + 76);
          v25 = *v10;
          v26 = *v11;
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)v110 = v24;
          *(_WORD *)&v110[8] = 1026;
          *(_DWORD *)v111 = v25;
          *(_WORD *)&v111[4] = 1026;
          *(_DWORD *)&v111[6] = v26;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Unknown dynamics,no matching,activity,%{public}d,fitness,%{public}d", buf, 0x18u);
        }
        if (!sub_1001BFF7C(115, 2))
          break;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2610);
        v27 = *(_QWORD *)(a2 + 76);
        v28 = *v10;
        v29 = *v11;
        v94 = 134349568;
        v95 = v27;
        v96 = 1026;
        *(_DWORD *)v97 = v28;
        *(_WORD *)&v97[4] = 1026;
        *(_DWORD *)&v97[6] = v29;
        LODWORD(v86) = 24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,Unknown dynamics,no matching,activity,%{public}d,fitness,%{public}d", &v94, v86);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v30);
        goto LABEL_131;
      case 1:
        if (*(_DWORD *)(a2 + 96) == 11)
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2610);
          v53 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
          {
            v54 = *(_QWORD *)(a2 + 76);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)v110 = v54;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "CLMM,%{public}.1lf,vehicle dynamics,wifi2 fix ignored", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2610);
            v55 = *(_QWORD *)(a2 + 76);
            v94 = 134349056;
            v95 = v55;
            LODWORD(v86) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,%{public}.1lf,vehicle dynamics,wifi2 fix ignored", &v94, v86);
            v31 = (uint8_t *)v56;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v56);
            goto LABEL_131;
          }
        }
        else
        {
          if (*(_QWORD *)(a1 + 240) && *(_QWORD *)(a1 + 256))
          {
            v36 = sub_10112E3F8((_QWORD *)a1, a2, a3, (uint64_t)v104);
            goto LABEL_49;
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2610);
          v65 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            v66 = *(_QWORD *)(a2 + 76);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)v110 = v66;
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,null pointers for matcher or geometry", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2610);
            v67 = *(_QWORD *)(a2 + 76);
            v94 = 134349056;
            v95 = v67;
            LODWORD(v86) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,null pointers for matcher or geometry", &v94, v86);
            v31 = (uint8_t *)v68;
            sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v68);
            goto LABEL_131;
          }
        }
        break;
      case 2:
        v35 = *(uint64_t **)(a1 + 608);
        if (v35)
        {
          if ((sub_101286BBC(v35, (uint64_t)v104) & 1) == 0)
            goto LABEL_48;
          goto LABEL_45;
        }
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A2610);
        v57 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          v58 = *(_QWORD *)(a2 + 76);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)v110 = v58;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,null pointers for pedestrian matcher", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2610);
          v59 = *(_QWORD *)(a2 + 76);
          v94 = 134349056;
          v95 = v59;
          LODWORD(v86) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,null pointers for pedestrian matcher", &v94, v86);
          v31 = (uint8_t *)v60;
          sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v60);
          goto LABEL_131;
        }
        break;
      case 3:
        v37 = *(uint64_t **)(a1 + 632);
        if (v37)
        {
          if (sub_101286BBC(v37, (uint64_t)v104))
          {
LABEL_45:
            sub_10112E388(a1, (uint64_t)v104, a2, a3);
            v36 = 1;
          }
          else
          {
LABEL_48:
            v36 = 0;
          }
LABEL_49:
          v38 = sub_1001FCBB4();
          sub_1015A2E04(v87, "aPosteriori");
          v39 = (v38 - v22) * 1000.0;
          sub_10130AB28((uint64_t *)v104, (uint64_t *)v87, v39);
          if (v88 < 0)
            operator delete(v87[0]);
          *(_WORD *)(a3 + 120) = WORD2(v108[9]);
          *(_BYTE *)(a3 + 610) = *(_BYTE *)(a1 + 520);
          *(_BYTE *)(a3 + 609) = 0;
          if ((*(_DWORD *)(a1 + 436) - 1) < 3)
            *(_BYTE *)(a3 + 609) = *(_BYTE *)(a1 + 436);
          if ((v36 & 1) != 0)
          {
            if (!BYTE1(v108[14]) && (*(_BYTE *)(a1 + 369) || *(_BYTE *)(a1 + 370)) && LOBYTE(v108[14]))
              *(_OWORD *)(a2 + 4) = *(_OWORD *)&v108[29];
            sub_101133D18((_QWORD *)a1, a2, a3);
            if (*(_BYTE *)(a1 + 368)
              && LOBYTE(v108[14])
              && !BYTE1(v108[14])
              && (*(double *)&v106[48] < 18.0
               || sub_1000FDBD0()
               || (sub_10075B938() & 1) != 0
               || sub_10075B95C()))
            {
              sub_101133FFC(a1, a2);
              sub_1011343A4((_QWORD *)a1, a2);
            }
            if (*(_BYTE *)(a1 + 376) && !*(_BYTE *)(a3 + 356))
              sub_101134428((_QWORD *)a1, a2, 1);
            if (LOBYTE(v108[14]) && !BYTE5(v108[24]))
            {
              *(_OWORD *)(a3 + 64) = *(_OWORD *)&v108[17];
              v40 = v108[19];
              if (BYTE1(v108[14]))
                v41 = 3;
              else
                v41 = 2;
              *(_DWORD *)(a3 + 56) = v41;
              v42 = vrev64_s32(*(int32x2_t *)&v106[72]);
              *(_QWORD *)(a3 + 80) = v40;
              *(int32x2_t *)(a3 + 88) = v42;
              *(_BYTE *)(a3 + 96) = HIBYTE(v108[24]);
            }
            sub_101132630((_QWORD *)a1, (double *)v104, *(_DWORD *)(a1 + 436));
            v43 = *(_OWORD *)&v106[32];
            *(_OWORD *)(a1 + 704) = *(_OWORD *)&v106[16];
            *(_OWORD *)(a1 + 720) = v43;
            v44 = *(_OWORD *)&v106[64];
            *(_OWORD *)(a1 + 736) = *(_OWORD *)&v106[48];
            *(_OWORD *)(a1 + 752) = v44;
            v45 = *(_OWORD *)&v104[16];
            *(_OWORD *)(a1 + 640) = *(_OWORD *)v104;
            *(_OWORD *)(a1 + 656) = v45;
            v46 = *(_OWORD *)v106;
            *(_OWORD *)(a1 + 672) = v105;
            *(_OWORD *)(a1 + 688) = v46;
            std::string::operator=((std::string *)(a1 + 768), (const std::string *)&v106[80]);
            memcpy((void *)(a1 + 792), v108, 0x118uLL);
            v47 = sub_1001FCBB4();
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2610);
            v48 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
            {
              v49 = *(unsigned __int8 *)(a3 + 609);
              *(_DWORD *)buf = 134350336;
              *(_QWORD *)v110 = *(_QWORD *)&v104[8];
              *(_WORD *)&v110[8] = 2050;
              *(double *)v111 = (v47 - v22) * 1000.0;
              *(_WORD *)&v111[8] = 2050;
              *(double *)v112 = v39;
              *(_WORD *)&v112[8] = 1026;
              v113 = v49;
              v114 = 1026;
              v115 = LOBYTE(v108[14]);
              v116 = 1026;
              v117 = BYTE1(v108[14]);
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "CLMM,%{public}.3lf,Match,latency,%{public}.2lf,filterLatency,%{public}.2lf,mmType,%{public}d,usable,%{public}d,amb,%{public}d", buf, 0x32u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2610);
              v79 = *(unsigned __int8 *)(a3 + 609);
              v94 = 134350336;
              v95 = *(_QWORD *)&v104[8];
              v96 = 2050;
              *(double *)v97 = (v47 - v22) * 1000.0;
              *(_WORD *)&v97[8] = 2050;
              *(double *)v98 = v39;
              *(_WORD *)&v98[8] = 1026;
              v99 = v79;
              v100 = 1026;
              v101 = LOBYTE(v108[14]);
              v102 = 1026;
              v103 = BYTE1(v108[14]);
              LODWORD(v86) = 50;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,%{public}.3lf,Match,latency,%{public}.2lf,filterLatency,%{public}.2lf,mmType,%{public}d,usable,%{public}d,amb,%{public}d", &v94, v86);
              v81 = (uint8_t *)v80;
              sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v80);
              if (v81 != buf)
                free(v81);
            }
            v16 = 1;
            goto LABEL_36;
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2610);
          v50 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            v51 = *(unsigned __int8 *)(a3 + 610);
            v52 = *(unsigned __int8 *)(a3 + 609);
            *(_DWORD *)buf = 134349824;
            *(_QWORD *)v110 = *(_QWORD *)&v104[8];
            *(_WORD *)&v110[8] = 2050;
            *(double *)v111 = v39;
            *(_WORD *)&v111[8] = 1026;
            *(_DWORD *)v112 = v51;
            *(_WORD *)&v112[4] = 1026;
            *(_DWORD *)&v112[6] = v52;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,MMFilter,latency,%{public}.3lf,triggeredByRouteHints,%{public}d,mmtype,%{public}d", buf, 0x22u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2610);
            v75 = *(unsigned __int8 *)(a3 + 610);
            v76 = *(unsigned __int8 *)(a3 + 609);
            v94 = 134349824;
            v95 = *(_QWORD *)&v104[8];
            v96 = 2050;
            *(double *)v97 = v39;
            *(_WORD *)&v97[8] = 1026;
            *(_DWORD *)v98 = v75;
            *(_WORD *)&v98[4] = 1026;
            *(_DWORD *)&v98[6] = v76;
            LODWORD(v86) = 34;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,MMFilter,latency,%{public}.3lf,triggeredByRouteHints,%{public}d,mmtype,%{public}d", &v94, v86);
            v78 = (uint8_t *)v77;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v77);
            if (v78 != buf)
              free(v78);
          }
          sub_101132630((_QWORD *)a1, (double *)v104, *(_DWORD *)(a1 + 436));
        }
        else
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021A2610);
          v61 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            v62 = *(_QWORD *)(a2 + 76);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)v110 = v62;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,null pointers for cycling matcher", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2610);
            v63 = *(_QWORD *)(a2 + 76);
            v94 = 134349056;
            v95 = v63;
            LODWORD(v86) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,null pointers for cycling matcher", &v94, v86);
            v31 = (uint8_t *)v64;
            sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v64);
            goto LABEL_131;
          }
        }
        break;
      default:
        goto LABEL_48;
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v32 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v33 = *(_QWORD *)(a2 + 76);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v110 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Unable to fill crumb,no matching", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2610);
      v73 = *(_QWORD *)(a2 + 76);
      v94 = 134349056;
      v95 = v73;
      LODWORD(v86) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,Unable to fill crumb,no matching", &v94, v86);
      v31 = (uint8_t *)v74;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v74);
LABEL_131:
      if (v31 != buf)
        free(v31);
    }
  }
  v16 = 0;
LABEL_36:
  if (SHIBYTE(v107) < 0)
    operator delete(*(void **)&v106[80]);
LABEL_38:
  if (HIBYTE(v93))
  {
    if ((_BYTE)v93)
      pthread_mutex_unlock(v92);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v91 + 24))(v91);
  }
  return v16;
}

void sub_101133C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
    operator delete(__p);
  sub_10187E514((uint64_t)&a24);
  _Unwind_Resume(a1);
}

_QWORD *sub_101133D18(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  uint8_t *v13;
  _OWORD v14[3];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;

  if ((*((_DWORD *)result + 109) & 0xFFFFFFFE) != 2)
  {
    v3 = *(_DWORD *)(a2 + 96);
    v4 = v3 > 9;
    v5 = (1 << v3) & 0x20A;
    if (!v4 && v5 != 0)
    {
      v7 = result;
      if (*((_BYTE *)result + 374))
      {
        DWORD2(v17) = 0;
        v8 = *(_QWORD *)(a2 + 76);
        *(_QWORD *)&v15 = *(_QWORD *)(a3 + 344);
        *((_QWORD *)&v15 + 1) = v8;
        v16 = *(_OWORD *)(a2 + 4);
        v9 = *(double *)(a2 + 20);
        if (v9 > 100.0)
          v9 = 100.0;
        if (v9 < 50.0)
          v9 = 50.0;
        *(double *)&v17 = v9;
        result = (_QWORD *)result[32];
        if (result)
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, __int128 *))(*result + 128))(result, &v15);
          if ((_DWORD)result)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021A2610);
            v10 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134284801;
              v31 = v16;
              v32 = 2049;
              v33 = *((_QWORD *)&v16 + 1);
              v34 = 1026;
              v35 = BYTE8(v17);
              v36 = 1026;
              v37 = BYTE9(v17);
              v38 = 1026;
              v39 = BYTE10(v17);
              v40 = 1026;
              v41 = BYTE11(v17);
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,TBA,setTunnelBridgeAssistance,lat,%{private}.8lf,lon,%{private}.8lf,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,isTunnel,%{public}d,isBridge,%{public}d", buf, 0x2Eu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021A2610);
              v18 = 134284801;
              v19 = v16;
              v20 = 2049;
              v21 = *((_QWORD *)&v16 + 1);
              v22 = 1026;
              v23 = BYTE8(v17);
              v24 = 1026;
              v25 = BYTE9(v17);
              v26 = 1026;
              v27 = BYTE10(v17);
              v28 = 1026;
              v29 = BYTE11(v17);
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,TBA,setTunnelBridgeAssistance,lat,%{private}.8lf,lon,%{private}.8lf,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,isTunnel,%{public}d,isBridge,%{public}d", &v18, 46);
              v13 = (uint8_t *)v12;
              sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngine::provideTunnelBridgeAssistance(const CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v12);
              if (v13 != buf)
                free(v13);
            }
            v11 = (void *)v7[48];
            v14[0] = v15;
            v14[1] = v16;
            v14[2] = v17;
            return objc_msgSend(v11, "setTunnelBridgeAssistance:", v14);
          }
        }
      }
    }
  }
  return result;
}

void sub_101133FFC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  const char *v29;
  uint8_t *v30;
  _OWORD v31[6];
  uint64_t v32;
  _DWORD v33[2];
  __int16 v34;
  int v35;
  __int16 v36;
  _BOOL4 v37;
  __int16 v38;
  _BOOL4 v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BOOL4 v43;
  __int16 v44;
  int v45;
  __int16 v46;
  _BOOL4 v47;
  uint8_t buf[16];
  __int128 v49;
  _BYTE v50[32];
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  if (*(_BYTE *)(a1 + 371) || *(_BYTE *)(a1 + 375))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v4 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 371);
      v6 = *(unsigned __int8 *)(a1 + 375);
      v7 = *(_DWORD *)(a1 + 436);
      v8 = v7 == 2;
      v9 = v7 == 1;
      v10 = sub_1002416C0();
      v11 = sub_1000FDBD0();
      v12 = *(_DWORD *)(a2 + 96);
      v13 = *(_DWORD *)(a1 + 436) == 3;
      *(_DWORD *)buf = 67241984;
      *(_DWORD *)&buf[4] = v5;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v6;
      *(_WORD *)&buf[14] = 1026;
      LODWORD(v49) = v8;
      WORD2(v49) = 1026;
      *(_DWORD *)((char *)&v49 + 6) = v9;
      WORD5(v49) = 1026;
      HIDWORD(v49) = v10;
      *(_WORD *)v50 = 1026;
      *(_DWORD *)&v50[2] = v11;
      *(_WORD *)&v50[6] = 1026;
      *(_DWORD *)&v50[8] = v12;
      *(_WORD *)&v50[12] = 1026;
      *(_DWORD *)&v50[14] = v13;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMM,wantDot,%{public}d,forceDot,%{public}d,isPedestrian,%{public}d,isVehicle,%{public}d,isEurekaGnss,%{public}d,isFire,%{public}d,type,%{public}d,isCycling,%{public}d", buf, 0x32u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2610);
      v19 = qword_1022A00D8;
      v20 = *(unsigned __int8 *)(a1 + 371);
      v21 = *(unsigned __int8 *)(a1 + 375);
      v22 = *(_DWORD *)(a1 + 436);
      v23 = v22 == 2;
      v24 = v22 == 1;
      v25 = sub_1002416C0();
      v26 = sub_1000FDBD0();
      v27 = *(_DWORD *)(a2 + 96);
      v28 = *(_DWORD *)(a1 + 436) == 3;
      v33[0] = 67241984;
      v33[1] = v20;
      v34 = 1026;
      v35 = v21;
      v36 = 1026;
      v37 = v23;
      v38 = 1026;
      v39 = v24;
      v40 = 1026;
      v41 = v25;
      v42 = 1026;
      v43 = v26;
      v44 = 1026;
      v45 = v27;
      v46 = 1026;
      v47 = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 2, "CLMM,wantDot,%{public}d,forceDot,%{public}d,isPedestrian,%{public}d,isVehicle,%{public}d,isEurekaGnss,%{public}d,isFire,%{public}d,type,%{public}d,isCycling,%{public}d", v33, 50);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngine::provideDirectionOfTravelAssistance(const CLDaemonLocation &)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v14 = *(_DWORD *)(a1 + 436);
    switch(v14)
    {
      case 1:
        v17 = *(_QWORD *)(a1 + 256);
        if (v17
          && (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1
          && (*(unsigned int (**)(uint64_t, uint8_t *))(*(_QWORD *)v17 + 112))(v17, buf))
        {
LABEL_22:
          if (vabdd_f64(*(double *)(a2 + 76), *(double *)buf) <= 1.2)
          {
            v18 = *(void **)(a1 + 384);
            v31[4] = v51;
            v31[5] = v52;
            v32 = v53;
            v31[0] = *(_OWORD *)buf;
            v31[1] = v49;
            v31[2] = *(_OWORD *)v50;
            v31[3] = *(_OWORD *)&v50[16];
            objc_msgSend(v18, "setDirectionOfTravelAssistance:", v31);
          }
        }
        break;
      case 3:
        v15 = *(_QWORD *)(a1 + 632);
        if (v15 && (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
        {
LABEL_21:
          if ((sub_10128EFC0(v15, (uint64_t)buf) & 1) == 0)
            return;
          goto LABEL_22;
        }
        break;
      case 2:
        v15 = *(_QWORD *)(a1 + 608);
        if (!v15)
          return;
        v16 = *(_DWORD *)(a2 + 96);
        if (v16 > 0xB || ((1 << v16) & 0xA02) == 0)
          return;
        goto LABEL_21;
      default:
        return;
    }
  }
}

_QWORD *sub_1011343A4(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  _OWORD v4[3];
  _OWORD v5[3];

  if ((*((_DWORD *)result + 109) & 0xFFFFFFFE) != 2 && (*(_DWORD *)(a2 + 96) | 8) == 9)
  {
    v2 = result;
    if (*((_BYTE *)result + 372))
    {
      result = (_QWORD *)result[32];
      if (result)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _OWORD *))(*result + 120))(result, v5);
        if ((_DWORD)result)
        {
          v3 = (void *)v2[48];
          v4[0] = v5[0];
          v4[1] = v5[1];
          v4[2] = v5[2];
          return objc_msgSend(v3, "setMapMatchedPositionAssistance:", v4);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_101134428(_QWORD *result, uint64_t a2, char a3)
{
  _QWORD *v4;
  void *v6;
  _OWORD v7[7];
  uint64_t v8;
  _OWORD v9[4];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  if ((*((_DWORD *)result + 109) & 0xFFFFFFFE) != 2 && (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
  {
    v4 = result;
    if (*((_BYTE *)result + 373))
    {
      result = (_QWORD *)result[32];
      if (result)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _OWORD *, double))(*result + 136))(result, v9, *(double *)(a2 + 76));
        if ((_DWORD)result)
        {
          HIDWORD(v10) = *(_DWORD *)(a2 + 132);
          LOBYTE(v11) = a3;
          v7[5] = v11;
          v7[6] = v12;
          v7[0] = v9[0];
          v7[1] = v9[1];
          v7[2] = v9[2];
          v7[3] = v9[3];
          v6 = (void *)v4[48];
          v8 = v13;
          v7[4] = v10;
          return objc_msgSend(v6, "setTunnelEndPointPositionAssistance:", v7);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1011344E8(uint64_t a1, double *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;

  v4 = (_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  v5 = v4[33];
  if (v5)
    (*(void (**)(uint64_t, double *))(*(_QWORD *)v5 + 80))(v5, a2);
  v6 = *(_QWORD *)(a1 + 608);
  if (v6)
    sub_10128F028(v6, (uint64_t)a2);
  v7 = *(_QWORD *)(a1 + 632);
  if (v7)
    sub_10128F028(v7, (uint64_t)a2);
  v8 = sub_1011345B4(a1 + 432, (uint64_t)a2);
  if (*(_BYTE *)(a1 + 288))
    sub_1012A16B0(a2);
  return (*(uint64_t (**)(_QWORD *, __n128))(*v4 + 24))(v4, v8);
}

void sub_1011345A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1011345B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)a2;
  if (a1 + 40 != a2)
    sub_1008AFA64((char *)(a1 + 48), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a1 + 72) = result;
  return result;
}

uint64_t sub_101134610(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  v4 = v3[31];
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(v4, a2);
  return (*(uint64_t (**)(_QWORD *))(*v3 + 24))(v3);
}

void sub_10113467C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101134694(uint64_t a1, int a2)
{
  _BYTE *v3;
  NSObject *v4;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  v3 = (_BYTE *)(a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  v3[362] = a2;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v4 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMM,FullSnapEnabled,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v7[0] = 67240192;
    v7[1] = a2;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,FullSnapEnabled,%{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngine::setFullSnapEnabled(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 24))(v3);
}

void sub_101134870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101134898(_QWORD *a1)
{
  _QWORD *v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1 + 1;
  (*(void (**)(_QWORD *))(a1[1] + 16))(a1 + 1);
  sub_10112D7D8((uint64_t)a1);
  v4 = a1[32];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = a1[34];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v6 = a1[76];
  if (v6)
    v3.n128_f64[0] = sub_101286184(v6);
  v7 = a1[79];
  if (v7)
    v3.n128_f64[0] = sub_101286184(v7);
  return (*(uint64_t (**)(_QWORD *, __n128))(*v2 + 24))(v2, v3);
}

void sub_101134938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10113494C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 436) == 1;
}

void sub_10113495C(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_101134988(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100592F30(a2 + 128, *(_QWORD **)(a2 + 136));
    sub_100261F44(a2 + 8);
    operator delete();
  }
}

BOOL sub_1011349D4()
{
  return os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_FAULT);
}

BOOL sub_1011349F4()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 216), OS_LOG_TYPE_INFO);
}

BOOL sub_101134A04()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 216));
}

uint64_t sub_101134A10()
{
  sub_1015A2E04(qword_10230C930, "RoadAndBuildingPrecachingEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C930, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230C948, "RoadTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C948, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230C960, "BuildingTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C960, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230C978, "RunningTrackTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C978, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230C990, "RoadTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C990, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230C9A8, "BuildingTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C9A8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230C9C0, "RunningTrackTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C9C0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230C9D8, "RoadTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C9D8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230C9F0, "BuildingTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C9F0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CA08, "RunningTrackTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CA08, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CA20, "PrecachingTileRefreshPeriodV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CA20, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CA38, "PrecachingTileRefreshPeriodNPLOIAndTouristV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CA38, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CA50, "PrecachingMinimumBatteryLevel");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CA50, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CA68, "PrecachingMinimumBatteryLevelAggressiveMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CA68, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CA80, "PrecachingXPCDownloadInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CA80, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CA98, "PrecachingDownloadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CA98, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CAB0, "PrecachingUploadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CAB0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CAC8, "PrecachingDownloadTimePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CAC8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CAE0, "UseInsideOutTileDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CAE0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CAF8, "IsDiskIntensiveActivity");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CAF8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CB10, "PrecachingAllowSignalEnvironmentMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CB10, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CB28, "RoadTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CB28, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CB40, "BuildingTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CB40, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CB58, "RunningTrackTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CB58, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CB70, "PrecachingAllowAggressiveSettingInTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CB70, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CB88, "RoadTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CB88, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CBA0, "BuildingTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CBA0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CBB8, "RunningTrackTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CBB8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CBD0, "MaxSectionDownloadAllowedForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CBD0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CBE8, "TimeWindowToCheckForMaxSectionDownloadForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CBE8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CC00, "PrecachingAllowTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CC00, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CC18, "RoadTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CC18, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CC30, "BuildingTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CC30, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CC48, "RunningTrackTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CC48, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CC60, "MaxLocationAgeForTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CC60, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CC78, "SectionsToDownloadPerXPCCall");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CC78, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CC90, "SectionsToDownloadPerXPCCallForTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CC90, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CCA8, "SectionsToDownloadPerXPCCallForNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CCA8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CCC0, "SectionsToDownloadPerXPCCallForSignalEnvironment");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CCC0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CCD8, "PrecachngAllowNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CCD8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CCF0, "RoadTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CCF0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CD08, "BuildingTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CD08, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CD20, "RunningTrackTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CD20, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CD38, "DistanceFromHomeForTouristModeMeters");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CD38, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230CD50, "NumDaysLookbackForWorkouts");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CD50, (void *)&_mh_execute_header);
}

void sub_101135144(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  _BYTE v12[12];
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint8_t buf[24];
  uint64_t v18[5];
  __int128 v19;
  uint64_t v20;

  sub_1001307C4((_DWORD *)a2, a1);
  sub_101135428(a1, (uint64_t *)(a1 + 6352), 1, buf);
  sub_100132440((void ***)(a2 + 6352));
  *(_OWORD *)(a2 + 6352) = *(_OWORD *)buf;
  *(_QWORD *)(a2 + 6368) = *(_QWORD *)&buf[16];
  memset(buf, 0, sizeof(buf));
  sub_1000A6464(a2 + 6376, v18);
  *(_OWORD *)(a2 + 6416) = v19;
  *(_QWORD *)(a2 + 6432) = v20;
  sub_100067AC4((uint64_t)v18);
  *(_QWORD *)v12 = buf;
  sub_10055C824((void ***)v12);
  if (*(_DWORD *)(a1 + 6420) == 2 && *(double *)(a2 + 6432) > 0.0)
  {
    *(_DWORD *)(a2 + 6420) = 0;
    *(_QWORD *)(a2 + 6432) = 0;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A2660);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 6360) - *(_QWORD *)(a2 + 6352)) >> 3);
    v6 = *(_QWORD *)(a2 + 6400);
    v7 = *(_DWORD *)(a1 + 6420);
    *(_DWORD *)buf = 134349568;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 1026;
    LODWORD(v18[0]) = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "@WsbReproc, remain, groups, %{public}lu, unknownAPs, %{public}lu, pass, %{public}d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 6360) - *(_QWORD *)(a2 + 6352)) >> 3);
    v9 = *(_QWORD *)(a2 + 6400);
    v10 = *(_DWORD *)(a1 + 6420);
    *(_DWORD *)v12 = 134349568;
    *(_QWORD *)&v12[4] = v8;
    v13 = 2050;
    v14 = v9;
    v15 = 1026;
    v16 = v10;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WsbReproc, remain, groups, %{public}lu, unknownAPs, %{public}lu, pass, %{public}d", v12, 28);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
}

void sub_10113540C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_101135428(uint64_t a1@<X0>, uint64_t *a2@<X1>, int i@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  NSObject *v51;
  NSObject *v52;
  uint64_t v53;
  _QWORD *v54;
  NSObject *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  _QWORD *v69;
  _QWORD v70[4];
  int v71;
  int v72;
  _QWORD v73[4];
  int v74;
  _QWORD v75[4];
  int v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  int v80;
  _BYTE v81[28];
  _BYTE buf[1632];

  v7 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_10055CC6C(a4, *(uint64_t **)(a1 + 6352), *(uint64_t **)(a1 + 6360), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 6360) - *(_QWORD *)(a1 + 6352)) >> 3));
  v8 = (uint64_t)(v7 + 3);
  sub_10012E3D0((uint64_t)(v7 + 3), a1 + 6376);
  *((_OWORD *)v7 + 4) = *(_OWORD *)(a1 + 6416);
  v7[10] = *(_QWORD *)(a1 + 6432);
  if (i)
  {
    sub_10001BB9C(v7 + 3);
    v9 = *v7;
    v10 = v7[1];
    while (v10 != v9)
    {
      v10 -= 24;
      *(_QWORD *)buf = v10;
      sub_100279AA4((void ***)buf);
    }
    v7[1] = v9;
  }
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v11 = *a2;
  if (a2[1] != *a2)
  {
    v12 = 0;
    v66 = 0;
    v67 = 0;
    v13 = 0;
    v69 = v7;
    v68 = i;
    do
    {
      v14 = *(_QWORD *)(a1 + 1632);
      v15 = *(_QWORD *)(a1 + 1640) - v14;
      if (!v15)
        goto LABEL_11;
      if (0xD37A6F4DE9BD37A7 * (v15 >> 3) <= v12)
        sub_1002EAEB0();
      if (*(double *)(v14 + 184 * v12 + 20) < 0.0)
      {
LABEL_11:
        v16 = (uint64_t *)(v11 + 24 * v12);
        v17 = *v16;
        if (i && *(_DWORD *)(a1 + 6420) == 2 && *(double *)(v17 + 56) <= *(double *)(a1 + 6432))
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021A2660);
          v30 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            v31 = *(_QWORD *)(*v16 + 56);
            v32 = (*(_QWORD *)(v11 + 24 * v12 + 8) - *v16) >> 3;
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)&buf[4] = v31;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = 0x2E8BA2E8BA2E8BA3 * v32;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "@WsbDiscard, unknown, %{public}.1f, aps, %{public}ld", buf, 0x16u);
          }
          v7 = v69;
          i = v68;
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021A2660);
            v42 = *(_QWORD *)(*v16 + 56);
            v43 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v11 + 24 * v12 + 8) - *v16) >> 3);
            v80 = 134349312;
            *(_QWORD *)v81 = v42;
            *(_WORD *)&v81[8] = 2050;
            *(_QWORD *)&v81[10] = v43;
            LODWORD(v65) = 22;
            v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbDiscard, unknown, %{public}.1f, aps, %{public}ld", &v80, v65);
            sub_100512490("Generic", 1, 0, 2, "static Types::Wsb CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateScanBuffer(const Input &, const CLWifiService_Type::AccessPointGroups &, BOOL)", "%s\n", v44);
            if (v44 != buf)
              free(v44);
          }
          ++v66;
        }
        else
        {
          v18 = v11 + 24 * v12;
          v20 = *(_QWORD *)(v18 + 8);
          v19 = (uint64_t *)(v18 + 8);
          if (v7[6] + 0x2E8BA2E8BA2E8BA3 * ((v20 - v17) >> 3) <= (unint64_t)dword_10230CD68)
          {
            v25 = *v7;
            v24 = v7[1];
            v26 = v77;
            v27 = v78;
            if (0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 3) - 0x5555555555555555 * (((uint64_t)v27 - v26) >> 3) >= *((int *)sub_10132F064() + 2))
            {
              if (qword_1022A0050 != -1)
                dispatch_once(&qword_1022A0050, &stru_1021A2660);
              v33 = qword_1022A0058;
              if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
              {
                v34 = *((_DWORD *)sub_10132F064() + 2);
                v35 = *(_QWORD *)(*v16 + 56);
                v36 = 0x2E8BA2E8BA2E8BA3 * ((*v19 - *v16) >> 3);
                *(_DWORD *)buf = 67240704;
                *(_DWORD *)&buf[4] = v34;
                *(_WORD *)&buf[8] = 2050;
                *(_QWORD *)&buf[10] = v35;
                *(_WORD *)&buf[18] = 2050;
                *(_QWORD *)&buf[20] = v36;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "@WsbDiscard, max %{public}d WSB gropus reached, %{public}.1f, aps, %{public}ld", buf, 0x1Cu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                v7 = v69;
                if (qword_1022A0050 != -1)
                  dispatch_once(&qword_1022A0050, &stru_1021A2660);
                v45 = qword_1022A0058;
                v46 = *((_DWORD *)sub_10132F064() + 2);
                v47 = *(_QWORD *)(*v16 + 56);
                v48 = 0x2E8BA2E8BA2E8BA3 * ((*v19 - *v16) >> 3);
                v80 = 67240704;
                *(_DWORD *)v81 = v46;
                *(_WORD *)&v81[4] = 2050;
                *(_QWORD *)&v81[6] = v47;
                *(_WORD *)&v81[14] = 2050;
                *(_QWORD *)&v81[16] = v48;
                LODWORD(v65) = 28;
                v49 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 0, "@WsbDiscard, max %{public}d WSB gropus reached, %{public}.1f, aps, %{public}ld", &v80, v65);
                sub_100512490("Generic", 1, 0, 2, "static Types::Wsb CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateScanBuffer(const Input &, const CLWifiService_Type::AccessPointGroups &, BOOL)", "%s\n", v49);
                i = v68;
                if (v49 != buf)
                  free(v49);
              }
              else
              {
                v7 = v69;
                i = v68;
              }
            }
            else
            {
              v28 = v78;
              if ((unint64_t)v78 >= v79)
              {
                v29 = sub_100DC4DFC(&v77, v16);
                v7 = v69;
              }
              else
              {
                *v78 = 0;
                v28[1] = 0;
                v28[2] = 0;
                v7 = v69;
                sub_10055A7B8(v28, *v16, *v19, 0x2E8BA2E8BA2E8BA3 * ((*v19 - *v16) >> 3));
                v29 = (uint64_t)(v28 + 3);
              }
              v78 = (_QWORD *)v29;
              v37 = (_QWORD *)*v16;
              v38 = *v19;
              for (i = v68; v37 != (_QWORD *)v38; v37 += 11)
              {
                *(_QWORD *)buf = *v37;
                sub_1000AF824(v8, buf, buf);
              }
            }
          }
          else
          {
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021A2660);
            v21 = qword_1022A0058;
            if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
            {
              v22 = *(_QWORD *)(*v16 + 56);
              v23 = 0x2E8BA2E8BA2E8BA3 * ((*v19 - *v16) >> 3);
              *(_DWORD *)buf = 134349312;
              *(_QWORD *)&buf[4] = v22;
              *(_WORD *)&buf[12] = 2050;
              *(_QWORD *)&buf[14] = v23;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "@WsbDiscard, alsmax, %{public}.1f, aps, %{public}ld", buf, 0x16u);
            }
            v7 = v69;
            i = v68;
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0050 != -1)
                dispatch_once(&qword_1022A0050, &stru_1021A2660);
              v39 = *(_QWORD *)(*v16 + 56);
              v40 = 0x2E8BA2E8BA2E8BA3 * ((*v19 - *v16) >> 3);
              v80 = 134349312;
              *(_QWORD *)v81 = v39;
              *(_WORD *)&v81[8] = 2050;
              *(_QWORD *)&v81[10] = v40;
              LODWORD(v65) = 22;
              v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbDiscard, alsmax, %{public}.1f, aps, %{public}ld", &v80, v65);
              sub_100512490("Generic", 1, 0, 2, "static Types::Wsb CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateScanBuffer(const Input &, const CLWifiService_Type::AccessPointGroups &, BOOL)", "%s\n", v41);
              if (v41 != buf)
                free(v41);
            }
            ++v67;
          }
        }
      }
      v11 = *a2;
      v12 = ++v13;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v13);
    v50 = v66;
    if (v66 > 0)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v51 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v66;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, unknownaps, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v80 = 67240192;
        *(_DWORD *)v81 = v66;
        LODWORD(v65) = 8;
        v63 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, groupresult, unknownaps, %{public}d", &v80, v65);
        sub_100512490("Generic", 1, 0, 2, "static Types::Wsb CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateScanBuffer(const Input &, const CLWifiService_Type::AccessPointGroups &, BOOL)", "%s\n", v63);
        if (v63 != buf)
          free(v63);
        v50 = v66;
      }
      v75[0] = _NSConcreteStackBlock;
      v75[1] = 3221225472;
      v75[2] = sub_101136DF4;
      v75[3] = &unk_102146830;
      v76 = v50;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.groupresult"), v75);
    }
    if (v67 >= 1)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v52 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v67;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, alsmax, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v80 = 67240192;
        *(_DWORD *)v81 = v67;
        LODWORD(v65) = 8;
        v64 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, groupresult, alsmax, %{public}d", &v80, v65);
        sub_100512490("Generic", 1, 0, 2, "static Types::Wsb CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateScanBuffer(const Input &, const CLWifiService_Type::AccessPointGroups &, BOOL)", "%s\n", v64);
        if (v64 != buf)
          free(v64);
        v50 = v66;
      }
      v73[0] = _NSConcreteStackBlock;
      v73[1] = 3221225472;
      v73[2] = sub_101136E88;
      v73[3] = &unk_102146830;
      v74 = v67;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.groupresult"), v73);
      goto LABEL_68;
    }
    if (v50 >= 1)
    {
LABEL_68:
      v70[0] = _NSConcreteStackBlock;
      v70[1] = 3221225472;
      v70[2] = sub_101136F1C;
      v70[3] = &unk_102131FE8;
      v71 = v50;
      v72 = v67;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.groupresult"), v70);
    }
  }
  sub_101136FB4(v7, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 3) - 0x5555555555555555 * (((uint64_t)v78 - v77) >> 3));
  v53 = v77;
  v54 = v78;
  while ((_QWORD *)v53 != v54)
  {
    sub_101137730(v7, v53);
    v53 += 24;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A2660);
  v55 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 3);
    v57 = v7[6];
    v58 = *(_QWORD *)(a1 + 6432);
    *(_DWORD *)buf = 134349568;
    *(_QWORD *)&buf[4] = v56;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v57;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v58;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "@WsbReproc, update, groups, %{public}lu, unknownAPs, %{public}lu, deleteTo, %{public}0.1f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 3);
    v60 = v7[6];
    v61 = *(_QWORD *)(a1 + 6432);
    v80 = 134349568;
    *(_QWORD *)v81 = v59;
    *(_WORD *)&v81[8] = 2050;
    *(_QWORD *)&v81[10] = v60;
    *(_WORD *)&v81[18] = 2050;
    *(_QWORD *)&v81[20] = v61;
    LODWORD(v65) = 32;
    v62 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbReproc, update, groups, %{public}lu, unknownAPs, %{public}lu, deleteTo, %{public}0.1f", &v80, v65);
    sub_100512490("Generic", 1, 0, 2, "static Types::Wsb CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateScanBuffer(const Input &, const CLWifiService_Type::AccessPointGroups &, BOOL)", "%s\n", v62);
    if (v62 != buf)
      free(v62);
  }
  *(_QWORD *)buf = &v77;
  sub_10055C824((void ***)buf);
}

void sub_101136248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void **a43)
{
  void **v43;

  a43 = (void **)&a36;
  sub_10055C824(&a43);
  sub_10055C894(v43);
  _Unwind_Resume(a1);
}

uint64_t sub_1011362C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  void *__p;
  char v39;

  v4 = (_BYTE *)(a1 + 6448);
  result = (uint64_t)sub_1001307C4((_DWORD *)a2, a1);
  if (*v4 && (*(int *)(a1 + 6472) > 0 || *(int *)(a1 + 6476) > 0 || *(int *)(a1 + 6480) > 0))
  {
    sub_100221C84((__int128 *)(a1 + 6240), a1 + 6040, *(_DWORD *)(a1 + 6228), a1 + 1408, v4[46], (uint64_t)&v28, *(_DWORD **)(a1 + 6456));
    v25 = a2 + 6240;
    v26 = a2 + 6040;
    v27 = a2 + 6228;
    sub_101137530((uint64_t)&v25, &v28);
    if (v39 < 0)
      operator delete(__p);
    if (v37 < 0)
      operator delete(v36);
    result = sub_100182290(a1 + 1408);
    if ((_DWORD)result)
    {
      v6 = *(_OWORD *)(a1 + 1552);
      *(_OWORD *)(a2 + 5144) = *(_OWORD *)(a1 + 1536);
      *(_OWORD *)(a2 + 5160) = v6;
      *(_OWORD *)(a2 + 5176) = *(_OWORD *)(a1 + 1568);
      v7 = *(_OWORD *)(a1 + 1488);
      *(_OWORD *)(a2 + 5080) = *(_OWORD *)(a1 + 1472);
      *(_OWORD *)(a2 + 5096) = v7;
      v8 = *(_OWORD *)(a1 + 1520);
      *(_OWORD *)(a2 + 5112) = *(_OWORD *)(a1 + 1504);
      *(_OWORD *)(a2 + 5128) = v8;
      v9 = *(_OWORD *)(a1 + 1424);
      *(_OWORD *)(a2 + 5016) = *(_OWORD *)(a1 + 1408);
      *(_OWORD *)(a2 + 5032) = v9;
      v10 = *(_OWORD *)(a1 + 1456);
      *(_OWORD *)(a2 + 5048) = *(_OWORD *)(a1 + 1440);
      *(_QWORD *)(a2 + 5192) = *(_QWORD *)(a1 + 1584);
      *(_OWORD *)(a2 + 5064) = v10;
    }
    if (*(_BYTE *)(a1 + 1400))
    {
      v11 = (uint64_t *)(a1 + 1304);
      *(_QWORD *)&v28 = sub_100129380(a2 + 3248);
      v25 = *v11;
      v12 = sub_10009483C(&v28, &v25);
      if (v12)
      {
        v20 = sub_100219C3C((uint64_t)v11);
        return sub_100223BA8(a2 + 3248, v20);
      }
      else
      {
        sub_1019402B4(v12, v13, v14, v15, v16, v17, v18, v19, v21, v22, v23, v24, v25, v26, v27, v28, *((uint64_t *)&v28 + 1), v29, v30,
          v31,
          v32,
          v33,
          v34,
          v35);
        result = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/Logic/Policies/CLWifi1PostPositionCalculationStateUpdate.mm", 100, "operator()");
        __break(1u);
      }
    }
  }
  return result;
}

void sub_101136488(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_1011364C4(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  unint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  _BYTE v23[12];
  __int16 v24;
  _BYTE v25[10];
  int v26;
  uint8_t buf[24];
  uint64_t v28[5];
  __int128 v29;
  uint64_t v30;

  sub_1001307C4((_DWORD *)a3, a1);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A2660);
  v6 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 6360) - *(_QWORD *)(a1 + 6352)) >> 3);
    v8 = *a2;
    v9 = *(_DWORD *)(a1 + 6416);
    *(_DWORD *)buf = 134349568;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v8;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WsbAls, unknown, groups, %{public}ld, tags, %{public}d, %{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 6360) - *(_QWORD *)(a1 + 6352)) >> 3);
    v15 = *a2;
    v16 = *(_DWORD *)(a1 + 6416);
    *(_DWORD *)v23 = 134349568;
    *(_QWORD *)&v23[4] = v14;
    v24 = 1026;
    *(_DWORD *)v25 = v15;
    *(_WORD *)&v25[4] = 1026;
    *(_DWORD *)&v25[6] = v16;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbAls, unknown, groups, %{public}ld, tags, %{public}d, %{public}d", v23, 24);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsAllUnknown &) const", "%s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
  }
  if (*(_QWORD *)(a1 + 6360) != *(_QWORD *)(a1 + 6352) && *(_DWORD *)(a1 + 6416) == *a2)
  {
    sub_101135428(a1, (uint64_t *)(a1 + 6352), 1, buf);
    sub_100132440((void ***)(a3 + 6352));
    *(_OWORD *)(a3 + 6352) = *(_OWORD *)buf;
    *(_QWORD *)(a3 + 6368) = *(_QWORD *)&buf[16];
    memset(buf, 0, sizeof(buf));
    sub_1000A6464(a3 + 6376, v28);
    *(_OWORD *)(a3 + 6416) = v29;
    *(_QWORD *)(a3 + 6432) = v30;
    sub_100067AC4((uint64_t)v28);
    *(_QWORD *)v23 = buf;
    sub_10055C824((void ***)v23);
    if (*(_DWORD *)(a1 + 6420) == 2 && *(double *)(a3 + 6432) > 0.0)
    {
      *(_DWORD *)(a3 + 6420) = 0;
      *(_QWORD *)(a3 + 6432) = 0;
    }
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v10 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 6360) - *(_QWORD *)(a3 + 6352)) >> 3);
      v12 = *(_QWORD *)(a3 + 6400);
      v13 = *(_DWORD *)(a1 + 6420);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 1026;
      LODWORD(v28[0]) = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "@WsbReproc, remain, groups, %{public}lu, unknownAPs, %{public}lu, pass, %{public}d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 6360) - *(_QWORD *)(a3 + 6352)) >> 3);
      v19 = *(_QWORD *)(a3 + 6400);
      v20 = *(_DWORD *)(a1 + 6420);
      *(_DWORD *)v23 = 134349568;
      *(_QWORD *)&v23[4] = v18;
      v24 = 2050;
      *(_QWORD *)v25 = v19;
      *(_WORD *)&v25[8] = 1026;
      v26 = v20;
      LODWORD(v22) = 28;
      v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WsbReproc, remain, groups, %{public}lu, unknownAPs, %{public}lu, pass, %{public}d", v23, v22);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsAllUnknown &) const", "%s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
  }
}

void sub_101136968(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_101136988(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  char *v23;
  uint8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  __int128 v29;
  uint64_t v30;
  uint8_t buf[24];
  uint64_t v32[5];
  __int128 v33;
  uint64_t v34;

  v5 = sub_1001307C4((_DWORD *)a2, a1);
  if (!*(_BYTE *)(a1 + 6448))
    return;
  if (0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 1640) - *(_QWORD *)(a1 + 1632)) >> 3) != 0xAAAAAAAAAAAAAAABLL
                                                                                                 * ((uint64_t)(*(_QWORD *)(a1 + 1080) - *(_QWORD *)(a1 + 1072)) >> 3))
  {
    sub_1019403FC((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v24, v25, v26, v27, (uint64_t)v28, v29, *((uint64_t *)&v29 + 1), v30, *(uint64_t *)buf, *(uint64_t *)&buf[8], *(uint64_t *)&buf[16],
      v32[0],
      v32[1],
      v32[2],
      v32[3],
      v32[4]);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/Logic/Policies/CLWifi1PostPositionCalculationStateUpdate.mm", 147, "operator()");
    __break(1u);
    goto LABEL_17;
  }
  sub_101135428(a1, (uint64_t *)(a1 + 1072), 0, buf);
  sub_100132440((void ***)(a2 + 6352));
  *(_OWORD *)(a2 + 6352) = *(_OWORD *)buf;
  *(_QWORD *)(a2 + 6368) = *(_QWORD *)&buf[16];
  memset(buf, 0, sizeof(buf));
  sub_1000A6464(a2 + 6376, v32);
  *(_OWORD *)(a2 + 6416) = v33;
  *(_QWORD *)(a2 + 6432) = v34;
  sub_100067AC4((uint64_t)v32);
  v28 = buf;
  sub_10055C824((void ***)&v28);
  if (!*(_QWORD *)(a2 + 6400))
    return;
  if (*(_BYTE *)(a1 + 1096))
  {
    if (!sub_100182520(a1 + 3248))
    {
      v13 = 0x40C5180000000000;
      goto LABEL_10;
    }
    if (*(_BYTE *)(a1 + 1096))
      goto LABEL_11;
  }
  if (!sub_100182520(a1 + 3248))
    goto LABEL_11;
  v13 = 0x402E000000000000;
LABEL_10:
  *(_BYTE *)(a2 + 1656) = 1;
  *(_QWORD *)(a2 + 6424) = v13;
LABEL_11:
  v2 = &qword_1022A0000;
  if (qword_1022A0050 != -1)
LABEL_17:
    dispatch_once(&qword_1022A0050, &stru_1021A2660);
  v14 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(unsigned __int8 *)(a2 + 1656);
    v16 = *(_QWORD *)(a2 + 6400);
    v17 = *(unsigned __int8 *)(a1 + 1096);
    v18 = (int)*(double *)(a2 + 6424);
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&buf[4] = v15;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v16;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v17;
    LOWORD(v32[0]) = 1026;
    *(_DWORD *)((char *)v32 + 2) = v18;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "WsbTimer, set, %{public}d, unknown, %{public}ld, wasempty, %{public}d, delay, %{public}d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v2[10] != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v19 = *(unsigned __int8 *)(a2 + 1656);
    v20 = *(_QWORD *)(a2 + 6400);
    v21 = *(unsigned __int8 *)(a1 + 1096);
    v22 = (int)*(double *)(a2 + 6424);
    LODWORD(v28) = 67240960;
    HIDWORD(v28) = v19;
    LOWORD(v29) = 2050;
    *(_QWORD *)((char *)&v29 + 2) = v20;
    WORD5(v29) = 1026;
    HIDWORD(v29) = v21;
    LOWORD(v30) = 1026;
    *(_DWORD *)((char *)&v30 + 2) = v22;
    LODWORD(v25) = 30;
    v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbTimer, set, %{public}d, unknown, %{public}ld, wasempty, %{public}d, delay, %{public}d", &v28, v25);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
}

void sub_101136CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101136D10(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void **v5;
  __int128 *v6;
  __int128 v7;

  if (*(_BYTE *)(a1 + 88))
  {
    v4 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
    *(_OWORD *)a1 = v4;
    v5 = (void **)(a1 + 24);
    v6 = (__int128 *)(a2 + 24);
    if (*(char *)(a1 + 47) < 0)
      operator delete(*v5);
    v7 = *v6;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)v5 = v7;
    *(_BYTE *)(a2 + 47) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    sub_101137630(a1 + 48, a2 + 48);
  }
  else
  {
    sub_1011376C4(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 88) = 1;
  }
  return a1;
}

uint64_t sub_101136DAC(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(_QWORD *)(a1 + 64) = v2;
      operator delete(v2);
    }
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

NSDictionary *sub_101136DF4(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("numInGroup");
  v3[0] = CFSTR("discard:unknownaps");
  v2[0] = CFSTR("groupResult");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

NSDictionary *sub_101136E88(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("numInGroup");
  v3[0] = CFSTR("discard:alsmax");
  v2[0] = CFSTR("groupResult");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

NSDictionary *sub_101136F1C(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[0] = CFSTR("groupResult");
  v2[1] = CFSTR("numInGroup");
  v3[0] = CFSTR("discard");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32)));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

void **sub_101136FB4(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_100259694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1002596A8((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    sub_100935C24(a1, v7);
    return sub_100935DB4(v7);
  }
  return result;
}

void sub_101137050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100935DB4((void **)va);
  _Unwind_Resume(a1);
}

void sub_101137064(_DWORD **a1)
{
  NSObject *v2;
  double v3;
  NSObject *v4;
  int v5;
  double v6;
  int v7;
  double v8;
  char *v9;
  double v10;
  char *v11;
  uint64_t v12;
  int v13;
  _QWORD v14[3];
  uint8_t buf[4];
  _QWORD v16[204];

  if (*((double *)*a1 + 9) < *((double *)*a1 + 1))
  {
    *((_QWORD *)*a1 + 9) = a1[2];
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v2 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *((double *)*a1 + 9) - *((double *)*a1 + 1);
      *(_DWORD *)buf = 134349056;
      *(double *)v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "@EmerTick, alsreq, %{public}.1f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v10 = *((double *)*a1 + 9) - *((double *)*a1 + 1);
      v13 = 134349056;
      *(double *)v14 = v10;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerTick, alsreq, %{public}.1f", &v13, 12);
      sub_100512490("Generic", 1, 0, 2, "auto CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)::(anonymous class)::operator()() const", "%s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  **a1 = 7;
  *a1[1] = 1;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A2660);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a1[1];
    v6 = *((double *)*a1 + 9) - *((double *)*a1 + 1);
    *(_DWORD *)buf = 67240448;
    LODWORD(v16[0]) = v5;
    WORD2(v16[0]) = 2050;
    *(double *)((char *)v16 + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@EmerFlow, AlsRequest, queryType, %{public}d, tte, %{public}.1f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v7 = *a1[1];
    v8 = *((double *)*a1 + 9) - *((double *)*a1 + 1);
    v13 = 67240448;
    LODWORD(v14[0]) = v7;
    WORD2(v14[0]) = 2050;
    *(double *)((char *)v14 + 6) = v8;
    LODWORD(v12) = 18;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerFlow, AlsRequest, queryType, %{public}d, tte, %{public}.1f", &v13, v12);
    sub_100512490("Generic", 1, 0, 2, "auto CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)::(anonymous class)::operator()() const", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
}

void sub_1011373E0(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1001307C4(a2, a1);
  if (*(_BYTE *)(a1 + 6448))
  {
    if (sub_100217A84((uint64_t)(a2 + 1510)))
      sub_10003A974((uint64_t)(a2 + 1510), 5, 7u, *(double *)(a1 + 6456));
    sub_10001947C(3u);
  }
}

void sub_101137450(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_101137468(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_101137494(uint64_t a1, char a2, int a3, char a4, __int128 *a5, uint64_t a6, double a7)
{
  uint64_t v9;
  __int128 v10;

  *(_BYTE *)a1 = a2;
  *(double *)(a1 + 8) = a7;
  *(_DWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 20) = a4;
  v9 = a1 + 24;
  if (*((char *)a5 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)v9, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v10 = *a5;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)a5 + 2);
    *(_OWORD *)v9 = v10;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a6 + 32))
  {
    *(_BYTE *)(a1 + 48) = *(_BYTE *)a6;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a6 + 8);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a6 + 24);
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    *(_QWORD *)(a6 + 24) = 0;
    *(_BYTE *)(a1 + 80) = 1;
  }
  return a1;
}

__n128 sub_101137530(uint64_t a1, __int128 *a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void **v18;
  __n128 result;

  v4 = *(_OWORD **)a1;
  v5 = *a2;
  v6 = a2[2];
  v4[1] = a2[1];
  v4[2] = v6;
  *v4 = v5;
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  *(_OWORD *)((char *)v4 + 89) = *(__int128 *)((char *)a2 + 89);
  v4[4] = v8;
  v4[5] = v9;
  v4[3] = v7;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *((_QWORD *)a2 + 14);
  *(_BYTE *)(v10 + 8) = *((_BYTE *)a2 + 120);
  *(_QWORD *)v10 = v11;
  v12 = (void **)(v10 + 16);
  v13 = a2 + 8;
  if (*(char *)(v10 + 39) < 0)
    operator delete(*v12);
  v14 = *v13;
  *(_QWORD *)(v10 + 32) = *((_QWORD *)v13 + 2);
  *(_OWORD *)v12 = v14;
  *((_BYTE *)a2 + 151) = 0;
  *((_BYTE *)a2 + 128) = 0;
  v15 = *(__int128 *)((char *)a2 + 212);
  v16 = *(__int128 *)((char *)a2 + 200);
  v17 = *(__int128 *)((char *)a2 + 184);
  *(_OWORD *)(v10 + 56) = *(__int128 *)((char *)a2 + 168);
  *(_OWORD *)(v10 + 72) = v17;
  *(_OWORD *)(v10 + 88) = v16;
  *(_OWORD *)(v10 + 100) = v15;
  *(_OWORD *)(v10 + 40) = *(__int128 *)((char *)a2 + 152);
  v18 = (void **)(v10 + 120);
  if (*(char *)(v10 + 143) < 0)
    operator delete(*v18);
  result = *(__n128 *)((char *)a2 + 232);
  *(_QWORD *)(v10 + 136) = *((_QWORD *)a2 + 31);
  *(__n128 *)v18 = result;
  *((_BYTE *)a2 + 255) = 0;
  *((_BYTE *)a2 + 232) = 0;
  **(_DWORD **)(a1 + 16) = *((_DWORD *)a2 + 64);
  return result;
}

__n128 sub_101137630(uint64_t a1, uint64_t a2)
{
  __n128 result;
  void *v4;

  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      result.n128_u64[0] = sub_100006898(a1 + 8, (__n128 *)(a2 + 8)).n128_u64[0];
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v4 = *(void **)(a1 + 8);
    if (v4)
    {
      *(_QWORD *)(a1 + 16) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    result = *(__n128 *)(a2 + 8);
    *(__n128 *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

__n128 sub_1011376C4(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)a1 = v2;
  result = *(__n128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(__n128 *)(a1 + 24) = result;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    result = *(__n128 *)((char *)a2 + 56);
    *(__n128 *)(a1 + 56) = result;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 9) = 0;
    *(_BYTE *)(a1 + 80) = 1;
  }
  return result;
}

void **sub_101137730(uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_1002596A8((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_100935C24(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = sub_100935DB4(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_101137858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100935DB4((void **)va);
  _Unwind_Resume(a1);
}

void sub_101137894()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_101137930(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_101137948()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1011379D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_1011379EC()
{
  dword_10230CD68 = 450;
}

uint64_t sub_101137D40(uint64_t a1, char *a2, int a3, uint64_t a4, float a5, uint64_t a6, int a7, uint64_t a8)
{
  void (***v15)(_QWORD, uint64_t, _QWORD *);
  _QWORD *v16;
  uint64_t v17;
  std::string __p;
  uint64_t v20;
  __int16 v21;
  std::string v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  _QWORD v26[3];
  _QWORD *v27;

  *(_QWORD *)a1 = off_1021A2690;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 16), a2);
  sub_10055D44C(a1 + 40, a2, 0, 1);
  *(_BYTE *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(float *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 68) = a7;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a4;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a8;
  v24 = a1 + 40;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  v25 = 256;
  if (a3)
  {
    sub_1015A2E04(&__p, "");
    v21 = 0;
    v20 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100115CE4(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v23 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v22 = __p;
      v23 = 0;
    }
    std::string::assign(&v22, ":memory:");
    operator new();
  }
  v15 = *(void (****)(_QWORD, uint64_t, _QWORD *))(a1 + 80);
  v26[0] = off_10213DF98;
  v26[1] = sub_101138050;
  v27 = v26;
  (**v15)(v15, a1, v26);
  v16 = v27;
  if (v27 == v26)
  {
    v17 = 4;
    v16 = v26;
    goto LABEL_11;
  }
  if (v27)
  {
    v17 = 5;
LABEL_11:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 24))(a1 + 40);
  return a1;
}

void sub_101137F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v35;

  if (a15 < 0)
    operator delete(__p);
  sub_10187E514((uint64_t)&a25);
  sub_10055D4D0(v32);
  if (*(char *)(v31 + 39) < 0)
    operator delete(*v33);
  v35 = *(_QWORD *)(v31 + 8);
  *(_QWORD *)(v31 + 8) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  _Unwind_Resume(a1);
}

uint64_t sub_101138050(uint64_t a1, int a2)
{
  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  else
    return 0;
}

uint64_t sub_101138068(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1021A2690;
  v2 = a1 + 40;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  v3 = *(void **)(a1 + 72);
  if (v3)
  {

    *(_QWORD *)(a1 + 72) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  sub_10055D4D0(v2);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

BOOL sub_101138108(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;

  v2 = a1 + 40;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  v3 = sub_1000892F8(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_101138170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101138184(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  void *__p[5];
  __int16 v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  _QWORD *v14;

  v3 = a1 + 40;
  v2 = *(_QWORD *)(a1 + 40);
  __p[3] = (void *)(a1 + 40);
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 40);
  v8 = 256;
  if (!sub_1000892F8(a1))
  {
    sub_1015A2E04(__p, "");
    sub_1011384BC(a1);
  }
  if (*(_QWORD *)(a1 + 72))
    __assert_rtn("setDatabaseAccessible", "CLActivityRecorderBaseDb.mm", 90, "fInMemoryTransaction == nil");
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021A26E0);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v5 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v5 = (_QWORD *)*v5;
    *(_DWORD *)buf = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return 1;
}

void sub_10113847C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_10187E514((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1011384BC(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  std::string *p_p;
  const char *v5;
  std::string *v6;
  _WORD v7[8];
  std::string __p;
  std::string v9;
  char __str[47];

  if (*(_QWORD *)(a1 + 72))
    goto LABEL_18;
  LODWORD(v2) = *(char *)(a1 + 39);
  if ((v2 & 0x80000000) != 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
    LODWORD(v2) = *(char *)(a1 + 39);
    if ((v2 & 0x80000000) != 0)
    {
      v2 = *(_QWORD *)(a1 + 24);
      goto LABEL_6;
    }
  }
  else
  {
    __p = *(std::string *)(a1 + 16);
  }
  v2 = v2;
LABEL_6:
  if (v2 >= 0x1A)
  {
    std::string::basic_string(&v9, (const std::string *)(a1 + 16), 0, 0x1AuLL, (std::allocator<char> *)v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v9;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A26E0);
    v3 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v9.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "DB name length exceeds allowed size of OS transaction name. Truncating", (uint8_t *)&v9, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&v9, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A26E0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, &v9, 1628, &_mh_execute_header, qword_10229FC78, 16, "DB name length exceeds allowed size of OS transaction name. Truncating", v7, 2);
      v6 = (std::string *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityRecorderBaseDb::initDb(std::string)", "%s\n", v5);
      if (v6 != &v9)
        free(v6);
    }
  }
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  snprintf(__str, 0x2FuLL, "%s.InMemoryTransaction", (const char *)p_p);
  *(_QWORD *)(a1 + 72) = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", __str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_18:
  operator new();
}

void sub_101138934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_1011389B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10063448C(*(char **)(a1 + 8), a2);
}

void sub_1011389B8(uint64_t a1, const char *a2, uint64_t *a3, _QWORD *a4)
{
  sub_1006409E8(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

void sub_1011389C0(uint64_t a1, const char *a2, uint64_t *a3)
{
  sub_100640F84(*(_QWORD *)(a1 + 8), a2, a3);
}

BOOL sub_1011389C8(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, char *a5, double a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 8);
  return v6 && (v7 = *(_QWORD *)(a2 + 8)) != 0 && sub_100634B78(v6, v7, a3, a4, a5, a6);
}

uint64_t sub_1011389E4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  void *p_p;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[8];
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;

  (*(void (**)(void **__return_ptr))(*a1 + 32))(&__p);
  if ((char)v17 < 0)
  {
    v10 = v16;
    operator delete(__p);
    if (v10)
      goto LABEL_3;
LABEL_19:
    sub_1019406A8();
  }
  if (!v17)
    goto LABEL_19;
LABEL_3:
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_1000892F8((uint64_t)a1))
  {
    sub_10001E638(a1[1]);
    CFAbsoluteTimeGetCurrent();
    sub_100263E50((uint64_t)&v12);
    v4 = sub_100263F7C(&v13, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 32))(&__p, a1);
    if ((v17 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v17 & 0x80u) == 0)
      v6 = v17;
    else
      v6 = v16;
    v7 = sub_100263F7C(v4, (uint64_t)p_p, v6);
    sub_100263F7C(v7, (uint64_t)" WHERE startTime < ?", 20);
    if ((char)v17 < 0)
      operator delete(__p);
    v8 = a1[1];
    std::stringbuf::str(&__p, v14);
    if ((v17 & 0x80u) == 0)
      v9 = (char *)&__p;
    else
      v9 = (char *)__p;
    sub_1000CDA68(v8, v9);
  }
  return -1;
}

void sub_101138DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_101138E44(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v8;
  void *__p[2];
  unsigned __int8 v10;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];

  (*(void (**)(void **__return_ptr))(*a1 + 32))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_10194081C();
  }
  v8 = v11[1];
  operator delete(v11[0]);
  if (!v8)
    goto LABEL_18;
LABEL_3:
  if (sub_1000892F8((uint64_t)a1))
  {
    sub_100263E50((uint64_t)v11);
    v2 = sub_100263F7C(&v12, (uint64_t)"SELECT COUNT(*) FROM ", 21);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 32))(__p, a1);
    if ((v10 & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    if ((v10 & 0x80u) == 0)
      v4 = v10;
    else
      v4 = (uint64_t)__p[1];
    sub_100263F7C(v2, (uint64_t)v3, v4);
    if ((char)v10 < 0)
      operator delete(__p[0]);
    v5 = a1[1];
    std::stringbuf::str(__p, v13);
    if ((v10 & 0x80u) == 0)
      v6 = (char *)__p;
    else
      v6 = (char *)__p[0];
    sub_1000CDA68(v5, v6);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_101139070(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 + 5;
  (*(void (**)(_QWORD *))(a1[5] + 16))(a1 + 5);
  (*(void (**)(_QWORD *))(*a1 + 56))(a1);
  return (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
}

void sub_1011390D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1011390EC(_QWORD *a1)
{
  _BOOL8 result;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *__p[2];
  unsigned __int8 v10;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];

  (*(void (**)(void **__return_ptr))(*a1 + 32))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_101940990();
  }
  v8 = v11[1];
  operator delete(v11[0]);
  if (!v8)
    goto LABEL_18;
LABEL_3:
  result = sub_1000892F8((uint64_t)a1);
  if (result)
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 32))(__p, a1);
    if ((v10 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v10 & 0x80u) == 0)
      v5 = v10;
    else
      v5 = (uint64_t)__p[1];
    sub_100263F7C(v3, (uint64_t)v4, v5);
    if ((char)v10 < 0)
      operator delete(__p[0]);
    v6 = a1[1];
    std::stringbuf::str(__p, v13);
    if ((v10 & 0x80u) == 0)
      v7 = (char *)__p;
    else
      v7 = (char *)__p[0];
    sub_1000CDA68(v6, v7);
  }
  return result;
}

uint64_t sub_101139308(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

void sub_101139310(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

_QWORD *sub_10113933C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __CFNotificationCenter *DarwinNotifyCenter;
  id v6;
  unsigned int v7;
  NSObject *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  uint8_t *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  _BOOL4 v25;
  __int16 v26;
  _BOOL4 v27;
  uint8_t buf[4];
  _BOOL4 v29;
  __int16 v30;
  _BOOL4 v31;

  *a1 = a2;
  a1[1] = 0;
  sub_100197040();
  if ((sub_1000C4240() & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#CLEFUM,not supported for this device", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return a1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    LOWORD(v24) = 0;
    v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#CLEFUM,not supported for this device", &v24, 2);
    v12 = v11;
    sub_100512490("Generic", 1, 0, 2, "CLEmergencyFollowUpManager::CLEmergencyFollowUpManager(id<CLIntersiloUniverse>)", "%s\n", v10);
LABEL_27:
    if (v12 != buf)
      free(v12);
    return a1;
  }
  if (objc_opt_class(SOSUtilities, v3) && objc_opt_class(FLFollowUpController, v4))
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_101139850, SOSSettingsResetFollowUpStateChangedNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v6 = +[SOSUtilities getSettingsResetFollowUpState](SOSUtilities, "getSettingsResetFollowUpState");
    v7 = +[SOSUtilities isCallWithSideButtonPressesEnabled](SOSUtilities, "isCallWithSideButtonPressesEnabled");
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240448;
      v29 = (int)v6;
      v30 = 1026;
      v31 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLEFUM,on construction,followUpState,%{public}d,multipressEnabled,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A2740);
      v24 = 67240448;
      v25 = (int)v6;
      v26 = 1026;
      v27 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#CLEFUM,on construction,followUpState,%{public}d,multipressEnabled,%{public}d", &v24, 14);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyFollowUpManager::CLEmergencyFollowUpManager(id<CLIntersiloUniverse>)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    sub_101139858((uint64_t)a1, (uint64_t)v6);
    return a1;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A2740);
  v13 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240448;
    v29 = objc_opt_class(SOSUtilities, v14) == 0;
    v30 = 1026;
    v31 = objc_opt_class(FLFollowUpController, v15) == 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#CLEFUM,not linked to required libraries,SOS,%{public}d,CFU,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v18 = qword_1022A0088;
    v24 = 67240448;
    v25 = objc_opt_class(SOSUtilities, v17) == 0;
    v26 = 1026;
    v27 = objc_opt_class(FLFollowUpController, v19) == 0;
    v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 16, "#CLEFUM,not linked to required libraries,SOS,%{public}d,CFU,%{public}d", &v24, 14);
    v12 = v21;
    sub_100512490("Generic", 1, 0, 0, "CLEmergencyFollowUpManager::CLEmergencyFollowUpManager(id<CLIntersiloUniverse>)", "%s\n", v20);
    goto LABEL_27;
  }
  return a1;
}

void sub_101139850(uint64_t a1, id *a2)
{
  sub_101139C80(a2);
}

void sub_101139858(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  char v9;
  char v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  uint8_t buf[8];
  std::__shared_weak_count *v22;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A2740);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v5;
    LOWORD(v22) = 1026;
    *(_DWORD *)((char *)&v22 + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLEFUM,handleFollowUpStateChange,state changed from,%{public}d,to,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v14 = *(_QWORD *)(a1 + 8);
    v18[0] = 67240448;
    v18[1] = v14;
    v19 = 1026;
    v20 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#CLEFUM,handleFollowUpStateChange,state changed from,%{public}d,to,%{public}d", v18, 14);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::handleFollowUpStateChange(const SOSSettingsResetFollowUpState)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  *(_QWORD *)(a1 + 8) = a2;
  switch(a2)
  {
    case 0:
    case 4:
      return;
    case 1:
      sub_101139EE4();
      return;
    case 2:
      sub_1001E4804(buf);
      LOBYTE(v18[0]) = 0;
      v9 = sub_1001E48E4(*(uint64_t *)buf, (uint64_t)CFSTR("SOSCFULocalized"), (BOOL *)v18);
      if (LOBYTE(v18[0]))
        v10 = v9;
      else
        v10 = 0;
      v11 = v22;
      if (!v22)
        goto LABEL_24;
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if ((v10 & 1) == 0)
          goto LABEL_25;
      }
      else
      {
LABEL_24:
        if ((v10 & 1) == 0)
LABEL_25:
          sub_101139EE4();
      }
      return;
    case 3:
      sub_10113A724();
      return;
    default:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A2740);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#CLEFUM,handleFollowUpStateChange,unexpected FollowUp state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A2740);
        LOWORD(v18[0]) = 0;
        LODWORD(v17) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEFUM,handleFollowUpStateChange,unexpected FollowUp state", v18, v17);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyFollowUpManager::handleFollowUpStateChange(const SOSSettingsResetFollowUpState)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      return;
  }
}

void sub_101139C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

const void *sub_101139C3C(const void *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, SOSSettingsResetFollowUpStateChangedNotification, 0);
  return a1;
}

void sub_101139C80(id *a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = objc_msgSend(objc_msgSend(*a1, "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101139CE8;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_101139CE8(uint64_t a1)
{
  uint64_t v1;
  id v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = +[SOSUtilities getSettingsResetFollowUpState](SOSUtilities, "getSettingsResetFollowUpState");
  if (v2 == *(id *)(v1 + 8))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      v8 = (int)v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#CLEFUM,handleFollowUpStateChange,state has not changed,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A2740);
      v6[0] = 67240192;
      v6[1] = (_DWORD)v2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#CLEFUM,handleFollowUpStateChange,state has not changed,%{public}d", v6, 8);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::handleFollowUpStateChange()_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    sub_101139858(v1, (uint64_t)v2);
  }
}

void sub_101139EE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  CFBundleRef v3;
  __CFBundle *v4;
  uint64_t v5;
  const __CFString *v6;
  const __CFString *v7;
  NSObject *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  NSObject *v19;
  const void *v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  int v31;
  const __CFString *v32;
  uint8_t buf[4];
  const __CFString *v34;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A2740);
  v0 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#CLEFUM,postFollowUp,posting FollowUp", buf, 2u);
  }
  v1 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v1)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    LOWORD(v31) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#CLEFUM,postFollowUp,posting FollowUp", &v31, 2);
    v23 = (uint8_t *)v22;
    v1 = sub_100512490("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::postFollowUp()", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  v3 = sub_10113A8F0(v1, v2);
  if (v3)
  {
    v4 = v3;
    v5 = sub_1001AC584();
    v6 = sub_1001AC8C8(v5, v4);
    if (!v6)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A2740);
      v19 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#CLEFUM,postFollowUp,unable to get preferred language", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A2740);
        LOWORD(v31) = 0;
        LODWORD(v30) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEFUM,postFollowUp,unable to get preferred language", &v31, v30);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyFollowUpManager::postFollowUp()", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      v20 = v4;
      goto LABEL_43;
    }
    v7 = v6;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      v34 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLEFUM,postFollowUp,preferred localization language,%{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A2740);
      v31 = 138477827;
      v32 = v7;
      LODWORD(v30) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#CLEFUM,postFollowUp,preferred localization language,%{private}@", &v31, v30);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::postFollowUp()", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    v9 = (const void *)CFBundleCopyLocalizedStringForLocalization(v4, CFSTR("SOS_SETTINGS_RESET_FOLLOW_UP_TITLE"), 0, 0, v7);
    v10 = (const void *)CFBundleCopyLocalizedStringForLocalization(v4, CFSTR("SOS_SETTINGS_RESET_FOLLOW_UP_BODY"), 0, 0, v7);
    v11 = CFBundleCopyLocalizedStringForLocalization(v4, CFSTR("SOS_SETTINGS_RESET_FOLLOW_UP_REDIRECT_ACTION_TITLE"), 0, 0, v7);
    CFRelease(v4);
    CFRelease(v7);
    if (v9 && v10 && v11)
    {
      v12 = objc_alloc_init((Class)FLFollowUpItem);
      objc_msgSend(v12, "setUniqueIdentifier:", CFSTR("com.apple.SOS.settingsReset"));
      objc_msgSend(v12, "setGroupIdentifier:", FLGroupIdentifierDevice);
      objc_msgSend(v12, "setDisplayStyle:", 2);
      objc_msgSend(v12, "setTitle:", v9);
      objc_msgSend(v12, "setInformativeText:", v10);
      v13 = objc_alloc_init((Class)NSMutableArray);
      v14 = (void *)SOSSettingsURLBaseString;
      v15 = objc_msgSend(SOSSettingsURLSourceKey, "UTF8String");
      objc_msgSend(v13, "addObject:", +[FLFollowUpAction actionWithLabel:url:](FLFollowUpAction, "actionWithLabel:url:", v11, +[NSURL URLWithString:](NSURL, "URLWithString:", objc_msgSend(v14, "stringByAppendingFormat:", CFSTR("&%s=%s"), v15, objc_msgSend(SOSSettingsURLSourceSettingsResetFollowUp, "UTF8String")))));
      objc_msgSend(v12, "setActions:", v13);
      objc_msgSend(objc_msgSend(objc_alloc((Class)FLFollowUpController), "initWithClientIdentifier:", CFSTR("com.apple.locationd.emergency")), "postFollowUpItem:completion:", v12, &stru_1021A2700);
      CFRelease(v9);
      CFRelease(v10);
LABEL_42:
      v20 = (const void *)v11;
LABEL_43:
      CFRelease(v20);
      return;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v21 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#CLEFUM,postFollowUp,failed to retrieve localized strings", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A2740);
      LOWORD(v31) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEFUM,postFollowUp,failed to retrieve localized strings", &v31, v30);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyFollowUpManager::postFollowUp()", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    if (v9)
      CFRelease(v9);
    if (v10)
      CFRelease(v10);
    if (v11)
      goto LABEL_42;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v16 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#CLEFUM,postFollowUp,failed to create SOS bundle", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A2740);
      LOWORD(v31) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEFUM,postFollowUp,failed to create SOS bundle", &v31, v30);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyFollowUpManager::postFollowUp()", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

id sub_10113A724()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A2740);
  v0 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#CLEFUM,clearFollowUp,clearing FollowUp", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#CLEFUM,clearFollowUp,clearing FollowUp", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::clearFollowUp()", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return objc_msgSend(objc_msgSend(objc_alloc((Class)FLFollowUpController), "initWithClientIdentifier:", CFSTR("com.apple.locationd.emergency")), "clearPendingFollowUpItemsWithUniqueIdentifiers:completion:", +[NSArray arrayWithObject:](NSArray, "arrayWithObject:", CFSTR("com.apple.SOS.settingsReset")), &stru_1021A2720);
}

CFBundleRef sub_10113A8F0(uint64_t a1, uint64_t a2)
{
  NSBundle *v2;
  const __CFURL *v3;
  const __CFURL *v4;
  CFBundleRef v5;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint8_t *v10;
  _QWORD v11[2];
  uint8_t buf[1640];

  v2 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(SOSUtilities, a2));
  if (!v2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#CLEFUM,createSOSBundle,unable to retrieve SOS bundle", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEFUM,createSOSBundle,unable to retrieve SOS bundle", v11, 2, v11[0]);
    goto LABEL_21;
  }
  v3 = CFURLCreateWithString(kCFAllocatorDefault, (CFStringRef)-[NSURL absoluteString](-[NSBundle bundleURL](v2, "bundleURL"), "absoluteString"), 0);
  if (v3)
  {
    v4 = v3;
    v5 = CFBundleCreate(kCFAllocatorDefault, v3);
    CFRelease(v4);
    return v5;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A2740);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#CLEFUM,createSOSBundle,failed to create SOS bundle URL", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEFUM,createSOSBundle,failed to create SOS bundle URL", v11, 2, v11[0]);
LABEL_21:
    v10 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "CFBundleRef CLEmergencyFollowUpManager::createSOSBundle()", "%s\n", v8);
    if (v10 != buf)
      free(v10);
  }
  return 0;
}

void sub_10113ABD4(id a1, BOOL a2, NSError *a3)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v8;
  const char *v9;
  char *v10;
  const char *v11;
  char *v12;
  int v13;
  NSError *v14;
  _OWORD buf[102];

  if (a2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#CLEFUM,postFollowUp,posted FollowUp successfully", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A2740);
      LOWORD(v13) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#CLEFUM,postFollowUp,posted FollowUp successfully", &v13, 2);
      v10 = (char *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::postFollowUp()_block_invoke", "%s\n", v9);
      if (v10 != (char *)buf)
        free(v10);
    }
    +[SOSUtilities setSettingsResetFollowUpState:](SOSUtilities, "setSettingsResetFollowUpState:", 2);
    sub_1001E4804(buf);
    LOBYTE(v13) = 1;
    sub_10011B81C(*(uint64_t *)&buf[0], CFSTR("SOSCFULocalized"), &v13);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
    if (*((_QWORD *)&buf[0] + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 138543362;
      *(_QWORD *)((char *)buf + 4) = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#CLEFUM,postFollowUp,failed to post FollowUp,error,%{public}@", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A2740);
      v13 = 138543362;
      v14 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEFUM,postFollowUp,failed to post FollowUp,error,%{public}@", &v13, 12);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyFollowUpManager::postFollowUp()_block_invoke", "%s\n", v11);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
}

void sub_10113AF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10113AF34(id a1, BOOL a2, NSError *a3)
{
  NSObject *v3;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  NSError *v11;
  uint8_t buf[4];
  NSError *v13;

  if (a2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#CLEFUM,clearFollowUp,cleared FollowUp successfully", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A2740);
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#CLEFUM,clearFollowUp,cleared FollowUp successfully", &v10, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::clearFollowUp()_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    +[SOSUtilities setSettingsResetFollowUpState:](SOSUtilities, "setSettingsResetFollowUpState:", 4);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A2740);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#CLEFUM,clearFollowUp,failed to clear FollowUp,error,%{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A2740);
      v10 = 138543362;
      v11 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEFUM,clearFollowUp,failed to clear FollowUp,error,%{public}@", &v10, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyFollowUpManager::clearFollowUp()_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_10113B21C(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_10113B248(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  *(_QWORD *)a1 = a2;
  v3 = objc_msgSend(objc_msgSend(a2, "silo"), "newTimer");
  *(_OWORD *)(a1 + 24) = xmmword_101C42630;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 40) = unk_101C42640;
  *(_OWORD *)(a1 + 56) = xmmword_101C42650;
  *(_OWORD *)(a1 + 68) = *(__int128 *)((char *)&xmmword_101C42650 + 12);
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  if (objc_opt_class(HKHealthStore, v4)
    && +[HKHealthStore isHealthDataAvailable](HKHealthStore, "isHealthDataAvailable"))
  {
    *(_QWORD *)(a1 + 16) = objc_alloc_init((Class)HKHealthStore);
  }
  sub_10113B33C((id *)a1, 0);
  return a1;
}

void sub_10113B310(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *(void **)(v1 + 184);
  if (v5)
  {
    *(_QWORD *)(v1 + 192) = v5;
    operator delete(v5);
  }
  sub_101940B04(v3, v2, v1);
  _Unwind_Resume(a1);
}

id *sub_10113B33C(id *result, char a2)
{
  id *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint8_t buf[8];
  std::__shared_weak_count *v16;

  if ((a2 & 1) == 0)
  {
    v2 = result;
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A27E8);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Starting PAL update timer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A27E8);
      LOWORD(v13) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Starting PAL update timer", &v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCaloriePalEstimator::setupPalUpdateTimer(BOOL)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10113B6A0;
    v14[3] = &unk_10212ECA0;
    v14[4] = v2;
    objc_msgSend(v2[1], "setHandler:", v14);
    v13 = 0;
    v4 = sub_100127B9C();
    sub_100081C10(v4, buf);
    v5 = sub_1001FD98C(*(uint64_t *)buf, "PalEstimationInterval", &v13);
    v6 = v5;
    v7 = v16;
    if (!v16)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v6)
        goto LABEL_12;
    }
    else
    {
LABEL_11:
      if (v5)
      {
LABEL_12:
        v10 = *(double *)&v13;
        return (id *)objc_msgSend(v2[1], "setNextFireDelay:interval:", 120.0, v10);
      }
    }
    v13 = 0x40F5180000000000;
    v10 = 86400.0;
    return (id *)objc_msgSend(v2[1], "setNextFireDelay:interval:", 120.0, v10);
  }
  return result;
}

void sub_10113B5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10113B5C4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_10113B638(a1);
  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(_QWORD *)(a1 + 168) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(_QWORD *)(a1 + 136) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_10113B638(uint64_t a1)
{
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);

  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;

  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = 0;
}

void sub_10113B6A0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v1 + 88))
    sub_10113B638(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v1 + 88) = 1;
  sub_10113B6D8(v1);
}

void sub_10113B6D8(uint64_t a1)
{
  double v2;

  if (*(_BYTE *)(a1 + 84)
    && *(_DWORD *)(a1 + 88)
    && +[HKHealthStore isHealthDataAvailable](HKHealthStore, "isHealthDataAvailable")
    && *(_QWORD *)(a1 + 16))
  {
    objc_msgSend(*(id *)(a1 + 96), "timeIntervalSinceNow");
    if (v2 <= -43200.0)
    {
      sub_10113B638(a1);
      *(_DWORD *)(a1 + 88) = 1;
    }
    else if (*(_DWORD *)(a1 + 88) != 1)
    {
      return;
    }
    sub_10113B79C(a1);
  }
}

void sub_10113B760(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 84) = a2;
  sub_10113B6D8(a1);
}

id *sub_10113B768(id *result, int a2)
{
  char v2;
  id *v3;

  if (*((unsigned __int8 *)result + 85) != a2)
  {
    v2 = a2;
    v3 = result;
    result = sub_10113B33C(result, a2);
    *((_BYTE *)v3 + 85) = v2;
  }
  return result;
}

void sub_10113B79C(uint64_t a1)
{
  NSDate *v2;
  NSPredicate *v3;
  id v4;
  _QWORD v5[5];

  v2 = +[NSDate date](NSDate, "date");
  *(_QWORD *)(a1 + 96) = v2;
  v3 = +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", +[NSDate dateWithTimeInterval:sinceDate:](NSDate, "dateWithTimeInterval:sinceDate:", v2, -604800.0), *(_QWORD *)(a1 + 96), 3);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10113B898;
  v5[3] = &unk_1021A2760;
  v5[4] = a1;
  v4 = objc_msgSend(objc_alloc((Class)HKSourceQuery), "initWithSampleType:samplePredicate:completionHandler:", +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierStepCount), v3, v5);
  objc_msgSend(*(id *)(a1 + 16), "executeQuery:", v4);
  *(_DWORD *)(a1 + 88) = 2;

}

id sub_10113B898(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  id *v6;
  id v7;
  void (*v8)(uint64_t);
  void ***v9;
  void **v11;
  void **v12;

  v6 = *(id **)(a1 + 32);
  v7 = objc_msgSend(*v6, "silo");
  if (a4)
  {
    v12 = _NSConcreteStackBlock;
    v8 = sub_10113B928;
    v9 = &v12;
  }
  else
  {
    v11 = _NSConcreteStackBlock;
    v8 = sub_10113BAD4;
    v9 = &v11;
    a4 = a3;
  }
  v9[1] = (void **)3221225472;
  v9[2] = (void **)v8;
  v9[3] = (void **)&unk_102131360;
  v9[4] = a4;
  v9[5] = v6;
  return objc_msgSend(v7, "async:", v11);
}

void sub_10113B928(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 40);
  if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)6)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A27E8);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2114;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"PAL,\", \"error,\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A27E8);
    }
    v5 = qword_10229FC98;
    if (os_signpost_enabled((os_log_t)qword_10229FC98))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2114;
      v12 = v6;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "PAL,", "{\"msg%{public}.0s\":\"PAL,\", \"error,\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
    }
  }
  sub_10113B638(v2);
}

void sub_10113BAD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *i;
  void *v10;
  BOOL v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *j;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  _WORD v22[8];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[1632];
  _BYTE v32[128];
  _BYTE v33[128];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 104) = objc_alloc_init((Class)NSMutableSet);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v3 = *(void **)(v1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
  if (!v4)
    goto LABEL_41;
  v5 = v4;
  v21 = v1;
  v6 = 0;
  v7 = 0;
  v8 = *(_QWORD *)v28;
  do
  {
    for (i = 0; i != v5; i = (char *)i + 1)
    {
      if (*(_QWORD *)v28 != v8)
        objc_enumerationMutation(v3);
      v10 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
      if (objc_msgSend(objc_msgSend(v10, "_productType"), "hasPrefix:", CFSTR("iPhone")))
        ++v7;
      else
        v6 += objc_msgSend(objc_msgSend(v10, "_productType"), "hasPrefix:", CFSTR("Watch"));
    }
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
  }
  while (v5);
  v11 = !v6 || v7 == 0;
  v1 = v21;
  if (v11)
  {
LABEL_41:
    if (*(_QWORD *)(v1 + 32))
      objc_msgSend(*(id *)(v2 + 104), "setSet:");
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v12 = *(void **)(v21 + 32);
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v24;
      do
      {
        for (j = 0; j != v14; j = (char *)j + 1)
        {
          if (*(_QWORD *)v24 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)j);
          if (objc_msgSend(objc_msgSend(v17, "_productType"), "hasPrefix:", CFSTR("Watch")))
            objc_msgSend(*(id *)(v2 + 104), "addObject:", v17);
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
      }
      while (v14);
    }
  }
  if (objc_msgSend(*(id *)(v2 + 104), "count"))
  {
    sub_10113BE40(v2);
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A27E8);
    v18 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "PAL, No step count / workouts from first party sources.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A27E8);
      v22[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "PAL, No step count / workouts from first party sources.", v22, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLCaloriePalEstimator::querySources()_block_invoke", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    sub_10113B638(v2);
  }
}

void sub_10113BE40(uint64_t a1)
{
  id v2;
  _QWORD v3[5];
  _QWORD v4[2];

  v4[0] = +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", +[NSDate dateWithTimeInterval:sinceDate:](NSDate, "dateWithTimeInterval:sinceDate:", *(_QWORD *)(a1 + 96), -604800.0), *(_QWORD *)(a1 + 96), 3);
  v4[1] = +[HKQuery _predicateForObjectsFromAppleWatches](HKQuery, "_predicateForObjectsFromAppleWatches");
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10113BF84;
  v3[3] = &unk_1021A2780;
  v3[4] = a1;
  v2 = objc_msgSend(objc_alloc((Class)HKSampleQuery), "initWithSampleType:predicate:limit:sortDescriptors:resultsHandler:", +[HKSampleType workoutType](HKSampleType, "workoutType"), +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 2)), 0, 0, v3);
  objc_msgSend(*(id *)(a1 + 16), "executeQuery:", v2);

}

id sub_10113BF84(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  id *v6;
  id v7;
  void (*v8)(uint64_t);
  void ***v9;
  void **v11;
  void **v12;

  v6 = *(id **)(a1 + 32);
  v7 = objc_msgSend(*v6, "silo");
  if (a4)
  {
    v12 = _NSConcreteStackBlock;
    v8 = sub_10113C014;
    v9 = &v12;
  }
  else
  {
    v11 = _NSConcreteStackBlock;
    v8 = sub_10113C1C0;
    v9 = &v11;
    a4 = a3;
  }
  v9[1] = (void **)3221225472;
  v9[2] = (void **)v8;
  v9[3] = (void **)&unk_102131360;
  v9[4] = a4;
  v9[5] = v6;
  return objc_msgSend(v7, "async:", v11);
}

void sub_10113C014(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 40);
  if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)6)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A27E8);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2114;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"PAL,\", \"error,\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A27E8);
    }
    v5 = qword_10229FC98;
    if (os_signpost_enabled((os_log_t)qword_10229FC98))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2114;
      v12 = v6;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "PAL,", "{\"msg%{public}.0s\":\"PAL,\", \"error,\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
    }
  }
  sub_10113B638(v2);
}

void sub_10113C1C0(uint64_t a1)
{
  uint64_t v1;
  id v2;
  int v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(id *)(a1 + 32);
  *(_QWORD *)(v1 + 112) = v2;
  v3 = objc_msgSend(v2, "count");
  *(_DWORD *)(v1 + 152) = v3;
  if (v3 < 1)
  {
    *(_DWORD *)(v1 + 120) = 7;
    sub_10113C2B0(v1);
  }
  else
  {
    sub_10113C210(v1);
  }
}

void sub_10113C210(uint64_t a1)
{
  id v2;
  _QWORD v3[5];

  v2 = objc_msgSend(*(id *)(a1 + 112), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 112), "count") - *(int *)(a1 + 152));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10113C484;
  v3[3] = &unk_1021A27A0;
  v3[4] = a1;
  sub_10113C37C(a1, (uint64_t)objc_msgSend(v2, "startDate"), (uint64_t)objc_msgSend(v2, "endDate"), (uint64_t)v3);
}

void sub_10113C2B0(uint64_t a1)
{
  id v2;
  id v3;
  _QWORD v4[5];

  v2 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeInterval:sinceDate:", *(_QWORD *)(a1 + 96), (double)(-86400 * *(_DWORD *)(a1 + 120)));
  v3 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeInterval:sinceDate:", *(_QWORD *)(a1 + 96), (double)(86400 - 86400 * *(_DWORD *)(a1 + 120)));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10113C598;
  v4[3] = &unk_1021A27A0;
  v4[4] = a1;
  sub_10113C37C(a1, (uint64_t)v2, (uint64_t)v3, (uint64_t)v4);

}

void sub_10113C37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSCompoundPredicate *v6;
  id v7;
  _QWORD v8[6];

  v6 = +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", a2, a3, 3), +[HKQuery predicateForObjectsFromSources:](HKQuery, "predicateForObjectsFromSources:", *(_QWORD *)(a1 + 104)), 0));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10113D030;
  v8[3] = &unk_1021A27C8;
  v8[4] = a4;
  v8[5] = a1;
  v7 = objc_msgSend(objc_alloc((Class)HKStatisticsQuery), "initWithQuantityType:quantitySamplePredicate:options:completionHandler:", +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierStepCount), v6, 17, v8);
  objc_msgSend(*(id *)(a1 + 16), "executeQuery:", v7);

}

void sub_10113C484(uint64_t a1, double a2)
{
  uint64_t v3;
  double *v4;
  unint64_t v5;
  double *v6;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  double *v13;
  char *v14;
  uint64_t v15;
  int v16;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(double **)(v3 + 168);
  v5 = *(_QWORD *)(v3 + 176);
  if ((unint64_t)v4 >= v5)
  {
    v7 = *(double **)(v3 + 160);
    v8 = v4 - v7;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_100259694();
    v9 = v5 - (_QWORD)v7;
    v10 = (uint64_t)(v5 - (_QWORD)v7) >> 2;
    if (v10 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = (char *)sub_10025E6A0(v3 + 176, v11);
      v7 = *(double **)(v3 + 160);
      v4 = *(double **)(v3 + 168);
    }
    else
    {
      v12 = 0;
    }
    v13 = (double *)&v12[8 * v8];
    v14 = &v12[8 * v11];
    *v13 = a2;
    v6 = v13 + 1;
    while (v4 != v7)
    {
      v15 = *((_QWORD *)v4-- - 1);
      *((_QWORD *)v13-- - 1) = v15;
    }
    *(_QWORD *)(v3 + 160) = v13;
    *(_QWORD *)(v3 + 168) = v6;
    *(_QWORD *)(v3 + 176) = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  *(_QWORD *)(v3 + 168) = v6;
  v16 = *(_DWORD *)(v3 + 152);
  *(_DWORD *)(v3 + 152) = v16 - 1;
  if (v16 < 2)
  {
    *(_DWORD *)(v3 + 120) = 7;
    sub_10113C2B0(v3);
  }
  else
  {
    sub_10113C210(v3);
  }
}

void sub_10113C598(uint64_t a1, double a2)
{
  uint64_t v3;
  double *v4;
  unint64_t v5;
  double *v6;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  double *v13;
  char *v14;
  uint64_t v15;
  int v16;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(double **)(v3 + 136);
  v5 = *(_QWORD *)(v3 + 144);
  if ((unint64_t)v4 >= v5)
  {
    v7 = *(double **)(v3 + 128);
    v8 = v4 - v7;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_100259694();
    v9 = v5 - (_QWORD)v7;
    v10 = (uint64_t)(v5 - (_QWORD)v7) >> 2;
    if (v10 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = (char *)sub_10025E6A0(v3 + 144, v11);
      v7 = *(double **)(v3 + 128);
      v4 = *(double **)(v3 + 136);
    }
    else
    {
      v12 = 0;
    }
    v13 = (double *)&v12[8 * v8];
    v14 = &v12[8 * v11];
    *v13 = a2;
    v6 = v13 + 1;
    while (v4 != v7)
    {
      v15 = *((_QWORD *)v4-- - 1);
      *((_QWORD *)v13-- - 1) = v15;
    }
    *(_QWORD *)(v3 + 128) = v13;
    *(_QWORD *)(v3 + 136) = v6;
    *(_QWORD *)(v3 + 144) = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  *(_QWORD *)(v3 + 136) = v6;
  v16 = *(_DWORD *)(v3 + 120);
  *(_DWORD *)(v3 + 120) = v16 - 1;
  if (v16 < 2)
    sub_10113C6A0(v3);
  else
    sub_10113C2B0(v3);
}

void sub_10113C6A0(uint64_t a1)
{
  _QWORD *v1;
  __int128 v2;
  double *v3;
  double v4;
  void *v5;
  NSDate *v6;
  NSDate *v7;
  void *v8;
  id v9;
  char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  uint64_t v14;
  void *v15;
  double v16;
  double v17;
  float v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  double v29;
  double v30;
  NSObject *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint8_t *v42;
  id v43;
  double v44;
  unint64_t v45;
  double *v46;
  double *v47;
  double *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  double *v54;
  uint64_t v55;
  NSObject *v56;
  const char *v57;
  uint8_t *v58;
  NSObject *v59;
  _BOOL4 v60;
  uint64_t v61;
  const char *v62;
  uint8_t *v63;
  double v64;
  uint64_t v65;
  void **v66;
  __int128 v67;
  double v68;
  double *v69;
  double *v70;
  double v71;
  char *v72;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  double v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  uint8_t v92[128];
  uint8_t buf[4];
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  double v106;

  v1 = (_QWORD *)a1;
  if (objc_msgSend(*(id *)(a1 + 112), "count") == (id)((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3))
  {
    v3 = (double *)v1[16];
    v69 = (double *)v1[17];
    if (v3 != v69)
    {
      v71 = 0.0;
      v65 = (uint64_t)(v1 + 25);
      v66 = (void **)(v1 + 23);
      v68 = 5299.0;
      *(_QWORD *)&v2 = 134218240;
      v67 = v2;
      while (1)
      {
        v70 = v3;
        v4 = *v3;
        v5 = (void *)v1[14];
        if (!v5)
          goto LABEL_41;
        v1 = (_QWORD *)a1;
        if (!objc_msgSend(v5, "count"))
          goto LABEL_41;
        v6 = +[NSDate dateWithTimeInterval:sinceDate:](NSDate, "dateWithTimeInterval:sinceDate:", *(_QWORD *)(a1 + 96), (double)(-86400 * LODWORD(v71)));
        v7 = +[NSDate dateWithTimeInterval:sinceDate:](NSDate, "dateWithTimeInterval:sinceDate:", *(_QWORD *)(a1 + 96), (double)(-86400 * LODWORD(v71) + 86400));
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v8 = *(void **)(a1 + 112);
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v74, v92, 16);
        if (!v9)
          break;
        v10 = 0;
        v11 = *(_QWORD *)v75;
        v12 = 0.0;
        do
        {
          v13 = 0;
          v72 = v10;
          v14 = (_QWORD)v10 << 32;
          do
          {
            if (*(_QWORD *)v75 != v11)
              objc_enumerationMutation(v8);
            v15 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * (_QWORD)v13);
            if (-[NSDate compare:](v6, "compare:", objc_msgSend(v15, "startDate")) == NSOrderedAscending
              && (id)-[NSDate compare:](v7, "compare:", objc_msgSend(v15, "endDate")) == (id)1)
            {
              objc_msgSend(objc_msgSend(v15, "totalEnergyBurned"), "doubleValueForUnit:", +[HKUnit largeCalorieUnit](HKUnit, "largeCalorieUnit"));
              v17 = v16;
              v18 = *(float *)(a1 + 36);
              objc_msgSend(v15, "duration");
              v20 = v19;
              objc_msgSend(v15, "duration");
              v22 = v21;
              v23 = v17 * 3600.0 / (v20 * (float)(v18 * 1000.0));
              if (v23 >= 5.0)
              {
                if (v23 >= 8.0)
                {
                  v25 = 6.6667;
                  v24 = 106.6667;
                }
                else
                {
                  v25 = 12.8678;
                  v24 = 57.0578;
                }
              }
              else
              {
                v25 = 6.6833;
                v24 = 87.98;
              }
              v26 = v24 + v23 * v25;
              v27 = *(double *)(*(_QWORD *)(a1 + 160) + (v14 >> 29));
              v28 = objc_msgSend(v15, "workoutActivityType");
              v29 = (double)(int)(v22 * v26 / 60.0);
              if (v28 == (id)37 || v28 == (id)52)
              {
                objc_msgSend(v15, "duration");
                if (v30 > 300.0 && v27 < v29)
                {
                  v4 = v4 - v27;
                  v12 = v12 + v29;
                }
              }
              else
              {
                v4 = v4 - v27;
                v12 = v12 + v29;
              }
              if (qword_10229FC90 != -1)
                dispatch_once(&qword_10229FC90, &stru_1021A27E8);
              v31 = qword_10229FC98;
              if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
              {
                v32 = COERCE_DOUBLE(objc_msgSend(v15, "workoutActivityType"));
                objc_msgSend(objc_msgSend(v15, "startDate"), "timeIntervalSinceReferenceDate");
                v34 = v33;
                objc_msgSend(v15, "duration");
                *(_DWORD *)buf = 134219520;
                v94 = v4;
                v95 = 2048;
                v96 = v32;
                v97 = 2048;
                v98 = v34;
                v99 = 2048;
                v100 = v35;
                v101 = 2048;
                v102 = v23;
                v103 = 2048;
                v104 = v27;
                v105 = 2048;
                v106 = v29;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "PAL,Daily steps,%f,Session type,%lu,startTime,%f,duration,%f,mean mets,%f,in-system steps,%f,met-converted steps,%f", buf, 0x48u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FC90 != -1)
                  dispatch_once(&qword_10229FC90, &stru_1021A27E8);
                v36 = qword_10229FC98;
                v37 = COERCE_DOUBLE(objc_msgSend(v15, "workoutActivityType"));
                objc_msgSend(objc_msgSend(v15, "startDate"), "timeIntervalSinceReferenceDate");
                v39 = v38;
                objc_msgSend(v15, "duration");
                v78 = 134219520;
                v79 = v4;
                v80 = 2048;
                v81 = v37;
                v82 = 2048;
                v83 = v39;
                v84 = 2048;
                v85 = v40;
                v86 = 2048;
                v87 = v23;
                v88 = 2048;
                v89 = v27;
                v90 = 2048;
                v91 = v29;
                LODWORD(v64) = 72;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 2, "PAL,Daily steps,%f,Session type,%lu,startTime,%f,duration,%f,mean mets,%f,in-system steps,%f,met-converted steps,%f", COERCE_DOUBLE(&v78), *(_QWORD *)&v64, *(double *)&v65, *(double *)&v66, *(double *)&v67, *((double *)&v67 + 1), v68);
                v42 = (uint8_t *)v41;
                sub_100512490("Generic", 1, 0, 2, "void CLCaloriePalEstimator::estimateDailyStepCount()", "%s\n", v41);
                if (v42 != buf)
                  free(v42);
              }
            }
            v13 = (char *)v13 + 1;
            v14 += (uint64_t)&_mh_execute_header;
          }
          while (v9 != v13);
          v43 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v74, v92, 16);
          v9 = v43;
          v10 = (char *)v13 + (_QWORD)v72;
        }
        while (v43);
        if (v12 <= 0.0)
          break;
        v44 = v68;
        if (v4 >= v68)
          v44 = v4;
        v4 = v12 + v44;
        v1 = (_QWORD *)a1;
LABEL_44:
        v46 = (double *)v1[24];
        v45 = v1[25];
        if ((unint64_t)v46 >= v45)
        {
          v48 = (double *)*v66;
          v49 = ((char *)v46 - (_BYTE *)*v66) >> 3;
          v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 61)
            sub_100259694();
          v51 = v45 - (_QWORD)v48;
          if (v51 >> 2 > v50)
            v50 = v51 >> 2;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v52 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v52 = v50;
          if (v52)
          {
            v53 = (char *)sub_10025E6A0(v65, v52);
            v1 = (_QWORD *)a1;
            v48 = *(double **)(a1 + 184);
            v46 = *(double **)(a1 + 192);
          }
          else
          {
            v53 = 0;
          }
          v54 = (double *)&v53[8 * v49];
          *v54 = v4;
          v47 = v54 + 1;
          while (v46 != v48)
          {
            v55 = *((_QWORD *)v46-- - 1);
            *((_QWORD *)v54-- - 1) = v55;
          }
          v1[23] = v54;
          v1[24] = v47;
          v1[25] = &v53[8 * v52];
          if (v48)
            operator delete(v48);
        }
        else
        {
          *v46 = v4;
          v47 = v46 + 1;
        }
        v1[24] = v47;
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A27E8);
        v56 = qword_10229FC98;
        if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v67;
          v94 = v71;
          v95 = 2048;
          v96 = v4;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "PAL,Day index,%zu,stepCount,%f", buf, 0x16u);
        }
        v1 = (_QWORD *)a1;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_1021A27E8);
          v78 = v67;
          v79 = v71;
          v80 = 2048;
          v81 = v4;
          LODWORD(v64) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "PAL,Day index,%zu,stepCount,%f", (size_t)&v78, v64);
          v58 = (uint8_t *)v57;
          sub_100512490("Generic", 1, 0, 2, "void CLCaloriePalEstimator::estimateDailyStepCount()", "%s\n", v57);
          if (v58 != buf)
            free(v58);
          v1 = (_QWORD *)a1;
        }
        ++*(_QWORD *)&v71;
        v3 = v70 + 1;
        if (v70 + 1 == v69)
          goto LABEL_78;
      }
      v1 = (_QWORD *)a1;
LABEL_41:
      if (v4 >= 1000.0 && v4 < v68)
        v4 = v68;
      goto LABEL_44;
    }
LABEL_78:
    sub_10113D2E0((uint64_t)v1);
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A27E8);
    v59 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "PAL,Containers out-of-sync,aborting", buf, 2u);
    }
    v60 = sub_1001BFF7C(115, 0);
    v61 = a1;
    if (v60)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A27E8);
      LOWORD(v78) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "PAL,Containers out-of-sync,aborting", &v78, 2);
      v63 = (uint8_t *)v62;
      sub_100512490("Generic", 1, 0, 0, "void CLCaloriePalEstimator::estimateDailyStepCount()", "%s\n", v62);
      if (v63 != buf)
        free(v63);
      v61 = a1;
    }
    sub_10113B638(v61);
  }
}

id sub_10113D030(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id *v4;
  id v6;
  void ***v7;
  uint64_t v9;
  uint64_t v10;
  void **v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  void *v21;
  uint64_t v22;
  id *v23;

  v4 = *(id **)(a1 + 40);
  if (a4)
  {
    v6 = objc_msgSend(*v4, "silo");
    v18 = _NSConcreteStackBlock;
    v19 = 3221225472;
    v20 = sub_10113D120;
    v21 = &unk_102131360;
    v22 = a4;
    v23 = v4;
    v7 = &v18;
  }
  else
  {
    objc_msgSend(objc_msgSend(a3, "sumQuantity"), "doubleValueForUnit:", +[HKUnit countUnit](HKUnit, "countUnit"));
    v10 = v9;
    v6 = objc_msgSend(*v4, "silo");
    v12 = _NSConcreteStackBlock;
    v13 = 3221225472;
    v14 = sub_10113D2CC;
    v15 = &unk_1021380D0;
    v16 = *(_QWORD *)(a1 + 32);
    v17 = v10;
    v7 = &v12;
  }
  return objc_msgSend(v6, "async:", v7, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
}

void sub_10113D120(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 40);
  if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)6)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A27E8);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2114;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"PAL,\", \"error,\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A27E8);
    }
    v5 = qword_10229FC98;
    if (os_signpost_enabled((os_log_t)qword_10229FC98))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2114;
      v12 = v6;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "PAL,", "{\"msg%{public}.0s\":\"PAL,\", \"error,\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
    }
  }
  sub_10113B638(v2);
}

uint64_t sub_10113D2CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(double *)(a1 + 40));
}

void sub_10113D2E0(uint64_t a1)
{
  double *v2;
  double *v3;
  int v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  uint64_t v10;
  float v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  double v16;
  double v17;
  double v18;
  _DWORD v19[2];
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  double v33;

  v2 = *(double **)(a1 + 184);
  v3 = *(double **)(a1 + 192);
  if (v2 == v3)
  {
    v4 = 0;
    v12 = 4;
    v5 = 0.0;
LABEL_16:
    v9 = 0.0;
    goto LABEL_24;
  }
  v4 = 0;
  v5 = 0.0;
  do
  {
    v6 = *v2++;
    v7 = v6;
    v8 = v6 < 1000.0;
    if (v6 < 1000.0)
      v7 = -0.0;
    v5 = v5 + v7;
    if (!v8)
      ++v4;
  }
  while (v2 != v3);
  if (v4 < 5)
  {
    v12 = 4;
    goto LABEL_16;
  }
  v9 = v5 / (double)v4;
  v10 = 4;
  while (v9 >= (double)dword_101C4266C[v10])
  {
    if (++v10 == 12)
    {
      v11 = *(float *)(a1 + 60);
      if (v11 <= 12.0)
        goto LABEL_20;
      goto LABEL_18;
    }
  }
  v11 = *(float *)(a1 + 60);
  if (v11 > (float)(int)v10)
  {
LABEL_18:
    LODWORD(v10) = (int)(float)(v11 + -1.0);
    goto LABEL_21;
  }
  if (v10 > 0xB)
  {
LABEL_20:
    v12 = 11;
    goto LABEL_24;
  }
LABEL_21:
  if ((int)v10 <= 4)
    v12 = 4;
  else
    v12 = v10;
LABEL_24:
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A27E8);
  v13 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v14 = (int)*(float *)(a1 + 60);
    v15 = (int)v5;
    -[NSDate timeIntervalSinceReferenceDate](+[NSDate date](NSDate, "date"), "timeIntervalSinceReferenceDate");
    v17 = v16;
    objc_msgSend(*(id *)(a1 + 96), "timeIntervalSinceReferenceDate");
    v19[0] = 68290563;
    v19[1] = 0;
    v20 = 2082;
    v21 = "";
    v22 = 1025;
    v23 = v12;
    v24 = 1025;
    v25 = v14;
    v26 = 1025;
    v27 = v15;
    v28 = 1025;
    v29 = v4;
    v30 = 1025;
    v31 = (int)v9;
    v32 = 2049;
    v33 = v17 - v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"PAL,\", \"estimated\":%{private}d, \"current\":%{private}d, \"total steps\":%{private}d, \"valid days\":%{private}d, \"avg steps\":%{private}d, \"timeToEstimate\":\"%{private}.3f\"}", (uint8_t *)v19, 0x3Au);
  }
  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier")), "updatePAL:", (double)v12);
  sub_10113B638(a1);
}

void sub_10113D548(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_10113D574()
{
  sub_1015A2E04(qword_10230CD70, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CD70, (void *)&_mh_execute_header);
}

uint64_t sub_10113D5B8(uint64_t a1)
{
  uint64_t v2;
  __int128 v9;

  v2 = a1 + 428;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0xFFFF;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_OWORD *)(a1 + 36) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v9 = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_OWORD *)(a1 + 84) = _Q0;
  *(_DWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 132) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 140) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  sub_1002433B8(a1 + 176);
  *(_WORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 376) = 1;
  *(_WORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = 0xFFFF;
  *(_QWORD *)(a1 + 412) = 0;
  *(_QWORD *)(a1 + 420) = 0;
  *(_OWORD *)v2 = xmmword_101BAFC90;
  *(_OWORD *)(v2 + 16) = v9;
  *(_OWORD *)(v2 + 32) = v9;
  *(_OWORD *)(v2 + 48) = v9;
  *(_DWORD *)(a1 + 492) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 496) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(v2 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 532) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = a1 + 576;
  *(_QWORD *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(double *)a1 = sub_1001FCBB4();
  sub_10113D764(a1 + 344, 2uLL);
  return a1;
}

void sub_10113D738(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v7;

  v5 = v4;
  sub_100008848(v3, *v5);
  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 352) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void sub_10113D764(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1011416E8((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 48 * a2;
  }
}

__n128 sub_10113D7A4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_BYTE *)(a1 + 384) = sub_100182290(a2);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 424) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 488) = v6;
  *(_OWORD *)(a1 + 472) = v5;
  *(_OWORD *)(a1 + 456) = v7;
  v9 = *(_OWORD *)(a2 + 112);
  result = *(__n128 *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 548) = v10;
  *(__n128 *)(a1 + 536) = result;
  *(_OWORD *)(a1 + 520) = v9;
  return result;
}

void sub_10113D814(uint64_t a1, _DWORD *a2, float *a3, float *a4)
{
  float v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  float v13;

  sub_1001E4804(&v11);
  v13 = 0.0;
  if (sub_100526804(v11, "homeVisitErrOverUncThr", &v13))
    v7 = v13;
  else
    v7 = 1.0;
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (*a4 > v7)
  {
    if (*a3 >= 100.0)
    {
      if (*a3 >= 200.0)
        ++a2[14];
      else
        ++a2[13];
    }
    else
    {
      ++a2[12];
    }
  }
}

void sub_10113D918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10113D92C(uint64_t a1, int a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  double v11;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint8_t *v17;
  uint8_t *v18;
  NSObject *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint8_t *v36;
  uint64_t v37;
  int v38;
  _BYTE v39[18];
  __int16 v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  _BYTE v47[18];
  __int16 v48;
  double v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;

  if (*(unsigned __int8 *)(a1 + 216) == a2)
    return;
  *(_BYTE *)(a1 + 216) = a2;
  v4 = sub_1001FCBB4();
  v5 = v4;
  if (a2)
  {
    *(double *)(a1 + 8) = v4;
    sub_10113DF00(a1 + 232, v4);
    if (*(_BYTE *)(a1 + 217))
    {
      v6 = *(double *)(a1 + 8);
      *(double *)(a1 + 224) = v6;
      sub_10113DF00(a1 + 288, v6);
    }
    goto LABEL_26;
  }
  sub_10113E250(a1 + 232, v4);
  v8 = v7;
  v9 = *(double *)(a1 + 8);
  v10 = v5 <= v9;
  v11 = v5 - v9;
  if (v10 || v11 < v8)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v13 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349569;
      *(double *)v47 = v5;
      *(_WORD *)&v47[8] = 2049;
      *(_QWORD *)&v47[10] = v14;
      v48 = 2049;
      v49 = v8;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#LCStats,outvisit,end,error,time,%{public}0.1f,outVisitStart,%{private}0.1f,durThr,%{private}0.1f", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v15 = *(_QWORD *)(a1 + 8);
    v38 = 134349569;
    *(double *)v39 = v5;
    *(_WORD *)&v39[8] = 2049;
    *(_QWORD *)&v39[10] = v15;
    v40 = 2049;
    v41 = v8;
    v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#LCStats,outvisit,end,error,time,%{public}0.1f,outVisitStart,%{private}0.1f,durThr,%{private}0.1f", &v38, 32);
    v18 = v17;
    sub_100512490("Generic", 1, 0, 0, "void CLLocationControllerCAStats::feedVisit(const BOOL)", "%s\n", v16);
  }
  else
  {
    *(double *)(a1 + 592) = v11 + *(double *)(a1 + 592);
    *(double *)(a1 + 600) = v8 + *(double *)(a1 + 600);
    if (*(_BYTE *)(a1 + 217))
      sub_10113E428((double *)a1);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v19 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(double *)(a1 + 8);
      v21 = *(_QWORD *)(a1 + 592);
      v22 = *(_QWORD *)(a1 + 600);
      *(_DWORD *)buf = 134350081;
      *(double *)v47 = v5;
      *(_WORD *)&v47[8] = 2049;
      *(double *)&v47[10] = v20;
      v48 = 2049;
      v49 = v5 - v20;
      v50 = 2049;
      v51 = v21;
      v52 = 2049;
      v53 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#LCStats,outvisit,end,time,%{public}0.1f,outVisitStart,%{private}0.1f,dur,%{private}0.1f,accDur,%{private}0.1f,accDurThr,%{private}0.1f", buf, 0x34u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v32 = *(double *)(a1 + 8);
    v33 = *(_QWORD *)(a1 + 592);
    v34 = *(_QWORD *)(a1 + 600);
    v38 = 134350081;
    *(double *)v39 = v5;
    *(_WORD *)&v39[8] = 2049;
    *(double *)&v39[10] = v32;
    v40 = 2049;
    v41 = v5 - v32;
    v42 = 2049;
    v43 = v33;
    v44 = 2049;
    v45 = v34;
    v35 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#LCStats,outvisit,end,time,%{public}0.1f,outVisitStart,%{private}0.1f,dur,%{private}0.1f,accDur,%{private}0.1f,accDurThr,%{private}0.1f", &v38, 52);
    v18 = v36;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::feedVisit(const BOOL)", "%s\n", v35);
  }
  if (v18 != buf)
    free(v18);
LABEL_25:
  *(_DWORD *)(a1 + 16) = 0xFFFF;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_OWORD *)(a1 + 36) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_OWORD *)(a1 + 84) = _Q0;
  *(_DWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 132) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 140) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  sub_10113E790(a1);
LABEL_26:
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021A2828);
  v27 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v28 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 67174913;
    *(_DWORD *)v47 = a2;
    *(_WORD *)&v47[4] = 2049;
    *(_QWORD *)&v47[6] = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#LCStats,outvisit,%{private}d,outVisitStart,%{private}0.1f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v29 = *(_QWORD *)(a1 + 8);
    v38 = 67174913;
    *(_DWORD *)v39 = a2;
    *(_WORD *)&v39[4] = 2049;
    *(_QWORD *)&v39[6] = v29;
    LODWORD(v37) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#LCStats,outvisit,%{private}d,outVisitStart,%{private}0.1f", &v38, v37);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::feedVisit(const BOOL)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
}

void sub_10113DF00(uint64_t a1, double a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  double v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  double v26;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021A2828);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,outvisit,start", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,ThrPosUnc,outvisit,start", &v15, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::ThresholdPosUncMetric::outsideVisitStart(const CFTimeInterval)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)a1 && *(double *)(a1 + 8) >= *(double *)(a1 + 24))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      v5 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_QWORD *)(a1 + 8);
        v7 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 134349569;
        v22 = v6;
        v23 = 2050;
        v24 = v7;
        v25 = 2049;
        v26 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#LCStats,outvisit,device is not static since last loc update,staticTime,%{public}0.1f,posThrTime,%{public}0.1f,outVisitTime,%{private}0.1f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021A2828);
        v10 = *(_QWORD *)(a1 + 8);
        v11 = *(_QWORD *)(a1 + 24);
        v15 = 134349569;
        v16 = v10;
        v17 = 2050;
        v18 = v11;
        v19 = 2049;
        v20 = a2;
        LODWORD(v14) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#LCStats,outvisit,device is not static since last loc update,staticTime,%{public}0.1f,posThrTime,%{public}0.1f,outVisitTime,%{private}0.1f", &v15, v14);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::ThresholdPosUncMetric::outsideVisitStart(const CFTimeInterval)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      *(double *)(a1 + 8) = a2;
    }
    *(double *)(a1 + 24) = a2;
  }
}

void sub_10113E250(uint64_t a1, double a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021A2828);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,outvisit,stop,posUncThr,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v6 = *(unsigned __int8 *)(a1 + 16);
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,ThrPosUnc,outvisit,stop,posUncThr,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLLocationControllerCAStats::ThresholdPosUncMetric::outsideVisitStop(const CFTimeInterval)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (*(_BYTE *)(a1 + 16))
    sub_1001522A0(a1, a2);
  *(_BYTE *)(a1 + 48) = 0;
}

void sub_10113E428(double *a1)
{
  double v2;
  double v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint8_t *v8;
  uint8_t *v9;
  double v10;
  NSObject *v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  uint8_t *v17;
  int v18;
  double v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  double v23;
  __int16 v24;
  uint64_t v25;

  v2 = sub_1001FCBB4();
  v3 = a1[28];
  if (v2 >= v3)
  {
    a1[76] = v2 - v3 + a1[76];
    sub_10113E250((uint64_t)(a1 + 36), v2);
    a1[77] = v10 + a1[77];
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v12 = a1[76];
      v13 = *((_QWORD *)a1 + 77);
      *(_DWORD *)buf = 134283777;
      v23 = v12;
      v24 = 2049;
      v25 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#LCStats,updateNonChargingMetrics,DailyAccumulatedOutsideVisitNonChargingTimeSec,%{private}0.1fDailyAccumulatedOutsideVisitNonChargingTimeWithThresholdPosUncSec,%{private}0.1f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      v14 = a1[76];
      v15 = *((_QWORD *)a1 + 77);
      v18 = 134283777;
      v19 = v14;
      v20 = 2049;
      v21 = v15;
      v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#LCStats,updateNonChargingMetrics,DailyAccumulatedOutsideVisitNonChargingTimeSec,%{private}0.1fDailyAccumulatedOutsideVisitNonChargingTimeWithThresholdPosUncSec,%{private}0.1f", &v18, 22);
      v9 = v17;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::updateNonChargingMetrics(const CFTimeInterval)", "%s\n", v16);
      goto LABEL_19;
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v5 = *((_QWORD *)a1 + 28);
      *(_DWORD *)buf = 134283777;
      v23 = v2;
      v24 = 2049;
      v25 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#LCStats,updateNonChargingMetrics,current time lags previous timestamp,%{private}0.1f,%{private}0.1f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      v6 = *((_QWORD *)a1 + 28);
      v18 = 134283777;
      v19 = v2;
      v20 = 2049;
      v21 = v6;
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#LCStats,updateNonChargingMetrics,current time lags previous timestamp,%{private}0.1f,%{private}0.1f", &v18, 22);
      v9 = v8;
      sub_100512490("Generic", 1, 0, 0, "void CLLocationControllerCAStats::updateNonChargingMetrics(const CFTimeInterval)", "%s\n", v7);
LABEL_19:
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_10113E790(uint64_t a1)
{
  double v2;
  NSObject *v3;
  double v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  double v13[2];
  uint8_t buf[8];
  std::__shared_weak_count *v15;

  v2 = sub_1001FCBB4();
  if (v2 >= *(double *)a1)
  {
    sub_1001E4804(buf);
    v13[0] = 0.0;
    if (sub_1001FD98C(*(uint64_t *)buf, "LCStatsSubmitMetricsThrSec", v13))
      v4 = v13[0];
    else
      v4 = 86400.0;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v2 - *(double *)a1 >= v4)
    {
      sub_1011405B8((_QWORD *)(a1 + 384));
      sub_10113F228(a1);
      sub_101140554(a1);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      v8 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#LCStats,submitMetrics,less than threshold time to submit metrics", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021A2828);
        LOWORD(v13[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#LCStats,submitMetrics,less than threshold time to submit metrics", v13, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::submitMetrics()", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#LCStats,submitMetrics,CurrentMCT < CA baseline time", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#LCStats,submitMetrics,CurrentMCT < CA baseline time", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLLocationControllerCAStats::submitMetrics()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    sub_101140554(a1);
  }
}

void sub_10113EB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10113EB2C(uint64_t a1, _OWORD *a2)
{
  _OWORD *v4;
  double v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;

  v4 = (_OWORD *)(a1 + 16);
  if ((sub_100182290(a1 + 16) & 1) != 0)
  {
    sub_10011E258((double *)(a1 + 176), (uint64_t)v4, (uint64_t)a2);
    v6 = v5;
    if (v5 > *(double *)(a1 + 656))
    {
      *(double *)(a1 + 656) = v5;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      v7 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(a1 + 656);
        *(_DWORD *)buf = 134349056;
        v23 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#LCStats,update,maxdist,%{public}0.1f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021A2828);
        v17 = *(_QWORD *)(a1 + 656);
        v20 = 134349056;
        v21 = v17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#LCStats,update,maxdist,%{public}0.1f", &v20, 12);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::updateDistanceBetweenQualityPositionDistribution(const CLDaemonLocation &)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
    }
    if (v6 >= 20.0)
    {
      if (v6 >= 50.0)
      {
        if (v6 >= 100.0)
        {
          if (v6 >= 500.0)
          {
            if (v6 >= 1000.0)
            {
              if (v6 >= 5000.0)
              {
                if (v6 >= 20000.0)
                {
                  if (v6 >= 50000.0)
                    goto LABEL_26;
                  v9 = (_DWORD *)(a1 + 652);
                }
                else
                {
                  v9 = (_DWORD *)(a1 + 648);
                }
              }
              else
              {
                v9 = (_DWORD *)(a1 + 644);
              }
            }
            else
            {
              v9 = (_DWORD *)(a1 + 640);
            }
          }
          else
          {
            v9 = (_DWORD *)(a1 + 636);
          }
        }
        else
        {
          v9 = (_DWORD *)(a1 + 632);
        }
      }
      else
      {
        v9 = (_DWORD *)(a1 + 628);
      }
    }
    else
    {
      v9 = (_DWORD *)(a1 + 624);
    }
    if (*v9 != -1)
      ++*v9;
  }
LABEL_26:
  v10 = a2[1];
  *v4 = *a2;
  v4[1] = v10;
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[5];
  v4[4] = a2[4];
  v4[5] = v13;
  v4[2] = v11;
  v4[3] = v12;
  v14 = a2[6];
  v15 = a2[7];
  v16 = a2[8];
  *(_OWORD *)((char *)v4 + 140) = *(_OWORD *)((char *)a2 + 140);
  v4[7] = v15;
  v4[8] = v16;
  v4[6] = v14;
}

void sub_10113EE20(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v4;
  int v5;
  NSObject *v6;
  float v7;
  float v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  double v12;
  uint8_t buf[4];
  double v14;

  if ((*a2 - 1) <= 1)
  {
    v4 = *a3 - 1;
    v5 = v4 < 2;
    sub_10113F040((double *)(a1 + 232), v5);
    sub_10113F040((double *)(a1 + 288), v5);
    if (*(unsigned __int8 *)(a1 + 385) != v5)
    {
      *(_BYTE *)(a1 + 385) = v5;
      if (v4 <= 1)
      {
        if (*(_BYTE *)(a1 + 384))
        {
          *(double *)(a1 + 400) = sub_1001FCBB4();
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021A2828);
          v6 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v7 = *(double *)(a1 + 400);
            *(_DWORD *)buf = 134349056;
            v14 = v7;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#LCStats,homeVisit,device static from %{public}0.1f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021A2828);
            v8 = *(double *)(a1 + 400);
            v11 = 134349056;
            v12 = v8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,homeVisit,device static from %{public}0.1f", &v11, 12);
            v10 = (uint8_t *)v9;
            sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v9);
            if (v10 != buf)
              free(v10);
          }
        }
      }
    }
  }
}

void sub_10113F040(double *a1, int a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  uint64_t v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  uint64_t v16;

  if (*(unsigned __int8 *)a1 != a2)
  {
    *(_BYTE *)a1 = a2;
    a1[1] = sub_1001FCBB4();
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(unsigned __int8 *)a1;
      v5 = *((_QWORD *)a1 + 1);
      *(_DWORD *)buf = 67240448;
      v14 = v4;
      v15 = 2050;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,static,%{public}d,time,%{public}0.1f", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      v6 = *(unsigned __int8 *)a1;
      v7 = *((_QWORD *)a1 + 1);
      v10[0] = 67240448;
      v10[1] = v6;
      v11 = 2050;
      v12 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,ThrPosUnc,static,%{public}d,time,%{public}0.1f", v10, 18);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::ThresholdPosUncMetric::motionStateStatic(const BOOL)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_10113F228(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  double v5;
  double v8;
  double v9;
  unsigned int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  double v16;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  __int32 v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  __int128 v39;
  uint64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  int32x2_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int32x4_t v54;
  uint64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  int32x2_t v59;
  NSObject *v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  __int32 v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  __int32 v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  __int32 v76;
  __int32 v77;
  __int32 v78;
  __int32 v79;
  const char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  char *v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  __int32 v90;
  unsigned int v91;
  const char *v92;
  char *v93;
  uint64_t v94;
  unsigned int v95;
  int32x2_t v96;
  int32x4_t v97;
  int32x2_t v98;
  int32x4_t v99;
  unsigned int v100;
  _QWORD v101[5];
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  int32x4_t v107;
  int32x2_t v108;
  int32x4_t v109;
  int32x2_t v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  _BYTE v114[14];
  _BYTE v115[6];
  _BYTE v116[6];
  __int16 v117;
  unsigned int v118;
  __int16 v119;
  __int32 v120;
  __int16 v121;
  unsigned int v122;
  __int16 v123;
  unsigned int v124;
  __int16 v125;
  unsigned int v126;
  __int16 v127;
  __int32 v128;
  __int16 v129;
  __int32 v130;
  __int16 v131;
  __int32 v132;
  __int16 v133;
  __int32 v134;
  __int16 v135;
  __int32 v136;
  __int16 v137;
  __int32 v138;
  __int16 v139;
  unsigned int v140;
  __int16 v141;
  unsigned int v142;
  __int16 v143;
  unsigned int v144;
  _BYTE buf[14];
  _BYTE v146[6];
  _BYTE v147[6];
  __int16 v148;
  unsigned int v149;
  __int16 v150;
  __int32 v151;
  __int16 v152;
  unsigned int v153;
  __int16 v154;
  unsigned int v155;
  __int16 v156;
  unsigned int v157;
  __int16 v158;
  __int32 v159;
  __int16 v160;
  __int32 v161;
  __int16 v162;
  __int32 v163;
  __int16 v164;
  __int32 v165;
  __int16 v166;
  __int32 v167;
  __int16 v168;
  __int32 v169;
  __int16 v170;
  unsigned int v171;
  __int16 v172;
  unsigned int v173;
  __int16 v174;
  unsigned int v175;

  v2 = *(_QWORD *)(a1 + 344);
  v3 = *(_DWORD *)(v2 + 48 * *(_QWORD *)(a1 + 368) + 40)
     + *(_DWORD *)(v2 + 48 * *(_QWORD *)(a1 + 368) + 36)
     + *(_DWORD *)(v2 + 48 * *(_QWORD *)(a1 + 368) + 44);
  v4 = *(_DWORD *)(v2 + 48 * *(_QWORD *)(a1 + 376) + 40)
     + *(_DWORD *)(v2 + 48 * *(_QWORD *)(a1 + 376) + 36)
     + *(_DWORD *)(v2 + 48 * *(_QWORD *)(a1 + 376) + 44);
  v5 = *(double *)(a1 + 592);
  if (v5 >= 1.0 || v3 != 0 || v4 != 0)
  {
    v8 = 0.0;
    if (v5 > 0.0)
      v8 = *(double *)(a1 + 600) / v5;
    v9 = *(double *)(a1 + 608);
    if (v9 <= 1.0)
      v10 = 0;
    else
      v10 = (*(double *)(a1 + 616) / v9 * 100.0);
    v16 = v8 * 100.0;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v17 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(double *)(a1 + 592);
      v19 = *(double *)(a1 + 656);
      v20 = *(double *)(a1 + 608);
      v21 = *(_DWORD *)(a1 + 624);
      v22 = *(_DWORD *)(a1 + 628);
      v23 = *(_DWORD *)(a1 + 632);
      v24 = *(_DWORD *)(a1 + 636);
      v25 = *(_DWORD *)(a1 + 640);
      v26 = *(_DWORD *)(a1 + 644);
      v27 = *(_DWORD *)(a1 + 648);
      v28 = *(_DWORD *)(a1 + 652);
      *(_DWORD *)buf = 67177729;
      *(_DWORD *)&buf[4] = v18;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v16;
      *(_WORD *)v146 = 1026;
      *(_DWORD *)&v146[2] = v19;
      *(_WORD *)v147 = 1025;
      *(_DWORD *)&v147[2] = v20;
      v148 = 1026;
      v149 = v10;
      v150 = 1026;
      v151 = v21;
      v152 = 1026;
      v153 = v22;
      v154 = 1026;
      v155 = v23;
      v156 = 1026;
      v157 = v24;
      v158 = 1026;
      v159 = v25;
      v160 = 1026;
      v161 = v26;
      v162 = 1026;
      v163 = v27;
      v164 = 1026;
      v165 = v28;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#LCStats,LocationControllerMetrics,Submit to CA,totalDailyOutsideVisitTimeSeconds,%{private}d,totalDailyOutsideVisitTimePercentPosBetterThresholdUnc,%{public}d,maxDailyDistanceBetweenQualityPosOutsideVisitMeters,%{public}d,totalDailyOutsideVisitNonChargingTimeSeconds,%{private}d,totalDailyOutsideVisitNonChargingTimePercentPosBetterThresholdUnc,%{public}d,countPos<20m,%{public}d,countPos<50m,%{public}d,countPos<100m,%{public}d,countPos<500m,%{public}d,countPos<1000m,%{public}d,countPos<5000m,%{public}d,countPos<20000m,%{public}d,countPos<50000m,%{public}d,", buf, 0x50u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      v69 = *(double *)(a1 + 592);
      v70 = *(double *)(a1 + 656);
      v71 = *(double *)(a1 + 608);
      v72 = *(_DWORD *)(a1 + 624);
      v73 = *(_DWORD *)(a1 + 628);
      v74 = *(_DWORD *)(a1 + 632);
      v75 = *(_DWORD *)(a1 + 636);
      v76 = *(_DWORD *)(a1 + 640);
      v77 = *(_DWORD *)(a1 + 644);
      v78 = *(_DWORD *)(a1 + 648);
      v79 = *(_DWORD *)(a1 + 652);
      *(_DWORD *)v114 = 67177729;
      *(_DWORD *)&v114[4] = v69;
      *(_WORD *)&v114[8] = 1026;
      *(_DWORD *)&v114[10] = v16;
      *(_WORD *)v115 = 1026;
      *(_DWORD *)&v115[2] = v70;
      *(_WORD *)v116 = 1025;
      *(_DWORD *)&v116[2] = v71;
      v117 = 1026;
      v118 = v10;
      v119 = 1026;
      v120 = v72;
      v121 = 1026;
      v122 = v73;
      v123 = 1026;
      v124 = v74;
      v125 = 1026;
      v126 = v75;
      v127 = 1026;
      v128 = v76;
      v129 = 1026;
      v130 = v77;
      v131 = 1026;
      v132 = v78;
      v133 = 1026;
      v134 = v79;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#LCStats,LocationControllerMetrics,Submit to CA,totalDailyOutsideVisitTimeSeconds,%{private}d,totalDailyOutsideVisitTimePercentPosBetterThresholdUnc,%{public}d,maxDailyDistanceBetweenQualityPosOutsideVisitMeters,%{public}d,totalDailyOutsideVisitNonChargingTimeSeconds,%{private}d,totalDailyOutsideVisitNonChargingTimePercentPosBetterThresholdUnc,%{public}d,countPos<20m,%{public}d,countPos<50m,%{public}d,countPos<100m,%{public}d,countPos<500m,%{public}d,countPos<1000m,%{public}d,countPos<5000m,%{public}d,countPos<20000m,%{public}d,countPos<50000m,%{public}d,", v114, 80);
      v81 = (char *)v80;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::submitMetricsForOutSideVisitAndFuserSessionStart()", "%s\n", v80);
      if (v81 != buf)
        free(v81);
    }
    v30 = *(_QWORD *)(a1 + 368);
    v31 = *(_QWORD *)(a1 + 344);
    v32 = (_DWORD *)(v31 + 48 * v30);
    v33 = v32[9];
    if (v33)
    {
      LODWORD(v29) = *v32;
      v29 = (double)*(unint64_t *)&v29 * 100.0 / (double)v33;
      v100 = v29;
    }
    else
    {
      v100 = 0;
    }
    v95 = v10;
    v34 = *(_DWORD *)(v31 + 48 * v30 + 40);
    if (v34)
    {
      LODWORD(v29) = *(_DWORD *)(v31 + 48 * v30 + 4);
      v29 = (double)*(unint64_t *)&v29 * 100.0 / (double)v34;
      v35 = v29;
    }
    else
    {
      v35 = 0;
    }
    v36 = *(_DWORD *)(v31 + 48 * v30 + 44);
    if (v36)
    {
      LODWORD(v29) = *(_DWORD *)(v31 + 48 * v30 + 8);
      v37 = ((double)*(unint64_t *)&v29 * 100.0 / (double)v36);
      if (v3)
      {
LABEL_35:
        v38 = v31 + 48 * v30;
        v39 = *(_OWORD *)(v38 + 12);
        v40.i64[0] = v39;
        v40.i64[1] = DWORD1(v39);
        v41 = vcvtq_f64_u64(v40);
        v40.i64[0] = DWORD2(v39);
        v40.i64[1] = HIDWORD(v39);
        v42 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
        v43 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v3), 0);
        v99 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(v41, v42), v43)), (int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v40), v42), v43)));
        *(_QWORD *)&v39 = *(_QWORD *)(v38 + 28);
        v40.i64[0] = v39;
        v40.i64[1] = DWORD1(v39);
        v44 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v40), v42), v43)));
LABEL_38:
        v98 = v44;
        v45 = *(_QWORD *)(a1 + 376);
        v46 = *(_DWORD *)(v31 + 48 * v45 + 36) + v33;
        if (v46)
          v47 = ((double)(*(_DWORD *)(v31 + 48 * v45) + *v32) * 100.0 / (double)v46);
        else
          v47 = 0;
        v48 = *(_DWORD *)(v31 + 48 * v45 + 40) + v34;
        if (v48)
          v49 = ((double)(*(_DWORD *)(v31 + 48 * v45 + 4) + *(_DWORD *)(v31 + 48 * v30 + 4))
                             * 100.0
                             / (double)v48);
        else
          v49 = 0;
        v50 = *(_DWORD *)(v31 + 48 * v45 + 44) + v36;
        if (v50)
          v51 = ((double)(*(_DWORD *)(v31 + 48 * v45 + 8) + *(_DWORD *)(v31 + 48 * v30 + 8))
                             * 100.0
                             / (double)v50);
        else
          v51 = 0;
        if (v4 + v3)
        {
          v52 = v31 + 48 * v30;
          v53 = v31 + 48 * v45;
          v54 = vaddq_s32(*(int32x4_t *)(v53 + 12), *(int32x4_t *)(v52 + 12));
          v55.i64[0] = v54.u32[0];
          v55.i64[1] = v54.u32[1];
          v56 = vcvtq_f64_u64(v55);
          v55.i64[0] = v54.u32[2];
          v55.i64[1] = v54.u32[3];
          v57 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
          v58 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v4 + v3)), 0);
          v97 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(v56, v57), v58)), (int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v55), v57), v58)));
          *(int32x2_t *)v54.i8 = vadd_s32(*(int32x2_t *)(v53 + 28), *(int32x2_t *)(v52 + 28));
          v55.i64[0] = v54.u32[0];
          v55.i64[1] = v54.u32[1];
          v59 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v55), v57), v58)));
        }
        else
        {
          v59 = 0;
          v97 = 0u;
        }
        v96 = v59;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021A2828);
        v60 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v61) = 67244544;
          HIDWORD(v61) = v97.i32[0];
          *(_QWORD *)buf = v61;
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)((unint64_t)buf | 0xA) = v97.i32[1];
          *(_WORD *)v146 = 1026;
          *(_DWORD *)&v146[2] = v97.i32[2];
          *(_WORD *)v147 = 1026;
          *(_DWORD *)&v147[2] = v97.i32[3];
          v148 = 1026;
          v149 = v96.i32[0];
          v150 = 1026;
          v151 = v96.i32[1];
          v152 = 1026;
          v153 = v47;
          v154 = 1026;
          v155 = v49;
          v156 = 1026;
          v157 = v51;
          v158 = 1026;
          v159 = v99.i32[0];
          v160 = 1026;
          v161 = v99.i32[1];
          v162 = 1026;
          v163 = v99.i32[2];
          v164 = 1026;
          v165 = v99.i32[3];
          v166 = 1026;
          v167 = v98.i32[0];
          v168 = 1026;
          v169 = v98.i32[1];
          v170 = 1026;
          v171 = v100;
          v172 = 1026;
          v173 = v35;
          v174 = 1026;
          v175 = v37;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#LCStats,#LCFuser,Percentage,LocationControllerMetrics,Submit to CA,pctSessionStartFuserHuncLT25m,%{public}d,pctSessionStartFuserHuncLT50m,%{public}d,pctSessionStartFuserHuncLT100m,%{public}d,pctSessionStartFuserHuncLT200m,%{public}d,pctSessionStartFuserHuncLT500m,%{public}d,pctSessionStartFuserHuncGT500m,%{public}d,pctBestSessionStartFuserHuncLT50m,%{public}d,pctFineSessionStartFuserHuncLT100m,%{public}d,pctCoarseSessionStartFuserHuncLT1000m,%{public}d,pctSessionStartHomeVisitFuserHuncLT25m,%{public}d,pctSessionStartHomeVisitFuserHuncLT50m,%{public}d,pctSessionStartHomeVisitFuserHuncLT100m,%{public}d,pctSessionStartHomeVisitFuserHuncLT200m,%{public}d,pctSessionStartHomeVisitFuserHuncLT500m,%{public}d,pctSessionStartHomeVisitFuserHuncGT500m,%{public}d,pctBestSessionStartHomeVisitFuserHuncLT50m,%{public}d,pctFineSessionStartHomeVisitFuserHuncLT100m,%{public}d,pctCoarseSessionStartHomeVisitFuserHuncLT1000m,%{public}d,", buf, 0x6Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021A2828);
          v82 = qword_1022A0028;
          LODWORD(v83) = 67244544;
          HIDWORD(v83) = v97.i32[0];
          *(_QWORD *)v114 = v83;
          *(_WORD *)&v114[8] = 1026;
          *(_DWORD *)((unint64_t)v114 | 0xA) = v97.i32[1];
          *(_WORD *)v115 = 1026;
          *(_DWORD *)&v115[2] = v97.i32[2];
          *(_WORD *)v116 = 1026;
          *(_DWORD *)&v116[2] = v97.i32[3];
          v117 = 1026;
          v118 = v96.i32[0];
          v119 = 1026;
          v120 = v96.i32[1];
          v121 = 1026;
          v122 = v47;
          v123 = 1026;
          v124 = v49;
          v125 = 1026;
          v126 = v51;
          v127 = 1026;
          v128 = v99.i32[0];
          v129 = 1026;
          v130 = v99.i32[1];
          v131 = 1026;
          v132 = v99.i32[2];
          v133 = 1026;
          v134 = v99.i32[3];
          v135 = 1026;
          v136 = v98.i32[0];
          v137 = 1026;
          v138 = v98.i32[1];
          v139 = 1026;
          v140 = v100;
          v141 = 1026;
          v142 = v35;
          v143 = 1026;
          v144 = v37;
          LODWORD(v94) = 110;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v82, 0, "#LCStats,#LCFuser,Percentage,LocationControllerMetrics,Submit to CA,pctSessionStartFuserHuncLT25m,%{public}d,pctSessionStartFuserHuncLT50m,%{public}d,pctSessionStartFuserHuncLT100m,%{public}d,pctSessionStartFuserHuncLT200m,%{public}d,pctSessionStartFuserHuncLT500m,%{public}d,pctSessionStartFuserHuncGT500m,%{public}d,pctBestSessionStartFuserHuncLT50m,%{public}d,pctFineSessionStartFuserHuncLT100m,%{public}d,pctCoarseSessionStartFuserHuncLT1000m,%{public}d,pctSessionStartHomeVisitFuserHuncLT25m,%{public}d,pctSessionStartHomeVisitFuserHuncLT50m,%{public}d,pctSessionStartHomeVisitFuserHuncLT100m,%{public}d,pctSessionStartHomeVisitFuserHuncLT200m,%{public}d,pctSessionStartHomeVisitFuserHuncLT500m,%{public}d,pctSessionStartHomeVisitFuserHuncGT500m,%{public}d,pctBestSessionStartHomeVisitFuserHuncLT50m,%{public}d,pctFineSessionStartHomeVisitFuserHuncLT100m,%{public}d,pctCoarseSessionStartHomeVisitFuserHuncLT1000m,%{public}d,", v114, v94);
          v85 = (char *)v84;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::submitMetricsForOutSideVisitAndFuserSessionStart()", "%s\n", v84);
          if (v85 != buf)
            free(v85);
        }
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021A2828);
        v62 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          v63 = *(_QWORD *)(a1 + 344);
          v64 = (unsigned int *)(v63 + 48 * *(_QWORD *)(a1 + 368));
          v65 = v64[4];
          LODWORD(v63) = *(_DWORD *)(v63 + 48 * *(_QWORD *)(a1 + 376) + 16);
          v66 = *v64;
          v67 = v64[1];
          v68 = v64[9];
          LODWORD(v64) = v64[10];
          *(_DWORD *)buf = 67241984;
          *(_DWORD *)&buf[4] = v3;
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)&buf[10] = v4;
          *(_WORD *)v146 = 1026;
          *(_DWORD *)&v146[2] = v65;
          *(_WORD *)v147 = 1026;
          *(_DWORD *)&v147[2] = v63;
          v148 = 1026;
          v149 = v66;
          v150 = 1026;
          v151 = v67;
          v152 = 1026;
          v153 = v68;
          v154 = 1026;
          v155 = v64;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#LCStats,#LCFuser,Count,LocationControllerMetrics,totalDailySessionStartHomeVisit,%{public}d,totalDailySessionStartNotHomeVisit,%{public}d,dailyCountSessionStartHomeVisitFuserHuncLT50m,%{public}d,dailyCountSessionStartNotHomeVisitFuserHuncLT50m,%{public}d,dailyCountBestSessionStartHomeVisitFuserHuncLT50m,%{public}d,dailyCountFineSessionStartHomeVisitFuserHuncLT100m,%{public}d,dailyCountBestSessionStartHomeVisit,%{public}d,dailyCountFineSessionStartHomeVisit,%{public}d,", buf, 0x32u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021A2828);
          v86 = *(_QWORD *)(a1 + 344);
          v87 = (unsigned int *)(v86 + 48 * *(_QWORD *)(a1 + 368));
          v88 = v87[4];
          LODWORD(v86) = *(_DWORD *)(v86 + 48 * *(_QWORD *)(a1 + 376) + 16);
          v89 = *v87;
          v90 = v87[1];
          v91 = v87[9];
          LODWORD(v87) = v87[10];
          *(_DWORD *)v114 = 67241984;
          *(_DWORD *)&v114[4] = v3;
          *(_WORD *)&v114[8] = 1026;
          *(_DWORD *)&v114[10] = v4;
          *(_WORD *)v115 = 1026;
          *(_DWORD *)&v115[2] = v88;
          *(_WORD *)v116 = 1026;
          *(_DWORD *)&v116[2] = v86;
          v117 = 1026;
          v118 = v89;
          v119 = 1026;
          v120 = v90;
          v121 = 1026;
          v122 = v91;
          v123 = 1026;
          v124 = v87;
          LODWORD(v94) = 50;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#LCStats,#LCFuser,Count,LocationControllerMetrics,totalDailySessionStartHomeVisit,%{public}d,totalDailySessionStartNotHomeVisit,%{public}d,dailyCountSessionStartHomeVisitFuserHuncLT50m,%{public}d,dailyCountSessionStartNotHomeVisitFuserHuncLT50m,%{public}d,dailyCountBestSessionStartHomeVisitFuserHuncLT50m,%{public}d,dailyCountFineSessionStartHomeVisitFuserHuncLT100m,%{public}d,dailyCountBestSessionStartHomeVisit,%{public}d,dailyCountFineSessionStartHomeVisit,%{public}d,", v114, v94);
          v93 = (char *)v92;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::submitMetricsForOutSideVisitAndFuserSessionStart()", "%s\n", v92);
          if (v93 != buf)
            free(v93);
        }
        v101[0] = _NSConcreteStackBlock;
        v101[1] = 3221225472;
        v101[2] = sub_10113FF70;
        v101[3] = &unk_1021A2808;
        v101[4] = a1;
        v102 = v16;
        v103 = v95;
        v104 = v51;
        v105 = v49;
        v106 = v47;
        v107 = v97;
        v108 = v96;
        v109 = v99;
        v110 = v98;
        v111 = v100;
        v112 = v37;
        v113 = v35;
        AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.LocationControllerMetrics"), v101);
        return;
      }
    }
    else
    {
      v37 = 0;
      if (v3)
        goto LABEL_35;
    }
    v44 = 0;
    v99 = 0u;
    goto LABEL_38;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021A2828);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(a1 + 592);
    *(_DWORD *)buf = 134284033;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)v146 = 0;
    *(_WORD *)&v146[4] = 1026;
    *(_DWORD *)v147 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#LCStats,ForOutSideVisitAndFuserSessionStart,skip submission,outsideVisitSec,%{private}0.1f,inHomeVisitSessionCnt,%{public}d,inNonHomeVisitSessionCnt,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v13 = *(_QWORD *)(a1 + 592);
    *(_DWORD *)v114 = 134284033;
    *(_QWORD *)&v114[4] = v13;
    *(_WORD *)&v114[12] = 1026;
    *(_DWORD *)v115 = 0;
    *(_WORD *)&v115[4] = 1026;
    *(_DWORD *)v116 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#LCStats,ForOutSideVisitAndFuserSessionStart,skip submission,outsideVisitSec,%{private}0.1f,inHomeVisitSessionCnt,%{public}d,inNonHomeVisitSessionCnt,%{public}d", v114, 24);
    v15 = (char *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::submitMetricsForOutSideVisitAndFuserSessionStart()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

NSDictionary *sub_10113FF70(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[31];
  _QWORD v5[31];

  v2 = *(_QWORD *)(a1 + 32);
  v4[0] = CFSTR("totalDailyOutsideVisitTimeSeconds");
  v5[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(double *)(v2 + 592));
  v4[1] = CFSTR("totalDailyOutsideVisitTimePercentPosBetterThresholdUnc");
  v5[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 40));
  v4[2] = CFSTR("maxDailyDistanceBetweenQualityPosOutsideVisitMeters");
  v5[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(double *)(v2 + 656));
  v4[3] = CFSTR("totalDailyOutsideVisitNonChargingTimeSeconds");
  v5[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(double *)(v2 + 608));
  v4[4] = CFSTR("totalDailyOutsideVisitNonChargingTimePercentPosBetterThresholdUnc");
  v5[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 44));
  v4[5] = CFSTR("DailyCountOutsideVisitDistanceBetweenQualityPositionLess20m");
  v5[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 624));
  v4[6] = CFSTR("DailyCountOutsideVisitDistanceBetweenQualityPositionLess50m");
  v5[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 628));
  v4[7] = CFSTR("DailyCountOutsideVisitDistanceBetweenQualityPositionLess100m");
  v5[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 632));
  v4[8] = CFSTR("DailyCountOutsideVisitDistanceBetweenQualityPositionLess500m");
  v5[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 636));
  v4[9] = CFSTR("DailyCountOutsideVisitDistanceBetweenQualityPositionLess1000m");
  v5[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 640));
  v4[10] = CFSTR("DailyCountOutsideVisitDistanceBetweenQualityPositionLess5000m");
  v5[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 644));
  v4[11] = CFSTR("DailyCountOutsideVisitDistanceBetweenQualityPositionLess20000m");
  v5[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 648));
  v4[12] = CFSTR("DailyCountOutsideVisitDistanceBetweenQualityPositionLess50000m");
  v5[12] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 652));
  v4[13] = CFSTR("DailyPercentCoarseSessionStartFuserHuncLT1000m");
  v5[13] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 48));
  v4[14] = CFSTR("DailyPercentFineSessionStartFuserHuncLT100m");
  v5[14] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 52));
  v4[15] = CFSTR("DailyPercentBestSessionStartFuserHuncLT50m");
  v5[15] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 56));
  v4[16] = CFSTR("DailyPercentSessionStartFuserHuncLT25m");
  v5[16] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 60));
  v4[17] = CFSTR("DailyPercentSessionStartFuserHuncLT50m");
  v5[17] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 64));
  v4[18] = CFSTR("DailyPercentSessionStartFuserHuncLT100m");
  v5[18] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 68));
  v4[19] = CFSTR("DailyPercentSessionStartFuserHuncLT200m");
  v5[19] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 72));
  v4[20] = CFSTR("DailyPercentSessionStartFuserHuncLT500m");
  v5[20] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 76));
  v4[21] = CFSTR("DailyPercentSessionStartFuserHuncGT500m");
  v5[21] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 80));
  v4[22] = CFSTR("DailyPercentSessionStartHomeVisitFuserHuncLT25m");
  v5[22] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 84));
  v4[23] = CFSTR("DailyPercentSessionStartHomeVisitFuserHuncLT50m");
  v5[23] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 88));
  v4[24] = CFSTR("DailyPercentSessionStartHomeVisitFuserHuncLT100m");
  v5[24] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 92));
  v4[25] = CFSTR("DailyPercentSessionStartHomeVisitFuserHuncLT200m");
  v5[25] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 96));
  v4[26] = CFSTR("DailyPercentSessionStartHomeVisitFuserHuncLT500m");
  v5[26] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 100));
  v4[27] = CFSTR("DailyPercentSessionStartHomeVisitFuserHuncGT500m");
  v5[27] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 104));
  v4[28] = CFSTR("DailyPercentBestSessionStartHomeVisitFuserHuncLT50m");
  v5[28] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 108));
  v4[29] = CFSTR("DailyPercentCoarseSessionStartHomeVisitFuserHuncLT1000m");
  v5[29] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 112));
  v4[30] = CFSTR("DailyPercentFineSessionStartHomeVisitFuserHuncLT100m");
  v5[30] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 116));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 31);
}

void sub_101140358(uint64_t a1, int a2)
{
  NSObject *v3;
  _BOOL4 v4;
  double v5;
  _BOOL4 v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  _BOOL4 v11;

  if (*(unsigned __int8 *)(a1 + 217) != a2)
  {
    *(_BYTE *)(a1 + 217) = a2;
    if (*(_BYTE *)(a1 + 216))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      v3 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(_BYTE *)(a1 + 217) == 0;
        *(_DWORD *)buf = 67240192;
        v11 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#LCStats,outvisit,battery,charging,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021A2828);
        v6 = *(_BYTE *)(a1 + 217) == 0;
        v9[0] = 67240192;
        v9[1] = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#LCStats,outvisit,battery,charging,%{public}d", v9, 8);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::feedBatteryChargingStatus(BOOL)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      v5 = sub_1001FCBB4();
      if (*(_BYTE *)(a1 + 217))
      {
        *(double *)(a1 + 224) = v5;
        sub_10113DF00(a1 + 288, v5);
      }
      else
      {
        sub_10113E428((double *)a1);
      }
    }
  }
}

void sub_101140554(uint64_t a1)
{
  sub_100008848(a1 + 568, *(_QWORD **)(a1 + 576));
  *(_QWORD *)(a1 + 568) = a1 + 576;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 344);
  sub_10113D764(a1 + 344, 2uLL);
  *(double *)a1 = sub_1001FCBB4();
}

void sub_1011405B8(_QWORD *a1)
{
  id v2;
  double v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  double v15;
  float v16;
  float v17;
  NSObject *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  double v32;
  double v33;
  NSNumber *v34;
  void *v35;
  const __CFString *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float v41;
  int v43;
  int v44;
  int v45;
  int v46;
  _QWORD *v47;
  _QWORD *v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  const char *v62;
  uint8_t *v63;
  NSObject *v64;
  const char *v65;
  uint8_t *v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD v72[5];
  _DWORD v73[2];
  __int16 v74;
  int v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  uint8_t buf[4];
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  __int16 v112;
  int v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  int v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;

  if (a1[25])
  {
    v2 = objc_alloc_init((Class)NSMutableDictionary);
    v4 = (_QWORD *)a1[23];
    v71 = a1 + 24;
    if (v4 != a1 + 24)
    {
      LODWORD(v5) = 0;
      LODWORD(v6) = 0;
      LODWORD(v7) = 0;
      LODWORD(v8) = 0;
      LODWORD(v9) = 0;
      v10 = 0.0;
      v11 = 0.0;
      v12 = 0.0;
      v13 = 0.0;
      while (1)
      {
        v14 = *((double *)v4 + 5);
        v15 = *((double *)v4 + 6);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021A2828);
        v16 = v14;
        v17 = v15;
        v18 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          v19 = *((_DWORD *)v4 + 8);
          v21 = *((_DWORD *)v4 + 14);
          v20 = *((_DWORD *)v4 + 15);
          v22 = *((_DWORD *)v4 + 16);
          v23 = *((_DWORD *)v4 + 17);
          v24 = *((_DWORD *)v4 + 18);
          v25 = *((_DWORD *)v4 + 19);
          v26 = *((_DWORD *)v4 + 20);
          v27 = *((_DWORD *)v4 + 21);
          v29 = *((_DWORD *)v4 + 22);
          v28 = *((_DWORD *)v4 + 23);
          v30 = *((_DWORD *)v4 + 24);
          *(_DWORD *)buf = 67243520;
          v101 = v19;
          v102 = 1026;
          v103 = v20;
          v104 = 2050;
          v105 = v16;
          v106 = 2050;
          v107 = v17;
          v108 = 1026;
          v109 = v21;
          v110 = 1026;
          v111 = v22;
          v112 = 1026;
          v113 = v23;
          v114 = 1026;
          v115 = v24;
          v116 = 1026;
          v117 = v25;
          v118 = 1026;
          v119 = v26;
          v120 = 1026;
          v121 = v27;
          v122 = 1026;
          v123 = v29;
          v124 = 1026;
          v125 = v28;
          v126 = 1026;
          v127 = v30;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#LCStats,homeVisit,metrics,posType,%{public}d,countOfPosType,%{public}d,maxPosError,%{public}0.1f,uncAtMaxError,%{public}0.1f,sigEnv,%{public}d,countOfPosErrLT100,%{public}d,countOfPosErr100To200,%{public}d,countOfPosErrGE200,%{public}d,countOfPosErrOverUncLTOne,%{public}d,countOfPosErrOverUncOneToThree,%{public}d,countOfPosErrOverUncGEThree,%{public}d,countOfPosErrorLT100UncGTOne,%{public}d,countOfPosError100To200UncGTOne,%{public}d,countOfPosErrorGE200UncGTOne,%{public}d", buf, 0x5Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021A2828);
          v50 = *((_DWORD *)v4 + 8);
          v52 = *((_DWORD *)v4 + 14);
          v51 = *((_DWORD *)v4 + 15);
          v53 = *((_DWORD *)v4 + 16);
          v54 = *((_DWORD *)v4 + 17);
          v55 = *((_DWORD *)v4 + 18);
          v56 = *((_DWORD *)v4 + 19);
          v57 = *((_DWORD *)v4 + 20);
          v58 = *((_DWORD *)v4 + 21);
          v60 = *((_DWORD *)v4 + 22);
          v59 = *((_DWORD *)v4 + 23);
          v61 = *((_DWORD *)v4 + 24);
          v73[0] = 67243520;
          v73[1] = v50;
          v74 = 1026;
          v75 = v51;
          v76 = 2050;
          v77 = v16;
          v78 = 2050;
          v79 = v17;
          v80 = 1026;
          v81 = v52;
          v82 = 1026;
          v83 = v53;
          v84 = 1026;
          v85 = v54;
          v86 = 1026;
          v87 = v55;
          v88 = 1026;
          v89 = v56;
          v90 = 1026;
          v91 = v57;
          v92 = 1026;
          v93 = v58;
          v94 = 1026;
          v95 = v60;
          v96 = 1026;
          v97 = v59;
          v98 = 1026;
          v99 = v61;
          LODWORD(v70) = 94;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#LCStats,homeVisit,metrics,posType,%{public}d,countOfPosType,%{public}d,maxPosError,%{public}0.1f,uncAtMaxError,%{public}0.1f,sigEnv,%{public}d,countOfPosErrLT100,%{public}d,countOfPosErr100To200,%{public}d,countOfPosErrGE200,%{public}d,countOfPosErrOverUncLTOne,%{public}d,countOfPosErrOverUncOneToThree,%{public}d,countOfPosErrOverUncGEThree,%{public}d,countOfPosErrorLT100UncGTOne,%{public}d,countOfPosError100To200UncGTOne,%{public}d,countOfPosErrorGE200UncGTOne,%{public}d", v73, v70);
          v63 = (uint8_t *)v62;
          sub_100512490("Generic", 1, 0, 2, "void HomeVisitInfo::submitMetricsHomeVisit()", "%s\n", v62);
          if (v63 != buf)
            free(v63);
        }
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 14)), CFSTR("SigEnv"));
        v31 = *((_DWORD *)v4 + 8);
        if (v31 <= 5)
          break;
        if (v31 == 6)
        {
          objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 15)), CFSTR("numCellFix"));
          *(float *)&v39 = v16;
          objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v39), CFSTR("maxCellError"));
          *(float *)&v40 = v17;
          v34 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v40);
          v35 = v2;
          v36 = CFSTR("uncAtMaxCellError");
          goto LABEL_18;
        }
        if (v31 == 11)
          goto LABEL_15;
LABEL_19:
        v41 = v16 / v17;
        if (v17 <= 0.0)
          v41 = 0.0;
        if (v41 < 1.0 && v12 < v16)
          v12 = v16;
        if (v13 < v16)
          v13 = v16;
        if (v11 < v16 && v41 > 1.0)
        {
          v11 = v16;
          v10 = v17;
          v5 = *((unsigned int *)v4 + 8);
        }
        else
        {
          v5 = v5;
        }
        v44 = *((_DWORD *)v4 + 23);
        v43 = *((_DWORD *)v4 + 24);
        v45 = *((_DWORD *)v4 + 21);
        v46 = *((_DWORD *)v4 + 22);
        v47 = (_QWORD *)v4[1];
        if (v47)
        {
          do
          {
            v48 = v47;
            v47 = (_QWORD *)*v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            v48 = (_QWORD *)v4[2];
            v49 = *v48 == (_QWORD)v4;
            v4 = v48;
          }
          while (!v49);
        }
        v9 = (v46 + v9);
        v8 = (v44 + v8);
        v7 = (v43 + v7);
        v6 = (v45 + v6);
        v4 = v48;
        if (v48 == v71)
          goto LABEL_52;
      }
      if (v31 == 1)
      {
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 15)), CFSTR("numGPSFix"));
        *(float *)&v37 = v16;
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v37), CFSTR("maxGpsError"));
        *(float *)&v38 = v17;
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v38), CFSTR("uncAtMaxGpsError"));
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 16)), CFSTR("countGpsErrorLessThan100"));
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 17)), CFSTR("countGpsError100to200"));
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 18)), CFSTR("countGpsErrorMoreThan200"));
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 19)), CFSTR("countGpsErrorByUncLessThan1"));
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 20)), CFSTR("countGpsErrorByUnc1to3"));
        v34 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 21));
        v35 = v2;
        v36 = CFSTR("countGpsErrorByUncMoreThan3");
      }
      else
      {
        if (v31 != 4)
          goto LABEL_19;
LABEL_15:
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 15)), CFSTR("numWiFiFix"));
        *(float *)&v32 = v16;
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v32), CFSTR("maxWiFiError"));
        *(float *)&v33 = v17;
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v33), CFSTR("uncAtMaxWiFiError"));
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 16)), CFSTR("countWiFiErrorLessThan100"));
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 17)), CFSTR("countWiFiError100to200"));
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 18)), CFSTR("countWiFiErrorMoreThan200"));
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 19)), CFSTR("countWiFiErrorByUncLessThan1"));
        objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 20)), CFSTR("countWiFiErrorByUnc1to3"));
        v34 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 21));
        v35 = v2;
        v36 = CFSTR("countWiFiErrorByUncMoreThan3");
      }
LABEL_18:
      objc_msgSend(v35, "setObject:forKey:", v34, v36);
      goto LABEL_19;
    }
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v6 = 0;
    v5 = 0;
    v13 = 0.0;
    v12 = 0.0;
    v11 = 0.0;
    v10 = 0.0;
LABEL_52:
    *(float *)&v3 = v13;
    objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3), CFSTR("maxPosError"));
    *(float *)&v67 = v10;
    objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v67), CFSTR("uncAtMaxPosErrorUncMoreThan1"));
    *(float *)&v68 = v12;
    objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v68), CFSTR("maxPosErrorUncLessThan1"));
    *(float *)&v69 = v11;
    objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v69), CFSTR("maxPosErrorUncMoreThan1"));
    objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v9), CFSTR("countPosErrorLessThan100UncMoreThan1"));
    objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8), CFSTR("countPosError100to200UncMoreThan1"));
    objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v7), CFSTR("countPosErrorMoreThan200UncMoreThan1"));
    objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v6), CFSTR("countPosErrorByUncMoreThan3"));
    objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v5), CFSTR("posTypeAtMaxPosError"));
    v72[0] = _NSConcreteStackBlock;
    v72[1] = 3221225472;
    v72[2] = sub_101140F70;
    v72[3] = &unk_10215F370;
    v72[4] = v2;
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.HomeVisitErrMetrics"), v72);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v64 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "#LCStats,homeVisit,metrics,no home visit in last 24 hours", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      LOWORD(v73[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,homeVisit,metrics,no home visit in last 24 hours", v73, 2);
      v66 = (uint8_t *)v65;
      sub_100512490("Generic", 1, 0, 2, "void HomeVisitInfo::submitMetricsHomeVisit()", "%s\n", v65);
      if (v66 != buf)
        free(v66);
    }
  }
}

uint64_t sub_101140F70(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_101140F78(uint64_t a1, int *a2, int a3, int a4, int a5, double a6)
{
  NSObject *v12;
  int v13;
  int v14;
  NSObject *v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int32x4_t v21;
  _DWORD *v22;
  NSObject *v23;
  int v24;
  _DWORD *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  int v35;
  _DWORD *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[24];
  __int128 v49;
  uint8_t buf[4];
  int v51;
  __int16 v52;
  _BOOL4 v53;
  __int16 v54;
  _BOOL4 v55;
  __int16 v56;
  _BOOL4 v57;
  __int16 v58;
  _BYTE v59[10];
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021A2828);
  v12 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v13 = *a2;
    *(_DWORD *)buf = 67241216;
    v51 = v13;
    v52 = 1026;
    v53 = a3 != 0;
    v54 = 1026;
    v55 = a4 != 0;
    v56 = 1026;
    v57 = a5 != 0;
    v58 = 2050;
    *(double *)v59 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#LCStats,feedLCFuserSessionStartMetrics,ntfy,%{public}d,%{public}d,%{public}d,%{public}d,hunc,%{public}0.2f", buf, 0x24u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v33 = *a2;
    LODWORD(v46) = 67241216;
    HIDWORD(v46) = v33;
    LOWORD(v47) = 1026;
    *(_DWORD *)((char *)&v47 + 2) = a3 != 0;
    HIWORD(v47) = 1026;
    *(_DWORD *)v48 = a4 != 0;
    *(_WORD *)&v48[4] = 1026;
    *(_DWORD *)&v48[6] = a5 != 0;
    *(_WORD *)&v48[10] = 2050;
    *(double *)&v48[12] = a6;
    v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,feedLCFuserSessionStartMetrics,ntfy,%{public}d,%{public}d,%{public}d,%{public}d,hunc,%{public}0.2f", &v46, 36);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::feedLCFuserSessionStartMetrics(const CLLocationProvider_Type::Notification &, const int, const int, const int, const double)", "%s\n", v34);
    if (v34 != (char *)buf)
      free(v34);
  }
  v14 = *a2;
  if (*a2 > 2)
    return;
  if (a3 >= 2 && !v14)
    goto LABEL_9;
  if (v14 == 2)
  {
    if (a3 > 0 || a4 > 0 || a5 >= 2)
    {
LABEL_9:
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      v15 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#LCStats,feedLCFuserSessionStartMetrics,not a first client at given granularity", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021A2828);
        LOWORD(v46) = 0;
        LODWORD(v45) = 2;
        v16 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,feedLCFuserSessionStartMetrics,not a first client at given granularity", &v46, v45, v46, v47, *(_OWORD *)v48, *(_QWORD *)&v48[16], v49);
LABEL_62:
        v44 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::feedLCFuserSessionStartMetrics(const CLLocationProvider_Type::Notification &, const int, const int, const int, const double)", "%s\n", v16);
        if (v44 != buf)
          free(v44);
        return;
      }
      return;
    }
  }
  else if (v14 == 1 && (a3 > 0 || a4 > 1))
  {
    goto LABEL_9;
  }
  v17 = *(_BYTE *)(a1 + 384) == 0;
  v18 = *(_QWORD *)(a1 + 344);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 352) - v18) >> 4) <= v17)
    sub_1002EAEB0();
  switch(v14)
  {
    case 2:
      ++*(_DWORD *)(v18 + 48 * (*(_BYTE *)(a1 + 384) == 0) + 44);
      if (a6 >= 1000.0)
        break;
      v19 = (_DWORD *)(v18 + 48 * v17 + 8);
      goto LABEL_35;
    case 1:
      ++*(_DWORD *)(v18 + 48 * (*(_BYTE *)(a1 + 384) == 0) + 40);
      if (a6 >= 100.0)
        break;
      v19 = (_DWORD *)(v18 + 48 * v17 + 4);
      goto LABEL_35;
    case 0:
      v19 = (_DWORD *)(v18 + 48 * (*(_BYTE *)(a1 + 384) == 0));
      ++v19[9];
      if (a6 < 50.0)
LABEL_35:
        ++*v19;
      break;
  }
  if (a6 < 25.0)
  {
    v20 = v18 + 48 * v17;
    v21.i64[0] = 0x100000001;
    v21.i64[1] = 0x100000001;
    *(int32x4_t *)(v20 + 12) = vaddq_s32(*(int32x4_t *)(v20 + 12), v21);
LABEL_43:
    v22 = (_DWORD *)(v20 + 28);
    goto LABEL_44;
  }
  if (a6 < 50.0)
  {
    v20 = v18 + 48 * v17;
    *(int32x2_t *)(v20 + 16) = vadd_s32(*(int32x2_t *)(v20 + 16), (int32x2_t)0x100000001);
LABEL_40:
    ++*(_DWORD *)(v20 + 24);
    goto LABEL_43;
  }
  if (a6 < 100.0)
  {
    v20 = v18 + 48 * v17;
    *(int32x2_t *)(v20 + 20) = vadd_s32(*(int32x2_t *)(v20 + 20), (int32x2_t)0x100000001);
    goto LABEL_43;
  }
  if (a6 < 200.0)
  {
    v20 = v18 + 48 * v17;
    goto LABEL_40;
  }
  v22 = (_DWORD *)(v18 + 48 * v17 + 32);
  if (a6 < 500.0)
    v22 = (_DWORD *)(v18 + 48 * v17 + 28);
LABEL_44:
  ++*v22;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021A2828);
  v23 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v24 = *(unsigned __int8 *)(a1 + 384);
    v25 = (_DWORD *)(v18 + 48 * v17);
    v26 = v25[3];
    v27 = v25[4];
    v28 = v25[5];
    v29 = v25[6];
    v30 = v25[7];
    v31 = v25[9];
    v32 = v25[10];
    LODWORD(v25) = v25[11];
    *(_DWORD *)buf = 67176705;
    v51 = v24;
    v52 = 1026;
    v53 = v26;
    v54 = 1026;
    v55 = v27;
    v56 = 1026;
    v57 = v28;
    v58 = 1026;
    *(_DWORD *)v59 = v29;
    *(_WORD *)&v59[4] = 1026;
    *(_DWORD *)&v59[6] = v30;
    v60 = 1026;
    v61 = v31;
    v62 = 1026;
    v63 = v32;
    v64 = 1026;
    v65 = (int)v25;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#LCStats,feedLCFuserSessionStartMetrics,homeVisit,%{private}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v35 = *(unsigned __int8 *)(a1 + 384);
    v36 = (_DWORD *)(v18 + 48 * v17);
    v37 = v36[3];
    v38 = v36[4];
    v39 = v36[5];
    v40 = v36[6];
    v41 = v36[7];
    v42 = v36[9];
    v43 = v36[10];
    LODWORD(v36) = v36[11];
    LODWORD(v46) = 67176705;
    HIDWORD(v46) = v35;
    LOWORD(v47) = 1026;
    *(_DWORD *)((char *)&v47 + 2) = v37;
    HIWORD(v47) = 1026;
    *(_DWORD *)v48 = v38;
    *(_WORD *)&v48[4] = 1026;
    *(_DWORD *)&v48[6] = v39;
    *(_WORD *)&v48[10] = 1026;
    *(_DWORD *)&v48[12] = v40;
    *(_WORD *)&v48[16] = 1026;
    *(_DWORD *)&v48[18] = v41;
    *(_WORD *)&v48[22] = 1026;
    LODWORD(v49) = v42;
    WORD2(v49) = 1026;
    *(_DWORD *)((char *)&v49 + 6) = v43;
    WORD5(v49) = 1026;
    HIDWORD(v49) = (_DWORD)v36;
    LODWORD(v45) = 56;
    v16 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,feedLCFuserSessionStartMetrics,homeVisit,%{private}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", &v46, v45, v46, v47, *(_OWORD *)v48, *(_QWORD *)&v48[16], v49);
    goto LABEL_62;
  }
}

void sub_1011416BC(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1011416E8(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      sub_100259694();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_100313718(v4, v11);
    else
      v12 = 0;
    v14 = &v12[48 * v8];
    v15 = &v12[48 * v11];
    v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 3);
        v21 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

uint64_t **sub_101141868(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x68uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

id sub_101141938(void *a1)
{
  id v1;
  id v2;
  NSObject *v3;
  id v4;
  uint64_t Unique;
  const void *v6;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[5];
  uint64_t v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  id v17;

  v1 = a1;
  if (a1)
  {
    v11 = 0;
    v2 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", a1, 0, &v11);
    if (v11)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
      v3 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        v4 = objc_msgSend(v1, "UTF8String");
        *(_DWORD *)buf = 68289282;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        v16 = 2082;
        v17 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LSApplicationRecord returned error for bundleId\", \"bundleIdentifier\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
    }
    else
    {
      v1 = objc_msgSend(v2, "URL");
      if (!v1)
        return v1;
      Unique = _CFBundleCreateUnique(kCFAllocatorDefault, v1);
      if (Unique)
      {
        v6 = (const void *)Unique;
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        v10[2] = sub_101141C18;
        v10[3] = &unk_10213E1E0;
        v10[4] = Unique;
        v1 = (id)sub_1001AC3FC(2, (uint64_t)v10);
        CFRelease(v6);
        return v1;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
      v8 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289282;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        v16 = 2114;
        v17 = v1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to create bundle for URL\", \"url\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
      }
      v9 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        *(_DWORD *)buf = 68289282;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        v16 = 2114;
        v17 = v1;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create bundle for URL", "{\"msg%{public}.0s\":\"Failed to create bundle for URL\", \"url\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    return 0;
  }
  return v1;
}

BOOL sub_101141C18(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  const __CFString *v5;
  const __CFString *v6;

  v4 = sub_1001AC584();
  v5 = sub_1001AC5C4(v4, *(__CFBundle **)(a1 + 32), a2, 0);
  v6 = v5;
  if (v5)
    CFRelease(v5);
  return v6 != 0;
}

void sub_101141CEC(id a1)
{
  qword_10230CD88 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLAppMonitorSilo"));
}

uint64_t sub_101141DA0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1011456DC;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230CD98 != -1)
    dispatch_once(&qword_10230CD98, block);
  return qword_102311CB0;
}

BOOL sub_101141EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)(a1 + 120);
  std::string::operator=((std::string *)(a2 + 8), (const std::string *)(a1 + 128));
  std::string::operator=((std::string *)(a2 + 32), (const std::string *)(a1 + 152));
  std::string::operator=((std::string *)(a2 + 56), (const std::string *)(a1 + 176));
  std::string::operator=((std::string *)(a2 + 80), (const std::string *)(a1 + 200));
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 224);
  v4 = *(unsigned __int8 *)(a2 + 31);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  return v4 != 0;
}

id sub_101141F98(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD v7[5];

  if (sub_100020780(a2))
    return (id)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, 1);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101147210;
  v7[3] = &unk_1021A2AE8;
  v7[4] = a3;
  return sub_101147174(a1, a2, (uint64_t)v7);
}

uint64_t sub_10114205C(void *a1)
{
  id v2;
  const void *v3;
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  v2 = objc_msgSend(objc_msgSend(sub_1001AF434(a1), "compatibilityObject"), "applicationType");
  if (v2)
  {
    v3 = v2;
    if (CFEqual(v2, CFSTR("System")))
    {
      return 1;
    }
    else if (CFEqual(v3, CFSTR("User")))
    {
      return 2;
    }
    else if (CFEqual(v3, CFSTR("Internal")))
    {
      return 3;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A2C40);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v12 = objc_msgSend(a1, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning no app type available for %s", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A2C40);
      v6 = qword_1022A02D8;
      v9 = 136315138;
      v10 = objc_msgSend(a1, "UTF8String");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "#Warning no app type available for %s", (const char *)&v9);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "static CLAppMonitor_Type::AppType CLAppMonitor::getAppType(CFStringRef)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  return result;
}

void sub_1011422C8(uint64_t a1, void *a2)
{
  id v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  __int128 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  void *v17[2];
  void *v18[2];
  __int128 v19;
  void *v20[2];
  __int128 v21;
  __int128 v22;
  char v23;
  int v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  void *v30;
  _BYTE v31[128];

  v16 = -1;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0;
  v24 = -1;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v12, v31, 16);
  if (v3)
  {
    v5 = *(_QWORD *)v13;
    *(_QWORD *)&v4 = 68289282;
    v10 = v4;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(a2);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v6);
        if (objc_msgSend(v7, "bundleIdentifier", v10))
        {
          std::string::assign((std::string *)v17, (const std::string::value_type *)objc_msgSend(objc_msgSend(v7, "bundleIdentifier"), "UTF8String"));
          std::string::operator=((std::string *)&v18[1], (const std::string *)v17);
          std::string::assign((std::string *)v20, (const std::string::value_type *)objc_msgSend(objc_msgSend(objc_msgSend(v7, "bundleURL"), "path"), "UTF8String"));
          std::string::assign((std::string *)((char *)&v21 + 8), (const std::string::value_type *)objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(v7, "correspondingApplicationRecord"), "executableURL"), "path"), "UTF8String"));
          *(_DWORD *)buf = 10;
          (*(void (**)(uint64_t, uint8_t *, int *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v16, 0, 0xFFFFFFFFLL, 0);
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
          v8 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = v10;
            v26 = 0;
            v27 = 2082;
            v28 = "";
            v29 = 2114;
            v30 = v7;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"AppMonitor apps installed, but cannot get bundle info from appProxy\", \"AppProxy\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
          }
          v9 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            *(_DWORD *)buf = v10;
            v26 = 0;
            v27 = 2082;
            v28 = "";
            v29 = 2114;
            v30 = v7;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AppMonitor apps installed, but cannot get bundle info from appProxy", "{\"msg%{public}.0s\":\"AppMonitor apps installed, but cannot get bundle info from appProxy\", \"AppProxy\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        v6 = (char *)v6 + 1;
      }
      while (v3 != v6);
      v3 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v12, v31, 16);
    }
    while (v3);
  }
  if (SHIBYTE(v22) < 0)
    operator delete(*((void **)&v21 + 1));
  if (SBYTE7(v21) < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[1]);
  if (SHIBYTE(v18[0]) < 0)
    operator delete(v17[0]);
}

void sub_101142620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_10079C284((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101142664(uint64_t a1, void *a2)
{
  id v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  void *v17[2];
  void *v18[2];
  __int128 v19;
  void *v20[2];
  __int128 v21;
  __int128 v22;
  char v23;
  int v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  void *v30;
  _BYTE v31[128];

  v16 = -1;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0;
  v24 = -1;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v12, v31, 16);
  if (v4)
  {
    v6 = *(_QWORD *)v13;
    *(_QWORD *)&v5 = 68289282;
    v11 = v5;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(a2);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v7);
        if (objc_msgSend(v8, "bundleIdentifier", v11))
        {
          std::string::assign((std::string *)v17, (const std::string::value_type *)objc_msgSend(objc_msgSend(v8, "bundleIdentifier"), "UTF8String"));
          *(_DWORD *)buf = 11;
          (*(void (**)(uint64_t, uint8_t *, int *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v16, 0, 0xFFFFFFFFLL, 0);
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
          v9 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = v11;
            v26 = 0;
            v27 = 2082;
            v28 = "";
            v29 = 2114;
            v30 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"AppMonitor apps uninstalled, but cannot get bundle info from appProxy\", \"AppProxy\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
          }
          v10 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            *(_DWORD *)buf = v11;
            v26 = 0;
            v27 = 2082;
            v28 = "";
            v29 = 2114;
            v30 = v8;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AppMonitor apps uninstalled, but cannot get bundle info from appProxy", "{\"msg%{public}.0s\":\"AppMonitor apps uninstalled, but cannot get bundle info from appProxy\", \"AppProxy\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        v7 = (char *)v7 + 1;
      }
      while (v4 != v7);
      v4 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v12, v31, 16);
    }
    while (v4);
  }
  if (SHIBYTE(v22) < 0)
    operator delete(*((void **)&v21 + 1));
  if (SBYTE7(v21) < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[1]);
  if (SHIBYTE(v18[0]) < 0)
    operator delete(v17[0]);
}

void sub_101142960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_10079C284((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011429AC(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id obj;
  _QWORD block[9];
  _QWORD v19[10];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  if (objc_msgSend(a2, "count"))
  {
    v16 = a3;
    v6 = +[NSMutableArray array](NSMutableArray, "array");
    v7 = +[NSMutableArray array](NSMutableArray, "array");
    v8 = +[NSMutableArray array](NSMutableArray, "array");
    v9 = dispatch_group_create();
    v10 = objc_msgSend(*(id *)(a1 + 32), "silo");
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    obj = a2;
    v11 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v21;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v21 != v13)
            objc_enumerationMutation(obj);
          v15 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v14);
          dispatch_group_enter(v9);
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472;
          v19[2] = sub_1011475F8;
          v19[3] = &unk_1021A2B10;
          v19[4] = v10;
          v19[5] = v8;
          v19[6] = v15;
          v19[7] = v7;
          v19[8] = v6;
          v19[9] = v9;
          sub_101147174(a1, v15, (uint64_t)v19);
          v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v12);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1011477D0;
    block[3] = &unk_1021A2B38;
    block[7] = v8;
    block[8] = v16;
    block[4] = v9;
    block[5] = v6;
    block[6] = v7;
    dispatch_group_notify(v9, (dispatch_queue_t)objc_msgSend(v10, "queue"), block);

  }
  else
  {
    (*(void (**)(uint64_t, NSArray *, NSArray *, NSArray *))(a3 + 16))(a3, +[NSArray array](NSArray, "array"), +[NSArray array](NSArray, "array"), +[NSArray array](NSArray, "array"));
  }
}

void sub_101143234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  id *v29;
  id *v30;
  uint64_t v31;

  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak((id *)(v31 - 128));
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_101143280(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;

  if (objc_msgSend(objc_loadWeak((id *)(a1 + 40)), "valid"))
  {
    v4 = objc_msgSend(a2, "userInfo");
    v5 = objc_msgSend(v4, "objectForKeyedSubscript:", NRPairedDeviceRegistryDevice);
    if (v5)
    {
      _objc_msgSend(*(id *)(a1 + 32), "handleUnpairFromDeviceWithPairingID:", objc_msgSend(v5, "pairingID"));
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
      v6 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v8 = 68289026;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SuperRobin Got an unpair notification without an associated device\"}", (uint8_t *)&v8, 0x12u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
      }
      v7 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v8 = 68289026;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SuperRobin Got an unpair notification without an associated device", "{\"msg%{public}.0s\":\"#SuperRobin Got an unpair notification without an associated device\"}", (uint8_t *)&v8, 0x12u);
      }
    }
  }
}

void sub_10114345C(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;

  if (objc_msgSend(objc_loadWeak((id *)(a1 + 40)), "valid"))
  {
    v4 = objc_msgSend(a2, "userInfo");
    v5 = objc_msgSend(v4, "objectForKeyedSubscript:", NRPairedDeviceRegistryDevice);
    if (v5)
    {
      objc_msgSend(*(id *)(a1 + 32), "handlePairToDeviceWithPairingID:", objc_msgSend(v5, "pairingID"));
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
      v6 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v8 = 68289026;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SuperRobin Got a pair notification without an associated device\"}", (uint8_t *)&v8, 0x12u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
      }
      v7 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v8 = 68289026;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SuperRobin Got a pair notification without an associated device", "{\"msg%{public}.0s\":\"#SuperRobin Got a pair notification without an associated device\"}", (uint8_t *)&v8, 0x12u);
      }
    }
  }
}

id sub_101143638(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD v4[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_101143690;
  v4[3] = &unk_10212BB30;
  v2 = *(void **)(a1 + 32);
  v4[4] = *(_QWORD *)(a1 + 40);
  v4[5] = a2;
  return objc_msgSend(v2, "async:", v4);
}

void sub_101143690(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  os_activity_scope_state_s state;
  _BYTE v14[128];
  uint64_t buf;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  id v21;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: #SuperRobin Got initial device list", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = objc_msgSend(*(id *)(a1 + 40), "count");
      buf = 68289538;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "activity";
      v20 = 2050;
      v21 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SuperRobin Got initial device list\", \"event\":%{public, location:escape_only}s, \"deviceCount\":%{public}ld}", (uint8_t *)&buf, 0x26u);
    }
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v5 = *(void **)(a1 + 40);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v14, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v10;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v10 != v7)
            objc_enumerationMutation(v5);
          objc_msgSend(*(id *)(a1 + 32), "handlePairToDeviceWithPairingID:", objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i), "pairingID"));
        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v14, 16);
      }
      while (v6);
    }
    os_activity_scope_leave(&state);
  }
}

void sub_101143880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_101143C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_101143E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1011440D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

BOOL sub_1011440F8(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  NSObject *v11;
  NSObject *v12;
  _QWORD v13[7];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  void *v21;

  if (objc_msgSend(objc_msgSend(a2, "domain"), "isEqualToString:", NSCocoaErrorDomain)
    && objc_msgSend(a2, "code") == (id)4097
    || (v4 = objc_msgSend(a2, "domain"), objc_msgSend(v4, "isEqualToString:", ACXErrorDomain))
    && objc_msgSend(a2, "code") == (id)43)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(*(id *)(a1 + 32), "UTF8String");
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = v6;
      v20 = 2114;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SuperRobin AppCoundit failed to answer installation state in a retryable way\", \"clientKey\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1011443D4;
    v13[3] = &unk_102180A50;
    v8 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 56);
    v13[4] = *(_QWORD *)(a1 + 48);
    v13[5] = v8;
    v13[6] = v9;
    objc_msgSend(v7, "afterInterval:async:", v13, 10.0);
    return 1;
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#SuperRobin Got unexpected error from AppConduit\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    }
    v12 = qword_1022A01D8;
    result = os_signpost_enabled((os_log_t)qword_1022A01D8);
    if (result)
    {
      *(_DWORD *)buf = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SuperRobin Got unexpected error from AppConduit", "{\"msg%{public}.0s\":\"#SuperRobin Got unexpected error from AppConduit\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      return 0;
    }
  }
  return result;
}

void sub_1011443D4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  id v4;
  os_activity_scope_state_s v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  id v13;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: #SuperRobin Retrying installation state check after retryable failure", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &v5);

    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
      *(_DWORD *)buf = 68289538;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2082;
      v11 = "activity";
      v12 = 2082;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SuperRobin Retrying installation state check after retryable failure\", \"event\":%{public, location:escape_only}s, \"clientKey\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    objc_msgSend(*(id *)(a1 + 32), "isAppInstalled:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    os_activity_scope_leave(&v5);
  }
}

void sub_10114451C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

id sub_101144534(uint64_t a1, char a2, uint64_t a3)
{
  void *v3;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  void *v9;
  __int128 v10;
  char v11;

  v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1011445AC;
  v5[3] = &unk_1021A2938;
  v6 = *(_OWORD *)(a1 + 40);
  v7 = a3;
  v11 = a2;
  v10 = *(_OWORD *)(a1 + 72);
  v8 = *(_OWORD *)(a1 + 56);
  v9 = v3;
  return objc_msgSend(v3, "async:", v5);
}

void sub_1011445AC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  __int128 v4;
  _QWORD v5[5];
  __int128 v6;
  __int128 v7;
  os_activity_scope_state_s state;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8))
  {
    os_activity_scope_enter(*(os_activity_t *)(a1 + 40), &state);
    if (!*(_QWORD *)(a1 + 48) || ((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 80) + 16))() & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 88) + 16))();
      }
      else
      {
        v2 = *(void **)(a1 + 56);
        v3 = *(_QWORD *)(a1 + 64);
        v5[0] = _NSConcreteStackBlock;
        v5[1] = 3221225472;
        v5[2] = sub_101144684;
        v5[3] = &unk_1021A2910;
        v5[4] = *(_QWORD *)(a1 + 72);
        v4 = *(_OWORD *)(a1 + 80);
        v6 = *(_OWORD *)(a1 + 32);
        v7 = v4;
        objc_msgSend(v2, "applicationIsInstalledOnAnyPairedDeviceWithCompanionBundleID:completion:", v3, v5);
      }
    }
    os_activity_scope_leave(&state);
  }
}

void sub_101144670(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 32));
  _Unwind_Resume(a1);
}

id sub_101144684(uint64_t a1, char a2, uint64_t a3)
{
  void *v3;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1011446F0;
  v5[3] = &unk_1021A28E8;
  v6 = *(_OWORD *)(a1 + 40);
  v7 = a3;
  v8 = *(_OWORD *)(a1 + 56);
  v9 = a2;
  return objc_msgSend(v3, "async:", v5);
}

void sub_1011446F0(uint64_t a1)
{
  os_activity_scope_state_s v2;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8))
  {
    os_activity_scope_enter(*(os_activity_t *)(a1 + 40), &v2);
    if (!*(_QWORD *)(a1 + 48) || ((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))() & 1) == 0)
      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    os_activity_scope_leave(&v2);
  }
}

void sub_10114475C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_101144B48(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2) != 0;
}

void sub_101144BF0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  id v5;
  os_activity_scope_state_s v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  id v16;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: #SuperRobin Apps uninstalled", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &v6);

    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = objc_msgSend(*(id *)(a1 + 48), "count");
      *(_DWORD *)buf = 68289794;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2114;
      v14 = v4;
      v15 = 2050;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SuperRobin Apps uninstalled\", \"event\":%{public, location:escape_only}s, \"pairingID\":%{public, location:escape_only}@, \"appCount\":%{public}ld}", buf, 0x30u);
    }
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "vendor"), "proxyForService:", CFSTR("CLClientManager")), "checkAppInstallationStatus");
    os_activity_scope_leave(&v6);
  }
}

void sub_101144D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_101144E00(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  os_activity_scope_state_s state;
  _BYTE v15[128];
  uint64_t buf;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  id v24;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: #SuperRobin Apps updated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = objc_msgSend(*(id *)(a1 + 48), "count");
      buf = 68289794;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = "activity";
      v21 = 2114;
      v22 = v4;
      v23 = 2050;
      v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SuperRobin Apps updated\", \"event\":%{public, location:escape_only}s, \"pairingID\":%{public, location:escape_only}@, \"appCount\":%{public}ld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v6 = *(void **)(a1 + 48);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v11;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v11 != v8)
            objc_enumerationMutation(v6);
          objc_msgSend(*(id *)(a1 + 32), "computeAllowableAuthorizationMaskForApplication:pairingID:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i), *(_QWORD *)(a1 + 40));
        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
      }
      while (v7);
    }
    os_activity_scope_leave(&state);
  }
}

void sub_101144FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_101145090(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *j;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  os_activity_scope_state_s state;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t buf;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  id v36;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: #SuperRobin Apps installed", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = objc_msgSend(*(id *)(a1 + 48), "count");
      buf = 68289794;
      v29 = 2082;
      v30 = "";
      v31 = 2082;
      v32 = "activity";
      v33 = 2114;
      v34 = v4;
      v35 = 2050;
      v36 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SuperRobin Apps installed\", \"event\":%{public, location:escape_only}s, \"pairingID\":%{public, location:escape_only}@, \"appCount\":%{public}ld}", (uint8_t *)&buf, 0x30u);
    }
    v6 = +[NSMutableArray array](NSMutableArray, "array");
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v7 = *(void **)(a1 + 48);
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v9)
            objc_enumerationMutation(v7);
          v11 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
          v12 = objc_msgSend(v11, "companionAppBundleID");
          if (!v12)
            v12 = objc_msgSend(v11, "bundleIdentifier");
          objc_msgSend(v6, "addObject:", v12);
        }
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
      }
      while (v8);
    }
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "vendor"), "proxyForService:", CFSTR("CLClientManager")), "appsWithClientKeysAreInstalledOnAPairedDevice:", v6);
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v13 = *(void **)(a1 + 48);
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v17, v26, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v18;
      do
      {
        for (j = 0; j != v14; j = (char *)j + 1)
        {
          if (*(_QWORD *)v18 != v15)
            objc_enumerationMutation(v13);
          objc_msgSend(*(id *)(a1 + 32), "computeAllowableAuthorizationMaskForApplication:pairingID:", *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)j), *(_QWORD *)(a1 + 40));
        }
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v17, v26, 16);
      }
      while (v14);
    }
    os_activity_scope_leave(&state);
  }
}

void sub_101145354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1011456DC()
{
  operator new();
}

void sub_101145724()
{
  operator delete();
}

void sub_101145748(uint64_t a1, void *a2)
{
  uint64_t v2;

  v2 = sub_101145980(a1, "CLAppMonitor", a2);
  *(_QWORD *)v2 = off_1021A29B8;
  *(_QWORD *)(v2 + 112) = 0;
  *(_DWORD *)(v2 + 120) = -1;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_BYTE *)(v2 + 224) = 0;
  *(_DWORD *)(v2 + 228) = -1;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_DWORD *)(v2 + 264) = 1065353216;
  *(_QWORD *)(v2 + 280) = 0;
  *(_QWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 272) = 0;
  sub_100647FA8();
}

void sub_101145934(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *(_QWORD *)(v1 + 288);
  *(_QWORD *)(v1 + 288) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_101149B88(v3);
  sub_10079C284(v2);
  sub_101145E64(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101145980(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021A2C70;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_101145A00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_101145A1C(uint64_t a1, _DWORD *a2, uint64_t a3, CLPairedDeviceAppMonitor *a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  CLPairedDeviceAppMonitor *v18;

  CLProfilingIdentify("CLAppMonitor::onDaemonStatusNotification");
  objc_msgSend(-[ACXDeviceConnection silo](a4->_deviceConnection, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A2C20);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAppMonitor::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2C20);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAppMonitor::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_101145FD4(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_101145BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101145BEC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  int v4;
  _QWORD *v5;
  uint64_t v7;
  const char *v8;
  int v9;
  _QWORD *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  _QWORD *v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _QWORD *v33;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A2C40);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v14 = 9;
    v3 = sub_1000BD874(&v14);
    v4 = *(_DWORD *)(v1 + 120);
    v5 = (_QWORD *)(v1 + 128);
    if (*(char *)(v1 + 151) < 0)
      v5 = (_QWORD *)*v5;
    *(_DWORD *)buf = 134219010;
    v25 = 0x4014000000000000;
    v26 = 2080;
    v27 = v3;
    v28 = 1024;
    v29 = 9;
    v30 = 1024;
    v31 = v4;
    v32 = 2080;
    v33 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "App foregrounded for %.2fs.  Post %s (%d), pid, %d, bundleId, %s", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A2C40);
    v7 = qword_1022A02D8;
    HIDWORD(v13) = 9;
    v8 = sub_1000BD874((int *)&v13 + 1);
    v9 = *(_DWORD *)(v1 + 120);
    v10 = (_QWORD *)(v1 + 128);
    if (*(char *)(v1 + 151) < 0)
      v10 = (_QWORD *)*v10;
    v14 = 134219010;
    v15 = 0x4014000000000000;
    v16 = 2080;
    v17 = v8;
    v18 = 1024;
    v19 = 9;
    v20 = 1024;
    v21 = v9;
    v22 = 2080;
    v23 = v10;
    LODWORD(v13) = 44;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "App foregrounded for %.2fs.  Post %s (%d), pid, %d, bundleId, %s", COERCE_DOUBLE(&v14), v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "CLAppMonitor::CLAppMonitor(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  *(_DWORD *)buf = 9;
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v1 + 152))(v1, buf, v1 + 120, 0, 0xFFFFFFFFLL, 0);
}

uint64_t sub_101145E64(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A2C70;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_101145ED8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021A29B8;
  sub_101146110(a1);
  v2 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_101149B88(a1 + 232);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  return sub_101145E64(a1);
}

void sub_101145F70(uint64_t a1)
{
  sub_101145ED8(a1);
  operator delete();
}

CLPairedDeviceAppMonitor *sub_101145F94(CLPairedDeviceAppMonitor *result)
{
  CLPairedDeviceAppMonitor *v1;

  if (!result[3]._pairedDeviceIds)
  {
    v1 = result;
    result = -[CLPairedDeviceAppMonitor initWithAppMonitor:inUniverse:]([CLPairedDeviceAppMonitor alloc], "initWithAppMonitor:inUniverse:", v1, v1->_deviceConnection);
    v1[3]._pairedDeviceIds = (NSMutableSet *)result;
  }
  return result;
}

CLPairedDeviceAppMonitor *sub_101145FD4(CLPairedDeviceAppMonitor *result, uint64_t a2, _DWORD *a3)
{
  CLPairedDeviceAppMonitor *v5;
  NSObject *v6;
  _BOOL4 v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  _BOOL4 v12;

  if (!result[3]._pairedDeviceIds && (*a3 == 17 || *a3 == 11))
  {
    v5 = result;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *a3 == 17;
      v8[0] = 68289282;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 1026;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AppMonitor Init paired device AppMonitor\", \"isAfterUncleanShutDown\":%{public}hhd}", (uint8_t *)v8, 0x18u);
    }
    sub_101145F94(v5);
    objc_msgSend(*((id *)v5[4].super.isa + 2), "unregister:forNotification:", *((_QWORD *)v5[4].super.isa + 1), 11);
    return (CLPairedDeviceAppMonitor *)objc_msgSend(*((id *)v5[4].super.isa + 2), "unregister:forNotification:", *((_QWORD *)v5[4].super.isa + 1), 17);
  }
  return result;
}

uint64_t sub_101146110(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 108) = 1;
  objc_msgSend(*(id *)(a1 + 272), "invalidate");

  *(_QWORD *)(a1 + 272) = 0;
  objc_msgSend(*(id *)(a1 + 112), "invalidate");

  *(_QWORD *)(a1 + 112) = 0;
  objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "removeObserver:", *(_QWORD *)(a1 + 296));

  *(_QWORD *)(a1 + 296) = 0;
  objc_msgSend(*(id *)(a1 + 280), "invalidate");

  result = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *sub_1011461AC@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_101146224(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  __int128 *i;
  int v9;
  _BYTE v10[8];
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  void *__dst;
  char v20;
  void *v21[3];
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;

  v6 = (*(uint64_t (**)(_QWORD *, uint64_t, _DWORD *, void *))(*a1 + 96))(a1, a2, a3, &unk_1022FDA00);
  if (*a3 == 4)
  {
    for (i = (__int128 *)a1[31]; i; i = *(__int128 **)i)
    {
      sub_101149A7C(&__dst, i + 1);
      sub_1001D13D4((uint64_t)v10, (uint64_t)v21);
      v9 = 4;
      (*(void (**)(_QWORD *, int *, _BYTE *, _QWORD, uint64_t, _QWORD))(*a1 + 152))(a1, &v9, v10, 0, a2, 0);
      if (v18 < 0)
        operator delete(__p);
      if (v16 < 0)
        operator delete(v15);
      if (v14 < 0)
        operator delete(v13);
      if (v12 < 0)
        operator delete(v11);
      if (v28 < 0)
        operator delete(v27);
      if (v26 < 0)
        operator delete(v25);
      if (v24 < 0)
        operator delete(v23);
      if (v22 < 0)
        operator delete(v21[1]);
      if (v20 < 0)
        operator delete(__dst);
    }
  }
  return v6;
}

void sub_101146380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_10079C284((uint64_t)va);
  sub_1011463B8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011463A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FDA00);
}

uint64_t sub_1011463B8(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_101146428(_QWORD *a1, int *a2)
{
  int v3;
  __CFNotificationCenter *DistributedCenter;
  void (__cdecl *v5)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef);
  const __CFString *v6;

  v3 = *a2;
  if ((*a2 - 10) < 2)
  {
    objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "addObserver:", a1[37]);
  }
  else
  {
    if (v3 == 7)
    {
      DistributedCenter = CFNotificationCenterGetDistributedCenter();
      v5 = (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))sub_1011464BC;
      v6 = CFSTR("com.apple.LaunchServices.applicationRegistered");
      goto LABEL_7;
    }
    if (v3 == 8)
    {
      DistributedCenter = CFNotificationCenterGetDistributedCenter();
      v5 = (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))sub_1011466DC;
      v6 = CFSTR("com.apple.LaunchServices.applicationUnregistered");
LABEL_7:
      CFNotificationCenterAddObserver(DistributedCenter, a1, v5, v6, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }
  return 1;
}

void sub_1011464BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLAppMonitor::onApplicationRegistered");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A2C20);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAppMonitor::onApplicationRegistered", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2C20);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAppMonitor::onApplicationRegistered\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_101149AF0;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_1011466BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1011466DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLAppMonitor::onApplicationUnregistered");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A2C20);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAppMonitor::onApplicationUnregistered", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2C20);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAppMonitor::onApplicationUnregistered\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_101149B00;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_1011468DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011468FC(_QWORD *a1, int *a2)
{
  int v3;
  __CFNotificationCenter *DistributedCenter;
  const __CFString *v5;

  v3 = *a2;
  if ((*a2 - 10) < 2)
  {
    objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "removeObserver:", a1[37]);
  }
  else
  {
    if (v3 == 7)
    {
      DistributedCenter = CFNotificationCenterGetDistributedCenter();
      v5 = CFSTR("com.apple.LaunchServices.applicationRegistered");
      goto LABEL_7;
    }
    if (v3 == 8)
    {
      DistributedCenter = CFNotificationCenterGetDistributedCenter();
      v5 = CFSTR("com.apple.LaunchServices.applicationUnregistered");
LABEL_7:
      CFNotificationCenterRemoveObserver(DistributedCenter, a1, v5, 0);
    }
  }
  return 1;
}

uint64_t sub_10114697C(uint64_t result)
{
  *(_DWORD *)result = -1;
  if (*(char *)(result + 31) < 0)
  {
    **(_BYTE **)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 31) = 0;
  }
  if (*(char *)(result + 55) < 0)
  {
    **(_BYTE **)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  else
  {
    *(_BYTE *)(result + 32) = 0;
    *(_BYTE *)(result + 55) = 0;
  }
  *(_BYTE *)(result + 104) = 0;
  *(_DWORD *)(result + 108) = -1;
  return result;
}

void sub_1011469D4(uint64_t a1, int a2, int a3, int a4, CFDictionaryRef theDict)
{
  int v6;
  int i;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _BYTE v12[16];
  int v13;
  void *v14[2];
  void *v15[2];
  __int128 v16;
  void *v17[2];
  void *__p[2];
  __int128 v19;
  BOOL v20;
  int v21;
  _DWORD v22[4];
  uint8_t buf[4];
  int v24;

  v13 = -1;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  v20 = 0;
  v21 = -1;
  sub_1001C1D6C((int)v12, theDict);
  v6 = sub_10052A8CC((uint64_t)v12);
  sub_1001E48E4((uint64_t)v12, (uint64_t)CFSTR("isPlaceholder"), &v20);
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if (sub_1000BD5F0((uint64_t)v12, (uint64_t)CFSTR("bundleIDs"), (std::string *)v14))
      {
        *(_DWORD *)buf = 7;
        (*(void (**)(uint64_t, uint8_t *, int *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v13, 0, 0xFFFFFFFFLL, 0);
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A2C40);
        v8 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67240192;
          v24 = i;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "cannot find bundle ID for %{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A2C40);
          v22[0] = 67240192;
          v22[1] = i;
          LODWORD(v11) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "cannot find bundle ID for %{public}d", v22, v11);
          v10 = (uint8_t *)v9;
          sub_100512490("Generic", 1, 0, 0, "void CLAppMonitor::onApplicationRegistered(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v9);
          if (v10 != buf)
            free(v10);
        }
      }
    }
  }
  sub_10011A5A8(v12);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[1]);
  if (SHIBYTE(v15[0]) < 0)
    operator delete(v14[0]);
}

void sub_101146CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_10011A5A8((uint64_t *)va);
  sub_10079C284((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_101146CE8(uint64_t a1, int a2, int a3, int a4, CFDictionaryRef theDict)
{
  int v6;
  int i;
  std::string *v8;
  NSString *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v14;
  _QWORD v15[5];
  std::string __p;
  std::string v17;
  _BYTE v18[16];
  _DWORD v19[4];
  uint8_t buf[4];
  int v21;

  sub_1001C1D6C((int)v18, theDict);
  v6 = sub_10052A8CC((uint64_t)v18);
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      memset(&v17, 0, sizeof(v17));
      if (sub_1000BD5F0((uint64_t)v18, (uint64_t)CFSTR("bundleIDs"), &v17))
      {
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v8 = &v17;
        else
          v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
        v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3321888768;
        v15[2] = sub_10114701C;
        v15[3] = &unk_1021A2AB0;
        v15[4] = a1;
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          sub_100115CE4(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
        else
          __p = v17;
        sub_101141F98(a1, v9, (uint64_t)v15);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A2C40);
        v10 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67240192;
          v21 = i;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "cannot find bundle ID for %{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A2C40);
          v19[0] = 67240192;
          v19[1] = i;
          LODWORD(v14) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "cannot find bundle ID for %{public}d", v19, v14);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 0, "void CLAppMonitor::onApplicationUnregistered(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v11);
          if (v12 != buf)
            free(v12);
        }
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  return sub_10011A5A8(v18);
}

void sub_101146FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a30 < 0)
    operator delete(__p);
  sub_10011A5A8(&a31);
  _Unwind_Resume(a1);
}

void sub_10114701C(uint64_t a1, char a2)
{
  uint64_t v2;
  int v3;
  int v4;
  void *v5[2];
  void *v6[2];
  __int128 v7;
  void *v8[2];
  void *__p[2];
  __int128 v10;
  char v11;
  int v12;

  if ((a2 & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v4 = -1;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)v6 = 0u;
    v7 = 0u;
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)__p = 0u;
    v10 = 0u;
    v11 = 0;
    v12 = -1;
    std::string::operator=((std::string *)v5, (const std::string *)(a1 + 40));
    v3 = 8;
    (*(void (**)(uint64_t, int *, int *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 152))(v2, &v3, &v4, 0, 0xFFFFFFFFLL, 0);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v8[0]);
    if (SHIBYTE(v7) < 0)
      operator delete(v6[1]);
    if (SHIBYTE(v6[0]) < 0)
      operator delete(v5[0]);
  }
}

void sub_1011470F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10079C284((uint64_t)va);
  _Unwind_Resume(a1);
}

CFTypeRef sub_101147108(void *a1, const __CFString *a2)
{
  const __CFURL *v3;
  __CFBundle *v4;
  __CFBundle *v5;
  CFTypeRef ValueForInfoDictionaryKey;
  CFTypeRef v7;

  v3 = (const __CFURL *)sub_1001AF3C4(a1);
  if (!v3)
    return 0;
  v4 = CFBundleCreate(kCFAllocatorDefault, v3);
  if (!v4)
    return 0;
  v5 = v4;
  ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(v4, a2);
  v7 = ValueForInfoDictionaryKey;
  if (ValueForInfoDictionaryKey)
    CFRetain(ValueForInfoDictionaryKey);
  CFRelease(v5);
  return v7;
}

id sub_101147174(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  _BOOL4 v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  _QWORD v8[6];

  v4 = *(void **)(a1 + 280);
  if (v4)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_101147224;
    v8[3] = &unk_102142CE8;
    v8[4] = a2;
    v8[5] = a3;
    return objc_msgSend(v4, "isAppInstalled:completion:", a2, v8);
  }
  else
  {
    v6 = sub_100020780(a2);
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
    if (v6)
      return (id)v7(a3, 2);
    else
      return (id)v7(a3, 1);
  }
}

uint64_t sub_101147210(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_101147224(uint64_t a1, int a2)
{
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_100020780(*(void **)(a1 + 32));
  v5 = 4;
  if (!a2)
    v5 = 1;
  v6 = 2;
  if (a2)
    v6 = 6;
  if (v4)
    v7 = v6;
  else
    v7 = v5;
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v7);
}

BOOL sub_101147278(uint64_t a1)
{
  return objc_msgSend(objc_alloc((Class)LSApplicationExtensionRecord), "initWithBundleIdentifier:error:", a1, 0) != 0;
}

id sub_1011472B8(void *a1)
{
  id result;

  result = objc_msgSend(a1, "length");
  if (result)
    return _objc_msgSend(objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", a1, 0, 0), "isWebApp");
  return result;
}

__CFBundle *sub_101147308(void *a1)
{
  __CFBundle *result;
  __CFBundle *v2;
  CFURLRef v3;

  result = sub_10114734C(a1);
  if (result)
  {
    v2 = result;
    v3 = CFBundleCopyBundleURL(result);
    CFRelease(v2);
    return (__CFBundle *)CFAutorelease(v3);
  }
  return result;
}

CFBundleRef sub_10114734C(void *a1)
{
  id v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  id v7;
  id v9;
  uint64_t v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  id v16;
  __int16 v17;
  uint64_t v18;

  sub_100197040();
  if ((sub_100195F08() & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = objc_msgSend(a1, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Attempted to locate companion placeholder bundle on a non-watch device\", \"bundleId\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    }
    v6 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v7 = objc_msgSend(a1, "UTF8String");
      *(_DWORD *)buf = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Attempted to locate companion placeholder bundle on a non-watch device", "{\"msg%{public}.0s\":\"Attempted to locate companion placeholder bundle on a non-watch device\", \"bundleId\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    return 0;
  }
  v10 = 0;
  v2 = objc_msgSend(objc_alloc((Class)LSApplicationExtensionRecord), "initWithBundleIdentifier:error:", a1, &v10);
  if (v10)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      v4 = objc_msgSend(a1, "UTF8String");
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = v4;
      v17 = 2114;
      v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LSApplicationExtensionRecord returned an error for bundleId\", \"bundleId\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    return 0;
  }
  if (v2)
    v9 = objc_msgSend(v2, "containingBundleRecord");
  else
    v9 = sub_1001AF434(a1);
  return CFBundleCreate(kCFAllocatorDefault, (CFURLRef)objc_msgSend(objc_msgSend(v9, "bundleContainerURL"), "URLByAppendingPathComponent:", CFSTR("com.apple.mobileinstallation.companion_placeholder")));
}

void sub_1011475F8(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  objc_msgSend(*(id *)(a1 + 32), "assertInside");
  if (a2 == 4)
  {
    v4 = *(void **)(a1 + 40);
LABEL_7:
    objc_msgSend(v4, "addObject:", *(_QWORD *)(a1 + 48));
    goto LABEL_8;
  }
  if ((a2 & 6) != 0)
  {
    v4 = *(void **)(a1 + 56);
    goto LABEL_7;
  }
  if (a2 == 1)
  {
    v4 = *(void **)(a1 + 64);
    goto LABEL_7;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    v6 = *(_QWORD *)(a1 + 48);
    v9 = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2114;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AppMonitor got invalid installation status while checking applications\", \"app\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
  }
  v7 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v8 = *(_QWORD *)(a1 + 48);
    v9 = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2114;
    v14 = v8;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#AppMonitor got invalid installation status while checking applications", "{\"msg%{public}.0s\":\"#AppMonitor got invalid installation status while checking applications\", \"app\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
  }
LABEL_8:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

uint64_t sub_1011477D0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[8] + 16))(a1[8], a1[5], a1[6], a1[7]);
}

BOOL sub_1011477E4(uint64_t **a1)
{
  uint64_t *v2;
  NSString *v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeID v6;
  BOOL v7;
  NSObject *v8;
  _BOOL8 v9;
  CFTypeID v11;
  id v12;
  uint64_t *v13;
  NSObject *v14;
  uint64_t *v15;
  char *v16;
  _WORD v17[8];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t *v23;
  __int16 v24;
  _BOOL4 v25;

  sub_100197040();
  if (!sub_100195F08())
    goto LABEL_11;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
LABEL_11:
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
      v8 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Either not a watch platform or bundleId is empty", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
        v17[0] = 0;
        v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Either not a watch platform or bundleId is empty", v17, 2);
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLAppMonitor::isStandAloneWatchApp(const std::string &)", "%s\n", v16);
        if (v16 != (char *)buf)
          free(v16);
      }
      return 0;
    }
    v2 = *a1;
  }
  else
  {
    v2 = (uint64_t *)a1;
    if (!*((_BYTE *)a1 + 23))
      goto LABEL_11;
  }
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v4 = sub_101147108(v3, CFSTR("WKWatchOnly"));
  v5 = sub_101147108(v3, CFSTR("WKRunsIndependentlyOfCompanionApp"));
  if (v4)
  {
    v6 = CFGetTypeID(v4);
    if (v6 == CFBooleanGetTypeID())
    {
      v7 = CFBooleanGetValue((CFBooleanRef)v4) != 0;
      if (!v5)
        goto LABEL_22;
LABEL_19:
      v11 = CFGetTypeID(v5);
      if (v11 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)v5))
        v7 = 1;
      goto LABEL_22;
    }
  }
  v7 = 0;
  if (v5)
    goto LABEL_19;
LABEL_22:
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
  if (v7)
  {
    v9 = 1;
  }
  else
  {
    v12 = objc_alloc((Class)LSApplicationExtensionRecord);
    if (*((char *)a1 + 23) >= 0)
      v13 = (uint64_t *)a1;
    else
      v13 = *a1;
    v9 = objc_msgSend(objc_msgSend(objc_msgSend(v12, "initWithBundleIdentifier:error:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13), 0), "containingBundleRecord"), "developerType") == 1;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
  v14 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a1 + 23) >= 0)
      v15 = (uint64_t *)a1;
    else
      v15 = *a1;
    *(_DWORD *)buf = 68289538;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2082;
    v23 = v15;
    v24 = 1026;
    v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"stand alone watch app\", \"bundleId\":%{public, location:escape_only}s, \"status\":%{public}hhd}", buf, 0x22u);
  }
  return v9;
}

CFTypeRef sub_101147B70(void *a1)
{
  id v2;
  const __CFString *v3;
  CFURLRef v4;
  CFURLRef v5;
  uint64_t Unique;
  const void *v7;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  void *v14;

  v2 = sub_1001AF3C4(a1);
  if (!v2 || (v3 = (const __CFString *)objc_msgSend(v2, "path")) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 68289282;
      v10[1] = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning CLAppMonitor bundlePath from bundleId is nil\", \"BundleId\":%{public, location:escape_only}@}", (uint8_t *)v10, 0x1Cu);
    }
    return 0;
  }
  v4 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v3, kCFURLPOSIXPathStyle, 0);
  if (!v4)
    return 0;
  v5 = v4;
  Unique = _CFBundleCreateUnique(kCFAllocatorDefault, v4);
  if (!Unique)
    sub_10194127C();
  v7 = (const void *)Unique;
  CFRelease(v5);
  return CFAutorelease(v7);
}

__CFBundle *sub_101147CE0(void *a1)
{
  __CFBundle *result;

  result = (__CFBundle *)sub_101147B70(a1);
  if (result)
    return sub_1001ACE28(result);
  return result;
}

id sub_101147D00(__CFBundle *a1, void *a2)
{
  CFDictionaryRef InfoDictionary;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  InfoDictionary = CFBundleGetInfoDictionary(a1);
  v4 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(a2);
        v9 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        if (-[__CFDictionary objectForKeyedSubscript:](InfoDictionary, "objectForKeyedSubscript:", v9))
          objc_msgSend(v4, "setObject:forKeyedSubscript:", -[__CFDictionary objectForKeyedSubscript:](InfoDictionary, "objectForKeyedSubscript:", v9), v9);
      }
      v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }
  return v4;
}

void sub_101147E2C(id a1)
{
  qword_10230CDA0 = (uint64_t)objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithObjects:", CFSTR("NSLocationAlwaysAndWhenInUseUsageDescription"), CFSTR("NSLocationWhenInUseUsageDescription"), CFSTR("NSLocationAuthorizationPurposeDescriptionDictionary"), CFSTR("NSLocationAlwaysUsageDescription"), 0);
}

CFBundleRef sub_101147E94(uint64_t a1)
{
  _BOOL4 v2;
  uint64_t v3;
  NSString *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  _QWORD *v12;
  const __CFURL *v13;
  const __CFURL *v14;
  CFBundleRef v15;

  sub_100197040();
  if (!sub_100195F08() || (sub_1001A8D50(a1), !*(_BYTE *)(a1 + 177)))
  {
    sub_1001A8D50(a1);
    v6 = *(unsigned __int8 *)(a1 + 127);
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(a1 + 112);
    if (!v6)
    {
      v12 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
      {
        if (!*(_QWORD *)(a1 + 56))
          return 0;
        v12 = (_QWORD *)*v12;
      }
      else if (!*(_BYTE *)(a1 + 71))
      {
        return 0;
      }
      v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12);
      goto LABEL_23;
    }
    sub_1001A8D50(a1);
    v9 = *(_QWORD *)(a1 + 104);
    v8 = a1 + 104;
    v7 = v9;
    if (*(char *)(v8 + 23) >= 0)
      v10 = v8;
    else
      v10 = v7;
    v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10);
    goto LABEL_15;
  }
  sub_1001A8D50(a1);
  v2 = sub_1011477E4((uint64_t **)(a1 + 128));
  sub_1001A8D50(a1);
  if (*(char *)(a1 + 151) >= 0)
    v3 = a1 + 128;
  else
    v3 = *(_QWORD *)(a1 + 128);
  v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  if (v2)
  {
LABEL_15:
    v5 = sub_1001AF3C4(v4);
    if (!v5)
      return 0;
    goto LABEL_16;
  }
  v5 = sub_101147308(v4);
LABEL_16:
  v11 = (const __CFString *)objc_msgSend(v5, "path");
LABEL_23:
  if (v11)
  {
    v13 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v11, kCFURLPOSIXPathStyle, 0);
    if (v13)
    {
      v14 = v13;
      v15 = CFBundleCreate(kCFAllocatorDefault, v13);
      CFRelease(v14);
      return v15;
    }
  }
  return 0;
}

uint64_t sub_101147FF4(void *a1, void *a2, const __CFString *a3, void *a4)
{
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  id v11;
  const __CFString *v12;
  void *v13;
  id v14;
  CFURLRef v15;
  uint64_t Unique;
  NSObject *v17;
  NSObject *v18;
  void *__p;
  __int16 v21;
  const char *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  const __CFString *v28;
  __int16 v29;
  void *v30;

  sub_100197040();
  v8 = sub_100195F08();
  if (a4 && v8)
  {
    sub_1015A2E04(&__p, (char *)objc_msgSend(a4, "UTF8String"));
    v9 = sub_1011477E4((uint64_t **)&__p);
    v10 = v9;
    if (SBYTE3(v24) < 0)
    {
      operator delete(__p);
      if (v10)
      {
LABEL_5:
        v11 = sub_1001AF3C4(a4);
        if (v11)
        {
          v12 = (const __CFString *)objc_msgSend(v11, "path");
          goto LABEL_15;
        }
LABEL_18:
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
        v17 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          __p = (void *)68290050;
          v21 = 2082;
          v22 = "";
          v23 = 2114;
          v24 = a1;
          v25 = 2114;
          v26 = a2;
          v27 = 2114;
          v28 = a3;
          v29 = 2114;
          v30 = a4;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The given client components did not resolve to a bundle\", \"platformSpecificBundleId\":%{public, location:escape_only}@, \"bundleId\":%{public, location:escape_only}@, \"bundlePath\":%{public, location:escape_only}@, \"pluginBundleId\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x3Au);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
        }
        v18 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          __p = (void *)68290050;
          v21 = 2082;
          v22 = "";
          v23 = 2114;
          v24 = a1;
          v25 = 2114;
          v26 = a2;
          v27 = 2114;
          v28 = a3;
          v29 = 2114;
          v30 = a4;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The given client components did not resolve to a bundle", "{\"msg%{public}.0s\":\"The given client components did not resolve to a bundle\", \"platformSpecificBundleId\":%{public, location:escape_only}@, \"bundleId\":%{public, location:escape_only}@, \"bundlePath\":%{public, location:escape_only}@, \"pluginBundleId\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x3Au);
        }
        return 0;
      }
    }
    else if (v9)
    {
      goto LABEL_5;
    }
    v12 = (const __CFString *)-[__CFBundle path](sub_101147308(a4), "path");
  }
  else
  {
    if (a1)
    {
      v13 = a1;
    }
    else
    {
      v12 = a3;
      if (!a2)
        goto LABEL_15;
      v13 = a2;
    }
    v14 = sub_1001AF3C4(v13);
    if (!v14)
      goto LABEL_18;
    v12 = (const __CFString *)objc_msgSend(v14, "path");
  }
LABEL_15:
  if (!v12)
    goto LABEL_18;
  v15 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v12, kCFURLPOSIXPathStyle, 0);
  if (!v15)
    return 0;
  Unique = _CFBundleCreateUnique(kCFAllocatorDefault, v15);
  CFRelease(v15);
  return Unique;
}

void sub_1011482AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011482D0()
{
  operator new();
}

void sub_10114837C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1011483B8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_1021A2DC0;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_10114848C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A2C20);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021A2C20);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::removeClient(int) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

BOOL sub_101148700(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[24];
  void *v45[2];
  __int128 v46;
  void *__p[2];
  __int128 v48;
  __int128 v49;
  char v50;
  int v51;

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        *(_DWORD *)buf = -1;
        *(_OWORD *)&buf[8] = 0u;
        *(_OWORD *)v45 = 0u;
        v46 = 0u;
        *(_OWORD *)__p = 0u;
        v48 = 0u;
        v49 = 0u;
        v50 = 0;
        v51 = -1;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_101149F74();
        }
        if (SHIBYTE(v49) < 0)
          operator delete(*((void **)&v48 + 1));
        if (SBYTE7(v48) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v46) < 0)
          operator delete(v45[1]);
        if (SHIBYTE(v45[0]) < 0)
          operator delete(*(void **)&buf[8]);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022FDA01;
        HIDWORD(v38) = v16;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A2C20);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2C20);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = v40;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_101148BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10079C284((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_101148BF4(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2C20);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A2C20);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_101148E74(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A2C20);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021A2C20);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1011491FC(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  *(_DWORD *)a3 = *(_DWORD *)v12;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v12 + 8));
  std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v12 + 32));
  std::string::operator=((std::string *)(a3 + 56), (const std::string *)(v12 + 56));
  std::string::operator=((std::string *)(a3 + 80), (const std::string *)(v12 + 80));
  *(_QWORD *)(a3 + 104) = *(_QWORD *)(v12 + 104);
  return 1;
}

uint64_t sub_1011492AC(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_101149C70(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_101149358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10114936C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  void *v5[2];
  void *v6[2];
  __int128 v7;
  void *v8[2];
  void *__p[2];
  __int128 v10;
  char v11;
  int v12;

  v4 = -1;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)v6 = 0u;
  v7 = 0u;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)__p = 0u;
  v10 = 0u;
  v11 = 0;
  v12 = -1;
  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v4, a3, a4, 0);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v8[0]);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[1]);
  if (SHIBYTE(v6[0]) < 0)
    operator delete(v5[0]);
}

void sub_101149414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10079C284((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_101149428(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2C20);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A2C20);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::listClients() [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2C20);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A2C20);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::listClients() [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021A2C20);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A2C20);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::listClients() [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1011499D4(uint64_t a1)
{
  sub_101149F14(a1);
  operator delete();
}

void sub_1011499F8(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_101149A24(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101149A50(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

_QWORD *sub_101149A7C(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_1001D13D4((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_101149AD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_101149AF0(uint64_t a1, int a2, int a3, int a4)
{
  sub_1011469D4(*(_QWORD *)(a1 + 32), a2, a3, a4, *(CFDictionaryRef *)(a1 + 64));
}

uint64_t sub_101149B00(uint64_t a1, int a2, int a3, int a4)
{
  return sub_101146CE8(*(_QWORD *)(a1 + 32), a2, a3, a4, *(CFDictionaryRef *)(a1 + 64));
}

_QWORD *sub_101149B10(_QWORD *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_1001D13D4((uint64_t)(__dst + 3), a3);
  return __dst;
}

void sub_101149B6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101149B88(uint64_t a1)
{
  void *v2;

  sub_101149BC0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_101149BC0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_101149BFC((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_101149BFC(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *sub_101149C70@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x88uLL);
  result = sub_101149CC8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101149CB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101149CC8(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = off_1021A2D50;
  a1[1] = 0;
  sub_1001D13D4((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_101149D00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_101149D14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021A2D50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101149D28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021A2D50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_101149D5C(uint64_t a1)
{
  char v1;

  sub_101149D84((uint64_t)&v1, a1 + 24);
}

void sub_101149D84(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 103) < 0)
    operator delete(*(void **)(a2 + 80));
  if (*(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void sub_101149DE8(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_101149E14(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_101149BFC((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

char *sub_101149E58(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  v5 = a2[2];
  *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
  *((_OWORD *)__dst + 2) = v5;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 4) = 0;
  v6 = *(__int128 *)((char *)a2 + 56);
  *((_QWORD *)__dst + 9) = *((_QWORD *)a2 + 9);
  *(_OWORD *)(__dst + 56) = v6;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 7) = 0;
  v7 = a2[5];
  *((_QWORD *)__dst + 12) = *((_QWORD *)a2 + 12);
  *((_OWORD *)__dst + 5) = v7;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 10) = 0;
  v8 = *(__int128 *)((char *)a2 + 104);
  *((_QWORD *)__dst + 15) = *((_QWORD *)a2 + 15);
  *(_OWORD *)(__dst + 104) = v8;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)__dst + 16) = *((_QWORD *)a2 + 16);
  return __dst;
}

uint64_t sub_101149F14(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_1021A2DC0;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_101149F74()
{
  operator new();
}

void sub_10114A008()
{
  operator delete();
}

uint64_t sub_10114A02C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 103) < 0)
      operator delete(*(void **)(v1 + 80));
    if (*(char *)(v1 + 79) < 0)
      operator delete(*(void **)(v1 + 56));
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    operator delete();
  }
  return result;
}

_QWORD *sub_10114A0AC(_QWORD *result, uint64_t a2)
{
  *result = 26;
  result[1] = a2;
  result[6] = 0;
  result[7] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = result + 6;
  return result;
}

uint64_t sub_10114A0CC(uint64_t a1)
{
  const void *v2;

  sub_10114A110(a1);
  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    _Block_release(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  sub_100008848(a1 + 40, *(_QWORD **)(a1 + 48));
  return a1;
}

void sub_10114A110(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void sub_10114A148(uint64_t a1, void *aBlock, double a3)
{
  const void *v5;
  _QWORD *v6;
  _QWORD *v7;

  *(double *)(a1 + 24) = a3;
  v5 = *(const void **)(a1 + 16);
  if (v5)
    _Block_release(v5);
  *(_QWORD *)(a1 + 16) = _Block_copy(aBlock);
  sub_10114A110(a1);
  v7 = *(_QWORD **)(a1 + 48);
  v6 = (_QWORD *)(a1 + 48);
  sub_100008848((uint64_t)(v6 - 1), v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

void sub_10114A1A0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE buf[1632];

  v19 = a3;
  v20 = a2;
  v5 = *(_QWORD **)(a1 + 48);
  if (!v5)
    goto LABEL_12;
  v6 = a1 + 48;
  do
  {
    v7 = v5[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (v8)
      v6 = (uint64_t)v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != a1 + 48 && *(_QWORD *)(v6 + 32) <= a2)
  {
    v18 = v6 + 40;
    sub_100FF1F98(v6 + 40, &v19);
    *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
    sub_100FF1F8C(v18, (double *)buf);
  }
  else
  {
LABEL_12:
    if ((a3 & 1) != 0)
    {
      v13 = (uint64_t **)(a1 + 40);
      *(_QWORD *)buf = &v20;
      v14 = sub_10114AF9C((uint64_t **)(a1 + 40), &v20, (uint64_t)&unk_101B9EB60, (uint64_t **)buf) + 5;
      *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
      sub_100FF1F80((uint64_t)v14, (double *)buf);
      *(_QWORD *)buf = &v20;
      v15 = sub_10114AF9C(v13, &v20, (uint64_t)&unk_101B9EB60, (uint64_t **)buf) + 5;
      *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
      sub_100FF1F8C((uint64_t)v15, (double *)buf);
      *(_QWORD *)buf = &v20;
      v16 = sub_10114AF9C(v13, &v20, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
      sub_100FF1F98((uint64_t)(v16 + 5), &v19);
      *(_QWORD *)buf = &v20;
      v17 = sub_10114AF9C(v13, &v20, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
      sub_100FF1FB8((uint64_t)(v17 + 5), *(_QWORD *)a1);
    }
    else
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021A2E38);
      v10 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to log impact due to cancel reason not containing kImpactStart 0x%llu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_1021A2E38);
        v21 = 134217984;
        v22 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 16, "Unable to log impact due to cancel reason not containing kImpactStart 0x%llu", &v21);
        v12 = (char *)v11;
        sub_100512490("Generic", 1, 0, 0, "void CLFallImpactEventTracker::trackCancelReason(uint64_t, CMSPUFall_Types::FallCancelReason)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
  }
  sub_10114A490(a1);
}

void sub_10114A490(uint64_t a1)
{
  double Current;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;

  sub_10114A110(a1);
  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(uint64_t **)(a1 + 40);
  if (v3 != (uint64_t *)(a1 + 48))
  {
    do
    {
      if (Current <= sub_100C3C620((uint64_t)(v3 + 5)) + *(double *)(a1 + 24))
      {
        v6 = (uint64_t *)v3[1];
        if (v6)
        {
          do
          {
            v5 = v6;
            v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v5 = (uint64_t *)v3[2];
            v7 = *v5 == (_QWORD)v3;
            v3 = v5;
          }
          while (!v7);
        }
      }
      else
      {
        v4 = *(_QWORD *)(a1 + 16);
        if (v4)
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(v4 + 16))(v4, v3[4], v3 + 5);
        v5 = sub_10008A9F0((uint64_t **)(a1 + 40), v3);
        operator delete(v3);
      }
      v3 = v5;
    }
    while (v5 != (uint64_t *)(a1 + 48));
  }
  sub_10114ACB4(a1, Current);
}

void sub_10114A574(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  const char *v26;
  uint8_t *v27;
  int v28;
  unint64_t v29;
  uint8_t buf[4];
  unint64_t v31;

  v2 = *(_QWORD *)(a2 + 19);
  v5 = *(_QWORD **)(a1 + 48);
  v3 = (_QWORD *)(a1 + 48);
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v7 = v3;
  do
  {
    v8 = v4[4];
    v9 = v8 >= v2;
    if (v8 >= v2)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v3 && v2 >= v7[4])
  {
    v12 = (uint64_t)(v7 + 5);
    v13 = sub_100A2C2B8((float *)(a2 + 27));
    sub_100FF1FC0(v12, v13);
    v14 = *(float *)(a2 + 31);
    if (v14 >= 0.0)
      v15 = *(float *)(a2 + 31);
    else
      v15 = -v14;
    v16 = *(float *)(a2 + 27);
    if (v16 >= 0.0)
      v17 = *(float *)(a2 + 27);
    else
      v17 = -v16;
    if (v15 <= v17)
    {
      if (v16 < 0.0)
        v14 = -v16;
      else
        v14 = *(float *)(a2 + 27);
    }
    else if (v14 < 0.0)
    {
      v14 = -v14;
    }
    sub_100FF2048(v12, v14);
    v18 = *(float *)(a2 + 39);
    if (v18 >= 0.0)
      v19 = *(float *)(a2 + 39);
    else
      v19 = -v18;
    v20 = *(float *)(a2 + 35);
    if (v20 >= 0.0)
      v21 = *(float *)(a2 + 35);
    else
      v21 = -v20;
    if (v19 <= v21)
    {
      if (v20 < 0.0)
        v18 = -v20;
      else
        v18 = *(float *)(a2 + 35);
    }
    else if (v18 < 0.0)
    {
      v18 = -v18;
    }
    sub_100FF2078(v12, v18);
    v22 = *(float *)(a2 + 47);
    if (v22 >= 0.0)
      v23 = *(float *)(a2 + 47);
    else
      v23 = -v22;
    v24 = *(float *)(a2 + 43);
    if (v24 >= 0.0)
      v25 = *(float *)(a2 + 43);
    else
      v25 = -v24;
    if (v23 <= v25)
    {
      if (v24 < 0.0)
        v22 = -v24;
      else
        v22 = *(float *)(a2 + 43);
    }
    else if (v22 < 0.0)
    {
      v22 = -v22;
    }
    sub_100FF20A8(v12, v22);
    sub_100FF2004(v12, *(float *)(a2 + 51));
  }
  else
  {
LABEL_12:
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021A2E38);
    v11 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v31 = v2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Could not find impact at time %llu, unable to set impact features", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021A2E38);
      v28 = 134217984;
      v29 = v2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 16, "Could not find impact at time %llu, unable to set impact features", &v28);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 0, "void CLFallImpactEventTracker::updateImpactFeatures(const CLFall_Types::ImpactEvent &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
}

void sub_10114A874(uint64_t a1, unint64_t a2, char a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  char v14;
  int v15;
  unint64_t v16;
  uint8_t buf[4];
  unint64_t v18;

  v14 = a3;
  v6 = *(_QWORD **)(a1 + 48);
  v4 = (_QWORD *)(a1 + 48);
  v5 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = v4;
  do
  {
    v8 = v5[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v4 && v7[4] <= a2)
  {
    sub_100FF1FAC((uint64_t)(v7 + 5), &v14);
  }
  else
  {
LABEL_12:
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021A2E38);
    v11 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Could not find impact at time %llu, unable to set user response", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021A2E38);
      v15 = 134217984;
      v16 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 16, "Could not find impact at time %llu, unable to set user response", &v15);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLFallImpactEventTracker::updateUserResponse(const uint64_t, const CMSPUFall_Types::FallResponse)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_10114AA6C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  unint64_t v16;
  uint8_t buf[4];
  unint64_t v18;

  v2 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD **)(a1 + 48);
  v3 = (_QWORD *)(a1 + 48);
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v7 = v3;
  do
  {
    v8 = v4[4];
    v9 = v8 >= v2;
    if (v8 >= v2)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v3 && v2 >= v7[4])
  {
    v12 = (uint64_t)(v7 + 5);
    sub_100FF20D8((uint64_t)(v7 + 5), *(float *)(a2 + 52));
    sub_100FF20E0(v12, *(_QWORD *)(a2 + 16));
    sub_100FF20E8(v12, *(_QWORD *)(a2 + 36));
    sub_100FF20F0(v12, *(_QWORD *)(a2 + 44));
  }
  else
  {
LABEL_12:
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021A2E38);
    v11 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v18 = v2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Could not find impact at time %llu, unable to set fall distance", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021A2E38);
      v15 = 134217984;
      v16 = v2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 16, "Could not find impact at time %llu, unable to set fall distance", &v15);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLFallImpactEventTracker::updateFallDistance(const CLFall_Types::FallDistance &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

void sub_10114ACB4(uint64_t a1, double a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  double v7;
  double v8;
  NSObject *v9;
  NSObject *v10;
  dispatch_time_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  _QWORD handler[5];
  int v16;
  double v17;
  uint8_t buf[4];
  double v19;

  if (*(_QWORD *)(a1 + 56) && *(double *)(a1 + 24) > 0.0)
  {
    v3 = (_QWORD *)(a1 + 48);
    v4 = *(_QWORD **)(a1 + 48);
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)v4[1];
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)v3[2];
        v6 = *v5 == (_QWORD)v3;
        v3 = v5;
      }
      while (v6);
    }
    v7 = sub_100C3C620((uint64_t)(v5 + 5)) + *(double *)(a1 + 24) - a2;
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021A2E38);
    v8 = fmax(v7, 1.0);
    v9 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Rescheduling impact reporting in %.2lf seconds", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021A2E38);
      v16 = 134217984;
      v17 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 1, "Rescheduling impact reporting in %.2lf seconds", COERCE_DOUBLE(&v16));
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLFallImpactEventTracker::rescheduleFlushTimer(CFAbsoluteTime)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v10 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 2uLL, 0, (dispatch_queue_t)objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue"));
    *(_QWORD *)(a1 + 32) = v10;
    v11 = dispatch_time(0x8000000000000000, (unint64_t)(v8 * 1000000000.0));
    dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0);
    v12 = *(NSObject **)(a1 + 32);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10114AF68;
    handler[3] = &unk_10212ECA0;
    handler[4] = a1;
    dispatch_source_set_event_handler(v12, handler);
    dispatch_resume(*(dispatch_object_t *)(a1 + 32));
  }
}

uint64_t sub_10114AF68(uint64_t a1)
{
  return sub_10114A490(*(_QWORD *)(a1 + 32));
}

void sub_10114AF70(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t **sub_10114AF9C(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x88uLL);
    v12 = **a4;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *((_QWORD *)v11 + 4) = v12;
    *((_QWORD *)v11 + 5) = off_102198A20;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 8) = 0;
    *((_QWORD *)v11 + 6) = 0;
    v11[72] = 0;
    *(_QWORD *)&v13 = 0x8000000080000000;
    *((_QWORD *)&v13 + 1) = 0x8000000080000000;
    *(_OWORD *)(v11 + 76) = v13;
    *((_DWORD *)v11 + 23) = 0x7FFFFFFF;
    *((_QWORD *)v11 + 12) = 26;
    *((_QWORD *)v11 + 13) = 0;
    *((_DWORD *)v11 + 26) = 2139095039;
    *((_QWORD *)v11 + 14) = 0;
    *((_QWORD *)v11 + 15) = 0;
    *((_QWORD *)v11 + 16) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_10114B0A4()
{
  sub_1015A2E04(qword_10230CDB0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230CDB0, (void *)&_mh_execute_header);
}

void sub_10114B0E8(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = a3;
  sub_1001B7DEC();
}

void sub_10114B184(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void sub_10114B1AC(uint64_t a1, int *a2, _BYTE *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLTransitWsbClient::onWifiNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A2E58);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTransitWsbClient::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2E58);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTransitWsbClient::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10114B76C((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10114B364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10114B388(uint64_t a1)
{
  uint64_t v2;

  sub_10114B3D8(a1);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), 1);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

id sub_10114B3D8(uint64_t a1)
{
  id result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  result = objc_msgSend(*(id *)a1, "silo");
  if (*(_BYTE *)(a1 + 17))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A2E78);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Stop active dynamic Wsb", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A2E78);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Stop active dynamic Wsb", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLTransitWsbClient::stopWsb()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), 12);
    *(_BYTE *)(a1 + 17) = 0;
  }
  return result;
}

id sub_10114B590(uint64_t a1)
{
  id result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[4];
  __int16 v8;
  const char *v9;

  result = objc_msgSend(*(id *)a1, "silo");
  if (!*(_BYTE *)(a1 + 17))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A2E78);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Start active dynamic Wsb", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A2E78);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Start active dynamic Wsb", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLTransitWsbClient::startWsb()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    v8 = 1;
    *(_DWORD *)buf = *(_DWORD *)(a1 + 20);
    v9 = "transit";
    sub_10061DCC4();
  }
  return result;
}

void sub_10114B76C(uint64_t a1, uint64_t a2, int *a3, _BYTE *a4)
{
  NSObject *v7;
  int v8;
  uint8_t *v9;
  double v10;
  NSObject *v11;
  uint8_t *v12;
  NSObject *v13;
  int v14;
  int v15;
  double v16;
  uint8_t *v17;
  _DWORD v18[4];
  uint8_t buf[4];
  int v20;

  objc_msgSend(*(id *)a1, "silo");
  if (*a3 == 12)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A2E78);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Received kNotificationScanCache", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A2E78);
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Received kNotificationScanCache");
      goto LABEL_19;
    }
  }
  else if (*a3 == 1)
  {
    *(_BYTE *)(a1 + 16) = *a4;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A2E78);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(unsigned __int8 *)(a1 + 16);
      *(_DWORD *)buf = 67109120;
      v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received kNotificationPower, isWifiPowered, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A2E78);
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Received kNotificationPower, isWifiPowered, %d", v18);
LABEL_19:
      v12 = v9;
      sub_100512490("Generic", 1, 0, 2, "void CLTransitWsbClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v10);
LABEL_29:
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A2E78);
    v13 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v14 = *a3;
      *(_DWORD *)buf = 67240192;
      v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Unknown notification received, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A2E78);
      v15 = *a3;
      v18[0] = 67240192;
      v18[1] = v15;
      v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Unknown notification received, %{public}d", v18, 8);
      v12 = v17;
      sub_100512490("Generic", 1, 0, 0, "void CLTransitWsbClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v16);
      goto LABEL_29;
    }
  }
}

void sub_10114BB58(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10114BB84(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10114BBB0()
{
  unsigned int v0;
  _BOOL4 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  BOOL v8;

  sub_1001E4804(&v6);
  v8 = 0;
  v0 = sub_1001E4874(v6, "EnablePositionProtoOsLog", &v8);
  v1 = v8;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v1)
    return v0;
  else
    return 0;
}

void sub_10114BC44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10114BC58(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  char *v7;
  NSObject *v8;
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  id v16;
  _BYTE *v17;
  NSString *v18;
  NSArray *v19;
  _BYTE *v20;
  _QWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  _QWORD v30[5];
  id v31;
  _BYTE __p[12];
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;

  *(_QWORD *)a1 = &off_1021A2EA8;
  v3 = (_QWORD *)(a1 + 8);
  sub_10114E944((char *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 136) = v4;
  *(_QWORD *)(a1 + 136 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + 136 + *(_QWORD *)(*(_QWORD *)(a1 + 136) - 24));
  std::ios_base::init(v6, (void *)(a1 + 144));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(a1 + 144);
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  v7 = (char *)operator new(3uLL);
  *(_QWORD *)(a1 + 712) = v7;
  *(_QWORD *)(a1 + 728) = v7 + 3;
  *(_WORD *)v7 = 32126;
  v7[2] = 1;
  *(_QWORD *)(a1 + 720) = v7 + 3;
  *(_BYTE *)(a1 + 736) = 0;
  *(_DWORD *)(a1 + 740) = 0;
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021A2F18);
  v8 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_INFO))
  {
    v9 = v3;
    if (*(char *)(a1 + 31) < 0)
      v9 = (_QWORD *)*v3;
    v10 = *(unsigned __int8 *)(a1 + 126);
    v11 = *(unsigned __int8 *)(a1 + 124);
    v12 = *(_QWORD *)(a1 + 104);
    v13 = *(_QWORD *)(a1 + 112);
    v14 = *(unsigned __int8 *)(a1 + 127);
    v15 = *(unsigned __int8 *)(a1 + 129);
    *(_DWORD *)buf = 136447747;
    *(_QWORD *)&buf[4] = v9;
    v46 = 1026;
    v47 = v10;
    v48 = 1026;
    v49 = v11;
    v50 = 2049;
    v51 = v12;
    v52 = 2049;
    v53 = v13;
    v54 = 1026;
    v55 = v14;
    v56 = 1026;
    v57 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "ProtobufSerializer,created instance,%{public}s,disk_enable,%{public}d,compress,%{public}d,retention_sec,%{private}.1f,dir_size_bytes,%{private}lld,localTime,%{public}d,prune,%{public}d", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v22 = v3;
    if (*(char *)(a1 + 31) < 0)
      v22 = (_QWORD *)*v3;
    v23 = *(unsigned __int8 *)(a1 + 126);
    v24 = *(unsigned __int8 *)(a1 + 124);
    v25 = *(_QWORD *)(a1 + 104);
    v26 = *(_QWORD *)(a1 + 112);
    v27 = *(unsigned __int8 *)(a1 + 127);
    v28 = *(unsigned __int8 *)(a1 + 129);
    *(_DWORD *)__p = 136447747;
    *(_QWORD *)&__p[4] = v22;
    v33 = 1026;
    v34 = v23;
    v35 = 1026;
    v36 = v24;
    v37 = 2049;
    v38 = v25;
    v39 = 2049;
    v40 = v26;
    v41 = 1026;
    v42 = v27;
    v43 = 1026;
    v44 = v28;
    v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 1, "ProtobufSerializer,created instance,%{public}s,disk_enable,%{public}d,compress,%{public}d,retention_sec,%{private}.1f,dir_size_bytes,%{private}lld,localTime,%{public}d,prune,%{public}d", __p, 56);
    sub_100512490("Generic", 1, 0, 2, "CLProtobufSerializer::CLProtobufSerializer(Config &&)", "%s\n", v29);
    if (v29 != buf)
      free(v29);
  }
  v16 = -[objc_class defaultManager](off_1022FDA08(), "defaultManager");
  if (v16)
  {
    std::operator+<char>(buf, "com.apple.locationd.diskusage.", v3);
    sub_100074BE8(a1, (uint64_t)__p);
    if (v36 >= 0)
      v17 = __p;
    else
      v17 = *(_BYTE **)__p;
    v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17);
    if (SHIBYTE(v36) < 0)
      operator delete(*(void **)__p);
    v31 = -[objc_class pathInfoWithURL:](off_1022FDA10(), "pathInfoWithURL:", +[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v18));
    v19 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v31, 1);
    if (v49 >= 0)
      v20 = buf;
    else
      v20 = *(_BYTE **)buf;
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10114C158;
    v30[3] = &unk_102143618;
    v30[4] = v18;
    objc_msgSend(v16, "registerPaths:forBundleID:completionHandler:", v19, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20), v30);
    if (SHIBYTE(v49) < 0)
      operator delete(*(void **)buf);
  }
  return a1;
}

void sub_10114C0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  void *v37;

  v37 = (void *)v34[89];
  if (v37)
  {
    v34[90] = (uint64_t)v37;
    operator delete(v37);
  }
  sub_10114E310(v34 + 88, 0);
  sub_1008347F8(v35);
  sub_10048839C(v33);
  _Unwind_Resume(a1);
}

void sub_10114C158(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  if (a2)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v4 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v16 = v5;
      v17 = 2112;
      v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "ProtobufSerializer,failed to set space attribution for %@. Error: %@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v6 = *(_QWORD *)(a1 + 32);
      v11 = 138412546;
      v12 = v6;
      v13 = 2112;
      v14 = a2;
      v7 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ProtobufSerializer,failed to set space attribution for %@. Error: %@", &v11, 22);
      sub_100512490("Generic", 1, 0, 0, "CLProtobufSerializer::CLProtobufSerializer(Config &&)_block_invoke", "%s\n");
LABEL_19:
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v8 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "ProtobufSerializer,set space attribution for %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 138412290;
      v12 = v10;
      v7 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 1, "ProtobufSerializer,set space attribution for %@", &v11, 12);
      sub_100512490("Generic", 1, 0, 2, "CLProtobufSerializer::CLProtobufSerializer(Config &&)_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_10114C464(uint64_t a1)
{
  sub_10002BEDC(a1);
  operator delete();
}

void sub_10114C488(id a1)
{
  NSObject *v1;

  v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  qword_102311CB8 = (uint64_t)dispatch_queue_create("com.apple.locationd.proto_serialize", v1);
}

void sub_10114C4C0(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  _QWORD *v4;
  char *v5;
  _QWORD block[5];
  int v7;
  _QWORD *v8;
  uint8_t buf[4];
  _QWORD *v10;

  if (*(_BYTE *)(a1 + 125))
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v2 = (_QWORD *)(a1 + 8);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_INFO))
    {
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v2;
      *(_DWORD *)buf = 136446210;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#p%{public}s,#open", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      if (*(char *)(a1 + 31) < 0)
        v2 = (_QWORD *)*v2;
      v7 = 136446210;
      v8 = v2;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 1, "#p%{public}s,#open", &v7, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::open()", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
    *(_DWORD *)(a1 + 740) = 0;
  }
  if (*(_BYTE *)(a1 + 126))
  {
    if (qword_10230CDC8 != -1)
      dispatch_once(&qword_10230CDC8, &stru_1021A2EB8);
    if (qword_102311CB8)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10114C708;
      block[3] = &unk_10212ECA0;
      block[4] = a1;
      dispatch_async((dispatch_queue_t)qword_102311CB8, block);
    }
  }
}

void sub_10114C708(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD *v8;
  std::string *p_p;
  std::string *v10;
  NSObject *v11;
  uint64_t v12;
  std::string *v13;
  int *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  std::string *v19;
  char *v20;
  uint64_t v21;
  std::string *v22;
  int *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  std::string __p;
  int v28;
  _QWORD *v29;
  __int16 v30;
  std::string *v31;
  __int16 v32;
  char *v33;
  _BYTE buf[12];
  __int16 v35;
  std::string *v36;
  __int16 v37;
  char *v38;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 736))
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v2 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEFAULT))
    {
      v3 = (_QWORD *)(v1 + 8);
      if (*(char *)(v1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ProtobufSerializer,%{public}s,#Warning,previous file was not closed", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v16 = (_QWORD *)(v1 + 8);
      if (*(char *)(v1 + 31) < 0)
        v16 = (_QWORD *)*v16;
      v28 = 136446210;
      v29 = v16;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 0, "ProtobufSerializer,%{public}s,#Warning,previous file was not closed", &v28, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::open()_block_invoke", "%s\n", v17);
      if (v17 != buf)
        free(v17);
    }
    sub_100019970(v1);
  }
  if (sub_10114CDB4((char *)(v1 + 56)))
  {
    if (*(char *)(v1 + 103) < 0)
    {
      if (!*(_QWORD *)(v1 + 88))
      {
LABEL_19:
        if (*(_BYTE *)(v1 + 124))
          operator new();
        sub_10114D870(v1, &__p);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        v6 = (uint64_t *)(v1 + 8);
        v7 = qword_1022A0168;
        if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEFAULT))
        {
          v8 = (_QWORD *)(v1 + 8);
          if (*(char *)(v1 + 31) < 0)
            v8 = (_QWORD *)*v6;
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v8;
          v35 = 2082;
          v36 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ProtobufSerializer,%{public}s,opening,%{public}s", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021A2F18);
          v18 = v1 + 8;
          if (*(char *)(v1 + 31) < 0)
            v18 = *v6;
          v19 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v28 = 136446466;
          v29 = (_QWORD *)v18;
          v30 = 2082;
          v31 = v19;
          LODWORD(v26) = 22;
          v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 0, "ProtobufSerializer,%{public}s,opening,%{public}s", &v28, v26);
          sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::open()_block_invoke", "%s\n", v20);
          if (v20 != buf)
            free(v20);
        }
        std::ofstream::open(v1 + 136, &__p, 4);
        if (*(_QWORD *)(v1 + 264))
        {
          *(_BYTE *)(v1 + 736) = 1;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v10 = &__p;
          else
            v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
          sub_100512E44((const char *)v10);
        }
        else
        {
          *(_BYTE *)(v1 + 736) = 0;
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021A2F18);
          v11 = qword_1022A0168;
          if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
          {
            v12 = v1 + 8;
            if (*(char *)(v1 + 31) < 0)
              v12 = *v6;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v13 = &__p;
            else
              v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v14 = __error();
            v15 = strerror(*v14);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = v12;
            v35 = 2082;
            v36 = v13;
            v37 = 2082;
            v38 = v15;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "ProtobufSerializer,%{public}s,failed to open,%{public}s,error,%{public}s", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0160 != -1)
              dispatch_once(&qword_1022A0160, &stru_1021A2F18);
            if (*(char *)(v1 + 31) < 0)
              v6 = (uint64_t *)*v6;
            v21 = qword_1022A0168;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v22 = &__p;
            else
              v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v23 = __error();
            v24 = strerror(*v23);
            v28 = 136446722;
            v29 = v6;
            v30 = 2082;
            v31 = v22;
            v32 = 2082;
            v33 = v24;
            LODWORD(v26) = 32;
            v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 16, "ProtobufSerializer,%{public}s,failed to open,%{public}s,error,%{public}s", &v28, v26);
            sub_100512490("Generic", 1, 0, 0, "void CLProtobufSerializer::open()_block_invoke", "%s\n", v25);
            if (v25 != buf)
              free(v25);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return;
      }
    }
    else if (!*(_BYTE *)(v1 + 103))
    {
      goto LABEL_19;
    }
    sub_100074BE8(v1, (uint64_t)buf);
    v4 = sub_10114CDB4(buf);
    v5 = v4;
    if (SHIBYTE(v37) < 0)
    {
      operator delete(*(void **)buf);
      if (!v5)
        return;
    }
    else if (!v4)
    {
      return;
    }
    goto LABEL_19;
  }
}

void sub_10114CD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10114CDB4(char *a1)
{
  char *v1;
  BOOL v2;
  NSObject *v3;
  std::string::size_type v4;
  NSObject *v5;
  std::string::size_type v6;
  std::__fs::filesystem::path *v7;
  _BOOL8 result;
  uint64_t v9;
  std::string *p_buf;
  std::__fs::filesystem::path *v11;
  NSObject *v12;
  std::string::size_type v13;
  NSObject *v14;
  std::string::size_type v15;
  std::__fs::filesystem::path *v16;
  const char *v17;
  NSObject *v18;
  std::string::size_type v19;
  int *v20;
  char *v21;
  uint64_t v22;
  int *v23;
  char *v24;
  NSObject *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::__fs::filesystem::path *v28;
  std::string::size_type v29;
  std::__fs::filesystem::path *v30;
  std::string::size_type v31;
  uint64_t v32;
  std::string *v33;
  uint64_t v34;
  std::error_code v35;
  std::string buf;
  int v37;
  char *v38;
  __int16 v39;
  std::string *v40;
  std::__fs::filesystem::path v41;

  v1 = a1;
  sub_10114EBA4(&v41.__pn_, a1);
  std::__fs::filesystem::__status(&v41, 0);
  if (SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__pn_.__r_.__value_.__l.__data_);
  if (buf.__r_.__value_.__s.__data_[0] && buf.__r_.__value_.__s.__data_[0] != 255)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v12 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
    {
      if (v1[23] >= 0)
        v13 = (std::string::size_type)v1;
      else
        v13 = *(_QWORD *)v1;
      LODWORD(v41.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v41.__pn_.__r_.__value_.__r.__words + 4) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,directory exists,%s", (uint8_t *)&v41, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(&v41, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    if (v1[23] >= 0)
      v31 = (std::string::size_type)v1;
    else
      v31 = *(_QWORD *)v1;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v31;
    v28 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl(2, 0, &v41, 1628, &_mh_execute_header, qword_1022A0168, 2, "ProtobufSerializer,directory exists,%s", (const char *)&buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL (anonymous namespace)::ensureDirectoryExistsAndHasLoggingOwnership(const std::string &)", "%s\n", (const char *)v28);
    goto LABEL_108;
  }
  v35.__val_ = 0;
  v35.__cat_ = std::system_category();
  sub_10114EBA4(&v41.__pn_, v1);
  v2 = std::__fs::filesystem::__create_directories(&v41, &v35);
  if (SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__pn_.__r_.__value_.__l.__data_);
  if (v2)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_INFO))
    {
      if (v1[23] >= 0)
        v4 = (std::string::size_type)v1;
      else
        v4 = *(_QWORD *)v1;
      LODWORD(v41.__pn_.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v41.__pn_.__r_.__value_.__r.__words + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "ProtobufSerializer,created directory,%{private}s", (uint8_t *)&v41, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v41, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      if (v1[23] >= 0)
        v29 = (std::string::size_type)v1;
      else
        v29 = *(_QWORD *)v1;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v29;
      v30 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl(2, 0, &v41, 1628, &_mh_execute_header, qword_1022A0168, 1, "ProtobufSerializer,created directory,%{private}s", &buf, 12);
      sub_100512490("Generic", 1, 0, 2, "BOOL (anonymous namespace)::ensureDirectoryExistsAndHasLoggingOwnership(const std::string &)", "%s\n", (const char *)v30);
      if (v30 != &v41)
        free(v30);
    }
    sub_10114EBA4(&v41.__pn_, v1);
    std::__fs::filesystem::__permissions(&v41, group_all|owner_all, add, &v35);
    if (SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__pn_.__r_.__value_.__l.__data_);
    if (v35.__val_)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v5 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        v6 = v1[23] >= 0 ? (std::string::size_type)v1 : *(_QWORD *)v1;
        std::error_code::message(&v41.__pn_, &v35);
        v7 = (v41.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v41
           : (std::__fs::filesystem::path *)v41.__pn_.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v6;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "ProtobufSerializer,failed to set directory permissions,%{private}s,error,%{public}s", (uint8_t *)&buf, 0x16u);
        if (SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__pn_.__r_.__value_.__l.__data_);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(&v41, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        v9 = qword_1022A0168;
        if (v1[23] < 0)
          v1 = *(char **)v1;
        std::error_code::message(&buf, &v35);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        v37 = 136380931;
        v38 = v1;
        v39 = 2082;
        v40 = p_buf;
        LODWORD(v34) = 22;
        v11 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl(2, 0, &v41, 1628, &_mh_execute_header, v9, 16, "ProtobufSerializer,failed to set directory permissions,%{private}s,error,%{public}s", &v37, v34);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        goto LABEL_119;
      }
      return result;
    }
    if (v1[23] >= 0)
      v17 = v1;
    else
      v17 = *(const char **)v1;
    if (sub_100512E44(v17))
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v18 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        if (v1[23] >= 0)
          v19 = (std::string::size_type)v1;
        else
          v19 = *(_QWORD *)v1;
        v20 = __error();
        v21 = strerror(*v20);
        LODWORD(v41.__pn_.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)v41.__pn_.__r_.__value_.__r.__words + 4) = v19;
        WORD2(v41.__pn_.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v41.__pn_.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v21;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "ProtobufSerializer,chown failed,%{public}s,error,%{public}s", (uint8_t *)&v41, 0x16u);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(&v41, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        v22 = qword_1022A0168;
        if (v1[23] < 0)
          v1 = *(char **)v1;
        v23 = __error();
        v24 = strerror(*v23);
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v1;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
        LODWORD(v34) = 22;
        v11 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl(2, 0, &v41, 1628, &_mh_execute_header, v22, 16, "ProtobufSerializer,chown failed,%{public}s,error,%{public}s", &buf, v34);
        sub_100512490("Generic", 1, 0, 0, "BOOL (anonymous namespace)::ensureDirectoryExistsAndHasLoggingOwnership(const std::string &)", "%s\n", (const char *)v11);
        if (v11 == &v41)
          return 0;
        goto LABEL_120;
      }
      return result;
    }
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v25 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
    {
      if (v1[23] >= 0)
        v26 = (std::string::size_type)v1;
      else
        v26 = *(_QWORD *)v1;
      LODWORD(v41.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v41.__pn_.__r_.__value_.__r.__words + 4) = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,chown succeeded,%s", (uint8_t *)&v41, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(&v41, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    if (v1[23] >= 0)
      v27 = (std::string::size_type)v1;
    else
      v27 = *(_QWORD *)v1;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v27;
    v28 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl(2, 0, &v41, 1628, &_mh_execute_header, qword_1022A0168, 2, "ProtobufSerializer,chown succeeded,%s", (const char *)&buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL (anonymous namespace)::ensureDirectoryExistsAndHasLoggingOwnership(const std::string &)", "%s\n", (const char *)v28);
LABEL_108:
    if (v28 != &v41)
      free(v28);
    return 1;
  }
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021A2F18);
  v14 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v15 = v1[23] >= 0 ? (std::string::size_type)v1 : *(_QWORD *)v1;
    std::error_code::message(&v41.__pn_, &v35);
    v16 = (v41.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v41
        : (std::__fs::filesystem::path *)v41.__pn_.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v15;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "ProtobufSerializer,failed to create directory,%{private}s,error,%{public}s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__pn_.__r_.__value_.__l.__data_);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(&v41, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v32 = qword_1022A0168;
    if (v1[23] < 0)
      v1 = *(char **)v1;
    std::error_code::message(&buf, &v35);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &buf;
    else
      v33 = (std::string *)buf.__r_.__value_.__r.__words[0];
    v37 = 136380931;
    v38 = v1;
    v39 = 2082;
    v40 = v33;
    v11 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl(2, 0, &v41, 1628, &_mh_execute_header, v32, 16, "ProtobufSerializer,failed to create directory,%{private}s,error,%{public}s", &v37, 22);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
LABEL_119:
    sub_100512490("Generic", 1, 0, 0, "BOOL (anonymous namespace)::ensureDirectoryExistsAndHasLoggingOwnership(const std::string &)", "%s\n", (const char *)v11);
    if (v11 == &v41)
      return 0;
LABEL_120:
    free(v11);
    return 0;
  }
  return result;
}

void sub_10114D844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10114D870(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  tm *v8;
  uint64_t *p_tm_sec;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v20;
  _QWORD *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  char v30;
  std::string *p_buf;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  const std::string::value_type *v44;
  uint64_t v45;
  const std::string::value_type *v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  void **v52;
  std::string::size_type v53;
  std::string *v54;
  std::string *v55;
  uint64_t v56;
  std::string v57;
  void *v58[2];
  unsigned __int8 v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  _QWORD v64[10];
  char v65;
  uint64_t v66;
  time_t v67;
  char v68;
  std::string __p;
  std::string buf;
  _QWORD v71[10];
  char v72;
  uint64_t v73;

  v4 = *(int **)(a1 + 704);
  if (v4)
    sub_10114E5EC(v4, v58);
  else
    sub_1015A2E04(v58, "");
  if (*(_BYTE *)(a1 + 128))
  {
    v5 = *(unsigned __int8 *)(a1 + 127);
    memset(&v61, 0, sizeof(v61));
    v6 = sub_100197040();
    if (!sub_10075C2F4(v6, &v61))
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v7 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "ProtobufSerializer,could not read device serial number", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        LOWORD(v63.__r_.__value_.__l.__data_) = 0;
        v55 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ProtobufSerializer,could not read device serial number", &v63, 2);
        sub_100512490("Generic", 1, 0, 0, "std::string (anonymous namespace)::createUniquePortionOfLogFileName(BOOL)", "%s\n", (const char *)v55);
        if (v55 != &buf)
          free(v55);
      }
    }
    memset(&v60, 0, sizeof(v60));
    v67 = time(0);
    if (v5)
      v8 = localtime(&v67);
    else
      v8 = gmtime(&v67);
    p_tm_sec = (uint64_t *)&v8->tm_sec;
    if (v8)
    {
      sub_100263E50((uint64_t)&v63);
      buf.__r_.__value_.__s.__data_[0] = 48;
      sub_100B06348(&v63.__r_.__value_.__r.__words[2], (char *)&buf);
      *(_QWORD *)((char *)&v64[2] + *(_QWORD *)(v63.__r_.__value_.__r.__words[2] - 24)) = 4;
      v10 = (_QWORD *)std::ostream::operator<<(&v63.__r_.__value_.__r.__words[2], (*((_DWORD *)p_tm_sec + 5) + 1900));
      sub_100263F7C(v10, (uint64_t)"-", 1);
      *(_QWORD *)((char *)&v64[2] + *(_QWORD *)(v63.__r_.__value_.__r.__words[2] - 24)) = 2;
      v11 = (_QWORD *)std::ostream::operator<<(&v63.__r_.__value_.__r.__words[2], (*((_DWORD *)p_tm_sec + 4) + 1));
      sub_100263F7C(v11, (uint64_t)"-", 1);
      *(_QWORD *)((char *)&v64[2] + *(_QWORD *)(v63.__r_.__value_.__r.__words[2] - 24)) = 2;
      v12 = (_QWORD *)std::ostream::operator<<(&v63.__r_.__value_.__r.__words[2], *((unsigned int *)p_tm_sec + 3));
      if (v5)
        sub_100263F7C(v12, (uint64_t)"_T", 2);
      else
        sub_100263F7C(v12, (uint64_t)"-", 1);
      *(_QWORD *)((char *)&v64[2] + *(_QWORD *)(v63.__r_.__value_.__r.__words[2] - 24)) = 2;
      v15 = (_QWORD *)std::ostream::operator<<(&v63.__r_.__value_.__r.__words[2], *((unsigned int *)p_tm_sec + 2));
      sub_100263F7C(v15, (uint64_t)"-", 1);
      *(_QWORD *)((char *)&v64[2] + *(_QWORD *)(v63.__r_.__value_.__r.__words[2] - 24)) = 2;
      v16 = (_QWORD *)std::ostream::operator<<(&v63.__r_.__value_.__r.__words[2], *((unsigned int *)p_tm_sec + 1));
      sub_100263F7C(v16, (uint64_t)"-", 1);
      *(_QWORD *)((char *)&v64[2] + *(_QWORD *)(v63.__r_.__value_.__r.__words[2] - 24)) = 2;
      std::ostream::operator<<(&v63.__r_.__value_.__r.__words[2], *(unsigned int *)p_tm_sec);
      if (v5)
      {
        sub_100263E50((uint64_t)&buf);
        if (p_tm_sec[5] >= 0)
          v17 = "+";
        else
          v17 = "-";
        sub_1015A2E04(&__p, v17);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v20 = sub_100263F7C(&buf.__r_.__value_.__r.__words[2], (uint64_t)p_p, size);
        v68 = 48;
        v21 = sub_100B06348(v20, &v68);
        *(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 24) = 4;
        std::ostream::operator<<();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::stringbuf::str(&v62, v71);
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words
        buf.__r_.__value_.__r.__words[2] = v22;
        if (v72 < 0)
          operator delete((void *)v71[8]);
        std::streambuf::~streambuf(v71);
        std::ios::~ios(&v73);
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v62;
        else
          v23 = (std::string *)v62.__r_.__value_.__r.__words[0];
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
        else
          v24 = v62.__r_.__value_.__l.__size_;
        sub_100263F7C(&v63.__r_.__value_.__r.__words[2], (uint64_t)v23, v24);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str(&buf, v64);
      v60 = buf;
      *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words
      v63.__r_.__value_.__r.__words[2] = v25;
      if (v65 < 0)
        operator delete((void *)v64[8]);
      std::streambuf::~streambuf(v64);
      std::ios::~ios(&v66);
    }
    else
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v13 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "ProtobufSerializer,could not obtain UTC time", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        LOWORD(v63.__r_.__value_.__l.__data_) = 0;
        LODWORD(v56) = 2;
        v14 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ProtobufSerializer,could not obtain UTC time", &v63, v56);
        sub_100512490("Generic", 1, 0, 0, "std::string (anonymous namespace)::createUniquePortionOfLogFileName(BOOL)", "%s\n", (const char *)v14);
        if (v14 != &buf)
          free(v14);
      }
    }
    memset(&v57, 0, sizeof(v57));
    v26 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = v61.__r_.__value_.__l.__size_;
    if (v26)
    {
      std::operator+<char>(&buf, "_", &v61);
      v27 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      v28 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(buf.__r_.__value_.__r.__words[2])
          : buf.__r_.__value_.__l.__size_;
      std::string::append(&v57, (const std::string::value_type *)v27, v28);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    v29 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    v30 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v29 = v60.__r_.__value_.__l.__size_;
    if (v29)
    {
      std::operator+<char>(&buf, "_", &v60);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      else
        v32 = buf.__r_.__value_.__l.__size_;
      std::string::append(&v57, (const std::string::value_type *)p_buf, v32);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v30 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    }
    if (v30 < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_1015A2E04(&v57, "");
  }
  sub_100074BE8(a1, (uint64_t)&v61);
  v33 = std::string::append(&v61, "/");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = *(char *)(a1 + 31);
  if (v35 >= 0)
    v36 = (const std::string::value_type *)(a1 + 8);
  else
    v36 = *(const std::string::value_type **)(a1 + 8);
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(a1 + 31);
  else
    v37 = *(_QWORD *)(a1 + 16);
  v38 = std::string::append(&v62, v36, v37);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v57;
  else
    v40 = (std::string *)v57.__r_.__value_.__r.__words[0];
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  else
    v41 = v57.__r_.__value_.__l.__size_;
  v42 = std::string::append(&__p, (const std::string::value_type *)v40, v41);
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  v46 = *(const std::string::value_type **)(a1 + 32);
  v45 = a1 + 32;
  v44 = v46;
  v47 = *(char *)(v45 + 23);
  if (v47 >= 0)
    v48 = (const std::string::value_type *)v45;
  else
    v48 = v44;
  if (v47 >= 0)
    v49 = *(unsigned __int8 *)(v45 + 23);
  else
    v49 = *(_QWORD *)(v45 + 8);
  v50 = std::string::append(&v63, v48, v49);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if ((v59 & 0x80u) == 0)
    v52 = v58;
  else
    v52 = (void **)v58[0];
  if ((v59 & 0x80u) == 0)
    v53 = v59;
  else
    v53 = (std::string::size_type)v58[1];
  v54 = std::string::append(&buf, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if ((char)v59 < 0)
    operator delete(v58[0]);
}

void sub_10114E170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(a1);
}

uint64_t sub_10114E310(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1002323D4(result);
    operator delete();
  }
  return result;
}

void sub_10114E34C(char *a1)
{
  BOOL v2;
  BOOL v3;
  NSObject *v4;
  std::string::size_type v5;
  std::__fs::filesystem::path *v6;
  uint64_t v7;
  std::string *p_buf;
  std::__fs::filesystem::path *v9;
  std::error_code __ec;
  std::string buf;
  int v12;
  char *v13;
  __int16 v14;
  std::string *v15;
  std::__fs::filesystem::path v16;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  sub_10114EBA4(&v16.__pn_, a1);
  v2 = std::__fs::filesystem::__remove(&v16, &__ec);
  v3 = v2;
  if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__pn_.__r_.__value_.__l.__data_);
    if (v3)
      return;
  }
  else if (v2)
  {
    return;
  }
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021A2F18);
  v4 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v5 = a1[23] >= 0 ? (std::string::size_type)a1 : *(_QWORD *)a1;
    std::error_code::message(&v16.__pn_, &__ec);
    v6 = (v16.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v16
       : (std::__fs::filesystem::path *)v16.__pn_.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v5;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "ProtobufSerializer,deleteFile could not remove,%{private}s,error,%{public}s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__pn_.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&v16, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v7 = qword_1022A0168;
    if (a1[23] < 0)
      a1 = *(char **)a1;
    std::error_code::message(&buf, &__ec);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v12 = 136380931;
    v13 = a1;
    v14 = 2082;
    v15 = p_buf;
    v9 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl(2, 0, &v16, 1628, &_mh_execute_header, v7, 16, "ProtobufSerializer,deleteFile could not remove,%{private}s,error,%{public}s", &v12, 22, *(_QWORD *)&__ec.__val_, __ec.__cat_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 0, "BOOL (anonymous namespace)::deleteFile(const std::string &)", "%s\n", (const char *)v9);
    if (v9 != &v16)
      free(v9);
  }
}

void sub_10114E5E0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10114E5EC@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  char *v5;

  v4 = *a1;
  if (*a1 > 773)
  {
    if (v4 == 774)
    {
      v5 = ".lzma";
      return sub_1015A2E04(a2, v5);
    }
    if (v4 == 2049)
    {
      v5 = ".lzfse";
      return sub_1015A2E04(a2, v5);
    }
LABEL_9:
    v5 = ".unk";
    return sub_1015A2E04(a2, v5);
  }
  if (v4 == 256)
  {
    v5 = ".lz4";
    return sub_1015A2E04(a2, v5);
  }
  if (v4 != 517)
    goto LABEL_9;
  v5 = ".zlib";
  return sub_1015A2E04(a2, v5);
}

void sub_10114E65C(uint64_t *a1, std::string *this)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  char v10;
  std::string *v11;
  uint64_t *v12;
  char v13;
  std::string *v14;
  unint64_t v15;

  v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a1[1];
  std::string::resize(this, 2 * v4, 32);
  v5 = *((char *)a1 + 23) < 0;
  v6 = *((unsigned __int8 *)a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = a1[1];
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      if (v5)
        v9 = (uint64_t *)*a1;
      else
        v9 = a1;
      v10 = a0123456789abcd_1[(unint64_t)*((unsigned __int8 *)v9 + v8) >> 4];
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = this;
      else
        v11 = (std::string *)this->__r_.__value_.__r.__words[0];
      v11->__r_.__value_.__s.__data_[v7] = v10;
      if (*((char *)a1 + 23) >= 0)
        v12 = a1;
      else
        v12 = (uint64_t *)*a1;
      v13 = a0123456789abcd_1[*((_BYTE *)v12 + v8) & 0xF];
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = this;
      else
        v14 = (std::string *)this->__r_.__value_.__r.__words[0];
      v14->__r_.__value_.__s.__data_[v7 + 1] = v13;
      ++v8;
      v5 = *((char *)a1 + 23) < 0;
      v15 = *((unsigned __int8 *)a1 + 23);
      if ((v15 & 0x80u) != 0)
        v15 = a1[1];
      v7 += 2;
    }
    while (v8 < v15);
  }
}

uint64_t sub_10114E754(uint64_t a1, int a2)
{
  NSObject *v3;
  char *v4;
  _WORD v6[8];
  uint8_t buf[1640];

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  sub_1005176A0((unint64_t *)(a1 + 8), 0x8000uLL);
  if (compression_stream_init((compression_stream *)(a1 + 32), COMPRESSION_STREAM_ENCODE, *(compression_algorithm *)a1))
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ProtobufCompressor,ctor,Could not init stream", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v6[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ProtobufCompressor,ctor,Could not init stream", v6, 2);
      sub_100512490("Generic", 1, 0, 0, "CLProtobufSerializer::StreamingCompressor::StreamingCompressor(compression_algorithm)", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_10114E924(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10114E944(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_100115CE4(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  v7 = __dst + 72;
  if (*((char *)a2 + 95) < 0)
  {
    sub_100115CE4(v7, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)v7 = v8;
  }
  v9 = a2[6];
  *(_OWORD *)(__dst + 106) = *(__int128 *)((char *)a2 + 106);
  *((_OWORD *)__dst + 6) = v9;
  return __dst;
}

void sub_10114EA34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10114EA80(id a1)
{
  qword_1022A0168 = (uint64_t)os_log_create("com.apple.locationd.Position", "PositionProto");
}

Class sub_10114EAAC()
{
  Class result;

  if (qword_10230CDD8 != -1)
    dispatch_once(&qword_10230CDD8, &stru_1021A2F38);
  result = objc_getClass("SAPathManager");
  qword_10230CDD0 = (uint64_t)result;
  off_1022FDA08 = sub_10114EB08;
  return result;
}

uint64_t sub_10114EB08()
{
  return qword_10230CDD0;
}

void sub_10114EB14(id a1)
{
  qword_10230CDE0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SpaceAttribution.framework/SpaceAttribution", 2);
}

Class sub_10114EB3C()
{
  Class result;

  if (qword_10230CDD8 != -1)
    dispatch_once(&qword_10230CDD8, &stru_1021A2F38);
  result = objc_getClass("SAPathInfo");
  qword_10230CDE8 = (uint64_t)result;
  off_1022FDA10 = sub_10114EB98;
  return result;
}

uint64_t sub_10114EB98()
{
  return qword_10230CDE8;
}

std::string *sub_10114EBA4(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  sub_10114EC08(a1, a2, &a2[v3]);
  return a1;
}

void sub_10114EBEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10114EC08(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    sub_1015E6AC4(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_10114ED60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10114ED7C(uint64_t a1, _QWORD *a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  size_t v8;
  int v9;

  v3 = *((char *)a2 + 23);
  v4 = *((char *)a3 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a3 + 23);
  else
    v5 = (size_t)a3[1];
  if (v4 >= 0)
    v6 = a3;
  else
    v6 = *a3;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = a2[1];
  if (v3 < 0)
    a2 = (_QWORD *)*a2;
  if (v7 >= v5)
    v8 = v5;
  else
    v8 = v7;
  v9 = memcmp(v6, a2, v8);
  if (v9)
    return v9 < 0;
  else
    return v5 < v7;
}

void sub_10114EDE4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((_QWORD *)a1 != a2)
  {
    v19 = v3;
    v20 = v4;
    v7 = (_QWORD *)(a1 + 24);
    if ((_QWORD *)(a1 + 24) != a2)
    {
      v9 = 0;
      v10 = (_QWORD *)a1;
      do
      {
        v11 = (const void **)v10;
        v10 = v7;
        if (sub_10114ED7C(a3, v7, v11))
        {
          v17 = *(_OWORD *)v10;
          v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          v12 = v9;
          do
          {
            v13 = a1 + v12;
            v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0)
              operator delete(*v14);
            *(_OWORD *)v14 = *(_OWORD *)v13;
            *(_QWORD *)(a1 + v12 + 40) = *(_QWORD *)(v13 + 16);
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)v13 = 0;
            if (!v12)
            {
              v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (sub_10114ED7C(a3, &v17, (const void **)(v12 + a1)));
          v15 = *(char *)(a1 + v12 + 47);
          v16 = a1 + v12 + 24;
          if (v15 < 0)
            operator delete(*(void **)v16);
LABEL_13:
          *(_OWORD *)v16 = v17;
          *(_QWORD *)(v16 + 16) = v18;
        }
        v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_10114EF04(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  const void **v10;
  _QWORD *v11;
  void **v12;
  BOOL v13;
  int v14;
  void **v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = a1;
    v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v9 = a1 - 3;
      do
      {
        v10 = (const void **)v6;
        v6 = v7;
        if (sub_10114ED7C(a3, v7, v10))
        {
          v16 = *(_OWORD *)v6;
          v17 = (void *)v6[2];
          v6[1] = 0;
          v6[2] = 0;
          *v6 = 0;
          v11 = v9;
          do
          {
            v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0)
              operator delete(*v12);
            *(_OWORD *)v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((_BYTE *)v11 + 47) = 0;
            *((_BYTE *)v11 + 24) = 0;
            v13 = sub_10114ED7C(a3, &v16, (const void **)v11);
            v11 -= 3;
          }
          while (v13);
          v14 = *((char *)v11 + 71);
          v15 = (void **)(v11 + 6);
          if (v14 < 0)
            operator delete(*v15);
          *(_OWORD *)v15 = v16;
          v15[2] = v17;
        }
        v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t sub_10114F008(const void **a1, const void **a2, _QWORD *a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  const void *v10;
  __int128 v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  __int128 v23;
  const void *v24;

  v8 = sub_10114ED7C(a4, a2, a1);
  result = sub_10114ED7C(a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v13 = a2[2];
    v14 = *(_OWORD *)a2;
    v15 = (const void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_10114ED7C(a4, a2, a1))
      return 1;
    v16 = a1[2];
    v17 = *(_OWORD *)a1;
    v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = a1[2];
    v20 = *(_OWORD *)a1;
    v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_10114ED7C(a4, a3, a2))
      return 1;
    v22 = a2[2];
    v23 = *(_OWORD *)a2;
    v24 = (const void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  v10 = a1[2];
  v11 = *(_OWORD *)a1;
  v12 = (const void *)a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **sub_10114F150(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  const void **v6;
  const void **v7;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  const void *v17;
  __int128 v18;
  const void *v19;

  v4 = a2;
  v16 = *(_OWORD *)a1;
  v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (sub_10114ED7C(a3, &v16, (const void **)(a2 - 24)))
  {
    v6 = a1;
    do
      v6 += 3;
    while (!sub_10114ED7C(a3, &v16, v6));
  }
  else
  {
    v7 = a1 + 3;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = sub_10114ED7C(a3, &v16, v7);
      v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (sub_10114ED7C(a3, &v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *(_OWORD *)v6;
    v19 = v6[2];
    v18 = v9;
    v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)v6 = v10;
    v11 = v18;
    *(_QWORD *)(v4 + 16) = v19;
    *(_OWORD *)v4 = v11;
    do
      v6 += 3;
    while (!sub_10114ED7C(a3, &v16, v6));
    do
      v4 -= 24;
    while (sub_10114ED7C(a3, &v16, (const void **)v4));
  }
  v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0)
      operator delete(*v12);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete((void *)*a1);
    v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((_BYTE *)v6 - 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
  }
  v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)v12 = v14;
  return v6;
}

_QWORD *sub_10114F2E0(__int128 *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  do
    v6 += 24;
  while (sub_10114ED7C(a3, (__int128 *)((char *)a1 + v6), (const void **)&v17));
  v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2)
        break;
      a2 -= 3;
    }
    while (!sub_10114ED7C(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!sub_10114ED7C(a3, a2, (const void **)&v17));
  }
  v8 = (_QWORD *)((char *)a1 + v6);
  if (v7 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v19 = *(_OWORD *)v8;
      v10 = v19;
      v20 = v8[2];
      v11 = v20;
      v12 = v9[2];
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8[2] = v12;
      v9[2] = v11;
      *(_OWORD *)v9 = v10;
      do
        v8 += 3;
      while (sub_10114ED7C(a3, v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_10114ED7C(a3, v9, (const void **)&v17));
    }
    while (v8 < v9);
  }
  v13 = (void **)(v8 - 3);
  if (v8 - 3 == (_QWORD *)a1)
  {
    if (*((char *)v8 - 1) < 0)
      operator delete(*v13);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v14 = *(_OWORD *)v13;
    *((_QWORD *)a1 + 2) = *(v8 - 1);
    *a1 = v14;
    *((_BYTE *)v8 - 1) = 0;
    *((_BYTE *)v8 - 24) = 0;
  }
  v15 = v17;
  *(v8 - 1) = v18;
  *(_OWORD *)v13 = v15;
  return v8 - 3;
}

BOOL sub_10114F46C(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  const void **v8;
  const void *v9;
  __int128 v10;
  const void *v11;
  const void **v12;
  const void **v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  const void *v23;

  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 3;
      if (sub_10114ED7C(a3, a2 - 3, (const void **)a1))
      {
        v9 = *(const void **)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = v8[2];
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_QWORD *)(a1 + 16) = v11;
        *(_OWORD *)v8 = v10;
        v8[2] = v9;
      }
      return 1;
    case 3uLL:
      sub_10114F008((const void **)a1, (const void **)(a1 + 24), a2 - 3, a3);
      return 1;
    case 4uLL:
      sub_10114F69C(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a2 - 3, a3);
      return 1;
    case 5uLL:
      sub_10114F784(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (const void **)(a1 + 72), a2 - 3, a3);
      return 1;
    default:
      v12 = (const void **)(a1 + 48);
      sub_10114F008((const void **)a1, (const void **)(a1 + 24), (_QWORD *)(a1 + 48), a3);
      v13 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (sub_10114ED7C(a3, v13, v12))
    {
      v22 = *(_OWORD *)v13;
      v23 = v13[2];
      v13[1] = 0;
      v13[2] = 0;
      *v13 = 0;
      v16 = v14;
      do
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 48);
        *(_QWORD *)(a1 + v16 + 88) = *(_QWORD *)(v17 + 64);
        *(_BYTE *)(v17 + 71) = 0;
        *(_BYTE *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          v21 = a1;
          goto LABEL_15;
        }
        v19 = sub_10114ED7C(a3, &v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      v20 = *(char *)(a1 + v16 + 95);
      v21 = a1 + v16 + 72;
      if (v20 < 0)
        operator delete(*(void **)v21);
LABEL_15:
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(v21 + 16) = v23;
      if (++v15 == 8)
        return v13 + 3 == a2;
    }
    v12 = v13;
    v14 += 24;
    v13 += 3;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_10114F69C(uint64_t a1, const void **a2, const void **a3, _QWORD *a4, uint64_t a5)
{
  __n128 result;
  const void *v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  const void *v16;
  const void *v17;
  const void *v18;

  sub_10114F008((const void **)a1, a2, a3, a5);
  if (sub_10114ED7C(a5, a4, a3))
  {
    v11 = a3[2];
    v12 = *(_OWORD *)a3;
    v13 = (const void *)a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v13;
    *(_OWORD *)a4 = v12;
    a4[2] = v11;
    if (sub_10114ED7C(a5, a3, a2))
    {
      v14 = a2[2];
      v15 = *(_OWORD *)a2;
      v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_10114ED7C(a5, a2, (const void **)a1))
      {
        v17 = *(const void **)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 sub_10114F784(uint64_t a1, const void **a2, const void **a3, const void **a4, _QWORD *a5, uint64_t a6)
{
  __n128 result;
  const void *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  const void *v23;

  sub_10114F69C(a1, a2, a3, a4, a6);
  if (sub_10114ED7C(a6, a5, a4))
  {
    v13 = a4[2];
    v14 = *(_OWORD *)a4;
    v15 = (const void *)a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v15;
    *(_OWORD *)a5 = v14;
    a5[2] = v13;
    if (sub_10114ED7C(a6, a4, a3))
    {
      v16 = a3[2];
      v17 = *(_OWORD *)a3;
      v18 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v18;
      *(_OWORD *)a4 = v17;
      a4[2] = v16;
      if (sub_10114ED7C(a6, a3, a2))
      {
        v19 = a2[2];
        v20 = *(_OWORD *)a2;
        v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_10114ED7C(a6, a2, (const void **)a1))
        {
          v22 = *(const void **)(a1 + 16);
          result = *(__n128 *)a1;
          v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_10114F8A4(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v28[15];

  if ((_QWORD *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_10114FAEC(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (sub_10114ED7C(a4, v14, (const void **)a1))
        {
          v15 = v14[2];
          v16 = *(_OWORD *)v14;
          v17 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v14 = *(_OWORD *)a1;
          v14[2] = v17;
          *(_OWORD *)a1 = v16;
          *(_QWORD *)(a1 + 16) = v15;
          sub_10114FAEC(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = a2 - 3;
      do
      {
        v20 = *(_QWORD *)a1;
        *(_QWORD *)v28 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v28[7] = *(_QWORD *)(a1 + 15);
        v21 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v22 = sub_10114FC80(a1, a4, v18);
        v23 = v22;
        v24 = *(char *)(v22 + 23);
        if (v19 == (_QWORD *)v22)
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          *(_QWORD *)v23 = v20;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)v28;
          *(_QWORD *)(v23 + 15) = *(_QWORD *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          v25 = *(_OWORD *)v19;
          *(_QWORD *)(v23 + 16) = v19[2];
          *(_OWORD *)v23 = v25;
          *v19 = v20;
          v19[1] = *(_QWORD *)v28;
          *(_QWORD *)((char *)v19 + 15) = *(_QWORD *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          sub_10114FD58(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 -= 3;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_10114FAD4(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_10114FAEC(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 24 * v12;
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_10114ED7C(a2, (_QWORD *)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        v12 = v14;
      }
      if (!sub_10114ED7C(a2, (_QWORD *)v13, (const void **)v7))
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0)
            operator delete((void *)v7->n128_u64[0]);
          v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
          *v7 = v17;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)v13 = 0;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = a1 + 24 * v18;
          v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_10114ED7C(a2, (_QWORD *)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            v18 = v19;
          }
          v7 = v16;
          v12 = v18;
          if (sub_10114ED7C(a2, (_QWORD *)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0)
              operator delete((void *)v16->n128_u64[0]);
            break;
          }
        }
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

uint64_t sub_10114FC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_10114ED7C(a2, (_QWORD *)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v12 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double sub_10114FD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  double result;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 >= 2)
  {
    v16 = v4;
    v17 = v5;
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = (__int128 *)(a1 + 24 * v8);
    v10 = (__int128 *)(a2 - 24);
    if (sub_10114ED7C(a3, v9, (const void **)(a2 - 24)))
    {
      v14 = *v10;
      v15 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v12 = v9;
        if (*((char *)v10 + 23) < 0)
          operator delete(*(void **)v10);
        v13 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v13;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 24 * v8);
        v10 = v12;
        if (!sub_10114ED7C(a3, v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0)
            operator delete(*(void **)v12);
          break;
        }
      }
      result = *(double *)&v14;
      *v12 = v14;
      *((_QWORD *)v12 + 2) = v15;
    }
  }
  return result;
}

_QWORD *sub_10114FE54(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  size_t v15;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_100259694();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_100785650(v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v15 = a3 - __src;
    if (v15)
      result = memmove(v9, __src, v15);
    v14 = &v9[v15];
    goto LABEL_20;
  }
  v13 = &__src[v12 - v9];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v12 - v9);
    v9 = (char *)v7[1];
  }
  if (a3 != v13)
    result = memmove(v9, v13, a3 - v13);
  v14 = &v9[a3 - v13];
LABEL_20:
  v7[1] = v14;
  return result;
}

uint64_t sub_10114FF64(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v6;
  void **v7;
  _WORD v8[8];
  void *__p[2];
  char v10;

  sub_1015A2E04(__p, "");
  sub_101150260(a1, "CMStrideCalRecorderDb", a2, (uint64_t)__p, 1, 2.56);
  if (v10 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_1021A2FE8;
  *(_QWORD *)(a1 + 72) = off_1021A30A0;
  sub_100E81598((_QWORD *)(a1 + 424), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 440), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 456), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 472), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 488), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 504), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 520), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 536), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 552), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 568), 0, 0);
  *(_OWORD *)(a1 + 584) = 0u;
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021A3130);
  v4 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CMStrideCalRecorderDb init", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A3130);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FCD8, 2, "CMStrideCalRecorderDb init", v8, 2);
    v7 = (void **)v6;
    sub_100512490("Generic", 1, 0, 2, "CMStrideCalRecorderDb::CMStrideCalRecorderDb(BOOL)", "%s\n", v6);
    if (v7 != __p)
      free(v7);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  *(_QWORD *)(a1 + 160) = -[CMStrideCalRecorderCloudKitDelegate initWithStrideCalRecorderDb:]([CMStrideCalRecorderCloudKitDelegate alloc], "initWithStrideCalRecorderDb:", a1);
  return a1;
}

void sub_101150228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;

  sub_1011506B4(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_101150260(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_1021A3160;
  *(_QWORD *)(a1 + 72) = off_1021A3208;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021A3160;
  *(_QWORD *)(a1 + 72) = off_1021A3208;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 344) = 12000;
  *(_QWORD *)(a1 + 352) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 360));
  *(_QWORD *)(a1 + 360) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_101150608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[44] = off_10213DEB0;
  sub_100427950(v27);
  sub_10081FA88(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_1011506AC()
{
  JUMPOUT(0x10115068CLL);
}

_QWORD *sub_1011506B4(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021A3208;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021A3160;
  a1[44] = off_10213DEB0;
  sub_100427950(a1 + 45);
  sub_10081FA88(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_101150730(_QWORD *a1)
{
  void *v2;
  const void *v3;
  void *v4;

  *a1 = off_1021A2FE8;
  a1[9] = off_1021A30A0;
  v2 = (void *)a1[73];
  if (v2)
  {

    a1[73] = 0;
  }
  v3 = (const void *)a1[74];
  if (v3)
    _Block_release(v3);
  v4 = (void *)a1[20];
  if (v4)
  {

    a1[20] = 0;
  }
  return sub_1011506B4(a1);
}

_QWORD *sub_101150798(uint64_t a1)
{
  return sub_101150730((_QWORD *)(a1 - 72));
}

void sub_1011507A0(_QWORD *a1)
{
  sub_101150730(a1);
  operator delete();
}

void sub_1011507C4(uint64_t a1)
{
  sub_101150730((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_1011507EC()
{
  return -1;
}

uint64_t sub_1011507F4()
{
  return -1;
}

uint64_t sub_1011507FC(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59[3];
  __int16 v60;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v59[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v60 = 256;
  if (sub_10008950C(v6))
  {
    v42 = v5;
    sub_100087AF4((_QWORD *)(a1 + 440), v59);
    while (!sub_101150AD0(v59, (uint64_t)&v44))
    {
      v7 = v44;
      v8 = v45;
      v9 = v46;
      v10 = v47;
      v11 = v48;
      v13 = v49;
      v12 = v50;
      v14 = v51;
      v15 = v52;
      v16 = v53;
      v18 = v54;
      v17 = v55;
      v19 = v56;
      v20 = v57;
      v21 = v58;
      v22 = (char *)a2[1];
      v23 = (char *)a2[2];
      if (v22 >= v23)
      {
        v43 = v45;
        v25 = 0xEEEEEEEEEEEEEEEFLL * ((v22 - (_BYTE *)*a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x222222222222222)
          sub_100259694();
        v27 = 0xEEEEEEEEEEEEEEEFLL * ((v23 - (_BYTE *)*a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x111111111111111)
          v28 = 0x222222222222222;
        else
          v28 = v26;
        if (v28)
          v29 = (char *)sub_100313328((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[120 * v25];
        *(_DWORD *)v30 = v7;
        *((_QWORD *)v30 + 1) = v43;
        *((_DWORD *)v30 + 4) = v9;
        *((_QWORD *)v30 + 3) = v10;
        *((_QWORD *)v30 + 4) = v11;
        *((_QWORD *)v30 + 5) = v13;
        *((_QWORD *)v30 + 6) = v12;
        *((_QWORD *)v30 + 7) = v14;
        *((_DWORD *)v30 + 16) = v15;
        *((_DWORD *)v30 + 17) = v16;
        *((_QWORD *)v30 + 9) = v18;
        *((_QWORD *)v30 + 10) = v17;
        *((_DWORD *)v30 + 22) = v19;
        *((_QWORD *)v30 + 13) = v20;
        *((_DWORD *)v30 + 28) = v21;
        v32 = (char *)*a2;
        v31 = (char *)a2[1];
        v33 = v30;
        if (v31 != *a2)
        {
          do
          {
            v34 = *(_OWORD *)(v31 - 120);
            v35 = *(_OWORD *)(v31 - 104);
            v36 = *(_OWORD *)(v31 - 88);
            *(_OWORD *)(v33 - 72) = *(_OWORD *)(v31 - 72);
            *(_OWORD *)(v33 - 88) = v36;
            *(_OWORD *)(v33 - 104) = v35;
            *(_OWORD *)(v33 - 120) = v34;
            v37 = *(_OWORD *)(v31 - 56);
            v38 = *(_OWORD *)(v31 - 40);
            v39 = *(_OWORD *)(v31 - 24);
            *((_QWORD *)v33 - 1) = *((_QWORD *)v31 - 1);
            *(_OWORD *)(v33 - 24) = v39;
            *(_OWORD *)(v33 - 40) = v38;
            *(_OWORD *)(v33 - 56) = v37;
            v33 -= 120;
            v31 -= 120;
          }
          while (v31 != v32);
          v31 = (char *)*a2;
        }
        v24 = v30 + 120;
        *a2 = v33;
        a2[1] = v30 + 120;
        a2[2] = &v29[120 * v28];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *(_DWORD *)v22 = v44;
        *((_QWORD *)v22 + 1) = v8;
        *((_DWORD *)v22 + 4) = v9;
        *((_QWORD *)v22 + 3) = v10;
        *((_QWORD *)v22 + 4) = v11;
        *((_QWORD *)v22 + 5) = v13;
        *((_QWORD *)v22 + 6) = v12;
        *((_QWORD *)v22 + 7) = v14;
        *((_DWORD *)v22 + 16) = v15;
        *((_DWORD *)v22 + 17) = v16;
        *((_QWORD *)v22 + 9) = v18;
        *((_QWORD *)v22 + 10) = v17;
        *((_DWORD *)v22 + 22) = v19;
        *((_QWORD *)v22 + 13) = v20;
        v24 = v22 + 120;
        *((_DWORD *)v22 + 28) = v21;
      }
      a2[1] = v24;
    }
    v40 = v59[0];
    v59[0] = 0;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    v5 = v42;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_101150A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_10187E514((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_101150AD0(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  sub_101153254(a1, a2);
  return 0;
}

uint64_t sub_101150B2C(uint64_t a1)
{
  uint64_t v1;
  sqlite3_stmt *v3;
  int v4;
  sqlite3_stmt *v5;
  uint64_t v6;
  uint64_t v8;

  if (!sub_10008950C(a1 + 72))
    return 0xFFFFFFFFLL;
  sub_100087AF4((_QWORD *)(a1 + 424), &v8);
  v3 = (sqlite3_stmt *)sub_100026CC8(v8);
  v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    v5 = (sqlite3_stmt *)sub_100026CC8(v8);
    v1 = sqlite3_column_int(v5, 0);
  }
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v4 != 100)
    return 0xFFFFFFFFLL;
  return v1;
}

void sub_101150BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101150BE4(uint64_t a1)
{
  return sub_101150B2C(a1 - 72);
}

void *sub_101150BEC(uint64_t a1, void *a2, const void *a3)
{
  const void *v6;
  void *result;
  uint64_t v8;
  double v9;

  if (a3)
  {

    *(_QWORD *)(a1 + 584) = a2;
    v6 = *(const void **)(a1 + 592);
    if (v6)
      _Block_release(v6);
    result = _Block_copy(a3);
    *(_QWORD *)(a1 + 592) = result;
  }
  else
  {
    v8 = sub_10194144C();
    return (void *)sub_101150C48(v8, v9);
  }
  return result;
}

uint64_t sub_101150C48(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  uint64_t v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  uint64_t v18[3];
  __int16 v19;
  uint8_t buf[1640];

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v18[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v19 = 256;
  if (sub_10008950C(v6))
  {
    sub_100087AF4((_QWORD *)(a1 + 488), v18);
    v7 = (sqlite3_stmt *)sub_100026CC8(v18[0]);
    if (sub_1000890C4(v7, 1, a2))
    {
      v8 = *(_QWORD *)(a1 + 80);
      v9 = (sqlite3_stmt *)sub_100026CC8(v18[0]);
      sub_10023C9B0(v8, v9);
      v10 = *(_QWORD *)(a1 + 80);
      if (*(uint64_t *)(v10 + 88) <= 0)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = *(_QWORD *)(v10 + 88);
      sub_100053048(v10, v11);
      *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    }
    else
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A3130);
      v12 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Failed to delete records", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021A3130);
        v17[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "Failed to delete records", v17, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "void CMStrideCalRecorderDb::deleteRecordsBefore(CFTimeInterval)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
    v13 = v18[0];
    v18[0] = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_101150EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  if (a6)
    (*(void (**)(uint64_t))(*(_QWORD *)a6 + 8))(a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_101150EF4(uint64_t a1, uint64_t *a2, NSArray **a3)
{
  id v6;
  int v7;
  CLSerializableStrideCalEntry *v8;
  NSData *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  NSArray *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[120];
  int v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;

  if (!a3)
    return 0;
  v6 = objc_alloc_init((Class)NSMutableArray);
  v7 = sub_100427DA8(a1, a2, (uint64_t)v18);
  if (!v7)
  {
    do
    {
      v17 = 0;
      v8 = -[CLSerializableStrideCalEntry initWithStrideCalEntry:]([CLSerializableStrideCalEntry alloc], "initWithStrideCalEntry:", v18);
      v9 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v8, 1, &v17);
      if (v17)
      {
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021A3130);
        v10 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v22 = v17;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to serialize stride cal entry: %@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_1021A3130);
          v19 = 138412290;
          v20 = v17;
          LODWORD(v16) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "Unable to serialize stride cal entry: %@", &v19, v16);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 0, "BOOL CMStrideCalRecorderDb::convertToDataBlobWithCode(const CLSqliteScopedStatement &, NSArray<NSData *> **)", "%s\n", v11);
          if (v12 != buf)
            free(v12);
        }
      }
      else
      {
        objc_msgSend(v6, "addObject:", v9);
      }

      v13 = sub_100427DA8(a1, a2, (uint64_t)v18);
    }
    while (!v13);
    v7 = v13;
  }
  v15 = (NSArray *)objc_msgSend(v6, "count");
  if (v15)
    v15 = +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v6);
  *a3 = v15;

  return v7 == 1;
}

BOOL sub_101151190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  v10 = 0;
  v4 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(CLSerializableStrideCalEntry, a2), a2, &v10);
  v5 = v10;
  if (v10)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A3130);
    v6 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to deserialize stride cal entry: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A3130);
      v11 = 138412290;
      v12 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "Unable to deserialize stride cal entry: %@", &v11, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CMStrideCalRecorderDb::dataBlobToEntry(NSData *, CLStrideCalEntry &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    objc_msgSend(v4, "getStrideCalEntry:", a3);
  }
  return v5 == 0;
}

void sub_101151388(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(*(_QWORD *)(a1 + 80)))
  {
    sub_101151638(a1);
    sub_100634364(*(_QWORD *)(a1 + 80), "StrideCalHistory", (const char **)&qword_10230CDF0, (const std::string::value_type **)&qword_10230D0F0, 0);
    *(_QWORD *)(a1 + 424) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM StrideCalHistory");
    *(_QWORD *)(a1 + 432) = v2;
    *(_QWORD *)(a1 + 440) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM StrideCalHistory ORDER BY startTime ASC");
    *(_QWORD *)(a1 + 448) = v3;
    *(_QWORD *)(a1 + 456) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM StrideCalHistory WHERE pacebin == ? ORDER BY startTime DESC");
    *(_QWORD *)(a1 + 464) = v4;
    *(_QWORD *)(a1 + 472) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM StrideCalHistory WHERE speed > ? AND speed <= ? ORDER BY startTime DESC");
    *(_QWORD *)(a1 + 480) = v5;
    *(_QWORD *)(a1 + 488) = sub_10063D314(*(_QWORD *)(a1 + 80), "DELETE FROM StrideCalHistory WHERE startTime < ?");
    *(_QWORD *)(a1 + 496) = v6;
    *(_QWORD *)(a1 + 504) = sub_10063D314(*(_QWORD *)(a1 + 80), "DELETE FROM StrideCalHistory WHERE startTime > ?");
    *(_QWORD *)(a1 + 512) = v7;
    *(_QWORD *)(a1 + 520) = sub_10063D314(*(_QWORD *)(a1 + 80), "DELETE FROM StrideCalHistory");
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 536) = sub_10063D314(*(_QWORD *)(a1 + 80), "INSERT INTO StrideCalHistory (startTime, pacebin, kvalue, kvalueTrack, score, endTime, distance, steps, session, speed, percentGrade, gpsSource, runningFormStrideLength, runningFormStrideLengthMetrics)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(_QWORD *)(a1 + 544) = v9;
    *(_QWORD *)(a1 + 568) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM StrideCalHistory ORDER BY startTime DESC LIMIT 1");
    *(_QWORD *)(a1 + 576) = v10;
    *(_QWORD *)(a1 + 552) = sub_10063D314(*(_QWORD *)(a1 + 80), "UPDATE StrideCalHistory SET startTime = startTime + ?");
    *(_QWORD *)(a1 + 560) = v11;
    *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A3130);
    v12 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A3130);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Device is locked and we are unable to open the database", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual void CMStrideCalRecorderDb::prepareSQLStatements()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

void sub_101151638(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  void *__p;
  const char *v6;
  int v7;
  __int16 v8;
  char v9;
  char v10;
  uint8_t buf[16];

  if (sub_100635B3C(*(_QWORD *)(a1 + 80), "StrideCalHistory"))
  {
    v6 = "endTime";
    v7 = 5;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "StrideCalHistory", (uint64_t)"endTime", (uint64_t)&v6);
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021A3130);
  v2 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "StrideCalHistory table doesn't even exist", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A3130);
    LOWORD(__p) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "StrideCalHistory table doesn't even exist", &__p, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CMStrideCalRecorderDb::alterTableIfNecessary()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_101151C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  uint64_t v70;

  if (a26 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a28);
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  sub_1018B38B4((uint64_t)&a70);
  _Unwind_Resume(a1);
}

uint64_t sub_101151CB4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  sqlite3_stmt *v4;
  uint64_t v5;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 520), &v5);
    v3 = *(_QWORD *)(a1 + 80);
    v4 = (sqlite3_stmt *)sub_100026CC8(v5);
    sub_10023C9B0(v3, v4);
    *(_DWORD *)(a1 + 132) = 0;
    result = v5;
    v5 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_101151D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101151D48(uint64_t a1)
{
  return sub_101151CB4(a1 - 72);
}

uint64_t sub_101151D50(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[1640];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
    sub_100087AF4((_QWORD *)(a1 + 504), &v12);
    v5 = (sqlite3_stmt *)sub_100026CC8(v12);
    if (sub_1000890C4(v5, 1, *(double *)(a2 + 8)))
    {
      v6 = *(_QWORD *)(a1 + 80);
      v7 = (sqlite3_stmt *)sub_100026CC8(v12);
      sub_10023C9B0(v6, v7);
      *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    }
    else
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A3130);
      v8 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to delete records", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021A3130);
        v11 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "Failed to delete records", &v11, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "virtual void CMStrideCalRecorderDb::deleteRecordsAfterInsertUL(const CLStrideCalEntry &)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
    result = v12;
    v12 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_101151F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101151F9C(uint64_t a1, double a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[1640];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 552), &v12);
    v5 = (sqlite3_stmt *)sub_100026CC8(v12);
    if (sub_1000890C4(v5, 1, a2))
    {
      v6 = *(_QWORD *)(a1 + 80);
      v7 = (sqlite3_stmt *)sub_100026CC8(v12);
      sub_10023C9B0(v6, v7);
    }
    else
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A3130);
      v8 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to shift records", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021A3130);
        v11 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "Failed to shift records", &v11, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "virtual void CMStrideCalRecorderDb::shiftRecordsByUL(CFTimeInterval)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
    result = v12;
    v12 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_101152194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011521C4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  sqlite3_stmt *v25;
  sqlite3_stmt *v26;
  sqlite3_stmt *v27;
  sqlite3_stmt *v28;
  sqlite3_stmt *v29;
  sqlite3_stmt *v30;
  sqlite3_stmt *v31;
  sqlite3_stmt *v32;
  sqlite3_stmt *v33;
  sqlite3_stmt *v34;
  sqlite3_stmt *v35;
  sqlite3_stmt *v36;
  uint64_t v37;
  sqlite3_stmt *v38;
  void *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  const char *v54;
  char *v55;
  _QWORD v56[5];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _BYTE v65[12];
  __int16 v66;
  int v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  int v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  int v91;
  _BYTE buf[48];
  _BYTE v93[32];
  _BYTE v94[42];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A3130);
    v5 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_DWORD *)(a2 + 16);
      v8 = *(_QWORD *)(a2 + 24);
      v9 = *(_QWORD *)(a2 + 32);
      v10 = *(_QWORD *)(a2 + 40);
      v11 = *(_QWORD *)(a2 + 48);
      v12 = *(_QWORD *)(a2 + 56);
      v13 = *(_DWORD *)(a2 + 64);
      v14 = *(_DWORD *)(a2 + 68);
      v16 = *(_QWORD *)(a2 + 72);
      v15 = *(_QWORD *)(a2 + 80);
      v17 = *(_DWORD *)(a2 + 88);
      v18 = *(_QWORD *)(a2 + 104);
      v19 = *(_DWORD *)(a2 + 112);
      *(_DWORD *)buf = 134352384;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v8;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v9;
      *(_WORD *)&buf[38] = 2048;
      *(_QWORD *)&buf[40] = v10;
      *(_WORD *)v93 = 2050;
      *(_QWORD *)&v93[2] = v11;
      *(_WORD *)&v93[10] = 2048;
      *(_QWORD *)&v93[12] = v12;
      *(_WORD *)&v93[20] = 1024;
      *(_DWORD *)&v93[22] = v13;
      *(_WORD *)&v93[26] = 1024;
      *(_DWORD *)&v93[28] = v14;
      *(_WORD *)v94 = 2048;
      *(_QWORD *)&v94[2] = v16;
      *(_WORD *)&v94[10] = 2048;
      *(_QWORD *)&v94[12] = v15;
      *(_WORD *)&v94[20] = 1024;
      *(_DWORD *)&v94[22] = v17;
      *(_WORD *)&v94[26] = 2048;
      *(_QWORD *)&v94[28] = v18;
      *(_WORD *)&v94[36] = 1024;
      *(_DWORD *)&v94[38] = v19;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "StrideCalDb (%{public}f,%d,%f,%f,%f,%{public}f,%f,%d,%d,%f,%f,%d,%.2f,%d).", buf, 0x7Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A3130);
      v40 = *(_QWORD *)(a2 + 8);
      v41 = *(_DWORD *)(a2 + 16);
      v42 = *(_QWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 32);
      v44 = *(_QWORD *)(a2 + 40);
      v45 = *(_QWORD *)(a2 + 48);
      v46 = *(_QWORD *)(a2 + 56);
      v47 = *(_DWORD *)(a2 + 64);
      v48 = *(_DWORD *)(a2 + 68);
      v50 = *(_QWORD *)(a2 + 72);
      v49 = *(_QWORD *)(a2 + 80);
      v51 = *(_DWORD *)(a2 + 88);
      v52 = *(_QWORD *)(a2 + 104);
      v53 = *(_DWORD *)(a2 + 112);
      *(_DWORD *)v65 = 134352384;
      *(_QWORD *)&v65[4] = v40;
      v66 = 1024;
      v67 = v41;
      v68 = 2048;
      v69 = v42;
      v70 = 2048;
      v71 = v43;
      v72 = 2048;
      v73 = v44;
      v74 = 2050;
      v75 = v45;
      v76 = 2048;
      v77 = v46;
      v78 = 1024;
      v79 = v47;
      v80 = 1024;
      v81 = v48;
      v82 = 2048;
      v83 = v50;
      v84 = 2048;
      v85 = v49;
      v86 = 1024;
      v87 = v51;
      v88 = 2048;
      v89 = v52;
      v90 = 1024;
      v91 = v53;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "StrideCalDb (%{public}f,%d,%f,%f,%f,%{public}f,%f,%d,%d,%f,%f,%d,%.2f,%d).", v65, 122);
      v55 = (char *)v54;
      sub_100512490("Generic", 1, 0, 2, "virtual void CMStrideCalRecorderDb::insertRecordUL(const CLStrideCalEntry &, BOOL)", "%s\n", v54);
      if (v55 != buf)
        free(v55);
    }
    v20 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)&v93[16] = *(_OWORD *)(a2 + 64);
    *(_OWORD *)v94 = v20;
    *(_OWORD *)&v94[16] = *(_OWORD *)(a2 + 96);
    *(_QWORD *)&v94[32] = *(_QWORD *)(a2 + 112);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_OWORD *)&buf[16] = v21;
    v22 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&buf[32] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)v93 = v22;
    sub_100087AF4((_QWORD *)(a1 + 536), v65);
    v23 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
    if (sub_1000890C4(v23, 1, *(double *)(a2 + 8)))
    {
      v24 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
      if (sub_10023C77C(v24, 2, *(_DWORD *)(a2 + 16)))
      {
        v25 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
        if (sub_1000890C4(v25, 3, *(double *)(a2 + 24)))
        {
          v26 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
          if (sub_1000890C4(v26, 4, *(double *)(a2 + 32)))
          {
            v27 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
            if (sub_1000890C4(v27, 5, *(double *)(a2 + 40)))
            {
              v28 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
              if (sub_1000890C4(v28, 6, *(double *)(a2 + 48)))
              {
                v29 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
                if (sub_1000890C4(v29, 7, *(double *)(a2 + 56)))
                {
                  v30 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
                  if (sub_1000CD75C(v30, 8, *(_DWORD *)(a2 + 64)))
                  {
                    v31 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
                    if (sub_1000CD75C(v31, 9, *(_DWORD *)(a2 + 68)))
                    {
                      v32 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
                      if (sub_1000890C4(v32, 10, *(double *)(a2 + 72)))
                      {
                        v33 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
                        if (sub_1000890C4(v33, 11, *(double *)(a2 + 80)))
                        {
                          v34 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
                          if (sub_1000CD75C(v34, 12, *(_DWORD *)(a2 + 88)))
                          {
                            v35 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
                            if (sub_1000890C4(v35, 13, *(double *)(a2 + 104)))
                            {
                              v36 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
                              if (sub_1000CD75C(v36, 14, *(_DWORD *)(a2 + 112)))
                              {
                                v37 = *(_QWORD *)(a1 + 80);
                                v38 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
                                sub_10023C9B0(v37, v38);
                                ++*(_DWORD *)(a1 + 132);
                                v39 = *(void **)(a1 + 584);
                                if (v39)
                                {
                                  if (*(_QWORD *)(a1 + 592))
                                  {
                                    v56[1] = 3221225472;
                                    v61 = *(_OWORD *)&v93[16];
                                    v62 = *(_OWORD *)v94;
                                    v63 = *(_OWORD *)&v94[16];
                                    v57 = *(_OWORD *)buf;
                                    v58 = *(_OWORD *)&buf[16];
                                    v59 = *(_OWORD *)&buf[32];
                                    v56[0] = _NSConcreteStackBlock;
                                    v56[2] = sub_10115272C;
                                    v56[3] = &unk_1021A04A8;
                                    v56[4] = a1;
                                    v64 = *(_QWORD *)&v94[32];
                                    v60 = *(_OWORD *)v93;
                                    objc_msgSend(v39, "async:", v56);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    result = *(_QWORD *)v65;
    *(_QWORD *)v65 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_101152700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10115272C(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[7];
  uint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 592);
  v2 = *(_OWORD *)(a1 + 120);
  v6[4] = *(_OWORD *)(a1 + 104);
  v6[5] = v2;
  v6[6] = *(_OWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 152);
  v3 = *(_OWORD *)(a1 + 56);
  v4 = *(_OWORD *)(a1 + 88);
  v6[2] = *(_OWORD *)(a1 + 72);
  v6[3] = v4;
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v6);
}

uint64_t sub_101152790()
{
  return 0;
}

uint64_t sub_101152798(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 568), &v19);
  v4 = sub_101150AD0(&v19, (uint64_t)&v8);
  if (!(_DWORD)v4)
  {
    *(_DWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = v10;
    *(_OWORD *)(a2 + 24) = v11;
    *(_OWORD *)(a2 + 40) = v12;
    v5 = v14;
    *(_QWORD *)(a2 + 56) = v13;
    *(_QWORD *)(a2 + 64) = v5;
    *(_OWORD *)(a2 + 72) = v15;
    *(_DWORD *)(a2 + 88) = v16;
    *(_QWORD *)(a2 + 104) = v17;
    *(_DWORD *)(a2 + 112) = v18;
  }
  v6 = v19;
  v19 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v4;
}

void sub_101152860(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  *(_QWORD *)(v1 - 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

NSArray *sub_101152884(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  NSMutableArray *v46;
  char *v47;
  char *v48;
  NSArray *v49;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  void *__p;
  char *v70;
  _QWORD v71[3];
  __int16 v72;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v71[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v72 = 256;
  __p = 0;
  v70 = 0;
  v71[0] = 0;
  if (sub_10008950C(v6))
  {
    sub_100087AF4((_QWORD *)(a1 + 472), &v68);
    -[CMPedometerTableRawSpeedToKValue binIntervalForRawSpeed:](+[CMPedometerTableRawSpeedToKValue sharedInstance](CMPedometerTableRawSpeedToKValue, "sharedInstance"), "binIntervalForRawSpeed:", a2);
    v8 = v7;
    v10 = v9;
    v11 = (sqlite3_stmt *)sub_100026CC8(v68);
    if (sub_1000CD75C(v11, 1, (int)v8))
    {
      v12 = (sqlite3_stmt *)sub_100026CC8(v68);
      if (sub_1000CD75C(v12, 2, (int)v10))
      {
        v51 = v71;
        while (!sub_101150AD0(&v68, (uint64_t)&v53))
        {
          v13 = v53;
          v14 = v54;
          v15 = v55;
          v16 = v56;
          v17 = v57;
          v19 = v58;
          v18 = v59;
          v20 = v60;
          v22 = v61;
          v21 = v62;
          v24 = v63;
          v23 = v64;
          v25 = v65;
          v26 = v66;
          v27 = v67;
          v28 = v70;
          if ((unint64_t)v70 >= v71[0])
          {
            v52 = v54;
            v30 = 0xEEEEEEEEEEEEEEEFLL * ((v70 - (_BYTE *)__p) >> 3);
            v31 = v30 + 1;
            if (v30 + 1 > 0x222222222222222)
              sub_100259694();
            if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v71[0] - (_QWORD)__p) >> 3) > v31)
              v31 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v71[0] - (_QWORD)__p) >> 3);
            if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v71[0] - (_QWORD)__p) >> 3) >= 0x111111111111111)
              v32 = 0x222222222222222;
            else
              v32 = v31;
            if (v32)
              v33 = (char *)sub_100313328((uint64_t)v71, v32);
            else
              v33 = 0;
            v34 = &v33[120 * v30];
            *(_DWORD *)v34 = v13;
            *((_QWORD *)v34 + 1) = v52;
            *((_DWORD *)v34 + 4) = v15;
            *((_QWORD *)v34 + 3) = v16;
            *((_QWORD *)v34 + 4) = v17;
            *((_QWORD *)v34 + 5) = v19;
            *((_QWORD *)v34 + 6) = v18;
            *((_QWORD *)v34 + 7) = v20;
            *((_DWORD *)v34 + 16) = v22;
            *((_DWORD *)v34 + 17) = v21;
            *((_QWORD *)v34 + 9) = v24;
            *((_QWORD *)v34 + 10) = v23;
            *((_DWORD *)v34 + 22) = v25;
            *((_QWORD *)v34 + 13) = v26;
            *((_DWORD *)v34 + 28) = v27;
            v36 = (char *)__p;
            v35 = v70;
            v37 = v34;
            if (v70 != __p)
            {
              do
              {
                v38 = *(_OWORD *)(v35 - 120);
                v39 = *(_OWORD *)(v35 - 104);
                v40 = *(_OWORD *)(v35 - 88);
                *(_OWORD *)(v37 - 72) = *(_OWORD *)(v35 - 72);
                *(_OWORD *)(v37 - 88) = v40;
                *(_OWORD *)(v37 - 104) = v39;
                *(_OWORD *)(v37 - 120) = v38;
                v41 = *(_OWORD *)(v35 - 56);
                v42 = *(_OWORD *)(v35 - 40);
                v43 = *(_OWORD *)(v35 - 24);
                *((_QWORD *)v37 - 1) = *((_QWORD *)v35 - 1);
                *(_OWORD *)(v37 - 24) = v43;
                *(_OWORD *)(v37 - 40) = v42;
                *(_OWORD *)(v37 - 56) = v41;
                v37 -= 120;
                v35 -= 120;
              }
              while (v35 != v36);
              v35 = v36;
            }
            v29 = v34 + 120;
            __p = v37;
            v70 = v34 + 120;
            v71[0] = &v33[120 * v32];
            if (v35)
              operator delete(v35);
          }
          else
          {
            *(_DWORD *)v70 = v53;
            *((_QWORD *)v28 + 1) = v14;
            *((_DWORD *)v28 + 4) = v15;
            *((_QWORD *)v28 + 3) = v16;
            *((_QWORD *)v28 + 4) = v17;
            *((_QWORD *)v28 + 5) = v19;
            *((_QWORD *)v28 + 6) = v18;
            *((_QWORD *)v28 + 7) = v20;
            *((_DWORD *)v28 + 16) = v22;
            *((_DWORD *)v28 + 17) = v21;
            *((_QWORD *)v28 + 9) = v24;
            *((_QWORD *)v28 + 10) = v23;
            *((_DWORD *)v28 + 22) = v25;
            *((_QWORD *)v28 + 13) = v26;
            v29 = v28 + 120;
            *((_DWORD *)v28 + 28) = v27;
          }
          v70 = v29;
        }
      }
    }
    v45 = v68;
    v68 = 0;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    v44 = 0xEEEEEEEEEEEEEEEFLL * ((v70 - (_BYTE *)__p) >> 3);
  }
  else
  {
    v44 = 0;
  }
  v46 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v44, v51);
  v47 = (char *)__p;
  v48 = v70;
  if (__p != v70)
  {
    do
    {
      -[NSMutableArray addObject:](v46, "addObject:", +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v47, 120));
      v47 += 120;
    }
    while (v47 != v48);
  }
  v49 = +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v46);
  if (__p)
  {
    v70 = (char *)__p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return v49;
}

void sub_101152BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  if (__p)
    operator delete(__p);
  sub_10187E514((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_101152C54(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  uint64_t v6;
  uint8_t buf[8];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM StrideCalHistory WHERE (runningFormStrideLength > 0 AND session = ?);");
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021A3130);
  v2 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[CMStrideCalRecorderDb] queryStrideLengthTracks: database inaccessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A3130);
    LOWORD(v6) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "[CMStrideCalRecorderDb] queryStrideLengthTracks: database inaccessible", &v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "BOOL CMStrideCalRecorderDb::queryStrideLengthTracks(std::vector<CLStrideCalEntry> &) const", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

void sub_101153178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1011531B4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "StrideCalHistory");
}

_QWORD *sub_1011531C4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "StrideCalHistory");
}

double sub_1011531D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  double v15;
  int v16;

  sub_101153254(a2, (uint64_t)&v6);
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 24) = v9;
  *(_OWORD *)(a3 + 40) = v10;
  v4 = v12;
  *(_QWORD *)(a3 + 56) = v11;
  *(_QWORD *)(a3 + 64) = v4;
  *(_OWORD *)(a3 + 72) = v13;
  *(_DWORD *)(a3 + 88) = v14;
  result = v15;
  *(double *)(a3 + 104) = v15;
  *(_DWORD *)(a3 + 112) = v16;
  return result;
}

uint64_t sub_101153254(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v4, 0);
  v5 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 16) = sqlite3_column_int(v6, 2);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 3);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 4);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 5);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v10, 6);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v11, 7);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 64) = sqlite3_column_int(v12, 8);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 68) = sqlite3_column_int(v13, 9);
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v14, 10);
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v15, 11);
  v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 88) = sqlite3_column_int(v16, 12);
  v17 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v17, 13);
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  result = sqlite3_column_int(v18, 14);
  *(_DWORD *)(a2 + 104) = result;
  return result;
}

uint64_t sub_1011533A0(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_1019415D4(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_101153740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_1011537A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021A3248);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A3248);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A3248);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLStrideCalEntry>::setDatabaseAccessible() [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_101153D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_101153DC0(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  double v36;
  char v37[8];
  double v38;
  id v39[2];
  int v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  uint8_t buf[4];
  double v45;
  __int16 v46;
  uint64_t v47;

  v39[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v39[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v39);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a1 + 104))(a1, v37);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A3248);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A3248);
        LOWORD(v40) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v40, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLStrideCalEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 1);
    v8 = v38;
    v9 = v7 - v38;
    if (v7 - v38 < 0.0)
      v9 = -(v7 - v38);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A3248);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        v45 = v38;
        v46 = 2050;
        v47 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A3248);
        v28 = *((_QWORD *)a2 + 1);
        v40 = 134349312;
        v41 = v38;
        v42 = 2050;
        v43 = v28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v40, 22);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLStrideCalEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 1);
      v8 = v38;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A3248);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          v45 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021A3248);
          v31 = *((double *)a2 + 1);
          v40 = 134217984;
          v41 = v31;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v40));
          v33 = (uint8_t *)v32;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLStrideCalEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v32);
          if (v33 != buf)
            free(v33);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v36 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021A3248);
        v18 = v36;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v45 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A3248);
        v40 = 134217984;
        v41 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v40));
        v35 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLStrideCalEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, char *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, v37, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[1];
  v23 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
  v24 = a2[4];
  v25 = a2[5];
  v26 = a2[6];
  *(_QWORD *)(a1 + 336) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 304) = v25;
  *(_OWORD *)(a1 + 320) = v26;
  *(_OWORD *)(a1 + 288) = v24;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v39);
}

void sub_101154528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  sub_100131740(&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_101154554(uint64_t a1)
{
  return sub_1011537A8(a1 - 72);
}

void sub_10115455C(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_101154588(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_101941740(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1011548E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  sub_1018B38B4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_10115494C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_1019418AC(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_101154BAC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101941A18(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_101154DE4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101941B84(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_10115500C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101155038()
{
  qword_10230CDF0 = (uint64_t)"id";
  dword_10230CDF8 = 1;
  word_10230CDFC = 1;
  byte_10230CE00 = 0;
  byte_10230CE18 = 0;
  qword_10230CE20 = (uint64_t)"startTime";
  dword_10230CE28 = 2;
  word_10230CE2C = 0;
  byte_10230CE30 = 0;
  byte_10230CE48 = 0;
  qword_10230CE50 = (uint64_t)"pacebin";
  dword_10230CE58 = 1;
  word_10230CE5C = 0;
  byte_10230CE60 = 0;
  byte_10230CE78 = 0;
  qword_10230CE80 = (uint64_t)"kvalue";
  dword_10230CE88 = 2;
  word_10230CE8C = 0;
  byte_10230CE90 = 0;
  byte_10230CEA8 = 0;
  qword_10230CEB0 = (uint64_t)"kvalueTrack";
  dword_10230CEB8 = 2;
  word_10230CEBC = 0;
  byte_10230CEC0 = 0;
  byte_10230CED8 = 0;
  qword_10230CEE0 = (uint64_t)"score";
  dword_10230CEE8 = 2;
  word_10230CEEC = 0;
  byte_10230CEF0 = 0;
  byte_10230CF08 = 0;
  qword_10230CF10 = (uint64_t)"endTime";
  dword_10230CF18 = 2;
  word_10230CF1C = 0;
  byte_10230CF20 = 0;
  byte_10230CF38 = 0;
  qword_10230CF40 = (uint64_t)"distance";
  dword_10230CF48 = 2;
  word_10230CF4C = 0;
  byte_10230CF50 = 0;
  byte_10230CF68 = 0;
  qword_10230CF70 = (uint64_t)"steps";
  dword_10230CF78 = 1;
  word_10230CF7C = 0;
  byte_10230CF80 = 0;
  byte_10230CF98 = 0;
  qword_10230CFA0 = (uint64_t)"session";
  dword_10230CFA8 = 1;
  word_10230CFAC = 0;
  byte_10230CFB0 = 0;
  byte_10230CFC8 = 0;
  qword_10230CFD0 = (uint64_t)"speed";
  dword_10230CFD8 = 2;
  word_10230CFDC = 0;
  byte_10230CFE0 = 0;
  byte_10230CFF8 = 0;
  qword_10230D000 = (uint64_t)"percentGrade";
  dword_10230D008 = 2;
  word_10230D00C = 0;
  byte_10230D010 = 0;
  byte_10230D028 = 0;
  qword_10230D030 = (uint64_t)"gpsSource";
  dword_10230D038 = 1;
  word_10230D03C = 0;
  byte_10230D040 = 0;
  byte_10230D058 = 0;
  qword_10230D060 = (uint64_t)"runningFormStrideLength";
  dword_10230D068 = 2;
  word_10230D06C = 0;
  byte_10230D070 = 0;
  byte_10230D088 = 0;
  qword_10230D090 = (uint64_t)"runningFormStrideLengthMetrics";
  dword_10230D098 = 1;
  word_10230D09C = 0;
  byte_10230D0A0 = 0;
  byte_10230D0B8 = 0;
  qword_10230D0C0 = 0;
  dword_10230D0C8 = 5;
  word_10230D0CC = 0;
  byte_10230D0D0 = 0;
  byte_10230D0E8 = 0;
  qword_10230D0F0 = (uint64_t)"startTime";
  *(_QWORD *)algn_10230D0F8 = 0;
}

uint64_t sub_1011554A8(void *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  TRANSITPbLocationFingerprintV1 *v12;
  uint64_t result;
  _QWORD v14[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LODWORD(v6) = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v6) = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 & 0x7FFF8) == 8)
    {
      v12 = objc_alloc_init(TRANSITPbLocationFingerprintV1);
      objc_msgSend(a1, "addLocationFingerprint:", v12);

      v14[0] = 0;
      v14[1] = 0;
      if (!PBReaderPlaceMark(a2, v14) || (sub_100F6C33C((uint64_t)v12, a2) & 1) == 0)
        return 0;
      PBReaderRecallMark(a2, v14);
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_101155B24(id a1)
{
  qword_10230D118 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLMotionStateObserverSilo"));
}

uint64_t sub_101155BD8(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101155D4C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230D128 != -1)
    dispatch_once(&qword_10230D128, block);
  return qword_102311CC0;
}

uint64_t sub_101155D4C()
{
  uint64_t result;

  sub_100197040();
  if (sub_100195F08())
    operator new();
  sub_100197040();
  result = sub_1000C4240();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_101155DD4()
{
  operator delete();
}

void sub_101155E0C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = sub_1011560D4(a1, "CLMotionStateObserver", a2);
  *(_QWORD *)v3 = off_1021A3298;
  *(_QWORD *)(v3 + 109) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(v3 + 117) = 0;
  *(_QWORD *)(v3 + 133) = 0;
  *(_QWORD *)(v3 + 125) = 0;
  *(_DWORD *)(v3 + 141) = 0;
  v4 = objc_msgSend(*(id *)(v3 + 40), "newTimer");
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v4;
  *(_WORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 162) = 0x10000000000000;
  *(_QWORD *)(a1 + 170) = 0;
  *(_DWORD *)(a1 + 178) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v5 = sub_100127B9C();
  sub_100081C10(v5, &v9);
  sub_1001E4874(v9, "LogMotionStateReplay", (BOOL *)(a1 + 161));
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  sub_1001B6924();
}

void sub_101156040(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v1 + 200) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(v1 + 192) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v2;
  *v2 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_1011567A8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011560D4(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021A3480;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_101156154(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_101156170(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id *v18;

  CLProfilingIdentify("CLMotionStateObserver::onCompanionNotification");
  objc_msgSend(objc_msgSend(a4[4], "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A3410);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateObserver::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A3410);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateObserver::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  (*((void (**)(id *, uint64_t, uint64_t))*a4 + 27))(a4, a2, a3);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_101156330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101156350(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id *v18;

  CLProfilingIdentify("CLMotionStateObserver::onFitnessTrackingNotification");
  objc_msgSend(objc_msgSend(a4[4], "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A3410);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateObserver::onFitnessTrackingNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A3410);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateObserver::onFitnessTrackingNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  (*((void (**)(id *, uint64_t, uint64_t))*a4 + 28))(a4, a2, a3);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_101156510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101156530(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  id v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  id v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  id v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  result = sub_1001FBB04(0);
  if (result)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A3430);
    v3 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v4 = +[CMWorkout CMWorkoutTypeFromCLMotionActivityType:](CMWorkout, "CMWorkoutTypeFromCLMotionActivityType:", *(unsigned int *)(a1 + 117));
      v5 = *(_QWORD *)(a1 + 162);
      v6 = *(_DWORD *)(a1 + 170);
      v7 = *(_DWORD *)(a1 + 174);
      *(_DWORD *)buf = 134218752;
      v28 = v4;
      v29 = 2048;
      v30 = v5;
      v31 = 1024;
      v32 = v6;
      v33 = 1024;
      v34 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MotionStateObserver, Sending Down ActivityOverride,%ld,startTime,%.3f,activityType,%d,vehicularConfidence,%d", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A3430);
      v11 = qword_10229FC78;
      v12 = +[CMWorkout CMWorkoutTypeFromCLMotionActivityType:](CMWorkout, "CMWorkoutTypeFromCLMotionActivityType:", *(unsigned int *)(a1 + 117));
      v13 = *(_QWORD *)(a1 + 162);
      v14 = *(_DWORD *)(a1 + 170);
      v15 = *(_DWORD *)(a1 + 174);
      v19 = 134218752;
      v20 = v12;
      v21 = 2048;
      v22 = v13;
      v23 = 1024;
      v24 = v14;
      v25 = 1024;
      v26 = v15;
      LODWORD(v18) = 34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "MotionStateObserver, Sending Down ActivityOverride,%ld,startTime,%.3f,activityType,%d,vehicularConfidence,%d", &v19, v18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateObserver::updateCoprocessor()", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    v8 = sub_1001FBB04(0);
    v9 = sub_1009289E0((unint64_t)+[CMWorkout CMWorkoutTypeFromCLMotionActivityType:](CMWorkout, "CMWorkoutTypeFromCLMotionActivityType:", *(unsigned int *)(a1 + 117)));
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v8 + 56) + 24))(v8 + 56, v9, *(unsigned int *)(a1 + 125));
    v10 = sub_1001FBB04(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 + 56) + 48))(v10 + 56, a1 + 162);
  }
  return result;
}

uint64_t sub_1011567A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A3480;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10115681C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1021A3298;
  objc_msgSend(*(id *)(a1 + 152), "invalidate");

  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 108) = 1;
  v2 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return sub_1011567A8(a1);
}

void sub_1011568B8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 152), "invalidate");

  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 108) = 1;
}

uint64_t sub_1011568F0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v3 = *a2;
  v4 = a2[1];
  *(_DWORD *)(a1 + 141) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(a1 + 125) = v4;
  *(_OWORD *)(a1 + 109) = v3;
  uuid_copy((unsigned __int8 *)(a1 + 129), (const unsigned __int8 *)a2 + 20);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021A3430);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a1 + 109);
    v7 = CLMotionActivity::activityTypeToString(*(unsigned int *)(a1 + 117));
    v8 = CLMotionActivity::activityTypeToString(*(unsigned int *)(a1 + 121));
    v9 = *(_DWORD *)(a1 + 125);
    *(_DWORD *)buf = 134218754;
    v27 = v6;
    v28 = 2080;
    v29 = v7;
    v30 = 2080;
    v31 = v8;
    v32 = 1024;
    v33 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Started session, startTime, %.3f, user type, %s, predicted type, %s, hk activity type, %i", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A3430);
    v11 = qword_10229FC78;
    v12 = *(_QWORD *)(a1 + 109);
    v13 = CLMotionActivity::activityTypeToString(*(unsigned int *)(a1 + 117));
    v14 = CLMotionActivity::activityTypeToString(*(unsigned int *)(a1 + 121));
    v15 = *(_DWORD *)(a1 + 125);
    v18 = 134218754;
    v19 = v12;
    v20 = 2080;
    v21 = v13;
    v22 = 2080;
    v23 = v14;
    v24 = 1024;
    v25 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "MotionStateObserver, Started session, startTime, %.3f, user type, %s, predicted type, %s, hk activity type, %i", COERCE_DOUBLE(&v18), 38);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateObserver::startSession(const CLWorkoutUpdate &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  sub_101156B4C(a1);
  return sub_101156BF0(a1);
}

uint64_t sub_101156B4C(uint64_t a1)
{
  __int128 v2;
  int v4;
  __int128 v5;
  __int128 v6;
  int v7;

  v2 = *(_OWORD *)(a1 + 125);
  v5 = *(_OWORD *)(a1 + 109);
  v6 = v2;
  v7 = *(_DWORD *)(a1 + 141);
  uuid_copy((unsigned __int8 *)&v6 + 4, (const unsigned __int8 *)(a1 + 129));
  v4 = 0;
  (*(void (**)(uint64_t, int *, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v4, &v5, 1, 0xFFFFFFFFLL, 0);
  return sub_101156530(a1);
}

uint64_t sub_101156BF0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD v7[355];
  uint64_t v8;
  char v9;
  uint64_t (**v10)();
  CFAbsoluteTime Current;
  uint64_t v12;
  int v13;

  if (*(_BYTE *)(result + 161))
  {
    v1 = result;
    v10 = off_1021719E8;
    v13 = *(_DWORD *)(result + 117);
    v12 = *(_QWORD *)(result + 109);
    Current = CFAbsoluteTimeGetCurrent();
    v2 = sub_1011B78D4();
    sub_1011B8DB0(v2, (uint64_t)&v10);
    sub_1015EB864(v7);
    sub_1016050F0((uint64_t)v7);
    v9 |= 1u;
    *(CFAbsoluteTime *)&v7[77] = Current;
    v3 = v8;
    v4 = *(_QWORD *)(v1 + 109);
    *(_BYTE *)(v8 + 20) |= 1u;
    *(_QWORD *)(v3 + 8) = v4;
    v5 = v8;
    v6 = *(_DWORD *)(v1 + 117);
    *(_BYTE *)(v8 + 20) |= 2u;
    *(_DWORD *)(v5 + 16) = v6;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021A3450);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v7);
    return sub_1015EE304((PB::Base *)v7);
  }
  return result;
}

void sub_101156CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101156D08(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021A3430);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 109);
    v4 = CLMotionActivity::activityTypeToString(*(unsigned int *)(a1 + 117));
    v5 = CLMotionActivity::activityTypeToString(*(unsigned int *)(a1 + 121));
    v6 = *(_DWORD *)(a1 + 125);
    *(_DWORD *)buf = 134218754;
    v24 = v3;
    v25 = 2080;
    v26 = v4;
    v27 = 2080;
    v28 = v5;
    v29 = 1024;
    v30 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Stopped session, startTime, %.3f, user type, %s, predicted type, %s, hk activity type, %i", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A3430);
    v8 = qword_10229FC78;
    v9 = *(_QWORD *)(a1 + 109);
    v10 = CLMotionActivity::activityTypeToString(*(unsigned int *)(a1 + 117));
    v11 = CLMotionActivity::activityTypeToString(*(unsigned int *)(a1 + 121));
    v12 = *(_DWORD *)(a1 + 125);
    v15 = 134218754;
    v16 = v9;
    v17 = 2080;
    v18 = v10;
    v19 = 2080;
    v20 = v11;
    v21 = 1024;
    v22 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "MotionStateObserver, Stopped session, startTime, %.3f, user type, %s, predicted type, %s, hk activity type, %i", COERCE_DOUBLE(&v15), 38);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateObserver::stopSession()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  *(_QWORD *)(a1 + 109) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 117) = 0;
  *(_QWORD *)(a1 + 133) = 0;
  *(_QWORD *)(a1 + 125) = 0;
  *(_DWORD *)(a1 + 141) = 0;
  sub_101156B4C(a1);
  return sub_101156BF0(a1);
}

uint64_t sub_101156F5C(uint64_t a1, __int128 *a2)
{
  __int128 v2;

  v2 = *a2;
  *(_DWORD *)(a1 + 178) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 162) = v2;
  return sub_101156530(a1);
}

_QWORD *sub_101156F70@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_101156FE8()
{
  return 1;
}

uint64_t sub_101156FF0()
{
  return 1;
}

uint64_t sub_101156FF8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_1021A3560;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1011570CC()
{
  operator new();
}

void sub_101157178(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

id sub_1011571B8(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100548B70(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_101157204(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101157230(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101157260()
{
  sub_1015A2E04(qword_10230D100, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230D100, (void *)&_mh_execute_header);
}

uint64_t sub_1011572A4(double *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  void *__p;
  char v5;

  sub_100FDAB9C((uint64_t)v3, *a1, a1[1]);
  v1 = *(_QWORD *)&v3[4];
  if (v5 < 0)
    operator delete(__p);
  return v1;
}

uint64_t *sub_1011572E8(uint64_t *a1)
{
  sub_101157324(a1, 0);
  sub_10055D4D0(a1 + 1);
  sub_101157324(a1, 0);
  return a1;
}

uint64_t sub_101157324(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1007A70BC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_101157364(uint64_t *a1)
{
  return sub_1007A741C(*a1);
}

uint64_t sub_10115736C(uint64_t *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  std::runtime_error *exception;
  uint64_t v18;
  void *__p;
  unsigned int *v20;
  _DWORD v21[2];
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;

  sub_1000CE1B8(*a1, &__p);
  v2 = (unsigned int *)__p;
  v3 = v20;
  if (__p == v20)
  {
    v4 = 0;
    if (!__p)
      return v4;
    goto LABEL_16;
  }
  LODWORD(v4) = 0;
  do
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A3578);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_100217A98(v2);
      v7 = sub_100C3C618((uint64_t)v2);
      *(_DWORD *)buf = 67174913;
      v25 = v6;
      v26 = 1025;
      v27 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "remaining header in db, deleting, x, %{private}d, y, %{private}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A3578);
      v11 = qword_1022A0058;
      v12 = sub_100217A98(v2);
      v13 = sub_100C3C618((uint64_t)v2);
      v21[0] = 67174913;
      v21[1] = v12;
      v22 = 1025;
      v23 = v13;
      LODWORD(v18) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "remaining header in db, deleting, x, %{private}d, y, %{private}d", v21, v18);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "int CLWifiTileDataRepository::removeAllTileHeaders()", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v8 = *a1;
    v9 = sub_100217A98(v2);
    v10 = sub_100C3C618((uint64_t)v2);
    *(_DWORD *)buf = v9;
    v25 = v10;
    if ((sub_1007A7C88(v8) & 1) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Failed to delete tile header");
    }
    v4 = (v4 + 1);
    v2 += 36;
  }
  while (v2 != v3);
  v2 = (unsigned int *)__p;
  if (__p)
  {
LABEL_16:
    v20 = v2;
    operator delete(v2);
  }
  return v4;
}

void sub_101157624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10115766C(uint64_t *a1)
{
  sub_1007A9F08(*a1);
}

uint64_t sub_101157674(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::runtime_error *exception;
  _BYTE v7[1640];

  v4 = a1 + 1;
  (*(void (**)(uint64_t *))(a1[1] + 16))(a1 + 1);
  sub_1000C7980(*a1, (uint64_t)v7);
  if ((sub_101157BC8(a1, a2) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to delete tile.");
  }
  sub_1000C7B24(v7);
  (*(void (**)(uint64_t *))(*v4 + 24))(v4);
  return 1;
}

#error "101157B50: call analysis failed (funcsize=237)"

uint64_t sub_101157BC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  v7 = *(_QWORD *)(a2 + 4);
  v2 = sub_1007A7C88(*a1);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A3578);
  v3 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67175425;
    v16 = v7;
    v17 = 1025;
    v18 = HIDWORD(v7);
    v19 = 1024;
    v20 = v2;
    v21 = 1024;
    v22 = 1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "deleting tile, x, %{private}d, y, %{private}d, header, %d, tile, %d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A3578);
    v8[0] = 67175425;
    v8[1] = v7;
    v9 = 1025;
    v10 = HIDWORD(v7);
    v11 = 1024;
    v12 = v2;
    v13 = 1024;
    v14 = 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "deleting tile, x, %{private}d, y, %{private}d, header, %d, tile, %d", v8, 26);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTileDataRepository::_deleteByTileIdNoTransaction(const TileId &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return v2;
}

void sub_101157DD8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_101157DE4(double a1)
{
  double v1;

  v1 = a1;
  sub_10100330C();
}

void sub_1011580EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_1000C7B24(&a30);
  sub_101004200(&a35, 0);
  _Unwind_Resume(a1);
}

void sub_10115819C(uint64_t *a1)
{
  sub_1007A9EDC(*a1);
}

void sub_1011581B8(uint64_t *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  sub_1007A9EF8(*a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1011581C0(uint64_t *a1)
{
  return sub_1007A74A4(*a1);
}

void sub_1011581C8(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_1007A827C(*a1, a2);
}

uint64_t sub_1011581D0(uint64_t *a1)
{
  return sub_1007A8B18(*a1);
}

uint64_t sub_1011581D8(uint64_t *a1, int a2)
{
  return sub_1007A8F88(*a1, a2);
}

uint64_t sub_1011581E0(uint64_t *a1, int a2)
{
  return sub_1007A9988(*a1, a2);
}

void sub_1011581E8(uint64_t *a1)
{
  sub_1007A9F00(*a1);
}

void sub_1011581F0(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_101158220()
{
  operator delete();
}

__n128 sub_101158234(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_1021A35A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_101158274(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021A35A8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10115829C(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int *v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  NSObject *v23;
  void **v24;
  uint64_t v25;
  _BYTE *v26;
  void **v27;
  void **v28;
  NSObject *v29;
  const char *v30;
  NSObject *v31;
  const char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unsigned int v40[6];
  void *v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[32];
  uint64_t v51[2];
  _BYTE buf[12];
  char v53;
  int v54;
  _BYTE *v55;
  void *__p[2];
  char v57;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 144))
    sub_101941E78();
  v6 = *(uint64_t **)(a1 + 8);
  v7 = *a4;
  v8 = *a3;
  v9 = **(_QWORD **)(a1 + 24);
  v10 = *(unsigned int *)(a2 + 192);
  v12 = (int *)(a2 + 20);
  v11 = *(_DWORD *)(a2 + 20);
  v14 = (int *)(a2 + 16);
  v13 = *(_DWORD *)(a2 + 16);
  v15 = sub_1003471B4(**(_QWORD **)(a1 + 32));
  sub_100C3C6E0(v51, v11, v13, v7, v15);
  sub_100C3C5D8((uint64_t)&v43, *v12, *v14, v10, *(_DWORD *)(a2 + 12), *(_QWORD *)(a2 + 196), v8, *(_DWORD *)(a2 + 24), *(float *)(a2 + 28), *(float *)(a2 + 32), *(float *)(a2 + 36), *(float *)(a2 + 40), *(float *)(a2 + 44), *(float *)(a2 + 48), *(float *)(a2 + 52), *(double *)&v9, v9, 0, v51[0],
    v51[1]);
  sub_1000C18E4((double *)&v43, (uint64_t)v40);
  if (sub_1001C8DA8(v40))
  {
    if ((sub_101157BC8(v6, (uint64_t)v40) & 1) != 0)
    {
      if ((sub_1007A74B8(*v6) & 1) != 0)
      {
        v16 = *(_QWORD *)(a1 + 16);
        if (*(_BYTE *)(v16 + 144))
        {
          *(_OWORD *)v16 = v43;
          v17 = v44;
          v18 = v45;
          v19 = v47;
          *(_OWORD *)(v16 + 48) = v46;
          *(_OWORD *)(v16 + 64) = v19;
          *(_OWORD *)(v16 + 16) = v17;
          *(_OWORD *)(v16 + 32) = v18;
          v20 = v48;
          v21 = v49;
          v22 = *(_OWORD *)v50;
          *(_OWORD *)(v16 + 124) = *(_OWORD *)&v50[12];
          *(_OWORD *)(v16 + 96) = v21;
          *(_OWORD *)(v16 + 112) = v22;
          *(_OWORD *)(v16 + 80) = v20;
        }
        else
        {
          *(_OWORD *)v16 = v43;
          v33 = v44;
          v34 = v45;
          v35 = v47;
          *(_OWORD *)(v16 + 48) = v46;
          *(_OWORD *)(v16 + 64) = v35;
          *(_OWORD *)(v16 + 16) = v33;
          *(_OWORD *)(v16 + 32) = v34;
          v36 = v48;
          v37 = v49;
          v38 = *(_OWORD *)&v50[16];
          *(_OWORD *)(v16 + 112) = *(_OWORD *)v50;
          *(_OWORD *)(v16 + 128) = v38;
          *(_OWORD *)(v16 + 80) = v36;
          *(_OWORD *)(v16 + 96) = v37;
          *(_BYTE *)(v16 + 144) = 1;
        }
        goto LABEL_44;
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A3578);
      v31 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "failed to save tile header", (uint8_t *)__p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A3578);
        *(_WORD *)buf = 0;
        LODWORD(v39) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0058, 16, "failed to save tile header", buf, v39);
        v28 = (void **)v32;
        sub_100512490("Generic", 1, 0, 0, "auto CLWifiTileDataRepository::saveWifiTileAccessPointEntries(const std::string &, cl::chrono::CFAbsoluteTimeClock::time_point)::(anonymous class)::operator()(const CLTilesManager_Type::TileHeader &, int, uint32_t, uint32_t) const", "%s\n", v32);
        goto LABEL_41;
      }
    }
    else
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A3578);
      v29 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "failed to delete previous tile before inserting new one", (uint8_t *)__p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A3578);
        *(_WORD *)buf = 0;
        LODWORD(v39) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0058, 16, "failed to delete previous tile before inserting new one", buf, v39);
        v28 = (void **)v30;
        sub_100512490("Generic", 1, 0, 0, "auto CLWifiTileDataRepository::saveWifiTileAccessPointEntries(const std::string &, cl::chrono::CFAbsoluteTimeClock::time_point)::(anonymous class)::operator()(const CLTilesManager_Type::TileHeader &, int, uint32_t, uint32_t) const", "%s\n", v30);
LABEL_41:
        if (v28 == __p)
          goto LABEL_44;
        goto LABEL_42;
      }
    }
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A3578);
    v23 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
    {
      sub_100BCC240(v40, __p);
      v24 = v57 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Invalid tile ID in saveWifiTileAccessPointEntries: %{private}s, #CloneMe", buf, 0xCu);
      if (v57 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A3578);
      v25 = qword_1022A0058;
      sub_100BCC240(v40, buf);
      if (v53 >= 0)
        v26 = buf;
      else
        v26 = *(_BYTE **)buf;
      v54 = 136380675;
      v55 = v26;
      LODWORD(v39) = 12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v25, 17, "Invalid tile ID in saveWifiTileAccessPointEntries: %{private}s, #CloneMe", &v54, v39);
      v28 = v27;
      if (v53 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "auto CLWifiTileDataRepository::saveWifiTileAccessPointEntries(const std::string &, cl::chrono::CFAbsoluteTimeClock::time_point)::(anonymous class)::operator()(const CLTilesManager_Type::TileHeader &, int, uint32_t, uint32_t) const", "%s\n", (const char *)v28);
      if (v28 != __p)
LABEL_42:
        free(v28);
    }
  }
LABEL_44:
  if (v42 < 0)
    operator delete(v41);
}

void sub_101158894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011588D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10115890C()
{
}

double sub_101158918(uint64_t a1)
{
  double result;
  int64x2_t v2;

  *(_QWORD *)(a1 + 32) = &_mh_execute_header;
  *(_OWORD *)(a1 + 40) = xmmword_101C42BE4;
  *(_OWORD *)(a1 + 56) = unk_101C42BF4;
  *(_OWORD *)(a1 + 72) = xmmword_101C42C04;
  *(_OWORD *)(a1 + 88) = unk_101C42C14;
  *(_QWORD *)(a1 + 104) = 0x3FDB28C83F4D0FC7;
  *(_QWORD *)(a1 + 112) = 0x8C00000000;
  *(_QWORD *)(a1 + 1800) = 0x8C00000000;
  *(_QWORD *)(a1 + 3488) = 0x8C00000000;
  *(_QWORD *)(a1 + 5176) = 0x8C00000000;
  *(_DWORD *)(a1 + 6864) = 0;
  *(_QWORD *)&result = 1052320862;
  *(_OWORD *)(a1 + 6868) = xmmword_101C42BC0;
  *(_QWORD *)(a1 + 6888) = 7;
  *(_QWORD *)(a1 + 6896) = 7;
  *(_DWORD *)(a1 + 6944) = 0;
  *(_OWORD *)(a1 + 6948) = xmmword_101C42BC0;
  *(_QWORD *)(a1 + 6968) = 7;
  *(_QWORD *)(a1 + 6976) = 7;
  *(_DWORD *)(a1 + 6904) = 0;
  v2 = vdupq_n_s64(7uLL);
  *(_OWORD *)(a1 + 6908) = xmmword_101C42BC0;
  *(int64x2_t *)(a1 + 6928) = v2;
  *(_DWORD *)(a1 + 6984) = 0;
  *(_OWORD *)(a1 + 6988) = xmmword_101C42BC0;
  *(int64x2_t *)(a1 + 7008) = v2;
  return result;
}

uint64_t sub_1011589C4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  __int32 v14;
  int v15;
  uint64_t v16;
  float32x2_t v18;
  int v19;
  uint64_t v20;
  int v21;

  sub_100B27140((float32x2_t *)(a1 + 6864), (float32x2_t *)a2);
  v8 = *(_QWORD *)(a1 + 6896) - 1;
  *(_QWORD *)(a1 + 6896) = v8;
  if (!v8)
  {
    *(_QWORD *)(a1 + 6896) = *(_QWORD *)(a1 + 6888);
    v9 = *(_DWORD *)(a1 + 6880);
    v20 = *(_QWORD *)(a1 + 6872);
    v21 = v9;
    sub_100687774((unsigned __int16 *)(a1 + 112), (uint64_t)&v20);
  }
  sub_100B27140((float32x2_t *)(a1 + 6944), (float32x2_t *)(a2 + 24));
  v10 = *(_QWORD *)(a1 + 6976) - 1;
  *(_QWORD *)(a1 + 6976) = v10;
  if (!v10)
  {
    *(_QWORD *)(a1 + 6976) = *(_QWORD *)(a1 + 6968);
    v11 = *(_DWORD *)(a1 + 6960);
    v20 = *(_QWORD *)(a1 + 6952);
    v21 = v11;
    sub_100687774((unsigned __int16 *)(a1 + 1800), (uint64_t)&v20);
  }
  sub_100B27140((float32x2_t *)(a1 + 6904), (float32x2_t *)(a2 + 12));
  v12 = *(_QWORD *)(a1 + 6936) - 1;
  *(_QWORD *)(a1 + 6936) = v12;
  if (!v12)
  {
    *(_QWORD *)(a1 + 6936) = *(_QWORD *)(a1 + 6928);
    v13 = *(_DWORD *)(a1 + 6920);
    v20 = *(_QWORD *)(a1 + 6912);
    v21 = v13;
    sub_100687774((unsigned __int16 *)(a1 + 3488), (uint64_t)&v20);
  }
  sub_100B61F44((float *)(a2 + 36), (float *)&v20);
  v18.i32[0] = sub_1011A2C08((uint64_t)&v20);
  v18.i32[1] = v14;
  v19 = v15;
  sub_100B27140((float32x2_t *)(a1 + 6984), &v18);
  v16 = *(_QWORD *)(a1 + 7016) - 1;
  *(_QWORD *)(a1 + 7016) = v16;
  if (!v16)
  {
    *(_QWORD *)(a1 + 7016) = *(_QWORD *)(a1 + 7008);
    sub_100687774((unsigned __int16 *)(a1 + 5176), (uint64_t)&v18);
  }
  *(double *)(a1 + 7024) = a4;
  *(double *)(a1 + 7032) = a3;
  return 1;
}

float sub_101158B24(uint64_t a1, float a2)
{
  double v2;
  unint64_t v5;
  BOOL v6;
  int v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  double v21;
  double v22;
  double v23[3];
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  double v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  double v43;

  v2 = *(double *)(a1 + 7032);
  if (*(_DWORD *)(a1 + 1804) == *(unsigned __int16 *)(a1 + 1802))
  {
    sub_100488788((uint64_t)v23, 0.07, 0.75, 1.2, 4.6);
    v5 = vcvtas_u32_f32((float)(a2 * 4.0) / 0.07);
    if (v5 <= 0x47)
      LODWORD(v5) = 71;
    v6 = (int)v5 / -2 < -70 || (int)v5 / 2 == 70;
    v7 = (int)v5 / 2;
    if (v6)
      v8 = -70;
    else
      v8 = -v7;
    if (v7 >= 69)
      v7 = 69;
    sub_101158E1C((float *)v23, (unsigned __int16 *)(a1 + 5176), (v8 + 70), v7 + 70);
    v10 = v9;
    v12 = v11;
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021A3670);
    v13 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)(a1 + 7024);
      v15 = *(_QWORD *)(a1 + 7032);
      *(_DWORD *)buf = 134219008;
      v35 = v10;
      v36 = 2048;
      v37 = v12;
      v38 = 2048;
      v39 = v14;
      v40 = 2048;
      v41 = v15;
      v42 = 2048;
      v43 = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Period Estimate Update,period,%f,confidence,%f,timestamp,%f,startTime,%f,periodEstimate,%f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021A3670);
      v17 = *(_QWORD *)(a1 + 7024);
      v18 = *(_QWORD *)(a1 + 7032);
      v24 = 134219008;
      v25 = v10;
      v26 = 2048;
      v27 = v12;
      v28 = 2048;
      v29 = v17;
      v30 = 2048;
      v31 = v18;
      v32 = 2048;
      v33 = a2;
      LODWORD(v21) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "Period Estimate Update,period,%f,confidence,%f,timestamp,%f,startTime,%f,periodEstimate,%f", COERCE_DOUBLE(&v24), v21, v22, v23[0], v23[1]);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "CLSwimClassifier::PeriodEstimate CLSwimClassifier::estimatePeriod(float) const", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  return v2;
}

void sub_101158E1C(float *a1, unsigned __int16 *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  float v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  float *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  float *v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  float v26[3];
  float v27[140];
  float v28[140];
  _BYTE v29[560];

  if (a4 >= 0x8B)
    v7 = 139;
  else
    v7 = a4;
  HIDWORD(v25) = 0;
  bzero(v29, 0x230uLL);
  v8 = 1.0;
  if (*a1 != 0.0)
    v8 = 1.0 - expf((float)-a1[1] / *a1);
  v9 = 0;
  v10 = -v8;
  if (v7 >= a3)
    v11 = v7 - a3;
  else
    v11 = 0;
  do
  {
    if (v7 <= a3)
    {
      v16 = 0;
    }
    else
    {
      v12 = 0.0;
      v13 = v27;
      v14 = a3;
      do
      {
        v15 = sub_100687A34(a2, v14);
        v12 = v12 + (float)(v10 * (float)(v12 - sub_100533668(v15, v9)));
        *v13++ = v12;
        ++v14;
      }
      while (v7 != v14);
      v16 = v7 - a3;
    }
    sub_1011A2B4C(v27, v16);
    sub_1011A2B90((uint64_t)v27, v28, v16, 1);
    v17 = sub_1004887C0((uint64_t)a1, (uint64_t)v28, v16);
    v26[v9] = v17;
    if (v16)
    {
      v18 = (float *)v29;
      v19 = v28;
      v20 = v11;
      do
      {
        v21 = *v19++;
        *v18 = *v18 + (float)(v17 * v21);
        ++v18;
        --v20;
      }
      while (v20);
    }
    ++v9;
  }
  while (v9 != 3);
  v22 = (float)(v26[0] + v26[1]) + v26[2];
  if (v22 >= 0.00000011921)
  {
    if (v16)
    {
      v23 = v7 - a3;
      if (v7 < a3)
        v23 = 0;
      v24 = (float *)v29;
      do
      {
        *v24 = *v24 / v22;
        ++v24;
        --v23;
      }
      while (v23);
    }
    sub_10048884C((uint64_t)a1, (uint64_t)v29, (float *)&v25 + 1, v16);
  }
}

uint64_t sub_101159010(uint64_t a1, float a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  double v13[2];
  _DWORD v14[2];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  float v25[14];

  v3 = sub_101159208(a1, v25, (uint64_t)v13, (_BYTE *)&v12 + 7, a2);
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_1021A3670);
  v4 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 7032);
    v6 = *(_QWORD *)(a1 + 7024);
    *(_DWORD *)buf = 67109632;
    v20 = v3;
    v21 = 2048;
    v22 = v5;
    v23 = 2048;
    v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "ClassificationResult,%d,startTime,%f,timestamp,%f", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021A3670);
    v8 = *(_QWORD *)(a1 + 7032);
    v9 = *(_QWORD *)(a1 + 7024);
    v14[0] = 67109632;
    v14[1] = v3;
    v15 = 2048;
    v16 = v8;
    v17 = 2048;
    v18 = v9;
    LODWORD(v12) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "ClassificationResult,%d,startTime,%f,timestamp,%f", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "CLSwimStyleType CLSwimClassifier::classify(float)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return v3;
}

uint64_t sub_101159208(uint64_t a1, float *a2, uint64_t a3, _BYTE *a4, float a5)
{
  uint64_t v10;
  int v11;
  char v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  _BOOL4 v22;
  unint64_t v23;
  float *v24;
  unint64_t v25;
  float v26;
  float v27;

  *a4 = 0;
  sub_101158B24(a1, a5);
  *(_QWORD *)a3 = v10;
  *(_DWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 12) = v12;
  v13 = *((float *)&v10 + 1) >= 0.5 && *((float *)&v10 + 1) <= 5.5;
  if (v13 && *(float *)&v10 >= 0.2 && (v14 = llroundf(*((float *)&v10 + 1) / 0.07), v14 < 0x8D))
  {
    v15 = 0;
  }
  else
  {
    v14 = llroundf((float)(a5 * 0.5) / 0.07);
    v15 = 1;
  }
  v16 = 2 * v14;
  if (v16 > 0x8C)
    v16 = (int)v14;
  *(_QWORD *)(a1 + 16) = v16;
  if (v16 > *(unsigned __int16 *)(a1 + 114))
    return 0;
  v13 = (int)v16 / -2 < -70 || (int)v16 / 2 == 70;
  v17 = (int)v16 / 2;
  if (v13)
    v18 = -70;
  else
    v18 = -v17;
  v19 = (v18 + 70);
  if (v17 >= 69)
    v17 = 69;
  v20 = v17 + 70;
  v21 = v20 - v19 + 1;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v20;
  if (v14 >= v21)
    v14 = v20 - v19 + 1;
  *(_QWORD *)(a1 + 16) = (int)v21;
  *(_QWORD *)(a1 + 24) = (int)v14;
  *a4 = 1;
  sub_101159418(a1, a2);
  if (*a2 < -0.64)
    return 0;
  if (*a2 <= 0.67)
  {
    v23 = 0;
    v24 = (float *)&dword_101C42C38;
    do
    {
      v25 = v23;
      if (v23 == 13)
        break;
      v26 = a2[v23 + 1];
      if (v26 < *(v24 - 1))
        break;
      v27 = *v24;
      v24 += 2;
      ++v23;
    }
    while (v26 <= v27);
    v22 = v25 < 0xD;
  }
  else
  {
    v22 = 1;
  }
  if (((v15 | v22) & 1) != 0)
    return 0;
  else
    return sub_1011598DC(a1, (int32x2_t *)a2);
}

uint64_t sub_1011593E4(uint64_t a1, uint64_t a2, float *a3, float a4)
{
  unsigned __int8 v5;

  v5 = 0;
  sub_101159208(a1, a3, a2, &v5, a4);
  return v5;
}

void sub_101159418(uint64_t a1, float *a2)
{
  float *v2;
  int v4;
  float v5;
  float v6;
  unint64_t v7;
  float v8;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unint64_t v36;
  uint64_t i;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  unint64_t v72;
  _OWORD v73[3];
  uint64_t v74;
  _QWORD v75[2];
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  float v81[140];
  float v82[140];

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 36);
  v5 = 1.0;
  if (*(_DWORD *)(a1 + 32) == v4)
    v6 = -1.0;
  else
    v6 = 1.0;
  if (!v4)
    v5 = -1.0;
  v53 = v5;
  v54 = v6;
  v75[0] = 0;
  v75[1] = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v74 = 0;
  memset(v73, 0, 44);
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= *(_QWORD *)(a1 + 8))
  {
    v16 = 0;
    v55 = 0.0;
    v17 = 1.1755e-38;
    v18 = 3.4028e38;
    v19 = 0.0;
    v20 = 0.0;
    v61 = 1.1755e-38;
    v63 = 3.4028e38;
    v59 = 1.1755e-38;
    v60 = 3.4028e38;
    v58 = 0.0;
    v11 = 1.1755e-38;
    v69 = 0.0;
    v70 = 1.1755e-38;
    v68 = 1.1755e-38;
    v10 = 3.4028e38;
    v12 = 1.1755e-38;
    v13 = 3.4028e38;
    v14 = 3.4028e38;
    v15 = 1.1755e-38;
    do
    {
      v65 = v20;
      v67 = v19;
      v21 = (float *)sub_100687A34((unsigned __int16 *)(a1 + 1800), v7);
      v22 = (float *)sub_100687A34((unsigned __int16 *)(a1 + 112), v7);
      v23 = (float *)sub_100687A34((unsigned __int16 *)(a1 + 3488), v7);
      v24 = 0;
      v26 = *v21;
      v25 = v21[1];
      v27 = 0.0;
      v28 = v21[2];
      do
      {
        v27 = v27 + (float)(v22[v24] * v22[v24]);
        ++v24;
      }
      while (v24 != 3);
      v30 = v59;
      v29 = v60;
      if (v60 > v26)
        v29 = *v21;
      if (v59 < v26)
        v30 = *v21;
      v32 = v61;
      v31 = v63;
      if (v63 > v25)
        v31 = v21[1];
      if (v61 < v25)
        v32 = v21[1];
      if (v18 > v28)
        v18 = v21[2];
      if (v17 < v28)
        v17 = v21[2];
      v56 = v18;
      v57 = v17;
      v33 = sqrtf(v27);
      v34 = 0.0;
      v61 = v32;
      v63 = v31;
      v59 = v30;
      v60 = v29;
      if (v33 == 0.0)
      {
        v35 = 0.0;
      }
      else
      {
        v35 = v22[1] / v33;
        v55 = v55 + (float)(*v22 / v33);
      }
      v58 = v58 + v33;
      v36 = v16 + 1;
      sub_10115A020((float *)v75, v25, v35, v33);
      sub_10083D1DC((uint64_t)v73, v21[1], v35);
      for (i = 0; i != 3; ++i)
        v34 = v34 + (float)(v23[i] * v23[i]);
      v82[v16] = sqrtf(v34);
      v38 = v23[2];
      v20 = v65 + fabsf(v38);
      v39 = (float)(v38 * v38) + (float)(*v23 * *v23);
      v41 = *v22;
      v40 = v22[1];
      v42 = fabsf(v40);
      v19 = v67 + v42;
      if (v14 > v42)
        v14 = v42;
      if (v15 < v42)
        v15 = v42;
      v43 = sqrtf(v39);
      if (v10 > v43)
        v10 = v43;
      if (v11 < v43)
        v11 = v43;
      if (v13 > (float)(v53 * v41))
        v13 = v53 * v41;
      if (v12 < (float)(v54 * v40))
        v12 = v54 * v40;
      v44 = fabsf(v41);
      v45 = v68;
      if (v68 < v44)
        v45 = v44;
      v68 = v45;
      v69 = v69 + (float)(v41 * v41);
      v46 = v70;
      if (v70 < v42)
        v46 = v42;
      v70 = v46;
      ++v7;
      ++v16;
      v18 = v56;
      v17 = v57;
    }
    while (v7 <= *(_QWORD *)(a1 + 8));
    v2 = a2;
    a2[12] = (float)((float)((float)(v59 - v60) + (float)(v61 - v63)) + (float)(v57 - v56)) / 3.0;
    if (v36)
    {
      v9 = 0;
      v62 = (float)v36;
      v8 = v58 / (float)v36;
    }
    else
    {
      v8 = 0.0;
      v62 = 0.0;
      v9 = 1;
    }
    v64 = v20;
    v66 = v67 + v42;
  }
  else
  {
    a2[12] = -INFINITY;
    v8 = 0.0;
    v55 = 0.0;
    v9 = 1;
    v10 = 3.4028e38;
    v11 = 1.1755e-38;
    v64 = 0.0;
    v66 = 0.0;
    v69 = 0.0;
    v70 = 1.1755e-38;
    v68 = 1.1755e-38;
    v62 = 0.0;
    v12 = 1.1755e-38;
    v13 = 3.4028e38;
    v14 = 3.4028e38;
    v15 = 1.1755e-38;
  }
  v2[13] = v8;
  v2[1] = (float)(v54 * v53) * sub_10115A0A8((uint64_t)v75);
  v2[4] = (float)(v54 * v53) * sub_10083D408((uint64_t)v73);
  *v2 = (float)(v53 * v55) / (float)*(unint64_t *)(a1 + 16);
  sub_101159F08((unint64_t *)a1, v82, (uint64_t)v2);
  v47 = v54 * v2[3];
  v2[9] = v54 * v2[9];
  v48 = v64 / v66;
  v49 = 0.0;
  if (v66 == 0.0)
    v48 = 0.0;
  v2[2] = v48;
  v2[3] = v47;
  v50 = 0.0;
  if ((float)(v15 - v14) != 0.0)
    v50 = (float)(v11 - v10) / (float)(v15 - v14);
  v2[5] = v50;
  v2[6] = v12;
  v51 = v68 / v70;
  if (v70 == 0.0)
    v51 = 0.0;
  v2[7] = v13;
  v2[8] = v51;
  if (!v9)
    v49 = v69 / v62;
  v2[11] = sqrtf(v49);
  v71 = 0;
  v72 = 0;
  sub_10115A168(a1, (uint64_t)v82, &v72, &v71, v81);
  v2[10] = sub_10115A370(a1, v82, v72, v71, (uint64_t)v81);
}

uint64_t sub_1011598DC(uint64_t a1, int32x2_t *a2)
{
  __int32 v3;
  __int32 v4;
  float v5;
  __int128 v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  double v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  double v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  double v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  double v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  double v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  uint64_t v49;
  uint8_t buf[4];
  char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  double v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  double v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  double v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  double v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  double v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  uint64_t v81;
  float v82;
  float v83;
  _DWORD v84[5];
  __int128 v85;
  float v86;
  float v87;
  float v88;
  int32x2_t v89;
  __int32 v90;

  v89 = vrev64_s32(*a2);
  v3 = a2[1].i32[0];
  v90 = a2[1].i32[1];
  v4 = a2[4].i32[1];
  v84[0] = a2[4].i32[0];
  v84[1] = v3;
  v5 = *(float *)&a2[2].i32[1];
  v84[2] = a2[2].i32[0];
  v84[3] = v4;
  v84[4] = fminf(v5, 0.475);
  *(int32x2_t *)&v6 = vrev64_s32(a2[3]);
  *((int32x2_t *)&v6 + 1) = vrev64_s32(a2[5]);
  v85 = v6;
  sub_1000F08C0((uint64_t)&v89, &v86, (int *)(a1 + 40), 3, 3);
  v7 = 2;
  sub_1000F08C0((uint64_t)v84, &v82, (int *)(a1 + 72), 2, 9);
  if (v88 <= 0.5)
  {
    if (v87 <= 0.725)
    {
      if (v82 <= 0.5)
        v7 = 1;
      else
        v7 = 4;
    }
    else
    {
      v7 = 3;
    }
  }
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_1021A3670);
  v8 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
  {
    v9 = (&off_1021A3618)[v7];
    v10 = *(_QWORD *)(a1 + 7024);
    v11 = *(_QWORD *)(a1 + 7032);
    *(_DWORD *)buf = 136318978;
    v51 = v9;
    v52 = 1024;
    v53 = v7;
    v54 = 2080;
    v55 = "tier1_0";
    v56 = 2048;
    v57 = v86;
    v58 = 2080;
    v59 = "tier1_1";
    v60 = 2048;
    v61 = v87;
    v62 = 2080;
    v63 = "tier1_2";
    v64 = 2048;
    v65 = v88;
    v66 = 2080;
    v67 = "tier2_0";
    v68 = 2048;
    v69 = v82;
    v70 = 2080;
    v71 = "tier2_1";
    v72 = 2048;
    v73 = v83;
    v74 = 2080;
    v75 = "timestamp";
    v76 = 2048;
    v77 = v10;
    v78 = 2080;
    v79 = "startTime";
    v80 = 2048;
    v81 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Classification,%s,%d,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f", buf, 0x9Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021A3670);
    v13 = (&off_1021A3618)[v7];
    v14 = *(_QWORD *)(a1 + 7024);
    v15 = *(_QWORD *)(a1 + 7032);
    v18 = 136318978;
    v19 = v13;
    v20 = 1024;
    v21 = v7;
    v22 = 2080;
    v23 = "tier1_0";
    v24 = 2048;
    v25 = v86;
    v26 = 2080;
    v27 = "tier1_1";
    v28 = 2048;
    v29 = v87;
    v30 = 2080;
    v31 = "tier1_2";
    v32 = 2048;
    v33 = v88;
    v34 = 2080;
    v35 = "tier2_0";
    v36 = 2048;
    v37 = v82;
    v38 = 2080;
    v39 = "tier2_1";
    v40 = 2048;
    v41 = v83;
    v42 = 2080;
    v43 = "timestamp";
    v44 = 2048;
    v45 = v14;
    v46 = 2080;
    v47 = "startTime";
    v48 = 2048;
    v49 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "Classification,%s,%d,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f", (const char *)&v18, 158);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "CLSwimStyleType CLSwimClassifier::runTieredClassifiers(const float (&)[14]) const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return v7;
}

void sub_101159D38(uint64_t a1, _QWORD *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;

  *(_QWORD *)(a1 + 32) = *a2;
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_1021A3670);
  v3 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 32);
    v5 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)buf = 67109376;
    v14 = v4;
    v15 = 1024;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Swimming device orientation set,wrist,%d,crown,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021A3670);
    v6 = *(_DWORD *)(a1 + 32);
    v7 = *(_DWORD *)(a1 + 36);
    v10[0] = 67109376;
    v10[1] = v6;
    v11 = 1024;
    v12 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 0, "Swimming device orientation set,wrist,%d,crown,%d", v10, 14);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLSwimClassifier::setDeviceOrientation(const CLGizmoOrientation &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

unint64_t *sub_101159F08(unint64_t *result, float *a2, uint64_t a3)
{
  float *v4;
  unint64_t *v5;
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  unint64_t v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  float v18;

  v4 = a2;
  v5 = result;
  v6 = result[2];
  v7 = 0.0;
  v8 = 0.0;
  if (v6)
  {
    v9 = 0;
    v10 = 0.0;
    do
      v10 = v10 + a2[v9++];
    while (v6 != v9);
    v8 = v10 / (float)v6;
  }
  v11 = *result;
  v12 = 0.0;
  v13 = 0.0;
  v14 = 0.0;
  if (*result <= result[1])
  {
    v7 = 0.0;
    do
    {
      if (*v4 > v8)
      {
        v15 = (float *)sub_100687A34((unsigned __int16 *)v5 + 900, v11);
        v7 = v7 + *v4;
        v12 = v12 + (float)(*v4 * *v15);
      }
      result = (unint64_t *)sub_100687A34((unsigned __int16 *)v5 + 900, v11);
      v16 = *v4++;
      v13 = v13 + v16;
      v14 = v14 + (float)(v16 * *(float *)result);
      ++v11;
    }
    while (v11 <= v5[1]);
  }
  v17 = v12 / v7;
  if (v7 == 0.0)
    v17 = 0.0;
  *(float *)(a3 + 12) = v17;
  v18 = v14 / v13;
  if (v13 == 0.0)
    v18 = 0.0;
  *(float *)(a3 + 36) = v18;
  return result;
}

float sub_10115A020(float *a1, float a2, float a3, float a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  if (a4 <= 0.0)
  {
    v9 = *(_QWORD *)a1;
  }
  else
  {
    v4 = a1[4];
    v5 = v4 + a4;
    v6 = a1[2];
    v7 = (float)((float)(a2 - v6) * a4) / (float)(v4 + a4);
    v8 = a1[3] + (float)((float)(v4 * (float)(a2 - v6)) * v7);
    a1[2] = v6 + v7;
    a1[3] = v8;
    a1[4] = v5;
    v9 = *(_QWORD *)a1;
    v10 = a1[10];
    v11 = v10 + a4;
    v12 = a1[8];
    v13 = (float)((float)(a3 - v12) * a4) / (float)(v10 + a4);
    v14 = a1[9] + (float)((float)(v10 * (float)(a3 - v12)) * v13);
    a1[8] = v12 + v13;
    a1[9] = v14;
    a1[10] = v11;
  }
  *(_QWORD *)a1 = v9 + 1;
  ++*((_QWORD *)a1 + 3);
  return sub_10115A688((uint64_t)(a1 + 12), a2, a3, a4);
}

float sub_10115A0A8(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  unint64_t v4;
  float v5;
  float v6;
  float result;
  unint64_t v8;
  float v9;

  v1 = 0.0;
  v2 = 0.0;
  if (*(_QWORD *)a1 >= 2uLL)
  {
    v3 = *(float *)(a1 + 16);
    if (v3 != 0.0)
      v2 = (float)((float)*(unint64_t *)a1 / (float)(unint64_t)(*(_QWORD *)a1 - 1))
         * (float)(*(float *)(a1 + 12) / v3);
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (v4 >= 2)
  {
    v5 = *(float *)(a1 + 40);
    if (v5 != 0.0)
      v1 = (float)((float)v4 / (float)(v4 - 1)) * (float)(*(float *)(a1 + 36) / v5);
  }
  v6 = v2 * v1;
  result = 0.0;
  if (v6 > 0.0)
  {
    v8 = *(_QWORD *)(a1 + 64);
    if (v8 >= 2)
    {
      v9 = *(float *)(a1 + 72);
      if (v9 != 0.0)
        result = (float)((float)v8 / (float)((float)v8 + -1.0)) * (float)(*(float *)(a1 + 56) / v9);
    }
    return result / sqrtf(v6);
  }
  return result;
}

void sub_10115A168(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4, float *a5)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  unint64_t v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  unint64_t v28;

  v9 = *(_QWORD *)(a1 + 24);
  if (v9 >= 5)
  {
    v10 = 0;
    v11 = 4;
    v12 = 3.4028e38;
    do
    {
      v13 = 0.0;
      v14 = v10;
      do
        v13 = v13 + *(float *)(a2 + 4 + 4 * v14++);
      while (v14 < v11);
      if (v13 < v12)
      {
        *a3 = v11;
        v9 = *(_QWORD *)(a1 + 24);
        v12 = v13;
      }
      ++v11;
      ++v10;
    }
    while (v11 < v9);
  }
  v15 = *a3 - 2;
  *a3 = v15;
  v16 = *(float *)sub_100687A34((unsigned __int16 *)(a1 + 5176), *(_QWORD *)a1 + v15);
  v17 = *(float *)(sub_100687A34((unsigned __int16 *)(a1 + 5176), *(_QWORD *)a1 + *a3) + 4);
  v18 = sqrtf((float)(v16 * v16) + (float)(v17 * v17));
  if (v18 > 0.00000011921)
  {
    v16 = v16 / v18;
    v17 = v17 / v18;
  }
  v19 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= *(_QWORD *)(a1 + 8))
  {
    v20 = a5;
    do
    {
      v21 = *(float *)sub_100687A34((unsigned __int16 *)(a1 + 5176), v19);
      v22 = *(float *)(sub_100687A34((unsigned __int16 *)(a1 + 5176), v19) + 4);
      v23 = sqrtf((float)(v21 * v21) + (float)(v22 * v22));
      if (v23 > 0.00000011921)
      {
        v21 = v21 / v23;
        v22 = v22 / v23;
      }
      *v20++ = acosf(fmaxf(fminf((float)(v17 * v22) + (float)(v16 * v21), 1.0), -1.0));
      ++v19;
    }
    while (v19 <= *(_QWORD *)(a1 + 8));
  }
  v24 = *a3;
  v25 = *(_QWORD *)(a1 + 24) + *a3;
  if (v25 >= *(_QWORD *)(a1 + 16))
    v25 = *(_QWORD *)(a1 + 16);
  if (v24 >= v25)
  {
    v28 = *a3;
  }
  else
  {
    v26 = -3.4028e38;
    v27 = *a3;
    v28 = *a3;
    do
    {
      if (a5[v27] > v26)
      {
        v26 = a5[v27];
        v28 = v27;
      }
      ++v27;
    }
    while (v25 != v27);
  }
  *a3 = *(_QWORD *)a1 + v24;
  *a4 = *(_QWORD *)a1 + v28;
}

float sub_10115A370(uint64_t a1, float *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  float v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  uint64_t v19;
  int v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;

  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v11 = 1.1755e-38;
    goto LABEL_9;
  }
  v11 = 1.1755e-38;
  v12 = a2;
  do
  {
    v13 = *v12++;
    v14 = v13;
    if (v11 < v13)
      v11 = v14;
    --v10;
  }
  while (v10);
  v15 = 0.0;
  if (v11 != 0.0)
  {
LABEL_9:
    v16 = *(_QWORD *)a1;
    v15 = 0.0;
    if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
    {
      v20 = 1;
      v18 = 0.0;
      v21 = 0.0;
    }
    else
    {
      v17 = 0;
      v18 = 0.0;
      do
      {
        v19 = sub_100687A34((unsigned __int16 *)(a1 + 112), v16 + v17);
        v18 = v18 + (float)(*(float *)(v19 + 4) * *(float *)(v19 + 4));
        ++v17;
      }
      while (v16 + v17 < *(_QWORD *)(a1 + 8));
      if (v17)
      {
        v20 = 0;
        v21 = (float)v17;
        v22 = v18 / (float)v17;
        goto LABEL_17;
      }
      v21 = 0.0;
      v20 = 1;
    }
    v22 = 0.0;
LABEL_17:
    if (sqrtf(v22) != 0.0)
    {
      v23 = a4 - a3;
      v24 = 0.0;
      v25 = 0.0;
      if (a4 - a3 != -1)
      {
        v26 = a3 - *(_QWORD *)a1;
        v27 = v23 + 1;
        v28 = a3;
        do
        {
          if (v26 >= *(_QWORD *)(a1 + 16))
            v29 = 0;
          else
            v29 = v26;
          if (v28 > *(_QWORD *)(a1 + 8))
            v28 = *(_QWORD *)a1;
          v30 = sub_100687A34((unsigned __int16 *)(a1 + 112), v28);
          v31 = 0.0;
          if ((float)(a2[v29] / v11) > 0.1)
            v31 = *(float *)(a5 + 4 * v29);
          v24 = v24 + v31;
          v25 = v25 + (float)(v31 * (float)(*(float *)(v30 + 4) * *(float *)(v30 + 4)));
          v26 = v29 + 1;
          ++v28;
          --v27;
        }
        while (v27);
        v32 = *(_QWORD *)(a1 + 24);
        v33 = v32 + a3;
        v34 = a3 - *(_QWORD *)a1 + v32;
        v35 = v23 + 1;
        do
        {
          if (v34 >= *(_QWORD *)(a1 + 16))
            v36 = 0;
          else
            v36 = v34;
          if (v33 > *(_QWORD *)(a1 + 8))
            v33 = *(_QWORD *)a1;
          v37 = sub_100687A34((unsigned __int16 *)(a1 + 112), v33);
          v38 = 0.0;
          if ((float)(a2[v36] / v11) > 0.1)
            v38 = *(float *)(a5 + 4 * v36);
          v24 = v24 + v38;
          v25 = v25 + (float)(v38 * (float)(*(float *)(v37 + 4) * *(float *)(v37 + 4)));
          v34 = v36 + 1;
          ++v33;
          --v35;
        }
        while (v35);
      }
      v39 = v25 / v24;
      if (v24 == 0.0)
        v39 = 0.0;
      v40 = sqrtf(v39);
      v41 = v18 / v21;
      if (v20)
        v41 = 0.0;
      return v40 / sqrtf(v41);
    }
  }
  return v15;
}

double sub_10115A5CC(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_10115A5D8(uint64_t result, int a2)
{
  if (a2)
  {
    if (a2 != 7)
    {
      ++*(_DWORD *)(result + 28);
      ++*(_DWORD *)(result + 4 * a2);
    }
  }
  return result;
}

uint64_t sub_10115A604(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  int v4;

  v1 = *(_DWORD *)(a1 + 28);
  if (!v1)
    return 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  do
  {
    if (*(_DWORD *)(a1 + 4 * v2) > v4)
    {
      v4 = *(_DWORD *)(a1 + 4 * v2);
      v3 = v2;
    }
    ++v2;
  }
  while (v2 != 7);
  if ((float)((float)v4 / (float)v1) <= 0.5)
    return 5;
  else
    return v3;
}

void sub_10115A65C(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

float sub_10115A688(uint64_t a1, float result, float a3, float a4)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    if (a4 > 0.0)
    {
      v5 = *(float *)(a1 + 24);
      v6 = *(float *)(a1 + 4);
      v7 = v5 + a4;
      v8 = *(float *)(a1 + 8)
         + (float)((float)((float)((float)(v5 * a4) / (float)(v5 + a4)) * (float)(result - (float)(*(float *)a1 / v5)))
                 * (float)(a3 - (float)(v6 / v5)));
      result = *(float *)a1 + (float)(a4 * result);
      *(float *)a1 = result;
      *(float *)(a1 + 4) = v6 + (float)(a4 * a3);
      *(float *)(a1 + 8) = v8;
      *(float *)(a1 + 24) = v7;
    }
    *(_QWORD *)(a1 + 16) = v4 + 1;
  }
  else if (a4 > 0.0)
  {
    *(float *)(a1 + 24) = a4;
    result = result * a4;
    *(float *)a1 = result;
    *(float *)(a1 + 4) = a3 * a4;
    *(_QWORD *)(a1 + 16) = 1;
    *(_DWORD *)(a1 + 8) = 0;
  }
  return result;
}

std::string *sub_10115A710(std::string *__str, uint64_t a2)
{
  std::string *result;

  std::string::operator=((std::string *)(a2 + 40), __str);
  std::string::operator=((std::string *)(a2 + 64), __str + 1);
  std::string::operator=((std::string *)(a2 + 88), __str + 2);
  std::string::operator=((std::string *)(a2 + 112), __str + 4);
  std::string::operator=((std::string *)(a2 + 136), __str + 5);
  result = std::string::operator=((std::string *)(a2 + 160), __str + 6);
  *(_BYTE *)(a2 + 188) = __str[7].__r_.__value_.__s.__data_[0];
  return result;
}

uint64_t sub_10115A780(double a1)
{
  if (a1 <= 5.0)
    return 1;
  if (a1 <= 10.0)
    return 2;
  if (a1 <= 15.0)
    return 3;
  if (a1 <= 20.0)
    return 4;
  if (a1 <= 30.0)
    return 5;
  if (a1 <= 40.0)
    return 6;
  if (a1 <= 50.0)
    return 7;
  if (a1 <= 70.0)
    return 8;
  if (a1 <= 100.0)
    return 9;
  if (a1 <= 200.0)
    return 10;
  if (a1 <= 300.0)
    return 11;
  return 12;
}

uint64_t sub_10115A880(double a1)
{
  int v1;
  unsigned int v2;

  if (a1 <= 0.1)
    return 1;
  if (a1 <= 0.2)
    return 2;
  if (a1 <= 0.35)
    return 3;
  if (a1 <= 0.5)
    return 4;
  if (a1 <= 0.75)
    return 5;
  if (a1 <= 1.0)
    return 6;
  if (a1 <= 1.5)
    return 7;
  if (a1 <= 2.0)
    return 8;
  if (a1 <= 3.0)
    return 9;
  if (a1 <= 4.0)
    return 10;
  if (a1 <= 5.0)
    return 11;
  if (a1 <= 10.0)
    v1 = 0;
  else
    v1 = 14;
  if (a1 > 10.0)
    v2 = v1;
  else
    v2 = 13;
  if (a1 > 7.0)
    return v2;
  else
    return 12;
}

id sub_10115A994(int a1, int a2, int a3, int a4, int a5, float a6)
{
  NSDateComponents *v12;
  NSDateComponents *v13;

  v12 = -[NSCalendar components:fromDate:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "components:fromDate:", 28, +[NSDate date](NSDate, "date"));
  v13 = v12;
  if (a3 >= 1 && a4 >= 1 && a5 >= 1)
  {
    -[NSDateComponents setYear:](v12, "setYear:", a5);
    -[NSDateComponents setMonth:](v13, "setMonth:", a4);
    -[NSDateComponents setDay:](v13, "setDay:", a3);
  }
  -[NSDateComponents setHour:](v13, "setHour:", a1);
  -[NSDateComponents setMinute:](v13, "setMinute:", a2);
  -[NSDateComponents setSecond:](v13, "setSecond:", (uint64_t)a6);
  -[NSDateComponents setTimeZone:](v13, "setTimeZone:", +[NSTimeZone timeZoneForSecondsFromGMT:](NSTimeZone, "timeZoneForSecondsFromGMT:", 0));
  return -[NSDate timeIntervalSinceReferenceDate](-[NSCalendar dateFromComponents:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "dateFromComponents:", v13), "timeIntervalSinceReferenceDate");
}

void sub_10115AAA0(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const char *v31;
  uint8_t *v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  int v58;
  uint8_t buf[4];
  uint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  int v84;

  *(_OWORD *)a1 = *(_OWORD *)(a2 + 4);
  a1[2] = *(_QWORD *)(a2 + 28);
  a1[3] = *(_QWORD *)(a2 + 44);
  a1[4] = *(_QWORD *)(a2 + 60);
  a1[5] = *(_QWORD *)(a2 + 20);
  a1[6] = *(_QWORD *)(a2 + 36);
  a1[8] = *(_QWORD *)(a2 + 52);
  a1[7] = *(_QWORD *)(a2 + 68);
  a1[9] = *(_QWORD *)(a2 + 184);
  a1[10] = *(_QWORD *)(a2 + 504);
  *((_DWORD *)a1 + 22) = *(_DWORD *)(a2 + 132);
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021A3690);
  v4 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a2 + 96);
    v6 = *a1;
    v7 = a1[1];
    v8 = a1[2];
    v9 = a1[3];
    v10 = a1[4];
    v11 = a1[5];
    v13 = a1[8];
    v12 = a1[9];
    v14 = a1[6];
    v15 = a1[7];
    v16 = a1[10];
    v17 = *((_DWORD *)a1 + 22);
    *(_DWORD *)buf = 134352129;
    v60 = v12;
    v61 = 1026;
    v62 = v5;
    v63 = 2049;
    v64 = v6;
    v65 = 2049;
    v66 = v7;
    v67 = 2050;
    v68 = v8;
    v69 = 2050;
    v70 = v9;
    v71 = 2050;
    v72 = v10;
    v73 = 2050;
    v74 = v11;
    v75 = 2050;
    v76 = v14;
    v77 = 2050;
    v78 = v13;
    v79 = 2050;
    v80 = v15;
    v81 = 2050;
    v82 = v16;
    v83 = 1026;
    v84 = v17;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,DeviceLocationData,type,%{public}d,ll,%{private}.7lf,%{private}.7lf,alt,%{public}.2lf,speed,%{public}.2lf,course,%{public}.2lf,hUnc,%{public}.2lf,vUnc,%{public}.2lf,speedUnc,%{public}.2lf,courseUnc,%{public}.2lf,mct,%{public}.1lf,refFrame,%{public}d", buf, 0x7Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v18 = *(_DWORD *)(a2 + 96);
    v19 = *a1;
    v20 = a1[1];
    v21 = a1[2];
    v22 = a1[3];
    v23 = a1[4];
    v24 = a1[5];
    v26 = a1[8];
    v25 = a1[9];
    v28 = a1[6];
    v27 = a1[7];
    v29 = a1[10];
    v30 = *((_DWORD *)a1 + 22);
    v33 = 134352129;
    v34 = v25;
    v35 = 1026;
    v36 = v18;
    v37 = 2049;
    v38 = v19;
    v39 = 2049;
    v40 = v20;
    v41 = 2050;
    v42 = v21;
    v43 = 2050;
    v44 = v22;
    v45 = 2050;
    v46 = v23;
    v47 = 2050;
    v48 = v24;
    v49 = 2050;
    v50 = v28;
    v51 = 2050;
    v52 = v26;
    v53 = 2050;
    v54 = v27;
    v55 = 2050;
    v56 = v29;
    v57 = 1026;
    v58 = v30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessoryAWD,%{public}.1lf,DeviceLocationData,type,%{public}d,ll,%{private}.7lf,%{private}.7lf,alt,%{public}.2lf,speed,%{public}.2lf,course,%{public}.2lf,hUnc,%{public}.2lf,vUnc,%{public}.2lf,speedUnc,%{public}.2lf,courseUnc,%{public}.2lf,mct,%{public}.1lf,refFrame,%{public}d", &v33, 124);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void DeviceLocationData::fillData(const CLLocationProvider_Type::NotificationData &)", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
}

void sub_10115ADC0(uint64_t a1, std::string *a2, int a3)
{
  double v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  sub_10115AFD4(a1);
  v6 = sub_1001FCBB4();
  sub_10115A710(a2, a1 + 40);
  *(double *)(a1 + 2952) = v6;
  v7 = *(double *)(a1 + 2992);
  if (!a3)
  {
    if (v7 <= 0.0)
      goto LABEL_7;
    *(_DWORD *)(a1 + 1560) += vabdd_f64(v6, v7);
    v6 = -1.0;
    goto LABEL_6;
  }
  if (v7 < 0.0)
LABEL_6:
    *(double *)(a1 + 2992) = v6;
LABEL_7:
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021A3690);
  v8 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a1 + 2952);
    *(_DWORD *)buf = 134349056;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,AccessoryConnected", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v10 = *(_QWORD *)(a1 + 2952);
    v13 = 134349056;
    v14 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessoryAWD,%{public}.1lf,AccessoryConnected", &v13, 12);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::accessoryConnected(const CLAccessoryUtils::CLAccessoryInfo &, BOOL)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

uint64_t sub_10115AFD4(uint64_t a1)
{
  __int128 v2;
  void *v3;
  __int128 v5;
  __int128 v6;
  _OWORD v7[11];
  uint64_t v8;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  _BYTE v13[28];
  __int128 v14;
  _BYTE v15[28];
  __int128 *v16;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  _BYTE *v22;
  _BYTE v23[32];
  int v24;
  __int128 v25;
  _BYTE v26[28];
  __int128 v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 *v31;
  __int128 v32;
  _BYTE *v33;
  _BYTE v34[32];
  int v35;
  __int128 v36;
  uint64_t v37;
  __int128 *v38;
  __int128 v39;
  __int128 *v40;
  __int128 v41;
  _BYTE *v42;
  _BYTE v43[32];
  int v44;
  __int128 v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  __int128 *v49;
  __int128 v50;
  _BYTE *v51;
  _BYTE v52[32];
  int v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  __int128 *v57;
  __int128 v58;
  _BYTE *v59;
  _BYTE v60[32];
  int v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE *v65;
  _BYTE v66[32];
  int v67;
  __int128 v68;
  _BYTE v69[28];
  __int128 v70;
  __int128 v71;
  _BYTE *v72;
  _BYTE v73[32];
  int v74;
  __int128 v75;
  _BYTE v76[64];
  _BYTE *v77;
  _BYTE v78[32];
  int v79;
  __int128 v80;
  _BYTE v81[28];
  __int128 v82;
  uint64_t v83;
  int v84;
  __int128 *v85;
  __int128 v86;
  __int128 *v87;
  __int128 v88;
  __int128 *v89;
  __int128 v90;
  int v91;
  __int128 *v92;
  __int128 v93;
  int v94;
  __int128 *v95;
  __int128 v96;
  __int128 *v97;
  __int128 v98;
  _BYTE *v99;
  _BYTE v100[32];
  int v101;
  __int128 *v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  _BYTE v120[848];
  __int128 v121;
  char v122;
  void *v123;
  char v124;
  void *v125;
  char v126;
  void *v127;
  char v128;
  void *v129;
  char v130;
  void *v131;
  char v132;
  void *__p;
  char v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int16 v141;

  bzero(&v5, 0x660uLL);
  *((_QWORD *)&v5 + 1) = 0xBFF0000000000000;
  v10 = 0u;
  v11 = 0;
  v17 = 0u;
  v6 = 0u;
  memset(v7, 0, 157);
  v8 = 0;
  v9 = 0;
  v7[10] = 0u;
  memset(v13, 0, sizeof(v13));
  v12 = 0u;
  memset(v15, 0, sizeof(v15));
  v14 = 0u;
  v16 = &v17;
  v19 = 0u;
  v21 = 0u;
  v18 = &v19;
  v20 = &v21;
  memset(v23, 0, sizeof(v23));
  v22 = v23;
  v24 = 0;
  v27 = 0u;
  v28 = 0;
  v30 = 0u;
  memset(v26, 0, sizeof(v26));
  v25 = 0u;
  v29 = &v30;
  v32 = 0u;
  v31 = &v32;
  v33 = v34;
  memset(v34, 0, sizeof(v34));
  v35 = 0;
  v36 = 0u;
  v37 = 0;
  v39 = 0u;
  v38 = &v39;
  v41 = 0u;
  memset(v43, 0, sizeof(v43));
  v40 = &v41;
  v42 = v43;
  v44 = 0;
  v46 = 0;
  v45 = 0u;
  v48 = 0u;
  v50 = 0u;
  v47 = &v48;
  v49 = &v50;
  v51 = v52;
  v53 = 0;
  memset(v52, 0, sizeof(v52));
  v58 = 0u;
  v54 = 0u;
  v56 = 0;
  v55 = 0;
  v57 = &v58;
  memset(v60, 0, sizeof(v60));
  v59 = v60;
  v61 = 0;
  memset(v66, 0, sizeof(v66));
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v65 = v66;
  v67 = 0;
  memset(v73, 0, sizeof(v73));
  memset(v69, 0, sizeof(v69));
  v68 = 0u;
  v71 = 0u;
  v70 = 0u;
  v72 = v73;
  v74 = 0;
  memset(v78, 0, sizeof(v78));
  memset(v76, 0, 28);
  v75 = 0u;
  memset(&v76[32], 0, 32);
  v77 = v78;
  v79 = 0;
  v86 = 0u;
  memset(v81, 0, sizeof(v81));
  v80 = 0u;
  v84 = 0;
  v83 = 0;
  v82 = 0u;
  v85 = &v86;
  v88 = 0u;
  v87 = &v88;
  v90 = 0u;
  v89 = &v90;
  v91 = 0;
  v93 = 0u;
  v92 = &v93;
  v94 = 0;
  v96 = 0u;
  v95 = &v96;
  v98 = 0u;
  v97 = &v98;
  memset(v100, 0, sizeof(v100));
  v99 = v100;
  v103 = 0u;
  v101 = 0;
  v102 = &v103;
  sub_101160F4C(a1 + 40, (uint64_t)&v5);
  sub_100739A38((uint64_t)&v5);
  bzero(&v5, 0xBD8uLL);
  sub_100739564((uint64_t)&v5);
  v2 = v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)&v7[0];
  sub_101160F4C(a1 + 40, (uint64_t)v7 + 8);
  *(_QWORD *)(a1 + 1696) = v104;
  *(_OWORD *)(a1 + 1752) = v108;
  *(_OWORD *)(a1 + 1768) = v109;
  *(_OWORD *)(a1 + 1784) = v110;
  *(_QWORD *)(a1 + 1800) = v111;
  *(_OWORD *)(a1 + 1704) = v105;
  *(_OWORD *)(a1 + 1720) = v106;
  *(_OWORD *)(a1 + 1736) = v107;
  *(_QWORD *)(a1 + 1808) = v112;
  *(_OWORD *)(a1 + 1848) = v115;
  *(_OWORD *)(a1 + 1832) = v114;
  *(_OWORD *)(a1 + 1816) = v113;
  *(_QWORD *)(a1 + 1912) = v119;
  *(_OWORD *)(a1 + 1896) = v118;
  *(_OWORD *)(a1 + 1880) = v117;
  *(_OWORD *)(a1 + 1864) = v116;
  memcpy((void *)(a1 + 1920), v120, 0x350uLL);
  sub_10065C560(a1 + 2768, &v121);
  *(_OWORD *)(a1 + 2944) = v135;
  *(_OWORD *)(a1 + 2960) = v136;
  *(_OWORD *)(a1 + 2976) = v137;
  *(_QWORD *)(a1 + 2992) = v138;
  v3 = *(void **)(a1 + 3000);
  if (v3)
  {
    *(_QWORD *)(a1 + 3008) = v3;
    operator delete(v3);
  }
  *(_QWORD *)(a1 + 3000) = v139;
  *(_OWORD *)(a1 + 3008) = v140;
  v140 = 0uLL;
  v139 = 0;
  *(_WORD *)(a1 + 3024) = v141;
  if (v134 < 0)
    operator delete(__p);
  if (v132 < 0)
    operator delete(v131);
  if (v130 < 0)
    operator delete(v129);
  if (v128 < 0)
    operator delete(v127);
  if (v126 < 0)
    operator delete(v125);
  if (v124 < 0)
    operator delete(v123);
  if (v122 < 0)
    operator delete((void *)v121);
  return sub_100739A38((uint64_t)v7 + 8);
}

uint64_t sub_10115B500(uint64_t result, int a2, double a3)
{
  double v3;

  v3 = *(double *)(result + 2992);
  if (a2)
  {
    if (v3 >= 0.0)
      return result;
LABEL_6:
    *(double *)(result + 2992) = a3;
    return result;
  }
  if (v3 > 0.0)
  {
    *(_DWORD *)(result + 1560) += vabdd_f64(a3, v3);
    a3 = -1.0;
    goto LABEL_6;
  }
  return result;
}

void sub_10115B53C(uint64_t a1, double a2)
{
  double v4;
  NSObject *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  double v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  double v18;
  uint8_t buf[4];
  double v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  double v24;

  if (a2 < 0.0 || (v4 = *(double *)(a1 + 2952), v4 <= 0.0))
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v5 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
    {
      v6 = sub_1001FCBB4();
      v7 = *(_QWORD *)(a1 + 2952);
      *(_DWORD *)buf = 134349568;
      v20 = v6;
      v21 = 2050;
      v22 = v7;
      v23 = 2050;
      v24 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLAccessoryAWD,%{public}.1lf,accessoryDisconnected,AWD not submitted due to invalid time,accessoryConnectedTime,%{public}.1lf,currentTime,%{public}.1lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v8 = qword_1022A0008;
      v9 = sub_1001FCBB4();
      v10 = *(_QWORD *)(a1 + 2952);
      v13 = 134349568;
      v14 = v9;
      v15 = 2050;
      v16 = v10;
      v17 = 2050;
      v18 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 16, "CLAccessoryAWD,%{public}.1lf,accessoryDisconnected,AWD not submitted due to invalid time,accessoryConnectedTime,%{public}.1lf,currentTime,%{public}.1lf", &v13, 32);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLAccessoryAWD::accessoryDisconnected(const CFTimeInterval)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 232) = (a2 - v4);
    sub_10115B784(a1);
  }
}

uint64_t sub_10115B784(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  CFAbsoluteTime v9;
  __int16 v10;
  int v11;
  uint8_t buf[4];
  CFAbsoluteTime Current;
  __int16 v14;
  int v15;

  sub_10115BF64(a1, 1);
  if (*(_DWORD *)(a1 + 232) < 0x3Du)
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v3 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      Current = CFAbsoluteTimeGetCurrent();
      v14 = 1026;
      v15 = 60;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,submitAccessorySessionStats,not submitted,small session,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v5 = qword_1022A0008;
      v8 = 134349312;
      v9 = CFAbsoluteTimeGetCurrent();
      v10 = 1026;
      v11 = 60;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 2, "CLAccessoryAWD,%{public}.1lf,submitAccessorySessionStats,not submitted,small session,%{public}d", &v8, 18);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::submitAccessorySessionStats()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_10115F6C8(v2, a1 + 40);
  }
  return sub_10115AFD4(a1);
}

void sub_10115B980(uint64_t a1, uint64_t a2, int a3)
{
  double v11;
  double v12;
  double v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  double *v19;
  double v20;
  int v21;
  int v22;
  int v23;
  double v24;
  int v25;
  int v26;
  double v27;
  double v28;
  int v29;
  int v30;
  double v31;
  int v32;
  int v33;

  if (*(_DWORD *)(a2 + 96) == 3)
  {
    if (*(double *)(a2 + 52) < 0.0)
      ++*(_DWORD *)(a1 + 1040);
    if (*(double *)(a2 + 68) < 0.0)
      ++*(_DWORD *)(a1 + 936);
    *(_DWORD *)(a1 + 1048) += a3;
    __asm { FMOV            V1.2D, #10.0 }
    *(float64x2_t *)(a1 + 360) = vdivq_f64(vrndmq_f64(vmulq_f64(*(float64x2_t *)(a2 + 4), _Q1)), _Q1);
    ++*(_DWORD *)(a1 + 256);
    v11 = sub_1001FCBB4();
    if (!*(_BYTE *)(a1 + 3024))
    {
      v12 = *(double *)(a1 + 2968);
      if (v12 > 0.0)
      {
        *(_BYTE *)(a1 + 3024) = 1;
        sub_10115BD20(a1 + 264, v11 - v12);
      }
    }
    if (!*(_BYTE *)(a1 + 3025))
    {
      v13 = *(double *)(a1 + 2968);
      if (v13 > 0.0 && (a3 & 1) == 0)
      {
        *(_BYTE *)(a1 + 3025) = 1;
        sub_10115BD20(a1 + 312, v11 - v13);
      }
    }
    v14 = sub_10115A780(*(double *)(a2 + 20));
    sub_10115BDA8(v14, a1 + 432, 1);
    v15 = sub_10115A780(*(double *)(a2 + 68));
    sub_10115BDA8(v15, a1 + 840, 1);
    v16 = sub_10115A780(*(double *)(a2 + 36));
    sub_10115BDA8(v16, a1 + 720, 1);
    if (a3)
    {
      v17 = sub_10115A780(*(double *)(a2 + 20));
      sub_10115BDA8(v17, a1 + 600, 1);
    }
    v18 = sub_10115BE48(a1, *(double *)(a2 + 184), 0.5);
    if (v18)
    {
      v19 = (double *)v18;
      if (*(double *)(v18 + 40) > 0.0 && *(double *)(a2 + 20) > 0.0 && *(_DWORD *)(v18 + 88) == *(_DWORD *)(a2 + 132))
      {
        v20 = sub_10011E634((double *)a1, *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)v18, *(double *)(v18 + 8), 0.0);
        sub_10115BD20(a1 + 480, v20);
        v21 = sub_10115A780(v20);
        sub_10115BDA8(v21, a1 + 408, 1);
        v22 = sub_10115A780(v19[5]);
        sub_10115BDA8(v22, a1 + 456, 1);
        sub_10115BD20(a1 + 528, v19[5]);
        if (a3)
        {
          sub_10115BD20(a1 + 648, v20);
          sub_10115BDA8(v21, a1 + 576, 1);
          v23 = sub_10115A780(v19[5]);
          sub_10115BDA8(v23, a1 + 624, 1);
        }
      }
      if (v19[6] > 0.0 && *(double *)(a2 + 36) > 0.0)
      {
        v24 = vabdd_f64(v19[2], *(double *)(a2 + 28));
        sub_10115BD20(a1 + 768, v24);
        v25 = sub_10115A780(v24);
        sub_10115BDA8(v25, a1 + 696, 1);
        v26 = sub_10115A780(v19[6]);
        sub_10115BDA8(v26, a1 + 744, 1);
      }
      if (v19[7] > 0.0 && *(double *)(a2 + 68) > 0.0)
      {
        v27 = fmod(v19[4] - *(double *)(a2 + 60), 360.0);
        if (v27 < 0.0)
          v27 = v27 + 360.0;
        if (v27 > 180.0)
          v27 = v27 + -360.0;
        v28 = fabs(v27);
        sub_10115BD20(a1 + 888, v28);
        v29 = sub_10115A780(v28);
        sub_10115BDA8(v29, a1 + 816, 1);
        v30 = sub_10115A780(v19[7]);
        sub_10115BDA8(v30, a1 + 864, 1);
      }
      if (v19[8] > 0.0 && *(double *)(a2 + 52) > 0.0)
      {
        v31 = vabdd_f64(v19[3], *(double *)(a2 + 44));
        sub_10115BD20(a1 + 992, v31);
        v32 = sub_10115A880(v31);
        sub_10115BDA8(v32, a1 + 944, 1);
        v33 = sub_10115A880(v19[8]);
        sub_10115BDA8(v33, a1 + 968, 1);
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 1044);
    }
    sub_10115BF64(a1, 0);
  }
}

double sub_10115BD20(uint64_t a1, double a2)
{
  int v2;
  double v3;
  double v4;
  unsigned int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double result;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(double *)a1;
  }
  else
  {
    *(double *)a1 = a2;
    *(double *)(a1 + 8) = a2;
    v3 = a2;
  }
  v4 = fabs(a2);
  if (v4 > fabs(v3))
    *(double *)a1 = a2;
  if (v4 < fabs(*(double *)(a1 + 8)))
    *(double *)(a1 + 8) = a2;
  v5 = v2 + 1;
  *(_DWORD *)(a1 + 16) = v5;
  v6 = *(double *)(a1 + 24);
  v7 = a2 - v6;
  v8 = v6 + (a2 - v6) / (double)v5;
  v9 = *(double *)(a1 + 32) + (a2 - v8) * v7;
  *(double *)(a1 + 24) = v8;
  *(double *)(a1 + 32) = v9;
  result = a2 * a2 / (double)v5 + *(double *)(a1 + 40) - *(double *)(a1 + 40) / (double)v5;
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t *sub_10115BDA8(int a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t *i;
  int v5;
  uint64_t *result;
  int v7;
  unsigned int *v8;

  v3 = a3;
  v7 = a1;
  for (i = *(uint64_t **)(a2 + 8); i; i = (uint64_t *)*i)
  {
    v5 = *((_DWORD *)i + 7);
    if (v5 <= a1)
    {
      if (v5 >= a1)
      {
        v8 = (unsigned int *)&v7;
        result = sub_100136FD4((uint64_t **)a2, &v7, (uint64_t)&unk_101B9EB60, &v8);
        *((_DWORD *)result + 8) += v3;
        return result;
      }
      ++i;
    }
  }
  v8 = (unsigned int *)(a1 | (unint64_t)(a3 << 32));
  return sub_10010E484((uint64_t **)a2, (int *)&v8, (uint64_t *)&v8);
}

uint64_t sub_10115BE48(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 3008);
  v4 = *(_QWORD *)(a1 + 3000);
  if (v3 == v4)
    return 0;
  v8 = 0;
  v9 = 0;
  v10 = -100;
  v11 = *(_QWORD *)(a1 + 3000);
  while (1)
  {
    v12 = v11 + v8;
    v13 = vabdd_f64(*(double *)(v11 + v8 + 72), a2);
    if (v13 > 5.0)
    {
      v14 = v10 + v3 - v11;
      if (v12 + 96 != v3)
      {
        memmove((void *)v12, (const void *)(v12 + 96), v10 + v3 - v11);
        v4 = *(_QWORD *)(a1 + 3000);
      }
      v3 = v11 + v8 + 96 * ((v14 + 4) / 96);
      *(_QWORD *)(a1 + 3008) = v3;
      v11 = v4;
      goto LABEL_8;
    }
    if (v13 < a3)
      return v11 + v8;
LABEL_8:
    ++v9;
    v8 += 96;
    v10 -= 96;
    if (0xAAAAAAAAAAAAAAABLL * ((v3 - v11) >> 5) <= v9)
      return 0;
  }
}

void sub_10115BF64(uint64_t a1, int a2)
{
  CFAbsoluteTime Current;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  _BYTE *v27;
  int v28;
  int v29;
  int v30;
  _BYTE *v31;
  _BYTE *v32;
  _DWORD *v33;
  NSObject *v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  int v40;
  _BYTE *v41;
  _BYTE *v42;
  void **v43;
  uint64_t v44;
  NSObject *v45;
  int v46;
  int v47;
  _BYTE *v48;
  int v49;
  _BYTE *v50;
  _BYTE *v51;
  void **v52;
  uint64_t v53;
  NSObject *v54;
  int v55;
  int v56;
  _BYTE *v57;
  _BYTE *v58;
  void **v59;
  int v60;
  int v61;
  void **v62;
  void **v63;
  void **v64;
  uint64_t v65;
  NSObject *v66;
  _BYTE *v67;
  _BYTE *v68;
  void **v69;
  int v70;
  void **v71;
  void **v72;
  void **v73;
  uint64_t v74;
  NSObject *v75;
  _BYTE *v76;
  _BYTE *v77;
  void **v78;
  int v79;
  void **v80;
  void **v81;
  void **v82;
  uint64_t v83;
  NSObject *v84;
  _QWORD *v85;
  _BYTE *v86;
  _BYTE *v87;
  int v88;
  void **v89;
  void **v90;
  void **v91;
  uint64_t v92;
  NSObject *v93;
  _BYTE *v94;
  _BYTE *v95;
  void **v96;
  int v97;
  void **v98;
  void **v99;
  void **v100;
  _DWORD *v101;
  NSObject *v102;
  int v103;
  int v104;
  _QWORD *v105;
  int v106;
  _BYTE *v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  BOOL v115;
  NSObject *v116;
  int v117;
  _BYTE *v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  _BYTE *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  int v133;
  int v134;
  _BYTE *v135;
  _BYTE *v136;
  void **v137;
  char *v138;
  char *v139;
  uint64_t v140;
  int v141;
  _BYTE *v142;
  int v143;
  int v144;
  int v145;
  _BYTE *v146;
  void **v147;
  char *v148;
  char *v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  _BYTE *v154;
  int v155;
  void **v156;
  void **v157;
  void **v158;
  char *v159;
  char *v160;
  uint64_t v161;
  int v162;
  int v163;
  _BYTE *v164;
  int v165;
  void **v166;
  void **v167;
  void **v168;
  char *v169;
  char *v170;
  uint64_t v171;
  int v172;
  int v173;
  _BYTE *v174;
  void **v175;
  void **v176;
  int v177;
  int v178;
  void **v179;
  void **v180;
  void **v181;
  char *v182;
  char *v183;
  uint64_t v184;
  _BYTE *v185;
  void **v186;
  void **v187;
  int v188;
  void **v189;
  void **v190;
  void **v191;
  char *v192;
  char *v193;
  uint64_t v194;
  _BYTE *v195;
  void **v196;
  void **v197;
  int v198;
  void **v199;
  void **v200;
  void **v201;
  char *v202;
  char *v203;
  uint64_t v204;
  _BYTE *v205;
  void **v206;
  int v207;
  void **v208;
  void **v209;
  void **v210;
  char *v211;
  char *v212;
  uint64_t v213;
  _BYTE *v214;
  void **v215;
  void **v216;
  int v217;
  void **v218;
  void **v219;
  void **v220;
  char *v221;
  char *v222;
  uint64_t v223;
  int v224;
  int v225;
  int v226;
  _BYTE *v227;
  char *v228;
  char *v229;
  uint64_t v230;
  int v231;
  void **v232;
  char *v233;
  char *v234;
  uint64_t v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  uint64_t v259;
  void *v260[2];
  char v261;
  void *v262[2];
  char v263;
  void *v264[2];
  char v265;
  void *v266[2];
  char v267;
  _BYTE v268[12];
  __int16 v269;
  int v270;
  __int16 v271;
  void **v272;
  _BYTE __p[12];
  __int16 v274;
  _BYTE v275[48];
  _BYTE v276[10];
  void **v277;
  int v278;
  __int16 v279;
  _BYTE v280[10];
  __int16 v281;
  int v282;
  __int16 v283;
  uint64_t v284;
  __int16 v285;
  uint64_t v286;
  __int16 v287;
  int v288;
  __int16 v289;
  int v290;
  __int16 v291;
  int v292;
  __int16 v293;
  int v294;
  __int16 v295;
  int v296;
  __int16 v297;
  _BYTE *v298;
  uint8_t buf[4];
  CFAbsoluteTime v300;
  __int16 v301;
  _BYTE v302[48];
  _BYTE v303[10];
  void **v304;
  int v305;
  __int16 v306;
  int v307;
  __int16 v308;
  int v309;
  __int16 v310;
  int v311;
  __int16 v312;
  uint64_t v313;
  __int16 v314;
  uint64_t v315;
  __int16 v316;
  int v317;
  __int16 v318;
  int v319;
  __int16 v320;
  int v321;
  __int16 v322;
  int v323;
  __int16 v324;
  int v325;
  __int16 v326;
  _BYTE *v327;

  if (*(double *)(a1 + 2960) <= 0.0 || (a2 & 1) != 0 || sub_1001FCBB4() - *(double *)(a1 + 2960) >= 30.0)
  {
    *(double *)(a1 + 2960) = sub_1001FCBB4();
    Current = CFAbsoluteTimeGetCurrent();
    v258 = a2;
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v5 = qword_1022A0008;
    v259 = a1;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      v6 = (_QWORD *)(a1 + 80);
      if (*(char *)(a1 + 103) < 0)
        v6 = (_QWORD *)*v6;
      v7 = (_QWORD *)(a1 + 104);
      if (*(char *)(a1 + 127) < 0)
        v7 = (_QWORD *)*v7;
      v8 = (_QWORD *)(a1 + 128);
      if (*(char *)(a1 + 151) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_DWORD *)(a1 + 224);
      v10 = *(unsigned __int8 *)(a1 + 228);
      v11 = *(_DWORD *)(a1 + 232);
      v12 = a1;
      v13 = *(_DWORD *)(a1 + 244);
      v236 = *(_DWORD *)(a1 + 236);
      v238 = *(_DWORD *)(a1 + 240);
      v14 = *(_DWORD *)(a1 + 256);
      v15 = *(_DWORD *)(a1 + 248);
      v240 = v14;
      v242 = *(_DWORD *)(v12 + 252);
      v244 = *(_QWORD *)(v12 + 360);
      v246 = *(_QWORD *)(v12 + 368);
      v248 = *(_DWORD *)(v12 + 376);
      v250 = *(_DWORD *)(v12 + 936);
      v256 = *(_DWORD *)(v12 + 1044);
      v252 = *(_DWORD *)(v12 + 1040);
      v254 = *(_DWORD *)(v12 + 1048);
      sub_101160824((_QWORD *)(v12 + 1672), __p);
      if (v275[9] >= 0)
        v16 = __p;
      else
        v16 = *(_BYTE **)__p;
      *(_DWORD *)buf = 134354435;
      v300 = Current;
      v301 = 1026;
      *(_DWORD *)v302 = v258;
      *(_WORD *)&v302[4] = 2081;
      *(_QWORD *)&v302[6] = v6;
      *(_WORD *)&v302[14] = 2081;
      *(_QWORD *)&v302[16] = v7;
      *(_WORD *)&v302[24] = 2081;
      *(_QWORD *)&v302[26] = v8;
      *(_WORD *)&v302[34] = 1026;
      *(_DWORD *)&v302[36] = v9;
      *(_WORD *)&v302[40] = 1026;
      *(_DWORD *)&v302[42] = v10;
      *(_WORD *)&v302[46] = 1026;
      *(_DWORD *)v303 = v11;
      *(_WORD *)&v303[4] = 1026;
      *(_DWORD *)&v303[6] = v13;
      LOWORD(v304) = 1026;
      *(_DWORD *)((char *)&v304 + 2) = v15;
      HIWORD(v304) = 1026;
      v305 = v236;
      v306 = 1026;
      v307 = v238;
      v308 = 1026;
      v309 = v240;
      v310 = 1026;
      v311 = v242;
      v312 = 2049;
      v313 = v244;
      v314 = 2049;
      v315 = v246;
      v316 = 1026;
      v317 = v248;
      v318 = 1026;
      v319 = v250;
      v320 = 1026;
      v321 = v252;
      v322 = 1026;
      v323 = v256;
      v324 = 1026;
      v325 = v254;
      v326 = 2082;
      v327 = v16;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,counts,%{public}.1lf,forceLog,%{public}d,manufacturer,%{private}s,name,%{private}s,model,%{private}s,typeBit,%{public}d,isOnDenyList,%{public}d,accessoryConnectedDuration,%{public}d,carPlay,%{public}d,wirelessCarPlay,%{public}d,numberOfLocSessions,%{public}d,locSessionDuration,%{public}d,numberOfPublishedLoc,%{public}d,shifted,%{public}d,ll,%{private}.2lf,%{private}.2lf,charging,%{public}d,invalidCourse,%{public}d,invalidSpeed,%{public}d,deviceLocUnavailable,%{public}d,deadReckonedCount,%{public}d,unsupportedMsgs,%{public}s", buf, 0xA2u);
      if ((v275[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v17 = v259;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v120 = (_QWORD *)(v259 + 80);
      if (*(char *)(v259 + 103) < 0)
        v120 = (_QWORD *)*v120;
      v121 = (_QWORD *)(v259 + 104);
      if (*(char *)(v259 + 127) < 0)
        v121 = (_QWORD *)*v121;
      v122 = (_QWORD *)(v259 + 128);
      if (*(char *)(v259 + 151) < 0)
        v122 = (_QWORD *)*v122;
      v123 = qword_1022A0008;
      v124 = *(_DWORD *)(v259 + 224);
      v125 = *(unsigned __int8 *)(v259 + 228);
      v126 = *(_DWORD *)(v259 + 232);
      v127 = *(_DWORD *)(v259 + 244);
      v237 = *(_DWORD *)(v259 + 236);
      v239 = *(_DWORD *)(v259 + 240);
      v128 = *(_DWORD *)(v259 + 248);
      v241 = *(_DWORD *)(v259 + 256);
      v243 = *(_DWORD *)(v259 + 252);
      v245 = *(_QWORD *)(v259 + 360);
      v247 = *(_QWORD *)(v259 + 368);
      v249 = *(_DWORD *)(v259 + 376);
      v251 = *(_DWORD *)(v259 + 936);
      v257 = *(_DWORD *)(v259 + 1044);
      v253 = *(_DWORD *)(v259 + 1040);
      v255 = *(_DWORD *)(v259 + 1048);
      sub_101160824((_QWORD *)(v259 + 1672), v268);
      if (SBYTE3(v272) >= 0)
        v129 = v268;
      else
        v129 = *(_BYTE **)v268;
      *(_DWORD *)__p = 134354435;
      *(CFAbsoluteTime *)&__p[4] = Current;
      v274 = 1026;
      *(_DWORD *)v275 = v258;
      *(_WORD *)&v275[4] = 2081;
      *(_QWORD *)&v275[6] = v120;
      *(_WORD *)&v275[14] = 2081;
      *(_QWORD *)&v275[16] = v121;
      *(_WORD *)&v275[24] = 2081;
      *(_QWORD *)&v275[26] = v122;
      *(_WORD *)&v275[34] = 1026;
      *(_DWORD *)&v275[36] = v124;
      *(_WORD *)&v275[40] = 1026;
      *(_DWORD *)&v275[42] = v125;
      *(_WORD *)&v275[46] = 1026;
      *(_DWORD *)v276 = v126;
      *(_WORD *)&v276[4] = 1026;
      *(_DWORD *)&v276[6] = v127;
      LOWORD(v277) = 1026;
      *(_DWORD *)((char *)&v277 + 2) = v128;
      HIWORD(v277) = 1026;
      v278 = v237;
      v279 = 1026;
      *(_DWORD *)v280 = v239;
      *(_WORD *)&v280[4] = 1026;
      *(_DWORD *)&v280[6] = v241;
      v281 = 1026;
      v282 = v243;
      v283 = 2049;
      v284 = v245;
      v285 = 2049;
      v286 = v247;
      v287 = 1026;
      v288 = v249;
      v289 = 1026;
      v290 = v251;
      v291 = 1026;
      v292 = v253;
      v293 = 1026;
      v294 = v257;
      v295 = 1026;
      v296 = v255;
      v297 = 2082;
      v298 = v129;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v123, 2, "CLAccessoryAWD,counts,%{public}.1lf,forceLog,%{public}d,manufacturer,%{private}s,name,%{private}s,model,%{private}s,typeBit,%{public}d,isOnDenyList,%{public}d,accessoryConnectedDuration,%{public}d,carPlay,%{public}d,wirelessCarPlay,%{public}d,numberOfLocSessions,%{public}d,locSessionDuration,%{public}d,numberOfPublishedLoc,%{public}d,shifted,%{public}d,ll,%{private}.2lf,%{private}.2lf,charging,%{public}d,invalidCourse,%{public}d,invalidSpeed,%{public}d,deviceLocUnavailable,%{public}d,deadReckonedCount,%{public}d,unsupportedMsgs,%{public}s", __p, 162);
      v131 = v130;
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v131);
      if (v131 != (char *)buf)
        free(v131);
      v17 = v259;
    }
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v18 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      v19 = *(_DWORD *)(v17 + 236);
      sub_1011609C8(v17 + 264, __p);
      v20 = v275[9];
      v21 = *(_BYTE **)__p;
      sub_1011609C8(v259 + 312, v268);
      v22 = __p;
      if (v20 < 0)
        v22 = v21;
      if (SBYTE3(v272) >= 0)
        v23 = v268;
      else
        v23 = *(_BYTE **)v268;
      *(_DWORD *)buf = 134349826;
      v300 = Current;
      v301 = 1026;
      *(_DWORD *)v302 = v19;
      *(_WORD *)&v302[4] = 2082;
      *(_QWORD *)&v302[6] = v22;
      *(_WORD *)&v302[14] = 2082;
      *(_QWORD *)&v302[16] = v23;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,ttff,%{public}.1lf,numberOfSessions,%{public}d,all,%{public}s,nonDR,%{public}s", buf, 0x26u);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      if ((v275[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v24 = v259;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v132 = qword_1022A0008;
      v133 = *(_DWORD *)(v259 + 236);
      sub_1011609C8(v259 + 264, v268);
      v134 = SBYTE3(v272);
      v135 = *(_BYTE **)v268;
      sub_1011609C8(v259 + 312, v266);
      v136 = v268;
      if (v134 < 0)
        v136 = v135;
      if (v267 >= 0)
        v137 = v266;
      else
        v137 = (void **)v266[0];
      *(_DWORD *)__p = 134349826;
      *(CFAbsoluteTime *)&__p[4] = Current;
      v274 = 1026;
      *(_DWORD *)v275 = v133;
      *(_WORD *)&v275[4] = 2082;
      *(_QWORD *)&v275[6] = v136;
      *(_WORD *)&v275[14] = 2082;
      *(_QWORD *)&v275[16] = v137;
      LODWORD(v235) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v132, 2, "CLAccessoryAWD,ttff,%{public}.1lf,numberOfSessions,%{public}d,all,%{public}s,nonDR,%{public}s", __p, v235);
      v139 = v138;
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v139);
      if (v139 != (char *)buf)
        free(v139);
      v24 = v259;
    }
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v25 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      sub_101160824((_QWORD *)(v24 + 1496), __p);
      v26 = v275[9];
      v27 = *(_BYTE **)__p;
      v28 = *(_DWORD *)(v259 + 1520);
      v29 = *(_DWORD *)(v259 + 1524);
      v30 = *(_DWORD *)(v259 + 1528);
      sub_101160C08((_QWORD *)(v259 + 1536), v268);
      v31 = __p;
      if (v26 < 0)
        v31 = v27;
      if (SBYTE3(v272) >= 0)
        v32 = v268;
      else
        v32 = *(_BYTE **)v268;
      *(_DWORD *)buf = 134350338;
      v300 = Current;
      v301 = 2082;
      *(_QWORD *)v302 = v31;
      *(_WORD *)&v302[8] = 1026;
      *(_DWORD *)&v302[10] = v28;
      *(_WORD *)&v302[14] = 1026;
      *(_DWORD *)&v302[16] = v29;
      *(_WORD *)&v302[20] = 1026;
      *(_DWORD *)&v302[22] = v30;
      *(_WORD *)&v302[26] = 2082;
      *(_QWORD *)&v302[28] = v32;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,locationAppRunTime,%{public}.1lf,%{public}s,appleMapsRoutingEpochCount,%{public}d,reroute,%{public}d,proceedToRoute,%{public}d,appleMapsRoutingTypeHist,%{public}s", buf, 0x32u);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      if ((v275[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v33 = (_DWORD *)v259;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v140 = qword_1022A0008;
      sub_101160824((_QWORD *)(v259 + 1496), v268);
      v141 = SBYTE3(v272);
      v142 = *(_BYTE **)v268;
      v143 = *(_DWORD *)(v259 + 1520);
      v144 = *(_DWORD *)(v259 + 1524);
      v145 = *(_DWORD *)(v259 + 1528);
      sub_101160C08((_QWORD *)(v259 + 1536), v266);
      v146 = v268;
      if (v141 < 0)
        v146 = v142;
      if (v267 >= 0)
        v147 = v266;
      else
        v147 = (void **)v266[0];
      *(_DWORD *)__p = 134350338;
      *(CFAbsoluteTime *)&__p[4] = Current;
      v274 = 2082;
      *(_QWORD *)v275 = v146;
      *(_WORD *)&v275[8] = 1026;
      *(_DWORD *)&v275[10] = v143;
      *(_WORD *)&v275[14] = 1026;
      *(_DWORD *)&v275[16] = v144;
      *(_WORD *)&v275[20] = 1026;
      *(_DWORD *)&v275[22] = v145;
      *(_WORD *)&v275[26] = 2082;
      *(_QWORD *)&v275[28] = v147;
      LODWORD(v235) = 50;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v140, 2, "CLAccessoryAWD,locationAppRunTime,%{public}.1lf,%{public}s,appleMapsRoutingEpochCount,%{public}d,reroute,%{public}d,proceedToRoute,%{public}d,appleMapsRoutingTypeHist,%{public}s", __p, v235);
      v149 = v148;
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v149);
      if (v149 != (char *)buf)
        free(v149);
      v33 = (_DWORD *)v259;
    }
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v34 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      v35 = v33[263];
      v36 = v33[264];
      v37 = (uint64_t)(v33 + 284);
      v38 = v33[265];
      v39 = __p;
      sub_1011609C8(v37, __p);
      if (v275[9] < 0)
        v39 = *(_BYTE **)__p;
      sub_101160C08((_QWORD *)(v259 + 1064), v268);
      v40 = SBYTE3(v272);
      v41 = *(_BYTE **)v268;
      sub_1011609C8(v259 + 1088, v266);
      v42 = v268;
      if (v40 < 0)
        v42 = v41;
      if (v267 >= 0)
        v43 = v266;
      else
        v43 = (void **)v266[0];
      *(_DWORD *)buf = 134350594;
      v300 = Current;
      v301 = 1026;
      *(_DWORD *)v302 = v35;
      *(_WORD *)&v302[4] = 1026;
      *(_DWORD *)&v302[6] = v36;
      *(_WORD *)&v302[10] = 1026;
      *(_DWORD *)&v302[12] = v38;
      *(_WORD *)&v302[16] = 2082;
      *(_QWORD *)&v302[18] = v39;
      *(_WORD *)&v302[26] = 2082;
      *(_QWORD *)&v302[28] = v42;
      *(_WORD *)&v302[36] = 2082;
      *(_QWORD *)&v302[38] = v43;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,gprmc,%{public}.1lf,good,%{public}d,bad,%{public}d,repeated,%{public}d,spacing,%{public}s,latency,%{public}s,latencyHist,%{public}s", buf, 0x3Cu);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      if ((v275[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v44 = v259;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v150 = qword_1022A0008;
      v151 = *(_DWORD *)(v259 + 1052);
      v152 = *(_DWORD *)(v259 + 1056);
      v153 = *(_DWORD *)(v259 + 1060);
      v154 = v268;
      sub_1011609C8(v259 + 1136, v268);
      if (SBYTE3(v272) < 0)
        v154 = *(_BYTE **)v268;
      sub_101160C08((_QWORD *)(v259 + 1064), v266);
      v155 = v267;
      v156 = (void **)v266[0];
      sub_1011609C8(v259 + 1088, v264);
      v157 = v266;
      if (v155 < 0)
        v157 = v156;
      if (v265 >= 0)
        v158 = v264;
      else
        v158 = (void **)v264[0];
      *(_DWORD *)__p = 134350594;
      *(CFAbsoluteTime *)&__p[4] = Current;
      v274 = 1026;
      *(_DWORD *)v275 = v151;
      *(_WORD *)&v275[4] = 1026;
      *(_DWORD *)&v275[6] = v152;
      *(_WORD *)&v275[10] = 1026;
      *(_DWORD *)&v275[12] = v153;
      *(_WORD *)&v275[16] = 2082;
      *(_QWORD *)&v275[18] = v154;
      *(_WORD *)&v275[26] = 2082;
      *(_QWORD *)&v275[28] = v157;
      *(_WORD *)&v275[36] = 2082;
      *(_QWORD *)&v275[38] = v158;
      LODWORD(v235) = 60;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v150, 2, "CLAccessoryAWD,gprmc,%{public}.1lf,good,%{public}d,bad,%{public}d,repeated,%{public}d,spacing,%{public}s,latency,%{public}s,latencyHist,%{public}s", __p, v235);
      v160 = v159;
      if (v265 < 0)
        operator delete(v264[0]);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v160);
      if (v160 != (char *)buf)
        free(v160);
      v44 = v259;
    }
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v45 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      v46 = *(_DWORD *)(v44 + 1184);
      v47 = *(_DWORD *)(v44 + 1188);
      v48 = __p;
      sub_1011609C8(v44 + 1264, __p);
      if (v275[9] < 0)
        v48 = *(_BYTE **)__p;
      sub_101160C08((_QWORD *)(v259 + 1192), v268);
      v49 = SBYTE3(v272);
      v50 = *(_BYTE **)v268;
      sub_1011609C8(v259 + 1216, v266);
      v51 = v268;
      if (v49 < 0)
        v51 = v50;
      if (v267 >= 0)
        v52 = v266;
      else
        v52 = (void **)v266[0];
      *(_DWORD *)buf = 134350338;
      v300 = Current;
      v301 = 1026;
      *(_DWORD *)v302 = v46;
      *(_WORD *)&v302[4] = 1026;
      *(_DWORD *)&v302[6] = v47;
      *(_WORD *)&v302[10] = 2082;
      *(_QWORD *)&v302[12] = v48;
      *(_WORD *)&v302[20] = 2082;
      *(_QWORD *)&v302[22] = v51;
      *(_WORD *)&v302[30] = 2082;
      *(_QWORD *)&v302[32] = v52;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,gpgga,%{public}.1lf,count,%{public}d,repeated,%{public}d,spacing,%{public}s,latency,%{public}s,latencyHist,%{public}s", buf, 0x36u);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      if ((v275[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v53 = v259;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v161 = qword_1022A0008;
      v162 = *(_DWORD *)(v259 + 1184);
      v163 = *(_DWORD *)(v259 + 1188);
      v164 = v268;
      sub_1011609C8(v259 + 1264, v268);
      if (SBYTE3(v272) < 0)
        v164 = *(_BYTE **)v268;
      sub_101160C08((_QWORD *)(v259 + 1192), v266);
      v165 = v267;
      v166 = (void **)v266[0];
      sub_1011609C8(v259 + 1216, v264);
      v167 = v266;
      if (v165 < 0)
        v167 = v166;
      if (v265 >= 0)
        v168 = v264;
      else
        v168 = (void **)v264[0];
      *(_DWORD *)__p = 134350338;
      *(CFAbsoluteTime *)&__p[4] = Current;
      v274 = 1026;
      *(_DWORD *)v275 = v162;
      *(_WORD *)&v275[4] = 1026;
      *(_DWORD *)&v275[6] = v163;
      *(_WORD *)&v275[10] = 2082;
      *(_QWORD *)&v275[12] = v164;
      *(_WORD *)&v275[20] = 2082;
      *(_QWORD *)&v275[22] = v167;
      *(_WORD *)&v275[30] = 2082;
      *(_QWORD *)&v275[32] = v168;
      LODWORD(v235) = 54;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v161, 2, "CLAccessoryAWD,gpgga,%{public}.1lf,count,%{public}d,repeated,%{public}d,spacing,%{public}s,latency,%{public}s,latencyHist,%{public}s", __p, v235);
      v170 = v169;
      if (v265 < 0)
        operator delete(v264[0]);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v170);
      if (v170 != (char *)buf)
        free(v170);
      v53 = v259;
    }
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v54 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      v55 = *(_DWORD *)(v53 + 1312);
      v56 = *(_DWORD *)(v53 + 1316);
      sub_1011609C8(v53 + 1392, __p);
      if (v275[9] >= 0)
        v57 = __p;
      else
        v57 = *(_BYTE **)__p;
      sub_1011609C8(v259 + 1344, v268);
      if (SBYTE3(v272) >= 0)
        v58 = v268;
      else
        v58 = *(_BYTE **)v268;
      sub_101160C08((_QWORD *)(v259 + 1320), v266);
      if (v267 >= 0)
        v59 = v266;
      else
        v59 = (void **)v266[0];
      v60 = *(_DWORD *)(v259 + 1440);
      sub_101160C08((_QWORD *)(v259 + 1448), v264);
      v61 = v265;
      v62 = (void **)v264[0];
      sub_101160D94((_QWORD *)(v259 + 1472), v262);
      v63 = v264;
      if (v61 < 0)
        v63 = v62;
      if (v263 >= 0)
        v64 = v262;
      else
        v64 = (void **)v262[0];
      *(_DWORD *)buf = 134351106;
      v300 = Current;
      v301 = 1026;
      *(_DWORD *)v302 = v55;
      *(_WORD *)&v302[4] = 1026;
      *(_DWORD *)&v302[6] = v56;
      *(_WORD *)&v302[10] = 2082;
      *(_QWORD *)&v302[12] = v57;
      *(_WORD *)&v302[20] = 2082;
      *(_QWORD *)&v302[22] = v58;
      *(_WORD *)&v302[30] = 2082;
      *(_QWORD *)&v302[32] = v59;
      *(_WORD *)&v302[40] = 1026;
      *(_DWORD *)&v302[42] = v60;
      *(_WORD *)&v302[46] = 2082;
      *(_QWORD *)v303 = v63;
      *(_WORD *)&v303[8] = 2082;
      v304 = v64;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,pascd,%{public}.1lf,count,%{public}d,repeated,%{public}d,spacing,%{public}s,latency,%{public}s,latencyHist,%{public}s,slipCount,%{public}d,transmisionHist,%{public}s,sampleCountHist,%{public}s", buf, 0x50u);
      if (v263 < 0)
        operator delete(v262[0]);
      if (v265 < 0)
        operator delete(v264[0]);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      if ((v275[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v65 = v259;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v171 = qword_1022A0008;
      v172 = *(_DWORD *)(v259 + 1312);
      v173 = *(_DWORD *)(v259 + 1316);
      sub_1011609C8(v259 + 1392, v268);
      if (SBYTE3(v272) >= 0)
        v174 = v268;
      else
        v174 = *(_BYTE **)v268;
      sub_1011609C8(v259 + 1344, v266);
      if (v267 >= 0)
        v175 = v266;
      else
        v175 = (void **)v266[0];
      sub_101160C08((_QWORD *)(v259 + 1320), v264);
      if (v265 >= 0)
        v176 = v264;
      else
        v176 = (void **)v264[0];
      v177 = *(_DWORD *)(v259 + 1440);
      sub_101160C08((_QWORD *)(v259 + 1448), v262);
      v178 = v263;
      v179 = (void **)v262[0];
      sub_101160D94((_QWORD *)(v259 + 1472), v260);
      v180 = v262;
      if (v178 < 0)
        v180 = v179;
      if (v261 >= 0)
        v181 = v260;
      else
        v181 = (void **)v260[0];
      *(_DWORD *)__p = 134351106;
      *(CFAbsoluteTime *)&__p[4] = Current;
      v274 = 1026;
      *(_DWORD *)v275 = v172;
      *(_WORD *)&v275[4] = 1026;
      *(_DWORD *)&v275[6] = v173;
      *(_WORD *)&v275[10] = 2082;
      *(_QWORD *)&v275[12] = v174;
      *(_WORD *)&v275[20] = 2082;
      *(_QWORD *)&v275[22] = v175;
      *(_WORD *)&v275[30] = 2082;
      *(_QWORD *)&v275[32] = v176;
      *(_WORD *)&v275[40] = 1026;
      *(_DWORD *)&v275[42] = v177;
      *(_WORD *)&v275[46] = 2082;
      *(_QWORD *)v276 = v180;
      *(_WORD *)&v276[8] = 2082;
      v277 = v181;
      LODWORD(v235) = 80;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v171, 2, "CLAccessoryAWD,pascd,%{public}.1lf,count,%{public}d,repeated,%{public}d,spacing,%{public}s,latency,%{public}s,latencyHist,%{public}s,slipCount,%{public}d,transmisionHist,%{public}s,sampleCountHist,%{public}s", __p, v235);
      v183 = v182;
      if (v261 < 0)
        operator delete(v260[0]);
      if (v263 < 0)
        operator delete(v262[0]);
      if (v265 < 0)
        operator delete(v264[0]);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v183);
      if (v183 != (char *)buf)
        free(v183);
      v65 = v259;
    }
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v66 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      sub_1011609C8(v65 + 480, __p);
      if (v275[9] >= 0)
        v67 = __p;
      else
        v67 = *(_BYTE **)__p;
      v68 = v268;
      sub_1011609C8(v259 + 768, v268);
      if (SBYTE3(v272) < 0)
        v68 = *(_BYTE **)v268;
      v69 = v266;
      sub_1011609C8(v259 + 888, v266);
      if (v267 < 0)
        v69 = (void **)v266[0];
      sub_1011609C8(v259 + 992, v264);
      v70 = v265;
      v71 = (void **)v264[0];
      sub_1011609C8(v259 + 648, v262);
      v72 = v264;
      if (v70 < 0)
        v72 = v71;
      if (v263 >= 0)
        v73 = v262;
      else
        v73 = (void **)v262[0];
      *(_DWORD *)buf = 134350338;
      v300 = Current;
      v301 = 2082;
      *(_QWORD *)v302 = v67;
      *(_WORD *)&v302[8] = 2082;
      *(_QWORD *)&v302[10] = v68;
      *(_WORD *)&v302[18] = 2082;
      *(_QWORD *)&v302[20] = v69;
      *(_WORD *)&v302[28] = 2082;
      *(_QWORD *)&v302[30] = v72;
      *(_WORD *)&v302[38] = 2082;
      *(_QWORD *)&v302[40] = v73;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,diffStats,%{public}.1lf,2D,%{public}s,alt,%{public}s,course,%{public}s,speed,%{public}s,2DDR,%{public}s,", buf, 0x3Eu);
      if (v263 < 0)
        operator delete(v262[0]);
      if (v265 < 0)
        operator delete(v264[0]);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      if ((v275[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v74 = v259;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v184 = qword_1022A0008;
      sub_1011609C8(v259 + 480, v268);
      if (SBYTE3(v272) >= 0)
        v185 = v268;
      else
        v185 = *(_BYTE **)v268;
      v186 = v266;
      sub_1011609C8(v259 + 768, v266);
      if (v267 < 0)
        v186 = (void **)v266[0];
      v187 = v264;
      sub_1011609C8(v259 + 888, v264);
      if (v265 < 0)
        v187 = (void **)v264[0];
      sub_1011609C8(v259 + 992, v262);
      v188 = v263;
      v189 = (void **)v262[0];
      sub_1011609C8(v259 + 648, v260);
      v190 = v262;
      if (v188 < 0)
        v190 = v189;
      if (v261 >= 0)
        v191 = v260;
      else
        v191 = (void **)v260[0];
      *(_DWORD *)__p = 134350338;
      *(CFAbsoluteTime *)&__p[4] = Current;
      v274 = 2082;
      *(_QWORD *)v275 = v185;
      *(_WORD *)&v275[8] = 2082;
      *(_QWORD *)&v275[10] = v186;
      *(_WORD *)&v275[18] = 2082;
      *(_QWORD *)&v275[20] = v187;
      *(_WORD *)&v275[28] = 2082;
      *(_QWORD *)&v275[30] = v190;
      *(_WORD *)&v275[38] = 2082;
      *(_QWORD *)&v275[40] = v191;
      LODWORD(v235) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v184, 2, "CLAccessoryAWD,diffStats,%{public}.1lf,2D,%{public}s,alt,%{public}s,course,%{public}s,speed,%{public}s,2DDR,%{public}s,", __p, v235);
      v193 = v192;
      if (v261 < 0)
        operator delete(v260[0]);
      if (v263 < 0)
        operator delete(v262[0]);
      if (v265 < 0)
        operator delete(v264[0]);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v193);
      if (v193 != (char *)buf)
        free(v193);
      v74 = v259;
    }
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v75 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      sub_101160C08((_QWORD *)(v74 + 408), __p);
      if (v275[9] >= 0)
        v76 = __p;
      else
        v76 = *(_BYTE **)__p;
      v77 = v268;
      sub_101160C08((_QWORD *)(v259 + 696), v268);
      if (SBYTE3(v272) < 0)
        v77 = *(_BYTE **)v268;
      v78 = v266;
      sub_101160C08((_QWORD *)(v259 + 816), v266);
      if (v267 < 0)
        v78 = (void **)v266[0];
      sub_101160C08((_QWORD *)(v259 + 944), v264);
      v79 = v265;
      v80 = (void **)v264[0];
      sub_101160C08((_QWORD *)(v259 + 576), v262);
      v81 = v264;
      if (v79 < 0)
        v81 = v80;
      if (v263 >= 0)
        v82 = v262;
      else
        v82 = (void **)v262[0];
      *(_DWORD *)buf = 134350338;
      v300 = Current;
      v301 = 2082;
      *(_QWORD *)v302 = v76;
      *(_WORD *)&v302[8] = 2082;
      *(_QWORD *)&v302[10] = v77;
      *(_WORD *)&v302[18] = 2082;
      *(_QWORD *)&v302[20] = v78;
      *(_WORD *)&v302[28] = 2082;
      *(_QWORD *)&v302[30] = v81;
      *(_WORD *)&v302[38] = 2082;
      *(_QWORD *)&v302[40] = v82;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,diffHist,%{public}.1lf,2D,%{public}s,alt,%{public}s,course,%{public}s,speed,%{public}s,2DDR,%{public}s", buf, 0x3Eu);
      if (v263 < 0)
        operator delete(v262[0]);
      if (v265 < 0)
        operator delete(v264[0]);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      if ((v275[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v83 = v259;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v194 = qword_1022A0008;
      sub_101160C08((_QWORD *)(v259 + 408), v268);
      if (SBYTE3(v272) >= 0)
        v195 = v268;
      else
        v195 = *(_BYTE **)v268;
      v196 = v266;
      sub_101160C08((_QWORD *)(v259 + 696), v266);
      if (v267 < 0)
        v196 = (void **)v266[0];
      v197 = v264;
      sub_101160C08((_QWORD *)(v259 + 816), v264);
      if (v265 < 0)
        v197 = (void **)v264[0];
      sub_101160C08((_QWORD *)(v259 + 944), v262);
      v198 = v263;
      v199 = (void **)v262[0];
      sub_101160C08((_QWORD *)(v259 + 576), v260);
      v200 = v262;
      if (v198 < 0)
        v200 = v199;
      if (v261 >= 0)
        v201 = v260;
      else
        v201 = (void **)v260[0];
      *(_DWORD *)__p = 134350338;
      *(CFAbsoluteTime *)&__p[4] = Current;
      v274 = 2082;
      *(_QWORD *)v275 = v195;
      *(_WORD *)&v275[8] = 2082;
      *(_QWORD *)&v275[10] = v196;
      *(_WORD *)&v275[18] = 2082;
      *(_QWORD *)&v275[20] = v197;
      *(_WORD *)&v275[28] = 2082;
      *(_QWORD *)&v275[30] = v200;
      *(_WORD *)&v275[38] = 2082;
      *(_QWORD *)&v275[40] = v201;
      LODWORD(v235) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v194, 2, "CLAccessoryAWD,diffHist,%{public}.1lf,2D,%{public}s,alt,%{public}s,course,%{public}s,speed,%{public}s,2DDR,%{public}s", __p, v235);
      v203 = v202;
      if (v261 < 0)
        operator delete(v260[0]);
      if (v263 < 0)
        operator delete(v262[0]);
      if (v265 < 0)
        operator delete(v264[0]);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v203);
      if (v203 != (char *)buf)
        free(v203);
      v83 = v259;
    }
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v84 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      v85 = (_QWORD *)(v83 + 432);
      v86 = __p;
      sub_101160C08(v85, __p);
      if (v275[9] < 0)
        v86 = *(_BYTE **)__p;
      v87 = v268;
      sub_101160C08((_QWORD *)(v259 + 720), v268);
      if (SBYTE3(v272) < 0)
        v87 = *(_BYTE **)v268;
      sub_101160C08((_QWORD *)(v259 + 840), v266);
      v88 = v267;
      v89 = (void **)v266[0];
      sub_101160C08((_QWORD *)(v259 + 600), v264);
      v90 = v266;
      if (v88 < 0)
        v90 = v89;
      if (v265 >= 0)
        v91 = v264;
      else
        v91 = (void **)v264[0];
      *(_DWORD *)buf = 134350082;
      v300 = Current;
      v301 = 2082;
      *(_QWORD *)v302 = v86;
      *(_WORD *)&v302[8] = 2082;
      *(_QWORD *)&v302[10] = v87;
      *(_WORD *)&v302[18] = 2082;
      *(_QWORD *)&v302[20] = v90;
      *(_WORD *)&v302[28] = 2082;
      *(_QWORD *)&v302[30] = v91;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,accessoryReportedUnc,%{public}.1lf,2D,%{public}s,alt,%{public}s,course,%{public}s,2DDR,%{public}s", buf, 0x34u);
      if (v265 < 0)
        operator delete(v264[0]);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      if ((v275[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v92 = v259;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v204 = qword_1022A0008;
      v205 = v268;
      sub_101160C08((_QWORD *)(v259 + 432), v268);
      if (SBYTE3(v272) < 0)
        v205 = *(_BYTE **)v268;
      v206 = v266;
      sub_101160C08((_QWORD *)(v259 + 720), v266);
      if (v267 < 0)
        v206 = (void **)v266[0];
      sub_101160C08((_QWORD *)(v259 + 840), v264);
      v207 = v265;
      v208 = (void **)v264[0];
      sub_101160C08((_QWORD *)(v259 + 600), v262);
      v209 = v264;
      if (v207 < 0)
        v209 = v208;
      if (v263 >= 0)
        v210 = v262;
      else
        v210 = (void **)v262[0];
      *(_DWORD *)__p = 134350082;
      *(CFAbsoluteTime *)&__p[4] = Current;
      v274 = 2082;
      *(_QWORD *)v275 = v205;
      *(_WORD *)&v275[8] = 2082;
      *(_QWORD *)&v275[10] = v206;
      *(_WORD *)&v275[18] = 2082;
      *(_QWORD *)&v275[20] = v209;
      *(_WORD *)&v275[28] = 2082;
      *(_QWORD *)&v275[30] = v210;
      LODWORD(v235) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v204, 2, "CLAccessoryAWD,accessoryReportedUnc,%{public}.1lf,2D,%{public}s,alt,%{public}s,course,%{public}s,2DDR,%{public}s", __p, v235);
      v212 = v211;
      if (v263 < 0)
        operator delete(v262[0]);
      if (v265 < 0)
        operator delete(v264[0]);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v212);
      if (v212 != (char *)buf)
        free(v212);
      v92 = v259;
    }
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v93 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      sub_101160C08((_QWORD *)(v92 + 456), __p);
      if (v275[9] >= 0)
        v94 = __p;
      else
        v94 = *(_BYTE **)__p;
      v95 = v268;
      sub_101160C08((_QWORD *)(v259 + 744), v268);
      if (SBYTE3(v272) < 0)
        v95 = *(_BYTE **)v268;
      v96 = v266;
      sub_101160C08((_QWORD *)(v259 + 864), v266);
      if (v267 < 0)
        v96 = (void **)v266[0];
      sub_101160C08((_QWORD *)(v259 + 968), v264);
      v97 = v265;
      v98 = (void **)v264[0];
      sub_101160C08((_QWORD *)(v259 + 624), v262);
      v99 = v264;
      if (v97 < 0)
        v99 = v98;
      if (v263 >= 0)
        v100 = v262;
      else
        v100 = (void **)v262[0];
      *(_DWORD *)buf = 134350338;
      v300 = Current;
      v301 = 2082;
      *(_QWORD *)v302 = v94;
      *(_WORD *)&v302[8] = 2082;
      *(_QWORD *)&v302[10] = v95;
      *(_WORD *)&v302[18] = 2082;
      *(_QWORD *)&v302[20] = v96;
      *(_WORD *)&v302[28] = 2082;
      *(_QWORD *)&v302[30] = v99;
      *(_WORD *)&v302[38] = 2082;
      *(_QWORD *)&v302[40] = v100;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,deviceReportedUnc,%{public}.1lf,2D,%{public}s,alt,%{public}s,course,%{public}s,speed,%{public}s,2DDR,%{public}s", buf, 0x3Eu);
      if (v263 < 0)
        operator delete(v262[0]);
      if (v265 < 0)
        operator delete(v264[0]);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      if ((v275[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v101 = (_DWORD *)v259;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v213 = qword_1022A0008;
      sub_101160C08((_QWORD *)(v259 + 456), v268);
      if (SBYTE3(v272) >= 0)
        v214 = v268;
      else
        v214 = *(_BYTE **)v268;
      v215 = v266;
      sub_101160C08((_QWORD *)(v259 + 744), v266);
      if (v267 < 0)
        v215 = (void **)v266[0];
      v216 = v264;
      sub_101160C08((_QWORD *)(v259 + 864), v264);
      if (v265 < 0)
        v216 = (void **)v264[0];
      sub_101160C08((_QWORD *)(v259 + 968), v262);
      v217 = v263;
      v218 = (void **)v262[0];
      sub_101160C08((_QWORD *)(v259 + 624), v260);
      v219 = v262;
      if (v217 < 0)
        v219 = v218;
      if (v261 >= 0)
        v220 = v260;
      else
        v220 = (void **)v260[0];
      *(_DWORD *)__p = 134350338;
      *(CFAbsoluteTime *)&__p[4] = Current;
      v274 = 2082;
      *(_QWORD *)v275 = v214;
      *(_WORD *)&v275[8] = 2082;
      *(_QWORD *)&v275[10] = v215;
      *(_WORD *)&v275[18] = 2082;
      *(_QWORD *)&v275[20] = v216;
      *(_WORD *)&v275[28] = 2082;
      *(_QWORD *)&v275[30] = v219;
      *(_WORD *)&v275[38] = 2082;
      *(_QWORD *)&v275[40] = v220;
      LODWORD(v235) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v213, 2, "CLAccessoryAWD,deviceReportedUnc,%{public}.1lf,2D,%{public}s,alt,%{public}s,course,%{public}s,speed,%{public}s,2DDR,%{public}s", __p, v235);
      v222 = v221;
      if (v261 < 0)
        operator delete(v260[0]);
      if (v263 < 0)
        operator delete(v262[0]);
      if (v265 < 0)
        operator delete(v264[0]);
      if (v267 < 0)
        operator delete(v266[0]);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v222);
      if (v222 != (char *)buf)
        free(v222);
      v101 = (_DWORD *)v259;
    }
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v102 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      v103 = v101[390];
      v104 = v101[391];
      v105 = v101 + 394;
      v106 = v101[392];
      sub_101160C08(v105, __p);
      v107 = v275[9] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 134350082;
      v300 = Current;
      v301 = 1026;
      *(_DWORD *)v302 = v103;
      *(_WORD *)&v302[4] = 1026;
      *(_DWORD *)&v302[6] = v104;
      *(_WORD *)&v302[10] = 1026;
      *(_DWORD *)&v302[12] = v106;
      *(_WORD *)&v302[16] = 2082;
      *(_QWORD *)&v302[18] = v107;
      _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,nmeaScreening,%{public}.1lf,enabledDuration,%{public}d,screened,%{public}d,rejected,%{public}d,locationHist,%{public}s", buf, 0x28u);
      if ((v275[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v223 = qword_1022A0008;
      v224 = *(_DWORD *)(v259 + 1560);
      v225 = *(_DWORD *)(v259 + 1564);
      v226 = *(_DWORD *)(v259 + 1568);
      sub_101160C08((_QWORD *)(v259 + 1576), v268);
      if (SBYTE3(v272) >= 0)
        v227 = v268;
      else
        v227 = *(_BYTE **)v268;
      *(_DWORD *)__p = 134350082;
      *(CFAbsoluteTime *)&__p[4] = Current;
      v274 = 1026;
      *(_DWORD *)v275 = v224;
      *(_WORD *)&v275[4] = 1026;
      *(_DWORD *)&v275[6] = v225;
      *(_WORD *)&v275[10] = 1026;
      *(_DWORD *)&v275[12] = v226;
      *(_WORD *)&v275[16] = 2082;
      *(_QWORD *)&v275[18] = v227;
      LODWORD(v235) = 40;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v223, 2, "CLAccessoryAWD,nmeaScreening,%{public}.1lf,enabledDuration,%{public}d,screened,%{public}d,rejected,%{public}d,locationHist,%{public}s", __p, v235);
      v229 = v228;
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v229);
      if (v229 != (char *)buf)
        free(v229);
    }
    sub_100263E50((uint64_t)__p);
    v108 = *(_QWORD **)(v259 + 384);
    if (v108 != (_QWORD *)(v259 + 392))
    {
      do
      {
        v109 = *(_QWORD *)&v275[2];
        *(_DWORD *)&v275[*(_QWORD *)(*(_QWORD *)&v275[2] - 24) + 10] |= 4u;
        *(_QWORD *)&v275[*(_QWORD *)(v109 - 24) + 18] = 0;
        v110 = (_QWORD *)std::ostream::operator<<(&v275[2], *((unsigned int *)v108 + 7));
        v111 = sub_100263F7C(v110, (uint64_t)",", 1);
        v112 = (_QWORD *)std::ostream::operator<<(v111, *((unsigned int *)v108 + 8));
        sub_100263F7C(v112, (uint64_t)",", 1);
        v113 = (_QWORD *)v108[1];
        if (v113)
        {
          do
          {
            v114 = v113;
            v113 = (_QWORD *)*v113;
          }
          while (v113);
        }
        else
        {
          do
          {
            v114 = (_QWORD *)v108[2];
            v115 = *v114 == (_QWORD)v108;
            v108 = v114;
          }
          while (!v115);
        }
        v108 = v114;
      }
      while (v114 != (_QWORD *)(v259 + 392));
    }
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v116 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      v117 = *(_DWORD *)(v259 + 376);
      std::stringbuf::str(v268, &v275[10]);
      v118 = SBYTE3(v272) >= 0 ? v268 : *(_BYTE **)v268;
      *(_DWORD *)buf = 134349570;
      v300 = Current;
      v301 = 1026;
      *(_DWORD *)v302 = v117;
      *(_WORD *)&v302[4] = 2082;
      *(_QWORD *)&v302[6] = v118;
      _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,battery,%{public}.1lf,charging,%{public}d,chargingHist,%{public}s,", buf, 0x1Cu);
      if (SBYTE3(v272) < 0)
        operator delete(*(void **)v268);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v230 = qword_1022A0008;
      v231 = *(_DWORD *)(v259 + 376);
      std::stringbuf::str(v266, &v275[10]);
      if (v267 >= 0)
        v232 = v266;
      else
        v232 = (void **)v266[0];
      *(_DWORD *)v268 = 134349570;
      *(CFAbsoluteTime *)&v268[4] = Current;
      v269 = 1026;
      v270 = v231;
      v271 = 2082;
      v272 = v232;
      LODWORD(v235) = 28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v230, 2, "CLAccessoryAWD,battery,%{public}.1lf,charging,%{public}d,chargingHist,%{public}s,", v268, v235);
      v234 = v233;
      if (v267 < 0)
        operator delete(v266[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v234);
      if (v234 != (char *)buf)
        free(v234);
    }
    *(_QWORD *)&v275[2] = v119;
    if (SHIBYTE(v284) < 0)
      operator delete(*(void **)&v280[2]);
    std::streambuf::~streambuf(&v275[10]);
    std::ios::~ios(&v289);
  }
}

void sub_10115E72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  sub_1018B38B4((uint64_t)&a47);
  _Unwind_Resume(a1);
}

uint64_t *sub_10115E8BC(uint64_t *result, int a2, double a3, double a4)
{
  double v4;
  uint64_t v5;

  if (a4 > 0.0)
  {
    v4 = *((double *)result + 369);
    if (v4 > 0.0)
    {
      if (v4 > a4)
        a4 = *((double *)result + 369);
      v5 = vabdd_f64(a3, a4);
      *((_DWORD *)result + 94) += v5;
      return sub_10115BDA8(a2, (uint64_t)(result + 48), v5);
    }
  }
  return result;
}

uint64_t sub_10115E900(uint64_t result, int a2, double a3)
{
  double v3;

  v3 = *(double *)(result + 2976);
  if (a2)
  {
    if (v3 >= 0.0)
      return result;
LABEL_6:
    *(double *)(result + 2976) = a3;
    return result;
  }
  if (v3 > 0.0)
  {
    *(_DWORD *)(result + 244) += vabdd_f64(a3, v3);
    a3 = -1.0;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_10115E93C(uint64_t result, int a2, double a3)
{
  double v3;

  v3 = *(double *)(result + 2984);
  if (a2)
  {
    if (v3 >= 0.0)
      return result;
LABEL_6:
    *(double *)(result + 2984) = a3;
    return result;
  }
  if (v3 > 0.0)
  {
    *(_DWORD *)(result + 248) += vabdd_f64(a3, v3);
    a3 = -1.0;
    goto LABEL_6;
  }
  return result;
}

void sub_10115E978(uint64_t a1, const std::string *a2)
{
  char v2;
  int64_t size;
  const std::string *v4;
  char *v7;
  size_t v8;
  std::string *v9;
  char *v10;
  char v11;
  int64_t v12;
  std::string *p_str;
  _BYTE *v14;
  std::string *v15;
  _BYTE *v16;
  std::string::size_type v17;
  std::string __p;
  std::string v19;
  std::string __str;
  char v21;

  v2 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v2 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (v2 >= 0)
    v4 = a2;
  else
    v4 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (size >= 1)
  {
    v7 = (char *)v4 + size;
    v8 = size;
    v9 = (std::string *)v4;
    while (1)
    {
      v10 = (char *)memchr(v9, 36, v8);
      if (!v10)
        return;
      if (*v10 == 36)
        break;
      v9 = (std::string *)(v10 + 1);
      v8 = v7 - (char *)v9;
      if (v7 - (char *)v9 < 1)
        return;
    }
    if (v10 != v7 && v10 - (char *)v4 != -1)
    {
      std::string::basic_string(&__str, a2, v10 - (char *)v4, size, (std::allocator<char> *)&v19);
      v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v12 = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v12 >= 1)
      {
        v14 = (char *)p_str + v12;
        v15 = p_str;
        while (1)
        {
          v16 = memchr(v15, 44, v12);
          if (!v16)
            goto LABEL_43;
          if (*v16 == 44)
            break;
          v15 = (std::string *)(v16 + 1);
          v12 = v14 - (_BYTE *)v15;
          if (v14 - (_BYTE *)v15 < 1)
            goto LABEL_43;
        }
        if (v16 != v14 && v16 - (_BYTE *)p_str != -1)
        {
          std::string::basic_string(&v19, &__str, 0, v16 - (_BYTE *)p_str, (std::allocator<char> *)&v21);
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          {
            v17 = v19.__r_.__value_.__l.__size_;
            if (!v19.__r_.__value_.__l.__size_)
            {
LABEL_40:
              if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v19.__r_.__value_.__l.__data_);
              goto LABEL_42;
            }
          }
          else
          {
            if (!*((_BYTE *)&v19.__r_.__value_.__s + 23))
            {
LABEL_42:
              v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              goto LABEL_43;
            }
            v17 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
          }
          if (v17 <= 9 && *(_QWORD *)(a1 + 1688) <= 0x13uLL)
          {
            if ((*((_BYTE *)&v19.__r_.__value_.__s + 23) & 0x80) != 0)
              sub_100115CE4(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
            else
              __p = v19;
            sub_10115EB94((void **)&__p.__r_.__value_.__l.__data_, (uint64_t **)(a1 + 1672), 1);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_40;
        }
      }
LABEL_43:
      if (v11 < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void sub_10115EB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void sub_10115EB94(void **a1, uint64_t **a2, int a3)
{
  uint64_t *v6;
  void *__p[2];
  void *v8;
  int v9;

  if (sub_1001876D0((uint64_t)a2, (const void **)a1))
  {
    __p[0] = a1;
    v6 = sub_10055D064(a2, (const void **)a1, (uint64_t)&unk_101B9EB60, (__int128 **)__p);
    *((_DWORD *)v6 + 14) += a3;
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
    {
      sub_100115CE4(__p, *a1, (unint64_t)a1[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a1;
      v8 = a1[2];
    }
    v9 = a3;
    sub_1009FF5E8(a2, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
}

void sub_10115EC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10115EC70(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  float v6;
  int v7;
  int v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double Current;
  double v15;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  CFAbsoluteTime v28;
  uint8_t buf[4];
  CFAbsoluteTime v30;

  ++*(_DWORD *)(a1 + 1184);
  if (sub_100657478(a2, 1u))
  {
    if (*(double *)(a1 + 1696) <= 0.0 || vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 2944)) >= 120.0)
    {
      v4 = *(_DWORD *)a2;
      v5 = *(_DWORD *)(a2 + 4);
      v6 = *(float *)(a2 + 8);
      v7 = -1;
      v8 = -1;
      v9 = -1;
    }
    else
    {
      v4 = *(_DWORD *)a2;
      v5 = *(_DWORD *)(a2 + 4);
      v6 = *(float *)(a2 + 8);
      v7 = *(_DWORD *)(a1 + 1776);
      v8 = *(_DWORD *)(a1 + 1780);
      v9 = *(_DWORD *)(a1 + 1784) + 2000;
    }
    sub_10115A994(v4, v5, v7, v8, v9, v6);
    v11 = v10;
    v12 = *(double *)(a1 + 1808);
    if (v12 > 0.0 && *(_DWORD *)(a1 + 1184) >= 0xBu)
    {
      v13 = vabdd_f64(v11, v12);
      if (v13 < 43200.0)
        sub_10115BD20(a1 + 1264, v13);
    }
    Current = CFAbsoluteTimeGetCurrent();
    if (vabdd_f64(Current, v11) < 43200.0)
    {
      v15 = Current - v11;
      if (Current - v11 < 0.0 || v15 > 1.0)
      {
        if (v15 <= 2.0)
        {
          v21 = 2;
        }
        else if (v15 <= 3.0)
        {
          v21 = 3;
        }
        else if (v15 <= 5.0)
        {
          v21 = 4;
        }
        else
        {
          v21 = 5;
        }
      }
      else
      {
        v21 = 1;
      }
      sub_10115BDA8(v21, a1 + 1192, 1);
      sub_10115BD20(a1 + 1216, v15);
    }
    *(double *)(a1 + 1808) = v11;
    v22 = *(_OWORD *)a2;
    v23 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 1848) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 1832) = v23;
    *(_OWORD *)(a1 + 1816) = v22;
    v24 = *(_OWORD *)(a2 + 48);
    v25 = *(_OWORD *)(a2 + 64);
    v26 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 1912) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 1896) = v26;
    *(_OWORD *)(a1 + 1880) = v25;
    *(_OWORD *)(a1 + 1864) = v24;
  }
  else
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v17 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      v30 = CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,handleGPGGA,Unexpectedly invalid GPGGA string", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v18 = qword_1022A0008;
      v27 = 134349056;
      v28 = CFAbsoluteTimeGetCurrent();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 2, "CLAccessoryAWD,%{public}.1lf,handleGPGGA,Unexpectedly invalid GPGGA string", &v27, 12);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::handleGPGGA(const CLNmeaGGA &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
}

void sub_10115EF9C(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  CFAbsoluteTime v20;
  uint8_t buf[4];
  CFAbsoluteTime Current;

  ++*(_DWORD *)(a1 + 1052);
  if (sub_100657478(a2, 1u) && sub_100657478(a2, 0x40u))
  {
    sub_10115A994(*(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 72), *(_DWORD *)(a2 + 76), *(_DWORD *)(a2 + 80) + 2000, *(float *)(a2 + 8));
    v5 = v4;
    v6 = *(double *)(a1 + 1696);
    if (v6 > 0.0)
      sub_10115BD20(a1 + 1136, v5 - v6);
    v7 = CFAbsoluteTimeGetCurrent() - v5;
    if (v7 < 0.0 || v7 > 1.0)
    {
      if (v7 <= 2.0)
      {
        v13 = 2;
      }
      else if (v7 <= 3.0)
      {
        v13 = 3;
      }
      else if (v7 <= 5.0)
      {
        v13 = 4;
      }
      else
      {
        v13 = 5;
      }
    }
    else
    {
      v13 = 1;
    }
    sub_10115BDA8(v13, a1 + 1064, 1);
    sub_10115BD20(a1 + 1088, v7);
    *(double *)(a1 + 2944) = sub_1001FCBB4();
    *(double *)(a1 + 1696) = v5;
    v14 = *(_OWORD *)(a2 + 48);
    v15 = *(_OWORD *)(a2 + 64);
    v16 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 1800) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 1784) = v16;
    *(_OWORD *)(a1 + 1768) = v15;
    *(_OWORD *)(a1 + 1752) = v14;
    v18 = *(_OWORD *)a2;
    v17 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 1736) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 1704) = v18;
    *(_OWORD *)(a1 + 1720) = v17;
  }
  else
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v9 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      Current = CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,handleGoodGPRMC,Unexpectedly invalid GPRMC string", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v10 = qword_1022A0008;
      v19 = 134349056;
      v20 = CFAbsoluteTimeGetCurrent();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "CLAccessoryAWD,%{public}.1lf,handleGoodGPRMC,Unexpectedly invalid GPRMC string", &v19, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::handleGoodGPRMC(const CLNmeaRMC &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void *sub_10115F270(uint64_t a1, double *a2)
{
  unsigned int v4;
  int v5;
  double v6;
  int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;

  v4 = *(_DWORD *)(a1 + 1312) + 1;
  *(_DWORD *)(a1 + 1312) = v4;
  v5 = *(_DWORD *)(a1 + 1440);
  if (*((_DWORD *)a2 + 10) == 1)
    ++v5;
  *(_DWORD *)(a1 + 1440) = v5;
  if (v4 >= 2)
    sub_10115BD20(a1 + 1392, *a2 - *(double *)(a1 + 1920));
  v6 = CFAbsoluteTimeGetCurrent() - *a2;
  if (v6 < 0.0 || v6 > 1.0)
  {
    if (v6 <= 2.0)
    {
      v8 = 2;
    }
    else if (v6 <= 3.0)
    {
      v8 = 3;
    }
    else if (v6 <= 5.0)
    {
      v8 = 4;
    }
    else
    {
      v8 = 5;
    }
  }
  else
  {
    v8 = 1;
  }
  sub_10115BDA8(v8, a1 + 1320, 1);
  sub_10115BD20(a1 + 1344, v6);
  sub_10115F3A4(*((_DWORD *)a2 + 11), a1 + 1472, 1);
  HIDWORD(v10) = *((_DWORD *)a2 + 9);
  LODWORD(v10) = HIDWORD(v10) - 68;
  v9 = v10 >> 1;
  if (v9 > 7)
    v11 = 0;
  else
    v11 = dword_101C42CA8[v9];
  sub_10115BDA8(v11, a1 + 1448, 1);
  return memcpy((void *)(a1 + 1920), a2, 0x350uLL);
}

uint64_t *sub_10115F3A4(unsigned int a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t *result;
  unsigned int v7;
  unsigned int *v8;

  v3 = a3;
  v7 = a1;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
  {
LABEL_6:
    v8 = (unsigned int *)(a1 | (unint64_t)(a3 << 32));
    return sub_1011614C4((uint64_t **)a2, (unsigned int *)&v8, (uint64_t *)&v8);
  }
  while (1)
  {
    v5 = *((_DWORD *)v4 + 7);
    if (v5 <= a1)
      break;
LABEL_5:
    v4 = (uint64_t *)*v4;
    if (!v4)
      goto LABEL_6;
  }
  if (v5 < a1)
  {
    ++v4;
    goto LABEL_5;
  }
  v8 = &v7;
  result = sub_101161408((uint64_t **)a2, &v7, (uint64_t)&unk_101B9EB60, &v8);
  *((_DWORD *)result + 8) += v3;
  return result;
}

_DWORD *sub_10115F444(_DWORD *result, int a2)
{
  _DWORD *v2;

  if (a2)
  {
    if (a2 == 4)
    {
      v2 = result + 329;
    }
    else
    {
      if (a2 != 3)
        return result;
      v2 = result + 265;
    }
  }
  else
  {
    v2 = result + 297;
  }
  ++*v2;
  return result;
}

void sub_10115F47C(uint64_t a1, double a2)
{
  double v3;
  NSObject *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  CFAbsoluteTime v11;
  uint64_t v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  CFAbsoluteTime v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  CFAbsoluteTime v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  double v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  v3 = *(double *)(a1 + 2968);
  if (v3 > 0.0)
  {
    *(_DWORD *)(a1 + 240) += vabdd_f64(a2, v3);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v5 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v7 = *(_QWORD *)(a1 + 2968);
      v9 = *(_DWORD *)(a1 + 236);
      v8 = *(_DWORD *)(a1 + 240);
      *(_DWORD *)buf = 134350080;
      v28 = Current;
      v29 = 2050;
      v30 = v7;
      v31 = 2050;
      v32 = a2;
      v33 = 1026;
      v34 = v8;
      v35 = 1026;
      v36 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,locationSession,start,%{public}.1lf,end,%{public}.1lf,duration,%{public}d,sessions,%{public}d", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v10 = qword_1022A0008;
      v11 = CFAbsoluteTimeGetCurrent();
      v12 = *(_QWORD *)(a1 + 2968);
      v14 = *(_DWORD *)(a1 + 236);
      v13 = *(_DWORD *)(a1 + 240);
      v17 = 134350080;
      v18 = v11;
      v19 = 2050;
      v20 = v12;
      v21 = 2050;
      v22 = a2;
      v23 = 1026;
      v24 = v13;
      v25 = 1026;
      v26 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "CLAccessoryAWD,%{public}.1lf,locationSession,start,%{public}.1lf,end,%{public}.1lf,duration,%{public}d,sessions,%{public}d", &v17, 44);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::locationSessionEnd(const CFTimeInterval)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *(_QWORD *)(a1 + 2968) = 0xBFF0000000000000;
    *(_WORD *)(a1 + 3024) = 0;
  }
}

uint64_t sub_10115F6C8(uint64_t a1, uint64_t a2)
{
  const char *v3;

  *(_BYTE *)a2 = 1;
  *(CFAbsoluteTime *)(a2 + 8) = CFAbsoluteTimeGetCurrent();
  std::string::assign((std::string *)(a2 + 16), "com.apple.locationd");
  v3 = (const char *)sub_10073C788();
  return sub_10073F50C(v3, (unsigned __int8 *)a2);
}

uint64_t sub_10115F70C(int a1, std::string *__str)
{
  std::string *v2;
  _BYTE v4[8];
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[29];
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  int v20;
  __int128 v21;
  _BYTE v22[28];
  __int128 v23;
  _BYTE v24[28];
  __int128 *v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  __int128 *v29;
  __int128 v30;
  _BYTE *v31;
  _BYTE v32[32];
  int v33;
  __int128 v34;
  _BYTE v35[28];
  __int128 v36;
  uint64_t v37;
  __int128 *v38;
  __int128 v39;
  __int128 *v40;
  __int128 v41;
  _BYTE *v42;
  _BYTE v43[32];
  int v44;
  __int128 v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  __int128 *v49;
  __int128 v50;
  _BYTE *v51;
  _BYTE v52[32];
  int v53;
  __int128 v54;
  uint64_t v55;
  __int128 *v56;
  __int128 v57;
  __int128 *v58;
  __int128 v59;
  _BYTE *v60;
  _BYTE v61[32];
  int v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  __int128 *v66;
  __int128 v67;
  _BYTE *v68;
  _BYTE v69[32];
  int v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE *v74;
  _BYTE v75[32];
  int v76;
  __int128 v77;
  _BYTE v78[28];
  __int128 v79;
  __int128 v80;
  _BYTE *v81;
  _BYTE v82[32];
  int v83;
  __int128 v84;
  _BYTE v85[64];
  _BYTE *v86;
  _BYTE v87[32];
  int v88;
  __int128 v89;
  _BYTE v90[28];
  __int128 v91;
  uint64_t v92;
  int v93;
  __int128 *v94;
  __int128 v95;
  __int128 *v96;
  __int128 v97;
  __int128 *v98;
  __int128 v99;
  uint64_t v100;
  int v101;
  __int128 *v102;
  __int128 v103;
  uint64_t v104;
  int v105;
  __int128 *v106;
  __int128 v107;
  __int128 *v108;
  __int128 v109;
  _BYTE *v110;
  _BYTE v111[32];
  int v112;
  __int128 *v113;
  __int128 v114;

  v4[0] = 0;
  v5 = 0xBFF0000000000000;
  v19 = 0u;
  v20 = 0;
  v26 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v17 = 0;
  v18 = 0;
  v16 = 0u;
  memset(v22, 0, sizeof(v22));
  v21 = 0u;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
  v25 = &v26;
  v28 = 0u;
  v30 = 0u;
  memset(v32, 0, sizeof(v32));
  v27 = &v28;
  v29 = &v30;
  v31 = v32;
  v33 = 0;
  v36 = 0u;
  v37 = 0;
  v39 = 0u;
  memset(v35, 0, sizeof(v35));
  v34 = 0u;
  v38 = &v39;
  v41 = 0u;
  v40 = &v41;
  v42 = v43;
  v44 = 0;
  memset(v43, 0, sizeof(v43));
  v45 = 0u;
  v46 = 0;
  v48 = 0u;
  v47 = &v48;
  v50 = 0u;
  v49 = &v50;
  memset(v52, 0, sizeof(v52));
  v51 = v52;
  v53 = 0;
  v55 = 0;
  v54 = 0u;
  v57 = 0u;
  v56 = &v57;
  v59 = 0u;
  v58 = &v59;
  v60 = v61;
  memset(v61, 0, sizeof(v61));
  v62 = 0;
  v67 = 0u;
  v63 = 0u;
  v64 = 0;
  v65 = 0;
  v66 = &v67;
  memset(v69, 0, sizeof(v69));
  v68 = v69;
  v70 = 0;
  memset(v75, 0, sizeof(v75));
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v74 = v75;
  v76 = 0;
  memset(v82, 0, sizeof(v82));
  memset(v78, 0, sizeof(v78));
  v77 = 0u;
  v80 = 0u;
  v79 = 0u;
  v81 = v82;
  v83 = 0;
  memset(v87, 0, sizeof(v87));
  memset(v85, 0, 28);
  v84 = 0u;
  memset(&v85[32], 0, 32);
  v86 = v87;
  v88 = 0;
  v95 = 0u;
  memset(v90, 0, sizeof(v90));
  v89 = 0u;
  v93 = 0;
  v92 = 0;
  v91 = 0u;
  v94 = &v95;
  v97 = 0u;
  v96 = &v97;
  v99 = 0u;
  v98 = &v99;
  v100 = 0;
  v101 = 0;
  v103 = 0u;
  v102 = &v103;
  v104 = 0;
  v105 = 0;
  v107 = 0u;
  v106 = &v107;
  v109 = 0u;
  v108 = &v109;
  memset(v111, 0, sizeof(v111));
  v110 = v111;
  v114 = 0u;
  v112 = 0;
  v113 = &v114;
  v2 = sub_10115A710(__str, (uint64_t)v4);
  sub_10115F6C8((uint64_t)v2, (uint64_t)v4);
  return sub_100739A38((uint64_t)v4);
}

void sub_10115FA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100739A38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10115FA80(int a1, std::string *__str, int a3)
{
  std::string *v4;
  _BYTE v6[8];
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[3];
  uint64_t v18;
  int v19;
  __int128 v20;
  int v21;
  __int128 v22;
  _BYTE v23[28];
  __int128 v24;
  _BYTE v25[28];
  __int128 *v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;
  __int128 *v30;
  __int128 v31;
  _BYTE *v32;
  _BYTE v33[32];
  int v34;
  __int128 v35;
  _BYTE v36[28];
  __int128 v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  __int128 *v41;
  __int128 v42;
  _BYTE *v43;
  _BYTE v44[32];
  int v45;
  __int128 v46;
  uint64_t v47;
  __int128 *v48;
  __int128 v49;
  __int128 *v50;
  __int128 v51;
  _BYTE *v52;
  _BYTE v53[32];
  int v54;
  __int128 v55;
  uint64_t v56;
  __int128 *v57;
  __int128 v58;
  __int128 *v59;
  __int128 v60;
  _BYTE *v61;
  _BYTE v62[32];
  int v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  __int128 *v67;
  __int128 v68;
  _BYTE *v69;
  _BYTE v70[32];
  int v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE *v75;
  _BYTE v76[32];
  int v77;
  __int128 v78;
  _BYTE v79[28];
  __int128 v80;
  __int128 v81;
  _BYTE *v82;
  _BYTE v83[32];
  int v84;
  __int128 v85;
  _BYTE v86[64];
  _BYTE *v87;
  _BYTE v88[32];
  int v89;
  __int128 v90;
  _BYTE v91[28];
  __int128 v92;
  uint64_t v93;
  int v94;
  __int128 *v95;
  __int128 v96;
  __int128 *v97;
  __int128 v98;
  __int128 *v99;
  __int128 v100;
  uint64_t v101;
  int v102;
  __int128 *v103;
  __int128 v104;
  uint64_t v105;
  int v106;
  __int128 *v107;
  __int128 v108;
  __int128 *v109;
  __int128 v110;
  _BYTE *v111;
  _BYTE v112[32];
  int v113;
  __int128 *v114;
  __int128 v115;

  v6[0] = 0;
  v7 = 0xBFF0000000000000;
  v20 = 0u;
  v21 = 0;
  v27 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  memset(v17, 0, 29);
  v18 = 0;
  v19 = 0;
  v17[2] = 0u;
  memset(v23, 0, sizeof(v23));
  v22 = 0u;
  memset(v25, 0, sizeof(v25));
  v24 = 0u;
  v26 = &v27;
  v29 = 0u;
  v31 = 0u;
  memset(v33, 0, sizeof(v33));
  v28 = &v29;
  v30 = &v31;
  v32 = v33;
  v34 = 0;
  v37 = 0u;
  v38 = 0;
  v40 = 0u;
  memset(v36, 0, sizeof(v36));
  v35 = 0u;
  v39 = &v40;
  v42 = 0u;
  v41 = &v42;
  v43 = v44;
  v45 = 0;
  memset(v44, 0, sizeof(v44));
  v46 = 0u;
  v47 = 0;
  v49 = 0u;
  v48 = &v49;
  v51 = 0u;
  v50 = &v51;
  memset(v53, 0, sizeof(v53));
  v52 = v53;
  v54 = 0;
  v56 = 0;
  v55 = 0u;
  v58 = 0u;
  v57 = &v58;
  v60 = 0u;
  v59 = &v60;
  v61 = v62;
  memset(v62, 0, sizeof(v62));
  v63 = 0;
  v68 = 0u;
  v64 = 0u;
  v65 = 0;
  v66 = 0;
  v67 = &v68;
  memset(v70, 0, sizeof(v70));
  v69 = v70;
  v71 = 0;
  memset(v76, 0, sizeof(v76));
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v75 = v76;
  v77 = 0;
  memset(v83, 0, sizeof(v83));
  memset(v79, 0, sizeof(v79));
  v78 = 0u;
  v81 = 0u;
  v80 = 0u;
  v82 = v83;
  v84 = 0;
  memset(v88, 0, sizeof(v88));
  memset(v86, 0, 28);
  v85 = 0u;
  memset(&v86[32], 0, 32);
  v87 = v88;
  v89 = 0;
  v96 = 0u;
  memset(v91, 0, sizeof(v91));
  v90 = 0u;
  v94 = 0;
  v93 = 0;
  v92 = 0u;
  v95 = &v96;
  v98 = 0u;
  v97 = &v98;
  v100 = 0u;
  v99 = &v100;
  v101 = 0;
  v102 = 0;
  v104 = 0u;
  v103 = &v104;
  v105 = 0;
  v106 = 0;
  v108 = 0u;
  v107 = &v108;
  v110 = 0u;
  v109 = &v110;
  memset(v112, 0, sizeof(v112));
  v111 = v112;
  v115 = 0u;
  v113 = 0;
  v114 = &v115;
  v4 = sub_10115A710(__str, (uint64_t)v6);
  DWORD2(v17[1]) = a3;
  sub_10115F6C8((uint64_t)v4, (uint64_t)v6);
  return sub_100739A38((uint64_t)v6);
}

void sub_10115FDE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100739A38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10115FDFC(uint64_t result, int a2)
{
  if (a2 == 1)
  {
    ++*(_DWORD *)(result + 1528);
  }
  else if (a2 == 4)
  {
    ++*(_DWORD *)(result + 1524);
  }
  return result;
}

uint64_t *sub_10115FE2C(uint64_t a1, int a2)
{
  ++*(_DWORD *)(a1 + 1520);
  return sub_10115BDA8(a2, a1 + 1536, 1);
}

_OWORD *sub_10115FE4C(uint64_t a1, _OWORD *__src, _OWORD *a3)
{
  _OWORD *v3;
  _OWORD *v4;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *__p;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v3 = a3;
  v4 = __src;
  v6 = *(_BYTE **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v16 = *(_BYTE **)a1;
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 5) + 1;
    if (v17 > 0x2AAAAAAAAAAAAAALL)
      sub_100259694();
    v18 = (char *)__src - v16;
    v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)__src - v16) >> 5);
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v16) >> 5);
    if (2 * v20 > v17)
      v17 = 2 * v20;
    if (v20 >= 0x155555555555555)
      v21 = 0x2AAAAAAAAAAAAAALL;
    else
      v21 = v17;
    v45 = a1 + 16;
    if (v21)
      v22 = (char *)sub_10067257C(a1 + 16, v21);
    else
      v22 = 0;
    v31 = &v22[96 * v19];
    __p = v22;
    v42 = v31;
    v43 = v31;
    v44 = &v22[96 * v21];
    if (v19 == v21)
    {
      if (v18 < 1)
      {
        if (v16 == (_BYTE *)v4)
          v33 = 1;
        else
          v33 = 2 * v19;
        v34 = (char *)sub_10067257C(v8, v33);
        v31 = &v34[96 * (v33 >> 2)];
        __p = v34;
        v42 = v31;
        v44 = &v34[96 * v35];
        if (v22)
          operator delete(v22);
      }
      else
      {
        v32 = v19 + 2;
        if (v19 >= -1)
          v32 = v19 + 1;
        v31 -= 96 * (v32 >> 1);
        v42 = v31;
      }
    }
    v36 = v3[1];
    *(_OWORD *)v31 = *v3;
    *((_OWORD *)v31 + 1) = v36;
    v37 = v3[2];
    v38 = v3[3];
    v39 = v3[5];
    *((_OWORD *)v31 + 4) = v3[4];
    *((_OWORD *)v31 + 5) = v39;
    *((_OWORD *)v31 + 2) = v37;
    *((_OWORD *)v31 + 3) = v38;
    v43 = v31 + 96;
    v4 = sub_10116157C((void **)a1, (uint64_t)&__p, (char *)v4);
    if (v43 != v42)
      v43 = &v42[(v43 - v42 - 96) % 0x60uLL];
    if (__p)
      operator delete(__p);
  }
  else if (__src == (_OWORD *)v6)
  {
    v27 = a3[1];
    *__src = *a3;
    __src[1] = v27;
    v28 = a3[2];
    v29 = a3[3];
    v30 = a3[5];
    __src[4] = a3[4];
    __src[5] = v30;
    __src[2] = v28;
    __src[3] = v29;
    *(_QWORD *)(a1 + 8) = __src + 6;
  }
  else
  {
    v9 = (char *)(__src + 6);
    v10 = v6 - 96;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < (_OWORD *)v6)
    {
      v12 = v10[1];
      *v11 = *v10;
      v11[1] = v12;
      v13 = v10[2];
      v14 = v10[3];
      v15 = v10[5];
      v11[4] = v10[4];
      v11[5] = v15;
      v11[2] = v13;
      v11[3] = v14;
      v10 += 6;
      v11 += 6;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(v9, __src, v6 - v9 - 4);
    if (v4 <= v3)
      v3 += 6 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    v23 = v3[1];
    *v4 = *v3;
    v4[1] = v23;
    v24 = v3[2];
    v25 = v3[3];
    v26 = v3[4];
    *(_OWORD *)((char *)v4 + 76) = *(_OWORD *)((char *)v3 + 76);
    v4[3] = v25;
    v4[4] = v26;
    v4[2] = v24;
  }
  return v4;
}

void sub_1011600F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10116013C(uint64_t a1, _QWORD *a2, double a3)
{
  double *v3;
  double *v4;
  double *v7;
  double *v8;
  BOOL v9;

  v3 = (double *)(a2 + 1);
  v4 = (double *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      sub_1011601C8(a1, (uint64_t)(v4 + 4), v4 + 7, a3);
      v7 = (double *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (double *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != v3);
  }
}

void sub_1011601C8(uint64_t a1, uint64_t a2, double *a3, double a4)
{
  NSObject *v5;
  double v6;
  void *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  uint8_t *v12;
  double v17;
  NSObject *v18;
  double v19;
  void *v20;
  uint64_t v21;
  double v22;
  void *v23;
  const char *v24;
  uint64_t **v25;
  int v26;
  NSObject *v27;
  double Current;
  void *v29;
  double v30;
  uint64_t v31;
  double v32;
  void *v33;
  double v34;
  const char *v35;
  void *__p[2];
  uint64_t v37;
  int v38;
  double v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  int v47;
  uint8_t buf[4];
  double v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  int v57;

  if (*(_QWORD *)(a1 + 1512) < 0x1FuLL)
  {
    if (*a3 >= 0.0 && *(double *)(a1 + 2952) <= *a3)
      v17 = *a3;
    else
      v17 = *(double *)(a1 + 2952);
    if (v17 <= a4)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_100115CE4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)a2;
        v37 = *(_QWORD *)(a2 + 16);
      }
      v25 = (uint64_t **)(a1 + 1496);
      v26 = vabdd_f64(a4, v17);
      sub_10115EB94(__p, v25, v26);
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v27 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
      {
        Current = CFAbsoluteTimeGetCurrent();
        if (*(char *)(a2 + 23) >= 0)
          v29 = (void *)a2;
        else
          v29 = *(void **)a2;
        v30 = *a3;
        *(_DWORD *)buf = 134350082;
        v49 = Current;
        v50 = 2082;
        v51 = v29;
        v52 = 2050;
        v53 = v30;
        v54 = 2050;
        v55 = v17;
        v56 = 1026;
        v57 = v26;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,updateNavigationAppStats,%{public}s,appLaunchTime,%{public}.1lf,appStartTime,%{public}.1lf,appRunTime,%{public}d", buf, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021A3690);
        v31 = qword_1022A0008;
        v32 = CFAbsoluteTimeGetCurrent();
        v33 = *(char *)(a2 + 23) >= 0 ? (void *)a2 : *(void **)a2;
        v34 = *a3;
        v38 = 134350082;
        v39 = v32;
        v40 = 2082;
        v41 = v33;
        v42 = 2050;
        v43 = v34;
        v44 = 2050;
        v45 = v17;
        v46 = 1026;
        v47 = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 2, "CLAccessoryAWD,%{public}.1lf,updateNavigationAppStats,%{public}s,appLaunchTime,%{public}.1lf,appStartTime,%{public}.1lf,appRunTime,%{public}d", &v38, 48);
        v12 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::updateNavigationAppStats(const CFTimeInterval, const std::string &, const CFTimeInterval &)", "%s\n", v35);
        if (v12 != buf)
          goto LABEL_59;
      }
    }
    else
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v18 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
      {
        v19 = CFAbsoluteTimeGetCurrent();
        if (*(char *)(a2 + 23) >= 0)
          v20 = (void *)a2;
        else
          v20 = *(void **)a2;
        *(_DWORD *)buf = 134349826;
        v49 = v19;
        v50 = 2082;
        v51 = v20;
        v52 = 2050;
        v53 = v17;
        v54 = 2050;
        v55 = a4;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#Warning,CLAccessoryAWD,%{public}.1lf,updateNavigationAppStats,%{public}s,appStartTime,%{public}.1lf, greater than machContTime,%{public}.1lf", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021A3690);
        v21 = qword_1022A0008;
        v22 = CFAbsoluteTimeGetCurrent();
        if (*(char *)(a2 + 23) >= 0)
          v23 = (void *)a2;
        else
          v23 = *(void **)a2;
        v38 = 134349826;
        v39 = v22;
        v40 = 2082;
        v41 = v23;
        v42 = 2050;
        v43 = v17;
        v44 = 2050;
        v45 = a4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "#Warning,CLAccessoryAWD,%{public}.1lf,updateNavigationAppStats,%{public}s,appStartTime,%{public}.1lf, greater than machContTime,%{public}.1lf", &v38, 42);
        v12 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::updateNavigationAppStats(const CFTimeInterval, const std::string &, const CFTimeInterval &)", "%s\n", v24);
LABEL_37:
        if (v12 == buf)
          return;
LABEL_59:
        free(v12);
      }
    }
  }
  else
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v5 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      v6 = CFAbsoluteTimeGetCurrent();
      if (*(char *)(a2 + 23) >= 0)
        v7 = (void *)a2;
      else
        v7 = *(void **)a2;
      *(_DWORD *)buf = 134349570;
      v49 = v6;
      v50 = 2082;
      v51 = v7;
      v52 = 1026;
      LODWORD(v53) = 30;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,updateNavigationAppStats,%{public}s,more than allowed location apps open,%{public}d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v8 = qword_1022A0008;
      v9 = CFAbsoluteTimeGetCurrent();
      if (*(char *)(a2 + 23) >= 0)
        v10 = (void *)a2;
      else
        v10 = *(void **)a2;
      v38 = 134349570;
      v39 = v9;
      v40 = 2082;
      v41 = v10;
      v42 = 1026;
      LODWORD(v43) = 30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "CLAccessoryAWD,%{public}.1lf,updateNavigationAppStats,%{public}s,more than allowed location apps open,%{public}d", &v38, 28);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::updateNavigationAppStats(const CFTimeInterval, const std::string &, const CFTimeInterval &)", "%s\n", v11);
      goto LABEL_37;
    }
  }
}

