void sub_101723208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101723228(uint64_t *a1, int a2, int a3, int a4, uint64_t a5)
{
  NSObject *v10;
  const qmi::MutableMessageBase *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  _DWORD v17[8];
  _DWORD v18[2];
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint8_t buf[8];
  __int128 v28;
  void *v29;
  uint64_t v30;

  sub_101864454(a2, a3, a4, (qmi::MutableMessageBase *)v17);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = 83;
    LOWORD(v28) = 2080;
    *(_QWORD *)((char *)&v28 + 2) = "QMI_PDS_INJECT_TIME_SYNC_DATA";
    WORD5(v28) = 1024;
    HIDWORD(v28) = a2;
    LOWORD(v29) = 1024;
    *(_DWORD *)((char *)&v29 + 2) = a3;
    HIWORD(v29) = 1024;
    LODWORD(v30) = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,refCounter,%d,sensorProcRxTime,%d,sensorProcTxTime,%d\n", buf, 0x24u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v18[0] = 67110146;
    v18[1] = 83;
    v19 = 2080;
    v20 = "QMI_PDS_INJECT_TIME_SYNC_DATA";
    v21 = 1024;
    v22 = a2;
    v23 = 1024;
    v24 = a3;
    v25 = 1024;
    v26 = a4;
    LODWORD(v16) = 36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,refCounter,%d,sensorProcRxTime,%d,sensorProcTxTime,%d\n", v18, v16, v17[0], v17[2], v17[4]);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectTimeSyncData(uint32_t, uint32_t, uint32_t, void (^)(const pds::injectTimeSyncData::Response &)) const", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v12 = *a1;
  v13 = QMIServiceMsg::create((QMIServiceMsg *)v17, v11);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v28 = 3221225472;
  *((_QWORD *)&v28 + 1) = sub_10172DB34;
  v29 = &unk_1021C6CE8;
  v30 = a5;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v12 + 16))(v12, v13, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v17);
}

void sub_1017234C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017234E8(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  sub_1018644B8(a2, (qmi::MutableMessageBase *)v13);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 133;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_SET_TIME_TRANSFER_CONFIG";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,TimeTransferConfig,%u\n", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 133;
    v15 = 2080;
    v16 = "QMI_PDS_SET_TIME_TRANSFER_CONFIG";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,TimeTransferConfig,%u\n", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetTimeTransferConfig(qmi::pds::TimeTransferConfig, void (^)(const pds::setTimeTransferConfig::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_10172DEEC;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_101723750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101723770(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _QWORD v13[4];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[8];
  _BYTE v20[24];
  uint64_t v21;

  sub_101864508(a2, (qmi::MutableMessageBase *)v13);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 135;
    *(_WORD *)v20 = 2080;
    *(_QWORD *)&v20[2] = "QMI_PDS_INJECT_CLIENT_TIME_NS_REQ";
    *(_WORD *)&v20[10] = 2048;
    *(_QWORD *)&v20[12] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,pulseTime,%llun", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 135;
    v15 = 2080;
    v16 = "QMI_PDS_INJECT_CLIENT_TIME_NS_REQ";
    v17 = 2048;
    v18 = a2;
    LODWORD(v12) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,pulseTime,%llun", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSendClientPulseTime(uint64_t, void (^)(const pds::sendClientPulseTime::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)v20 = 3221225472;
  *(_QWORD *)&v20[8] = sub_10172E264;
  *(_QWORD *)&v20[16] = &unk_1021C6CE8;
  v21 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_1017239D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017239F8(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v13, 0x5558u);
  *sub_10172E61C((uint64_t)v13, 1) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 21848;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_EXT_SET_DPO_STATUS_REPORT";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable,%d\n", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 21848;
    v15 = 2080;
    v16 = "QMI_PDS_EXT_SET_DPO_STATUS_REPORT";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,enable,%d\n", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetDPOStatusReport(BOOL, void (^)(const pds::setDpoStatusReport::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_10172E7FC;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_101723C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101723C90(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  const qmi::MutableMessageBase *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  _BYTE v14[32];
  _DWORD v15[2];
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint8_t buf[8];
  __int128 v21;
  void *v22;
  uint64_t v23;

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14, 0xA3u);
  *(_QWORD *)sub_10172EB74((uint64_t)v14, 1) = *a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = *a2;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 163;
    LOWORD(v21) = 2080;
    *(_QWORD *)((char *)&v21 + 2) = "QMI_PDS_SET_GNSS_REPORTING_CONFIG";
    WORD5(v21) = 1026;
    HIDWORD(v21) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,#gnssmeas,config,0x%{public}x", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v11 = *a2;
    v15[0] = 67109634;
    v15[1] = 163;
    v16 = 2080;
    v17 = "QMI_PDS_SET_GNSS_REPORTING_CONFIG";
    v18 = 1026;
    v19 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,#gnssmeas,config,0x%{public}x", v15, 24);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendGnssReportingConfig(const pds::tlv::GnssReportingConfig &, void (^)(const pds::SetGnssReportingConfig::Response &)) const", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v9 = *a1;
  v10 = QMIServiceMsg::create((QMIServiceMsg *)v14, v8);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v21 = 3221225472;
  *((_QWORD *)&v21 + 1) = sub_10172EDB4;
  v22 = &unk_1021C6CE8;
  v23 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v9 + 16))(v9, v10, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_101723F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101723F34(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v13, 0xADu);
  *sub_10172F16C((uint64_t)v13, 1) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 173;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_SET_MULTIBAND_STATE";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,multiband,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 173;
    v15 = 2080;
    v16 = "QMI_PDS_SET_MULTIBAND_STATE";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,multiband,%d", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendMultibandConfig(BOOL, void (^)(const pds::SetMultibandState::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_10172F34C;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_1017241AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017241CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  double v7;
  double v8;
  int v9;
  int v10;
  double v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  double v22;
  double v23;
  int v24;
  int v25;
  double v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  int v33;
  int v34;
  int v35;
  const char *v36;
  uint8_t *v37;
  NSObject *v38;
  double v39;
  double v40;
  int v41;
  int v42;
  double v43;
  int v44;
  NSObject *v45;
  int v46;
  uint64_t v47;
  const qmi::MutableMessageBase *v48;
  uint64_t v49;
  int v50;
  const char *v51;
  uint8_t *v52;
  double v53;
  double v54;
  int v55;
  int v56;
  double v57;
  int v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  _BYTE v62[12];
  uint64_t v63;
  _BYTE v64[10];
  _BYTE v65[32];
  _BYTE v66[12];
  int v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  uint8_t buf[8];
  _BYTE v74[32];
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  double v79;
  __int16 v80;
  int v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;
  __int16 v88;
  double v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;

  if (*(_BYTE *)(a2 + 24))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(float *)a2;
      v8 = *(float *)(a2 + 4);
      v9 = *(_DWORD *)(a2 + 8);
      v10 = *(char *)(a2 + 12);
      v11 = *(float *)(a2 + 16);
      v12 = *(unsigned __int8 *)(a2 + 24);
      v13 = *(float *)(a2 + 28);
      v14 = *(float *)(a2 + 32);
      v15 = *(float *)(a2 + 36);
      v16 = *(float *)(a2 + 40);
      v17 = *(_DWORD *)(a2 + 44);
      v18 = *(_DWORD *)(a2 + 48);
      v19 = *(unsigned __int8 *)(a2 + 52);
      v20 = *(unsigned __int8 *)(a2 + 53);
      v21 = *(_DWORD *)(a2 + 56);
      *(_DWORD *)buf = 67113218;
      *(_DWORD *)&buf[4] = 87;
      *(_WORD *)v74 = 2080;
      *(_QWORD *)&v74[2] = "QMI_PDS_SET_NAVIGATION_CONFIG";
      *(_WORD *)&v74[10] = 2048;
      *(double *)&v74[12] = v7;
      *(_WORD *)&v74[20] = 2048;
      *(double *)&v74[22] = v8;
      *(_WORD *)&v74[30] = 1024;
      v75 = v9;
      v76 = 1024;
      v77 = v10;
      v78 = 2048;
      v79 = v11;
      v80 = 1024;
      v81 = v12;
      v82 = 2048;
      v83 = v13;
      v84 = 2048;
      v85 = v14;
      v86 = 2048;
      v87 = v15;
      v88 = 2048;
      v89 = v16;
      v90 = 1024;
      v91 = v17;
      v92 = 1024;
      v93 = v18;
      v94 = 1024;
      v95 = v19;
      v96 = 1024;
      v97 = v20;
      v98 = 1024;
      v99 = v21;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,GyroDataVariance,%.12g,GyroBiasRandomWalk,%.12g,VirtualGyroGravityAvgLength,%u,HeadingFilterMode,%d,VelocityConstraintVariance,%.12g,UseEnhancedSettings,%d,VelocityRandomWalkSpectralDensity,%.12g,AccelerationRandomWalkSpectralDensity,%.12g,AngleRandomWalkSpectalDensity,%.12g,RateRandomWalkSpectralDensity,%.12g,SensorAlgorithmConfig,%u,MaximumDeadReckoningTime_s,%u,InsFilterCrossCheckSigmaLowThreshold,%u,InsFilterCrossCheckSigmaHighThreshold,%u,MaxVehicleDeadReckoningTime,%u\n", buf, 0x88u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v22 = *(float *)a2;
      v23 = *(float *)(a2 + 4);
      v24 = *(_DWORD *)(a2 + 8);
      v25 = *(char *)(a2 + 12);
      v26 = *(float *)(a2 + 16);
      v27 = *(unsigned __int8 *)(a2 + 24);
      v28 = *(float *)(a2 + 28);
      v29 = *(float *)(a2 + 32);
      v30 = *(float *)(a2 + 36);
      v31 = *(float *)(a2 + 40);
      v32 = *(_DWORD *)(a2 + 48);
      v33 = *(unsigned __int8 *)(a2 + 52);
      v34 = *(unsigned __int8 *)(a2 + 53);
      v35 = *(_DWORD *)(a2 + 56);
      *(_WORD *)v62 = 2080;
      *(_QWORD *)&v62[2] = "QMI_PDS_SET_NAVIGATION_CONFIG";
      *(_WORD *)&v62[10] = 2048;
      *(double *)v64 = v23;
      *(_WORD *)&v64[8] = 1024;
      *(_WORD *)v65 = HIWORD(v25);
      *(_WORD *)&v65[2] = 2048;
      *(double *)&v65[4] = v26;
      *(_WORD *)&v65[12] = 1024;
      *(_DWORD *)&v65[14] = v27;
      *(_WORD *)&v65[18] = 2048;
      *(double *)&v65[20] = v28;
      *(_WORD *)&v65[28] = 2048;
      *(_WORD *)&v65[30] = LOWORD(v29);
      *(_WORD *)v66 = 2048;
      *(double *)&v66[2] = v31;
      *(_WORD *)&v66[10] = 1024;
      LOWORD(v67) = 1024;
      HIWORD(v67) = v32;
      v68 = v33;
      v69 = 1024;
      v70 = v34;
      v71 = 1024;
      v72 = v35;
      LODWORD(v60) = 136;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,GyroDataVariance,%.12g,GyroBiasRandomWalk,%.12g,VirtualGyroGravityAvgLength,%u,HeadingFilterMode,%d,VelocityConstraintVariance,%.12g,UseEnhancedSettings,%d,VelocityRandomWalkSpectralDensity,%.12g,AccelerationRandomWalkSpectralDensity,%.12g,AngleRandomWalkSpectalDensity,%.12g,RateRandomWalkSpectralDensity,%.12g,SensorAlgorithmConfig,%u,MaximumDeadReckoningTime_s,%u,InsFilterCrossCheckSigmaLowThreshold,%u,InsFilterCrossCheckSigmaHighThreshold,%u,MaxVehicleDeadReckoningTime,%u\n", &v61, v60, COERCE_DOUBLE(0x5704001102), *(double *)v62, *(_DWORD *)&v62[8], HIDWORD(v22), *(double *)&v64[2],
        v24,
        *(double *)v65,
        *(double *)&v65[8],
        *(double *)&v65[16],
        *(double *)&v65[24],
        *(_QWORD *)&v29 >> 16,
        LODWORD(v30),
        *(_DWORD *)v66,
        *(_DWORD *)&v66[8],
        v67);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetNavigationConfig(const qmi::pds::NavigationConfig &, void (^)(const pds::setNavigationConfig::Response &)) const", "%s\n", v36);
LABEL_28:
      if (v37 != buf)
        free(v37);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v38 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v39 = *(float *)a2;
      v40 = *(float *)(a2 + 4);
      v41 = *(_DWORD *)(a2 + 8);
      v42 = *(char *)(a2 + 12);
      v43 = *(float *)(a2 + 16);
      v44 = *(unsigned __int8 *)(a2 + 24);
      *(_DWORD *)buf = 67110914;
      *(_DWORD *)&buf[4] = 87;
      *(_WORD *)v74 = 2080;
      *(_QWORD *)&v74[2] = "QMI_PDS_SET_NAVIGATION_CONFIG";
      *(_WORD *)&v74[10] = 2048;
      *(double *)&v74[12] = v39;
      *(_WORD *)&v74[20] = 2048;
      *(double *)&v74[22] = v40;
      *(_WORD *)&v74[30] = 1024;
      v75 = v41;
      v76 = 1024;
      v77 = v42;
      v78 = 2048;
      v79 = v43;
      v80 = 1024;
      v81 = v44;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,GyroDataVariance,%.12g,GyroBiasRandomWalk,%.12g,VirtualGyroGravityAvgLength,%u,HeadingFilterMode,%d,VelocityConstraintVariance,%.12g,UseEnhancedSettings,%d\n", buf, 0x42u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v53 = *(float *)a2;
      v54 = *(float *)(a2 + 4);
      v55 = *(_DWORD *)(a2 + 8);
      v56 = *(char *)(a2 + 12);
      v57 = *(float *)(a2 + 16);
      v58 = *(unsigned __int8 *)(a2 + 24);
      *(_WORD *)v62 = 2080;
      *(_QWORD *)&v62[2] = "QMI_PDS_SET_NAVIGATION_CONFIG";
      *(_WORD *)&v62[10] = 2048;
      *(double *)v64 = v54;
      *(_WORD *)&v64[8] = 1024;
      *(_WORD *)v65 = HIWORD(v56);
      *(_WORD *)&v65[2] = 2048;
      *(double *)&v65[4] = v57;
      *(_WORD *)&v65[12] = 1024;
      *(_DWORD *)&v65[14] = v58;
      LODWORD(v60) = 66;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,GyroDataVariance,%.12g,GyroBiasRandomWalk,%.12g,VirtualGyroGravityAvgLength,%u,HeadingFilterMode,%d,VelocityConstraintVariance,%.12g,UseEnhancedSettings,%d\n", &v61, v60, COERCE_DOUBLE(0x5704000802), *(double *)v62, *(_DWORD *)&v62[8], HIDWORD(v53), *(double *)&v64[2], v55);
      v37 = (uint8_t *)v59;
      sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetNavigationConfig(const qmi::pds::NavigationConfig &, void (^)(const pds::setNavigationConfig::Response &)) const", "%s\n", v59);
      goto LABEL_28;
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v45 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v46 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 87;
    *(_WORD *)v74 = 2080;
    *(_QWORD *)&v74[2] = "QMI_PDS_SET_NAVIGATION_CONFIG";
    *(_WORD *)&v74[10] = 1024;
    *(_DWORD *)&v74[12] = v46;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,PositioningMethod,0x%x\n", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v50 = *(_DWORD *)(a2 + 20);
    *(_WORD *)v62 = 2080;
    *(_QWORD *)&v62[2] = "QMI_PDS_SET_NAVIGATION_CONFIG";
    *(_WORD *)&v62[10] = 1024;
    LODWORD(v63) = v50;
    LODWORD(v60) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,PositioningMethod,0x%x\n", &v61, v60, 67109634);
    v52 = (uint8_t *)v51;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetNavigationConfig(const qmi::pds::NavigationConfig &, void (^)(const pds::setNavigationConfig::Response &)) const", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  sub_101864558(a2, (qmi::MutableMessageBase *)&v61);
  v47 = *a1;
  v49 = QMIServiceMsg::create((QMIServiceMsg *)&v61, v48);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)v74 = 3221225472;
  *(_QWORD *)&v74[8] = sub_10172F704;
  *(_QWORD *)&v74[16] = &unk_1021C6CE8;
  *(_QWORD *)&v74[24] = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v47 + 16))(v47, v49, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v61);
}

void sub_101724958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101724974(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  NSObject *v11;
  const qmi::MutableMessageBase *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  int v18;
  double v19;
  double v20;
  _DWORD v21[2];
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  uint8_t buf[8];
  __int128 v31;
  _BYTE v32[20];

  sub_10186470C(a2, a3, (qmi::MutableMessageBase *)&v18, a5, a6);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = 142;
    LOWORD(v31) = 2080;
    *(_QWORD *)((char *)&v31 + 2) = "QMI_PDS_INJECT_SPEED_DATA";
    WORD5(v31) = 1024;
    HIDWORD(v31) = a2;
    *(_WORD *)v32 = 2048;
    *(double *)&v32[2] = a5;
    *(_WORD *)&v32[10] = 2048;
    *(double *)&v32[12] = a6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,timeType,%d,speed,%.2f,speedUncertainty,%.2f\n", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v21[0] = 67110146;
    v21[1] = 142;
    v22 = 2080;
    v23 = "QMI_PDS_INJECT_SPEED_DATA";
    v24 = 1024;
    v25 = a2;
    v26 = 2048;
    v27 = a5;
    v28 = 2048;
    v29 = a6;
    LODWORD(v17) = 44;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,timeType,%d,speed,%.2f,speedUncertainty,%.2f\n", v21, v17, v18, v19, v20);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectSpeedData(qmi::pds::QMISpeedDataTimeType, uint64_t, float, float, void (^)(const pds::injectSpeedData::Response &)) const", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v13 = *a1;
  v14 = QMIServiceMsg::create((QMIServiceMsg *)&v18, v12);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v31 = 3221225472;
  *((_QWORD *)&v31 + 1) = sub_10172FABC;
  *(_QWORD *)v32 = &unk_1021C6CE8;
  *(_QWORD *)&v32[8] = a4;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v13 + 16))(v13, v14, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v18);
}

void sub_101724C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101724C48(uint64_t *a1, int a2, uint64_t a3, int a4, uint64_t a5, float a6, float a7)
{
  NSObject *v14;
  const qmi::MutableMessageBase *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  int v21;
  uint64_t v22;
  int v23;
  double v24;
  uint64_t v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  uint8_t buf[8];
  __int128 v39;
  __int128 v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;

  sub_101864790(a2, a3, a4, (qmi::MutableMessageBase *)&v21, a6, a7);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67110658;
    *(_DWORD *)&buf[4] = 151;
    LOWORD(v39) = 2080;
    *(_QWORD *)((char *)&v39 + 2) = "QMI_PDS_INJECT_SPEED_INEQUALITY_CONSTRAINT";
    WORD5(v39) = 1024;
    HIDWORD(v39) = a2;
    LOWORD(v40) = 2048;
    *(_QWORD *)((char *)&v40 + 2) = a3;
    WORD5(v40) = 1024;
    HIDWORD(v40) = a4;
    v41 = 2048;
    v42 = a6;
    v43 = 2048;
    v44 = a7;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,timeType,%d,timestamp,%llu,validityDuration,%d,speedMinBound,%.2f,speedMaxBound,%.2f", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v26 = 2080;
    v27 = "QMI_PDS_INJECT_SPEED_INEQUALITY_CONSTRAINT";
    v28 = 1024;
    v29 = a2;
    v30 = 2048;
    v31 = a3;
    v32 = 1024;
    v33 = a4;
    v34 = 2048;
    v35 = a6;
    v36 = 2048;
    v37 = a7;
    LODWORD(v20) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,timeType,%d,timestamp,%llu,validityDuration,%d,speedMinBound,%.2f,speedMaxBound,%.2f", &v25, v20, v21, v22, v23, v24, COERCE_DOUBLE(0x9704000702));
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectSpeedInequalityConstraint(qmi::pds::QMISpeedInequalityConstraintTimeType, uint64_t, uint32_t, float, float, void (^)(const pds::injectSpeedInequalityConstraint::Response &)) const", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v16 = *a1;
  v17 = QMIServiceMsg::create((QMIServiceMsg *)&v21, v15);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v39 = 3221225472;
  *((_QWORD *)&v39 + 1) = sub_10172FE74;
  *(_QWORD *)&v40 = &unk_1021C6CE8;
  *((_QWORD *)&v40 + 1) = a5;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v16 + 16))(v16, v17, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v21);
}

void sub_101724F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101724F54(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, double a9, double a10, float a11, float a12, float a13, float a14, float a15, float a16, unsigned __int8 a17, unsigned __int8 a18, uint64_t a19)
{
  NSObject *v33;
  int v34;
  char v35;
  NSObject *v36;
  const qmi::MutableMessageBase *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  NSObject *v44;
  uint32_t v45;
  NSObject *v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  const char *v50;
  char *v51;
  _BYTE v54[32];
  int v55;
  _BYTE v56[14];
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  _BYTE buf[40];
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;

  if (a12 <= 0.0 && (a14 <= 0.0 || a15 <= 0.0))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v46 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#bb.e,#cpi,Both circular and ellipsoidal uncertainty missing\"}", buf, 0x12u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    }
    v47 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v42 = "#bb.e,#cpi,Both circular and ellipsoidal uncertainty missing";
      v43 = "{\"msg%{public}.0s\":\"#bb.e,#cpi,Both circular and ellipsoidal uncertainty missing\"}";
      v44 = v47;
      v45 = 18;
      goto LABEL_31;
    }
  }
  else
  {
    if (a17 - 1 <= 0x63 && a18 - 1 < 0x64)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v33 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#tb,sendInjectPositionData,gpsTimestamp,%llu", buf, 0xCu);
      }
      v34 = a4;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CDA00);
        v55 = 134217984;
        *(_QWORD *)v56 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,sendInjectPositionData,gpsTimestamp,%llu", &v55);
        v49 = (char *)v48;
        sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectPositionData(const uint64_t, const double, const double, const float, const float, const float, const qmi::pds::QmiReliabilityIndication, const qmi::pds::QmiReliabilityIndication, const qmi::pds::QmiPositionSource, const qmi::pds::QmiAltSource, const qmi::pds::QmiAltSourceLinkage, const qmi::pds::QmiAltUncCoverage, const uint8_t, const uint8_t, const float, const float, const float, void (^)(const pds::injectPositionData::Response &)) const", "%s\n", v48);
        v34 = a4;
        if (v49 != buf)
          free(v49);
      }
      v35 = sub_10075BE08();
      sub_10186486C(v35, a2, a3, v34, a5, a6, a7, a8, (qmi::MutableMessageBase *)v54, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v36 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67113475;
        *(_DWORD *)&buf[4] = 56;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "QMI_PDS_INJECT_POSITION_DATA";
        *(_WORD *)&buf[18] = 2049;
        *(double *)&buf[20] = a9;
        *(_WORD *)&buf[28] = 2049;
        *(double *)&buf[30] = a10;
        *(_WORD *)&buf[38] = 2048;
        v90 = a11;
        v91 = 2048;
        v92 = a12;
        v93 = 2048;
        v94 = a13;
        v95 = 1024;
        v96 = a17;
        v97 = 1024;
        v98 = a18;
        v99 = 1024;
        v100 = a5;
        v101 = 1024;
        v102 = a6;
        v103 = 1024;
        v104 = a7;
        v105 = 1024;
        v106 = a8;
        v107 = 2048;
        v108 = a14;
        v109 = 2048;
        v110 = a15;
        v111 = 2048;
        v112 = a16;
        v113 = 1024;
        v114 = a3;
        v115 = 1024;
        v116 = v34;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,#cpi,lat,%{private}.7f,lon,%{private}.7f,alt,%.1f,hunc,%.1f,vunc,%.1f,hcnf,%d,vcnf,%d,src,%d,altSrc,%d,altLinkage,%d,altUncCov,%d,huncSemiMajor,%.1f,huncSemiMinor,%.1f,huncSemiMajorAz,%.2f,hrel,%d,vrel,%d\n", buf, 0x92u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CDA00);
        v55 = 67113475;
        *(_DWORD *)v56 = 56;
        *(_WORD *)&v56[4] = 2080;
        *(_QWORD *)&v56[6] = "QMI_PDS_INJECT_POSITION_DATA";
        v57 = 2049;
        v58 = a9;
        v59 = 2049;
        v60 = a10;
        v61 = 2048;
        v62 = a11;
        v63 = 2048;
        v64 = a12;
        v65 = 2048;
        v66 = a13;
        v67 = 1024;
        v68 = a17;
        v69 = 1024;
        v70 = a18;
        v71 = 1024;
        v72 = a5;
        v73 = 1024;
        v74 = a6;
        v75 = 1024;
        v76 = a7;
        v77 = 1024;
        v78 = a8;
        v79 = 2048;
        v80 = a14;
        v81 = 2048;
        v82 = a15;
        v83 = 2048;
        v84 = a16;
        v85 = 1024;
        v86 = a3;
        v87 = 1024;
        v88 = a4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,#cpi,lat,%{private}.7f,lon,%{private}.7f,alt,%.1f,hunc,%.1f,vunc,%.1f,hcnf,%d,vcnf,%d,src,%d,altSrc,%d,altLinkage,%d,altUncCov,%d,huncSemiMajor,%.1f,huncSemiMinor,%.1f,huncSemiMajorAz,%.2f,hrel,%d,vrel,%d\n", &v55, 146);
        v51 = (char *)v50;
        sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectPositionData(const uint64_t, const double, const double, const float, const float, const float, const qmi::pds::QmiReliabilityIndication, const qmi::pds::QmiReliabilityIndication, const qmi::pds::QmiPositionSource, const qmi::pds::QmiAltSource, const qmi::pds::QmiAltSourceLinkage, const qmi::pds::QmiAltUncCoverage, const uint8_t, const uint8_t, const float, const float, const float, void (^)(const pds::injectPositionData::Response &)) const", "%s\n", v50);
        if (v51 != buf)
          free(v51);
      }
      v38 = *a1;
      v39 = QMIServiceMsg::create((QMIServiceMsg *)v54, v37);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_10173022C;
      *(_QWORD *)&buf[24] = &unk_1021C6CE8;
      *(_QWORD *)&buf[32] = a19;
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v38 + 16))(v38, v39, buf);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v54);
      return;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v40 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = a17;
      *(_WORD *)&buf[24] = 1026;
      *(_DWORD *)&buf[26] = a18;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#bb.e,#cpi,Badly coded confidence\", \"horzConf\":%{public}d, \"vertConf\":%{public}d}", buf, 0x1Eu);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    }
    v41 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = a17;
      *(_WORD *)&buf[24] = 1026;
      *(_DWORD *)&buf[26] = a18;
      v42 = "#bb.e,#cpi,Badly coded confidence";
      v43 = "{\"msg%{public}.0s\":\"#bb.e,#cpi,Badly coded confidence\", \"horzConf\":%{public}d, \"vertConf\":%{public}d}";
      v44 = v41;
      v45 = 30;
LABEL_31:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v44, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v42, v43, buf, v45);
    }
  }
}

void sub_1017257A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017257C0(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  sub_101864A58(a2, (qmi::MutableMessageBase *)v13);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 21847;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_EXT_SET_SV_IN_FIX_REPORT";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 21847;
    v15 = 2080;
    v16 = "QMI_PDS_EXT_SET_SV_IN_FIX_REPORT";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,enable,%d", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSvUseInFixReport(BOOL, void (^)(const pds::svUseInFixReport::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_1017305E4;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_101725A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101725A48(uint64_t *a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  int v7;
  NSObject *v12;
  const qmi::MutableMessageBase *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  _DWORD v19[8];
  _DWORD v20[2];
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint8_t buf[8];
  __int128 v32;
  void *v33;
  _QWORD v34[201];

  v7 = a5;
  sub_101864AA8(a2, a3, a4, a5, (qmi::MutableMessageBase *)buf);
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19, (const qmi::MutableMessageBase *)buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)buf);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = 39;
    LOWORD(v32) = 2080;
    *(_QWORD *)((char *)&v32 + 2) = "QMI_PDS_SET_NMEA_CONFIG";
    WORD5(v32) = 1024;
    HIDWORD(v32) = a2;
    LOWORD(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 2) = a3;
    HIWORD(v33) = 1024;
    LODWORD(v34[0]) = a4;
    WORD2(v34[0]) = 1024;
    *(_DWORD *)((char *)v34 + 6) = v7;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,nmeaSentenceMask,%x,extendedNmeaSentenceMask,%x,reportAccurateAzEl,%d,additionalNmeaSentenceMask,%x", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v20[0] = 67110402;
    v20[1] = 39;
    v21 = 2080;
    v22 = "QMI_PDS_SET_NMEA_CONFIG";
    v23 = 1024;
    v24 = a2;
    v25 = 1024;
    v26 = a3;
    v27 = 1024;
    v28 = a4;
    v29 = 1024;
    v30 = v7;
    LODWORD(v18) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,nmeaSentenceMask,%x,extendedNmeaSentenceMask,%x,reportAccurateAzEl,%d,additionalNmeaSentenceMask,%x", v20, v18, v19[0], v19[2], v19[4], v19[6]);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetNmeaConfig(uint8_t, uint16_t, BOOL, uint64_t, void (^)(const pds::setNmeaConfig::Response &)) const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v14 = *a1;
  v15 = QMIServiceMsg::create((QMIServiceMsg *)v19, v13);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v32 = 3221225472;
  *((_QWORD *)&v32 + 1) = sub_10173099C;
  v33 = &unk_1021C6CE8;
  v34[0] = a6;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v14 + 16))(v14, v15, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
}

void sub_101725D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101725D40(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  sub_101864B58(a2, (qmi::MutableMessageBase *)v13);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 64;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_SET_DPO_CONFIG";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,dpoConfig,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 64;
    v15 = 2080;
    v16 = "QMI_PDS_SET_DPO_CONFIG";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,dpoConfig,%d", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetDpoConfig(qmi::pds::QmiDpoConfig, void (^)(const pds::setDpoConfig::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_101730D54;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_101725FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101725FC8(uint64_t *a1, int a2, unsigned __int8 *a3, uint64_t a4)
{
  size_t v7;
  size_t v8;
  char *v9;
  size_t v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  const qmi::MutableMessageBase *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  const char *v59;
  uint8_t *v60;
  const char *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  const char *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  const char *v74;
  const char *v75;
  int v76;
  int v77;
  const char *v78;
  int v79;
  const char *v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  int v85;
  void *__p;
  void *v87;
  uint64_t v88;
  int v89;
  __int128 v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  const char *v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  const char *v114;
  __int16 v115;
  const char *v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  const char *v122;
  __int16 v123;
  int v124;
  __int16 v125;
  const char *v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  const char *v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  __int16 v141;
  int v142;
  __int16 v143;
  int v144;
  __int16 v145;
  uint64_t v146;
  uint8_t buf[8];
  __int128 v148;
  void *v149;
  _BYTE v150[10];
  __int16 v151;
  int v152;
  __int16 v153;
  int v154;
  __int16 v155;
  const char *v156;
  __int16 v157;
  int v158;
  __int16 v159;
  int v160;
  __int16 v161;
  int v162;
  __int16 v163;
  int v164;
  __int16 v165;
  int v166;
  __int16 v167;
  const char *v168;
  __int16 v169;
  const char *v170;
  __int16 v171;
  int v172;
  __int16 v173;
  int v174;
  __int16 v175;
  const char *v176;
  __int16 v177;
  int v178;
  __int16 v179;
  const char *v180;
  __int16 v181;
  int v182;
  __int16 v183;
  int v184;
  __int16 v185;
  int v186;
  __int16 v187;
  int v188;
  __int16 v189;
  const char *v190;
  __int16 v191;
  int v192;
  __int16 v193;
  int v194;
  __int16 v195;
  int v196;
  __int16 v197;
  int v198;
  __int16 v199;
  uint64_t v200;

  v85 = a2;
  v7 = a3[31];
  v8 = *((_QWORD *)a3 + 2);
  if ((v7 & 0x80u) == 0)
    v9 = (char *)(a3 + 8);
  else
    v9 = (char *)*((_QWORD *)a3 + 1);
  v87 = 0;
  v88 = 0;
  if ((v7 & 0x80u) == 0)
    v10 = v7;
  else
    v10 = v8;
  __p = 0;
  sub_10173110C((char *)&__p, v9, &v9[v10], v10);
  v82 = a1;
  v83 = a4;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v12 = a3[3];
    v13 = *a3;
    v14 = a3[2];
    v15 = a3[44];
    v16 = a3[72];
    v17 = *((_DWORD *)a3 + 19);
    v18 = *((_DWORD *)a3 + 20);
    v19 = *((_DWORD *)a3 + 21);
    v20 = *((_DWORD *)a3 + 22);
    v21 = a3[136];
    v22 = a3[137];
    v23 = a3[168];
    v24 = a3[200];
    v25 = a3[201];
    v26 = a3[202];
    v27 = a3[203];
    v28 = *((_DWORD *)a3 + 9);
    v29 = *((_DWORD *)a3 + 10);
    v30 = *((_DWORD *)a3 + 52);
    v31 = a3[212];
    v32 = a3[213];
    v33 = *((_QWORD *)a3 + 27);
    *(_DWORD *)buf = 67116802;
    *(_DWORD *)&buf[4] = 60;
    LOWORD(v148) = 2080;
    *(_QWORD *)((char *)&v148 + 2) = "QMI_PDS_SEND_NI_RESPONSE";
    WORD5(v148) = 1024;
    HIDWORD(v148) = v85;
    LOWORD(v149) = 1024;
    *(_DWORD *)((char *)&v149 + 2) = v12;
    HIWORD(v149) = 1024;
    *(_DWORD *)v150 = v13;
    *(_WORD *)&v150[4] = 1024;
    *(_DWORD *)&v150[6] = v14;
    v151 = 1024;
    v152 = v29;
    v153 = 1024;
    v154 = v15;
    v155 = 2080;
    v156 = "#suplHash";
    v157 = 1024;
    v158 = v16;
    v159 = 1024;
    v160 = v17;
    v161 = 1024;
    v162 = v18;
    v163 = 1024;
    v164 = v19;
    v165 = 1024;
    v166 = v20;
    v167 = 2080;
    v168 = "#suplSlpServerIpv6Addr";
    v169 = 2080;
    v170 = "#suplSlpServerUrl";
    v171 = 1024;
    v172 = v21;
    v173 = 1024;
    v174 = v22;
    v175 = 2080;
    v176 = "#suplRequestorId";
    v177 = 1024;
    v178 = v23;
    v179 = 2080;
    v180 = "#suplClientName";
    v181 = 1024;
    v182 = v24;
    v183 = 1024;
    v184 = v25;
    v185 = 1024;
    v186 = v26;
    v187 = 1024;
    v188 = v27;
    v189 = 2080;
    v190 = "#url";
    v191 = 1024;
    v192 = v28;
    v193 = 1024;
    v194 = v30;
    v195 = 1024;
    v196 = v31;
    v197 = 1024;
    v198 = v32;
    v199 = 2048;
    v200 = v33;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,response,%d,isPromptValid,%d,isUrlValid,%d,isTriggerValid,%d,validMask,%d,suplPrivacy,%d,suplHash,%s,suplMode,%d,suplSessionId,%d,suplSlpServerIpv4Port,%d,suplSlpServerIpv4Addr,%d,suplSlpServerIpv6Port,%d,suplSlpServerIpv6Addr,%s,suplSlpServerUrl,%s,suplDcs,%d,suplRequestorIdDcs,%d,suplRequestorId,%s,suplClientNameDcs,%d,suplClientName,%s,suplQopHorizAcc,%d,suplQopVertzAcc,%d,suplQopMaxLocAge,%d,suplQopDelay,%durl,%s,trigger,%dsubId,%d,certIndex,%d,isMaskPresent,%d,mask,%llx", buf, 0xDCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v37 = a3[3];
    v38 = *a3;
    v39 = a3[2];
    v40 = a3[44];
    v41 = a3[72];
    v42 = *((_DWORD *)a3 + 19);
    v43 = *((_DWORD *)a3 + 20);
    v44 = *((_DWORD *)a3 + 21);
    v45 = *((_DWORD *)a3 + 22);
    v46 = a3[136];
    v47 = a3[137];
    v48 = a3[168];
    v49 = a3[200];
    v50 = a3[201];
    v51 = a3[202];
    v52 = a3[203];
    v53 = *((_DWORD *)a3 + 9);
    v54 = *((_DWORD *)a3 + 10);
    v55 = *((_DWORD *)a3 + 52);
    v56 = a3[212];
    v57 = a3[213];
    v58 = *((_QWORD *)a3 + 27);
    LOWORD(v90) = 2080;
    *(_QWORD *)((char *)&v90 + 2) = "QMI_PDS_SEND_NI_RESPONSE";
    WORD5(v90) = 1024;
    HIDWORD(v90) = v85;
    v91 = 1024;
    v92 = v37;
    v93 = 1024;
    v94 = v38;
    v95 = 1024;
    v96 = v39;
    v97 = 1024;
    v98 = v54;
    v99 = 1024;
    v100 = v40;
    v101 = 2080;
    v102 = "#suplHash";
    v103 = 1024;
    v104 = v41;
    v105 = 1024;
    v106 = v42;
    v107 = 1024;
    v108 = v43;
    v109 = 1024;
    v110 = v44;
    v111 = 1024;
    v112 = v45;
    v113 = 2080;
    v114 = "#suplSlpServerIpv6Addr";
    v115 = 2080;
    v116 = "#suplSlpServerUrl";
    v117 = 1024;
    v118 = v46;
    v119 = 1024;
    v120 = v47;
    v121 = 2080;
    v122 = "#suplRequestorId";
    v123 = 1024;
    v124 = v48;
    v125 = 2080;
    v126 = "#suplClientName";
    v127 = 1024;
    v128 = v49;
    v129 = 1024;
    v130 = v50;
    v131 = 1024;
    v132 = v51;
    v133 = 1024;
    v134 = v52;
    v135 = 2080;
    v136 = "#url";
    v137 = 1024;
    v138 = v53;
    v139 = 1024;
    v140 = v55;
    v141 = 1024;
    v142 = v56;
    v143 = 1024;
    v144 = v57;
    v145 = 2048;
    v146 = v58;
    LODWORD(v61) = 220;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,response,%d,isPromptValid,%d,isUrlValid,%d,isTriggerValid,%d,validMask,%d,suplPrivacy,%d,suplHash,%s,suplMode,%d,suplSessionId,%d,suplSlpServerIpv4Port,%d,suplSlpServerIpv4Addr,%d,suplSlpServerIpv6Port,%d,suplSlpServerIpv6Addr,%s,suplSlpServerUrl,%s,suplDcs,%d,suplRequestorIdDcs,%d,suplRequestorId,%s,suplClientNameDcs,%d,suplClientName,%s,suplQopHorizAcc,%d,suplQopVertzAcc,%d,suplQopMaxLocAge,%d,suplQopDelay,%durl,%s,trigger,%dsubId,%d,certIndex,%d,isMaskPresent,%d,mask,%llx", &v89, v61, v62, v63, v64, v65, v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      (_DWORD)v82,
      v83,
      v84,
      (const char *)__p,
      (_DWORD)v87,
      v88,
      67116802,
      (_DWORD)v90,
      *((_QWORD *)&v90 + 1));
    v60 = (uint8_t *)v59;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendNiResponse(BOOL, const CLEurekaNilrTypes::SuplInit &, void (^)(const pds::sendSuplNiResponse::Response &)) const", "%s\n", v59);
    if (v60 != buf)
      free(v60);
  }
  sub_101864C34(v85, a3[3], *a3, a3[2], (int *)a3 + 10, (char *)a3 + 44, (char *)a3 + 48, (char *)a3 + 72, (qmi::MutableMessageBase *)&v89, (int *)a3 + 19, (int *)a3 + 20, (int *)a3 + 21, (int *)a3 + 22, (uint64_t)(a3 + 92), (char *)a3 + 112, (char *)a3 + 136, (char *)a3 + 137, (char *)a3 + 144, (char *)a3 + 168,
    (char *)a3 + 176,
    (char *)a3 + 200,
    (char *)a3 + 201,
    (char *)a3 + 202,
    (char *)a3 + 203,
    (char *)&__p,
    (_DWORD *)a3 + 9,
    (_DWORD *)a3 + 52,
    (char *)a3 + 212,
    a3 + 213,
    (_QWORD *)a3 + 27);
  v34 = *v82;
  v36 = QMIServiceMsg::create((QMIServiceMsg *)&v89, v35);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v148 = 3221225472;
  *((_QWORD *)&v148 + 1) = sub_10173117C;
  v149 = &unk_1021C6CE8;
  *(_QWORD *)v150 = v83;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v34 + 16))(v34, v36, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v89);
  if (__p)
  {
    v87 = __p;
    operator delete(__p);
  }
}

void sub_101726618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,char a37)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101726654(uint64_t *a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, float a8)
{
  NSObject *v16;
  const qmi::MutableMessageBase *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  _DWORD v23[6];
  double v24;
  int v25;
  _BYTE v26[10];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  double v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint8_t buf[8];
  __int128 v40;
  void *v41;
  _BYTE v42[14];
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;

  sub_101864BA8(a2, a3, a4, a5, a6, (qmi::MutableMessageBase *)v23, a8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v16 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67110914;
    *(_DWORD *)&buf[4] = 97;
    LOWORD(v40) = 2080;
    *(_QWORD *)((char *)&v40 + 2) = "QMI_PDS_INJECT_MOTION_DATA";
    WORD5(v40) = 1024;
    HIDWORD(v40) = a2;
    LOWORD(v41) = 1024;
    *(_DWORD *)((char *)&v41 + 2) = a3;
    HIWORD(v41) = 1024;
    *(_DWORD *)v42 = a4;
    *(_WORD *)&v42[4] = 2048;
    *(double *)&v42[6] = a8;
    v43 = 1024;
    v44 = a5;
    v45 = 1024;
    v46 = a6;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,motion_state,%d,motion_mode,%d,motion_sub_mode,%d,probability_of_state,%.2f,age,%d,timeout,%d", buf, 0x3Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    *(_WORD *)v26 = 2080;
    *(_QWORD *)&v26[2] = "QMI_PDS_INJECT_MOTION_DATA";
    v27 = 1024;
    v28 = a2;
    v29 = 1024;
    v30 = a3;
    v31 = 1024;
    v32 = a4;
    v33 = 2048;
    v34 = a8;
    v35 = 1024;
    v36 = a5;
    v37 = 1024;
    v38 = a6;
    LODWORD(v22) = 58;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,motion_state,%d,motion_mode,%d,motion_sub_mode,%d,probability_of_state,%.2f,age,%d,timeout,%d", &v25, v22, v23[0], v23[2], v23[4], v24, 67110914, *(_DWORD *)v26);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetInjectMotionData(qmi::pds::QmiMotionDataState, qmi::pds::QmiMotionDataMode, qmi::pds::QmiMotionDataSubMode, float, uint16_t, uint16_t, void (^)(const pds::setInjectMotionData::Response &)) const", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v18 = *a1;
  v19 = QMIServiceMsg::create((QMIServiceMsg *)v23, v17);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v40 = 3221225472;
  *((_QWORD *)&v40 + 1) = sub_101731534;
  v41 = &unk_1021C6CE8;
  *(_QWORD *)v42 = a7;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v18 + 16))(v18, v19, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v23);
}

void sub_101726954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101726974(uint64_t *a1, int a2, int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v6;
  NSObject *v10;
  uint64_t *v11;
  const qmi::MutableMessageBase *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  void *__p[2];
  const char *v19;
  _BYTE v20[32];
  _DWORD v21[2];
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t *v29;
  uint8_t buf[8];
  __int128 v31;
  void *v32;
  uint64_t *v33;

  v6 = a4;
  if (*((char *)a4 + 23) < 0)
  {
    sub_100115CE4(__p, (void *)*a4, a4[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    v19 = (const char *)a4[2];
  }
  sub_101869C34(a2, a3, (uint64_t *)__p, (qmi::MutableMessageBase *)v20);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v11 = v6;
    if (*((char *)v6 + 23) < 0)
      v11 = (uint64_t *)*v6;
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = 120;
    LOWORD(v31) = 2080;
    *(_QWORD *)((char *)&v31 + 2) = "QMI_PDS_SET_APN_PROFILES";
    WORD5(v31) = 1024;
    HIDWORD(v31) = a2;
    LOWORD(v32) = 1024;
    *(_DWORD *)((char *)&v32 + 2) = a3;
    HIWORD(v32) = 2080;
    v33 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,apn,%d,pdnType,%d,apnName,%s", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    if (*((char *)v6 + 23) < 0)
      v6 = (uint64_t *)*v6;
    v21[0] = 67110146;
    v21[1] = 120;
    v22 = 2080;
    v23 = "QMI_PDS_SET_APN_PROFILES";
    v24 = 1024;
    v25 = a2;
    v26 = 1024;
    v27 = a3;
    v28 = 2080;
    v29 = v6;
    LODWORD(v17) = 40;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,apn,%d,pdnType,%d,apnName,%s", v21, v17, LODWORD(__p[0]), LODWORD(__p[1]), v19);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendApnConfig(uint32_t, uint32_t, std::string, void (^)(const pds::setApnProfiles::Response &)) const", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v13 = *a1;
  v14 = QMIServiceMsg::create((QMIServiceMsg *)v20, v12);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v31 = 3221225472;
  *((_QWORD *)&v31 + 1) = sub_1017318EC;
  v32 = &unk_1021C6CE8;
  v33 = a5;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v13 + 16))(v13, v14, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v20);
}

void sub_101726C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a18);
  _Unwind_Resume(a1);
}

void sub_101726CA0(uint64_t *a1, unsigned int a2, int a3, int a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v7;
  NSObject *v12;
  uint64_t *v13;
  const qmi::MutableMessageBase *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  void *__p[2];
  uint64_t v21;
  const char *v22;
  _BYTE v23[32];
  _DWORD v24[2];
  __int16 v25;
  const char *v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t *v34;
  uint8_t buf[8];
  __int128 v36;
  void *v37;
  _QWORD v38[201];

  v7 = a5;
  if (*((char *)a5 + 23) < 0)
  {
    sub_100115CE4(__p, (void *)*a5, a5[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    v21 = a5[2];
  }
  sub_101869D2C(a2, a3, a4, (uint64_t *)__p, (qmi::MutableMessageBase *)v23);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v13 = v7;
    if (*((char *)v7 + 23) < 0)
      v13 = (uint64_t *)*v7;
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = 120;
    LOWORD(v36) = 2080;
    *(_QWORD *)((char *)&v36 + 2) = "QMI_PDS_SET_APN_PROFILES";
    WORD5(v36) = 1024;
    HIDWORD(v36) = a2;
    LOWORD(v37) = 1024;
    *(_DWORD *)((char *)&v37 + 2) = a3;
    HIWORD(v37) = 1024;
    LODWORD(v38[0]) = a4;
    WORD2(v38[0]) = 2080;
    *(_QWORD *)((char *)v38 + 6) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,instance,%d,apn,%d,pdnType,%d,apnName,%s", buf, 0x2Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    if (*((char *)v7 + 23) < 0)
      v7 = (uint64_t *)*v7;
    v24[0] = 67110402;
    v24[1] = 120;
    v25 = 2080;
    v26 = "QMI_PDS_SET_APN_PROFILES";
    v27 = 1024;
    v28 = a2;
    v29 = 1024;
    v30 = a3;
    v31 = 1024;
    v32 = a4;
    v33 = 2080;
    v34 = v7;
    LODWORD(v19) = 46;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,instance,%d,apn,%d,pdnType,%d,apnName,%s", v24, v19, LODWORD(__p[0]), LODWORD(__p[1]), v21, v22);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendApnConfigForInstance(CLTelephonyService_Type::SimInstance, uint32_t, uint32_t, std::string, void (^)(const pds::setApnProfiles::Response &)) const", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  v15 = *a1;
  v16 = QMIServiceMsg::create((QMIServiceMsg *)v23, v14);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v36 = 3221225472;
  *((_QWORD *)&v36 + 1) = sub_1017318EC;
  v37 = &unk_1021C6CE8;
  v38[0] = a6;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v15 + 16))(v15, v16, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v23);
}

void sub_101726FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a18);
  _Unwind_Resume(a1);
}

void sub_101726FE8(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  sub_101869E54(a2, (qmi::MutableMessageBase *)v13);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 131;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_SET_SUPL_UDP_CONFIG";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,config,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 131;
    v15 = 2080;
    v16 = "QMI_PDS_SET_SUPL_UDP_CONFIG";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,config,%d", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSuplUdpPortConfig(uint32_t, void (^)(const pds::setSuplUdpPortConfig::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_101731CA4;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_101727250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101727270(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  sub_101869EA4(a2, (qmi::MutableMessageBase *)v13);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 126;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_SET_LPP_CONFIG";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enableMask,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 126;
    v15 = 2080;
    v16 = "QMI_PDS_SET_LPP_CONFIG";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,enableMask,%d", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetLppConfig(uint32_t, void (^)(const pds::setLppConfig::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_10173205C;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_1017274D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017274F8(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  NSObject *v8;
  const qmi::MutableMessageBase *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  _DWORD v15[8];
  _DWORD v16[2];
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[8];
  __int128 v24;
  void *v25;
  uint64_t v26;

  sub_101869EF4(a2, a3, (qmi::MutableMessageBase *)v15);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = 138;
    LOWORD(v24) = 2080;
    *(_QWORD *)((char *)&v24 + 2) = "QMI_PDS_SET_EMERGENCY_SUPPORT_CONFIG";
    WORD5(v24) = 1024;
    HIDWORD(v24) = a2;
    LOWORD(v25) = 1024;
    *(_DWORD *)((char *)&v25 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,isHeloEnabled,%d,isEarlyReturnEnabled,%d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v16[0] = 67109890;
    v16[1] = 138;
    v17 = 2080;
    v18 = "QMI_PDS_SET_EMERGENCY_SUPPORT_CONFIG";
    v19 = 1024;
    v20 = a2;
    v21 = 1024;
    v22 = a3;
    LODWORD(v14) = 30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,isHeloEnabled,%d,isEarlyReturnEnabled,%d", v16, v14, v15[0], v15[2]);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetEmergencySupportConfig(BOOL, BOOL, void (^)(const pds::setEmergencySupportConfig::Response &)) const", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v10 = *a1;
  v11 = QMIServiceMsg::create((QMIServiceMsg *)v15, v9);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v24 = 3221225472;
  *((_QWORD *)&v24 + 1) = sub_101732414;
  v25 = &unk_1021C6CE8;
  v26 = a4;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v10 + 16))(v10, v11, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v15);
}

void sub_101727778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101727798(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  sub_101869F64(a2 != 0, (qmi::MutableMessageBase *)v13);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 147;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_SET_OTDOA_CONFIG";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 147;
    v15 = 2080;
    v16 = "QMI_PDS_SET_OTDOA_CONFIG";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,enable,%d", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetOtdoaConfig(uint32_t, void (^)(const pds::setOTDOAConfig::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_1017327CC;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_101727A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101727A24(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _BYTE v12[32];
  _DWORD v13[2];
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint8_t buf[8];
  __int128 v19;
  void *v20;
  uint64_t v21;

  sub_10186481C(a2, (qmi::MutableMessageBase *)v12);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 150;
    LOWORD(v19) = 2080;
    *(_QWORD *)((char *)&v19 + 2) = "QMI_PDS_SET_GNSS_SIGNAL_ENVIRONMENT";
    WORD5(v19) = 1026;
    HIDWORD(v19) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,type,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v13[0] = 67109634;
    v13[1] = 150;
    v14 = 2080;
    v15 = "QMI_PDS_SET_GNSS_SIGNAL_ENVIRONMENT";
    v16 = 1026;
    v17 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,type,%{public}d", v13, 24);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetSignalEnvironmentConfig(qmi::pds::SignalEnvironment, void (^)(const pds::injectSignalEnvironment::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v12, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v19 = 3221225472;
  *((_QWORD *)&v19 + 1) = sub_101732B84;
  v20 = &unk_1021C6CE8;
  v21 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);
}

void sub_101727C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101727CAC(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  const qmi::MutableMessageBase *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  _BYTE v11[32];
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  uint8_t buf[8];
  __int128 v16;
  void *v17;
  uint64_t v18;

  sub_101869FB4((qmi::MutableMessageBase *)v11);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = 132;
    LOWORD(v16) = 2080;
    *(_QWORD *)((char *)&v16 + 2) = "QMI_PDS_CANCEL_ONGOING_SESSION";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,\n", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v12[0] = 67109378;
    v12[1] = 132;
    v13 = 2080;
    v14 = "QMI_PDS_CANCEL_ONGOING_SESSION";
    LODWORD(v10) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,\n", v12, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendCancelOngoingSession(void (^)(const pds::cancelOngoingSession::Response &)) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v6 = *a1;
  v7 = QMIServiceMsg::create((QMIServiceMsg *)v11, v5);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v16 = 3221225472;
  *((_QWORD *)&v16 + 1) = sub_101732F3C;
  v17 = &unk_1021C6CE8;
  v18 = a2;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v6 + 16))(v6, v7, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v11);
}

void sub_101727EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101727F0C(uint64_t *a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  NSObject *v12;
  const qmi::MutableMessageBase *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  _DWORD v19[8];
  _DWORD v20[2];
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint8_t buf[8];
  __int128 v32;
  void *v33;
  _QWORD v34[201];

  sub_101869FC0(a2, a3, a4, a5, (qmi::MutableMessageBase *)v19);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = 116;
    LOWORD(v32) = 2080;
    *(_QWORD *)((char *)&v32 + 2) = "QMI_PDS_SET_AGNSS_POSITIONING_MODES";
    WORD5(v32) = 1024;
    HIDWORD(v32) = a2;
    LOWORD(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 2) = a3;
    HIWORD(v33) = 1024;
    LODWORD(v34[0]) = a4;
    WORD2(v34[0]) = 1024;
    *(_DWORD *)((char *)v34 + 6) = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,userplanemode,%d,controlplanemode,%d,commonmode,%d,gsmuserplanemode,%d", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v20[0] = 67110402;
    v20[1] = 116;
    v21 = 2080;
    v22 = "QMI_PDS_SET_AGNSS_POSITIONING_MODES";
    v23 = 1024;
    v24 = a2;
    v25 = 1024;
    v26 = a3;
    v27 = 1024;
    v28 = a4;
    v29 = 1024;
    v30 = a5;
    LODWORD(v18) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,userplanemode,%d,controlplanemode,%d,commonmode,%d,gsmuserplanemode,%d", v20, v18, v19[0], v19[2], v19[4], v19[6]);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendsetUserPlanePositionModes(uint32_t, uint32_t, uint32_t, uint8_t, void (^)(const pds::setUserPlanePositionModes::Response &)) const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v14 = *a1;
  v15 = QMIServiceMsg::create((QMIServiceMsg *)v19, v13);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v32 = 3221225472;
  *((_QWORD *)&v32 + 1) = sub_1017332F4;
  v33 = &unk_1021C6CE8;
  v34[0] = a6;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v14 + 16))(v14, v15, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
}

void sub_1017281C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017281E4(uint64_t *a1, int a2, uint64_t a3, int a4, uint64_t a5, float a6, float a7)
{
  NSObject *v14;
  const qmi::MutableMessageBase *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  int v21;
  uint64_t v22;
  double v23;
  double v24;
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;
  uint8_t buf[8];
  __int128 v39;
  _BYTE v40[20];
  __int16 v41;
  double v42;
  __int16 v43;
  int v44;

  sub_10186A034(a2, a3, a4, (qmi::MutableMessageBase *)&v21, a6, a7);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67110658;
    *(_DWORD *)&buf[4] = 102;
    LOWORD(v39) = 2080;
    *(_QWORD *)((char *)&v39 + 2) = "QMI_PDS_INJECT_COURSE_OVER_GROUND";
    WORD5(v39) = 1024;
    HIDWORD(v39) = a2;
    *(_WORD *)v40 = 2048;
    *(_QWORD *)&v40[2] = a3;
    *(_WORD *)&v40[10] = 2048;
    *(double *)&v40[12] = a6;
    v41 = 2048;
    v42 = a7;
    v43 = 1024;
    v44 = a4;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,time_type,%d,timestamp,%llun,course,%.2f,courseunc,%.2f,reliability,%d", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v26 = 2080;
    v27 = "QMI_PDS_INJECT_COURSE_OVER_GROUND";
    v28 = 1024;
    v29 = a2;
    v30 = 2048;
    v31 = a3;
    v32 = 2048;
    v33 = a6;
    v34 = 2048;
    v35 = a7;
    v36 = 1024;
    v37 = a4;
    LODWORD(v20) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,time_type,%d,timestamp,%llun,course,%.2f,courseunc,%.2f,reliability,%d", &v25, v20, v21, v22, v23, v24, 67110658);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectDirectionOfTravel(qmi::pds::TimeType, uint64_t, float, float, qmi::pds::QmiReliabilityIndication, void (^)(const pds::setInjectDirectionOfTravel::Response &)) const", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v16 = *a1;
  v17 = QMIServiceMsg::create((QMIServiceMsg *)&v21, v15);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v39 = 3221225472;
  *((_QWORD *)&v39 + 1) = sub_1017336AC;
  *(_QWORD *)v40 = &unk_1021C6CE8;
  *(_QWORD *)&v40[8] = a5;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v16 + 16))(v16, v17, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v21);
}

void sub_1017284D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017284F0(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  sub_10186A100(a2, (qmi::MutableMessageBase *)v13);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 161;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_SET_GNSS_ENGINE_MONITOR_REPORT_CONFIG";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 161;
    v15 = 2080;
    v16 = "QMI_PDS_SET_GNSS_ENGINE_MONITOR_REPORT_CONFIG";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,enable,%d", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetGnssEngineMonitorConfig(BOOL, void (^)(const pds::setGnssEngineMonitorConfig::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_101733A64;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_101728758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101728778(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  const qmi::MutableMessageBase *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  int v15;
  uint64_t v16;
  _DWORD v17[2];
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[8];
  __int128 v25;
  __int128 v26;

  sub_10186A150(a2, a3, (qmi::MutableMessageBase *)&v15);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = 169;
    LOWORD(v25) = 2080;
    *(_QWORD *)((char *)&v25 + 2) = "QMI_PDS_SET_E911_OVERRIDE_CONFIG";
    WORD5(v25) = 1024;
    HIDWORD(v25) = a2;
    LOWORD(v26) = 2048;
    *(_QWORD *)((char *)&v26 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable,%d,config,%llx", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v17[0] = 67109890;
    v17[1] = 169;
    v18 = 2080;
    v19 = "QMI_PDS_SET_E911_OVERRIDE_CONFIG";
    v20 = 1024;
    v21 = a2;
    v22 = 2048;
    v23 = a3;
    LODWORD(v14) = 34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,enable,%d,config,%llx", v17, v14, v15, v16);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetEmergencyModeLockoutConfig(BOOL, qmi::pds::E911OverrideConfig, void (^)(const pds::setEmergencyModeLockoutConfig::Response &)) const", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v10 = *a1;
  v11 = QMIServiceMsg::create((QMIServiceMsg *)&v15, v9);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v25 = 3221225472;
  *((_QWORD *)&v25 + 1) = sub_101733DDC;
  *(_QWORD *)&v26 = &unk_1021C6CE8;
  *((_QWORD *)&v26 + 1) = a4;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v10 + 16))(v10, v11, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v15);
}

void sub_101728A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101728A20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t *v9;
  void **v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  void *__p[2];
  uint64_t v22;
  _BYTE v23[32];
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _DWORD v28[2];
  __int16 v29;
  const char *v30;
  uint8_t buf[8];
  __int128 v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[4];
  _QWORD v36[4];
  _QWORD v37[4];
  _QWORD v38[4];
  _QWORD v39[4];
  _QWORD v40[4];
  _QWORD v41[4];
  _QWORD v42[4];
  uint64_t v43[168];

  sub_10186A1C0(a2, (qmi::MutableMessageBase *)v23);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = 139;
    LOWORD(v32) = 2080;
    *(_QWORD *)((char *)&v32 + 2) = "QMI_PDS_SET_BLOCKLIST_SV";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,#rti\n", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v28[0] = 67109378;
    v28[1] = 139;
    v29 = 2080;
    v30 = "QMI_PDS_SET_BLOCKLIST_SV";
    LODWORD(v20) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,#rti\n", v28, v20);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetBlockList(const qmi::pds::BlockListSv &, void (^)(const pds::setBlocklistSv::Response &)) const", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = a2;
    sub_1015A2E04(&v32, "gps-bl,");
    v34 = a2 + 120;
    sub_1015A2E04(v35, "gps-cl,");
    v35[3] = a2 + 24;
    sub_1015A2E04(v36, "glo-bl,");
    v36[3] = a2 + 144;
    sub_1015A2E04(v37, "glo-cl,");
    v37[3] = a2 + 96;
    sub_1015A2E04(v38, "gal-bl,");
    v38[3] = a2 + 216;
    sub_1015A2E04(v39, "gal-cl,");
    v39[3] = a2 + 72;
    sub_1015A2E04(v40, "bds-bl,");
    v40[3] = a2 + 192;
    sub_1015A2E04(v41, "bds-cl,");
    v41[3] = a2 + 48;
    sub_1015A2E04(v42, "qzss-bl,");
    v42[3] = a2 + 168;
    sub_1015A2E04(v43, "qzss-cl,");
    v8 = 0;
    while (1)
    {
      v9 = *(uint64_t **)&buf[v8];
      v10 = (void **)&buf[v8 + 8];
      if (*((char *)&v33 + v8 + 7) < 0)
      {
        sub_100115CE4(__p, *v10, *(_QWORD *)((char *)&v32 + v8 + 8));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v10;
        v22 = *(uint64_t *)((char *)&v33 + v8);
      }
      v25 = v24;
      v26[0] = off_1021CDC00;
      v27 = v26;
      v24[0] = off_1021CDC80;
      v24[1] = sub_101729210;
      sub_101728FE8(v9, (uint64_t)__p, v26, (uint64_t)v24);
      v11 = v25;
      if (v25 == v24)
      {
        v11 = v24;
        v12 = 4;
      }
      else
      {
        if (!v25)
          goto LABEL_18;
        v12 = 5;
      }
      (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_18:
      v13 = v27;
      if (v27 == v26)
      {
        v13 = v26;
        v14 = 4;
        goto LABEL_22;
      }
      if (v27)
      {
        v14 = 5;
LABEL_22:
        (*(void (**)(void))(*v13 + 8 * v14))();
      }
      if (SHIBYTE(v22) < 0)
        operator delete(__p[0]);
      v8 += 32;
      if (v8 == 320)
      {
        v15 = 320;
        do
        {
          if ((char)buf[v15 - 1] < 0)
            operator delete(*(void **)((char *)&v29 + v15));
          v15 -= 32;
        }
        while (v15);
        break;
      }
    }
  }
  v16 = *a1;
  v17 = QMIServiceMsg::create((QMIServiceMsg *)v23, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v32 = 3221225472;
  *((_QWORD *)&v32 + 1) = sub_101734DF4;
  v33 = &unk_1021C6CE8;
  v34 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v16 + 16))(v16, v17, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v23);
}

void sub_101728EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a18);
  _Unwind_Resume(a1);
}

void sub_101728FE8(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;

  if (!a3[3])
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v19 = *(_QWORD *)(a2 + 16);
    }
    sub_101734194(a3, (uint64_t *)__p);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
  }
  v8 = *a1;
  v9 = a1[1];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(v16, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)a2;
    v17 = *(_QWORD *)(a2 + 16);
  }
  sub_100270E34((uint64_t)v22, (uint64_t)a3);
  sub_100270E34((uint64_t)v20, a4);
  sub_101734290(v8, v9, (uint64_t)v16, (uint64_t)v22, (uint64_t)v20);
  v12 = v21;
  if (v21 == v20)
  {
    v13 = 4;
    v12 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v12 + 8 * v13))(v12, v10, v11);
LABEL_15:
  v14 = v23;
  if (v23 == v22)
  {
    v15 = 4;
    v14 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_20;
    v15 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v14 + 8 * v15))(v14, v10, v11);
LABEL_20:
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
}

void sub_10172916C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101729210@<X0>(unsigned __int16 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char v8;
  _QWORD v9[2];
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;

  sub_100263E50((uint64_t)v9);
  v4 = v10;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(v10 - 24)) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(v10 - 24)) & 0xFFFFFFB5 | 8;
  *(_QWORD *)((char *)&v11[2] + *(_QWORD *)(v4 - 24)) = 2;
  v8 = 48;
  v5 = sub_100B06348(&v10, &v8);
  std::ostream::operator<<(v5, *a1);
  std::stringbuf::str(a2, v11);
  *(_QWORD *)((char *)v9
  v10 = v6;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf(v11);
  return std::ios::~ios(&v13);
}

void sub_101729308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101729320(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  const qmi::MutableMessageBase *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  _DWORD v14[8];
  _DWORD v15[2];
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint8_t buf[8];
  __int128 v21;
  void *v22;
  uint64_t v23;

  sub_10186A3B0(a2, a3, (qmi::MutableMessageBase *)v14);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 103;
    LOWORD(v21) = 2080;
    *(_QWORD *)((char *)&v21 + 2) = "QMI_PDS_INJECT_SUPL_CERTIFICATE";
    WORD5(v21) = 1024;
    HIDWORD(v21) = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,suplCertId,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v15[0] = 67109634;
    v15[1] = 103;
    v16 = 2080;
    v17 = "QMI_PDS_INJECT_SUPL_CERTIFICATE";
    v18 = 1024;
    v19 = a2;
    LODWORD(v13) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,suplCertId,%d", v15, v13, v14[0]);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectSuplCert(qmi::pds::SuplCertIndex, const std::vector<uint8_t> &, void (^)(const pds::setInjectSuplCert::Response &)) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v9 = *a1;
  v10 = QMIServiceMsg::create((QMIServiceMsg *)v14, v8);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v21 = 3221225472;
  *((_QWORD *)&v21 + 1) = sub_1017351AC;
  v22 = &unk_1021C6CE8;
  v23 = a4;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v9 + 16))(v9, v10, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_10172958C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017295AC(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  sub_10186A4C0(a2, (qmi::MutableMessageBase *)v13);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 104;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_DELETE_SUPL_CERTIFICATE";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,suplCertId,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 104;
    v15 = 2080;
    v16 = "QMI_PDS_DELETE_SUPL_CERTIFICATE";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,suplCertId,%d", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendDeleteSuplCert(qmi::pds::SuplCertIndex, void (^)(const pds::setDeleteSuplCert::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_101735564;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_101729814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101729834(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  sub_10186A510(a2, (qmi::MutableMessageBase *)v13);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 152;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_SET_CALIBRATION_STATE_CONFIG";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,XOCalibrationConfig,%u", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 152;
    v15 = 2080;
    v16 = "QMI_PDS_SET_CALIBRATION_STATE_CONFIG";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,XOCalibrationConfig,%u", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetXOCalibrationConfig(qmi::pds::XOCalibrationStateConfig, void (^)(const pds::setXOCalibrationStateConfig::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_10173591C;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_101729A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101729ABC(uint64_t *a1, float *a2, uint64_t a3)
{
  char *v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  const qmi::MutableMessageBase *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  _DWORD v24[8];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint8_t buf[8];
  __int128 v39;
  void *v40;
  _BYTE v41[10];
  __int16 v42;
  int v43;

  sub_10186A770(a2, (qmi::MutableMessageBase *)v24);
  v5 = sub_101735C94((uint64_t)v24, 17);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(__int16 *)sub_101735F08((uint64_t)v24, 1);
    v8 = *(unsigned __int16 *)sub_101736140((uint64_t)v24, 16);
    v9 = *(unsigned __int16 *)v5;
    v10 = *((unsigned __int16 *)v5 + 1);
    v11 = *((unsigned __int16 *)v5 + 2);
    *(_DWORD *)buf = 67110658;
    *(_DWORD *)&buf[4] = 101;
    LOWORD(v39) = 2080;
    *(_QWORD *)((char *)&v39 + 2) = "QMI_PDS_SET_GNSS_RF_CONFIG";
    WORD5(v39) = 1024;
    HIDWORD(v39) = v7;
    LOWORD(v40) = 1024;
    *(_DWORD *)((char *)&v40 + 2) = v8;
    HIWORD(v40) = 1024;
    *(_DWORD *)v41 = v9;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = v10;
    v42 = 1024;
    v43 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,peakAntennaGainL1,%d,gpsLossL1,%u,gloLoss,%u,%u,%u", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v15 = qword_1022A0078;
    v16 = *(__int16 *)sub_101735F08((uint64_t)v24, 1);
    v17 = *(unsigned __int16 *)sub_101736140((uint64_t)v24, 16);
    v18 = *(unsigned __int16 *)v5;
    v19 = *((unsigned __int16 *)v5 + 1);
    v20 = *((unsigned __int16 *)v5 + 2);
    v26 = 2080;
    v27 = "QMI_PDS_SET_GNSS_RF_CONFIG";
    v28 = 1024;
    v29 = v16;
    v30 = 1024;
    v31 = v17;
    v32 = 1024;
    v33 = v18;
    v34 = 1024;
    v35 = v19;
    v36 = 1024;
    v37 = v20;
    LODWORD(v23) = 48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 2, "#bb.e,QMI,0x%04X,%s,peakAntennaGainL1,%d,gpsLossL1,%u,gloLoss,%u,%u,%u", &v25, v23, v24[0], v24[2], v24[4], v24[6], 67110658);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendL1RfConfig(const CLPlatformInfo::GnssL1RfParameters &, void (^)(const pds::SetGnssRfConfig::Response &)) const", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  v13 = *a1;
  v14 = QMIServiceMsg::create((QMIServiceMsg *)v24, v12);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v39 = 3221225472;
  *((_QWORD *)&v39 + 1) = sub_101736328;
  v40 = &unk_1021C6CE8;
  *(_QWORD *)v41 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v13 + 16))(v13, v14, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v24);
}

void sub_101729DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101729DF4(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  sub_10186AAE4(a2, (qmi::MutableMessageBase *)v13);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 183;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_SET_WWAN_L5_BLANKING_CONTROL";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 183;
    v15 = 2080;
    v16 = "QMI_PDS_SET_WWAN_L5_BLANKING_CONTROL";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,enable,%d", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetWwanAntTuneL5BlankingControl(const BOOL, void (^)(const pds::setWwanAntTuneL5BlankingControl::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_1017366E0;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_10172A05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172A07C(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  sub_10186AB34(a2, (qmi::MutableMessageBase *)v13);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 192;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_SET_CONSTELLATION_CONTROL";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,mask,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 192;
    v15 = 2080;
    v16 = "QMI_PDS_SET_CONSTELLATION_CONTROL";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,mask,%d", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetConstellationControl(uint32_t, void (^)(const pds::setConstellationControl::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_101736A98;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_10172A2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172A304(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  NSObject *v8;
  const qmi::MutableMessageBase *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  _DWORD v15[8];
  _DWORD v16[2];
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[8];
  __int128 v24;
  void *v25;
  uint64_t v26;

  sub_10186AB98(a2, a3, (qmi::MutableMessageBase *)v15);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = 224;
    LOWORD(v24) = 2080;
    *(_QWORD *)((char *)&v24 + 2) = "MAV_QMI_PDS_GET_TIMING_ADVANCE_REPORT";
    WORD5(v24) = 1024;
    HIDWORD(v24) = a2;
    LOWORD(v25) = 1024;
    *(_DWORD *)((char *)&v25 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,getTimingAdvance,rat,%x,sub_id,%x", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v16[0] = 67109890;
    v16[1] = 224;
    v17 = 2080;
    v18 = "MAV_QMI_PDS_GET_TIMING_ADVANCE_REPORT";
    v19 = 1024;
    v20 = a2;
    v21 = 1024;
    v22 = a3;
    LODWORD(v14) = 30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,getTimingAdvance,rat,%x,sub_id,%x", v16, v14, v15[0], v15[2]);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendGetTimingAdvance(uint8_t, uint8_t, void (^)(const pds::getTimingAdvance::Response &)) const", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v10 = *a1;
  v11 = QMIServiceMsg::create((QMIServiceMsg *)v15, v9);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v24 = 3221225472;
  *((_QWORD *)&v24 + 1) = sub_101736E50;
  v25 = &unk_1021C6CE8;
  v26 = a4;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v10 + 16))(v10, v11, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v15);
}

void sub_10172A584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172A5A4(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

ATCSCounted **sub_10172A5D0(ATCSCounted **a1, QMIServiceMsg *this)
{
  ATCSCounted *v3;

  *a1 = 0;
  v3 = (ATCSCounted *)QMIServiceMsg::create(this, (unsigned __int16)this);
  *a1 = v3;
  if (!v3)
    sub_101737208();
  ATCSCounted::incRef(v3);
  return a1;
}

void sub_10172A60C(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::reset::Request, ResponseType = pds::reset::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172A8A4((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172A888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172A8A4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172A984(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172A944((uint64_t)a2);
  }
}

void sub_10172A928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172A944(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0);
  return a1;
}

void sub_10172A970(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172A984(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0);
  return a1;
}

void sub_10172A9B0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10172A9C4(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3, char a4)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 v23;
  unsigned __int8 *v24;
  unsigned __int8 v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  __int16 v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 v42;
  unsigned int v43;
  unsigned int v44;
  unsigned __int8 v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned int v50;
  unsigned __int8 v51;
  unsigned int v52;
  unsigned __int8 v53;
  unsigned __int8 *v54;
  BOOL v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned int v60;
  __int16 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned __int8 *v74;
  __int16 v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned int v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  __int16 v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unsigned int v93;
  __int16 v94;
  unsigned int v95;
  unsigned __int8 *v96;
  unsigned __int8 *v98;
  unsigned int v99;
  unsigned int v100;
  __int16 v101;
  unsigned int v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unsigned __int8 v105;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (a2 - v8) >> 1;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v40 = *(a2 - 2);
        v41 = *v8;
        if (v40 < v41)
        {
          *v8 = v40;
          *(a2 - 2) = v41;
          v42 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v42;
        }
        return result;
      case 3uLL:
        return sub_10172B130(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return sub_10172B404(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        result = sub_10172B404(v8, v8 + 2, v8 + 4, v8 + 6);
        v43 = *(a2 - 2);
        v44 = v8[6];
        if (v43 < v44)
        {
          v8[6] = v43;
          *(a2 - 2) = v44;
          v45 = v8[7];
          v8[7] = *(a2 - 1);
          *(a2 - 1) = v45;
          v46 = v8[6];
          v47 = v8[4];
          if (v46 < v47)
          {
            v8[4] = v46;
            v8[6] = v47;
            v48 = v8[5];
            v49 = v8[7];
            v8[5] = v49;
            v8[7] = v48;
            v50 = v8[2];
            if (v46 < v50)
            {
              v8[2] = v46;
              v8[4] = v50;
              v51 = v8[3];
              v8[3] = v49;
              v8[5] = v51;
              v52 = *v8;
              if (v46 < v52)
              {
                *v8 = v46;
                v8[2] = v52;
                v53 = v8[1];
                v8[1] = v49;
                v8[3] = v53;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 47)
        {
          v54 = v8 + 2;
          v56 = v8 == a2 || v54 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v56)
            {
              v57 = 0;
              v58 = v8;
              do
              {
                v59 = v58[2];
                v60 = *v58;
                v58 = v54;
                if (v59 < v60)
                {
                  v61 = *(_WORD *)v54;
                  v62 = *(_WORD *)v58;
                  v63 = v57;
                  while (1)
                  {
                    v64 = &v8[v63];
                    v64[2] = v60;
                    v64[3] = v8[v63 + 1];
                    if (!v63)
                      break;
                    v60 = *(v64 - 2);
                    v63 -= 2;
                    if (v60 <= v62)
                    {
                      v65 = &v8[v63 + 2];
                      goto LABEL_79;
                    }
                  }
                  v65 = v8;
LABEL_79:
                  *v65 = v62;
                  v65[1] = HIBYTE(v61);
                }
                v54 = v58 + 2;
                v57 += 2;
              }
              while (v58 + 2 != a2);
            }
          }
          else if (!v56)
          {
            v98 = v8 + 3;
            do
            {
              v99 = v7[2];
              v100 = *v7;
              v7 = v54;
              if (v99 < v100)
              {
                v101 = *(_WORD *)v54;
                v102 = *(_WORD *)v54;
                v103 = v98;
                do
                {
                  v104 = v103;
                  *(v103 - 1) = v100;
                  v105 = *(v103 - 2);
                  v103 -= 2;
                  *v104 = v105;
                  v100 = *(v104 - 5);
                }
                while (v100 > v102);
                *(v103 - 1) = v102;
                *v103 = HIBYTE(v101);
              }
              v54 = v7 + 2;
              v98 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v66 = (v10 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v8[2 * v69];
                if (2 * v68 + 2 >= (uint64_t)v10)
                {
                  v71 = *v70;
                }
                else
                {
                  v71 = *v70;
                  v72 = v70[2];
                  v73 = v71 >= v72;
                  if (v71 <= v72)
                    v71 = v70[2];
                  if (!v73)
                  {
                    v70 += 2;
                    v69 = 2 * v68 + 2;
                  }
                }
                v74 = &v8[2 * v68];
                if (v71 >= *v74)
                {
                  v75 = *(_WORD *)v74;
                  do
                  {
                    v76 = v74;
                    v74 = v70;
                    *v76 = v71;
                    v76[1] = v70[1];
                    if (v66 < v69)
                      break;
                    v77 = (2 * v69) | 1;
                    v70 = &v8[2 * v77];
                    v69 = 2 * v69 + 2;
                    if (v69 >= (uint64_t)v10)
                    {
                      v71 = *v70;
                      v69 = v77;
                    }
                    else
                    {
                      v71 = *v70;
                      result = v70 + 2;
                      v78 = v70[2];
                      v79 = v71 >= v78;
                      if (v71 <= v78)
                        v71 = v70[2];
                      if (v79)
                        v69 = v77;
                      else
                        v70 += 2;
                    }
                  }
                  while (v71 >= v75);
                  *(_WORD *)v74 = v75;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v80 = (unint64_t)v9 >> 1;
            do
            {
              v81 = 0;
              v82 = *(_WORD *)v8;
              v83 = v8;
              do
              {
                v84 = 2 * v81 + 2;
                v85 = &v83[v84];
                v86 = (2 * v81) | 1;
                if (v84 >= v80)
                {
                  LOBYTE(v88) = *v85;
                  v81 = (2 * v81) | 1;
                }
                else
                {
                  v87 = *v85;
                  v88 = v85[2];
                  v89 = v87 >= v88;
                  if (v87 > v88)
                    LOBYTE(v88) = *v85;
                  if (v89)
                  {
                    v81 = v86;
                  }
                  else
                  {
                    v85 += 2;
                    v81 = v84;
                  }
                }
                *v83 = v88;
                v83[1] = v85[1];
                v83 = v85;
              }
              while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
              if (v85 == a2 - 2)
              {
                *(_WORD *)v85 = v82;
              }
              else
              {
                *(_WORD *)v85 = *((_WORD *)a2 - 1);
                *((_WORD *)a2 - 1) = v82;
                v90 = v85 - v8 + 2;
                if (v90 >= 3)
                {
                  v91 = (((unint64_t)v90 >> 1) - 2) >> 1;
                  v92 = &v8[2 * v91];
                  v93 = *v92;
                  if (v93 < *v85)
                  {
                    v94 = *(_WORD *)v85;
                    v95 = *(_WORD *)v85;
                    do
                    {
                      v96 = v85;
                      v85 = v92;
                      *v96 = v93;
                      v96[1] = v92[1];
                      if (!v91)
                        break;
                      v91 = (v91 - 1) >> 1;
                      v92 = &v8[2 * v91];
                      v93 = *v92;
                    }
                    while (v93 < v95);
                    *v85 = v95;
                    v85[1] = HIBYTE(v94);
                  }
                }
              }
              a2 -= 2;
            }
            while (v80-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x101)
        {
          result = sub_10172B130(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_10172B130(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          sub_10172B130(v7 + 2, v12 - 2, a2 - 4);
          sub_10172B130(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = sub_10172B130(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
          v14 = v7[1];
          v7[1] = v12[1];
          v12[1] = v14;
        }
        --a3;
        if ((a4 & 1) == 0 && *(v7 - 2) >= *v7)
        {
          v29 = *(_WORD *)v7;
          v30 = *(_WORD *)v7;
          if (*(a2 - 2) <= v30)
          {
            v32 = v7 + 2;
            do
            {
              v8 = v32;
              if (v32 >= a2)
                break;
              v32 += 2;
            }
            while (*v8 <= v30);
          }
          else
          {
            v8 = v7;
            do
            {
              v31 = v8[2];
              v8 += 2;
            }
            while (v31 <= v30);
          }
          v33 = a2;
          if (v8 < a2)
          {
            v33 = a2;
            do
            {
              v34 = *(v33 - 2);
              v33 -= 2;
            }
            while (v34 > v30);
          }
          if (v8 < v33)
          {
            v35 = *v8;
            v36 = *v33;
            do
            {
              *v8 = v36;
              *v33 = v35;
              v37 = v8[1];
              v8[1] = v33[1];
              v33[1] = v37;
              do
              {
                v38 = v8[2];
                v8 += 2;
                v35 = v38;
              }
              while (v38 <= v30);
              do
              {
                v39 = *(v33 - 2);
                v33 -= 2;
                v36 = v39;
              }
              while (v39 > v30);
            }
            while (v8 < v33);
          }
          if (v8 - 2 != v7)
            *(_WORD *)v7 = *((_WORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v30;
          *(v8 - 1) = HIBYTE(v29);
          continue;
        }
        v15 = 0;
        v16 = *(_WORD *)v7;
        v17 = *(_WORD *)v7;
        do
        {
          v18 = v7[v15 + 2];
          v15 += 2;
        }
        while (v18 < v17);
        v19 = &v7[v15];
        v20 = a2;
        if (v15 == 2)
        {
          v20 = a2;
          do
          {
            if (v19 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v17);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v17);
        }
        if (v19 >= v20)
        {
          v8 = &v7[v15];
        }
        else
        {
          v23 = *v20;
          v8 = &v7[v15];
          v24 = v20;
          do
          {
            *v8 = v23;
            *v24 = v18;
            v25 = v8[1];
            v8[1] = v24[1];
            v24[1] = v25;
            do
            {
              v26 = v8[2];
              v8 += 2;
              LOBYTE(v18) = v26;
            }
            while (v26 < v17);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
              v23 = v27;
            }
            while (v27 >= v17);
          }
          while (v8 < v24);
        }
        if (v8 - 2 != v7)
          *(_WORD *)v7 = *((_WORD *)v8 - 1);
        *(v8 - 2) = v17;
        *(v8 - 1) = HIBYTE(v16);
        if (v19 < v20)
        {
LABEL_32:
          result = (unsigned __int8 *)sub_10172A9C4(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = sub_10172B1F0(v7, v8 - 2);
        result = (unsigned __int8 *)sub_10172B1F0(v8, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 2;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned __int8 *sub_10172B130(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned int v12;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      v7 = a2[1];
      a2[1] = a3[1];
      a3[1] = v7;
      v8 = *a2;
      v9 = *result;
      if (v8 < v9)
      {
        *result = v8;
        *a2 = v9;
        v10 = result[1];
        result[1] = a2[1];
        a2[1] = v10;
      }
    }
  }
  else if (v5 >= v3)
  {
    *result = v3;
    *a2 = v4;
    v11 = result[1];
    result[1] = a2[1];
    a2[1] = v11;
    v12 = *a3;
    if (v12 < v4)
    {
      *a2 = v12;
      *a3 = v4;
      a2[1] = a3[1];
      a3[1] = v11;
    }
  }
  else
  {
    *result = v5;
    *a3 = v4;
    v6 = result[1];
    result[1] = a3[1];
    a3[1] = v6;
  }
  return result;
}

BOOL sub_10172B1F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned int v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned __int8 v29;

  v4 = (a2 - a1) >> 1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_10172B130(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_10172B404(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_10172B404(a1, a1 + 2, a1 + 4, a1 + 6);
      v19 = *(a2 - 2);
      v20 = a1[6];
      if (v19 < v20)
      {
        a1[6] = v19;
        *(a2 - 2) = v20;
        v21 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v21;
        v22 = a1[6];
        v23 = a1[4];
        if (v22 < v23)
        {
          a1[4] = v22;
          a1[6] = v23;
          v24 = a1[5];
          v25 = a1[7];
          a1[5] = v25;
          a1[7] = v24;
          v26 = a1[2];
          if (v22 < v26)
          {
            a1[2] = v22;
            a1[4] = v26;
            v27 = a1[3];
            a1[3] = v25;
            a1[5] = v27;
            v28 = *a1;
            if (v22 < v28)
            {
              *a1 = v22;
              a1[2] = v28;
              v29 = a1[1];
              a1[1] = v25;
              a1[3] = v29;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 4;
      sub_10172B130(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v9;
    if (*v10 < v13)
    {
      v14 = *(_WORD *)v10;
      v15 = *(_WORD *)v10;
      v16 = v11;
      while (1)
      {
        v17 = &a1[v16];
        v17[6] = v13;
        v17[7] = a1[v16 + 5];
        if (v16 == -4)
          break;
        v13 = v17[2];
        v16 -= 2;
        if (v13 <= v15)
        {
          v18 = &a1[v16 + 6];
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *v18 = v15;
      v18[1] = HIBYTE(v14);
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 2;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

unsigned __int8 *sub_10172B404(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *result;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 v17;

  result = sub_10172B130(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (v9 < v10)
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (v12 < v13)
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (v15 < v16)
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

unsigned __int8 *sub_10172B4B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  int v9;

  v2 = a2;
  if (a1 != a2)
  {
    do
    {
      v3 = a1;
      a1 += 2;
      if (a1 == a2)
        return a2;
      v4 = *v3;
    }
    while (v4 != v3[2] || v3[1] != v3[3]);
    if (v3 + 4 != a2)
    {
      v6 = 2;
      do
      {
        v7 = v4;
        v8 = &a1[v6];
        v4 = a1[v6];
        v9 = a1[v6 + 1];
        if (v7 != v4 || v3[1] != v9)
        {
          v3[2] = v4;
          v3 += 2;
          v3[1] = v9;
        }
        v6 += 2;
      }
      while (v8 + 2 != a2);
    }
    return v3 + 2;
  }
  return v2;
}

void sub_10172B544(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::getServiceState::Request, ResponseType = pds::getServiceState::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_1016A1C08((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172B7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172B7DC(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setServiceState::Request, ResponseType = pds::setServiceState::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172BA74((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172BA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172BA74(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172BB54(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172BB14((uint64_t)a2);
  }
}

void sub_10172BAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172BB14(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x21u);
  return a1;
}

void sub_10172BB40(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172BB54(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x21u);
  return a1;
}

void sub_10172BB80(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10172BB94(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setDefaultTrackingSession::Request, ResponseType = pds::setDefaultTrackingSession::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172BE2C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172BE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172BE2C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172BF0C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172BECC((uint64_t)a2);
  }
}

void sub_10172BEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172BECC(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x2Au);
  return a1;
}

void sub_10172BEF8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172BF0C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x2Au);
  return a1;
}

void sub_10172BF38(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10172BF4C(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setAutoTrackingState::Request, ResponseType = pds::setAutoTrackingState::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172C1E4((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172C1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172C1E4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172C2C4(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172C284((uint64_t)a2);
  }
}

void sub_10172C268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172C284(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x31u);
  return a1;
}

void sub_10172C2B0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172C2C4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x31u);
  return a1;
}

void sub_10172C2F0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10172C304(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::forceXTRADownload::Request, ResponseType = pds::forceXTRADownload::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172C59C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172C580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172C59C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172C67C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172C63C((uint64_t)a2);
  }
}

void sub_10172C620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172C63C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x2Du);
  return a1;
}

void sub_10172C668(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172C67C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x2Du);
  return a1;
}

void sub_10172C6A8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10172C6BC(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::resetGpsServiceData::Request, ResponseType = pds::resetGpsServiceData::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172C954((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172C938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172C954(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172CA34(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172C9F4((uint64_t)a2);
  }
}

void sub_10172C9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172C9F4(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x34u);
  return a1;
}

void sub_10172CA20(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172CA34(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x34u);
  return a1;
}

void sub_10172CA60(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10172CA74(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setCellDbControlMask::Request, ResponseType = pds::setCellDbControlMask::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172CD0C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172CCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172CD0C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172CDEC(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172CDAC((uint64_t)a2);
  }
}

void sub_10172CD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172CDAC(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5Fu);
  return a1;
}

void sub_10172CDD8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172CDEC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5Fu);
  return a1;
}

void sub_10172CE18(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10172CE2C(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectXTRAData::Request, ResponseType = pds::injectXTRAData::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172D0C4((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172D0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172D0C4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172D1A4(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172D164((uint64_t)a2);
  }
}

void sub_10172D148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172D164(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x37u);
  return a1;
}

void sub_10172D190(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172D1A4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x37u);
  return a1;
}

void sub_10172D1D0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10172D1E4(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectAbsTimeRef::Request, ResponseType = pds::injectAbsTimeRef::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172D47C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172D460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172D47C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172D55C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172D51C((uint64_t)a2);
  }
}

void sub_10172D500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172D51C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x3Du);
  return a1;
}

void sub_10172D548(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172D55C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x3Du);
  return a1;
}

void sub_10172D588(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10172D59C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10172D610();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10172D610()
{
  operator new();
}

void sub_10172D730()
{
  operator new();
}

void sub_10172D77C(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::forceReceiverOff::Request, ResponseType = pds::forceReceiverOff::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172DA14((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172D9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172DA14(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172DAF4(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172DAB4((uint64_t)a2);
  }
}

void sub_10172DA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172DAB4(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x49u);
  return a1;
}

void sub_10172DAE0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172DAF4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x49u);
  return a1;
}

void sub_10172DB20(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10172DB34(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectTimeSyncData::Request, ResponseType = pds::injectTimeSyncData::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172DDCC((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172DDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172DDCC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172DEAC(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172DE6C((uint64_t)a2);
  }
}

void sub_10172DE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172DE6C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x53u);
  return a1;
}

void sub_10172DE98(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172DEAC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x53u);
  return a1;
}

void sub_10172DED8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10172DEEC(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setTimeTransferConfig::Request, ResponseType = pds::setTimeTransferConfig::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172E184((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172E168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172E184(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172E224(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10170836C((uint64_t)a2);
  }
}

void sub_10172E208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

qmi::ResponseBase *sub_10172E224(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x85u);
  return a1;
}

void sub_10172E250(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10172E264(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::sendClientPulseTime::Request, ResponseType = pds::sendClientPulseTime::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172E4FC((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172E4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172E4FC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172E5DC(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172E59C((uint64_t)a2);
  }
}

void sub_10172E580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172E59C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x87u);
  return a1;
}

void sub_10172E5C8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172E5DC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x87u);
  return a1;
}

void sub_10172E608(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10172E61C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10172E690();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10172E690()
{
  operator new();
}

void sub_10172E7B0()
{
  operator new();
}

void sub_10172E7FC(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setDpoStatusReport::Request, ResponseType = pds::setDpoStatusReport::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172EA94((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172EA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172EA94(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172EB34(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10170807C((uint64_t)a2);
  }
}

void sub_10172EB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

qmi::ResponseBase *sub_10172EB34(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5558u);
  return a1;
}

void sub_10172EB60(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10172EB74(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10172EBE8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10172EBE8()
{
  operator new();
}

void sub_10172ED08()
{
  operator delete();
}

uint64_t sub_10172ED1C()
{
  return 11;
}

uint64_t sub_10172ED24(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_QWORD *)(v3 + 3) = *(_QWORD *)(result + 16);
  v4 = *a2 + 8;
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v4 - (v3 + 3);
  return result;
}

void sub_10172ED60()
{
  operator new();
}

void sub_10172EDB4(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::SetGnssReportingConfig::Request, ResponseType = pds::SetGnssReportingConfig::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172F04C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172F030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172F04C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172F12C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172F0EC((uint64_t)a2);
  }
}

void sub_10172F0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172F0EC(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xA3u);
  return a1;
}

void sub_10172F118(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172F12C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xA3u);
  return a1;
}

void sub_10172F158(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10172F16C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10172F1E0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10172F1E0()
{
  operator new();
}

void sub_10172F300()
{
  operator new();
}

void sub_10172F34C(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::SetMultibandState::Request, ResponseType = pds::SetMultibandState::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172F5E4((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172F5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172F5E4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172F6C4(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172F684((uint64_t)a2);
  }
}

void sub_10172F668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172F684(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xADu);
  return a1;
}

void sub_10172F6B0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172F6C4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xADu);
  return a1;
}

void sub_10172F6F0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10172F704(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setNavigationConfig::Request, ResponseType = pds::setNavigationConfig::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172F99C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172F980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172F99C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172FA7C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172FA3C((uint64_t)a2);
  }
}

void sub_10172FA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172FA3C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x57u);
  return a1;
}

void sub_10172FA68(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172FA7C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x57u);
  return a1;
}

void sub_10172FAA8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10172FABC(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectSpeedData::Request, ResponseType = pds::injectSpeedData::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10172FD54((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10172FD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172FD54(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10172FE34(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10172FDF4((uint64_t)a2);
  }
}

void sub_10172FDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10172FDF4(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x8Eu);
  return a1;
}

void sub_10172FE20(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10172FE34(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x8Eu);
  return a1;
}

void sub_10172FE60(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10172FE74(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectSpeedInequalityConstraint::Request, ResponseType = pds::injectSpeedInequalityConstraint::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10173010C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1017300F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10173010C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1017301EC(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017301AC((uint64_t)a2);
  }
}

void sub_101730190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017301AC(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x97u);
  return a1;
}

void sub_1017301D8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1017301EC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x97u);
  return a1;
}

void sub_101730218(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10173022C(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectPositionData::Request, ResponseType = pds::injectPositionData::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_1017304C4((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1017304A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017304C4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1017305A4(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101730564((uint64_t)a2);
  }
}

void sub_101730548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101730564(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x38u);
  return a1;
}

void sub_101730590(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1017305A4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x38u);
  return a1;
}

void sub_1017305D0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1017305E4(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::svUseInFixReport::Request, ResponseType = pds::svUseInFixReport::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10173087C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101730860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10173087C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10173095C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10173091C((uint64_t)a2);
  }
}

void sub_101730900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10173091C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5557u);
  return a1;
}

void sub_101730948(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10173095C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5557u);
  return a1;
}

void sub_101730988(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10173099C(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::svUseInFixReport::Request, ResponseType = pds::setNmeaConfig::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101730C34((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101730C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101730C34(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101730D14(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101730CD4((uint64_t)a2);
  }
}

void sub_101730CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101730CD4(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x27u);
  return a1;
}

void sub_101730D00(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101730D14(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x27u);
  return a1;
}

void sub_101730D40(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101730D54(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setDpoConfig::Request, ResponseType = pds::setDpoConfig::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101730FEC((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101730FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101730FEC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1017310CC(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10173108C((uint64_t)a2);
  }
}

void sub_101731070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10173108C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x40u);
  return a1;
}

void sub_1017310B8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1017310CC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x40u);
  return a1;
}

void sub_1017310F8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10173110C(char *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  char v8;

  if (__sz)
  {
    v6 = result;
    result = sub_100785650(result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_101731160(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10173117C(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::sendSuplNiResponse::Request, ResponseType = pds::sendSuplNiResponse::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101731414((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1017313F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101731414(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1017314F4(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017314B4((uint64_t)a2);
  }
}

void sub_101731498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017314B4(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x3Cu);
  return a1;
}

void sub_1017314E0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1017314F4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x3Cu);
  return a1;
}

void sub_101731520(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101731534(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setInjectMotionData::Request, ResponseType = pds::setInjectMotionData::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_1017317CC((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1017317B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017317CC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1017318AC(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10173186C((uint64_t)a2);
  }
}

void sub_101731850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10173186C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x61u);
  return a1;
}

void sub_101731898(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1017318AC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x61u);
  return a1;
}

void sub_1017318D8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1017318EC(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setApnProfiles::Request, ResponseType = pds::setApnProfiles::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101731B84((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101731B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101731B84(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101731C64(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101731C24((uint64_t)a2);
  }
}

void sub_101731C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101731C24(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x78u);
  return a1;
}

void sub_101731C50(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101731C64(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x78u);
  return a1;
}

void sub_101731C90(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101731CA4(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setSuplUdpPortConfig::Request, ResponseType = pds::setSuplUdpPortConfig::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101731F3C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101731F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101731F3C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10173201C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101731FDC((uint64_t)a2);
  }
}

void sub_101731FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101731FDC(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x83u);
  return a1;
}

void sub_101732008(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10173201C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x83u);
  return a1;
}

void sub_101732048(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10173205C(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setLppConfig::Request, ResponseType = pds::setLppConfig::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_1017322F4((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1017322D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017322F4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1017323D4(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101732394((uint64_t)a2);
  }
}

void sub_101732378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101732394(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x7Eu);
  return a1;
}

void sub_1017323C0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1017323D4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x7Eu);
  return a1;
}

void sub_101732400(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101732414(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setEmergencySupportConfig::Request, ResponseType = pds::setEmergencySupportConfig::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_1017326AC((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101732690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017326AC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10173278C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10173274C((uint64_t)a2);
  }
}

void sub_101732730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10173274C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x8Au);
  return a1;
}

void sub_101732778(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10173278C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x8Au);
  return a1;
}

void sub_1017327B8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1017327CC(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setOTDOAConfig::Request, ResponseType = pds::setOTDOAConfig::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101732A64((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101732A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101732A64(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101732B44(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101732B04((uint64_t)a2);
  }
}

void sub_101732AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101732B04(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x93u);
  return a1;
}

void sub_101732B30(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101732B44(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x93u);
  return a1;
}

void sub_101732B70(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101732B84(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectSignalEnvironment::Request, ResponseType = pds::injectSignalEnvironment::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101732E1C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101732E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101732E1C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101732EFC(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101732EBC((uint64_t)a2);
  }
}

void sub_101732EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101732EBC(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x96u);
  return a1;
}

void sub_101732EE8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101732EFC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x96u);
  return a1;
}

void sub_101732F28(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101732F3C(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::cancelOngoingSession::Request, ResponseType = pds::cancelOngoingSession::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_1017331D4((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1017331B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017331D4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1017332B4(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101733274((uint64_t)a2);
  }
}

void sub_101733258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101733274(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x84u);
  return a1;
}

void sub_1017332A0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1017332B4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x84u);
  return a1;
}

void sub_1017332E0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1017332F4(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setUserPlanePositionModes::Request, ResponseType = pds::setUserPlanePositionModes::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10173358C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101733570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10173358C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10173366C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10173362C((uint64_t)a2);
  }
}

void sub_101733610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10173362C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x74u);
  return a1;
}

void sub_101733658(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10173366C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x74u);
  return a1;
}

void sub_101733698(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1017336AC(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setInjectDirectionOfTravel::Request, ResponseType = pds::setInjectDirectionOfTravel::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101733944((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101733928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101733944(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101733A24(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017339E4((uint64_t)a2);
  }
}

void sub_1017339C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017339E4(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x66u);
  return a1;
}

void sub_101733A10(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101733A24(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x66u);
  return a1;
}

void sub_101733A50(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101733A64(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setGnssEngineMonitorConfig::Request, ResponseType = pds::setGnssEngineMonitorConfig::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101733CFC((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101733CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101733CFC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101733D9C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101708C3C((uint64_t)a2);
  }
}

void sub_101733D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

qmi::ResponseBase *sub_101733D9C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xA1u);
  return a1;
}

void sub_101733DC8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101733DDC(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setEmergencyModeLockoutConfig::Request, ResponseType = pds::setEmergencyModeLockoutConfig::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101734074((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101734058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101734074(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101734154(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101734114((uint64_t)a2);
  }
}

void sub_1017340F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101734114(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xA9u);
  return a1;
}

void sub_101734140(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101734154(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xA9u);
  return a1;
}

void sub_101734180(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101734194(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v9;
  _QWORD v10[3];
  _QWORD *v11;

  v3 = *a2;
  *(_QWORD *)&v9 = a2[1];
  *(_QWORD *)((char *)&v9 + 7) = *(uint64_t *)((char *)a2 + 15);
  v4 = *((_BYTE *)a2 + 23);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = operator new(0x20uLL);
  *v5 = off_1021CDB70;
  v5[1] = v3;
  v5[2] = v9;
  *(_QWORD *)((char *)v5 + 23) = *(_QWORD *)((char *)&v9 + 7);
  *((_BYTE *)v5 + 31) = v4;
  v11 = v5;
  sub_101734844(v10, a1);
  v6 = v11;
  if (v11 == v10)
  {
    v7 = 4;
    v6 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_101734278(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101734290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[10];
  char v21;
  uint64_t v22;

  if (a2 - a1 < 0)
    sub_1017373D4();
  if (!*(_QWORD *)(a4 + 24))
    sub_1017373FC();
  sub_100263E50((uint64_t)v18);
  v10 = *(char *)(a3 + 23);
  if (v10 >= 0)
    v11 = a3;
  else
    v11 = *(_QWORD *)a3;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  sub_100263F7C(&v19, v11, v12);
  sub_1017349B8(a1, a2, (uint64_t)v18, a5);
  std::stringbuf::str(__p, v20);
  v13 = *(_QWORD *)(a4 + 24);
  if (!v13)
    sub_10025FD1C();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, __p);
  if (v17 < 0)
    operator delete(__p[0]);
  *(_QWORD *)((char *)v18
  v19 = v14;
  if (v21 < 0)
    operator delete((void *)v20[8]);
  std::streambuf::~streambuf(v20);
  return std::ios::~ios(&v22);
}

void sub_1017343D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_101734400(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021CDB70;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_101734440(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021CDB70;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

_QWORD *sub_101734490(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1021CDB70;
  v3 = v2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_100115CE4(v3, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1017344F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_101734508(char *result, _QWORD *a2)
{
  _QWORD *v2;
  __int128 v3;

  *a2 = off_1021CDB70;
  v2 = a2 + 1;
  if (result[31] < 0)
    return (char *)sub_100115CE4(v2, *((void **)result + 1), *((_QWORD *)result + 2));
  v3 = *(_OWORD *)(result + 8);
  v2[2] = *((_QWORD *)result + 3);
  *(_OWORD *)v2 = v3;
  return result;
}

void sub_101734548(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void sub_10173455C(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void sub_10173458C(uint64_t a1, uint64_t a2)
{
  sub_1017345DC((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_101734594(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017345D0()
{
}

void sub_1017345DC(uint64_t *a1, uint64_t a2)
{
  void *__p[2];
  uint64_t v3;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  sub_101734648(a1, (uint64_t *)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(__p[0]);
}

void sub_10173462C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101734648(uint64_t *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t *v10;
  __int16 v11;
  uint64_t *v12;
  uint8_t buf[4];
  uint64_t *v14;
  __int16 v15;
  uint64_t *v16;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1;
    if (*((char *)a1 + 23) < 0)
      v5 = (uint64_t *)*a1;
    v6 = a2;
    if (*((char *)a2 + 23) < 0)
      v6 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136315394;
    v14 = v5;
    v15 = 2080;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s,%s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v9 = 136315394;
    v10 = a1;
    v11 = 2080;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "%s,%s", (const char *)&v9, 22);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "auto CLGpsUtilities::logRange(const std::vector<unsigned short> &, std::string, std::function<void (std::string)>, std::function<std::string (const unsigned short &)>)::(anonymous class)::operator()(std::string) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

_QWORD *sub_101734844(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1017349AC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1017349B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  void *__p[2];
  unsigned __int8 v14;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      v8 = *(_QWORD *)(a4 + 24);
      if (!v8)
        sub_10025FD1C();
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(__p, v8, v7);
      if ((v14 & 0x80u) == 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      if ((v14 & 0x80u) == 0)
        v10 = v14;
      else
        v10 = (uint64_t)__p[1];
      v11 = sub_100263F7C((_QWORD *)(a3 + 16), (uint64_t)v9, v10);
      sub_100263F7C(v11, (uint64_t)",", 1);
      if ((char)v14 < 0)
        operator delete(__p[0]);
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_101734A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101734AA8()
{
  operator delete();
}

_QWORD *sub_101734ABC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021CDC00;
  return result;
}

void sub_101734AE0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CDC00;
}

void sub_101734AF8(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  void **v3;
  void **v4;
  const char *v5;
  uint8_t *v6;
  void *__p[2];
  uint64_t v8;
  int v9;
  void **v10;
  uint8_t buf[4];
  void **v12;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = __p;
    if (v8 < 0)
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#rti,%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v4 = __p;
    if (v8 < 0)
      v4 = (void **)__p[0];
    v9 = 136315138;
    v10 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#rti,%s", (const char *)&v9);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "auto CLQmiPdsMessenger::sendSetBlockList(const qmi::pds::BlockListSv &, void (^)(const pds::setBlocklistSv::Response &))::(anonymous class)::operator()(std::string) const", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

void sub_101734CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101734D00(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101734D3C()
{
}

_QWORD *sub_101734D48(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CDC80;
  result[1] = v3;
  return result;
}

uint64_t sub_101734D80(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CDC80;
  a2[1] = v2;
  return result;
}

uint64_t sub_101734DA0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_101734DAC(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021CDD00))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101734DE8()
{
  return &off_1021CDD00;
}

void sub_101734DF4(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setBlocklistSv::Request, ResponseType = pds::setBlocklistSv::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_10173508C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101735070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10173508C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10173516C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10173512C((uint64_t)a2);
  }
}

void sub_101735110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10173512C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x8Bu);
  return a1;
}

void sub_101735158(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10173516C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x8Bu);
  return a1;
}

void sub_101735198(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1017351AC(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setInjectSuplCert::Request, ResponseType = pds::setInjectSuplCert::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101735444((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101735428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101735444(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101735524(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017354E4((uint64_t)a2);
  }
}

void sub_1017354C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017354E4(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x67u);
  return a1;
}

void sub_101735510(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101735524(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x67u);
  return a1;
}

void sub_101735550(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101735564(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setDeleteSuplCert::Request, ResponseType = pds::setDeleteSuplCert::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_1017357FC((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1017357E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017357FC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1017358DC(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10173589C((uint64_t)a2);
  }
}

void sub_101735880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10173589C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x68u);
  return a1;
}

void sub_1017358C8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1017358DC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x68u);
  return a1;
}

void sub_101735908(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10173591C(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setXOCalibrationStateConfig::Request, ResponseType = pds::setXOCalibrationStateConfig::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101735BB4((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101735B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101735BB4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101735C54(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101709DD8((uint64_t)a2);
  }
}

void sub_101735C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

qmi::ResponseBase *sub_101735C54(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x98u);
  return a1;
}

void sub_101735C80(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101735C94(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101735D08();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 10;
}

void sub_101735D08()
{
  operator new();
}

void sub_101735E2C()
{
  operator delete();
}

uint64_t sub_101735E40()
{
  return 9;
}

uint64_t sub_101735E48(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  v4 = *a2;
  *a2 += 2;
  *(_WORD *)(v4 + 2) = *(_WORD *)(result + 12);
  v5 = *a2;
  *a2 += 2;
  *(_WORD *)(v5 + 2) = *(_WORD *)(result + 14);
  v6 = *a2 + 2;
  *a2 = v6;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v6 - (v3 + 3);
  return result;
}

void sub_101735EAC()
{
  operator new();
}

char *sub_101735F08(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101735F7C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 10;
}

void sub_101735F7C()
{
  operator new();
}

void sub_10173609C()
{
  operator delete();
}

uint64_t sub_1017360B0(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  v4 = *a2 + 2;
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v4 - (v3 + 3);
  return result;
}

void sub_1017360EC()
{
  operator new();
}

char *sub_101736140(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1017361B4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 10;
}

void sub_1017361B4()
{
  operator new();
}

void sub_1017362D4()
{
  operator new();
}

void sub_101736328(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::SetGnssRfConfig::Request, ResponseType = pds::SetGnssRfConfig::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_1017365C0((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1017365A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017365C0(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1017366A0(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101736660((uint64_t)a2);
  }
}

void sub_101736644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101736660(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x65u);
  return a1;
}

void sub_10173668C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1017366A0(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x65u);
  return a1;
}

void sub_1017366CC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1017366E0(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setWwanAntTuneL5BlankingControl::Request, ResponseType = pds::setWwanAntTuneL5BlankingControl::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101736978((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10173695C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101736978(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101736A58(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101736A18((uint64_t)a2);
  }
}

void sub_1017369FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101736A18(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xB7u);
  return a1;
}

void sub_101736A44(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101736A58(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xB7u);
  return a1;
}

void sub_101736A84(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101736A98(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setConstellationControl::Request, ResponseType = pds::setConstellationControl::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_101736D30((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101736D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101736D30(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101736E10(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101736DD0((uint64_t)a2);
  }
}

void sub_101736DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101736DD0(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xC0u);
  return a1;
}

void sub_101736DFC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101736E10(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xC0u);
  return a1;
}

void sub_101736E3C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101736E50(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t ErrorString;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[6];
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 2081;
    ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Response to invalid QMI client", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::getTimingAdvance::Request, ResponseType = pds::getTimingAdvance::Response]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      sub_1017370E8((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v9 + 16))(v9, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1017370CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017370E8(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1017371C8(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101737188((uint64_t)a2);
  }
}

void sub_10173716C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101737188(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xE0u);
  return a1;
}

void sub_1017371B4(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1017371C8(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xE0u);
  return a1;
}

void sub_1017371F4(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101737208()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#bb.e,service msg is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    }
    v1 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,service msg is null", "{\"msg%{public}.0s\":\"#bb.e,service msg is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    }
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#bb.e,service msg is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/Eureka/CLQmiPdsMessageDefs.h", 48, "CLQmiServiceMsgCreationWrapper");
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  }
}

void sub_1017373D4()
{
  __assert_rtn("logRange", "CLGpsUtilities.h", 126, "std::distance(start, end) >= 0 && \"start must be less than equal to end\"");
}

void sub_1017373FC()
{
  __assert_rtn("logRange", "CLGpsUtilities.h", 127, "logger && \"need a logging function\"");
}

void sub_101737424(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  __int128 v12;
  void **v13;
  NSObject *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void **v18;
  __int128 v19;
  id v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[64];
  _QWORD v26[2];
  _QWORD v27[7];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = off_102141E98;
  v3 = (_QWORD *)(a1 + 16);
  v22 = a1 + 16;
  v4 = operator new(0x20uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_102141ED0;
  *((_DWORD *)v4 + 6) = 31337;
  *(_QWORD *)(a1 + 24) = v4 + 3;
  *v3 = off_102152D70;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v5 = (void **)(a1 + 64);
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 112) = _Q1;
  *(_QWORD *)(a1 + 128) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 156) = -1;
  *(_QWORD *)(a1 + 164) = -1;
  *(_OWORD *)(a1 + 176) = _Q1;
  *(_DWORD *)(a1 + 192) = 0;
  __asm { FMOV            V8.2S, #-1.0 }
  *(_QWORD *)(a1 + 196) = _D8;
  *(_DWORD *)(a1 + 204) = 26;
  *(_WORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 212) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 220) = -1;
  *(_WORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 226) = 0;
  *(_QWORD *)(a1 + 232) = -1;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 244) = 4;
  *(_WORD *)(a1 + 252) = 0;
  *(_QWORD *)&v12 = -1;
  *((_QWORD *)&v12 + 1) = -1;
  *(_QWORD *)(a1 + 256) = -1;
  *(_DWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 294) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 304) = _Q1;
  v21 = _Q1;
  *(_OWORD *)(a1 + 320) = _Q1;
  *(_BYTE *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 356) = xmmword_101BDBEE0;
  v13 = (void **)(a1 + 376);
  *(_OWORD *)(a1 + 419) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 436) = xmmword_101C24B50;
  *(_QWORD *)(a1 + 452) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = -1;
  *(_DWORD *)(a1 + 475) = 0;
  *(_QWORD *)(a1 + 468) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 524) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = v12;
  *(_OWORD *)(a1 + 608) = v12;
  *(_QWORD *)(a1 + 624) = -1;
  *(_QWORD *)(a1 + 632) = 0;
  *(_DWORD *)(a1 + 644) = 0;
  *(_QWORD *)(a1 + 648) = _D8;
  *(_DWORD *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 696) = 1065353216;
  sub_1002433B8(a1 + 704);
  *(_QWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_DWORD *)(a1 + 768) = 0;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
  v14 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd Initializing CLEmergencyAWD\n\"}", buf, 0x12u);
  }
  memset((char *)&v27[2] + 6, 0, 27);
  *(_QWORD *)((char *)&v27[5] + 7) = 0;
  v15 = 0uLL;
  memset(buf, 0, 60);
  v27[0] = 0;
  *(_QWORD *)((char *)v27 + 7) = 0;
  *(_QWORD *)((char *)v26 + 7) = 0;
  v26[0] = 0;
  *(_QWORD *)&v16 = -1;
  *((_QWORD *)&v16 + 1) = -1;
  v23 = v16;
  v24 = v16;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*v5);
    v15 = 0uLL;
  }
  *(_OWORD *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 96) = v15;
  *(_OWORD *)v5 = v15;
  *(_OWORD *)(a1 + 112) = v21;
  *(_QWORD *)(a1 + 128) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 156) = -1;
  *(_QWORD *)(a1 + 164) = -1;
  *(_DWORD *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 176) = v21;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 196) = _D8;
  *(_DWORD *)(a1 + 204) = 26;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = -1;
  *(_OWORD *)(a1 + 224) = xmmword_101CDB6F0;
  *(_QWORD *)(a1 + 240) = 0x400000000;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = -1;
  *(_DWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  v17 = *(_OWORD *)((char *)&v27[4] + 6);
  *(_OWORD *)(a1 + 269) = *(_OWORD *)((char *)&v27[2] + 6);
  *(_OWORD *)(a1 + 285) = v17;
  *(_BYTE *)(a1 + 301) = BYTE6(v27[6]);
  *(_WORD *)(a1 + 302) = 0;
  *(_OWORD *)(a1 + 304) = v21;
  *(_OWORD *)(a1 + 320) = v21;
  *(_OWORD *)(a1 + 336) = v15;
  *(_OWORD *)(a1 + 352) = v15;
  *(_DWORD *)(a1 + 368) = -1;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*v13);
  v18 = (void **)(a1 + 400);
  *v13 = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*v18);
  *v18 = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 436) = xmmword_101C24B50;
  *(_DWORD *)(a1 + 452) = -1;
  *(_DWORD *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 460) = 0;
  *(_BYTE *)(a1 + 463) = 0;
  *(_WORD *)(a1 + 461) = 0;
  *(_DWORD *)(a1 + 464) = -1;
  *(_DWORD *)(a1 + 475) = 0;
  *(_QWORD *)(a1 + 468) = 0;
  *(_BYTE *)(a1 + 479) = 0;
  v19 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 480) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 496) = v19;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)&buf[32];
  *(_OWORD *)(a1 + 524) = *(_OWORD *)&buf[44];
  if (*(char *)(a1 + 567) < 0)
    operator delete(*(void **)(a1 + 544));
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = v27[0];
  *(_QWORD *)(a1 + 559) = *(_QWORD *)((char *)v27 + 7);
  *(_BYTE *)(a1 + 567) = 0;
  if (*(char *)(a1 + 591) < 0)
    operator delete(*(void **)(a1 + 568));
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = v26[0];
  *(_QWORD *)(a1 + 583) = *(_QWORD *)((char *)v26 + 7);
  *(_BYTE *)(a1 + 591) = 0;
  *(_OWORD *)(a1 + 592) = v23;
  *(_OWORD *)(a1 + 608) = v24;
  *(_QWORD *)(a1 + 624) = -1;
  v20 = objc_msgSend(objc_msgSend(*(id *)a1, "vendor", a1 + 48), "proxyForService:", CFSTR("CLClientManager"));
  *(_QWORD *)(a1 + 8) = v20;
  objc_msgSend(v20, "registerDelegate:inSilo:", sub_1001E5288(v22), objc_msgSend(*(id *)a1, "silo"));
  objc_msgSend(*(id *)(a1 + 8), "setDelegateEntityName:", "CLEmergencyAWD");
  sub_100647FA8();
}

void sub_101737BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t *v19;
  uint64_t v21;
  uint64_t v22;

  v21 = *v19;
  *v19 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  sub_100067AC4(a17);
  v22 = *(_QWORD *)(v18 + 632);
  *(_QWORD *)(v18 + 632) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  sub_101737C68(a9);
  sub_1007A1B98(a18);
  _Unwind_Resume(a1);
}

uint64_t sub_101737C68(uint64_t a1)
{
  if (*(char *)(a1 + 543) < 0)
    operator delete(*(void **)(a1 + 520));
  if (*(char *)(a1 + 519) < 0)
    operator delete(*(void **)(a1 + 496));
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_101737CD8(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLEmergencyAWD::HandleStatusNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CDEC8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyAWD::HandleStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CDEC8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyAWD::HandleStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10173AC08((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101737E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101737EB0(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLEmergencyAWD::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CDEC8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyAWD::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CDEC8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyAWD::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10173AF44((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101738068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10173808C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 776) = 0;
  v2 = *(_QWORD *)(a1 + 752);
  *(_QWORD *)(a1 + 752) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_100067AC4(a1 + 664);
  v3 = *(_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 632) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 591) < 0)
    operator delete(*(void **)(a1 + 568));
  if (*(char *)(a1 + 567) < 0)
    operator delete(*(void **)(a1 + 544));
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  sub_1007A1B98(a1 + 16);
  return a1;
}

__n128 sub_10173815C(uint64_t a1)
{
  NSObject *v2;
  __int128 v3;
  __n128 v4;
  void **v5;
  __int128 v12;
  void **v13;
  void **v14;
  __int128 v15;
  __n128 result;
  __n128 v17;
  __n128 v18;
  uint8_t buf[104];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd Clearing Emergency AWD stats\"}", buf, 0x12u);
  }
  memset(&buf[70], 0, 33);
  v3 = 0uLL;
  memset(buf, 0, 60);
  v4.n128_u64[0] = -1;
  v4.n128_u64[1] = -1;
  v17 = v4;
  v18 = v4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  v5 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*v5);
    v3 = 0uLL;
  }
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v3;
  *(_OWORD *)v5 = v3;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 112) = _Q0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 156) = -1;
  *(_QWORD *)(a1 + 164) = -1;
  *(_DWORD *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 176) = _Q0;
  *(_DWORD *)(a1 + 192) = 0;
  __asm { FMOV            V1.2S, #-1.0 }
  *(_QWORD *)(a1 + 196) = _D1;
  *(_DWORD *)(a1 + 204) = 26;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = -1;
  *(_OWORD *)(a1 + 224) = xmmword_101CDB6F0;
  *(_QWORD *)(a1 + 240) = 0x400000000;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = -1;
  *(_DWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  v12 = *(_OWORD *)&buf[86];
  *(_OWORD *)(a1 + 269) = *(_OWORD *)&buf[70];
  *(_OWORD *)(a1 + 285) = v12;
  *(_BYTE *)(a1 + 301) = buf[102];
  *(_WORD *)(a1 + 302) = 0;
  *(_OWORD *)(a1 + 304) = _Q0;
  *(_OWORD *)(a1 + 320) = _Q0;
  *(_OWORD *)(a1 + 336) = v3;
  *(_OWORD *)(a1 + 352) = v3;
  *(_DWORD *)(a1 + 368) = -1;
  v13 = (void **)(a1 + 376);
  if (*(char *)(a1 + 399) < 0)
    operator delete(*v13);
  v14 = (void **)(a1 + 400);
  *v13 = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*v14);
  *v14 = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 436) = xmmword_101C24B50;
  *(_QWORD *)(a1 + 452) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 460) = 0;
  *(_BYTE *)(a1 + 463) = 0;
  *(_WORD *)(a1 + 461) = 0;
  *(_DWORD *)(a1 + 464) = -1;
  *(_DWORD *)(a1 + 475) = 0;
  *(_QWORD *)(a1 + 468) = 0;
  *(_BYTE *)(a1 + 479) = 0;
  v15 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 480) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 496) = v15;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)&buf[32];
  *(_OWORD *)(a1 + 524) = *(_OWORD *)&buf[44];
  if (*(char *)(a1 + 567) < 0)
    operator delete(*(void **)(a1 + 544));
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 559) = 0;
  *(_BYTE *)(a1 + 567) = 0;
  if (*(char *)(a1 + 591) < 0)
    operator delete(*(void **)(a1 + 568));
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 583) = 0;
  *(_BYTE *)(a1 + 591) = 0;
  result = v17;
  *(__n128 *)(a1 + 592) = v17;
  *(__n128 *)(a1 + 608) = v18;
  *(_QWORD *)(a1 + 624) = -1;
  return result;
}

void sub_101738468(uint64_t a1, int a2, int a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  id v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  _QWORD v22[5];
  uint64_t v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *__p;
  char v33;
  _WORD v34[8];
  _WORD v35[8];
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  uint8_t buf[1640];

  *(double *)(a1 + 88) = a5;
  *(double *)(a1 + 96) = a6;
  *(double *)(a1 + 104) = a7;
  *(double *)(a1 + 112) = a8;
  *(double *)(a1 + 120) = a10;
  *(double *)(a1 + 128) = a9;
  *(_DWORD *)(a1 + 264) = a2;
  if (a4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,#awd,locationOfInterest,inapplicable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      v35[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning,#awd,locationOfInterest,inapplicable", v35, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::setPositionStats(double, double, double, double, double, double, uint8_t, Emergency::PositionSession, Emergency::SessionErrorCode)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    sub_10173B0B0((uint64_t)v35, a1 + 48);
    if ((a3 - 1) <= 3)
    {
      if (*(_QWORD *)(a1 + 776))
      {
        v17 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", a5, a6);
        v18 = *(void **)(a1 + 776);
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3321888768;
        v22[2] = sub_1017388BC;
        v22[3] = &unk_1021CDE48;
        v22[4] = a1;
        sub_10173B0B0((uint64_t)&v23, (uint64_t)v35);
        objc_msgSend(v18, "fetchLocationOfInterestAtLocation:withReply:", v17, v22);
        if (v33 < 0)
          operator delete(__p);
        if (v31 < 0)
          operator delete(v30);
        if (v29 < 0)
          operator delete(v28);
        if (v27 < 0)
          operator delete(v26);
        if (v25 < 0)
          operator delete(v24);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
        v19 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning,#awd,locationOfInterest,unavailable,error: CLRoutineMonitor is not supported", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
          v34[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning,#awd,locationOfInterest,unavailable,error: CLRoutineMonitor is not supported", v34, 2);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::setPositionStats(double, double, double, double, double, double, uint8_t, Emergency::PositionSession, Emergency::SessionErrorCode)", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
      }
    }
    if (v45 < 0)
      operator delete(v44);
    if (v43 < 0)
      operator delete(v42);
    if (v41 < 0)
      operator delete(v40);
    if (v39 < 0)
      operator delete(v38);
    if (v37 < 0)
      operator delete(v36);
  }
}

void sub_101738884(_Unwind_Exception *a1)
{
  sub_101737C68((uint64_t)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void sub_1017388BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v6;
  NSObject *v7;
  _QWORD v8[7];
  uint64_t v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;

  v6 = *(id **)(a1 + 32);
  v7 = objc_msgSend(objc_msgSend(*v6, "silo"), "queue");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_1017389AC;
  v8[3] = &unk_1021CDE18;
  v8[5] = a2;
  v8[6] = v6;
  v8[4] = a3;
  sub_10173B0B0((uint64_t)&v9, a1 + 40);
  dispatch_async(v7, v8);
  if (v19 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
}

void sub_1017389AC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v41 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning,#awd,locationOfInterest,unavailable,error: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      v18 = *(_QWORD *)(a1 + 32);
      v32 = 138412290;
      v33 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning,#awd,locationOfInterest,unavailable,error: %@", &v32, 12);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::setPositionStats(double, double, double, double, double, double, uint8_t, Emergency::PositionSession, Emergency::SessionErrorCode)_block_invoke", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)1)
      objc_msgSend(*(id *)(a1 + 32), "code");
  }
  else if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#awd,locationOfInterest,available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      LOWORD(v32) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#awd,locationOfInterest,available", &v32, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::setPositionStats(double, double, double, double, double, double, uint8_t, Emergency::PositionSession, Emergency::SessionErrorCode)_block_invoke", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 104);
      v9 = *(_QWORD *)(a1 + 120);
      v10 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134218754;
      v41 = v7;
      v42 = 2048;
      v43 = v8;
      v44 = 2048;
      v45 = v9;
      v46 = 2112;
      v47 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#awd,SessionFix,{%f,%f,%f},locationOfInterest,%@", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      v23 = *(_QWORD *)(a1 + 96);
      v24 = *(_QWORD *)(a1 + 104);
      v25 = *(_QWORD *)(a1 + 120);
      v26 = *(_QWORD *)(a1 + 40);
      v32 = 134218754;
      v33 = v23;
      v34 = 2048;
      v35 = v24;
      v36 = 2048;
      v37 = v25;
      v38 = 2112;
      v39 = v26;
      LODWORD(v31) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#awd,SessionFix,{%f,%f,%f},locationOfInterest,%@", &v32, v31);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::setPositionStats(double, double, double, double, double, double, uint8_t, Emergency::PositionSession, Emergency::SessionErrorCode)_block_invoke", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    if (*(double *)(a1 + 120) > 0.0)
    {
      objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "location"), "horizontalUncertainty");
      if (v11 > 0.0)
      {
        v12 = *(double *)(a1 + 96);
        v13 = *(double *)(a1 + 104);
        objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "location"), "latitude");
        v15 = v14;
        objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "location"), "longitude");
        objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "location", (double)sub_10011E634((double *)(v4 + 704), v12, v13, v15, v16, 0.0)), "horizontalUncertainty");
      }
    }
    objc_msgSend(*(id *)(a1 + 40), "typeSource");
    objc_msgSend(*(id *)(a1 + 40), "type");
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v17 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,#awd,locationOfInterest,unavailable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      LOWORD(v32) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning,#awd,locationOfInterest,unavailable", &v32, 2);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::setPositionStats(double, double, double, double, double, double, uint8_t, Emergency::PositionSession, Emergency::SessionErrorCode)_block_invoke", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
}

uint64_t sub_101739018(uint64_t a1, uint64_t a2)
{
  return sub_10173B0B0(a1 + 56, a2 + 56);
}

void sub_101739024(uint64_t a1)
{
  if (*(char *)(a1 + 599) < 0)
    operator delete(*(void **)(a1 + 576));
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
}

uint64_t sub_101739098(uint64_t a1, uint64_t a2)
{
  return sub_10173B0B0(a1 + 40, a2 + 40);
}

void sub_1017390A4(uint64_t a1)
{
  if (*(char *)(a1 + 583) < 0)
    operator delete(*(void **)(a1 + 560));
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
}

void sub_101739118(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v14;
  _QWORD v15[5];
  uint64_t v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _BYTE v46[16];
  void *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  uint64_t buf;
  __int16 v62;
  const char *v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;

  sub_10173B0B0((uint64_t)v46, a1 + 48);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68290051;
    v62 = 2082;
    v63 = "";
    v64 = 2049;
    v65 = v49;
    v66 = 2049;
    v67 = v50;
    v68 = 2049;
    v69 = v51;
    v70 = 2049;
    v71 = v52;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd Before deres\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"accuracy\":\"%{private}f\"}", (uint8_t *)&buf, 0x3Au);
  }
  v3 = v49;
  v4 = v50;
  v5 = v51;
  v6 = v52;
  v7 = *(void **)(a1 + 8);
  v8 = objc_alloc((Class)CLLocation);
  v28 = v3;
  v29 = v4;
  v30 = v6;
  v31 = v5;
  __asm { FMOV            V0.2D, #-1.0 }
  v32 = _Q0;
  v33 = _Q0;
  v34 = _Q0;
  v27 = 0xFFFF;
  v35 = 0;
  v37 = 0;
  v38 = 0;
  v36 = 0xBFF0000000000000;
  v40 = 0xBFF0000000000000;
  v39 = 0;
  v41 = 0x7FFFFFFF;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v45 = 0;
  v14 = objc_msgSend(v8, "initWithClientLocation:", &v27);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  v15[2] = sub_1017393F4;
  v15[3] = &unk_1021CDE78;
  v15[4] = a1;
  sub_10173B0B0((uint64_t)&v16, (uint64_t)v46);
  objc_msgSend(v7, "reduceAccuracy:withReply:", v14, v15);
  if (v26 < 0)
    operator delete(__p);
  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v60 < 0)
    operator delete(v59);
  if (v58 < 0)
    operator delete(v57);
  if (v56 < 0)
    operator delete(v55);
  if (v54 < 0)
    operator delete(v53);
  if (v48 < 0)
    operator delete(v47);
}

void sub_1017393C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_101737C68(v1);
  sub_101737C68((uint64_t)&STACK[0x318]);
  _Unwind_Resume(a1);
}

void sub_1017393F4(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  _BYTE v26[16];
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  uint64_t buf;
  __int16 v41;
  const char *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;

  v3 = *(_QWORD *)(a1 + 32);
  sub_10173B0B0((uint64_t)v26, a1 + 40);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(a2, "coordinate");
    v6 = v5;
    objc_msgSend(a2, "coordinate");
    v8 = v7;
    objc_msgSend(a2, "altitude");
    v10 = v9;
    objc_msgSend(a2, "horizontalAccuracy");
    buf = 68290051;
    v41 = 2082;
    v42 = "";
    v43 = 2049;
    v44 = v6;
    v45 = 2049;
    v46 = v8;
    v47 = 2049;
    v48 = v10;
    v49 = 2049;
    v50 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd After deres\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"accuracy\":\"%{private}f\"}", (uint8_t *)&buf, 0x3Au);
  }
  objc_msgSend(a2, "coordinate");
  v29 = v12;
  objc_msgSend(a2, "coordinate");
  v30 = v13;
  objc_msgSend(a2, "altitude");
  v31 = v14;
  sub_10173B0B0((uint64_t)&v15, (uint64_t)v26);
  sub_10173815C(v3);
  if (v25 < 0)
    operator delete(__p);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v28 < 0)
    operator delete(v27);
}

void sub_101739620(_Unwind_Exception *a1)
{
  sub_101737C68((uint64_t)&STACK[0x248]);
  _Unwind_Resume(a1);
}

uint64_t sub_10173965C(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(result + 152) = 0;
  if (a2 <= 0xC && ((0x17FFu >> a2) & 1) != 0)
    *(_DWORD *)(result + 152) = dword_101CDB720[a2];
  return result;
}

void sub_101739688(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double v6;
  double *v7;
  int v8;
  double v9;

  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 192) = 0;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 - 1) >= 3)
    v2 = 0;
  *(_DWORD *)(a1 + 192) = v2;
  *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 244);
  v3 = *(unsigned __int8 *)(a2 + 245);
  *(_BYTE *)(a1 + 301) = v3;
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 928);
    if (*(_BYTE *)(a2 + 280))
    {
      if (sub_100182290(a2 + 444))
      {
        v6 = *(double *)(a2 + 464);
        if (*(double *)(a2 + 248) > 0.0 && v6 > 0.0)
        {
          *(long double *)(a1 + 320) = sub_10011E634((double *)(a1 + 704), *(double *)(a2 + 912), *(double *)(a2 + 920), *(double *)(a2 + 448), *(double *)(a2 + 456), 0.0);
          v6 = *(double *)(a2 + 464);
        }
        if (*(double *)(a2 + 56) > 0.0 && v6 > 0.0)
          *(_DWORD *)(a1 + 368) = (int)sub_10011E634((double *)(a1 + 704), *(double *)(a2 + 24), *(double *)(a2 + 32), *(double *)(a2 + 448), *(double *)(a2 + 456), 0.0);
      }
      v7 = (double *)(a2 + 292);
      v8 = sub_100182290(a2 + 288);
      v9 = *(double *)(a2 + 248);
      if (v8 && v9 > 0.0 && *(double *)(a2 + 308) > 0.0)
      {
        *(long double *)(a1 + 312) = sub_10011E634((double *)(a1 + 704), *(double *)(a2 + 912), *(double *)(a2 + 920), *v7, *(double *)(a2 + 300), 0.0);
        v9 = *(double *)(a2 + 248);
      }
      if (*(_BYTE *)(a2 + 40) && v9 > 0.0 && *(double *)(a2 + 56) > 0.0)
        *(long double *)(a1 + 328) = sub_10011E634((double *)(a1 + 704), *(double *)(a2 + 912), *(double *)(a2 + 920), *(double *)(a2 + 24), *(double *)(a2 + 32), 0.0);
      if (*(_BYTE *)(a2 + 1019)
        && sub_100182290(a2 + 288)
        && *(double *)(a2 + 1040) > 0.0
        && *(double *)(a2 + 308) > 0.0)
      {
        *(_DWORD *)(a1 + 440) = (int)sub_10011E634((double *)(a1 + 704), *(double *)(a2 + 1024), *(double *)(a2 + 1032), *v7, *(double *)(a2 + 300), 0.0);
      }
    }
  }
}

double sub_101739840(uint64_t a1, uint64_t a2)
{
  int32x4_t v4;
  uint32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  double result;

  if ((*(_DWORD *)(a2 + 88) & 0xFFFFFFFE) == 8)
  {
    *(_DWORD *)(a1 + 484) = *(_DWORD *)(a2 + 1092);
    *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 1096);
    v4.i64[0] = -1;
    v4.i64[1] = -1;
    *(int8x16_t *)(a1 + 492) = vandq_s8(*(int8x16_t *)(a2 + 1100), (int8x16_t)vcgtq_u32((uint32x4_t)xmmword_101CDB710, (uint32x4_t)vaddq_s32(*(int32x4_t *)(a2 + 1100), v4)));
    v5.i64[0] = 0x300000003;
    v5.i64[1] = 0x300000003;
    v6 = vandq_s8(*(int8x16_t *)(a2 + 1116), (int8x16_t)vcgtq_u32(v5, (uint32x4_t)vaddq_s32(*(int32x4_t *)(a2 + 1116), v4)));
    v7 = vandq_s8(*(int8x16_t *)(a2 + 1132), (int8x16_t)vcgtq_u32(v5, (uint32x4_t)vaddq_s32(*(int32x4_t *)(a2 + 1132), v4)));
    *(int8x16_t *)(a1 + 508) = v6;
    *(int8x16_t *)(a1 + 524) = v7;
    std::string::operator=((std::string *)(a1 + 544), (const std::string *)(a2 + 1152));
    std::string::operator=((std::string *)(a1 + 568), (const std::string *)(a2 + 1176));
    *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 1200);
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 1216);
    result = *(double *)(a2 + 1232);
    *(double *)(a1 + 624) = result;
  }
  return result;
}

uint64_t sub_1017398FC(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(result + 204) = 26;
  if (a2 < 0x1A || a2 - 27 <= 8)
    *(_DWORD *)(result + 204) = a2;
  return result;
}

void sub_101739920(uint64_t a1, int a2)
{
  uint64_t *i;
  __int128 v3;
  __int128 v4;
  NSObject *v5;
  int v6;
  void **v7;
  uint64_t v8;
  int v9;
  uint8_t *v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  __int128 v14;
  NSObject *v15;
  void **v16;
  unsigned int v17;
  NSObject *v18;
  uint64_t v19;
  uint8_t *v20;
  char *v21;
  char *v22;
  const char *v23;
  void **v24;
  uint64_t v25;
  uint8_t buf[8];
  __int16 v29;
  void **v30;
  char v31;
  int v32;
  int v33;
  __int16 v34;
  uint8_t *v35;
  void *__p[2];
  char v37;
  __int128 v38;
  _BYTE v39[48];

  for (i = *(uint64_t **)(a1 + 680); i; i = (uint64_t *)*i)
  {
    v3 = *((_OWORD *)i + 2);
    v38 = *((_OWORD *)i + 1);
    *(_OWORD *)v39 = v3;
    v4 = *((_OWORD *)i + 4);
    *(_OWORD *)&v39[16] = *((_OWORD *)i + 3);
    *(_OWORD *)&v39[32] = v4;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v6 = v38;
      sub_101739F28((uint64_t)&v38 + 8, __p);
      v7 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109379;
      *(_DWORD *)&buf[4] = v6;
      v29 = 2081;
      v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#awd,setTelephonyInfo,TelephonyMapPrint,inst,%d,TelephonyInfo,%{private}s", buf, 0x12u);
      if (v37 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      v8 = qword_1022A0088;
      v9 = v38;
      sub_101739F28((uint64_t)&v38 + 8, buf);
      v10 = buf;
      if (v31 < 0)
        v10 = *(uint8_t **)buf;
      v32 = 67109379;
      v33 = v9;
      v34 = 2081;
      v35 = v10;
      LODWORD(v25) = 18;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v8, 0, "#awd,setTelephonyInfo,TelephonyMapPrint,inst,%d,TelephonyInfo,%{private}s", &v32, v25);
      v12 = v11;
      if (v31 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::setTelephonyInfo(uint32_t)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
  }
  LODWORD(__p[0]) = a2;
  v13 = sub_1001F8DEC((_QWORD *)(a1 + 664), (int *)__p);
  if (v13)
  {
    v14 = *(_OWORD *)(v13 + 5);
    v38 = *(_OWORD *)(v13 + 3);
    *(_OWORD *)v39 = v14;
    *(_OWORD *)&v39[16] = *(_OWORD *)(v13 + 7);
    *(_QWORD *)&v39[32] = v13[9];
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v15 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      sub_101739F28((uint64_t)&v38, __p);
      v16 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109379;
      *(_DWORD *)&buf[4] = a2;
      v29 = 2081;
      v30 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#awd,setTelephonyInfo,inst,%d,Current TelephonyInfo,%{private}s", buf, 0x12u);
      if (v37 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      v19 = qword_1022A0088;
      sub_101739F28((uint64_t)&v38, buf);
      if (v31 >= 0)
        v20 = buf;
      else
        v20 = *(uint8_t **)buf;
      v32 = 67109379;
      v33 = a2;
      v34 = 2081;
      v35 = v20;
      LODWORD(v25) = 18;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v19, 2, "#awd,setTelephonyInfo,inst,%d,Current TelephonyInfo,%{private}s", &v32, v25);
      v22 = v21;
      if (v31 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::setTelephonyInfo(uint32_t)", "%s\n", v22);
      if (v22 != (char *)__p)
        free(v22);
    }
    sub_10173965C(a1, *(unsigned int *)&v39[24]);
    *(_OWORD *)(a1 + 156) = *(_OWORD *)&v39[8];
    *(_QWORD *)(a1 + 256) = *(_QWORD *)&v39[28];
    *(_DWORD *)(a1 + 248) = a2;
    v17 = *(_DWORD *)(a1 + 644);
    if (v17 <= 4)
      *(_DWORD *)(a1 + 244) = v17;
    *(_WORD *)(a1 + 252) = *(_WORD *)&v39[1];
    *(_BYTE *)(a1 + 225) = v39[0];
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = a2;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#awd,#Warning,setTelephonyInfo,fTelephonyInfoMap,null,inst,%d", (uint8_t *)__p, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      LODWORD(v38) = 67109120;
      DWORD1(v38) = a2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#awd,#Warning,setTelephonyInfo,fTelephonyInfoMap,null,inst,%d", &v38);
      v24 = (void **)v23;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAWD::setTelephonyInfo(uint32_t)", "%s\n", v23);
      if (v24 != __p)
        free(v24);
    }
  }
}

uint64_t sub_101739F28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  _QWORD v29[10];
  char v30;
  uint64_t v31;

  sub_100263E50((uint64_t)v27);
  v4 = sub_100263F7C(&v28, (uint64_t)"context,slt,", 12);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *(_QWORD *)(a1 + 8));
  v6 = sub_100263F7C(v5, (uint64_t)",userDataPreferred,", 19);
  v7 = (_QWORD *)std::ostream::operator<<(v6, *(unsigned __int8 *)(a1 + 16));
  v8 = sub_100263F7C(v7, (uint64_t)",userDefaultVoice,", 18);
  v9 = (_QWORD *)std::ostream::operator<<(v8, *(unsigned __int8 *)(a1 + 17));
  v10 = sub_100263F7C(v9, (uint64_t)",isSimPresent,", 14);
  v11 = (_QWORD *)std::ostream::operator<<(v10, *(unsigned __int8 *)(a1 + 18));
  v12 = sub_100263F7C(v11, (uint64_t)",fMcc,", 6);
  v13 = (_QWORD *)std::ostream::operator<<(v12, *(unsigned int *)(a1 + 24));
  v14 = sub_100263F7C(v13, (uint64_t)",fMnc,", 6);
  v15 = (_QWORD *)std::ostream::operator<<(v14, *(unsigned int *)(a1 + 28));
  v16 = sub_100263F7C(v15, (uint64_t)",fSid,", 6);
  v17 = (_QWORD *)std::ostream::operator<<(v16, *(unsigned int *)(a1 + 32));
  v18 = sub_100263F7C(v17, (uint64_t)",fNid,", 6);
  v19 = (_QWORD *)std::ostream::operator<<(v18, *(unsigned int *)(a1 + 36));
  v20 = sub_100263F7C(v19, (uint64_t)",fRat,", 6);
  v21 = (_QWORD *)std::ostream::operator<<(v20, *(unsigned int *)(a1 + 40));
  v22 = sub_100263F7C(v21, (uint64_t)",fSimMcc,", 9);
  v23 = (_QWORD *)std::ostream::operator<<(v22, *(unsigned int *)(a1 + 44));
  v24 = sub_100263F7C(v23, (uint64_t)",fSimMnc,", 9);
  std::ostream::operator<<(v24, *(unsigned int *)(a1 + 48));
  std::stringbuf::str(a2, v29);
  *(_QWORD *)((char *)v27
  v28 = v25;
  if (v30 < 0)
    operator delete((void *)v29[8]);
  std::streambuf::~streambuf(v29);
  return std::ios::~ios(&v31);
}

void sub_10173A0E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10173A0F4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _BYTE v24[16];
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *__p;
  char v34;
  uint64_t buf;
  __int16 v36;
  const char *v37;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    v36 = 2082;
    v37 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,handleEmergencySessionReport\"}", (uint8_t *)&buf, 0x12u);
  }
  if (*(_BYTE *)(a2 + 280))
    sub_1017E2758(a2);
  sub_101738468(a1, *(unsigned __int8 *)(a2 + 208), *(_DWORD *)(a2 + 88), *(_DWORD *)(a2 + 148), *(double *)(a2 + 24), *(double *)(a2 + 32), *(double *)(a2 + 48), *(double *)(a2 + 56), *(double *)(a2 + 72), *(double *)(a2 + 64));
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 80);
  v5 = *(_DWORD *)(a2 + 84);
  if ((v5 - 1) >= 0xA)
    v5 = 0;
  *(_DWORD *)(a1 + 140) = v5;
  v6 = *(_DWORD *)(a2 + 88);
  if ((v6 - 1) >= 9)
    v6 = 0;
  *(_DWORD *)(a1 + 144) = v6;
  v7 = *(_DWORD *)(a2 + 92);
  if ((v7 - 1) >= 9)
    v7 = 0;
  *(_DWORD *)(a1 + 148) = v7;
  *(_QWORD *)(a1 + 196) = *(_QWORD *)(a1 + 648);
  sub_101739688(a1, a2);
  sub_1017398FC(a1, *(_DWORD *)(a2 + 148));
  v8 = *(_DWORD *)(a2 + 156);
  v9 = *(unsigned __int8 *)(a2 + 280);
  v10 = *(unsigned __int8 *)(a2 + 282);
  v11 = *(_DWORD *)(a2 + 284);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 152);
  if ((v8 - 1) >= 2)
    v12 = 0;
  else
    v12 = v8;
  *(_DWORD *)(a1 + 212) = v12;
  if (v9)
  {
    *(_BYTE *)(a1 + 268) = v10;
    if (v10)
      *(_DWORD *)(a1 + 272) = v11;
  }
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 276) = *(_OWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 236);
  v13 = *(_DWORD *)(a2 + 240);
  if (v13 <= 4)
    *(_DWORD *)(a1 + 296) = v13;
  sub_101739840(a1, a2);
  v14 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 170);
  *(_QWORD *)(a1 + 232) = v14;
  v15 = *(_DWORD *)(a1 + 656);
  *(_BYTE *)(a1 + 224) = v15 == 2;
  *(_BYTE *)(a1 + 240) = v15 != 0;
  if (*(_DWORD *)(a1 + 144) == 3)
    *(_DWORD *)(a1 + 152) = 11;
  else
    sub_101739920(a1, *(_DWORD *)(a2 + 192));
  *(_DWORD *)(a1 + 348) = 0;
  v16 = *(_DWORD *)(a1 + 744);
  if ((v16 - 1) < 4 || v16 == 6)
    *(_DWORD *)(a1 + 348) = v16;
  v17 = *(_DWORD *)(a2 + 936);
  if (v17 == 2)
    v18 = 2;
  else
    v18 = v17 == 1;
  *(_DWORD *)(a1 + 344) = v18;
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 940);
  v19 = *(_DWORD *)(a2 + 944);
  if (v19 >= 0xC)
    v19 = 1;
  *(_DWORD *)(a1 + 356) = v19;
  v20 = *(_DWORD *)(a2 + 948);
  if ((v20 - 1) >= 9)
    v20 = 0;
  *(_DWORD *)(a1 + 360) = v20;
  v21 = *(_DWORD *)(a2 + 952);
  if (v21 == 2)
    v22 = 2;
  else
    v22 = v21 == 1;
  *(_DWORD *)(a1 + 364) = v22;
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 1016);
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)(a2 + 960));
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 984));
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a1 + 760);
  *(_DWORD *)(a1 + 468) = *(_DWORD *)(a2 + 1080);
  v23 = *(_DWORD *)(a2 + 1084);
  if ((v23 - 1) >= 7)
    v23 = 0;
  *(_DWORD *)(a1 + 472) = v23;
  *(_BYTE *)(a1 + 476) = *(_BYTE *)(a2 + 1088);
  *(_WORD *)(a1 + 477) = *(_WORD *)(a2 + 1089);
  *(_DWORD *)(a1 + 480) = *(_DWORD *)(a1 + 768);
  if (*(_DWORD *)(a2 + 96) == 12)
    *(_DWORD *)(a1 + 152) = 11;
  if (*(_DWORD *)(a2 + 92) == 5)
  {
    *(_WORD *)(a1 + 433) = *(_WORD *)(a2 + 1017);
    *(_DWORD *)(a1 + 436) = *(_DWORD *)(a2 + 1048);
  }
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 1068);
  *(_WORD *)(a1 + 457) = *(_WORD *)(a2 + 1069);
  if ((*(_DWORD *)(a2 + 88) & 0xFFFFFFFE) == 6)
    *(_WORD *)(a1 + 459) = *(_WORD *)(a2 + 1071);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 1076);
  if (*(_BYTE *)(a2 + 40))
  {
    sub_101739118(a1);
  }
  else if (*(_BYTE *)(a2 + 280))
  {
    if (sub_100182290(a2 + 288))
    {
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 292);
      *(int8x16_t *)(a1 + 104) = vextq_s8(*(int8x16_t *)(a2 + 308), *(int8x16_t *)(a2 + 308), 8uLL);
      sub_101739118(a1);
    }
    else if (sub_100182290(a2 + 600))
    {
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 604);
      *(int8x16_t *)(a1 + 104) = vextq_s8(*(int8x16_t *)(a2 + 620), *(int8x16_t *)(a2 + 620), 8uLL);
      sub_101739118(a1);
    }
    else if (sub_100182290(a2 + 444))
    {
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 448);
      *(int8x16_t *)(a1 + 104) = vextq_s8(*(int8x16_t *)(a2 + 464), *(int8x16_t *)(a2 + 464), 8uLL);
      sub_101739118(a1);
    }
    else if (sub_100182290(a2 + 756))
    {
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 760);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 784);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 776);
      sub_101739118(a1);
    }
  }
  else
  {
    sub_10173B0B0((uint64_t)v24, a1 + 48);
    sub_10173815C(a1);
    if (v34 < 0)
      operator delete(__p);
    if (v32 < 0)
      operator delete(v31);
    if (v30 < 0)
      operator delete(v29);
    if (v28 < 0)
      operator delete(v27);
    if (v26 < 0)
      operator delete(v25);
  }
}

void sub_10173A5D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_101737C68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10173A5EC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _DWORD v15[4];
  uint8_t buf[8];
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  HIDWORD(v14) = a2;
  v4 = sub_1001F8DEC((_QWORD *)(a1 + 664), (int *)&v14 + 1);
  if (v4)
  {
    v5 = v4;
    v4[4] = sub_100599A6C(HIDWORD(v14));
    *(_QWORD *)buf = (char *)&v14 + 4;
    *((_BYTE *)v5 + 40) = *((_BYTE *)sub_10096FEA4(a3, (int *)&v14 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20);
    *(_QWORD *)buf = (char *)&v14 + 4;
    *((_BYTE *)v5 + 41) = *((_BYTE *)sub_10096FEA4(a3, (int *)&v14 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 21);
    *(_QWORD *)buf = (char *)&v14 + 4;
    *((_BYTE *)v5 + 42) = *((_BYTE *)sub_10096FEA4(a3, (int *)&v14 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 22);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v7 = HIDWORD(v14);
      *(_QWORD *)buf = (char *)&v14 + 4;
      v8 = *((unsigned __int8 *)sub_10096FEA4(a3, (int *)&v14 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20);
      *(_QWORD *)buf = (char *)&v14 + 4;
      v9 = *((unsigned __int8 *)sub_10096FEA4(a3, (int *)&v14 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 21);
      *(_QWORD *)buf = (char *)&v14 + 4;
      v10 = *((unsigned __int8 *)sub_10096FEA4(a3, (int *)&v14 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 22);
      *(_DWORD *)buf = 68290050;
      *(_DWORD *)&buf[4] = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      v20 = v7;
      v21 = 1026;
      v22 = v8;
      v23 = 1026;
      v24 = v9;
      v25 = 1026;
      v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,kSubscriptionChangeNotification\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", buf, 0x2Au);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67174657;
      *(_DWORD *)&buf[4] = HIDWORD(v14);
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#awd,kSubscriptionChangeNotification,TelephonyInfo,null for Sim:%{private}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      v15[0] = 67174657;
      v15[1] = HIDWORD(v14);
      LODWORD(v14) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#awd,kSubscriptionChangeNotification,TelephonyInfo,null for Sim:%{private}d", v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::handleSubscriptionChangeNotification(SimInstance, std::unordered_map<SimInstance, CLCTXPCServiceSubscriptionContext> &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_10173A958(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint8_t buf[8];
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint8_t v24[16];
  _OWORD v25[101];

  v14 = a2;
  v6 = a1 + 664;
  v7 = sub_1001F8DEC((_QWORD *)(a1 + 664), &v14);
  if (v7)
  {
    v8 = *(_OWORD *)(v7 + 5);
    *(_OWORD *)v24 = *(_OWORD *)(v7 + 3);
    v25[0] = v8;
    *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v7 + 52);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      v16 = 2082;
      v17 = "";
      v18 = 1026;
      v19 = v14;
      v20 = 1025;
      v21 = a3;
      v22 = 1025;
      v23 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,handleSubscriberMccAndMncNotification\", \"inst\":%{public}d, \"MCC\":%{private}d, \"MNC\":%{private}d}", buf, 0x24u);
    }
    *(_QWORD *)buf = &v14;
    v10 = sub_1001E3CF4(v6, &v14, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    *(_OWORD *)(v10 + 24) = *(_OWORD *)v24;
    *(_OWORD *)(v10 + 40) = v25[0];
    *(_OWORD *)(v10 + 52) = *(_OWORD *)((char *)v25 + 12);
    *((_DWORD *)v10 + 17) = a3;
    *((_DWORD *)v10 + 18) = a4;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#awd,#Warning,handleSubscriberMccAndMncNotification,fTelephonyInfoMap,null", v24, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(v24, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      *(_WORD *)buf = 0;
      _os_log_send_and_compose_impl(2, 0, v24, 1628, &_mh_execute_header, qword_1022A0088, 16, "#awd,#Warning,handleSubscriberMccAndMncNotification,fTelephonyInfoMap,null", buf, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAWD::handleSubscriberMccAndMncNotification(SimInstance, int32_t, int32_t)", "%s\n", v12);
      if (v13 != v24)
        free(v13);
    }
  }
}

void sub_10173AC08(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v5;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  if (*a3 == 6)
  {
    *(_DWORD *)(a1 + 656) = *(_DWORD *)(a4 + 4);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(a1 + 656);
      v7[0] = 68289282;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      v10 = 1026;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,HandleStatusNotification\", \"reachability\":%{public}d}", (uint8_t *)v7, 0x18u);
    }
  }
}

void sub_10173AD04(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  double v5;
  double v6;
  uint64_t *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE v27[10];
  double v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 640);
    v4 = *(_DWORD *)(a1 + 656);
    v5 = *(float *)(a1 + 648);
    v6 = *(float *)(a1 + 652);
    *(_DWORD *)buf = 68290051;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 1025;
    v23 = v3;
    v24 = 1026;
    v25 = v4;
    v26 = 2050;
    *(double *)v27 = v5;
    *(_WORD *)&v27[8] = 2050;
    v28 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext\", \"DataPrefInst\":%{private}d, \"Reachability\":%{public}d, \"freq(MHz)\":\"%{public}f\", \"bw(MHz)\":\"%{public}f\"}", buf, 0x32u);
  }
  v7 = *(uint64_t **)(a1 + 680);
  if (v7)
  {
    v8 = qword_1022A0080;
    do
    {
      if (v8 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *((_DWORD *)v7 + 4);
        v11 = *((_DWORD *)v7 + 12);
        v12 = *((_DWORD *)v7 + 13);
        v13 = *((_DWORD *)v7 + 14);
        v14 = *((_DWORD *)v7 + 15);
        v16 = *((_DWORD *)v7 + 17);
        v15 = *((_DWORD *)v7 + 18);
        v17 = *((_DWORD *)v7 + 16);
        *(_DWORD *)buf = 68291075;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 1026;
        v23 = v10;
        v24 = 1025;
        v25 = v11;
        v26 = 1025;
        *(_DWORD *)v27 = v12;
        *(_WORD *)&v27[4] = 1025;
        *(_DWORD *)&v27[6] = v13;
        LOWORD(v28) = 1025;
        *(_DWORD *)((char *)&v28 + 2) = v14;
        HIWORD(v28) = 1025;
        v29 = v16;
        v30 = 1025;
        v31 = v15;
        v32 = 1025;
        v33 = v17;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext\", \"inst\":%{public}d, \"MCC\":%{private}d, \"MNC\":%{private}d, \"SID\":%{private}d, \"NID\":%{private}d, \"SimMCC\":%{private}d, \"SimMNC\":%{private}d, \"RAT\":%{private}d}", buf, 0x42u);
        v8 = qword_1022A0080;
      }
      else
      {
        v8 = -1;
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
}

void sub_10173AF44(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  if (*a3 == 1)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v7[0] = 68289282;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2114;
      v11 = sub_10011A5AC(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd,Asset notification,CLMobileAssetManager_Type::kNotificationEmergencyCarrierSettings\", \"Asset data:\":%{public, location:escape_only}@}", (uint8_t *)v7, 0x1Cu);
    }
    *(_DWORD *)(a1 + 760) = *(_DWORD *)(a4 + 20);
    *(_DWORD *)(a1 + 764) = *(_DWORD *)(a4 + 16);
  }
}

void sub_10173B058(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_10173B084(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10173B0B0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x11CuLL);
  if (*(char *)(a2 + 351) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 328), *(void **)(a2 + 328), *(_QWORD *)(a2 + 336));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = v5;
  }
  if (*(char *)(a2 + 375) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 352), *(void **)(a2 + 352), *(_QWORD *)(a2 + 360));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = v6;
  }
  v7 = *(_OWORD *)(a2 + 376);
  v8 = *(_OWORD *)(a2 + 392);
  v9 = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 424) = v9;
  *(_OWORD *)(a1 + 376) = v7;
  *(_OWORD *)(a1 + 392) = v8;
  v10 = *(_OWORD *)(a2 + 440);
  v11 = *(_OWORD *)(a2 + 456);
  v12 = *(_OWORD *)(a2 + 472);
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 456) = v11;
  *(_OWORD *)(a1 + 472) = v12;
  *(_OWORD *)(a1 + 440) = v10;
  if (*(char *)(a2 + 519) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 496), *(void **)(a2 + 496), *(_QWORD *)(a2 + 504));
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = v13;
  }
  v14 = (_BYTE *)(a1 + 520);
  if (*(char *)(a2 + 543) < 0)
  {
    sub_100115CE4(v14, *(void **)(a2 + 520), *(_QWORD *)(a2 + 528));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_OWORD *)(a2 + 544);
  v17 = *(_OWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 544) = v16;
  *(_OWORD *)(a1 + 560) = v17;
  return a1;
}

void sub_10173B22C(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (v1[519] < 0)
    operator delete(*v5);
  if (v1[375] < 0)
    operator delete(*v4);
  if (v1[351] < 0)
    operator delete(*v3);
  if (v1[39] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10173B290(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

char *sub_10173B2BC(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v10 = (char *)operator new(0x50uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v10 + 56) = *(_OWORD *)(a3 + 40);
  *((_QWORD *)v10 + 9) = *(_QWORD *)(a3 + 56);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_10012E444(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *(_QWORD *)v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v10)
  {
    v20 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_10173B4E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10173B4F4(int *a1, uint64_t a2, int a3)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  if ((*((_QWORD *)a1 + 1) & a2) != 0)
  {
    *((_QWORD *)a1 + 4) = 0;
    a1[10] = a1[6];
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF08);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v5 = *a1;
      *(_DWORD *)buf = 67240192;
      v32 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#imag,flagSet,id,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 3;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF08);
    v6 = *a1;
    LODWORD(v27) = 67240192;
    HIDWORD(v27) = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#imag,flagSet,id,%{public}d", &v27, 8, v27, v28, v29, v30);
LABEL_28:
    v26 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "GNSS::SimulationAndSpoofingStatus CLGnssSimulationAndSpoofingMonitor::FlagData::tick(gnss::Fix::SpoofingFlagsBitfield, gnss::GnssContent)", "%s\n", v7);
    if (v26 != buf)
      free(v26);
    return 3;
  }
  if (*((_BYTE *)a1 + 28) && !sub_10173DC34(a3))
  {
    v8 = 0;
    a1[9] = 0;
    v11 = a1[10];
  }
  else
  {
    v8 = a1[9] + 1;
    ++a1[8];
    a1[9] = v8;
    v9 = a1[10];
    v10 = __OFSUB__(v9, 1);
    v11 = v9 - 1;
    if (v11 < 0 != v10)
      return a1[8] < a1[4] || v8 < a1[5];
    a1[10] = v11;
  }
  if (v11 > 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF08);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v13 = *a1;
      v15 = a1[9];
      v14 = a1[10];
      v16 = a1[8];
      v17 = a1[4];
      v18 = a1[5];
      *(_DWORD *)buf = 67241472;
      v32 = v13;
      v33 = 1026;
      v34 = v14;
      v35 = 1026;
      v36 = v16;
      v37 = 1026;
      v38 = v17;
      v39 = 1026;
      v40 = v15;
      v41 = 1026;
      v42 = v18;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#imag,flagStatus,id,%{public}d,remaining,%{public}d,numTot,%{public}d,threshTot,%{public}d,numConsec,%{public}d,threshConsec,%{public}d", buf, 0x26u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 3;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF08);
    v20 = *a1;
    v22 = a1[9];
    v21 = a1[10];
    v23 = a1[8];
    v24 = a1[4];
    v25 = a1[5];
    LODWORD(v27) = 67241472;
    HIDWORD(v27) = v20;
    LOWORD(v28) = 1026;
    *(_DWORD *)((char *)&v28 + 2) = v21;
    HIWORD(v28) = 1026;
    LODWORD(v29) = v23;
    WORD2(v29) = 1026;
    *(_DWORD *)((char *)&v29 + 6) = v24;
    WORD5(v29) = 1026;
    HIDWORD(v29) = v22;
    LOWORD(v30) = 1026;
    *(_DWORD *)((char *)&v30 + 2) = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#imag,flagStatus,id,%{public}d,remaining,%{public}d,numTot,%{public}d,threshTot,%{public}d,numConsec,%{public}d,threshConsec,%{public}d", &v27, 38, v27, v28, v29, v30);
    goto LABEL_28;
  }
  return a1[8] < a1[4] || v8 < a1[5];
}

void sub_10173B898(uint64_t a1, uint64_t a2, char a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 40) = _Q0;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = a3;
  *(_WORD *)(a1 + 73) = 256;
  *(_DWORD *)(a1 + 76) = 0;
  *(_WORD *)(a1 + 80) = 0;
  sub_10173BB14((_QWORD *)a1);
  sub_1013DF780();
}

void sub_10173BAD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;

  v4 = *(void **)(v1 + 16);
  if (v4)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  v5 = *v2;
  *v2 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(exception_object);
}

char *sub_10173BB14(_QWORD *a1)
{
  void **v2;
  unint64_t v3;
  unint64_t v4;
  void **v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *result;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v2 = (void **)(a1 + 2);
  v3 = a1[2];
  a1[3] = v3;
  v19 = 1800;
  v20 = 0x7FFFFFFF;
  v17 = 1;
  v18 = 5;
  v15 = 1;
  v16 = 2;
  v4 = a1[4];
  v5 = (void **)(a1 + 2);
  if (v3 >= v4)
  {
    v6 = sub_10173DA44(v5, &v17, &qword_101CDB758, &v16, &v15, &v19);
  }
  else
  {
    sub_10173D9E0((uint64_t)v5, &v17, &qword_101CDB758, &v16, &v15, &v19);
    v6 = (char *)(v3 + 48);
  }
  a1[3] = v6;
  v16 = 2;
  v17 = 2;
  v15 = 1;
  if ((unint64_t)v6 >= a1[4])
  {
    v7 = sub_10173DA44(v2, &v17, &qword_101CDB760, &v16, &v15, &v19);
  }
  else
  {
    sub_10173D9E0((uint64_t)v2, &v17, &qword_101CDB760, &v16, &v15, &v19);
    v7 = v6 + 48;
  }
  a1[3] = v7;
  v16 = 2;
  v17 = 3;
  v15 = 2;
  if ((unint64_t)v7 >= a1[4])
  {
    v8 = sub_10173DA44(v2, &v17, &qword_101CDB768, &v16, &v15, &v20);
  }
  else
  {
    sub_10173D9E0((uint64_t)v2, &v17, &qword_101CDB768, &v16, &v15, &v20);
    v8 = v7 + 48;
  }
  a1[3] = v8;
  v16 = 2;
  v17 = 4;
  v15 = 2;
  if ((unint64_t)v8 >= a1[4])
  {
    v9 = sub_10173DA44(v2, &v17, &qword_101CDB770, &v16, &v15, &v20);
  }
  else
  {
    sub_10173D9E0((uint64_t)v2, &v17, &qword_101CDB770, &v16, &v15, &v20);
    v9 = v8 + 48;
  }
  a1[3] = v9;
  v16 = 13;
  v17 = 5;
  v15 = 7;
  if ((unint64_t)v9 >= a1[4])
  {
    v10 = sub_10173DA44(v2, &v17, &qword_101CDB778, &v16, &v15, &v19);
  }
  else
  {
    sub_10173D9E0((uint64_t)v2, &v17, &qword_101CDB778, &v16, &v15, &v19);
    v10 = v9 + 48;
  }
  a1[3] = v10;
  v16 = 13;
  v17 = 6;
  v15 = 7;
  if ((unint64_t)v10 >= a1[4])
  {
    v11 = sub_10173DA44(v2, &v17, &qword_101CDB780, &v16, &v15, &v19);
  }
  else
  {
    sub_10173D9E0((uint64_t)v2, &v17, &qword_101CDB780, &v16, &v15, &v19);
    v11 = v10 + 48;
  }
  a1[3] = v11;
  v16 = 1;
  v17 = 7;
  v15 = 0;
  if ((unint64_t)v11 >= a1[4])
  {
    v12 = sub_10173DA44(v2, &v17, &qword_101CDB788, &v16, &v15, &v18);
  }
  else
  {
    sub_10173D9E0((uint64_t)v2, &v17, &qword_101CDB788, &v16, &v15, &v18);
    v12 = v11 + 48;
  }
  a1[3] = v12;
  v16 = 13;
  v17 = 8;
  v15 = 7;
  if ((unint64_t)v12 >= a1[4])
  {
    v13 = sub_10173DA44(v2, &v17, &qword_101CDB790, &v16, &v15, &v19);
  }
  else
  {
    sub_10173D9E0((uint64_t)v2, &v17, &qword_101CDB790, &v16, &v15, &v19);
    v13 = v12 + 48;
  }
  a1[3] = v13;
  v16 = 13;
  v17 = 9;
  v15 = 7;
  if ((unint64_t)v13 >= a1[4])
  {
    result = sub_10173DA44(v2, &v17, &qword_101CDB798, &v16, &v15, &v19);
  }
  else
  {
    sub_10173D9E0((uint64_t)v2, &v17, &qword_101CDB798, &v16, &v15, &v19);
    result = v13 + 48;
  }
  a1[3] = result;
  return result;
}

void sub_10173BE38(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssSimulationAndSpoofingMonitor::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CDF28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssSimulationAndSpoofingMonitor::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CDF28);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssSimulationAndSpoofingMonitor::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10173D540((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10173BFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10173C014(_QWORD *a1)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(*(id *)(a1[1] + 16), "unregister:forNotification:", *(_QWORD *)(a1[1] + 8), 2);
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_10173C074(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF08);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#imag,stop", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF08);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#imag,stop", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::stop()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  *(_BYTE *)(a1 + 73) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 76) = 0;
}

uint64_t sub_10173C214(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  float *v11;
  int v12;
  int v13;
  int v14;
  NSObject *v16;
  unsigned int v17;
  _BOOL8 v18;
  NSObject *v19;
  _BOOL4 v20;
  int v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  int v28;
  int v29;
  int v30;
  __int16 v31;
  int v32;
  _DWORD v33[4];
  uint64_t *v34;
  uint8_t buf[4];
  unsigned int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  unsigned int v40;
  __int16 v41;
  unsigned int v42;
  __int16 v43;
  int v44;

  v3 = sub_1001133C0(*(double *)(a2 + 56), *(double *)(a2 + 64));
  v4 = *(_DWORD *)(a2 + 136) & 0x10F;
  if (v3)
  {
    if (v4 != 2)
    {
LABEL_3:
      sub_100A0F6E4((uint64_t)v33, a2 + 248);
      v5 = v34;
      if (v34)
      {
        v6 = 0;
        v7 = 0;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = (float *)v5[5];
          if (v11)
          {
            v12 = 0;
            do
            {
              if (v11[6] > 0.0 || v11[7] > 0.0)
                ++v12;
              v11 = *(float **)v11;
            }
            while (v11);
          }
          else
          {
            v12 = 0;
          }
          v13 = *((_DWORD *)v5 + 4);
          switch(v13)
          {
            case 1:
              goto LABEL_19;
            case 2:
              v7 += v12;
              break;
            case 3:
            case 5:
            case 6:
            case 7:
              break;
            case 4:
              v9 += v12;
              break;
            case 8:
              v10 += v12;
              break;
            default:
              if (v13 == 16)
              {
LABEL_19:
                v6 += v12;
              }
              else
              {
                v14 = v12 + v8;
                if (v13 == 256)
                  v8 = v14;
              }
              break;
          }
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        v10 = 0;
        v9 = 0;
        v8 = 0;
        v7 = 0;
        v6 = 0;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF08);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67110144;
        v36 = v6;
        v37 = 1024;
        v38 = v7;
        v39 = 1024;
        v40 = v10;
        v41 = 1024;
        v42 = v9;
        v43 = 1024;
        v44 = v8;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#imag,numGpsQzss,%d,numGlo,%d,numGal,%d,numBds,%d,numNic,%d", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CDF08);
        LOWORD(v29) = 1024;
        HIWORD(v29) = v7;
        HIWORD(v30) = HIWORD(v9);
        v31 = 1024;
        v32 = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#imag,numGpsQzss,%d,numGlo,%d,numGal,%d,numBds,%d,numNic,%d", &v28, 32, 67110144, v29, v10);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssSimulationAndSpoofingMonitor::isInsufficientMulticonstellationFix(const GNSS::PerEpochData &)", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      v20 = v6 < 2;
      if (v3)
        v20 = v6 < 2 && v9 < 2;
      v18 = v10 < 2 && v20;
      sub_100067A50((uint64_t)v33);
      return v18;
    }
  }
  else if (v4 != 2 && v4 != 4)
  {
    goto LABEL_3;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF08);
  v16 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v17 = *(_DWORD *)(a2 + 136);
    *(_DWORD *)buf = 67109120;
    v36 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#imag,multiCons early exit,tracked,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF08);
    v23 = *(_DWORD *)(a2 + 136);
    v33[0] = 67109120;
    v33[1] = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#imag,multiCons early exit,tracked,%d", v33);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssSimulationAndSpoofingMonitor::isInsufficientMulticonstellationFix(const GNSS::PerEpochData &)", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  return 1;
}

void sub_10173C6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100067A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10173C6E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _BOOL4 v25;
  double v26;
  NSObject *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint8_t *v40;
  uint8_t *v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  const char *v46;
  int v47;
  int v48;
  char v49;
  char v50;
  NSObject *v51;
  NSObject *v52;
  int v53;
  char v54;
  int v55;
  int v56;
  int v57;
  const char *v58;
  uint8_t *v59;
  int v60;
  const char *v61;
  uint8_t *v62;
  const char *v63;
  uint8_t *v64;
  const char *v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint8_t *v70;
  uint64_t v71;
  int v72;
  _BOOL4 v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  _BYTE v81[10];
  double v82;
  _BYTE v83[10];
  __int16 v84;
  _BYTE v85[10];
  uint64_t v86;
  int v87;
  __int16 v88;
  _BOOL4 v89;
  __int16 v90;
  _BOOL4 v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  uint8_t buf[4];
  _BYTE v97[10];
  double v98;
  _BYTE v99[10];
  __int16 v100;
  _BYTE v101[10];
  uint64_t v102;
  int v103;
  __int16 v104;
  _BOOL4 v105;
  __int16 v106;
  _BOOL4 v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;

  if (!*(_BYTE *)(a1 + 73))
    return;
  v74 = *(_DWORD *)(a2 + 292);
  if (*(_BYTE *)(a1 + 81) || !sub_10173C214(a1, a2))
  {
    v78 = 0;
    v8 = 0;
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 76) + 1;
    v78 = 1;
  }
  *(_DWORD *)(a1 + 76) = v8;
  v76 = a3;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF08);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v10 = *(unsigned __int8 *)(a2 + 48);
    v11 = *(unsigned __int8 *)(a1 + 81);
    v12 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)v97 = v78 ^ 1;
    *(_WORD *)&v97[4] = 1024;
    *(_DWORD *)&v97[6] = v10;
    LOWORD(v98) = 1024;
    *(_DWORD *)((char *)&v98 + 2) = v11;
    HIWORD(v98) = 1024;
    *(_DWORD *)v99 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#imag,isMultiConstellationFix,%d,fixValid,%d,prevFixValid,%d,numBlockedFix,%d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF08);
    v55 = *(unsigned __int8 *)(a2 + 48);
    v56 = *(unsigned __int8 *)(a1 + 81);
    v57 = *(_DWORD *)(a1 + 76);
    v80 = 67109888;
    *(_DWORD *)v81 = v78 ^ 1;
    *(_WORD *)&v81[4] = 1024;
    *(_DWORD *)&v81[6] = v55;
    LOWORD(v82) = 1024;
    *(_DWORD *)((char *)&v82 + 2) = v56;
    HIWORD(v82) = 1024;
    *(_DWORD *)v83 = v57;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#imag,isMultiConstellationFix,%d,fixValid,%d,prevFixValid,%d,numBlockedFix,%d", &v80, 26, v72, a3);
    v59 = (uint8_t *)v58;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::feedAndUpdateSimulationStatus(GNSS::PerEpochData &, GNSS::GnssSessionData &, const BOOL)", "%s\n", v58);
    if (v59 != buf)
      free(v59);
  }
  v77 = a4;
  v13 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 24) == v13)
  {
    v79 = 0;
    v16 = 0;
    v19 = 1;
    v18 = 1;
    v17 = 1;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v79 = 0;
    v16 = 0;
    v17 = 1;
    v18 = 1;
    v19 = 1;
    do
    {
      v20 = *(_DWORD *)(v13 + v14);
      v21 = sub_10173B4F4((int *)(v13 + v14), *(_QWORD *)(a2 + 296), *(_DWORD *)(a2 + 288));
      if (v20 == 2)
        v22 = v21;
      else
        v22 = v18;
      if (v20 == 5)
        v23 = v21;
      else
        v23 = v19;
      if (v20 == 5)
        v22 = v18;
      if (v20 == 1)
      {
        v17 = v21;
      }
      else
      {
        v19 = v23;
        v18 = v22;
      }
      if ((v21 - 2) >= 2)
      {
        if (v21)
          LODWORD(v79) = v79 + 1;
        else
          ++HIDWORD(v79);
      }
      else
      {
        ++v16;
      }
      ++v15;
      v13 = *(_QWORD *)(a1 + 16);
      v14 += 48;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 24) - v13) >> 4) > v15);
  }
  if (!*(_BYTE *)(a1 + 64))
  {
    v73 = 0;
    v25 = 0;
    v24 = v77;
    goto LABEL_58;
  }
  v24 = v77;
  if (*(_BYTE *)(a1 + 72))
  {
    v73 = 0;
    v25 = 0;
    goto LABEL_58;
  }
  v26 = *(double *)(a2 + 32) - *(double *)(a1 + 56);
  if (v26 >= -10.0)
  {
    v28 = fabs(v26);
    v29 = *(double *)(a1 + 48) + v28 * 0.0001;
    v30 = *(double *)(a2 + 16);
    v31 = v28 + *(double *)(a1 + 40);
    v32 = v30 - v31;
    v33 = vabdd_f64(v30, v31);
    v73 = v33 <= v29;
    if (v33 > v29)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF08);
      v42 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v43 = *(_QWORD *)(a2 + 16);
        v44 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 134350080;
        *(_QWORD *)v97 = v43;
        *(_WORD *)&v97[8] = 2050;
        v98 = v32;
        *(_WORD *)v99 = 2050;
        *(double *)&v99[2] = v29;
        v100 = 2050;
        *(double *)v101 = v28;
        *(_WORD *)&v101[8] = 2050;
        v102 = v44;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "#imag,stf_violation,cfTimeGps,%{public}.3f,offset,%{public}.1f,width,%{public}.3f,age,%{public}.1f,origWidth,%{public}.1f", buf, 0x34u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_57;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF08);
      v67 = *(_QWORD *)(a2 + 16);
      v68 = *(_QWORD *)(a1 + 48);
      v80 = 134350080;
      *(_QWORD *)v81 = v67;
      *(_WORD *)&v81[8] = 2050;
      v82 = v32;
      *(_WORD *)v83 = 2050;
      *(double *)&v83[2] = v29;
      v84 = 2050;
      *(double *)v85 = v28;
      *(_WORD *)&v85[8] = 2050;
      v86 = v68;
      LODWORD(v71) = 52;
      v69 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#imag,stf_violation,cfTimeGps,%{public}.3f,offset,%{public}.1f,width,%{public}.3f,age,%{public}.1f,origWidth,%{public}.1f", &v80, v71);
      v41 = v70;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssSimulationAndSpoofingMonitor::feedAndUpdateSimulationStatus(GNSS::PerEpochData &, GNSS::GnssSessionData &, const BOOL)", "%s\n", v69);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF08);
      v34 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v35 = *(_QWORD *)(a2 + 16);
        v36 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 134350080;
        *(_QWORD *)v97 = v35;
        *(_WORD *)&v97[8] = 2050;
        v98 = v32;
        *(_WORD *)v99 = 2050;
        *(double *)&v99[2] = v29;
        v100 = 2050;
        *(double *)v101 = v28;
        *(_WORD *)&v101[8] = 2050;
        v102 = v36;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#imag,stf_agreement,cfTimeGps,%{public}.3f,offset,%{public}.1f,width,%{public}.3f,age,%{public}.1f,origWidth,%{public}.1f", buf, 0x34u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_57;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF08);
      v37 = *(_QWORD *)(a2 + 16);
      v38 = *(_QWORD *)(a1 + 48);
      v80 = 134350080;
      *(_QWORD *)v81 = v37;
      *(_WORD *)&v81[8] = 2050;
      v82 = v32;
      *(_WORD *)v83 = 2050;
      *(double *)&v83[2] = v29;
      v84 = 2050;
      *(double *)v85 = v28;
      *(_WORD *)&v85[8] = 2050;
      v86 = v38;
      LODWORD(v71) = 52;
      v39 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#imag,stf_agreement,cfTimeGps,%{public}.3f,offset,%{public}.1f,width,%{public}.3f,age,%{public}.1f,origWidth,%{public}.1f", &v80, v71);
      v41 = v40;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::feedAndUpdateSimulationStatus(GNSS::PerEpochData &, GNSS::GnssSessionData &, const BOOL)", "%s\n", v39);
    }
    if (v41 != buf)
      free(v41);
    v24 = v77;
LABEL_57:
    v25 = v33 > v29;
    goto LABEL_58;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF08);
  v27 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(double *)v97 = v26;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#imag,negative age,%{public}.1f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF08);
    v80 = 134349056;
    *(double *)v81 = v26;
    LODWORD(v71) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#imag,negative age,%{public}.1f", &v80, v71);
    v66 = (uint8_t *)v65;
    sub_100512490("Generic", 1, 0, 0, "void CLGnssSimulationAndSpoofingMonitor::feedAndUpdateSimulationStatus(GNSS::PerEpochData &, GNSS::GnssSessionData &, const BOOL)", "%s\n", v65);
    if (v66 != buf)
      free(v66);
    v24 = v77;
  }
  v73 = 0;
  v25 = 0;
  *(_BYTE *)(a1 + 64) = 0;
LABEL_58:
  v75 = v74 & 0xFFFFFFFE;
  if (((v78 | v24) & 1) != 0 || (v17 == 3 ? (v47 = 1) : (v47 = v25), v47 == 1 && !*(_BYTE *)(a1 + 72)))
  {
    if (v17 == 3)
    {
      v45 = *(_BYTE *)(a1 + 72) == 0;
      if (*(_BYTE *)(a1 + 72))
        v46 = 0;
      else
        v46 = "build_check";
      if (!v25)
        goto LABEL_81;
    }
    else
    {
      v46 = 0;
      v45 = 0;
      if (!v25)
      {
LABEL_81:
        if (v24 && !*(_BYTE *)(a1 + 72))
        {
          v46 = "known_coord";
          v45 = 1;
        }
        if (v78 && *(_DWORD *)(a1 + 76) > 0x1Du)
        {
          v46 = "multicon_fail";
          v45 = 1;
        }
        v49 = 0;
        v48 = 3;
        if (!*(_BYTE *)(a1 + 80) && v45)
        {
          *(_BYTE *)(a1 + 80) = 1;
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CDF08);
          v51 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67241216;
            *(_DWORD *)v97 = v73;
            *(_WORD *)&v97[4] = 1026;
            *(_DWORD *)&v97[6] = v25;
            LOWORD(v98) = 1026;
            *(_DWORD *)((char *)&v98 + 2) = v17 == 3;
            HIWORD(v98) = 1026;
            *(_DWORD *)v99 = v78;
            *(_WORD *)&v99[4] = 1026;
            *(_DWORD *)&v99[6] = v77;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_FAULT, "#imag,yield gated,stfAuth,%{public}d,stfFake,%{public}d,build,%{public}d,multiConstFake,%{public}d,locFake,%{public}d", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CDF08);
            v80 = 67241216;
            *(_DWORD *)v81 = v73;
            *(_WORD *)&v81[4] = 1026;
            *(_DWORD *)&v81[6] = v25;
            LOWORD(v82) = 1026;
            *(_DWORD *)((char *)&v82 + 2) = v17 == 3;
            HIWORD(v82) = 1026;
            *(_DWORD *)v83 = v78;
            *(_WORD *)&v83[4] = 1026;
            *(_DWORD *)&v83[6] = v77;
            LODWORD(v71) = 32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#imag,yield gated,stfAuth,%{public}d,stfFake,%{public}d,build,%{public}d,multiConstFake,%{public}d,locFake,%{public}d", &v80, v71);
            v64 = (uint8_t *)v63;
            sub_100512490("Generic", 1, 0, 0, "void CLGnssSimulationAndSpoofingMonitor::feedAndUpdateSimulationStatus(GNSS::PerEpochData &, GNSS::GnssSessionData &, const BOOL)", "%s\n", v63);
            if (v64 != buf)
              free(v64);
          }
          ++*(_DWORD *)(v76 + 1068);
          sub_101740774((uint64_t)objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "queue"), (uint64_t)"imag", (uint64_t)v46, 0);
          v49 = 0;
          v48 = 3;
        }
        goto LABEL_95;
      }
    }
    if (!*(_BYTE *)(a1 + 72))
    {
      v46 = "stf_violation";
      v45 = 1;
    }
    goto LABEL_81;
  }
  v48 = 2;
  v49 = 1;
  if (!v16 && v75 != 2 && !*(_BYTE *)(a1 + 72))
  {
    v50 = v73;
    if (!v18)
      v50 = 1;
    if ((v50 & 1) != 0 || !v19)
    {
      v48 = 0;
      ++*(_DWORD *)(v76 + 1072);
    }
    else
    {
      ++*(_DWORD *)(v76 + 1064);
      v48 = 1;
    }
  }
LABEL_95:
  *(_QWORD *)(v76 + 1080) |= *(_QWORD *)(a2 + 296);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF08);
  v52 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v53 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)buf = 67243264;
    *(_DWORD *)v97 = v48;
    *(_WORD *)&v97[4] = 1026;
    *(_DWORD *)&v97[6] = v75 == 2;
    LOWORD(v98) = 1026;
    *(_DWORD *)((char *)&v98 + 2) = v79;
    HIWORD(v98) = 1026;
    *(_DWORD *)v99 = HIDWORD(v79);
    *(_WORD *)&v99[4] = 1026;
    *(_DWORD *)&v99[6] = v16;
    v100 = 1026;
    *(_DWORD *)v101 = v17 == 0;
    *(_WORD *)&v101[4] = 1026;
    *(_DWORD *)&v101[6] = v18 == 0;
    LOWORD(v102) = 1026;
    *(_DWORD *)((char *)&v102 + 2) = v19 == 0;
    HIWORD(v102) = 1026;
    v103 = v53;
    v104 = 1026;
    v105 = v73;
    v106 = 1026;
    v107 = v25;
    v108 = 1026;
    v109 = v78;
    v110 = 1026;
    v111 = v77;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "#imag,result,%{public}d,deviceResult,%{public}d,unkCount,%{public}d,authCount,%{public}d,spoofedCount,%{public}d,buildTimeOk,%{public}d,eeTimeOk,%{public}d,pyTimeOk,%{public}d,simMode,%{public}d,stfAuth,%{public}d,stfFake,%{public}d,multiConstFake,%{public}d,locFake,%{public}d", buf, 0x50u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF08);
    v60 = *(unsigned __int8 *)(a1 + 72);
    v80 = 67243264;
    *(_DWORD *)v81 = v48;
    *(_WORD *)&v81[4] = 1026;
    *(_DWORD *)&v81[6] = v75 == 2;
    LOWORD(v82) = 1026;
    *(_DWORD *)((char *)&v82 + 2) = v79;
    HIWORD(v82) = 1026;
    *(_DWORD *)v83 = HIDWORD(v79);
    *(_WORD *)&v83[4] = 1026;
    *(_DWORD *)&v83[6] = v16;
    v84 = 1026;
    *(_DWORD *)v85 = v17 == 0;
    *(_WORD *)&v85[4] = 1026;
    *(_DWORD *)&v85[6] = v18 == 0;
    LOWORD(v86) = 1026;
    *(_DWORD *)((char *)&v86 + 2) = v19 == 0;
    HIWORD(v86) = 1026;
    v87 = v60;
    v88 = 1026;
    v89 = v73;
    v90 = 1026;
    v91 = v25;
    v92 = 1026;
    v93 = v78;
    v94 = 1026;
    v95 = v77;
    LODWORD(v71) = 80;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#imag,result,%{public}d,deviceResult,%{public}d,unkCount,%{public}d,authCount,%{public}d,spoofedCount,%{public}d,buildTimeOk,%{public}d,eeTimeOk,%{public}d,pyTimeOk,%{public}d,simMode,%{public}d,stfAuth,%{public}d,stfFake,%{public}d,multiConstFake,%{public}d,locFake,%{public}d", COERCE_DOUBLE(67243264), &v80, v71);
    v62 = (uint8_t *)v61;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::feedAndUpdateSimulationStatus(GNSS::PerEpochData &, GNSS::GnssSessionData &, const BOOL)", "%s\n", v61);
    if (v62 != buf)
      free(v62);
  }
  if (*(_BYTE *)(a2 + 48))
    v54 = v49;
  else
    v54 = 0;
  *(_BYTE *)(a1 + 81) = v54;
  *(_DWORD *)(a2 + 292) = v48;
}

void sub_10173D540(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  NSObject *v10;
  int v11;
  NSObject *v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint8_t buf[4];
  int v17;

  if (*a3 == 2)
  {
    HIBYTE(v14) = 0;
    if (sub_1001E4874(a4, "EnableStfCheck", (BOOL *)&v14 + 7))
    {
      *(_BYTE *)(a1 + 74) = HIBYTE(v14);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF08);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(unsigned __int8 *)(a1 + 74);
        *(_DWORD *)buf = 67240192;
        v17 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#imag,asset sets stf check,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CDF08);
        v7 = *(unsigned __int8 *)(a1 + 74);
        LODWORD(v15[0]) = 67240192;
        HIDWORD(v15[0]) = v7;
        LODWORD(v14) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,asset sets stf check,%{public}d", v15, v14, v15[0]);
LABEL_28:
        v13 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v8);
        if (v13 != buf)
          free(v13);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF08);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#imag,no setting in asset", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CDF08);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,no setting in asset");
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF08);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *a3;
      *(_DWORD *)buf = 67109120;
      v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#imag,unexpected asset notification,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF08);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,unexpected asset notification,%d", v15);
      goto LABEL_28;
    }
  }
}

void sub_10173D8F0(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10173D91C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10173D948(uint64_t a1, uint64_t a2)
{
  if (qword_10230F9E0 != -1)
    dispatch_once(&qword_10230F9E0, &stru_1021CDF48);
  off_1023008D0 = (uint64_t (*)())dlsym((void *)qword_10230F9E8, "TMGetTrustedInterval");
  return ((uint64_t (*)(uint64_t, uint64_t))off_1023008D0)(a1, a2);
}

void sub_10173D9B8(id a1)
{
  qword_10230F9E8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreTime.framework/CoreTime", 2);
}

uint64_t sub_10173D9E0(uint64_t a1, _DWORD *a2, uint64_t *a3, int *a4, int *a5, int *a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  *(_DWORD *)v7 = *a2;
  *(_QWORD *)(v7 + 8) = v8;
  *(_DWORD *)(v7 + 16) = v9;
  *(_DWORD *)(v7 + 20) = v10;
  *(_DWORD *)(v7 + 24) = v11;
  result = sub_10075EC64();
  *(_BYTE *)(v7 + 28) = result;
  *(_QWORD *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 40) = 0;
  *(_QWORD *)(a1 + 8) = v7 + 48;
  return result;
}

void sub_10173DA3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_10173DA44(void **a1, _DWORD *a2, uint64_t *a3, int *a4, int *a5, _DWORD *a6)
{
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;

  v7 = (char *)*a1;
  v8 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v9 = v8 + 1;
  if (v8 + 1 > 0x555555555555555)
    sub_100259694();
  v14 = (char *)(a1 + 2);
  v15 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v7) >> 4);
  if (2 * v15 > v9)
    v9 = 2 * v15;
  if (v15 >= 0x2AAAAAAAAAAAAAALL)
    v16 = 0x555555555555555;
  else
    v16 = v9;
  if (v16)
  {
    v17 = a6;
    v14 = (char *)sub_100313718((uint64_t)v14, v16);
    a6 = v17;
    v18 = v14;
    v20 = v19;
  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = &v18[48 * v8];
  v22 = *a3;
  v23 = *a4;
  v24 = *a5;
  v25 = *a6;
  *(_DWORD *)v21 = *a2;
  *((_QWORD *)v21 + 1) = v22;
  *((_DWORD *)v21 + 4) = v23;
  *((_DWORD *)v21 + 5) = v24;
  *((_DWORD *)v21 + 6) = v25;
  v21[28] = sub_10075EC64(v14);
  *((_QWORD *)v21 + 4) = 0;
  *((_DWORD *)v21 + 10) = 0;
  v26 = v21 + 48;
  v28 = (char *)*a1;
  v27 = (char *)a1[1];
  if (v27 != *a1)
  {
    do
    {
      v29 = *((_OWORD *)v27 - 3);
      v30 = *((_OWORD *)v27 - 1);
      *((_OWORD *)v21 - 2) = *((_OWORD *)v27 - 2);
      *((_OWORD *)v21 - 1) = v30;
      *((_OWORD *)v21 - 3) = v29;
      v21 -= 48;
      v27 -= 48;
    }
    while (v27 != v28);
    v27 = (char *)*a1;
  }
  *a1 = v21;
  a1[1] = v26;
  a1[2] = &v18[48 * v20];
  if (v27)
    operator delete(v27);
  return v26;
}

void sub_10173DBAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10173DBC0(int a1)
{
  return (a1 & 0xFFFFFFFE) != 2;
}

BOOL sub_10173DBD0(int a1)
{
  return (a1 - 25) <= 0x32 && ((1 << (a1 - 25)) & 0x4000002000001) != 0 || a1 == 10;
}

uint64_t sub_10173DC10(int a1)
{
  return ((a1 - 25) < 0x33) & (0x4000002000001uLL >> (a1 - 25));
}

BOOL sub_10173DC34(int a1)
{
  return (a1 - 3) < 2;
}

BOOL sub_10173DC44(int a1)
{
  return (a1 - 2) < 3;
}

_QWORD *sub_10173DC54@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 8)
    v2 = "unknown";
  else
    v2 = (&off_1021CDFA8)[a1];
  return sub_1015A2E04(a2, v2);
}

uint64_t sub_10173DC80(unsigned int a1)
{
  if (a1 > 8)
    return 8;
  else
    return dword_101CDB814[a1];
}

_QWORD *sub_10173DCA0(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    operator delete();
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

double sub_10173DD00@<D0>(uint64_t a1@<X8>, float64x2_t a2@<Q0>, float64_t a3@<D1>, double a4@<D2>)
{
  NSObject *v5;
  double result;
  __int128 v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  __int128 v11;
  __int128 v12;
  float64x2_t v13;
  double v14;
  uint8_t buf[1640];

  a2.f64[1] = a3;
  v13 = vmulq_f64(vdivq_f64(a2, (float64x2_t)vdupq_n_s64(0x4066800000000000uLL)), (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL));
  v14 = a4;
  v11 = 0uLL;
  *(_QWORD *)&v12 = 0;
  BYTE8(v12) = 1;
  if (cnnavigation::LLAToECEF(&v13, 1, &v11))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#SatReport,ECEF conversion failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#SatReport,ECEF conversion failed", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "std::optional<std::array<double, 3>> gnss::util::convertLlaToEcefArray(double, double, double)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    result = *(double *)&v11;
    v7 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v7;
  }
  return result;
}

void sub_10173DEFC(uint64_t a1, uint64_t a2, float64x2_t a3, float64_t a4, double a5, double a6)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  _BYTE v15[24];
  char v16;
  uint8_t buf[1640];

  sub_10173DD00((uint64_t)v15, a3, a4, a5);
  if (v16)
  {
    v9 = *(_QWORD *)(a1 + 176);
    v10 = *(_QWORD *)(a1 + 184);
    while (v9 != v10)
    {
      if (!v16)
        sub_10028DF3C();
      sub_10173E0D8(v9, (uint64_t)v15, a2, a6);
      v9 += 144;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#SatReport,RX conversion from LLA to ECEF failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#SatReport,RX conversion from LLA to ECEF failed", v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void gnss::util::updateSatelliteAzElFromMeasurementData(const gnss::MeasurementData &, double, double, double, double, GNSS::SatelliteVisibilityReport &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_10173E0D8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t *v8;
  int v9;
  float *v10;
  float v11;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  double v24;
  uint8_t *v25;
  uint8_t *v26;
  float v27;
  float v28;
  float v29;
  NSObject *v30;
  double v31;
  uint8_t *v32;
  double v33;
  double v34;
  uint64_t v35;
  _DWORD v36[2];
  __int16 v37;
  int v38;
  uint8_t buf[8];
  __int16 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v35 = 0;
  sub_100108D64((unsigned int *)a1, (_DWORD *)&v35 + 1, &v35);
  *(_QWORD *)buf = (char *)&v35 + 4;
  v8 = sub_101741BA0(a3, (unsigned int *)&v35 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v9 = v35;
  LODWORD(v42) = v35;
  *(_QWORD *)buf = &v42;
  v10 = (float *)sub_101741E10((uint64_t)(v8 + 3), (int *)&v42, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v11 = v10[10];
  if (v11 > 0.0 && a4 - v11 < 30.0)
    return;
  v13 = v10;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  if (v14 != v15)
  {
    v16 = (uint64_t *)(v14 + 32 * ((v15 - v14) >> 6));
    v17 = v16 + 1;
    v18 = v16 + 2;
    v19 = v16 + 3;
    goto LABEL_9;
  }
  v20 = *(uint64_t **)(a1 + 48);
  if (v20)
  {
    v17 = v20 + 2;
    v18 = v20 + 6;
    v19 = v20 + 10;
LABEL_9:
    v21 = *v18;
    v22 = *v19;
    v42 = *v17;
    v43 = v21;
    v44 = v22;
    v33 = 0.0;
    v34 = 0.0;
    if (!cnnavigation::SatElAz(a2, &v42, 1, &v33))
    {
      *((_DWORD *)v13 + 5) = v9;
      v27 = a4;
      v13[10] = v27;
      v28 = sub_100512A90(v33);
      v13[8] = v28;
      v29 = sub_100512A90(v34);
      v13[9] = v29;
      return;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v23 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = HIDWORD(v35);
      v40 = 1026;
      v41 = v9;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#SatReport,SatElAz failed,%{public}d,%{public}u", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v36[0] = 67240448;
      v36[1] = HIDWORD(v35);
      v37 = 1026;
      v38 = v9;
      v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#SatReport,SatElAz failed,%{public}d,%{public}u", v36, 14);
      v26 = v25;
      sub_100512490("Generic", 1, 0, 0, "void gnss::util::updateSatelliteAzElFromSvInfo(const gnss::SvInfo &, const std::array<double, 3> &, double, GNSS::SatelliteVisibilityReport &)", "%s\n", v24);
LABEL_28:
      if (v26 != buf)
        free(v26);
      return;
    }
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF88);
  v30 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = HIDWORD(v35);
    v40 = 1026;
    v41 = v9;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#SatReport,unable to compute SV ECEF position,%{public}d,%{public}u", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    LODWORD(v42) = 67240448;
    HIDWORD(v42) = HIDWORD(v35);
    LOWORD(v43) = 1026;
    *(_DWORD *)((char *)&v43 + 2) = v9;
    v31 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#SatReport,unable to compute SV ECEF position,%{public}d,%{public}u", &v42, 14);
    v26 = v32;
    sub_100512490("Generic", 1, 0, 2, "void gnss::util::updateSatelliteAzElFromSvInfo(const gnss::SvInfo &, const std::array<double, 3> &, double, GNSS::SatelliteVisibilityReport &)", "%s\n", v31);
    goto LABEL_28;
  }
}

void sub_10173E52C()
{
  uint32_t denom;
  uint32_t numer;
  uint32_t v2;
  unint64_t v3;
  NSObject *v4;
  uint8_t *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  int v12;
  mach_timebase_info info;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;

  if (qword_10230FA08)
    return;
  mach_timebase_info(&info);
  if (info.denom)
  {
    denom = info.denom;
    numer = info.numer;
    do
    {
      v2 = denom;
      denom = numer % denom;
      numer = v2;
    }
    while (denom);
  }
  else
  {
    v2 = info.numer;
  }
  qword_10230FA10 = info.denom / v2;
  qword_10230FA08 = info.numer / v2;
  v3 = qword_10230FA08 * (unint64_t)qword_10230FA10;
  if (v3 >= 0x17D)
  {
    byte_10230FA18 = 1;
    if (v3 >> 10 > 0x5E)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsdUtil,Cannot protect against overflow in tick to ns", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_22;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      LOWORD(v14) = 0;
      v5 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsdUtil,Cannot protect against overflow in tick to ns", &v14, 2);
      sub_100512490("Generic", 1, 0, 0, "const TicksToNsInfo &getTickToNsInfo()", "%s\n");
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpsdUtil,Reducing tick to ns precision to avoid overflow risk", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_22;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      LOWORD(v14) = 0;
      v5 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsdUtil,Reducing tick to ns precision to avoid overflow risk", &v14, 2);
      sub_100512490("Generic", 1, 0, 2, "const TicksToNsInfo &getTickToNsInfo()", "%s\n");
    }
    if (v5 != buf)
      free(v5);
  }
LABEL_22:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF88);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    if (byte_10230FA18)
      v8 = 8;
    else
      v8 = 0;
    *(_DWORD *)buf = 134218496;
    v21 = qword_10230FA08;
    v22 = 2048;
    v23 = qword_10230FA10;
    v24 = 1024;
    v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#gpsdUtil,Tick to ns info,Numerator,%llu,Denominator,%llu,PrecisionReductionBits,%d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    if (byte_10230FA18)
      v9 = 8;
    else
      v9 = 0;
    v14 = 134218496;
    v15 = qword_10230FA08;
    v16 = 2048;
    v17 = qword_10230FA10;
    v18 = 1024;
    v19 = v9;
    LODWORD(v11) = 28;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsdUtil,Tick to ns info,Numerator,%llu,Denominator,%llu,PrecisionReductionBits,%d", &v14, v11, v12);
    sub_100512490("Generic", 1, 0, 2, "const TicksToNsInfo &getTickToNsInfo()", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
}

void sub_10173E9F0(int __val@<W0>, uint64_t a2@<X8>)
{
  const std::string::value_type *v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  std::string __p;
  _QWORD v10[2];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = "START";
  switch(__val)
  {
    case 0:
    case 57:
      v4 = "PROTO_DEFAULT";
      goto LABEL_62;
    case 1:
      goto LABEL_62;
    case 2:
      v4 = "STOP";
      goto LABEL_62;
    case 3:
      v4 = "RESET";
      goto LABEL_62;
    case 4:
      v4 = "CLEAR";
      goto LABEL_62;
    case 5:
      v4 = "DELETE_GNSS_DATA";
      goto LABEL_62;
    case 6:
      v4 = "SET_PVTM_REPORT";
      goto LABEL_62;
    case 7:
      v4 = "SET_NMEA_HANDLER";
      goto LABEL_62;
    case 8:
      v4 = "INJECT_ASSISTANCE_POSITION";
      goto LABEL_62;
    case 9:
      v4 = "INJECT_ASSISTANCE_TIME";
      goto LABEL_62;
    case 10:
      v4 = "INJECT_ASSISTANCE_FILE";
      goto LABEL_62;
    case 11:
      v4 = "INJECT_RTI_FILE";
      goto LABEL_62;
    case 12:
      v4 = "INJECT_SVID_BLOCKLIST";
      goto LABEL_62;
    case 13:
      v4 = "SET_ASSISTANCE_PRESSURE";
      goto LABEL_62;
    case 14:
      v4 = "SET_ASSISTANCE_ACCEL";
      goto LABEL_62;
    case 15:
      v4 = "SET_ASSISTANCE_GYRO";
      goto LABEL_62;
    case 16:
      v4 = "SET_ASSISTANCE_DEM";
      goto LABEL_62;
    case 17:
      v4 = "SET_ASSISTANCE_MAP_VECTOR";
      goto LABEL_62;
    case 18:
      v4 = "SET_ASSISTANCE_MOTION_ACTIVITY_CONTEXT";
      goto LABEL_62;
    case 19:
      v4 = "SET_ASSISTANCE_MOUNT_STATE";
      goto LABEL_62;
    case 20:
      v4 = "SET_ASSISTANCE_SIGNAL_ENVIRONMENT";
      goto LABEL_62;
    case 21:
      v4 = "SET_ASSISTANCE_SPEED_CONSTRAINT";
      goto LABEL_62;
    case 22:
      v4 = "SET_ASSISTANCE_ALONG_TRACK_VELOCITY";
      goto LABEL_62;
    case 23:
      v4 = "SET_POWER_REPORT";
      goto LABEL_62;
    case 24:
      v4 = "SET_CONFIG_SIMULATOR_MODE";
      goto LABEL_62;
    case 25:
      v4 = "SET_CONFIG_ENABLE_GNSS_CONSTELLATIONS";
      goto LABEL_62;
    case 26:
      v4 = "SET_CONFIG_DUTY_CYCLING";
      goto LABEL_62;
    case 27:
      v4 = "SET_TIME_TRANSFER_PULSE";
      goto LABEL_62;
    case 28:
      v4 = "CLEAN_TIME_TRANSFER_PULSE";
      goto LABEL_62;
    case 29:
      v4 = "INJECT_XOCAL_INFO";
      goto LABEL_62;
    case 30:
      v4 = "CNTIN_STATUS_UPDATE";
      goto LABEL_62;
    case 31:
      v4 = "SET_THERMAL_RISK_STATE";
      goto LABEL_62;
    case 32:
      v4 = "PING";
      goto LABEL_62;
    case 34:
      v4 = "BUILD_DEVICE";
      goto LABEL_62;
    case 35:
      v4 = "TERMINATION_IMMINENT";
      goto LABEL_62;
    case 36:
      v4 = "EXIT";
      goto LABEL_62;
    case 37:
      v4 = "FORCE_CLEAR_ALL_NV";
      goto LABEL_62;
    case 38:
      v4 = "SET_CONFIG_RF_BAND_ENABLE";
      goto LABEL_62;
    case 51:
      v4 = "START_EMERGENCY_PREEMPTIVE_SESSION";
      goto LABEL_62;
    case 52:
      v4 = "STOP_EMERGENCY_PREEMPTIVE_SESSION";
      goto LABEL_62;
    case 53:
      v4 = "SET_EMERGENCY_CONFIG";
      goto LABEL_62;
    case 54:
      v4 = "SET_EMERGENCY_SESSION_SUMMARY_REPORT";
      goto LABEL_62;
    case 55:
      v4 = "ENTER_EMERGENCY_MODE";
      goto LABEL_62;
    case 56:
      v4 = "EXIT_EMERGENCY_MODE";
      goto LABEL_62;
    case 60:
      v4 = "START_EMERGENCY_POSITION";
      goto LABEL_62;
    case 61:
      v4 = "STOP_EMERGENCY_POSITION";
      goto LABEL_62;
    case 62:
      v4 = "SET_EMERGENCY_POSITION_REPORT";
      goto LABEL_62;
    case 63:
      v4 = "SET_EMERGENCY_MEASUREMENT_REPORT";
      goto LABEL_62;
    case 64:
      v4 = "SET_NW_ASSISTANCE_NEEDED_REPORT";
      goto LABEL_62;
    case 65:
      v4 = "SET_NW_ASSISTANCE_GPS_REF_TIME";
      goto LABEL_62;
    case 66:
      v4 = "SET_NW_ASSISTANCE_REF_POSITION";
      goto LABEL_62;
    case 67:
      v4 = "SET_NW_ASSISTANCE_GPS_EPHEMERIS";
      goto LABEL_62;
    case 68:
      v4 = "SET_NW_ASSISTANCE_GPS_ACQUISITION";
      goto LABEL_62;
    case 69:
      v4 = "INJECT_FT_ASSISTANCE";
      goto LABEL_62;
    case 70:
      v4 = "DECODE_SUPL_INIT";
      goto LABEL_62;
    case 71:
      v4 = "SET_SUPL_INIT";
      goto LABEL_62;
    case 72:
      v4 = "SET_SUPL_LOCATIONID_NEEDED_REPORT";
      goto LABEL_62;
    case 73:
      v4 = "SET_SUPL_LOCATIONID";
      goto LABEL_62;
    case 74:
      v4 = "ABORT_SUPL_SESSION";
      goto LABEL_62;
    case 75:
      v4 = "SET_SUPL_SESSION_STATUS_REPORT";
      goto LABEL_62;
    case 76:
      v4 = "SET_SUPL_WLAN_MEAS";
LABEL_62:
      std::string::assign((std::string *)a2, v4);
      break;
    default:
      break;
  }
  v5 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  if (!v5)
  {
    std::to_string(&__p, __val);
    v6 = std::string::insert(&__p, 0, "unknown");
    v7 = v6->__r_.__value_.__r.__words[0];
    v10[0] = v6->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v10 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v10[0];
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v10 + 7);
    *(_BYTE *)(a2 + 23) = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10173EDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void sub_10173EE1C()
{
  int v0;
  NSObject *v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  uint8_t *v10;
  double v11;
  passwd *v12;
  NSObject *v13;
  int v14;
  int *v15;
  char *v16;
  uid_t pw_uid;
  gid_t pw_gid;
  NSObject *v19;
  int v20;
  NSObject *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  const char *v25;
  NSObject *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  int *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  char *v40;
  uint8_t buf[4];
  uid_t v42;
  __int16 v43;
  char *v44;

  if (access("/var/db/gpsd", 0))
  {
    v0 = *__error();
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v1 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240450;
      v42 = v0;
      v43 = 2082;
      v44 = strerror(v0);
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "#gpsdUtil,home check failure,%{public}d,%{public}s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v29 = qword_1022A0078;
      LODWORD(v38) = 67240450;
      HIDWORD(v38) = v0;
      v39 = 2082;
      v40 = strerror(v0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 17, "#gpsdUtil,home check failure,%{public}d,%{public}s", &v38, 18);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 0, "void gpsd::util::ensureGpsdHomeDirectoryExists()", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    if (mkdir("/var/db/gpsd", 0x1C0u))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v2 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        v3 = *__error();
        *(_DWORD *)buf = 67240192;
        v42 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "#gpsdUtil,creating home failed,%{public}d", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 0))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v4 = qword_1022A0078;
      v5 = *__error();
      LODWORD(v38) = 67240192;
      HIDWORD(v38) = v5;
      LODWORD(v37) = 8;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 17, "#gpsdUtil,creating home failed,%{public}d", &v38, v37);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 0, "void gpsd::util::ensureGpsdHomeDirectoryExists()", "%s\n", v6);
      goto LABEL_25;
    }
    *__error() = 0;
    v12 = getpwnam("_gpsd");
    if (*__error())
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v14 = *__error();
        v15 = __error();
        v16 = strerror(*v15);
        *(_DWORD *)buf = 67109378;
        v42 = v14;
        v43 = 2080;
        v44 = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#gpsdUtil,home id error,%d,%s", buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_33;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v32 = qword_1022A0078;
      __error();
      v33 = __error();
      strerror(*v33);
      LODWORD(v37) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 16, "#gpsdUtil,home id error,%d,%s", &v38, v37);
    }
    else
    {
      if (v12)
      {
        pw_uid = v12->pw_uid;
        pw_gid = v12->pw_gid;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CDF88);
        v19 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          v42 = pw_uid;
          v43 = 1024;
          LODWORD(v44) = pw_gid;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#gpsdUtil,home id updated,%d,%d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CDF88);
          LODWORD(v38) = 67109376;
          HIDWORD(v38) = pw_uid;
          v39 = 1024;
          LODWORD(v40) = pw_gid;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsdUtil,home id updated,%d,%d", &v38, 14);
          v36 = (uint8_t *)v35;
          sub_100512490("Generic", 1, 0, 2, "void gpsd::util::ensureGpsdHomeDirectoryExists()", "%s\n", v35);
          if (v36 != buf)
            free(v36);
        }
        goto LABEL_40;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v27 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#gpsdUtil,home id null", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
      {
LABEL_33:
        pw_uid = 267;
        pw_gid = 267;
LABEL_40:
        if (chown("/var/db/gpsd", pw_uid, pw_gid))
        {
          v20 = *__error();
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CDF88);
          v21 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
          {
            v22 = strerror(v20);
            *(_DWORD *)buf = 67240450;
            v42 = v20;
            v43 = 2082;
            v44 = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "#gpsdUtil,mod home failed,%{public}d,%{public}s", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CDF88);
            v23 = qword_1022A0078;
            v24 = strerror(v20);
            LODWORD(v38) = 67240450;
            HIDWORD(v38) = v20;
            v39 = 2082;
            v40 = v24;
            LODWORD(v37) = 18;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 17, "#gpsdUtil,mod home failed,%{public}d,%{public}s", &v38, v37);
            v8 = (uint8_t *)v25;
            sub_100512490("Generic", 1, 0, 0, "void gpsd::util::ensureGpsdHomeDirectoryExists()", "%s\n", v25);
            if (v8 != buf)
              goto LABEL_26;
          }
          return;
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CDF88);
        v26 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#gpsdUtil,home regeneration succeeded", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          return;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CDF88);
        LOWORD(v38) = 0;
        LODWORD(v37) = 2;
        v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsdUtil,home regeneration succeeded", &v38, v37, v38);
        goto LABEL_24;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsdUtil,home id null");
    }
    v34 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 0, "void gpsd::util::ensureGpsdHomeDirectoryExists()", "%s\n", v28);
    if (v34 != buf)
      free(v34);
    goto LABEL_33;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF88);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsdUtil,home check success", buf, 2u);
  }
  if (!sub_1001BFF7C(115, 2))
    return;
  bzero(buf, 0x65CuLL);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF88);
  LOWORD(v38) = 0;
  v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsdUtil,home check success", &v38, 2, v38);
LABEL_24:
  v8 = v10;
  sub_100512490("Generic", 1, 0, 2, "void gpsd::util::ensureGpsdHomeDirectoryExists()", "%s\n", v11);
LABEL_25:
  if (v8 != buf)
LABEL_26:
    free(v8);
}

void sub_10173F8D8(uint64_t a1@<X0>, double *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type size;
  NSObject *v7;
  const char *v8;
  char v9;
  char v10;
  const char *v11;
  double v12;
  std::string::size_type v13;
  unint64_t v14;
  NSObject *v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  const char *v19;
  _BOOL4 v20;
  NSObject *v21;
  double v22;
  unint64_t v23;
  const char *v24;
  double v25;
  const char *v26;
  char *v27;
  const char *v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  std::string __p;
  int v35;
  unint64_t v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  _BYTE buf[12];
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;

  memset(&__p, 0, sizeof(__p));
  if (!sub_10005DE60(a1, &__p))
    goto LABEL_5;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size <= 8)
  {
LABEL_5:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 23) >= 0)
        v8 = (const char *)a1;
      else
        v8 = *(const char **)a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#rof,failed to read file %{public}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_13;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    if (*(char *)(a1 + 23) >= 0)
      v23 = a1;
    else
      v23 = *(_QWORD *)a1;
    v35 = 136446210;
    v36 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#rof,failed to read file %{public}s", &v35, 12);
    v17 = (char *)v24;
    sub_100512490("Generic", 1, 0, 0, "std::string gpsd::util::readRofFileCheckHashAndReturnPayload(const std::string &, double &)", "%s\n", v24);
LABEL_56:
    if (v17 != buf)
      free(v17);
LABEL_13:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_14;
  }
  v33 = 0;
  sub_1015A2E04(buf, "#rof");
  v9 = sub_101740038((unint64_t)&__p, 8uLL, &v33, (uint64_t *)buf);
  v10 = v9;
  if (SHIBYTE(v44) < 0)
  {
    operator delete(*(void **)buf);
    if ((v10 & 1) != 0)
      goto LABEL_19;
LABEL_25:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v13 = __p.__r_.__value_.__l.__size_;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v14 = v13 - 8;
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#rof,failed to compute hash,%{public}zu", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_13;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v35 = 134349056;
    v36 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#rof,failed to compute hash,%{public}zu", &v35, 12);
    v17 = (char *)v16;
    sub_100512490("Generic", 1, 0, 0, "std::string gpsd::util::readRofFileCheckHashAndReturnPayload(const std::string &, double &)", "%s\n", v16);
    goto LABEL_56;
  }
  if ((v9 & 1) == 0)
    goto LABEL_25;
LABEL_19:
  v32 = -1.0;
  if (*(char *)(a1 + 23) >= 0)
    v11 = (const char *)a1;
  else
    v11 = *(const char **)a1;
  if (sub_10000840C(v11, &v32))
  {
    v12 = CFAbsoluteTimeGetCurrent() - v32;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 23) >= 0)
        v19 = (const char *)a1;
      else
        v19 = *(const char **)a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#gpsd,#rof,could not get file creation time,%{public}s", buf, 0xCu);
    }
    v20 = sub_1001BFF7C(115, 0);
    v12 = -1.0;
    if (v20)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      if (*(char *)(a1 + 23) >= 0)
        v28 = (const char *)a1;
      else
        v28 = *(const char **)a1;
      v35 = 136446210;
      v36 = (unint64_t)v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#rof,could not get file creation time,%{public}s", &v35, 12);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 0, "std::string gpsd::util::readRofFileCheckHashAndReturnPayload(const std::string &, double &)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
      v12 = -1.0;
    }
  }
  *a2 = v12;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF88);
  v21 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *a2;
    *(_DWORD *)buf = 134349568;
    *(_QWORD *)&buf[4] = v33;
    v42 = 2050;
    v43 = v22;
    v44 = 2050;
    v45 = v22 / 3600.0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#rof,verified,hash,%{public}llx,ageSec,%{public}.1f,ageHours,%{public}.2f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v25 = *a2;
    v35 = 134349568;
    v36 = v33;
    v37 = 2050;
    v38 = v25;
    v39 = 2050;
    v40 = v25 / 3600.0;
    LODWORD(v31) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#rof,verified,hash,%{public}llx,ageSec,%{public}.1f,ageHours,%{public}.2f", &v35, v31);
    v27 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "std::string gpsd::util::readRofFileCheckHashAndReturnPayload(const std::string &, double &)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  std::string::basic_string(a3, &__p, 8uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)buf);
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_10173FFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101740038(unint64_t a1, unint64_t a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t *v11;
  unint64_t v12;
  _BOOL4 v13;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  const char *v18;
  NSObject *v19;
  uint64_t *v20;
  _BOOL4 v21;
  unint64_t v22;
  unint64_t v23;
  NSObject *v24;
  uint64_t *v25;
  _BOOL4 v26;
  uint64_t *v27;
  NSObject *v28;
  uint64_t *v29;
  unint64_t v30;
  _BOOL4 v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  const char *v36;
  uint8_t *v37;
  unsigned __int8 *v38;
  int v39;
  _BYTE v40[24];
  unint64_t v41;
  unsigned __int8 md[16];
  __int128 v43;
  uint8_t buf[4];
  uint64_t *v45;
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  unint64_t v49;

  v6 = a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v7 = *(unsigned __int8 *)(a1 + 23);
    if (v7 > a2)
    {
      *(_OWORD *)md = 0u;
      v43 = 0u;
      v8 = a1;
      goto LABEL_6;
    }
LABEL_25:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a4 + 23) >= 0)
        v20 = a4;
      else
        v20 = (uint64_t *)*a4;
      *(_DWORD *)buf = 136315138;
      v45 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%s,insufficient data in file", buf, 0xCu);
    }
    v21 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v21)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v15 = qword_1022A0078;
    if (*((char *)a4 + 23) >= 0)
      v35 = a4;
    else
      v35 = (uint64_t *)*a4;
    *(_DWORD *)md = 136315138;
    *(_QWORD *)&md[4] = v35;
    v39 = 12;
    v38 = md;
    v18 = "%s,insufficient data in file";
LABEL_74:
    v34 = 16;
    goto LABEL_75;
  }
  v7 = *(_QWORD *)(a1 + 8);
  if (v7 <= a2)
    goto LABEL_25;
  *(_OWORD *)md = 0u;
  v43 = 0u;
  v8 = *(_QWORD *)a1;
LABEL_6:
  v9 = v7 - a2;
  if (v7 - a2 > 0x5000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      if (*((char *)a4 + 23) >= 0)
        v11 = a4;
      else
        v11 = (uint64_t *)*a4;
      v12 = *(unsigned __int8 *)(v6 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(v6 + 8);
      *(_DWORD *)buf = 136315650;
      v45 = v11;
      v46 = 2050;
      v47 = v9;
      v48 = 2050;
      v49 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%s,size limit exceeded,%{public}zu,%{public}zu", buf, 0x20u);
    }
    v13 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v13)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v15 = qword_1022A0078;
      if (*((char *)a4 + 23) >= 0)
        v16 = a4;
      else
        v16 = (uint64_t *)*a4;
      v17 = *(unsigned __int8 *)(v6 + 23);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(v6 + 8);
      *(_DWORD *)v40 = 136315650;
      *(_QWORD *)&v40[4] = v16;
      *(_WORD *)&v40[12] = 2050;
      *(_QWORD *)&v40[14] = v9;
      *(_WORD *)&v40[22] = 2050;
      v41 = v17;
      v39 = 32;
      v38 = v40;
      v18 = "%s,size limit exceeded,%{public}zu,%{public}zu";
LABEL_67:
      v34 = 17;
LABEL_75:
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, v34, v18, v38, v39, *(_OWORD *)v40, *(_QWORD *)&v40[16], v41, *(_QWORD *)md, *(_QWORD *)&md[8], v43);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 0, "BOOL gpsd::util::fileContentsHasHashMatch(const std::string &, const size_t, uint64_t &, const std::string &)", "%s\n", v36);
      if (v37 != buf)
        free(v37);
      return 0;
    }
    return result;
  }
  if (!CC_SHA256((const void *)(v8 + a2), (int)v7 - (int)a2, md))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a4 + 23) >= 0)
        v25 = a4;
      else
        v25 = (uint64_t *)*a4;
      *(_DWORD *)buf = 136315394;
      v45 = v25;
      v46 = 2050;
      v47 = v9;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%s,failed to compute hash,%{public}zu", buf, 0x16u);
    }
    v26 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v26)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v15 = qword_1022A0078;
    if (*((char *)a4 + 23) >= 0)
      v27 = a4;
    else
      v27 = (uint64_t *)*a4;
    *(_DWORD *)v40 = 136315394;
    *(_QWORD *)&v40[4] = v27;
    *(_WORD *)&v40[12] = 2050;
    *(_QWORD *)&v40[14] = v9;
    v39 = 22;
    v38 = v40;
    v18 = "%s,failed to compute hash,%{public}zu";
    goto LABEL_74;
  }
  if (*(char *)(v6 + 23) < 0)
    v6 = *(_QWORD *)v6;
  v22 = _byteswap_uint64(*(_QWORD *)v6);
  *a3 = v22;
  v23 = bswap64(*(unint64_t *)md);
  if (v22 == v23)
    return 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF88);
  v28 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    if (*((char *)a4 + 23) >= 0)
      v29 = a4;
    else
      v29 = (uint64_t *)*a4;
    v30 = *a3;
    *(_DWORD *)buf = 136315650;
    v45 = v29;
    v46 = 2050;
    v47 = v30;
    v48 = 2050;
    v49 = v23;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "%s,hash mismatch,file prefix,%{public}llx,computed,%{public}llx", buf, 0x20u);
  }
  v31 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v31)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v15 = qword_1022A0078;
    if (*((char *)a4 + 23) >= 0)
      v32 = a4;
    else
      v32 = (uint64_t *)*a4;
    v33 = *a3;
    *(_DWORD *)v40 = 136315650;
    *(_QWORD *)&v40[4] = v32;
    *(_WORD *)&v40[12] = 2050;
    *(_QWORD *)&v40[14] = v33;
    *(_WORD *)&v40[22] = 2050;
    v41 = v23;
    v39 = 32;
    v38 = v40;
    v18 = "%s,hash mismatch,file prefix,%{public}llx,computed,%{public}llx";
    goto LABEL_67;
  }
  return result;
}

double sub_1017406CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  unsigned int v4;
  double result;

  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v3 = sub_100214380(a1, (_BYTE *)(a2 + 16));
  v4 = vcvtmd_s64_f64(v3 / 604800.0);
  *(_DWORD *)a2 = v4;
  result = v3 - (double)(604800 * v4);
  *(double *)(a2 + 8) = result;
  return result;
}

double sub_101740728(uint64_t a1, double *a2, double result)
{
  if (result > 0.0 && *(_BYTE *)(a1 + 16) != 0)
  {
    result = (double)((uint64_t)(result * 1000000000.0) - *(_QWORD *)a1 + *(_QWORD *)(a1 + 8)) * 0.000000001;
    *a2 = result;
  }
  return result;
}

void sub_101740774(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  id v10;
  NSDictionary *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD block[5];
  uint64_t v21;
  _UNKNOWN **v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF88);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v28 = a2;
    v29 = 2082;
    v30 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#abc,reportIssue,%{public}s,%{public}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v23 = 136446466;
    v24 = a2;
    v25 = 2082;
    v26 = a3;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#abc,reportIssue,%{public}s,%{public}s", &v23, 22);
    sub_100512490("Generic", 1, 0, 2, "void gpsd::util::triggerDiagnosticReporter(dispatch_queue_t, const char *const, const char *const, BOOL)", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
  }
  if (a4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#abc,requested to collect BB logs", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      LOWORD(v23) = 0;
      LODWORD(v19) = 2;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#abc,requested to collect BB logs", &v23, v19);
      sub_100512490("Generic", 1, 0, 2, "void gpsd::util::triggerDiagnosticReporter(dispatch_queue_t, const char *const, const char *const, BOOL)", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
    v10 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v10, "setObject:forKey:", &__kCFBooleanTrue, kSymptomDiagnosticActionDiagnosticExtensions);
    v21 = kSymptomDiagnosticKeyPayloadDEParameters;
    v22 = &off_102220290;
    v11 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101740E08;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230FA00 != -1)
    dispatch_once(&qword_10230FA00, block);
  v12 = objc_msgSend((id)qword_10230F9F8, "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:", CFSTR("Location"), CFSTR("GNSS"), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3), CFSTR("locationd"), 0);
  if ((objc_msgSend((id)qword_10230F9F8, "snapshotWithSignature:delay:events:payload:actions:reply:", v12, 0, v11, v10, &stru_1021CDF68, 0.0) & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#abc,snapshotWithSignature failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      LOWORD(v23) = 0;
      LODWORD(v19) = 2;
      v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#abc,snapshotWithSignature failed", &v23, v19);
      sub_100512490("Generic", 1, 0, 0, "void gpsd::util::triggerDiagnosticReporter(dispatch_queue_t, const char *const, const char *const, BOOL)", "%s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF88);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#abc,complete", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    LOWORD(v23) = 0;
    LODWORD(v19) = 2;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#abc,complete", &v23, v19);
    sub_100512490("Generic", 1, 0, 2, "void gpsd::util::triggerDiagnosticReporter(dispatch_queue_t, const char *const, const char *const, BOOL)", "%s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
  }
}

id sub_101740E08(uint64_t a1)
{
  id result;

  result = objc_msgSend(objc_alloc((Class)SDRDiagnosticReporter), "initWithQueue:", *(_QWORD *)(a1 + 32));
  qword_10230F9F8 = (uint64_t)result;
  return result;
}

void sub_101740E40(id a1, NSDictionary *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  int v13;
  _QWORD v14[3];
  uint8_t buf[4];
  _QWORD v16[204];

  if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", kSymptomDiagnosticReplySuccess), "BOOLValue"))
  {
    v3 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", kSymptomDiagnosticReplySessionID);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136380675;
      v16[0] = objc_msgSend(v3, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#abc,accepted,%{private}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v5 = qword_1022A0078;
    v13 = 136380675;
    v14[0] = objc_msgSend(v3, "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "#abc,accepted,%{private}s", &v13, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void gpsd::util::triggerDiagnosticReporter(dispatch_queue_t, const char *const, const char *const, BOOL)_block_invoke", "%s\n", v6);
    if (v7 == buf)
      return;
LABEL_20:
    free(v7);
    return;
  }
  v8 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", kSymptomDiagnosticReplyReason);
  v9 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", kSymptomDiagnosticReplyReasonString);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF88);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240450;
    LODWORD(v16[0]) = objc_msgSend(v8, "intValue");
    WORD2(v16[0]) = 2082;
    *(_QWORD *)((char *)v16 + 6) = objc_msgSend(v9, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#abc,rejected code,%{public}d,rejected reason,%{public}s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v11 = qword_1022A0078;
    v13 = 67240450;
    LODWORD(v14[0]) = objc_msgSend(v8, "intValue");
    WORD2(v14[0]) = 2082;
    *(_QWORD *)((char *)v14 + 6) = objc_msgSend(v9, "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "#abc,rejected code,%{public}d,rejected reason,%{public}s", &v13, 18);
    v7 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void gpsd::util::triggerDiagnosticReporter(dispatch_queue_t, const char *const, const char *const, BOOL)_block_invoke", "%s\n", v12);
    if (v7 != buf)
      goto LABEL_20;
  }
}

void sub_1017411EC(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_101741218(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - *a1) >> 4);
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) > 0x1745D1745D1745DLL)
      sub_100259694();
    v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0xBA2E8BA2E8BA2ELL)
      v20 = 0x1745D1745D1745DLL;
    else
      v20 = v18;
    v31[4] = result;
    if (v20)
      v21 = (char *)sub_101035B94(result, v20);
    else
      v21 = 0;
    v22 = &v21[176 * v17];
    v31[0] = v21;
    v31[1] = v22;
    v31[3] = &v21[176 * v20];
    v23 = *(_OWORD *)(a2 + 80);
    v25 = *(_OWORD *)(a2 + 32);
    v24 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v22 + 4) = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v22 + 5) = v23;
    *((_OWORD *)v22 + 2) = v25;
    *((_OWORD *)v22 + 3) = v24;
    v27 = *(_OWORD *)(a2 + 112);
    v26 = *(_OWORD *)(a2 + 128);
    v28 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v22 + 137) = *(_OWORD *)(a2 + 137);
    *((_OWORD *)v22 + 7) = v27;
    *((_OWORD *)v22 + 8) = v26;
    *((_OWORD *)v22 + 6) = v28;
    v29 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v22 = *(_OWORD *)a2;
    *((_OWORD *)v22 + 1) = v29;
    v30 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    *((_QWORD *)v22 + 20) = v30;
    LODWORD(v30) = *(_DWORD *)(a2 + 168);
    *((_WORD *)v22 + 86) = *(_WORD *)(a2 + 172);
    *((_DWORD *)v22 + 42) = v30;
    v31[2] = v22 + 176;
    sub_1017415F4(a1, v31);
    v16 = a1[1];
    result = sub_1017417C4((uint64_t)v31);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    v9 = *(_OWORD *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 48);
    v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v7 + 80) = v11;
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = v10;
    v12 = *(_OWORD *)(a2 + 96);
    v13 = *(_OWORD *)(a2 + 112);
    v14 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v7 + 137) = *(_OWORD *)(a2 + 137);
    *(_OWORD *)(v7 + 112) = v13;
    *(_OWORD *)(v7 + 128) = v14;
    *(_OWORD *)(v7 + 96) = v12;
    v15 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(v7 + 160) = v15;
    LODWORD(v15) = *(_DWORD *)(a2 + 168);
    *(_WORD *)(v7 + 172) = *(_WORD *)(a2 + 172);
    *(_DWORD *)(v7 + 168) = v15;
    v16 = v7 + 176;
    a1[1] = v7 + 176;
  }
  a1[1] = v16;
  return result;
}

void sub_1017413BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1017417C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017413D0(uint64_t result, _BYTE *a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 16);
  if ((v2 & 2) != 0)
  {
    a2[1] = *(_BYTE *)(result + 9);
    if ((v2 & 4) == 0)
    {
LABEL_3:
      if ((v2 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_3;
  }
  a2[2] = *(_BYTE *)(result + 10);
  if ((v2 & 1) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      return result;
LABEL_9:
    a2[3] = *(_BYTE *)(result + 11);
    return result;
  }
LABEL_8:
  *a2 = *(_BYTE *)(result + 8);
  if ((v2 & 8) != 0)
    goto LABEL_9;
  return result;
}

uint64_t sub_101741418(uint64_t result, _BYTE *a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 24);
  if ((v2 & 0x200) != 0)
  {
    a2[9] = *(_BYTE *)(result + 17);
    if ((v2 & 0x10) == 0)
    {
LABEL_3:
      if ((v2 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  a2[4] = *(_BYTE *)(result + 12);
  if ((v2 & 8) == 0)
  {
LABEL_4:
    if ((v2 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  a2[3] = *(_BYTE *)(result + 11);
  if ((v2 & 0x100) == 0)
  {
LABEL_5:
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  a2[8] = *(_BYTE *)(result + 16);
  if ((v2 & 0x80) == 0)
  {
LABEL_6:
    if ((v2 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  a2[7] = *(_BYTE *)(result + 15);
  if ((v2 & 0x40) == 0)
  {
LABEL_7:
    if ((v2 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  a2[6] = *(_BYTE *)(result + 14);
  if ((v2 & 0x20) == 0)
  {
LABEL_8:
    if ((v2 & 2) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  a2[5] = *(_BYTE *)(result + 13);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  a2[1] = *(_BYTE *)(result + 9);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      return result;
LABEL_21:
    a2[2] = *(_BYTE *)(result + 10);
    return result;
  }
LABEL_20:
  *a2 = *(_BYTE *)(result + 8);
  if ((v2 & 4) != 0)
    goto LABEL_21;
  return result;
}

_QWORD *sub_1017414C0(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  char v13;
  _BYTE *v14;
  char *v15;
  _BYTE *v16;
  char v17;
  size_t v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (_BYTE *)*result;
  if (v8 - *result >= a4)
  {
    v14 = (_BYTE *)result[1];
    if (v14 - v9 >= a4)
    {
      v18 = a3 - __src;
      if (a3 != __src)
        result = memmove((void *)*result, __src, v18);
      v12 = &v9[v18];
    }
    else
    {
      v15 = &__src[v14 - v9];
      if (v14 != v9)
      {
        result = memmove((void *)*result, __src, v14 - v9);
        v9 = (_BYTE *)v7[1];
      }
      v12 = v9;
      if (v15 != a3)
      {
        v12 = v9;
        v16 = v9;
        do
        {
          v17 = *v15++;
          *v16++ = v17;
          ++v12;
        }
        while (v15 != a3);
      }
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_100259694();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_100785650(v7, v11);
    v12 = (_BYTE *)v7[1];
    while (v6 != a3)
    {
      v13 = *v6++;
      *v12++ = v13;
    }
  }
  v7[1] = v12;
  return result;
}

uint64_t sub_1017415F4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_101741668((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_101741668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  char v19;
  __int128 v20;
  __int128 v21;

  v7 = a7;
  *(_QWORD *)&v21 = a6;
  *((_QWORD *)&v21 + 1) = a7;
  v20 = v21;
  v18[0] = a1;
  v18[1] = &v20;
  v18[2] = &v21;
  if (a3 == a5)
  {
    v16 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 160);
      *(_OWORD *)(v7 - 176) = *(_OWORD *)(a3 - 176);
      *(_OWORD *)(v7 - 160) = v8;
      v9 = *(_OWORD *)(a3 - 144);
      v10 = *(_OWORD *)(a3 - 128);
      v11 = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 112) = *(_OWORD *)(a3 - 112);
      *(_OWORD *)(v7 - 96) = v11;
      *(_OWORD *)(v7 - 144) = v9;
      *(_OWORD *)(v7 - 128) = v10;
      v12 = *(_OWORD *)(a3 - 80);
      v13 = *(_OWORD *)(a3 - 64);
      v14 = *(_OWORD *)(a3 - 48);
      *(_OWORD *)(v7 - 39) = *(_OWORD *)(a3 - 39);
      *(_OWORD *)(v7 - 64) = v13;
      *(_OWORD *)(v7 - 48) = v14;
      *(_OWORD *)(v7 - 80) = v12;
      v15 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(v7 - 16) = v15;
      LODWORD(v15) = *(_DWORD *)(a3 - 8);
      *(_WORD *)(v7 - 4) = *(_WORD *)(a3 - 4);
      *(_DWORD *)(v7 - 8) = v15;
      v7 = *((_QWORD *)&v21 + 1) - 176;
      *((_QWORD *)&v21 + 1) -= 176;
      a3 -= 176;
    }
    while (a3 != a5);
    v16 = v21;
  }
  v19 = 1;
  sub_10174173C((uint64_t)v18);
  return v16;
}

uint64_t sub_10174173C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_101741770(a1);
  return a1;
}

void sub_101741770(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  if (v1 != v2)
  {
    v3 = v1 + 20;
    do
    {
      v4 = (_QWORD *)*v3;
      *v3 = 0;
      if (v4)
        sub_100E09580((uint64_t)v3, v4);
      v5 = v3 + 2;
      v3 += 22;
    }
    while (v5 != v2);
  }
}

uint64_t sub_1017417C4(uint64_t a1)
{
  sub_1017417F8(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1017417F8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  for (result = *(_QWORD *)(a1 + 16); result != a2; result = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = result - 176;
    v7 = *(_QWORD **)(result - 16);
    v5 = (_QWORD *)(result - 16);
    v6 = v7;
    *v5 = 0;
    if (v7)
      sub_100E09580((uint64_t)v5, v6);
  }
  return result;
}

uint64_t sub_101741848(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v20[5];

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xE38E38E38E38E3)
    v9 = 0x1C71C71C71C71C7;
  else
    v9 = v5;
  v20[4] = a1 + 2;
  v10 = (char *)sub_100686504(v7, v9);
  v11 = &v10[144 * v4];
  v20[0] = v10;
  v20[1] = v11;
  v20[3] = &v10[144 * v12];
  v13 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v11[16] = v13;
  *((_OWORD *)v11 + 2) = 0u;
  *((_QWORD *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 24) = 0u;
  v14 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 40) = 0u;
  *((_QWORD *)v11 + 6) = v14;
  v15 = *(_OWORD *)(a2 + 56);
  v16 = *(_OWORD *)(a2 + 72);
  v17 = *(_OWORD *)(a2 + 88);
  *((_WORD *)v11 + 52) = *(_WORD *)(a2 + 104);
  *(_OWORD *)(v11 + 88) = v17;
  *(_OWORD *)(v11 + 72) = v16;
  *(_OWORD *)(v11 + 56) = v15;
  *((_QWORD *)v11 + 15) = 0;
  *((_QWORD *)v11 + 16) = 0;
  *((_QWORD *)v11 + 14) = 0;
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((_QWORD *)v11 + 16) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v11[136] = *(_BYTE *)(a2 + 136);
  v20[2] = v11 + 144;
  sub_10010C034(a1, v20);
  v18 = a1[1];
  sub_10010C0A8(v20);
  return v18;
}

void sub_1017419B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10010C0A8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017419CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 144);
      *(_BYTE *)(v7 - 128) = *(_BYTE *)(a3 - 128);
      *(_OWORD *)(v7 - 144) = v8;
      *(_QWORD *)(v7 - 120) = 0;
      *(_OWORD *)(v7 - 112) = 0uLL;
      *(_OWORD *)(v7 - 120) = *(_OWORD *)(a3 - 120);
      *(_QWORD *)(v7 - 104) = *(_QWORD *)(a3 - 104);
      *(_OWORD *)(a3 - 120) = 0uLL;
      v9 = *(_QWORD *)(a3 - 96);
      *(_OWORD *)(a3 - 104) = 0uLL;
      *(_QWORD *)(v7 - 96) = v9;
      v10 = *(_OWORD *)(a3 - 88);
      v11 = *(_OWORD *)(a3 - 72);
      v12 = *(_OWORD *)(a3 - 56);
      *(_WORD *)(v7 - 40) = *(_WORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v12;
      *(_OWORD *)(v7 - 72) = v11;
      *(_OWORD *)(v7 - 88) = v10;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_BYTE *)(v7 - 8) = *(_BYTE *)(a3 - 8);
      v7 = *((_QWORD *)&v18 + 1) - 144;
      *((_QWORD *)&v18 + 1) -= 144;
      a3 -= 144;
    }
    while (a3 != a5);
    v13 = v18;
  }
  v16 = 1;
  sub_101741AD8((uint64_t)v15);
  return v13;
}

uint64_t sub_101741AD8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_101741B0C((uint64_t *)a1);
  return a1;
}

void sub_101741B0C(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_100E0947C(v3, v1);
      v1 += 18;
    }
    while (v1 != v2);
  }
}

void sub_101741B5C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 144;
    sub_100E0947C(v4, (_QWORD *)(i - 144));
  }
}

uint64_t *sub_101741BA0(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_100859588((uint64_t)v24, 0);
  return i;
}

void sub_101741DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100859588((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_101741E10(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 11) = 0;
  *(_QWORD *)((char *)v11 + 28) = 0;
  *(_QWORD *)((char *)v11 + 36) = 0;
  *(_QWORD *)((char *)v11 + 20) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_101742028(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10174203C(uint64_t **a1, int *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = sub_1017420BC((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v6 + 28) = *a3;
    sub_1000145B0(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *sub_1017420BC(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  unsigned int v7;
  uint64_t *v8;
  int v9;
  unsigned int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((_DWORD *)v4 + 7);
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= v6)
      {
        v10 = *((_DWORD *)v8 + 8);
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

void sub_101742120()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF88);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#gpsd,readFileIntoString,too many bytes\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
  }
  v1 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#gpsd,readFileIntoString,too many bytes", "{\"msg%{public}.0s\":\"#gpsd,readFileIntoString,too many bytes\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
  }
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#gpsd,readFileIntoString,too many bytes\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_1017422E4(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 80) = -1;
  *(_WORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 90) = 0;
  *(_WORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 106) = 0;
  *(_DWORD *)(a1 + 152) = -1;
  *(_OWORD *)(a1 + 136) = 0u;
  sub_1002433B8(a1 + 160);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0xFFFF;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 220) = 0;
  *(_OWORD *)(a1 + 236) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 252) = _Q0;
  *(_OWORD *)(a1 + 268) = _Q0;
  *(_OWORD *)(a1 + 284) = _Q0;
  *(_DWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 332) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 340) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 372) = 0xFFFF;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 400) = xmmword_101BAFEE0;
  *(_OWORD *)(a1 + 416) = _Q0;
  *(_OWORD *)(a1 + 432) = _Q0;
  *(_QWORD *)(a1 + 448) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 460) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 484) = 0;
  *(_QWORD *)(a1 + 468) = 0;
  *(_QWORD *)(a1 + 476) = 0;
  *(_QWORD *)(a1 + 488) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 496) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 508) = 0;
  *(_QWORD *)(a1 + 516) = 0;
  *(_QWORD *)(a1 + 500) = 0;
  *(_BYTE *)(a1 + 524) = 0;
  *(_QWORD *)(a1 + 652) = 0x500000000;
  *(_OWORD *)(a1 + 635) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_WORD *)(a1 + 660) = 0;
  *(_DWORD *)(a1 + 664) = 5;
  *(_BYTE *)(a1 + 668) = 1;
  *(_QWORD *)(a1 + 672) = 0x4122750000000000;
  *(_DWORD *)(a1 + 680) = 50;
  *(_QWORD *)(a1 + 688) = 0x409C200000000000;
  *(_DWORD *)(a1 + 696) = 60;
  *(_QWORD *)(a1 + 704) = 0x403E000000000000;
  *(_DWORD *)(a1 + 712) = 8;
  sub_101742538(a1);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 80) = -1;
  *(_WORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 90) = 0;
  operator new();
}

void sub_1017424E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v4;
  void *v5;

  sub_100427A00(v1 + 75);
  sub_100427A00(v1 + 69);
  v4 = v1[68];
  v1[68] = 0;
  if (v4)
    operator delete();
  v5 = *v2;
  if (*v2)
  {
    v1[16] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void sub_101742538(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void **v8;
  unint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)(a1 + 376) = 0x408F380000000000;
  *(_QWORD *)(a1 + 384) = 0x408F380000000000;
  *(_OWORD *)(a1 + 356) = *(_OWORD *)(a1 + 512);
  v2 = *(_OWORD *)(a1 + 468);
  v3 = *(_OWORD *)(a1 + 500);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a1 + 484);
  *(_OWORD *)(a1 + 344) = v3;
  v4 = *(_OWORD *)(a1 + 420);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a1 + 404);
  v5 = *(_OWORD *)(a1 + 436);
  v6 = *(_OWORD *)(a1 + 452);
  *(_OWORD *)(a1 + 264) = v4;
  *(_OWORD *)(a1 + 280) = v5;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
  *(_WORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 106) = 0;
  *(_OWORD *)(a1 + 296) = v6;
  *(_OWORD *)(a1 + 312) = v2;
  v7 = *(_OWORD *)(a1 + 388);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 372);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 232) = v7;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_DWORD *)(a1 + 152) = -1;
  v8 = *(void ***)(a1 + 560);
  v9 = *(_QWORD *)(a1 + 568) - (_QWORD)v8;
  *(_QWORD *)(a1 + 592) = 0;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v8);
      v8 = (void **)(*(_QWORD *)(a1 + 560) + 8);
      *(_QWORD *)(a1 + 560) = v8;
      v9 = *(_QWORD *)(a1 + 568) - (_QWORD)v8;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v10 = 51;
  }
  else
  {
    if (v9 >> 3 != 2)
      goto LABEL_8;
    v10 = 102;
  }
  *(_QWORD *)(a1 + 584) = v10;
LABEL_8:
  v11 = *(void ***)(a1 + 608);
  v12 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 640) = 0;
  v13 = v12 - (_QWORD)v11;
  if (v13 >= 0x11)
  {
    do
    {
      operator delete(*v11);
      v11 = (void **)(*(_QWORD *)(a1 + 608) + 8);
      *(_QWORD *)(a1 + 608) = v11;
      v13 = *(_QWORD *)(a1 + 616) - (_QWORD)v11;
    }
    while (v13 > 0x10);
  }
  if (v13 >> 3 == 1)
  {
    v14 = 51;
    goto LABEL_14;
  }
  if (v13 >> 3 == 2)
  {
    v14 = 102;
LABEL_14:
    *(_QWORD *)(a1 + 632) = v14;
  }
  *(_WORD *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 650) = 0;
  *(_QWORD *)(a1 + 652) = 0x500000000;
  *(_WORD *)(a1 + 660) = 0;
  *(_DWORD *)(a1 + 664) = 5;
  *(_BYTE *)(a1 + 668) = 1;
  *(_QWORD *)(a1 + 672) = 0x4122750000000000;
  *(_DWORD *)(a1 + 680) = 50;
  *(_QWORD *)(a1 + 688) = 0x409C200000000000;
  *(_DWORD *)(a1 + 696) = 60;
  *(_QWORD *)(a1 + 704) = 0x403E000000000000;
  *(_DWORD *)(a1 + 712) = 8;
}

BOOL sub_1017426EC(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  BOOL v7;
  double v8;
  BOOL v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v3 = a2[8];
  v4 = a2[32];
  v5 = fabs(v3);
  v6 = vabdd_f64(v3, v4);
  v7 = (*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v5 <= 2.22044605e-16;
  v8 = fabs(v4);
  v12 = !v7
     && (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
     && v8 > 2.22044605e-16
     && v6 <= 1.5
     && v8 > 2.22044605e-16;
  if (v12 && fabs(a2[33]) > 2.22044605e-16)
    return 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v13 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v14 = *((_QWORD *)a2 + 32);
    v15 = *((_QWORD *)a2 + 33);
    *(_DWORD *)buf = 134349313;
    v25 = v14;
    v26 = 2049;
    v27 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,no recent device pressure available,fTimeOfLastCMAltitudeData,%{public}.3lf,pressure,%{private}.3lf", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v17 = *((_QWORD *)a2 + 32);
    v18 = *((_QWORD *)a2 + 33);
    v20 = 134349313;
    v21 = v17;
    v22 = 2049;
    v23 = v18;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,no recent device pressure available,fTimeOfLastCMAltitudeData,%{public}.3lf,pressure,%{private}.3lf", &v20, 22);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::isDevicePressureValid(const CLBaroAltEstimatorInput &) const", "%s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
    return 0;
  }
  return result;
}

uint64_t sub_101742930(_BYTE *a1, uint64_t a2, uint64_t a3, _QWORD *a4, double *a5, int a6, uint64_t a7)
{
  double *v13;
  double v14;
  double v15;
  double v17;
  double v18;
  double v19;
  double v20;
  BOOL v21;
  double v22;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  double v34;
  long double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  NSObject *v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  NSObject *v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char *v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  _BYTE v82[18];
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  uint8_t buf[4];
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  _BYTE v98[18];
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;

  v13 = (double *)(a2 + 64);
  v14 = *(double *)(a2 + 64);
  v15 = fabs(v14);
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v15 <= 2.22044605e-16)
  {
    v17 = 315360000.0;
    v18 = 315360000.0;
  }
  else
  {
    v19 = *(double *)(a2 + 80);
    v20 = vabdd_f64(v14, v19);
    v21 = fabs(v19) > 2.22044605e-16 && (*(_QWORD *)(a2 + 80) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    v18 = 315360000.0;
    if (v21)
      v17 = v20;
    else
      v17 = 315360000.0;
    v22 = fabs(*a5);
    if ((*(_QWORD *)a5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v22 > 2.22044605e-16)
      v18 = vabdd_f64(v14, *a5);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v24 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v25 = *(_QWORD *)(a2 + 264);
    v26 = *(_QWORD *)(a2 + 120);
    v27 = *(_QWORD *)(a2 + 128);
    v28 = *(double *)(a2 + 64);
    v29 = *(_QWORD *)(a2 + 72);
    v30 = *(_QWORD *)(a2 + 96);
    v31 = *(_QWORD *)(a7 + 4);
    v32 = *(_QWORD *)(a7 + 12);
    *(_DWORD *)buf = 134351105;
    v90 = v28;
    v91 = 2049;
    v92 = v17;
    v93 = 2050;
    v94 = v25;
    v95 = 2050;
    v96 = v26;
    v97 = 2050;
    *(_QWORD *)v98 = v27;
    *(_WORD *)&v98[8] = 2050;
    *(_QWORD *)&v98[10] = v29;
    v99 = 2050;
    v100 = v30;
    v101 = 2049;
    v102 = v31;
    v103 = 2049;
    v104 = v32;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "BaroAlt,check to compute bias using reference pressure,time,%{public}lf,timeSinceLastReferencePressureQuery,%{private}lf,measuredPressure,%{public}lf,calibrationSourceAlt,%{public}lf,calibrationSourceAltUnc,%{public}lf,cfAbsTime,%{public}lf,referencePressure,%{public}lf,lat,%{private}.8lf,lon,%{private}.8lf,", buf, 0x5Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v53 = *(_QWORD *)(a2 + 264);
    v54 = *(_QWORD *)(a2 + 120);
    v55 = *(_QWORD *)(a2 + 128);
    v56 = *(double *)(a2 + 64);
    v57 = *(_QWORD *)(a2 + 72);
    v58 = *(_QWORD *)(a2 + 96);
    v59 = *(_QWORD *)(a7 + 4);
    v60 = *(_QWORD *)(a7 + 12);
    v73 = 134351105;
    v74 = v56;
    v75 = 2049;
    v76 = v17;
    v77 = 2050;
    v78 = v53;
    v79 = 2050;
    v80 = v54;
    v81 = 2050;
    *(_QWORD *)v82 = v55;
    *(_WORD *)&v82[8] = 2050;
    *(_QWORD *)&v82[10] = v57;
    v83 = 2050;
    v84 = v58;
    v85 = 2049;
    v86 = v59;
    v87 = 2049;
    v88 = v60;
    v61 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,check to compute bias using reference pressure,time,%{public}lf,timeSinceLastReferencePressureQuery,%{private}lf,measuredPressure,%{public}lf,calibrationSourceAlt,%{public}lf,calibrationSourceAltUnc,%{public}lf,cfAbsTime,%{public}lf,referencePressure,%{public}lf,lat,%{private}.8lf,lon,%{private}.8lf,", &v73, 92);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressure(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, CFTimeInterval &, const int, const CLDaemonLocation &)", "%s\n", v61);
    if (v61 != (char *)buf)
      free(v61);
  }
  result = 0;
  if (v17 > 0.0 && v17 < 900.0)
  {
    result = 0;
    v34 = *(double *)(a2 + 128);
    if (v34 > 0.0 && v18 < 10.0)
    {
      v35 = exp(*(double *)(a2 + 120) / -8442.795);
      v36 = *(double *)(a2 + 264) - *(double *)(a2 + 96) * v35;
      *(double *)(a3 + 8) = v36;
      v37 = v35 * *(double *)(a2 + 104) * 0.083324376;
      v38 = *(double *)(a2 + 72);
      if ((*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v38) > 2.22044605e-16)
      {
        v39 = *(double *)(a2 + 88);
        if ((*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v39) > 2.22044605e-16)
        {
          v40 = vabdd_f64(v38, v39);
          if (v40 > 300.0)
          {
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
            v41 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
            {
              v42 = *(double *)(a2 + 64);
              v43 = *(_QWORD *)(a2 + 72);
              v44 = *(_QWORD *)(a2 + 88);
              *(_DWORD *)buf = 134350081;
              v90 = v42;
              v91 = 2049;
              v92 = v37;
              v93 = 2049;
              v94 = v43;
              v95 = 2049;
              v96 = v44;
              v97 = 2049;
              *(double *)v98 = v40;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "BaroAlt,uncertainty increase from creation time of reference pressure tile,time,%{public}.3lf,pressureUncAtCurrAlt_m,%{private}.3lf,cfAbsTime_s,%{private}.3lf,refPressureCreation_time_s,%{private}.3lf,timeChangeAfterTileCreated_s,%{private}.3lf", buf, 0x34u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
              v68 = *(double *)(a2 + 64);
              v69 = *(_QWORD *)(a2 + 72);
              v70 = *(_QWORD *)(a2 + 88);
              v73 = 134350081;
              v74 = v68;
              v75 = 2049;
              v76 = v37;
              v77 = 2049;
              v78 = v69;
              v79 = 2049;
              v80 = v70;
              v81 = 2049;
              *(double *)v82 = v40;
              LODWORD(v72) = 52;
              v71 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,uncertainty increase from creation time of reference pressure tile,time,%{public}.3lf,pressureUncAtCurrAlt_m,%{private}.3lf,cfAbsTime_s,%{private}.3lf,refPressureCreation_time_s,%{private}.3lf,timeChangeAfterTileCreated_s,%{private}.3lf", &v73, v72);
              sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressure(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, CFTimeInterval &, const int, const CLDaemonLocation &)", "%s\n", v71);
              if (v71 != (char *)buf)
                free(v71);
            }
            v37 = v37 + v40 * 0.000833333333;
            v34 = *(double *)(a2 + 128);
          }
        }
      }
      v45 = sqrt(v37 * v37 + v34 * v34);
      *(double *)(a3 + 16) = v45;
      if (a1[668])
      {
        v46 = sub_1000B6F08((uint64_t)a1, v13);
        sub_101744944((uint64_t)a1, v36, v45, v46);
      }
      sub_101745ECC((uint64_t)a1, a2, a3, a4, a6, a7);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v47 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v48 = *v13;
        v49 = *(double *)a3;
        v50 = *(_QWORD *)(a3 + 8);
        v51 = *(_QWORD *)(a3 + 16);
        v52 = a1[97];
        *(_DWORD *)buf = 134350337;
        v90 = v48;
        v91 = 2050;
        v92 = v49;
        v93 = 2050;
        v94 = v50;
        v95 = 2050;
        v96 = v51;
        v97 = 1025;
        *(_DWORD *)v98 = v52;
        *(_WORD *)&v98[4] = 2050;
        *(double *)&v98[6] = v36;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "BaroAlt,compute bias using ReferencePressure,time,%{public}lf,fTimeOfLastBaroBiasUsingReferencePressure,%{public}lf,fBaroBiasUsingReferencePressure,%{public}.3lf,fReferencePressureCompensatedCalibrationUnc,%{public}lf,filteredBaroBias,%{private}d,singleEpochBiasUsingRefPressure,%{public}.3lf", buf, 0x3Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v62 = *v13;
        v63 = *(double *)a3;
        v64 = *(_QWORD *)(a3 + 8);
        v65 = *(_QWORD *)(a3 + 16);
        v66 = a1[97];
        v73 = 134350337;
        v74 = v62;
        v75 = 2050;
        v76 = v63;
        v77 = 2050;
        v78 = v64;
        v79 = 2050;
        v80 = v65;
        v81 = 1025;
        *(_DWORD *)v82 = v66;
        *(_WORD *)&v82[4] = 2050;
        *(double *)&v82[6] = v36;
        LODWORD(v72) = 58;
        v67 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,compute bias using ReferencePressure,time,%{public}lf,fTimeOfLastBaroBiasUsingReferencePressure,%{public}lf,fBaroBiasUsingReferencePressure,%{public}.3lf,fReferencePressureCompensatedCalibrationUnc,%{public}lf,filteredBaroBias,%{private}d,singleEpochBiasUsingRefPressure,%{public}.3lf", &v73, v72);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressure(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, CFTimeInterval &, const int, const CLDaemonLocation &)", "%s\n", v67);
        if (v67 != (char *)buf)
          free(v67);
      }
      result = 1;
      a1[96] = 1;
      *(_QWORD *)a3 = *(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t sub_101743120(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, double a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v12;
  double v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  char *v39;
  double v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  void **v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v88;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  double v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  double v109;
  __int16 v110;
  double v111;
  uint8_t buf[4];
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  double v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  double v127;
  __int16 v128;
  double v129;

  v92 = 0u;
  v93 = 0u;
  v91 = 0u;
  *(_BYTE *)(a1 + 112) = 0;
  v6 = a4[1];
  if (a4[2] != v6)
  {
    v7 = a4[4];
    v8 = *(_QWORD *)(v6 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
    v9 = *(_QWORD *)(v6 + 8 * ((a4[5] + v7) / 0x66)) + 40 * ((a4[5] + v7) % 0x66);
    if (v8 != v9)
    {
      v12 = (_QWORD *)(v6 + 8 * (v7 / 0x66));
      v13 = a5 * 0.0202;
      do
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v14 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v15 = *(_QWORD *)(a2 + 64);
          v16 = a4[5];
          v17 = *(_QWORD *)(v8 + 8);
          v18 = *(_QWORD *)(v8 + 16);
          v19 = *(_QWORD *)(v8 + 24);
          v20 = *(double *)(v8 + 32);
          v21 = *(_QWORD *)(a3 + 8);
          *(_DWORD *)buf = 134350593;
          v113 = v15;
          v114 = 2049;
          v115 = v16;
          v116 = 2049;
          v117 = v17;
          v118 = 2049;
          v119 = v18;
          v120 = 2049;
          v121 = v19;
          v122 = 2049;
          v123 = v20;
          v124 = 2049;
          v125 = v21;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,checkBBH,frombaroBiasHistory,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf,rawX,%{private}.4lf", buf, 0x48u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v60 = *(_QWORD *)(a2 + 64);
          v61 = a4[5];
          v62 = *(_QWORD *)(v8 + 8);
          v63 = *(_QWORD *)(v8 + 16);
          v64 = *(_QWORD *)(v8 + 24);
          v65 = *(double *)(v8 + 32);
          v66 = *(_QWORD *)(a3 + 8);
          v94 = 134350593;
          v95 = v60;
          v96 = 2049;
          v97 = v61;
          v98 = 2049;
          v99 = v62;
          v100 = 2049;
          v101 = v63;
          v102 = 2049;
          v103 = v64;
          v104 = 2049;
          v105 = v65;
          v106 = 2049;
          v107 = v66;
          LODWORD(v88) = 72;
          v67 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,checkBBH,frombaroBiasHistory,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf,rawX,%{private}.4lf", &v94, v88);
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::propagateBaroBiasProbAndUncToCurrent(const CLBaroAltEstimatorInput &, const CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const double)", "%s\n", v67);
          if (v67 != (char *)buf)
            free(v67);
        }
        v22 = *(double *)(v8 + 8);
        if (fabs(v22) > 1000.0)
          goto LABEL_52;
        v23 = *(double *)(a2 + 72);
        v24 = 0.0;
        if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v23) > 2.22044605e-16)
        {
          v25 = *(double *)v8;
          if ((*(_QWORD *)v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v25) > 2.22044605e-16)
          {
            v24 = vabdd_f64(v23, v25);
            if (v24 > 3628800.0)
              *(long double *)(v8 + 16) = hypot(*(long double *)(v8 + 16), (v24 + -3628800.0) * 0.000000826719577);
          }
        }
        if (vabdd_f64(v22, *(double *)(a3 + 8)) >= 27.963 || *(double *)(v8 + 24) <= 0.5)
        {
          if (v13 > 1.0)
          {
            v40 = *(double *)(v8 + 24) / v13;
            if (v40 > 1.0)
              v40 = 1.0;
            *(double *)(v8 + 24) = v40;
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
            v41 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
            {
              v42 = *(_QWORD *)(a2 + 64);
              v43 = *(_QWORD *)(v8 + 8);
              v44 = *(_QWORD *)(v8 + 16);
              v45 = *(_QWORD *)(v8 + 24);
              *(_DWORD *)buf = 134350337;
              v113 = v42;
              v114 = 2049;
              v115 = *((_QWORD *)&v93 + 1);
              v116 = 2049;
              v117 = v43;
              v118 = 2049;
              v119 = v44;
              v120 = 2049;
              v121 = v45;
              v122 = 2049;
              v123 = a5;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,failBBH,modeProbChangeByDistance,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,distToLastBiasComputationLocation_m,%{private}.3lf", buf, 0x3Eu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
              v74 = *(_QWORD *)(a2 + 64);
              v75 = *(_QWORD *)(v8 + 8);
              v76 = *(_QWORD *)(v8 + 16);
              v77 = *(_QWORD *)(v8 + 24);
              v94 = 134350337;
              v95 = v74;
              v96 = 2049;
              v97 = *((_QWORD *)&v93 + 1);
              v98 = 2049;
              v99 = v75;
              v100 = 2049;
              v101 = v76;
              v102 = 2049;
              v103 = v77;
              v104 = 2049;
              v105 = a5;
              LODWORD(v88) = 62;
              v78 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,failBBH,modeProbChangeByDistance,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,distToLastBiasComputationLocation_m,%{private}.3lf", &v94, v88);
              sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::propagateBaroBiasProbAndUncToCurrent(const CLBaroAltEstimatorInput &, const CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const double)", "%s\n", v78);
              if (v78 != (char *)buf)
                free(v78);
            }
          }
          if (a5 >= 0.0 || v24 <= 600.0)
          {
            if (v24 * 0.0000115740741 > 1.0)
            {
              v46 = *(double *)(v8 + 24) / (v24 * 0.0000115740741);
              if (v46 > 1.0)
                v46 = 1.0;
              *(double *)(v8 + 24) = v46;
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
              v47 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
              {
                v48 = *(_QWORD *)(a2 + 64);
                v49 = *(_QWORD *)(v8 + 8);
                v50 = *(_QWORD *)(v8 + 16);
                v51 = *(_QWORD *)(v8 + 24);
                *(_DWORD *)buf = 134350337;
                v113 = v48;
                v114 = 2049;
                v115 = *((_QWORD *)&v93 + 1);
                v116 = 2049;
                v117 = v49;
                v118 = 2049;
                v119 = v50;
                v120 = 2049;
                v121 = v51;
                v122 = 2049;
                v123 = v24;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,failBBH,modeProbChangeByTime,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,timeToLastBiasComputation_s,%{private}.3lf", buf, 0x3Eu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
                v79 = *(_QWORD *)(a2 + 64);
                v80 = *(_QWORD *)(v8 + 8);
                v81 = *(_QWORD *)(v8 + 16);
                v82 = *(_QWORD *)(v8 + 24);
                v94 = 134350337;
                v95 = v79;
                v96 = 2049;
                v97 = *((_QWORD *)&v93 + 1);
                v98 = 2049;
                v99 = v80;
                v100 = 2049;
                v101 = v81;
                v102 = 2049;
                v103 = v82;
                v104 = 2049;
                v105 = v24;
                LODWORD(v88) = 62;
                v83 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,failBBH,modeProbChangeByTime,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,timeToLastBiasComputation_s,%{private}.3lf", &v94, v88);
                sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::propagateBaroBiasProbAndUncToCurrent(const CLBaroAltEstimatorInput &, const CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const double)", "%s\n", v83);
                if (v83 != (char *)buf)
                  free(v83);
              }
            }
          }
          else
          {
            *(double *)(v8 + 24) = *(double *)(v8 + 24) / (v24 / 600.0);
          }
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v52 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v53 = *(_QWORD *)(a2 + 64);
            v54 = *(_QWORD *)(v8 + 8);
            v55 = *(_QWORD *)(v8 + 16);
            v56 = *(_QWORD *)(v8 + 24);
            v57 = *(double *)(v8 + 32);
            v58 = *(_QWORD *)(a3 + 8);
            *(_DWORD *)buf = 134351105;
            v113 = v53;
            v114 = 2049;
            v115 = *((_QWORD *)&v93 + 1);
            v116 = 2049;
            v117 = v54;
            v118 = 2049;
            v119 = v55;
            v120 = 2049;
            v121 = v56;
            v122 = 2049;
            v123 = v57;
            v124 = 2049;
            v125 = v58;
            v126 = 2049;
            v127 = a5;
            v128 = 2049;
            v129 = v24;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,failBBH,frombaroBiasHistory,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf,rawX,%{private}.4lf,distToLastBiasComputationLocation_m,%{private}.3lf,timeToLastBiasComputation_s,%{private}.3lf", buf, 0x5Cu);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_50;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v68 = *(_QWORD *)(a2 + 64);
          v69 = *(_QWORD *)(v8 + 8);
          v70 = *(_QWORD *)(v8 + 16);
          v71 = *(_QWORD *)(v8 + 24);
          v72 = *(double *)(v8 + 32);
          v73 = *(_QWORD *)(a3 + 8);
          v94 = 134351105;
          v95 = v68;
          v96 = 2049;
          v97 = *((_QWORD *)&v93 + 1);
          v98 = 2049;
          v99 = v69;
          v100 = 2049;
          v101 = v70;
          v102 = 2049;
          v103 = v71;
          v104 = 2049;
          v105 = v72;
          v106 = 2049;
          v107 = v73;
          v108 = 2049;
          v109 = a5;
          v110 = 2049;
          v111 = v24;
          LODWORD(v88) = 92;
          v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,failBBH,frombaroBiasHistory,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf,rawX,%{private}.4lf,distToLastBiasComputationLocation_m,%{private}.3lf,timeToLastBiasComputation_s,%{private}.3lf", &v94, v88);
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::propagateBaroBiasProbAndUncToCurrent(const CLBaroAltEstimatorInput &, const CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const double)", "%s\n", v39);
        }
        else
        {
          *(_BYTE *)(a1 + 112) = 1;
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v26 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v27 = *(_QWORD *)(a2 + 64);
            v28 = *(_QWORD *)(v8 + 8);
            v29 = *(_QWORD *)(v8 + 16);
            v30 = *(_QWORD *)(v8 + 24);
            v31 = *(double *)(v8 + 32);
            v32 = *(_QWORD *)(a3 + 8);
            *(_DWORD *)buf = 134351105;
            v113 = v27;
            v114 = 2049;
            v115 = *((_QWORD *)&v93 + 1);
            v116 = 2049;
            v117 = v28;
            v118 = 2049;
            v119 = v29;
            v120 = 2049;
            v121 = v30;
            v122 = 2049;
            v123 = v31;
            v124 = 2049;
            v125 = v32;
            v126 = 2049;
            v127 = a5;
            v128 = 2049;
            v129 = v24;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,passBBH,frombaroBiasHistory,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf,rawX,%{private}.4lf,distToLastBiasComputationLocation_m,%{private}.3lf,timeToLastBiasComputation_s,%{private}.3lf", buf, 0x5Cu);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_50;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v33 = *(_QWORD *)(a2 + 64);
          v34 = *(_QWORD *)(v8 + 8);
          v35 = *(_QWORD *)(v8 + 16);
          v36 = *(_QWORD *)(v8 + 24);
          v37 = *(double *)(v8 + 32);
          v38 = *(_QWORD *)(a3 + 8);
          v94 = 134351105;
          v95 = v33;
          v96 = 2049;
          v97 = *((_QWORD *)&v93 + 1);
          v98 = 2049;
          v99 = v34;
          v100 = 2049;
          v101 = v35;
          v102 = 2049;
          v103 = v36;
          v104 = 2049;
          v105 = v37;
          v106 = 2049;
          v107 = v38;
          v108 = 2049;
          v109 = a5;
          v110 = 2049;
          v111 = v24;
          LODWORD(v88) = 92;
          v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,passBBH,frombaroBiasHistory,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf,rawX,%{private}.4lf,distToLastBiasComputationLocation_m,%{private}.3lf,timeToLastBiasComputation_s,%{private}.3lf", &v94, v88);
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::propagateBaroBiasProbAndUncToCurrent(const CLBaroAltEstimatorInput &, const CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const double)", "%s\n", v39);
        }
        if (v39 != (char *)buf)
          free(v39);
LABEL_50:
        if (*(double *)(v8 + 24) > 0.01)
          sub_101743DA8(&v91, v8);
LABEL_52:
        v8 += 40;
        if (v8 - *v12 == 4080)
        {
          v59 = v12[1];
          ++v12;
          v8 = v59;
        }
      }
      while (v8 != v9);
    }
  }
  sub_10174B63C(a4, (uint64_t)&v91);
  v84 = (void **)*((_QWORD *)&v91 + 1);
  *((_QWORD *)&v93 + 1) = 0;
  v85 = v92 - *((_QWORD *)&v91 + 1);
  if ((_QWORD)v92 - *((_QWORD *)&v91 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v84);
      v84 = (void **)(*((_QWORD *)&v91 + 1) + 8);
      *((_QWORD *)&v91 + 1) = v84;
      v85 = v92 - (_QWORD)v84;
    }
    while ((_QWORD)v92 - (_QWORD)v84 > 0x10uLL);
  }
  if (v85 >> 3 == 1)
  {
    v86 = 51;
    goto LABEL_79;
  }
  if (v85 >> 3 == 2)
  {
    v86 = 102;
LABEL_79:
    *(_QWORD *)&v93 = v86;
  }
  *(_BYTE *)(a1 + 113) = 1;
  return sub_100427A00(&v91);
}

void sub_101743D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_100427A00(&a27);
  _Unwind_Resume(a1);
}

__n128 sub_101743DA8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10174B328(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

uint64_t sub_101743E5C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  NSObject *v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  NSObject *v38;
  double *v40;
  double *v41;
  unint64_t v42;
  double v43;
  double v44;
  double *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t (**v49)();
  int v50;
  _OWORD v51[3];
  _QWORD **v52;
  _QWORD *v53[3];
  int v54;
  uint64_t v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  uint8_t buf[4];
  uint64_t v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;

  v3 = a2[5];
  if (v3)
  {
    v49 = off_10213D2B0;
    v50 = v3;
    memset(v51, 0, sizeof(v51));
    v53[0] = 0;
    v53[1] = 0;
    v52 = v53;
    sub_10047F1D4(&v49);
    v6 = a2[1];
    if (a2[2] != v6)
    {
      v7 = a2[4];
      v8 = (_QWORD *)(v6 + 8 * (v7 / 0x66));
      v9 = *v8 + 40 * (v7 % 0x66);
      v10 = *(_QWORD *)(v6 + 8 * ((a2[5] + v7) / 0x66)) + 40 * ((a2[5] + v7) % 0x66);
      while (v9 != v10)
      {
        sub_10009E858((uint64_t)&v49, (double *)(v9 + 8));
        v9 += 40;
        if (v9 - *v8 == 4080)
        {
          v11 = v8[1];
          ++v8;
          v9 = v11;
        }
      }
    }
    v48 = 0x7FEFFFFFFFFFFFFFLL;
    if (sub_10009E784(&v49, 2, &v48) && (v12 = a2[5]) != 0)
    {
      v13 = a2[1];
      if (a2[2] == v13)
      {
        v26 = (double)v12;
        v29 = 0.0;
        v30 = 0.0 / (double)v12;
      }
      else
      {
        v14 = a2[4];
        v15 = (unint64_t *)(v13 + 8 * (v14 / 0x66));
        v16 = *v15;
        v17 = v14 % 0x66;
        v18 = *v15 + 40 * (v14 % 0x66);
        v19 = v14 + v12;
        v20 = (v14 + v12) / 0x66;
        v21 = *(_QWORD *)(v13 + 8 * (v19 / 0x66)) + 40 * (v19 % 0x66);
        if (v18 == v21)
        {
          v26 = (double)v12;
          v22 = 0.0;
        }
        else
        {
          v22 = 0.0;
          v23 = v15;
          do
          {
            v24 = v18 + 40;
            if (v18 + 40 - v16 == 4080)
            {
              v25 = v23[1];
              ++v23;
              v16 = v25;
              v24 = v25;
            }
            v22 = v22 + *(double *)(v18 + 16);
            v18 = v24;
          }
          while (v24 != v21);
          v26 = (double)v12;
        }
        v30 = v22 / v26;
        v40 = (double *)*v15;
        v41 = (double *)(*v15 + 40 * v17);
        v42 = *(_QWORD *)(v13 + 8 * v20) + 40 * (v19 % 0x66);
        v29 = 0.0;
        while (v41 != (double *)v42)
        {
          v43 = *v41;
          v41 += 5;
          v44 = v43;
          if ((char *)v41 - (char *)v40 == 4080)
          {
            v45 = (double *)v15[1];
            ++v15;
            v40 = v45;
            v41 = v45;
          }
          v29 = v29 + v44;
        }
      }
      v31 = v29 / v26;
      v32 = v48;
      *(double *)a3 = v31;
      *(_QWORD *)(a3 + 8) = v32;
      *(double *)(a3 + 16) = v30;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a3 + 24) = _Q0;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v38 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349568;
        v61 = v48;
        v62 = 2050;
        v63 = v30;
        v64 = 2050;
        v65 = v31;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,median found,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v54 = 134349568;
        v55 = v48;
        v56 = 2050;
        v57 = v30;
        v58 = 2050;
        v59 = v31;
        v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,LongShortMemoryBias,median found,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", &v54, 32);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::getMedianBiasFromQueue(const std::deque<BaroBiasEstimate> &, BaroBiasEstimate &)", "%s\n", v47);
        if (v47 != (char *)buf)
          free(v47);
      }
      v27 = 1;
    }
    else
    {
      v27 = 0;
    }
    v49 = off_10213D2B0;
    sub_100008848((uint64_t)&v52, v53[0]);
    sub_10047F25C(v51);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v28 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,bias history empty, median unavailable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      LOWORD(v49) = 0;
      v46 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,LongShortMemoryBias,bias history empty, median unavailable", &v49, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::getMedianBiasFromQueue(const std::deque<BaroBiasEstimate> &, BaroBiasEstimate &)", "%s\n", v46);
      if (v46 != (char *)buf)
        free(v46);
    }
    return 0;
  }
  return v27;
}

void sub_1017443AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100479F9C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017443D4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  double *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  double *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  _QWORD v49[10];
  char v50;
  uint64_t v51;

  sub_1004E5E40((uint64_t)&v48);
  *(_DWORD *)((char *)v49 + *(_QWORD *)(v48 - 24)) = *(_DWORD *)((_BYTE *)v49 + *(_QWORD *)(v48 - 24)) & 0xFFFFFEFB | 4;
  v4 = a1[5];
  if (v4 > 5)
  {
    v21 = sub_100263F7C(&v48, (uint64_t)"cft,", 4);
    v22 = (_QWORD *)std::ostream::operator<<(v21, *(double *)(*(_QWORD *)(a1[1] + 8 * (a1[4] / 0x66uLL)) + 40 * (a1[4] % 0x66uLL)));
    v23 = sub_100263F7C(v22, (uint64_t)",bias,", 6);
    v24 = (_QWORD *)std::ostream::operator<<(v23, *(double *)(*(_QWORD *)(a1[1] + 8 * (a1[4] / 0x66uLL)) + 40 * (a1[4] % 0x66uLL) + 8));
    v25 = sub_100263F7C(v24, (uint64_t)",biasUnc,", 9);
    v26 = (_QWORD *)std::ostream::operator<<(v25, *(double *)(*(_QWORD *)(a1[1] + 8 * (a1[4] / 0x66uLL)) + 40 * (a1[4] % 0x66uLL) + 16));
    v27 = sub_100263F7C(v26, (uint64_t)",modeProb,", 10);
    v28 = (_QWORD *)std::ostream::operator<<(v27, *(double *)(*(_QWORD *)(a1[1] + 8 * (a1[4] / 0x66uLL)) + 40 * (a1[4] % 0x66uLL) + 24));
    v29 = sub_100263F7C(v28, (uint64_t)",devPresTempAtCalib_C,", 22);
    v30 = (_QWORD *)std::ostream::operator<<(v29, *(double *)(*(_QWORD *)(a1[1] + 8 * (a1[4] / 0x66uLL)) + 40 * (a1[4] % 0x66uLL) + 32));
    v31 = sub_100263F7C(v30, (uint64_t)",", 1);
    v32 = sub_100263F7C(v31, (uint64_t)"cft,", 4);
    v33 = a1[5] + a1[4] - 1;
    v34 = (_QWORD *)std::ostream::operator<<(v32, *(double *)(*(_QWORD *)(a1[1] + 8 * (v33 / 0x66)) + 40 * (v33 % 0x66)));
    v35 = sub_100263F7C(v34, (uint64_t)",bias,", 6);
    v36 = a1[5] + a1[4] - 1;
    v37 = (_QWORD *)std::ostream::operator<<(v35, *(double *)(*(_QWORD *)(a1[1] + 8 * (v36 / 0x66)) + 40 * (v36 % 0x66) + 8));
    v38 = sub_100263F7C(v37, (uint64_t)",biasUnc,", 9);
    v39 = a1[5] + a1[4] - 1;
    v40 = (_QWORD *)std::ostream::operator<<(v38, *(double *)(*(_QWORD *)(a1[1] + 8 * (v39 / 0x66)) + 40 * (v39 % 0x66) + 16));
    v41 = sub_100263F7C(v40, (uint64_t)",modeProb,", 10);
    v42 = a1[5] + a1[4] - 1;
    v43 = (_QWORD *)std::ostream::operator<<(v41, *(double *)(*(_QWORD *)(a1[1] + 8 * (v42 / 0x66)) + 40 * (v42 % 0x66) + 24));
    v44 = sub_100263F7C(v43, (uint64_t)",devPresTempAtCalib_C,", 22);
    v45 = a1[5] + a1[4] - 1;
    v46 = (_QWORD *)std::ostream::operator<<(v44, *(double *)(*(_QWORD *)(a1[1] + 8 * (v45 / 0x66)) + 40 * (v45 % 0x66) + 32));
    sub_100263F7C(v46, (uint64_t)",", 1);
  }
  else
  {
    v5 = a1[1];
    if (a1[2] != v5)
    {
      v6 = a1[4];
      v7 = (_QWORD *)(v5 + 8 * (v6 / 0x66));
      v8 = (double *)(*v7 + 40 * (v6 % 0x66));
      v9 = *(_QWORD *)(v5 + 8 * ((v6 + v4) / 0x66)) + 40 * ((v6 + v4) % 0x66);
      while (v8 != (double *)v9)
      {
        v10 = sub_100263F7C(&v48, (uint64_t)"cft,", 4);
        v11 = (_QWORD *)std::ostream::operator<<(v10, *v8);
        v12 = sub_100263F7C(v11, (uint64_t)",bias,", 6);
        v13 = (_QWORD *)std::ostream::operator<<(v12, v8[1]);
        v14 = sub_100263F7C(v13, (uint64_t)",biasUnc,", 9);
        v15 = (_QWORD *)std::ostream::operator<<(v14, v8[2]);
        v16 = sub_100263F7C(v15, (uint64_t)",modeProb,", 10);
        v17 = (_QWORD *)std::ostream::operator<<(v16, v8[3]);
        v18 = sub_100263F7C(v17, (uint64_t)",devPresTempAtCalib_C,", 22);
        v19 = (_QWORD *)std::ostream::operator<<(v18, v8[4]);
        sub_100263F7C(v19, (uint64_t)",", 1);
        v8 += 5;
        if ((double *)((char *)v8 - *v7) == (double *)4080)
        {
          v20 = (double *)v7[1];
          ++v7;
          v8 = v20;
        }
      }
    }
  }
  std::stringbuf::str(a2, v49);
  if (v50 < 0)
    operator delete((void *)v49[8]);
  std::streambuf::~streambuf(v49);
  return std::ios::~ios(&v51);
}

void sub_10174492C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1004E5F2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_101744944(uint64_t a1, double a2, double a3, double a4)
{
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  double v17;
  char *v18;
  NSObject *v24;
  NSObject *v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  NSObject *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  NSObject *v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  NSObject *v49;
  void **v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  NSObject *v54;
  int v55;
  _BYTE *v56;
  NSObject *v57;
  int v58;
  _BYTE *v59;
  char *v60;
  uint64_t v61;
  int v62;
  uint8_t *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  uint8_t *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  _BYTE v74[18];
  __int16 v75;
  uint64_t v76;
  uint8_t v77[32];
  uint64_t v78;
  _BYTE buf[24];
  double v80[201];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349568;
    *(double *)&buf[4] = a2;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = a3;
    *(_WORD *)&buf[22] = 2050;
    v80[0] = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,new single epoch bias,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    *(_DWORD *)v77 = 134349568;
    *(double *)&v77[4] = a2;
    *(_WORD *)&v77[12] = 2050;
    *(double *)&v77[14] = a3;
    *(_WORD *)&v77[22] = 2050;
    *(double *)&v77[24] = a4;
    v60 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,LongShortMemoryBias,new single epoch bias,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", v77, 32);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v60);
    if (v60 != buf)
      free(v60);
  }
  v9 = *(_QWORD *)(a1 + 640);
  if (!v9)
    goto LABEL_18;
  v10 = *(_QWORD *)(a1 + 632);
  v11 = v9 + v10 - 1;
  v12 = *(_QWORD *)(a1 + 608);
  if (vabdd_f64(a4, *(double *)(*(_QWORD *)(v12 + 8 * (v11 / 0x66)) + 40 * (v11 % 0x66))) < *(double *)(a1 + 704))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v13 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)(a1 + 640) + *(_QWORD *)(a1 + 632) - 1;
      v15 = a4 - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * (v14 / 0x66)) + 40 * (v14 % 0x66));
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = a4;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,reject bias update as too recent, timeNow,%{public}lf,time since last entry,%{public}lf", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v16 = *(_QWORD *)(a1 + 640) + *(_QWORD *)(a1 + 632) - 1;
    v17 = a4 - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * (v16 / 0x66)) + 40 * (v16 % 0x66));
    *(_DWORD *)v77 = 134349312;
    *(double *)&v77[4] = a4;
    *(_WORD *)&v77[12] = 2050;
    *(double *)&v77[14] = v17;
    LODWORD(v72) = 22;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,LongShortMemoryBias,reject bias update as too recent, timeNow,%{public}lf,time since last entry,%{public}lf", v77, v72);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v18);
    if (v18 == buf)
      return;
LABEL_106:
    free(v18);
    return;
  }
  if (vabdd_f64(a4, *(double *)(*(_QWORD *)(v12 + 8 * (v10 / 0x66)) + 40 * (v10 % 0x66))) >= *(double *)(a1 + 688))
  {
    v78 = 0;
    memset(v77, 0, sizeof(v77));
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v35 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,short memory query", buf, 2u);
    }
    v36 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v36)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      LOWORD(v73) = 0;
      LODWORD(v72) = 2;
      v70 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,LongShortMemoryBias,short memory query", &v73, v72);
      v36 = sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v70);
      if (v70 != buf)
        free(v70);
    }
    if (sub_101743E5C(v36, (_QWORD *)(a1 + 600), (uint64_t)v77))
    {
      while (1)
      {
        v37 = *(_QWORD *)(a1 + 592);
        if (!v37
          || (v38 = *(_QWORD *)(a1 + 584),
              vabdd_f64(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * ((v37 + v38 - 1) / 0x66))+ 40 * ((v37 + v38 - 1) % 0x66)), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * (v38 / 0x66)) + 40 * (v38 % 0x66))) <= *(double *)(a1 + 672)))
        {
          if (v37 <= *(unsigned int *)(a1 + 680))
            break;
        }
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v39 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v40 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * (*(_QWORD *)(a1 + 584) / 0x66uLL))
                         + 40 * (*(_QWORD *)(a1 + 584) % 0x66uLL));
          v42 = *((_QWORD *)v40 + 1);
          v41 = *((_QWORD *)v40 + 2);
          v43 = *v40;
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)&buf[4] = v42;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v41;
          *(_WORD *)&buf[22] = 2050;
          v80[0] = v43;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,long memory update,remove,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v44 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * (*(_QWORD *)(a1 + 584) / 0x66uLL))
                          + 40 * (*(_QWORD *)(a1 + 584) % 0x66uLL));
          v46 = v44[1];
          v45 = v44[2];
          v47 = *v44;
          v73 = 134349568;
          *(_QWORD *)v74 = v46;
          *(_WORD *)&v74[8] = 2050;
          *(_QWORD *)&v74[10] = v45;
          v75 = 2050;
          v76 = v47;
          LODWORD(v72) = 32;
          v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,LongShortMemoryBias,long memory update,remove,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", &v73, v72);
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v48);
          if (v48 != buf)
            free(v48);
        }
        *(int64x2_t *)(a1 + 584) = vaddq_s64(*(int64x2_t *)(a1 + 584), (int64x2_t)xmmword_101B9DFC0);
        sub_1004CE138(a1 + 552, 1);
      }
      sub_101743DA8((_QWORD *)(a1 + 552), (uint64_t)v77);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v49 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)&buf[4] = *(_QWORD *)&v77[8];
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = *(_QWORD *)&v77[16];
        *(_WORD *)&buf[22] = 2050;
        v80[0] = *(double *)v77;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "BaroAlt,LongShortMemoryBias,long memory update,add,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v73 = 134349568;
        *(_QWORD *)v74 = *(_QWORD *)&v77[8];
        *(_WORD *)&v74[8] = 2050;
        *(_QWORD *)&v74[10] = *(_QWORD *)&v77[16];
        v75 = 2050;
        v76 = *(_QWORD *)v77;
        LODWORD(v72) = 32;
        v71 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "BaroAlt,LongShortMemoryBias,long memory update,add,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", &v73, v72);
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v71);
        if (v71 != buf)
          free(v71);
      }
      v50 = *(void ***)(a1 + 608);
      v51 = *(_QWORD *)(a1 + 616);
      *(_QWORD *)(a1 + 640) = 0;
      v52 = v51 - (_QWORD)v50;
      if (v52 >= 0x11)
      {
        do
        {
          operator delete(*v50);
          v50 = (void **)(*(_QWORD *)(a1 + 608) + 8);
          *(_QWORD *)(a1 + 608) = v50;
          v52 = *(_QWORD *)(a1 + 616) - (_QWORD)v50;
        }
        while (v52 > 0x10);
      }
      if (v52 >> 3 == 1)
      {
        v53 = 51;
      }
      else
      {
        if (v52 >> 3 != 2)
          goto LABEL_66;
        v53 = 102;
      }
      *(_QWORD *)(a1 + 632) = v53;
    }
  }
  else
  {
LABEL_18:
    *(double *)buf = a4;
    *(double *)&buf[8] = a2;
    *(double *)&buf[16] = a3;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)v80 = _Q0;
    sub_101743DA8((_QWORD *)(a1 + 600), (uint64_t)buf);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v24 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = a3;
      *(_WORD *)&buf[22] = 2050;
      v80[0] = a4;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,short memory update,add,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      *(_DWORD *)v77 = 134349568;
      *(double *)&v77[4] = a2;
      *(_WORD *)&v77[12] = 2050;
      *(double *)&v77[14] = a3;
      *(_WORD *)&v77[22] = 2050;
      *(double *)&v77[24] = a4;
      LODWORD(v72) = 32;
      v69 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,LongShortMemoryBias,short memory update,add,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", v77, v72);
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v69);
      if (v69 != buf)
        free(v69);
    }
    while (*(_QWORD *)(a1 + 640) > (unint64_t)*(unsigned int *)(a1 + 696))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v25 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v26 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * (*(_QWORD *)(a1 + 632) / 0x66uLL))
                       + 40 * (*(_QWORD *)(a1 + 632) % 0x66uLL));
        v28 = *((_QWORD *)v26 + 1);
        v27 = *((_QWORD *)v26 + 2);
        v29 = *v26;
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)&buf[4] = v28;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v27;
        *(_WORD *)&buf[22] = 2050;
        v80[0] = v29;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,short memory update,remove,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v30 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * (*(_QWORD *)(a1 + 632) / 0x66uLL))
                        + 40 * (*(_QWORD *)(a1 + 632) % 0x66uLL));
        v32 = v30[1];
        v31 = v30[2];
        v33 = *v30;
        *(_DWORD *)v77 = 134349568;
        *(_QWORD *)&v77[4] = v32;
        *(_WORD *)&v77[12] = 2050;
        *(_QWORD *)&v77[14] = v31;
        *(_WORD *)&v77[22] = 2050;
        *(_QWORD *)&v77[24] = v33;
        LODWORD(v72) = 32;
        v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,LongShortMemoryBias,short memory update,remove,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", v77, v72);
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v34);
        if (v34 != buf)
          free(v34);
      }
      *(int64x2_t *)(a1 + 632) = vaddq_s64(*(int64x2_t *)(a1 + 632), (int64x2_t)xmmword_101B9DFC0);
      sub_1004CE138(a1 + 600, 1);
    }
  }
LABEL_66:
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v54 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v55 = *(_DWORD *)(a1 + 640);
    sub_1017443D4((_QWORD *)(a1 + 600), buf);
    v56 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v77 = 67240450;
    *(_DWORD *)&v77[4] = v55;
    *(_WORD *)&v77[8] = 2082;
    *(_QWORD *)&v77[10] = v56;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,short memory,after update,elem,%{public}d,content,%{public}s", v77, 0x12u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v61 = qword_1022A0028;
    v62 = *(_DWORD *)(a1 + 640);
    sub_1017443D4((_QWORD *)(a1 + 600), v77);
    if ((v77[23] & 0x80u) == 0)
      v63 = v77;
    else
      v63 = *(uint8_t **)v77;
    v73 = 67240450;
    *(_DWORD *)v74 = v62;
    *(_WORD *)&v74[4] = 2082;
    *(_QWORD *)&v74[6] = v63;
    LODWORD(v72) = 18;
    v64 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v61, 2, "BaroAlt,LongShortMemoryBias,short memory,after update,elem,%{public}d,content,%{public}s", &v73, v72);
    if ((char)v77[23] < 0)
      operator delete(*(void **)v77);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v64);
    if (v64 != buf)
      free(v64);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v57 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v58 = *(_DWORD *)(a1 + 592);
    sub_1017443D4((_QWORD *)(a1 + 552), buf);
    v59 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v77 = 67240450;
    *(_DWORD *)&v77[4] = v58;
    *(_WORD *)&v77[8] = 2082;
    *(_QWORD *)&v77[10] = v59;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,long memory,after update,elem,%{public}d,content,%{public}s", v77, 0x12u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v65 = qword_1022A0028;
    v66 = (_QWORD *)(a1 + 552);
    v67 = *(_DWORD *)(a1 + 592);
    sub_1017443D4(v66, v77);
    if ((v77[23] & 0x80u) == 0)
      v68 = v77;
    else
      v68 = *(uint8_t **)v77;
    v73 = 67240450;
    *(_DWORD *)v74 = v67;
    *(_WORD *)&v74[4] = 2082;
    *(_QWORD *)&v74[6] = v68;
    LODWORD(v72) = 18;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v65, 2, "BaroAlt,LongShortMemoryBias,long memory,after update,elem,%{public}d,content,%{public}s", &v73, v72);
    if ((char)v77[23] < 0)
      operator delete(*(void **)v77);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v18);
    if (v18 != buf)
      goto LABEL_106;
  }
}

BOOL sub_101745ADC(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  _BYTE v20[10];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  _BYTE v25[10];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  if (*(_QWORD *)(a1 + 592) >= (unint64_t)*(unsigned int *)(a1 + 712)
    && sub_101743E5C(a1, (_QWORD *)(a1 + 552), (uint64_t)a2))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v6 = a2[1];
      v5 = a2[2];
      v7 = *a2;
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)v25 = v6;
      *(_WORD *)&v25[8] = 2050;
      v26 = v5;
      v27 = 2050;
      v28 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BaroAlt,LongShortMemoryBias,bias ready for harvest,read,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v16 = a2[1];
      v15 = a2[2];
      v17 = *a2;
      v19 = 134349568;
      *(_QWORD *)v20 = v16;
      *(_WORD *)&v20[8] = 2050;
      v21 = v15;
      v22 = 2050;
      v23 = v17;
      v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,LongShortMemoryBias,bias ready for harvest,read,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", &v19, 32);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::getBiasForHarvest(BaroBiasEstimate &)", "%s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
    return 1;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_QWORD *)(a1 + 592);
      v11 = *(_DWORD *)(a1 + 712);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v25 = v10;
      *(_WORD *)&v25[4] = 1026;
      *(_DWORD *)&v25[6] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,long memory,insufficient to harvest,queue size,%{public}d,required,%{public}d", buf, 0xEu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v12 = *(_QWORD *)(a1 + 592);
      v13 = *(_DWORD *)(a1 + 712);
      v19 = 67240448;
      *(_DWORD *)v20 = v12;
      *(_WORD *)&v20[4] = 1026;
      *(_DWORD *)&v20[6] = v13;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,LongShortMemoryBias,long memory,insufficient to harvest,queue size,%{public}d,required,%{public}d", &v19, 14);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::getBiasForHarvest(BaroBiasEstimate &)", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
      return 0;
    }
  }
  return result;
}

uint64_t sub_101745E5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 592);
}

uint64_t sub_101745E64(_QWORD *a1)
{
  unint64_t v1;

  v1 = a1[73];
  return (int)vabdd_f64(*(double *)(*(_QWORD *)(a1[70] + 8 * ((a1[74] + v1 - 1) / 0x66))+ 40 * ((a1[74] + v1 - 1) % 0x66)), *(double *)(*(_QWORD *)(a1[70] + 8 * (v1 / 0x66)) + 40 * (v1 % 0x66)));
}

void sub_101745ECC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  int v6;
  _QWORD *v7;
  NSObject *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  NSObject *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  NSObject *v60;
  uint64_t v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  double v74;
  NSObject *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t *v102;
  uint64_t v104;
  unint64_t v106;
  int v107;
  uint64_t v108;
  __int16 v109;
  unint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  _BYTE v114[18];
  __int16 v115;
  uint64_t v116;
  uint8_t buf[4];
  uint64_t v118;
  __int16 v119;
  unint64_t v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  _BYTE v124[18];
  __int16 v125;
  uint64_t v126;

  v6 = a5;
  v7 = a4;
  if (!*(_BYTE *)(a1 + 96))
  {
    v104 = a3;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v10 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a2 + 64);
      v12 = v7[5];
      v13 = *(unsigned __int8 *)(a1 + 96);
      *(_DWORD *)buf = 134349569;
      v118 = v11;
      v119 = 2049;
      v120 = v12;
      v121 = 1025;
      LODWORD(v122) = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "BaroAlt,MMKF,startMMKF,newCalibSessionStart,time,%{public}lf,fNumBaroBiasHistorySize,%{private}lu,newCalibSessionStart,%{private}d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v81 = *(_QWORD *)(a2 + 64);
      v82 = a4[5];
      v83 = *(unsigned __int8 *)(a1 + 96);
      v107 = 134349569;
      v108 = v81;
      v109 = 2049;
      v110 = v82;
      v111 = 1025;
      LODWORD(v112) = v83;
      v84 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,MMKF,startMMKF,newCalibSessionStart,time,%{public}lf,fNumBaroBiasHistorySize,%{private}lu,newCalibSessionStart,%{private}d", &v107, 28);
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressureEstimator(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const int, const CLDaemonLocation &)", "%s\n", v84);
      if (v84 != (char *)buf)
        free(v84);
    }
    *(double *)&v106 = -1.0;
    sub_10015FAA0(a1, &v106, a6);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_QWORD *)(a1 + 376);
      v16 = *(_QWORD *)(a1 + 384);
      v17 = *(_QWORD *)(a6 + 4);
      v18 = *(_QWORD *)(a6 + 12);
      *(_DWORD *)buf = 134284545;
      v118 = v15;
      v119 = 2049;
      v120 = v16;
      v121 = 2049;
      v122 = v17;
      v123 = 2049;
      *(_QWORD *)v124 = v18;
      *(_WORD *)&v124[8] = 2050;
      *(_QWORD *)&v124[10] = v106;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,locDist,lastLocLat,%{private}.8lf,lastLocLon,%{private}.8lf,CurLocLat,%{private}.8lf,CurLocLon,%{private}.8lf,distToLast,%{public}.3lf", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v85 = *(_QWORD *)(a1 + 376);
      v86 = *(_QWORD *)(a1 + 384);
      v87 = *(_QWORD *)(a6 + 4);
      v88 = *(_QWORD *)(a6 + 12);
      v89 = *(double *)&v106;
      v107 = 134284545;
      v108 = v85;
      v109 = 2049;
      v110 = v86;
      v111 = 2049;
      v112 = v87;
      v113 = 2049;
      *(_QWORD *)v114 = v88;
      *(_WORD *)&v114[8] = 2050;
      *(_QWORD *)&v114[10] = v106;
      LODWORD(v100) = 52;
      v90 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,locDist,lastLocLat,%{private}.8lf,lastLocLon,%{private}.8lf,CurLocLat,%{private}.8lf,CurLocLon,%{private}.8lf,distToLast,%{public}.3lf", &v107, v100);
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressureEstimator(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const int, const CLDaemonLocation &)", "%s\n", v90);
      v19 = v89;
      if (v90 != (char *)buf)
        free(v90);
    }
    else
    {
      v19 = *(double *)&v106;
    }
    sub_101746C14(a1, a2, a4);
    v20 = sub_101743120(a1, a2, v104, a4, v19);
    v102 = (uint64_t *)(a1 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
    v21 = a4[1];
    if (a4[2] != v21)
    {
      v22 = a4[4];
      v23 = (_QWORD *)(*(_QWORD *)(v21 + 8 * (v22 / 0x66)) + 40 * (v22 % 0x66));
      v24 = *(_QWORD *)(v21 + 8 * ((a4[5] + v22) / 0x66)) + 40 * ((a4[5] + v22) % 0x66);
      if (v23 != (_QWORD *)v24)
      {
        v25 = (_QWORD *)(v21 + 8 * (v22 / 0x66));
        do
        {
          sub_10174776C((_QWORD *)a1, (uint64_t)v23);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v26 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v27 = *(_QWORD *)(a2 + 64);
            v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 4);
            v29 = v23[1];
            v30 = v23[2];
            v31 = v23[3];
            v32 = v23[4];
            *(_DWORD *)buf = 134350337;
            v118 = v27;
            v119 = 2049;
            v120 = v28;
            v121 = 2049;
            v122 = v29;
            v123 = 2049;
            *(_QWORD *)v124 = v30;
            *(_WORD *)&v124[8] = 2049;
            *(_QWORD *)&v124[10] = v31;
            v125 = 2049;
            v126 = v32;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,generateMMKF,frombaroBiasHistory,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", buf, 0x3Eu);
          }
          v20 = sub_1001BFF7C(115, 2);
          if ((_DWORD)v20)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
            v34 = *(_QWORD *)(a2 + 64);
            v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 4);
            v36 = v23[1];
            v37 = v23[2];
            v38 = v23[3];
            v39 = v23[4];
            v107 = 134350337;
            v108 = v34;
            v109 = 2049;
            v110 = v35;
            v111 = 2049;
            v112 = v36;
            v113 = 2049;
            *(_QWORD *)v114 = v37;
            *(_WORD *)&v114[8] = 2049;
            *(_QWORD *)&v114[10] = v38;
            v115 = 2049;
            v116 = v39;
            LODWORD(v100) = 62;
            v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,generateMMKF,frombaroBiasHistory,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", &v107, v100);
            v20 = sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressureEstimator(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const int, const CLDaemonLocation &)", "%s\n", v40);
            if (v40 != (char *)buf)
              free(v40);
          }
          v23 += 5;
          if ((_QWORD *)((char *)v23 - *v25) == (_QWORD *)4080)
          {
            v33 = (_QWORD *)v25[1];
            ++v25;
            v23 = v33;
          }
        }
        while (v23 != (_QWORD *)v24);
      }
    }
    v41 = sub_1017478C8(*(double *)(v104 + 8), v20, a2, v102);
    if ((v41 & 1) == 0)
    {
      v43 = *(_QWORD *)(a1 + 120);
      v42 = *(_QWORD *)(a1 + 128);
      v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v43) >> 4);
      v45 = 1.0;
      if (v44 >= 2)
        v45 = 1.0 / (double)(v44 + 1);
      v46 = *(_QWORD *)(v104 + 8);
      v47 = *(_QWORD *)(a2 + 272);
      v48 = *(_QWORD *)(a1 + 136);
      if (v42 >= v48)
      {
        if (v44 + 1 > 0x555555555555555)
          sub_100259694();
        v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v43) >> 4);
        v51 = 2 * v50;
        if (2 * v50 <= v44 + 1)
          v51 = v44 + 1;
        if (v50 >= 0x2AAAAAAAAAAAAAALL)
          v52 = 0x555555555555555;
        else
          v52 = v51;
        if (v52)
          v53 = (char *)sub_100313718(a1 + 136, v52);
        else
          v53 = 0;
        v54 = &v53[48 * v44];
        v55 = &v53[48 * v52];
        *v54 = 1;
        *((_DWORD *)v54 + 1) = 0;
        *((_QWORD *)v54 + 1) = v46;
        *((_OWORD *)v54 + 1) = xmmword_101CDB870;
        *((double *)v54 + 4) = v45;
        *((_QWORD *)v54 + 5) = v47;
        v49 = v54 + 48;
        v57 = *(char **)(a1 + 120);
        v56 = *(char **)(a1 + 128);
        if (v56 != v57)
        {
          do
          {
            v58 = *((_OWORD *)v56 - 3);
            v59 = *((_OWORD *)v56 - 1);
            *((_OWORD *)v54 - 2) = *((_OWORD *)v56 - 2);
            *((_OWORD *)v54 - 1) = v59;
            *((_OWORD *)v54 - 3) = v58;
            v54 -= 48;
            v56 -= 48;
          }
          while (v56 != v57);
          v56 = (char *)*v102;
        }
        *(_QWORD *)(a1 + 120) = v54;
        *(_QWORD *)(a1 + 128) = v49;
        *(_QWORD *)(a1 + 136) = v55;
        if (v56)
          operator delete(v56);
      }
      else
      {
        *(_BYTE *)v42 = 1;
        *(_DWORD *)(v42 + 4) = 0;
        *(_QWORD *)(v42 + 8) = v46;
        *(_OWORD *)(v42 + 16) = xmmword_101CDB870;
        *(double *)(v42 + 32) = v45;
        *(_QWORD *)(v42 + 40) = v47;
        v49 = (char *)(v42 + 48);
      }
      *(_QWORD *)(a1 + 128) = v49;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v60 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v61 = *(_QWORD *)(a2 + 72);
        v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 4);
        *(_DWORD *)buf = 134350337;
        v118 = v61;
        v119 = 2049;
        v120 = v62;
        v121 = 2049;
        v122 = v46;
        v123 = 2049;
        *(_QWORD *)v124 = 0x408200FD8ADAB9F5;
        *(_WORD *)&v124[8] = 2049;
        *(double *)&v124[10] = v45;
        v125 = 2049;
        v126 = v47;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,addingNewKF,time,%{public}lf,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", buf, 0x3Eu);
      }
      v41 = sub_1001BFF7C(115, 2);
      if ((_DWORD)v41)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v97 = *(_QWORD *)(a2 + 72);
        v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 4);
        v107 = 134350337;
        v108 = v97;
        v109 = 2049;
        v110 = v98;
        v111 = 2049;
        v112 = v46;
        v113 = 2049;
        *(_QWORD *)v114 = 0x408200FD8ADAB9F5;
        *(_WORD *)&v114[8] = 2049;
        *(double *)&v114[10] = v45;
        v115 = 2049;
        v116 = v47;
        LODWORD(v100) = 62;
        v99 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,addingNewKF,time,%{public}lf,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", &v107, v100);
        v41 = sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressureEstimator(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const int, const CLDaemonLocation &)", "%s\n", v99);
        if (v99 != (char *)buf)
          free(v99);
      }
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 4) >= 2)
      sub_101747B30(*(double *)(a2 + 72), v41, v102);
    v63 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)(a1 + 372) = *(_OWORD *)a6;
    *(_OWORD *)(a1 + 388) = v63;
    v64 = *(_OWORD *)(a6 + 32);
    v65 = *(_OWORD *)(a6 + 48);
    v66 = *(_OWORD *)(a6 + 80);
    *(_OWORD *)(a1 + 436) = *(_OWORD *)(a6 + 64);
    *(_OWORD *)(a1 + 452) = v66;
    *(_OWORD *)(a1 + 404) = v64;
    *(_OWORD *)(a1 + 420) = v65;
    v67 = *(_OWORD *)(a6 + 96);
    v68 = *(_OWORD *)(a6 + 112);
    v69 = *(_OWORD *)(a6 + 128);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a6 + 140);
    *(_OWORD *)(a1 + 484) = v68;
    *(_OWORD *)(a1 + 500) = v69;
    *(_OWORD *)(a1 + 468) = v67;
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 72);
    a3 = v104;
    v7 = a4;
    v6 = a5;
  }
  v70 = a3;
  sub_1017483E0(a1, a2, a3, v7, (uint64_t *)(a1 + 120), v6);
  *(_BYTE *)(a1 + 97) = 0;
  v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 4);
  if ((v71 > 1 || *(_BYTE *)(a1 + 112)) && *(double *)(a1 + 104) > 0.5)
  {
    v72 = *(unsigned int *)(a1 + 100);
    if ((v72 & 0x80000000) == 0 && v71 > v72)
    {
      v73 = *(_QWORD *)(a1 + 120) + 48 * v72;
      *(_QWORD *)(v70 + 8) = *(_QWORD *)(v73 + 8);
      v74 = sqrt(*(double *)(v73 + 16) / 144.030962);
      if (v74 < *(double *)(v70 + 16))
        v74 = *(double *)(v70 + 16);
      *(double *)(v70 + 16) = v74;
      *(_BYTE *)(a1 + 97) = 1;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v75 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v76 = *(_QWORD *)(a2 + 64);
        v77 = a4[5];
        v78 = *(_QWORD *)(a1 + 104);
        v79 = *(unsigned __int8 *)(a1 + 97);
        v80 = *(_QWORD *)(v70 + 8);
        *(_DWORD *)buf = 134350081;
        v118 = v76;
        v119 = 2049;
        v120 = v77;
        v121 = 2049;
        v122 = v78;
        v123 = 1025;
        *(_DWORD *)v124 = v79;
        *(_WORD *)&v124[4] = 2049;
        *(_QWORD *)&v124[6] = v80;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "BaroAlt,MMKF,publish,time,%{public}lf,fNumBaroBiasHistorySize,%{private}lu,bestKFModeProb,%{private}.4lf,filteredBaroBias,%{private}d,fBaroBiasUsingReferencePressure,%{private}.3lf", buf, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v91 = *(_QWORD *)(a2 + 64);
        v92 = a4[5];
        v93 = *(_QWORD *)(a1 + 104);
        v94 = *(unsigned __int8 *)(a1 + 97);
        v95 = *(_QWORD *)(v70 + 8);
        v107 = 134350081;
        v108 = v91;
        v109 = 2049;
        v110 = v92;
        v111 = 2049;
        v112 = v93;
        v113 = 1025;
        *(_DWORD *)v114 = v94;
        *(_WORD *)&v114[4] = 2049;
        *(_QWORD *)&v114[6] = v95;
        LODWORD(v100) = 48;
        v96 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,MMKF,publish,time,%{public}lf,fNumBaroBiasHistorySize,%{private}lu,bestKFModeProb,%{private}.4lf,filteredBaroBias,%{private}d,fBaroBiasUsingReferencePressure,%{private}.3lf", &v107, v100);
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressureEstimator(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const int, const CLDaemonLocation &)", "%s\n", v96);
        if (v96 != (char *)buf)
          free(v96);
      }
    }
  }
  *(_QWORD *)(a2 + 280) = *(_QWORD *)(a2 + 272);
}

uint64_t sub_101746C14(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double *v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  double *v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  NSObject *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void **v68;
  void **v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  void **v83;
  NSObject *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  void **v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  __int16 v110;
  unint64_t v111;
  __int16 v112;
  _BYTE v113[10];
  _BYTE v114[10];
  _BYTE v115[10];
  _BYTE v116[10];
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  uint8_t buf[4];
  uint64_t v124;
  __int16 v125;
  unint64_t v126;
  __int16 v127;
  _BYTE v128[10];
  _BYTE v129[10];
  _BYTE v130[10];
  _BYTE v131[10];
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;

  v4 = a2;
  v5 = (_QWORD *)result;
  if (*(_BYTE *)(result + 96) && vabdd_f64(*(double *)(a2 + 72), *(double *)(result + 536)) <= 300.0)
    return result;
  v106 = 0u;
  v107 = 0u;
  v105 = 0u;
  if (!a3[5])
    goto LABEL_79;
  v103 = (_QWORD *)result;
  v6 = 0;
  v7 = 0;
  for (i = 1; i > v6; i = a3[5])
  {
    if (!i)
    {
      LODWORD(v10) = -1;
LABEL_33:
      v53 = v7;
      sub_101743DA8(&v105, *(_QWORD *)(a3[1] + 8 * ((a3[4] + v6) / 0x66)) + 40 * ((a3[4] + v6) % 0x66));
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v54 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v55 = *(_QWORD *)(a2 + 64);
        v56 = a3[5];
        v57 = (_QWORD *)(*(_QWORD *)(a3[1] + 8 * ((a3[4] + v6) / 0x66)) + 40 * ((a3[4] + v6) % 0x66));
        v58 = v57[1];
        v59 = v57[2];
        v60 = v57[3];
        *(_DWORD *)buf = 134350593;
        v124 = v55;
        v125 = 2049;
        v126 = v56;
        v127 = 1025;
        *(_DWORD *)v128 = v6;
        *(_WORD *)&v128[4] = 1025;
        *(_DWORD *)&v128[6] = v10;
        *(_WORD *)v129 = 2049;
        *(_QWORD *)&v129[2] = v58;
        *(_WORD *)v130 = 2049;
        *(_QWORD *)&v130[2] = v59;
        *(_WORD *)v131 = 2049;
        *(_QWORD *)&v131[2] = v60;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,removeDupeHistAdded,time,%{public}lf,MMKF,%{private}lu,i,%{private}d,indexToBeRemoved,%{private}d,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf,modeProb,%{private}.4lf", buf, 0x40u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v61 = *(_QWORD *)(a2 + 64);
        v62 = a3[5];
        v63 = (_QWORD *)(*(_QWORD *)(a3[1] + 8 * ((a3[4] + v6) / 0x66)) + 40 * ((a3[4] + v6) % 0x66));
        v64 = v63[1];
        v65 = v63[2];
        v66 = v63[3];
        v108 = 134350593;
        v109 = v61;
        v110 = 2049;
        v111 = v62;
        v112 = 1025;
        *(_DWORD *)v113 = v6;
        *(_WORD *)&v113[4] = 1025;
        *(_DWORD *)&v113[6] = v10;
        *(_WORD *)v114 = 2049;
        *(_QWORD *)&v114[2] = v64;
        *(_WORD *)v115 = 2049;
        *(_QWORD *)&v115[2] = v65;
        *(_WORD *)v116 = 2049;
        *(_QWORD *)&v116[2] = v66;
        LODWORD(v102) = 64;
        v67 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,removeDupeHistAdded,time,%{public}lf,MMKF,%{private}lu,i,%{private}d,indexToBeRemoved,%{private}d,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf,modeProb,%{private}.4lf", &v108, v102);
        result = sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::removeDupeBaroBiasMMKF(const CLBaroAltEstimatorInput &, std::deque<BaroBiasEstimate> &)", "%s\n", v67);
        if (v67 != (char *)buf)
          free(v67);
      }
      v7 = v53;
      goto LABEL_39;
    }
    v9 = 0;
    v10 = 0xFFFFFFFFLL;
    do
    {
      if (v6 != v9)
      {
        v11 = a3[4];
        v12 = a3[1];
        v13 = *(_QWORD *)(v12 + 8 * ((v11 + v6) / 0x66));
        v14 = (v11 + v6) % 0x66;
        v15 = (double *)(v13 + 40 * v14);
        v16 = v9 + v11;
        v17 = *(_QWORD *)(v12 + 8 * (v16 / 0x66));
        v18 = v15[1];
        v19 = v16 % 0x66;
        v20 = (double *)(v17 + 40 * (v16 % 0x66));
        v21 = v20[1];
        v22 = vabdd_f64(v18, v21);
        if (v22 < 27.963)
        {
          v23 = v13 + 40 * v14;
          v24 = *(double *)(v23 + 16);
          v25 = v17 + 40 * v19;
          v26 = *(double *)(v25 + 16);
          if (v24 > v26
            || vabdd_f64(v24, v26) < 2.22507386e-308
            && ((v39 = *(double *)(v23 + 24), v40 = *(double *)(v25 + 24), v39 < v40)
             || vabdd_f64(v39, v40) < 2.22507386e-308 && (v18 > v21 || v22 < 2.22507386e-308 && *v15 < *v20)))
          {
            if ((v10 & 0x80000000) != 0 || v6 != v10)
            {
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
              v27 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
              {
                v28 = *(_QWORD *)(a2 + 64);
                v30 = a3[4];
                v29 = a3[5];
                v31 = a3[1];
                v32 = (_QWORD *)(*(_QWORD *)(v31 + 8 * ((v30 + v6) / 0x66)) + 40 * ((v30 + v6) % 0x66));
                v33 = v32[1];
                v34 = v32[2];
                v35 = v32[3];
                v36 = *(_QWORD *)(v31 + 8 * ((v9 + v30) / 0x66)) + 40 * ((v9 + v30) % 0x66);
                v38 = *(_QWORD *)(v36 + 8);
                v37 = *(_QWORD *)(v36 + 16);
                *(_DWORD *)buf = 134351361;
                v124 = v28;
                v125 = 2049;
                v126 = v29;
                v127 = 1025;
                *(_DWORD *)v128 = v6;
                *(_WORD *)&v128[4] = 1025;
                *(_DWORD *)&v128[6] = v9;
                *(_WORD *)v129 = 2049;
                *(_QWORD *)&v129[2] = v33;
                *(_WORD *)v130 = 2049;
                *(_QWORD *)&v130[2] = v34;
                *(_WORD *)v131 = 2049;
                *(_QWORD *)&v131[2] = v35;
                v132 = 2049;
                v133 = v38;
                v134 = 2049;
                v135 = v37;
                v136 = 2049;
                v137 = v35;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,removeDupeHistIndex,time,%{public}lf,MMKF,%{private}lu,i,%{private}d,j,%{private}d,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf,modeProb,%{private}.4lf,baroKFX_pa,%{private}.2lf, baroKFP_pa2,%{private}.4lf,modeProb,%{private}.4lf", buf, 0x5Eu);
              }
              result = sub_1001BFF7C(115, 2);
              if ((_DWORD)result)
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
                v41 = *(_QWORD *)(a2 + 64);
                v43 = a3[4];
                v42 = a3[5];
                v44 = a3[1];
                v45 = (_QWORD *)(*(_QWORD *)(v44 + 8 * ((v43 + v6) / 0x66)) + 40 * ((v43 + v6) % 0x66));
                v46 = v45[1];
                v47 = v45[2];
                v48 = v45[3];
                v49 = *(_QWORD *)(v44 + 8 * ((v9 + v43) / 0x66)) + 40 * ((v9 + v43) % 0x66);
                v51 = *(_QWORD *)(v49 + 8);
                v50 = *(_QWORD *)(v49 + 16);
                v108 = 134351361;
                v109 = v41;
                v110 = 2049;
                v111 = v42;
                v112 = 1025;
                *(_DWORD *)v113 = v6;
                *(_WORD *)&v113[4] = 1025;
                *(_DWORD *)&v113[6] = v9;
                *(_WORD *)v114 = 2049;
                *(_QWORD *)&v114[2] = v46;
                *(_WORD *)v115 = 2049;
                *(_QWORD *)&v115[2] = v47;
                *(_WORD *)v116 = 2049;
                *(_QWORD *)&v116[2] = v48;
                v117 = 2049;
                v118 = v51;
                v119 = 2049;
                v120 = v50;
                v121 = 2049;
                v122 = v48;
                LODWORD(v102) = 94;
                v52 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,removeDupeHistIndex,time,%{public}lf,MMKF,%{private}lu,i,%{private}d,j,%{private}d,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf,modeProb,%{private}.4lf,baroKFX_pa,%{private}.2lf, baroKFP_pa2,%{private}.4lf,modeProb,%{private}.4lf", &v108, v102);
                result = sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::removeDupeBaroBiasMMKF(const CLBaroAltEstimatorInput &, std::deque<BaroBiasEstimate> &)", "%s\n", v52);
                if (v52 != (char *)buf)
                  free(v52);
              }
              v7 = 1;
              v10 = v6;
            }
          }
        }
      }
      ++v9;
    }
    while (a3[5] > v9);
    if ((v10 & 0x80000000) != 0)
      goto LABEL_33;
LABEL_39:
    ++v6;
  }
  v5 = v103;
  v4 = a2;
  if ((v7 & 1) != 0)
  {
    v68 = (void **)a3[1];
    v69 = (void **)a3[2];
    a3[5] = 0;
    v70 = (char *)v69 - (char *)v68;
    if ((unint64_t)((char *)v69 - (char *)v68) >= 0x11)
    {
      do
      {
        operator delete(*v68);
        v69 = (void **)a3[2];
        v68 = (void **)(a3[1] + 8);
        a3[1] = v68;
        v70 = (char *)v69 - (char *)v68;
      }
      while ((unint64_t)((char *)v69 - (char *)v68) > 0x10);
    }
    v71 = v70 >> 3;
    if (v71 == 1)
    {
      v72 = 51;
LABEL_52:
      a3[4] = v72;
    }
    else if (v71 == 2)
    {
      v72 = 102;
      goto LABEL_52;
    }
    if ((_QWORD)v106 != *((_QWORD *)&v105 + 1))
    {
      v73 = (_QWORD *)(*((_QWORD *)&v105 + 1) + 8 * ((unint64_t)v107 / 0x66));
      v74 = *v73 + 40 * ((unint64_t)v107 % 0x66);
      v75 = *(_QWORD *)(*((_QWORD *)&v105 + 1) + 8 * ((*((_QWORD *)&v107 + 1) + (_QWORD)v107) / 0x66uLL))
          + 40 * ((*((_QWORD *)&v107 + 1) + (_QWORD)v107) % 0x66uLL);
      if (v74 != v75)
      {
        do
        {
          sub_101743DA8(a3, v74);
          v74 += 40;
          if (v74 - *v73 == 4080)
          {
            v76 = v73[1];
            ++v73;
            v74 = v76;
          }
        }
        while (v74 != v75);
        v68 = (void **)a3[1];
        v69 = (void **)a3[2];
      }
    }
    v77 = v103[15];
    v103[16] = v77;
    if (v69 == v68)
    {
      v82 = v77;
    }
    else
    {
      v78 = a3[4];
      v79 = a3[5];
      v80 = (char *)v68[v78 / 0x66] + 40 * (v78 % 0x66);
      v81 = (unint64_t)v68[(v79 + v78) / 0x66] + 40 * ((v79 + v78) % 0x66);
      v82 = v77;
      if (v80 != (char *)v81)
      {
        v83 = &v68[v78 / 0x66];
        do
        {
          sub_10174776C(v103, (uint64_t)v80);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v84 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v85 = *(_QWORD *)(a2 + 64);
            v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103[16] - v103[15]) >> 4);
            v87 = *((_QWORD *)v80 + 1);
            v88 = *((_QWORD *)v80 + 2);
            v89 = *((_QWORD *)v80 + 3);
            v90 = *((_QWORD *)v80 + 4);
            *(_DWORD *)buf = 134350337;
            v124 = v85;
            v125 = 2049;
            v126 = v86;
            v127 = 2049;
            *(_QWORD *)v128 = v87;
            *(_WORD *)&v128[8] = 2049;
            *(_QWORD *)v129 = v88;
            *(_WORD *)&v129[8] = 2049;
            *(_QWORD *)v130 = v89;
            *(_WORD *)&v130[8] = 2049;
            *(_QWORD *)v131 = v90;
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,regeneratedMMKF,fromfBaroBiasHistory,time,%{public}lf,fBaroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", buf, 0x3Eu);
          }
          result = sub_1001BFF7C(115, 2);
          if ((_DWORD)result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
            v92 = *(_QWORD *)(a2 + 64);
            v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103[16] - v103[15]) >> 4);
            v94 = *((_QWORD *)v80 + 1);
            v95 = *((_QWORD *)v80 + 2);
            v96 = *((_QWORD *)v80 + 3);
            v97 = *((_QWORD *)v80 + 4);
            v108 = 134350337;
            v109 = v92;
            v110 = 2049;
            v111 = v93;
            v112 = 2049;
            *(_QWORD *)v113 = v94;
            *(_WORD *)&v113[8] = 2049;
            *(_QWORD *)v114 = v95;
            *(_WORD *)&v114[8] = 2049;
            *(_QWORD *)v115 = v96;
            *(_WORD *)&v115[8] = 2049;
            *(_QWORD *)v116 = v97;
            LODWORD(v102) = 62;
            v98 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,regeneratedMMKF,fromfBaroBiasHistory,time,%{public}lf,fBaroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", &v108, v102);
            result = sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::removeDupeBaroBiasMMKF(const CLBaroAltEstimatorInput &, std::deque<BaroBiasEstimate> &)", "%s\n", v98);
            if (v98 != (char *)buf)
              free(v98);
          }
          v80 += 40;
          if (v80 - (_BYTE *)*v83 == 4080)
          {
            v91 = (char *)v83[1];
            ++v83;
            v80 = v91;
          }
        }
        while (v80 != (char *)v81);
        v5 = v103;
        v77 = v103[15];
        v82 = v103[16];
        v4 = a2;
      }
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v82 - v77) >> 4) > 1)
      sub_101747B30(*(double *)(v4 + 72), result, v103 + 15);
    *((_BYTE *)v5 + 96) = 0;
  }
LABEL_79:
  v99 = (void **)*((_QWORD *)&v105 + 1);
  *((_QWORD *)&v107 + 1) = 0;
  v100 = v106 - *((_QWORD *)&v105 + 1);
  if ((_QWORD)v106 - *((_QWORD *)&v105 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v99);
      v99 = (void **)(*((_QWORD *)&v105 + 1) + 8);
      *((_QWORD *)&v105 + 1) = v99;
      v100 = v106 - (_QWORD)v99;
    }
    while ((_QWORD)v106 - (_QWORD)v99 > 0x10uLL);
  }
  if (v100 >> 3 == 1)
  {
    v101 = 51;
LABEL_85:
    *(_QWORD *)&v107 = v101;
  }
  else if (v100 >> 3 == 2)
  {
    v101 = 102;
    goto LABEL_85;
  }
  v5[67] = *(_QWORD *)(v4 + 72);
  return sub_100427A00(&v105);
}

void sub_10174773C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100427A00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10174776C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(double *)(a2 + 16) * *(double *)(a2 + 16) * 144.030962;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v9 = a1[17];
  v7 = (uint64_t)(a1 + 17);
  v8 = v9;
  v10 = *(_QWORD *)(v7 - 8);
  if (v10 >= v9)
  {
    v12 = (void **)(v7 - 16);
    v13 = *(_QWORD *)(v7 - 16);
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v13) >> 4);
    v15 = v14 + 1;
    if (v14 + 1 > 0x555555555555555)
      sub_100259694();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v13) >> 4);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x2AAAAAAAAAAAAAALL)
      v17 = 0x555555555555555;
    else
      v17 = v15;
    if (v17)
      v18 = (char *)sub_100313718(v7, v17);
    else
      v18 = 0;
    v19 = &v18[48 * v14];
    v20 = &v18[48 * v17];
    *v19 = 1;
    *((_DWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 1) = v3;
    *((double *)v19 + 2) = v4;
    *((_QWORD *)v19 + 3) = 0;
    *((_QWORD *)v19 + 4) = v6;
    *((_QWORD *)v19 + 5) = v5;
    v11 = v19 + 48;
    v22 = (char *)a1[15];
    v21 = (char *)a1[16];
    if (v21 != v22)
    {
      do
      {
        v23 = *((_OWORD *)v21 - 3);
        v24 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v19 - 1) = v24;
        *((_OWORD *)v19 - 3) = v23;
        v19 -= 48;
        v21 -= 48;
      }
      while (v21 != v22);
      v21 = (char *)*v12;
    }
    a1[15] = v19;
    a1[16] = v11;
    a1[17] = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *(_BYTE *)v10 = 1;
    *(_DWORD *)(v10 + 4) = 0;
    *(_QWORD *)(v10 + 8) = v3;
    *(double *)(v10 + 16) = v4;
    *(_QWORD *)(v10 + 24) = 0;
    v11 = (char *)(v10 + 48);
    *(_QWORD *)(v10 + 32) = v6;
    *(_QWORD *)(v10 + 40) = v5;
  }
  a1[16] = v11;
}

uint64_t sub_1017478C8(double a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  double v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;

  v5 = *a4;
  v4 = a4[1];
  if (*a4 == v4)
    return 0;
  while (vabdd_f64(*(double *)(v5 + 8), a1) >= 27.963)
  {
    v5 += 48;
    if (v5 == v4)
      return 0;
  }
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(a3 + 272);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v9 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_QWORD *)(a3 + 72);
    v11 = *(_QWORD *)(v5 + 8);
    v12 = *(_QWORD *)(v5 + 16);
    v13 = *(_QWORD *)(v5 + 32);
    v14 = *(_QWORD *)(v5 + 40);
    *(_DWORD *)buf = 134350337;
    v34 = v10;
    v35 = 2049;
    v36 = a1;
    v37 = 2049;
    v38 = v11;
    v39 = 2049;
    v40 = v12;
    v41 = 2049;
    v42 = v13;
    v43 = 2049;
    v44 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,foundMatchingKF,time,%{public}lf,fBaroBiasUsingReferencePressure,%{private}.2lf,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v15 = *(_QWORD *)(a3 + 72);
    v16 = *(_QWORD *)(v5 + 8);
    v17 = *(_QWORD *)(v5 + 16);
    v18 = *(_QWORD *)(v5 + 32);
    v19 = *(_QWORD *)(v5 + 40);
    v21 = 134350337;
    v22 = v15;
    v23 = 2049;
    v24 = a1;
    v25 = 2049;
    v26 = v16;
    v27 = 2049;
    v28 = v17;
    v29 = 2049;
    v30 = v18;
    v31 = 2049;
    v32 = v19;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,foundMatchingKF,time,%{public}lf,fBaroBiasUsingReferencePressure,%{private}.2lf,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", &v21, 62);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::findMatchingBaroBiasMMKFAndUpdateCalTemperature(const CLBaroAltEstimatorInput &, const double, std::vector<BarometricBiasMMKF> &)", "%s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
  return 1;
}

void sub_101747B30(double a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double *v12;
  double *v13;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double *v20;
  uint64_t v21;
  NSObject *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  NSObject *v30;
  double v31;
  double v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  long double v38;
  NSObject *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  double *__p;
  double *v54;
  double *v55;
  int v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  _BYTE v61[14];
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  uint8_t buf[4];
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  _BYTE v73[14];
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;

  v5 = *a3;
  v6 = *(double *)(*a3 + 8);
  while (v5 != a3[1])
  {
    if (v6 > *(double *)(v5 + 8))
      v6 = *(double *)(v5 + 8);
    v5 += 48;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349313;
    v69 = a1;
    v70 = 2049;
    v71 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,modeProb,time,%{public}lf,baseBias,%{private}.3lf", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v56 = 134349313;
    v57 = a1;
    v58 = 2049;
    v59 = v6;
    v51 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,modeProb,time,%{public}lf,baseBias,%{private}.3lf", &v56, 22);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::updateModeProbBaroBiasMMKF(const CFAbsoluteTime, std::vector<BarometricBiasMMKF> &)", "%s\n", v51);
    if (v51 != (char *)buf)
      free(v51);
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  v8 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    v10 = 0.0;
    do
    {
      if (*(double *)(v8 + 8) - v6 >= 1.0)
        v11 = *(double *)(v8 + 8) - v6;
      else
        v11 = 1.0;
      v12 = v54;
      if (v54 >= v55)
      {
        v14 = __p;
        v15 = v54 - __p;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          sub_100259694();
        v17 = (char *)v55 - (char *)__p;
        if (((char *)v55 - (char *)__p) >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)sub_10025E6A0((uint64_t)&v55, v18);
          v14 = __p;
          v12 = v54;
        }
        else
        {
          v19 = 0;
        }
        v20 = (double *)&v19[8 * v15];
        *v20 = v11;
        v13 = v20 + 1;
        while (v12 != v14)
        {
          v21 = *((_QWORD *)v12-- - 1);
          *((_QWORD *)v20-- - 1) = v21;
        }
        __p = v20;
        v55 = (double *)&v19[8 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v54 = v11;
        v13 = v54 + 1;
      }
      v54 = v13;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v10 = v10 + fabs(v11);
      v22 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349569;
        v69 = a1;
        v70 = 2049;
        v71 = v10;
        v72 = 2049;
        *(double *)v73 = v11;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,modeProb,time,%{public}lf,sumOfBaroBias,%{private}.3lf,biasDifference,%{private}lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v56 = 134349569;
        v57 = a1;
        v58 = 2049;
        v59 = v10;
        v60 = 2049;
        *(double *)v61 = v11;
        LODWORD(v52) = 32;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,modeProb,time,%{public}lf,sumOfBaroBias,%{private}.3lf,biasDifference,%{private}lf", &v56, v52);
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::updateModeProbBaroBiasMMKF(const CFAbsoluteTime, std::vector<BarometricBiasMMKF> &)", "%s\n", v23);
        if (v23 != (char *)buf)
          free(v23);
      }
      v8 += 48;
    }
    while (v8 != v9);
    v24 = *a3;
    v25 = a3[1];
    if (*a3 != v25)
    {
      v26 = 0;
      v27 = 0.0;
      do
      {
        v28 = *(double *)(v24 + 32);
        v29 = __p[v26];
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v27 = v27 + v28 * v29 / v10;
        v30 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v31 = __p[v26];
          *(_DWORD *)buf = 134349569;
          v69 = a1;
          v70 = 2049;
          v71 = v27;
          v72 = 2049;
          *(double *)v73 = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,modeProb,time,%{public}lf,sumOfmodeProb,%{private}.4lf,biasDifferenceVector,%{private}.3lf", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v32 = __p[v26];
          v56 = 134349569;
          v57 = a1;
          v58 = 2049;
          v59 = v27;
          v60 = 2049;
          *(double *)v61 = v32;
          LODWORD(v52) = 32;
          v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,modeProb,time,%{public}lf,sumOfmodeProb,%{private}.4lf,biasDifferenceVector,%{private}.3lf", &v56, v52);
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::updateModeProbBaroBiasMMKF(const CFAbsoluteTime, std::vector<BarometricBiasMMKF> &)", "%s\n", v33);
          if (v33 != (char *)buf)
            free(v33);
        }
        v24 += 48;
        ++v26;
      }
      while (v24 != v25);
      v35 = *a3;
      v34 = a3[1];
      if (*a3 != v34)
      {
        v36 = 0;
        do
        {
          v37 = log(*(long double *)(v35 + 32));
          v38 = log(__p[v36] / v10 / v27);
          *(long double *)(v35 + 32) = exp(v37 + v38);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v39 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v40 = __p[v36];
            v41 = *(_QWORD *)(v35 + 8);
            v42 = *(_QWORD *)(v35 + 16);
            v43 = *(_QWORD *)(v35 + 32);
            v44 = *(_QWORD *)(v35 + 40);
            *(_DWORD *)buf = 134285057;
            v69 = a1;
            v70 = 2049;
            v71 = v40;
            v72 = 1025;
            *(_DWORD *)v73 = v36;
            *(_WORD *)&v73[4] = 2049;
            *(_QWORD *)&v73[6] = v41;
            v74 = 2049;
            v75 = v42;
            v76 = 2049;
            v77 = v43;
            v78 = 2049;
            v79 = v44;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,modeProbFinal,time,%{private}.4lf,heightDifferenceVector,%{private}.3lf,KF,%{private}d,X,%{private}.2lf,P,%{private}.4lf,baroKFModeProbability,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", buf, 0x44u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
            v45 = __p[v36];
            v46 = *(_QWORD *)(v35 + 8);
            v47 = *(_QWORD *)(v35 + 16);
            v48 = *(_QWORD *)(v35 + 32);
            v49 = *(_QWORD *)(v35 + 40);
            v56 = 134285057;
            v57 = a1;
            v58 = 2049;
            v59 = v45;
            v60 = 1025;
            *(_DWORD *)v61 = v36;
            *(_WORD *)&v61[4] = 2049;
            *(_QWORD *)&v61[6] = v46;
            v62 = 2049;
            v63 = v47;
            v64 = 2049;
            v65 = v48;
            v66 = 2049;
            v67 = v49;
            LODWORD(v52) = 68;
            v50 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,modeProbFinal,time,%{private}.4lf,heightDifferenceVector,%{private}.3lf,KF,%{private}d,X,%{private}.2lf,P,%{private}.4lf,baroKFModeProbability,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", &v56, v52);
            sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::updateModeProbBaroBiasMMKF(const CFAbsoluteTime, std::vector<BarometricBiasMMKF> &)", "%s\n", v50);
            if (v50 != (char *)buf)
              free(v50);
          }
          ++v36;
          v35 += 48;
        }
        while (v35 != v34);
      }
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_1017483A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1017483E0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5, int a6)
{
  uint64_t v7;
  unsigned __int8 *v8;
  int v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  double v29;
  double v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  NSObject *v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t *v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  long double v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  double *v105;
  double *v106;
  uint64_t *v107;
  unint64_t v108;
  int v109;
  int v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  unsigned __int8 *v122;
  int v124;
  uint64_t v125;
  __int16 v126;
  _BYTE v127[54];
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  int v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  uint8_t buf[4];
  uint64_t v137;
  __int16 v138;
  _BYTE v139[54];
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  int v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;

  v7 = a1;
  v8 = (unsigned __int8 *)*a5;
  v122 = (unsigned __int8 *)a5[1];
  if ((unsigned __int8 *)*a5 != v122)
  {
    v10 = 0;
    do
    {
      if (!*v8 || *((int *)v8 + 1) >= 1801)
      {
        *v8 = 1;
        *((_QWORD *)v8 + 1) = *(_QWORD *)(a3 + 8);
        *((_QWORD *)v8 + 2) = 0x408200FD8ADAB9F5;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v11 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v12 = *(_QWORD *)(a2 + 72);
          v13 = *v8;
          v14 = *((_DWORD *)v8 + 1);
          v15 = *((_QWORD *)v8 + 1);
          v16 = *((_QWORD *)v8 + 2);
          *(_DWORD *)buf = 134350081;
          v137 = v12;
          v138 = 1025;
          *(_DWORD *)v139 = v13;
          *(_WORD *)&v139[4] = 1025;
          *(_DWORD *)&v139[6] = v14;
          *(_WORD *)&v139[10] = 2049;
          *(_QWORD *)&v139[12] = v15;
          *(_WORD *)&v139[20] = 2049;
          *(_QWORD *)&v139[22] = v16;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,initializeBaroKF,time,%{public}lf,baroKFInit,%{private}d,numBaroKFInnovTestsRejected,%{private}d,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf", buf, 0x2Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v72 = *(_QWORD *)(a2 + 72);
          v73 = *v8;
          v74 = *((_DWORD *)v8 + 1);
          v75 = *((_QWORD *)v8 + 1);
          v76 = *((_QWORD *)v8 + 2);
          v124 = 134350081;
          v125 = v72;
          v126 = 1025;
          *(_DWORD *)v127 = v73;
          *(_WORD *)&v127[4] = 1025;
          *(_DWORD *)&v127[6] = v74;
          *(_WORD *)&v127[10] = 2049;
          *(_QWORD *)&v127[12] = v75;
          *(_WORD *)&v127[20] = 2049;
          *(_QWORD *)&v127[22] = v76;
          LODWORD(v119) = 44;
          v77 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,initializeBaroKF,time,%{public}lf,baroKFInit,%{private}d,numBaroKFInnovTestsRejected,%{private}d,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf", &v124, v119);
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v77);
          if (v77 != (char *)buf)
            free(v77);
        }
        *((_DWORD *)v8 + 1) = 0;
      }
      v17 = vabdd_f64(*(double *)(a2 + 72), *(double *)a3);
      if (*(_BYTE *)(v7 + 96))
        v18 = v17;
      else
        v18 = 1.0;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v19 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v20 = *(_QWORD *)(a2 + 72);
        v21 = *((_QWORD *)v8 + 1);
        v22 = *((_QWORD *)v8 + 2);
        *(_DWORD *)buf = 134350081;
        v137 = v20;
        v138 = 2049;
        *(_QWORD *)v139 = v21;
        *(_WORD *)&v139[8] = 2049;
        *(_QWORD *)&v139[10] = v22;
        *(_WORD *)&v139[18] = 2049;
        *(_QWORD *)&v139[20] = 0x3FD0000000000000;
        *(_WORD *)&v139[28] = 2049;
        *(double *)&v139[30] = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,propagateP,time,%{public}lf,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf,kProcessNoiseBaroBias_pa2,%{private}.4lf,dt,%{private}.3lf", buf, 0x34u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v57 = *(_QWORD *)(a2 + 72);
        v58 = *((_QWORD *)v8 + 1);
        v59 = *((_QWORD *)v8 + 2);
        v124 = 134350081;
        v125 = v57;
        v126 = 2049;
        *(_QWORD *)v127 = v58;
        *(_WORD *)&v127[8] = 2049;
        *(_QWORD *)&v127[10] = v59;
        *(_WORD *)&v127[18] = 2049;
        *(_QWORD *)&v127[20] = 0x3FD0000000000000;
        *(_WORD *)&v127[28] = 2049;
        *(double *)&v127[30] = v18;
        LODWORD(v119) = 52;
        v60 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,propagateP,time,%{public}lf,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf,kProcessNoiseBaroBias_pa2,%{private}.4lf,dt,%{private}.3lf", &v124, v119);
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v60);
        if (v60 != (char *)buf)
          free(v60);
      }
      v23 = *((double *)v8 + 1);
      v24 = *((double *)v8 + 2) + v18 * 0.25;
      *((double *)v8 + 2) = v24;
      v25 = *(double *)(a2 + 136);
      v26 = v25 > 4.46 || v25 <= 0.0;
      v27 = *(double *)(a3 + 16) * *(double *)(a3 + 16) * 144.030962
          + 6.25
          + v25 * (v25 * 0.6125) * (v25 * (v25 * 0.6125));
      if (v26)
        v27 = *(double *)(a3 + 16) * *(double *)(a3 + 16) * 144.030962 + 6.25;
      v28 = *(double *)(a3 + 8) - v23;
      v29 = v24 + v27;
      if (*(_BYTE *)(v7 + 96))
      {
        v30 = v28 * (v28 * -0.5) / v29 + log(v24 + v27) * -0.5 + 2.99573227;
        if (v30 < -1.0)
          v30 = -1.0;
        *((double *)v8 + 3) = v30;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v31 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v32 = *(_QWORD *)(a2 + 72);
          v33 = *((_QWORD *)v8 + 3);
          *(_DWORD *)buf = 134349825;
          v137 = v32;
          v138 = 2049;
          *(_QWORD *)v139 = v33;
          *(_WORD *)&v139[8] = 2049;
          *(double *)&v139[10] = v28;
          *(_WORD *)&v139[18] = 2049;
          *(double *)&v139[20] = v29;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,Likelihood,time,%{public}lf,baroKFLikelihoodLog,%{private}.4lf,innov,%{private}.2lf,innovVar,%{private}.4lf", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v69 = *(_QWORD *)(a2 + 72);
          v70 = *((_QWORD *)v8 + 3);
          v124 = 134349825;
          v125 = v69;
          v126 = 2049;
          *(_QWORD *)v127 = v70;
          *(_WORD *)&v127[8] = 2049;
          *(double *)&v127[10] = v28;
          *(_WORD *)&v127[18] = 2049;
          *(double *)&v127[20] = v29;
          LODWORD(v119) = 42;
          v71 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,Likelihood,time,%{public}lf,baroKFLikelihoodLog,%{private}.4lf,innov,%{private}.2lf,innovVar,%{private}.4lf", &v124, v119);
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v71);
          if (v71 != (char *)buf)
            free(v71);
        }
      }
      if (fabs(v28 * v28 / v29) >= 2.0)
      {
        ++*((_DWORD *)v8 + 1);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v45 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v46 = *(_QWORD *)(a2 + 72);
          v47 = *((_QWORD *)v8 + 1);
          v48 = *((_QWORD *)v8 + 2);
          *(_DWORD *)buf = 134350081;
          v137 = v46;
          v138 = 2049;
          *(_QWORD *)v139 = v47;
          *(_WORD *)&v139[8] = 2049;
          *(double *)&v139[10] = v28;
          *(_WORD *)&v139[18] = 2049;
          *(_QWORD *)&v139[20] = v48;
          *(_WORD *)&v139[28] = 2049;
          *(double *)&v139[30] = v29;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,innovTests,time,%{public}lf,baroKFX_pa,%{private}.2lf,innov,%{private}.2lf,baroKFP_pa2,%{private}.4lf,innovVar,%{private}.4lf", buf, 0x34u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v82 = *(_QWORD *)(a2 + 72);
          v83 = *((_QWORD *)v8 + 1);
          v84 = *((_QWORD *)v8 + 2);
          v124 = 134350081;
          v125 = v82;
          v126 = 2049;
          *(_QWORD *)v127 = v83;
          *(_WORD *)&v127[8] = 2049;
          *(double *)&v127[10] = v28;
          *(_WORD *)&v127[18] = 2049;
          *(_QWORD *)&v127[20] = v84;
          *(_WORD *)&v127[28] = 2049;
          *(double *)&v127[30] = v29;
          LODWORD(v119) = 52;
          v85 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,innovTests,time,%{public}lf,baroKFX_pa,%{private}.2lf,innov,%{private}.2lf,baroKFP_pa2,%{private}.4lf,innovVar,%{private}.4lf", &v124, v119);
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v85);
          if (v85 != (char *)buf)
            free(v85);
        }
      }
      else
      {
        v34 = *((double *)v8 + 2);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v35 = qword_1022A0028;
        v36 = v34 / v29;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v37 = *(_QWORD *)(a2 + 72);
          v38 = *((_QWORD *)v8 + 1);
          v39 = *((_QWORD *)v8 + 2);
          *(_DWORD *)buf = 134350337;
          v137 = v37;
          v138 = 2049;
          *(_QWORD *)v139 = v38;
          *(_WORD *)&v139[8] = 2049;
          *(double *)&v139[10] = v28;
          *(_WORD *)&v139[18] = 2049;
          *(_QWORD *)&v139[20] = v39;
          *(_WORD *)&v139[28] = 2049;
          *(double *)&v139[30] = v29;
          *(_WORD *)&v139[38] = 2049;
          *(double *)&v139[40] = v36;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,kalmanGain,time,%{public}lf,baroKFX_pa,%{private}.2lf,innov,%{private}.2lf,baroKFP_pa2,%{private}.4lf,innovVar,%{private}.4lf,K,%{private}.4lf", buf, 0x3Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v78 = *(_QWORD *)(a2 + 72);
          v79 = *((_QWORD *)v8 + 1);
          v80 = *((_QWORD *)v8 + 2);
          v124 = 134350337;
          v125 = v78;
          v126 = 2049;
          *(_QWORD *)v127 = v79;
          *(_WORD *)&v127[8] = 2049;
          *(double *)&v127[10] = v28;
          *(_WORD *)&v127[18] = 2049;
          *(_QWORD *)&v127[20] = v80;
          *(_WORD *)&v127[28] = 2049;
          *(double *)&v127[30] = v29;
          *(_WORD *)&v127[38] = 2049;
          *(double *)&v127[40] = v36;
          LODWORD(v119) = 62;
          v81 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,kalmanGain,time,%{public}lf,baroKFX_pa,%{private}.2lf,innov,%{private}.2lf,baroKFP_pa2,%{private}.4lf,innovVar,%{private}.4lf,K,%{private}.4lf", &v124, v119);
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v81);
          if (v81 != (char *)buf)
            free(v81);
        }
        v40 = (1.0 - v36) * *((double *)v8 + 2);
        *((double *)v8 + 1) = *((double *)v8 + 1) + v36 * v28;
        *((double *)v8 + 2) = v40;
        if (COERCE__INT64(fabs(v40)) > 0x7FEFFFFFFFFFFFFFLL || v40 < 0.0001)
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v41 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v42 = *(_QWORD *)(a2 + 72);
            v43 = *((_QWORD *)v8 + 1);
            v44 = *((_QWORD *)v8 + 2);
            *(_DWORD *)buf = 134350081;
            v137 = v42;
            v138 = 2049;
            *(_QWORD *)v139 = v43;
            *(_WORD *)&v139[8] = 2049;
            *(double *)&v139[10] = v28;
            *(_WORD *)&v139[18] = 2049;
            *(_QWORD *)&v139[20] = v44;
            *(_WORD *)&v139[28] = 2049;
            *(double *)&v139[30] = v29;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,partialCovResetBaroKF,time,%{public}lf,baroKFX_pa,%{private}.2lf,innov,%{private}.2lf,baroKFP_pa2,%{private}.4lf,innovVar,%{private}.4lf", buf, 0x34u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
            v86 = *(_QWORD *)(a2 + 72);
            v87 = *((_QWORD *)v8 + 1);
            v88 = *((_QWORD *)v8 + 2);
            v124 = 134350081;
            v125 = v86;
            v126 = 2049;
            *(_QWORD *)v127 = v87;
            *(_WORD *)&v127[8] = 2049;
            *(double *)&v127[10] = v28;
            *(_WORD *)&v127[18] = 2049;
            *(_QWORD *)&v127[20] = v88;
            *(_WORD *)&v127[28] = 2049;
            *(double *)&v127[30] = v29;
            LODWORD(v119) = 52;
            v89 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,partialCovResetBaroKF,time,%{public}lf,baroKFX_pa,%{private}.2lf,innov,%{private}.2lf,baroKFP_pa2,%{private}.4lf,innovVar,%{private}.4lf", &v124, v119);
            sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v89);
            if (v89 != (char *)buf)
              free(v89);
          }
          *((_QWORD *)v8 + 1) = *(_QWORD *)(a3 + 8);
          *((_QWORD *)v8 + 2) = 0x408200FD8ADAB9F5;
        }
        *((_DWORD *)v8 + 1) = 0;
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v49 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v50 = *(_QWORD *)(a2 + 72);
        v51 = *((_QWORD *)v8 + 1);
        v52 = *((_QWORD *)v8 + 2);
        v53 = *(_QWORD *)(a3 + 8);
        v54 = *((_DWORD *)v8 + 1);
        v55 = *((_QWORD *)v8 + 3);
        v56 = *((_QWORD *)v8 + 4);
        *(_DWORD *)buf = 134351617;
        v137 = v50;
        v138 = 1025;
        *(_DWORD *)v139 = v10;
        *(_WORD *)&v139[4] = 2049;
        *(_QWORD *)&v139[6] = v51;
        *(_WORD *)&v139[14] = 2049;
        *(_QWORD *)&v139[16] = v52;
        *(_WORD *)&v139[24] = 2049;
        *(double *)&v139[26] = v28;
        *(_WORD *)&v139[34] = 2049;
        *(double *)&v139[36] = v29;
        *(_WORD *)&v139[44] = 2049;
        *(_QWORD *)&v139[46] = 0x4000000000000000;
        v140 = 2049;
        v141 = v53;
        v142 = 1025;
        v143 = v54;
        v144 = 2049;
        v145 = v55;
        v146 = 2049;
        v147 = v56;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,updtBaroKF,time,%{public}lf,kfIndex,%{private}d,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf,innov,%{private}.2lf,innovVar,%{private}.4lf,innovVarThres,%{private}.1lf,fBaroBiasUsingReferencePressure,%{private}.2lf,numBaroKFInnovTestsRejected,%{private}d,baroKFLikelihoodLog,%{private}.4lf,baroKFModeProbability,%{private}.4lf", buf, 0x68u);
      }
      a1 = sub_1001BFF7C(115, 2);
      if ((_DWORD)a1)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v61 = *(_QWORD *)(a2 + 72);
        v62 = *((_QWORD *)v8 + 1);
        v63 = *((_QWORD *)v8 + 2);
        v64 = *(_QWORD *)(a3 + 8);
        v65 = *((_DWORD *)v8 + 1);
        v66 = *((_QWORD *)v8 + 3);
        v67 = *((_QWORD *)v8 + 4);
        v124 = 134351617;
        v125 = v61;
        v126 = 1025;
        *(_DWORD *)v127 = v10;
        *(_WORD *)&v127[4] = 2049;
        *(_QWORD *)&v127[6] = v62;
        *(_WORD *)&v127[14] = 2049;
        *(_QWORD *)&v127[16] = v63;
        *(_WORD *)&v127[24] = 2049;
        *(double *)&v127[26] = v28;
        *(_WORD *)&v127[34] = 2049;
        *(double *)&v127[36] = v29;
        *(_WORD *)&v127[44] = 2049;
        *(_QWORD *)&v127[46] = 0x4000000000000000;
        v128 = 2049;
        v129 = v64;
        v130 = 1025;
        v131 = v65;
        v132 = 2049;
        v133 = v66;
        v134 = 2049;
        v135 = v67;
        LODWORD(v119) = 104;
        v68 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,updtBaroKF,time,%{public}lf,kfIndex,%{private}d,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf,innov,%{private}.2lf,innovVar,%{private}.4lf,innovVarThres,%{private}.1lf,fBaroBiasUsingReferencePressure,%{private}.2lf,numBaroKFInnovTestsRejected,%{private}d,baroKFLikelihoodLog,%{private}.4lf,baroKFModeProbability,%{private}.4lf", &v124, v119);
        a1 = sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v68);
        if (v68 != (char *)buf)
          free(v68);
      }
      ++v10;
      v8 += 48;
    }
    while (v8 != v122);
  }
  v90 = a5;
  if (*(_BYTE *)(v7 + 96))
  {
    v91 = *(double *)(a2 + 72);
    if (vabdd_f64(v91, *(double *)(v7 + 528)) > 180.0)
    {
      *(double *)(v7 + 528) = v91;
      v92 = *a5;
      v93 = a5[1];
      if (*a5 != v93)
      {
        do
        {
          v94 = log(*(long double *)(v92 + 32));
          *(long double *)(v92 + 32) = exp(v94 + *(double *)(v92 + 24));
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v95 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v96 = *(_QWORD *)(a2 + 72);
            v98 = *(_QWORD *)(v92 + 24);
            v97 = *(_QWORD *)(v92 + 32);
            v99 = *(_QWORD *)(v7 + 528);
            *(_DWORD *)buf = 134349825;
            v137 = v96;
            v138 = 2049;
            *(_QWORD *)v139 = v97;
            *(_WORD *)&v139[8] = 2049;
            *(_QWORD *)&v139[10] = v98;
            *(_WORD *)&v139[18] = 2049;
            *(_QWORD *)&v139[20] = v99;
            _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,updtModeProbBefore,likelihood,time,%{public}lf,baroKFModeProbability,%{private}.4lf,baroKFLikelihoodLog,%{private}.4lf,fTimeOfLastBaroBiasLikelihoodUpdate,%{private}.4lf", buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
            v100 = *(_QWORD *)(a2 + 72);
            v102 = *(_QWORD *)(v92 + 24);
            v101 = *(_QWORD *)(v92 + 32);
            v103 = *(_QWORD *)(v7 + 528);
            v124 = 134349825;
            v125 = v100;
            v126 = 2049;
            *(_QWORD *)v127 = v101;
            *(_WORD *)&v127[8] = 2049;
            *(_QWORD *)&v127[10] = v102;
            *(_WORD *)&v127[18] = 2049;
            *(_QWORD *)&v127[20] = v103;
            LODWORD(v119) = 42;
            v104 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,updtModeProbBefore,likelihood,time,%{public}lf,baroKFModeProbability,%{private}.4lf,baroKFLikelihoodLog,%{private}.4lf,fTimeOfLastBaroBiasLikelihoodUpdate,%{private}.4lf", &v124, v119);
            sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v104);
            if (v104 != (char *)buf)
              free(v104);
          }
          v92 += 48;
        }
        while (v92 != v93);
        v91 = *(double *)(a2 + 72);
        v90 = a5;
      }
      sub_10174AAEC(v7, v90, v91);
    }
  }
  v107 = v90;
  v105 = (double *)*v90;
  v106 = (double *)v107[1];
  v108 = 0xAAAAAAAAAAAAAAABLL * (((char *)v106 - (char *)v105) >> 4);
  if (v108 >= 2)
  {
    *(double *)(v7 + 104) = v105[4];
    *(_DWORD *)(v7 + 100) = 0;
  }
  v109 = a6;
  if (v105 != v106)
  {
    v110 = 0;
    do
    {
      sub_10174AED0(v105[1], v105[2] / 144.030962, v105[4], v105[5], a1, a2, a4, v109, v110);
      if ((v108 > 1 || *(_BYTE *)(v7 + 112)) && v105[4] > *(double *)(v7 + 104))
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v111 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v112 = *(_QWORD *)(a2 + 72);
          v113 = *(_QWORD *)(v7 + 104);
          v114 = *((_QWORD *)v105 + 4);
          *(_DWORD *)buf = 134349825;
          v137 = v112;
          v138 = 1025;
          *(_DWORD *)v139 = v110;
          *(_WORD *)&v139[4] = 2049;
          *(_QWORD *)&v139[6] = v113;
          *(_WORD *)&v139[14] = 2049;
          *(_QWORD *)&v139[16] = v114;
          _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,bestModeProb,time,%{public}lf,KF,%{private}d,bestKFModeProb,%{private}.4lf,baroKFModeProbability,%{private}.4lf", buf, 0x26u);
        }
        a1 = sub_1001BFF7C(115, 2);
        if ((_DWORD)a1)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v115 = *(_QWORD *)(a2 + 72);
          v116 = *(_QWORD *)(v7 + 104);
          v117 = *((_QWORD *)v105 + 4);
          v124 = 134349825;
          v125 = v115;
          v126 = 1025;
          *(_DWORD *)v127 = v110;
          *(_WORD *)&v127[4] = 2049;
          *(_QWORD *)&v127[6] = v116;
          *(_WORD *)&v127[14] = 2049;
          *(_QWORD *)&v127[16] = v117;
          LODWORD(v119) = 38;
          v118 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,bestModeProb,time,%{public}lf,KF,%{private}d,bestKFModeProb,%{private}.4lf,baroKFModeProbability,%{private}.4lf", &v124, v119);
          a1 = sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v118);
          if (v118 != (char *)buf)
            free(v118);
        }
        *(_DWORD *)(v7 + 100) = v110;
        *(double *)(v7 + 104) = v105[4];
        v109 = a6;
      }
      ++v110;
      v105 += 6;
    }
    while (v105 != v106);
  }
}

BOOL sub_101749658(uint64_t a1, uint64_t a2, double *a3, double *a4, double *a5, double *a6, _QWORD *a7, double *a8)
{
  double v10;
  unint64_t v11;
  _BOOL8 result;
  NSObject *v15;
  double v16;
  uint64_t v17;
  NSObject *v18;
  _BOOL4 v19;
  uint8_t *v20;
  double v21;
  uint64_t v22;
  int v23;
  double v24;
  __int16 v25;
  uint64_t v26;
  uint8_t buf[4];
  double v28;
  __int16 v29;
  uint64_t v30;

  if (*a8 <= 2.22044605e-16 || *(double *)(a2 + 184) <= 2.22044605e-16)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v16 = *a8;
      v17 = *(_QWORD *)(a2 + 184);
      *(_DWORD *)buf = 134349312;
      v28 = v16;
      v29 = 2050;
      v30 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,not DEM calibrated or no odometer data ever received,calTime,%{public}lf,odomTime,%{public}lf,", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v21 = *a8;
      v22 = *(_QWORD *)(a2 + 184);
      v23 = 134349312;
      v24 = v21;
      v25 = 2050;
      v26 = v22;
      v20 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,not DEM calibrated or no odometer data ever received,calTime,%{public}lf,odomTime,%{public}lf,", &v23, 22);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeDEMCalibratedAlt(CLBaroAltEstimatorInput &, const double &, const double &, double &, double &, CFTimeInterval &, const CFTimeInterval &)", "%s\n");
      goto LABEL_28;
    }
  }
  else
  {
    *a5 = *a3 + *(double *)(a2 + 168);
    v10 = (*(double *)(a2 + 64) - *a8) * 0.000555555556 * ((*(double *)(a2 + 64) - *a8) * 0.000555555556)
        + *a4 * *a4
        + 0.25
        + (*(double *)(a2 + 64) - *(double *)(a2 + 184)) * 0.2;
    v11 = (unint64_t)(COERCE__INT64(fabs(v10)) - 0x10000000000000) >> 53;
    if (*(uint64_t *)&v10 > -1 && v11 < 0x3FF || (unint64_t)(*(_QWORD *)&v10 - 1) < 0xFFFFFFFFFFFFFLL)
    {
      *a6 = sqrt(v10);
      *a7 = *(_QWORD *)(a2 + 184);
      return 1;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v18 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "BaroAlt,#Warning,calibratedAltitudeVariance unexpectedly negative", buf, 2u);
    }
    v19 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v19)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      LOWORD(v23) = 0;
      v20 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "BaroAlt,#Warning,calibratedAltitudeVariance unexpectedly negative", &v23, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLBarometricAltimeterCore::computeDEMCalibratedAlt(CLBaroAltEstimatorInput &, const double &, const double &, double &, double &, CFTimeInterval &, const CFTimeInterval &)", "%s\n");
LABEL_28:
      if (v20 != buf)
        free(v20);
      return 0;
    }
  }
  return result;
}

uint64_t sub_101749A14(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, long double *a5, _QWORD *a6)
{
  uint64_t *v12;
  double v13;
  double v14;
  double v16;
  double v17;
  double v18;
  double v19;
  double v21;
  double v22;
  double v23;
  NSObject *v24;
  uint64_t v25;
  double v26;
  uint64_t result;
  NSObject *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  char *v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  double v50;
  int v51;
  uint64_t v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  uint8_t buf[4];
  uint64_t v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;

  v12 = (uint64_t *)(a2 + 64);
  v13 = *(double *)(a2 + 64);
  v14 = fabs(v13);
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 <= 2.22044605e-16)
  {
    v16 = 315360000.0;
  }
  else
  {
    v17 = *(double *)(a2 + 80);
    v18 = fabs(v17);
    v19 = vabdd_f64(v13, v17);
    if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v18 <= 2.22044605e-16)
      v16 = 315360000.0;
    else
      v16 = v19;
  }
  v21 = sub_1000B6F08(a1, (double *)(a2 + 64));
  v22 = 0.0;
  if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v21) > 2.22044605e-16)
  {
    v23 = vabdd_f64(v21, *(double *)a3);
    if (fabs(*(double *)a3) <= 2.22044605e-16)
      v23 = 0.0;
    if ((*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      v22 = v23;
    else
      v22 = 0.0;
  }
  v50 = v22;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v24 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v25 = *v12;
    v26 = *(double *)(a3 + 8);
    *(_DWORD *)buf = 134349825;
    v68 = v25;
    v69 = 2049;
    v70 = v16;
    v71 = 2050;
    v72 = v22;
    v73 = 2050;
    v74 = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "BaroAlt,check ReferencePressure,time,%{public}lf,timeSinceLastReferencePressureQuery,%{private}lf,timeSinceLastReferencePressureCompensatedBaroBiasComputation,%{public}lf,fBaroBiasUsingReferencePressure,%{public}lf", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v37 = *v12;
    v38 = *(double *)(a3 + 8);
    v51 = 134349825;
    v52 = v37;
    v53 = 2049;
    v54 = v16;
    v55 = 2050;
    v56 = v22;
    v57 = 2050;
    v58 = v38;
    v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,check ReferencePressure,time,%{public}lf,timeSinceLastReferencePressureQuery,%{private}lf,timeSinceLastReferencePressureCompensatedBaroBiasComputation,%{public}lf,fBaroBiasUsingReferencePressure,%{public}lf", &v51, 42);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeReferencePressureCompensatedAlt(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, double &, double &, CFTimeInterval &, const CLDaemonLocation &)", "%s\n", v39);
    if (v39 != (char *)buf)
      free(v39);
  }
  result = 0;
  if (v16 > 0.0 && v16 < 900.0)
  {
    *a4 = log(*(double *)(a2 + 96) / (*(double *)(a2 + 264) - *(double *)(a3 + 8))) * 8442.795;
    *a6 = *(_QWORD *)(a2 + 256);
    result = sub_101749F78(a1, a2, (double *)a3, a4, a5, &v50);
    if ((_DWORD)result)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v28 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v29 = *(_QWORD *)(a2 + 64);
        v30 = *(double *)(a2 + 264);
        v32 = *(double *)a3;
        v31 = *(double *)(a3 + 8);
        v34 = *(_QWORD *)(a3 + 16);
        v33 = *(_QWORD *)(a3 + 24);
        v35 = *(_QWORD *)(a3 + 32);
        v36 = *(_QWORD *)(a2 + 280);
        *(_DWORD *)buf = 134350849;
        v68 = v29;
        v69 = 2050;
        v70 = v31;
        v71 = 2050;
        v72 = v30;
        v73 = 2049;
        v74 = v32;
        v75 = 2049;
        v76 = v33;
        v77 = 2049;
        v78 = v34;
        v79 = 2049;
        v80 = v35;
        v81 = 2049;
        v82 = v36;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "BaroAlt,calibrated,using ReferencePressure,time,%{public}.3lf,fBaroBiasUsingReferencePressure,%{public}.3lf,measuredPressure,%{public}.3lf,fTimeOfLastBaroBiasUsingReferencePressure,%{private}.3lf,baroBiasCFAbsoluteTime_s,%{private}.3lf,referencePressureCompensatedCalibrationUnc,%{private}.3lf, baroBiasModeProbability,%{private}.3lf,lastAltitudeDataPressureTempAtCalib_C,%{private}.3lf", buf, 0x52u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v40 = *(_QWORD *)(a2 + 64);
        v41 = *(double *)(a2 + 264);
        v43 = *(double *)a3;
        v42 = *(double *)(a3 + 8);
        v45 = *(_QWORD *)(a3 + 16);
        v44 = *(_QWORD *)(a3 + 24);
        v46 = *(_QWORD *)(a3 + 32);
        v47 = *(_QWORD *)(a2 + 280);
        v51 = 134350849;
        v52 = v40;
        v53 = 2050;
        v54 = v42;
        v55 = 2050;
        v56 = v41;
        v57 = 2049;
        v58 = v43;
        v59 = 2049;
        v60 = v44;
        v61 = 2049;
        v62 = v45;
        v63 = 2049;
        v64 = v46;
        v65 = 2049;
        v66 = v47;
        LODWORD(v49) = 82;
        v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,calibrated,using ReferencePressure,time,%{public}.3lf,fBaroBiasUsingReferencePressure,%{public}.3lf,measuredPressure,%{public}.3lf,fTimeOfLastBaroBiasUsingReferencePressure,%{private}.3lf,baroBiasCFAbsoluteTime_s,%{private}.3lf,referencePressureCompensatedCalibrationUnc,%{private}.3lf, baroBiasModeProbability,%{private}.3lf,lastAltitudeDataPressureTempAtCalib_C,%{private}.3lf", &v51, v49);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeReferencePressureCompensatedAlt(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, double &, double &, CFTimeInterval &, const CLDaemonLocation &)", "%s\n", v48);
        if (v48 != (char *)buf)
          free(v48);
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_101749F78(uint64_t a1, uint64_t a2, double *a3, double *a4, long double *a5, double *a6)
{
  double v6;
  BOOL v8;
  uint64_t v9;
  char v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  NSObject *v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  NSObject *v28;
  double v29;
  uint64_t v30;
  double v31;
  NSObject *v32;
  double v35;
  long double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v42;
  NSObject *v43;
  double v44;
  uint64_t v45;
  double v46;
  char *v47;
  double v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  char *v52;
  double v53;
  uint64_t v54;
  double v55;
  char *v56;
  double v57;
  uint64_t v58;
  double v59;
  char *v60;
  uint64_t v61;
  int v62;
  double v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  uint64_t v73;
  uint8_t buf[4];
  double v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;
  __int16 v84;
  uint64_t v85;

  if (*a6 <= 3628800.0)
    v6 = a3[2] * a3[2] + 0.25;
  else
    v6 = a3[2] * a3[2] + 0.25 + (*a6 + -3628800.0) * 0.000000413359788;
  v8 = (((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF || v6 < 0.0)
    && (unint64_t)(*(_QWORD *)&v6 - 1) >= 0xFFFFFFFFFFFFFLL;
  v9 = !v8;
  if (v8)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v32 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v75 = v6;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,ReferencePressure compensated computedAltVar_m2 is invalid,%{public}.3lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v62 = 134349056;
      v63 = v6;
      v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,ReferencePressure compensated computedAltVar_m2 is invalid,%{public}.3lf", &v62, 12);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeReferencePressureAltitudeUncertainty(const CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, const double &, double &, const CFTimeInterval &, const CLDaemonLocation &)", "%s\n", v47);
      if (v47 != (char *)buf)
        free(v47);
    }
  }
  else
  {
    *a5 = sqrt(v6);
    if (!*(_BYTE *)(a1 + 113))
    {
      v35 = *(double *)(a2 + 104);
      v36 = exp(*(double *)(a2 + 120) / -8442.795);
      v37 = hypot(*(long double *)(a2 + 128), v35 * v36 * 0.083324376);
      a3[2] = v37;
      if (*a5 >= v37)
        v37 = *a5;
      *a5 = v37;
      v38 = *(double *)(a2 + 72);
      if ((*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v38) > 2.22044605e-16)
      {
        v39 = fabs(*a3);
        v40 = vabdd_f64(v38, *a3);
        v41 = v39 > 2.22044605e-16 && (*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        v42 = v41 ? v40 : 0.0;
        if ((*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v39 > 2.22044605e-16 && v42 > 3628800.0)
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v43 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v44 = *(double *)(a2 + 64);
            v45 = *(_QWORD *)(a2 + 120);
            v46 = *a5;
            *(_DWORD *)buf = 134350081;
            v75 = v44;
            v76 = 2049;
            v77 = v45;
            v78 = 2049;
            v79 = v46;
            v80 = 2049;
            v81 = v42;
            v82 = 2049;
            v83 = (v42 + -3628800.0) * 0.000000826719577;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,UncModel,uncChangeByTime,time,%{public}.3lf,calibrationSourceAlt_m,%{private}.3lf,computedAltUnc_m,%{private}.3lf,timeToLastBiasComputationCfAbsTime_s,%{private}.3lf,uncertaintyChange,%{private}.3lf", buf, 0x34u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
            v57 = *(double *)(a2 + 64);
            v58 = *(_QWORD *)(a2 + 120);
            v59 = *a5;
            v62 = 134350081;
            v63 = v57;
            v64 = 2049;
            v65 = v58;
            v66 = 2049;
            v67 = v59;
            v68 = 2049;
            v69 = v42;
            v70 = 2049;
            v71 = (v42 + -3628800.0) * 0.000000826719577;
            v60 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,UncModel,uncChangeByTime,time,%{public}.3lf,calibrationSourceAlt_m,%{private}.3lf,computedAltUnc_m,%{private}.3lf,timeToLastBiasComputationCfAbsTime_s,%{private}.3lf,uncertaintyChange,%{private}.3lf", &v62, 52);
            sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeReferencePressureAltitudeUncertainty(const CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, const double &, double &, const CFTimeInterval &, const CLDaemonLocation &)", "%s\n", v60);
            if (v60 != (char *)buf)
              free(v60);
          }
          *a5 = hypot(*a5, (v42 + -3628800.0) * 0.000000826719577);
        }
      }
    }
    v13 = *(_BYTE *)(a2 + 176);
    if (!v13)
    {
      v14 = *(double *)(a2 + 280);
      if (v14 != 0.0)
      {
        v13 = 0;
        v15 = *(double *)(a2 + 272);
        if (v15 != 0.0)
        {
          v16 = vabdd_f64(v14, v15);
          if (v16 <= 35.0)
            v17 = v16 * 0.2;
          else
            v17 = 7.0;
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v18 = v14 - v15;
          v19 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v20 = *(double *)(a2 + 64);
            v22 = *(double *)(a2 + 272);
            v21 = *(_QWORD *)(a2 + 280);
            v23 = *(_QWORD *)(a2 + 288);
            *(_DWORD *)buf = 134350337;
            v75 = v20;
            v76 = 2049;
            v77 = v21;
            v78 = 2049;
            v79 = v22;
            v80 = 2049;
            v81 = v18;
            v82 = 2049;
            v83 = v17;
            v84 = 2049;
            v85 = v23;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,UncModel,uncChangeByTemp,time,%{public}.3lf,lastAltitudeDataPressureTempAtCalib_C,%{private}.3lf,lastAltitudeDataPressureTemp_C,%{private}.3lf,temperatureChange_C,%{private}.3lf,uncertaintyChange,%{private}.3lf,outdoorProbability,%{private}.3lf", buf, 0x3Eu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
            v48 = *(double *)(a2 + 64);
            v50 = *(double *)(a2 + 272);
            v49 = *(_QWORD *)(a2 + 280);
            v51 = *(_QWORD *)(a2 + 288);
            v62 = 134350337;
            v63 = v48;
            v64 = 2049;
            v65 = v49;
            v66 = 2049;
            v67 = v50;
            v68 = 2049;
            v69 = v18;
            v70 = 2049;
            v71 = v17;
            v72 = 2049;
            v73 = v51;
            LODWORD(v61) = 62;
            v52 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,UncModel,uncChangeByTemp,time,%{public}.3lf,lastAltitudeDataPressureTempAtCalib_C,%{private}.3lf,lastAltitudeDataPressureTemp_C,%{private}.3lf,temperatureChange_C,%{private}.3lf,uncertaintyChange,%{private}.3lf,outdoorProbability,%{private}.3lf", &v62, v61);
            sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeReferencePressureAltitudeUncertainty(const CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, const double &, double &, const CFTimeInterval &, const CLDaemonLocation &)", "%s\n", v52);
            if (v52 != (char *)buf)
              free(v52);
          }
          *a5 = sqrt(v17 * v17 + *a5 * *a5);
          v13 = *(_BYTE *)(a2 + 176) != 0;
        }
      }
      if ((v13 & 1) == 0)
      {
        v24 = *(double *)(a2 + 160);
        if (v24 != 0.0)
        {
          v25 = *a4 - v24;
          v26 = fabs(v25);
          if (v26 > 10.0)
          {
            if (v26 <= 585.4)
              v27 = v26 * 0.02;
            else
              v27 = 11.708;
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
            v28 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
            {
              v29 = *(double *)(a2 + 64);
              v30 = *(_QWORD *)(a2 + 120);
              v31 = *a4;
              *(_DWORD *)buf = 134350081;
              v75 = v29;
              v76 = 2049;
              v77 = v30;
              v78 = 2049;
              v79 = v31;
              v80 = 2049;
              v81 = v25;
              v82 = 2049;
              v83 = v27;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,UncModel,uncChangeByAlt,time,%{public}.3lf,calibrationSourceAlt_m,%{private}.3lf,altitude,%{private}.3lf,altitudeFromGroundChange_m,%{private}.3lf,uncertaintyChange,%{private}.3lf", buf, 0x34u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
              v53 = *(double *)(a2 + 64);
              v54 = *(_QWORD *)(a2 + 120);
              v55 = *a4;
              v62 = 134350081;
              v63 = v53;
              v64 = 2049;
              v65 = v54;
              v66 = 2049;
              v67 = v55;
              v68 = 2049;
              v69 = v25;
              v70 = 2049;
              v71 = v27;
              LODWORD(v61) = 52;
              v56 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,UncModel,uncChangeByAlt,time,%{public}.3lf,calibrationSourceAlt_m,%{private}.3lf,altitude,%{private}.3lf,altitudeFromGroundChange_m,%{private}.3lf,uncertaintyChange,%{private}.3lf", &v62, v61);
              sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeReferencePressureAltitudeUncertainty(const CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, const double &, double &, const CFTimeInterval &, const CLDaemonLocation &)", "%s\n", v56);
              if (v56 != (char *)buf)
                free(v56);
            }
            *a5 = sqrt(v27 * v27 + *a5 * *a5);
          }
        }
      }
    }
  }
  return v9;
}

void sub_10174A88C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint8_t buf[4];
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;

  *a3 = *a4;
  a3[1] = *a5;
  a3[2] = *a7;
  *(_QWORD *)(a2 + 280) = *a6;
  a3[3] = *a8;
  a3[4] = *a9;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v12 = *a3;
    v13 = a3[1];
    v14 = *(_QWORD *)(a2 + 280);
    v15 = a3[2];
    v16 = a3[3];
    v17 = a3[4];
    *(_DWORD *)buf = 134350337;
    v38 = v12;
    v39 = 2050;
    v40 = v13;
    v41 = 2050;
    v42 = v14;
    v43 = 2050;
    v44 = v15;
    v45 = 2049;
    v46 = v16;
    v47 = 2049;
    v48 = v17;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BaroAlt,disk,injected,fTimeOfLastBaroBiasUsingReferencePressure,%{public}.3lf,fBaroBiasUsingReferencePressure,%{public}.3lf,fDeviceBarometerTemperatureAtCalib_C,%{public}.2lf,fReferencePressureCompensatedCalibrationUnc,%{public}.2lf,baroBiasCFAbsoluteTime_s,%{private}.3lf,baroBiasModeProbability,%{private}.3lf", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v18 = *a3;
    v19 = a3[1];
    v20 = *(_QWORD *)(a2 + 280);
    v21 = a3[2];
    v22 = a3[3];
    v23 = a3[4];
    v25 = 134350337;
    v26 = v18;
    v27 = 2050;
    v28 = v19;
    v29 = 2050;
    v30 = v20;
    v31 = 2050;
    v32 = v21;
    v33 = 2049;
    v34 = v22;
    v35 = 2049;
    v36 = v23;
    v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,disk,injected,fTimeOfLastBaroBiasUsingReferencePressure,%{public}.3lf,fBaroBiasUsingReferencePressure,%{public}.3lf,fDeviceBarometerTemperatureAtCalib_C,%{public}.2lf,fReferencePressureCompensatedCalibrationUnc,%{public}.2lf,baroBiasCFAbsoluteTime_s,%{private}.3lf,baroBiasModeProbability,%{private}.3lf", &v25, 62);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::injectLatestBaroBiasInfoToBaroAltInOut(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, const CFAbsoluteTime &, const double &, const double &, const double &, const CFAbsoluteTime &, const double &)", "%s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
}

void sub_10174AAEC(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  long double v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  double v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v8 = 0.0;
    do
    {
      v9 = *(double *)(v3 + 32);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v11 = *(_QWORD *)(v3 + 32);
        *(_DWORD *)buf = 134349313;
        v36 = a3;
        v37 = 2049;
        v38 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,baroKFModeProbability,time,%{public}.4lf,baroKFModeProbability,%{private}.4lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v12 = *(_QWORD *)(v3 + 32);
        v27 = 134349313;
        v28 = a3;
        v29 = 2049;
        v30 = v12;
        LODWORD(v26) = 22;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,baroKFModeProbability,time,%{public}.4lf,baroKFModeProbability,%{private}.4lf", &v27, v26);
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::renormalizeModeProbOfBaroBiasMMKF(CFAbsoluteTime, std::vector<BarometricBiasMMKF> &)", "%s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
      v8 = v8 + v9;
      v3 += 48;
    }
    while (v3 != v4);
    v14 = *a2;
    v15 = a2[1];
    if (*a2 != v15)
    {
      v16 = log(v8);
      do
      {
        v17 = log(*(long double *)(v14 + 32));
        *(long double *)(v14 + 32) = exp(v17 - v16);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v18 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v20 = *(_QWORD *)(v14 + 24);
          v19 = *(_QWORD *)(v14 + 32);
          v21 = *(_QWORD *)(a1 + 528);
          *(_DWORD *)buf = 134349825;
          v36 = a3;
          v37 = 2049;
          v38 = v19;
          v39 = 2049;
          v40 = v20;
          v41 = 2049;
          v42 = v21;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,updtModeProbAfter,likelihood,time,%{public}lf,baroKFModeProbability,%{private}.4lf,baroKFLikelihoodLog,%{private}.4lf,fTimeOfLastBaroBiasLikelihoodUpdate,%{private}.3lf", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          v23 = *(_QWORD *)(v14 + 24);
          v22 = *(_QWORD *)(v14 + 32);
          v24 = *(_QWORD *)(a1 + 528);
          v27 = 134349825;
          v28 = a3;
          v29 = 2049;
          v30 = v22;
          v31 = 2049;
          v32 = v23;
          v33 = 2049;
          v34 = v24;
          LODWORD(v26) = 42;
          v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,updtModeProbAfter,likelihood,time,%{public}lf,baroKFModeProbability,%{private}.4lf,baroKFLikelihoodLog,%{private}.4lf,fTimeOfLastBaroBiasLikelihoodUpdate,%{private}.3lf", &v27, v26);
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::renormalizeModeProbOfBaroBiasMMKF(CFAbsoluteTime, std::vector<BarometricBiasMMKF> &)", "%s\n", v25);
          if (v25 != (char *)buf)
            free(v25);
        }
        v14 += 48;
      }
      while (v14 != v15);
    }
  }
}

void sub_10174AED0(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8, int a9)
{
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  uint64_t v63;
  _BYTE buf[40];
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  uint64_t v77;

  v15 = a7[5];
  if ((int)v15 <= a9)
  {
    if ((int)v15 >= a8)
    {
      ++a7[4];
      a7[5] = v15 - 1;
      sub_1004CE138((uint64_t)a7, 1);
    }
    *(_QWORD *)buf = *(_QWORD *)(a6 + 72);
    *(double *)&buf[8] = a1;
    *(double *)&buf[16] = a2;
    *(double *)&buf[24] = a3;
    *(double *)&buf[32] = a4;
    sub_101743DA8(a7, (uint64_t)buf);
  }
  else
  {
    v17 = a7[4] + a9;
    v18 = *(_QWORD *)(a7[1] + 8 * (v17 / 0x66));
    v19 = v17 % 0x66;
    v20 = *(double *)(v18 + 40 * v19 + 16);
    if (v20 > a2
      || ((v21 = *(double *)(v18 + 40 * v19 + 24), v22 = vabdd_f64(v20, a2), v21 <= a3) ? (v23 = v22 < 0.25) : (v23 = 0),
          !v23 || vabdd_f64(v21, a3) >= 0.2))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v24 = a9;
      v25 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v26 = (_QWORD *)(*(_QWORD *)(a7[1] + 8 * ((a7[4] + v24) / 0x66uLL)) + 40 * ((a7[4] + v24) % 0x66uLL));
        v27 = v26[1];
        v28 = v26[2];
        v30 = v26[3];
        v29 = v26[4];
        v31 = *(_QWORD *)(a6 + 64);
        v32 = *(_QWORD *)(a6 + 72);
        *(_DWORD *)buf = 134351616;
        *(_QWORD *)&buf[4] = v31;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v15;
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = v27;
        *(_WORD *)&buf[28] = 2050;
        *(_QWORD *)&buf[30] = v28;
        *(_WORD *)&buf[38] = 2050;
        v65 = v30;
        v66 = 2050;
        v67 = v29;
        v68 = 2050;
        v69 = a1;
        v70 = 2050;
        v71 = a2;
        v72 = 2050;
        v73 = a3;
        v74 = 2050;
        v75 = a4;
        v76 = 2050;
        v77 = v32;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,disk,updateBi,time,%{public}lf,fBaroBiasHistory,size,%{public}d,kPrevBaroAltBaroBias_pa,%{public}.2lf,kPrevBaroAltBaroBiasUnc_m,%{public}.2lf,kPrevBaroAltBaroBiasModeProb,%{public}.4lf,kPrevBaroAltDevPresTemp_C,%{public}.3lf,kBaroAltBaroBias_pa,%{public}.2lf,kBaroAltBaroBiasUnc_m,%{public}.2lf,kBaroAltBaroBiasModeProb,%{public}.4lf,devPresTemp_C,%{public}.3lf,kBaroAltBaroBiasCFAbsTime_s,%{public}lf", buf, 0x6Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v34 = (_QWORD *)(*(_QWORD *)(a7[1] + 8 * ((a7[4] + v24) / 0x66uLL)) + 40 * ((a7[4] + v24) % 0x66uLL));
        v35 = v34[1];
        v36 = v34[2];
        v38 = v34[3];
        v37 = v34[4];
        v39 = *(_QWORD *)(a6 + 64);
        v40 = *(_QWORD *)(a6 + 72);
        v42 = 134351616;
        v43 = v39;
        v44 = 1026;
        v45 = v15;
        v46 = 2050;
        v47 = v35;
        v48 = 2050;
        v49 = v36;
        v50 = 2050;
        v51 = v38;
        v52 = 2050;
        v53 = v37;
        v54 = 2050;
        v55 = a1;
        v56 = 2050;
        v57 = a2;
        v58 = 2050;
        v59 = a3;
        v60 = 2050;
        v61 = a4;
        v62 = 2050;
        v63 = v40;
        v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,disk,updateBi,time,%{public}lf,fBaroBiasHistory,size,%{public}d,kPrevBaroAltBaroBias_pa,%{public}.2lf,kPrevBaroAltBaroBiasUnc_m,%{public}.2lf,kPrevBaroAltBaroBiasModeProb,%{public}.4lf,kPrevBaroAltDevPresTemp_C,%{public}.3lf,kBaroAltBaroBias_pa,%{public}.2lf,kBaroAltBaroBiasUnc_m,%{public}.2lf,kBaroAltBaroBiasModeProb,%{public}.4lf,devPresTemp_C,%{public}.3lf,kBaroAltBaroBiasCFAbsTime_s,%{public}lf", &v42, 108);
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::prepareBaroBiasToDisk(const CLBaroAltEstimatorInput &, const double, const double, const double, const double, std::deque<BaroBiasEstimate> &, const int, const int)", "%s\n", v41);
        if (v41 != buf)
          free(v41);
      }
      v33 = *(_QWORD *)(a7[1] + 8 * ((a7[4] + v24) / 0x66uLL)) + 40 * ((a7[4] + v24) % 0x66uLL);
      *(_QWORD *)v33 = *(_QWORD *)(a6 + 72);
      *(double *)(v33 + 8) = a1;
      *(double *)(v33 + 16) = a2;
      *(double *)(v33 + 24) = a3;
      *(double *)(v33 + 32) = a4;
    }
  }
}

void sub_10174B2FC(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_10174B328(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10174B5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10174B63C(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 51;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 102;
LABEL_7:
    a1[4] = v8;
  }
  sub_10174B6DC(a1);
  result = sub_10174B80C((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10174B6DC(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_1004CE138((uint64_t)a1, 0);
    sub_1004CE194(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_10174B74C((uint64_t)a1);
}

void sub_10174B74C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_10174B80C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_10174B74C(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_10174BA78(uint64_t a1, void *a2)
{
  unsigned int v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t i;
  NSObject *v10;
  double v11;
  uint8_t *v12;
  uint8_t *v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t j;
  int v17;
  const char *v18;
  uint8_t *v19;
  double v20;
  uint8_t *v21;
  uint64_t v22;
  __int16 v23[6];
  int v24;
  int v25[4];
  uint8_t buf[4];
  int v27;

  if (!a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#gnssca,onVisit is nil", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    LOWORD(v25[0]) = 0;
    v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssca,onVisit is nil", v25, 2);
    v13 = v12;
    sub_100512490("Generic", 1, 0, 0, "void CLGnssAWD::onVisit(const CLVisit *)", "%s\n", v11);
LABEL_51:
    if (v13 != buf)
      free(v13);
    return;
  }
  v3 = objc_msgSend(a2, "hasDepartureDate");
  if (*(unsigned __int8 *)(a1 + 2296) == v3)
    return;
  *(_BYTE *)(a1 + 2296) = v3;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 2296);
    *(_DWORD *)buf = 67174657;
    v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssca,onVisit,received leeched visit notification, %{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v17 = *(unsigned __int8 *)(a1 + 2296);
    v25[0] = 67174657;
    v25[1] = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,onVisit,received leeched visit notification, %{private}d", v25, 8);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::onVisit(const CLVisit *)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (*(_BYTE *)(a1 + 2316))
    v6 = 2;
  else
    v6 = 4;
  if (*(_BYTE *)(a1 + 2316))
    v7 = 1;
  else
    v7 = 3;
  v24 = v7;
  v25[0] = v6;
  if (!sub_1001F8DEC((_QWORD *)(a1 + 2208), v25) || !sub_1001F8DEC((_QWORD *)(a1 + 2208), &v24))
  {
    if (!*(_BYTE *)(a1 + 2402))
      return;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#gnssca,onVisit,visit context unsupported", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v23[0] = 0;
    LODWORD(v22) = 2;
    v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,onVisit,visit context unsupported", v23, v22);
    v13 = v21;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::onVisit(const CLVisit *)", "%s\n", v20);
    goto LABEL_51;
  }
  if (*(_BYTE *)(a1 + 2296))
  {
    v8 = sub_1001F8DEC((_QWORD *)(a1 + 2208), v25);
    if (v8)
    {
      for (i = v8[5]; i; i = *(_QWORD *)i)
      {
        if (sub_1001F89A4(a1, v25[0], *(_DWORD *)(i + 16)))
          sub_1001F7974(a1, v24, *(_DWORD *)(i + 16));
      }
      return;
    }
LABEL_53:
    sub_100263950("unordered_map::at: key not found");
  }
  v15 = sub_1001F8DEC((_QWORD *)(a1 + 2208), &v24);
  if (!v15)
    goto LABEL_53;
  for (j = v15[5]; j; j = *(_QWORD *)j)
  {
    if (sub_1001F89A4(a1, v24, *(_DWORD *)(j + 16)))
      sub_1001F7974(a1, v25[0], *(_DWORD *)(j + 16));
  }
}

void sub_10174BF90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  char v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  BOOL v12[16];
  uint8_t buf[8];
  _BYTE v14[24];
  __int128 v15;
  __int128 v16;
  _BYTE v17[28];
  __int128 *v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  _BYTE *v34;
  _BYTE v35[48];
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int16 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int16 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  char v81;
  __int128 v82;
  _BYTE v83[52];
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v3 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_WORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 848) = -1;
  *(_QWORD *)(a1 + 840) = -1;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_WORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_BYTE *)(a1 + 992) = 0;
  *(_OWORD *)(a1 + 996) = xmmword_101CDB950;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 1028) = 0;
  *(_WORD *)(a1 + 1032) = 0;
  *(_DWORD *)(a1 + 1067) = 0;
  *(_OWORD *)(a1 + 1036) = 0u;
  *(_OWORD *)(a1 + 1052) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_QWORD *)(a1 + 1104) = 0xFFFFFFFF00000000;
  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_QWORD *)(a1 + 1112) = -1;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1128) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1136) = 0xFFFFFFFF00000001;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_QWORD *)(a1 + 1160) = -1;
  *(_QWORD *)(a1 + 1168) = -1;
  *(_QWORD *)(a1 + 1176) = -1;
  *(_QWORD *)(a1 + 1184) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_QWORD *)(a1 + 1192) = a1 + 1200;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_QWORD *)(a1 + 1216) = a1 + 1224;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_QWORD *)(a1 + 1240) = a1 + 1248;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_QWORD *)(a1 + 1264) = a1 + 1272;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_QWORD *)(a1 + 1288) = a1 + 1296;
  *(_QWORD *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_QWORD *)(a1 + 1344) = -1;
  *(_QWORD *)(a1 + 1352) = -1;
  *(_DWORD *)(a1 + 1360) = -1;
  *(_QWORD *)(a1 + 1368) = 0;
  *(_DWORD *)(a1 + 1376) = 0;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_DWORD *)(a1 + 1400) = 0;
  *(_OWORD *)(a1 + 1404) = v4;
  *(_OWORD *)(a1 + 1420) = v4;
  *(_OWORD *)(a1 + 1436) = v4;
  *(_OWORD *)(a1 + 1452) = v4;
  *(_OWORD *)(a1 + 1468) = v4;
  *(_OWORD *)(a1 + 1484) = v4;
  *(_OWORD *)(a1 + 1500) = v4;
  *(_OWORD *)(a1 + 1516) = v4;
  *(_OWORD *)(a1 + 1532) = v4;
  *(_OWORD *)(a1 + 1548) = v4;
  *(_DWORD *)(a1 + 1564) = -1;
  *(_QWORD *)(a1 + 1568) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1584) = -1;
  *(_QWORD *)(a1 + 1576) = -1;
  *(_QWORD *)(a1 + 1592) = a1 + 1600;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_QWORD *)(a1 + 1616) = a1 + 1624;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_DWORD *)(a1 + 1672) = 1065353216;
  *(_QWORD *)(a1 + 1696) = 0;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_QWORD *)(a1 + 1704) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_DWORD *)(a1 + 1719) = 0;
  *(_QWORD *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1804) = 0u;
  *(_OWORD *)(a1 + 1788) = 0u;
  *(_OWORD *)(a1 + 1772) = 0u;
  *(_OWORD *)(a1 + 1756) = 0u;
  *(_OWORD *)(a1 + 1740) = 0u;
  *(_OWORD *)(a1 + 1724) = 0u;
  *(_QWORD *)(a1 + 1824) = a1 + 1832;
  *(_DWORD *)(a1 + 1880) = 0;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1900) = v4;
  *(_OWORD *)(a1 + 1916) = v4;
  *(_OWORD *)(a1 + 1884) = v4;
  *(_QWORD *)(a1 + 1952) = 0;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_DWORD *)(a1 + 1960) = -1;
  *(_BYTE *)(a1 + 1968) = 0;
  *(_DWORD *)(a1 + 1964) = 0;
  *(_DWORD *)(a1 + 2116) = -1;
  *(_OWORD *)(a1 + 2100) = v4;
  *(_OWORD *)(a1 + 2084) = v4;
  *(_OWORD *)(a1 + 2068) = v4;
  *(_OWORD *)(a1 + 2052) = v4;
  *(_OWORD *)(a1 + 2036) = v4;
  *(_OWORD *)(a1 + 2020) = v4;
  *(_OWORD *)(a1 + 2004) = v4;
  *(_OWORD *)(a1 + 1988) = v4;
  *(_OWORD *)(a1 + 1972) = v4;
  *(_WORD *)(a1 + 2120) = 0;
  *(_BYTE *)(a1 + 2122) = 0;
  *(_QWORD *)(a1 + 2124) = -1;
  *(_BYTE *)(a1 + 2132) = 0;
  *(_QWORD *)(a1 + 2136) = -1;
  *(_DWORD *)(a1 + 2147) = 0;
  *(_DWORD *)(a1 + 2144) = 0;
  *(_QWORD *)(a1 + 2152) = -1;
  *(_DWORD *)(a1 + 2160) = -1;
  *(_BYTE *)(a1 + 2164) = 0;
  *(_QWORD *)(a1 + 2168) = -1;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_DWORD *)(a1 + 2240) = 1065353216;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_QWORD *)(a1 + 2264) = 0x40F5180000000000;
  *(_QWORD *)(a1 + 2304) = 0;
  *(_DWORD *)(a1 + 2312) = 0;
  *(_BYTE *)(a1 + 2296) = 0;
  *(_QWORD *)(a1 + 2288) = 0;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_WORD *)(a1 + 2316) = 257;
  *(_DWORD *)(a1 + 2321) = 0;
  *(_DWORD *)(a1 + 2318) = 0;
  *(_QWORD *)(a1 + 2328) = 0xFFFFFFFF00000000;
  *(_BYTE *)(a1 + 2368) = 0;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_WORD *)(a1 + 2400) = 0;
  *(_QWORD *)(a1 + 2392) = 0;
  *(_OWORD *)(a1 + 2376) = 0u;
  sub_1001E4804(buf);
  v12[0] = 0;
  v5 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssCAVerboseLogging", v12);
  if (v12[0])
    v6 = v5;
  else
    v6 = 0;
  v7 = *(std::__shared_weak_count **)v14;
  if (*(_QWORD *)v14)
  {
    v8 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 2402) = v6;
  *(_DWORD *)(a1 + 2436) = 0;
  *(_OWORD *)(a1 + 2404) = 0u;
  *(_OWORD *)(a1 + 2420) = 0u;
  *(_QWORD *)(a1 + 2440) = off_102141E98;
  v10 = operator new(0x20uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = off_102141ED0;
  *((_DWORD *)v10 + 6) = 31337;
  *(_QWORD *)(a1 + 2448) = v10 + 3;
  *(_QWORD *)(a1 + 2456) = v10;
  *(_QWORD *)(a1 + 2440) = off_102152D70;
  *(_QWORD *)(a1 + 2464) = 0;
  *(_DWORD *)(a1 + 2472) = 11;
  *(_QWORD *)(a1 + 2476) = 0;
  *(_QWORD *)(a1 + 2492) = 0;
  *(_QWORD *)(a1 + 2484) = 0;
  *(_QWORD *)(a1 + 2500) = -1;
  *(_QWORD *)(a1 + 2508) = -1;
  *(_QWORD *)(a1 + 2516) = 0xB00000000;
  *(_BYTE *)(a1 + 2540) = 0;
  *(_QWORD *)(a1 + 2524) = 0;
  *(_QWORD *)(a1 + 2532) = 0;
  *(_QWORD *)(a1 + 2544) = 0xB00000000;
  *(_QWORD *)(a1 + 2552) = 0;
  *(_DWORD *)(a1 + 2560) = 0;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_OWORD *)(a1 + 2632) = 0u;
  *(_DWORD *)(a1 + 2648) = 1065353216;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  *(_QWORD *)(a1 + 2688) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v14 = 2082;
    *(_QWORD *)&v14[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssawd Initializing CLGnssAWD\n\"}", buf, 0x12u);
  }
  bzero(buf, 0x458uLL);
  *(_QWORD *)v14 = 0xBFF0000000000000;
  v19 = 0u;
  *(_OWORD *)&v14[8] = 0u;
  v15 = 0u;
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  v18 = &v19;
  v20 = 0;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  v28 = -1;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  v32 = &v33;
  memset(v35, 0, sizeof(v35));
  v34 = v35;
  v36 = 1065353216;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  v66 = -1;
  v65 = -1;
  v67 = 0u;
  v68 = 0;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0;
  v77 = 1;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0u;
  memset(v83, 0, 19);
  memset(&v83[20], 0, 32);
  v84 = 0xFFFFFFFF00000000;
  v85 = -1;
  v86 = 0xBFF0000000000000;
  sub_1000066C0(v3, (uint64_t)buf);
  sub_10023B45C((uint64_t)buf);
  operator new();
}

void sub_10174CEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, _QWORD **a13, uint64_t a14, _QWORD **a15, _QWORD **a16, uint64_t a17, _QWORD **a18, uint64_t a19, uint64_t *a20)
{
  uint64_t v20;
  uint64_t v21;
  _QWORD **v22;
  uint64_t v23;
  _QWORD *v24;
  void **v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_101753230(v21 + 2616);
  sub_10174DC08(v24);
  sub_1007A1B98(a19);
  v27 = *(_QWORD *)(v21 + 2424);
  *(_QWORD *)(v21 + 2424) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(v21 + 2416);
  *(_QWORD *)(v21 + 2416) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *(_QWORD *)(v21 + 2408);
  *(_QWORD *)(v21 + 2408) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (*(char *)(v21 + 2399) < 0)
    operator delete(*a12);
  sub_100067A50(v21 + 2208);
  if (*(char *)(v21 + 1959) < 0)
    operator delete(*v25);
  sub_10174DC48(v23);
  sub_100008848(v21 + 1288, *a13);
  sub_100008848(a14, *v22);
  sub_100008848(v21 + 1240, *a15);
  sub_100008848(a17, *a16);
  sub_100008848(v21 + 1192, *a18);
  sub_10023B45C(v20);
  sub_10042B248(a20, 0);
  _Unwind_Resume(a1);
}

void sub_10174D090(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssAWD::HandleStatusNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CE070);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAWD::HandleStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CE070);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAWD::HandleStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1017500A8((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10174D248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10174D268(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLGnssAWD::onDeviceOrientation");
  objc_msgSend(objc_msgSend(*(id *)a2, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CE070);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAWD::onDeviceOrientation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CE070);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAWD::onDeviceOrientation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  *(_DWORD *)(a2 + 2320) = *(_DWORD *)(a1 + 8);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_10174D414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10174D430(uint64_t a1)
{
  int v2;
  double v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  double v28;
  _BYTE v29[12];
  _OWORD buf[102];

  sub_1001E4804(buf);
  *(_QWORD *)v29 = 0;
  v2 = sub_1001FD98C(*(uint64_t *)&buf[0], "AssistanceFileMetricsUploadThresholdTimeInSeconds", v29);
  v3 = *(double *)v29;
  if (!v2)
    v3 = 86400.0;
  *(double *)(a1 + 2264) = v3;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if ((*(_QWORD *)(a1 + 2264) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    *(_QWORD *)(a1 + 2264) = 0x40F5180000000000;
  if (*(_BYTE *)(a1 + 2402))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 2264);
      LODWORD(buf[0]) = 134283521;
      *(_QWORD *)((char *)buf + 4) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,UploadThresholdTimeInSeconds,%{private}lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v18 = *(_QWORD *)(a1 + 2264);
      *(_DWORD *)v29 = 134283521;
      *(_QWORD *)&v29[4] = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,AssistanceFileCountMetrics,UploadThresholdTimeInSeconds,%{private}lf", v29, 12);
      v20 = (char *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::prepareAssistanceFileDownloadMetrics()", "%s\n", v19);
      if (v20 != (char *)buf)
        free(v20);
    }
  }
  v28 = 0.0;
  v9 = sub_1001FD94C();
  if (sub_1001FD9FC(v9, (uint64_t)CFSTR("AssistanceFileMetricsStartMonitoringCFAbsTime"), &v28))
  {
    if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v28) > 2.22044605e-16)
    {
      *(double *)(a1 + 2272) = v28;
      if (*(_BYTE *)(a1 + 2402))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v10 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v11 = *(_QWORD *)(a1 + 2272);
          LODWORD(buf[0]) = 134283521;
          *(_QWORD *)((char *)buf + 4) = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,From Disk TimeOfLastAssistanceFileMetricsUploadInSeconds,%{private}lf", (uint8_t *)buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          v24 = *(_QWORD *)(a1 + 2272);
          *(_DWORD *)v29 = 134283521;
          *(_QWORD *)&v29[4] = v24;
          LODWORD(v27) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,AssistanceFileCountMetrics,From Disk TimeOfLastAssistanceFileMetricsUploadInSeconds,%{private}lf", v29, v27);
          v26 = (char *)v25;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::prepareAssistanceFileDownloadMetrics()", "%s\n", v25);
          if (v26 != (char *)buf)
            free(v26);
        }
      }
    }
  }
  if (fabs(*(double *)(a1 + 2272)) < 2.22044605e-16
    || (*(_QWORD *)(a1 + 2272) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    *(CFAbsoluteTime *)(a1 + 2272) = CFAbsoluteTimeGetCurrent();
    v13 = sub_1001FD94C();
    v14 = (uint64_t *)(a1 + 2272);
    sub_10018A534(v13, CFSTR("AssistanceFileMetricsStartMonitoringCFAbsTime"), (const void *)(a1 + 2272));
    v15 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 944))(v15);
    if (*(_BYTE *)(a1 + 2402))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v17 = *v14;
        LODWORD(buf[0]) = 134283521;
        *(_QWORD *)((char *)buf + 4) = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,Init TimeOfLastAssistanceFileMetricsUploadInSeconds,%{private}lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v21 = *v14;
        *(_DWORD *)v29 = 134283521;
        *(_QWORD *)&v29[4] = v21;
        LODWORD(v27) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,AssistanceFileCountMetrics,Init TimeOfLastAssistanceFileMetricsUploadInSeconds,%{private}lf", v29, v27);
        v23 = (char *)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::prepareAssistanceFileDownloadMetrics()", "%s\n", v22);
        if (v23 != (char *)buf)
          free(v23);
      }
    }
  }
  sub_101751AE8(a1);
  sub_10021A8E8(a1);
}

void sub_10174D9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10174D9F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  int *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[6];
  uint64_t v15;

  v14[2] = xmmword_101CDBA58;
  v14[3] = unk_101CDBA68;
  v14[4] = xmmword_101CDBA78;
  v14[5] = unk_101CDBA88;
  v12 = xmmword_101CDBA18;
  v13 = unk_101CDBA28;
  v14[0] = xmmword_101CDBA38;
  v14[1] = unk_101CDBA48;
  v10 = xmmword_101CDB9F8;
  v11 = unk_101CDBA08;
  v2 = a1 + 2208;
  v8 = 0;
  v9 = &v8;
  v3 = sub_10006A848(a1 + 2208, &v8, (uint64_t)&unk_101B9EB60, &v9);
  sub_101753F10(v3 + 3, (uint64_t)&v10, (uint64_t)&v15);
  v10 = xmmword_101CDBA98;
  v11 = unk_101CDBAA8;
  v12 = xmmword_101CDBAB8;
  v13 = unk_101CDBAC8;
  v8 = 1;
  v9 = &v8;
  v4 = sub_10006A848(v2, &v8, (uint64_t)&unk_101B9EB60, &v9);
  sub_101753F10(v4 + 3, (uint64_t)&v10, (uint64_t)v14);
  v10 = xmmword_101CDBA98;
  v11 = unk_101CDBAA8;
  v12 = xmmword_101CDBAB8;
  v13 = unk_101CDBAC8;
  v8 = 2;
  v9 = &v8;
  v5 = sub_10006A848(v2, &v8, (uint64_t)&unk_101B9EB60, &v9);
  sub_101753F10(v5 + 3, (uint64_t)&v10, (uint64_t)v14);
  v10 = xmmword_101CDBA98;
  v11 = unk_101CDBAA8;
  v12 = xmmword_101CDBAB8;
  v13 = unk_101CDBAC8;
  v8 = 3;
  v9 = &v8;
  v6 = sub_10006A848(v2, &v8, (uint64_t)&unk_101B9EB60, &v9);
  sub_101753F10(v6 + 3, (uint64_t)&v10, (uint64_t)v14);
  v10 = xmmword_101CDBA98;
  v11 = unk_101CDBAA8;
  v12 = xmmword_101CDBAB8;
  v13 = unk_101CDBAC8;
  v8 = 4;
  v9 = &v8;
  v7 = sub_10006A848(v2, &v8, (uint64_t)&unk_101B9EB60, &v9);
  sub_101753F10(v7 + 3, (uint64_t)&v10, (uint64_t)v14);
  *(CFAbsoluteTime *)(a1 + 2288) = CFAbsoluteTimeGetCurrent();
}

_QWORD *sub_10174DC08(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_10174DC48(uint64_t a1)
{
  void *v2;

  sub_100008848(a1 + 496, *(_QWORD **)(a1 + 504));
  v2 = *(void **)(a1 + 352);
  if (v2)
  {
    *(_QWORD *)(a1 + 360) = v2;
    operator delete(v2);
  }
  sub_100067A50(a1 + 312);
  sub_10007CDDC(a1 + 288, *(_QWORD **)(a1 + 296));
  sub_10007CDDC(a1 + 264, *(_QWORD **)(a1 + 272));
  return a1;
}

uint64_t sub_10174DCA8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2408) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 2408) + 8), 10);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2408) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 2408) + 8), 6);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2408) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 2408) + 8), 15);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2408) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 2408) + 8), 7);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2424) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 2424) + 8), 10);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2424) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 2424) + 8), 46);
  if (*(_QWORD *)(a1 + 2416))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gnssawd,unsubscribing from device orientation,~CLGnssAWD()", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,unsubscribing from device orientation,~CLGnssAWD()", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "CLGnssAWD::~CLGnssAWD()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    v3 = sub_10040C9DC();
    sub_1000A4A6C(v3, 0, *(_QWORD *)(a1 + 2416));
  }

  *(_QWORD *)(a1 + 2432) = 0;
  *(_QWORD *)(a1 + 2248) = 0;
  sub_101753230(a1 + 2616);
  v4 = *(void **)(a1 + 2592);
  if (v4)
  {
    *(_QWORD *)(a1 + 2600) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 2568);
  if (v5)
  {
    *(_QWORD *)(a1 + 2576) = v5;
    operator delete(v5);
  }
  sub_1007A1B98(a1 + 2440);
  v6 = *(_QWORD *)(a1 + 2424);
  *(_QWORD *)(a1 + 2424) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 2416);
  *(_QWORD *)(a1 + 2416) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 2408);
  *(_QWORD *)(a1 + 2408) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (*(char *)(a1 + 2399) < 0)
    operator delete(*(void **)(a1 + 2376));
  sub_100067A50(a1 + 2208);
  if (*(char *)(a1 + 1959) < 0)
    operator delete(*(void **)(a1 + 1936));
  sub_100008848(a1 + 1824, *(_QWORD **)(a1 + 1832));
  v9 = *(void **)(a1 + 1680);
  if (v9)
  {
    *(_QWORD *)(a1 + 1688) = v9;
    operator delete(v9);
  }
  sub_100067A50(a1 + 1640);
  sub_10007CDDC(a1 + 1616, *(_QWORD **)(a1 + 1624));
  sub_10007CDDC(a1 + 1592, *(_QWORD **)(a1 + 1600));
  sub_100008848(a1 + 1288, *(_QWORD **)(a1 + 1296));
  sub_100008848(a1 + 1264, *(_QWORD **)(a1 + 1272));
  sub_100008848(a1 + 1240, *(_QWORD **)(a1 + 1248));
  sub_100008848(a1 + 1216, *(_QWORD **)(a1 + 1224));
  sub_100008848(a1 + 1192, *(_QWORD **)(a1 + 1200));
  sub_10023B45C(a1 + 16);
  sub_10042B248((uint64_t *)(a1 + 8), 0);
  return a1;
}

void sub_10174DFF8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10174E008@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  void *__p[2];
  unsigned __int8 v37;
  _QWORD v38[2];
  uint64_t v39;
  _QWORD v40[10];
  char v41;
  uint64_t v42;

  sub_100263E50((uint64_t)v38);
  sub_101752EB0((double *)a1, __p);
  if ((v37 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v37 & 0x80u) == 0)
    v5 = v37;
  else
    v5 = (uint64_t)__p[1];
  v6 = sub_100263F7C(&v39, (uint64_t)v4, v5);
  v7 = sub_100263F7C(v6, (uint64_t)",sessionDuration,", 17);
  v8 = (_QWORD *)std::ostream::operator<<(v7, *(_QWORD *)(a1 + 120));
  v9 = sub_100263F7C(v8, (uint64_t)",pctYield,", 10);
  v10 = (_QWORD *)std::ostream::operator<<(v9, *(unsigned int *)(a1 + 128));
  v11 = sub_100263F7C(v10, (uint64_t)",yieldCount,", 12);
  v12 = (_QWORD *)std::ostream::operator<<(v11, *(_QWORD *)(a1 + 136));
  v13 = sub_100263F7C(v12, (uint64_t)",lat,", 5);
  v14 = (_QWORD *)std::ostream::operator<<(v13, *(float *)(a1 + 152));
  v15 = sub_100263F7C(v14, (uint64_t)",lon,", 5);
  v16 = (_QWORD *)std::ostream::operator<<(v15, *(float *)(a1 + 156));
  v17 = sub_100263F7C(v16, (uint64_t)",alt,", 5);
  v18 = (_QWORD *)std::ostream::operator<<(v17, *(float *)(a1 + 160));
  v19 = sub_100263F7C(v18, (uint64_t)",ttff,", 6);
  v20 = (_QWORD *)std::ostream::operator<<(v19, *(unsigned int *)(a1 + 240));
  v21 = sub_100263F7C(v20, (uint64_t)",mcc,", 5);
  v22 = (_QWORD *)std::ostream::operator<<(v21, *(unsigned int *)(a1 + 824));
  v23 = sub_100263F7C(v22, (uint64_t)",mnc,", 5);
  v24 = (_QWORD *)std::ostream::operator<<(v23, *(unsigned int *)(a1 + 828));
  v25 = sub_100263F7C(v24, (uint64_t)",sid,", 5);
  v26 = (_QWORD *)std::ostream::operator<<(v25, *(unsigned int *)(a1 + 832));
  v27 = sub_100263F7C(v26, (uint64_t)",nid,", 5);
  v28 = (_QWORD *)std::ostream::operator<<(v27, *(unsigned int *)(a1 + 836));
  v29 = sub_100263F7C(v28, (uint64_t)",transmissionFrequency,", 23);
  v30 = (_QWORD *)std::ostream::operator<<(v29, *(float *)(a1 + 844));
  v31 = sub_100263F7C(v30, (uint64_t)",transmissionBandwidth,", 23);
  v32 = (_QWORD *)std::ostream::operator<<(v31, *(float *)(a1 + 848));
  v33 = sub_100263F7C(v32, (uint64_t)",transmissionFrequencyBand,", 27);
  std::ostream::operator<<(v33, *(unsigned int *)(a1 + 852));
  if ((char)v37 < 0)
    operator delete(__p[0]);
  std::stringbuf::str(a2, v40);
  *(_QWORD *)((char *)v38
  v39 = v34;
  if (v41 < 0)
    operator delete((void *)v40[8]);
  std::streambuf::~streambuf(v40);
  return std::ios::~ios(&v42);
}

void sub_10174E24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_10174E27C(uint64_t a1)
{
  std::string *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  BOOL v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  BOOL v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  BOOL v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t *v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t *v176;
  int v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  int *v181;
  int *v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  double v192;
  double v193;
  uint64x2_t v194;
  uint64x2_t v195;
  int v196;
  uint64_t v197;
  float32x4_t v198;
  int32x4_t v199;
  int32x2_t v200;
  int v201;
  float32x4_t v202;
  float64x2_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t *v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  int v219;
  unint64_t v220;
  unint64_t v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  double v227;
  unsigned int v228;
  unsigned int v229;
  double v230;
  NSObject *v231;
  uint64_t v232;
  int v233;
  int v234;
  int v235;
  int v236;
  __int128 v237;
  int v238;
  uint64_t v239;
  int64x2_t v240;
  int v241;
  uint64_t v242;
  int64x2_t v243;
  int v244;
  uint64_t v245;
  int64x2_t v246;
  NSObject *v247;
  int v248;
  int v249;
  int v250;
  NSObject *v251;
  int v252;
  int v253;
  int v254;
  uint64_t v255;
  int v256;
  int v257;
  int v258;
  int v259;
  const char *v260;
  char *v261;
  int v262;
  int v263;
  int v264;
  const char *v265;
  char *v266;
  int v267;
  int v268;
  int v269;
  const char *v270;
  char *v271;
  uint64_t v272;
  int v273;
  _BYTE v274[10];
  _BYTE v275[6];
  int v276;
  __int16 v277;
  int v278;
  __int16 v279;
  int v280;
  _BYTE buf[14];
  _BYTE v282[6];
  int v283;
  __int16 v284;
  int v285;
  __int16 v286;
  int v287;

  v2 = std::string::operator=((std::string *)(a1 + 1936), (const std::string *)(a1 + 32));
  *(_BYTE *)(a1 + 2132) = *(_BYTE *)(a1 + 1033);
  *(_BYTE *)(a1 + 1966) = *(_BYTE *)(a1 + 560);
  *(_BYTE *)(a1 + 2148) = *(_BYTE *)(a1 + 1068);
  *(_WORD *)(a1 + 2149) = *(_WORD *)(a1 + 1069);
  *(_BYTE *)(a1 + 1964) = *(_BYTE *)(a1 + 873);
  *(_BYTE *)(a1 + 1965) = *(_QWORD *)(a1 + 648) != 0;
  *(_BYTE *)(a1 + 1967) = *(_QWORD *)(a1 + 552) != 0;
  *(_BYTE *)(a1 + 1968) = *(_QWORD *)(a1 + 520) != 0;
  v3 = *(_QWORD *)(a1 + 160);
  *(_BYTE *)(a1 + 2120) = v3 < 2 * *(_QWORD *)(a1 + 816);
  *(_BYTE *)(a1 + 2121) = v3 < 2 * *(_QWORD *)(a1 + 824);
  *(_BYTE *)(a1 + 2122) = v3 < 2 * *(_QWORD *)(a1 + 832);
  v4 = sub_101750D58((uint64_t)v2, (unsigned int *)(a1 + 856));
  *(_DWORD *)(a1 + 1960) = v4;
  *(double *)buf = (double)*(unint64_t *)(a1 + 136);
  *(_DWORD *)(a1 + 2112) = sub_101751218(v4, (double *)buf);
  v5 = *(_QWORD *)(a1 + 1200);
  if (v5)
  {
    v6 = a1 + 1200;
    v7 = a1 + 1200;
    v8 = *(_QWORD *)(a1 + 1200);
    do
    {
      v9 = *(_DWORD *)(v8 + 32);
      v10 = v9 < 0;
      if (v9 >= 0)
        v11 = (uint64_t *)v8;
      else
        v11 = (uint64_t *)(v8 + 8);
      if (!v10)
        v7 = v8;
      v8 = *v11;
    }
    while (*v11);
    if (v7 != v6 && *(int *)(v7 + 32) <= 0)
    {
      *(_DWORD *)buf = 0;
      v12 = sub_1000B5C9C(a1 + 1192, (int *)buf);
      *(_DWORD *)(a1 + 1972) = sub_101750F78((uint64_t)v12, (double *)v12);
      *(_DWORD *)buf = 0;
      v13 = sub_1000B5C9C(a1 + 1192, (int *)buf);
      *(_DWORD *)(a1 + 2012) = sub_10175105C((uint64_t)v13, (double *)v13);
      *(_DWORD *)buf = 0;
      v14 = llround(*(double *)sub_1000B5C9C(a1 + 1216, (int *)buf));
      if (v14 < 0xD)
        v15 = 6;
      else
        v15 = 7;
      if (v14 >= 9)
        v16 = v15;
      else
        v16 = 5;
      if (v14 >= 5)
        v14 = v16;
      *(_DWORD *)(a1 + 2052) = v14;
      v5 = *(_QWORD *)(a1 + 1200);
    }
    if (v5)
    {
      v17 = a1 + 1200;
      v18 = v5;
      do
      {
        v19 = *(_DWORD *)(v18 + 32);
        v20 = v19 < 1;
        if (v19 >= 1)
          v21 = (uint64_t *)v18;
        else
          v21 = (uint64_t *)(v18 + 8);
        if (!v20)
          v17 = v18;
        v18 = *v21;
      }
      while (*v21);
      if (v17 != v6 && *(int *)(v17 + 32) <= 1)
      {
        *(_DWORD *)buf = 1;
        v22 = sub_1000B5C9C(a1 + 1192, (int *)buf);
        *(_DWORD *)(a1 + 1976) = sub_101750F78((uint64_t)v22, (double *)v22);
        *(_DWORD *)buf = 1;
        v23 = sub_1000B5C9C(a1 + 1192, (int *)buf);
        *(_DWORD *)(a1 + 2016) = sub_10175105C((uint64_t)v23, (double *)v23);
        *(_DWORD *)buf = 1;
        v24 = llround(*(double *)sub_1000B5C9C(a1 + 1216, (int *)buf));
        if (v24 < 0xD)
          v25 = 6;
        else
          v25 = 7;
        if (v24 >= 9)
          v26 = v25;
        else
          v26 = 5;
        if (v24 >= 5)
          v24 = v26;
        *(_DWORD *)(a1 + 2056) = v24;
        v5 = *(_QWORD *)(a1 + 1200);
      }
      if (v5)
      {
        v27 = a1 + 1200;
        v28 = v5;
        do
        {
          v29 = *(_DWORD *)(v28 + 32);
          v30 = v29 < 4;
          if (v29 >= 4)
            v31 = (uint64_t *)v28;
          else
            v31 = (uint64_t *)(v28 + 8);
          if (!v30)
            v27 = v28;
          v28 = *v31;
        }
        while (*v31);
        if (v27 != v6 && *(int *)(v27 + 32) <= 4)
        {
          *(_DWORD *)buf = 4;
          v32 = sub_1000B5C9C(a1 + 1192, (int *)buf);
          *(_DWORD *)(a1 + 1988) = sub_101750F78((uint64_t)v32, (double *)v32);
          *(_DWORD *)buf = 4;
          v33 = sub_1000B5C9C(a1 + 1192, (int *)buf);
          *(_DWORD *)(a1 + 2028) = sub_10175105C((uint64_t)v33, (double *)v33);
          *(_DWORD *)buf = 4;
          v34 = llround(*(double *)sub_1000B5C9C(a1 + 1216, (int *)buf));
          if (v34 < 0xD)
            v35 = 6;
          else
            v35 = 7;
          if (v34 >= 9)
            v36 = v35;
          else
            v36 = 5;
          if (v34 >= 5)
            v34 = v36;
          *(_DWORD *)(a1 + 2068) = v34;
          v5 = *(_QWORD *)(a1 + 1200);
        }
        if (v5)
        {
          v37 = a1 + 1200;
          v38 = v5;
          do
          {
            v39 = *(_DWORD *)(v38 + 32);
            v40 = v39 < 2;
            if (v39 >= 2)
              v41 = (uint64_t *)v38;
            else
              v41 = (uint64_t *)(v38 + 8);
            if (!v40)
              v37 = v38;
            v38 = *v41;
          }
          while (*v41);
          if (v37 != v6 && *(int *)(v37 + 32) <= 2)
          {
            *(_DWORD *)buf = 2;
            v42 = sub_1000B5C9C(a1 + 1192, (int *)buf);
            *(_DWORD *)(a1 + 1980) = sub_101750F78((uint64_t)v42, (double *)v42);
            *(_DWORD *)buf = 2;
            v43 = sub_1000B5C9C(a1 + 1192, (int *)buf);
            *(_DWORD *)(a1 + 2020) = sub_10175105C((uint64_t)v43, (double *)v43);
            *(_DWORD *)buf = 2;
            v44 = llround(*(double *)sub_1000B5C9C(a1 + 1216, (int *)buf));
            if (v44 < 0xD)
              v45 = 6;
            else
              v45 = 7;
            if (v44 >= 9)
              v46 = v45;
            else
              v46 = 5;
            if (v44 >= 5)
              v44 = v46;
            *(_DWORD *)(a1 + 2060) = v44;
            v5 = *(_QWORD *)(a1 + 1200);
          }
          if (v5)
          {
            v47 = a1 + 1200;
            v48 = v5;
            do
            {
              v49 = *(_DWORD *)(v48 + 32);
              v50 = v49 < 3;
              if (v49 >= 3)
                v51 = (uint64_t *)v48;
              else
                v51 = (uint64_t *)(v48 + 8);
              if (!v50)
                v47 = v48;
              v48 = *v51;
            }
            while (*v51);
            if (v47 != v6 && *(int *)(v47 + 32) <= 3)
            {
              *(_DWORD *)buf = 3;
              v52 = sub_1000B5C9C(a1 + 1192, (int *)buf);
              *(_DWORD *)(a1 + 1984) = sub_101750F78((uint64_t)v52, (double *)v52);
              *(_DWORD *)buf = 3;
              v53 = sub_1000B5C9C(a1 + 1192, (int *)buf);
              *(_DWORD *)(a1 + 2024) = sub_10175105C((uint64_t)v53, (double *)v53);
              *(_DWORD *)buf = 3;
              v54 = llround(*(double *)sub_1000B5C9C(a1 + 1216, (int *)buf));
              if (v54 < 0xD)
                v55 = 6;
              else
                v55 = 7;
              if (v54 >= 9)
                v56 = v55;
              else
                v56 = 5;
              if (v54 >= 5)
                v54 = v56;
              *(_DWORD *)(a1 + 2064) = v54;
              v5 = *(_QWORD *)(a1 + 1200);
            }
            if (v5)
            {
              v57 = a1 + 1200;
              v58 = v5;
              do
              {
                v59 = *(_DWORD *)(v58 + 32);
                v60 = v59 < 5;
                if (v59 >= 5)
                  v61 = (uint64_t *)v58;
                else
                  v61 = (uint64_t *)(v58 + 8);
                if (!v60)
                  v57 = v58;
                v58 = *v61;
              }
              while (*v61);
              if (v57 != v6 && *(int *)(v57 + 32) <= 5)
              {
                *(_DWORD *)buf = 5;
                v62 = sub_1000B5C9C(a1 + 1192, (int *)buf);
                *(_DWORD *)(a1 + 1992) = sub_101750F78((uint64_t)v62, (double *)v62);
                *(_DWORD *)buf = 5;
                v63 = sub_1000B5C9C(a1 + 1192, (int *)buf);
                *(_DWORD *)(a1 + 2032) = sub_10175105C((uint64_t)v63, (double *)v63);
                *(_DWORD *)buf = 5;
                v64 = llround(*(double *)sub_1000B5C9C(a1 + 1216, (int *)buf));
                if (v64 < 0xD)
                  v65 = 6;
                else
                  v65 = 7;
                if (v64 >= 9)
                  v66 = v65;
                else
                  v66 = 5;
                if (v64 >= 5)
                  v64 = v66;
                *(_DWORD *)(a1 + 2072) = v64;
                v5 = *(_QWORD *)(a1 + 1200);
              }
              if (v5)
              {
                v67 = a1 + 1200;
                v68 = v5;
                do
                {
                  v69 = *(_DWORD *)(v68 + 32);
                  v70 = v69 < 6;
                  if (v69 >= 6)
                    v71 = (uint64_t *)v68;
                  else
                    v71 = (uint64_t *)(v68 + 8);
                  if (!v70)
                    v67 = v68;
                  v68 = *v71;
                }
                while (*v71);
                if (v67 != v6 && *(int *)(v67 + 32) <= 6)
                {
                  *(_DWORD *)buf = 6;
                  v72 = sub_1000B5C9C(a1 + 1192, (int *)buf);
                  *(_DWORD *)(a1 + 1996) = sub_101750F78((uint64_t)v72, (double *)v72);
                  *(_DWORD *)buf = 6;
                  v73 = sub_1000B5C9C(a1 + 1192, (int *)buf);
                  *(_DWORD *)(a1 + 2036) = sub_10175105C((uint64_t)v73, (double *)v73);
                  *(_DWORD *)buf = 6;
                  v74 = llround(*(double *)sub_1000B5C9C(a1 + 1216, (int *)buf));
                  if (v74 < 0xD)
                    v75 = 6;
                  else
                    v75 = 7;
                  if (v74 >= 9)
                    v76 = v75;
                  else
                    v76 = 5;
                  if (v74 >= 5)
                    v74 = v76;
                  *(_DWORD *)(a1 + 2076) = v74;
                  v5 = *(_QWORD *)(a1 + 1200);
                }
                if (v5)
                {
                  v77 = a1 + 1200;
                  v78 = v5;
                  do
                  {
                    v79 = *(_DWORD *)(v78 + 32);
                    v80 = v79 < 7;
                    if (v79 >= 7)
                      v81 = (uint64_t *)v78;
                    else
                      v81 = (uint64_t *)(v78 + 8);
                    if (!v80)
                      v77 = v78;
                    v78 = *v81;
                  }
                  while (*v81);
                  if (v77 != v6 && *(int *)(v77 + 32) <= 7)
                  {
                    *(_DWORD *)buf = 7;
                    v82 = sub_1000B5C9C(a1 + 1192, (int *)buf);
                    *(_DWORD *)(a1 + 2000) = sub_101750F78((uint64_t)v82, (double *)v82);
                    *(_DWORD *)buf = 7;
                    v83 = sub_1000B5C9C(a1 + 1192, (int *)buf);
                    *(_DWORD *)(a1 + 2040) = sub_10175105C((uint64_t)v83, (double *)v83);
                    *(_DWORD *)buf = 7;
                    v84 = llround(*(double *)sub_1000B5C9C(a1 + 1216, (int *)buf));
                    if (v84 < 0xD)
                      v85 = 6;
                    else
                      v85 = 7;
                    if (v84 >= 9)
                      v86 = v85;
                    else
                      v86 = 5;
                    if (v84 >= 5)
                      v84 = v86;
                    *(_DWORD *)(a1 + 2080) = v84;
                    v5 = *(_QWORD *)(a1 + 1200);
                  }
                  if (v5)
                  {
                    v87 = a1 + 1200;
                    v88 = v5;
                    do
                    {
                      v89 = *(_DWORD *)(v88 + 32);
                      v90 = v89 < 8;
                      if (v89 >= 8)
                        v91 = (uint64_t *)v88;
                      else
                        v91 = (uint64_t *)(v88 + 8);
                      if (!v90)
                        v87 = v88;
                      v88 = *v91;
                    }
                    while (*v91);
                    if (v87 != v6 && *(int *)(v87 + 32) <= 8)
                    {
                      *(_DWORD *)buf = 8;
                      v92 = sub_1000B5C9C(a1 + 1192, (int *)buf);
                      *(_DWORD *)(a1 + 2004) = sub_101750F78((uint64_t)v92, (double *)v92);
                      *(_DWORD *)buf = 8;
                      v93 = sub_1000B5C9C(a1 + 1192, (int *)buf);
                      *(_DWORD *)(a1 + 2044) = sub_10175105C((uint64_t)v93, (double *)v93);
                      *(_DWORD *)buf = 8;
                      v94 = llround(*(double *)sub_1000B5C9C(a1 + 1216, (int *)buf));
                      if (v94 < 0xD)
                        v95 = 6;
                      else
                        v95 = 7;
                      if (v94 >= 9)
                        v96 = v95;
                      else
                        v96 = 5;
                      if (v94 >= 5)
                        v94 = v96;
                      *(_DWORD *)(a1 + 2084) = v94;
                      v5 = *(_QWORD *)(a1 + 1200);
                    }
                    if (v5)
                    {
                      v97 = a1 + 1200;
                      do
                      {
                        v98 = *(_DWORD *)(v5 + 32);
                        v99 = v98 < 9;
                        if (v98 >= 9)
                          v100 = (uint64_t *)v5;
                        else
                          v100 = (uint64_t *)(v5 + 8);
                        if (!v99)
                          v97 = v5;
                        v5 = *v100;
                      }
                      while (*v100);
                      if (v97 != v6 && *(int *)(v97 + 32) <= 9)
                      {
                        *(_DWORD *)buf = 9;
                        v101 = sub_1000B5C9C(a1 + 1192, (int *)buf);
                        *(_DWORD *)(a1 + 2008) = sub_101750F78((uint64_t)v101, (double *)v101);
                        *(_DWORD *)buf = 9;
                        v102 = sub_1000B5C9C(a1 + 1192, (int *)buf);
                        *(_DWORD *)(a1 + 2048) = sub_10175105C((uint64_t)v102, (double *)v102);
                        *(_DWORD *)buf = 9;
                        v103 = llround(*(double *)sub_1000B5C9C(a1 + 1216, (int *)buf));
                        if (v103 < 0xD)
                          v104 = 6;
                        else
                          v104 = 7;
                        if (v103 >= 9)
                          v105 = v104;
                        else
                          v105 = 5;
                        if (v103 >= 5)
                          v103 = v105;
                        *(_DWORD *)(a1 + 2088) = v103;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v106 = *(_QWORD *)(a1 + 264);
  v107 = *(_QWORD *)(a1 + 272);
  if (v106 != v107)
  {
    v108 = 0;
    v109 = 0;
    v110 = v107 - v106;
    v111 = (v107 - v106) >> 4;
    if (v111 <= 1)
      v112 = 1;
    else
      v112 = v111;
    v113 = (unint64_t *)(v106 + 8);
    v114 = -1;
    do
    {
      v116 = *v113;
      v113 += 2;
      v115 = v116;
      if (v116 > v109)
      {
        v114 = v108;
        v109 = v115;
      }
      ++v108;
    }
    while (v112 != v108);
    if ((v114 & 0x80000000) == 0 && v114 < (int)(v110 >> 4))
    {
      v117 = *(_DWORD *)(v106 + 16 * v114) - 1;
      if (v117 > 6)
        v118 = 0;
      else
        v118 = dword_101CDBBA8[v117];
      *(_DWORD *)(a1 + 2092) = v118;
    }
  }
  v119 = sub_101750D6C(a1);
  *(_DWORD *)(a1 + 2096) = v119;
  v120 = *(_QWORD *)(a1 + 448);
  v121 = *(_QWORD *)(a1 + 456);
  if (v120 != v121)
  {
    v122 = 0;
    v123 = 0;
    v124 = v121 - v120;
    v125 = (v121 - v120) >> 4;
    if (v125 <= 1)
      v126 = 1;
    else
      v126 = v125;
    v127 = (unint64_t *)(v120 + 8);
    v128 = -1;
    do
    {
      v130 = *v127;
      v127 += 2;
      v129 = v130;
      if (v130 > v123)
      {
        v128 = v122;
        v123 = v129;
      }
      ++v122;
    }
    while (v126 != v122);
    if ((v128 & 0x80000000) == 0 && v128 < (int)(v124 >> 4))
    {
      v131 = *(_DWORD *)(v120 + 16 * v128);
      if (v131 == 2)
        v132 = 2;
      else
        v132 = v131 == 1;
      *(_DWORD *)(a1 + 2100) = v132;
    }
  }
  v133 = *(_QWORD *)(a1 + 400);
  v134 = *(_QWORD *)(a1 + 408);
  if (v133 != v134)
  {
    v135 = 0;
    v136 = 0;
    v137 = v134 - v133;
    v138 = (v134 - v133) >> 4;
    if (v138 <= 1)
      v139 = 1;
    else
      v139 = v138;
    v140 = (unint64_t *)(v133 + 8);
    v141 = -1;
    do
    {
      v143 = *v140;
      v140 += 2;
      v142 = v143;
      if (v143 > v136)
      {
        v141 = v135;
        v136 = v142;
      }
      ++v135;
    }
    while (v139 != v135);
    if ((v141 & 0x80000000) == 0 && v141 < (int)(v137 >> 4))
    {
      v144 = *(_DWORD *)(v133 + 16 * v141);
      if ((v144 - 1) >= 8)
        v144 = 0;
      *(_DWORD *)(a1 + 2104) = v144;
    }
  }
  v145 = *(_QWORD *)(a1 + 424);
  v146 = *(_QWORD *)(a1 + 432);
  if (v145 != v146)
  {
    v147 = 0;
    v148 = 0;
    v149 = v146 - v145;
    v150 = (v146 - v145) >> 4;
    if (v150 <= 1)
      v151 = 1;
    else
      v151 = v150;
    v152 = (unint64_t *)(v145 + 8);
    v153 = -1;
    do
    {
      v155 = *v152;
      v152 += 2;
      v154 = v155;
      if (v155 > v148)
      {
        v153 = v147;
        v148 = v154;
      }
      ++v147;
    }
    while (v151 != v147);
    if ((v153 & 0x80000000) == 0 && v153 < (int)(v149 >> 4))
    {
      v156 = *(_DWORD *)(v145 + 16 * v153);
      if ((v156 - 1) >= 3)
        v156 = 0;
      *(_DWORD *)(a1 + 2108) = v156;
    }
  }
  v157 = *(_QWORD *)(a1 + 288);
  v158 = *(_QWORD *)(a1 + 296);
  if (v157 != v158)
  {
    v159 = 0;
    v160 = 0;
    v161 = v158 - v157;
    v162 = (v158 - v157) >> 4;
    if (v162 <= 1)
      v163 = 1;
    else
      v163 = v162;
    v164 = (unint64_t *)(v157 + 8);
    v165 = -1;
    do
    {
      v167 = *v164;
      v164 += 2;
      v166 = v167;
      if (v167 > v160)
      {
        v165 = v159;
        v160 = v166;
      }
      ++v159;
    }
    while (v163 != v159);
    if ((v165 & 0x80000000) == 0 && v165 < (int)(v161 >> 4))
    {
      v168 = *(_DWORD *)(v157 + 16 * v165);
      if ((v168 - 1) >= 6)
        v168 = 0;
      *(_DWORD *)(a1 + 2116) = v168;
    }
  }
  v169 = *(_QWORD *)(a1 + 184);
  v170 = *(_QWORD *)(a1 + 192);
  if (v169 != v170)
  {
    v171 = 0;
    v172 = 0;
    v173 = v170 - v169;
    v174 = (v170 - v169) >> 4;
    if (v174 <= 1)
      v175 = 1;
    else
      v175 = v174;
    v176 = (unint64_t *)(v169 + 8);
    v177 = -1;
    do
    {
      v179 = *v176;
      v176 += 2;
      v178 = v179;
      if (v179 > v172)
      {
        v177 = v171;
        v172 = v178;
      }
      ++v171;
    }
    while (v175 != v171);
    if ((v177 & 0x80000000) == 0 && v177 < (int)(v173 >> 4))
    {
      v180 = *(_DWORD *)(v169 + 16 * v177);
      if ((v180 - 1) >= 4)
        v180 = 0;
      *(_DWORD *)(a1 + 2124) = v180;
    }
  }
  v181 = *(int **)(a1 + 496);
  v182 = *(int **)(a1 + 504);
  if (v181 == v182)
  {
    LODWORD(v186) = -1;
  }
  else
  {
    v183 = 0;
    v184 = 0;
    do
    {
      v185 = *((_QWORD *)v181 + 1);
      v183 += v185;
      v184 += v185 * *v181;
      v181 += 4;
    }
    while (v181 != v182);
    v186 = v184 / v183;
  }
  *(_DWORD *)(a1 + 2128) = v186;
  v187 = sub_101750E8C(v119, (uint64_t *)(a1 + 472));
  *(_DWORD *)(a1 + 2136) = v187;
  *(_DWORD *)(a1 + 2140) = sub_101750EE0(v187, (_QWORD *)(a1 + 1288));
  *(_DWORD *)(a1 + 2144) = *(_DWORD *)(a1 + 1064);
  *(_DWORD *)(a1 + 1344) = *(_DWORD *)(a1 + 144);
  v188 = *(_QWORD *)(a1 + 152);
  v189 = *(_QWORD *)(a1 + 160);
  *(_DWORD *)(a1 + 1352) = v188;
  *(_DWORD *)(a1 + 1360) = v189;
  v190 = *(int *)(a1 + 256);
  *(_DWORD *)(a1 + 1356) = v190;
  v191 = *(_QWORD *)(a1 + 136) - v190;
  if (v191)
    *(_DWORD *)(a1 + 1348) = llroundf((float)((float)v188 / (float)v191) * 100.0);
  *(double *)(a1 + 1368) = *(float *)(a1 + 864);
  *(_DWORD *)(a1 + 1376) = *(_DWORD *)(a1 + 868);
  *(double *)(a1 + 1384) = *(float *)(a1 + 860);
  v192 = *(double *)(a1 + 1036);
  *(double *)(a1 + 1392) = v192;
  *(_DWORD *)(a1 + 1400) = *(_DWORD *)(a1 + 1044);
  if (v189)
  {
    v193 = 100.0 / (double)v189;
    v194.i64[0] = *(_QWORD *)(a1 + 536);
    v194.i64[1] = *(_QWORD *)(a1 + 616);
    v195.i64[0] = *(_QWORD *)(a1 + 640);
    v195.i64[1] = *(_QWORD *)(a1 + 568);
    *(int32x4_t *)(a1 + 1404) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 544)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(v194))), v193))));
    *(int32x4_t *)(a1 + 1420) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 520)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(v195))), v193))));
    *(int32x4_t *)(a1 + 1436) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 576)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 592)))), v193))));
    *(_DWORD *)(a1 + 1452) = llround(v193 * (float)*(unint64_t *)(a1 + 608));
    v195.i64[0] = *(_QWORD *)(a1 + 632);
    v195.i64[1] = *(_QWORD *)(a1 + 664);
    *(int32x4_t *)(a1 + 1456) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 648)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(v195))), v193))));
    v194.i64[0] = *(_QWORD *)(a1 + 688);
    v194.i64[1] = *(_QWORD *)(a1 + 760);
    *(int32x4_t *)(a1 + 1472) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 696)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(v194))), v193))));
    v195.i64[0] = *(_QWORD *)(a1 + 784);
    v195.i64[1] = *(_QWORD *)(a1 + 712);
    *(int32x4_t *)(a1 + 1488) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 672)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(v195))), v193))));
    *(int32x4_t *)(a1 + 1504) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 720)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 736)))), v193))));
    *(_DWORD *)(a1 + 1520) = llround(v193 * (float)*(unint64_t *)(a1 + 752));
    v195.i64[0] = *(_QWORD *)(a1 + 776);
    v195.i64[1] = *(_QWORD *)(a1 + 808);
    *(int32x4_t *)(a1 + 1524) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 792)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(v195))), v193))));
    *(float *)v195.i32 = (float)*(unint64_t *)(a1 + 832);
    *(int32x2_t *)(a1 + 1540) = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 816)))), v193))));
    v192 = v193 * *(float *)v195.i32;
    *(_DWORD *)(a1 + 1548) = llround(v192);
  }
  v196 = *(_DWORD *)(a1 + 1004);
  if (v196 + (_DWORD)v188)
  {
    *(float *)&v192 = (float)(v196 + (int)v188);
    v197 = *(int *)(a1 + 1008);
    *(float32x2_t *)v198.f32 = vcvt_f32_s32(*(int32x2_t *)(a1 + 1000));
    v198.f32[2] = (float)(int)v197;
    v198.f32[3] = (float)(v188 - (*(_DWORD *)(a1 + 1000) + v197));
    *(int32x4_t *)(a1 + 1552) = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vdivq_f32(v198, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v192, 0)), (float32x4_t)vdupq_n_s32(0x42C80000u))));
  }
  v199.i64[0] = *(_QWORD *)(a1 + 1048);
  *(double *)(a1 + 1568) = *(float *)(a1 + 176);
  v200 = vadd_s32(vdup_lane_s32(*(int32x2_t *)v199.i8, 1), *(int32x2_t *)v199.i8);
  v201 = *(_DWORD *)(a1 + 1056);
  if (v200.i32[0] + v201 >= 1)
  {
    *(float *)v200.i32 = (float)(v200.i32[0] + v201);
    v199.i64[1] = *(_QWORD *)(a1 + 1056);
    v202 = vdivq_f32(vcvtq_f32_s32(v199), (float32x4_t)vdupq_lane_s32(v200, 0));
    v203 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
    *(int32x4_t *)(a1 + 1576) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v202.f32), v203))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvt_hight_f64_f32(v202), v203))));
  }
  sub_101753370((uint64_t **)(a1 + 1592), *(uint64_t **)(a1 + 312), (uint64_t *)(a1 + 320));
  sub_10175369C((uint64_t **)(a1 + 1616), *(uint64_t **)(a1 + 336), (uint64_t *)(a1 + 344));
  *(_DWORD *)(a1 + 1672) = *(_DWORD *)(a1 + 392);
  sub_101753974((_QWORD *)(a1 + 1640), *(uint64_t **)(a1 + 376), 0);
  sub_101753DA4((_QWORD *)(a1 + 1680), *(__int128 **)(a1 + 472), *(__int128 **)(a1 + 480), (uint64_t)(*(_QWORD *)(a1 + 480) - *(_QWORD *)(a1 + 472)) >> 4);
  v204 = *(_QWORD *)(a1 + 944);
  v205 = *(_QWORD *)(a1 + 952);
  if (v204 == v205)
  {
    v210 = -1;
  }
  else
  {
    v206 = 0;
    v207 = 0;
    v208 = (v205 - v204) >> 4;
    if (v208 <= 1)
      v208 = 1;
    v209 = (unint64_t *)(v204 + 8);
    v210 = -1;
    do
    {
      v212 = *v209;
      v209 += 2;
      v211 = v212;
      if (v212 > v207)
      {
        v210 = v206;
        v207 = v211;
      }
      ++v206;
    }
    while (v208 != v206);
  }
  *(_DWORD *)(a1 + 2172) = v210;
  v213 = *(_QWORD *)(a1 + 968);
  v214 = *(_QWORD *)(a1 + 976);
  if (v213 == v214)
  {
    v219 = -1;
  }
  else
  {
    v215 = 0;
    v216 = 0;
    v217 = (v214 - v213) >> 4;
    if (v217 <= 1)
      v217 = 1;
    v218 = (unint64_t *)(v213 + 8);
    v219 = -1;
    do
    {
      v221 = *v218;
      v218 += 2;
      v220 = v221;
      if (v221 > v216)
      {
        v219 = v215;
        v216 = v220;
      }
      ++v215;
    }
    while (v217 != v215);
  }
  *(_DWORD *)(a1 + 2168) = v219;
  *(_QWORD *)(a1 + 1332) = *(_QWORD *)(a1 + 1072);
  *(_DWORD *)(a1 + 1328) = *(_QWORD *)(a1 + 936);
  *(_DWORD *)(a1 + 1340) = *(_DWORD *)(a1 + 1080);
  v222 = *(_DWORD *)(a1 + 1092);
  v223 = *(_DWORD *)(a1 + 1100);
  v224 = *(_DWORD *)(a1 + 1096);
  v225 = *(_DWORD *)(a1 + 1104);
  v226 = v223 + v222 + v224 + v225;
  if (v226)
  {
    v227 = 100.0 / (double)v226;
    *(_DWORD *)(a1 + 1916) = (int)(v227 * (double)v222);
    *(_DWORD *)(a1 + 1924) = (int)(v227 * (double)v223);
    *(_DWORD *)(a1 + 1920) = (int)(v227 * (double)v224);
    *(_DWORD *)(a1 + 1928) = (int)(v227 * (double)v225);
  }
  v228 = *(_DWORD *)(a1 + 1088);
  v229 = *(_DWORD *)(a1 + 1084);
  if (v229 + v228)
  {
    v230 = 100.0 / (double)(v229 + v228);
    *(_DWORD *)(a1 + 1912) = (int)(v230 * (double)v228);
    *(_DWORD *)(a1 + 1908) = (int)(v230 * (double)v229);
  }
  *(_QWORD *)(a1 + 1704) = *(_QWORD *)(a1 + 1128);
  *(_DWORD *)(a1 + 2160) = *(_DWORD *)(a1 + 1116);
  *(_BYTE *)(a1 + 2164) = *(_BYTE *)(a1 + 1120);
  *(_QWORD *)(a1 + 2152) = *(_QWORD *)(a1 + 1108);
  if (*(_BYTE *)(a1 + 2402))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v231 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v232 = *(_QWORD *)(a1 + 1704);
      v233 = *(_DWORD *)(a1 + 2156);
      v234 = *(_DWORD *)(a1 + 2152);
      v235 = *(_DWORD *)(a1 + 2160);
      v236 = *(unsigned __int8 *)(a1 + 2164);
      *(_DWORD *)buf = 134284545;
      *(_QWORD *)&buf[4] = v232;
      *(_WORD *)&buf[12] = 1025;
      *(_DWORD *)v282 = v233;
      *(_WORD *)&v282[4] = 1025;
      v283 = v234;
      v284 = 1025;
      v285 = v235;
      v286 = 1025;
      v287 = v236;
      _os_log_impl((void *)&_mh_execute_header, v231, OS_LOG_TYPE_DEBUG, "#gnssca,PositionAssistanceMetrics,deltaFirstFixAndPositionAssistMeters,%{private}f,PositionAssistHorzAcc,%{private}d,HorzReliability,%{private}d,PositionAssistType,%{private}d,wasWiFiPositioningAvailable,%{private}d", buf, 0x24u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v255 = *(_QWORD *)(a1 + 1704);
      v256 = *(_DWORD *)(a1 + 2156);
      v257 = *(_DWORD *)(a1 + 2152);
      v258 = *(_DWORD *)(a1 + 2160);
      v259 = *(unsigned __int8 *)(a1 + 2164);
      v273 = 134284545;
      *(_QWORD *)v274 = v255;
      *(_WORD *)&v274[8] = 1025;
      *(_DWORD *)v275 = v256;
      *(_WORD *)&v275[4] = 1025;
      v276 = v257;
      v277 = 1025;
      v278 = v258;
      v279 = 1025;
      v280 = v259;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,PositionAssistanceMetrics,deltaFirstFixAndPositionAssistMeters,%{private}f,PositionAssistHorzAcc,%{private}d,HorzReliability,%{private}d,PositionAssistType,%{private}d,wasWiFiPositioningAvailable,%{private}d", &v273, 36);
      v261 = (char *)v260;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::collectCAData()", "%s\n", v260);
      if (v261 != buf)
        free(v261);
    }
  }
  sub_101752104(a1);
  v237 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 1768) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 1784) = v237;
  *(_OWORD *)(a1 + 1800) = *(_OWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 1816) = *(_DWORD *)(a1 + 104);
  sub_1002108FC((uint64_t **)(a1 + 1824), *(_QWORD **)(a1 + 112), (_QWORD *)(a1 + 120));
  *(_DWORD *)(a1 + 1816) = *(_DWORD *)(a1 + 2404);
  v238 = *(_DWORD *)(a1 + 1848);
  if (v238)
  {
    v239 = *(_QWORD *)(a1 + 1860);
    v240.i64[0] = (int)v239;
    v240.i64[1] = SHIDWORD(v239);
    *(int32x2_t *)(a1 + 1884) = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v240), 100.0 / (double)v238)));
  }
  v241 = *(_DWORD *)(a1 + 1852);
  if (v241)
  {
    v242 = *(_QWORD *)(a1 + 1868);
    v243.i64[0] = (int)v242;
    v243.i64[1] = SHIDWORD(v242);
    *(int32x2_t *)(a1 + 1892) = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v243), 100.0 / (double)v241)));
  }
  v244 = *(_DWORD *)(a1 + 1856);
  if (v244)
  {
    v245 = *(_QWORD *)(a1 + 1876);
    v246.i64[0] = (int)v245;
    v246.i64[1] = SHIDWORD(v245);
    *(int32x2_t *)(a1 + 1900) = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v246), 100.0 / (double)v244)));
  }
  if (*(_BYTE *)(a1 + 2402))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v247 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v248 = *(_DWORD *)(a1 + 1888);
      v249 = *(_DWORD *)(a1 + 1896);
      v250 = *(_DWORD *)(a1 + 1904);
      *(_DWORD *)buf = 67175169;
      *(_DWORD *)&buf[4] = v248;
      *(_WORD *)&buf[8] = 1025;
      *(_DWORD *)&buf[10] = v249;
      *(_WORD *)v282 = 1025;
      *(_DWORD *)&v282[2] = v250;
      _os_log_impl((void *)&_mh_execute_header, v247, OS_LOG_TYPE_DEBUG, "#gnssca,phase lock rate metrics,phase_lock_rate_20_25dBHz,%{private}d,phase_lock_rate_25_30dBHz,%{private}d,phase_lock_rate_30plusdBHz,%{private}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v262 = *(_DWORD *)(a1 + 1888);
      v263 = *(_DWORD *)(a1 + 1896);
      v264 = *(_DWORD *)(a1 + 1904);
      v273 = 67175169;
      *(_DWORD *)v274 = v262;
      *(_WORD *)&v274[4] = 1025;
      *(_DWORD *)&v274[6] = v263;
      *(_WORD *)v275 = 1025;
      *(_DWORD *)&v275[2] = v264;
      LODWORD(v272) = 20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,phase lock rate metrics,phase_lock_rate_20_25dBHz,%{private}d,phase_lock_rate_25_30dBHz,%{private}d,phase_lock_rate_30plusdBHz,%{private}d", &v273, v272);
      v266 = (char *)v265;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::collectCAData()", "%s\n", v265);
      if (v266 != buf)
        free(v266);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v251 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v252 = *(_DWORD *)(a1 + 1884);
      v253 = *(_DWORD *)(a1 + 1892);
      v254 = *(_DWORD *)(a1 + 1900);
      *(_DWORD *)buf = 67175169;
      *(_DWORD *)&buf[4] = v252;
      *(_WORD *)&buf[8] = 1025;
      *(_DWORD *)&buf[10] = v253;
      *(_WORD *)v282 = 1025;
      *(_DWORD *)&v282[2] = v254;
      _os_log_impl((void *)&_mh_execute_header, v251, OS_LOG_TYPE_DEBUG, "#gnssca,phase available rate metrics,phase_available_rate_20_25dBHz,%{private}d,phase_available_rate_25_30dBHz,%{private}d,phase_available_rate_30plusdBHz,%{private}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v267 = *(_DWORD *)(a1 + 1884);
      v268 = *(_DWORD *)(a1 + 1892);
      v269 = *(_DWORD *)(a1 + 1900);
      v273 = 67175169;
      *(_DWORD *)v274 = v267;
      *(_WORD *)&v274[4] = 1025;
      *(_DWORD *)&v274[6] = v268;
      *(_WORD *)v275 = 1025;
      *(_DWORD *)&v275[2] = v269;
      LODWORD(v272) = 20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,phase available rate metrics,phase_available_rate_20_25dBHz,%{private}d,phase_available_rate_25_30dBHz,%{private}d,phase_available_rate_30plusdBHz,%{private}d", &v273, v272);
      v271 = (char *)v270;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::collectCAData()", "%s\n", v270);
      if (v271 != buf)
        free(v271);
    }
  }
}

unint64_t sub_10174F9B4(unsigned int a1, int a2)
{
  uint64_t v2;
  const mach_header_64 *v3;

  v2 = a1;
  v3 = &_mh_execute_header;
  switch(a1)
  {
    case 1u:
      v2 = a2 == 16;
      break;
    case 3u:
      if (a2 == 16)
        v2 = 6;
      else
        v2 = 5;
      v3 = &_mh_execute_header;
      break;
    case 4u:
      return v2 | (unint64_t)v3;
    case 5u:
    case 6u:
      v2 = 3;
      break;
    case 7u:
      v2 = 8;
      break;
    case 8u:
      v2 = 2;
      break;
    case 9u:
      v2 = 7;
      break;
    case 0xAu:
      v2 = 9;
      break;
    default:
      v3 = 0;
      v2 = 0;
      break;
  }
  return v2 | (unint64_t)v3;
}

void sub_10174FA38(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, double *a6, double *a7)
{
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;
  int v14;
  int *v15;

  v10 = *(_QWORD *)(a2 + 144) + 1;
  *(_QWORD *)(a2 + 144) = v10;
  *(_QWORD *)(a2 + 112) = *a3;
  *(_QWORD *)(a2 + 120) = *a4;
  *(_QWORD *)(a2 + 128) = *a5;
  *(double *)(a2 + 136) = *a6;
  *(double *)(a1 + 1312) = (*a6 + *(double *)(a1 + 1312) * (double)((int)v10 - 1)) / (double)(int)v10;
  v11 = (uint64_t **)(a2 + 152);
  v14 = sub_10174FB50(a1, a6);
  v15 = &v14;
  v12 = sub_100041CE0(v11, &v14, (uint64_t)&unk_101B9EB60, &v15);
  v12[5] = (uint64_t *)((char *)v12[5] + 1);
  v14 = sub_10174FB50((uint64_t)v12, a7);
  v15 = &v14;
  v13 = sub_100041CE0((uint64_t **)(a2 + 176), &v14, (uint64_t)&unk_101B9EB60, &v15);
  v13[5] = (uint64_t *)((char *)v13[5] + 1);
  sub_100041480(a1, a2);
  *(_BYTE *)(a1 + 2368) = 1;
}

uint64_t sub_10174FB50(uint64_t a1, double *a2)
{
  uint64_t result;
  double v3;

  result = 0;
  v3 = *a2;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v3 >= 0.0)
  {
    if (v3 >= 5.0)
    {
      if (v3 >= 10.0)
      {
        if (v3 >= 15.0)
        {
          if (v3 >= 20.0)
          {
            if (v3 >= 30.0)
            {
              if (v3 >= 40.0)
              {
                if (v3 >= 50.0)
                {
                  if (v3 >= 100.0)
                  {
                    if (v3 >= 200.0)
                    {
                      if (v3 >= 400.0)
                      {
                        if (v3 >= 1000.0)
                          return 7;
                        else
                          return 6;
                      }
                      else
                      {
                        return 5;
                      }
                    }
                    else
                    {
                      return 4;
                    }
                  }
                  else
                  {
                    return 3;
                  }
                }
                else
                {
                  return 14;
                }
              }
              else
              {
                return 13;
              }
            }
            else
            {
              return 12;
            }
          }
          else
          {
            return 11;
          }
        }
        else
        {
          return 10;
        }
      }
      else
      {
        return 9;
      }
    }
    else
    {
      return 8;
    }
  }
  return result;
}

void sub_10174FC7C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  int v4;
  uint64_t **v5;
  float *v6;
  uint64_t **v7;
  void **v8;
  uint64_t v9;
  float v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  float *v20;
  int v21;
  int v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26[2];
  int *v27;

  v26[0] = 0;
  v26[1] = 0;
  v25 = (uint64_t *)v26;
  v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    while (2)
    {
      v3 = *((_DWORD *)v2 + 4);
      switch(v3)
      {
        case 1:
          v23 = 0;
          goto LABEL_10;
        case 2:
          v4 = 4;
          goto LABEL_9;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_31;
        case 4:
          v4 = 3;
          goto LABEL_9;
        case 8:
          v4 = 2;
LABEL_9:
          v23 = v4;
          goto LABEL_10;
        default:
          if (v3 != 16)
            goto LABEL_31;
          v23 = 1;
LABEL_10:
          v24 = 1;
          v27 = &v23;
          v5 = sub_1000BC378(&v25, &v23, (uint64_t)&unk_101B9EB60, &v27);
          v6 = (float *)v2[5];
          if (v6)
          {
            v7 = v5;
            v8 = (void **)(v5 + 5);
            v9 = (uint64_t)(v5 + 7);
            do
            {
              v10 = v6[6];
              if (v10 > 0.0)
              {
                v12 = (float *)v7[6];
                v11 = (unint64_t)v7[7];
                if ((unint64_t)v12 >= v11)
                {
                  v14 = (float *)*v8;
                  v15 = ((char *)v12 - (_BYTE *)*v8) >> 2;
                  v16 = v15 + 1;
                  if ((unint64_t)(v15 + 1) >> 62)
                    sub_100259694();
                  v17 = v11 - (_QWORD)v14;
                  if (v17 >> 1 > v16)
                    v16 = v17 >> 1;
                  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
                    v18 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v18 = v16;
                  if (v18)
                  {
                    v19 = (char *)sub_100260634(v9, v18);
                    v14 = (float *)v7[5];
                    v12 = (float *)v7[6];
                    v10 = v6[6];
                  }
                  else
                  {
                    v19 = 0;
                  }
                  v20 = (float *)&v19[4 * v15];
                  *v20 = v10;
                  v13 = v20 + 1;
                  while (v12 != v14)
                  {
                    v21 = *((_DWORD *)v12-- - 1);
                    *((_DWORD *)v20-- - 1) = v21;
                  }
                  v7[5] = (uint64_t *)v20;
                  v7[6] = (uint64_t *)v13;
                  v7[7] = (uint64_t *)&v19[4 * v18];
                  if (v14)
                    operator delete(v14);
                }
                else
                {
                  *v12 = v10;
                  v13 = v12 + 1;
                }
                v7[6] = (uint64_t *)v13;
              }
              v6 = *(float **)v6;
            }
            while (v6);
          }
LABEL_31:
          v2 = (uint64_t *)*v2;
          if (!v2)
            break;
          continue;
      }
      break;
    }
  }
  sub_10010D3A0(a1, &v25);
  sub_10010D350((uint64_t)&v25, v26[0]);
}

void sub_10174FE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_10010D350((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

_DWORD *sub_10174FE80(_DWORD *result, uint64_t a2, unsigned int a3)
{
  _BOOL4 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  float v9;
  BOOL v11;
  int v12;
  _DWORD *v17;

  v4 = *(double *)(a2 + 104) > 0.0 && (*(_QWORD *)(a2 + 96) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (*(_BYTE *)(a2 + 112))
    v5 = 0;
  else
    v5 = v4;
  v6 = *(_QWORD *)(a2 + 120);
  if (v6 != -1)
  {
    v7 = *(_QWORD *)(a2 + 128);
    v8 = v7 == -1 || v6 > v7;
    if (!v8 && (*(_QWORD *)(a2 + 136) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)(a2 + 144) > 0.0)
    {
      if (!*(_BYTE *)(a2 + 152))
        v5 = 1;
      v4 = 1;
    }
  }
  v9 = *(float *)(a2 + 168);
  v11 = v9 < 20.0 || v9 >= 25.0 || a3 > 8;
  v12 = (1 << a3) & 0x1EC;
  if (v11 || v12 == 0)
  {
    if (v9 < 25.0 || v9 >= 30.0 || a3 > 8 || v12 == 0)
    {
      if (v9 >= 30.0)
      {
        ++result[464];
        if (v5)
          ++result[470];
        if (v4)
        {
          v17 = result + 469;
LABEL_55:
          ++*v17;
        }
      }
    }
    else
    {
      ++result[463];
      if (v5)
        ++result[468];
      if (v4)
      {
        v17 = result + 467;
        goto LABEL_55;
      }
    }
  }
  else
  {
    ++result[462];
    if (v5)
      ++result[466];
    if (v4)
    {
      v17 = result + 465;
      goto LABEL_55;
    }
  }
  return result;
}

uint64_t sub_10174FFC8(uint64_t a1, float *a2)
{
  float v2;

  v2 = *a2;
  if ((*(_DWORD *)a2 & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return 0;
  if (v2 < 0.0)
    return 1;
  if (v2 < 16.0)
    return 2;
  if (v2 < 20.0)
    return 3;
  if (v2 < 24.0)
    return 4;
  if (v2 < 28.0)
    return 5;
  if (v2 < 32.0)
    return 6;
  if (v2 < 36.0)
    return 7;
  if (v2 < 40.0)
    return 8;
  if (v2 >= 44.0)
    return 10;
  return 9;
}

void sub_1017500A8(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  const char *v10;
  NSObject *v11;
  int v12;
  uint8_t *v13;
  int v14;
  uint8_t buf[4];
  int v16;

  switch(*a3)
  {
    case 6:
      *(_BYTE *)(a1 + 2317) = *((_DWORD *)a4 + 1) != 0;
      *(_BYTE *)(a1 + 2318) = *((_DWORD *)a4 + 1) == 2;
      break;
    case 7:
      v6 = sub_100647A50(*((_DWORD *)a4 + 3)) && sub_10016AE80() && a4[8] == 0;
      if (*(unsigned __int8 *)(a1 + 2324) != v6)
      {
        ++*(_DWORD *)(a1 + 2328);
        *(_BYTE *)(a1 + 2324) = v6;
      }
      *(_DWORD *)(a1 + 2312) = *((_DWORD *)a4 + 3);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_DWORD *)(a1 + 2312);
        *(_DWORD *)buf = 67109120;
        v16 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gnssawd,chargerType,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,chargerType,%d", &v14);
        goto LABEL_29;
      }
      break;
    case 0xA:
      v7 = *a4;
      if (*(unsigned __int8 *)(a1 + 2316) != v7)
      {
        *(_BYTE *)(a1 + 2316) = v7;
        sub_10175046C(a1);
      }
      break;
    case 0xD:
      *(_DWORD *)(a1 + 2332) = *(_DWORD *)a4;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_DWORD *)(a1 + 2332);
        *(_DWORD *)buf = 67109120;
        v16 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#gnssawd,thermalLevel,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,thermalLevel,%d", &v14);
LABEL_29:
        v13 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::HandleStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v10);
        if (v13 != buf)
          free(v13);
      }
      break;
    case 0xF:
      *(_BYTE *)(a1 + 2319) = *a4;
      break;
    default:
      return;
  }
}

void sub_10175046C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t i;
  NSObject *v8;
  uint64_t *v9;
  uint64_t j;
  int v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  _WORD v17[6];
  int v18;
  int v19[4];
  uint8_t buf[4];
  int v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 2316);
    *(_DWORD *)buf = 67174657;
    v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gnssca,handleDisplayEventForCA,fDisplay,%{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v11 = *(unsigned __int8 *)(a1 + 2316);
    v19[0] = 67174657;
    v19[1] = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,handleDisplayEventForCA,fDisplay,%{private}d", v19, 8);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::handleDisplayEventForCA()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (*(_BYTE *)(a1 + 2296))
    v4 = 3;
  else
    v4 = 4;
  if (*(_BYTE *)(a1 + 2296))
    v5 = 1;
  else
    v5 = 2;
  v18 = v5;
  v19[0] = v4;
  if (sub_1001F8DEC((_QWORD *)(a1 + 2208), v19) && sub_1001F8DEC((_QWORD *)(a1 + 2208), &v18))
  {
    if (*(_BYTE *)(a1 + 2316))
    {
      v6 = sub_1001F8DEC((_QWORD *)(a1 + 2208), v19);
      if (v6)
      {
        for (i = v6[5]; i; i = *(_QWORD *)i)
        {
          if (sub_1001F89A4(a1, v19[0], *(_DWORD *)(i + 16)))
            sub_1001F7974(a1, v18, *(_DWORD *)(i + 16));
        }
        return;
      }
LABEL_42:
      sub_100263950("unordered_map::at: key not found");
    }
    v9 = sub_1001F8DEC((_QWORD *)(a1 + 2208), &v18);
    if (!v9)
      goto LABEL_42;
    for (j = v9[5]; j; j = *(_QWORD *)j)
    {
      if (sub_1001F89A4(a1, v18, *(_DWORD *)(j + 16)))
        sub_1001F7974(a1, v19[0], *(_DWORD *)(j + 16));
    }
  }
  else if (*(_BYTE *)(a1 + 2402))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#gnssca,handleDisplayEventForCA,display context unsupported", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v17[0] = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,handleDisplayEventForCA,display context unsupported", v17, v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::handleDisplayEventForCA()", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

void sub_101750830(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CE090);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 2319);
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 1026;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext\", \"BatterySaver\":%{public}d}", (uint8_t *)v4, 0x18u);
  }
}

void sub_101750918(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  v2 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)(a1 + 2340) <= v2 && v2 >= 5)
  {
    *(_OWORD *)(a1 + 2336) = *(_OWORD *)a2;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CE0B0);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_DWORD *)(a1 + 2336);
      v7 = *(_DWORD *)(a1 + 2340);
      v8 = *(_DWORD *)(a1 + 2348);
      v9 = *(_DWORD *)(a1 + 2344);
      *(_DWORD *)buf = 67240960;
      v24 = v6;
      v25 = 1026;
      v26 = v7;
      v27 = 1026;
      v28 = v8;
      v29 = 1026;
      v30 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "BaroAlt,DriftRate AWD Data,closeLoopError,%{public}d,durationSinceLastCalibEv,%{public}d,distanceFromLastCalibEv,%{public}d,estAltUnc,%{public}d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CE0B0);
      v10 = *(_DWORD *)(a1 + 2336);
      v11 = *(_DWORD *)(a1 + 2340);
      v12 = *(_DWORD *)(a1 + 2348);
      v13 = *(_DWORD *)(a1 + 2344);
      v16[0] = 67240960;
      v16[1] = v10;
      v17 = 1026;
      v18 = v11;
      v19 = 1026;
      v20 = v12;
      v21 = 1026;
      v22 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,DriftRate AWD Data,closeLoopError,%{public}d,durationSinceLastCalibEv,%{public}d,distanceFromLastCalibEv,%{public}d,estAltUnc,%{public}d", v16, 26);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::setBarometricAltitudeData(const CLDaemonStats_Type::BarometricAltitudeDriftRateInfo &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

BOOL sub_101750B38(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  double v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  v3 = *a2;
  if (*a2 == 46 && *(_DWORD *)(a3 + 1512) == 1)
  {
    v7 = *(double *)(a3 + 1520);
    if (v7 > 0.0)
    {
      *(double *)(a1 + 2664) = v7 + *(double *)(a1 + 2664);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_QWORD *)(a3 + 1520);
        v10 = *(_QWORD *)(a1 + 2664);
        *(_DWORD *)buf = 134349312;
        v21 = v9;
        v22 = 2050;
        v23 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#gnssca,proactiveLoc,gnss,seconds,new,%{public}0.2f,total,%{public}0.2f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v12 = *(_QWORD *)(a3 + 1520);
        v13 = *(_QWORD *)(a1 + 2664);
        v16 = 134349312;
        v17 = v12;
        v18 = 2050;
        v19 = v13;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssca,proactiveLoc,gnss,seconds,new,%{public}0.2f,total,%{public}0.2f", &v16, 22);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssAWD::handleProactiveLocationAnalytics(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
    }
    *(double *)(a1 + 2672) = sub_1001FCBB4();
    sub_101752A98(a1);
  }
  return v3 == 46;
}

uint64_t sub_101750D58(uint64_t a1, unsigned int *a2)
{
  if (*a2 - 1 >= 0xC)
    return 0;
  else
    return *a2;
}

uint64_t sub_101750D6C(uint64_t a1)
{
  uint64_t result;
  double v3;

  result = 0;
  v3 = *(double *)(a1 + 1312);
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v3 >= 0.0)
  {
    if (v3 >= 5.0)
    {
      if (v3 >= 10.0)
      {
        if (v3 >= 15.0)
        {
          if (v3 >= 20.0)
          {
            if (v3 >= 30.0)
            {
              if (v3 >= 40.0)
              {
                if (v3 >= 50.0)
                {
                  if (v3 >= 100.0)
                  {
                    if (v3 >= 200.0)
                    {
                      if (v3 >= 400.0)
                      {
                        if (v3 >= 1000.0)
                          return 12;
                        else
                          return 11;
                      }
                      else
                      {
                        return 10;
                      }
                    }
                    else
                    {
                      return 9;
                    }
                  }
                  else
                  {
                    return 8;
                  }
                }
                else
                {
                  return 7;
                }
              }
              else
              {
                return 6;
              }
            }
            else
            {
              return 5;
            }
          }
          else
          {
            return 4;
          }
        }
        else
        {
          return 3;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_101750E8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  v4 = 0;
  v5 = -1;
  do
  {
    v6 = *(_QWORD *)(v2 + 8);
    v8 = *(_DWORD *)v2;
    v2 += 16;
    v7 = v8;
    if (v6 > v4)
    {
      v4 = v6;
      v5 = v7;
    }
  }
  while (v2 != v3);
  if ((v5 - 1) >= 3)
    return 0;
  else
    return dword_101CDBBC4[v5 - 1];
}

uint64_t sub_101750EE0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unsigned int v10;

  if (!a2[2])
    return 0;
  v4 = (_QWORD *)*a2;
  v2 = a2 + 1;
  v3 = v4;
  if (v4 == v2)
    return 1;
  v5 = 0;
  v6 = 0;
  do
  {
    if (v3[5] > v6)
    {
      v6 = v3[5];
      v5 = *((_BYTE *)v3 + 32);
    }
    v7 = (_QWORD *)v3[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v3[2];
        v9 = *v8 == (_QWORD)v3;
        v3 = v8;
      }
      while (!v9);
    }
    v3 = v8;
  }
  while (v8 != v2);
  if (v5 == 1)
    v10 = 2;
  else
    v10 = 1;
  if (v5 == 2)
    return 3;
  else
    return v10;
}

uint64_t sub_101750F78(uint64_t a1, double *a2)
{
  double v2;

  v2 = *a2;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  if (v2 < 0.0)
    return 1;
  if (v2 < 16.0)
    return 2;
  if (v2 < 20.0)
    return 3;
  if (v2 < 24.0)
    return 4;
  if (v2 < 28.0)
    return 5;
  if (v2 < 32.0)
    return 6;
  if (v2 < 36.0)
    return 7;
  if (v2 < 40.0)
    return 8;
  if (v2 >= 44.0)
    return 10;
  return 9;
}

uint64_t sub_10175105C(uint64_t a1, double *a2)
{
  double v2;

  v2 = *a2;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  if (v2 < 8.0)
    return 1;
  if (v2 < 10.0)
    return 2;
  if (v2 < 12.0)
    return 3;
  if (v2 < 14.0)
    return 4;
  if (v2 < 16.0)
    return 5;
  if (v2 < 18.0)
    return 6;
  if (v2 < 20.0)
    return 7;
  if (v2 < 22.0)
    return 8;
  if (v2 < 24.0)
    return 9;
  if (v2 < 26.0)
    return 10;
  if (v2 < 28.0)
    return 11;
  if (v2 < 30.0)
    return 12;
  if (v2 < 32.0)
    return 13;
  if (v2 < 34.0)
    return 14;
  if (v2 < 36.0)
    return 15;
  if (v2 < 38.0)
    return 16;
  if (v2 < 40.0)
    return 17;
  if (v2 < 42.0)
    return 18;
  if (v2 >= 44.0)
    return 20;
  return 19;
}

uint64_t sub_101751218(uint64_t a1, double *a2)
{
  double v2;

  v2 = *a2;
  if (*a2 >= 60.0 && v2 < 70.0)
    return 1;
  if (v2 >= 70.0 && v2 < 80.0)
    return 2;
  if (v2 >= 80.0 && v2 < 90.0)
    return 3;
  if (v2 >= 90.0 && v2 < 100.0)
    return 4;
  if (v2 >= 100.0 && v2 < 200.0)
    return 5;
  if (v2 >= 200.0 && v2 < 300.0)
    return 6;
  if (v2 >= 300.0 && v2 < 400.0)
    return 7;
  if (v2 >= 400.0 && v2 < 500.0)
    return 8;
  if (v2 >= 500.0 && v2 < 600.0)
    return 9;
  if (v2 >= 600.0 && v2 < 700.0)
    return 10;
  if (v2 >= 700.0 && v2 < 800.0)
    return 11;
  if (v2 >= 800.0 && v2 < 900.0)
    return 12;
  if (v2 >= 900.0 && v2 < 1000.0)
    return 13;
  if (v2 >= 1000.0 && v2 < 2000.0)
    return 14;
  if (v2 >= 2000.0 && v2 < 3000.0)
    return 15;
  if (v2 >= 3000.0 && v2 < 4000.0)
    return 16;
  if (v2 >= 4000.0 && v2 < 5000.0)
    return 17;
  if (v2 >= 5000.0 && v2 < 10000.0)
    return 18;
  if (v2 >= 10000.0)
    return 19;
  return 0;
}

void sub_1017514B8(uint64_t a1, int a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  const char *v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  uint8_t *v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  switch(a2)
  {
    case 1:
      ++*(_DWORD *)(a1 + 2176);
      *(_DWORD *)(a1 + 2192) += *(unsigned __int8 *)(a1 + 2318);
      if (*(_BYTE *)(a1 + 2402))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v3 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v4 = *(_DWORD *)(a1 + 2176);
          v5 = *(_DWORD *)(a1 + 2192);
          v6 = *(unsigned __int8 *)(a1 + 2318);
          *(_DWORD *)buf = 67109632;
          v23 = v4;
          v24 = 1024;
          v25 = v5;
          v26 = 1024;
          v27 = v6;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,Short Term Orbit Assistance File Daily Download Count,%d,LargeCount,%d,isReachableLarge,%d", buf, 0x14u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,AssistanceFileCountMetrics,Short Term Orbit Assistance File Daily Download Count,%d,LargeCount,%d,isReachableLarge,%d", &v21, 20);
          goto LABEL_39;
        }
      }
      break;
    case 2:
      ++*(_DWORD *)(a1 + 2180);
      *(_DWORD *)(a1 + 2196) += *(unsigned __int8 *)(a1 + 2318);
      if (*(_BYTE *)(a1 + 2402))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v8 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v9 = *(_DWORD *)(a1 + 2180);
          v10 = *(_DWORD *)(a1 + 2196);
          v11 = *(unsigned __int8 *)(a1 + 2318);
          *(_DWORD *)buf = 67109632;
          v23 = v9;
          v24 = 1024;
          v25 = v10;
          v26 = 1024;
          v27 = v11;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,Long Term Orbit Assistance File Daily Download Count,%d,LargeCount,%d,isReachableLarge,%d", buf, 0x14u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,AssistanceFileCountMetrics,Long Term Orbit Assistance File Daily Download Count,%d,LargeCount,%d,isReachableLarge,%d", &v21, 20);
          goto LABEL_39;
        }
      }
      break;
    case 3:
      ++*(_DWORD *)(a1 + 2184);
      *(_DWORD *)(a1 + 2200) += *(unsigned __int8 *)(a1 + 2318);
      if (*(_BYTE *)(a1 + 2402))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v12 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v13 = *(_DWORD *)(a1 + 2184);
          v14 = *(_DWORD *)(a1 + 2200);
          v15 = *(unsigned __int8 *)(a1 + 2318);
          *(_DWORD *)buf = 67109632;
          v23 = v13;
          v24 = 1024;
          v25 = v14;
          v26 = 1024;
          v27 = v15;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,RTI File Daily Download Count,%d,LargeCount,%d,isReachableLarge,%d", buf, 0x14u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,AssistanceFileCountMetrics,RTI File Daily Download Count,%d,LargeCount,%d,isReachableLarge,%d", &v21, 20);
          goto LABEL_39;
        }
      }
      break;
    case 4:
      ++*(_DWORD *)(a1 + 2188);
      *(_DWORD *)(a1 + 2204) += *(unsigned __int8 *)(a1 + 2318);
      if (*(_BYTE *)(a1 + 2402))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v16 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v17 = *(_DWORD *)(a1 + 2188);
          v18 = *(_DWORD *)(a1 + 2204);
          v19 = *(unsigned __int8 *)(a1 + 2318);
          *(_DWORD *)buf = 67109632;
          v23 = v17;
          v24 = 1024;
          v25 = v18;
          v26 = 1024;
          v27 = v19;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,Raven GNSS Assistance File Daily Download Count,%d,LargeCount,%d,isReachableLarge,%d", buf, 0x14u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,AssistanceFileCountMetrics,Raven GNSS Assistance File Daily Download Count,%d,LargeCount,%d,isReachableLarge,%d", &v21, 20);
LABEL_39:
          v20 = (uint8_t *)v7;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::reportAssistanceFileDownload(CLDaemonStats_Type::AssistanceFileType)", "%s\n", v7);
          if (v20 != buf)
            free(v20);
        }
      }
      break;
    default:
      return;
  }
}

void sub_101751AE8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  const char *v43;
  uint8_t *v44;
  _DWORD v45[2];
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  uint8_t buf[4];
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;

  v2 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  v3 = sub_1001C1194(v2, (uint64_t)CFSTR("ShortTermOrbitAssistanceDailyDownloadCount"), buf);
  v4 = *(_DWORD *)buf;
  if (!v3)
    v4 = 0;
  *(_DWORD *)(a1 + 2176) = v4;
  v5 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  v6 = sub_1001C1194(v5, (uint64_t)CFSTR("LongTermOrbitAssistanceDailyDownloadCount"), buf);
  v7 = *(_DWORD *)buf;
  if (!v6)
    v7 = 0;
  *(_DWORD *)(a1 + 2180) = v7;
  v8 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  v9 = sub_1001C1194(v8, (uint64_t)CFSTR("RtiDailyDownloadCount"), buf);
  v10 = *(_DWORD *)buf;
  if (!v9)
    v10 = 0;
  *(_DWORD *)(a1 + 2184) = v10;
  v11 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  v12 = sub_1001C1194(v11, (uint64_t)CFSTR("RavenGnssAssistanceDailyDownloadCount"), buf);
  v13 = *(_DWORD *)buf;
  if (!v12)
    v13 = 0;
  *(_DWORD *)(a1 + 2188) = v13;
  v14 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  v15 = sub_1001C1194(v14, (uint64_t)CFSTR("ShortTermOrbitAssistanceDailyDownloadLargeCount"), buf);
  v16 = *(_DWORD *)buf;
  if (!v15)
    v16 = 0;
  *(_DWORD *)(a1 + 2192) = v16;
  v17 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  v18 = sub_1001C1194(v17, (uint64_t)CFSTR("LongTermOrbitAssistanceDailyDownloadLargeCount"), buf);
  v19 = *(_DWORD *)buf;
  if (!v18)
    v19 = 0;
  *(_DWORD *)(a1 + 2196) = v19;
  v20 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  v21 = sub_1001C1194(v20, (uint64_t)CFSTR("RtiDailyDownloadLargeCount"), buf);
  v22 = *(_DWORD *)buf;
  if (!v21)
    v22 = 0;
  *(_DWORD *)(a1 + 2200) = v22;
  v23 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  v24 = sub_1001C1194(v23, (uint64_t)CFSTR("RavenGnssAssistanceDailyDownloadLargeCount"), buf);
  v25 = *(_DWORD *)buf;
  if (!v24)
    v25 = 0;
  *(_DWORD *)(a1 + 2204) = v25;
  if (*(_BYTE *)(a1 + 2402))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v27 = *(_DWORD *)(a1 + 2176);
      v28 = *(_DWORD *)(a1 + 2180);
      v29 = *(_DWORD *)(a1 + 2184);
      v30 = *(_DWORD *)(a1 + 2188);
      v31 = *(_DWORD *)(a1 + 2192);
      v32 = *(_DWORD *)(a1 + 2196);
      v33 = *(_DWORD *)(a1 + 2200);
      v34 = *(_DWORD *)(a1 + 2204);
      *(_DWORD *)buf = 67176449;
      v61 = v27;
      v62 = 1025;
      v63 = v28;
      v64 = 1025;
      v65 = v29;
      v66 = 1025;
      v67 = v30;
      v68 = 1025;
      v69 = v31;
      v70 = 1025;
      v71 = v32;
      v72 = 1025;
      v73 = v33;
      v74 = 1025;
      v75 = v34;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,ReadFromDisk,shortTermOrbitAssistanceDailyDownloadCount,%{private}d,longTermOrbitAssistanceDailyDownloadCount,%{private}d,rtiDailyDownloadCount,%{private}d,ravenGnssAssistanceDailyDownloadCount,%{private}d,shortTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,longTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,rtiDailyDownloadLargeCount,%{private}d,ravenGnssAssistanceDailyDownloadLargeCount,%{private}d", buf, 0x32u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v35 = *(_DWORD *)(a1 + 2176);
      v36 = *(_DWORD *)(a1 + 2180);
      v37 = *(_DWORD *)(a1 + 2184);
      v38 = *(_DWORD *)(a1 + 2188);
      v39 = *(_DWORD *)(a1 + 2192);
      v40 = *(_DWORD *)(a1 + 2196);
      v41 = *(_DWORD *)(a1 + 2200);
      v42 = *(_DWORD *)(a1 + 2204);
      v45[0] = 67176449;
      v45[1] = v35;
      v46 = 1025;
      v47 = v36;
      v48 = 1025;
      v49 = v37;
      v50 = 1025;
      v51 = v38;
      v52 = 1025;
      v53 = v39;
      v54 = 1025;
      v55 = v40;
      v56 = 1025;
      v57 = v41;
      v58 = 1025;
      v59 = v42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,AssistanceFileCountMetrics,ReadFromDisk,shortTermOrbitAssistanceDailyDownloadCount,%{private}d,longTermOrbitAssistanceDailyDownloadCount,%{private}d,rtiDailyDownloadCount,%{private}d,ravenGnssAssistanceDailyDownloadCount,%{private}d,shortTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,longTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,rtiDailyDownloadLargeCount,%{private}d,ravenGnssAssistanceDailyDownloadLargeCount,%{private}d", v45, 50);
      v44 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::readAssistanceFileDownloadMetricsFromDisk()", "%s\n", v43);
      if (v44 != buf)
        free(v44);
    }
  }
}

void sub_101751EB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v2 = sub_1001FD94C();
  sub_1005254E4(v2);
  v3 = sub_1001FD94C();
  sub_1005254E4(v3);
  v4 = sub_1001FD94C();
  sub_1005254E4(v4);
  v5 = sub_1001FD94C();
  sub_1005254E4(v5);
  v6 = sub_1001FD94C();
  sub_1005254E4(v6);
  v7 = sub_1001FD94C();
  sub_1005254E4(v7);
  v8 = sub_1001FD94C();
  sub_1005254E4(v8);
  v9 = sub_1001FD94C();
  sub_1005254E4(v9);
  v10 = sub_1001FD94C();
  sub_1005254E4(v10);
  v11 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 944))(v11);
  if (*(_BYTE *)(a1 + 2402))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,clearAssistanceFileDownloadMetricsOnDisk", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,AssistanceFileCountMetrics,clearAssistanceFileDownloadMetricsOnDisk", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::clearAssistanceFileDownloadMetricsOnDisk()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

void sub_101752104(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  _DWORD v31[2];
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 1016);
  do
  {
    if ((v3 & (1 << v2)) != 0)
    {
      *(_DWORD *)(a1 + 1724 + 4 * v2) = 1;
      *(_BYTE *)(a1 + 1722) = 1;
      switch((int)v2)
      {
        case 0:
          *(_BYTE *)(a1 + 1712) = 1;
          break;
        case 1:
          *(_BYTE *)(a1 + 1713) = 1;
          break;
        case 2:
          *(_BYTE *)(a1 + 1714) = 1;
          break;
        case 3:
          *(_BYTE *)(a1 + 1715) = 1;
          break;
        case 4:
          *(_BYTE *)(a1 + 1716) = 1;
          break;
        case 5:
          *(_BYTE *)(a1 + 1717) = 1;
          break;
        case 6:
          *(_BYTE *)(a1 + 1718) = 1;
          break;
        case 7:
          *(_BYTE *)(a1 + 1719) = 1;
          break;
        case 8:
          *(_BYTE *)(a1 + 1720) = 1;
          break;
        case 9:
          *(_BYTE *)(a1 + 1721) = 1;
          break;
        default:
          break;
      }
    }
    ++v2;
  }
  while (v2 != 10);
  if (!*(_BYTE *)(a1 + 1722))
    *(_DWORD *)(a1 + 1764) = 1;
  if (*(_BYTE *)(a1 + 2402))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 1722);
      v6 = *(_QWORD *)(a1 + 1016);
      v7 = *(unsigned __int8 *)(a1 + 1712);
      v8 = *(unsigned __int8 *)(a1 + 1713);
      v9 = *(unsigned __int8 *)(a1 + 1714);
      v10 = *(unsigned __int8 *)(a1 + 1715);
      v11 = *(unsigned __int8 *)(a1 + 1716);
      v12 = *(unsigned __int8 *)(a1 + 1717);
      v13 = *(unsigned __int8 *)(a1 + 1718);
      v14 = *(unsigned __int8 *)(a1 + 1719);
      v15 = *(unsigned __int8 *)(a1 + 1720);
      v16 = *(unsigned __int8 *)(a1 + 1721);
      *(_DWORD *)buf = 67177473;
      v55 = v5;
      v56 = 2049;
      v57 = v6;
      v58 = 1025;
      v59 = v7;
      v60 = 1025;
      v61 = v8;
      v62 = 1025;
      v63 = v9;
      v64 = 1025;
      v65 = v10;
      v66 = 1025;
      v67 = v11;
      v68 = 1025;
      v69 = v12;
      v70 = 1025;
      v71 = v13;
      v72 = 1025;
      v73 = v14;
      v74 = 1025;
      v75 = v15;
      v76 = 1025;
      v77 = v16;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssca,SpoofingAnalytics,SessionSpoofed,%{private}d,runningOrSpoofingFlags,%{private}llu,TimePreceedsBuildTime,%{private}d,TimePreceedsEETime,%{private}d,TimeJumpForward100s,%{private}d,TimeJumpBackward100s,%{private}d,LnavAntiSpoofBitZeroOnMultipleSvs,%{private}d,OtaLeapSecInconsistentWithEE,%{private}d,ExcessiveSignalStrength,%{private}d,HigherOrderOtaEphemerisAllZeroOnMultipleSvs,%{private}d,OtaUtcModelInconsistentWithEE,%{private}d,OtaParameterOutOfBoundsOnMultipleSvs,%{private}d", buf, 0x4Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v17 = *(unsigned __int8 *)(a1 + 1722);
      v18 = *(_QWORD *)(a1 + 1016);
      v19 = *(unsigned __int8 *)(a1 + 1712);
      v20 = *(unsigned __int8 *)(a1 + 1713);
      v21 = *(unsigned __int8 *)(a1 + 1714);
      v22 = *(unsigned __int8 *)(a1 + 1715);
      v23 = *(unsigned __int8 *)(a1 + 1716);
      v24 = *(unsigned __int8 *)(a1 + 1717);
      v25 = *(unsigned __int8 *)(a1 + 1718);
      v26 = *(unsigned __int8 *)(a1 + 1719);
      v27 = *(unsigned __int8 *)(a1 + 1720);
      v28 = *(unsigned __int8 *)(a1 + 1721);
      v31[0] = 67177473;
      v31[1] = v17;
      v32 = 2049;
      v33 = v18;
      v34 = 1025;
      v35 = v19;
      v36 = 1025;
      v37 = v20;
      v38 = 1025;
      v39 = v21;
      v40 = 1025;
      v41 = v22;
      v42 = 1025;
      v43 = v23;
      v44 = 1025;
      v45 = v24;
      v46 = 1025;
      v47 = v25;
      v48 = 1025;
      v49 = v26;
      v50 = 1025;
      v51 = v27;
      v52 = 1025;
      v53 = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,SpoofingAnalytics,SessionSpoofed,%{private}d,runningOrSpoofingFlags,%{private}llu,TimePreceedsBuildTime,%{private}d,TimePreceedsEETime,%{private}d,TimeJumpForward100s,%{private}d,TimeJumpBackward100s,%{private}d,LnavAntiSpoofBitZeroOnMultipleSvs,%{private}d,OtaLeapSecInconsistentWithEE,%{private}d,ExcessiveSignalStrength,%{private}d,HigherOrderOtaEphemerisAllZeroOnMultipleSvs,%{private}d,OtaUtcModelInconsistentWithEE,%{private}d,OtaParameterOutOfBoundsOnMultipleSvs,%{private}d", v31, 78);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::prepareSpoofingAnalytics()", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
}

uint64_t *sub_1017524B0(_QWORD *a1, int a2, int a3)
{
  _QWORD *v3;
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  int v10;

  v9 = a3;
  v10 = a2;
  v3 = (_QWORD *)(*a1 + 2208);
  result = sub_1001F8DEC(v3, &v10);
  if (result)
  {
    v5 = sub_1001F8DEC(v3, &v10);
    if (!v5)
      goto LABEL_10;
    v6 = sub_1001F8DEC(v5 + 3, &v9);
    if (!sub_1001F8DEC(v3, &v10))
      goto LABEL_10;
    if (v6)
    {
      v7 = sub_1001F8DEC(v3, &v10);
      if (v7)
      {
        v8 = sub_1001F8DEC(v7 + 3, &v9);
        if (v8)
          return (uint64_t *)*((double *)v8 + 3);
      }
LABEL_10:
      sub_100263950("unordered_map::at: key not found");
    }
    return 0;
  }
  return result;
}

void sub_10175256C(double *a1, double a2, double a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  NSObject *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  double v16;
  NSObject *v17;
  double v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  int v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint8_t buf[4];
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;

  if (a2 <= 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#gnssca,received negative gnss debounce savings", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      LOWORD(v29) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssca,received negative gnss debounce savings", &v29, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssAWD::handleGnssDebounceSavingsAnalytics(const CFTimeInterval, const CFTimeInterval)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  else
  {
    v6 = sub_1001FCBB4();
    v7 = a1[335];
    if (v7 > 0.0)
    {
      v8 = a1[336];
      v9 = v7 + v8 + a3 - v6;
      if (v9 > 0.0 && v9 < v8)
      {
        a1[332] = a1[332] - v9;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v11 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v12 = a1[332];
          v13 = *((_QWORD *)a1 + 335);
          v14 = *((_QWORD *)a1 + 336);
          *(_DWORD *)buf = 134350336;
          v42 = v12;
          v43 = 2050;
          v44 = a3;
          v45 = 2050;
          v46 = v9;
          v47 = 2050;
          v48 = v6;
          v49 = 2050;
          v50 = v13;
          v51 = 2050;
          v52 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#gnssca,gnssDebouce savings,adjusted for overlap with last session,totalAdjustedSaving,%{public}0.2f,sessDur,%{public}0.2f,overlapDur,%{public}0.2f,currMct,%{public}0.3f,lastSessMct,%{public}0.3f,lastSessDebounceSaving,%{public}0.2f", buf, 0x3Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          v23 = a1[332];
          v24 = *((_QWORD *)a1 + 335);
          v25 = *((_QWORD *)a1 + 336);
          v29 = 134350336;
          v30 = v23;
          v31 = 2050;
          v32 = a3;
          v33 = 2050;
          v34 = v9;
          v35 = 2050;
          v36 = v6;
          v37 = 2050;
          v38 = v24;
          v39 = 2050;
          v40 = v25;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssca,gnssDebouce savings,adjusted for overlap with last session,totalAdjustedSaving,%{public}0.2f,sessDur,%{public}0.2f,overlapDur,%{public}0.2f,currMct,%{public}0.3f,lastSessMct,%{public}0.3f,lastSessDebounceSaving,%{public}0.2f", &v29, 62);
          v27 = (uint8_t *)v26;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::handleGnssDebounceSavingsAnalytics(const CFTimeInterval, const CFTimeInterval)", "%s\n", v26);
          if (v27 != buf)
            free(v27);
        }
      }
    }
    a1[336] = a2;
    a1[332] = a1[332] + a2;
    a1[335] = v6;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v16 = a1[332];
      *(_DWORD *)buf = 134349312;
      v42 = a2;
      v43 = 2050;
      v44 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#gnssca,gnssDebouce,saving,seconds,new,%{public}0.2f,total,%{public}0.2f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v18 = a1[332];
      v29 = 134349312;
      v30 = a2;
      v31 = 2050;
      v32 = v18;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssca,gnssDebouce,saving,seconds,new,%{public}0.2f,total,%{public}0.2f", &v29, v28);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::handleGnssDebounceSavingsAnalytics(const CFTimeInterval, const CFTimeInterval)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    sub_101752A98((uint64_t)a1);
  }
}

void sub_101752A98(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  _BOOL4 v9;
  NSObject *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  _BYTE v21[18];
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  _BYTE v25[18];
  __int16 v26;
  uint64_t v27;

  if (*(double *)(a1 + 2656) >= *(double *)(a1 + 2688) && *(double *)(a1 + 2664) >= 0.0)
  {
    v7 = *(double *)(a1 + 2672);
    v9 = v7 > 0.0 && (v8 = *(double *)(a1 + 2680), v8 > 0.0) && vabdd_f64(v7, v8) < 1.0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(double *)(a1 + 2672) - *(double *)(a1 + 2680);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v25 = v9;
      *(_WORD *)&v25[4] = 2050;
      *(double *)&v25[6] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#gnssca,isConcurrentSessionWithProactiveLocation,%{public}d,diffSec,%{public}0.2f", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v17 = *(double *)(a1 + 2672) - *(double *)(a1 + 2680);
      v20 = 67240448;
      *(_DWORD *)v21 = v9;
      *(_WORD *)&v21[4] = 2050;
      *(double *)&v21[6] = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssca,isConcurrentSessionWithProactiveLocation,%{public}d,diffSec,%{public}0.2f", &v20, 18);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::checkDebounceSavingStatsValidity()", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v3 = *(_QWORD *)(a1 + 2656);
      v4 = *(_QWORD *)(a1 + 2688);
      v5 = *(_QWORD *)(a1 + 2664);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)v25 = v3;
      *(_WORD *)&v25[8] = 2050;
      *(_QWORD *)&v25[10] = v4;
      v26 = 2050;
      v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gnssca,proactiveLocation,stats data invalid,debounceCumSec,%{public}0.2f,last,%{public}0.2f,proactiveCumSec,%{public}0.2f", buf, 0x20u);
    }
    v6 = a1 + 2656;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v12 = *(_QWORD *)(a1 + 2656);
      v13 = *(_QWORD *)(a1 + 2688);
      v14 = *(_QWORD *)(a1 + 2664);
      v20 = 134349568;
      *(_QWORD *)v21 = v12;
      *(_WORD *)&v21[8] = 2050;
      *(_QWORD *)&v21[10] = v13;
      v22 = 2050;
      v23 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssca,proactiveLocation,stats data invalid,debounceCumSec,%{public}0.2f,last,%{public}0.2f,proactiveCumSec,%{public}0.2f", &v20, 32);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssAWD::checkDebounceSavingStatsValidity()", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *(_QWORD *)(v6 + 32) = 0;
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
  }
}

void sub_101752E58(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101752E84(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_101752EB0@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  _QWORD v19[10];
  char v20;
  uint64_t v21;

  sub_100263E50((uint64_t)v17);
  v4 = sub_100263F7C(&v18, (uint64_t)"valid,", 6);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *(unsigned __int8 *)a1);
  v6 = sub_100263F7C(v5, (uint64_t)",timestamp,", 11);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(v7, (uint64_t)",bundleId,", 10);
  v11 = *((_QWORD *)a1 + 2);
  v10 = (unsigned __int8 *)(a1 + 2);
  v9 = v11;
  v12 = (char)v10[23];
  if (v12 >= 0)
    v13 = (uint64_t)v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = v10[23];
  else
    v14 = *((_QWORD *)v10 + 1);
  sub_100263F7C(v8, v13, v14);
  std::stringbuf::str(a2, v19);
  *(_QWORD *)((char *)v17
  v18 = v15;
  if (v20 < 0)
    operator delete((void *)v19[8]);
  std::streambuf::~streambuf(v19);
  return std::ios::~ios(&v21);
}

void sub_101752FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_101752FD4(uint64_t **a1, _OWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = operator new(0x30uLL);
  v5 = v4;
  v4[2] = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (*((_DWORD *)v4 + 8) >= *((_DWORD *)v7 + 8))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

void sub_101753068(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_101753094(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1017530C0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(unsigned __int8 *)(a1 + 696) == *(unsigned __int8 *)(a2 + 696))
  {
    if (*(_BYTE *)(a1 + 696))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v4 = *(_OWORD *)(a2 + 16);
      v5 = *(_OWORD *)(a2 + 32);
      v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      if (a1 != a2)
        sub_1002A3054((char *)(a1 + 88), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 2);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      v7 = *(_OWORD *)(a2 + 128);
      v8 = *(_OWORD *)(a2 + 144);
      v9 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v9;
      *(_OWORD *)(a1 + 128) = v7;
      *(_OWORD *)(a1 + 144) = v8;
      v10 = *(_OWORD *)(a2 + 192);
      v11 = *(_OWORD *)(a2 + 208);
      v12 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v12;
      *(_OWORD *)(a1 + 192) = v10;
      *(_OWORD *)(a1 + 208) = v11;
      v13 = *(_OWORD *)(a2 + 256);
      v14 = *(_OWORD *)(a2 + 272);
      v15 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 + 300);
      *(_OWORD *)(a1 + 272) = v14;
      *(_OWORD *)(a1 + 288) = v15;
      *(_OWORD *)(a1 + 256) = v13;
      std::string::operator=((std::string *)(a1 + 320), (const std::string *)(a2 + 320));
      v17 = *(_OWORD *)(a2 + 360);
      v16 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 360) = v17;
      *(_OWORD *)(a1 + 376) = v16;
      v18 = *(_OWORD *)(a2 + 440);
      v20 = *(_OWORD *)(a2 + 392);
      v19 = *(_OWORD *)(a2 + 408);
      *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
      *(_OWORD *)(a1 + 440) = v18;
      *(_OWORD *)(a1 + 392) = v20;
      *(_OWORD *)(a1 + 408) = v19;
      v22 = *(_OWORD *)(a2 + 472);
      v21 = *(_OWORD *)(a2 + 488);
      v23 = *(_OWORD *)(a2 + 456);
      *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
      *(_OWORD *)(a1 + 472) = v22;
      *(_OWORD *)(a1 + 488) = v21;
      *(_OWORD *)(a1 + 456) = v23;
      v24 = *(_OWORD *)(a2 + 640);
      v25 = *(_OWORD *)(a2 + 656);
      v26 = *(_OWORD *)(a2 + 672);
      *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
      *(_OWORD *)(a1 + 656) = v25;
      *(_OWORD *)(a1 + 672) = v26;
      *(_OWORD *)(a1 + 640) = v24;
      v27 = *(_OWORD *)(a2 + 576);
      v28 = *(_OWORD *)(a2 + 592);
      v29 = *(_OWORD *)(a2 + 624);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
      *(_OWORD *)(a1 + 624) = v29;
      *(_OWORD *)(a1 + 576) = v27;
      *(_OWORD *)(a1 + 592) = v28;
      v30 = *(_OWORD *)(a2 + 512);
      v31 = *(_OWORD *)(a2 + 528);
      v32 = *(_OWORD *)(a2 + 560);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 560) = v32;
      *(_OWORD *)(a1 + 512) = v30;
      *(_OWORD *)(a1 + 528) = v31;
    }
  }
  else if (*(_BYTE *)(a1 + 696))
  {
    sub_100D6F0A8(a1);
  }
  else
  {
    sub_10087B718(a1, a2);
    *(_BYTE *)(a1 + 696) = 1;
  }
}

uint64_t sub_101753230(uint64_t a1)
{
  void *v2;

  sub_1001D71A0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_101753268(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10087B6D0((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

uint64_t **sub_1017532AC(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  _BYTE *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int8 *)v5 + 32);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x30uLL);
    v10[32] = *(_BYTE *)a3;
    *((_QWORD *)v10 + 5) = (unint64_t)*(double *)(a3 + 8);
    sub_1000145B0(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **sub_101753370(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          if (v8 != v9)
          {
            sub_1002108FC((uint64_t **)v8 + 5, (_QWORD *)v9[5], v9 + 6);
            v8 = v16;
          }
          sub_10121CDD8(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10036C1BC((uint64_t)v15);
          v10 = (uint64_t *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_1017534EC((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_101753540((uint64_t)v5, (_DWORD *)a2 + 8);
      v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1017534D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1017534EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017534EC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_10007CDDC(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_10007CDDC(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_101753540(uint64_t a1, _DWORD *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v7;

  sub_1017535C0(a1, a2, (uint64_t)&v7);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  sub_1000145B0((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

uint64_t *sub_1017535C0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  result = sub_101753648((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10175362C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100838A40(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_101753648(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100342484(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_101753684(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **sub_10175369C(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          if (v8 != v9)
          {
            sub_1002108FC((uint64_t **)v8 + 5, (_QWORD *)v9[5], v9 + 6);
            v8 = v16;
          }
          sub_10121CDD8(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10036C1BC((uint64_t)v15);
          v10 = (uint64_t *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_1017534EC((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_101753818((uint64_t)v5, (_DWORD *)a2 + 8);
      v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_101753804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1017534EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_101753818(uint64_t a1, _DWORD *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v7;

  sub_101753898(a1, a2, (uint64_t)&v7);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  sub_1000145B0((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

uint64_t *sub_101753898@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  result = sub_101753920((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_101753904(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100838A40(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_101753920(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100342484(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_10175395C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_101753974(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  int v11;
  _QWORD *v12;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (uint64_t *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v11 = *((_DWORD *)v4 + 4);
        *((_DWORD *)v8 + 4) = v11;
        if (v8 != v4)
        {
          *((_DWORD *)v8 + 14) = *((_DWORD *)v4 + 14);
          sub_101753AA8(v8 + 3, (uint64_t *)v4[5], 0);
          v11 = *((_DWORD *)v8 + 4);
        }
        v10 = (uint64_t *)*v8;
        v8[1] = v11;
        v12 = (_QWORD *)sub_100394D84((uint64_t)a1, v11, (_DWORD *)v8 + 4);
        sub_10012923C(a1, v8, v12);
        v4 = (uint64_t *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    sub_100067A88((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    sub_101753C30(a1, (_DWORD *)v4 + 4);
    v4 = (uint64_t *)*v4;
  }
}

void sub_101753A78(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_100067A88(v1, v2);
  __cxa_rethrow();
}

void sub_101753A94(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_101753AA8(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = *((int *)a2 + 4);
      *((_DWORD *)v8 + 4) = v9;
      *((_DWORD *)v8 + 5) = *((_DWORD *)a2 + 5);
      v10 = (uint64_t *)*v8;
      v8[1] = v9;
      v11 = (_QWORD *)sub_100394D84((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      sub_10012923C(a1, v8, v11);
      a2 = (uint64_t *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_101753BB8(a1, a2 + 2);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_101753B84(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_101753BA4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_101753BB8(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = operator new(0x18uLL);
  v5 = *a2;
  v4[2] = *a2;
  *v4 = 0;
  v4[1] = (int)v5;
  v6 = (_QWORD *)sub_100394D84((uint64_t)a1, (int)v5, (_DWORD *)v4 + 4);
  sub_10012923C(a1, v4, v6);
  return v4;
}

void sub_101753C1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101753C30(_QWORD *a1, _DWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD v8[3];

  sub_101753CB0((uint64_t)a1, a2, (uint64_t)v8);
  v3 = (_QWORD *)v8[0];
  v5 = (_DWORD *)(v8[0] + 16);
  v4 = *(int *)(v8[0] + 16);
  *(_QWORD *)(v8[0] + 8) = v4;
  v6 = (_QWORD *)sub_100394D84((uint64_t)a1, v4, v5);
  sub_10012923C(a1, v3, v6);
  v8[0] = 0;
  sub_100859588((uint64_t)v8, 0);
  return v3;
}

void sub_101753C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100859588((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_101753CB0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = a1 + 16;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *v6 = 0;
  v6[1] = 0;
  *((_DWORD *)v6 + 4) = *a2;
  result = sub_101753D30((uint64_t)(v6 + 3), (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  v6[1] = *((int *)v6 + 4);
  return result;
}

void sub_101753D18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100859588(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_101753D30(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    sub_1004B7728(a1, i + 4, (_QWORD *)i + 2);
  return a1;
}

void sub_101753D8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

char *sub_101753DA4(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_DWORD *)v25 = *(_DWORD *)v6;
          *((_QWORD *)v25 + 1) = *((_QWORD *)v6 + 1);
          v24 += 16;
          ++v6;
          v25 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v24 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          *(_DWORD *)result = *(_DWORD *)v6;
          *((_QWORD *)result + 1) = *((_QWORD *)v6++ + 1);
          result += 16;
        }
        while (v6 != v20);
      }
      v21 = v12;
      if (v20 != a3)
      {
        v22 = v12;
        do
        {
          v23 = *v20++;
          *(_OWORD *)v22 = v23;
          v22 += 16;
          v21 += 16;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v21 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      sub_100259694();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1002AE87C(a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void sub_101753F10(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  __int128 v11;
  BOOL v12;
  _QWORD *v13;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = (_QWORD *)v8;
    }
    else
    {
      do
      {
        *(_DWORD *)(v8 + 16) = *(_DWORD *)v4;
        v11 = *(_OWORD *)(v4 + 8);
        *(_BYTE *)(v8 + 40) = *(_BYTE *)(v4 + 24);
        *(_OWORD *)(v8 + 24) = v11;
        v10 = *(_QWORD **)v8;
        sub_101754028(a1, v8);
        v4 += 32;
        if (v10)
          v12 = v4 == a3;
        else
          v12 = 1;
        v8 = (uint64_t)v10;
      }
      while (!v12);
    }
    if (v10)
    {
      do
      {
        v13 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v13;
      }
      while (v13);
    }
  }
  while (v4 != a3)
  {
    sub_100859370((uint64_t)a1, (int *)v4, (_OWORD *)v4);
    v4 += 32;
  }
}

void sub_101753FF4(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_101754014(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_101754028(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v4;
  _DWORD *v5;
  uint64_t *v6;

  v2 = (_QWORD *)a2;
  v5 = (_DWORD *)(a2 + 16);
  v4 = *(int *)(a2 + 16);
  *((_QWORD *)v5 - 1) = v4;
  v6 = sub_10175407C((uint64_t)a1, v4, v5);
  if (v6)
    return v6;
  sub_1003665AC(a1, v2);
  return v2;
}

uint64_t *sub_10175407C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *i;
  unint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  _BOOL8 v12;
  size_t v13;
  unint64_t v14;
  size_t v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
      v5 = v3 <= a2 ? a2 % v3 : a2;
    else
      v5 = (v3 - 1) & a2;
    v6 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v5);
    if (v6)
    {
      for (i = *v6; i; i = (uint64_t *)*i)
      {
        v8 = i[1];
        if (v8 == a2)
        {
          if (*((_DWORD *)i + 4) == *a3)
            return i;
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3)
              v8 %= v3;
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5)
            break;
        }
      }
    }
  }
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v10 = *(float *)(a1 + 32);
  if (!v3 || (float)(v10 * (float)v3) < v9)
  {
    v11 = 2 * v3;
    v12 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    v13 = v12 | v11;
    v14 = vcvtps_u32_f32(v9 / v10);
    if (v13 <= v14)
      v15 = v14;
    else
      v15 = v13;
    sub_10012E444(a1, v15);
  }
  return 0;
}

void sub_101754190()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CDB998;
      v1[3] = unk_101CDB9A8;
      v1[4] = xmmword_101CDB9B8;
      v1[0] = xmmword_101CDB978;
      v1[1] = unk_101CDB988;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_101754264(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_10175427C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  id v4;
  const char *v6;
  uint8_t *v7;
  _QWORD v8[5];
  _WORD v9[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE0D0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "initializing CLGnssPowerLogger", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE0D0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "initializing CLGnssPowerLogger", v9, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLGnssPowerLogger::CLGnssPowerLogger(id<CLIntersiloUniverse>)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "newTimer");
  *(_QWORD *)a1 = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_101754484;
  v8[3] = &unk_10212ECA0;
  v8[4] = a1;
  objc_msgSend(v4, "setHandler:", v8);
  return a1;
}

void sub_101754464(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_101754484(uint64_t a1)
{
  sub_10175448C(*(_QWORD *)(a1 + 32));
}

void sub_10175448C(uint64_t a1)
{
  double v2;
  double Current;
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  double v12;
  _QWORD v13[5];
  _QWORD v14[5];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;

  v2 = *(double *)(a1 + 16);
  Current = CFAbsoluteTimeGetCurrent();
  v4 = *(double **)(a1 + 24);
  v5 = *(double **)(a1 + 32);
  if (v4 == v5)
  {
    v9 = 0.0;
    v8 = 0.0;
    v7 = 0.0;
    v6 = 0.0;
  }
  else
  {
    v6 = 0.0;
    v7 = 0.0;
    v8 = 0.0;
    v9 = 0.0;
    do
    {
      v6 = v6 + v4[1];
      v9 = v9 + v4[2];
      v8 = v8 + v4[3];
      v7 = v7 + v4[4];
      v4 += 5;
    }
    while (v4 != v5);
  }
  v10 = Current - *(double *)(a1 + 16);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE0D0);
  v11 = qword_1022A0078;
  v12 = v8 / v10;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68290562;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2050;
    v20 = v2;
    v21 = 2050;
    v22 = v10;
    v23 = 2050;
    v24 = v9;
    v25 = 2050;
    v26 = v12;
    v27 = 2050;
    v28 = v7;
    v29 = 2050;
    v30 = v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"composite power log\", \"start\":\"%{public}f\", \"epoch_sec\":\"%{public}f\", \"active_sec\":\"%{public}f\", \"avg_pwr_mW\":\"%{public}f\", \"activeL5IntervalSec\":\"%{public}f\", \"actualMeasuredIntervalAsReturnedByTheGPS_s\":\"%{public}f\"}", buf, 0x4Eu);
  }
  v14[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v2, CFSTR("intervalStartTime"));
  v13[1] = CFSTR("measuredInterval");
  v14[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v10);
  v13[2] = CFSTR("activeInterval");
  v14[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v9);
  v13[3] = CFSTR("activeL5IntervalSec");
  v14[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v7);
  v13[4] = CFSTR("averagePower");
  v14[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v12);
  sub_10019E128((uint64_t)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 5), (uint64_t)"GnssPowerMetric");
  objc_msgSend(*(id *)a1, "setNextFireDelay:", 300.0);
  *(CFAbsoluteTime *)(a1 + 16) = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
}

uint64_t sub_101754718(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)a1, "invalidate");

  *(_QWORD *)a1 = 0;
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101754764(CFAbsoluteTime *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_101754928, CFSTR("com.apple.powerlog.gpslogtrigger"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  objc_msgSend(*(id *)a1, "setNextFireDelay:", 300.0);
  a1[2] = CFAbsoluteTimeGetCurrent();
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE0D0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLGnssPowerLogger,start", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE0D0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssPowerLogger,start", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssPowerLogger::start()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

void sub_101754928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLGnssPowerLogger::onGnssPowerLogNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 8), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CE0F0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssPowerLogger::onGnssPowerLogNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CE0F0);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssPowerLogger::onGnssPowerLogNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 8), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_101754D2C;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_101754B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_101754B48(id *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("com.apple.powerlog.gpslogtrigger"), 0);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE0D0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLGnssPowerLogger,stop", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE0D0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssPowerLogger,stop", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssPowerLogger::stop()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return objc_msgSend(*a1, "setNextFireDelay:", 1.79769313e308);
}

void sub_101754D00(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101754D2C(uint64_t a1)
{
  sub_10175448C(*(_QWORD *)(a1 + 32));
}

void sub_101754D34(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101754D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8_t buf[8];

  *(_QWORD *)buf = sub_100270E34(a1, a3);
  operator new();
}

void sub_101754F90(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  __cxa_end_catch();
  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_101754F9C(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x101754FF0);
}

void sub_101754FAC()
{
  JUMPOUT(0x101754FF0);
}

void sub_101754FB4()
{
  uint64_t v0;

  sub_1017040D8(v0);
  JUMPOUT(0x101754FC0);
}

uint64_t **sub_101754FF8(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  char *v11;
  _BYTE *v12;
  uint64_t **result;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  char *v19;
  char *v20;
  void *v21[2];
  char v22;
  int v23;
  _BYTE __p[12];
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  void **v28;
  _BYTE buf[12];
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  _BYTE *v33;

  v23 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_101757B00(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021CE110);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    if (v7 > 2)
      v11 = "StateUnknown";
    else
      v11 = (&off_1021CE1D8)[v7];
    sub_1015A2E04(__p, v11);
    if (SBYTE3(v28) >= 0)
      v12 = __p;
    else
      v12 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v30 = 1024;
    v31 = v7;
    v32 = 2080;
    v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v28) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE110);
    v14 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v14 = (_QWORD *)*v14;
    if (v7 > 2)
      v15 = "StateUnknown";
    else
      v15 = (&off_1021CE1D8)[v7];
    v16 = qword_1022A0078;
    v17 = *(unsigned __int8 *)(v6 + 120);
    sub_1015A2E04(v21, v15);
    if (v22 >= 0)
      v18 = v21;
    else
      v18 = (void **)v21[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v14;
    v25 = 1024;
    v26 = v7;
    v27 = 2080;
    v28 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, v17, "%sstate,%d,%s", __p, 28, (const char *)v21[0]);
    v20 = v19;
    if (v22 < 0)
      operator delete(v21[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaResetGnss>::setStateHandler(State, StateHandler) [T = CLEurekaResetGnss]", "%s\n", v20);
    if (v20 != buf)
      free(v20);
  }
  *(_QWORD *)buf = &v23;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v23, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

BOOL sub_1017552FC(uint64_t a1, unsigned int a2)
{
  NSObject *v3;
  _BOOL4 v4;
  _BOOL8 result;
  void **v6;
  _BOOL4 v7;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  void **v15;

  if (a2 - 6 >= 3)
  {
    if (a2 != 3)
      return a2 == 2;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE110);
    v3 = qword_1022A0078;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v7)
    {
      sub_1015A2E04(__p, "BasebandDisconnected");
      if (v9 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
LABEL_16:
      *(_DWORD *)buf = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#bb.e,resetGnss,spurious event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v9 < 0)
        operator delete(__p[0]);
      return 0;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE110);
    v3 = qword_1022A0078;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v4)
    {
      sub_101755B68(a2, __p);
      if (v9 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_1017554F4(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  void **v13;

  result = 1;
  switch(a2)
  {
    case 2u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE110);
      v4 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        goto LABEL_17;
      sub_1015A2E04(__p, "BasebandConnected");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      goto LABEL_15;
    case 3u:
      result = 0;
      break;
    case 5u:
      result = 2;
      break;
    case 6u:
    case 7u:
    case 8u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE110);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_101755B68(a2, __p);
        if (v7 >= 0)
          v5 = __p;
        else
          v5 = (void **)__p[0];
LABEL_15:
        *(_DWORD *)buf = 68289282;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        v12 = 2082;
        v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#bb.e,resetGnss,spurious event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (v7 < 0)
          operator delete(__p[0]);
      }
LABEL_17:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10175570C(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  switch(a2)
  {
    case 0:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE110);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,resetGnss,request\"}", buf, 0x12u);
      }
      *(_DWORD *)(a1 + 160) = 0;
      v10 = *(_QWORD *)(a1 + 24);
      if (!v10)
        sub_10025FD1C();
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
      return 2;
    case 1:
      *(_DWORD *)(a1 + 160) = 0;
      sub_1017041BC(a1 + 32, 8);
      return 2;
    case 2:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE110);
      v4 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 2;
      sub_1015A2E04(__p, "BasebandConnected");
      if (v13 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      goto LABEL_33;
    case 3:
      return 0;
    case 4:
    case 7:
      return 1;
    case 5:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE110);
      v4 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 2;
      sub_1015A2E04(__p, "LocationServiceDisabled");
      if (v13 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
LABEL_33:
      *(_DWORD *)buf = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = (uint64_t)v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#bb.e,resetGnss,spurious event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v13 < 0)
        operator delete(__p[0]);
      return 2;
    case 6:
      ++*(_DWORD *)(a1 + 160);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE110);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_DWORD *)(a1 + 160);
        *(_DWORD *)buf = 68289282;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        v18 = 1026;
        LODWORD(v19) = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#warning,#bb.e,resetGnss,retry\", \"resetCount\":%{public}d}", buf, 0x18u);
      }
      if (*(_DWORD *)(a1 + 160) > 4u)
      {
        *(_DWORD *)(a1 + 160) = 0;
        return 1;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE110);
        v8 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289282;
          v15 = 0;
          v16 = 2082;
          v17 = "";
          v18 = 2050;
          v19 = 0x3FD0000000000000;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,resetGnss,startTimer\", \"timeout\":\"%{public}f\"}", buf, 0x1Cu);
        }
        sub_101755B94(a1 + 32, 8, 0.25);
        return 2;
      }
    case 8:
      v11 = *(_QWORD *)(a1 + 24);
      if (!v11)
        sub_10025FD1C();
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
      return 2;
    default:
      return 2;
  }
}

_QWORD *sub_101755B68@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 8)
    v2 = "EventUnknown";
  else
    v2 = (&off_1021CE190)[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_101755B94(uint64_t a1, signed int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE110);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE110);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaResetGnss>::setTimeoutEvent(Event, double) [T = CLEurekaResetGnss]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE110);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE110);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE110);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE110);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_101755B68(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE110);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_101755B68(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaResetGnss>::setTimeoutEvent(Event, double) [T = CLEurekaResetGnss]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE110);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_101755B68(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE110);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_101755B68(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaResetGnss>::setTimeoutEvent(Event, double) [T = CLEurekaResetGnss]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), (int *)&v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_101757950;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE110);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_101755B68(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE110);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_101755B68(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

uint64_t sub_101756664(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE110);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 1026;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,resetGnss,connected\", \"isConnected\":%{public}hhd}", (uint8_t *)v7, 0x18u);
  }
  if (a2)
    v5 = 2;
  else
    v5 = 3;
  return sub_101756768(a1 + 32, v5);
}

uint64_t sub_101756768(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  uint64_t *v6;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t **v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t);
  _QWORD *v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  NSObject *v29;
  os_log_type_t v30;
  char *v31;
  _BYTE *v32;
  NSObject *v33;
  os_log_type_t v34;
  char *v35;
  int v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  NSObject *v46;
  os_log_type_t v47;
  char *v48;
  int v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int v63;
  _BYTE *v64;
  _BYTE *v65;
  void **v66;
  char *v67;
  char *v68;
  char *v69;
  _QWORD *v70;
  const char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  char *v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _BYTE *v84;
  _BYTE *v85;
  void **v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  void **v93;
  char *v94;
  char *v95;
  const char *v96;
  const char *v97;
  int v98;
  void *v99[2];
  char v100;
  unsigned int v101;
  _BYTE __p[12];
  __int16 v103;
  _BYTE *v104;
  __int16 v105;
  void **v106;
  _BYTE buf[12];
  __int16 v108;
  _BYTE *v109;
  __int16 v110;
  _BYTE *v111;
  _BYTE v112[12];
  __int16 v113;
  _BYTE *v114;
  char v115;

  ++*(_DWORD *)(a1 + 88);
  v101 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_101757C70();
    goto LABEL_159;
  }
  v2 = a1;
  v6 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_101757DDC(qword_1022A0070 == -1);
    goto LABEL_159;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE110);
  v4 = (unint64_t)&qword_1022A0000;
  v8 = qword_1022A0078;
  LODWORD(v3) = *(unsigned __int8 *)(v2 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, *(os_log_type_t *)(v2 + 120)))
  {
    v9 = (_QWORD *)(v2 + 96);
    if (*(char *)(v2 + 119) < 0)
      v9 = (_QWORD *)*v9;
    v10 = *(int *)(v2 + 4);
    if (v10 > 2)
      v11 = "StateUnknown";
    else
      v11 = (&off_1021CE1D8)[v10];
    sub_1015A2E04(__p, v11);
    v12 = SHIBYTE(v105);
    v13 = *(_BYTE **)__p;
    v5 = (void **)v112;
    sub_101755B68(a2, v112);
    v14 = __p;
    if (v12 < 0)
      v14 = v13;
    if (v115 >= 0)
      v15 = v112;
    else
      v15 = *(_BYTE **)v112;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v9;
    v108 = 2080;
    v109 = v14;
    v110 = 2080;
    v111 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v3, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v115 < 0)
      operator delete(*(void **)v112);
    if (SHIBYTE(v105) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE110);
    v59 = (_QWORD *)(v2 + 96);
    if (*(char *)(v2 + 119) < 0)
      v59 = (_QWORD *)*v59;
    v60 = *(int *)(v2 + 4);
    if (v60 > 2)
      v61 = "StateUnknown";
    else
      v61 = (&off_1021CE1D8)[v60];
    v62 = qword_1022A0078;
    v3 = *(unsigned __int8 *)(v2 + 120);
    sub_1015A2E04(v112, v61);
    v63 = v115;
    v64 = *(_BYTE **)v112;
    v5 = v99;
    sub_101755B68(a2, v99);
    v65 = v112;
    if (v63 < 0)
      v65 = v64;
    if (v100 >= 0)
      v66 = v99;
    else
      v66 = (void **)v99[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v59;
    v103 = 2080;
    v104 = v65;
    v105 = 2080;
    v106 = v66;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, v3, "%scurrent_state,%s,event,%s", __p, 32, v97);
    v68 = v67;
    if (v100 < 0)
      operator delete(v99[0]);
    if (v115 < 0)
      operator delete(*(void **)v112);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaResetGnss>::handleEvent(Event) [T = CLEurekaResetGnss]", "%s\n", v68);
    if (v68 != buf)
      free(v68);
  }
  v16 = *(_QWORD *)(v2 + 16);
  if (!v16)
    goto LABEL_31;
  v17 = (uint64_t **)(v2 + 8);
  v18 = *(_DWORD *)(v2 + 4);
  v19 = v2 + 16;
  do
  {
    v20 = *(_DWORD *)(v16 + 32);
    v21 = v20 < v18;
    if (v20 >= v18)
      v22 = (uint64_t *)v16;
    else
      v22 = (uint64_t *)(v16 + 8);
    if (!v21)
      v19 = v16;
    v16 = *v22;
  }
  while (*v22);
  if (v19 == v2 + 16 || v18 < *(_DWORD *)(v19 + 32))
  {
LABEL_31:
    sub_101757F4C();
    goto LABEL_159;
  }
  v24 = *(uint64_t (**)(_QWORD *, uint64_t))(v19 + 40);
  v23 = *(_QWORD *)(v19 + 48);
  v25 = (_QWORD *)(*(_QWORD *)(v2 + 32) + (v23 >> 1));
  if ((v23 & 1) != 0)
    v24 = *(uint64_t (**)(_QWORD *, uint64_t))(*v25 + v24);
  v26 = v24(v25, a2);
  v3 = v26;
  v98 = v26;
  if (a2 <= 1 && (_DWORD)v26 != v101)
  {
    sub_101758390();
    while (1)
    {
LABEL_159:
      while (1)
      {
        __break(1u);
LABEL_160:
        v78 = "StateUnknown";
LABEL_161:
        v81 = *(_QWORD *)(v4 + 120);
        v82 = *(unsigned __int8 *)(v2 + 120);
        sub_1015A2E04(v112, v78);
        v83 = v115;
        v84 = *(_BYTE **)v112;
        sub_1015A2E04(v99, "Exit");
        v85 = v112;
        if (v83 < 0)
          v85 = v84;
        if (v100 >= 0)
          v86 = v99;
        else
          v86 = (void **)v99[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v5;
        v103 = 2080;
        v104 = v85;
        v105 = 2080;
        v106 = v86;
        LODWORD(v96) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v81, v82, "%soldState,%s,event,%s", __p, v96, v97);
        v88 = v87;
        if (v100 < 0)
          operator delete(v99[0]);
        if (v115 < 0)
          operator delete(*(void **)v112);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaResetGnss>::handleEvent(Event) [T = CLEurekaResetGnss]", "%s\n", v88);
        v17 = (uint64_t **)v97;
        if (v88 != buf)
          free(v88);
LABEL_78:
        v40 = *(_QWORD *)(v2 + 32);
        *(_QWORD *)buf = &v101;
        v41 = sub_1000610B4(v17, (int *)&v101, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v42 = v41[5];
        v43 = (uint64_t)v41[6];
        v44 = (_QWORD *)(v40 + (v43 >> 1));
        if ((v43 & 1) != 0)
          v42 = *(uint64_t **)(*v44 + v42);
        v45 = ((uint64_t (*)(_QWORD *, uint64_t))v42)(v44, 1);
        if (v45 == v101)
          break;
        sub_101758224();
      }
      *(_DWORD *)(v2 + 4) = v3;
      if (v6[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE110);
      v46 = *(NSObject **)(v4 + 120);
      v47 = *(_BYTE *)(v2 + 120);
      if (os_log_type_enabled(v46, v47))
      {
        v5 = (void **)(v2 + 96);
        if (*(char *)(v2 + 119) < 0)
          v5 = (void **)*v5;
        if (v3 > 2)
          v48 = "StateUnknown";
        else
          v48 = (&off_1021CE1D8)[(int)v3];
        sub_1015A2E04(__p, v48);
        v49 = SHIBYTE(v105);
        v50 = *(_BYTE **)__p;
        sub_1015A2E04(v112, "Enter");
        v51 = __p;
        if (v49 < 0)
          v51 = v50;
        if (v115 >= 0)
          v52 = v112;
        else
          v52 = *(_BYTE **)v112;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v5;
        v108 = 2080;
        v109 = v51;
        v110 = 2080;
        v111 = v52;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "%snewState,%s,event,%s", buf, 0x20u);
        if (v115 < 0)
          operator delete(*(void **)v112);
        if (SHIBYTE(v105) < 0)
          operator delete(*(void **)__p);
        v17 = (uint64_t **)v97;
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v6[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE110);
        v79 = (_QWORD *)(v2 + 96);
        if (*(char *)(v2 + 119) < 0)
          v79 = (_QWORD *)*v79;
        if (v3 > 2)
          v80 = "StateUnknown";
        else
          v80 = (&off_1021CE1D8)[(int)v3];
        v89 = *(_QWORD *)(v4 + 120);
        v90 = *(unsigned __int8 *)(v2 + 120);
        sub_1015A2E04(v112, v80);
        v4 = v115;
        v91 = *(_BYTE **)v112;
        sub_1015A2E04(v99, "Enter");
        v92 = v112;
        if ((v4 & 0x80000000) != 0)
          v92 = v91;
        if (v100 >= 0)
          v93 = v99;
        else
          v93 = (void **)v99[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v79;
        v103 = 2080;
        v104 = v92;
        v105 = 2080;
        v106 = v93;
        LODWORD(v96) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v89, v90, "%snewState,%s,event,%s", __p, v96, v97);
        v95 = v94;
        if (v100 < 0)
          operator delete(v99[0]);
        if (v115 < 0)
          operator delete(*(void **)v112);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaResetGnss>::handleEvent(Event) [T = CLEurekaResetGnss]", "%s\n", v95);
        if (v95 != buf)
          free(v95);
      }
      v53 = *(_QWORD *)(v2 + 32);
      *(_QWORD *)buf = &v98;
      v54 = sub_1000610B4(v17, &v98, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v55 = v54[5];
      v56 = (uint64_t)v54[6];
      v57 = (_QWORD *)(v53 + (v56 >> 1));
      if ((v56 & 1) != 0)
        v55 = *(uint64_t **)(*v57 + v55);
      v3 = ((uint64_t (*)(_QWORD *, _QWORD))v55)(v57, 0);
      if ((_DWORD)v3 == v98)
        break;
      sub_1017580B8();
    }
    goto LABEL_103;
  }
  if (*(_DWORD *)(v2 + 88) >= 2u)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE110);
    v27 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v28 = (_QWORD *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0)
        v28 = (_QWORD *)*v28;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE110);
      v70 = (_QWORD *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0)
        v70 = (_QWORD *)*v70;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v70;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v72 = (char *)v71;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLEurekaResetGnss>::handleEvent(Event) [T = CLEurekaResetGnss]", "%s\n", v71);
      if (v72 != buf)
        free(v72);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE110);
  v29 = qword_1022A0078;
  v30 = *(_BYTE *)(v2 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v30))
  {
    v5 = (void **)(v2 + 96);
    if (*(char *)(v2 + 119) < 0)
      v5 = (void **)*v5;
    if (v3 > 2)
      v31 = "StateUnknown";
    else
      v31 = (&off_1021CE1D8)[(int)v3];
    sub_1015A2E04(buf, v31);
    if (v110 >= 0)
      v32 = buf;
    else
      v32 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v5;
    v103 = 2080;
    v104 = v32;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v110) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE110);
    v5 = (void **)(v2 + 96);
    if (*(char *)(v2 + 119) < 0)
      v5 = (void **)*v5;
    if (v3 > 2)
      v69 = "StateUnknown";
    else
      v69 = (&off_1021CE1D8)[(int)v3];
    v73 = qword_1022A0078;
    v74 = *(unsigned __int8 *)(v2 + 120);
    sub_1015A2E04(__p, v69);
    if (v105 >= 0)
      v75 = __p;
    else
      v75 = *(_BYTE **)__p;
    *(_DWORD *)v112 = 136315394;
    *(_QWORD *)&v112[4] = v5;
    v113 = 2080;
    v114 = v75;
    LODWORD(v96) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, v74, "%snewState,%s", v112, v96);
    v77 = v76;
    if (SHIBYTE(v105) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaResetGnss>::handleEvent(Event) [T = CLEurekaResetGnss]", "%s\n", v77);
    if (v77 != buf)
      free(v77);
  }
  if ((_DWORD)v3 != v101)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE110);
    v33 = qword_1022A0078;
    v34 = *(_BYTE *)(v2 + 120);
    v97 = (const char *)(v2 + 8);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v34))
    {
      v5 = (void **)(v2 + 96);
      if (*(char *)(v2 + 119) < 0)
        v5 = (void **)*v5;
      if (v101 > 2)
        v35 = "StateUnknown";
      else
        v35 = (&off_1021CE1D8)[v101];
      sub_1015A2E04(__p, v35);
      v36 = SHIBYTE(v105);
      v37 = *(_BYTE **)__p;
      sub_1015A2E04(v112, "Exit");
      v38 = __p;
      if (v36 < 0)
        v38 = v37;
      if (v115 >= 0)
        v39 = v112;
      else
        v39 = *(_BYTE **)v112;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v5;
      v108 = 2080;
      v109 = v38;
      v110 = 2080;
      v111 = v39;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v115 < 0)
        operator delete(*(void **)v112);
      if (SHIBYTE(v105) < 0)
        operator delete(*(void **)__p);
      v4 = (unint64_t)&qword_1022A0000;
      v17 = (uint64_t **)(v2 + 8);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE110);
      v5 = (void **)(v2 + 96);
      if (*(char *)(v2 + 119) < 0)
        v5 = (void **)*v5;
      if (v101 <= 2)
      {
        v78 = (&off_1021CE1D8)[v101];
        goto LABEL_161;
      }
      goto LABEL_160;
    }
    goto LABEL_78;
  }
LABEL_103:
  --*(_DWORD *)(v2 + 88);
  return v3;
}

void sub_101757530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_101757590(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE110);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 1026;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,resetGnss,ls\", \"isEnabled\":%{public}hhd}", (uint8_t *)v7, 0x18u);
  }
  if (a2)
    v5 = 4;
  else
    v5 = 5;
  return sub_101756768(a1 + 32, v5);
}

uint64_t sub_101757694(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE110);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289282;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1026;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,resetGnss,response\", \"error\":%{public}d}", (uint8_t *)v8, 0x18u);
  }
  if (a2 == 3 || a2 == 23)
    v6 = 6;
  else
    v6 = 7;
  return sub_101756768(a1 + 32, v6);
}

void sub_10175779C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1017577CC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1017577F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_101757834(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void **v6;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a2;
  v3 = a2[1];
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v6 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 2;
  sub_1015A2E04(&v8, "");
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v8;
  *(_QWORD *)(a1 + 112) = v9;
  return a1;
}

void sub_101757914(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  void **v7;

  if (*(char *)(v2 + 119) < 0)
    operator delete(*v7);
  sub_100008848(v4, *v6);
  sub_100261F44(v3);
  sub_100008848(v1, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_101757950(uint64_t a1)
{
  return sub_101756768(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_101757960()
{
  NSObject *v0;
  uint8_t v1[40];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE110);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"assert because of empty reset gnss callback\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE110);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "assert because of empty reset gnss callback", "{\"msg%{public}.0s\":\"assert because of empty reset gnss callback\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE110);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"assert because of empty reset gnss callback\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
  }
}

#error "101757B78: call analysis failed (funcsize=73)"

#error "101757CE8: call analysis failed (funcsize=72)"

#error "101757E54: call analysis failed (funcsize=73)"

#error "101757FC4: call analysis failed (funcsize=72)"

#error "101758130: call analysis failed (funcsize=72)"

#error "10175829C: call analysis failed (funcsize=72)"

#error "101758408: call analysis failed (funcsize=72)"

BOOL sub_1017584FC(AriMsg *a1, uint64_t a2)
{
  return sub_101758524(a1, 1u, (void *)a2, (void *)(a2 + 4)) == 0;
}

uint64_t sub_101758524(AriMsg *a1, unsigned int a2, void *a3, void *a4)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return AriMsg::unpack(a1, a2 + 1, a4, 0x14uLL, 0, 0);
  return result;
}

BOOL sub_10175858C(AriMsg *a1, void *a2)
{
  return AriMsg::unpack(a1, 1u, a2, 0x18uLL, 0, 0) == 0;
}

BOOL sub_1017585BC(AriMsg *a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a2[5];
    v5 = a2[6];
    v7 = a2[4];
    v8 = a2[63];
    v9 = a2[64];
    *(_DWORD *)buf = 67110145;
    v28 = v5;
    v29 = 1024;
    v30 = v7;
    v31 = 1024;
    v32 = v6;
    v33 = 1025;
    v34 = v8;
    v35 = 1025;
    v36 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "NilrDbg,locationResponse,sessionId,%u,sessionProtocol,%d,posProtocol,%d,locEstimate,%{private}d,%{private}d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v12 = a2[5];
    v11 = a2[6];
    v13 = a2[4];
    v14 = a2[63];
    v15 = a2[64];
    v18[0] = 67110145;
    v18[1] = v11;
    v19 = 1024;
    v20 = v13;
    v21 = 1024;
    v22 = v12;
    v23 = 1025;
    v24 = v14;
    v25 = 1025;
    v26 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "NilrDbg,locationResponse,sessionId,%u,sessionProtocol,%d,posProtocol,%d,locEstimate,%{private}d,%{private}d", v18, 32);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLIceMessageDef::pack(AriMsg &, const IBILpMeasurePositionLocationInfoRspParams &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return !AriMsg::pack(a1, 1u, a2, 4uLL)
      && sub_101758824(a1, 3u, a2 + 2, a2 + 3, a2 + 4, a2 + 7, a2 + 25, a2 + 56, a2 + 108) == 0;
}

uint64_t sub_101758824(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, const void *a9)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!(_DWORD)result)
    return sub_10175AB2C(a1, a2 + 1, a4, a5, a6, a7, a8, a9);
  return result;
}

BOOL sub_1017588B8(AriMsg *a1, char *a2)
{
  if (AriMsg::pack(a1, 1u, a2, 4uLL)
    || sub_101758948(a1, 3u, a2 + 8, a2 + 12, a2 + 16, a2 + 28, a2 + 484, a2 + 3708))
  {
    return 0;
  }
  if (sub_10075BD84())
    return AriMsg::pack(a1, 9u, a2 + 3712, 4uLL) == 0;
  return 1;
}

uint64_t sub_101758948(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!(_DWORD)result)
    return sub_10175AD54(a1, a2 + 1, a4, a5, a6, a7, a8);
  return result;
}

BOOL sub_1017589D4(AriMsg *a1, char *a2)
{
  return !AriMsg::pack(a1, 1u, a2, 4uLL)
      && sub_101758A30(a1, 3u, a2 + 8, a2 + 12, a2 + 16) == 0;
}

uint64_t sub_101758A30(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!(_DWORD)result)
    return sub_10175AEF0(a1, a2 + 1, a4, a5);
  return result;
}

BOOL sub_101758A8C(AriMsg *a1, char *a2)
{
  return !AriMsg::pack(a1, 1u, a2, 4uLL)
      && sub_101758AF0(a1, 3u, a2 + 8, a2 + 12, a2 + 16, a2 + 28, a2 + 68) == 0;
}

uint64_t sub_101758AF0(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!(_DWORD)result)
    return sub_10175AF48(a1, a2 + 1, a4, a5, a6, a7);
  return result;
}

BOOL sub_101758B68(AriMsg *a1, uint64_t a2)
{
  return sub_101758B90(a1, 1u, (const void *)a2, (const void *)(a2 + 4)) == 0;
}

uint64_t sub_101758B90(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!(_DWORD)result)
    return AriMsg::pack(a1, a2 + 1, a4, 0x10uLL);
  return result;
}

BOOL sub_101758BE8(AriMsg *a1, void *a2)
{
  return AriMsg::pack(a1, 1u, a2, 8uLL) == 0;
}

BOOL sub_101758C10(AriMsg *a1, char *a2)
{
  return !AriMsg::pack(a1, 1u, a2, 4uLL) && AriMsg::pack(a1, 3u, a2 + 8, 4uLL) == 0;
}

BOOL sub_101758C68(AriMsg *a1, char *a2)
{
  return !AriMsg::pack(a1, 1u, a2, 4uLL) && AriMsg::pack(a1, 3u, a2 + 4, 4uLL) == 0;
}

BOOL sub_101758CC0(AriMsg *a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6 = a2[3];
    v5 = a2[4];
    v7 = a2[2];
    *(_DWORD *)buf = 67109632;
    v19 = v5;
    v20 = 1024;
    v21 = v7;
    v22 = 1024;
    v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#wlan,WlanResponse,sessionId,%u,sessionProtocol,%d,posProtocol,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v9 = a2[3];
    v10 = a2[2];
    v14 = 1024;
    v15 = v10;
    v16 = 1024;
    v17 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#wlan,WlanResponse,sessionId,%u,sessionProtocol,%d,posProtocol,%d", &v13, 20, 67109632);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLIceMessageDef::pack(AriMsg &, const IBIMsLpWlanMeasurementRspParam &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return !AriMsg::pack(a1, 1u, a2, 4uLL)
      && sub_101758EE4(a1, 3u, a2 + 1, a2 + 2, a2 + 5) == 0;
}

uint64_t sub_101758EE4(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!(_DWORD)result)
    return sub_10175B06C(a1, a2 + 1, a4, a5);
  return result;
}

BOOL sub_101758F40(AriMsg *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  int v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_DWORD *)(a2 + 20);
    v5 = *(_DWORD *)(a2 + 24);
    v7 = *(_DWORD *)(a2 + 16);
    v8 = *(unsigned __int8 *)(a2 + 12);
    v9 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 67110144;
    v23 = v5;
    v24 = 1024;
    v25 = v7;
    v26 = 1024;
    v27 = v6;
    v28 = 1024;
    v29 = v8;
    v30 = 1024;
    v31 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#dbh,MeasurePositionMeasurementsAndEstimateRsp,sessionId,%u,sessionProtocol,%d,posProtocol,%d,rsptype,%d,result,%d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v11 = *(_DWORD *)(a2 + 20);
    v12 = *(_DWORD *)(a2 + 16);
    v13 = *(unsigned __int8 *)(a2 + 12);
    v14 = *(_DWORD *)(a2 + 8);
    LOWORD(v18) = 1024;
    HIWORD(v18) = v12;
    HIWORD(v19) = HIWORD(v13);
    v20 = 1024;
    v21 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#dbh,MeasurePositionMeasurementsAndEstimateRsp,sessionId,%u,sessionProtocol,%d,posProtocol,%d,rsptype,%d,result,%d", &v17, 32, 67110144, v18, v11);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLIceMessageDef::pack(AriMsg &, const IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (AriMsg::pack(a1, 1u, (const void *)a2, 4uLL)
    || sub_1017591C8(a1, 3u, (const void *)(a2 + 8), (const void *)(a2 + 12), (const void *)(a2 + 16), (const void *)(a2 + 28), (const void *)(a2 + 484), (const void *)(a2 + 532)))
  {
    return 0;
  }
  if (sub_10075BD84())
    return AriMsg::pack(a1, 9u, (const void *)(a2 + 536), 4uLL) == 0;
  return 1;
}

uint64_t sub_1017591C8(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!(_DWORD)result)
    return sub_10175B0C4(a1, a2 + 1, a4, a5, a6, a7, a8);
  return result;
}

BOOL sub_101759254(AriMsg *a1, char *a2)
{
  return !AriMsg::unpack(a1, 1u, a2, 4uLL, 0, 0)
      && sub_1017592B8(a1, 3u, a2 + 8, a2 + 588, a2 + 1744) == 0;
}

uint64_t sub_1017592B8(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0x244uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175B260(a1, a2 + 1, a4, a5);
  return result;
}

BOOL sub_10175931C(AriMsg *a1, uint64_t a2)
{
  _BYTE v3[4];
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  return sub_10175B2C8(a1, 1u, (uint64_t)v3, a2, v3, &v4, (char *)&v4 + 4, &v5, (char *)&v5 + 2, (char *)&v5 + 4, &v6, (char *)&v6 + 4, &v7, (char *)&v7 + 1, (char *)&v7 + 2, (char *)&v7 + 4, &v8, (char *)&v8 + 4, &v9,
           (char *)&v9 + 4,
           &v10,
           (char *)&v10 + 4,
           &v11,
           (char *)&v11 + 4,
           (char *)&v11 + 5,
           (char *)&v11 + 6,
           &v12,
           (char *)&v12 + 4);
}

BOOL sub_1017593F0(AriMsg *a1, _DWORD *a2)
{
  _BYTE v3[4];
  uint64_t v4;

  return sub_10175C780(a1, 1u, (uint64_t)v3, a2, v3, &v4, (char *)&v4 + 4);
}

BOOL sub_101759428(AriMsg *a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  return sub_1017594A4(a1, (uint64_t)&v5 + 4, &v3, a2, (char *)&v5 + 4, &v6, (char *)&v6 + 4, (char *)&v6 + 6, (char *)&v6 + 7, &v7, (char *)&v7 + 4, &v8, (char *)&v8 + 4, &v9, &v3, &v4, &v5);
}

BOOL sub_1017594A4(AriMsg *a1, uint64_t a2, int *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  int v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v25;
  _DWORD v26[4];
  uint8_t buf[4];
  int v28;

  v20 = sub_10175C9BC(a1, 1u, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  if (v20)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v21 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v28 = v20;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v26[0] = 67240192;
      v26[1] = v20;
      LODWORD(v25) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v26, v25);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIntoNilr(const AriMsg &, TIbi &, IBILpSessionInfo &, TNilr &, Trest...) [TIbi = CLIBILpGpsReferenceTime, TNilr = gnss::Emergency::Cplane::GpsReferenceTimeFromModem, Trest = <unsigned int *, unsigned int *, unsigned short *, unsigned char *, signed char *, IBILpUtranSfnGpsUncertainty *, IBILpCellTimeAssistance *, unsigned char *, IBILpTowAssist (*)[16], unsigned char *, IBILpSessionProtocol *, IBILpPosProtocol *, unsigned int *>]", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  else
  {
    sub_1017A186C(a2, a3, a4);
  }
  return v20 == 0;
}

BOOL sub_1017596B0(AriMsg *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _BYTE v5[4];
  int v6;
  uint64_t v7;
  uint64_t v8;

  return sub_101759730(a1, (uint64_t)v5, &v3, a2, v5, &v6, (char *)&v6 + 1, (char *)&v6 + 2, &v7, (char *)&v7 + 4, &v8, (char *)&v8 + 1, (char *)&v8 + 2, (char *)&v8 + 3, (char *)&v8 + 4, (char *)&v8 + 5, &v3, &v4, (char *)&v4 + 4);
}

BOOL sub_101759730(AriMsg *a1, uint64_t a2, int *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  int v22;
  NSObject *v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v27;
  _DWORD v28[4];
  uint8_t buf[4];
  int v30;

  v22 = sub_10175D038(a1, 1u, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  if (v22)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v23 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v30 = v22;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v28[0] = 67240192;
      v28[1] = v22;
      LODWORD(v27) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v28, v27);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIntoNilr(const AriMsg &, TIbi &, IBILpSessionInfo &, TNilr &, Trest...) [TIbi = CLIBILpGpsReferenceLocation, TNilr = gnss::Emergency::Cplane::ReferenceLocationFromModem, Trest = <unsigned int *, unsigned char *, unsigned char *, unsigned short *, unsigned int *, int *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, IBILpSessionProtocol *, IBILpPosProtocol *, unsigned int *>]", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }
  else
  {
    sub_1017A3E10(a2, a3, a4);
  }
  return v22 == 0;
}

BOOL sub_10175993C(AriMsg *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _BYTE v5[4];
  int v6;
  uint64_t v7;

  return sub_101759990(a1, (uint64_t)v5, &v3, a2, v5, &v6, &v7, &v3, &v4, (char *)&v4 + 4);
}

BOOL sub_101759990(AriMsg *a1, uint64_t a2, int *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  int v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v18[4];
  uint8_t buf[4];
  int v20;

  v13 = sub_10175D7C4(a1, 1u, a5, a6, a7, a8, a9, a10);
  if (v13)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v20 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v18[0] = 67240192;
      v18[1] = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v18, 8);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIntoNilr(const AriMsg &, TIbi &, IBILpSessionInfo &, TNilr &, Trest...) [TIbi = CLIBILpGpsNavigationModel, TNilr = gnss::Emergency::Cplane::GpsNavigationModelFromModem, Trest = <unsigned int *, unsigned char *, IBILpGpsEphemeris (*)[16], IBILpSessionProtocol *, IBILpPosProtocol *, unsigned int *>]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  else
  {
    sub_1017A2868(a2, a3, a4);
  }
  return v13 == 0;
}

uint64_t sub_101759B84(AriMsg *a1, _DWORD *a2)
{
  _BYTE v5[8];
  int v6;

  if (AriMsg::unpack(a1, 1u, v5, 4uLL, 0, 0)
    || AriMsg::unpack(a1, 3u, &v6, 0xCuLL, 0, 0))
  {
    return 0;
  }
  sub_1017A0F5C((uint64_t)v5, a2);
  return 1;
}

uint64_t sub_101759C0C(AriMsg *a1, _DWORD *a2)
{
  _BYTE v5[8];
  uint64_t v6;

  if (AriMsg::unpack(a1, 1u, v5, 4uLL, 0, 0)
    || AriMsg::unpack(a1, 3u, &v6, 4uLL, 0, 0)
    || AriMsg::unpack(a1, 4u, (char *)&v6 + 4, 0xCuLL, 0, 0))
  {
    return 0;
  }
  sub_1017A0E18((uint64_t)v5, a2);
  return 1;
}

uint64_t sub_101759CB8(AriMsg *a1, _DWORD *a2)
{
  _BYTE v5[8];
  uint64_t v6;

  if (AriMsg::unpack(a1, 1u, v5, 4uLL, 0, 0)
    || AriMsg::unpack(a1, 3u, &v6, 4uLL, 0, 0)
    || AriMsg::unpack(a1, 4u, (char *)&v6 + 4, 0xCuLL, 0, 0))
  {
    return 0;
  }
  sub_1017A0E64((uint64_t)v5, a2);
  return 1;
}

uint64_t sub_101759D64(AriMsg *a1, _DWORD *a2)
{
  _BYTE v5[8];
  uint64_t v6;

  if (AriMsg::unpack(a1, 1u, v5, 4uLL, 0, 0)
    || AriMsg::unpack(a1, 3u, &v6, 4uLL, 0, 0)
    || AriMsg::unpack(a1, 4u, (char *)&v6 + 4, 0xCuLL, 0, 0))
  {
    return 0;
  }
  sub_1017A0EB0((uint64_t)v5, a2);
  return 1;
}

BOOL sub_101759E10(AriMsg *a1, uint64_t a2)
{
  _BYTE v5[4];
  _BYTE v6[4];
  _BYTE v7[4];
  _BYTE v8[4];
  int v9;
  uint64_t v10;

  if (sub_10075BD88())
    return sub_10175D950(a1, 1u, (uint64_t)v5, a2, v5, v6, v7, v8, &v9, &v10, (char *)&v10 + 4);
  else
    return sub_10175DD68(a1, 1u, (uint64_t)v5, a2, v5, v6, v7, v8);
}

BOOL sub_101759E98(AriMsg *a1, uint64_t a2)
{
  _BYTE v3[4];
  uint64_t v4;
  int v5;
  uint64_t v6;

  return sub_10175DF44(a1, 1u, (uint64_t)v3, a2, v3, &v4, &v5, &v6);
}

BOOL sub_101759ED4(AriMsg *a1, uint64_t a2)
{
  _BYTE v5[4];
  _BYTE v6[12];
  _BYTE v7[4];
  int v8;
  uint64_t v9;

  if (sub_10075BD88())
    return sub_10175E264(a1, 1u, (uint64_t)v5, a2, v5, v6, v7, &v8, &v9, (char *)&v9 + 4);
  else
    return sub_10175E560(a1, 1u, (uint64_t)v5, a2, v5, v6, v7);
}

BOOL sub_101759F54(AriMsg *a1, _DWORD *a2)
{
  _BYTE v3[4];
  int v4;
  uint64_t v5;

  return sub_10175E804(a1, 1u, (uint64_t)v3, a2, v3, &v4, &v5, (char *)&v5 + 4);
}

BOOL sub_101759F90(AriMsg *a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  return sub_101759FF4(a1, (uint64_t)&v5 + 4, &v3, a2, (char *)&v5 + 4, &v6, (char *)&v6 + 4, &v7, &v8, &v9, &v3, &v4, &v5);
}

BOOL sub_101759FF4(AriMsg *a1, uint64_t a2, int *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  int v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v21;
  _DWORD v22[4];
  uint8_t buf[4];
  int v24;

  v16 = sub_10175EABC(a1, 1u, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  if (v16)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v22[0] = 67240192;
      v22[1] = v16;
      LODWORD(v21) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v22, v21);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIntoNilr(const AriMsg &, TIbi &, IBILpSessionInfo &, TNilr &, Trest...) [TIbi = CLIBILpGpsAcquisitionAssistance, TNilr = gnss::Emergency::Cplane::GpsAcqAssistanceFromModem, Trest = <unsigned int *, unsigned int *, unsigned char *, IBILpCellTimeAssistance *, IBILpGpsAcquisitionElement (*)[16], unsigned char *, IBILpSessionProtocol *, IBILpPosProtocol *, unsigned int *>]", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  else
  {
    sub_1017A2968(a2, a3, a4);
  }
  return v16 == 0;
}

BOOL sub_10175A1F8(AriMsg *a1, uint64_t a2)
{
  _BYTE v3[4];
  int v4;
  uint64_t v5;

  return sub_10175A234(a1, 1u, (uint64_t)v3, a2, v3, &v4, &v5, (char *)&v5 + 4);
}

BOOL sub_10175A234(AriMsg *a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  v10 = sub_10175EDC8(a1, a2, a5, a6, a7, a8);
  if (v10)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v15[0] = 67240192;
      v15[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v15, 8);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbi = IBIMsCellTimeStampIndCbParam, TNilr = gnss::Emergency::Cplane::CellFTAssistanceFromModem, Trest = <unsigned int *, int *, IBICtsNetworkType *, IBICtsCellTimeData *>]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    sub_1017A10F8(a3, a4);
  }
  return v10 == 0;
}

uint64_t sub_10175A410(AriMsg *a1, _DWORD *a2)
{
  _BYTE v5[4];
  int v6;

  if (AriMsg::unpack(a1, 1u, v5, 4uLL, 0, 0)
    || AriMsg::unpack(a1, 3u, &v6, 4uLL, 0, 0))
  {
    return 0;
  }
  sub_1017A3EEC((uint64_t)v5, a2);
  return 1;
}

BOOL sub_10175A498(AriMsg *a1, uint64_t a2)
{
  _BYTE v3[4];
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  return sub_10175A56C(a1, 1u, (uint64_t)v3, a2, v3, &v4, &v5, (char *)&v5 + 4, &v6, (char *)&v6 + 4, &v7, (char *)&v7 + 4, &v8, (char *)&v8 + 4, &v9, (char *)&v9 + 4, &v10, (char *)&v10 + 4, &v11,
           &v12,
           (char *)&v12 + 4,
           (char *)&v12 + 6,
           &v13,
           (char *)&v13 + 1,
           &v14,
           (char *)&v14 + 2,
           (char *)&v14 + 4,
           (char *)&v14 + 6);
}

BOOL sub_10175A56C(AriMsg *a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  int v30;
  NSObject *v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v35;
  _DWORD v36[4];
  uint8_t buf[4];
  int v38;

  v30 = sub_10175EF0C(a1, a2, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28);
  if (v30)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v31 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v38 = v30;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v36[0] = 67240192;
      v36[1] = v30;
      LODWORD(v35) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v36, v35);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbi = IBIXccLtlIndCb, TNilr = GnssHal::ExtensionsOlaf::LtlInfo, Trest = <int *, IBIXccLtlInfoType *, int *, int *, int *, int *, int *, int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *, int (*)[135], unsigned short (*)[135], int *, short *, short (*)[8], unsigned char *, unsigned char *, short *, unsigned char *, unsigned short *, unsigned short *>]", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  else
  {
    sub_1017A3EF8(a3, a4);
  }
  return v30 == 0;
}

BOOL sub_10175A77C(AriMsg *a1, void *a2)
{
  return AriMsg::unpack(a1, 1u, a2, 4uLL, 0, 0) == 0;
}

BOOL sub_10175A7AC(AriMsg *a1, uint64_t a2)
{
  _BOOL8 v3;
  NSObject *v4;
  int v5;
  int v6;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _BYTE v12[4];
  uint64_t v13;
  int v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;

  v3 = sub_1017601B4(a1, 1u, (uint64_t)v12, a2, v12, &v13, &v14, (char *)&v14 + 2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)a2;
    v6 = *(unsigned __int16 *)(a2 + 16);
    *(_DWORD *)buf = 67109376;
    v19 = v5;
    v20 = 1024;
    v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#wlan,WlanRequestIBI,nInstance,%d,respTime,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v8 = *(_DWORD *)a2;
    v9 = *(unsigned __int16 *)(a2 + 16);
    v15[0] = 67109376;
    v15[1] = v8;
    v16 = 1024;
    v17 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#wlan,WlanRequestIBI,nInstance,%d,respTime,%d", v15, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLIceMessageDef::unpack(const AriMsg &, gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return v3;
}

uint64_t sub_10175A9A8(AriMsg *a1, uint64_t a2)
{
  _BYTE v5[4];
  uint64_t v6;

  if (AriMsg::unpack(a1, 1u, v5, 4uLL, 0, 0)
    || AriMsg::unpack(a1, 3u, &v6, 4uLL, 0, 0)
    || AriMsg::unpack(a1, 4u, (char *)&v6 + 4, 0xCuLL, 0, 0))
  {
    return 0;
  }
  sub_1017A4074((uint64_t)v5, a2);
  return 1;
}

uint64_t sub_10175AA54(AriMsg *a1, _DWORD *a2)
{
  _BYTE v5[4];
  uint64_t v6;

  if (AriMsg::unpack(a1, 1u, v5, 4uLL, 0, 0)
    || AriMsg::unpack(a1, 3u, &v6, 4uLL, 0, 0)
    || AriMsg::unpack(a1, 4u, (char *)&v6 + 4, 0xCuLL, 0, 0))
  {
    return 0;
  }
  sub_1017A4378((uint64_t)v5, a2);
  return 1;
}

void sub_10175AB00(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_10175AB2C(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 1uLL);
  if (!(_DWORD)result)
    return sub_10175ABB8(a1, a2 + 1, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_10175ABB8(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 0xCuLL);
  if (!(_DWORD)result)
    return sub_10175AC30(a1, a2 + 1, a4, a5, a6, a7);
  return result;
}

uint64_t sub_10175AC30(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 0x48uLL);
  if (!(_DWORD)result)
    return sub_10175ACA0(a1, a2 + 1, a4, a5, a6);
  return result;
}

uint64_t sub_10175ACA0(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 0x7CuLL);
  if (!(_DWORD)result)
    return sub_10175ACFC(a1, a2 + 1, a4, a5);
  return result;
}

uint64_t sub_10175ACFC(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 0xD0uLL);
  if (!(_DWORD)result)
    return AriMsg::pack(a1, a2 + 1, a4, 0x1CuLL);
  return result;
}

uint64_t sub_10175AD54(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 1uLL);
  if (!(_DWORD)result)
    return sub_10175ADCC(a1, a2 + 1, a4, a5, a6, a7);
  return result;
}

uint64_t sub_10175ADCC(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 0xCuLL);
  if (!(_DWORD)result)
    return sub_10175AE3C(a1, a2 + 1, a4, a5, a6);
  return result;
}

uint64_t sub_10175AE3C(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 0x1C8uLL);
  if (!(_DWORD)result)
    return sub_10175AE98(a1, a2 + 1, a4, a5);
  return result;
}

uint64_t sub_10175AE98(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 0xC98uLL);
  if (!(_DWORD)result)
    return AriMsg::pack(a1, a2 + 1, a4, 4uLL);
  return result;
}

uint64_t sub_10175AEF0(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!(_DWORD)result)
    return AriMsg::pack(a1, a2 + 1, a4, 4uLL);
  return result;
}

uint64_t sub_10175AF48(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 1uLL);
  if (!(_DWORD)result)
    return sub_10175AFB8(a1, a2 + 1, a4, a5, a6);
  return result;
}

uint64_t sub_10175AFB8(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 0xCuLL);
  if (!(_DWORD)result)
    return sub_10175B014(a1, a2 + 1, a4, a5);
  return result;
}

uint64_t sub_10175B014(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 0x26uLL);
  if (!(_DWORD)result)
    return AriMsg::pack(a1, a2 + 1, a4, 0x72CuLL);
  return result;
}

uint64_t sub_10175B06C(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 0xCuLL);
  if (!(_DWORD)result)
    return AriMsg::pack(a1, a2 + 1, a4, 0x418uLL);
  return result;
}

uint64_t sub_10175B0C4(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 1uLL);
  if (!(_DWORD)result)
    return sub_10175B13C(a1, a2 + 1, a4, a5, a6, a7);
  return result;
}

uint64_t sub_10175B13C(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 0xCuLL);
  if (!(_DWORD)result)
    return sub_10175B1AC(a1, a2 + 1, a4, a5, a6);
  return result;
}

uint64_t sub_10175B1AC(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 0x1C8uLL);
  if (!(_DWORD)result)
    return sub_10175B208(a1, a2 + 1, a4, a5);
  return result;
}

uint64_t sub_10175B208(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result;

  result = AriMsg::pack(a1, a2, a3, 0x30uLL);
  if (!(_DWORD)result)
    return AriMsg::pack(a1, a2 + 1, a4, 4uLL);
  return result;
}

uint64_t sub_10175B260(AriMsg *a1, unsigned int a2, void *a3, void *a4)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0x484uLL, 0, 0);
  if (!(_DWORD)result)
    return AriMsg::unpack(a1, a2 + 1, a4, 0x604uLL, 0, 0);
  return result;
}

BOOL sub_10175B2C8(AriMsg *a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  int v30;
  NSObject *v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v35;
  _DWORD v36[4];
  uint8_t buf[4];
  int v38;

  v30 = sub_10175B4D8(a1, a2, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28);
  if (v30)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v31 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v38 = v30;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v36[0] = 67240192;
      v36[1] = v30;
      LODWORD(v35) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v36, v35);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbi = CLIBILpMeasurePositionReqParams, TNilr = gnss::Emergency::Cplane::PositionRequestFromModem, Trest = <unsigned int *, unsigned short *, IBILpMethodType *, unsigned short *, unsigned char *, IBILpSessionProtocol *, int *, int *, unsigned char *, unsigned char *, unsigned char *, int *, int *, int *, unsigned short *, int *, int *, IBILpEnvironment *, IBILpAdditionalInfo *, unsigned char *, unsigned char *, unsigned char *, IBILpPosProtocol *, unsigned int *>]", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  else
  {
    sub_1017A3D68(a3, a4);
  }
  return v30 == 0;
}

uint64_t sub_10175B4D8(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175B630(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26);
  return result;
}

uint64_t sub_10175B630(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 2uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175B778(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24,
             a25);
  return result;
}

uint64_t sub_10175B778(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175B8B0(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24);
  return result;
}

uint64_t sub_10175B8B0(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 2uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175B9D8(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23);
  return result;
}

uint64_t sub_10175B9D8(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175BAF0(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22);
  return result;
}

uint64_t sub_10175BAF0(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175BBF8(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
  return result;
}

uint64_t sub_10175BBF8(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175BCF0(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  return result;
}

uint64_t sub_10175BCF0(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175BDD8(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  return result;
}

uint64_t sub_10175BDD8(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175BEB0(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  return result;
}

uint64_t sub_10175BEB0(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175BF78(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  return result;
}

uint64_t sub_10175BF78(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C038(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  return result;
}

uint64_t sub_10175C038(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C0F4(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return result;
}

uint64_t sub_10175C0F4(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C1B4(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return result;
}

uint64_t sub_10175C1B4(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C270(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return result;
}

uint64_t sub_10175C270(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 2uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C330(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return result;
}

uint64_t sub_10175C330(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C3E0(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11);
  return result;
}

uint64_t sub_10175C3E0(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C48C(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

uint64_t sub_10175C48C(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C528(a1, a2 + 1, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t sub_10175C528(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C5BC(a1, a2 + 1, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_10175C5BC(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C63C(a1, a2 + 1, a4, a5, a6, a7);
  return result;
}

uint64_t sub_10175C63C(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C6B4(a1, a2 + 1, a4, a5, a6);
  return result;
}

uint64_t sub_10175C6B4(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C718(a1, a2 + 1, a4, a5);
  return result;
}

uint64_t sub_10175C718(AriMsg *a1, unsigned int a2, void *a3, void *a4)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return AriMsg::unpack(a1, a2 + 1, a4, 4uLL, 0, 0);
  return result;
}

BOOL sub_10175C780(AriMsg *a1, unsigned int a2, uint64_t a3, _DWORD *a4, void *a5, void *a6, void *a7)
{
  int v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  v9 = sub_10175C958(a1, a2, a5, a6, a7);
  if (v9)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v14[0] = 67240192;
      v14[1] = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v14, 8);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbi = CLIBILpResetDataReqParams, TNilr = gnss::Emergency::Cplane::ResetDataReqParams, Trest = <unsigned int *, int *, IBILpPosProtocol *>]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    sub_1017A1D74(a3, a4);
  }
  return v9 == 0;
}

uint64_t sub_10175C958(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C718(a1, a2 + 1, a4, a5);
  return result;
}

uint64_t sub_10175C9BC(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175CA78(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return result;
}

uint64_t sub_10175CA78(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175CB38(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return result;
}

uint64_t sub_10175CB38(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 2uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175CBF4(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return result;
}

uint64_t sub_10175CBF4(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175CCB4(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return result;
}

uint64_t sub_10175CCB4(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175CD64(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11);
  return result;
}

uint64_t sub_10175CD64(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175CE10(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

uint64_t sub_10175CE10(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0x2ECuLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175CEAC(a1, a2 + 1, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t sub_10175CEAC(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175CF40(a1, a2 + 1, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_10175CF40(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0x100uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175CFC0(a1, a2 + 1, a4, a5, a6, a7);
  return result;
}

uint64_t sub_10175CFC0(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C958(a1, a2 + 1, a4, a5, a6);
  return result;
}

uint64_t sub_10175D038(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175D100(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  return result;
}

uint64_t sub_10175D100(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175D1C0(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  return result;
}

uint64_t sub_10175D1C0(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175D27C(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return result;
}

uint64_t sub_10175D27C(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 2uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175D33C(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return result;
}

uint64_t sub_10175D33C(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175D3F8(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return result;
}

uint64_t sub_10175D3F8(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175D4B8(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return result;
}

uint64_t sub_10175D4B8(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175D568(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11);
  return result;
}

uint64_t sub_10175D568(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175D614(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

uint64_t sub_10175D614(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175D6B0(a1, a2 + 1, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t sub_10175D6B0(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175D744(a1, a2 + 1, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_10175D744(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175CFC0(a1, a2 + 1, a4, a5, a6, a7);
  return result;
}

uint64_t sub_10175D7C4(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175D858(a1, a2 + 1, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_10175D858(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175D8D8(a1, a2 + 1, a4, a5, a6, a7);
  return result;
}

uint64_t sub_10175D8D8(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0x600uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C958(a1, a2 + 1, a4, a5, a6);
  return result;
}

BOOL sub_10175D950(AriMsg *a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  int v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v18[4];
  uint8_t buf[4];
  int v20;

  v13 = sub_10175DB40(a1, a2, a5, a6, a7, a8, a9, a10, a11);
  if (v13)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v20 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v18[0] = 67240192;
      v18[1] = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v18, 8);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbi = CLIBILpGnssAbortReqParams, TNilr = gnss::Emergency::Cplane::GnssAbortReqParams, Trest = <unsigned int *, IBILpPosProtocol *, IBILpSessionProtocol *, unsigned int *, IBILpAbortReason *, unsigned int *, unsigned int *>]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  else
  {
    sub_1017A3954(a3, a4);
  }
  return v13 == 0;
}

uint64_t sub_10175DB40(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175DBDC(a1, a2 + 1, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t sub_10175DBDC(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175DC70(a1, a2 + 1, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_10175DC70(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175DCF0(a1, a2 + 1, a4, a5, a6, a7);
  return result;
}

uint64_t sub_10175DCF0(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C958(a1, a2 + 1, a4, a5, a6);
  return result;
}

BOOL sub_10175DD68(AriMsg *a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  v10 = sub_10175DCF0(a1, a2, a5, a6, a7, a8);
  if (v10)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v15[0] = 67240192;
      v15[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v15, 8);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbi = CLIBILpGnssAbortReqParams, TNilr = gnss::Emergency::Cplane::GnssAbortReqParams, Trest = <unsigned int *, IBILpPosProtocol *, IBILpSessionProtocol *, unsigned int *>]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    sub_1017A3954(a3, a4);
  }
  return v10 == 0;
}

BOOL sub_10175DF44(AriMsg *a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  v10 = sub_10175E120(a1, a2, a5, a6, a7, a8);
  if (v10)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v15[0] = 67240192;
      v15[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v15, 8);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbi = IBIMsLpPosIs801GpsLocationIndCbParam, TNilr = gnss::Emergency::Cplane::PosIs801GpsLocationIndParams, Trest = <unsigned int *, IBILpSessionInfo *, IBILpIs801LocationIndStatus *, IBILpIs801LocationInd *>]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    sub_1017A1000(a3, a4);
  }
  return v10 == 0;
}

uint64_t sub_10175E120(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175E198(a1, a2 + 1, a4, a5, a6);
  return result;
}

uint64_t sub_10175E198(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0xCuLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175E1FC(a1, a2 + 1, a4, a5);
  return result;
}

uint64_t sub_10175E1FC(AriMsg *a1, unsigned int a2, void *a3, void *a4)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return AriMsg::unpack(a1, a2 + 1, a4, 0x30uLL, 0, 0);
  return result;
}

BOOL sub_10175E264(AriMsg *a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  int v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  _DWORD v17[4];
  uint8_t buf[4];
  int v19;

  v12 = sub_10175E44C(a1, a2, a5, a6, a7, a8, a9, a10);
  if (v12)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v17[0] = 67240192;
      v17[1] = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v17, 8);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbi = CLIBILpDiscardedPosSessionIndParams, TNilr = gnss::Emergency::Cplane::DiscardedPosSessionIndParams, Trest = <unsigned int *, IBILpSessionInfo *, IBILpDiscardedPosMsgType *, unsigned int *, unsigned int *, IBILpDiscardReason *>]", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  else
  {
    sub_1017A0FA0(a3, a4);
  }
  return v12 == 0;
}

uint64_t sub_10175E44C(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175E4E0(a1, a2 + 1, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_10175E4E0(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0xCuLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175DCF0(a1, a2 + 1, a4, a5, a6, a7);
  return result;
}

BOOL sub_10175E560(AriMsg *a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  int v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  v9 = sub_10175E738(a1, a2, a5, a6, a7);
  if (v9)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v14[0] = 67240192;
      v14[1] = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v14, 8);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbi = CLIBILpDiscardedPosSessionIndParams, TNilr = gnss::Emergency::Cplane::DiscardedPosSessionIndParams, Trest = <unsigned int *, IBILpSessionInfo *, IBILpDiscardedPosMsgType *>]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    sub_1017A0FA0(a3, a4);
  }
  return v9 == 0;
}

uint64_t sub_10175E738(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175E79C(a1, a2 + 1, a4, a5);
  return result;
}

uint64_t sub_10175E79C(AriMsg *a1, unsigned int a2, void *a3, void *a4)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0xCuLL, 0, 0);
  if (!(_DWORD)result)
    return AriMsg::unpack(a1, a2 + 1, a4, 4uLL, 0, 0);
  return result;
}

BOOL sub_10175E804(AriMsg *a1, unsigned int a2, uint64_t a3, _DWORD *a4, void *a5, void *a6, void *a7, void *a8)
{
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  v10 = sub_10175E9E0(a1, a2, a5, a6, a7, a8);
  if (v10)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v15[0] = 67240192;
      v15[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v15, 8);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbi = CLIBILpPosLocationRequestStatusIndParams, TNilr = gnss::Emergency::Cplane::PosLocationRequestStatusIndParams, Trest = <unsigned int *, IBILpSessionInfo *, unsigned int *, IBILpLocationRequestStatus *>]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    sub_1017A1074(a3, a4);
  }
  return v10 == 0;
}

uint64_t sub_10175E9E0(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175EA58(a1, a2 + 1, a4, a5, a6);
  return result;
}

uint64_t sub_10175EA58(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0xCuLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175C718(a1, a2 + 1, a4, a5);
  return result;
}

uint64_t sub_10175EABC(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175EB6C(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11);
  return result;
}

uint64_t sub_10175EB6C(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175EC18(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

uint64_t sub_10175EC18(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175ECB4(a1, a2 + 1, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t sub_10175ECB4(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0x2ECuLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175ED48(a1, a2 + 1, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_10175ED48(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0x140uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175CFC0(a1, a2 + 1, a4, a5, a6, a7);
  return result;
}

uint64_t sub_10175EDC8(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175EE40(a1, a2 + 1, a4, a5, a6);
  return result;
}

uint64_t sub_10175EE40(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175EEA4(a1, a2 + 1, a4, a5);
  return result;
}

uint64_t sub_10175EEA4(AriMsg *a1, unsigned int a2, void *a3, void *a4)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return AriMsg::unpack(a1, a2 + 1, a4, 0x1CuLL, 0, 0);
  return result;
}

uint64_t sub_10175EF0C(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175F064(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26);
  return result;
}

uint64_t sub_10175F064(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175F1AC(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24,
             a25);
  return result;
}

uint64_t sub_10175F1AC(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175F2E4(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24);
  return result;
}

uint64_t sub_10175F2E4(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175F40C(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23);
  return result;
}

uint64_t sub_10175F40C(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175F524(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22);
  return result;
}

uint64_t sub_10175F524(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175F62C(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
  return result;
}

uint64_t sub_10175F62C(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175F724(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  return result;
}

uint64_t sub_10175F724(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175F80C(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  return result;
}

uint64_t sub_10175F80C(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175F8E4(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  return result;
}

uint64_t sub_10175F8E4(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175F9AC(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  return result;
}

uint64_t sub_10175F9AC(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175FA6C(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  return result;
}

uint64_t sub_10175FA6C(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175FB28(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return result;
}

uint64_t sub_10175FB28(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175FBE8(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return result;
}

uint64_t sub_10175FBE8(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0x21CuLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175FCA4(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return result;
}

uint64_t sub_10175FCA4(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0x10EuLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175FD64(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return result;
}

uint64_t sub_10175FD64(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175FE14(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10, a11);
  return result;
}

uint64_t sub_10175FE14(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 2uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175FEC0(a1, a2 + 1, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

uint64_t sub_10175FEC0(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0x10uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175FF5C(a1, a2 + 1, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t sub_10175FF5C(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10175FFF0(a1, a2 + 1, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_10175FFF0(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_101760070(a1, a2 + 1, a4, a5, a6, a7);
  return result;
}

uint64_t sub_101760070(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 2uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_1017600E8(a1, a2 + 1, a4, a5, a6);
  return result;
}

uint64_t sub_1017600E8(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 1uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10176014C(a1, a2 + 1, a4, a5);
  return result;
}

uint64_t sub_10176014C(AriMsg *a1, unsigned int a2, void *a3, void *a4)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 2uLL, 0, 0);
  if (!(_DWORD)result)
    return AriMsg::unpack(a1, a2 + 1, a4, 2uLL, 0, 0);
  return result;
}

BOOL sub_1017601B4(AriMsg *a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  v10 = sub_101760390(a1, a2, a5, a6, a7, a8);
  if (v10)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE1F0);
      v15[0] = 67240192;
      v15[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unpack failed,result,%{public}d", v15, 8);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbi = IBIMsLpWlanMeasurementReqCbParam, TNilr = gnss::Emergency::Cplane::WlanMeasReqParams, Trest = <unsigned int *, IBILpSessionInfo *, unsigned short *, IBILpWlanReqInfo *>]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    sub_1017A3FC0(a3, a4);
  }
  return v10 == 0;
}

uint64_t sub_101760390(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 4uLL, 0, 0);
  if (!(_DWORD)result)
    return sub_101760408(a1, a2 + 1, a4, a5, a6);
  return result;
}

uint64_t sub_101760408(AriMsg *a1, unsigned int a2, void *a3, void *a4, void *a5)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 0xCuLL, 0, 0);
  if (!(_DWORD)result)
    return sub_10176046C(a1, a2 + 1, a4, a5);
  return result;
}

uint64_t sub_10176046C(AriMsg *a1, unsigned int a2, void *a3, void *a4)
{
  uint64_t result;

  result = AriMsg::unpack(a1, a2, a3, 2uLL, 0, 0);
  if (!(_DWORD)result)
    return AriMsg::unpack(a1, a2 + 1, a4, 1uLL, 0, 0);
  return result;
}

void sub_1017604D4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, double a5, double a6)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(double *)a1 = a5;
  *(double *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = *a3;
  v7 = a3[1];
  *(_QWORD *)(a1 + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_100270E34(a1 + 40, a4);
  sub_100602438(a1 + 72, *(void **)(a1 + 16), (uint64_t)sub_1017606A0, a1);
}

void sub_101760634(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  _QWORD *v7;
  uint64_t v8;

  if (*(char *)(v2 + 343) < 0)
    operator delete(*v5);
  sub_100602508(v4);
  v7 = *(_QWORD **)(v2 + 64);
  if (v7 == v3)
  {
    v8 = 4;
    v7 = v3;
  }
  else
  {
    if (!v7)
      goto LABEL_8;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_8:
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_1017606A0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLGnssAssistanceFileDownloader::onFileUpdated");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 16), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CE2B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceFileDownloader::onFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CE2B0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceFileDownloader::onFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_101763460((_QWORD *)a3, v5, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_101760850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101760870(uint64_t a1, int a2)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  double Current;
  BOOL v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  double v14;
  uint8_t *v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  const std::string::value_type *v22;
  const std::string::value_type *v23;
  NSObject *v24;
  double v25;
  _QWORD *v26;
  double v27;
  double v28;
  NSObject *v29;
  uint64_t v30;
  _QWORD *v31;
  const char *v32;
  uint8_t *v33;
  double v34;
  uint8_t *v35;
  double v36;
  _QWORD *v37;
  double v38;
  double v39;
  const char *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  int v45;
  _QWORD *v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  uint64_t v54;
  uint8_t buf[4];
  _QWORD *v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  uint64_t v64;

  v44 = 0.0;
  v4 = sub_1001FD94C();
  v5 = (const char *)(a1 + 320);
  v6 = (const char *)(a1 + 320);
  if (*(char *)(a1 + 343) < 0)
    v6 = *(const char **)v5;
  if (sub_1001FD98C(v4, v6, &v44))
  {
    Current = CFAbsoluteTimeGetCurrent();
    if ((*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v8 = v44 <= 0.0 || Current <= v44;
      if (!v8 && Current - v44 < 1209600.0)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
        v9 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          v10 = *(_QWORD *)(a1 + 24);
          v11 = (_QWORD *)(v10 + 24);
          if (*(char *)(v10 + 47) < 0)
            v11 = (_QWORD *)*v11;
          *(_DWORD *)buf = 136381699;
          v56 = v11;
          v57 = 2050;
          v58 = Current;
          v59 = 2050;
          v60 = v44;
          v61 = 2050;
          v62 = v44 + 1209600.0 - Current;
          v63 = 2050;
          v64 = 0x4132750000000000;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GNSS_FILE: not starting assistance file per mobile asset disablement,file,%{private}s,nowTime,%{public}lf,lastDisabledTime,%{public}lf,expireInSec,%{public}lf,disableValidSec,%{public}.1f", buf, 0x34u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
          v12 = *(_QWORD *)(a1 + 24);
          v13 = (_QWORD *)(v12 + 24);
          if (*(char *)(v12 + 47) < 0)
            v13 = (_QWORD *)*v13;
          v45 = 136381699;
          v46 = v13;
          v47 = 2050;
          v48 = Current;
          v49 = 2050;
          v50 = v44;
          v51 = 2050;
          v52 = v44 + 1209600.0 - Current;
          v53 = 2050;
          v54 = 0x4132750000000000;
          v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GNSS_FILE: not starting assistance file per mobile asset disablement,file,%{private}s,nowTime,%{public}lf,lastDisabledTime,%{public}lf,expireInSec,%{public}lf,disableValidSec,%{public}.1f", &v45, 52);
          v16 = v15;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::start(BOOL)", "%s\n", v14);
LABEL_64:
          if (v16 != buf)
            free(v16);
          return;
        }
        return;
      }
    }
    v17 = sub_1001FD94C();
    if (*(char *)(a1 + 343) < 0)
      v5 = *(const char **)v5;
    sub_100525484(v17, v5, 0xFFFFFFFFLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_QWORD *)(a1 + 24);
      v20 = (_QWORD *)(v19 + 24);
      if (*(char *)(v19 + 47) < 0)
        v20 = (_QWORD *)*v20;
      *(_DWORD *)buf = 136381443;
      v56 = v20;
      v57 = 2050;
      v58 = Current;
      v59 = 2050;
      v60 = v44;
      v61 = 2050;
      v62 = 1209600.0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: clear mobile asset persistent disablement,expired,file,%{private}s,nowTime,%{public}lf,lastDisabledTime,%{public}lf,disableValidSec,%{public}.1f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
      v30 = *(_QWORD *)(a1 + 24);
      v31 = (_QWORD *)(v30 + 24);
      if (*(char *)(v30 + 47) < 0)
        v31 = (_QWORD *)*v31;
      v45 = 136381443;
      v46 = v31;
      v47 = 2050;
      v48 = Current;
      v49 = 2050;
      v50 = v44;
      v51 = 2050;
      v52 = 1209600.0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GNSS_FILE: clear mobile asset persistent disablement,expired,file,%{private}s,nowTime,%{public}lf,lastDisabledTime,%{public}lf,disableValidSec,%{public}.1f", &v45, 42);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::start(BOOL)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  if (*(_BYTE *)(a1 + 344))
  {
LABEL_32:
    sub_1017612CC(a1, a2);
    return;
  }
  sub_100605848(a1 + 72);
  v43 = 0x404E000000000000;
  v21 = *(_QWORD *)(a1 + 24);
  v22 = (const std::string::value_type *)v21;
  if (*(char *)(v21 + 23) < 0)
    v22 = *(const std::string::value_type **)v21;
  v23 = (const std::string::value_type *)(v21 + 24);
  if (*(char *)(v21 + 47) < 0)
    v23 = *(const std::string::value_type **)v23;
  if (sub_100604D40(a1 + 72, v22, v23, (double *)&v43)
    && (sub_10060538C(a1 + 72, (double *)a1, (double *)(a1 + 8)) & 1) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(double *)(a1 + 24);
      v26 = (_QWORD *)(*(_QWORD *)&v25 + 24);
      if (*(char *)(*(_QWORD *)&v25 + 47) < 0)
        v26 = (_QWORD *)*v26;
      if (*(char *)(*(_QWORD *)&v25 + 23) < 0)
        v25 = **(double **)&v25;
      v27 = *(double *)a1;
      v28 = *(double *)(a1 + 8);
      *(_DWORD *)buf = 136381443;
      v56 = v26;
      v57 = 2081;
      v58 = v25;
      v59 = 2050;
      v60 = v27;
      v61 = 2050;
      v62 = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: start assistance file,%{private}s,from,%{private}s,cellInterval,%{public}lf,wifiInterval,%{public}lf", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
      v36 = *(double *)(a1 + 24);
      v37 = (_QWORD *)(*(_QWORD *)&v36 + 24);
      if (*(char *)(*(_QWORD *)&v36 + 47) < 0)
        v37 = (_QWORD *)*v37;
      if (*(char *)(*(_QWORD *)&v36 + 23) < 0)
        v36 = **(double **)&v36;
      v38 = *(double *)a1;
      v39 = *(double *)(a1 + 8);
      v45 = 136381443;
      v46 = v37;
      v47 = 2081;
      v48 = v36;
      v49 = 2050;
      v50 = v38;
      v51 = 2050;
      v52 = v39;
      LODWORD(v42) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GNSS_FILE: start assistance file,%{private}s,from,%{private}s,cellInterval,%{public}lf,wifiInterval,%{public}lf", &v45, v42, v43);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::start(BOOL)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
    *(_BYTE *)(a1 + 344) = 1;
    goto LABEL_32;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
  v29 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "GNSS_FILE: could not setup assistance file updater", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    LOWORD(v45) = 0;
    LODWORD(v42) = 2;
    v34 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_FILE: could not setup assistance file updater", &v45, v42, v43);
    v16 = v35;
    sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::start(BOOL)", "%s\n", v34);
    goto LABEL_64;
  }
}

uint64_t sub_101761074(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  sub_1017610EC(a1);
  if (*(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  sub_100602508(a1 + 72);
  v2 = *(_QWORD **)(a1 + 64);
  if (v2 == (_QWORD *)(a1 + 40))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 40);
    goto LABEL_7;
  }
  if (v2)
  {
    v3 = 5;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  sub_100261F44(a1 + 24);
  return a1;
}

void sub_1017610EC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  _QWORD *v10;
  uint8_t buf[4];
  _QWORD *v12;

  sub_100605848(a1 + 72);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = (_QWORD *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 136380675;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: stop assistance file,%{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = (_QWORD *)(v5 + 24);
    if (*(char *)(v5 + 47) < 0)
      v6 = (_QWORD *)*v6;
    v9 = 136380675;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GNSS_FILE: stop assistance file,%{private}s", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::stop()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_BYTE *)(a1 + 344) = 0;
}

uint64_t sub_1017612CC(uint64_t a1, int a2)
{
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  double Current;
  NSObject *v8;
  const char *v9;
  char *v10;
  double v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  double v19;
  NSObject *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const char *v29;
  char *v30;
  const char *v31;
  double v32;
  double v33;
  std::__shared_weak_count *v34;
  double v35;
  double v36;
  int v37;
  const char *v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  _BYTE buf[12];
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = (const char *)(v4 + 24);
  if (*(char *)(v4 + 47) < 0)
    v5 = *(const char **)v5;
  if (!*(_BYTE *)(a1 + 344))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "GNSS_FILE: cannot setup download, downloader not active,%{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
      v37 = 136380675;
      v38 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GNSS_FILE: cannot setup download, downloader not active,%{private}s", &v37, 12);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::setupDownload(BOOL)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
  v36 = 0.0;
  Current = CFAbsoluteTimeGetCurrent();
  v35 = Current;
  if (a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GNSS_FILE: force file download %{private}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return sub_100605798((double *)(a1 + 72), &v35);
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v37 = 136380675;
    v38 = v5;
    LODWORD(v32) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GNSS_FILE: force file download %{private}s", &v37, *(_QWORD *)&v32);
    v10 = (char *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::setupDownload(BOOL)", "%s\n", v9);
    goto LABEL_46;
  }
  if (!sub_1000B78B0(v5))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "GNSS_FILE: file not yet created %s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return sub_100605798((double *)(a1 + 72), &v35);
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v37 = 136315138;
    v38 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GNSS_FILE: file not yet created %s", (const char *)&v37);
    v10 = (char *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::setupDownload(BOOL)", "%s\n", v16);
LABEL_46:
    if (v10 != buf)
      free(v10);
    return sub_100605798((double *)(a1 + 72), &v35);
  }
  if (!sub_100068A38(v5))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "GNSS_FILE: file,%s,sizeBytes,0,download anew", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return sub_100605798((double *)(a1 + 72), &v35);
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v37 = 136315138;
    v38 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GNSS_FILE: file,%s,sizeBytes,0,download anew", (const char *)&v37);
    v10 = (char *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::setupDownload(BOOL)", "%s\n", v18);
    goto LABEL_46;
  }
  if (sub_10000840C(v5, &v36) && (v11 = *(double *)a1, vabdd_f64(Current, v36) <= *(double *)a1))
  {
    v19 = v36 + v11;
    v35 = v36 + v11;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v5;
      v44 = 2048;
      v45 = v19;
      v46 = 2048;
      v47 = v19 - Current;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "GNSS_FILE: file,%s, attempt to download at %.2f (%.2f seconds away)", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
      v37 = 136315650;
      v38 = v5;
      v39 = 2048;
      v40 = v19;
      v41 = 2048;
      v42 = v19 - Current;
      LODWORD(v32) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GNSS_FILE: file,%s, attempt to download at %.2f (%.2f seconds away)", (const char *)&v37, v32, v33);
      v14 = (char *)v31;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::setupDownload(BOOL)", "%s\n", v31);
      goto LABEL_72;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "GNSS_FILE: file not yet created, or expired %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
      v37 = 136315138;
      v38 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GNSS_FILE: file not yet created, or expired %s", (const char *)&v37);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::setupDownload(BOOL)", "%s\n", v13);
LABEL_72:
      if (v14 != buf)
        free(v14);
    }
  }
  v21 = *(_QWORD *)(a1 + 64);
  if (!v21)
    return sub_100605798((double *)(a1 + 72), &v35);
  v22 = *(std::__shared_weak_count **)(a1 + 32);
  v33 = *(double *)(a1 + 24);
  v34 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
    v21 = *(_QWORD *)(a1 + 64);
    if (!v21)
      sub_10025FD1C();
  }
  (*(void (**)(uint64_t, double *))(*(_QWORD *)v21 + 48))(v21, &v33);
  v25 = v34;
  if (v34)
  {
    v26 = (unint64_t *)&v34->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(double *)buf = v35 + 5.0;
  return sub_100605798((double *)(a1 + 72), (double *)buf);
}

void sub_101761C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101761C2C(id a1)
{
  int v1;
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  BOOL v9[16];
  uint8_t buf[8];
  std::__shared_weak_count *v11;

  if ((sub_10075B95C() & 1) != 0)
  {
    byte_10230FA20 = 1;
LABEL_13:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: #ee enable update download rates on fitness session or tbt navigation", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
      *(_WORD *)v9 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GNSS_FILE: #ee enable update download rates on fitness session or tbt navigation", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLGnssAssistanceFileDownloader::isEeDownloadOnFitnessTbtSupported()_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return;
  }
  sub_1001E4804(buf);
  v9[0] = 0;
  v1 = sub_1001E4874(*(uint64_t *)buf, "EnableEeUpdateOnFitnessTbtSession", v9);
  if (v9[0])
    v2 = v1;
  else
    v2 = 0;
  byte_10230FA20 = v2;
  v3 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    v2 = byte_10230FA20;
  }
  if (v2)
    goto LABEL_13;
}

void sub_101761E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101761E5C(double *a1, int a2)
{
  double v4;
  NSObject *v5;
  double v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  double v13;
  double v14;
  int v15;
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  int v26;

  v13 = 0.0;
  v14 = 0.0;
  sub_1017621D8(&v14, &v13, a2, 0);
  v4 = v14;
  if (vabdd_f64(*a1, v14) > 0.000001 || vabdd_f64(a1[1], v13) > 0.000001)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349568;
      v22 = v4;
      v23 = 2050;
      v24 = v13;
      v25 = 1026;
      v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: #ee,service change detected,updateRateCellSeconds,%{public}.1f,updateRateWifiSeconds,%{public}.1f,assistanceFileDurationInSec,%{public}d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
      v15 = 134349568;
      v16 = v4;
      v17 = 2050;
      v18 = v13;
      v19 = 1026;
      v20 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GNSS_FILE: #ee,service change detected,updateRateCellSeconds,%{public}.1f,updateRateWifiSeconds,%{public}.1f,assistanceFileDurationInSec,%{public}d", &v15, 28);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::processAssistanceFileDuration(const int)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    if ((sub_10060538C((uint64_t)(a1 + 9), &v14, &v13) & 1) != 0)
    {
      v6 = v13;
      *a1 = v14;
      a1[1] = v6;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "GNSS_FILE: could not setup assistance file updater", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
        LOWORD(v15) = 0;
        LODWORD(v12) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GNSS_FILE: could not setup assistance file updater", &v15, v12);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::processAssistanceFileDuration(const int)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
}

void sub_1017621D8(double *a1, double *a2, int a3, int a4)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  double v10;
  NSObject *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char *v16;
  int v17;
  double v18;
  int v19;
  uint64_t v20;
  int v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  v8 = atomic_load((unsigned __int8 *)&qword_10230FA38);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_10230FA38))
  {
    v17 = sub_100762A78();
    v18 = 259200.0;
    if (v17)
      v18 = 86400.0;
    qword_10230FA30 = *(_QWORD *)&v18;
    __cxa_guard_release(&qword_10230FA38);
  }
  v9 = atomic_load((unsigned __int8 *)&qword_10230FA48);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_10230FA48))
  {
    if ((sub_10075B938() & 1) != 0 || sub_10075B95C())
    {
      v19 = sub_100195F08();
      v20 = 0x40BC200000000000;
      if (v19)
        v20 = 0x40E5180000000000;
    }
    else
    {
      v20 = 0x40E5180000000000;
    }
    qword_10230FA40 = v20;
    __cxa_guard_release(&qword_10230FA48);
  }
  if (qword_10230FA50 != -1)
    dispatch_once(&qword_10230FA50, &stru_1021CE230);
  *a1 = fmax(*(double *)&qword_10230FA30, 300.0);
  *a2 = fmax(*(double *)&qword_10230FA40, 300.0);
  if ((a3 - 1) >> 6 <= 0xE0 && ((sub_10075B938() & 1) != 0 || sub_10075B95C()))
  {
    *a1 = 7200.0;
    v10 = 3600.0;
  }
  else
  {
    if (!a4)
      goto LABEL_14;
    if (qword_10230FA58 != -1)
      dispatch_once(&qword_10230FA58, &stru_1021CE250);
    *a1 = fmax(*(double *)&qword_1023008D8, 300.0);
    v10 = fmax(*(double *)&qword_1023008E0, 300.0);
  }
  *a2 = v10;
LABEL_14:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v12 = *a1;
    v13 = *a2;
    *(_DWORD *)buf = 134349824;
    v30 = v12;
    v31 = 2050;
    v32 = v13;
    v33 = 1026;
    v34 = a3;
    v35 = 1026;
    v36 = a4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "GNSS_FILE: #ee,updateRateCellSec,%{public}.1f,updateRateWifiSec,%{public}.1f,fileDurationSec,%{public}d,isWorkoutOrTbtSession,%{public}d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v14 = *a1;
    v15 = *a2;
    v21 = 134349824;
    v22 = v14;
    v23 = 2050;
    v24 = v15;
    v25 = 1026;
    v26 = a3;
    v27 = 1026;
    v28 = a4;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GNSS_FILE: #ee,updateRateCellSec,%{public}.1f,updateRateWifiSec,%{public}.1f,fileDurationSec,%{public}d,isWorkoutOrTbtSession,%{public}d", &v21, 34);
    sub_100512490("Generic", 1, 0, 2, "static void CLGnssAssistanceFileDownloader::getEeFileDownloadRates(CFTimeInterval &, CFTimeInterval &, const int, const BOOL)", "%s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
  }
}

void sub_101762578(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230FA38);
  _Unwind_Resume(a1);
}

void sub_1017625A8(id a1)
{
  int v1;
  __n128 v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  __n128 v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  double v16;

  v16 = -1.0;
  sub_1001E4804(&v14);
  v1 = sub_1001FD98C(v14, "GnssEeUpdateRateCellSeconds", &v16);
  v2.n128_f64[0] = v16;
  if (v16 > 0.0)
    v3 = v1;
  else
    v3 = 0;
  v4 = v15;
  if (!v15)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_8:
    if (!v3)
      goto LABEL_10;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *, __n128))v4->__on_zero_shared)(v4, v2);
  std::__shared_weak_count::__release_weak(v4);
  if (v3)
LABEL_9:
    qword_10230FA30 = *(_QWORD *)&v16;
LABEL_10:
  v13 = -1.0;
  sub_1001E4804(&v14);
  v7 = sub_1001FD98C(v14, "GnssEeUpdateRateWifiSeconds", &v13);
  v8.n128_f64[0] = v13;
  if (v13 > 0.0)
    v9 = v7;
  else
    v9 = 0;
  v10 = v15;
  if (!v15)
    goto LABEL_17;
  v11 = (unint64_t *)&v15->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v8);
    std::__shared_weak_count::__release_weak(v10);
    if (!v9)
      return;
  }
  else
  {
LABEL_17:
    if (!v9)
      return;
  }
  qword_10230FA40 = *(_QWORD *)&v13;
}

void sub_1017626D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1017626E8(id a1)
{
  int v1;
  __n128 v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  __n128 v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  double v16;

  v16 = -1.0;
  sub_1001E4804(&v14);
  v1 = sub_1001FD98C(v14, "GnssEeUpdateRateWorkoutCellSeconds", &v16);
  v2.n128_f64[0] = v16;
  if (v16 > 0.0)
    v3 = v1;
  else
    v3 = 0;
  v4 = v15;
  if (!v15)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_8:
    if (!v3)
      goto LABEL_10;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *, __n128))v4->__on_zero_shared)(v4, v2);
  std::__shared_weak_count::__release_weak(v4);
  if (v3)
LABEL_9:
    qword_1023008D8 = *(_QWORD *)&v16;
LABEL_10:
  v13 = -1.0;
  sub_1001E4804(&v14);
  v7 = sub_1001FD98C(v14, "GnssEeUpdateRateWorkoutWifiSeconds", &v13);
  v8.n128_f64[0] = v13;
  if (v13 > 0.0)
    v9 = v7;
  else
    v9 = 0;
  v10 = v15;
  if (!v15)
    goto LABEL_17;
  v11 = (unint64_t *)&v15->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v8);
    std::__shared_weak_count::__release_weak(v10);
    if (!v9)
      return;
  }
  else
  {
LABEL_17:
    if (!v9)
      return;
  }
  qword_1023008E0 = *(_QWORD *)&v13;
}

void sub_101762810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101762828(double *a1, int a2)
{
  double v4;
  NSObject *v5;
  uint8_t *v6;
  NSObject *v7;
  double v8;
  double v9;
  int v10;
  double v11;
  __int16 v12;
  double v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  int v21;

  if (qword_10230FA28 != -1)
    dispatch_once(&qword_10230FA28, &stru_1021CE210);
  if (byte_10230FA20)
  {
    v8 = 0.0;
    v9 = 0.0;
    sub_1017621D8(&v9, &v8, -1, a2);
    if (vabdd_f64(*a1, v9) > 0.000001 || vabdd_f64(a1[1], v8) > 0.000001)
    {
      if ((sub_10060538C((uint64_t)(a1 + 9), &v9, &v8) & 1) != 0)
      {
        v4 = v8;
        *a1 = v9;
        a1[1] = v4;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
        v5 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349568;
          v17 = v9;
          v18 = 2050;
          v19 = v8;
          v20 = 1026;
          v21 = a2;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: #ee,update assistance file downloader on user-activated fitness session or tbt navigation,cell,%{public}.2f,wifi,%{public}.2f,isWorkoutOrTbtSession,%{public}d", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
          v10 = 134349568;
          v11 = v9;
          v12 = 2050;
          v13 = v8;
          v14 = 1026;
          v15 = a2;
          v6 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GNSS_FILE: #ee,update assistance file downloader on user-activated fitness session or tbt navigation,cell,%{public}.2f,wifi,%{public}.2f,isWorkoutOrTbtSession,%{public}d", &v10, 28);
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateEeFileDownloadRateOnWorkoutOrFocusedNav(const BOOL)", "%s\n");
LABEL_24:
          if (v6 != buf)
            free(v6);
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
        v7 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "GNSS_FILE: #ee,could not update assistance file download rates", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
          LOWORD(v10) = 0;
          v6 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GNSS_FILE: #ee,could not update assistance file download rates", &v10, 2);
          sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::updateEeFileDownloadRateOnWorkoutOrFocusedNav(const BOOL)", "%s\n");
          goto LABEL_24;
        }
      }
    }
  }
}

void sub_101762BC0(id a1)
{
  int v1;
  __n128 v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  __n128 v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  double v15;

  v15 = -1.0;
  sub_1001E4804(&v13);
  v1 = sub_1001FD98C(v13, "GnssRteUpdateRateCellSeconds", &v15);
  v2.n128_f64[0] = v15;
  if (v15 > 0.0)
    v3 = v1;
  else
    v3 = 0;
  v4 = v14;
  if (!v14)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_8:
    if (!v3)
      goto LABEL_10;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *, __n128))v4->__on_zero_shared)(v4, v2);
  std::__shared_weak_count::__release_weak(v4);
  if (v3)
  {
LABEL_9:
    qword_10230FA60 = fmax(v15, 300.0);
    byte_10230FA68 = 1;
  }
LABEL_10:
  v15 = -1.0;
  sub_1001E4804(&v13);
  v7 = sub_1001FD98C(v13, "GnssRteUpdateRateWifiSeconds", &v15);
  v8.n128_f64[0] = v15;
  if (v15 > 0.0)
    v9 = v7;
  else
    v9 = 0;
  v10 = v14;
  if (!v14)
    goto LABEL_17;
  v11 = (unint64_t *)&v14->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v8);
    std::__shared_weak_count::__release_weak(v10);
    if (!v9)
      return;
  }
  else
  {
LABEL_17:
    if (!v9)
      return;
  }
  qword_10230FA70 = fmax(v15, 300.0);
  byte_10230FA78 = 1;
}

void sub_101762D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101762D30(id a1)
{
  int v1;
  __n128 v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  __n128 v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  double v15;

  v15 = -1.0;
  sub_1001E4804(&v13);
  v1 = sub_1001FD98C(v13, "GnssRteUpdateRateWorkoutCellSeconds", &v15);
  v2.n128_f64[0] = v15;
  if (v15 > 0.0)
    v3 = v1;
  else
    v3 = 0;
  v4 = v14;
  if (!v14)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_8:
    if (!v3)
      goto LABEL_10;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *, __n128))v4->__on_zero_shared)(v4, v2);
  std::__shared_weak_count::__release_weak(v4);
  if (v3)
  {
LABEL_9:
    qword_10230FA88 = fmax(v15, 300.0);
    byte_10230FA90 = 1;
  }
LABEL_10:
  v15 = -1.0;
  sub_1001E4804(&v13);
  v7 = sub_1001FD98C(v13, "GnssRteUpdateRateWorkoutWifiSeconds", &v15);
  v8.n128_f64[0] = v15;
  if (v15 > 0.0)
    v9 = v7;
  else
    v9 = 0;
  v10 = v14;
  if (!v14)
    goto LABEL_17;
  v11 = (unint64_t *)&v14->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v8);
    std::__shared_weak_count::__release_weak(v10);
    if (!v9)
      return;
  }
  else
  {
LABEL_17:
    if (!v9)
      return;
  }
  qword_10230FA98 = fmax(v15, 300.0);
  byte_10230FAA0 = 1;
}

void sub_101762E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101762EA0(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD *v13;
  CFAbsoluteTime Current;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  _QWORD *v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  CFAbsoluteTime v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  CFAbsoluteTime v36;
  int v37;
  _QWORD *v38;
  __int16 v39;
  CFAbsoluteTime v40;
  __int16 v41;
  CFAbsoluteTime v42;
  uint8_t buf[4];
  _QWORD *v44;
  __int16 v45;
  CFAbsoluteTime v46;
  __int16 v47;
  CFAbsoluteTime v48;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = (_QWORD *)(v5 + 24);
    if (*(char *)(v5 + 47) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 136380931;
    v44 = v6;
    v45 = 1026;
    LODWORD(v46) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: update downloader per mobile asset,file,%{private}s,activate,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v21 = *(_QWORD *)(a1 + 24);
    v22 = (_QWORD *)(v21 + 24);
    if (*(char *)(v21 + 47) < 0)
      v22 = (_QWORD *)*v22;
    v37 = 136380931;
    v38 = v22;
    v39 = 1026;
    LODWORD(v40) = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GNSS_FILE: update downloader per mobile asset,file,%{private}s,activate,%{public}d", &v37, 18);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateDownloaderPerMobileAsset(const BOOL)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  if ((a2 & 1) != 0)
  {
    if (!*(_BYTE *)(a1 + 344))
    {
      v36 = 0.0;
      v7 = sub_1001FD94C();
      v8 = (const char *)(a1 + 320);
      v9 = (const char *)(a1 + 320);
      if (*(char *)(a1 + 343) < 0)
        v9 = *(const char **)v8;
      if (sub_1001FD98C(v7, v9, &v36))
      {
        v10 = sub_1001FD94C();
        if (*(char *)(a1 + 343) < 0)
          v8 = *(const char **)v8;
        sub_100525484(v10, v8, 0xFFFFFFFFLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
        v11 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          v12 = *(_QWORD *)(a1 + 24);
          v13 = (_QWORD *)(v12 + 24);
          if (*(char *)(v12 + 47) < 0)
            v13 = (_QWORD *)*v13;
          Current = CFAbsoluteTimeGetCurrent();
          *(_DWORD *)buf = 136381187;
          v44 = v13;
          v45 = 2050;
          v46 = Current;
          v47 = 2050;
          v48 = v36;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GNSS_FILE: clear mobile asset persistent disablement,re-activate,file,%{private}s,nowTime,%{public}lf,lastDisabledTime,%{public}lf", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
          v29 = qword_1022A0078;
          v30 = *(_QWORD *)(a1 + 24);
          v31 = (_QWORD *)(v30 + 24);
          if (*(char *)(v30 + 47) < 0)
            v31 = (_QWORD *)*v31;
          v32 = CFAbsoluteTimeGetCurrent();
          v37 = 136381187;
          v38 = v31;
          v39 = 2050;
          v40 = v32;
          v41 = 2050;
          v42 = v36;
          LODWORD(v35) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 1, "GNSS_FILE: clear mobile asset persistent disablement,re-activate,file,%{private}s,nowTime,%{public}lf,lastDisabledTime,%{public}lf", &v37, v35);
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateDownloaderPerMobileAsset(const BOOL)", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }
      }
      sub_101760870(a1, 0);
    }
  }
  else
  {
    v36 = CFAbsoluteTimeGetCurrent();
    v15 = sub_1001FD94C();
    v16 = (const char *)(a1 + 320);
    if (*(char *)(a1 + 343) < 0)
      v16 = *(const char **)v16;
    sub_10018A4CC(v15, v16, &v36);
    v17 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 944))(v17);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v19 = *(_QWORD *)(a1 + 24);
      v20 = (_QWORD *)(v19 + 24);
      if (*(char *)(v19 + 47) < 0)
        v20 = (_QWORD *)*v20;
      *(_DWORD *)buf = 136380931;
      v44 = v20;
      v45 = 2050;
      v46 = v36;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "GNSS_FILE: set mobile asset persistent disablement,file,%{private}s,nowTime,%{public}lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
      v25 = *(_QWORD *)(a1 + 24);
      v26 = (_QWORD *)(v25 + 24);
      if (*(char *)(v25 + 47) < 0)
        v26 = (_QWORD *)*v26;
      v37 = 136380931;
      v38 = v26;
      v39 = 2050;
      v40 = v36;
      LODWORD(v35) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GNSS_FILE: set mobile asset persistent disablement,file,%{private}s,nowTime,%{public}lf", &v37, v35);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateDownloaderPerMobileAsset(const BOOL)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    sub_1017610EC(a1);
  }
}

void sub_101763460(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;

  v5 = a1[3];
  v6 = (const char *)(v5 + 24);
  if (*(char *)(v5 + 47) < 0)
    v6 = *(const char **)v6;
  if (a3 == 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v30 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "GNSS_FILE: file download started %s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v25 = 136315138;
    v26 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GNSS_FILE: file download started %s", (const char *)&v25);
    v16 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::onFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v18);
LABEL_51:
    if (v16 != buf)
      free(v16);
    return;
  }
  if (a3 == 3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136380675;
      v30 = v6;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning GNSSS_FILE: file download failed,%{private}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v25 = 136380675;
    v26 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning GNSSS_FILE: file download failed,%{private}s", &v25, 12);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::onFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v15);
    goto LABEL_51;
  }
  if (a3 != 2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136380931;
      v30 = v6;
      v31 = 1024;
      v32 = a3;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning GNSS_FILE: file,%{private}s,unhandled status,%u", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v25 = 136380931;
    v26 = v6;
    v27 = 1024;
    v28 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning GNSS_FILE: file,%{private}s,unhandled status,%u", &v25, 18);
    v16 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::onFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v20);
    goto LABEL_51;
  }
  if (sub_1000B78B0(v6) && sub_100068A38(v6))
  {
    v7 = a1[8];
    if (v7)
    {
      v8 = (std::__shared_weak_count *)a1[4];
      v23 = a1[3];
      v24 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        v7 = a1[8];
        if (!v7)
          sub_10025FD1C();
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v23);
      v11 = v24;
      if (v24)
      {
        v12 = (unint64_t *)&v24->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
  v21 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136380675;
    v30 = v6;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "GNSS_FILE: file not created, or 0 bytes!,%{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v25 = 136380675;
    v26 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_FILE: file not created, or 0 bytes!,%{private}s", &v25, 12);
    v16 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::onFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v22);
    goto LABEL_51;
  }
}

void sub_101763A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101763AB0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101763ADC(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101763B08()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"GNSS_FILE: Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
  }
  v1 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "GNSS_FILE: Assertion failed", "{\"msg%{public}.0s\":\"GNSS_FILE: Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
  }
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GNSS_FILE: Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

_QWORD *sub_101763CCC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  sub_100270E34((uint64_t)(a1 + 1), a3);
  return a1;
}

void sub_101763CF8(uint64_t *a1, const char *a2, unsigned int a3, int a4)
{
  NSObject *v8;
  const char *v9;
  int v10;
  const char *v11;
  FILE *v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  unsigned __int8 *v25;
  unint64_t v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  const char *v30;
  NSObject *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  char *v35;
  size_t v36;
  NSObject *v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  const char *v41;
  NSObject *v42;
  unsigned int v43;
  int v44;
  NSObject *v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  _OWORD *v56;
  uint64_t v57;
  unsigned int v58;
  NSObject *v59;
  unsigned __int8 *v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  const char *v72;
  char *v73;
  NSObject *v74;
  NSObject *v75;
  unsigned int v76;
  unsigned int v77;
  NSObject *v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  NSObject *v88;
  NSObject *v89;
  const char *v90;
  char *v91;
  NSObject *v92;
  const char *v93;
  NSObject *v94;
  const char *v95;
  NSObject *v96;
  const char *v97;
  NSObject *v98;
  const char *v99;
  NSObject *v100;
  const char *v101;
  NSObject *v102;
  const char *v103;
  NSObject *v104;
  const char *v105;
  NSObject *v106;
  const char *v107;
  const char *v108;
  const char *v109;
  char *v110;
  const char *v111;
  const char *v112;
  char *v113;
  const char *v114;
  char *v115;
  const char *v116;
  char *v117;
  const char *v118;
  const char *v119;
  const char *v120;
  char *v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  const char *v129;
  char *v130;
  const char *v131;
  char *v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t *v135;
  unsigned int v136;
  int v137;
  FILE *v138;
  unsigned int v139;
  unsigned int v140;
  _BYTE v141[10];
  _BYTE v142[24];
  unsigned int v143;
  __int16 v144;
  unsigned int v145;
  __int16 v146;
  unsigned int v147;
  __int16 v148;
  unsigned int v149;
  _BYTE v150[32];
  _BYTE v151[32];
  unsigned __int8 *v152;
  uint64_t v153;
  _BYTE buf[38];
  _BYTE v155[6];
  _BYTE v156[6];
  _BYTE v157[6];
  unsigned int v158;

  if ((int)a3 >= 1)
  {
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1))
      {
LABEL_4:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
        v8 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          if (a2[23] >= 0)
            v9 = a2;
          else
            v9 = *(const char **)a2;
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = a3;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "inject,%{private}s,max size,%{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
          if (a2[23] >= 0)
            v108 = a2;
          else
            v108 = *(const char **)a2;
          *(_DWORD *)v150 = 136380931;
          *(_QWORD *)&v150[4] = v108;
          *(_WORD *)&v150[12] = 1026;
          *(_DWORD *)&v150[14] = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "inject,%{private}s,max size,%{public}d", v150, 18);
          v110 = (char *)v109;
          sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v109);
          if (v110 != buf)
            free(v110);
        }
        if (a4)
          v10 = 2000;
        else
          v10 = 10000;
        if (a2[23] >= 0)
          v11 = a2;
        else
          v11 = *(const char **)a2;
        v12 = fopen(v11, "rb");
        if (v12)
        {
          v138 = v12;
          v13 = (unsigned __int8 *)malloc_type_malloc(a3 + 10, 0x74291EE4uLL);
          *(_QWORD *)buf = off_1021CE320;
          *(_QWORD *)&buf[24] = buf;
          v152 = v13;
          sub_101768D3C((uint64_t)&v153, (uint64_t)buf);
          v14 = *(_QWORD **)&buf[24];
          if (*(_BYTE **)&buf[24] == buf)
          {
            v15 = 4;
            v14 = buf;
          }
          else
          {
            if (!*(_QWORD *)&buf[24])
              goto LABEL_55;
            v15 = 5;
          }
          (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_55:
          v25 = v152;
          if (v152)
          {
            v136 = v10;
            v135 = a1;
            v26 = 0;
            if (!feof(v12))
            {
              do
              {
                v36 = fread(&v25[v26], 1uLL, a3 - v26, v12);
                if (!v36 && !feof(v12))
                  goto LABEL_164;
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                v26 += v36;
                v37 = qword_1022A0078;
                if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67240704;
                  *(_DWORD *)&buf[4] = a3;
                  *(_WORD *)&buf[8] = 2050;
                  *(_QWORD *)&buf[10] = v36;
                  *(_WORD *)&buf[18] = 2050;
                  *(_QWORD *)&buf[20] = v26;
                  _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "XTRA read loop max %{public}d read: %{public}zu tot %{public}zu", buf, 0x1Cu);
                }
                v12 = v138;
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                  *(_DWORD *)v150 = 67240704;
                  *(_DWORD *)&v150[4] = a3;
                  *(_WORD *)&v150[8] = 2050;
                  *(_QWORD *)&v150[10] = v36;
                  *(_WORD *)&v150[18] = 2050;
                  *(_QWORD *)&v150[20] = v26;
                  LODWORD(v133) = 28;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "XTRA read loop max %{public}d read: %{public}zu tot %{public}zu", v150, v133);
                  v39 = (char *)v38;
                  sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v38);
                  if (v39 != buf)
                    free(v39);
                }
              }
              while (!feof(v138) && v26 < a3);
            }
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
            v27 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
            {
              if (a2[23] >= 0)
                v28 = a2;
              else
                v28 = *(const char **)a2;
              *(_DWORD *)buf = 136381187;
              *(_QWORD *)&buf[4] = v28;
              *(_WORD *)&buf[12] = 2050;
              *(_QWORD *)&buf[14] = v26;
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&buf[24] = a3;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "XTRA file %{private}s read: %{public}zu max %{public}d", buf, 0x1Cu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
              if (a2[23] >= 0)
                v111 = a2;
              else
                v111 = *(const char **)a2;
              *(_DWORD *)v150 = 136381187;
              *(_QWORD *)&v150[4] = v111;
              *(_WORD *)&v150[12] = 2050;
              *(_QWORD *)&v150[14] = v26;
              *(_WORD *)&v150[22] = 1026;
              *(_DWORD *)&v150[24] = a3;
              LODWORD(v133) = 28;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "XTRA file %{private}s read: %{public}zu max %{public}d", v150, v133);
              v113 = (char *)v112;
              sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v112);
              if (v113 != buf)
                free(v113);
              v12 = v138;
            }
            if (feof(v12))
            {
              if (v26 < v136)
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                v29 = qword_1022A0078;
                if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)buf = 134349312;
                  *(_QWORD *)&buf[4] = v26;
                  *(_WORD *)&buf[12] = 1026;
                  *(_DWORD *)&buf[14] = v136;
                  _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Ignoring too-small XTRA file,%{public}zu,%{public}d", buf, 0x12u);
                }
                if (!sub_1001BFF7C(115, 0))
                {
                  v30 = "too_small";
LABEL_116:
                  sub_101740774(*v135, (uint64_t)"ee_download", (uint64_t)v30, 0);
LABEL_164:
                  sub_101768DA0((uint64_t *)&v152);
                  sub_1017687CC(v12);
                  return;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                *(_DWORD *)v150 = 134349312;
                *(_QWORD *)&v150[4] = v26;
                *(_WORD *)&v150[12] = 1026;
                *(_DWORD *)&v150[14] = v136;
                LODWORD(v133) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Ignoring too-small XTRA file,%{public}zu,%{public}d", v150, v133);
                v115 = (char *)v114;
                sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v114);
                if (v115 != buf)
                  free(v115);
                v30 = "too_small";
                goto LABEL_284;
              }
              if (v26 > a3)
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                v42 = qword_1022A0078;
                if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)buf = 134349312;
                  *(_QWORD *)&buf[4] = v26;
                  *(_WORD *)&buf[12] = 1026;
                  *(_DWORD *)&buf[14] = a3;
                  _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "Ignoring too-large XTRA file,%{public}zu,%{public}d", buf, 0x12u);
                }
                if (!sub_1001BFF7C(115, 0))
                {
                  v30 = "too_large";
                  goto LABEL_116;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                *(_DWORD *)v150 = 134349312;
                *(_QWORD *)&v150[4] = v26;
                *(_WORD *)&v150[12] = 1026;
                *(_DWORD *)&v150[14] = a3;
                LODWORD(v133) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Ignoring too-large XTRA file,%{public}zu,%{public}d", v150, v133);
                v117 = (char *)v116;
                sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v116);
                if (v117 != buf)
                  free(v117);
                v30 = "too_large";
LABEL_284:
                v12 = v138;
                goto LABEL_116;
              }
              v43 = *v25;
              if (v43 >= 2)
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                v74 = qword_1022A0078;
                if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67240192;
                  *(_DWORD *)&buf[4] = v43;
                  _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "xtra,crcfail,byteOrder,%{public}u", buf, 8u);
                }
                if (!sub_1001BFF7C(115, 0))
                  goto LABEL_159;
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                *(_DWORD *)v150 = 67240192;
                *(_DWORD *)&v150[4] = v43;
                LODWORD(v133) = 8;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "xtra,crcfail,byteOrder,%{public}u", v150, v133);
                v91 = (char *)v119;
                sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v119);
                goto LABEL_294;
              }
              v44 = (char)v25[6];
              if (v44 >= 3)
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                v45 = qword_1022A0078;
                if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67240192;
                  *(_DWORD *)&buf[4] = v44;
                  _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "XTRA file,Version,%{public}u", buf, 8u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                  *(_DWORD *)v150 = 67240192;
                  *(_DWORD *)&v150[4] = v44;
                  LODWORD(v133) = 8;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "XTRA file,Version,%{public}u", v150, v133);
                  v121 = (char *)v120;
                  sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v120);
                  if (v121 != buf)
                    free(v121);
                  v12 = v138;
                  if (v26)
                  {
LABEL_125:
                    v46 = 0;
                    while (1)
                    {
                      v47 = v25[v46];
                      if (v47 >= 2)
                        break;
                      if (v46 + 11 > v26)
                      {
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                        v94 = qword_1022A0078;
                        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 134349824;
                          *(_QWORD *)&buf[4] = v46;
                          *(_WORD *)&buf[12] = 1026;
                          *(_DWORD *)&buf[14] = 7;
                          *(_WORD *)&buf[18] = 2050;
                          *(_QWORD *)&buf[20] = 4;
                          *(_WORD *)&buf[28] = 2050;
                          *(_QWORD *)&buf[30] = v26;
                          _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, "xtra,crcfail,fileOffset,%{public}zu,kXtra3CrcOffset,%{public}u,sizeof(bufferCrc),%{public}zu,tot,%{public}zu", buf, 0x26u);
                        }
                        if (sub_1001BFF7C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0070 != -1)
                            dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                          v140 = 134349824;
                          *(_QWORD *)v141 = v46;
                          *(_WORD *)&v141[8] = 1026;
                          *(_DWORD *)v142 = 7;
                          *(_WORD *)&v142[4] = 2050;
                          *(_QWORD *)&v142[6] = 4;
                          *(_WORD *)&v142[14] = 2050;
                          *(_QWORD *)&v142[16] = v26;
                          LODWORD(v133) = 38;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "xtra,crcfail,fileOffset,%{public}zu,kXtra3CrcOffset,%{public}u,sizeof(bufferCrc),%{public}zu,tot,%{public}zu", &v140, v133);
                          v91 = (char *)v95;
                          sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v95);
                          goto LABEL_294;
                        }
                        goto LABEL_159;
                      }
                      if (v46 + 25 > v26)
                      {
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                        v96 = qword_1022A0078;
                        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 134349824;
                          *(_QWORD *)&buf[4] = v46;
                          *(_WORD *)&buf[12] = 1026;
                          *(_DWORD *)&buf[14] = 21;
                          *(_WORD *)&buf[18] = 2050;
                          *(_QWORD *)&buf[20] = 4;
                          *(_WORD *)&buf[28] = 2050;
                          *(_QWORD *)&buf[30] = v26;
                          _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "xtra,crcfail,fileOffset,%{public}zu,kXtra3FileSizeOffset,%{public}u,sizeof(bufferFileSize),%{public}zu,tot,%{public}zu", buf, 0x26u);
                        }
                        if (sub_1001BFF7C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0070 != -1)
                            dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                          v140 = 134349824;
                          *(_QWORD *)v141 = v46;
                          *(_WORD *)&v141[8] = 1026;
                          *(_DWORD *)v142 = 21;
                          *(_WORD *)&v142[4] = 2050;
                          *(_QWORD *)&v142[6] = 4;
                          *(_WORD *)&v142[14] = 2050;
                          *(_QWORD *)&v142[16] = v26;
                          LODWORD(v133) = 38;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "xtra,crcfail,fileOffset,%{public}zu,kXtra3FileSizeOffset,%{public}u,sizeof(bufferFileSize),%{public}zu,tot,%{public}zu", &v140, v133);
                          v91 = (char *)v97;
                          sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v97);
                          goto LABEL_294;
                        }
                        goto LABEL_159;
                      }
                      v48 = v46 + 29;
                      if (v46 + 29 > v26)
                      {
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                        v12 = v138;
                        v98 = qword_1022A0078;
                        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 134349824;
                          *(_QWORD *)&buf[4] = v46;
                          *(_WORD *)&buf[12] = 1026;
                          *(_DWORD *)&buf[14] = 25;
                          *(_WORD *)&buf[18] = 2050;
                          *(_QWORD *)&buf[20] = 4;
                          *(_WORD *)&buf[28] = 2050;
                          *(_QWORD *)&buf[30] = v26;
                          _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_ERROR, "xtra,crcfail,fileOffset,%{public}zu,kXtra3SignatureOffset,%{public}u,sizeof(bufferSignatureOffset),%{public}zu,tot,%{public}zu", buf, 0x26u);
                        }
                        if (sub_1001BFF7C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0070 != -1)
                            dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                          v140 = 134349824;
                          *(_QWORD *)v141 = v46;
                          *(_WORD *)&v141[8] = 1026;
                          *(_DWORD *)v142 = 25;
                          *(_WORD *)&v142[4] = 2050;
                          *(_QWORD *)&v142[6] = 4;
                          *(_WORD *)&v142[14] = 2050;
                          *(_QWORD *)&v142[16] = v26;
                          LODWORD(v133) = 38;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "xtra,crcfail,fileOffset,%{public}zu,kXtra3SignatureOffset,%{public}u,sizeof(bufferSignatureOffset),%{public}zu,tot,%{public}zu", &v140, v133);
                          v91 = (char *)v99;
                          sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v99);
                          goto LABEL_294;
                        }
                        goto LABEL_159;
                      }
                      v49 = (unsigned int *)&v25[v46 + 7];
                      v139 = *v49;
                      v50 = *v49;
                      if (v25[v46])
                      {
                        v50 = bswap32(v50);
                        v51 = bswap32(*(_DWORD *)&v25[v46 + 21]);
                        v52 = bswap32(*(_DWORD *)&v25[v46 + 25]);
                      }
                      else
                      {
                        v51 = *(_DWORD *)&v25[v46 + 21];
                        v52 = *(_DWORD *)&v25[v46 + 25];
                      }
                      if (!v51)
                      {
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                        v12 = v138;
                        v100 = qword_1022A0078;
                        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_FAULT, "xtra,crcfail,fileSize,0", buf, 2u);
                        }
                        if (sub_1001BFF7C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0070 != -1)
                            dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                          LOWORD(v140) = 0;
                          LODWORD(v133) = 2;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "xtra,crcfail,fileSize,0", &v140, v133);
                          v91 = (char *)v101;
                          sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v101);
                          goto LABEL_294;
                        }
                        goto LABEL_159;
                      }
                      v53 = v46 + v51;
                      if (v53 > v26)
                      {
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                        v12 = v138;
                        v102 = qword_1022A0078;
                        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
                        {
                          *(_DWORD *)buf = 134349568;
                          *(_QWORD *)&buf[4] = v46;
                          *(_WORD *)&buf[12] = 1026;
                          *(_DWORD *)&buf[14] = v51;
                          *(_WORD *)&buf[18] = 2050;
                          *(_QWORD *)&buf[20] = v26;
                          _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_FAULT, "xtra,crcfail,fileOffset,%{public}zu,fileSize,%{public}u,tot,%{public}zu", buf, 0x1Cu);
                        }
                        if (sub_1001BFF7C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0070 != -1)
                            dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                          v140 = 134349568;
                          *(_QWORD *)v141 = v46;
                          *(_WORD *)&v141[8] = 1026;
                          *(_DWORD *)v142 = v51;
                          *(_WORD *)&v142[4] = 2050;
                          *(_QWORD *)&v142[6] = v26;
                          LODWORD(v133) = 28;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "xtra,crcfail,fileOffset,%{public}zu,fileSize,%{public}u,tot,%{public}zu", &v140, v133);
                          v91 = (char *)v103;
                          sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v103);
                          goto LABEL_294;
                        }
                        goto LABEL_159;
                      }
                      v54 = v46 + v52;
                      if (v54 + 69 > v26)
                      {
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                        v12 = v138;
                        v104 = qword_1022A0078;
                        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
                        {
                          *(_DWORD *)buf = 134349824;
                          *(_QWORD *)&buf[4] = v46;
                          *(_WORD *)&buf[12] = 1026;
                          *(_DWORD *)&buf[14] = v52;
                          *(_WORD *)&buf[18] = 1026;
                          *(_DWORD *)&buf[20] = 64;
                          *(_WORD *)&buf[24] = 2050;
                          *(_QWORD *)&buf[26] = v26;
                          _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_FAULT, "xtra,crcfail,fileOffset,%{public}zu,signOffset,%{public}u,kSizeOfXtra3Signature,%{public}u,tot,%{public}zu", buf, 0x22u);
                        }
                        if (sub_1001BFF7C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0070 != -1)
                            dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                          v140 = 134349824;
                          *(_QWORD *)v141 = v46;
                          *(_WORD *)&v141[8] = 1026;
                          *(_DWORD *)v142 = v52;
                          *(_WORD *)&v142[4] = 1026;
                          *(_DWORD *)&v142[6] = 64;
                          *(_WORD *)&v142[10] = 2050;
                          *(_QWORD *)&v142[12] = v26;
                          LODWORD(v133) = 34;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "xtra,crcfail,fileOffset,%{public}zu,signOffset,%{public}u,kSizeOfXtra3Signature,%{public}u,tot,%{public}zu", &v140, v133);
                          v91 = (char *)v105;
                          sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v105);
                          goto LABEL_294;
                        }
                        goto LABEL_159;
                      }
                      v134 = v52;
                      v55 = &v25[v54];
                      v56 = v55 + 5;
                      *(_OWORD *)v150 = *(_OWORD *)(v55 + 5);
                      *(_OWORD *)&v150[16] = *(_OWORD *)(v55 + 21);
                      *(_OWORD *)v151 = *(_OWORD *)(v55 + 37);
                      *(_OWORD *)&v151[16] = *(_OWORD *)(v55 + 53);
                      bzero(v49, 4uLL);
                      bzero(v56, 0x40uLL);
                      v137 = sub_101766644(v57, (__int32 *)&v25[v46], v51, v25[v46]);
                      v58 = v51;
                      if (qword_1022A0070 != -1)
                        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                      v59 = qword_1022A0078;
                      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                      {
                        v60 = &v25[v46];
                        v61 = (char)v25[v46 + 43];
                        if (v47)
                        {
                          v62 = bswap32(*(unsigned __int16 *)&v25[v48]) >> 16;
                          v63 = bswap32(*(_DWORD *)(v60 + 31));
                          v64 = bswap32(*(unsigned __int16 *)(v60 + 35)) >> 16;
                          v65 = bswap32(*(_DWORD *)(v60 + 37));
                        }
                        else
                        {
                          v62 = *(unsigned __int16 *)&v25[v48];
                          v63 = *(_DWORD *)(v60 + 31);
                          v64 = *(unsigned __int16 *)(v60 + 35);
                          v65 = *(_DWORD *)(v60 + 37);
                        }
                        *(_DWORD *)buf = 67242240;
                        *(_DWORD *)&buf[4] = v58;
                        *(_WORD *)&buf[8] = 1026;
                        *(_DWORD *)&buf[10] = v134;
                        *(_WORD *)&buf[14] = 2050;
                        *(_QWORD *)&buf[16] = v46;
                        *(_WORD *)&buf[24] = 1026;
                        *(_DWORD *)&buf[26] = v61;
                        *(_WORD *)&buf[30] = 1026;
                        *(_DWORD *)&buf[32] = v50;
                        *(_WORD *)&buf[36] = 1026;
                        *(_DWORD *)v155 = v62;
                        *(_WORD *)&v155[4] = 1026;
                        *(_DWORD *)v156 = v63;
                        *(_WORD *)&v156[4] = 1026;
                        *(_DWORD *)v157 = v64;
                        *(_WORD *)&v157[4] = 1026;
                        v158 = v65;
                        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "fileSize,%{public}d,signatureOffset,%{public}d,fileOffset,%{public}zu,contentType,%{public}u,Checksum,0x%{public}08X,fileWeek,%{public}u,fileMs,%{public}u,StartWeek,%{public}u,StartMs,%{public}u", buf, 0x3Cu);
                      }
                      if (sub_1001BFF7C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                        v66 = &v25[v46];
                        v67 = (char)v25[v46 + 43];
                        if (v47)
                        {
                          v68 = bswap32(*(unsigned __int16 *)&v25[v48]) >> 16;
                          v69 = bswap32(*(_DWORD *)(v66 + 31));
                          v70 = bswap32(*(unsigned __int16 *)(v66 + 35)) >> 16;
                          v71 = bswap32(*(_DWORD *)(v66 + 37));
                        }
                        else
                        {
                          v68 = *(unsigned __int16 *)&v25[v48];
                          v69 = *(_DWORD *)(v66 + 31);
                          v70 = *(unsigned __int16 *)(v66 + 35);
                          v71 = *(_DWORD *)(v66 + 37);
                        }
                        v140 = 67242240;
                        *(_DWORD *)v141 = v58;
                        *(_WORD *)&v141[4] = 1026;
                        *(_DWORD *)&v141[6] = v134;
                        *(_WORD *)v142 = 2050;
                        *(_QWORD *)&v142[2] = v46;
                        *(_WORD *)&v142[10] = 1026;
                        *(_DWORD *)&v142[12] = v67;
                        *(_WORD *)&v142[16] = 1026;
                        *(_DWORD *)&v142[18] = v50;
                        *(_WORD *)&v142[22] = 1026;
                        v143 = v68;
                        v144 = 1026;
                        v145 = v69;
                        v146 = 1026;
                        v147 = v70;
                        v148 = 1026;
                        v149 = v71;
                        LODWORD(v133) = 60;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "fileSize,%{public}d,signatureOffset,%{public}d,fileOffset,%{public}zu,contentType,%{public}u,Checksum,0x%{public}08X,fileWeek,%{public}u,fileMs,%{public}u,StartWeek,%{public}u,StartMs,%{public}u", &v140, v133);
                        v73 = (char *)v72;
                        sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v72);
                        if (v73 != buf)
                          free(v73);
                      }
                      *(_DWORD *)&v25[v46 + 7] = v139;
                      *v56 = *(_OWORD *)v150;
                      v56[1] = *(_OWORD *)&v150[16];
                      v56[2] = *(_OWORD *)v151;
                      v56[3] = *(_OWORD *)&v151[16];
                      if (v137 != v50)
                      {
                        v12 = v138;
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                        v106 = qword_1022A0078;
                        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 67240448;
                          *(_DWORD *)&buf[4] = v50;
                          *(_WORD *)&buf[8] = 1026;
                          *(_DWORD *)&buf[10] = v137;
                          _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_ERROR, "Xtra file crc (0x%{public}08X) does not match the computed crc (0x%{public}08X)", buf, 0xEu);
                        }
                        if (sub_1001BFF7C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0070 != -1)
                            dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                          v140 = 67240448;
                          *(_DWORD *)v141 = v50;
                          *(_WORD *)&v141[4] = 1026;
                          *(_DWORD *)&v141[6] = v137;
                          LODWORD(v133) = 14;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Xtra file crc (0x%{public}08X) does not match the computed crc (0x%{public}08X)", &v140, v133);
                          v91 = (char *)v107;
                          sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v107);
                          goto LABEL_294;
                        }
                        goto LABEL_159;
                      }
                      v46 = v53;
                      v12 = v138;
                      if (v53 >= v26)
                        goto LABEL_181;
                    }
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                    v92 = qword_1022A0078;
                    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 67240192;
                      *(_DWORD *)&buf[4] = v47;
                      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "xtra,crcfail,byteOrder,%{public}u", buf, 8u);
                    }
                    if (sub_1001BFF7C(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0070 != -1)
                        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                      *(_DWORD *)v150 = 67240192;
                      *(_DWORD *)&v150[4] = v47;
                      LODWORD(v133) = 8;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "xtra,crcfail,byteOrder,%{public}u", v150, v133);
                      v91 = (char *)v93;
                      sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v93);
                      goto LABEL_294;
                    }
                  }
                }
                else if (v26)
                {
                  goto LABEL_125;
                }
LABEL_159:
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                v75 = qword_1022A0078;
                if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "CRC check failed. Not injecting!", buf, 2u);
                }
                if (!sub_1001BFF7C(115, 0))
                  goto LABEL_164;
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                *(_WORD *)v150 = 0;
                LODWORD(v133) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "CRC check failed. Not injecting!", v150, v133);
                v35 = (char *)v118;
                sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v118);
                goto LABEL_288;
              }
              v140 = *(_DWORD *)(v25 + 7);
              v76 = bswap32(v140);
              if (v43)
                v77 = v76;
              else
                v77 = v140;
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
              v78 = qword_1022A0078;
              if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
              {
LABEL_179:
                if (!sub_1001BFF7C(115, 2))
                {
LABEL_180:
                  bzero(v25 + 7, 4uLL);
                  v87 = sub_101766644(v86, (__int32 *)v25, v26, *v25);
                  *(_DWORD *)(v25 + 7) = v140;
                  if (v87 == v77)
                  {
LABEL_181:
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                    v88 = qword_1022A0078;
                    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "CRC check successful, Injecting XTRA file", buf, 2u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0070 != -1)
                        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                      *(_WORD *)v150 = 0;
                      LODWORD(v133) = 2;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CRC check successful, Injecting XTRA file", v150, v133);
                      v130 = (char *)v129;
                      sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v129);
                      if (v130 != buf)
                        free(v130);
                      v12 = v138;
                    }
                    sub_1017668F0((uint64_t)v135, (uint64_t)v25, v26);
                    goto LABEL_164;
                  }
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                  v89 = qword_1022A0078;
                  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 67240448;
                    *(_DWORD *)&buf[4] = v77;
                    *(_WORD *)&buf[8] = 1026;
                    *(_DWORD *)&buf[10] = v87;
                    _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, "Xtra file crc (0x%{public}08X) does not match the computed crc (0x%{public}08X)", buf, 0xEu);
                  }
                  if (!sub_1001BFF7C(115, 0))
                    goto LABEL_159;
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                  *(_DWORD *)v150 = 67240448;
                  *(_DWORD *)&v150[4] = v77;
                  *(_WORD *)&v150[8] = 1026;
                  *(_DWORD *)&v150[10] = v87;
                  LODWORD(v133) = 14;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Xtra file crc (0x%{public}08X) does not match the computed crc (0x%{public}08X)", v150, v133);
                  v91 = (char *)v90;
                  sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v90);
LABEL_294:
                  if (v91 != buf)
                    free(v91);
                  v12 = v138;
                  goto LABEL_159;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                v122 = (char)v25[29];
                if (v43)
                {
                  v123 = bswap32(*(unsigned __int16 *)(v25 + 15)) >> 16;
                  v124 = bswap32(*(_DWORD *)(v25 + 17));
                  v125 = bswap32(*(unsigned __int16 *)(v25 + 21)) >> 16;
                  v126 = bswap32(*(_DWORD *)(v25 + 23));
                  if (v44 != 1)
                  {
                    v127 = bswap32(*((unsigned __int16 *)v25 + 15)) >> 16;
                    v128 = bswap32(*((_DWORD *)v25 + 8));
LABEL_316:
                    *(_DWORD *)v150 = 67176705;
                    *(_DWORD *)&v150[4] = v44;
                    *(_WORD *)&v150[8] = 1026;
                    *(_DWORD *)&v150[10] = v122;
                    *(_WORD *)&v150[14] = 1026;
                    *(_DWORD *)&v150[16] = v77;
                    *(_WORD *)&v150[20] = 1026;
                    *(_DWORD *)&v150[22] = v123;
                    *(_WORD *)&v150[26] = 1026;
                    *(_DWORD *)&v150[28] = v124;
                    *(_WORD *)v151 = 1026;
                    *(_DWORD *)&v151[2] = v125;
                    *(_WORD *)&v151[6] = 1026;
                    *(_DWORD *)&v151[8] = v126;
                    *(_WORD *)&v151[12] = 1026;
                    *(_DWORD *)&v151[14] = v127;
                    *(_WORD *)&v151[18] = 1026;
                    *(_DWORD *)&v151[20] = v128;
                    LODWORD(v133) = 56;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "XTRA file,Version,%{private}u,content mask,0x%{public}08X,Checksum,0x%{public}08X,fileWeek,%{public}u,fileMs,%{public}u,gpsStartWeek,%{public}u,gpsStartMs,%{public}u,gloStartWeek,%{public}u,gloStartMs,%{public}u", v150, v133);
                    v132 = (char *)v131;
                    sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v131);
                    if (v132 != buf)
                      free(v132);
                    v12 = v138;
                    goto LABEL_180;
                  }
                }
                else
                {
                  v123 = *(unsigned __int16 *)(v25 + 15);
                  v124 = *(_DWORD *)(v25 + 17);
                  v125 = *(unsigned __int16 *)(v25 + 21);
                  v126 = *(_DWORD *)(v25 + 23);
                  if (v44 != 1)
                  {
                    v127 = *((unsigned __int16 *)v25 + 15);
                    v128 = *((_DWORD *)v25 + 8);
                    goto LABEL_316;
                  }
                }
                v127 = 0;
                v128 = 0;
                goto LABEL_316;
              }
              v79 = (char)v25[29];
              if (v43)
              {
                v80 = bswap32(*(unsigned __int16 *)(v25 + 15)) >> 16;
                v81 = bswap32(*(_DWORD *)(v25 + 17));
                v82 = bswap32(*(unsigned __int16 *)(v25 + 21)) >> 16;
                v83 = bswap32(*(_DWORD *)(v25 + 23));
                if (v44 != 1)
                {
                  v84 = bswap32(*((unsigned __int16 *)v25 + 15)) >> 16;
                  v85 = bswap32(*((_DWORD *)v25 + 8));
LABEL_178:
                  *(_DWORD *)buf = 67176705;
                  *(_DWORD *)&buf[4] = v44;
                  *(_WORD *)&buf[8] = 1026;
                  *(_DWORD *)&buf[10] = v79;
                  *(_WORD *)&buf[14] = 1026;
                  *(_DWORD *)&buf[16] = v77;
                  *(_WORD *)&buf[20] = 1026;
                  *(_DWORD *)&buf[22] = v80;
                  *(_WORD *)&buf[26] = 1026;
                  *(_DWORD *)&buf[28] = v81;
                  *(_WORD *)&buf[32] = 1026;
                  *(_DWORD *)&buf[34] = v82;
                  *(_WORD *)v155 = 1026;
                  *(_DWORD *)&v155[2] = v83;
                  *(_WORD *)v156 = 1026;
                  *(_DWORD *)&v156[2] = v84;
                  *(_WORD *)v157 = 1026;
                  *(_DWORD *)&v157[2] = v85;
                  _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "XTRA file,Version,%{private}u,content mask,0x%{public}08X,Checksum,0x%{public}08X,fileWeek,%{public}u,fileMs,%{public}u,gpsStartWeek,%{public}u,gpsStartMs,%{public}u,gloStartWeek,%{public}u,gloStartMs,%{public}u", buf, 0x38u);
                  goto LABEL_179;
                }
              }
              else
              {
                v80 = *(unsigned __int16 *)(v25 + 15);
                v81 = *(_DWORD *)(v25 + 17);
                v82 = *(unsigned __int16 *)(v25 + 21);
                v83 = *(_DWORD *)(v25 + 23);
                if (v44 != 1)
                {
                  v84 = *((unsigned __int16 *)v25 + 15);
                  v85 = *((_DWORD *)v25 + 8);
                  goto LABEL_178;
                }
              }
              v84 = 0;
              v85 = 0;
              goto LABEL_178;
            }
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
            v40 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)&buf[4] = v26;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "read: %{public}lu but not EOF!", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_164;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
            *(_DWORD *)v150 = 134349056;
            *(_QWORD *)&v150[4] = v26;
            LODWORD(v133) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "read: %{public}lu but not EOF!", v150, v133);
            v35 = (char *)v41;
            sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v41);
          }
          else
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
            v31 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
            {
              if (a2[23] >= 0)
                v32 = a2;
              else
                v32 = *(const char **)a2;
              *(_DWORD *)buf = 67240451;
              *(_DWORD *)&buf[4] = a3;
              *(_WORD *)&buf[8] = 2081;
              *(_QWORD *)&buf[10] = v32;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "can't allocated %{public}d bytes to (%{private}s)", buf, 0x12u);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_164;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
            if (a2[23] >= 0)
              v33 = a2;
            else
              v33 = *(const char **)a2;
            *(_DWORD *)v150 = 67240451;
            *(_DWORD *)&v150[4] = a3;
            *(_WORD *)&v150[8] = 2081;
            *(_QWORD *)&v150[10] = v33;
            LODWORD(v133) = 18;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "can't allocated %{public}d bytes to (%{private}s)", v150, v133);
            v35 = (char *)v34;
            sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v34);
          }
LABEL_288:
          if (v35 != buf)
            free(v35);
          v12 = v138;
          goto LABEL_164;
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
        v21 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          if (a2[23] >= 0)
            v22 = a2;
          else
            v22 = *(const char **)a2;
          *(_DWORD *)buf = 136380675;
          *(_QWORD *)&buf[4] = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "couldn't open %{private}s!", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
          if (a2[23] >= 0)
            v23 = a2;
          else
            v23 = *(const char **)a2;
          *(_DWORD *)v150 = 136380675;
          *(_QWORD *)&v150[4] = v23;
          LODWORD(v133) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "couldn't open %{private}s!", v150, v133);
          v20 = (char *)v24;
          sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v24);
LABEL_37:
          if (v20 != buf)
            free(v20);
          return;
        }
        return;
      }
    }
    else if (a2[23])
    {
      goto LABEL_4;
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
  v16 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    if (a2[23] >= 0)
      v17 = a2;
    else
      v17 = *(const char **)a2;
    *(_DWORD *)buf = 67109379;
    *(_DWORD *)&buf[4] = a3;
    *(_WORD *)&buf[8] = 2081;
    *(_QWORD *)&buf[10] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "no max xtra msg definition, use 'force' first size(%d) file(%{private}s)", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
    if (a2[23] >= 0)
      v18 = a2;
    else
      v18 = *(const char **)a2;
    *(_DWORD *)v150 = 67109379;
    *(_DWORD *)&v150[4] = a3;
    *(_WORD *)&v150[8] = 2081;
    *(_QWORD *)&v150[10] = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "no max xtra msg definition, use 'force' first size(%d) file(%{private}s)", v150, 18);
    v20 = (char *)v19;
    sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v19);
    goto LABEL_37;
  }
}

void sub_101766584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, FILE *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  sub_101768DA0(&a40);
  sub_1017687CC(a20);
  _Unwind_Resume(a1);
}

uint64_t sub_101766644(uint64_t a1, __int32 *a2, unsigned int a3, int a4)
{
  __int32 *v4;
  unsigned int v5;
  unsigned int v6;
  int32x4_t v7;
  uint32x4_t v8;
  int8x16_t v9;
  uint8x8_t v10;
  signed int v11;
  unint64_t v12;
  int8x16_t v13;
  unsigned int v14;
  int i;
  int v16;
  uint64_t result;
  NSObject *v18;
  _BOOL4 v19;
  const char *v20;
  char *v21;
  uint32x4_t v22;
  _WORD v23[8];
  unsigned int __dst[410];

  if (a2)
  {
    v4 = a2;
    if (a4)
      v5 = 24;
    else
      v5 = 0;
    if (a4)
      v6 = -8;
    else
      v6 = 8;
    v7 = vdupq_n_s32(v6);
    v8 = (uint32x4_t)vmlaq_s32(vdupq_n_s32(v5), v7, (int32x4_t)xmmword_101CDBCD0);
    v7.i32[0] = *a2;
    v22 = v8;
    v9 = (int8x16_t)vshlq_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v7.i8)), v8);
    v10 = (uint8x8_t)vorr_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
    v11 = v10.i32[0] | v10.i32[1];
    __dst[0] = 0;
    if (a3 >= 5)
    {
      v12 = a3;
      do
      {
        if (v12 < 8)
        {
          __dst[0] = 0;
          memcpy(__dst, v4 + 1, v12 - 4);
          v14 = bswap32(__dst[0]);
        }
        else
        {
          v10.i32[0] = v4[1];
          v13 = (int8x16_t)vshlq_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v10)), v22);
          v10 = (uint8x8_t)vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
          v14 = v10.i32[0] | v10.i32[1];
        }
        __dst[0] = v14;
        for (i = 31; i != -1; --i)
        {
          if (v11 >= 0)
            v16 = 2 * v11;
          else
            v16 = (2 * v11) ^ 0x1BD65062;
          v11 = v16 & 0xFFFFFFFE | (v14 >> i) & 1;
        }
        ++v4;
        v12 -= 4;
      }
      while (v12 > 4);
    }
    if (v11 >= 0)
      return v11;
    else
      return v11 ^ 0x8DEB2831;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__dst[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Invalid parameter", (uint8_t *)__dst, 2u);
    }
    v19 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v19)
    {
      bzero(__dst, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v23[0] = 0;
      _os_log_send_and_compose_impl(2, 0, __dst, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid parameter", v23, 2);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 0, "uint32_t CLXtraInjector::xtraCrc(const void *, uint32_t, uint8_t)", "%s\n", v20);
      if (v21 != (char *)__dst)
        free(v21);
      return 0;
    }
  }
  return result;
}

void sub_1017668F0(uint64_t a1, uint64_t a2, int a3)
{
  char v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  const char *v11;
  void **v12;
  NSObject *v13;
  const char *v14;
  _WORD v15[8];
  void *__p;
  void *v17;
  uint64_t v18;

  if (a3 < 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "XTRA download - failed", (uint8_t *)&__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 16, "XTRA download - failed", v15, 2);
      v12 = (void **)v14;
      sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::sendInjectXtraData(const char *, int)", "%s\n", v14);
      goto LABEL_25;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = a1 + 8;
    do
    {
      v8 = a3 - v6;
      if (a3 - v6 >= 1536)
        v8 = 1536;
      v9 = v8 + v6;
      __p = 0;
      v17 = 0;
      v18 = 0;
      sub_10173110C((char *)&__p, (char *)(a2 + v6), (char *)(a2 + v6 + v8), v8);
      sub_101768758(v7, v5, a3, (uint64_t)&__p, v9 == a3);
      if (__p)
      {
        v17 = __p;
        operator delete(__p);
      }
      ++v5;
      v6 = v9;
    }
    while (v9 < a3);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "XTRA file is sent to BB - ok", (uint8_t *)&__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "XTRA file is sent to BB - ok", v15, 2);
      v12 = (void **)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::sendInjectXtraData(const char *, int)", "%s\n", v11);
LABEL_25:
      if (v12 != &__p)
        free(v12);
    }
  }
}

void sub_101766C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101766C54(uint64_t a1, uint64_t a2)
{
  int v3;
  std::string *p_p;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  const char *v9;
  std::string __p;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  memset(&__p, 0, sizeof(__p));
  if (sub_10005DE60(a2, &__p))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v3 = __p.__r_.__value_.__r.__words[1];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    sub_1017668F0(a1, (uint64_t)p_p, v3);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#rti,#blob,done,sz,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v11[0] = 67240192;
      v11[1] = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#rti,#blob,done,sz,%{public}d", v11, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectRtiDataViaXtraRequest(const std::string &)", "%s\n", v6);
LABEL_27:
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#rti,#blob,file reading failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#rti,#blob,file reading failed", v11, 2);
      v7 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectRtiDataViaXtraRequest(const std::string &)", "%s\n", v9);
      goto LABEL_27;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_101766F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101766F9C(uint64_t a1, uint64_t a2)
{
  int v3;
  std::string *p_p;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  const char *v9;
  std::string __p;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  memset(&__p, 0, sizeof(__p));
  if (sub_10005DE60(a2, &__p))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v3 = __p.__r_.__value_.__r.__words[1];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    sub_1017668F0(a1, (uint64_t)p_p, v3);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#apc,#blob,done,sz,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v11[0] = 67240192;
      v11[1] = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#apc,#blob,done,sz,%{public}d", v11, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectApcDataViaXtraRequest(const std::string &)", "%s\n", v6);
LABEL_27:
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#apc,#blob,file reading failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#apc,#blob,file reading failed", v11, 2);
      v7 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectApcDataViaXtraRequest(const std::string &)", "%s\n", v9);
      goto LABEL_27;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1017672BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1017672E4(uint64_t a1, uint64_t a2, int a3)
{
  const char *v6;
  FILE *v7;
  FILE *v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  NSObject *v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  const char *v25;
  __int128 v26;
  NSObject *v27;
  unsigned __int8 v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  NSObject *v38;
  const char *v39;
  char *v40;
  NSObject *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  char *v45;
  NSObject *v46;
  const char *v47;
  NSObject *v48;
  const char *v49;
  NSObject *v50;
  const char *v51;
  NSObject *v52;
  const char *v53;
  int v54;
  const char *v55;
  const char *v56;
  char *v57;
  const char *v58;
  char *v59;
  NSObject *v60;
  const char *v61;
  char *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  FILE *v68;
  int v69;
  _BYTE v70[32];
  unint64_t v71;
  void *v72;
  uint64_t v73;
  _BYTE buf[36];
  unint64_t v75;

  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      goto LABEL_10;
    v6 = *(const char **)a2;
  }
  else
  {
    v6 = (const char *)a2;
    if (!*(_BYTE *)(a2 + 23))
    {
LABEL_10:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#eph,filename empty", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
        LOWORD(v69) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#eph,filename empty", &v69, 2);
        v13 = (char *)v12;
        sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v12);
LABEL_32:
        if (v13 != buf)
          free(v13);
        return;
      }
      return;
    }
  }
  v7 = fopen(v6, "rb");
  if (v7)
  {
    v8 = v7;
    v68 = v7;
    *(_QWORD *)buf = off_1021CE3B0;
    *(_QWORD *)&buf[24] = buf;
    v72 = malloc_type_malloc(a3, 0xDB1E208DuLL);
    sub_101768D3C((uint64_t)&v73, (uint64_t)buf);
    v9 = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v10 = 4;
      v9 = buf;
    }
    else
    {
      if (!*(_QWORD *)&buf[24])
        goto LABEL_36;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
    v18 = (uint64_t)v72;
    if (v72)
    {
      v65 = a1;
      v19 = 0;
      if (!feof(v8) && a3)
      {
        v19 = 0;
        do
        {
          v20 = fread((void *)(v18 + v19), 1uLL, a3 - v19, v8);
          if (!v20 && !feof(v8))
            goto LABEL_161;
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
          v19 += v20;
          v21 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&buf[4] = a3;
            *(_WORD *)&buf[8] = 2048;
            *(_QWORD *)&buf[10] = v20;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v19;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#eph,read loop max size %d byes read %lu total bytes %lu", buf, 0x1Cu);
          }
          v8 = v68;
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
            v69 = 67109632;
            *(_DWORD *)v70 = a3;
            *(_WORD *)&v70[4] = 2048;
            *(_QWORD *)&v70[6] = v20;
            *(_WORD *)&v70[14] = 2048;
            *(_QWORD *)&v70[16] = v19;
            LODWORD(v63) = 28;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#eph,read loop max size %d byes read %lu total bytes %lu", &v69, v63, v64);
            v23 = (char *)v22;
            sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v22);
            if (v23 != buf)
              free(v23);
            v8 = v68;
          }
        }
        while (!feof(v8) && v19 < a3);
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v24 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v25 = (const char *)a2;
        else
          v25 = *(const char **)a2;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v25;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v19;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = a3;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#eph,file %s bytes read %lu max size %d", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
        if (*(char *)(a2 + 23) >= 0)
          v55 = (const char *)a2;
        else
          v55 = *(const char **)a2;
        v69 = 136315650;
        *(_QWORD *)v70 = v55;
        *(_WORD *)&v70[8] = 2048;
        *(_QWORD *)&v70[10] = v19;
        *(_WORD *)&v70[18] = 1024;
        *(_DWORD *)&v70[20] = a3;
        LODWORD(v63) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#eph,file %s bytes read %lu max size %d", (const char *)&v69, v63, v64);
        v57 = (char *)v56;
        sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v56);
        if (v57 != buf)
          free(v57);
        v8 = v68;
      }
      if (feof(v8))
        goto LABEL_69;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v27 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#eph,bytes read %lu but not EOF", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
        v69 = 134217984;
        *(_QWORD *)v70 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#eph,bytes read %lu but not EOF", &v69);
        v59 = (char *)v58;
        sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v58);
        if (v59 != buf)
          free(v59);
        v8 = v68;
        if (v19)
        {
LABEL_70:
          v28 = 0;
          v29 = 0;
          *(_QWORD *)&v26 = 67110400;
          v66 = v26;
          while (1)
          {
            v67 = *(unsigned __int8 *)(v18 + v29 + 6);
            v30 = *(unsigned __int8 *)(v18 + v29);
            if (v30 >= 2)
              break;
            if (v29 + 21 > v19)
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
              v48 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67110144;
                *(_DWORD *)&buf[4] = v67;
                *(_WORD *)&buf[8] = 2048;
                *(_QWORD *)&buf[10] = v29;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = 21;
                *(_WORD *)&buf[24] = 2048;
                *(_QWORD *)&buf[26] = 4;
                *(_WORD *)&buf[34] = 2048;
                v75 = v19;
                _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "#eph,xtraVersion,%u,failed reading fileOffset,%zu,kXtraBroadcastEphemerisFileSizeOffset,%u,sizeof(bufferFileSize),%zu,tot,%zu", buf, 0x2Cu);
              }
              v8 = v68;
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                v69 = 67110144;
                *(_DWORD *)v70 = v67;
                *(_WORD *)&v70[4] = 2048;
                *(_QWORD *)&v70[6] = v29;
                *(_WORD *)&v70[14] = 1024;
                *(_DWORD *)&v70[16] = 21;
                *(_WORD *)&v70[20] = 2048;
                *(_QWORD *)&v70[22] = 4;
                *(_WORD *)&v70[30] = 2048;
                v71 = v19;
                LODWORD(v63) = 44;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#eph,xtraVersion,%u,failed reading fileOffset,%zu,kXtraBroadcastEphemerisFileSizeOffset,%u,sizeof(bufferFileSize),%zu,tot,%zu", &v69, (size_t)v63, v64, v65, (size_t)v66);
                v45 = (char *)v49;
                sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v49);
                goto LABEL_106;
              }
              goto LABEL_161;
            }
            v31 = bswap32(*(_DWORD *)(v29 + v18 + 17));
            if (*(_BYTE *)(v18 + v29))
              v32 = v31;
            else
              v32 = *(_DWORD *)(v29 + v18 + 17);
            if (!v32)
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
              v8 = v68;
              v50 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v67;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_FAULT, "#eph,xtraVersion,%u,fileSize is zero", buf, 8u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                v69 = 67109120;
                *(_DWORD *)v70 = v67;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#eph,xtraVersion,%u,fileSize is zero", &v69);
                v45 = (char *)v51;
                sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v51);
                goto LABEL_106;
              }
              goto LABEL_161;
            }
            v33 = v29 + v32;
            if (v33 > v19)
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
              v52 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 67109888;
                *(_DWORD *)&buf[4] = v67;
                *(_WORD *)&buf[8] = 2048;
                *(_QWORD *)&buf[10] = v29;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v32;
                *(_WORD *)&buf[24] = 2048;
                *(_QWORD *)&buf[26] = v19;
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "#eph,xtraVersion,%u,xtra eph file incomplete,fileOffset,%zu,fileSize,%u,tot,%zu", buf, 0x22u);
              }
              v8 = v68;
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
                v69 = 67109888;
                *(_DWORD *)v70 = v67;
                *(_WORD *)&v70[4] = 2048;
                *(_QWORD *)&v70[6] = v29;
                *(_WORD *)&v70[14] = 1024;
                *(_DWORD *)&v70[16] = v32;
                *(_WORD *)&v70[20] = 2048;
                *(_QWORD *)&v70[22] = v19;
                LODWORD(v63) = 34;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#eph,xtraVersion,%u,xtra eph file incomplete,fileOffset,%zu,fileSize,%u,tot,%zu", &v69, (size_t)v63, v64, v65);
                v45 = (char *)v53;
                sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v53);
                goto LABEL_106;
              }
              goto LABEL_161;
            }
            v34 = v29 + 25;
            if (*(_BYTE *)(v18 + v29))
            {
              v35 = bswap32(*(unsigned __int16 *)(v18 + v34)) >> 16;
              v36 = bswap32(*(_DWORD *)(v29 + v18 + 27));
            }
            else
            {
              v35 = *(unsigned __int16 *)(v18 + v34);
              v36 = *(_DWORD *)(v29 + v18 + 27);
            }
            v37 = *(unsigned __int8 *)(v29 + v18 + 31);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
            v38 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = v66;
              *(_DWORD *)&buf[4] = v67;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v35;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&buf[16] = v36;
              *(_WORD *)&buf[20] = 1024;
              *(_DWORD *)&buf[22] = v32;
              *(_WORD *)&buf[26] = 2048;
              *(_QWORD *)&buf[28] = v29;
              LOWORD(v75) = 1024;
              *(_DWORD *)((char *)&v75 + 2) = v37;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "#eph,xtraVersion,%u,fileGpsWeek,%u,fileGpsMs,%u,fileSize,%d,fileOffset,%zu,providerId,%d", buf, 0x2Au);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
              v69 = v66;
              *(_DWORD *)v70 = v67;
              *(_WORD *)&v70[4] = 1024;
              *(_DWORD *)&v70[6] = v35;
              *(_WORD *)&v70[10] = 1024;
              *(_DWORD *)&v70[12] = v36;
              *(_WORD *)&v70[16] = 1024;
              *(_DWORD *)&v70[18] = v32;
              *(_WORD *)&v70[22] = 2048;
              *(_QWORD *)&v70[24] = v29;
              LOWORD(v71) = 1024;
              *(_DWORD *)((char *)&v71 + 2) = v37;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#eph,xtraVersion,%u,fileGpsWeek,%u,fileGpsMs,%u,fileSize,%d,fileOffset,%zu,providerId,%d", &v69, 42, v64, v65, (size_t)v66, DWORD2(v66));
              v40 = (char *)v39;
              sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v39);
              if (v40 != buf)
                free(v40);
            }
            ++v28;
            v29 += v32;
            if (v33 >= v19)
            {
              v54 = v28;
              v8 = v68;
              goto LABEL_155;
            }
          }
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
          v8 = v68;
          v46 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v67;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v30;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#eph,xtraVersion,%u,failed reading byteOrder,%u", buf, 0xEu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
            v69 = 67109376;
            *(_DWORD *)v70 = v67;
            *(_WORD *)&v70[4] = 1024;
            *(_DWORD *)&v70[6] = v30;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#eph,xtraVersion,%u,failed reading byteOrder,%u", &v69, 14);
            v45 = (char *)v47;
            sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v47);
            goto LABEL_106;
          }
          goto LABEL_161;
        }
      }
      else
      {
LABEL_69:
        if (v19)
          goto LABEL_70;
      }
      v54 = 0;
LABEL_155:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v60 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v54;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#eph,file check successful,num_constellations,%{public}d,injecting XTRA eph file", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
        v69 = 67240192;
        *(_DWORD *)v70 = v54;
        LODWORD(v63) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#eph,file check successful,num_constellations,%{public}d,injecting XTRA eph file", &v69, v63);
        v62 = (char *)v61;
        sub_100512490("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v61);
        if (v62 != buf)
          free(v62);
        v8 = v68;
      }
      sub_1017668F0(v65, v18, v19);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v41 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 23) >= 0)
          v42 = (const char *)a2;
        else
          v42 = *(const char **)a2;
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = a3;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "#eph,can't allocate %d bytes to buffer,%s", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
        if (*(char *)(a2 + 23) >= 0)
          v43 = (const char *)a2;
        else
          v43 = *(const char **)a2;
        v69 = 67109378;
        *(_DWORD *)v70 = a3;
        *(_WORD *)&v70[4] = 2080;
        *(_QWORD *)&v70[6] = v43;
        LODWORD(v63) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#eph,can't allocate %d bytes to buffer,%s", &v69, v63);
        v45 = (char *)v44;
        sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v44);
LABEL_106:
        if (v45 != buf)
          free(v45);
        v8 = v68;
      }
    }
LABEL_161:
    sub_101768DA0((uint64_t *)&v72);
    sub_101768968(v8);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a2 + 23) >= 0)
      v15 = (const char *)a2;
    else
      v15 = *(const char **)a2;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#eph,couldn't open %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
    if (*(char *)(a2 + 23) >= 0)
      v16 = (const char *)a2;
    else
      v16 = *(const char **)a2;
    v69 = 136315138;
    *(_QWORD *)v70 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#eph,couldn't open %s", (const char *)&v69);
    v13 = (char *)v17;
    sub_100512490("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v17);
    goto LABEL_32;
  }
}

void sub_1017686D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, FILE *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_101768DA0(&a26);
  sub_101768968(a17);
  _Unwind_Resume(a1);
}

uint64_t sub_101768758(uint64_t a1, char a2, int a3, uint64_t a4, char a5)
{
  uint64_t v5;
  char v7;
  int v8;
  char v9;

  v9 = a2;
  v8 = a3;
  v7 = a5;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, char *, int *, uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, &v9, &v8, a4, &v7);
}

void sub_1017687A0(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

FILE *sub_1017687CC(FILE *result)
{
  FILE *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (result)
  {
    v1 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Closing fp", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Closing fp", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "auto CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)::(anonymous class)::operator()(FILE *) const", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    return (FILE *)fclose(v1);
  }
  return result;
}

FILE *sub_101768968(FILE *result)
{
  FILE *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (result)
  {
    v1 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#eph,Closing fp", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#eph,Closing fp", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "auto CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)::(anonymous class)::operator()(FILE *) const", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    return (FILE *)fclose(v1);
  }
  return result;
}

void sub_101768B08()
{
  operator delete();
}

_QWORD *sub_101768B1C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021CE320;
  return result;
}

void sub_101768B40(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CE320;
}

void sub_101768B58(uint64_t a1, void **a2)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v2 = *a2;
  if (*a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Freeing buff", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Freeing buff", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "auto CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)::(anonymous class)::operator()(char *) const", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    free(v2);
  }
}

uint64_t sub_101768CF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101768D30()
{
}

uint64_t sub_101768D3C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t *sub_101768DA0(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  sub_101768DF8(a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *sub_101768DF8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      sub_10025FD1C();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

void sub_101768E48()
{
  operator delete();
}

_QWORD *sub_101768E5C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021CE3B0;
  return result;
}

void sub_101768E80(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CE3B0;
}

void sub_101768E98(uint64_t a1, void **a2)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v2 = *a2;
  if (*a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#eph,freeing buffer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2F0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#eph,freeing buffer", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "auto CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)::(anonymous class)::operator()(char *) const", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    free(v2);
  }
}

uint64_t sub_101769034(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101769070()
{
}

int *sub_10176907C(int *a1, uint64_t a2)
{
  int v4;
  int v5;
  NSObject *v6;
  _DWORD *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  int v17;
  int v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  __int16 v30;
  int v31;
  uint8_t buf[16];
  uint64_t v33;

  *a1 = 0;
  *(_QWORD *)(a1 + 1) = 0x100000015;
  *((_BYTE *)a1 + 12) = 0;
  sub_100197040();
  v4 = sub_100195F08();
  v5 = v4;
  *a1 = 0;
  if (*(_BYTE *)(a2 + 7))
  {
    *a1 = 5;
    if (*(_DWORD *)(a2 + 64))
    {
      if (!v4)
      {
        *(_QWORD *)a1 = 0x150000000FLL;
        v7 = (_DWORD *)(a2 + 16);
        if (!*(_DWORD *)(a2 + 16))
          goto LABEL_25;
        goto LABEL_21;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CE420);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "cannot enable MSA on watch", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021CE420);
        LOWORD(v28) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "cannot enable MSA on watch", &v28, 2);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 0, "CLEurekaNilr::PositionModes::PositionModes(const CLEmergencyController::LocationSettings &)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
    }
  }
  a1[1] = 21;
  v7 = (_DWORD *)(a2 + 16);
  if (!*(_DWORD *)(a2 + 16))
    goto LABEL_25;
  if (v5)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CE420);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "cannot enable MSA on watch", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CE420);
      LOWORD(v28) = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "cannot enable MSA on watch", &v28, v27);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "CLEurekaNilr::PositionModes::PositionModes(const CLEmergencyController::LocationSettings &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    goto LABEL_25;
  }
LABEL_21:
  v11 = 0;
  *(_OWORD *)buf = xmmword_101CDBF60;
  v33 = 0x200000004;
  v12 = 21;
  do
  {
    v13 = *(_QWORD *)&buf[v11];
    if ((*v7 & v13) != 0)
    {
      v12 |= HIDWORD(v13);
      a1[1] = v12;
    }
    v11 += 8;
  }
  while (v11 != 24);
LABEL_25:
  if (*(_BYTE *)(a2 + 7) && (*(_BYTE *)a1 & 5) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CE420);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v15 = *a1;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = 5;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "supl support expected at least, 0x%{public}x, found 0x%{public}x", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CE420);
      v22 = *a1;
      v28 = 67240448;
      v29 = 5;
      v30 = 1026;
      v31 = v22;
      LODWORD(v27) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "supl support expected at least, 0x%{public}x, found 0x%{public}x", &v28, v27);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "CLEurekaNilr::PositionModes::PositionModes(const CLEmergencyController::LocationSettings &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  if ((a1[1] & 0x15) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CE420);
    v16 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v17 = a1[1];
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = 21;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "cp support expected at least, 0x%{public}x, found 0x%{public}x", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CE420);
      v19 = a1[1];
      v28 = 67240448;
      v29 = 21;
      v30 = 1026;
      v31 = v19;
      LODWORD(v27) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "cp support expected at least, 0x%{public}x, found 0x%{public}x", &v28, v27);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 0, "CLEurekaNilr::PositionModes::PositionModes(const CLEmergencyController::LocationSettings &)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
  }
  return a1;
}

void sub_101769714(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_101769740(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  operator new();
}

void sub_1017698DC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1017698EC()
{
  uint64_t v0;

  sub_10169A51C(v0);
  JUMPOUT(0x1017698F8);
}

uint64_t **sub_101769900(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t **result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char *v17;
  char *v18;
  void *v19[2];
  char v20;
  int v21;
  _BYTE __p[12];
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  void **v26;
  _BYTE buf[12];
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  _BYTE *v31;

  v21 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10176C674(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021CE440);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    sub_10176C400(v7, __p);
    if (SBYTE3(v26) >= 0)
      v11 = __p;
    else
      v11 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v28 = 1024;
    v29 = v7;
    v30 = 2080;
    v31 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v26) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE440);
    v13 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v13 = (_QWORD *)*v13;
    v14 = qword_1022A0078;
    v15 = *(unsigned __int8 *)(v6 + 120);
    sub_10176C400(v7, v19);
    if (v20 >= 0)
      v16 = v19;
    else
      v16 = (void **)v19[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v13;
    v23 = 1024;
    v24 = v7;
    v25 = 2080;
    v26 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, v15, "%sstate,%d,%s", __p, 28, (const char *)v19[0]);
    v18 = v17;
    if (v20 < 0)
      operator delete(v19[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaGnssIratState>::setStateHandler(State, StateHandler) [T = CLEurekaGnssIratState]", "%s\n", v18);
    if (v18 != buf)
      free(v18);
  }
  *(_QWORD *)buf = &v21;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v21, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_101769BCC(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  NSObject *v5;
  _BOOL4 v6;
  void **v7;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  void **v15;

  result = 0;
  switch(a2)
  {
    case 0u:
      sub_10176AA84(a1, 1);
      goto LABEL_11;
    case 2u:
      result = 1;
      break;
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 9u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v5 = qword_1022A0078;
      v6 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v6)
      {
        sub_10176AB94(a2, __p);
        if (v9 >= 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        *(_DWORD *)buf = 68289282;
        v11 = 0;
        v12 = 2082;
        v13 = "";
        v14 = 2082;
        v15 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#irat,GnssIratAssertion,invalid event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (v9 < 0)
          operator delete(__p[0]);
LABEL_11:
        result = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_101769D60(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;

  switch(a2)
  {
    case 0u:
      sub_10176AA84(a1, 3);
      sub_10176ABC0(a1, 6, 300.0);
      return 1;
    case 1u:
      sub_10169A600(a1, 6);
      return 1;
    case 2u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v4 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 1;
      sub_1015A2E04(__p, "Engage");
      if (v8 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      break;
    case 3u:
      return 0;
    case 4u:
      return 2;
    case 5u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v4 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 1;
      sub_1015A2E04(__p, "LpmTrigger");
      if (v8 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      break;
    case 6u:
      return 3;
    case 7u:
      return 4;
    case 8u:
    case 9u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v4 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 1;
      sub_10176AB94(a2, __p);
      if (v8 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      break;
    default:
      return 1;
  }
  *(_DWORD *)buf = 68289282;
  v10 = 0;
  v11 = 2082;
  v12 = "";
  v13 = 2082;
  v14 = v5;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#irat,GnssIratAssertion,invalid event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  if (v8 < 0)
    operator delete(__p[0]);
  return 1;
}

uint64_t sub_10176A06C(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  void **v6;
  NSObject *v7;
  uint64_t v8;
  void **v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  void **v17;

  result = 2;
  switch(a2)
  {
    case 0u:
      sub_10176ABC0(a1, 5, 60.0);
      return 2;
    case 1u:
      sub_10169A600(a1, 5);
      return 2;
    case 2u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v8 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 2;
      sub_1015A2E04(__p, "Engage");
      if (v11 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      goto LABEL_25;
    case 3u:
      return 0;
    case 5u:
      return 3;
    case 6u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v8 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 2;
      sub_1015A2E04(__p, "NoFix");
      if (v11 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
LABEL_25:
      *(_DWORD *)buf = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = v9;
      v7 = v8;
      break;
    case 7u:
      return 4;
    case 8u:
    case 9u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v5 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 2;
      sub_10176AB94(a2, __p);
      if (v11 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = v6;
      v7 = v5;
      break;
    default:
      return result;
  }
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#irat,GnssIratAssertion,invalid event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  if (v11 < 0)
    operator delete(__p[0]);
  return 2;
}

uint64_t sub_10176A370(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  void **v6;
  NSObject *v7;
  uint64_t v8;
  void **v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  void **v17;

  result = 3;
  switch(a2)
  {
    case 0u:
      sub_10176AA84(a1, 2);
      return 3;
    case 2u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v8 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 3;
      sub_1015A2E04(__p, "Engage");
      if (v11 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      goto LABEL_29;
    case 3u:
      return 0;
    case 5u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v8 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 3;
      sub_1015A2E04(__p, "LpmTrigger");
      if (v11 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      goto LABEL_29;
    case 6u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v8 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 3;
      sub_1015A2E04(__p, "NoFix");
      if (v11 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
LABEL_29:
      *(_DWORD *)buf = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = v9;
      v7 = v8;
      break;
    case 7u:
      return 4;
    case 8u:
    case 9u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v5 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 3;
      sub_10176AB94(a2, __p);
      if (v11 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = v6;
      v7 = v5;
      break;
    default:
      return result;
  }
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#irat,GnssIratAssertion,invalid event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  if (v11 < 0)
    operator delete(__p[0]);
  return 3;
}

uint64_t sub_10176A6F8(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  void **v13;

  result = 4;
  switch(a2)
  {
    case 1:
      sub_10169A600(a1, 9);
      return 4;
    case 2:
      return 1;
    case 4:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v4 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 4;
      sub_1015A2E04(__p, "Fix");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      break;
    case 5:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v4 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 4;
      sub_1015A2E04(__p, "LpmTrigger");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      break;
    case 6:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v4 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 4;
      sub_1015A2E04(__p, "NoFix");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      break;
    case 7:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v4 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 4;
      sub_1015A2E04(__p, "Disconnected");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      break;
    case 8:
      sub_10176ABC0(a1, 9, 2.0);
      return 4;
    case 9:
      return 0;
    default:
      return result;
  }
  *(_DWORD *)buf = 68289282;
  v9 = 0;
  v10 = 2082;
  v11 = "";
  v12 = 2082;
  v13 = v5;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#irat,GnssIratAssertion,invalid event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  if (v7 < 0)
    operator delete(__p[0]);
  return 4;
}

id sub_10176AA84(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE440);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1026;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#irat,gnssAssert\", \"assertion\":%{public}d}", (uint8_t *)v6, 0x18u);
  }
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "assertCommCenter:with:", 1, a2);
}

_QWORD *sub_10176AB94@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 9)
    v2 = "EventUnknown";
  else
    v2 = off_1021CE4C0[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_10176ABC0(uint64_t a1, signed int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE440);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaGnssIratState>::setTimeoutEvent(Event, double) [T = CLEurekaGnssIratState]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE440);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE440);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_10176AB94(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_10176AB94(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaGnssIratState>::setTimeoutEvent(Event, double) [T = CLEurekaGnssIratState]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE440);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_10176AB94(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE440);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_10176AB94(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaGnssIratState>::setTimeoutEvent(Event, double) [T = CLEurekaGnssIratState]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), (int *)&v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10176C4C4;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE440);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_10176AB94(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE440);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_10176AB94(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

uint64_t sub_10176B690(uint64_t a1)
{
  return sub_10176B698(a1, 2);
}

uint64_t sub_10176B698(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t **v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD *, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _QWORD *v25;
  NSObject *v26;
  os_log_type_t v27;
  _QWORD *v28;
  _BYTE *v29;
  NSObject *v30;
  os_log_type_t v31;
  _QWORD *v32;
  uint64_t *v33;
  int v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  NSObject *v44;
  os_log_type_t v45;
  _QWORD *v46;
  uint64_t *v47;
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  _BYTE *v63;
  void **v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  const char *v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  void **v83;
  char *v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _BYTE *v90;
  _BYTE *v91;
  void **v92;
  char *v93;
  char *v94;
  const char *v95;
  const char *v96;
  int v97;
  void *v98[2];
  char v99;
  unsigned int v100;
  _BYTE __p[12];
  __int16 v102;
  _BYTE *v103;
  __int16 v104;
  void **v105;
  _BYTE buf[12];
  __int16 v107;
  _BYTE *v108;
  __int16 v109;
  _BYTE *v110;
  _BYTE v111[12];
  __int16 v112;
  _BYTE *v113;
  char v114;

  ++*(_DWORD *)(a1 + 88);
  v100 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_10176C7E4();
    goto LABEL_157;
  }
  v3 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_10176C950(qword_1022A0070 == -1);
    goto LABEL_157;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE440);
  v5 = qword_1022A0078;
  v6 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v6))
  {
    v7 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v7 = (_QWORD *)*v7;
    sub_10176C400(*(_DWORD *)(a1 + 4), __p);
    v8 = SHIBYTE(v104);
    v9 = *(_BYTE **)__p;
    sub_10176AB94(a2, v111);
    v10 = __p;
    if (v8 < 0)
      v10 = v9;
    if (v114 >= 0)
      v11 = v111;
    else
      v11 = *(_BYTE **)v111;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v7;
    v107 = 2080;
    v108 = v10;
    v109 = 2080;
    v110 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v114 < 0)
      operator delete(*(void **)v111);
    v3 = &qword_1022A0000;
    if (SHIBYTE(v104) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE440);
    v58 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v58 = (_QWORD *)*v58;
    v59 = qword_1022A0078;
    v60 = *(unsigned __int8 *)(a1 + 120);
    sub_10176C400(*(_DWORD *)(a1 + 4), v111);
    v61 = v114;
    v62 = *(_BYTE **)v111;
    sub_10176AB94(a2, v98);
    v63 = v111;
    if (v61 < 0)
      v63 = v62;
    if (v99 >= 0)
      v64 = v98;
    else
      v64 = (void **)v98[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v58;
    v102 = 2080;
    v103 = v63;
    v104 = 2080;
    v105 = v64;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, v60, "%scurrent_state,%s,event,%s", __p, 32, v96);
    v66 = v65;
    if (v99 < 0)
      operator delete(v98[0]);
    v3 = &qword_1022A0000;
    if (v114 < 0)
      operator delete(*(void **)v111);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssIratState>::handleEvent(Event) [T = CLEurekaGnssIratState]", "%s\n", v66);
    if (v66 != buf)
      free(v66);
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    goto LABEL_28;
  v13 = (uint64_t **)(a1 + 8);
  v14 = *(_DWORD *)(a1 + 4);
  v15 = a1 + 16;
  do
  {
    v16 = *(_DWORD *)(v12 + 32);
    v17 = v16 < v14;
    if (v16 >= v14)
      v18 = (uint64_t *)v12;
    else
      v18 = (uint64_t *)(v12 + 8);
    if (!v17)
      v15 = v12;
    v12 = *v18;
  }
  while (*v18);
  if (v15 == a1 + 16 || v14 < *(_DWORD *)(v15 + 32))
  {
LABEL_28:
    sub_10176CAC0();
    goto LABEL_157;
  }
  v20 = *(uint64_t (**)(_QWORD *, uint64_t))(v15 + 40);
  v19 = *(_QWORD *)(v15 + 48);
  v21 = (_QWORD *)(*(_QWORD *)(a1 + 32) + (v19 >> 1));
  if ((v19 & 1) != 0)
    v20 = *(uint64_t (**)(_QWORD *, uint64_t))(*v21 + v20);
  v22 = v20(v21, a2);
  v23 = v22;
  v97 = v22;
  if (a2 <= 1 && (_DWORD)v22 != v100)
  {
    sub_10176CF04();
    goto LABEL_157;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE440);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v25 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v25 = (_QWORD *)*v25;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v73 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v73 = (_QWORD *)*v73;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v73;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v75 = (char *)v74;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLEurekaGnssIratState>::handleEvent(Event) [T = CLEurekaGnssIratState]", "%s\n", v74);
      if (v75 != buf)
        free(v75);
    }
  }
  if (v3[14] != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE440);
  v26 = qword_1022A0078;
  v27 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v27))
  {
    v28 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v28 = (_QWORD *)*v28;
    sub_10176C400(v23, buf);
    if (v109 >= 0)
      v29 = buf;
    else
      v29 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v28;
    v102 = 2080;
    v103 = v29;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE440);
    v67 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v67 = (_QWORD *)*v67;
    v68 = qword_1022A0078;
    v69 = *(unsigned __int8 *)(a1 + 120);
    sub_10176C400(v23, __p);
    if (v104 >= 0)
      v70 = __p;
    else
      v70 = *(_BYTE **)__p;
    *(_DWORD *)v111 = 136315394;
    *(_QWORD *)&v111[4] = v67;
    v112 = 2080;
    v113 = v70;
    LODWORD(v95) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v68, v69, "%snewState,%s", v111, v95);
    v72 = v71;
    if (SHIBYTE(v104) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssIratState>::handleEvent(Event) [T = CLEurekaGnssIratState]", "%s\n", v72);
    if (v72 != buf)
      free(v72);
  }
  if ((_DWORD)v23 != v100)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE440);
    v30 = qword_1022A0078;
    v31 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v31))
    {
      v32 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v32 = (_QWORD *)*v32;
      sub_10176C400(v100, __p);
      v33 = v3;
      v34 = SHIBYTE(v104);
      v35 = *(_BYTE **)__p;
      sub_1015A2E04(v111, "Exit");
      v36 = __p;
      if (v34 < 0)
        v36 = v35;
      if (v114 >= 0)
        v37 = v111;
      else
        v37 = *(_BYTE **)v111;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v32;
      v107 = 2080;
      v108 = v36;
      v109 = 2080;
      v110 = v37;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%soldState,%s,event,%s", buf, 0x20u);
      if (v114 < 0)
        operator delete(*(void **)v111);
      v3 = v33;
      if (SHIBYTE(v104) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v76 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v76 = (_QWORD *)*v76;
      v77 = qword_1022A0078;
      v78 = *(unsigned __int8 *)(a1 + 120);
      sub_10176C400(v100, v111);
      v79 = v3;
      v80 = v114;
      v81 = *(_BYTE **)v111;
      sub_1015A2E04(v98, "Exit");
      v82 = v111;
      if (v80 < 0)
        v82 = v81;
      if (v99 >= 0)
        v83 = v98;
      else
        v83 = (void **)v98[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v76;
      v102 = 2080;
      v103 = v82;
      v104 = 2080;
      v105 = v83;
      LODWORD(v95) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, v78, "%soldState,%s,event,%s", __p, v95, (const char *)(a1 + 8));
      v85 = v84;
      if (v99 < 0)
        operator delete(v98[0]);
      v3 = v79;
      v13 = (uint64_t **)v96;
      if (v114 < 0)
        operator delete(*(void **)v111);
      sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssIratState>::handleEvent(Event) [T = CLEurekaGnssIratState]", "%s\n", v85);
      if (v85 != buf)
        free(v85);
    }
    v38 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = &v100;
    v39 = sub_1000610B4(v13, (int *)&v100, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v40 = v39[5];
    v41 = (uint64_t)v39[6];
    v42 = (_QWORD *)(v38 + (v41 >> 1));
    if ((v41 & 1) != 0)
      v40 = *(uint64_t **)(*v42 + v40);
    v43 = ((uint64_t (*)(_QWORD *, uint64_t))v40)(v42, 1);
    if (v43 == v100)
    {
      *(_DWORD *)(a1 + 4) = v23;
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE440);
      v44 = qword_1022A0078;
      v45 = *(_BYTE *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1022A0078, v45))
      {
        v46 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v46 = (_QWORD *)*v46;
        sub_10176C400(v23, __p);
        v47 = v3;
        v48 = SHIBYTE(v104);
        v49 = *(_BYTE **)__p;
        sub_1015A2E04(v111, "Enter");
        v50 = __p;
        if (v48 < 0)
          v50 = v49;
        if (v114 >= 0)
          v51 = v111;
        else
          v51 = *(_BYTE **)v111;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v46;
        v107 = 2080;
        v108 = v50;
        v109 = 2080;
        v110 = v51;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%snewState,%s,event,%s", buf, 0x20u);
        if (v114 < 0)
          operator delete(*(void **)v111);
        v3 = v47;
        if (SHIBYTE(v104) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE440);
        v86 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v86 = (_QWORD *)*v86;
        v87 = qword_1022A0078;
        v88 = *(unsigned __int8 *)(a1 + 120);
        sub_10176C400(v23, v111);
        v89 = v114;
        v90 = *(_BYTE **)v111;
        sub_1015A2E04(v98, "Enter");
        v91 = v111;
        if (v89 < 0)
          v91 = v90;
        if (v99 >= 0)
          v92 = v98;
        else
          v92 = (void **)v98[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v86;
        v102 = 2080;
        v103 = v91;
        v104 = 2080;
        v105 = v92;
        LODWORD(v95) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v87, v88, "%snewState,%s,event,%s", __p, v95, v96);
        v94 = v93;
        if (v99 < 0)
          operator delete(v98[0]);
        if (v114 < 0)
          operator delete(*(void **)v111);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssIratState>::handleEvent(Event) [T = CLEurekaGnssIratState]", "%s\n", v94);
        if (v94 != buf)
          free(v94);
      }
      v52 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)buf = &v97;
      v53 = sub_1000610B4(v13, &v97, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v54 = v53[5];
      v55 = (uint64_t)v53[6];
      v56 = (_QWORD *)(v52 + (v55 >> 1));
      if ((v55 & 1) != 0)
        v54 = *(uint64_t **)(*v56 + v54);
      v23 = ((uint64_t (*)(_QWORD *, _QWORD))v54)(v56, 0);
      if ((_DWORD)v23 == v97)
        goto LABEL_89;
      sub_10176CC2C();
    }
    else
    {
      sub_10176CD98();
    }
LABEL_157:
    __break(1u);
  }
LABEL_89:
  --*(_DWORD *)(a1 + 88);
  return v23;
}

void sub_10176C380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_10176C3E0(uint64_t a1)
{
  return sub_10176B698(a1, 4);
}

uint64_t sub_10176C3E8(uint64_t a1)
{
  return sub_10176B698(a1, 3);
}

uint64_t sub_10176C3F0(uint64_t a1)
{
  return sub_10176B698(a1, 7);
}

uint64_t sub_10176C3F8(uint64_t a1)
{
  return sub_10176B698(a1, 8);
}

_QWORD *sub_10176C400@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 4)
    v2 = "StateUnknown";
  else
    v2 = off_1021CE510[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_10176C42C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10176C45C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10176C484(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10176C4C4(uint64_t a1)
{
  return sub_10176B698(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_10176C4D4()
{
  NSObject *v0;
  uint8_t v1[40];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE440);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"fUniverse should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE440);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fUniverse should not be null", "{\"msg%{public}.0s\":\"fUniverse should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE440);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fUniverse should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
  }
}

#error "10176C6EC: call analysis failed (funcsize=73)"

#error "10176C85C: call analysis failed (funcsize=72)"

#error "10176C9C8: call analysis failed (funcsize=73)"

#error "10176CB38: call analysis failed (funcsize=72)"

#error "10176CCA4: call analysis failed (funcsize=72)"

#error "10176CE10: call analysis failed (funcsize=72)"

#error "10176CF7C: call analysis failed (funcsize=72)"

const char **sub_10176D070(const char **a1, const char *a2)
{
  NSObject *v3;
  NSObject *v4;
  xpc_object_t v5;
  void *v6;
  const char *v7;
  const char *v9;
  uint8_t *v10;
  _QWORD handler[5];
  __int16 v12[8];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  *a1 = "com.apple.locationd.Gnss.XoCalib";
  a1[1] = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE568);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 1026;
    v18 = 172800;
    v19 = 1026;
    v20 = 60;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#xo XoCalib instantiated\", \"intervalBetweenCalibration\":%{public}d, \"durationOfCalibration\":%{public}d}", buf, 0x1Eu);
  }
  if (!a1[1])
    sub_10176DBC4(qword_1022A0070 == -1);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE568);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "fCallbackqueue created", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE568);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "fCallbackqueue created", v12, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "CLEurekaXoCalib::CLEurekaXoCalib(id<CLIntersiloUniverse>)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v5 = xpc_dictionary_create(0, 0, 0);
  if (v5)
  {
    v6 = v5;
    xpc_dictionary_set_int64(v5, XPC_ACTIVITY_INTERVAL, 172800);
    xpc_dictionary_set_string(v6, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    v7 = *a1;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3321888768;
    handler[2] = sub_10176D370;
    handler[3] = &unk_1021CE538;
    handler[4] = a1;
    xpc_activity_register(v7, v6, handler);
    xpc_release(v6);
  }
  return a1;
}

void sub_10176D370(uint64_t a1, _xpc_activity_s *a2)
{
  sub_10176D3B8(*(uint64_t **)(a1 + 32), a2);
}

uint64_t sub_10176D378(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

const char **sub_10176D38C(const char **a1)
{
  xpc_activity_unregister(*a1);
  return a1;
}

void sub_10176D3B8(uint64_t *a1, xpc_activity_t activity)
{
  xpc_activity_state_t state;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint32_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;

  if (activity)
  {
    state = xpc_activity_get_state(activity);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE568);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v6 = *a1;
      v21 = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = v6;
      v27 = 1026;
      v28 = state;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#xo process_Activity\", \"xpcClient\":%{public, location:escape_only}s, \"state\":%{public}d}", (uint8_t *)&v21, 0x22u);
    }
    if (state)
    {
      if (state == 2)
      {
        sub_10176D874((uint64_t)a1);
        if (!xpc_activity_set_state(activity, 5))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE568);
          v7 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            v8 = *a1;
            v21 = 68289538;
            v22 = 0;
            v23 = 2082;
            v24 = "";
            v25 = 2082;
            v26 = v8;
            v27 = 1026;
            v28 = 2;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#xo,failedToSetState\", \"xpcClient\":%{public, location:escape_only}s, \"state\":%{public}d}", (uint8_t *)&v21, 0x22u);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE568);
          }
          v9 = qword_1022A0078;
          if (os_signpost_enabled((os_log_t)qword_1022A0078))
          {
            v10 = *a1;
            v21 = 68289538;
            v22 = 0;
            v23 = 2082;
            v24 = "";
            v25 = 2082;
            v26 = v10;
            v27 = 1026;
            v28 = 2;
            v11 = "#xo,failedToSetState";
            v12 = "{\"msg%{public}.0s\":\"#xo,failedToSetState\", \"xpcClient\":%{public, location:escape_only}s, \"state\":%{public}d}";
            v13 = v9;
LABEL_30:
            v16 = 34;
            goto LABEL_31;
          }
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE568);
        v17 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          v18 = *a1;
          v21 = 68289538;
          v22 = 0;
          v23 = 2082;
          v24 = "";
          v25 = 2082;
          v26 = v18;
          v27 = 1026;
          v28 = state;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#xo,unexpectedXpcActivity\", \"xpcClient\":%{public, location:escape_only}s, \"state\":%{public}d}", (uint8_t *)&v21, 0x22u);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE568);
        }
        v19 = qword_1022A0078;
        if (os_signpost_enabled((os_log_t)qword_1022A0078))
        {
          v20 = *a1;
          v21 = 68289538;
          v22 = 0;
          v23 = 2082;
          v24 = "";
          v25 = 2082;
          v26 = v20;
          v27 = 1026;
          v28 = state;
          v11 = "#xo,unexpectedXpcActivity";
          v12 = "{\"msg%{public}.0s\":\"#xo,unexpectedXpcActivity\", \"xpcClient\":%{public, location:escape_only}s, \"st"
                "ate\":%{public}d}";
          v13 = v19;
          goto LABEL_30;
        }
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE568);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v21 = 68289026;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#xo,activity is nil\"}", (uint8_t *)&v21, 0x12u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE568);
    }
    v15 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      v21 = 68289026;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v11 = "#xo,activity is nil";
      v12 = "{\"msg%{public}.0s\":\"#xo,activity is nil\"}";
      v13 = v15;
      v16 = 18;
LABEL_31:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v11, v12, (uint8_t *)&v21, v16);
    }
  }
}

void sub_10176D874(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  dispatch_time_t v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[5];
  _QWORD block[5];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;

  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue");
  if (v2)
  {
    v3 = v2;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10176DA70;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    dispatch_async(v2, block);
    v4 = dispatch_time(0, 60000000000);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10176DB8C;
    v7[3] = &unk_10212ECA0;
    v7[4] = a1;
    dispatch_after(v4, v3, v7);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE568);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"callbackQueue is null, cannot schedule XO calibration\"}", buf, 0x12u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE568);
    }
    v6 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289026;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "callbackQueue is null, cannot schedule XO calibration", "{\"msg%{public}.0s\":\"callbackQueue is null, cannot schedule XO calibration\"}", buf, 0x12u);
    }
  }
}

id sub_10176DA70(uint64_t a1)
{
  return sub_10176DA7C(*(_QWORD *)(a1 + 32), 3);
}

id sub_10176DA7C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE568);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1026;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#xo,assertCommCenter\", \"level\":%{public}d}", (uint8_t *)v6, 0x18u);
  }
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "assertCommCenter:with:", 2, a2);
}

id sub_10176DB8C(uint64_t a1)
{
  return sub_10176DA7C(*(_QWORD *)(a1 + 32), 1);
}

void sub_10176DB98(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10176DBC4(char a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t buf[40];

  if ((a1 & 1) == 0)
    goto LABEL_11;
  while (1)
  {
    v1 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"fUniverse should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE568);
    }
    v2 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fUniverse should not be null", "{\"msg%{public}.0s\":\"fUniverse should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE568);
    }
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fUniverse should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/Eureka/CLEurekaXoCalib.mm", 32, "CLEurekaXoCalib");
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021CE568);
  }
}

void sub_10176DD88(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::string *v5;
  __int128 v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  uint64_t v26;
  void *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  char v36;
  std::string::size_type v37;
  const std::string::value_type *v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string::value_type *v45;
  std::string::size_type v46;
  unsigned __int8 v47;
  std::string v48;
  _QWORD v49[2];

  sub_1015A2E04(&v45, ",,");
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *a1;
  switch(*a1)
  {
    case 0:
      std::string::assign((std::string *)a2, "UNK,");
      goto LABEL_70;
    case 1:
      std::to_string(&v43, *((unsigned __int8 *)a1 + 4));
      v9 = std::string::insert(&v43, 0, "GPS,");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if ((v47 & 0x80u) == 0)
        v7 = (const std::string::value_type *)&v45;
      else
        v7 = v45;
      if ((v47 & 0x80u) == 0)
        v8 = v47;
      else
        v8 = v46;
      goto LABEL_63;
    case 2:
      std::to_string(&v41, *((unsigned __int8 *)a1 + 4));
      v11 = std::string::insert(&v41, 0, "GLO,");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v13 = std::string::append(&v42, ",");
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v40, *((char *)a1 + 6));
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v40;
      else
        v15 = (std::string *)v40.__r_.__value_.__r.__words[0];
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      else
        size = v40.__r_.__value_.__l.__size_;
      v17 = std::string::append(&v48, (const std::string::value_type *)v15, size);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v43, ",");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, *((unsigned __int8 *)a1 + 5));
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v39;
      else
        v21 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v22 = v39.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v44, (const std::string::value_type *)v21, v22);
      v24 = v23->__r_.__value_.__r.__words[0];
      v49[0] = v23->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
      v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v26 = v49[0];
      *(_QWORD *)a2 = v24;
      *(_QWORD *)(a2 + 8) = v26;
      *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v49 + 7);
      *(_BYTE *)(a2 + 23) = v25;
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_70;
      v27 = (void *)v41.__r_.__value_.__r.__words[0];
      goto LABEL_69;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_70;
    case 4:
      std::to_string(&v43, *((unsigned __int8 *)a1 + 4));
      v28 = std::string::insert(&v43, 0, "BDS,");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if ((v47 & 0x80u) == 0)
        v7 = (const std::string::value_type *)&v45;
      else
        v7 = v45;
      if ((v47 & 0x80u) == 0)
        v8 = v47;
      else
        v8 = v46;
      goto LABEL_63;
    case 8:
      std::to_string(&v43, *((unsigned __int8 *)a1 + 4));
      v30 = std::string::insert(&v43, 0, "GAL,");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if ((v47 & 0x80u) == 0)
        v7 = (const std::string::value_type *)&v45;
      else
        v7 = v45;
      if ((v47 & 0x80u) == 0)
        v8 = v47;
      else
        v8 = v46;
      goto LABEL_63;
    default:
      if (v4 == 16)
      {
        std::to_string(&v43, *((unsigned __int8 *)a1 + 4));
        v32 = std::string::insert(&v43, 0, "QZSS,");
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if ((v47 & 0x80u) == 0)
          v7 = (const std::string::value_type *)&v45;
        else
          v7 = v45;
        if ((v47 & 0x80u) == 0)
          v8 = v47;
        else
          v8 = v46;
      }
      else
      {
        if (v4 != 32)
          goto LABEL_70;
        std::to_string(&v43, *((unsigned __int8 *)a1 + 4));
        v5 = std::string::insert(&v43, 0, "NVC,");
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        if ((v47 & 0x80u) == 0)
          v7 = (const std::string::value_type *)&v45;
        else
          v7 = v45;
        if ((v47 & 0x80u) == 0)
          v8 = v47;
        else
          v8 = v46;
      }
LABEL_63:
      v34 = std::string::append(&v44, v7, v8);
      v35 = v34->__r_.__value_.__r.__words[0];
      v48.__r_.__value_.__r.__words[0] = v34->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
      v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v37 = v48.__r_.__value_.__r.__words[0];
      *(_QWORD *)a2 = v35;
      *(_QWORD *)(a2 + 8) = v37;
      *(_QWORD *)(a2 + 15) = *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 7);
      *(_BYTE *)(a2 + 23) = v36;
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      {
        v27 = (void *)v43.__r_.__value_.__r.__words[0];
LABEL_69:
        operator delete(v27);
      }
LABEL_70:
      if (sub_100D030A0(a1))
        v38 = ",valid";
      else
        v38 = ",malformed";
      std::string::append((std::string *)a2, v38);
      if ((char)v47 < 0)
        operator delete(v45);
      return;
  }
}

void sub_10176E274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  uint64_t v48;

  if (a47 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  if (*(char *)(v47 + 23) < 0)
    operator delete(*(void **)v47);
  if (*(char *)(v48 - 97) < 0)
    operator delete(*(void **)(v48 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t sub_10176E3B4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_10230FAB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10230FAB8))
  {
    byte_10230FAB0 = sub_1001937D8();
    __cxa_guard_release(&qword_10230FAB8);
  }
  return byte_10230FAB0;
}

void sub_10176E40C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230FAB8);
  _Unwind_Resume(a1);
}

uint64_t sub_10176E424()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_10230FAC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10230FAC8))
  {
    byte_10230FAC0 = sub_1001DC958() ^ 1;
    __cxa_guard_release(&qword_10230FAC8);
  }
  return byte_10230FAC0;
}

void sub_10176E480(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230FAC8);
  _Unwind_Resume(a1);
}

uint64_t sub_10176E498(uint64_t a1, qmi::MessageBase *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v6;

  v6 = 0;
  if (!sub_10176E4D8(a1, a2, a3, a4, &v6))
    sub_101771D00(a1);
  return v6;
}

BOOL sub_10176E4D8(uint64_t a1, qmi::MessageBase *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  const char *v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  _BOOL8 result;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  NSObject *v31;
  const char *v32;
  NSObject *v33;
  const char *v34;
  NSObject *v35;
  const char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  NSObject *v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  const char *v58;
  NSObject *v59;
  float v60;
  double v61;
  float v62;
  double v63;
  NSObject *v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  NSObject *v69;
  const char *v70;
  uint8_t *v71;
  NSObject *v72;
  int v73;
  NSObject *v74;
  NSObject *v75;
  NSObject *v76;
  const char *v77;
  uint64_t **v78;
  _QWORD *v79;
  NSObject *v80;
  unsigned int v81;
  const char *v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  __int32 v86;
  char *v87;
  char *v88;
  unint64_t v89;
  NSObject *v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  NSObject *v97;
  const char *v98;
  uint8_t *v99;
  unint64_t v100;
  char v101;
  char v102;
  char v103;
  NSObject *v104;
  const char *v105;
  int v106;
  char v107;
  unint64_t v108;
  unint64_t v109;
  float32x2_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  unsigned int v116;
  unsigned int v117;
  float32x2_t v118;
  _QWORD *v119;
  uint64_t v120;
  const char *v121;
  uint8_t *v122;
  unsigned int v123;
  int v124;
  const char *v125;
  uint8_t *v126;
  NSObject *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _BOOL4 v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v139;
  unsigned int v140;
  const char *v141;
  const char *v142;
  uint8_t *v143;
  const char *v144;
  uint8_t *v145;
  unsigned int v146;
  const char *v147;
  const char *v148;
  uint8_t *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  _BOOL4 v153;
  unint64_t v154;
  const char *v155;
  uint8_t *v156;
  const char *v157;
  double v158;
  const char *v159;
  uint8_t *v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint8_t *v164;
  const char *v165;
  uint8_t *v166;
  const char *v167;
  uint8_t *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  BOOL v172;
  float64x2_t v173;
  uint64_t *v174;
  int v175;
  BOOL v176;
  unint64_t v177;
  _BYTE v178[4];
  int v179;
  _BYTE v180[4];
  int v181;
  unsigned __int8 v182;
  _BYTE v183[4];
  int v184;
  _BYTE v185[2];
  __int16 v186;
  char v187;
  unsigned __int8 v188;
  double v189;
  int8x16_t v190;
  _DWORD v191[2];
  __int16 v192;
  int v193;
  __int16 v194;
  int v195;
  int v196;
  _BYTE v197[36];
  uint64_t v198;
  double v199;
  float v200;
  __int128 v201;
  float64x2_t v202;
  float64x2_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  char v208;
  _QWORD *v209;
  float v210;
  __int16 v211;
  __int128 v212;
  __int128 v213;
  int v214;
  char v215[4];
  float v216;
  char *v217;
  char *v218;
  _BYTE v219[8];
  unsigned int v220;
  char v221;
  unint64_t v222;
  uint8_t buf[40];
  uint64_t v224;
  int64x2_t v225;
  int64x2_t v226;
  uint64_t v227;
  int64x2_t v228;
  int32x2_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;

  sub_10010F434((uint64_t)&v189);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#gnssmeas,callback is null", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    LOWORD(v196) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssmeas,callback is null", &v196, 2);
    v13 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v15);
    goto LABEL_333;
  }
  if (*(_BYTE *)(a1 + 728) && v189 < *(double *)(a1 + 720))
  {
    LOBYTE(v196) = 0;
    sub_10169DDA0(a2, 1u, &v196);
    if ((_BYTE)v196)
    {
      if (*(_BYTE *)(a1 + 728))
      {
        if (BYTE1(v196) == 1 && v189 + 0.5 > *(double *)(a1 + 720))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE588);
          v10 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#gnssmeas,clearing session start wait early based on seqNum", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE588);
            LOWORD(v212) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssmeas,clearing session start wait early based on seqNum", &v212, 2);
            v143 = (uint8_t *)v142;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v142);
            if (v143 != buf)
              free(v143);
          }
          if (*(_BYTE *)(a1 + 728))
            *(_BYTE *)(a1 + 728) = 0;
          goto LABEL_15;
        }
LABEL_68:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v28 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "#gnssmeas,ignoring measurement indication that may be from previous session", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          return 1;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        LOWORD(v212) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssmeas,ignoring measurement indication that may be from previous session", &v212, 2);
        v13 = (uint8_t *)v141;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v141);
        goto LABEL_333;
      }
    }
    else if (*(_BYTE *)(a1 + 728))
    {
      goto LABEL_68;
    }
    sub_10028DF3C();
  }
LABEL_15:
  v187 = 0;
  sub_10169DDA0(a2, 0x2Fu, &v187);
  if (v187 && v188 >= 2u)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      if (!v187)
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v188;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#gnssmeas,#Warning,ignoring measurement indication with subsequence number %{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    if (!v187)
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    v196 = 67240192;
    *(_DWORD *)v197 = v188;
    LODWORD(v169) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,#Warning,ignoring measurement indication with subsequence number %{public}d", &v196, v169);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v12);
LABEL_333:
    if (v13 != buf)
      free(v13);
    return 1;
  }
  v186 = 0;
  if (!sub_1017735DC(a1, a2, (BOOL *)&v186 + 1, (BOOL *)&v186))
    return 0;
  v185[0] = 0;
  sub_10169DDA0(a2, 3u, v185);
  v183[0] = 0;
  sub_100014D50(a2, 0x1Eu, (uint64_t)v183);
  if (!v185[0] || !v183[0])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#gnssmeas,system or signal type missing", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      LOWORD(v196) = 0;
      LODWORD(v169) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,system or signal type missing", &v196, v169);
      v25 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v27);
      goto LABEL_101;
    }
    return result;
  }
  v16 = v185[1];
  if (sub_10075FA90())
    v17 = 7;
  else
    v17 = 6;
  if (v17 <= (v16 - 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v29 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#gnssmeas,bad gnssSystem,%{public}d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v196 = 67240192;
      *(_DWORD *)v197 = v16;
      LODWORD(v169) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,bad gnssSystem,%{public}d", &v196, v169);
      v25 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v30);
      goto LABEL_101;
    }
    return result;
  }
  if (!v183[0])
    __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
  v18 = v184;
  v19 = sub_1017721BC(v184);
  v182 = v19;
  if (!v19)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v31 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if (!v183[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v184;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#gnssmeas,bad SignalType,%{public}u", buf, 8u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      if (!v183[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      v196 = 67240192;
      *(_DWORD *)v197 = v184;
      LODWORD(v169) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,bad SignalType,%{public}u", &v196, v169);
      v25 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v32);
      goto LABEL_101;
    }
    return result;
  }
  v219[0] = 0;
  sub_10177BFAC(a2, 0x10u, v219);
  v180[0] = 0;
  sub_100014D50(a2, 0x15u, (uint64_t)v180);
  if (!v219[0] || !v180[0])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v33 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#gnssmeas,hardware clock parsing failed", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      LOWORD(v196) = 0;
      LODWORD(v169) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,hardware clock parsing failed", &v196, v169);
      v25 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v34);
      goto LABEL_101;
    }
    return result;
  }
  if (!HIBYTE(v186))
  {
LABEL_156:
    if (v182 == 1 && v16 == 1)
    {
      sub_101774268((_QWORD *)a1, a2);
    }
    else if (v16 != 1)
    {
LABEL_201:
      if (!*(_QWORD *)(a1 + 544))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v76 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "#gnssmeas,skip meas,unset rx clock", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE588);
          LOWORD(v196) = 0;
          LODWORD(v169) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,skip meas,unset rx clock", &v196, v169);
          v25 = (uint8_t *)v77;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v77);
          goto LABEL_101;
        }
        return result;
      }
      sub_101775110(a2, v215);
      if (v215[0])
        v177 = 0xEEEEEEEEEEEEEEEFLL * ((v218 - v217) >> 3);
      else
        v177 = 0;
      v175 = v16;
      v178[0] = 0;
      sub_100014D50(a2, 0x2Cu, (uint64_t)v178);
      if (v178[0] && v16 != 6)
      {
        v196 = (int)(round((double)v179 * 0.002) * 5.0);
        *(_QWORD *)buf = &v182;
        v78 = sub_10177CBD4(a4, &v182, (uint64_t)&unk_101B9EB60, (char **)buf);
        *(_QWORD *)buf = &v196;
        v79 = sub_10006A62C((uint64_t)(v78 + 3), &v196, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        ++*((_DWORD *)v79 + 5);
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v80 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v81 = v182 - 1;
        if (v81 > 9)
          v82 = "other";
        else
          v82 = (&off_1021CE5C0)[(char)v81];
        if (v178[0])
          v83 = (float)((float)v179 * 0.01);
        else
          v83 = 0.0;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v82;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v177;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&buf[24] = v83;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "#gnssmeas,%{public}s,num_meas,%{public}zu,jamming_metric_dB,%{public}.2f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v146 = v182 - 1;
        if (v146 > 9)
          v147 = "other";
        else
          v147 = (&off_1021CE5C0)[(char)v146];
        if (v178[0])
          v158 = (float)((float)v179 * 0.01);
        else
          v158 = 0.0;
        v196 = 136446722;
        *(_QWORD *)v197 = v147;
        *(_WORD *)&v197[8] = 2050;
        *(_QWORD *)&v197[10] = v177;
        *(_WORD *)&v197[18] = 2050;
        *(double *)&v197[20] = v158;
        LODWORD(v169) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssmeas,%{public}s,num_meas,%{public}zu,jamming_metric_dB,%{public}.2f", &v196, v169);
        v160 = (uint8_t *)v159;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v159);
        if (v160 != buf)
          free(v160);
      }
      v196 = v18;
      *(_QWORD *)buf = &v196;
      v174 = sub_10006A848(a1 + 736, &v196, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 3;
      v212 = 0u;
      v213 = 0u;
      v214 = 1065353216;
      if (!v177)
      {
        v86 = 0;
LABEL_306:
        sub_10177D11C((uint64_t)v174, (uint64_t)&v212);
        if ((_BYTE)v186)
        {
          if (*(_QWORD *)(a1 + 72))
            operator new();
          if (*(_QWORD *)(a1 + 80))
            operator new();
          if (*(_QWORD *)(a1 + 96))
            operator new();
          if (*(_QWORD *)(a1 + 88))
            operator new();
          if (*(_QWORD *)(a1 + 104))
            operator new();
          sub_100008848(a1 + 688, *(_QWORD **)(a1 + 696));
          *(_QWORD *)(a1 + 688) = a1 + 696;
          *(_QWORD *)(a1 + 704) = 0;
          *(_QWORD *)(a1 + 696) = 0;
          sub_10010C110((uint64_t *)(a1 + 112), a3, (uint64_t **)(a1 + 688));
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE588);
          v127 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            v128 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 4);
            v129 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 4);
            v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 3);
            v131 = *(_QWORD *)(a1 + 376) != 0;
            v132 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3);
            *(_DWORD *)buf = 134350336;
            *(_QWORD *)&buf[4] = v128;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v129;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)&buf[24] = v130;
            *(_WORD *)&buf[32] = 1026;
            *(_DWORD *)&buf[34] = v131;
            *(_WORD *)&buf[38] = 2050;
            v224 = v132;
            v225.i16[0] = 1026;
            *(__int32 *)((char *)v225.i32 + 2) = v86;
            _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_INFO, "#gnssmeas,sending out,num_meas,%{public}zu,num_svinfo,%{public}zu,num_bandcorr,%{public}zu,has_klobuchar,%{public}d,num_apc_offset,%{public}zu,false_peak_count,%{public}d", buf, 0x36u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE588);
            v150 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 4);
            v151 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 4);
            v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 3);
            v153 = *(_QWORD *)(a1 + 376) != 0;
            v154 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3);
            v196 = 134350336;
            *(_QWORD *)v197 = v150;
            *(_WORD *)&v197[8] = 2050;
            *(_QWORD *)&v197[10] = v151;
            *(_WORD *)&v197[18] = 2050;
            *(_QWORD *)&v197[20] = v152;
            *(_WORD *)&v197[28] = 1026;
            *(_DWORD *)&v197[30] = v153;
            *(_WORD *)&v197[34] = 2050;
            v198 = v154;
            LOWORD(v199) = 1026;
            *(_DWORD *)((char *)&v199 + 2) = v86;
            LODWORD(v169) = 54;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssmeas,sending out,num_meas,%{public}zu,num_svinfo,%{public}zu,num_bandcorr,%{public}zu,has_klobuchar,%{public}d,num_apc_offset,%{public}zu,false_peak_count,%{public}d", &v196, v169);
            v156 = (uint8_t *)v155;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v155);
            if (v156 != buf)
              free(v156);
          }
          v133 = *(_QWORD *)(a1 + 32);
          if (!v133)
            sub_10025FD1C();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v133 + 48))(v133, a1 + 112);
          *a5 = 1;
          v230 = 2143289344;
          memset(buf, 0, sizeof(buf));
          v225 = vdupq_n_s64(0x7FF8000000000000uLL);
          v224 = -1;
          v226 = v225;
          v227 = 0;
          v233 = 0x7FF8000000000000;
          v235 = 0;
          v228 = v225;
          v231 = 0x8000000000000000;
          v229 = vdup_n_s32(0x7FC00000u);
          __asm { FMOV            V8.2S, #-1.0 }
          v232 = _D8;
          v234 = -1082130432;
          v243 = 0u;
          v244 = 0u;
          v242 = 0u;
          v241 = 0u;
          v240 = 0u;
          v239 = 0u;
          v238 = 0u;
          v237 = 0u;
          v236 = 0u;
          sub_101775438(a1 + 112, (__int128 *)buf);
          sub_100109508((uint64_t)buf);
          v139 = *(_QWORD *)(a1 + 64);
          if (v139)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v139 + 48))(v139, a1 + 408);
            *(_QWORD *)(a1 + 408) = 0;
            *(_QWORD *)(a1 + 416) = 0;
            *(_QWORD *)(a1 + 424) = _D8;
            *(_QWORD *)(a1 + 432) = 0x7FF8000000000000;
            *(_QWORD *)(a1 + 440) = 3212836864;
            *(_QWORD *)(a1 + 448) = 0x7FF8000000000000;
            *(_QWORD *)(a1 + 456) = 0;
            *(_QWORD *)(a1 + 464) = 3212836864;
            *(_WORD *)(a1 + 472) = 0x8000;
            *(_QWORD *)(a1 + 480) = 0;
            *(_QWORD *)(a1 + 474) = 0;
            *(_WORD *)(a1 + 488) = 0x8000;
            *(_WORD *)(a1 + 494) = 0;
            *(_DWORD *)(a1 + 490) = 0;
          }
          v140 = sub_1017755EC((int *)(a1 + 496)) - 1;
          if (v140 < 3)
            sub_101740774(*(_QWORD *)a1, (uint64_t)"SignalTracking", (uint64_t)(&off_1021CE5A8)[v140], 0);
        }
        sub_100067AC4((uint64_t)&v212);
        if (v215[0] && v217)
        {
          v218 = v217;
          operator delete(v217);
        }
        return 1;
      }
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v173 = (float64x2_t)vdupq_n_s64(0x400AAF6485FFABE7uLL);
      while (1)
      {
        if (!v215[0])
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        v87 = v217;
        v88 = &v217[v84];
        v89 = *(_QWORD *)&v217[v84 + 56];
        if ((v89 & 0x8000000) != 0)
          break;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v90 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          v91 = *((_QWORD *)v88 + 7);
          *(_DWORD *)buf = 67240704;
          *(_DWORD *)&buf[4] = v182;
          *(_WORD *)&buf[8] = 2050;
          *(_QWORD *)&buf[10] = v85;
          *(_WORD *)&buf[18] = 2050;
          *(_QWORD *)&buf[20] = v91;
          _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_INFO, "#gnssmeas,not fresh,sigtype,%{public}d,idx,%{public}zu,status,%{public}llu", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE588);
          v120 = *((_QWORD *)v88 + 7);
          v196 = 67240704;
          *(_DWORD *)v197 = v182;
          *(_WORD *)&v197[4] = 2050;
          *(_QWORD *)&v197[6] = v85;
          *(_WORD *)&v197[14] = 2050;
          *(_QWORD *)&v197[16] = v120;
          LODWORD(v169) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssmeas,not fresh,sigtype,%{public}d,idx,%{public}zu,status,%{public}llu", &v196, v169);
          v122 = (uint8_t *)v121;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v121);
          if (v122 != buf)
            free(v122);
        }
LABEL_293:
        ++v85;
        v84 += 120;
        if (v177 == v85)
          goto LABEL_306;
      }
      v196 = 0;
      *(_WORD *)v197 = 0;
      v197[2] = 127;
      *(_QWORD *)&v197[4] = 0;
      *(_DWORD *)&v197[11] = 0;
      *(_QWORD *)&v197[20] = -1;
      *(_QWORD *)&v197[28] = -1;
      v200 = -1.0;
      HIWORD(v92) = 0;
      v201 = xmmword_101BDB7D0;
      v202 = (float64x2_t)xmmword_101BDB7D0;
      v203 = (float64x2_t)xmmword_101BDB7D0;
      v204 = 1;
      v205 = -1;
      v206 = -1;
      v207 = xmmword_101BDB7D0;
      v208 = 0;
      v209 = 0;
      v210 = -1.0;
      v211 = 0;
      v198 = 1000000 * *(_QWORD *)(a1 + 544);
      v199 = NAN;
      v93 = 1000000 * v88[28];
      v94 = v198 - ((v93 * (unint64_t)*((unsigned __int16 *)v88 + 15)) >> 1) - 1000000 * *((__int16 *)v88 + 13);
      if ((v94 & 0x8000000000000000) == 0)
      {
        v95 = v94 + v93 * (unint64_t)*((unsigned __int16 *)v88 + 15);
        if ((v95 & 0x8000000000000000) == 0)
        {
          *(_QWORD *)&v197[20] = v94;
          *(_QWORD *)&v197[28] = v95;
        }
      }
      v96 = &v217[v84];
      if ((v217[v84 + 9] & 4) == 0)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v97 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_INFO, "#gnssmeas,skip meas,cn0 not valid", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_290;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        LOWORD(v191[0]) = 0;
        LODWORD(v169) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssmeas,skip meas,cn0 not valid", v191, v169);
        v99 = (uint8_t *)v98;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v98);
        goto LABEL_249;
      }
      LOWORD(v92) = *((_WORD *)v96 + 12);
      v210 = (float)v92 / 10.0;
      HIBYTE(v211) = (v89 & 0x100600F800) == 0;
      v100 = sub_1017721E0(v175, *(unsigned __int16 *)v96, 0);
      if (v101)
      {
        v196 = v100;
        v197[2] = BYTE6(v100);
        *(_WORD *)v197 = WORD2(v100);
        if (v182 != 5)
          goto LABEL_258;
        v102 = sub_10176E3B4();
        if (v197[0] > 0x12u)
          v103 = v102;
        else
          v103 = 0;
        if ((v103 & 1) == 0)
        {
          LODWORD(v100) = v196;
LABEL_258:
          if ((_DWORD)v100 == 2)
          {
            v197[1] = 1;
            if ((v96[8] & 1) == 0)
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE588);
              v104 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_INFO, "#gnssmeas,skip meas,unknown fcn", buf, 2u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_290;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE588);
              LOWORD(v191[0]) = 0;
              LODWORD(v169) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssmeas,skip meas,unknown fcn", v191, v169);
              v99 = (uint8_t *)v105;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v105);
LABEL_249:
              if (v99 != buf)
                free(v99);
              goto LABEL_290;
            }
            v197[2] = v87[v84 + 16];
          }
          if (sub_101772D78((uint64_t)&v87[v84], &v182, (v89 & 0x100600F800) == 0, &v197[4]))
          {
            LOBYTE(v211) = v88[59] & 1;
            if (sub_10177CE44(v174, (unsigned __int16 *)&v87[v84]))
            {
              v106 = v87[v84 + 100];
              *(_QWORD *)buf = &v87[v84];
              v172 = v106 != *((unsigned __int8 *)sub_10177CEF8((uint64_t)v174, (unsigned __int16 *)&v87[v84], (uint64_t)&unk_101B9EB60, (_WORD **)buf)+ 18);
            }
            else
            {
              v172 = 0;
            }
            v107 = v87[v84 + 100];
            *(_QWORD *)buf = &v87[v84];
            *((_BYTE *)sub_10177CEF8((uint64_t)&v212, (unsigned __int16 *)&v87[v84], (uint64_t)&unk_101B9EB60, (_WORD **)buf)+ 18) = v107;
            v109 = *((_QWORD *)v88 + 7);
            if ((v109 & 0x200) == 0)
            {
              LODWORD(v108) = *(_DWORD *)&v87[v84 + 32];
              v199 = ((double)v108 + *(float *)&v87[v84 + 36]) * 1000000.0;
              v200 = *(float *)&v87[v84 + 40] * 1000000.0;
            }
            if ((v109 & 0x410) == 0x10)
            {
              v110.f32[0] = -*(float *)&v87[v84 + 44];
              v110.i32[1] = *(_DWORD *)&v87[v84 + 48];
              v202 = vmulq_f64(vcvtq_f64_f32(v110), v173);
            }
            v111 = *((_QWORD *)v96 + 1);
            if ((v111 & 4) == 0)
            {
              if ((v109 & 0x20) != 0)
              {
                v112 = 0;
                goto LABEL_281;
              }
LABEL_289:
              sub_101775158();
            }
            v113 = (v111 >> 3) & 1;
            v114 = (v109 >> 5) & 1;
            v112 = v114 & v113;
            if ((_DWORD)v114 == (_DWORD)v113)
            {
LABEL_287:
              if (!v112)
                goto LABEL_289;
            }
            else
            {
LABEL_281:
              v171 = v112;
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE588);
              v115 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
              {
                v116 = *((_DWORD *)v96 + 2);
                v117 = *((_DWORD *)v88 + 14);
                *(_DWORD *)buf = 67240704;
                *(_DWORD *)&buf[4] = (v116 >> 2) & 1;
                *(_WORD *)&buf[8] = 1026;
                *(_DWORD *)&buf[10] = (v116 >> 3) & 1;
                *(_WORD *)&buf[14] = 1026;
                *(_DWORD *)&buf[16] = (v117 >> 5) & 1;
                _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_ERROR, "#gnssmeas,fine speed flag disagreement,%{public}d,%{public}d,%{public}d", buf, 0x14u);
              }
              if (!sub_1001BFF7C(115, 0))
              {
                v112 = v171;
                goto LABEL_287;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE588);
              v123 = *((_DWORD *)v96 + 2);
              v124 = (*((_DWORD *)v88 + 14) >> 5) & 1;
              v191[0] = 67240704;
              v191[1] = (v123 >> 2) & 1;
              v192 = 1026;
              v193 = (v123 >> 3) & 1;
              v194 = 1026;
              v195 = v124;
              LODWORD(v169) = 20;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,fine speed flag disagreement,%{public}d,%{public}d,%{public}d", v191, v169);
              v126 = (uint8_t *)v125;
              sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v125);
              if (v126 != buf)
                free(v126);
              if ((v171 & 1) == 0)
                goto LABEL_289;
            }
            v118.f32[0] = -*(float *)&v87[v84 + 92];
            v118.i32[1] = *(_DWORD *)&v87[v84 + 96];
            v203 = vmulq_f64(vcvtq_f64_f32(v118), v173);
            v204 = v172;
            goto LABEL_289;
          }
        }
      }
LABEL_290:
      v119 = v209;
      v209 = 0;
      if (v119)
        sub_100E09580((uint64_t)&v209, v119);
      v86 += (v89 >> 36) & 1;
      goto LABEL_293;
    }
    v215[0] = 0;
    sub_10177C138(a2, 0x13u, v215);
    if (v215[0])
    {
      v60 = *(float *)&v217;
      v61 = v216 * 3.33564095;
      *(double *)(a1 + 248) = v61;
      v62 = v60 * 3.33564095;
      *(float *)(a1 + 256) = v62;
      *(float *)(a1 + 440) = v62;
      v63 = *(double *)(a1 + 200);
      if ((*(_QWORD *)&v63 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        *(double *)(a1 + 448) = v63;
        *(double *)(a1 + 432) = v61 + v63;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v64 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        if (!v215[0])
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v216;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = *(float *)&v217;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "#gnssmeas,RcvrToGps,receiverClkFreqBias,%{public}.9f,receiverClkFreqUnc,%{public}.9f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        if (!v215[0])
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        v196 = 134349312;
        *(double *)v197 = v216;
        *(_WORD *)&v197[8] = 2050;
        *(double *)&v197[10] = *(float *)&v217;
        LODWORD(v169) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssmeas,RcvrToGps,receiverClkFreqBias,%{public}.9f,receiverClkFreqUnc,%{public}.9f", &v196, v169);
        v145 = (uint8_t *)v144;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v144);
        if (v145 != buf)
          free(v145);
      }
      LOBYTE(v212) = 0;
      sub_10177C1D0(a2, 0x11u, (unsigned __int8 *)&v212);
      if (!(_BYTE)v212)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v74 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#gnssmeas,GnssTime missing", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_193;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        LOWORD(v196) = 0;
        LODWORD(v169) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,GnssTime missing", &v196, v169);
        v71 = (uint8_t *)v157;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v157);
        goto LABEL_367;
      }
      v65 = *((float *)&v212 + 3) * 1000000.0;
      if (fabsf(*((float *)&v212 + 3) * 1000000.0) <= 1000000.0)
      {
        v66 = llroundf(v65);
        v67 = 1000000 * (DWORD2(v212) + 604800000 * WORD2(v212)) - v66;
        *(_QWORD *)(a1 + 232) = v67 - 1000000 * *(_QWORD *)(a1 + 544);
        v68 = *(float *)&v213 * 1000000.0;
        *(float *)(a1 + 240) = -(float)(v65 - (float)v66);
        *(float *)(a1 + 244) = v68;
        *(_QWORD *)(a1 + 456) = v67;
        *(float *)(a1 + 464) = v68;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v69 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          if (!(_BYTE)v212)
            __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
          *(_DWORD *)buf = 134349824;
          *(double *)&buf[4] = *((float *)&v212 + 3);
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = *(float *)&v213;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = WORD2(v212);
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = DWORD2(v212);
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "#gnssmeas,RcvrToGps,clkTimeBiasMs,%{public}0.6f,clkTimeUncMs,%{public}0.6f,GPS week,%{public}hu,GPS msec,%{public}u", buf, 0x22u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_193;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        if (!(_BYTE)v212)
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        v196 = 134349824;
        *(double *)v197 = *((float *)&v212 + 3);
        *(_WORD *)&v197[8] = 2050;
        *(double *)&v197[10] = *(float *)&v213;
        *(_WORD *)&v197[18] = 1026;
        *(_DWORD *)&v197[20] = WORD2(v212);
        *(_WORD *)&v197[24] = 1026;
        *(_DWORD *)&v197[26] = DWORD2(v212);
        LODWORD(v169) = 34;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssmeas,RcvrToGps,clkTimeBiasMs,%{public}0.6f,clkTimeUncMs,%{public}0.6f,GPS week,%{public}hu,GPS msec,%{public}u", &v196, v169);
        v71 = (uint8_t *)v70;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v70);
LABEL_367:
        if (v71 != buf)
          free(v71);
LABEL_193:
        v73 = 0;
        result = 1;
        goto LABEL_200;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v75 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v65;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "#gnssmeas,strange system clock time bias,%{public}.6f", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v196 = 134349056;
        *(double *)v197 = v65;
        LODWORD(v169) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,strange system clock time bias,%{public}.6f", &v196, v169);
        v166 = (uint8_t *)v165;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v165);
        if (v166 != buf)
          free(v166);
        result = 0;
      }
      v73 = 1;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v72 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "#gnssmeas,frequency estimate parsing failed", buf, 2u);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        LOWORD(v196) = 0;
        LODWORD(v169) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,frequency estimate parsing failed", &v196, v169);
        v149 = (uint8_t *)v148;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v148);
        if (v149 != buf)
          free(v149);
        result = 0;
      }
      v73 = 1;
    }
LABEL_200:
    if (v73)
      return result;
    goto LABEL_201;
  }
  if (!v221)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v35 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#gnssmeas,rtc invalid", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      LOWORD(v196) = 0;
      LODWORD(v169) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,rtc invalid", &v196, v169);
      v25 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v36);
      goto LABEL_101;
    }
    return result;
  }
  if (v222 < *(_QWORD *)(a1 + 536))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if (!v219[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      v21 = *(_QWORD *)(a1 + 536);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v222;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#gnssmeas,rtc went backwards,%{public}llu%{public}llu", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      if (!v219[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      v23 = *(_QWORD *)(a1 + 536);
      v196 = 134349312;
      *(_QWORD *)v197 = v222;
      *(_WORD *)&v197[8] = 2050;
      *(_QWORD *)&v197[10] = v23;
      LODWORD(v169) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,rtc went backwards,%{public}llu%{public}llu", &v196, v169);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v24);
LABEL_101:
      if (v25 != buf)
        free(v25);
      return 0;
    }
    return result;
  }
  *(_QWORD *)(a1 + 536) = v222;
  v37 = *(_QWORD *)(a1 + 544);
  if (v37 && v181 != *(_DWORD *)(a1 + 552))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v53 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if (!v180[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      v54 = *(_DWORD *)(a1 + 552);
      v55 = *(_QWORD *)(a1 + 544);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v55;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v54;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v181;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected fine clock reset,clock,%{public}llu,curr_num,%{public}u,new_num,%{public}u", buf, 0x18u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      if (!v180[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      v56 = *(_DWORD *)(a1 + 552);
      v57 = *(_QWORD *)(a1 + 544);
      v196 = 134349568;
      *(_QWORD *)v197 = v57;
      *(_WORD *)&v197[8] = 1026;
      *(_DWORD *)&v197[10] = v56;
      *(_WORD *)&v197[14] = 1026;
      *(_DWORD *)&v197[16] = v181;
      LODWORD(v169) = 24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,unexpected fine clock reset,clock,%{public}llu,curr_num,%{public}u,new_num,%{public}u", &v196, v169);
      v25 = (uint8_t *)v58;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v58);
      goto LABEL_101;
    }
    return result;
  }
  v38 = v220 + 0x40000000;
  if (v37 > v38)
    v38 = *(_QWORD *)(a1 + 544);
  v39 = (v38 - v220 + 3221225471u) & 0xFFFFFFFF00000000 | v220;
  if (v39 >= v37)
  {
    *(_QWORD *)(a1 + 544) = v39;
    *(_DWORD *)(a1 + 552) = v181;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v44 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v45 = *(_QWORD *)(a1 + 544);
      v46 = *(_QWORD *)(a1 + 536);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v45;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v46;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v46 - v45;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#gnssmeas,new epoch,fine clk ms,%llu,rtc ms,%llu,delta ms,%lld", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v161 = *(_QWORD *)(a1 + 544);
      v162 = *(_QWORD *)(a1 + 536);
      v196 = 134218496;
      *(_QWORD *)v197 = v161;
      *(_WORD *)&v197[8] = 2048;
      *(_QWORD *)&v197[10] = v162;
      *(_WORD *)&v197[18] = 2048;
      *(_QWORD *)&v197[20] = v162 - v161;
      LODWORD(v169) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssmeas,new epoch,fine clk ms,%llu,rtc ms,%llu,delta ms,%lld", &v196, v169, v170);
      v164 = (uint8_t *)v163;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v163);
      if (v164 != buf)
        free(v164);
    }
    *(_QWORD *)(a1 + 152) = 1000000 * *(_QWORD *)(a1 + 544);
    LOBYTE(v196) = 0;
    v47 = sub_10177C0CC(a2, 0x1Cu, (char *)&v196);
    if ((_BYTE)v196)
      *(int8x16_t *)(a1 + 200) = vextq_s8(*(int8x16_t *)&v197[4], *(int8x16_t *)&v197[4], 8uLL);
    *(int8x16_t *)(a1 + 112) = vextq_s8(v190, v190, 8uLL);
    v48 = v189;
    *(double *)(a1 + 128) = v189;
    *(double *)(a1 + 408) = v48;
    v49 = 1000000 * *(_QWORD *)(a1 + 536);
    v176 = sub_101774044((uint64_t)v47, v49);
    if (v176)
    {
      *(double *)(a1 + 136) = sub_101774200((double *)(a1 + 640), v49, *(double *)(a1 + 128));
      *(_QWORD *)(a1 + 144) = v50;
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(a1 + 536);
      buf[0] = 0;
      sub_10170B710(a2, 0x2Du, (uint64_t)buf);
      if (buf[0])
        *(_DWORD *)(a1 + 424) = *(_DWORD *)&buf[4];
      LOBYTE(v212) = 0;
      sub_10170B710(a2, 0x2Eu, (uint64_t)&v212);
      if ((_BYTE)v212)
        *(_DWORD *)(a1 + 428) = DWORD1(v212);
      v51 = *(_QWORD *)(a1 + 72);
      if (v51)
      {
        v52 = *(_OWORD *)(v51 + 8);
        *(_QWORD *)(a1 + 488) = *(_QWORD *)(v51 + 24);
        *(_OWORD *)(a1 + 472) = v52;
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v59 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v49;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid rtc,%{public}llu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        LODWORD(v212) = 134349056;
        *(_QWORD *)((char *)&v212 + 4) = v49;
        LODWORD(v169) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,invalid rtc,%{public}llu", &v212, v169);
        v168 = (uint8_t *)v167;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v167);
        if (v168 != buf)
          free(v168);
      }
    }
    if (!v176)
      return 0;
    goto LABEL_156;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE588);
  v40 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    if (!v219[0])
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    v41 = *(_QWORD *)(a1 + 544);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v220;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v41;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#gnssmeas,fine clock value went unexpectedly backwards or negative,%{public}u,%{public}llu", buf, 0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    if (!v219[0])
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    v42 = *(_QWORD *)(a1 + 544);
    v196 = 67240448;
    *(_DWORD *)v197 = v220;
    *(_WORD *)&v197[4] = 2050;
    *(_QWORD *)&v197[6] = v42;
    LODWORD(v169) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,fine clock value went unexpectedly backwards or negative,%{public}u,%{public}llu", &v196, v169);
    v25 = (uint8_t *)v43;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v43);
    goto LABEL_101;
  }
  return result;
}

void sub_101771B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_101771D00(uint64_t a1)
{
  NSObject *v2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[16];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;
  int64x2_t v22;
  uint64_t v23;
  int64x2_t v24;
  int32x2_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE588);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gnssmeas,reset", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v16[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,reset", v16, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::resetGnssMeasIndicationState()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  *(_OWORD *)buf = 0u;
  v18 = 0u;
  v19 = 0;
  v21 = vdupq_n_s64(0x7FF8000000000000uLL);
  v20 = -1;
  v22 = v21;
  v23 = 0;
  v24 = v21;
  v25 = vdup_n_s32(0x7FC00000u);
  v26 = 2143289344;
  v27 = 0x8000000000000000;
  __asm { FMOV            V1.2S, #-1.0 }
  v28 = _D1;
  v29 = 0x7FF8000000000000;
  v30 = 3212836864;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  sub_101775438(a1 + 112, (__int128 *)buf);
  sub_100109508((uint64_t)buf);
  *(_WORD *)(a1 + 532) = -1;
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v8)
    operator delete();
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v9)
    operator delete();
  v10 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v10)
    operator delete();
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v11)
    operator delete();
  v12 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v12)
    operator delete();
  *(_BYTE *)(a1 + 672) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  return result;
}

uint64_t sub_101771FF8(unsigned int a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  unsigned int v10;

  if (a1 >= 5)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gnssmeas,unhandled detection method,%{public}d", buf, 8u);
    }
    v4 = sub_1001BFF7C(115, 0);
    v2 = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v8[0] = 67240192;
      v8[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,unhandled detection method,%{public}d", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "gnss::MeasurementDetectionMethod convertQmiDetectionMethodToNative(DetectionMethod)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

uint64_t sub_1017721BC(int a1)
{
  if ((a1 - 1) > 0x13)
    return 0;
  else
    return byte_101CDC05D[a1 - 1];
}

unint64_t sub_1017721E0(int a1, unsigned int a2, int a3)
{
  int v5;
  NSObject *v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  NSObject *v12;
  double v13;
  uint8_t *v14;
  uint8_t *v15;
  NSObject *v16;
  const char *v18;
  uint8_t *v19;
  double v20;
  uint8_t *v21;
  int v22;
  unsigned int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint8_t buf[4];
  unsigned int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  if (!a3)
  {
    v5 = a1;
    switch(a1)
    {
      case 1:
        goto LABEL_14;
      case 2:
        goto LABEL_30;
      case 4:
        goto LABEL_28;
      case 5:
        if (a2 != 255)
          goto LABEL_24;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v12 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gnssmeas,ignoring glo with unknown svid", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_12;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        LOWORD(v22) = 0;
        v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssmeas,ignoring glo with unknown svid", &v22, 2);
        v15 = v14;
        sub_100512490("Generic", 1, 0, 2, "std::optional<gnss::SvId> convertQmiSvIdToNative(SatSystem, uint16_t, BOOL)", "%s\n", v13);
        break;
      case 6:
        goto LABEL_26;
      case 7:
        goto LABEL_32;
      default:
        goto LABEL_7;
    }
    goto LABEL_48;
  }
  if ((unsigned __int16)(a2 - 1) < 0x20u)
  {
LABEL_14:
    v9 = 32;
    v10 = 1;
    v7 = 1;
    v8 = a2;
    v11 = 1;
  }
  else
  {
    if (a2 < 0x41)
      goto LABEL_6;
    if (a2 < 0x61)
    {
LABEL_24:
      v8 = a2 - 64;
      v11 = 65;
      v9 = 96;
      v7 = 2;
      v10 = 5;
    }
    else
    {
      if (a2 < 0xC0)
        goto LABEL_6;
      if (a2 >= 0xC6)
      {
        if (a2 >= 0x108)
        {
          if (a2 >= 0x151)
          {
            if (a2 >= 0x19F)
            {
LABEL_6:
              v5 = 3;
LABEL_7:
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE588);
              v6 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67240192;
                v29 = v5;
                _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected system,%{public}d", buf, 8u);
              }
              if (!sub_1001BFF7C(115, 0))
                goto LABEL_12;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE588);
              v22 = 67240192;
              v23 = v5;
              v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,unexpected system,%{public}d", &v22, 8);
              v15 = v21;
              sub_100512490("Generic", 1, 0, 0, "std::optional<gnss::SvId> convertQmiSvIdToNative(SatSystem, uint16_t, BOOL)", "%s\n", v20);
LABEL_48:
              if (v15 != buf)
                free(v15);
LABEL_12:
              v7 = 0;
              v8 = 0;
              return v7 | ((unint64_t)v8 << 32) | 0x7F000000000000;
            }
LABEL_32:
            v8 = a2 + 112;
            v11 = 401;
            v9 = 414;
            v7 = 32;
            v10 = 7;
          }
          else
          {
LABEL_30:
            v8 = a2 - 44;
            v11 = 301;
            v9 = 336;
            v7 = 8;
            v10 = 2;
          }
        }
        else
        {
LABEL_28:
          v8 = a2 + 56;
          v11 = 201;
          v9 = 263;
          v10 = 4;
          v7 = 4;
        }
      }
      else
      {
LABEL_26:
        v11 = 193;
        v9 = 197;
        v7 = 16;
        v10 = 6;
        v8 = a2;
      }
    }
  }
  if (v9 < a2 || v11 > a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240704;
      v29 = a2;
      v30 = 1026;
      v31 = v10;
      v32 = 1026;
      v33 = a3;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected svid,%{public}d,%{public}d,%{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v22 = 67240704;
      v23 = a2;
      v24 = 1026;
      v25 = v10;
      v26 = 1026;
      v27 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,unexpected svid,%{public}d,%{public}d,%{public}d", &v22, 20);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "std::optional<gnss::SvId> convertQmiSvIdToNative(SatSystem, uint16_t, BOOL)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  return v7 | ((unint64_t)v8 << 32) | 0x7F000000000000;
}

uint64_t sub_101772788(unsigned int a1)
{
  NSObject *v2;
  _BOOL4 v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v8[4];
  uint8_t buf[4];
  unsigned int v10;

  if (a1 < 6 && ((0x27u >> a1) & 1) != 0)
  {
    return (0x30101020201uLL >> (8 * a1));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected apc reference frequency,%{public}d", buf, 8u);
    }
    v3 = sub_1001BFF7C(115, 0);
    LOBYTE(v4) = 0;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v8[0] = 67240192;
      v8[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,unexpected apc reference frequency,%{public}d", v8, 8);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "gnss::SvReferencePoint convertQmiApcFreqIdToNative(qmi::pds::AntennaPhaseCenterFrequencyId)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      LOBYTE(v4) = 0;
    }
  }
  return v4;
}

uint64_t sub_101772964(int a1, int a2)
{
  char v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  const char *v7;
  char v9;
  NSObject *v10;
  _BOOL4 v11;
  NSObject *v12;
  _BOOL4 v13;
  uint8_t *v14;
  _QWORD v16[2];
  uint8_t buf[4];
  int v18;

  if ((a2 - 1) >= 2)
  {
    if (a2 == 5)
    {
      v9 = a1 - 1;
      if ((a1 - 1) < 7 && ((0x6Bu >> v9) & 1) != 0)
        return (0x3030307030903uLL >> (8 * v9));
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        v18 = a1;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#gnssmeas,apc,unexpected qmi gnss system,%{public}d", buf, 8u);
      }
      v11 = sub_1001BFF7C(115, 0);
      LOBYTE(v6) = 0;
      if (v11)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 == -1)
          goto LABEL_10;
        goto LABEL_35;
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        v18 = a2;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#gnssmeas,apc,unexpected qmi apc reference frequency,%{public}d", buf, 8u);
      }
      v13 = sub_1001BFF7C(115, 0);
      LOBYTE(v6) = 0;
      if (v13)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        LODWORD(v16[0]) = 67240192;
        HIDWORD(v16[0]) = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,apc,unexpected qmi apc reference frequency,%{public}d", v16, 8, v16[0]);
        goto LABEL_29;
      }
    }
  }
  else
  {
    v3 = a1 - 1;
    if ((a1 - 1) < 6 && ((0x3Bu >> v3) & 1) != 0)
      return (0x10405010801uLL >> (8 * v3));
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v18 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gnssmeas,apc,unexpected qmi gnss system,%{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    LOBYTE(v6) = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
      {
LABEL_10:
        LODWORD(v16[0]) = 67240192;
        HIDWORD(v16[0]) = a1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,apc,unexpected qmi gnss system,%{public}d", v16, 8, v16[0]);
LABEL_29:
        v14 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "gnss::Band convertQmiSystemAndApcFreqIdToNativeBand(SatSystem, qmi::pds::AntennaPhaseCenterFrequencyId)", "%s\n", v7);
        if (v14 != buf)
          free(v14);
        LOBYTE(v6) = 0;
        return v6;
      }
LABEL_35:
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
      goto LABEL_10;
    }
  }
  return v6;
}

BOOL sub_101772D78(uint64_t a1, _BYTE *a2, int a3, _BYTE *a4)
{
  _BOOL8 result;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  *a4 = *a2;
  if (a3)
  {
    switch(*a2)
    {
      case 1:
      case 3:
      case 5:
      case 6:
      case 7:
      case 0xA:
        a4[1] = *(_BYTE *)(a1 + 56) & 1;
        a4[2] = (~*(_DWORD *)(a1 + 56) & 0xALL) == 0;
        a4[3] = 0;
        goto LABEL_4;
      case 4:
        a4[1] = *(_BYTE *)(a1 + 56) & 1;
        a4[2] = *(_BYTE *)(a1 + 58) & 1;
        a4[3] = (~*(_DWORD *)(a1 + 56) & 0xALL) == 0;
        a4[4] = 0;
        a4[5] = (*(_DWORD *)(a1 + 56) & 0x20000) != 0;
        return 1;
      case 8:
        a4[1] = (~*(_DWORD *)(a1 + 56) & 0xALL) == 0;
        a4[2] = (*(_DWORD *)(a1 + 56) & 0x40000000) != 0;
        a4[3] = *(int *)(a1 + 56) < 0;
LABEL_4:
        a4[4] = (*(_BYTE *)(a1 + 56) & 4) != 0;
        return 1;
      case 9:
        a4[2] = (~*(_DWORD *)(a1 + 56) & 0xALL) == 0;
        a4[7] = (*(_DWORD *)(a1 + 56) & 0x40000000) != 0;
        a4[9] = *(int *)(a1 + 56) < 0;
        a4[10] = (*(_BYTE *)(a1 + 56) & 4) != 0;
        return 1;
      default:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v6 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v7 = *a2;
          *(_DWORD *)buf = 67240192;
          v13 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#gnssmeas,unhandled signal type,%{public}d", buf, 8u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE588);
          v8 = *a2;
          v11[0] = 67240192;
          v11[1] = v8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#gnssmeas,unhandled signal type,%{public}d", v11, 8);
          v10 = (uint8_t *)v9;
          sub_100512490("Generic", 1, 0, 2, "BOOL populateSyncState(const pds::tlv::SvMeasurementAndClockInfo &, const gnss::Band &, const BOOL, gnss::SyncState &)", "%s\n", v9);
          if (v10 != buf)
            free(v10);
          return 0;
        }
        return result;
    }
  }
  return 1;
}

void sub_101773078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;

  *(_QWORD *)a1 = a2;
  v10 = a1 + 40;
  sub_100270E34(a1 + 8, a3);
  sub_100270E34(v10, a4);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 152) = -1;
  _Q0 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 160) = _Q0;
  *(int64x2_t *)(a1 + 176) = _Q0;
  *(int64x2_t *)(a1 + 200) = _Q0;
  *(_WORD *)(a1 + 192) = 0;
  *(int32x2_t *)(a1 + 216) = vdup_n_s32(0x7FC00000u);
  *(_DWORD *)(a1 + 224) = 2143289344;
  *(_QWORD *)(a1 + 232) = 0x8000000000000000;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 240) = _Q0.i64[0];
  *(_QWORD *)(a1 + 248) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 256) = -1082130432;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 424) = _Q0.i64[0];
  *(_QWORD *)(a1 + 432) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 440) = -1082130432;
  *(_QWORD *)(a1 + 448) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = -1082130432;
  *(_WORD *)(a1 + 472) = 0x8000;
  *(_BYTE *)(a1 + 474) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_WORD *)(a1 + 488) = 0x8000;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  *(_WORD *)(a1 + 532) = -1;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_BYTE *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 632) = a7;
  *(_BYTE *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  operator new();
}

void sub_101773440(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  void **v5;
  _QWORD **v6;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  sub_100067A50((uint64_t)(v1 + 92));
  sub_100008848((uint64_t)(v1 + 86), *v6);
  sub_1017055C4(v4 + 76, 0);
  v8 = *v5;
  if (*v5)
  {
    v1[76] = v8;
    operator delete(v8);
  }
  sub_100109508((uint64_t)(v4 + 5));
  sub_101773518(v4);
  v9 = (_QWORD *)v1[8];
  if (v9 == v3)
  {
    v10 = 4;
    v9 = v3;
  }
  else
  {
    if (!v9)
      goto LABEL_8;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_8:
  v11 = (_QWORD *)v1[4];
  if (v11 == v2)
  {
    v12 = 4;
    v11 = v2;
  }
  else
  {
    if (!v11)
      goto LABEL_13;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_13:
  _Unwind_Resume(a1);
}

uint64_t *sub_101773518(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    operator delete();
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    operator delete();
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    operator delete();
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    operator delete();
  v6 = *a1;
  *a1 = 0;
  if (v6)
    operator delete();
  return a1;
}

BOOL sub_1017735DC(uint64_t a1, qmi::MessageBase *a2, BOOL *a3, BOOL *a4)
{
  BOOL v8;
  NSObject *v9;
  _BOOL8 result;
  const char *v11;
  uint8_t *v12;
  unsigned int v13;
  int v14;
  NSObject *v15;
  unsigned int v16;
  NSObject *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  const char *v22;
  int v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  const char *v27;
  NSObject *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  const char *v33;
  NSObject *v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  const char *v39;
  NSObject *v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  unsigned int v50;
  uint8_t buf[4];
  unsigned int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  unsigned int v56;

  BYTE6(v44) = 0;
  sub_10169DDA0(a2, 1u, (_BYTE *)&v44 + 6);
  BYTE4(v44) = 0;
  sub_10169DDA0(a2, 2u, (_BYTE *)&v44 + 4);
  if (BYTE6(v44))
    v8 = BYTE4(v44) == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#gnssmeas,sequencing missing", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      LOWORD(v45) = 0;
      LODWORD(v44) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,sequencing missing", &v45, v44);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::checkMessageSequencing(const pds::gnssMeasurementIndication::Indication &, BOOL &, BOOL &)", "%s\n", v11);
      goto LABEL_51;
    }
    return result;
  }
  v13 = HIBYTE(v44);
  v14 = BYTE5(v44);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE588);
  v15 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v52 = v13;
    v53 = 1024;
    v54 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#gnssmeas,seqNum,%d,maxMessageNum,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v45 = 67109376;
    v46 = v13;
    v47 = 1024;
    v48 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssmeas,seqNum,%d,maxMessageNum,%d", &v45, 14);
    v42 = (uint8_t *)v41;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::checkMessageSequencing(const pds::gnssMeasurementIndication::Indication &, BOOL &, BOOL &)", "%s\n", v41);
    if (v42 != buf)
      free(v42);
  }
  *a3 = v13 == 1;
  v16 = *(unsigned __int8 *)(a1 + 532);
  if (v13 != 1)
  {
    if (v16 == 255 || (v23 = *(unsigned __int8 *)(a1 + 533), v23 == 255))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v28 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v29 = *(unsigned __int8 *)(a1 + 532);
        v30 = *(unsigned __int8 *)(a1 + 533);
        *(_DWORD *)buf = 67240704;
        v52 = v29;
        v53 = 1026;
        v54 = v30;
        v55 = 1026;
        v56 = v13;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#gnssmeas,expected first block,numMessages,%{public}d,lastSeqNum,%{public}d,received,%{public}d", buf, 0x14u);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v31 = *(unsigned __int8 *)(a1 + 532);
        v32 = *(unsigned __int8 *)(a1 + 533);
        v45 = 67240704;
        v46 = v31;
        v47 = 1026;
        v48 = v32;
        v49 = 1026;
        v50 = v13;
        LODWORD(v44) = 20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,expected first block,numMessages,%{public}d,lastSeqNum,%{public}d,received,%{public}d", &v45, v44);
        v12 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::checkMessageSequencing(const pds::gnssMeasurementIndication::Indication &, BOOL &, BOOL &)", "%s\n", v33);
        goto LABEL_51;
      }
      return result;
    }
    if (v13 > v16 || v23 + 1 != v13)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v34 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v35 = *(unsigned __int8 *)(a1 + 532);
        v36 = *(unsigned __int8 *)(a1 + 533);
        *(_DWORD *)buf = 67240704;
        v52 = v13;
        v53 = 1026;
        v54 = v35;
        v55 = 1026;
        v56 = v36;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected sequence number,%{public}d,maxMessage,%{public}d,lastSeqNum,%{public}d", buf, 0x14u);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v37 = *(unsigned __int8 *)(a1 + 532);
        v38 = *(unsigned __int8 *)(a1 + 533);
        v45 = 67240704;
        v46 = v13;
        v47 = 1026;
        v48 = v37;
        v49 = 1026;
        v50 = v38;
        LODWORD(v44) = 20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,unexpected sequence number,%{public}d,maxMessage,%{public}d,lastSeqNum,%{public}d", &v45, v44);
        v12 = (uint8_t *)v39;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::checkMessageSequencing(const pds::gnssMeasurementIndication::Indication &, BOOL &, BOOL &)", "%s\n", v39);
        goto LABEL_51;
      }
      return result;
    }
    if (v16 != v14)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v24 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v25 = *(unsigned __int8 *)(a1 + 532);
        *(_DWORD *)buf = 67240448;
        v52 = v25;
        v53 = 1026;
        v54 = v14;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected max message%{public}d,prev,%{public}d", buf, 0xEu);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v26 = *(unsigned __int8 *)(a1 + 532);
        v45 = 67240448;
        v46 = v26;
        v47 = 1026;
        v48 = v14;
        LODWORD(v44) = 14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,unexpected max message%{public}d,prev,%{public}d", &v45, v44);
        v12 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::checkMessageSequencing(const pds::gnssMeasurementIndication::Indication &, BOOL &, BOOL &)", "%s\n", v27);
        goto LABEL_51;
      }
      return result;
    }
LABEL_56:
    *a4 = v13 == v14;
    if (v13 == v14)
      *(_WORD *)(a1 + 532) = -1;
    else
      *(_BYTE *)(a1 + 533) = v13;
    return 1;
  }
  if (v16 != 255 || *(unsigned __int8 *)(a1 + 533) != 255)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v18 = *(unsigned __int8 *)(a1 + 532);
      v19 = *(unsigned __int8 *)(a1 + 533);
      *(_DWORD *)buf = 67240448;
      v52 = v18;
      v53 = 1026;
      v54 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected first block,num meas,%{public}d,last seq,%{public}d", buf, 0xEu);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v20 = *(unsigned __int8 *)(a1 + 532);
      v21 = *(unsigned __int8 *)(a1 + 533);
      v45 = 67240448;
      v46 = v20;
      v47 = 1026;
      v48 = v21;
      LODWORD(v44) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,unexpected first block,num meas,%{public}d,last seq,%{public}d", &v45, v44);
      v12 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::checkMessageSequencing(const pds::gnssMeasurementIndication::Indication &, BOOL &, BOOL &)", "%s\n", v22);
LABEL_51:
      if (v12 != buf)
        free(v12);
      return 0;
    }
    return result;
  }
  if (v14)
  {
    *(_BYTE *)(a1 + 532) = v14;
    goto LABEL_56;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE588);
  v40 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#gnssmeas maxMessageNum expectedly zero\n", buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    LOWORD(v45) = 0;
    LODWORD(v44) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas maxMessageNum expectedly zero\n", &v45, v44);
    v12 = (uint8_t *)v43;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::checkMessageSequencing(const pds::gnssMeasurementIndication::Indication &, BOOL &, BOOL &)", "%s\n", v43);
    goto LABEL_51;
  }
  return result;
}

BOOL sub_101774044(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  v2 = a2 - 1;
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rxClockConv,missing rx clock,%{public}llu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v8 = 134349056;
      v9 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#rxClockConv,missing rx clock,%{public}llu", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "BOOL ReceiverClockConversion::isRxClockValid(const uint64_t) const", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return v2 < 0xFFFFFFFFFFFFFFFELL;
}

double sub_101774200(double *a1, unint64_t a2, double a3)
{
  sub_10177BA10((uint64_t)a1, a2);
  sub_10177BC04((uint64_t)a1, a2, a3);
  return *a1 + (double)a2 * 0.000000001;
}

void sub_101774268(_QWORD *a1, qmi::MessageBase *a2)
{
  unsigned __int8 **v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  __int128 v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  int32x2_t *v22;
  unint64_t v23;
  int32x2_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  int32x2_t *v30;
  char *v31;
  unsigned __int8 *v32;
  __int128 v33;
  float v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  float *v44;
  char *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  __int128 v48;
  float v49;
  double v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  float *v59;
  char *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  __int128 v63;
  double v64;
  float v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  float *v74;
  char *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  __int128 v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  int32x2_t *v82;
  unint64_t v83;
  int32x2_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  int32x2_t *v90;
  char *v91;
  unsigned __int8 *v92;
  __int128 v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  int32x2_t *v97;
  unint64_t v98;
  int32x2_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  int32x2_t *v105;
  char *v106;
  unsigned __int8 *v107;
  __int128 v108;
  float v109;
  unsigned __int8 *v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  int32x2_t *v114;
  unint64_t v115;
  int32x2_t *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  int32x2_t *v122;
  char *v123;
  unsigned __int8 *v124;
  __int128 v125;
  float v126;
  unsigned __int8 *v127;
  uint64_t v128;
  uint64_t v129;
  int32x2_t *v130;
  unint64_t v131;
  int32x2_t *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  int32x2_t *v138;
  char *v139;
  unsigned __int8 *v140;
  __int128 v141;
  float v142;
  double v143;
  float v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  float *v153;
  char *v154;
  unsigned __int8 *v155;
  unsigned __int8 *v156;
  __int128 v157;
  char v158[4];
  char v159;
  float v160;
  float v161;
  char v162[4];
  char v163;
  float v164;
  float v165;
  char v166[4];
  char v167;
  float v168;
  float v169;
  char v170[4];
  char v171;
  float v172;
  float v173;
  char v174[4];
  char v175;
  float v176;
  float v177;
  char v178[4];
  char v179;
  float v180;
  float v181;
  char v182[4];
  char v183;
  float v184;
  float v185;
  char v186[4];
  char v187;
  float v188;
  float v189;
  char v190[4];
  char v191;
  float v192;
  float v193;

  v4 = (unsigned __int8 **)(a1 + 39);
  v5 = (uint64_t)(a1 + 41);
  v6 = a1[40];
  v7 = a1[41];
  if (v6 >= v7)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)*v4) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*v4) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)sub_1002596A8((uint64_t)(a1 + 41), v12);
    else
      v13 = 0;
    v14 = &v13[24 * v9];
    v15 = &v13[24 * v12];
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0x7FC0000000000000;
    v14[16] = 1;
    v8 = v14 + 24;
    v17 = (unsigned __int8 *)a1[39];
    v16 = (unsigned __int8 *)a1[40];
    if (v16 != v17)
    {
      do
      {
        v18 = *(_OWORD *)(v16 - 24);
        *(v14 - 8) = *(v16 - 8);
        *(_OWORD *)(v14 - 24) = v18;
        v14 -= 24;
        v16 -= 24;
      }
      while (v16 != v17);
      v16 = *v4;
    }
    a1[39] = v14;
    a1[40] = v8;
    a1[41] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0x7FC0000000000000;
    *(_BYTE *)(v6 + 16) = 1;
    v8 = (char *)(v6 + 24);
  }
  a1[40] = v8;
  v190[0] = 0;
  v19 = sub_10177D228(a2, 0x1Fu, v190);
  if (v190[0] && (v191 & 1) != 0)
  {
    v22 = (int32x2_t *)a1[40];
    v23 = a1[41];
    if ((unint64_t)v22 >= v23)
    {
      v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)*v4) >> 3);
      v26 = v25 + 1;
      if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)*v4) >> 3);
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x555555555555555)
        v28 = 0xAAAAAAAAAAAAAAALL;
      else
        v28 = v26;
      v29 = (char *)sub_1002596A8(v5, v28);
      v30 = (int32x2_t *)&v29[24 * v25];
      v31 = &v29[24 * v20];
      v30[2] = 0;
      *v30 = (int32x2_t)0x7FF8000000000000;
      v30[1] = vdup_n_s32(0x7FC00000u);
      v24 = v30 + 3;
      v32 = (unsigned __int8 *)a1[39];
      v19 = (unsigned __int8 *)a1[40];
      if (v19 != v32)
      {
        do
        {
          v33 = *(_OWORD *)(v19 - 24);
          v30[-1].i8[0] = *(v19 - 8);
          *(_OWORD *)v30[-3].i8 = v33;
          v30 -= 3;
          v19 -= 24;
        }
        while (v19 != v32);
        v19 = *v4;
      }
      a1[39] = v30;
      a1[40] = v24;
      a1[41] = v31;
      if (v19)
        operator delete(v19);
    }
    else
    {
      v22[2] = 0;
      *v22 = (int32x2_t)0x7FF8000000000000;
      v22[1] = vdup_n_s32(0x7FC00000u);
      v24 = v22 + 3;
    }
    a1[40] = v24;
    v24[-1].i8[0] = 4;
    if (!v190[0])
      sub_1018ED2D4((uint64_t)v19, v20, v21);
    *(double *)&v24[-3] = v192 * 1000000.0;
    if ((v191 & 2) != 0)
      *(float *)v24[-2].i32 = v193 * 1000000.0;
  }
  v186[0] = 0;
  sub_10177D228(a2, 0x21u, v186);
  if (v186[0] && (v187 & 1) != 0)
  {
    v35 = v188 * 1000000.0;
    if ((v187 & 2) != 0)
      v34 = v189 * 1000000.0;
    else
      v34 = NAN;
    v37 = a1[40];
    v36 = a1[41];
    if (v37 >= v36)
    {
      v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (_QWORD)*v4) >> 3);
      v40 = v39 + 1;
      if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)*v4) >> 3);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 >= 0x555555555555555)
        v42 = 0xAAAAAAAAAAAAAAALL;
      else
        v42 = v40;
      if (v42)
        v43 = (char *)sub_1002596A8(v5, v42);
      else
        v43 = 0;
      v44 = (float *)&v43[24 * v39];
      v45 = &v43[24 * v42];
      *(double *)v44 = v35;
      v44[2] = v34;
      v44[3] = NAN;
      *((_BYTE *)v44 + 16) = 8;
      v38 = (char *)(v44 + 6);
      v47 = (unsigned __int8 *)a1[39];
      v46 = (unsigned __int8 *)a1[40];
      if (v46 != v47)
      {
        do
        {
          v48 = *(_OWORD *)(v46 - 24);
          *((_BYTE *)v44 - 8) = *(v46 - 8);
          *(_OWORD *)(v44 - 6) = v48;
          v44 -= 6;
          v46 -= 24;
        }
        while (v46 != v47);
        v46 = *v4;
      }
      a1[39] = v44;
      a1[40] = v38;
      a1[41] = v45;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *(double *)v37 = v35;
      *(float *)(v37 + 8) = v34;
      *(_DWORD *)(v37 + 12) = 2143289344;
      *(_BYTE *)(v37 + 16) = 8;
      v38 = (char *)(v37 + 24);
    }
    a1[40] = v38;
  }
  else
  {
    v34 = NAN;
    v35 = NAN;
  }
  v182[0] = 0;
  sub_10177D228(a2, 0x20u, v182);
  if (v182[0] && (v183 & 1) != 0)
  {
    v50 = v184 * 1000000.0;
    if ((v183 & 2) != 0)
      v49 = v185 * 1000000.0;
    else
      v49 = NAN;
    v52 = a1[40];
    v51 = a1[41];
    if (v52 >= v51)
    {
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (_QWORD)*v4) >> 3);
      v55 = v54 + 1;
      if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - (_QWORD)*v4) >> 3);
      if (2 * v56 > v55)
        v55 = 2 * v56;
      if (v56 >= 0x555555555555555)
        v57 = 0xAAAAAAAAAAAAAAALL;
      else
        v57 = v55;
      if (v57)
        v58 = (char *)sub_1002596A8(v5, v57);
      else
        v58 = 0;
      v59 = (float *)&v58[24 * v54];
      v60 = &v58[24 * v57];
      *(double *)v59 = v50;
      v59[2] = v49;
      v59[3] = NAN;
      *((_BYTE *)v59 + 16) = 5;
      v53 = (char *)(v59 + 6);
      v62 = (unsigned __int8 *)a1[39];
      v61 = (unsigned __int8 *)a1[40];
      if (v61 != v62)
      {
        do
        {
          v63 = *(_OWORD *)(v61 - 24);
          *((_BYTE *)v59 - 8) = *(v61 - 8);
          *(_OWORD *)(v59 - 6) = v63;
          v59 -= 6;
          v61 -= 24;
        }
        while (v61 != v62);
        v61 = *v4;
      }
      a1[39] = v59;
      a1[40] = v53;
      a1[41] = v60;
      if (v61)
        operator delete(v61);
    }
    else
    {
      *(double *)v52 = v50;
      *(float *)(v52 + 8) = v49;
      *(_DWORD *)(v52 + 12) = 2143289344;
      *(_BYTE *)(v52 + 16) = 5;
      v53 = (char *)(v52 + 24);
    }
    a1[40] = v53;
  }
  else
  {
    v49 = NAN;
    v50 = NAN;
  }
  v178[0] = 0;
  sub_10177D228(a2, 0x31u, v178);
  if (v178[0] && (v179 & 1) != 0)
  {
    v64 = v180 * 1000000.0;
    if ((v179 & 2) != 0)
      v65 = v181 * 1000000.0;
    else
      v65 = NAN;
    v67 = a1[40];
    v66 = a1[41];
    if (v67 >= v66)
    {
      v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - (_QWORD)*v4) >> 3);
      v70 = v69 + 1;
      if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (_QWORD)*v4) >> 3);
      if (2 * v71 > v70)
        v70 = 2 * v71;
      if (v71 >= 0x555555555555555)
        v72 = 0xAAAAAAAAAAAAAAALL;
      else
        v72 = v70;
      if (v72)
        v73 = (char *)sub_1002596A8(v5, v72);
      else
        v73 = 0;
      v74 = (float *)&v73[24 * v69];
      v75 = &v73[24 * v72];
      *(double *)v74 = v64;
      v74[2] = v65;
      v74[3] = NAN;
      *((_BYTE *)v74 + 16) = 6;
      v68 = (char *)(v74 + 6);
      v77 = (unsigned __int8 *)a1[39];
      v76 = (unsigned __int8 *)a1[40];
      if (v76 != v77)
      {
        do
        {
          v78 = *(_OWORD *)(v76 - 24);
          *((_BYTE *)v74 - 8) = *(v76 - 8);
          *(_OWORD *)(v74 - 6) = v78;
          v74 -= 6;
          v76 -= 24;
        }
        while (v76 != v77);
        v76 = *v4;
      }
      a1[39] = v74;
      a1[40] = v68;
      a1[41] = v75;
      if (v76)
        operator delete(v76);
    }
    else
    {
      *(double *)v67 = v64;
      *(float *)(v67 + 8) = v65;
      *(_DWORD *)(v67 + 12) = 2143289344;
      *(_BYTE *)(v67 + 16) = 6;
      v68 = (char *)(v67 + 24);
    }
    a1[40] = v68;
  }
  else
  {
    v64 = NAN;
    v65 = NAN;
  }
  v174[0] = 0;
  v79 = sub_10177D228(a2, 0x26u, v174);
  if (v174[0] && (v175 & 1) != 0)
  {
    v82 = (int32x2_t *)a1[40];
    v83 = a1[41];
    if ((unint64_t)v82 >= v83)
    {
      v85 = 0xAAAAAAAAAAAAAAABLL * (((char *)v82 - (char *)*v4) >> 3);
      v86 = v85 + 1;
      if (v85 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - (_QWORD)*v4) >> 3);
      if (2 * v87 > v86)
        v86 = 2 * v87;
      if (v87 >= 0x555555555555555)
        v88 = 0xAAAAAAAAAAAAAAALL;
      else
        v88 = v86;
      v89 = (char *)sub_1002596A8(v5, v88);
      v90 = (int32x2_t *)&v89[24 * v85];
      v91 = &v89[24 * v80];
      v90[2] = 0;
      *v90 = (int32x2_t)0x7FF8000000000000;
      v90[1] = vdup_n_s32(0x7FC00000u);
      v84 = v90 + 3;
      v92 = (unsigned __int8 *)a1[39];
      v79 = (unsigned __int8 *)a1[40];
      if (v79 != v92)
      {
        do
        {
          v93 = *(_OWORD *)(v79 - 24);
          v90[-1].i8[0] = *(v79 - 8);
          *(_OWORD *)v90[-3].i8 = v93;
          v90 -= 3;
          v79 -= 24;
        }
        while (v79 != v92);
        v79 = *v4;
      }
      a1[39] = v90;
      a1[40] = v84;
      a1[41] = v91;
      if (v79)
        operator delete(v79);
    }
    else
    {
      v82[2] = 0;
      *v82 = (int32x2_t)0x7FF8000000000000;
      v82[1] = vdup_n_s32(0x7FC00000u);
      v84 = v82 + 3;
    }
    a1[40] = v84;
    v84[-1].i8[0] = 3;
    if (!v174[0])
      sub_1018ED2D4((uint64_t)v79, v80, v81);
    *(double *)&v84[-3] = v176 * 1000000.0;
    if ((v175 & 2) != 0)
      *(float *)v84[-2].i32 = v177 * 1000000.0;
  }
  v170[0] = 0;
  v94 = sub_10177D228(a2, 0x2Au, v170);
  if (v170[0] && (v171 & 1) != 0 && (*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v97 = (int32x2_t *)a1[40];
    v98 = a1[41];
    if ((unint64_t)v97 >= v98)
    {
      v100 = 0xAAAAAAAAAAAAAAABLL * (((char *)v97 - (char *)*v4) >> 3);
      v101 = v100 + 1;
      if (v100 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (_QWORD)*v4) >> 3);
      if (2 * v102 > v101)
        v101 = 2 * v102;
      if (v102 >= 0x555555555555555)
        v103 = 0xAAAAAAAAAAAAAAALL;
      else
        v103 = v101;
      v104 = (char *)sub_1002596A8(v5, v103);
      v105 = (int32x2_t *)&v104[24 * v100];
      v106 = &v104[24 * v95];
      v105[2] = 0;
      *v105 = (int32x2_t)0x7FF8000000000000;
      v105[1] = vdup_n_s32(0x7FC00000u);
      v99 = v105 + 3;
      v107 = (unsigned __int8 *)a1[39];
      v94 = (unsigned __int8 *)a1[40];
      if (v94 != v107)
      {
        do
        {
          v108 = *(_OWORD *)(v94 - 24);
          v105[-1].i8[0] = *(v94 - 8);
          *(_OWORD *)v105[-3].i8 = v108;
          v105 -= 3;
          v94 -= 24;
        }
        while (v94 != v107);
        v94 = *v4;
      }
      a1[39] = v105;
      a1[40] = v99;
      a1[41] = v106;
      if (v94)
        operator delete(v94);
    }
    else
    {
      v97[2] = 0;
      *v97 = (int32x2_t)0x7FF8000000000000;
      v97[1] = vdup_n_s32(0x7FC00000u);
      v99 = v97 + 3;
    }
    a1[40] = v99;
    v99[-1].i8[0] = 9;
    if (!v170[0])
      sub_1018ED2D4((uint64_t)v94, v95, v96);
    *(double *)&v99[-3] = v35 + v172 * 1000000.0;
    if ((v171 & 2) != 0 && (LODWORD(v34) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v109 = hypot(v173 * 1000000.0, v34);
      *(float *)v99[-2].i32 = v109;
    }
  }
  v166[0] = 0;
  sub_10177D228(a2, 0x28u, v166);
  v110 = (unsigned __int8 *)sub_10176E3B4();
  if (v166[0])
    v113 = (char)v110;
  else
    v113 = 1;
  if ((v113 & 1) == 0 && (v167 & 1) != 0 && (*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v114 = (int32x2_t *)a1[40];
    v115 = a1[41];
    if ((unint64_t)v114 >= v115)
    {
      v117 = 0xAAAAAAAAAAAAAAABLL * (((char *)v114 - (char *)*v4) >> 3);
      v118 = v117 + 1;
      if (v117 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v115 - (_QWORD)*v4) >> 3);
      if (2 * v119 > v118)
        v118 = 2 * v119;
      if (v119 >= 0x555555555555555)
        v120 = 0xAAAAAAAAAAAAAAALL;
      else
        v120 = v118;
      v121 = (char *)sub_1002596A8(v5, v120);
      v122 = (int32x2_t *)&v121[24 * v117];
      v123 = &v121[24 * v111];
      v122[2] = 0;
      *v122 = (int32x2_t)0x7FF8000000000000;
      v122[1] = vdup_n_s32(0x7FC00000u);
      v116 = v122 + 3;
      v124 = (unsigned __int8 *)a1[39];
      v110 = (unsigned __int8 *)a1[40];
      if (v110 != v124)
      {
        do
        {
          v125 = *(_OWORD *)(v110 - 24);
          v122[-1].i8[0] = *(v110 - 8);
          *(_OWORD *)v122[-3].i8 = v125;
          v122 -= 3;
          v110 -= 24;
        }
        while (v110 != v124);
        v110 = *v4;
      }
      a1[39] = v122;
      a1[40] = v116;
      a1[41] = v123;
      if (v110)
        operator delete(v110);
    }
    else
    {
      v114[2] = 0;
      *v114 = (int32x2_t)0x7FF8000000000000;
      v114[1] = vdup_n_s32(0x7FC00000u);
      v116 = v114 + 3;
    }
    a1[40] = v116;
    v116[-1].i8[0] = 7;
    if (!v166[0])
      sub_1018ED2D4((uint64_t)v110, v111, v112);
    *(double *)&v116[-3] = v50 + v168 * 1000000.0;
    if ((v167 & 2) != 0 && (LODWORD(v49) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v126 = hypot(v169 * 1000000.0, v49);
      *(float *)v116[-2].i32 = v126;
    }
  }
  v162[0] = 0;
  v127 = sub_10177D228(a2, 0x32u, v162);
  if (v162[0] && (v163 & 1) != 0 && (*(_QWORD *)&v64 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v130 = (int32x2_t *)a1[40];
    v131 = a1[41];
    if ((unint64_t)v130 >= v131)
    {
      v133 = 0xAAAAAAAAAAAAAAABLL * (((char *)v130 - (char *)*v4) >> 3);
      v134 = v133 + 1;
      if (v133 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v131 - (_QWORD)*v4) >> 3);
      if (2 * v135 > v134)
        v134 = 2 * v135;
      if (v135 >= 0x555555555555555)
        v136 = 0xAAAAAAAAAAAAAAALL;
      else
        v136 = v134;
      v137 = (char *)sub_1002596A8(v5, v136);
      v138 = (int32x2_t *)&v137[24 * v133];
      v139 = &v137[24 * v128];
      v138[2] = 0;
      *v138 = (int32x2_t)0x7FF8000000000000;
      v138[1] = vdup_n_s32(0x7FC00000u);
      v132 = v138 + 3;
      v140 = (unsigned __int8 *)a1[39];
      v127 = (unsigned __int8 *)a1[40];
      if (v127 != v140)
      {
        do
        {
          v141 = *(_OWORD *)(v127 - 24);
          v138[-1].i8[0] = *(v127 - 8);
          *(_OWORD *)v138[-3].i8 = v141;
          v138 -= 3;
          v127 -= 24;
        }
        while (v127 != v140);
        v127 = *v4;
      }
      a1[39] = v138;
      a1[40] = v132;
      a1[41] = v139;
      if (v127)
        operator delete(v127);
    }
    else
    {
      v130[2] = 0;
      *v130 = (int32x2_t)0x7FF8000000000000;
      v130[1] = vdup_n_s32(0x7FC00000u);
      v132 = v130 + 3;
    }
    a1[40] = v132;
    v132[-1].i8[0] = 7;
    if (!v162[0])
      sub_1018ED2D4((uint64_t)v127, v128, v129);
    *(double *)&v132[-3] = v64 + v164 * 1000000.0;
    if ((v163 & 2) != 0 && (LODWORD(v65) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v142 = hypot(v165 * 1000000.0, v65);
      *(float *)v132[-2].i32 = v142;
    }
  }
  v158[0] = 0;
  sub_10177D228(a2, 0x33u, v158);
  if (v158[0] && (v159 & 1) != 0)
  {
    v143 = v160 * 1000000.0;
    if ((v159 & 2) != 0)
      v144 = v161 * 1000000.0;
    else
      v144 = NAN;
    v146 = a1[40];
    v145 = a1[41];
    if (v146 >= v145)
    {
      v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - (_QWORD)*v4) >> 3);
      v149 = v148 + 1;
      if (v148 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145 - (_QWORD)*v4) >> 3);
      if (2 * v150 > v149)
        v149 = 2 * v150;
      if (v150 >= 0x555555555555555)
        v151 = 0xAAAAAAAAAAAAAAALL;
      else
        v151 = v149;
      if (v151)
        v152 = (char *)sub_1002596A8(v5, v151);
      else
        v152 = 0;
      v153 = (float *)&v152[24 * v148];
      v154 = &v152[24 * v151];
      *(double *)v153 = v143;
      v153[2] = v144;
      v153[3] = NAN;
      *((_BYTE *)v153 + 16) = 10;
      v147 = (char *)(v153 + 6);
      v156 = (unsigned __int8 *)a1[39];
      v155 = (unsigned __int8 *)a1[40];
      if (v155 != v156)
      {
        do
        {
          v157 = *(_OWORD *)(v155 - 24);
          *((_BYTE *)v153 - 8) = *(v155 - 8);
          *(_OWORD *)(v153 - 6) = v157;
          v153 -= 6;
          v155 -= 24;
        }
        while (v155 != v156);
        v155 = *v4;
      }
      a1[39] = v153;
      a1[40] = v147;
      a1[41] = v154;
      if (v155)
        operator delete(v155);
    }
    else
    {
      *(double *)v146 = v143;
      *(float *)(v146 + 8) = v144;
      *(_DWORD *)(v146 + 12) = 2143289344;
      *(_BYTE *)(v146 + 16) = 10;
      v147 = (char *)(v146 + 24);
    }
    a1[40] = v147;
  }
}

void sub_101775110(qmi::MessageBase *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0;
  sub_10177C2D8(a1, 0x1Du, (uint64_t)a2);
}

void sub_10177513C(_Unwind_Exception *exception_object)
{
  _BYTE *v1;

  if (*v1)
    sub_1016A0804((uint64_t)v1);
  _Unwind_Resume(exception_object);
}

void sub_101775158()
{
  operator new();
}

_DWORD *sub_1017751EC(_DWORD *result, uint64_t a2)
{
  float v2;
  int v3;
  _DWORD *v4;

  v2 = *(float *)(a2 + 168);
  v3 = *(unsigned __int8 *)(a2 + 8);
  if ((v3 - 5) < 2)
  {
    if (v2 > 25.0)
      ++result[2];
    v4 = result + 5;
  }
  else if (v3 == 8)
  {
    if (v2 > 25.0)
      ++result[1];
    v4 = result + 4;
  }
  else
  {
    if (v3 != 1)
      return result;
    if (v2 > 25.0)
      ++*result;
    v4 = result + 3;
  }
  ++*v4;
  return result;
}

uint64_t sub_10177527C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v32[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - *a1) >> 4);
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) > 0x1745D1745D1745DLL)
      sub_100259694();
    v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0xBA2E8BA2E8BA2ELL)
      v20 = 0x1745D1745D1745DLL;
    else
      v20 = v18;
    v32[4] = v4;
    if (v20)
      v21 = (char *)sub_101035B94(v4, v20);
    else
      v21 = 0;
    v22 = &v21[176 * v17];
    v32[0] = v21;
    v32[1] = v22;
    v32[3] = &v21[176 * v20];
    v23 = *(_OWORD *)(a2 + 80);
    v25 = *(_OWORD *)(a2 + 32);
    v24 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v22 + 4) = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v22 + 5) = v23;
    *((_OWORD *)v22 + 2) = v25;
    *((_OWORD *)v22 + 3) = v24;
    v27 = *(_OWORD *)(a2 + 112);
    v26 = *(_OWORD *)(a2 + 128);
    v28 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v22 + 137) = *(_OWORD *)(a2 + 137);
    *((_OWORD *)v22 + 7) = v27;
    *((_OWORD *)v22 + 8) = v26;
    *((_OWORD *)v22 + 6) = v28;
    v29 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v22 = *(_OWORD *)a2;
    *((_OWORD *)v22 + 1) = v29;
    v30 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    *((_QWORD *)v22 + 20) = v30;
    LODWORD(v30) = *(_DWORD *)(a2 + 168);
    *((_WORD *)v22 + 86) = *(_WORD *)(a2 + 172);
    *((_DWORD *)v22 + 42) = v30;
    v32[2] = v22 + 176;
    sub_1017415F4(a1, v32);
    v16 = a1[1];
    sub_1017417C4((uint64_t)v32);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    v9 = *(_OWORD *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 48);
    v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v7 + 80) = v11;
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = v10;
    v12 = *(_OWORD *)(a2 + 96);
    v13 = *(_OWORD *)(a2 + 112);
    v14 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v7 + 137) = *(_OWORD *)(a2 + 137);
    *(_OWORD *)(v7 + 112) = v13;
    *(_OWORD *)(v7 + 128) = v14;
    *(_OWORD *)(v7 + 96) = v12;
    v15 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(v7 + 160) = v15;
    LODWORD(v15) = *(_DWORD *)(a2 + 168);
    *(_WORD *)(v7 + 172) = *(_WORD *)(a2 + 172);
    *(_DWORD *)(v7 + 168) = v15;
    v16 = v7 + 176;
    a1[1] = v7 + 176;
  }
  a1[1] = v16;
  return v16 - 176;
}

void sub_101775424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1017417C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101775438(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(__int128 *)((char *)a2 + 104);
  v7 = *(__int128 *)((char *)a2 + 120);
  v8 = *(__int128 *)((char *)a2 + 136);
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v6;
  v9 = *(__int128 *)((char *)a2 + 40);
  v10 = *(__int128 *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  *(_OWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 40) = v9;
  sub_10177BE7C((void **)(a1 + 152));
  *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 20) = 0;
  *((_QWORD *)a2 + 21) = 0;
  sub_10177BEB4((_QWORD *)(a1 + 176));
  *(_OWORD *)(a1 + 176) = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  *((_QWORD *)a2 + 24) = 0;
  sub_100006898(a1 + 200, (__n128 *)((char *)a2 + 200));
  v11 = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = 0;
  v12 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v11;
  if (v12)
    operator delete();
  v13 = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = 0;
  v14 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v13;
  if (v14)
    operator delete();
  v15 = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = 0;
  v16 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v15;
  if (v16)
    operator delete();
  v17 = *((_QWORD *)a2 + 31);
  *((_QWORD *)a2 + 31) = 0;
  v18 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v17;
  if (v18)
    operator delete();
  v19 = *((_QWORD *)a2 + 32);
  *((_QWORD *)a2 + 32) = 0;
  v20 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v19;
  if (v20)
    operator delete();
  v21 = *((_QWORD *)a2 + 33);
  *((_QWORD *)a2 + 33) = 0;
  v22 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v21;
  if (v22)
    operator delete();
  sub_100006898(a1 + 272, (__n128 *)a2 + 17);
  return a1;
}

uint64_t sub_1017755EC(int *a1)
{
  int v2;
  uint64_t result;
  NSObject *v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  int v33;

  if (a1[4] || *a1 < 5 || a1[2] < 3)
    a1[7] = 0;
  else
    ++a1[7];
  if (a1[3] || a1[1] < 3 || a1[2] < 3)
    a1[6] = 0;
  else
    ++a1[6];
  if (a1[5] || *a1 < 5 || a1[1] <= 2)
  {
    result = 0;
    a1[8] = 0;
  }
  else
  {
    v2 = a1[8];
    a1[8] = v2 + 1;
    if (v2 < 59)
    {
      result = 0;
    }
    else
    {
      result = sub_10176E3B4();
      if ((_DWORD)result)
      {
        a1[8] = 0;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v4 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          v5 = *a1;
          v6 = a1[1];
          *(_DWORD *)buf = 67240448;
          v31 = v5;
          v32 = 1026;
          v33 = v6;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#gnssmeas,detected BeiDou tracking issue,strongGps,%{public}d,strongGal,%{public}d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE588);
          v21 = *a1;
          v22 = a1[1];
          v26 = 67240448;
          v27 = v21;
          v28 = 1026;
          v29 = v22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#gnssmeas,detected BeiDou tracking issue,strongGps,%{public}d,strongGal,%{public}d", &v26, 14);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 0, "CLEurekaMeasurementProcessor::IssueMonitor::Detection CLEurekaMeasurementProcessor::IssueMonitor::detectIssue()", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
        result = 3;
      }
    }
  }
  if (a1[7] > 59)
  {
    a1[7] = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = *a1;
      v9 = a1[2];
      *(_DWORD *)buf = 67240448;
      v31 = v8;
      v32 = 1026;
      v33 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#gnssmeas,detected Galileo tracking issue,strongGps,%{public}d,strongBds,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v13 = *a1;
      v14 = a1[2];
      v26 = 67240448;
      v27 = v13;
      v28 = 1026;
      v29 = v14;
      LODWORD(v25) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#gnssmeas,detected Galileo tracking issue,strongGps,%{public}d,strongBds,%{public}d", &v26, v25);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "CLEurekaMeasurementProcessor::IssueMonitor::Detection CLEurekaMeasurementProcessor::IssueMonitor::detectIssue()", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    result = 2;
  }
  if (a1[6] >= 60)
  {
    a1[6] = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v11 = a1[1];
      v12 = a1[2];
      *(_DWORD *)buf = 67240448;
      v31 = v11;
      v32 = 1026;
      v33 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "#gnssmeas,detected GPS tracking issue,strongGal,%{public}d,strongBds,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v17 = a1[1];
      v18 = a1[2];
      v26 = 67240448;
      v27 = v17;
      v28 = 1026;
      v29 = v18;
      LODWORD(v25) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#gnssmeas,detected GPS tracking issue,strongGal,%{public}d,strongBds,%{public}d", &v26, v25);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "CLEurekaMeasurementProcessor::IssueMonitor::Detection CLEurekaMeasurementProcessor::IssueMonitor::detectIssue()", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    result = 1;
  }
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  return result;
}

void sub_101775B7C(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  char v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  NSObject *v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  const char *v37;
  NSObject *v38;
  int v39;
  int v40;
  const char *v41;
  NSObject *v42;
  const char *v43;
  double v44;
  int v45;
  NSObject *v46;
  uint64_t v47;
  const char *v48;
  uint8_t *v49;
  NSObject *v50;
  uint64_t v51;
  const char *v52;
  uint8_t *v53;
  NSObject *v54;
  uint64_t v55;
  const char *v56;
  NSObject *v57;
  uint64_t v58;
  const char *v59;
  uint8_t *v60;
  NSObject *v61;
  uint64_t v62;
  const char *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  int v76;
  int v77;
  int v78;
  const char *v79;
  uint8_t *v80;
  double v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  double v85[5];
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  int v93;
  float v94;
  int v95;
  float v96;
  int v97;
  float v98;
  char v99[4];
  float v100;
  char v101[4];
  float v102;
  char v103[4];
  float v104;
  char v105[4];
  float v106;
  char v107[4];
  float v108;
  char v109[4];
  float v110;
  char v111[4];
  char v112[4];
  char v113[2];
  unsigned __int16 v114;
  int v115;
  _BYTE v116[18];
  uint64_t v117;
  _BYTE v118[32];
  _BYTE v119[48];
  _BYTE v120[20];
  __int16 v121;
  _BYTE v122[10];
  double v123;
  _BYTE v124[10];
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  char v135[8];
  uint8_t buf[4];
  _BYTE v137[24];
  _BYTE v138[10];
  __int16 v139;
  double v140;
  __int16 v141;
  double v142;
  __int16 v143;
  double v144;
  __int16 v145;
  double v146;
  __int16 v147;
  double v148;
  __int16 v149;
  double v150;
  __int16 v151;
  double v152;
  __int16 v153;
  double v154;
  __int16 v155;
  double v156;
  __int16 v157;
  double v158;
  __int16 v159;
  double v160;
  __int16 v161;
  double v162;
  __int16 v163;
  int v164;
  __int16 v165;
  int v166;
  __int16 v167;
  int v168;
  unsigned __int8 v169[20];
  unsigned __int8 v170[80];
  char v171[32];
  char v172[8];
  uint64_t v173;
  char v174[8];
  uint64_t v175;
  char v176[8];
  double v177;

  v113[0] = 0;
  sub_101711850(a2, 1u, (uint64_t)v113);
  v176[0] = 0;
  sub_101711680(a2, 2u, (uint64_t)v176);
  v174[0] = 0;
  sub_10169DD40(a2, 3u, (uint64_t)v174);
  v172[0] = 0;
  sub_10169DD40(a2, 4u, (uint64_t)v172);
  v171[0] = 0;
  sub_10177D2C0(a2, 0x10u, v171);
  v170[0] = 0;
  sub_10177D340(a2, 0x11u, v170);
  v169[0] = 0;
  sub_10177D504(a2, 0x12u, v169);
  if (!v174[0])
    goto LABEL_76;
  if (!v175 || (v175 & 4) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v31 = qword_1022A0078;
    v32 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT);
    if (v32)
    {
      if (!v174[0])
        sub_1018ED2D4(v32, v33, v34);
      if (v113[0])
        v35 = v114;
      else
        v35 = -1;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v137 = v35;
      *(_WORD *)&v137[4] = 2050;
      *(_QWORD *)&v137[6] = v175;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#gnssmeas,#poly,ignoring indication with delete flag,svid,%{public}d,flags_validity,%{public}llu", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      if (!v174[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      if (v113[0])
        v36 = v114;
      else
        v36 = -1;
      LODWORD(v117) = 67240448;
      HIDWORD(v117) = v36;
      *(_WORD *)v118 = 2050;
      *(_QWORD *)&v118[2] = v175;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,#poly,ignoring indication with delete flag,svid,%{public}d,flags_validity,%{public}llu", &v117, 18);
      v30 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v37);
      goto LABEL_126;
    }
    return;
  }
  if (v172[0] && (v175 & 1) != 0)
  {
    v112[0] = 0;
    sub_10170B710(a2, 0x17u, (uint64_t)v112);
    v111[0] = 0;
    sub_10170B710(a2, 0x19u, (uint64_t)v111);
    if (v112[0] && v111[0])
    {
      v135[0] = 0;
      sub_10169DD40(a2, 0x1Du, (uint64_t)v135);
      v109[0] = 0;
      sub_10170B710(a2, 0x1Eu, (uint64_t)v109);
      v107[0] = 0;
      sub_10170B710(a2, 0x1Fu, (uint64_t)v107);
      v105[0] = 0;
      sub_10170B710(a2, 0x20u, (uint64_t)v105);
      v103[0] = 0;
      sub_10170B710(a2, 0x21u, (uint64_t)v103);
      v101[0] = 0;
      sub_10170B710(a2, 0x22u, (uint64_t)v101);
      v99[0] = 0;
      sub_10170B710(a2, 0x24u, (uint64_t)v99);
      LOBYTE(v97) = 0;
      sub_10170B710(a2, 0x2Eu, (uint64_t)&v97);
      LOBYTE(v95) = 0;
      sub_10170B710(a2, 0x2Fu, (uint64_t)&v95);
      LOBYTE(v93) = 0;
      sub_10170B710(a2, 0x25u, (uint64_t)&v93);
      LOBYTE(v92) = 0;
      sub_10170B710(a2, 0x26u, (uint64_t)&v92);
      LOBYTE(v91) = 0;
      sub_10170B710(a2, 0x30u, (uint64_t)&v91);
      LOBYTE(v90) = 0;
      sub_10170B710(a2, 0x28u, (uint64_t)&v90);
      LOBYTE(v89) = 0;
      sub_10170B710(a2, 0x16u, (uint64_t)&v89);
      BYTE4(v88) = 0;
      sub_101711850(a2, 0x2Bu, (uint64_t)&v88 + 4);
      BYTE4(v87) = 0;
      sub_100014D50(a2, 0x2Cu, (uint64_t)&v87 + 4);
      BYTE4(v86) = 0;
      sub_100014D50(a2, 0x2Du, (uint64_t)&v86 + 4);
      v4 = &qword_1022A0000;
      v5 = &qword_1022A0000;
      if (v113[0] && v176[0] && LOBYTE(v89) && v135[0] && v171[0] && v170[0] && v169[0])
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v6 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          if (!v113[0] || !v176[0] || !v172[0] || !v174[0])
            __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
          v7 = 999.0;
          if (v109[0])
            v8 = v110 * 1000000.0;
          else
            v8 = 999.0;
          if (v107[0])
            v9 = v108 * 1000000.0;
          else
            v9 = 999.0;
          if (v105[0])
            v10 = v106 * 1000000.0;
          else
            v10 = 999.0;
          if (v103[0])
            v11 = v104 * 1000000.0;
          else
            v11 = 999.0;
          if (v101[0])
            v12 = v102 * 1000000.0;
          else
            v12 = 999.0;
          if (v99[0])
            v13 = v100 * 1000000.0;
          else
            v13 = 999.0;
          if ((_BYTE)v97)
            v14 = v98 * 1000000.0;
          else
            v14 = 999.0;
          if ((_BYTE)v95)
            v15 = v96 * 1000000.0;
          else
            v15 = 999.0;
          if ((_BYTE)v93)
            v16 = v94 * 1000000.0;
          else
            v16 = 999.0;
          v17 = *((float *)&v92 + 1) * 1000000.0;
          if (!LOBYTE(v92))
            v17 = 999.0;
          if (LOBYTE(v91))
            v18 = *((float *)&v91 + 1) * 1000000.0;
          else
            v18 = 999.0;
          v19 = HIWORD(v88);
          if (LOBYTE(v90))
            v7 = *((float *)&v90 + 1) * 1000000.0;
          if (!BYTE4(v88))
            v19 = -1;
          if (BYTE4(v87))
            v20 = LODWORD(v88);
          else
            v20 = -1;
          if (BYTE4(v86))
            v21 = LODWORD(v87);
          else
            v21 = -1;
          *(_DWORD *)buf = 67113728;
          *(_DWORD *)v137 = v114;
          *(_WORD *)&v137[4] = 2048;
          *(double *)&v137[6] = v177;
          *(_WORD *)&v137[14] = 2048;
          *(_QWORD *)&v137[16] = v173;
          *(_WORD *)v138 = 2048;
          *(_QWORD *)&v138[2] = v175;
          v139 = 2048;
          v140 = v8;
          v141 = 2048;
          v142 = v9;
          v143 = 2048;
          v144 = v10;
          v145 = 2048;
          v146 = v11;
          v147 = 2048;
          v148 = v12;
          v149 = 2048;
          v150 = v13;
          v151 = 2048;
          v152 = v14;
          v153 = 2048;
          v154 = v15;
          v155 = 2048;
          v156 = v16;
          v157 = 2048;
          v158 = v17;
          v159 = 2048;
          v160 = v18;
          v161 = 2048;
          v162 = v7;
          v163 = 1024;
          v164 = v19;
          v165 = 1024;
          v166 = v20;
          v167 = 1024;
          v168 = v21;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnssmeas,#poly,svid,%d,refTime.t0,%.3f,flags,%llu,flagsValidity,%llu,IscL1CA,%.3f,IscL2C,%.3f,IscL5I,%.3f,IscL5Q,%.3f,TgdGps,%.3f,TgdB1i,%.3f,TgdB1c,%.3f,IscB1c,%.3f,TgdB2,%.3f,TgdB2a,%.3f,tlvTgdNavic,%.3f,BgdE1E5a,%.3f,ApcRevGpsWeek,%d,ApcRefFreq,%d,EphSource,%d", buf, 0xB0u);
          v5 = &qword_1022A0000;
          v4 = &qword_1022A0000;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE588);
          if (!v113[0] || !v176[0] || !v172[0] || !v174[0])
            __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
          v64 = 999.0;
          if (v109[0])
            v65 = v110 * 1000000.0;
          else
            v65 = 999.0;
          if (v107[0])
            v66 = v108 * 1000000.0;
          else
            v66 = 999.0;
          if (v105[0])
            v67 = v106 * 1000000.0;
          else
            v67 = 999.0;
          if (v103[0])
            v68 = v104 * 1000000.0;
          else
            v68 = 999.0;
          if (v101[0])
            v69 = v102 * 1000000.0;
          else
            v69 = 999.0;
          if (v99[0])
            v70 = v100 * 1000000.0;
          else
            v70 = 999.0;
          if ((_BYTE)v97)
            v71 = v98 * 1000000.0;
          else
            v71 = 999.0;
          if ((_BYTE)v95)
            v72 = v96 * 1000000.0;
          else
            v72 = 999.0;
          if ((_BYTE)v93)
            v73 = v94 * 1000000.0;
          else
            v73 = 999.0;
          if (LOBYTE(v92))
            v74 = *((float *)&v92 + 1) * 1000000.0;
          else
            v74 = 999.0;
          if (LOBYTE(v91))
            v75 = *((float *)&v91 + 1) * 1000000.0;
          else
            v75 = 999.0;
          if (LOBYTE(v90))
            v64 = *((float *)&v90 + 1) * 1000000.0;
          if (BYTE4(v88))
            v76 = HIWORD(v88);
          else
            v76 = -1;
          if (BYTE4(v87))
            v77 = LODWORD(v88);
          else
            v77 = -1;
          if (BYTE4(v86))
            v78 = LODWORD(v87);
          else
            v78 = -1;
          LODWORD(v117) = 67113728;
          HIDWORD(v117) = v114;
          *(_WORD *)v118 = 2048;
          *(double *)&v118[2] = v177;
          *(_WORD *)&v118[10] = 2048;
          *(_QWORD *)&v118[12] = v173;
          *(_WORD *)&v118[20] = 2048;
          *(_QWORD *)&v118[22] = v175;
          *(_WORD *)&v118[30] = 2048;
          *(double *)v119 = v65;
          *(_WORD *)&v119[8] = 2048;
          *(double *)&v119[10] = v66;
          *(_WORD *)&v119[18] = 2048;
          *(double *)&v119[20] = v67;
          *(_WORD *)&v119[28] = 2048;
          *(double *)&v119[30] = v68;
          *(_WORD *)&v119[38] = 2048;
          *(double *)&v119[40] = v69;
          *(_WORD *)v120 = 2048;
          *(double *)&v120[2] = v70;
          *(_WORD *)&v120[10] = 2048;
          *(double *)&v120[12] = v71;
          v121 = 2048;
          *(double *)v122 = v72;
          *(_WORD *)&v122[8] = 2048;
          v123 = v73;
          *(_WORD *)v124 = 2048;
          *(double *)&v124[2] = v74;
          v125 = 2048;
          v126 = v75;
          v127 = 2048;
          v128 = v64;
          v129 = 1024;
          v130 = v76;
          v131 = 1024;
          v132 = v77;
          v133 = 1024;
          v134 = v78;
          LODWORD(v81) = 176;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssmeas,#poly,svid,%d,refTime.t0,%.3f,flags,%llu,flagsValidity,%llu,IscL1CA,%.3f,IscL2C,%.3f,IscL5I,%.3f,IscL5Q,%.3f,TgdGps,%.3f,TgdB1i,%.3f,TgdB1c,%.3f,IscB1c,%.3f,TgdB2,%.3f,TgdB2a,%.3f,tlvTgdNavic,%.3f,BgdE1E5a,%.3f,ApcRevGpsWeek,%d,ApcRefFreq,%d,EphSource,%d", &v117, v81, v82, v84, v85[0], v85[1], v85[2], v85[3], v85[4],
            v86,
            v87,
            v88,
            v89,
            v90,
            v91,
            v92,
            v93,
            v95,
            v97);
          v80 = (uint8_t *)v79;
          sub_100512490("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v79);
          if (v80 != buf)
            free(v80);
          v5 = &qword_1022A0000;
        }
        LODWORD(v117) = 0;
        WORD2(v117) = 0;
        BYTE6(v117) = 127;
        *(_QWORD *)v118 = 0x7FF8000000000000;
        v118[8] = 0;
        *(_OWORD *)&v118[16] = 0u;
        *(_OWORD *)v119 = 0u;
        *(int64x2_t *)&v119[16] = vdupq_n_s64(0x7FF8000000000000uLL);
        *(_OWORD *)&v119[32] = *(_OWORD *)&v119[16];
        *(int32x2_t *)v120 = vdup_n_s32(0x7FC00000u);
        *(_QWORD *)&v120[8] = 0;
        *(_WORD *)&v120[16] = 0;
        v123 = 0.0;
        *(_QWORD *)v124 = 0;
        *(_QWORD *)&v122[2] = 0;
        v124[8] = 0;
        if (!v113[0])
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        v22 = sub_1017721E0(3, v114, 1);
        if (!v23)
          goto LABEL_173;
        LODWORD(v117) = v22;
        BYTE6(v117) = BYTE6(v22);
        WORD2(v117) = WORD2(v22);
        if (!v172[0])
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        if ((v173 & 1) != 0)
        {
          v24 = v5;
        }
        else
        {
          if (!sub_10075F990())
            goto LABEL_130;
          if (!BYTE4(v86))
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE588);
            v54 = v5[15];
            if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
            {
              if (!v172[0] || !v174[0])
                __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)v137 = v173;
              *(_WORD *)&v137[8] = 2048;
              *(_QWORD *)&v137[10] = v175;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "#gnssmeas,#poly,missing eph_source,flags,%llu,flagsValidity,%llu", buf, 0x16u);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_173;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE588);
            if (!v172[0] || !v174[0])
              __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
            v55 = v5[15];
            v115 = 134218240;
            *(_QWORD *)v116 = v173;
            *(_WORD *)&v116[8] = 2048;
            *(_QWORD *)&v116[10] = v175;
            LODWORD(v81) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v55, 16, "#gnssmeas,#poly,missing eph_source,flags,%llu,flagsValidity,%llu", &v115, *(_QWORD *)&v81);
            v53 = (uint8_t *)v56;
            sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v56);
            goto LABEL_197;
          }
          if (LODWORD(v87) == 1)
          {
LABEL_130:
            v24 = v5;
            v25 = 1;
            goto LABEL_131;
          }
          if (LODWORD(v87) != 3)
          {
            if (LODWORD(v87) != 2)
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE588);
              v61 = v5[15];
              if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
              {
                if (!BYTE4(v86))
                  __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)v137 = LODWORD(v87);
                _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "#gnssmeas,#poly,unexpected eph_source,%u", buf, 8u);
              }
              if (!sub_1001BFF7C(115, 0))
                goto LABEL_173;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE588);
              if (!BYTE4(v86))
                __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
              v62 = v5[15];
              v115 = 67109120;
              *(_DWORD *)v116 = LODWORD(v87);
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, 16, "#gnssmeas,#poly,unexpected eph_source,%u", &v115);
              v53 = (uint8_t *)v63;
              sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v63);
LABEL_197:
              if (v53 != buf)
                free(v53);
LABEL_173:
              sub_10173DCA0(&v117);
              return;
            }
            v24 = v5;
            v25 = 2;
LABEL_131:
            v118[8] = v25;
            if ((_DWORD)v117 != 16)
            {
              v44 = 0.0;
              if ((_DWORD)v117 == 2)
              {
                LOBYTE(v85[0]) = 0;
                sub_10169DDA0(a2, 0x13u, v85);
                if (LOBYTE(v85[0]))
                {
                  if (BYTE1(v85[0]) - 15 > 0xFFFFFFF1)
                  {
                    BYTE6(v117) = BYTE1(v85[0]) - 8;
                  }
                  else
                  {
                    v83 = BYTE1(v85[0]) - 8;
                    if (v4[14] != -1)
                      dispatch_once(&qword_1022A0070, &stru_1021CE588);
                    v46 = v24[15];
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 67240192;
                      *(_DWORD *)v137 = v83;
                      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#gnssmeas,#poly,oob fcn,%{public}d", buf, 8u);
                    }
                    if (sub_1001BFF7C(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (v4[14] != -1)
                        dispatch_once(&qword_1022A0070, &stru_1021CE588);
                      v47 = v24[15];
                      v115 = 67240192;
                      *(_DWORD *)v116 = v83;
                      LODWORD(v81) = 8;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v47, 16, "#gnssmeas,#poly,oob fcn,%{public}d", &v115, *(_QWORD *)&v81);
                      v49 = (uint8_t *)v48;
                      sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v48);
                      if (v49 != buf)
                        free(v49);
                    }
                  }
                }
LABEL_171:
                if (v176[0])
                {
                  *(double *)v118 = (v44 + v177) * 1000000000.0;
                  operator new();
                }
                __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
              }
              if ((_DWORD)v117 != 1)
                goto LABEL_171;
            }
            sub_1017406CC(*(_QWORD *)(a1 + 632), (uint64_t)&v115);
            if (v116[12])
            {
              if (!v176[0])
                __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
              v45 = v115 - (v177 - *(double *)&v116[4] > 302400.0);
              if (*(double *)&v116[4] - v177 > 302400.0)
                ++v45;
              v44 = (double)(604800 * v45);
              goto LABEL_171;
            }
            if (v4[14] != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE588);
            v50 = v24[15];
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#gnssmeas,#poly,#Warning,dropping indication due to unreliable approximate GPS time", buf, 2u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_173;
            bzero(buf, 0x65CuLL);
            if (v4[14] != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE588);
            v51 = v24[15];
            LOWORD(v85[0]) = 0;
            LODWORD(v81) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 0, "#gnssmeas,#poly,#Warning,dropping indication due to unreliable approximate GPS time", v85, *(_QWORD *)&v81);
            v53 = (uint8_t *)v52;
            sub_100512490("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v52);
            goto LABEL_197;
          }
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE588);
          v57 = v5[15];
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            if (!BYTE4(v86))
              __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v137 = LODWORD(v87);
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "#gnssmeas,#poly,network injected eph,%u", buf, 8u);
          }
          v24 = v5;
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE588);
            if (!BYTE4(v86))
              __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
            v58 = v5[15];
            v115 = 67109120;
            *(_DWORD *)v116 = LODWORD(v87);
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v58, 16, "#gnssmeas,#poly,network injected eph,%u", &v115);
            v60 = (uint8_t *)v59;
            sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v59);
            if (v60 != buf)
              free(v60);
            v25 = 4;
            v4 = &qword_1022A0000;
            goto LABEL_131;
          }
        }
        v25 = 4;
        goto LABEL_131;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v42 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67241728;
        *(_DWORD *)v137 = v113[0];
        *(_WORD *)&v137[4] = 1026;
        *(_DWORD *)&v137[6] = v176[0];
        *(_WORD *)&v137[10] = 1026;
        *(_DWORD *)&v137[12] = LOBYTE(v89);
        *(_WORD *)&v137[16] = 1026;
        *(_DWORD *)&v137[18] = v135[0];
        *(_WORD *)&v137[22] = 1026;
        *(_DWORD *)v138 = v171[0];
        *(_WORD *)&v138[4] = 1026;
        *(_DWORD *)&v138[6] = v170[0];
        v139 = 1026;
        LODWORD(v140) = v169[0];
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "#gnssmeas,#poly,missing required tlv,svid,%{public}d,reftime,%{public}d,posunc,%{public}d,health,%{public}d,coeff,%{public}d,%{public}d,%{public}d", buf, 0x2Cu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        LODWORD(v117) = 67241728;
        HIDWORD(v117) = v113[0];
        *(_WORD *)v118 = 1026;
        *(_DWORD *)&v118[2] = v176[0];
        *(_WORD *)&v118[6] = 1026;
        *(_DWORD *)&v118[8] = LOBYTE(v89);
        *(_WORD *)&v118[12] = 1026;
        *(_DWORD *)&v118[14] = v135[0];
        *(_WORD *)&v118[18] = 1026;
        *(_DWORD *)&v118[20] = v171[0];
        *(_WORD *)&v118[24] = 1026;
        *(_DWORD *)&v118[26] = v170[0];
        *(_WORD *)&v118[30] = 1026;
        *(_DWORD *)v119 = v169[0];
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,#poly,missing required tlv,svid,%{public}d,reftime,%{public}d,posunc,%{public}d,health,%{public}d,coeff,%{public}d,%{public}d,%{public}d", &v117, 44);
        v30 = (uint8_t *)v43;
        sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v43);
LABEL_126:
        if (v30 != buf)
          free(v30);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v38 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        if (v113[0])
          v39 = v114;
        else
          v39 = -1;
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)v137 = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "#gnssmeas,#poly,dropping ind without iono or tropo,svid,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        if (v113[0])
          v40 = v114;
        else
          v40 = -1;
        LODWORD(v117) = 67240192;
        HIDWORD(v117) = v40;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssmeas,#poly,dropping ind without iono or tropo,svid,%{public}d", &v117, 8);
        v30 = (uint8_t *)v41;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v41);
        goto LABEL_126;
      }
    }
  }
  else
  {
LABEL_76:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v27 = v175;
      if (!v174[0])
        v27 = 0;
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)v137 = v172[0];
      *(_WORD *)&v137[4] = 1026;
      *(_DWORD *)&v137[6] = v174[0];
      *(_WORD *)&v137[10] = 2050;
      *(_QWORD *)&v137[12] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#gnssmeas,#poly,missing source,tlvs,%{public}d,%{public}d,flags_validity,%{public}llu", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v28 = v175;
      if (!v174[0])
        v28 = 0;
      LODWORD(v117) = 67240704;
      HIDWORD(v117) = v172[0];
      *(_WORD *)v118 = 1026;
      *(_DWORD *)&v118[2] = v174[0];
      *(_WORD *)&v118[6] = 2050;
      *(_QWORD *)&v118[8] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,#poly,missing source,tlvs,%{public}d,%{public}d,flags_validity,%{public}llu", &v117, 24);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v29);
      goto LABEL_126;
    }
  }
}

void sub_101777B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  sub_10173DCA0(&a41);
  _Unwind_Resume(a1);
}

_OWORD *sub_101777C60(void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((char *)v7 - (_BYTE *)*a1) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_100259694();
    v12 = v5 - (_QWORD)*a1;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)sub_10025BA00(v4, v13);
    else
      v14 = 0;
    v15 = &v14[32 * v10];
    v16 = &v14[32 * v13];
    v17 = a2[1];
    *(_OWORD *)v15 = *a2;
    *((_OWORD *)v15 + 1) = v17;
    v9 = v15 + 32;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v15 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v15 - 1) = v20;
        v15 -= 32;
        v18 -= 32;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v8 = a2[1];
    *v7 = *a2;
    v7[1] = v8;
    v9 = v7 + 2;
  }
  a1[1] = v9;
  return v9 - 2;
}

uint64_t sub_101777D4C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  sub_100006898(a1 + 24, (__n128 *)((char *)a2 + 24));
  v5 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v6)
    operator delete();
  v7 = *(__int128 *)((char *)a2 + 56);
  v8 = *(__int128 *)((char *)a2 + 72);
  v9 = *(__int128 *)((char *)a2 + 88);
  *(_WORD *)(a1 + 104) = *((_WORD *)a2 + 52);
  *(_OWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  sub_100006898(a1 + 112, (__n128 *)a2 + 7);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  return a1;
}

uint64_t sub_101777DE4(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    v4 = sub_101741848(a1, (uint64_t)a2);
  }
  else
  {
    sub_10177D878((uint64_t)a1, a2);
    v4 = v3 + 144;
  }
  a1[1] = v4;
  return v4 - 144;
}

void sub_101777E24(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  __int128 *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t *v10;
  char **v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  NSObject *v29;
  uint64_t v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  uint8_t buf[4];
  uint64_t v43;

  if (a1[85])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v39 = a1 + 85;
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(*v39 + 24);
      *(_DWORD *)buf = 134349056;
      v43 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gnssmeas,dumping svinfo cache,sz,%{public}zu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v30 = *(_QWORD *)(*v39 + 24);
      v40 = 134349056;
      v41 = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,dumping svinfo cache,sz,%{public}zu", &v40, 12);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::dumpPreRavenCacheIntoNextCallback()", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    v4 = *v39;
    v5 = *(_QWORD **)(*v39 + 16);
    if (v5)
    {
      v6 = a1[37];
      do
      {
        v7 = (__int128 *)(v5 + 3);
        if (v6 >= a1[38])
        {
          v6 = sub_101741848(a1 + 36, (uint64_t)v7);
        }
        else
        {
          sub_10177D878((uint64_t)(a1 + 36), v7);
          v6 += 144;
        }
        a1[37] = v6;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
      v4 = *v39;
    }
    if (*(_BYTE *)(v4 + 80))
      operator new();
    if (*(_QWORD *)(*v39 + 112))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_QWORD *)(*v39 + 112);
        *(_DWORD *)buf = 134349056;
        v43 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#gnssmeas,dumping apc_sv_offset cache,sz,%{public}zu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v33 = *(_QWORD *)(*v39 + 112);
        v40 = 134349056;
        v41 = v33;
        LODWORD(v38) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,dumping apc_sv_offset cache,sz,%{public}zu", &v40, v38);
        v35 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::dumpPreRavenCacheIntoNextCallback()", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
    }
    v10 = *(uint64_t **)(*v39 + 104);
    if (v10)
    {
      v11 = (char **)(a1 + 48);
      v12 = (unint64_t *)(a1 + 50);
      v13 = a1[49];
      do
      {
        v14 = (__int128 *)(v10 + 3);
        if (v13 >= *v12)
        {
          v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (_QWORD)*v11) >> 3);
          v18 = v17 + 1;
          if (v17 + 1 > 0x666666666666666)
            sub_100259694();
          if (0x999999999999999ALL * ((uint64_t)(*v12 - (_QWORD)*v11) >> 3) > v18)
            v18 = 0x999999999999999ALL * ((uint64_t)(*v12 - (_QWORD)*v11) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v12 - (_QWORD)*v11) >> 3) >= 0x333333333333333)
            v19 = 0x666666666666666;
          else
            v19 = v18;
          if (v19)
            v20 = (char *)sub_100357184((uint64_t)(a1 + 50), v19);
          else
            v20 = 0;
          v21 = &v20[40 * v17];
          v22 = *v14;
          v23 = *(_OWORD *)(v10 + 5);
          *((_QWORD *)v21 + 4) = v10[7];
          *(_OWORD *)v21 = v22;
          *((_OWORD *)v21 + 1) = v23;
          v25 = (char *)a1[48];
          v24 = (char *)a1[49];
          v26 = (uint64_t)v21;
          if (v24 != v25)
          {
            do
            {
              v27 = *(_OWORD *)(v24 - 40);
              v28 = *(_OWORD *)(v24 - 24);
              *(_QWORD *)(v26 - 8) = *((_QWORD *)v24 - 1);
              *(_OWORD *)(v26 - 24) = v28;
              *(_OWORD *)(v26 - 40) = v27;
              v26 -= 40;
              v24 -= 40;
            }
            while (v24 != v25);
            v24 = *v11;
          }
          v13 = (unint64_t)(v21 + 40);
          a1[48] = v26;
          a1[49] = (uint64_t)(v21 + 40);
          a1[50] = (uint64_t)&v20[40 * v19];
          if (v24)
            operator delete(v24);
        }
        else
        {
          v15 = *v14;
          v16 = *(_OWORD *)(v10 + 5);
          *(_QWORD *)(v13 + 32) = v10[7];
          *(_OWORD *)v13 = v15;
          *(_OWORD *)(v13 + 16) = v16;
          v13 += 40;
        }
        a1[49] = v13;
        v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
    sub_1017055C4(v39, 0);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v29 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#gnssmeas,dumping svinfo cache,empty", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      LOWORD(v40) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,dumping svinfo cache,empty", &v40, 2);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::dumpPreRavenCacheIntoNextCallback()", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
}

void sub_101778490(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  int v12;
  char v13;
  int v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  unsigned __int8 v18[2];
  int v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  int v23;

  sub_1017406CC(*(_QWORD *)(a1 + 632), (uint64_t)&v12);
  if (v13)
  {
    if (v12 > 1355)
    {
      LOBYTE(v11) = 0;
      sub_100014D50(a2, 0x10u, (uint64_t)&v11);
      v18[0] = 0;
      sub_10177D90C(a2, 0x11u, v18);
      if ((_BYTE)v11 && v18[0])
        operator new();
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240448;
        v21 = v11;
        v22 = 1026;
        v23 = v18[0];
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#gnssmeas,#timeconv,missing gps/ls,%{public}d,%{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v14 = 67240448;
        v15 = v11;
        v16 = 1026;
        LODWORD(v17) = v18[0];
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,#timeconv,missing gps/ls,%{public}d,%{public}d", &v14, 14);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsTimeConvReport(const pds::GnssTimeConvIndication::Indication &)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      v18[0] = 0;
      sub_10177DB04(a2, 0x12u, v18);
      if (v18[0])
        operator new();
      v18[0] = 0;
      sub_10177DC10(a2, 0x14u, v18);
      if (v18[0])
        operator new();
      v18[0] = 0;
      sub_10177DD10(a2, 0x17u, v18);
      if (v18[0])
        operator new();
      v18[0] = 0;
      sub_10177DE3C(a2, 0x1Au, (uint64_t)v18);
      if (v18[0] && !v19)
        operator new();
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v3 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        v21 = v12;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gnssmeas,#timeconv,bad week,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v14 = 67240192;
        v15 = v12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,#timeconv,bad week,%{public}d", &v14, 8);
        v5 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsTimeConvReport(const pds::GnssTimeConvIndication::Indication &)", "%s\n", v4);
LABEL_42:
        if (v5 != buf)
          free(v5);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gnssmeas,#timeconv,#Warning,requires time assistance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      LOWORD(v14) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,#timeconv,#Warning,requires time assistance", &v14, 2);
      v5 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsTimeConvReport(const pds::GnssTimeConvIndication::Indication &)", "%s\n", v7);
      goto LABEL_42;
    }
  }
}

int64_t sub_101779BF8(double *a1)
{
  double v1;
  uint64_t v2;
  CNTimeSpan v4;

  v1 = a1[1];
  v2 = vcvtmd_s64_f64(v1) + 86400 * (*(int *)a1 - 1);
  v4.var0 = 0;
  v4.var1 = 0.0;
  CNTimeSpan::SetTimeSpan(&v4, v2, v1 - (double)(uint64_t)floor(v1));
  return v4.var0;
}

void sub_101779C4C(uint64_t a1, double a2, double a3)
{
  _BOOL4 v5;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[1640];

  v11 = 0;
  sub_100073658((int *)&v11 + 1, &v11, a2);
  v5 = sub_10051550C(SHIDWORD(v11), v11);
  if (a3 >= 0.0 && !v5)
  {
    sub_100073648(*(_QWORD *)(a1 + 632), 604800000000000 * HIDWORD(v11) + 1000000 * v11, (unint64_t)(a3 * 1000000000.0));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gnssmeas,bad injectTimeAssistance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v10 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,bad injectTimeAssistance", &v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::injectTimeAssistance(double, double)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_101779E40(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  double v20;
  double v21;
  _BYTE v22[12];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  _BYTE buf[12];
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  if ((unint64_t)(*(_QWORD *)(a2 + 24) + 1) < 2
    || (v4 = *(_QWORD *)(a2 + 48), v4 + 1 < 2)
    || (unint64_t)(*(_QWORD *)(a2 + 56) + 1) <= 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a2 + 24);
      v7 = *(_QWORD *)(a2 + 48);
      v8 = *(_QWORD *)(a2 + 56);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v6;
      v28 = 2050;
      v29 = v7;
      v30 = 2050;
      v31 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#rxClockConv,out of range pulse time,%{public}llu,%{public}llu,%{public}llu", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = *(_QWORD *)(a2 + 48);
    v18 = *(_QWORD *)(a2 + 56);
    *(_DWORD *)v22 = 134349568;
    *(_QWORD *)&v22[4] = v16;
    v23 = 2050;
    v24 = v17;
    v25 = 2050;
    v26 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#rxClockConv,out of range pulse time,%{public}llu,%{public}llu,%{public}llu", v22, 32);
LABEL_27:
    v19 = (char *)v15;
    sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::injectTimeMarkPulseTime(const GNSS::TimeTransferPulseTime &)", "%s\n", v15);
    if (v19 != buf)
      free(v19);
    return;
  }
  v20 = 0.0;
  v21 = 0.0;
  *(_QWORD *)buf = sub_100127828(v4);
  if (sub_10010F7EC(a1 + 560, (double *)buf, &v21)
    && (*(_QWORD *)v22 = sub_100127828(*(_QWORD *)(a2 + 56)), sub_10010F7EC(a1 + 560, (double *)v22, &v20)))
  {
    v9 = (v21 + v20) * 0.5;
    sub_10177A21C(a1 + 640, *(_QWORD *)a1, *(_QWORD *)(a2 + 24), v9, vabdd_f64(v20, v21));
    if ((*(_BYTE *)(a1 + 712) || sub_1016F2BF0(a2)) && *(float *)(a2 + 8) < 500000000.0)
      sub_100073648(*(_QWORD *)(a1 + 632), *(_QWORD *)a2, (unint64_t)(v9 * 1000000000.0));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(a2 + 48);
      v12 = *(_QWORD *)(a2 + 56);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v11;
      v28 = 2050;
      v29 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#rxClockConv,unable to conv pulse to mct,%{public}llu,%{public}llu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v13 = *(_QWORD *)(a2 + 48);
      v14 = *(_QWORD *)(a2 + 56);
      *(_DWORD *)v22 = 134349312;
      *(_QWORD *)&v22[4] = v13;
      v23 = 2050;
      v24 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#rxClockConv,unable to conv pulse to mct,%{public}llu,%{public}llu", v22, 22);
      goto LABEL_27;
    }
  }
}

void sub_10177A21C(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  _BYTE v26[24];
  double v27;
  __int16 v28;
  double v29;
  uint8_t buf[4];
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;

  if (sub_101774044(a1, a3))
  {
    v10 = a4 + (double)(unint64_t)a3 * -0.000000001;
    if (*(_BYTE *)(a1 + 32))
    {
      v11 = *(double *)a1;
      v12 = *(double *)(a1 + 16) + vabdd_f64(a4, *(double *)(a1 + 8)) * 0.00002 + a5 + 0.001;
      if (vabdd_f64(v10, *(double *)a1) / v12 > 50.0)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v13 = v10 - v11;
        v14 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134349824;
          v31 = v13;
          v32 = 2050;
          v33 = v12;
          v34 = 2050;
          v35 = v10;
          v36 = 2050;
          v37 = a5 + 0.001;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "#rxClockConv,disagreement,%{public}.3f,%{public}.3f,newRxClockToMct,%{public}.4f,newUncSec,%{public}.4f", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE588);
          *(_DWORD *)v26 = 134349824;
          *(double *)&v26[4] = v13;
          *(_WORD *)&v26[12] = 2050;
          *(double *)&v26[14] = v12;
          *(_WORD *)&v26[22] = 2050;
          v27 = v10;
          v28 = 2050;
          v29 = a5 + 0.001;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#rxClockConv,disagreement,%{public}.3f,%{public}.3f,newRxClockToMct,%{public}.4f,newUncSec,%{public}.4f", v26, 42);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 0, "void ReceiverClockConversion::feedTimemark(dispatch_queue_t, const uint64_t, const double, const double)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
        sub_101740774(a2, (uint64_t)"RxClockConv", (uint64_t)"TimemarkInconsistency", 0);
      }
    }
    *(double *)a1 = v10;
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a5 + 0.001;
    *(_BYTE *)(a1 + 32) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(double *)a1;
      v17 = *(double *)(a1 + 16);
      *(_DWORD *)buf = 134349312;
      v31 = v16;
      v32 = 2050;
      v33 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#rxClockConv,method,timemark,rxClockToMct,%{public}.4f,uncSec,%{public}.4f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v18 = *(double *)a1;
      v19 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)v26 = 134349312;
      *(double *)&v26[4] = v18;
      *(_WORD *)&v26[12] = 2050;
      *(_QWORD *)&v26[14] = v19;
      LODWORD(v25) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#rxClockConv,method,timemark,rxClockToMct,%{public}.4f,uncSec,%{public}.4f", v26, v25, *(_OWORD *)v26, *(_QWORD *)&v26[16]);
LABEL_27:
      v22 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void ReceiverClockConversion::feedTimemark(dispatch_queue_t, const uint64_t, const double, const double)", "%s\n", v20);
      if (v22 != buf)
        free(v22);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v21 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      v31 = *(double *)&a3;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#rxClockConv,feedTimemark,invalid rxClockNs,%{public}llu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      *(_DWORD *)v26 = 134349056;
      *(_QWORD *)&v26[4] = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#rxClockConv,feedTimemark,invalid rxClockNs,%{public}llu", v26, 12, *(_OWORD *)v26, *(_QWORD *)&v26[16]);
      goto LABEL_27;
    }
  }
}

double sub_10177A730(uint64_t a1, float64x2_t a2, float64_t a3, double a4)
{
  double result;
  _OWORD v6[2];

  sub_10173DD00((uint64_t)v6, a2, a3, a4);
  *(_OWORD *)(a1 + 776) = v6[0];
  result = *(double *)((char *)v6 + 9);
  *(_OWORD *)(a1 + 785) = *(_OWORD *)((char *)v6 + 9);
  return result;
}

void sub_10177A770(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  _WORD v12[8];
  _BYTE v13[4];
  unsigned int v14;
  _BYTE v15[4];
  unsigned int v16;
  _BYTE v17[4];
  unsigned int v18;
  _BYTE v19[4];
  unsigned int v20;
  _BYTE v21[4];
  unsigned int v22;
  _BYTE v23[4];
  unsigned int v24;
  _BYTE v25[4];
  unsigned int v26;
  _BYTE v27[4];
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint8_t buf[1628];
  _BYTE v33[4];
  unsigned __int16 v34;
  unsigned int v35;

  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v33[0] = 0;
  sub_10177DF98(a2, 0x10u, (uint64_t)v33);
  if (v33[0])
    *(_QWORD *)&v29 = 604800000000000 * v34 + 1000000 * v35;
  v27[0] = 0;
  sub_10170B710(a2, 0x11u, (uint64_t)v27);
  v25[0] = 0;
  sub_10170B710(a2, 0x12u, (uint64_t)v25);
  v23[0] = 0;
  sub_10170B710(a2, 0x13u, (uint64_t)v23);
  v21[0] = 0;
  sub_10170B710(a2, 0x14u, (uint64_t)v21);
  v19[0] = 0;
  sub_10170B710(a2, 0x15u, (uint64_t)v19);
  v17[0] = 0;
  sub_10170B710(a2, 0x16u, (uint64_t)v17);
  v15[0] = 0;
  sub_10170B710(a2, 0x17u, (uint64_t)v15);
  v13[0] = 0;
  sub_10170B710(a2, 0x18u, (uint64_t)v13);
  if (!v27[0] || !v25[0] || !v23[0] || !v21[0] || !v19[0] || !v17[0] || !v15[0] || !v13[0])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gnssmeas,klobuchar,missing expected TLV", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,klobuchar,missing expected TLV", v12, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsKlobucharParamReport(const pds::GnssKlobucharParamIndication::Indication &)", "%s\n", v8);
LABEL_33:
    if (v9 != buf)
      free(v9);
    return;
  }
  *((_QWORD *)&v29 + 1) = __PAIR64__(v26, v28);
  *(_QWORD *)&v30 = __PAIR64__(v22, v24);
  *((_QWORD *)&v30 + 1) = __PAIR64__(v18, v20);
  v31 = __PAIR64__(v14, v16);
  if (sub_100D038F8((float *)&v29))
  {
    v4 = *(_QWORD *)(a1 + 680);
    if (!v4)
      operator new();
    v5 = *(unsigned __int8 *)(v4 + 80);
    v6 = v30;
    *(_OWORD *)(v4 + 40) = v29;
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v31;
    if (!v5)
      *(_BYTE *)(v4 + 80) = 1;
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE588);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#gnssmeas,klobuchar,invalid params", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,klobuchar,invalid params", v12, 2);
    v9 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsKlobucharParamReport(const pds::GnssKlobucharParamIndication::Indication &)", "%s\n", v11);
    goto LABEL_33;
  }
}

void sub_10177AC0C(_QWORD *a1, qmi::MessageBase *a2)
{
  NSObject *v4;
  int v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  char *v17;
  double v18;
  float64x2_t v19;
  NSObject *v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  const char *v24;
  unint64_t v25;
  unint64_t v26;
  float64x2_t v27;
  float64x2_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  float64_t *v38;
  float64_t *v39;
  float64x2_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  NSObject *v43;
  _BYTE *v44;
  const char *v45;
  uint64_t v46;
  void **v47;
  const char *v48;
  char *v49;
  NSObject *v50;
  const char *v51;
  char *v52;
  NSObject *v53;
  const char *v54;
  char *v55;
  const char *v56;
  const char *v57;
  double v58;
  uint64_t v59;
  double v60;
  float64_t **v61;
  uint64_t v62;
  float64x2_t v63;
  void *v64[2];
  char v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  unint64_t v69;
  int v70;
  char v71[4];
  unsigned int v72;
  char v73[2];
  unsigned __int16 v74;
  char v75;
  unsigned __int8 v76;
  _BYTE __p[14];
  const char *v78;
  __int16 v79;
  float64_t v80;
  __int16 v81;
  float64_t v82;
  __int16 v83;
  double v84;
  _BYTE buf[14];
  const char *v86;
  __int16 v87;
  float64_t v88;
  __int16 v89;
  float64_t v90;
  __int16 v91;
  double v92;
  unsigned __int8 v93[8];
  uint64_t v94;
  double v95;

  v75 = 0;
  sub_10169DDA0(a2, 1u, &v75);
  v73[0] = 0;
  sub_101711850(a2, 0x11u, (uint64_t)v73);
  v71[0] = 0;
  sub_100014D50(a2, 0x12u, (uint64_t)v71);
  sub_10177B9B4(a2, v93);
  if (!v75 || !v73[0] || !v71[0] || !v93[0])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v50 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "#gnssmeas,apc,missing expected TLVs", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_101;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    *(_WORD *)__p = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,apc,missing expected TLVs", __p, 2);
    v52 = (char *)v51;
    sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v51);
LABEL_117:
    if (v52 != buf)
      free(v52);
    goto LABEL_101;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE588);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    if (!v75 || !v73[0] || !v71[0])
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v76;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v74;
    LOWORD(v86) = 1024;
    *(_DWORD *)((char *)&v86 + 2) = v72;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssmeas,apc report,apc_system,%d,rev_gps_week,%d,apc_ref_freq,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    if (!v75 || !v73[0] || !v71[0])
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    *(_DWORD *)__p = 67109632;
    *(_DWORD *)&__p[4] = v76;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v74;
    LOWORD(v78) = 1024;
    *(_DWORD *)((char *)&v78 + 2) = v72;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssmeas,apc report,apc_system,%d,rev_gps_week,%d,apc_ref_freq,%d", __p, 20, LODWORD(v58));
    v55 = (char *)v54;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v54);
    if (v55 != buf)
      free(v55);
  }
  if (!v75)
    __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
  v5 = v76;
  if (sub_10075FA90())
    v6 = 7;
  else
    v6 = 6;
  if (v6 <= (v5 - 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v53 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "#gnssmeas,apc,bad qmiApcSystem,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_101;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    *(_DWORD *)__p = 67240192;
    *(_DWORD *)&__p[4] = v5;
    LODWORD(v57) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,apc,bad qmiApcSystem,%{public}d", __p, v57);
    v52 = (char *)v56;
    sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v56);
    goto LABEL_117;
  }
  if (!v71[0])
    __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
  v7 = sub_101772788(v72);
  if (!v93[0])
    __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
  v8 = v94;
  v60 = v95;
  if (v94 != *(_QWORD *)&v95)
  {
    v9 = v7;
    v61 = (float64_t **)(a1 + 48);
    v59 = (uint64_t)(a1 + 50);
    v63 = (float64x2_t)vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
    while (1)
    {
      v10 = sub_101772964(v5, *(_DWORD *)v8);
      v11 = *(unsigned __int16 **)(v8 + 8);
      v12 = *(unsigned __int16 **)(v8 + 16);
      if (v11 != v12)
        break;
LABEL_86:
      v8 += 32;
      if (v8 == *(_QWORD *)&v60)
        goto LABEL_101;
    }
    v13 = v10;
    v62 = (char)v10 - 1;
    while (1)
    {
      v14 = *v11;
      v69 = sub_1017721E0(v5, v14, 0);
      v70 = v15;
      if ((_BYTE)v15)
      {
        *(_DWORD *)((char *)v66.f64 + 3) = *(_DWORD *)((char *)&v69 + 3);
        LODWORD(v66.f64[0]) = v69;
        LOBYTE(v66.f64[1]) = v13;
        BYTE1(v66.f64[1]) = v9;
        v67 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v11 + 2)), v63);
        v68 = *((float *)v11 + 3) * 0.001;
        if (sub_100D03A30((uint64_t)&v66))
        {
          v16 = a1[85];
          if (v16)
          {
            *(_DWORD *)buf = v13 | (v14 << 8);
            *(_QWORD *)__p = buf;
            v17 = sub_10177E7EC(v16 + 88, (unsigned int *)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
            v18 = v68;
            v19 = v67;
            *(float64x2_t *)(v17 + 24) = v66;
            *(float64x2_t *)(v17 + 40) = v19;
            *((double *)v17 + 7) = v18;
          }
          else
          {
            v25 = a1[49];
            v26 = a1[50];
            if (v25 >= v26)
            {
              v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - (_QWORD)*v61) >> 3);
              v31 = v30 + 1;
              if (v30 + 1 > 0x666666666666666)
                sub_100259694();
              v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v26 - (_QWORD)*v61) >> 3);
              if (2 * v32 > v31)
                v31 = 2 * v32;
              if (v32 >= 0x333333333333333)
                v33 = 0x666666666666666;
              else
                v33 = v31;
              if (v33)
                v34 = (char *)sub_100357184(v59, v33);
              else
                v34 = 0;
              v35 = (float64x2_t *)&v34[40 * v30];
              v36 = v66;
              v37 = v67;
              v35[2].f64[0] = v68;
              *v35 = v36;
              v35[1] = v37;
              v39 = (float64_t *)a1[48];
              v38 = (float64_t *)a1[49];
              v40 = v35;
              if (v38 != v39)
              {
                do
                {
                  v41 = *(float64x2_t *)(v38 - 5);
                  v42 = *(float64x2_t *)(v38 - 3);
                  v40[-1].f64[1] = *(v38 - 1);
                  *(float64x2_t *)((char *)v40 - 24) = v42;
                  *(float64x2_t *)((char *)v40 - 40) = v41;
                  v40 = (float64x2_t *)((char *)v40 - 40);
                  v38 -= 5;
                }
                while (v38 != v39);
                v38 = *v61;
              }
              v29 = (char *)&v35[2].f64[1];
              a1[48] = v40;
              a1[49] = (char *)v35 + 40;
              a1[50] = &v34[40 * v33];
              if (v38)
                operator delete(v38);
            }
            else
            {
              v27 = v66;
              v28 = v67;
              *(double *)(v25 + 32) = v68;
              *(float64x2_t *)v25 = v27;
              *(float64x2_t *)(v25 + 16) = v28;
              v29 = (char *)(v25 + 40);
            }
            a1[49] = v29;
          }
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE588);
          v43 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            if (!(_BYTE)v70)
              sub_10028DF3C();
            sub_10176DD88((int *)&v69, (uint64_t)__p);
            v44 = __p;
            if (v79 < 0)
              v44 = *(_BYTE **)__p;
            v45 = "other";
            if (v62 <= 8u)
              v45 = (&off_1021CE610)[v62];
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = v44;
            *(_WORD *)&buf[12] = 2080;
            v86 = v45;
            v87 = 2048;
            v88 = v67.f64[0];
            v89 = 2048;
            v90 = v67.f64[1];
            v91 = 2048;
            v92 = v68;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "#gnssmeas,apc_sv_offset,svid,%s,band,%s,offset_xyz_meters,%.3f,%.3f,%.3f", buf, 0x34u);
            if (SHIBYTE(v79) < 0)
              operator delete(*(void **)__p);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_72;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE588);
          if (!(_BYTE)v70)
            sub_10028DF3C();
          v46 = qword_1022A0078;
          sub_10176DD88((int *)&v69, (uint64_t)v64);
          v47 = v64;
          if (v65 < 0)
            v47 = (void **)v64[0];
          v48 = "other";
          if (v62 <= 8u)
            v48 = (&off_1021CE610)[v62];
          *(_DWORD *)__p = 136316162;
          *(_QWORD *)&__p[4] = v47;
          *(_WORD *)&__p[12] = 2080;
          v78 = v48;
          v79 = 2048;
          v80 = v67.f64[0];
          v81 = 2048;
          v82 = v67.f64[1];
          v83 = 2048;
          v84 = v68;
          LODWORD(v57) = 52;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v46, 2, "#gnssmeas,apc_sv_offset,svid,%s,band,%s,offset_xyz_meters,%.3f,%.3f,%.3f", __p, v57, v58, *(double *)&v59, v60);
          v22 = v49;
          if (v65 < 0)
            operator delete(v64[0]);
          sub_100512490("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v22);
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE588);
          v23 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#gnssmeas,apc_sv_offset,invalid params", buf, 2u);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_72;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE588);
          *(_WORD *)__p = 0;
          LODWORD(v57) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,apc_sv_offset,invalid params", __p, v57);
          v22 = (char *)v24;
          sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v24);
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        v20 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#gnssmeas,apc,bad svid", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_72;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE588);
        *(_WORD *)__p = 0;
        LODWORD(v57) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,apc,bad svid", __p, v57);
        v22 = (char *)v21;
        sub_100512490("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v21);
      }
      if (v22 != buf)
        free(v22);
LABEL_72:
      v11 += 8;
      if (v11 == v12)
        goto LABEL_86;
    }
  }
LABEL_101:
  if (v93[0])
  {
    *(_QWORD *)buf = &v94;
    sub_10177BF20((void ***)buf);
  }
}

void sub_10177B92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  if (*(_BYTE *)(v41 - 152))
  {
    a41 = v41 - 144;
    sub_10177BF20((void ***)&a41);
  }
  _Unwind_Resume(exception_object);
}

void sub_10177B9B4(qmi::MessageBase *a1@<X0>, unsigned __int8 *a2@<X8>)
{
  *a2 = 0;
  sub_10177E01C(a1, 0x13u, a2);
}

void sub_10177B9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _BYTE *a10)
{
  _BYTE *v10;

  if (*v10)
  {
    a10 = v10 + 8;
    sub_10177BF20((void ***)&a10);
    *v10 = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_10177BA10(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  if ((unint64_t)(a2 + 2000000000) < *(_QWORD *)(a1 + 24))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 134349312;
      v14 = v5;
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rxClockConv,reset detected,lastNs,%{public}llu,currNs,%{public}llu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v6 = *(_QWORD *)(a1 + 24);
      v9 = 134349312;
      v10 = v6;
      v11 = 2050;
      v12 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#rxClockConv,reset detected,lastNs,%{public}llu,currNs,%{public}llu", &v9, 22);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void ReceiverClockConversion::checkRxClockForHwReset(const uint64_t)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    *(_BYTE *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  *(_QWORD *)(a1 + 24) = a2;
}

void sub_10177BC04(uint64_t a1, unint64_t a2, double a3)
{
  NSObject *v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  double v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  double v16;
  __int16 v17;
  uint64_t v18;

  if (!*(_BYTE *)(a1 + 32) || *(double *)(a1 + 16) >= 0.3)
  {
    *(double *)a1 = a3 + (double)a2 * -0.000000001 + -0.03;
    *(double *)(a1 + 8) = a3;
    *(_QWORD *)(a1 + 16) = 0x3FD3333333333333;
    *(_BYTE *)(a1 + 32) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE588);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(double *)a1;
      v6 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 134349312;
      v16 = v5;
      v17 = 2050;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rxClockConv,method,receipt,rxClockToMct,%{public}.4f,uncSec,%{public}.4f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE588);
      v7 = *(double *)a1;
      v8 = *(_QWORD *)(a1 + 16);
      v11 = 134349312;
      v12 = v7;
      v13 = 2050;
      v14 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#rxClockConv,method,receipt,rxClockToMct,%{public}.4f,uncSec,%{public}.4f", &v11, 22);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void ReceiverClockConversion::useReceiptTime(const uint64_t, const double)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

BOOL sub_10177BE28(uint64_t a1)
{
  return *(_BYTE *)(a1 + 32) && *(double *)(a1 + 16) < 0.1;
}

void sub_10177BE50(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10177BE7C(void **a1)
{
  if (*a1)
  {
    sub_100E09520((uint64_t)a1, *a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_10177BEB4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 18;
        sub_100E0947C((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_10177BF20(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_10177BF60((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_10177BF60(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_10177BFAC(qmi::MessageBase *a1, unsigned __int16 a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[2];
  _DWORD **v10;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  v9[0] = result;
  v9[1] = v5;
  if (result)
  {
    LODWORD(v7) = 0;
    BYTE4(v7) = 0;
    *((_QWORD *)&v7 + 1) = 0;
    LOBYTE(v8) = 0;
    v10 = (_DWORD **)v9;
    result = sub_10177C04C(&v10, v5, (uint64_t)&v7);
    if ((_DWORD)result)
      v9[0] = 0;
    v6 = a3 + 8;
    if (*a3)
    {
      *v6 = v7;
      a3[24] = v8;
    }
    else
    {
      *v6 = v7;
      *((_QWORD *)a3 + 3) = v8;
      *a3 = 1;
    }
    if (!v9[0])
      *a3 = 0;
  }
  return result;
}

uint64_t sub_10177C04C(_DWORD ***a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  _BYTE *v4;
  _QWORD *v5;
  _BYTE *v6;

  if (a2 >= 4)
  {
    v3 = *a1;
    *(_DWORD *)a3 = ***a1;
    v4 = (_BYTE *)(*v3 + 4);
    *v3 = v4;
    if (a2 != 4)
    {
      *(_BYTE *)(a3 + 4) = *v4;
      v5 = (_QWORD *)(*v3 + 1);
      *v3 = v5;
      if ((a2 - 4) >= 9)
      {
        *(_QWORD *)(a3 + 8) = *v5;
        v6 = (_BYTE *)(*v3 + 8);
        *v3 = v6;
        if (a2 != 13)
        {
          *(_BYTE *)(a3 + 16) = *v6;
          ++*v3;
        }
      }
    }
  }
  return (a2 - 14);
}

uint64_t *sub_10177C0CC(qmi::MessageBase *a1, unsigned __int16 a2, char *a3)
{
  uint64_t *result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;

  result = (uint64_t *)qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  v6 = 0;
  if (v5 < 8)
  {
    v7 = 0;
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  v7 = *result;
  if (v5 < 0x10)
    goto LABEL_7;
  v6 = result[1];
  if (v5 != 16)
    goto LABEL_7;
  v8 = 1;
LABEL_8:
  v9 = *a3;
  *((_QWORD *)a3 + 1) = v7;
  *((_QWORD *)a3 + 2) = v6;
  if (!v9 || (v8 & 1) == 0)
    *a3 = v8;
  return result;
}

unsigned int *sub_10177C138(qmi::MessageBase *a1, unsigned __int16 a2, char *a3)
{
  unsigned int *result;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  int v10;

  result = (unsigned int *)qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  if (v5 < 4)
  {
    v8 = 0;
    v6 = 0;
LABEL_9:
    v7 = 0;
    goto LABEL_10;
  }
  v6 = *result;
  if (v5 < 8)
  {
    v8 = 0;
    goto LABEL_9;
  }
  v7 = result[1];
  if ((v5 - 12) > 0xFFFFFFF7)
  {
    v8 = 0;
    goto LABEL_10;
  }
  v8 = result[2];
  if (v5 != 12)
  {
LABEL_10:
    v9 = 0;
    goto LABEL_11;
  }
  v9 = 1;
LABEL_11:
  v10 = *a3;
  *(_QWORD *)(a3 + 4) = v6 | (unint64_t)(v7 << 32);
  *((_DWORD *)a3 + 3) = v8;
  if (!v10 || (v9 & 1) == 0)
    *a3 = v9;
  return result;
}

uint64_t sub_10177C1D0(qmi::MessageBase *a1, unsigned __int16 a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  _QWORD v7[2];
  _WORD **v8;
  __int128 v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  v7[0] = result;
  v7[1] = v5;
  if (result)
  {
    LOWORD(v9) = 0;
    *((_QWORD *)&v9 + 1) = 0;
    DWORD1(v9) = 0;
    v8 = (_WORD **)v7;
    result = sub_10177C24C(&v8, v5, (uint64_t)&v9);
    if ((_DWORD)result)
      v7[0] = 0;
    v6 = *a3;
    *(_OWORD *)(a3 + 4) = v9;
    if (!v6)
      *a3 = 1;
    if (!v7[0])
      *a3 = 0;
  }
  return result;
}

uint64_t sub_10177C24C(_WORD ***a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t result;

  if (a2 < 2)
    return (a2 - 14);
  v3 = *a1;
  *(_WORD *)a3 = ***a1;
  v4 = (_DWORD *)(*v3 + 2);
  *v3 = v4;
  if (a2 < 6)
    return (a2 - 14);
  *(_DWORD *)(a3 + 4) = *v4;
  v5 = (_DWORD *)(*v3 + 4);
  *v3 = v5;
  if ((a2 - 10) >= 0xFFFFFFF8)
    return (a2 - 14);
  *(_DWORD *)(a3 + 8) = *v5;
  v6 = (_DWORD *)(*v3 + 4);
  *v3 = v6;
  result = (a2 - 14);
  if ((a2 - 14) <= 0xFFFFFFF7)
  {
    *(_DWORD *)(a3 + 12) = *v6;
    *v3 += 4;
  }
  return result;
}

void sub_10177C2D8(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  _BYTE *v4;
  void *v5;
  __n128 __p;
  uint64_t v7;
  _BYTE *v8[2];

  v8[0] = (_BYTE *)qmi::MessageBase::findTlvValue(a1, a2);
  v8[1] = v4;
  if (v8[0])
  {
    __p = 0uLL;
    v7 = 0;
    if (sub_10177C384(v8, (int)v4, &__p))
      v8[0] = 0;
    sub_10169F020(a3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (!v8[0] && *(_BYTE *)a3)
    {
      v5 = *(void **)(a3 + 8);
      if (v5)
      {
        *(_QWORD *)(a3 + 16) = v5;
        operator delete(v5);
      }
      *(_BYTE *)a3 = 0;
    }
  }
}

void sub_10177C364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10177C384(_BYTE **a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  _WORD *v6;
  _WORD *v7;
  _BYTE **v9;

  v9 = a1;
  v4 = (a2 - 1);
  if (a2 < 1)
    v5 = 0;
  else
    v5 = *(*a1)++;
  sub_10177C404((uint64_t)a3, v5);
  v6 = (_WORD *)*a3;
  v7 = (_WORD *)a3[1];
  while (v6 != v7)
  {
    v4 = sub_10177C440(&v9, v4, v6);
    v6 += 60;
  }
  return v4;
}

void sub_10177C404(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10177C48C((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 120 * a2;
  }
}

uint64_t sub_10177C440(_BYTE ***a1, int a2, _WORD *a3)
{
  _BYTE **v3;
  BOOL v4;
  int v5;
  _BYTE **v7;
  _WORD *v8;

  v3 = *a1;
  v7 = *a1;
  v8 = a3;
  v4 = __OFSUB__(a2, 2);
  v5 = a2 - 2;
  if (v5 < 0 == v4)
  {
    *a3 = *(_WORD *)*v3;
    *v3 += 2;
  }
  return sub_10177C66C((uint64_t *)&v8, v5, &v7);
}

void sub_10177C48C(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xEEEEEEEEEEEEEEEFLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[120 * a2];
      do
      {
        *(_WORD *)v7 = 0;
        *((_DWORD *)v7 + 6) = 0;
        v7[28] = 0;
        *((_QWORD *)v7 + 1) = 0;
        *(_QWORD *)(v7 + 15) = 0;
        *(_QWORD *)(v7 + 38) = 0;
        *(_QWORD *)(v7 + 30) = 0;
        *(_QWORD *)(v7 + 44) = 0;
        *((_QWORD *)v7 + 7) = 0;
        *((_QWORD *)v7 + 8) = 0;
        *((_DWORD *)v7 + 18) = 0;
        *((_QWORD *)v7 + 10) = 0;
        *((_QWORD *)v7 + 11) = 0;
        *(_QWORD *)(v7 + 93) = 0;
        *((_QWORD *)v7 + 13) = 0;
        *((_QWORD *)v7 + 14) = 0;
        v7 += 120;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xEEEEEEEEEEEEEEEFLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x222222222222222)
      sub_100259694();
    v10 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x111111111111111)
      v11 = 0x222222222222222;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_100313328(v4, v11);
    else
      v12 = 0;
    v14 = &v12[120 * v8];
    v15 = &v14[120 * a2];
    v16 = v14;
    do
    {
      *(_WORD *)v16 = 0;
      *((_DWORD *)v16 + 6) = 0;
      v16[28] = 0;
      *((_QWORD *)v16 + 1) = 0;
      *(_QWORD *)(v16 + 15) = 0;
      *(_QWORD *)(v16 + 38) = 0;
      *(_QWORD *)(v16 + 30) = 0;
      *(_QWORD *)(v16 + 44) = 0;
      *((_QWORD *)v16 + 7) = 0;
      *((_QWORD *)v16 + 8) = 0;
      *((_DWORD *)v16 + 18) = 0;
      *((_QWORD *)v16 + 10) = 0;
      *((_QWORD *)v16 + 11) = 0;
      *(_QWORD *)(v16 + 93) = 0;
      *((_QWORD *)v16 + 13) = 0;
      *((_QWORD *)v16 + 14) = 0;
      v16 += 120;
    }
    while (v16 != v15);
    v17 = &v12[120 * v11];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 120);
        v21 = *(_OWORD *)(v18 - 104);
        v22 = *(_OWORD *)(v18 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        *(_OWORD *)(v14 - 88) = v22;
        *(_OWORD *)(v14 - 104) = v21;
        *(_OWORD *)(v14 - 120) = v20;
        v23 = *(_OWORD *)(v18 - 56);
        v24 = *(_OWORD *)(v18 - 40);
        v25 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v25;
        *(_OWORD *)(v14 - 40) = v24;
        *(_OWORD *)(v14 - 56) = v23;
        v14 -= 120;
        v18 -= 120;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
}

uint64_t sub_10177C66C(uint64_t *a1, int a2, _BYTE ***a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a1;
  if (a2 < 8)
    goto LABEL_9;
  *(_QWORD *)(v3 + 8) = *(_QWORD *)**a3;
  **a3 += 8;
  if (a2 == 8)
    goto LABEL_9;
  *(_BYTE *)(v3 + 16) = *(**a3)++;
  if (a2 == 9
    || (*(_BYTE *)(v3 + 17) = ***a3, ++**a3, a2 == 10)
    || (*(_BYTE *)(v3 + 18) = ***a3, ++**a3, a2 == 11)
    || (*(_BYTE *)(v3 + 19) = ***a3, ++**a3, (a2 - 11) <= 2))
  {
LABEL_9:
    v5 = v3;
  }
  else
  {
    *(_WORD *)(v3 + 20) = *(_WORD *)**a3;
    **a3 += 2;
    v5 = v3;
    if (a2 != 14)
      *(_BYTE *)(v3 + 22) = *(**a3)++;
  }
  return sub_10177C7BC(&v5, a2 - 15, (_DWORD ***)a3);
}

uint64_t sub_10177C7BC(uint64_t *a1, int a2, _DWORD ***a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;

  v3 = *a1;
  if (a2 < 2)
    goto LABEL_9;
  *(_WORD *)(v3 + 24) = *(_WORD *)**a3;
  **a3 = (_DWORD *)((char *)**a3 + 2);
  if (a2 < 4)
    goto LABEL_9;
  *(_WORD *)(v3 + 26) = *(_WORD *)**a3;
  **a3 = (_DWORD *)((char *)**a3 + 2);
  if (a2 == 4
    || (*(_BYTE *)(v3 + 28) = *(_BYTE *)**a3, **a3 = (_DWORD *)((char *)**a3 + 1), (a2 - 7) > 0xFFFFFFFC)
    || (*(_WORD *)(v3 + 30) = *(_WORD *)**a3, **a3 = (_DWORD *)((char *)**a3 + 2), (a2 - 11) > 0xFFFFFFF9)
    || (*(_DWORD *)(v3 + 32) = ***a3, ++**a3, (a2 - 15) >= 0xFFFFFFF8))
  {
LABEL_9:
    v6 = v3;
    v4 = a2 - 19;
  }
  else
  {
    *(_DWORD *)(v3 + 36) = *(**a3)++;
    v6 = v3;
    v4 = a2 - 19;
    if (v4 <= 0xFFFFFFF7)
      *(_DWORD *)(v3 + 40) = *(**a3)++;
  }
  return sub_10177C918(&v6, v4, a3);
}

uint64_t sub_10177C918(uint64_t *a1, int a2, _DWORD ***a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;

  v3 = *a1;
  if (a2 < 4)
    goto LABEL_9;
  *(_DWORD *)(v3 + 44) = *(**a3)++;
  v4 = a2 - 8;
  if (a2 < 8)
    goto LABEL_9;
  *(_DWORD *)(v3 + 48) = *(**a3)++;
  if ((a2 - 16) > 0xFFFFFFF3
    || (*(_QWORD *)(v3 + 56) = *(_QWORD *)**a3, **a3 += 2, v4 < 0xC)
    || (*(_DWORD *)(v3 + 64) = ***a3, ++**a3, (v4 & 0xFFFFFFF8) == 8)
    || (*(_DWORD *)(v3 + 68) = ***a3, ++**a3, (a2 - 28) >= 0xFFFFFFF8))
  {
LABEL_9:
    v7 = v3;
    v5 = a2 - 36;
  }
  else
  {
    *(_DWORD *)(v3 + 72) = *(**a3)++;
    v7 = v3;
    v5 = a2 - 36;
    if (v5 <= 0xFFFFFFF3)
    {
      *(_QWORD *)(v3 + 80) = *(_QWORD *)**a3;
      **a3 += 2;
    }
  }
  return sub_10177CA74(&v7, v5, a3);
}

uint64_t sub_10177CA74(uint64_t *a1, int a2, _DWORD ***a3)
{
  uint64_t v3;
  uint64_t result;

  if (a2 < 4)
    return (a2 - 29);
  v3 = *a1;
  *(_DWORD *)(*a1 + 88) = *(**a3)++;
  if (a2 < 8)
    return (a2 - 29);
  *(_DWORD *)(v3 + 92) = *(**a3)++;
  if ((a2 - 4) < 8)
    return (a2 - 29);
  *(_DWORD *)(v3 + 96) = *(**a3)++;
  if (a2 == 12)
    return (a2 - 29);
  *(_BYTE *)(v3 + 100) = *(_BYTE *)**a3;
  **a3 = (_DWORD *)((char *)**a3 + 1);
  if ((a2 - 17) > 0xFFFFFFFA)
    return (a2 - 29);
  *(_DWORD *)(v3 + 104) = *(**a3)++;
  if ((a2 - 21) > 0xFFFFFFF7)
    return (a2 - 29);
  *(_DWORD *)(v3 + 108) = *(**a3)++;
  if ((a2 - 25) >= 0xFFFFFFF8)
    return (a2 - 29);
  *(_DWORD *)(v3 + 112) = *(**a3)++;
  result = (a2 - 29);
  if ((a2 - 29) <= 0xFFFFFFF7)
    *(_DWORD *)(v3 + 116) = *(**a3)++;
  return result;
}

uint64_t **sub_10177CBD4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t **)*i)
      {
        v12 = (unint64_t)i[1];
        if (v12 == v7)
        {
          if (*((unsigned __int8 *)i + 16) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  v14[16] = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t **)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_100859588((uint64_t)v24, 0);
  return i;
}

void sub_10177CE2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100859588((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **sub_10177CE44(_QWORD *a1, unsigned __int16 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_10177CEF8(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)v11 + 8) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_WORD *)v11 + 8) = **a4;
  *((_BYTE *)v11 + 18) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_10177D108(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10177D11C(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  v5 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = *(void **)a2;
  *(_QWORD *)a2 = v4;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v11;
  v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(_QWORD *)(a1 + 24))
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14)
        v15 %= v14;
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16)
        v17 %= v16;
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = a2 + 16;
  }
}

unsigned __int8 *sub_10177D228(qmi::MessageBase *a1, unsigned __int16 a2, char *a3)
{
  unsigned __int8 *result;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;

  result = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  if (v5 < 1)
  {
    v8 = 0;
    v6 = 0;
LABEL_9:
    v7 = 0;
    goto LABEL_10;
  }
  v6 = *result;
  if (v5 < 5)
  {
    v8 = 0;
    goto LABEL_9;
  }
  v7 = *(unsigned int *)(result + 1);
  if ((v5 - 9) > 0xFFFFFFF7)
  {
    v8 = 0;
    goto LABEL_10;
  }
  v8 = *(_DWORD *)(result + 5);
  if (v5 != 9)
  {
LABEL_10:
    v9 = 0;
    goto LABEL_11;
  }
  v9 = 1;
LABEL_11:
  v10 = *a3;
  *(_QWORD *)(a3 + 4) = v6 | (unint64_t)(v7 << 32);
  *((_DWORD *)a3 + 3) = v8;
  if (!v10 || (v9 & 1) == 0)
    *a3 = v9;
  return result;
}

uint64_t *sub_10177D2C0(qmi::MessageBase *a1, unsigned __int16 a2, char *a3)
{
  uint64_t *result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;

  result = (uint64_t *)qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  v6 = 0;
  if (v5 < 8)
  {
    v7 = 0;
    goto LABEL_8;
  }
  v7 = *result;
  if (v5 < 0x10)
  {
LABEL_8:
    v8 = 0;
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  v8 = result[1];
  if ((v5 - 24) > 0xFFFFFFEF)
    goto LABEL_9;
  v6 = result[2];
  if (v5 != 24)
    goto LABEL_9;
  v9 = 1;
LABEL_10:
  v10 = *a3;
  *((_QWORD *)a3 + 1) = v7;
  *((_QWORD *)a3 + 2) = v8;
  *((_QWORD *)a3 + 3) = v6;
  if (!v10 || (v9 & 1) == 0)
    *a3 = v9;
  return result;
}

uint64_t sub_10177D340(qmi::MessageBase *a1, unsigned __int16 a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD **v15;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  v14[0] = result;
  v14[1] = v5;
  if (result)
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v15 = (_QWORD **)v14;
    result = sub_10177D3D8(&v15, v5, &v9);
    if ((_DWORD)result)
      v14[0] = 0;
    v6 = *a3;
    v7 = v9;
    *(_OWORD *)(a3 + 24) = v10;
    v8 = v12;
    *(_OWORD *)(a3 + 40) = v11;
    *(_OWORD *)(a3 + 56) = v8;
    *((_QWORD *)a3 + 9) = v13;
    *(_OWORD *)(a3 + 8) = v7;
    if (!v6)
      *a3 = 1;
    if (!v14[0])
      *a3 = 0;
  }
  return result;
}

uint64_t sub_10177D3D8(_QWORD ***a1, int a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t result;

  if (a2 < 8)
    return (a2 - 72);
  v3 = *a1;
  *a3 = ***a1;
  v4 = (_QWORD *)(*v3 + 8);
  *v3 = v4;
  if (a2 < 0x10)
    return (a2 - 72);
  a3[1] = *v4;
  v5 = (_QWORD *)(*v3 + 8);
  *v3 = v5;
  if ((a2 - 24) > 0xFFFFFFEF)
    return (a2 - 72);
  a3[2] = *v5;
  v6 = (_QWORD *)(*v3 + 8);
  *v3 = v6;
  if ((a2 - 32) > 0xFFFFFFEF)
    return (a2 - 72);
  a3[3] = *v6;
  v7 = (_QWORD *)(*v3 + 8);
  *v3 = v7;
  if ((a2 - 40) > 0xFFFFFFEF)
    return (a2 - 72);
  a3[4] = *v7;
  v8 = (_QWORD *)(*v3 + 8);
  *v3 = v8;
  if ((a2 - 48) > 0xFFFFFFEF)
    return (a2 - 72);
  a3[5] = *v8;
  v9 = (_QWORD *)(*v3 + 8);
  *v3 = v9;
  if ((a2 - 56) > 0xFFFFFFEF)
    return (a2 - 72);
  a3[6] = *v9;
  v10 = (_QWORD *)(*v3 + 8);
  *v3 = v10;
  if ((a2 - 64) >= 0xFFFFFFF0)
    return (a2 - 72);
  a3[7] = *v10;
  v11 = (_QWORD *)(*v3 + 8);
  *v3 = v11;
  result = (a2 - 72);
  if ((a2 - 72) <= 0xFFFFFFEF)
  {
    a3[8] = *v11;
    *v3 += 8;
  }
  return result;
}

uint64_t sub_10177D504(qmi::MessageBase *a1, unsigned __int16 a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  _QWORD v7[2];
  _DWORD **v8;
  __int128 v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  v7[0] = result;
  v7[1] = v5;
  if (result)
  {
    v9 = 0uLL;
    v8 = (_DWORD **)v7;
    result = sub_101710340(&v8, v5, &v9);
    if ((_DWORD)result)
      v7[0] = 0;
    v6 = *a3;
    *(_OWORD *)(a3 + 4) = v9;
    if (!v6)
      *a3 = 1;
    if (!v7[0])
      *a3 = 0;
  }
  return result;
}

uint64_t *sub_10177D578(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64x2_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[2];
  char v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0xA8uLL);
  v25[0] = v14;
  v25[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  v14[30] = 127;
  *((_QWORD *)v14 + 4) = 0x7FF8000000000000;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  v15 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v14 + 5) = v15;
  *((int64x2_t *)v14 + 6) = v15;
  *((int32x2_t *)v14 + 14) = vdup_n_s32(0x7FC00000u);
  *((_WORD *)v14 + 64) = 0;
  *((_QWORD *)v14 + 15) = 0;
  *((_QWORD *)v14 + 17) = 0;
  *((_QWORD *)v14 + 18) = 0;
  v14[160] = 0;
  *((_QWORD *)v14 + 19) = 0;
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (uint64_t *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_10177D834((uint64_t)v25, 0);
  return i;
}

void sub_10177D81C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10177D834((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_10177D834(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_101705688(v2 + 2);
    operator delete(v2);
  }
}

__n128 sub_10177D878(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  *(_BYTE *)(v2 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)v2 = v3;
  *(_QWORD *)(v2 + 24) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(v2 + 40) = *((_QWORD *)a2 + 5);
  *(__int128 *)((char *)a2 + 24) = 0u;
  v4 = *((_QWORD *)a2 + 6);
  *(__int128 *)((char *)a2 + 40) = 0u;
  *(_QWORD *)(v2 + 48) = v4;
  v5 = *(__int128 *)((char *)a2 + 56);
  v6 = *(__int128 *)((char *)a2 + 72);
  v7 = *(__int128 *)((char *)a2 + 88);
  *(_WORD *)(v2 + 104) = *((_WORD *)a2 + 52);
  *(_OWORD *)(v2 + 88) = v7;
  *(_OWORD *)(v2 + 72) = v6;
  *(_OWORD *)(v2 + 56) = v5;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  result = (__n128)a2[7];
  *(__n128 *)(v2 + 112) = result;
  *(_QWORD *)(v2 + 128) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *(_BYTE *)(v2 + 136) = *((_BYTE *)a2 + 136);
  *(_QWORD *)(a1 + 8) = v2 + 144;
  return result;
}

uint64_t sub_10177D90C(qmi::MessageBase *a1, unsigned __int16 a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[2];
  _DWORD **v10;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  v9[0] = result;
  v9[1] = v5;
  if (result)
  {
    v8 = 0;
    *(_QWORD *)&v7 = 0;
    *(_QWORD *)((char *)&v7 + 7) = 0;
    v10 = (_DWORD **)v9;
    result = sub_10177D990(&v10, v5, (uint64_t)&v7);
    if ((_DWORD)result)
      v9[0] = 0;
    v6 = *a3;
    *(_OWORD *)(a3 + 8) = v7;
    *((_QWORD *)a3 + 3) = v8;
    if (!v6)
      *a3 = 1;
    if (!v9[0])
      *a3 = 0;
  }
  return result;
}

uint64_t sub_10177D990(_DWORD ***a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  _DWORD *v4;
  _BYTE *v5;
  int v6;
  uint64_t result;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _QWORD *v14;

  if (a2 <= 3 || (v3 = *a1, *(_DWORD *)a3 = ***a1, v4 = (_DWORD *)(*v3 + 4), *v3 = v4, a2 <= 7))
  {
    v6 = a2 - 8;
    return (v6 - 15);
  }
  *(_DWORD *)(a3 + 4) = *v4;
  v5 = (_BYTE *)(*v3 + 4);
  *v3 = v5;
  if (a2 == 8)
  {
    v6 = 0;
    return (v6 - 15);
  }
  *(_BYTE *)(a3 + 8) = *v5;
  v8 = (_BYTE *)(*v3 + 1);
  *v3 = v8;
  if (a2 == 9)
  {
    v6 = 1;
    return (v6 - 15);
  }
  *(_BYTE *)(a3 + 9) = *v8;
  v9 = (_BYTE *)(*v3 + 1);
  *v3 = v9;
  if (a2 == 10)
  {
    v6 = 2;
    return (v6 - 15);
  }
  *(_BYTE *)(a3 + 10) = *v9;
  v10 = (_BYTE *)(*v3 + 1);
  *v3 = v10;
  if (a2 == 11)
  {
    v6 = 3;
    return (v6 - 15);
  }
  *(_BYTE *)(a3 + 11) = *v10;
  v11 = (_BYTE *)(*v3 + 1);
  *v3 = v11;
  if (a2 == 12)
  {
    v6 = 4;
    return (v6 - 15);
  }
  *(_BYTE *)(a3 + 12) = *v11;
  v12 = (_BYTE *)(*v3 + 1);
  *v3 = v12;
  if (a2 == 13)
  {
    v6 = 5;
    return (v6 - 15);
  }
  *(_BYTE *)(a3 + 13) = *v12;
  v13 = (_BYTE *)(*v3 + 1);
  *v3 = v13;
  if (a2 == 14)
  {
    v6 = 6;
    return (v6 - 15);
  }
  *(_BYTE *)(a3 + 14) = *v13;
  v14 = (_QWORD *)(*v3 + 1);
  *v3 = v14;
  result = (a2 - 23);
  if ((a2 - 23) <= 0xFFFFFFF6)
  {
    *(_QWORD *)(a3 + 16) = *v14;
    *v3 += 8;
  }
  return result;
}

uint64_t sub_10177DB04(qmi::MessageBase *a1, unsigned __int16 a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[2];
  _WORD **v10;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  v9[0] = result;
  v9[1] = v5;
  if (result)
  {
    LODWORD(v7) = 0;
    *((_QWORD *)&v7 + 1) = 0;
    v8 = 0;
    v10 = (_WORD **)v9;
    result = sub_10177DB84(&v10, v5, (uint64_t)&v7);
    if ((_DWORD)result)
      v9[0] = 0;
    v6 = *a3;
    *(_OWORD *)(a3 + 8) = v7;
    *((_QWORD *)a3 + 3) = v8;
    if (!v6)
      *a3 = 1;
    if (!v9[0])
      *a3 = 0;
  }
  return result;
}

uint64_t sub_10177DB84(_WORD ***a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  _WORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;

  if (a2 < 2)
    return (a2 - 20);
  v3 = *a1;
  *(_WORD *)a3 = ***a1;
  v4 = (_WORD *)(*v3 + 2);
  *v3 = v4;
  if (a2 < 4)
    return (a2 - 20);
  *(_WORD *)(a3 + 2) = *v4;
  v5 = (_QWORD *)(*v3 + 2);
  *v3 = v5;
  if ((a2 - 12) >= 0xFFFFFFF6)
    return (a2 - 20);
  *(_QWORD *)(a3 + 8) = *v5;
  v6 = (_QWORD *)(*v3 + 8);
  *v3 = v6;
  result = (a2 - 20);
  if ((a2 - 20) <= 0xFFFFFFEF)
  {
    *(_QWORD *)(a3 + 16) = *v6;
    *v3 += 8;
  }
  return result;
}

uint64_t sub_10177DC10(qmi::MessageBase *a1, unsigned __int16 a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD v8[2];
  _WORD **v9;
  int v10;
  __int16 v11;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  v8[0] = result;
  v8[1] = v5;
  if (result)
  {
    v11 = 0;
    v10 = 0;
    v9 = (_WORD **)v8;
    result = sub_10177DC90(&v9, v5, (uint64_t)&v10);
    if ((_DWORD)result)
      v8[0] = 0;
    v6 = v10;
    v7 = *a3;
    *((_WORD *)a3 + 3) = v11;
    *(_DWORD *)(a3 + 2) = v6;
    if (!v7)
      *a3 = 1;
    if (!v8[0])
      *a3 = 0;
  }
  return result;
}

uint64_t sub_10177DC90(_WORD ***a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  _WORD *v4;
  _BYTE *v5;
  _BYTE *v6;

  if (a2 >= 2)
  {
    v3 = *a1;
    *(_WORD *)a3 = ***a1;
    v4 = (_WORD *)(*v3 + 2);
    *v3 = v4;
    if (a2 >= 4)
    {
      *(_WORD *)(a3 + 2) = *v4;
      v5 = (_BYTE *)(*v3 + 2);
      *v3 = v5;
      if (a2 != 4)
      {
        *(_BYTE *)(a3 + 4) = *v5;
        v6 = (_BYTE *)(*v3 + 1);
        *v3 = v6;
        if (a2 != 5)
        {
          *(_BYTE *)(a3 + 5) = *v6;
          ++*v3;
        }
      }
    }
  }
  return (a2 - 6);
}

uint64_t sub_10177DD10(qmi::MessageBase *a1, unsigned __int16 a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  __int16 v6;
  int v7;
  _QWORD v8[2];
  _WORD **v9;
  _BYTE v10[10];

  result = qmi::MessageBase::findTlvValue(a1, a2);
  v8[0] = result;
  v8[1] = v5;
  if (result)
  {
    *(_DWORD *)v10 = 0;
    v10[4] = 0;
    *(_DWORD *)&v10[6] = 0;
    v9 = (_WORD **)v8;
    result = sub_10177DD94(&v9, v5, (uint64_t)v10);
    if ((_DWORD)result)
      v8[0] = 0;
    v6 = *(_WORD *)&v10[8];
    v7 = *a3;
    *(_QWORD *)(a3 + 2) = *(_QWORD *)v10;
    *((_WORD *)a3 + 5) = v6;
    if (!v7)
      *a3 = 1;
    if (!v8[0])
      *a3 = 0;
  }
  return result;
}

uint64_t sub_10177DD94(_WORD ***a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  _WORD *v4;
  _BYTE *v5;
  _WORD *v6;
  _WORD *v7;
  uint64_t result;

  if (a2 < 2)
    return (a2 - 9);
  v3 = *a1;
  *(_WORD *)a3 = ***a1;
  v4 = (_WORD *)(*v3 + 2);
  *v3 = v4;
  if (a2 < 4)
    return (a2 - 9);
  *(_WORD *)(a3 + 2) = *v4;
  v5 = (_BYTE *)(*v3 + 2);
  *v3 = v5;
  if (a2 == 4)
    return (a2 - 9);
  *(_BYTE *)(a3 + 4) = *v5;
  v6 = (_WORD *)(*v3 + 1);
  *v3 = v6;
  if ((a2 - 7) >= 0xFFFFFFFD)
    return (a2 - 9);
  *(_WORD *)(a3 + 6) = *v6;
  v7 = (_WORD *)(*v3 + 2);
  *v3 = v7;
  result = (a2 - 9);
  if ((a2 - 9) <= 0xFFFFFFFB)
  {
    *(_WORD *)(a3 + 8) = *v7;
    *v3 += 2;
  }
  return result;
}

uint64_t sub_10177DE3C(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  _QWORD v8[2];
  _DWORD **v9;
  __int128 v10;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  v8[0] = result;
  v8[1] = v5;
  if (result)
  {
    LODWORD(v10) = 0;
    BYTE4(v10) = 0;
    *(_QWORD *)((char *)&v10 + 6) = 0;
    v9 = (_DWORD **)v8;
    result = sub_10177DECC(&v9, v5, (uint64_t)&v10);
    if ((_DWORD)result)
      v8[0] = 0;
    v6 = v10;
    v7 = WORD6(v10);
    if (*(_BYTE *)a3)
    {
      *(_DWORD *)(a3 + 12) = DWORD2(v10);
      *(_WORD *)(a3 + 16) = v7;
    }
    else
    {
      *(_QWORD *)(a3 + 12) = *((_QWORD *)&v10 + 1);
      *(_BYTE *)a3 = 1;
    }
    *(_QWORD *)(a3 + 4) = v6;
    if (!v8[0])
      *(_BYTE *)a3 = 0;
  }
  return result;
}

uint64_t sub_10177DECC(_DWORD ***a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  _BYTE *v4;
  _WORD *v5;
  _WORD *v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t result;

  if (a2 < 4)
    return (a2 - 13);
  v3 = *a1;
  *(_DWORD *)a3 = ***a1;
  v4 = (_BYTE *)(*v3 + 4);
  *v3 = v4;
  if (a2 == 4)
    return (a2 - 13);
  *(_BYTE *)(a3 + 4) = *v4;
  v5 = (_WORD *)(*v3 + 1);
  *v3 = v5;
  if ((a2 - 7) > 0xFFFFFFFC)
    return (a2 - 13);
  *(_WORD *)(a3 + 6) = *v5;
  v6 = (_WORD *)(*v3 + 2);
  *v3 = v6;
  if ((a2 - 9) > 0xFFFFFFFB)
    return (a2 - 13);
  *(_WORD *)(a3 + 8) = *v6;
  v7 = (_WORD *)(*v3 + 2);
  *v3 = v7;
  if ((a2 - 11) >= 0xFFFFFFFC)
    return (a2 - 13);
  *(_WORD *)(a3 + 10) = *v7;
  v8 = (_WORD *)(*v3 + 2);
  *v3 = v8;
  result = (a2 - 13);
  if ((a2 - 13) <= 0xFFFFFFFB)
  {
    *(_WORD *)(a3 + 12) = *v8;
    *v3 += 2;
  }
  return result;
}

unsigned __int16 *sub_10177DF98(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  unsigned __int16 *result;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;

  result = (unsigned __int16 *)qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  if (v5 < 2)
  {
    v7 = 0;
    v6 = 0;
    goto LABEL_8;
  }
  v6 = *result;
  if (v5 < 6)
  {
    v7 = 0;
    goto LABEL_8;
  }
  v7 = *(unsigned int *)(result + 1);
  if (v5 != 6)
  {
LABEL_8:
    v8 = 0;
    goto LABEL_9;
  }
  v8 = result + 3;
LABEL_9:
  v9 = v6 | (unint64_t)(v7 << 32);
  if (!*(_BYTE *)a3)
    *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 4) = v9;
  if (!v8)
    *(_BYTE *)a3 = 0;
  return result;
}

void sub_10177E01C(qmi::MessageBase *a1, unsigned __int16 a2, unsigned __int8 *a3)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7[2];
  __n128 *v8;

  v7[0] = qmi::MessageBase::findTlvValue(a1, a2);
  v7[1] = v4;
  if (v7[0])
  {
    v5 = 0uLL;
    v6 = 0;
    if (sub_10177E0C8(v7, v4, (uint64_t *)&v5))
      v7[0] = 0;
    sub_10177E744(a3, &v5);
    v8 = &v5;
    sub_10177BF20((void ***)&v8);
    if (!v7[0])
    {
      if (*a3)
      {
        v5.n128_u64[0] = (unint64_t)(a3 + 8);
        sub_10177BF20((void ***)&v5);
        *a3 = 0;
      }
    }
  }
}

void sub_10177E0AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  sub_10177BF20((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_10177E0C8(uint64_t *a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (a2 - 1);
  if (a2 < 1)
    v6 = 0;
  else
    v6 = *(unsigned __int8 *)(*a1)++;
  sub_10177E154(a3, v6);
  v8 = *a3;
  v7 = a3[1];
  while (v8 != v7)
  {
    if ((int)v5 >= 4)
    {
      v9 = *a1 + 4;
      *(_DWORD *)v8 = *(_DWORD *)*a1;
      *a1 = v9;
    }
    v5 = sub_10177E510((_WORD **)a1, (int)v5 - 4, (_QWORD *)(v8 + 8));
    v8 += 32;
  }
  return v5;
}

void sub_10177E154(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      while (v3 != v5)
      {
        v6 = *(void **)(v3 - 24);
        if (v6)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 -= 32;
      }
      a1[1] = v5;
    }
  }
  else
  {
    sub_10177E1D4(a1, a2 - v4);
  }
}

uint64_t sub_10177E1D4(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = v7 + 32 * a2;
      do
      {
        *(_DWORD *)v7 = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 8) = 0;
        v7 += 32;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      sub_100259694();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v17[4] = result;
    if (v12)
      v13 = (char *)sub_10025BA00(result, v12);
    else
      v13 = 0;
    v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    v16 = &v15[32 * a2];
    do
    {
      *(_DWORD *)v15 = 0;
      *((_QWORD *)v15 + 2) = 0;
      *((_QWORD *)v15 + 3) = 0;
      *((_QWORD *)v15 + 1) = 0;
      v15 += 32;
    }
    while (v15 != v16);
    v17[2] = v16;
    sub_10177E2F0(a1, v17);
    return sub_10177E484((uint64_t)v17);
  }
  return result;
}

void sub_10177E2DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10177E484((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10177E2F0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10177E364((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10177E364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_10177E40C((uint64_t)v11);
  return v9;
}

uint64_t sub_10177E40C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10177E440(a1);
  return a1;
}

void sub_10177E440(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(_QWORD *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_10177E484(uint64_t a1)
{
  sub_10177E4B8(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10177E4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

uint64_t sub_10177E510(_WORD **a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  _WORD *v6;
  _WORD *v7;
  _WORD **v9;

  v9 = a1;
  v4 = (a2 - 1);
  if (a2 < 1)
  {
    v5 = 0;
  }
  else
  {
    v5 = *(unsigned __int8 *)*a1;
    *a1 = (_WORD *)((char *)*a1 + 1);
  }
  sub_10177E590((uint64_t)a3, v5);
  v6 = (_WORD *)*a3;
  v7 = (_WORD *)a3[1];
  while (v6 != v7)
  {
    v4 = sub_10177E5C0(&v9, v4, v6);
    v6 += 8;
  }
  return v4;
}

void sub_10177E590(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_10177E61C((void **)a1, a2 - v2);
  }
}

uint64_t sub_10177E5C0(_WORD ***a1, int a2, _WORD *a3)
{
  _WORD **v3;
  int v4;
  uint64_t i;
  BOOL v6;

  v3 = *a1;
  v4 = a2 - 2;
  if (a2 >= 2)
    *a3 = *(*v3)++;
  for (i = 2; i != 8; i += 2)
  {
    v6 = __OFSUB__(v4, 4);
    v4 -= 4;
    if (v4 < 0 == v6)
    {
      *(_DWORD *)&a3[i] = *(_DWORD *)*v3;
      *v3 += 2;
    }
  }
  return (a2 - 14);
}

void sub_10177E61C(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      v14 = &v7[16 * a2];
      do
      {
        *(_WORD *)v7 = 0;
        *(_QWORD *)(v7 + 4) = 0;
        *((_DWORD *)v7 + 3) = 0;
        v7 += 16;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_100259694();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_10028E224(v4, v12);
    else
      v13 = 0;
    v15 = &v13[16 * v10];
    v16 = &v15[16 * a2];
    v17 = v15;
    do
    {
      *(_WORD *)v17 = 0;
      *(_QWORD *)(v17 + 4) = 0;
      *((_DWORD *)v17 + 3) = 0;
      v17 += 16;
    }
    while (v17 != v16);
    v18 = &v13[16 * v12];
    v20 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
}

__n128 sub_10177E744(unsigned __int8 *a1, __n128 *a2)
{
  uint64_t *v4;
  int v5;
  __n128 result;

  v5 = *a1;
  v4 = (uint64_t *)(a1 + 8);
  if (v5)
  {
    sub_10177E7B4(v4);
    result = *a2;
    *(__n128 *)(a1 + 8) = *a2;
    *((_QWORD *)a1 + 3) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
  }
  else
  {
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    result = *a2;
    *(__n128 *)(a1 + 8) = *a2;
    *((_QWORD *)a1 + 3) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *a1 = 1;
  }
  return result;
}

void sub_10177E7B4(uint64_t *a1)
{
  if (*a1)
  {
    sub_10177BF60(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_10177E7EC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (char *)operator new(0x40uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  v11[30] = 127;
  *(int64x2_t *)(v11 + 40) = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_QWORD *)v11 + 7) = 0x7FF8000000000000;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *(_QWORD *)v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v11)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_10177EA14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10177EA30(uint64_t a1)
{
  uint8_t buf[8];

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)buf = a1;
  operator new();
}

void sub_10177EDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  qmi::Client *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a30 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  sub_100261F44(v38 + 40);
  *(_QWORD *)(v39 - 128) = v38;
  sub_1017829A0((void ***)(v39 - 128));
  sub_1017828BC(v37);
  qmi::Client::~Client(v36);
  _Unwind_Resume(a1);
}

uint64_t sub_10177EE58(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#dms,kEventServerError\"}", (uint8_t *)v4, 0x12u);
  }
  return sub_10177EF3C(v1 + 40, 2);
}

uint64_t sub_10177EF3C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  os_log_type_t v5;
  _QWORD *v6;
  int v7;
  const char *v8;
  char *v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t **v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  _QWORD *v30;
  const char *v31;
  char *v32;
  _BYTE *v33;
  NSObject *v34;
  os_log_type_t v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  int v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  NSObject *v49;
  os_log_type_t v50;
  _QWORD *v51;
  const char *v52;
  char *v53;
  int v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  const char *v68;
  char *v69;
  int v70;
  _BYTE *v71;
  _BYTE *v72;
  void **v73;
  char *v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  char *v80;
  _BYTE *v81;
  char *v82;
  char *v83;
  _QWORD *v84;
  const char *v85;
  char *v86;
  _QWORD *v87;
  uint64_t v88;
  const char *v89;
  char *v90;
  int v91;
  _BYTE *v92;
  _BYTE *v93;
  void **v94;
  char *v95;
  char *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  char *v101;
  int v102;
  _BYTE *v103;
  _BYTE *v104;
  void **v105;
  char *v106;
  char *v107;
  const char *v108;
  const char *v109;
  unsigned int v110;
  int v111;
  void *v112[2];
  char v113;
  int v114;
  _BYTE __p[12];
  __int16 v116;
  _BYTE *v117;
  __int16 v118;
  void **v119;
  _BYTE buf[12];
  __int16 v121;
  _BYTE *v122;
  __int16 v123;
  _BYTE *v124;
  _BYTE v125[12];
  __int16 v126;
  _BYTE *v127;
  char v128;

  ++*(_DWORD *)(a1 + 88);
  v114 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_101786564();
    goto LABEL_197;
  }
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_1017866D4(qword_1022A0070 == -1);
    goto LABEL_197;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
  v4 = qword_1022A0078;
  v5 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v5))
  {
    v6 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *(_DWORD *)(a1 + 4);
    v8 = "StateUnknown";
    if (v7 == 1)
      v8 = "Connected";
    if (v7)
      v9 = (char *)v8;
    else
      v9 = "Disconnected";
    sub_1015A2E04(__p, v9);
    v10 = SHIBYTE(v118);
    v11 = *(_BYTE **)__p;
    sub_1017827A8(a2, v125);
    v12 = __p;
    if (v10 < 0)
      v12 = v11;
    if (v128 >= 0)
      v13 = v125;
    else
      v13 = *(_BYTE **)v125;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v6;
    v121 = 2080;
    v122 = v12;
    v123 = 2080;
    v124 = v13;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v128 < 0)
      operator delete(*(void **)v125);
    if (SHIBYTE(v118) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v64 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v64 = (_QWORD *)*v64;
    v65 = qword_1022A0078;
    v66 = *(unsigned __int8 *)(a1 + 120);
    v67 = *(_DWORD *)(a1 + 4);
    v68 = "StateUnknown";
    if (v67 == 1)
      v68 = "Connected";
    if (v67)
      v69 = (char *)v68;
    else
      v69 = "Disconnected";
    sub_1015A2E04(v125, v69);
    v70 = v128;
    v71 = *(_BYTE **)v125;
    sub_1017827A8(a2, v112);
    v72 = v125;
    if (v70 < 0)
      v72 = v71;
    if (v113 >= 0)
      v73 = v112;
    else
      v73 = (void **)v112[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v64;
    v116 = 2080;
    v117 = v72;
    v118 = 2080;
    v119 = v73;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v65, v66, "%scurrent_state,%s,event,%s", __p, 32, v109);
    v75 = v74;
    if (v113 < 0)
      operator delete(v112[0]);
    if (v128 < 0)
      operator delete(*(void **)v125);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLQmiDmsController>::handleEvent(Event) [T = CLQmiDmsController]", "%s\n", v75);
    if (v75 != buf)
      free(v75);
  }
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_33;
  v15 = (uint64_t **)(a1 + 8);
  v16 = *(_DWORD *)(a1 + 4);
  v17 = a1 + 16;
  do
  {
    v18 = *(_DWORD *)(v14 + 32);
    v19 = v18 < v16;
    if (v18 >= v16)
      v20 = (uint64_t *)v14;
    else
      v20 = (uint64_t *)(v14 + 8);
    if (!v19)
      v17 = v14;
    v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 16 || v16 < *(_DWORD *)(v17 + 32))
  {
LABEL_33:
    sub_101786844();
    goto LABEL_197;
  }
  v22 = *(uint64_t (**)(_QWORD *, uint64_t))(v17 + 40);
  v21 = *(_QWORD *)(v17 + 48);
  v23 = (_QWORD *)(*(_QWORD *)(a1 + 32) + (v21 >> 1));
  if ((v21 & 1) != 0)
    v22 = *(uint64_t (**)(_QWORD *, uint64_t))(*v23 + v22);
  v24 = v22(v23, a2);
  v25 = v24;
  v111 = v24;
  if (a2 <= 1 && (_DWORD)v24 != v114)
  {
    sub_101786C94();
    goto LABEL_197;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v27 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v27 = (_QWORD *)*v27;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v84 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v84 = (_QWORD *)*v84;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v84;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v86 = (char *)v85;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLQmiDmsController>::handleEvent(Event) [T = CLQmiDmsController]", "%s\n", v85);
      if (v86 != buf)
        free(v86);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
  v28 = qword_1022A0078;
  v29 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v29))
  {
    v30 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v30 = (_QWORD *)*v30;
    v31 = "StateUnknown";
    if ((_DWORD)v25 == 1)
      v31 = "Connected";
    if ((_DWORD)v25)
      v32 = (char *)v31;
    else
      v32 = "Disconnected";
    sub_1015A2E04(buf, v32);
    if (v123 >= 0)
      v33 = buf;
    else
      v33 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v30;
    v116 = 2080;
    v117 = v33;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v123) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v76 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v76 = (_QWORD *)*v76;
    v77 = qword_1022A0078;
    v78 = *(unsigned __int8 *)(a1 + 120);
    v79 = "StateUnknown";
    if ((_DWORD)v25 == 1)
      v79 = "Connected";
    if ((_DWORD)v25)
      v80 = (char *)v79;
    else
      v80 = "Disconnected";
    sub_1015A2E04(__p, v80);
    if (v118 >= 0)
      v81 = __p;
    else
      v81 = *(_BYTE **)__p;
    *(_DWORD *)v125 = 136315394;
    *(_QWORD *)&v125[4] = v76;
    v126 = 2080;
    v127 = v81;
    LODWORD(v108) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, v78, "%snewState,%s", v125, v108);
    v83 = v82;
    if (SHIBYTE(v118) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLQmiDmsController>::handleEvent(Event) [T = CLQmiDmsController]", "%s\n", v83);
    if (v83 != buf)
      free(v83);
  }
  if ((_DWORD)v25 != v114)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v34 = qword_1022A0078;
    v35 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v35))
    {
      v36 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v36 = (_QWORD *)*v36;
      v37 = "StateUnknown";
      if (v114 == 1)
        v37 = "Connected";
      if (v114)
        v38 = (char *)v37;
      else
        v38 = "Disconnected";
      sub_1015A2E04(__p, v38);
      v39 = SHIBYTE(v118);
      v40 = *(_BYTE **)__p;
      sub_1015A2E04(v125, "Exit");
      v41 = __p;
      if (v39 < 0)
        v41 = v40;
      if (v128 >= 0)
        v42 = v125;
      else
        v42 = *(_BYTE **)v125;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v36;
      v121 = 2080;
      v122 = v41;
      v123 = 2080;
      v124 = v42;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%soldState,%s,event,%s", buf, 0x20u);
      if (v128 < 0)
        operator delete(*(void **)v125);
      if (SHIBYTE(v118) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v87 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v87 = (_QWORD *)*v87;
      v88 = qword_1022A0078;
      v110 = *(unsigned __int8 *)(a1 + 120);
      v89 = "StateUnknown";
      if (v114 == 1)
        v89 = "Connected";
      if (v114)
        v90 = (char *)v89;
      else
        v90 = "Disconnected";
      sub_1015A2E04(v125, v90);
      v91 = v128;
      v92 = *(_BYTE **)v125;
      sub_1015A2E04(v112, "Exit");
      v93 = v125;
      if (v91 < 0)
        v93 = v92;
      if (v113 >= 0)
        v94 = v112;
      else
        v94 = (void **)v112[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v87;
      v116 = 2080;
      v117 = v93;
      v118 = 2080;
      v119 = v94;
      LODWORD(v108) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v88, v110, "%soldState,%s,event,%s", __p, v108, v109);
      v96 = v95;
      if (v113 < 0)
        operator delete(v112[0]);
      v15 = (uint64_t **)(a1 + 8);
      if (v128 < 0)
        operator delete(*(void **)v125);
      sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLQmiDmsController>::handleEvent(Event) [T = CLQmiDmsController]", "%s\n", v96);
      if (v96 != buf)
        free(v96);
    }
    v43 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = &v114;
    v44 = sub_1000610B4(v15, &v114, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v45 = v44[5];
    v46 = (uint64_t)v44[6];
    v47 = (_QWORD *)(v43 + (v46 >> 1));
    if ((v46 & 1) != 0)
      v45 = *(uint64_t **)(*v47 + v45);
    v48 = ((uint64_t (*)(_QWORD *, uint64_t))v45)(v47, 1);
    if (v48 == v114)
    {
      *(_DWORD *)(a1 + 4) = v25;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v49 = qword_1022A0078;
      v50 = *(_BYTE *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1022A0078, v50))
      {
        v51 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v51 = (_QWORD *)*v51;
        v52 = "StateUnknown";
        if ((_DWORD)v25 == 1)
          v52 = "Connected";
        if ((_DWORD)v25)
          v53 = (char *)v52;
        else
          v53 = "Disconnected";
        sub_1015A2E04(__p, v53);
        v54 = SHIBYTE(v118);
        v55 = *(_BYTE **)__p;
        sub_1015A2E04(v125, "Enter");
        v56 = __p;
        if (v54 < 0)
          v56 = v55;
        if (v128 >= 0)
          v57 = v125;
        else
          v57 = *(_BYTE **)v125;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v51;
        v121 = 2080;
        v122 = v56;
        v123 = 2080;
        v124 = v57;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "%snewState,%s,event,%s", buf, 0x20u);
        if (v128 < 0)
          operator delete(*(void **)v125);
        if (SHIBYTE(v118) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
        v97 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v97 = (_QWORD *)*v97;
        v98 = qword_1022A0078;
        v99 = *(unsigned __int8 *)(a1 + 120);
        v100 = "StateUnknown";
        if ((_DWORD)v25 == 1)
          v100 = "Connected";
        if ((_DWORD)v25)
          v101 = (char *)v100;
        else
          v101 = "Disconnected";
        sub_1015A2E04(v125, v101);
        v102 = v128;
        v103 = *(_BYTE **)v125;
        sub_1015A2E04(v112, "Enter");
        v104 = v125;
        if (v102 < 0)
          v104 = v103;
        if (v113 >= 0)
          v105 = v112;
        else
          v105 = (void **)v112[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v97;
        v116 = 2080;
        v117 = v104;
        v118 = 2080;
        v119 = v105;
        LODWORD(v108) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v98, v99, "%snewState,%s,event,%s", __p, v108, v109);
        v107 = v106;
        if (v113 < 0)
          operator delete(v112[0]);
        if (v128 < 0)
          operator delete(*(void **)v125);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLQmiDmsController>::handleEvent(Event) [T = CLQmiDmsController]", "%s\n", v107);
        if (v107 != buf)
          free(v107);
      }
      v58 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)buf = &v111;
      v59 = sub_1000610B4(v15, &v111, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v60 = v59[5];
      v61 = (uint64_t)v59[6];
      v62 = (_QWORD *)(v58 + (v61 >> 1));
      if ((v61 & 1) != 0)
        v60 = *(uint64_t **)(*v62 + v60);
      v25 = ((uint64_t (*)(_QWORD *, _QWORD))v60)(v62, 0);
      if ((_DWORD)v25 == v111)
        goto LABEL_109;
      sub_1017869B4();
    }
    else
    {
      sub_101786B24();
    }
LABEL_197:
    __break(1u);
  }
LABEL_109:
  --*(_DWORD *)(a1 + 88);
  return v25;
}

void sub_10177FD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_10177FDBC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#dms,kEventStarted\"}", (uint8_t *)v4, 0x12u);
  }
  return sub_10177EF3C(v1 + 40, 3);
}

uint64_t sub_10177FEA0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#dms,kEventStopped\"}", (uint8_t *)v4, 0x12u);
  }
  return sub_10177EF3C(v1 + 40, 2);
}

void sub_10177FF84(id a1)
{
  NSObject *v1;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
  v1 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    v3 = 2082;
    v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#dms,kEventLowPowerExit\"}", (uint8_t *)v2, 0x12u);
  }
}

void sub_101780058(id a1)
{
  NSObject *v1;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
  v1 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    v3 = 2082;
    v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#dms,kEventLowPower\"}", (uint8_t *)v2, 0x12u);
  }
}

uint64_t **sub_10178012C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  const char *v11;
  char *v12;
  _BYTE *v13;
  uint64_t **result;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  void **v20;
  char *v21;
  char *v22;
  void *v23[2];
  char v24;
  int v25;
  _BYTE __p[12];
  __int16 v27;
  int v28;
  __int16 v29;
  void **v30;
  _BYTE buf[12];
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE *v35;

  v25 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_101786E04(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    v11 = "StateUnknown";
    if (v7 == 1)
      v11 = "Connected";
    if (v7)
      v12 = (char *)v11;
    else
      v12 = "Disconnected";
    sub_1015A2E04(__p, v12);
    if (SBYTE3(v30) >= 0)
      v13 = __p;
    else
      v13 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v32 = 1024;
    v33 = v7;
    v34 = 2080;
    v35 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v30) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v15 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v15 = (_QWORD *)*v15;
    v16 = qword_1022A0078;
    v17 = *(unsigned __int8 *)(v6 + 120);
    v18 = "StateUnknown";
    if (v7 == 1)
      v18 = "Connected";
    if (v7)
      v19 = (char *)v18;
    else
      v19 = "Disconnected";
    sub_1015A2E04(v23, v19);
    if (v24 >= 0)
      v20 = v23;
    else
      v20 = (void **)v23[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v15;
    v27 = 1024;
    v28 = v7;
    v29 = 2080;
    v30 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, v17, "%sstate,%d,%s", __p, 28, (const char *)v23[0]);
    v22 = v21;
    if (v24 < 0)
      operator delete(v23[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLQmiDmsController>::setStateHandler(State, StateHandler) [T = CLQmiDmsController]", "%s\n", v22);
    if (v22 != buf)
      free(v22);
  }
  *(_QWORD *)buf = &v25;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v25, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

BOOL sub_101780440(uint64_t a1, int a2)
{
  _BOOL8 result;

  if (a2 != 5)
    return a2 == 3;
  result = 0;
  *(_BYTE *)(a1 + 208) = 1;
  return result;
}

uint64_t sub_10178046C(uint64_t a1, int a2)
{
  uint64_t result;

  result = 1;
  switch(a2)
  {
    case 0:
      if (*(_BYTE *)(a1 + 208))
        goto LABEL_3;
      return result;
    case 1:
      sub_10178094C(a1 + 40, 6);
      goto LABEL_8;
    case 2:
      return 0;
    case 4:
      goto LABEL_4;
    case 5:
LABEL_3:
      *(_DWORD *)(a1 + 168) = 0;
LABEL_4:
      sub_101780820(a1);
      goto LABEL_8;
    case 6:
      sub_101780DDC(a1);
LABEL_8:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1017804E4()
{
  *(_BYTE *)operator new(1uLL) = 38;
  sub_101781E14();
}

void sub_101780784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1017807CC(uint64_t a1)
{
  void **v2;

  **(_BYTE **)(a1 + 216) = 0;
  sub_100261F44(a1 + 216);
  v2 = (void **)(a1 + 176);
  sub_1017829A0(&v2);
  sub_1017828BC(a1 + 40);
  qmi::Client::~Client((qmi::Client *)a1);
}

void sub_101780820(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  void (***v8)(_QWORD, uint64_t, _QWORD *);
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[6];
  std::__shared_weak_count *v12;

  v2 = *(unsigned int *)(a1 + 168);
  v3 = *(_QWORD *)(a1 + 176);
  if (v2 >= (*(_QWORD *)(a1 + 184) - v3) >> 3)
  {
    *(_BYTE *)(a1 + 208) = 0;
    sub_101781254(a1 + 40, 5, 86400.0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 216);
    v5 = *(std::__shared_weak_count **)(a1 + 224);
    if (v5)
    {
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
      v2 = *(unsigned int *)(a1 + 168);
      v3 = *(_QWORD *)(a1 + 176);
    }
    v8 = *(void (****)(_QWORD, uint64_t, _QWORD *))(v3 + 8 * v2);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3321888768;
    v11[2] = sub_101781D24;
    v11[3] = &unk_1021CE6B8;
    v11[4] = a1;
    v11[5] = v4;
    v12 = v5;
    if (v5)
    {
      v9 = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    (**v8)(v8, a1, v11);
    ++*(_DWORD *)(a1 + 168);
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_101780928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count *v16;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(exception_object);
}

void sub_10178094C(uint64_t a1, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_1017827A8(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_1017827A8(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLQmiDmsController>::cancelTimeoutEvent(Event) [T = CLQmiDmsController]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_1017827A8(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_1017827A8(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

void sub_101780DDC(uint64_t a1)
{
  const qmi::MutableMessageBase *v2;
  void *v3;
  _BYTE v4[32];
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  _QWORD aBlock[5];

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v4, 0x2Fu);
  v5 = a1;
  v6 = QMIServiceMsg::create((QMIServiceMsg *)v4, v2);
  v7 = 25000;
  v8 = 0;
  v9 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_101782BA0;
  aBlock[3] = &unk_1021C6CE8;
  aBlock[4] = &stru_1021CE698;
  v3 = _Block_copy(aBlock);
  v9 = v3;
  if (v6)
  {
    qmi::Client::send(v5, &v5);
    v3 = v9;
  }
  if (v3)
    _Block_release(v3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v4);
  sub_101781254(a1 + 40, 6, 4.0);
}

void sub_101780EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_1016A15B0(&a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_101780ECC(id a1, const void *a2)
{
  NSObject *v3;
  uint64_t v4;
  double v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  double v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  double v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  char v21[8];
  void *__p;
  void *v23;

  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(double *)&v4 = COERCE_DOUBLE(qmi::asString(*((unsigned int *)a2 + 1)));
      *(_DWORD *)buf = 68289283;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2081;
      v16 = *(double *)&v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,sendGetTime,response failed\", \"error\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  else
  {
    sub_10178120C((qmi::MessageBase *)a2, v21);
    if (v21[0])
    {
      v8 = 0;
      v9 = 0;
      v5 = sub_1005155E0((unint64_t)((double)(((unint64_t)*(unsigned int *)((char *)__p + 2) << 16) | ((unint64_t)*((unsigned __int8 *)__p + 1) << 8) | *(unsigned __int8 *)__p)
                                          * 1.25));
      sub_100073658(&v9, &v8, v5);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289794;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2050;
        v16 = v5;
        v17 = 1026;
        v18 = v9;
        v19 = 1026;
        v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#dms,gpsTime\", \"now\":\"%{public}f\", \"week\":%{public}u, \"tow\":%{public}u}", buf, 0x28u);
      }
    }
    LOBYTE(v9) = 0;
    sub_10169DD40((qmi::MessageBase *)a2, 0x10u, (uint64_t)&v9);
    if ((_BYTE)v9)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        if (!(_BYTE)v9)
          __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
        *(_DWORD *)buf = 68289282;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2050;
        v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#dms,sysTime\", \"sysTime\":%{public}lld}", buf, 0x1Cu);
      }
    }
    if (v21[0] && __p)
    {
      v23 = __p;
      operator delete(__p);
    }
  }
}

void sub_1017811C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20)
{
  if (a18)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10178120C(qmi::MessageBase *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0;
  sub_101782A1C(a1, 1u, (uint64_t)a2);
}

void sub_101781238(_Unwind_Exception *exception_object)
{
  _BYTE *v1;

  if (*v1)
    sub_1016A0804((uint64_t)v1);
  _Unwind_Resume(exception_object);
}

void sub_101781254(uint64_t a1, signed int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLQmiDmsController>::setTimeoutEvent(Event, double) [T = CLQmiDmsController]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_1017827A8(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_1017827A8(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLQmiDmsController>::setTimeoutEvent(Event, double) [T = CLQmiDmsController]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_1017827A8(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_1017827A8(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLQmiDmsController>::setTimeoutEvent(Event, double) [T = CLQmiDmsController]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), (int *)&v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_101782CDC;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_1017827A8(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_1017827A8(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

void sub_101781D24(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _BYTE *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = (_BYTE *)a1[5];
      if (v6 && *v6)
        sub_10177EF3C(v3 + 40, 4);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_101781DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101781DE0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_101781E04(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_101781E14()
{
  operator new();
}

void sub_101782070(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_1017820B4()
{
  operator new();
}

void sub_1017822C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_10178230C()
{
  operator new();
}

void sub_101782520(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_101782564()
{
  operator new();
}

void sub_101782788(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1017827A8@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 6)
    v2 = "EventUnknown";
  else
    v2 = off_1021CE9C0[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_1017827D4(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101782804(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10178282C(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void sub_10178286C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021CE778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101782880(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021CE778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1017828BC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_101782924(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_101782924(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_10178094C(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_1017829A0(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_101782A1C(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  __n128 __p;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = qmi::MessageBase::findTlvValue(a1, a2);
  v8[1] = v4;
  if (v8[0])
  {
    __p = 0uLL;
    v7 = 0;
    if (sub_101782AC8(v8, v4, __p.n128_u64))
      v8[0] = 0;
    sub_10169F020(a3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (!v8[0] && *(_BYTE *)a3)
    {
      v5 = *(void **)(a3 + 8);
      if (v5)
      {
        *(_QWORD *)(a3 + 16) = v5;
        operator delete(v5);
      }
      *(_BYTE *)a3 = 0;
    }
  }
}

void sub_101782AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101782AC8(_QWORD *a1, int a2, unint64_t *a3)
{
  int v4;
  unint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _BYTE *v9;
  _BYTE *v10;
  int v11;

  v4 = a2;
  if (a2 <= 0)
  {
    v6 = 0;
    v8 = a3 + 1;
    v7 = (_BYTE *)a3[1];
    v9 = (_BYTE *)*a3;
    v10 = &v7[-*a3];
  }
  else
  {
    v6 = *(unsigned __int8 *)(*a1)++;
    v8 = a3 + 1;
    v7 = (_BYTE *)a3[1];
    v9 = (_BYTE *)*a3;
    v10 = &v7[-*a3];
    if (v6 > (unint64_t)v10)
    {
      sub_1005176A0(a3, v6 - (_QWORD)v10);
      v9 = (_BYTE *)*a3;
      v7 = (_BYTE *)a3[1];
      goto LABEL_7;
    }
  }
  if ((unint64_t)v10 > v6)
  {
    v7 = &v9[v6];
    *v8 = &v9[v6];
  }
LABEL_7:
  if (v9 == v7)
    return (v4 - 1);
  v11 = (_DWORD)v9 + v4;
  do
  {
    if (v4 >= 2)
      *v9 = *(_BYTE *)(*a1)++;
    ++v9;
    --v4;
  }
  while (v9 != v7);
  return (v11 + ~(_DWORD)v7);
}

void sub_101782BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_101782BFC(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101782BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101782BFC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101782C9C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1016A171C((uint64_t)a2);
  }
}

void sub_101782C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

qmi::ResponseBase *sub_101782C9C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x2Fu);
  return a1;
}

void sub_101782CC8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101782CDC(uint64_t a1)
{
  return sub_10177EF3C(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t sub_101782CEC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_101782D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const qmi::MutableMessageBase *v6;
  void *v7;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  _BYTE v14[32];
  _QWORD aBlock[5];

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14, 0x5558u);
  *(_DWORD *)sub_101783844((uint64_t)v14, 1) = *(_DWORD *)(a1 + 8);
  v9 = a2;
  v10 = QMIServiceMsg::create((QMIServiceMsg *)v14, v6);
  v11 = 25000;
  v12 = 0;
  v13 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_101782F00;
  v8[3] = &unk_1021CE810;
  v8[4] = a3;
  v8[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_101783A84;
  aBlock[3] = &unk_1021C6CE8;
  aBlock[4] = v8;
  v7 = _Block_copy(aBlock);
  v13 = v7;
  if (v10)
  {
    qmi::Client::send(v9, &v9);
    v7 = v13;
  }
  if (v7)
    _Block_release(v7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_101782E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_1016A15B0((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101782E70(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CE7C8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101782EB0(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CE7C8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_101782F00(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int128 __p;
  __int16 v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 40);
  if (a2[1])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(v4 + 8);
      v7 = qmi::asString(a2[1]);
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      LOWORD(__p) = 2082;
      *(_QWORD *)((char *)&__p + 2) = "";
      WORD5(__p) = 1026;
      HIDWORD(__p) = v6;
      v19 = 2081;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,response failed\", \"nv\":%{public}d, \"error\":%{private, location:escape_only}s}", buf, 0x22u);
    }
  }
  else
  {
    sub_101783128((qmi::MessageBase *)a2, buf);
    if (buf[0])
    {
      sub_101783170(v4, (char **)&__p);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_DWORD *)(v4 + 8);
        v11[0] = 68289282;
        v11[1] = 0;
        v12 = 2082;
        v13 = "";
        v14 = 1026;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,missing value\", \"nv\":%{public}d}", (uint8_t *)v11, 0x18u);
      }
    }
    if (buf[0] && (_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1017830FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101783128(qmi::MessageBase *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0;
  sub_101783AE0(a1, 0x10u, (uint64_t)a2);
}

void sub_101783154(_Unwind_Exception *exception_object)
{
  _BYTE *v1;

  if (*v1)
    sub_1016A0804((uint64_t)v1);
  _Unwind_Resume(exception_object);
}

void sub_101783170(uint64_t a1, char **a2)
{
  NSObject *v3;
  int v4;
  int v5;
  void **v6;
  void **v7;
  void **v8;
  NSObject *v9;
  int v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  NSObject *v18;
  int v19;
  int v20;
  void **v21;
  void **v22;
  void **v23;
  const char *v24;
  int v25;
  int v26;
  void **v27;
  void **v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;
  _QWORD v36[3];
  _QWORD v37[10];
  char v38;
  uint64_t v39;
  void *__s2;
  unsigned __int8 *v41;
  uint8_t buf[8];
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  void **v48;
  __int16 v49;
  void **v50;
  uint8_t v51[8];
  __int16 v52;
  _BYTE v53[14];
  _BYTE v54[60];
  void *v55;
  char v56;
  uint64_t v57;

  sub_101783B8C(a1, a2, (unint64_t *)&__s2);
  sub_100263E50((uint64_t)v36);
  sub_101783CE4((unsigned __int8 *)__s2, v41, (uint64_t)v36);
  if (*(_BYTE *)(a1 + 48))
  {
    sub_100263E50((uint64_t)v51);
    sub_101783CE4(*(unsigned __int8 **)(a1 + 24), *(unsigned __int8 **)(a1 + 32), (uint64_t)v51);
    if (!memcmp(*(const void **)(a1 + 24), __s2, *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v18 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        goto LABEL_56;
      v19 = *(_DWORD *)(a1 + 8);
      std::stringbuf::str(v34, v54);
      v20 = v35;
      v21 = (void **)v34[0];
      std::stringbuf::str(__p, v37);
      v22 = v34;
      if (v20 < 0)
        v22 = v21;
      if (v33 >= 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v43 = 2082;
      v44 = "";
      v45 = 1026;
      v46 = v19;
      v47 = 2082;
      v48 = v22;
      v49 = 2082;
      v50 = v23;
      v24 = "{\"msg%{public}.0s\":\"#bb.e,#dms,matching\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only"
            "}s, \"receieved\":%{public, location:escape_only}s}";
    }
    else
    {
      if (*(_BYTE *)(a1 + 49))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
        v3 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          v4 = *(_DWORD *)(a1 + 8);
          std::stringbuf::str(v34, v54);
          v5 = v35;
          v6 = (void **)v34[0];
          std::stringbuf::str(__p, v37);
          v7 = v34;
          if (v5 < 0)
            v7 = v6;
          if (v33 >= 0)
            v8 = __p;
          else
            v8 = (void **)__p[0];
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&buf[4] = 0;
          v43 = 2082;
          v44 = "";
          v45 = 1026;
          v46 = v4;
          v47 = 2082;
          v48 = v7;
          v49 = 2082;
          v50 = v8;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only}s, \"receieved\":%{public, location:escape_only}s}", buf, 0x2Cu);
          if (v33 < 0)
            operator delete(__p[0]);
          if (v35 < 0)
            operator delete(v34[0]);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
        }
        v9 = qword_1022A0078;
        if (!os_signpost_enabled((os_log_t)qword_1022A0078))
          goto LABEL_56;
        v10 = *(_DWORD *)(a1 + 8);
        std::stringbuf::str(v34, v54);
        v11 = v35;
        v12 = (void **)v34[0];
        std::stringbuf::str(__p, v37);
        v13 = v34;
        if (v11 < 0)
          v13 = v12;
        if (v33 >= 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        v43 = 2082;
        v44 = "";
        v45 = 1026;
        v46 = v10;
        v47 = 2082;
        v48 = v13;
        v49 = 2082;
        v50 = v14;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning,#bb.e,#dms,mismatch", "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only}s, \"receieved\":%{public, location:escape_only}s}", buf, 0x2Cu);
LABEL_52:
        if (v33 < 0)
          operator delete(__p[0]);
        if (v35 < 0)
          operator delete(v34[0]);
LABEL_56:
        *(_QWORD *)&v53[6] = v30;
        if (v56 < 0)
          operator delete(v55);
        std::streambuf::~streambuf(v54);
        std::ios::~ios(&v57);
        goto LABEL_59;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v18 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        goto LABEL_56;
      v25 = *(_DWORD *)(a1 + 8);
      std::stringbuf::str(v34, v54);
      v26 = v35;
      v27 = (void **)v34[0];
      std::stringbuf::str(__p, v37);
      v28 = v34;
      if (v26 < 0)
        v28 = v27;
      if (v33 >= 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v43 = 2082;
      v44 = "";
      v45 = 1026;
      v46 = v25;
      v47 = 2082;
      v48 = v28;
      v49 = 2082;
      v50 = v29;
      v24 = "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:es"
            "cape_only}s, \"receieved\":%{public, location:escape_only}s}";
    }
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v24, buf, 0x2Cu);
    goto LABEL_52;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
  v15 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_DWORD *)(a1 + 8);
    std::stringbuf::str(buf, v37);
    v17 = v46 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v51 = 68289538;
    *(_DWORD *)&v51[4] = 0;
    v52 = 2082;
    *(_QWORD *)v53 = "";
    *(_WORD *)&v53[8] = 1026;
    *(_DWORD *)&v53[10] = v16;
    *(_WORD *)v54 = 2082;
    *(_QWORD *)&v54[2] = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#dms,readNv\", \"nv\":%{public}d, \"receieved\":%{public, location:escape_only}s}", v51, 0x22u);
    if (SHIBYTE(v46) < 0)
      operator delete(*(void **)buf);
  }
LABEL_59:
  *(_QWORD *)((char *)v36
  v36[2] = v31;
  if (v38 < 0)
    operator delete((void *)v37[8]);
  std::streambuf::~streambuf(v37);
  std::ios::~ios(&v39);
  if (__s2)
  {
    v41 = (unsigned __int8 *)__s2;
    operator delete(__s2);
  }
}

void sub_1017837C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a17 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a62);
  sub_1018B38B4((uint64_t)&a18);
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  _Unwind_Resume(a1);
}

char *sub_101783844(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1017838B8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_1017838B8()
{
  operator new();
}

void sub_1017839D8()
{
  operator delete();
}

uint64_t sub_1017839EC()
{
  return 7;
}

uint64_t sub_1017839F4(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  v4 = *a2 + 4;
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v4 - (v3 + 3);
  return result;
}

void sub_101783A30()
{
  operator new();
}

void sub_101783A84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10172EA94(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101783ACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101783AE0(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  __n128 __p;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = qmi::MessageBase::findTlvValue(a1, a2);
  v8[1] = v4;
  if (v8[0])
  {
    __p = 0uLL;
    v7 = 0;
    if (sub_10170F78C(v8, v4, __p.n128_u64))
      v8[0] = 0;
    sub_10169F020(a3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (!v8[0] && *(_BYTE *)a3)
    {
      v5 = *(void **)(a3 + 8);
      if (v5)
      {
        *(_QWORD *)(a3 + 16) = v5;
        operator delete(v5);
      }
      *(_BYTE *)a3 = 0;
    }
  }
}

void sub_101783B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101783B8C(uint64_t a1@<X0>, char **a2@<X1>, unint64_t *a3@<X8>)
{
  char *v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  char v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  char v20;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  if (a2[1] - *a2 <= v5)
    v6 = a2[1];
  else
    v6 = &(*a2)[v5];
  if (v4 != v6)
  {
    v7 = 0;
    do
    {
      v8 = *v4;
      v9 = a3[2];
      if ((unint64_t)v7 >= v9)
      {
        v11 = *a3;
        v12 = &v7[-*a3];
        v13 = (unint64_t)(v12 + 1);
        if ((uint64_t)(v12 + 1) < 0)
          sub_100259694();
        v14 = v9 - v11;
        if (2 * v14 > v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (char *)operator new(v15);
        else
          v16 = 0;
        v17 = &v12[(_QWORD)v16];
        v18 = &v12[(_QWORD)v16];
        *v18 = v8;
        v10 = v18 + 1;
        if (v7 != (_BYTE *)v11)
        {
          v19 = &v7[~v11];
          do
          {
            v20 = *--v7;
            (v19--)[(_QWORD)v16] = v20;
          }
          while (v7 != (_BYTE *)v11);
          v7 = (_BYTE *)*a3;
          v17 = v16;
        }
        *a3 = (unint64_t)v17;
        a3[1] = (unint64_t)v10;
        a3[2] = (unint64_t)&v16[v15];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *v7 = v8;
        v10 = v7 + 1;
      }
      a3[1] = (unint64_t)v10;
      ++v4;
      v7 = v10;
    }
    while (v4 != v6);
  }
}

void sub_101783CC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101783CE4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned int v6;
  _QWORD *v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5++;
      v7 = (_QWORD *)std::ostream::operator<<(a3 + 16, v6);
      sub_100263F7C(v7, (uint64_t)",", 1);
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_101783D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const qmi::MutableMessageBase *v6;
  void *v7;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  _BYTE v14[32];
  _QWORD aBlock[5];

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14, 0x5557u);
  *(_DWORD *)sub_101783844((uint64_t)v14, 1) = *(_DWORD *)(a1 + 8);
  v9 = a2;
  v10 = QMIServiceMsg::create((QMIServiceMsg *)v14, v6);
  v11 = 25000;
  v12 = 0;
  v13 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_101783F04;
  v8[3] = &unk_1021CE810;
  v8[4] = a3;
  v8[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_10178412C;
  aBlock[3] = &unk_1021C6CE8;
  aBlock[4] = v8;
  v7 = _Block_copy(aBlock);
  v13 = v7;
  if (v10)
  {
    qmi::Client::send(v9, &v9);
    v7 = v13;
  }
  if (v7)
    _Block_release(v7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_101783E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_1016A15B0((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101783E74(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CE890;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101783EB4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CE890;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_101783F04(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int128 __p;
  __int16 v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 40);
  if (a2[1])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(v4 + 8);
      v7 = qmi::asString(a2[1]);
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      LOWORD(__p) = 2082;
      *(_QWORD *)((char *)&__p + 2) = "";
      WORD5(__p) = 1026;
      HIDWORD(__p) = v6;
      v19 = 2081;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,response failed\", \"nv\":%{public}d, \"error\":%{private, location:escape_only}s}", buf, 0x22u);
    }
  }
  else
  {
    sub_101783128((qmi::MessageBase *)a2, buf);
    if (buf[0])
    {
      sub_101783170(v4, (char **)&__p);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_DWORD *)(v4 + 8);
        v11[0] = 68289282;
        v11[1] = 0;
        v12 = 2082;
        v13 = "";
        v14 = 1026;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,missing value\", \"nv\":%{public}d}", (uint8_t *)v11, 0x18u);
      }
    }
    if (buf[0] && (_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_101784100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10178412C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10173087C(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101784174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101784188(uint64_t a1, int a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = off_1021CE8D0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_10027205C((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_BYTE *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 49) = a4;
  return a1;
}

void sub_1017841F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const qmi::MutableMessageBase *v6;
  void *v7;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  _BYTE v14[32];
  _QWORD aBlock[5];

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14, 0x5558u);
  *(_DWORD *)sub_101783844((uint64_t)v14, 1) = *(_DWORD *)(a1 + 8);
  v9 = a2;
  v10 = QMIServiceMsg::create((QMIServiceMsg *)v14, v6);
  v11 = 25000;
  v12 = 0;
  v13 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1017843A8;
  v8[3] = &unk_1021CE810;
  v8[4] = a3;
  v8[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_101783A84;
  aBlock[3] = &unk_1021C6CE8;
  aBlock[4] = v8;
  v7 = _Block_copy(aBlock);
  v13 = v7;
  if (v10)
  {
    qmi::Client::send(v9, &v9);
    v7 = v13;
  }
  if (v7)
    _Block_release(v7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_1017842EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_1016A15B0((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101784318(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CE8D0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101784358(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CE8D0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_1017843A8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int128 __p;
  __int16 v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 40);
  if (a2[1])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(v4 + 8);
      v7 = qmi::asString(a2[1]);
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      LOWORD(__p) = 2082;
      *(_QWORD *)((char *)&__p + 2) = "";
      WORD5(__p) = 1026;
      HIDWORD(__p) = v6;
      v19 = 2081;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,response failed\", \"nv\":%{public}d, \"error\":%{private, location:escape_only}s}", buf, 0x22u);
    }
  }
  else
  {
    sub_101783128((qmi::MessageBase *)a2, buf);
    if (buf[0])
    {
      sub_1017845D0(v4, (unsigned __int8 **)&__p);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_DWORD *)(v4 + 8);
        v11[0] = 68289282;
        v11[1] = 0;
        v12 = 2082;
        v13 = "";
        v14 = 1026;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,missing value\", \"nv\":%{public}d}", (uint8_t *)v11, 0x18u);
      }
    }
    if (buf[0] && (_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1017845A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017845D0(uint64_t a1, unsigned __int8 **a2)
{
  NSObject *v3;
  int v4;
  int v5;
  void **v6;
  void **v7;
  void **v8;
  NSObject *v9;
  int v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  NSObject *v18;
  int v19;
  int v20;
  void **v21;
  void **v22;
  void **v23;
  const char *v24;
  int v25;
  int v26;
  void **v27;
  void **v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;
  _QWORD v36[3];
  _QWORD v37[10];
  char v38;
  uint64_t v39;
  void *__s2;
  unsigned int *v41;
  uint8_t buf[8];
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  void **v48;
  __int16 v49;
  void **v50;
  uint8_t v51[8];
  __int16 v52;
  _BYTE v53[14];
  _BYTE v54[60];
  void *v55;
  char v56;
  uint64_t v57;

  sub_101784CA4(a1, a2, (char **)&__s2);
  sub_100263E50((uint64_t)v36);
  sub_101784ED4((unsigned int *)__s2, v41, (uint64_t)v36);
  if (*(_BYTE *)(a1 + 48))
  {
    sub_100263E50((uint64_t)v51);
    sub_101784ED4(*(unsigned int **)(a1 + 24), *(unsigned int **)(a1 + 32), (uint64_t)v51);
    if (!memcmp(*(const void **)(a1 + 24), __s2, *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v18 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        goto LABEL_56;
      v19 = *(_DWORD *)(a1 + 8);
      std::stringbuf::str(v34, v54);
      v20 = v35;
      v21 = (void **)v34[0];
      std::stringbuf::str(__p, v37);
      v22 = v34;
      if (v20 < 0)
        v22 = v21;
      if (v33 >= 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v43 = 2082;
      v44 = "";
      v45 = 1026;
      v46 = v19;
      v47 = 2082;
      v48 = v22;
      v49 = 2082;
      v50 = v23;
      v24 = "{\"msg%{public}.0s\":\"#bb.e,#dms,matching\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only"
            "}s, \"receieved\":%{public, location:escape_only}s}";
    }
    else
    {
      if (*(_BYTE *)(a1 + 49))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
        v3 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          v4 = *(_DWORD *)(a1 + 8);
          std::stringbuf::str(v34, v54);
          v5 = v35;
          v6 = (void **)v34[0];
          std::stringbuf::str(__p, v37);
          v7 = v34;
          if (v5 < 0)
            v7 = v6;
          if (v33 >= 0)
            v8 = __p;
          else
            v8 = (void **)__p[0];
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&buf[4] = 0;
          v43 = 2082;
          v44 = "";
          v45 = 1026;
          v46 = v4;
          v47 = 2082;
          v48 = v7;
          v49 = 2082;
          v50 = v8;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only}s, \"receieved\":%{public, location:escape_only}s}", buf, 0x2Cu);
          if (v33 < 0)
            operator delete(__p[0]);
          if (v35 < 0)
            operator delete(v34[0]);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
        }
        v9 = qword_1022A0078;
        if (!os_signpost_enabled((os_log_t)qword_1022A0078))
          goto LABEL_56;
        v10 = *(_DWORD *)(a1 + 8);
        std::stringbuf::str(v34, v54);
        v11 = v35;
        v12 = (void **)v34[0];
        std::stringbuf::str(__p, v37);
        v13 = v34;
        if (v11 < 0)
          v13 = v12;
        if (v33 >= 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        v43 = 2082;
        v44 = "";
        v45 = 1026;
        v46 = v10;
        v47 = 2082;
        v48 = v13;
        v49 = 2082;
        v50 = v14;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning,#bb.e,#dms,mismatch", "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only}s, \"receieved\":%{public, location:escape_only}s}", buf, 0x2Cu);
LABEL_52:
        if (v33 < 0)
          operator delete(__p[0]);
        if (v35 < 0)
          operator delete(v34[0]);
LABEL_56:
        *(_QWORD *)&v53[6] = v30;
        if (v56 < 0)
          operator delete(v55);
        std::streambuf::~streambuf(v54);
        std::ios::~ios(&v57);
        goto LABEL_59;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v18 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        goto LABEL_56;
      v25 = *(_DWORD *)(a1 + 8);
      std::stringbuf::str(v34, v54);
      v26 = v35;
      v27 = (void **)v34[0];
      std::stringbuf::str(__p, v37);
      v28 = v34;
      if (v26 < 0)
        v28 = v27;
      if (v33 >= 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v43 = 2082;
      v44 = "";
      v45 = 1026;
      v46 = v25;
      v47 = 2082;
      v48 = v28;
      v49 = 2082;
      v50 = v29;
      v24 = "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:es"
            "cape_only}s, \"receieved\":%{public, location:escape_only}s}";
    }
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v24, buf, 0x2Cu);
    goto LABEL_52;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
  v15 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_DWORD *)(a1 + 8);
    std::stringbuf::str(buf, v37);
    v17 = v46 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v51 = 68289538;
    *(_DWORD *)&v51[4] = 0;
    v52 = 2082;
    *(_QWORD *)v53 = "";
    *(_WORD *)&v53[8] = 1026;
    *(_DWORD *)&v53[10] = v16;
    *(_WORD *)v54 = 2082;
    *(_QWORD *)&v54[2] = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#dms,readNv\", \"nv\":%{public}d, \"receieved\":%{public, location:escape_only}s}", v51, 0x22u);
    if (SHIBYTE(v46) < 0)
      operator delete(*(void **)buf);
  }
LABEL_59:
  *(_QWORD *)((char *)v36
  v36[2] = v31;
  if (v38 < 0)
    operator delete((void *)v37[8]);
  std::streambuf::~streambuf(v37);
  std::ios::~ios(&v39);
  if (__s2)
  {
    v41 = (unsigned int *)__s2;
    operator delete(__s2);
  }
}

void sub_101784C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a17 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a62);
  sub_1018B38B4((uint64_t)&a18);
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  _Unwind_Resume(a1);
}

void sub_101784CA4(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, char **a3@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  if (a2[1] - *a2 <= (unint64_t)(4 * v5))
    v6 = (uint64_t)a2[1];
  else
    v6 = (uint64_t)&(*a2)[4 * v5];
  if (v4 != (unsigned __int8 *)v6)
  {
    v7 = 0;
    v8 = a3 + 2;
    do
    {
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v10 |= *v4 << v9;
        if (v9 == 24)
          break;
        ++v4;
        v9 += 8;
        if (v4 == (unsigned __int8 *)v6)
        {
          if (v9)
          {
            if ((unint64_t)v7 >= *v8)
            {
              v21 = *a3;
              v22 = (v7 - *a3) >> 2;
              v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62)
                sub_100259694();
              v24 = *v8 - (_QWORD)v21;
              if (v24 >> 1 > v23)
                v23 = v24 >> 1;
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                v25 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v25 = v23;
              if (v25)
              {
                v26 = (char *)sub_100260634((uint64_t)(a3 + 2), v25);
                v21 = *a3;
                v7 = a3[1];
              }
              else
              {
                v26 = 0;
              }
              v27 = &v26[4 * v22];
              v28 = &v26[4 * v25];
              *(_DWORD *)v27 = v10;
              v20 = v27 + 4;
              while (v7 != v21)
              {
                v29 = *((_DWORD *)v7 - 1);
                v7 -= 4;
                *((_DWORD *)v27 - 1) = v29;
                v27 -= 4;
              }
              *a3 = v27;
              a3[1] = v20;
              a3[2] = v28;
              if (v21)
                operator delete(v21);
            }
            else
            {
              *(_DWORD *)v7 = v10;
              v20 = v7 + 4;
            }
            a3[1] = v20;
          }
          return;
        }
      }
      if ((unint64_t)v7 >= *v8)
      {
        v12 = *a3;
        v13 = (v7 - *a3) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          sub_100259694();
        v15 = *v8 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)sub_100260634((uint64_t)(a3 + 2), v16);
          v12 = *a3;
          v7 = a3[1];
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = v10;
        v11 = v18 + 4;
        while (v7 != v12)
        {
          v19 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        *a3 = v18;
        a3[1] = v11;
        a3[2] = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v7 = v10;
        v11 = v7 + 4;
      }
      a3[1] = v11;
      ++v4;
      v7 = v11;
    }
    while (v4 != (unsigned __int8 *)v6);
  }
}

void sub_101784EB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101784ED4(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5++;
      v7 = (_QWORD *)std::ostream::operator<<(a3 + 16, v6);
      sub_100263F7C(v7, (uint64_t)",", 1);
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_101784F40(uint64_t a1, int a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = off_1021CE910;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_10027205C((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_BYTE *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 49) = a4;
  return a1;
}

void sub_101784FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const qmi::MutableMessageBase *v6;
  void *v7;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  _BYTE v14[32];
  _QWORD aBlock[5];

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14, 0x5557u);
  *(_DWORD *)sub_101783844((uint64_t)v14, 1) = *(_DWORD *)(a1 + 8);
  v9 = a2;
  v10 = QMIServiceMsg::create((QMIServiceMsg *)v14, v6);
  v11 = 25000;
  v12 = 0;
  v13 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_101785160;
  v8[3] = &unk_1021CE810;
  v8[4] = a3;
  v8[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_10178412C;
  aBlock[3] = &unk_1021C6CE8;
  aBlock[4] = v8;
  v7 = _Block_copy(aBlock);
  v13 = v7;
  if (v10)
  {
    qmi::Client::send(v9, &v9);
    v7 = v13;
  }
  if (v7)
    _Block_release(v7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_1017850A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_1016A15B0((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1017850D0(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CE910;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101785110(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CE910;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_101785160(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int128 __p;
  __int16 v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 40);
  if (a2[1])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(v4 + 8);
      v7 = qmi::asString(a2[1]);
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      LOWORD(__p) = 2082;
      *(_QWORD *)((char *)&__p + 2) = "";
      WORD5(__p) = 1026;
      HIDWORD(__p) = v6;
      v19 = 2081;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,response failed\", \"nv\":%{public}d, \"error\":%{private, location:escape_only}s}", buf, 0x22u);
    }
  }
  else
  {
    sub_101783128((qmi::MessageBase *)a2, buf);
    if (buf[0])
    {
      sub_1017845D0(v4, (unsigned __int8 **)&__p);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_DWORD *)(v4 + 8);
        v11[0] = 68289282;
        v11[1] = 0;
        v12 = 2082;
        v13 = "";
        v14 = 1026;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,missing value\", \"nv\":%{public}d}", (uint8_t *)v11, 0x18u);
      }
    }
    if (buf[0] && (_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10178535C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101785388(uint64_t a1, int a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = off_1021CE950;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_100BFCC24((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1);
  *(_BYTE *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 49) = a4;
  return a1;
}

void sub_1017853F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const qmi::MutableMessageBase *v6;
  void *v7;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  _BYTE v14[32];
  _QWORD aBlock[5];

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14, 0x5558u);
  *(_DWORD *)sub_101783844((uint64_t)v14, 1) = *(_DWORD *)(a1 + 8);
  v9 = a2;
  v10 = QMIServiceMsg::create((QMIServiceMsg *)v14, v6);
  v11 = 25000;
  v12 = 0;
  v13 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1017855A8;
  v8[3] = &unk_1021CE810;
  v8[4] = a3;
  v8[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_101783A84;
  aBlock[3] = &unk_1021C6CE8;
  aBlock[4] = v8;
  v7 = _Block_copy(aBlock);
  v13 = v7;
  if (v10)
  {
    qmi::Client::send(v9, &v9);
    v7 = v13;
  }
  if (v7)
    _Block_release(v7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_1017854EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_1016A15B0((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101785518(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CE950;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101785558(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CE950;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_1017855A8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int128 __p;
  __int16 v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 40);
  if (a2[1])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(v4 + 8);
      v7 = qmi::asString(a2[1]);
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      LOWORD(__p) = 2082;
      *(_QWORD *)((char *)&__p + 2) = "";
      WORD5(__p) = 1026;
      HIDWORD(__p) = v6;
      v19 = 2081;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,response failed\", \"nv\":%{public}d, \"error\":%{private, location:escape_only}s}", buf, 0x22u);
    }
  }
  else
  {
    sub_101783128((qmi::MessageBase *)a2, buf);
    if (buf[0])
    {
      sub_1017857D0(v4, (unsigned __int8 **)&__p);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_DWORD *)(v4 + 8);
        v11[0] = 68289282;
        v11[1] = 0;
        v12 = 2082;
        v13 = "";
        v14 = 1026;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,missing value\", \"nv\":%{public}d}", (uint8_t *)v11, 0x18u);
      }
    }
    if (buf[0] && (_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1017857A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017857D0(uint64_t a1, unsigned __int8 **a2)
{
  NSObject *v3;
  int v4;
  int v5;
  void **v6;
  void **v7;
  void **v8;
  NSObject *v9;
  int v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  NSObject *v18;
  int v19;
  int v20;
  void **v21;
  void **v22;
  void **v23;
  const char *v24;
  int v25;
  int v26;
  void **v27;
  void **v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;
  _QWORD v36[3];
  _QWORD v37[10];
  char v38;
  uint64_t v39;
  void *__s2;
  unsigned __int16 *v41;
  uint8_t buf[8];
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  void **v48;
  __int16 v49;
  void **v50;
  uint8_t v51[8];
  __int16 v52;
  _BYTE v53[14];
  _BYTE v54[60];
  void *v55;
  char v56;
  uint64_t v57;

  sub_101785EA4(a1, a2, (char **)&__s2);
  sub_100263E50((uint64_t)v36);
  sub_1017860B0((unsigned __int16 *)__s2, v41, (uint64_t)v36);
  if (*(_BYTE *)(a1 + 48))
  {
    sub_100263E50((uint64_t)v51);
    sub_1017860B0(*(unsigned __int16 **)(a1 + 24), *(unsigned __int16 **)(a1 + 32), (uint64_t)v51);
    if (!memcmp(*(const void **)(a1 + 24), __s2, *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v18 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        goto LABEL_56;
      v19 = *(_DWORD *)(a1 + 8);
      std::stringbuf::str(v34, v54);
      v20 = v35;
      v21 = (void **)v34[0];
      std::stringbuf::str(__p, v37);
      v22 = v34;
      if (v20 < 0)
        v22 = v21;
      if (v33 >= 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v43 = 2082;
      v44 = "";
      v45 = 1026;
      v46 = v19;
      v47 = 2082;
      v48 = v22;
      v49 = 2082;
      v50 = v23;
      v24 = "{\"msg%{public}.0s\":\"#bb.e,#dms,matching\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only"
            "}s, \"receieved\":%{public, location:escape_only}s}";
    }
    else
    {
      if (*(_BYTE *)(a1 + 49))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
        v3 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          v4 = *(_DWORD *)(a1 + 8);
          std::stringbuf::str(v34, v54);
          v5 = v35;
          v6 = (void **)v34[0];
          std::stringbuf::str(__p, v37);
          v7 = v34;
          if (v5 < 0)
            v7 = v6;
          if (v33 >= 0)
            v8 = __p;
          else
            v8 = (void **)__p[0];
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&buf[4] = 0;
          v43 = 2082;
          v44 = "";
          v45 = 1026;
          v46 = v4;
          v47 = 2082;
          v48 = v7;
          v49 = 2082;
          v50 = v8;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only}s, \"receieved\":%{public, location:escape_only}s}", buf, 0x2Cu);
          if (v33 < 0)
            operator delete(__p[0]);
          if (v35 < 0)
            operator delete(v34[0]);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
        }
        v9 = qword_1022A0078;
        if (!os_signpost_enabled((os_log_t)qword_1022A0078))
          goto LABEL_56;
        v10 = *(_DWORD *)(a1 + 8);
        std::stringbuf::str(v34, v54);
        v11 = v35;
        v12 = (void **)v34[0];
        std::stringbuf::str(__p, v37);
        v13 = v34;
        if (v11 < 0)
          v13 = v12;
        if (v33 >= 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        v43 = 2082;
        v44 = "";
        v45 = 1026;
        v46 = v10;
        v47 = 2082;
        v48 = v13;
        v49 = 2082;
        v50 = v14;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning,#bb.e,#dms,mismatch", "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only}s, \"receieved\":%{public, location:escape_only}s}", buf, 0x2Cu);
LABEL_52:
        if (v33 < 0)
          operator delete(__p[0]);
        if (v35 < 0)
          operator delete(v34[0]);
LABEL_56:
        *(_QWORD *)&v53[6] = v30;
        if (v56 < 0)
          operator delete(v55);
        std::streambuf::~streambuf(v54);
        std::ios::~ios(&v57);
        goto LABEL_59;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v18 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        goto LABEL_56;
      v25 = *(_DWORD *)(a1 + 8);
      std::stringbuf::str(v34, v54);
      v26 = v35;
      v27 = (void **)v34[0];
      std::stringbuf::str(__p, v37);
      v28 = v34;
      if (v26 < 0)
        v28 = v27;
      if (v33 >= 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v43 = 2082;
      v44 = "";
      v45 = 1026;
      v46 = v25;
      v47 = 2082;
      v48 = v28;
      v49 = 2082;
      v50 = v29;
      v24 = "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:es"
            "cape_only}s, \"receieved\":%{public, location:escape_only}s}";
    }
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v24, buf, 0x2Cu);
    goto LABEL_52;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
  v15 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_DWORD *)(a1 + 8);
    std::stringbuf::str(buf, v37);
    v17 = v46 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v51 = 68289538;
    *(_DWORD *)&v51[4] = 0;
    v52 = 2082;
    *(_QWORD *)v53 = "";
    *(_WORD *)&v53[8] = 1026;
    *(_DWORD *)&v53[10] = v16;
    *(_WORD *)v54 = 2082;
    *(_QWORD *)&v54[2] = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#dms,readNv\", \"nv\":%{public}d, \"receieved\":%{public, location:escape_only}s}", v51, 0x22u);
    if (SHIBYTE(v46) < 0)
      operator delete(*(void **)buf);
  }
LABEL_59:
  *(_QWORD *)((char *)v36
  v36[2] = v31;
  if (v38 < 0)
    operator delete((void *)v37[8]);
  std::streambuf::~streambuf(v37);
  std::ios::~ios(&v39);
  if (__s2)
  {
    v41 = (unsigned __int16 *)__s2;
    operator delete(__s2);
  }
}

void sub_101785E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a17 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a62);
  sub_1018B38B4((uint64_t)&a18);
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  _Unwind_Resume(a1);
}

void sub_101785EA4(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, char **a3@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  __int16 v9;
  __int16 v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int16 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  if (a2[1] - *a2 <= (unint64_t)(2 * v5))
    v6 = (uint64_t)a2[1];
  else
    v6 = (uint64_t)&(*a2)[2 * v5];
  if (v4 != (unsigned __int8 *)v6)
  {
    v7 = 0;
    v8 = a3 + 2;
    while (1)
    {
      v9 = *v4;
      if (v4 + 1 == (unsigned __int8 *)v6)
        break;
      v10 = v9 | (v4[1] << 8);
      if ((unint64_t)v7 >= *v8)
      {
        v12 = *a3;
        v13 = v7 - *a3;
        if (v13 <= -3)
          sub_100259694();
        v14 = v13 >> 1;
        v15 = *v8 - (_QWORD)v12;
        if (v15 <= (v13 >> 1) + 1)
          v16 = v14 + 1;
        else
          v16 = *v8 - (_QWORD)v12;
        if (v15 >= 0x7FFFFFFFFFFFFFFELL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
        {
          v18 = (char *)sub_100BFCCD8((uint64_t)(a3 + 2), v17);
          v12 = *a3;
          v7 = a3[1];
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[2 * v14];
        *(_WORD *)v19 = v10;
        v11 = v19 + 2;
        while (v7 != v12)
        {
          v20 = *((_WORD *)v7 - 1);
          v7 -= 2;
          *((_WORD *)v19 - 1) = v20;
          v19 -= 2;
        }
        *a3 = v19;
        a3[1] = v11;
        a3[2] = &v18[2 * v17];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_WORD *)v7 = v10;
        v11 = v7 + 2;
      }
      a3[1] = v11;
      v4 += 2;
      v7 = v11;
      if (v4 == (unsigned __int8 *)v6)
        return;
    }
    if ((unint64_t)v7 >= *v8)
    {
      v22 = *a3;
      v23 = v7 - *a3;
      if (v23 <= -3)
        sub_100259694();
      v24 = v23 >> 1;
      v25 = *v8 - (_QWORD)v22;
      if (v25 <= (v23 >> 1) + 1)
        v26 = v24 + 1;
      else
        v26 = *v8 - (_QWORD)v22;
      if (v25 >= 0x7FFFFFFFFFFFFFFELL)
        v27 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
      {
        v28 = (char *)sub_100BFCCD8((uint64_t)(a3 + 2), v27);
        v22 = *a3;
        v7 = a3[1];
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[2 * v24];
      v30 = &v28[2 * v27];
      *(_WORD *)v29 = v9;
      v21 = v29 + 2;
      while (v7 != v22)
      {
        v31 = *((_WORD *)v7 - 1);
        v7 -= 2;
        *((_WORD *)v29 - 1) = v31;
        v29 -= 2;
      }
      *a3 = v29;
      a3[1] = v21;
      a3[2] = v30;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *(_WORD *)v7 = v9;
      v21 = v7 + 2;
    }
    a3[1] = v21;
  }
}

void sub_10178608C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017860B0(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 *v5;
  unsigned int v6;
  _QWORD *v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5++;
      v7 = (_QWORD *)std::ostream::operator<<(a3 + 16, v6);
      sub_100263F7C(v7, (uint64_t)",", 1);
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_10178611C(uint64_t a1, int a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = off_1021CE990;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_100BFCC24((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1);
  *(_BYTE *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 49) = a4;
  return a1;
}

void sub_101786188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const qmi::MutableMessageBase *v6;
  void *v7;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  _BYTE v14[32];
  _QWORD aBlock[5];

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14, 0x5557u);
  *(_DWORD *)sub_101783844((uint64_t)v14, 1) = *(_DWORD *)(a1 + 8);
  v9 = a2;
  v10 = QMIServiceMsg::create((QMIServiceMsg *)v14, v6);
  v11 = 25000;
  v12 = 0;
  v13 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10178633C;
  v8[3] = &unk_1021CE810;
  v8[4] = a3;
  v8[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_10178412C;
  aBlock[3] = &unk_1021C6CE8;
  aBlock[4] = v8;
  v7 = _Block_copy(aBlock);
  v13 = v7;
  if (v10)
  {
    qmi::Client::send(v9, &v9);
    v7 = v13;
  }
  if (v7)
    _Block_release(v7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_101786280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_1016A15B0((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1017862AC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CE990;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1017862EC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CE990;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_10178633C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int128 __p;
  __int16 v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 40);
  if (a2[1])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(v4 + 8);
      v7 = qmi::asString(a2[1]);
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      LOWORD(__p) = 2082;
      *(_QWORD *)((char *)&__p + 2) = "";
      WORD5(__p) = 1026;
      HIDWORD(__p) = v6;
      v19 = 2081;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,response failed\", \"nv\":%{public}d, \"error\":%{private, location:escape_only}s}", buf, 0x22u);
    }
  }
  else
  {
    sub_101783128((qmi::MessageBase *)a2, buf);
    if (buf[0])
    {
      sub_1017857D0(v4, (unsigned __int8 **)&__p);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE6E8);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_DWORD *)(v4 + 8);
        v11[0] = 68289282;
        v11[1] = 0;
        v12 = 2082;
        v13 = "";
        v14 = 1026;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,missing value\", \"nv\":%{public}d}", (uint8_t *)v11, 0x18u);
      }
    }
    if (buf[0] && (_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_101786538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

#error "1017865DC: call analysis failed (funcsize=73)"

#error "10178674C: call analysis failed (funcsize=73)"

#error "1017868BC: call analysis failed (funcsize=73)"

#error "101786A2C: call analysis failed (funcsize=73)"

#error "101786B9C: call analysis failed (funcsize=73)"

#error "101786D0C: call analysis failed (funcsize=73)"

#error "101786E7C: call analysis failed (funcsize=73)"

double sub_101786F74(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021CEA08;
  *(_QWORD *)(a1 + 8) = off_10213D2B0;
  *(_DWORD *)(a1 + 16) = 43;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = off_10213D2B0;
  *(_DWORD *)(a1 + 104) = 43;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  return result;
}

uint64_t sub_101786FD4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021CEA08;
  *(_QWORD *)(a1 + 96) = off_10213D2B0;
  sub_100008848(a1 + 160, *(_QWORD **)(a1 + 168));
  sub_10047F25C((_QWORD *)(a1 + 112));
  *(_QWORD *)(a1 + 8) = off_10213D2B0;
  sub_100008848(a1 + 72, *(_QWORD **)(a1 + 80));
  sub_10047F25C((_QWORD *)(a1 + 24));
  return a1;
}

void sub_101787040(uint64_t a1)
{
  sub_101786FD4(a1);
  operator delete();
}

void sub_101787064(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  NSObject *v8;
  uint8_t *v9;
  double v10;
  NSObject *v11;
  uint8_t *v12;
  double v13;
  NSObject *v14;
  NSObject *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint8_t *v22;
  NSObject *v23;
  double v24;
  double v25;
  int v26;
  double v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  uint8_t buf[4];
  double v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;

  v2 = *(double *)((char *)a2 + 28);
  v3 = *(double *)((char *)a2 + 36);
  v24 = v3;
  v25 = v2;
  v4 = a2[63];
  if ((*(uint64_t *)&v4 <= -1 || ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&v4 - 1) >= 0xFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    if (qword_1022A0090 != -1)
      dispatch_once(&qword_1022A0090, &stru_1021CEA48);
    v11 = qword_1022A0098;
    if (os_log_type_enabled((os_log_t)qword_1022A0098, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v37 = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLGnssAltitudeFilter,update,invalid timestamp: %{public}.3lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0090 != -1)
        dispatch_once(&qword_1022A0090, &stru_1021CEA48);
      v26 = 134349056;
      v27 = v4;
      v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0098, 16, "CLGnssAltitudeFilter,update,invalid timestamp: %{public}.3lf", &v26, 12);
LABEL_62:
      v22 = v12;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssAltitudeFilter::update(GNSS::DaemonLocation &)", "%s\n", v13);
LABEL_63:
      if (v22 != buf)
        free(v22);
      return;
    }
    return;
  }
  if (v2 <= -450.0 || v2 >= 8850.0 || v3 <= 0.0)
  {
    if (qword_1022A0090 != -1)
      dispatch_once(&qword_1022A0090, &stru_1021CEA48);
    v14 = qword_1022A0098;
    if (os_log_type_enabled((os_log_t)qword_1022A0098, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134284033;
      v37 = v2;
      v38 = 2049;
      v39 = *(_QWORD *)&v3;
      v40 = 2050;
      v41 = v4;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLGnssAltitudeFilter,update,invalid altitude,%{private}.3f,altitudeAccuracy,%{private}.3f,timestamp,%{public}.3lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0090 != -1)
        dispatch_once(&qword_1022A0090, &stru_1021CEA48);
      v26 = 134284033;
      v27 = v2;
      v28 = 2049;
      v29 = *(_QWORD *)&v3;
      v30 = 2050;
      v31 = v4;
      v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0098, 16, "CLGnssAltitudeFilter,update,invalid altitude,%{private}.3f,altitudeAccuracy,%{private}.3f,timestamp,%{public}.3lf", &v26, 32);
      goto LABEL_62;
    }
    return;
  }
  if (v3 > 20.0)
  {
    if (qword_1022A0090 != -1)
      dispatch_once(&qword_1022A0090, &stru_1021CEA48);
    v8 = qword_1022A0098;
    if (os_log_type_enabled((os_log_t)qword_1022A0098, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134284033;
      v37 = v3;
      v38 = 2049;
      v39 = 0x4034000000000000;
      v40 = 2050;
      v41 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLGnssAltitudeFilter,update,measurement skipped due to large altitude uncertainty,altitudeAccuracy,%{private}.3f,maxAcceptedAltAccuracy,%{private}.3f,timestamp,%{public}.3lf", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0090 != -1)
      dispatch_once(&qword_1022A0090, &stru_1021CEA48);
    v26 = 134284033;
    v27 = v3;
    v28 = 2049;
    v29 = 0x4034000000000000;
    v30 = 2050;
    v31 = v4;
    v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0098, 2, "CLGnssAltitudeFilter,update,measurement skipped due to large altitude uncertainty,altitudeAccuracy,%{private}.3f,maxAcceptedAltAccuracy,%{private}.3f,timestamp,%{public}.3lf", &v26, 32);
    goto LABEL_52;
  }
  if (vabdd_f64(v4, *(double *)(a1 + 184)) > 12.0)
  {
    sub_10047F1D4((_QWORD *)(a1 + 8));
    sub_10047F1D4((_QWORD *)(a1 + 96));
    *(_QWORD *)(a1 + 184) = 0;
  }
  sub_10009E858(a1 + 8, &v25);
  sub_10009E858(a1 + 96, &v24);
  if (sub_10009E784((_QWORD *)(a1 + 8), 2, &v25)
    && (sub_10009E784((_QWORD *)(a1 + 96), 2, &v24) & 1) != 0)
  {
    a2[82] = v25;
    a2[83] = v24;
    *(double *)(a1 + 184) = v4;
    if (qword_1022A0090 != -1)
      dispatch_once(&qword_1022A0090, &stru_1021CEA48);
    v17 = qword_1022A0098;
    if (os_log_type_enabled((os_log_t)qword_1022A0098, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_QWORD *)((char *)a2 + 28);
      v19 = *(double *)((char *)a2 + 36);
      *(_DWORD *)buf = 134350081;
      v37 = v4;
      v38 = 2049;
      v39 = v18;
      v40 = 2049;
      v41 = v19;
      v42 = 2049;
      v43 = v25;
      v44 = 2049;
      v45 = v24;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLGnssAltitudeFilter,update,timestamp,%{public}.3lf,rawAltitude,%{private}.3f,rawAltitudeUnc,%{private}.3f,medianFilterAltitude,%{private}.3f,medianFilterAltitudeUnc,%{private}.3f", buf, 0x34u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0090 != -1)
      dispatch_once(&qword_1022A0090, &stru_1021CEA48);
    v20 = *(_QWORD *)((char *)a2 + 28);
    v21 = *(double *)((char *)a2 + 36);
    v26 = 134350081;
    v27 = v4;
    v28 = 2049;
    v29 = v20;
    v30 = 2049;
    v31 = v21;
    v32 = 2049;
    v33 = v25;
    v34 = 2049;
    v35 = v24;
    v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0098, 2, "CLGnssAltitudeFilter,update,timestamp,%{public}.3lf,rawAltitude,%{private}.3f,rawAltitudeUnc,%{private}.3f,medianFilterAltitude,%{private}.3f,medianFilterAltitudeUnc,%{private}.3f", &v26, 52);
LABEL_52:
    v22 = v9;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAltitudeFilter::update(GNSS::DaemonLocation &)", "%s\n", v10);
    goto LABEL_63;
  }
  if (qword_1022A0090 != -1)
    dispatch_once(&qword_1022A0090, &stru_1021CEA48);
  v23 = qword_1022A0098;
  if (os_log_type_enabled((os_log_t)qword_1022A0098, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "CLGnssAltitudeFilter,update,median filter failed,timestamp,%{public}.3lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0090 != -1)
      dispatch_once(&qword_1022A0090, &stru_1021CEA48);
    v26 = 134349056;
    v27 = v4;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0098, 16, "CLGnssAltitudeFilter,update,median filter failed,timestamp,%{public}.3lf", &v26, 12);
    goto LABEL_62;
  }
}

void sub_1017877DC(id a1)
{
  qword_1022A0098 = (uint64_t)os_log_create("com.apple.locationd.Position", "AltitudeSmoother");
}

void sub_101787808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  _WORD v15[3];
  char v16;
  char v17;
  uint64_t v18;
  uint8_t buf[1632];

  v18 = a1;
  v17 = a11;
  v16 = a12;
  sub_100197040();
  if (sub_100241430())
    sub_101787AC0();
  if (sub_1002416C0())
    sub_101787F84();
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEA68);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning,Constructing CLGnssUnknownDevice", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEA68);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,Constructing CLGnssUnknownDevice", v15, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssDeviceFacade> CLGnssDeviceFacade::create(dispatch_queue_t, std::map<CLGnssDeviceEvent, EventCallback> &&, LocationEventCallback, MeasurementEventCallback, DecodedExtendedEphemerisCallback, SleepCallback, PowerLoggingCallback, EmergencyAWDCallback, DpoCallback, MeasurementFeaturesCallback, BOOL, BOOL)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  operator new();
}

void sub_101787A94()
{
  operator delete();
}

void sub_101787AC0()
{
  operator new();
}

void sub_101787DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29,uint64_t a30,uint64_t a31,char *a32,char a33,uint64_t a34,uint64_t a35,char *a36)
{
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v37 = a16;
  if (a16 == &a13)
  {
    v38 = 4;
    v37 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_6:
  v39 = a20;
  if (a20 == &a17)
  {
    v40 = 4;
    v39 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_11;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_11:
  v41 = a24;
  if (a24 == &a21)
  {
    v42 = 4;
    v41 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_16;
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
LABEL_16:
  v43 = a28;
  if (a28 == &a25)
  {
    v44 = 4;
    v43 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_21;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_21:
  v45 = a32;
  if (a32 == &a29)
  {
    v46 = 4;
    v45 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_26;
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_26:
  v47 = a36;
  if (a36 == &a33)
  {
    v48 = 4;
    v47 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_31;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
LABEL_31:
  v49 = *(_QWORD **)(v36 - 136);
  if (v49 == (_QWORD *)(v36 - 160))
  {
    v50 = 4;
    v49 = (_QWORD *)(v36 - 160);
  }
  else
  {
    if (!v49)
      goto LABEL_36;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_36:
  v51 = *(_QWORD **)(v36 - 104);
  if (v51 == (_QWORD *)(v36 - 128))
  {
    v52 = 4;
    v51 = (_QWORD *)(v36 - 128);
  }
  else
  {
    if (!v51)
      goto LABEL_41;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_41:
  operator delete();
}

void sub_101787F6C()
{
  JUMPOUT(0x101787EECLL);
}

void sub_101787F74()
{
  JUMPOUT(0x101787F1CLL);
}

void sub_101787F7C()
{
  JUMPOUT(0x101787F4CLL);
}

void sub_101787F84()
{
  operator new();
}

void sub_101788264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29,uint64_t a30,uint64_t a31,char *a32,char a33,uint64_t a34,uint64_t a35,char *a36)
{
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v37 = a16;
  if (a16 == &a13)
  {
    v38 = 4;
    v37 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_6:
  v39 = a20;
  if (a20 == &a17)
  {
    v40 = 4;
    v39 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_11;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_11:
  v41 = a24;
  if (a24 == &a21)
  {
    v42 = 4;
    v41 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_16;
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
LABEL_16:
  v43 = a28;
  if (a28 == &a25)
  {
    v44 = 4;
    v43 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_21;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_21:
  v45 = a32;
  if (a32 == &a29)
  {
    v46 = 4;
    v45 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_26;
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_26:
  v47 = a36;
  if (a36 == &a33)
  {
    v48 = 4;
    v47 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_31;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
LABEL_31:
  v49 = *(_QWORD **)(v36 - 136);
  if (v49 == (_QWORD *)(v36 - 160))
  {
    v50 = 4;
    v49 = (_QWORD *)(v36 - 160);
  }
  else
  {
    if (!v49)
      goto LABEL_36;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_36:
  v51 = *(_QWORD **)(v36 - 104);
  if (v51 == (_QWORD *)(v36 - 128))
  {
    v52 = 4;
    v51 = (_QWORD *)(v36 - 128);
  }
  else
  {
    if (!v51)
      goto LABEL_41;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_41:
  operator delete();
}

void sub_101788430()
{
  JUMPOUT(0x1017883B0);
}

void sub_101788438()
{
  JUMPOUT(0x1017883E0);
}

void sub_101788440()
{
  JUMPOUT(0x101788410);
}

void sub_101788448(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101788474(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v7;
  __int128 v8;
  NSObject *v9;
  _OWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint8_t *v16;
  uint64_t v17;
  _UNKNOWN **v18;
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[5];
  _QWORD v23[5];
  uint8_t buf[8];
  _BYTE v25[10];
  __int16 v26;
  _BYTE v27[18];

  *(_QWORD *)a1 = off_1021CEA98;
  v7 = (_OWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *v7 = v8;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = a4;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v10 = v7;
    if (*(char *)(a1 + 31) < 0)
      v10 = *(_OWORD **)v7;
    *(_QWORD *)buf = 68289539;
    *(_WORD *)v25 = 2082;
    *(_QWORD *)&v25[2] = "";
    v26 = 2081;
    *(_QWORD *)v27 = v10;
    *(_WORD *)&v27[8] = 2081;
    *(_QWORD *)&v27[10] = "BB Controller created";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  v11 = operator new(0x40uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = off_1021CEEC8;
  v11[3] = off_1021CEE18;
  v11[4] = off_1021CEF18;
  v11[7] = v11 + 4;
  v11[5] = a1;
  *(_QWORD *)buf = v11 + 3;
  *(_QWORD *)v25 = v11;
  sub_1002B7674(a1 + 168, (__int128 *)buf);
  v12 = *(std::__shared_weak_count **)v25;
  if (*(_QWORD *)v25)
  {
    v13 = (unint64_t *)(*(_QWORD *)v25 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_101788994;
  v23[3] = &unk_10212ECA0;
  v23[4] = a1;
  qmi::Client::setHandler(a1 + 32, 5, v23);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_101788AB4;
  v22[3] = &unk_10212ECA0;
  v22[4] = a1;
  qmi::Client::setHandler(a1 + 32, 2, v22);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_101788BDC;
  v21[3] = &unk_10212ECA0;
  v21[4] = a1;
  qmi::Client::setHandler(a1 + 32, 1, v21);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_101788D04;
  v20[3] = &unk_10212ECA0;
  v20[4] = a1;
  qmi::Client::setHandler(a1 + 32, 4, v20);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_101788E28;
  v19[3] = &unk_1021CEAA8;
  v19[4] = a1;
  qmi::Client::setHandler(a1 + 32, 3, v19);
  *(_QWORD *)buf = &v18;
  v15 = sub_101790E1C((uint64_t **)(a1 + 216), (uint64_t *)&v18, (uint64_t)&unk_101B9EB60, (_QWORD **)buf);
  *(_QWORD *)buf = off_1021CEFA8;
  *(_QWORD *)v25 = a1;
  *(_QWORD *)&v27[4] = buf;
  sub_100858318(buf, (_QWORD *)v15 + 9);
  v16 = *(uint8_t **)&v27[4];
  if (*(uint8_t **)&v27[4] == buf)
  {
    v17 = 4;
    v16 = buf;
  }
  else
  {
    if (!*(_QWORD *)&v27[4])
      goto LABEL_20;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_20:
  operator new();
}

void sub_101788894(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11)
{
  operator delete();
}

void sub_101788994(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  _QWORD *v9;
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0)
      v3 = (_QWORD *)*v3;
    v5[0] = 68289539;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2081;
    v9 = v3;
    v10 = 2081;
    v11 = "kEventServerError";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x26u);
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 152) + 56))(*(_QWORD *)(v1 + 152));
  sub_101789224(v1, v4);
}

void sub_101788AB4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  _QWORD *v9;
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0)
      v3 = (_QWORD *)*v3;
    v5[0] = 68289539;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2081;
    v9 = v3;
    v10 = 2081;
    v11 = "kEventStarted";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x26u);
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 152) + 64))(*(_QWORD *)(v1 + 152));
  sub_101789224(v1, v4);
  *(_DWORD *)(v1 + 256) = 2;
}

void sub_101788BDC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  _QWORD *v9;
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0)
      v3 = (_QWORD *)*v3;
    v5[0] = 68289539;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2081;
    v9 = v3;
    v10 = 2081;
    v11 = "kEventStopped";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x26u);
  }
  *(_DWORD *)(v1 + 256) = 3;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 152) + 72))(*(_QWORD *)(v1 + 152));
  sub_101789224(v1, v4);
}

void sub_101788D04(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  _QWORD *v9;
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0)
      v3 = (_QWORD *)*v3;
    v5[0] = 68289539;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2081;
    v9 = v3;
    v10 = 2081;
    v11 = "kEventLowPowerExit";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x26u);
  }
  *(_BYTE *)(v1 + 208) = 0;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 152) + 96))(*(_QWORD *)(v1 + 152));
  sub_101789224(v1, v4);
}

void sub_101788E28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  const char *v13;

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v5 = (_QWORD *)*v5;
    v7[0] = 68289539;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v5;
    v12 = 2081;
    v13 = "kEventLowPower";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", (uint8_t *)v7, 0x26u);
  }
  *(_BYTE *)(v3 + 208) = 1;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 152) + 80))(*(_QWORD *)(v3 + 152), a2);
  sub_101789224(v3, v6);
}

uint64_t sub_101788F60(uint64_t a1)
{
  qmi::Client *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1021CEA98;
  v2 = (qmi::Client *)(a1 + 32);
  qmi::Client::stop((qmi::Client *)(a1 + 32));
  qmi::Client::release(v2);
  sub_100261F44(a1 + 240);
  sub_101790C30(a1 + 216, *(_QWORD **)(a1 + 224));
  sub_100261F44(a1 + 192);
  sub_100261F44(a1 + 168);
  v3 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD **)(a1 + 144);
  if (v4 == (_QWORD *)(a1 + 120))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 120);
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  sub_10085B268(a1 + 96, *(_QWORD **)(a1 + 104));
  v6 = *(_QWORD **)(a1 + 88);
  if (v6 == (_QWORD *)(a1 + 64))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 64);
  }
  else
  {
    if (!v6)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_13:
  qmi::Client::~Client(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_101789068(uint64_t a1)
{
  sub_101788F60(a1);
  operator delete();
}

_QWORD *sub_10178908C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t **v4;
  int v6;
  int *v7;

  v6 = a2;
  v7 = &v6;
  v4 = sub_101791254((uint64_t **)(a1 + 96), &v6, (uint64_t)&unk_101B9EB60, &v7);
  return sub_100858280(v4 + 5, a3);
}

_QWORD *sub_1017890E4(uint64_t a1, uint64_t a2)
{
  return sub_1017890EC((_QWORD *)(a1 + 120), a2);
}

_QWORD *sub_1017890EC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_101791314(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_101789184(uint64_t a1, uint64_t a2)
{
  return sub_10178918C((_QWORD *)(a1 + 64), a2);
}

_QWORD *sub_10178918C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_101791488(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_101789224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  const char *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  const char *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  const char *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned int v29;
  const char *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  const char *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned int v40;
  const char *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  NSObject *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  _QWORD *v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;

  v4 = *(_QWORD *)(a1 + 152);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  if (!sub_100270DE8(a2, *(_QWORD *)(*(_QWORD *)v4 - 8)))
  {
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)v4 - 8);
    v5 = *(_QWORD *)(a2 + 8);
    v6 = (const char *)v5;
    if (v5 < 0)
    {
      v7 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
      v8 = 5381;
      do
      {
        v6 = (const char *)v8;
        v9 = *v7++;
        v8 = (33 * v8) ^ v9;
      }
      while (v9);
    }
    v10 = "N15CLQmiController17DisconnectedStateE";
    if (((unint64_t)"N15CLQmiController17DisconnectedStateE" & 0x8000000000000000) != 0)
    {
      v11 = (unsigned __int8 *)((unint64_t)"N15CLQmiController17DisconnectedStateE" & 0x7FFFFFFFFFFFFFFFLL);
      v12 = 5381;
      do
      {
        v10 = (const char *)v12;
        v13 = *v11++;
        v12 = (33 * v12) ^ v13;
      }
      while (v13);
    }
    if (v6 == v10)
      operator new();
    v14 = *(const char **)(a2 + 8);
    if (v5 < 0)
    {
      v15 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
      v16 = 5381;
      do
      {
        v14 = (const char *)v16;
        v17 = *v15++;
        v16 = (33 * v16) ^ v17;
      }
      while (v17);
    }
    v18 = "N15CLQmiController17InitializingStateE";
    if (((unint64_t)"N15CLQmiController17InitializingStateE" & 0x8000000000000000) != 0)
    {
      v19 = (unsigned __int8 *)((unint64_t)"N15CLQmiController17InitializingStateE" & 0x7FFFFFFFFFFFFFFFLL);
      v20 = 5381;
      do
      {
        v18 = (const char *)v20;
        v21 = *v19++;
        v20 = (33 * v20) ^ v21;
      }
      while (v21);
    }
    if (v14 == v18)
      operator new();
    v22 = *(const char **)(a2 + 8);
    if (v5 < 0)
    {
      v23 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
      v24 = 5381;
      do
      {
        v22 = (const char *)v24;
        v25 = *v23++;
        v24 = (33 * v24) ^ v25;
      }
      while (v25);
    }
    v26 = "N15CLQmiController12RunningStateE";
    if (((unint64_t)"N15CLQmiController12RunningStateE" & 0x8000000000000000) != 0)
    {
      v27 = (unsigned __int8 *)((unint64_t)"N15CLQmiController12RunningStateE" & 0x7FFFFFFFFFFFFFFFLL);
      v28 = 5381;
      do
      {
        v26 = (const char *)v28;
        v29 = *v27++;
        v28 = (33 * v28) ^ v29;
      }
      while (v29);
    }
    if (v22 == v26)
      operator new();
    v30 = *(const char **)(a2 + 8);
    if (v5 < 0)
    {
      v31 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
      v32 = 5381;
      do
      {
        v30 = (const char *)v32;
        v33 = *v31++;
        v32 = (33 * v32) ^ v33;
      }
      while (v33);
    }
    v34 = "N15CLQmiController13SleepingStateE";
    if (((unint64_t)"N15CLQmiController13SleepingStateE" & 0x8000000000000000) != 0)
    {
      v35 = (unsigned __int8 *)((unint64_t)"N15CLQmiController13SleepingStateE" & 0x7FFFFFFFFFFFFFFFLL);
      v36 = 5381;
      do
      {
        v34 = (const char *)v36;
        v37 = *v35++;
        v36 = (33 * v36) ^ v37;
      }
      while (v37);
    }
    if (v30 == v34)
      operator new();
    if (v5 < 0)
    {
      v38 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
      v39 = 5381;
      do
      {
        v5 = v39;
        v40 = *v38++;
        v39 = (33 * v39) ^ v40;
      }
      while (v40);
    }
    v41 = "N15CLQmiController14InitErrorStateE";
    if (((unint64_t)"N15CLQmiController14InitErrorStateE" & 0x8000000000000000) != 0)
    {
      v42 = (unsigned __int8 *)((unint64_t)"N15CLQmiController14InitErrorStateE" & 0x7FFFFFFFFFFFFFFFLL);
      v43 = 5381;
      do
      {
        v41 = (const char *)v43;
        v44 = *v42++;
        v43 = (33 * v43) ^ v44;
      }
      while (v44);
    }
    if ((const char *)v5 == v41)
      sub_101789740();
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v45 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v46 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v46 = (_QWORD *)*v46;
      v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 16))(*(_QWORD *)(a1 + 152));
      v48 = *(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      v49 = 68289794;
      v50 = 2082;
      v51 = "";
      v52 = 2082;
      v53 = v46;
      v54 = 2082;
      v55 = v47;
      v56 = 2082;
      v57 = v48;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#bb.e,unknownState\", \"fService\":%{public, location:escape_only}s, \"oldState\":%{public, location:escape_only}s, \"newState\":%{public, location:escape_only}s}", (uint8_t *)&v49, 0x30u);
    }
  }
}

void sub_101789708()
{
  operator delete();
}

void sub_101789740()
{
  operator new();
}

void sub_101789790()
{
  operator delete();
}

void sub_1017897B4(dispatch_group_t group@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  dispatch_group_enter(group);
  v6 = *(_QWORD *)(a2 + 240);
  if (v6)
    sub_10184C0F0(v6);
  *a3 = group;
  operator new();
}

void sub_101789834(void *a1, uint64_t a2, ...)
{
  NSObject *v2;
  va_list va;

  va_start(va, a2);
  __cxa_begin_catch(a1);
  sub_1017915FC((uint64_t *)va, v2);
  __cxa_rethrow();
}

void sub_10178984C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_101789860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)buf = a3;
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v3 + 48))(v3, a2, buf);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#bb.e,Send function not set appropriately", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CEE98);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#bb.e,Send function not set appropriately", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLQmiController::CLQmiControllerClientProxy::send(const QMIServiceMsg &, void (^)(const QMIServiceMsg &)) const", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_101789A04(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  _QWORD *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint8_t buf[4];
  _BYTE v27[14];
  __int16 v28;
  _QWORD *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  const char *v33;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1[1];
    v6 = (_QWORD *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0)
      v6 = (_QWORD *)*v6;
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)v27 = 0;
    *(_WORD *)&v27[4] = 2082;
    *(_QWORD *)&v27[6] = "";
    v28 = 2081;
    v29 = v6;
    v30 = 2082;
    v31 = v7;
    v32 = 2082;
    v33 = "send";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  }
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v9 = a1[1];
    v10 = (_QWORD *)(v9 + 8);
    if (*(char *)(v9 + 31) < 0)
      v10 = (_QWORD *)*v10;
    v11 = *(unsigned __int16 *)(a2 + 12);
    v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)v27 = v10;
    *(_WORD *)&v27[8] = 1024;
    *(_DWORD *)&v27[10] = v11;
    v28 = 2080;
    v29 = (_QWORD *)v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#bb.e,%s tried to send 0x%04X while in state %s", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v13 = qword_1022A0078;
    v14 = a1[1];
    v15 = (_QWORD *)(v14 + 8);
    if (*(char *)(v14 + 31) < 0)
      v15 = (_QWORD *)*v15;
    v16 = *(unsigned __int16 *)(a2 + 12);
    v17 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v20 = 136315650;
    v21 = v15;
    v22 = 1024;
    v23 = v16;
    v24 = 2080;
    v25 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "#bb.e,%s tried to send 0x%04X while in state %s", (const char *)&v20, 28);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLQmiController::State::send(const QMIServiceMsg &, void (^)(const QMIServiceMsg &)) const", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
}

uint64_t sub_101789D04(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  _QWORD *v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  _BYTE v22[24];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  const char *v26;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)v22 = 0;
    *(_WORD *)&v22[4] = 2082;
    *(_QWORD *)&v22[6] = "";
    *(_WORD *)&v22[14] = 2081;
    *(_QWORD *)&v22[16] = v4;
    v23 = 2082;
    v24 = v5;
    v25 = 2082;
    v26 = "run";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  }
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = a1[1];
    v8 = (_QWORD *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v8 = (_QWORD *)*v8;
    v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v22 = v8;
    *(_WORD *)&v22[8] = 2080;
    *(_QWORD *)&v22[10] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,#warning,%s tried to send message block while in state %s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v11 = qword_1022A0078;
    v12 = a1[1];
    v13 = (_QWORD *)(v12 + 8);
    if (*(char *)(v12 + 31) < 0)
      v13 = (_QWORD *)*v13;
    v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v17 = 136315394;
    v18 = v13;
    v19 = 2080;
    v20 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "#bb.e,#warning,%s tried to send message block while in state %s", (const char *)&v17, 22);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLQmiController::State::run(std::function<void ()>) const", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  return 0;
}

_QWORD *sub_101789FDC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  if (!a1)
    __cxa_bad_typeid();
  v2 = a1[1];
  v7 = *(_QWORD *)(*a1 - 8);
  result = sub_101791858(v2 + 216, &v7);
  v4 = a1[1];
  if ((_QWORD *)(v4 + 224) != result)
  {
    v8 = &v7;
    result = sub_101790E1C((uint64_t **)(v4 + 216), &v7, (uint64_t)&unk_101B9EB60, &v8);
    if (result[8])
    {
      v5 = (uint64_t **)(a1[1] + 216);
      v8 = &v7;
      v6 = *((_QWORD *)sub_101790E1C(v5, &v7, (uint64_t)&unk_101B9EB60, &v8) + 8);
      if (!v6)
        sub_10025FD1C();
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    }
  }
  return result;
}

_QWORD *sub_10178A09C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  if (!a1)
    __cxa_bad_typeid();
  v2 = a1[1];
  v7 = *(_QWORD *)(*a1 - 8);
  result = sub_101791858(v2 + 216, &v7);
  v4 = a1[1];
  if ((_QWORD *)(v4 + 224) != result)
  {
    v8 = &v7;
    result = sub_101790E1C((uint64_t **)(v4 + 216), &v7, (uint64_t)&unk_101B9EB60, &v8);
    if (result[12])
    {
      v5 = (uint64_t **)(a1[1] + 216);
      v8 = &v7;
      v6 = *((_QWORD *)sub_101790E1C(v5, &v7, (uint64_t)&unk_101B9EB60, &v8) + 12);
      if (!v6)
        sub_10025FD1C();
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    }
  }
  return result;
}

uint64_t sub_10178A15C(_QWORD *a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  _QWORD *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  const char *v16;

  v2 = *(_QWORD **)(a1[1] + 152);
  sub_101789FDC(a1);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[1];
    v5 = (_QWORD *)(v4 + 8);
    if (*(char *)(v4 + 31) < 0)
      v5 = (_QWORD *)*v5;
    v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v8[0] = 68289795;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2081;
    v12 = v5;
    v13 = 2082;
    v14 = v6;
    v15 = 2082;
    v16 = "enter";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v8, 0x30u);
  }
  return *(_QWORD *)(*v2 - 8);
}

uint64_t sub_10178A298(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "initializationComplete";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  return *(_QWORD *)(**(_QWORD **)(a1[1] + 152) - 8);
}

_UNKNOWN **sub_10178A3D0(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "serverError";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

_UNKNOWN **sub_10178A500(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "start";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

_UNKNOWN **sub_10178A630(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "stopped";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

uint64_t sub_10178A760(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  _BYTE v16[14];
  __int16 v17;
  _QWORD *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  const char *v22;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#bb.e,%{public}s allowing sleep.  Nothing to do", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v9 = qword_1022A0078;
    v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v13 = 136446210;
    v14 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#bb.e,%{public}s allowing sleep.  Nothing to do", &v13, 12);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual std::type_index CLQmiController::State::sleep(dispatch_group_t)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[1];
    v6 = (_QWORD *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0)
      v6 = (_QWORD *)*v6;
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)v16 = 0;
    *(_WORD *)&v16[4] = 2082;
    *(_QWORD *)&v16[6] = "";
    v17 = 2081;
    v18 = v6;
    v19 = 2082;
    v20 = v7;
    v21 = 2082;
    v22 = "sleep";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  return *(_QWORD *)(**(_QWORD **)(a1[1] + 152) - 8);
}

_UNKNOWN **sub_10178AA04(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  _QWORD *v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  _BYTE v22[24];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  const char *v26;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)v22 = 0;
    *(_WORD *)&v22[4] = 2082;
    *(_QWORD *)&v22[6] = "";
    *(_WORD *)&v22[14] = 2081;
    *(_QWORD *)&v22[16] = v4;
    v23 = 2082;
    v24 = v5;
    v25 = 2082;
    v26 = "okToSleep";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  if (*(_BYTE *)(a1[1] + 208))
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = a1[1];
    v9 = (_QWORD *)(v8 + 8);
    if (*(char *)(v8 + 31) < 0)
      v9 = (_QWORD *)*v9;
    v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)v22 = v9;
    *(_WORD *)&v22[8] = 2080;
    *(_QWORD *)&v22[10] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#bb.e,%{private}s no longer going to sleep.  Stay in state %s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v11 = qword_1022A0078;
    v12 = a1[1];
    v13 = (_QWORD *)(v12 + 8);
    if (*(char *)(v12 + 31) < 0)
      v13 = (_QWORD *)*v13;
    v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v17 = 136380931;
    v18 = v13;
    v19 = 2080;
    v20 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "#bb.e,%{private}s no longer going to sleep.  Stay in state %s", &v17, 22);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "virtual std::type_index CLQmiController::State::okToSleep()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  return *(_UNKNOWN ***)(**(_QWORD **)(a1[1] + 152) - 8);
}

uint64_t sub_10178AD00(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "wake";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  return *(_QWORD *)(**(_QWORD **)(a1[1] + 152) - 8);
}

_UNKNOWN **sub_10178AE38(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "reset";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

uint64_t sub_10178AF68(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "initializationError";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,UnexpectedControllerEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  return *(_QWORD *)(**(_QWORD **)(a1[1] + 152) - 8);
}

_QWORD *sub_10178B0A0(_QWORD *a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  _QWORD *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  const char *v16;

  *a1 = off_1021CEAD8;
  a1[1] = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[1];
    v5 = (_QWORD *)(v4 + 8);
    if (*(char *)(v4 + 31) < 0)
      v5 = (_QWORD *)*v5;
    v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v8[0] = 68289795;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2081;
    v12 = v5;
    v13 = 2082;
    v14 = v6;
    v15 = 2082;
    v16 = "DisconnectedState";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v8, 0x30u);
  }
  return a1;
}

_QWORD *sub_10178B1D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  int v12;
  uint8_t buf[8];
  __int16 v14;
  const char *v15;
  __int16 v16;
  _QWORD *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  const char *v21;

  v3 = *(_QWORD *)(a2 + 8);
  *a1 = off_1021CEAD8;
  a1[1] = v3;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[1];
    v6 = (_QWORD *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0)
      v6 = (_QWORD *)*v6;
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2081;
    v17 = v6;
    v18 = 2082;
    v19 = v7;
    v20 = 2082;
    v21 = "DisconnectedState";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  v8 = (uint64_t **)(a1[1] + 96);
  v12 = 0;
  *(_QWORD *)buf = &v12;
  if (sub_101791254(v8, &v12, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8])
  {
    v9 = (uint64_t **)(a1[1] + 96);
    v12 = 0;
    *(_QWORD *)buf = &v12;
    v10 = sub_101791254(v9, &v12, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8];
    if (!v10)
      sub_10025FD1C();
    (*(void (**)(uint64_t *))(*v10 + 48))(v10);
  }
  return a1;
}

_QWORD *sub_10178B394(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  *a1 = off_1021CEAD8;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "~DisconnectedState";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  sub_10178A09C(a1);
  return a1;
}

void sub_10178B4D4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10178B4E4(_QWORD *a1)
{
  sub_10178B394(a1);
  operator delete();
}

_UNKNOWN **sub_10178B508(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "start";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

uint64_t sub_10178B638(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "okToSleep";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  return *(_QWORD *)(**(_QWORD **)(a1[1] + 152) - 8);
}

_QWORD *sub_10178B770(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  _QWORD *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;

  v3 = *(_QWORD *)(a2 + 8);
  *a1 = off_1021CEB60;
  a1[1] = v3;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[1];
    v6 = (_QWORD *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0)
      v6 = (_QWORD *)*v6;
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v9[0] = 68289795;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2081;
    v13 = v6;
    v14 = 2082;
    v15 = v7;
    v16 = 2082;
    v17 = "InitializingState";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x30u);
  }
  return a1;
}

_QWORD *sub_10178B8AC(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD block[5];
  uint8_t buf[8];
  _BYTE v18[32];
  const char *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  *a1 = off_1021CEB60;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v18 = 2082;
    *(_QWORD *)&v18[2] = "";
    *(_WORD *)&v18[10] = 2081;
    *(_QWORD *)&v18[12] = v4;
    *(_WORD *)&v18[20] = 2082;
    *(_QWORD *)&v18[22] = v5;
    *(_WORD *)&v18[30] = 2082;
    v19 = "~InitializingState";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  v6 = a1[1];
  v7 = *(_QWORD *)(v6 + 192);
  if (v7)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)v18 = buf;
    *(_QWORD *)&v18[8] = 0x4012000000;
    *(_QWORD *)&v18[16] = sub_1002074FC;
    *(_QWORD *)&v18[24] = sub_100207F58;
    v20 = v7;
    v8 = *(std::__shared_weak_count **)(v6 + 200);
    v21 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v6 = a1[1];
    }
    sub_100346F9C((_QWORD *)(v6 + 192));
    v11 = *(NSObject **)(a1[1] + 184);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10178BAE8;
    block[3] = &unk_102149BF8;
    block[4] = buf;
    dispatch_async(v11, block);
    _Block_object_dispose(buf, 8);
    v12 = v21;
    if (v21)
    {
      v13 = (unint64_t *)&v21->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  sub_10178A09C(a1);
  return a1;
}

void sub_10178BADC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10178BAE8(uint64_t a1)
{
  sub_100346F9C((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
}

void sub_10178BAFC(_QWORD *a1)
{
  sub_10178B8AC(a1);
  operator delete();
}

void sub_10178BB20(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  void *aBlock;
  uint8_t buf[8];
  _BYTE v16[32];
  const char *v17;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = a1[1];
    v8 = (_QWORD *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v8 = (_QWORD *)*v8;
    v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v16 = 2082;
    *(_QWORD *)&v16[2] = "";
    *(_WORD *)&v16[10] = 2081;
    *(_QWORD *)&v16[12] = v8;
    *(_WORD *)&v16[20] = 2082;
    *(_QWORD *)&v16[22] = v9;
    *(_WORD *)&v16[30] = 2082;
    v17 = "send";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  v11[0] = a1[1] + 32;
  v11[1] = a2;
  v12 = 25000;
  v13 = 0;
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)v16 = 3221225472;
  *(_QWORD *)&v16[8] = sub_1017918D0;
  *(_QWORD *)&v16[16] = &unk_1021C6CE8;
  *(_QWORD *)&v16[24] = a3;
  v10 = _Block_copy(buf);
  aBlock = v10;
  if (a2)
  {
    qmi::Client::send(v11[0], v11);
    v10 = aBlock;
  }
  if (v10)
    _Block_release(v10);
}

void sub_10178BCCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1016A15B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10178BCF4(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  _QWORD *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  const char *v16;

  v2 = a1[1];
  sub_101789FDC(a1);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[1];
    v5 = (_QWORD *)(v4 + 8);
    if (*(char *)(v4 + 31) < 0)
      v5 = (_QWORD *)*v5;
    v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v8[0] = 68289795;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2081;
    v12 = v5;
    v13 = 2082;
    v14 = v6;
    v15 = 2082;
    v16 = "enter";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v8, 0x30u);
  }
  return *(_QWORD *)(**(_QWORD **)(v2 + 152) - 8);
}

_UNKNOWN **sub_10178BE30(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "initializationComplete";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

void sub_10178BF60(uint64_t a1, NSObject *a2)
{
  uint64_t v2;

  sub_1017897B4(a2, *(_QWORD *)(a1 + 8), &v2);
}

_UNKNOWN **sub_10178C0EC(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "initializationError";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

_QWORD *sub_10178C21C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  _QWORD *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;

  v3 = *(_QWORD *)(a2 + 8);
  *a1 = off_1021CEBE8;
  a1[1] = v3;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[1];
    v6 = (_QWORD *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0)
      v6 = (_QWORD *)*v6;
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v9[0] = 68289795;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2081;
    v13 = v6;
    v14 = 2082;
    v15 = v7;
    v16 = 2082;
    v17 = "RunningState";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x30u);
  }
  return a1;
}

void sub_10178C358(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  const char *v18;
  char *v19;
  unsigned __int16 v20;
  _BYTE buf[40];
  const char *v22;
  _BYTE v23[20];
  int v24;
  unsigned __int16 *v25;
  void *v26;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v20 = 0;
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = a1[1];
    v8 = (_QWORD *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v8 = (_QWORD *)*v8;
    v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v8;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = v9;
    *(_WORD *)&buf[38] = 2082;
    v22 = "send";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  *(_QWORD *)v23 = a1[1] + 32;
  *(_QWORD *)&v23[8] = a2;
  *(_DWORD *)&v23[16] = 25000;
  v25 = 0;
  v26 = 0;
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = sub_1017918D0;
  *(_QWORD *)&buf[24] = &unk_1021C6CE8;
  *(_QWORD *)&buf[32] = a3;
  v10 = _Block_copy(buf);
  v25 = &v20;
  v26 = v10;
  if (*(_QWORD *)&v23[8])
  {
    qmi::Client::send(*(_QWORD *)v23, v23);
    v10 = v26;
  }
  if (v10)
    _Block_release(v10);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v12 = a1[1];
    v13 = (_QWORD *)(v12 + 8);
    if (*(char *)(v12 + 31) < 0)
      v13 = (_QWORD *)*v13;
    v14 = *(unsigned __int16 *)(a2 + 12);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v14;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v20;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLQmiController,service,%s,msg,0x%04X,txid,0x%04X", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v15 = a1[1];
    v16 = (_QWORD *)(v15 + 8);
    if (*(char *)(v15 + 31) < 0)
      v16 = (_QWORD *)*v16;
    v17 = *(unsigned __int16 *)(a2 + 12);
    *(_DWORD *)v23 = 136315650;
    *(_QWORD *)&v23[4] = v16;
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = v17;
    *(_WORD *)&v23[18] = 1024;
    v24 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLQmiController,service,%s,msg,0x%04X,txid,0x%04X", v23, 24);
    v19 = (char *)v18;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLQmiController::RunningState::send(const QMIServiceMsg &, void (^)(const QMIServiceMsg &)) const", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
}

void sub_10178C6C0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10178C6F0(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  _QWORD *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  const char *v18;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1[1];
    v6 = (_QWORD *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0)
      v6 = (_QWORD *)*v6;
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v10[0] = 68289795;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2081;
    v14 = v6;
    v15 = 2082;
    v16 = v7;
    v17 = 2082;
    v18 = "run";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x30u);
  }
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    sub_10025FD1C();
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  return 1;
}

uint64_t sub_10178C838(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  int v11;
  uint8_t buf[8];
  __int16 v13;
  const char *v14;
  __int16 v15;
  _QWORD *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2081;
    v16 = v4;
    v17 = 2082;
    v18 = v5;
    v19 = 2082;
    v20 = "enter";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  v6 = a1[1];
  sub_101789FDC(a1);
  v7 = (uint64_t **)(a1[1] + 96);
  v11 = 1;
  *(_QWORD *)buf = &v11;
  if (sub_101791254(v7, &v11, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8])
  {
    v8 = (uint64_t **)(a1[1] + 96);
    v11 = 1;
    *(_QWORD *)buf = &v11;
    v9 = sub_101791254(v8, &v11, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8];
    if (!v9)
      sub_10025FD1C();
    (*(void (**)(uint64_t *))(*v9 + 48))(v9);
  }
  return *(_QWORD *)(**(_QWORD **)(v6 + 152) - 8);
}

void sub_10178C9F0(uint64_t a1, NSObject *a2)
{
  _QWORD v2[6];
  uint64_t v3;

  v2[0] = 0;
  v2[1] = v2;
  v2[2] = 0x4012000000;
  v2[3] = sub_1002074FC;
  v2[4] = sub_100207F58;
  sub_1017897B4(a2, *(_QWORD *)(a1 + 8), &v3);
}

void sub_10178CC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  sub_100261F44(v9);
  _Unwind_Resume(a1);
}

void sub_10178CCBC(uint64_t a1)
{
  sub_100346F9C((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
}

_QWORD *sub_10178CCCC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  _QWORD *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;

  v3 = *(_QWORD *)(a2 + 8);
  *a1 = off_1021CEC70;
  a1[1] = v3;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[1];
    v6 = (_QWORD *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0)
      v6 = (_QWORD *)*v6;
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v9[0] = 68289795;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2081;
    v13 = v6;
    v14 = 2082;
    v15 = v7;
    v16 = 2082;
    v17 = "SleepingState";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x30u);
  }
  return a1;
}

uint64_t sub_10178CE08(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "wake";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  return *(_QWORD *)(a1[1] + 160);
}

void sub_10178CF38(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  _QWORD *v9;
  __int16 v10;
  const char *v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v3 = (_QWORD *)*v3;
    v5[0] = 68289539;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2081;
    v9 = v3;
    v10 = 2081;
    v11 = "setBasebandResetInProgress";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x26u);
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 104))(*(_QWORD *)(a1 + 152));
  sub_101789224(a1, v4);
}

_QWORD *sub_10178D058(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  _QWORD *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;

  v3 = *(_QWORD *)(a2 + 8);
  *a1 = off_1021CECF8;
  a1[1] = v3;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[1];
    v6 = (_QWORD *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0)
      v6 = (_QWORD *)*v6;
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v9[0] = 68289795;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2081;
    v13 = v6;
    v14 = 2082;
    v15 = v7;
    v16 = 2082;
    v17 = "InitErrorState";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x30u);
  }
  return a1;
}

_QWORD *sub_10178D194(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  *a1 = off_1021CECF8;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v4;
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = "~InitErrorState";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  sub_10178A09C(a1);
  return a1;
}

void sub_10178D2D4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10178D2E4(_QWORD *a1)
{
  sub_10178D194(a1);
  operator delete();
}

void sub_10178D308(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  _QWORD v14[2];
  int v15;
  uint64_t v16;
  void *aBlock;
  uint8_t buf[8];
  _BYTE v19[32];
  const char *v20;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = a1[1];
    v8 = (_QWORD *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v8 = (_QWORD *)*v8;
    v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v19 = 2082;
    *(_QWORD *)&v19[2] = "";
    *(_WORD *)&v19[10] = 2081;
    *(_QWORD *)&v19[12] = v8;
    *(_WORD *)&v19[20] = 2082;
    *(_QWORD *)&v19[22] = v9;
    *(_WORD *)&v19[30] = 2082;
    v20 = "send";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  v10 = *(unsigned __int16 *)(a2 + 12);
  if (v10 <= 0x3D && ((1 << v10) & 0x3180200000000000) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v19 = 2082;
      *(_QWORD *)&v19[2] = "";
      *(_WORD *)&v19[10] = 1026;
      *(_DWORD *)&v19[12] = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,Allowing message in InitErrorState as exception\", \"msgId\":%{public}d}", buf, 0x18u);
    }
    v14[0] = a1[1] + 32;
    v14[1] = a2;
    v15 = 25000;
    v16 = 0;
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)v19 = 3221225472;
    *(_QWORD *)&v19[8] = sub_1017918D0;
    *(_QWORD *)&v19[16] = &unk_1021C6CE8;
    *(_QWORD *)&v19[24] = a3;
    v12 = _Block_copy(buf);
    aBlock = v12;
    if (a2)
    {
      qmi::Client::send(v14[0], v14);
      v12 = aBlock;
    }
    if (v12)
      _Block_release(v12);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v19 = 2082;
      *(_QWORD *)&v19[2] = "";
      *(_WORD *)&v19[10] = 1026;
      *(_DWORD *)&v19[12] = v10;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,Not allowing message in InitErrorState\", \"msgId\":%{public}d}", buf, 0x18u);
    }
  }
}

void sub_10178D5FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1016A15B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10178D624(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  _QWORD *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  const char *v18;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1[1];
    v6 = (_QWORD *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0)
      v6 = (_QWORD *)*v6;
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v10[0] = 68289795;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2081;
    v14 = v6;
    v15 = 2082;
    v16 = v7;
    v17 = 2082;
    v18 = "run";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x30u);
  }
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    sub_10025FD1C();
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  return 1;
}

_QWORD *sub_10178D76C(uint64_t a1, uint64_t *a2)
{
  return sub_100349198((_QWORD *)(a1 + 240), a2);
}

void sub_10178D774(uint64_t a1, void *a2)
{
  id v4;
  __int128 v5;
  void *__p[2];
  uint8_t buf[8];
  _QWORD v8[2];

  sub_1015A2E04(&v5, "PDS");
  sub_1015A2E04(__p, "QMI-PDS");
  v4 = objc_msgSend(objc_msgSend(a2, "silo"), "queue");
  sub_1015A2E04(v8, "location");
  qmi::Client::create(buf, __p, 6, v4, v8, 0);
  sub_101788474(a1, &v5, (uint64_t)buf, (uint64_t)objc_msgSend(objc_msgSend(a2, "silo"), "queue"));
}

void sub_10178DD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  sub_100261F44(v38 + 264);
  sub_101788F60(v38);
  _Unwind_Resume(a1);
}

NSObject *sub_10178DE34(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 184));
  if (!v3)
    sub_101792830();
  v4 = v3;
  dispatch_source_set_event_handler(v3, a2);
  dispatch_source_set_timer(v4, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  dispatch_resume(v4);
  return v4;
}

void sub_10178DEA0(uint64_t a1)
{
  sub_10178DEA8(*(_QWORD *)(a1 + 32));
}

void sub_10178DEA8(uint64_t a1)
{
  NSObject *v2;
  _QWORD v3[5];
  uint8_t buf[4];
  int v5;
  __int16 v6;
  const char *v7;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v5 = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e, reset timer block\"}", buf, 0x12u);
  }
  *(_BYTE *)(a1 + 280) = 1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10178FCCC;
  v3[3] = &unk_1021380A8;
  v3[4] = a1;
  sub_101720DEC((uint64_t *)(a1 + 264), (uint64_t)v3);
}

void sub_10178DFC4(uint64_t a1)
{
  sub_10178DFCC(*(_QWORD *)(a1 + 32));
}

void sub_10178DFCC(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  unsigned int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  uint64_t buf;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;

  v2 = *(_QWORD **)(a1 + 152);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 296), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  if (*(_BYTE *)(a1 + 280)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289283;
      v22 = 2082;
      v23 = "";
      v24 = 2081;
      v25 = "sendGetServiceState";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_101790028;
    v20[3] = &unk_1021CEDC8;
    v20[4] = a1;
    sub_101721760((uint64_t *)(a1 + 264), (uint64_t)v20);
    sub_100197040();
    if ((sub_10075BE08() & 1) == 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CEE98);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289283;
        v22 = 2082;
        v23 = "";
        v24 = 2081;
        v25 = "sendForceReceiverOff";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      }
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_1017901B8;
      v19[3] = &unk_1021CEDE8;
      v19[4] = a1;
      sub_101722F90((uint64_t *)(a1 + 264), 1, (uint64_t)v19);
    }
    sub_100197040();
    if (sub_10075BE08())
      v5 = 537920322;
    else
      v5 = 7599979;
    sub_100197040();
    if (sub_10075D338())
      v5 |= 0x80280u;
    sub_100197040();
    if (sub_1001DC704())
      v6 = v5 | 0x800000;
    else
      v6 = v5;
    sub_10178ECD0(a1, v6);
    sub_100197040();
    if (sub_10075D5C0())
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CEE98);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289283;
        v22 = 2082;
        v23 = "";
        v24 = 2081;
        v25 = "sendSetLppConfig";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      }
      sub_100197040();
      if (sub_10075D7FC())
        v8 = 11;
      else
        v8 = 3;
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_101790310;
      v18[3] = &unk_1021CEDE8;
      v18[4] = a1;
      sub_101727270((uint64_t *)(a1 + 264), v8, (uint64_t)v18);
    }
    sub_100197040();
    if ((sub_10075BE08() & 1) == 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CEE98);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289283;
        v22 = 2082;
        v23 = "";
        v24 = 2081;
        v25 = "sendSetServiceState";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      }
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_101790468;
      v17[3] = &unk_1021CEDE8;
      v17[4] = a1;
      sub_1017219C0((uint64_t *)(a1 + 264), 1, (uint64_t)v17);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CEE98);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289283;
        v22 = 2082;
        v23 = "";
        v24 = 2081;
        v25 = "sendSetAutoTrackingState";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      }
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1017905C0;
      v16[3] = &unk_1021CEDE8;
      v16[4] = a1;
      sub_101721F20((uint64_t *)(a1 + 264), 0, (uint64_t)v16);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CEE98);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289283;
        v22 = 2082;
        v23 = "";
        v24 = 2081;
        v25 = "sendSvUseInFixReport";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      }
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_101790718;
      v15[3] = &unk_1021CEDE8;
      v15[4] = a1;
      sub_1017257C0((uint64_t *)(a1 + 264), 1, (uint64_t)v15);
    }
    sub_100197040();
    if ((sub_10075BE08() & 1) != 0)
    {
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 48))(*(_QWORD *)(a1 + 152));
      sub_101789224(a1, v12);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CEE98);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289283;
        v22 = 2082;
        v23 = "";
        v24 = 2081;
        v25 = "sendSetServiceState";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      }
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_101790870;
      v14[3] = &unk_1021CEDC8;
      v14[4] = a1;
      sub_1017219C0((uint64_t *)(a1 + 264), 0, (uint64_t)v14);
    }
    *(_BYTE *)(a1 + 280) = 0;
  }
}

void sub_10178E694(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,reconnect\"}", buf, 0x12u);
  }
  if (*(_DWORD *)(a1 + 256) == 2)
  {
    *(_DWORD *)(a1 + 256) = 1;
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 72))(*(_QWORD *)(a1 + 152));
    sub_101789224(a1, v3);
    *(_DWORD *)(a1 + 256) = 3;
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 64))(*(_QWORD *)(a1 + 152));
    sub_101789224(a1, v4);
    *(_DWORD *)(a1 + 256) = 2;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#bb.e,reconnect,invalid state,can not reconnect", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CEE98);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#bb.e,reconnect,invalid state,can not reconnect", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiPdsController::reconnect()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

uint64_t sub_10178E904(uint64_t a1)
{
  NSObject *v2;
  qmi::Client *v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,shutdown\"}", (uint8_t *)v5, 0x12u);
  }
  v3 = (qmi::Client *)(a1 + 32);
  qmi::Client::stop(v3);
  sleep(1u);
  qmi::Client::release(v3);
  return sleep(1u);
}

uint64_t sub_10178EA00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v12;
  uint8_t *v13;
  __int16 v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint8_t buf[1640];

  if (*(_DWORD *)(a1 + 256) != 2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,Client not active", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CEE98);
      v14 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,Client not active", &v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLQmiPdsController::executeMessageSend(std::function<void (CLQmiPdsMessenger &)>)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 152);
  sub_100270E34((uint64_t)v15, a2);
  v17 = a1;
  v19 = 0;
  v4 = operator new(0x30uLL);
  *v4 = off_1021CF2A8;
  sub_10179275C((uint64_t)(v4 + 1), (uint64_t)v15);
  v4[5] = v17;
  v19 = v4;
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 32))(v3, v18);
  v6 = v19;
  if (v19 == v18)
  {
    v7 = 4;
    v6 = v18;
    goto LABEL_12;
  }
  if (v19)
  {
    v7 = 5;
LABEL_12:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
    goto LABEL_17;
  }
  if (v16)
  {
    v10 = 5;
LABEL_17:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return v5;
}

void sub_10178EC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a15;
  if (a15 == &a12)
  {
    v25 = 4;
    v24 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_10178ECD0(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  _WORD *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int16 v11;
  __int16 v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  __int16 v25;
  __int16 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  __int16 v37;
  __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  __int16 v49;
  __int16 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  __int16 v60;
  __int16 v61;
  __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  __int16 v72;
  __int16 v73;
  __int16 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  __int16 v84;
  __int16 v85;
  __int16 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  __int16 v96;
  __int16 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int16 v107;
  unsigned int v108;
  __int16 *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  __int16 v119;
  unsigned int v120;
  __int16 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  __int16 v131;
  __int16 *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  __int16 v142;
  __int16 *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  __int16 v153;
  __int16 *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  __int16 v164;
  __int16 *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  __int16 v175;
  __int16 *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  __int16 v186;
  unsigned int v187;
  __int16 *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  __int16 v198;
  unsigned int v199;
  __int16 *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  __int16 v210;
  unsigned int v211;
  __int16 *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  __int16 v222;
  unsigned int v223;
  __int16 *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  char *v233;
  __int16 v234;
  unsigned int v235;
  __int16 *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  __int16 *v242;
  char *v243;
  char *v244;
  char *v245;
  __int16 v246;
  unsigned int v247;
  __int16 *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  __int16 *v254;
  char *v255;
  char *v256;
  char *v257;
  __int16 v258;
  void *v259;
  void *v260;
  uint64_t v261;
  void *__p;
  __int16 *v263;
  __int16 *v264;

  __p = 0;
  v263 = 0;
  v264 = 0;
  v5 = sub_100BFCCD8((uint64_t)&v264, 1);
  v6 = (char *)&v5[v4];
  *v5 = (((a2 >> 1) & 1) << 8) | 0x12;
  v7 = (char *)(v5 + 1);
  v9 = (char *)__p;
  v8 = (char *)v263;
  v10 = (char *)v5;
  if (v263 != __p)
  {
    do
    {
      v11 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v10 - 1) = v11;
      v10 -= 2;
    }
    while (v8 != v9);
    v8 = (char *)__p;
  }
  __p = v10;
  v263 = v5 + 1;
  v264 = &v5[v4];
  if (v8)
  {
    operator delete(v8);
    v6 = (char *)v264;
  }
  v263 = v5 + 1;
  v12 = a2 & 4;
  if (v7 >= v6)
  {
    v14 = v7 - (_BYTE *)__p;
    if (v7 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v15 = v14 >> 1;
    v16 = v6 - (_BYTE *)__p;
    if (v16 <= (v14 >> 1) + 1)
      v17 = v15 + 1;
    else
      v17 = v16;
    if (v16 >= 0x7FFFFFFFFFFFFFFELL)
      v18 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v19 = (char *)sub_100BFCCD8((uint64_t)&v264, v18);
    else
      v19 = 0;
    v20 = &v19[2 * v15];
    v21 = &v19[2 * v18];
    *(_WORD *)v20 = (v12 << 6) | 0x13;
    v13 = (__int16 *)(v20 + 2);
    v23 = (char *)__p;
    v22 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v24 = *((_WORD *)v22 - 1);
        v22 -= 2;
        *((_WORD *)v20 - 1) = v24;
        v20 -= 2;
      }
      while (v22 != v23);
      v22 = (char *)__p;
    }
    __p = v20;
    v263 = v13;
    v264 = (__int16 *)v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v5[1] = (v12 << 6) | 0x13;
    v13 = v5 + 2;
  }
  v263 = v13;
  v25 = a2 & 8;
  if (v13 >= v264)
  {
    v27 = (char *)v13 - (_BYTE *)__p;
    if ((char *)v13 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v28 = v27 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v27 >> 1) + 1))
      v29 = v28 + 1;
    else
      v29 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v30 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    if (v30)
      v31 = (char *)sub_100BFCCD8((uint64_t)&v264, v30);
    else
      v31 = 0;
    v32 = &v31[2 * v28];
    v33 = &v31[2 * v30];
    *(_WORD *)v32 = (32 * v25) | 0x14;
    v26 = (__int16 *)(v32 + 2);
    v35 = (char *)__p;
    v34 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v36 = *((_WORD *)v34 - 1);
        v34 -= 2;
        *((_WORD *)v32 - 1) = v36;
        v32 -= 2;
      }
      while (v34 != v35);
      v34 = (char *)__p;
    }
    __p = v32;
    v263 = v26;
    v264 = (__int16 *)v33;
    if (v34)
      operator delete(v34);
  }
  else
  {
    *v13 = (32 * v25) | 0x14;
    v26 = v13 + 1;
  }
  v263 = v26;
  v37 = a2 & 0x10;
  if (v26 >= v264)
  {
    v39 = (char *)v26 - (_BYTE *)__p;
    if ((char *)v26 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v40 = v39 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v39 >> 1) + 1))
      v41 = v40 + 1;
    else
      v41 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v42 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
      v43 = (char *)sub_100BFCCD8((uint64_t)&v264, v42);
    else
      v43 = 0;
    v44 = &v43[2 * v40];
    v45 = &v43[2 * v42];
    *(_WORD *)v44 = (16 * v37) | 0x15;
    v38 = (__int16 *)(v44 + 2);
    v47 = (char *)__p;
    v46 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v48 = *((_WORD *)v46 - 1);
        v46 -= 2;
        *((_WORD *)v44 - 1) = v48;
        v44 -= 2;
      }
      while (v46 != v47);
      v46 = (char *)__p;
    }
    __p = v44;
    v263 = v38;
    v264 = (__int16 *)v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *v26 = (16 * v37) | 0x15;
    v38 = v26 + 1;
  }
  v263 = v38;
  v49 = a2 & 0x20;
  if (v38 >= v264)
  {
    v51 = (char *)v38 - (_BYTE *)__p;
    if ((char *)v38 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v52 = v51 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v51 >> 1) + 1))
      v53 = v52 + 1;
    else
      v53 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v54 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v54 = v53;
    if (v54)
      v55 = (char *)sub_100BFCCD8((uint64_t)&v264, v54);
    else
      v55 = 0;
    v56 = &v55[2 * v52];
    v57 = &v55[2 * v54];
    *(_WORD *)v56 = (8 * v49) | 0x16;
    v50 = (__int16 *)(v56 + 2);
    v59 = (char *)__p;
    v58 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v60 = *((_WORD *)v58 - 1);
        v58 -= 2;
        *((_WORD *)v56 - 1) = v60;
        v56 -= 2;
      }
      while (v58 != v59);
      v58 = (char *)__p;
    }
    __p = v56;
    v263 = v50;
    v264 = (__int16 *)v57;
    if (v58)
      operator delete(v58);
  }
  else
  {
    *v38 = (8 * v49) | 0x16;
    v50 = v38 + 1;
  }
  v263 = v50;
  v61 = a2 & 0x40;
  if (v50 >= v264)
  {
    v63 = (char *)v50 - (_BYTE *)__p;
    if ((char *)v50 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v64 = v63 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v63 >> 1) + 1))
      v65 = v64 + 1;
    else
      v65 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v66 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v66 = v65;
    if (v66)
      v67 = (char *)sub_100BFCCD8((uint64_t)&v264, v66);
    else
      v67 = 0;
    v68 = &v67[2 * v64];
    v69 = &v67[2 * v66];
    *(_WORD *)v68 = (4 * v61) | 0x17;
    v62 = (__int16 *)(v68 + 2);
    v71 = (char *)__p;
    v70 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v72 = *((_WORD *)v70 - 1);
        v70 -= 2;
        *((_WORD *)v68 - 1) = v72;
        v68 -= 2;
      }
      while (v70 != v71);
      v70 = (char *)__p;
    }
    __p = v68;
    v263 = v62;
    v264 = (__int16 *)v69;
    if (v70)
      operator delete(v70);
  }
  else
  {
    *v50 = (4 * v61) | 0x17;
    v62 = v50 + 1;
  }
  v263 = v62;
  v73 = a2 & 0x80;
  if (v62 >= v264)
  {
    v75 = (char *)v62 - (_BYTE *)__p;
    if ((char *)v62 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v76 = v75 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v75 >> 1) + 1))
      v77 = v76 + 1;
    else
      v77 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v78 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v78 = v77;
    if (v78)
      v79 = (char *)sub_100BFCCD8((uint64_t)&v264, v78);
    else
      v79 = 0;
    v80 = &v79[2 * v76];
    v81 = &v79[2 * v78];
    *(_WORD *)v80 = (2 * v73) | 0x18;
    v74 = (__int16 *)(v80 + 2);
    v83 = (char *)__p;
    v82 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v84 = *((_WORD *)v82 - 1);
        v82 -= 2;
        *((_WORD *)v80 - 1) = v84;
        v80 -= 2;
      }
      while (v82 != v83);
      v82 = (char *)__p;
    }
    __p = v80;
    v263 = v74;
    v264 = (__int16 *)v81;
    if (v82)
      operator delete(v82);
  }
  else
  {
    *v62 = (2 * v73) | 0x18;
    v74 = v62 + 1;
  }
  v263 = v74;
  v85 = a2 & 0x100;
  if (v74 >= v264)
  {
    v87 = (char *)v74 - (_BYTE *)__p;
    if ((char *)v74 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v88 = v87 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v87 >> 1) + 1))
      v89 = v88 + 1;
    else
      v89 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v90 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v90 = v89;
    if (v90)
      v91 = (char *)sub_100BFCCD8((uint64_t)&v264, v90);
    else
      v91 = 0;
    v92 = &v91[2 * v88];
    v93 = &v91[2 * v90];
    *(_WORD *)v92 = v85 | 0x19;
    v86 = (__int16 *)(v92 + 2);
    v95 = (char *)__p;
    v94 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v96 = *((_WORD *)v94 - 1);
        v94 -= 2;
        *((_WORD *)v92 - 1) = v96;
        v92 -= 2;
      }
      while (v94 != v95);
      v94 = (char *)__p;
    }
    __p = v92;
    v263 = v86;
    v264 = (__int16 *)v93;
    if (v94)
      operator delete(v94);
  }
  else
  {
    *v74 = v85 | 0x19;
    v86 = v74 + 1;
  }
  v263 = v86;
  if (v86 >= v264)
  {
    v98 = (char *)v86 - (_BYTE *)__p;
    if ((char *)v86 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v99 = v98 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v98 >> 1) + 1))
      v100 = v99 + 1;
    else
      v100 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v101 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v101 = v100;
    if (v101)
      v102 = (char *)sub_100BFCCD8((uint64_t)&v264, v101);
    else
      v102 = 0;
    v103 = &v102[2 * v99];
    v104 = &v102[2 * v101];
    *(_WORD *)v103 = ((unsigned __int16)(a2 & 0x200) >> 1) | 0x1A;
    v97 = (__int16 *)(v103 + 2);
    v106 = (char *)__p;
    v105 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v107 = *((_WORD *)v105 - 1);
        v105 -= 2;
        *((_WORD *)v103 - 1) = v107;
        v103 -= 2;
      }
      while (v105 != v106);
      v105 = (char *)__p;
    }
    __p = v103;
    v263 = v97;
    v264 = (__int16 *)v104;
    if (v105)
      operator delete(v105);
  }
  else
  {
    *v86 = ((unsigned __int16)(a2 & 0x200) >> 1) | 0x1A;
    v97 = v86 + 1;
  }
  v263 = v97;
  v108 = a2 & 0x200000;
  if (v97 >= v264)
  {
    v110 = (char *)v97 - (_BYTE *)__p;
    if ((char *)v97 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v111 = v110 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v110 >> 1) + 1))
      v112 = v111 + 1;
    else
      v112 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v113 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v113 = v112;
    if (v113)
      v114 = (char *)sub_100BFCCD8((uint64_t)&v264, v113);
    else
      v114 = 0;
    v115 = &v114[2 * v111];
    v116 = &v114[2 * v113];
    *(_WORD *)v115 = (v108 >> 13) | 0x1B;
    v109 = (__int16 *)(v115 + 2);
    v118 = (char *)__p;
    v117 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v119 = *((_WORD *)v117 - 1);
        v117 -= 2;
        *((_WORD *)v115 - 1) = v119;
        v115 -= 2;
      }
      while (v117 != v118);
      v117 = (char *)__p;
    }
    __p = v115;
    v263 = v109;
    v264 = (__int16 *)v116;
    if (v117)
      operator delete(v117);
  }
  else
  {
    *v97 = (v108 >> 13) | 0x1B;
    v109 = v97 + 1;
  }
  v263 = v109;
  v120 = a2 & 0x400000;
  if (v109 >= v264)
  {
    v122 = (char *)v109 - (_BYTE *)__p;
    if ((char *)v109 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v123 = v122 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v122 >> 1) + 1))
      v124 = v123 + 1;
    else
      v124 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v125 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v125 = v124;
    if (v125)
      v126 = (char *)sub_100BFCCD8((uint64_t)&v264, v125);
    else
      v126 = 0;
    v127 = &v126[2 * v123];
    v128 = &v126[2 * v125];
    *(_WORD *)v127 = (v120 >> 14) | 0x1C;
    v121 = (__int16 *)(v127 + 2);
    v130 = (char *)__p;
    v129 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v131 = *((_WORD *)v129 - 1);
        v129 -= 2;
        *((_WORD *)v127 - 1) = v131;
        v127 -= 2;
      }
      while (v129 != v130);
      v129 = (char *)__p;
    }
    __p = v127;
    v263 = v121;
    v264 = (__int16 *)v128;
    if (v129)
      operator delete(v129);
  }
  else
  {
    *v109 = (v120 >> 14) | 0x1C;
    v121 = v109 + 1;
  }
  v263 = v121;
  if (v121 >= v264)
  {
    v133 = (char *)v121 - (_BYTE *)__p;
    if ((char *)v121 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v134 = v133 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v133 >> 1) + 1))
      v135 = v134 + 1;
    else
      v135 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v136 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v136 = v135;
    if (v136)
      v137 = (char *)sub_100BFCCD8((uint64_t)&v264, v136);
    else
      v137 = 0;
    v138 = &v137[2 * v134];
    v139 = &v137[2 * v136];
    *(_WORD *)v138 = ((unsigned __int16)(a2 & 0x400) >> 2) | 0x1D;
    v132 = (__int16 *)(v138 + 2);
    v141 = (char *)__p;
    v140 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v142 = *((_WORD *)v140 - 1);
        v140 -= 2;
        *((_WORD *)v138 - 1) = v142;
        v138 -= 2;
      }
      while (v140 != v141);
      v140 = (char *)__p;
    }
    __p = v138;
    v263 = v132;
    v264 = (__int16 *)v139;
    if (v140)
      operator delete(v140);
  }
  else
  {
    *v121 = ((unsigned __int16)(a2 & 0x400) >> 2) | 0x1D;
    v132 = v121 + 1;
  }
  v263 = v132;
  if (v132 >= v264)
  {
    v144 = (char *)v132 - (_BYTE *)__p;
    if ((char *)v132 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v145 = v144 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v144 >> 1) + 1))
      v146 = v145 + 1;
    else
      v146 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v147 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v147 = v146;
    if (v147)
      v148 = (char *)sub_100BFCCD8((uint64_t)&v264, v147);
    else
      v148 = 0;
    v149 = &v148[2 * v145];
    v150 = &v148[2 * v147];
    *(_WORD *)v149 = ((unsigned __int16)(a2 & 0x1000) >> 4) | 0x1E;
    v143 = (__int16 *)(v149 + 2);
    v152 = (char *)__p;
    v151 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v153 = *((_WORD *)v151 - 1);
        v151 -= 2;
        *((_WORD *)v149 - 1) = v153;
        v149 -= 2;
      }
      while (v151 != v152);
      v151 = (char *)__p;
    }
    __p = v149;
    v263 = v143;
    v264 = (__int16 *)v150;
    if (v151)
      operator delete(v151);
  }
  else
  {
    *v132 = ((unsigned __int16)(a2 & 0x1000) >> 4) | 0x1E;
    v143 = v132 + 1;
  }
  v263 = v143;
  if (v143 >= v264)
  {
    v155 = (char *)v143 - (_BYTE *)__p;
    if ((char *)v143 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v156 = v155 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v155 >> 1) + 1))
      v157 = v156 + 1;
    else
      v157 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v158 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v158 = v157;
    if (v158)
      v159 = (char *)sub_100BFCCD8((uint64_t)&v264, v158);
    else
      v159 = 0;
    v160 = &v159[2 * v156];
    v161 = &v159[2 * v158];
    *(_WORD *)v160 = ((unsigned __int16)(a2 & 0x2000) >> 5) | 0x1F;
    v154 = (__int16 *)(v160 + 2);
    v163 = (char *)__p;
    v162 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v164 = *((_WORD *)v162 - 1);
        v162 -= 2;
        *((_WORD *)v160 - 1) = v164;
        v160 -= 2;
      }
      while (v162 != v163);
      v162 = (char *)__p;
    }
    __p = v160;
    v263 = v154;
    v264 = (__int16 *)v161;
    if (v162)
      operator delete(v162);
  }
  else
  {
    *v143 = ((unsigned __int16)(a2 & 0x2000) >> 5) | 0x1F;
    v154 = v143 + 1;
  }
  v263 = v154;
  if (v154 >= v264)
  {
    v166 = (char *)v154 - (_BYTE *)__p;
    if ((char *)v154 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v167 = v166 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v166 >> 1) + 1))
      v168 = v167 + 1;
    else
      v168 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v169 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v169 = v168;
    if (v169)
      v170 = (char *)sub_100BFCCD8((uint64_t)&v264, v169);
    else
      v170 = 0;
    v171 = &v170[2 * v167];
    v172 = &v170[2 * v169];
    *(_WORD *)v171 = ((unsigned __int16)(a2 & 0x4000) >> 6) | 0x20;
    v165 = (__int16 *)(v171 + 2);
    v174 = (char *)__p;
    v173 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v175 = *((_WORD *)v173 - 1);
        v173 -= 2;
        *((_WORD *)v171 - 1) = v175;
        v171 -= 2;
      }
      while (v173 != v174);
      v173 = (char *)__p;
    }
    __p = v171;
    v263 = v165;
    v264 = (__int16 *)v172;
    if (v173)
      operator delete(v173);
  }
  else
  {
    *v154 = ((unsigned __int16)(a2 & 0x4000) >> 6) | 0x20;
    v165 = v154 + 1;
  }
  v263 = v165;
  if (v165 >= v264)
  {
    v177 = (char *)v165 - (_BYTE *)__p;
    if ((char *)v165 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v178 = v177 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v177 >> 1) + 1))
      v179 = v178 + 1;
    else
      v179 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v180 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v180 = v179;
    if (v180)
      v181 = (char *)sub_100BFCCD8((uint64_t)&v264, v180);
    else
      v181 = 0;
    v182 = &v181[2 * v178];
    v183 = &v181[2 * v180];
    *(_WORD *)v182 = ((unsigned __int16)(a2 & 0x8000) >> 7) | 0x21;
    v176 = (__int16 *)(v182 + 2);
    v185 = (char *)__p;
    v184 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v186 = *((_WORD *)v184 - 1);
        v184 -= 2;
        *((_WORD *)v182 - 1) = v186;
        v182 -= 2;
      }
      while (v184 != v185);
      v184 = (char *)__p;
    }
    __p = v182;
    v263 = v176;
    v264 = (__int16 *)v183;
    if (v184)
      operator delete(v184);
  }
  else
  {
    *v165 = ((unsigned __int16)(a2 & 0x8000) >> 7) | 0x21;
    v176 = v165 + 1;
  }
  v263 = v176;
  v187 = a2 & 0x20000;
  if (v176 >= v264)
  {
    v189 = (char *)v176 - (_BYTE *)__p;
    if ((char *)v176 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v190 = v189 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v189 >> 1) + 1))
      v191 = v190 + 1;
    else
      v191 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v192 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v192 = v191;
    if (v192)
      v193 = (char *)sub_100BFCCD8((uint64_t)&v264, v192);
    else
      v193 = 0;
    v194 = &v193[2 * v190];
    v195 = &v193[2 * v192];
    *(_WORD *)v194 = (v187 >> 9) | 0x23;
    v188 = (__int16 *)(v194 + 2);
    v197 = (char *)__p;
    v196 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v198 = *((_WORD *)v196 - 1);
        v196 -= 2;
        *((_WORD *)v194 - 1) = v198;
        v194 -= 2;
      }
      while (v196 != v197);
      v196 = (char *)__p;
    }
    __p = v194;
    v263 = v188;
    v264 = (__int16 *)v195;
    if (v196)
      operator delete(v196);
  }
  else
  {
    *v176 = (v187 >> 9) | 0x23;
    v188 = v176 + 1;
  }
  v263 = v188;
  v199 = a2 & 0x80000;
  if (v188 >= v264)
  {
    v201 = (char *)v188 - (_BYTE *)__p;
    if ((char *)v188 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v202 = v201 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v201 >> 1) + 1))
      v203 = v202 + 1;
    else
      v203 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v204 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v204 = v203;
    if (v204)
      v205 = (char *)sub_100BFCCD8((uint64_t)&v264, v204);
    else
      v205 = 0;
    v206 = &v205[2 * v202];
    v207 = &v205[2 * v204];
    *(_WORD *)v206 = (v199 >> 11) | 0x2A;
    v200 = (__int16 *)(v206 + 2);
    v209 = (char *)__p;
    v208 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v210 = *((_WORD *)v208 - 1);
        v208 -= 2;
        *((_WORD *)v206 - 1) = v210;
        v206 -= 2;
      }
      while (v208 != v209);
      v208 = (char *)__p;
    }
    __p = v206;
    v263 = v200;
    v264 = (__int16 *)v207;
    if (v208)
      operator delete(v208);
  }
  else
  {
    *v188 = (v199 >> 11) | 0x2A;
    v200 = v188 + 1;
  }
  v263 = v200;
  v211 = a2 & 0x100000;
  if (v200 >= v264)
  {
    v213 = (char *)v200 - (_BYTE *)__p;
    if ((char *)v200 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v214 = v213 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v213 >> 1) + 1))
      v215 = v214 + 1;
    else
      v215 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v216 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v216 = v215;
    if (v216)
      v217 = (char *)sub_100BFCCD8((uint64_t)&v264, v216);
    else
      v217 = 0;
    v218 = &v217[2 * v214];
    v219 = &v217[2 * v216];
    *(_WORD *)v218 = (v211 >> 12) | 0x2B;
    v212 = (__int16 *)(v218 + 2);
    v221 = (char *)__p;
    v220 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v222 = *((_WORD *)v220 - 1);
        v220 -= 2;
        *((_WORD *)v218 - 1) = v222;
        v218 -= 2;
      }
      while (v220 != v221);
      v220 = (char *)__p;
    }
    __p = v218;
    v263 = v212;
    v264 = (__int16 *)v219;
    if (v220)
      operator delete(v220);
  }
  else
  {
    *v200 = (v211 >> 12) | 0x2B;
    v212 = v200 + 1;
  }
  v263 = v212;
  v223 = a2 & 0x40000;
  if (v212 >= v264)
  {
    v225 = (char *)v212 - (_BYTE *)__p;
    if ((char *)v212 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v226 = v225 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v225 >> 1) + 1))
      v227 = v226 + 1;
    else
      v227 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v228 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v228 = v227;
    if (v228)
      v229 = (char *)sub_100BFCCD8((uint64_t)&v264, v228);
    else
      v229 = 0;
    v230 = &v229[2 * v226];
    v231 = &v229[2 * v228];
    *(_WORD *)v230 = (v223 >> 10) | 0xFF;
    v224 = (__int16 *)(v230 + 2);
    v233 = (char *)__p;
    v232 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v234 = *((_WORD *)v232 - 1);
        v232 -= 2;
        *((_WORD *)v230 - 1) = v234;
        v230 -= 2;
      }
      while (v232 != v233);
      v232 = (char *)__p;
    }
    __p = v230;
    v263 = v224;
    v264 = (__int16 *)v231;
    if (v232)
      operator delete(v232);
  }
  else
  {
    *v212 = (v223 >> 10) | 0xFF;
    v224 = v212 + 1;
  }
  v263 = v224;
  v235 = a2 & 0x800000;
  if (v224 >= v264)
  {
    v237 = (char *)v224 - (_BYTE *)__p;
    if ((char *)v224 - (_BYTE *)__p < -2)
      goto LABEL_368;
    v238 = v237 >> 1;
    if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v237 >> 1) + 1))
      v239 = v238 + 1;
    else
      v239 = (char *)v264 - (_BYTE *)__p;
    if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
      v240 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v240 = v239;
    if (v240)
      v241 = (char *)sub_100BFCCD8((uint64_t)&v264, v240);
    else
      v241 = 0;
    v242 = (__int16 *)&v241[2 * v238];
    v243 = &v241[2 * v240];
    *v242 = (v235 >> 15) | 0x24;
    v236 = v242 + 1;
    v245 = (char *)__p;
    v244 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        v246 = *((_WORD *)v244 - 1);
        v244 -= 2;
        *--v242 = v246;
      }
      while (v244 != v245);
      v244 = (char *)__p;
    }
    __p = v242;
    v263 = v236;
    v264 = (__int16 *)v243;
    if (v244)
      operator delete(v244);
  }
  else
  {
    *v224 = (v235 >> 15) | 0x24;
    v236 = v224 + 1;
  }
  v263 = v236;
  v247 = a2 & 0x20000000;
  if (v236 < v264)
  {
    *v236 = (v247 >> 21) | 0xA0;
    v248 = v236 + 1;
    goto LABEL_363;
  }
  v249 = (char *)v236 - (_BYTE *)__p;
  if ((char *)v236 - (_BYTE *)__p <= -3)
LABEL_368:
    sub_100259694();
  v250 = v249 >> 1;
  if ((char *)v264 - (_BYTE *)__p <= (unint64_t)((v249 >> 1) + 1))
    v251 = v250 + 1;
  else
    v251 = (char *)v264 - (_BYTE *)__p;
  if ((unint64_t)((char *)v264 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
    v252 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v252 = v251;
  if (v252)
    v253 = (char *)sub_100BFCCD8((uint64_t)&v264, v252);
  else
    v253 = 0;
  v254 = (__int16 *)&v253[2 * v250];
  v255 = &v253[2 * v252];
  *v254 = (v247 >> 21) | 0xA0;
  v248 = v254 + 1;
  v257 = (char *)__p;
  v256 = (char *)v263;
  if (v263 != __p)
  {
    do
    {
      v258 = *((_WORD *)v256 - 1);
      v256 -= 2;
      *--v254 = v258;
    }
    while (v256 != v257);
    v256 = (char *)__p;
  }
  __p = v254;
  v263 = v248;
  v264 = (__int16 *)v255;
  if (v256)
    operator delete(v256);
LABEL_363:
  v263 = v248;
  v260 = 0;
  v261 = 0;
  v259 = 0;
  sub_1017927C0((char *)&v259, (__int16 *)__p, v248, ((char *)v248 - (_BYTE *)__p) >> 1);
  sub_101721048((_QWORD *)(a1 + 264), (unsigned __int8 **)&v259);
  if (v259)
  {
    v260 = v259;
    operator delete(v259);
  }
  if (__p)
  {
    v263 = (__int16 *)__p;
    operator delete(__p);
  }
}

void sub_10178FC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_10178FCCC(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  dispatch_time_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *((_DWORD *)a2 + 1);
  if (v3)
  {
    v4 = *a2;
    v5 = qmi::asString(*((unsigned int *)a2 + 1));
    sub_10178FE30(v2, (uint64_t)"#bb.e,GPS Reset failed", v4, v3, v5);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e, trigger init timer\"}", (uint8_t *)v9, 0x12u);
    }
    v7 = *(NSObject **)(v2 + 296);
    v8 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  }
}

void sub_10178FE30(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v13 = 68290051;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2081;
    v18 = a2;
    v19 = 1026;
    v20 = a3;
    v21 = 1026;
    v22 = a4;
    v23 = 2081;
    v24 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#bb.e,InitError\", \"error\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"ecode\":%{public}d, \"desc\":%{private, location:escape_only}s}", (uint8_t *)&v13, 0x32u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  }
  v11 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    v13 = 68290051;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2081;
    v18 = a2;
    v19 = 1026;
    v20 = a3;
    v21 = 1026;
    v22 = a4;
    v23 = 2081;
    v24 = a5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,InitError", "{\"msg%{public}.0s\":\"#bb.e,InitError\", \"error\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"ecode\":%{public}d, \"desc\":%{private, location:escape_only}s}", (uint8_t *)&v13, 0x32u);
  }
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 112))(*(_QWORD *)(a1 + 152));
  sub_101789224(a1, v12);
}

void sub_101790028(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *((_DWORD *)a2 + 1);
  v5 = *(unsigned __int16 *)a2;
  v6 = qmi::asString(v4);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 68290051;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2081;
    v14 = "setGetServiceState";
    v15 = 1026;
    v16 = v5;
    v17 = 1026;
    v18 = v4;
    v19 = 2081;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x32u);
  }
  if (v4 != 26 && v4)
  {
    v8 = "#bb.e,ServiceStateResponseError";
  }
  else
  {
    LOBYTE(v10[0]) = 0;
    sub_101710E84(a2, 1u, (uint64_t)v10);
    if (LOBYTE(v10[0]))
      return;
    v8 = "#bb.e,ServiceStateResponseParseError";
  }
  v9 = qmi::asString(*((unsigned int *)a2 + 1));
  sub_10178FE30(v3, (uint64_t)v8, v5, v4, v9);
}

void sub_1017901B8(uint64_t a1, unsigned __int16 *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 1);
  v5 = qmi::asString(v4);
  v6 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68290051;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2081;
    v12 = "sendForceReceiverOff";
    v13 = 1026;
    v14 = v3;
    v15 = 1026;
    v16 = v4;
    v17 = 2081;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x32u);
  }
  if (v4)
  {
    if (v4 != 26)
      sub_10178FE30(v6, (uint64_t)"sendForceReceiverOff", v3, v4, v5);
  }
}

void sub_101790310(uint64_t a1, unsigned __int16 *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 1);
  v5 = qmi::asString(v4);
  v6 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68290051;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2081;
    v12 = "sendSetLppConfig";
    v13 = 1026;
    v14 = v3;
    v15 = 1026;
    v16 = v4;
    v17 = 2081;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x32u);
  }
  if (v4)
  {
    if (v4 != 26)
      sub_10178FE30(v6, (uint64_t)"sendSetLppConfig", v3, v4, v5);
  }
}

void sub_101790468(uint64_t a1, unsigned __int16 *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 1);
  v5 = qmi::asString(v4);
  v6 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68290051;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2081;
    v12 = "sendSetServiceState";
    v13 = 1026;
    v14 = v3;
    v15 = 1026;
    v16 = v4;
    v17 = 2081;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x32u);
  }
  if (v4)
  {
    if (v4 != 26)
      sub_10178FE30(v6, (uint64_t)"sendSetServiceState", v3, v4, v5);
  }
}

void sub_1017905C0(uint64_t a1, unsigned __int16 *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 1);
  v5 = qmi::asString(v4);
  v6 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68290051;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2081;
    v12 = "sendSetAutoTrackingState";
    v13 = 1026;
    v14 = v3;
    v15 = 1026;
    v16 = v4;
    v17 = 2081;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x32u);
  }
  if (v4)
  {
    if (v4 != 26)
      sub_10178FE30(v6, (uint64_t)"sendSetAutoTrackingState", v3, v4, v5);
  }
}

void sub_101790718(uint64_t a1, unsigned __int16 *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 1);
  v5 = qmi::asString(v4);
  v6 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68290051;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2081;
    v12 = "sendSvUseInFixReport";
    v13 = 1026;
    v14 = v3;
    v15 = 1026;
    v16 = v4;
    v17 = 2081;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x32u);
  }
  if (v4)
  {
    if (v4 != 26)
      sub_10178FE30(v6, (uint64_t)"sendSvUseInFixReport", v3, v4, v5);
  }
}

void sub_101790870(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *((_DWORD *)a2 + 1);
  v5 = *a2;
  v6 = qmi::asString(v4);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 68290051;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2081;
    v14 = "sendSetServiceState";
    v15 = 1026;
    v16 = v5;
    v17 = 1026;
    v18 = v4;
    v19 = 2081;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x32u);
  }
  if (v4 && v4 != 26)
  {
    v9 = qmi::asString(*((unsigned int *)a2 + 1));
    sub_10178FE30(v3, (uint64_t)"#bb.e,sendSetServiceState", v5, v4, v9);
  }
  else
  {
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 152) + 48))(*(_QWORD *)(v3 + 152));
    sub_101789224(v3, v8);
  }
}

id sub_1017909F0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1026;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#irat,assert\", \"level\":%{public}d}", (uint8_t *)v6, 0x18u);
  }
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 304), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "assertCommCenter:with:", 3, a2);
}

_QWORD *sub_101790B00(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021CEE18;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_101790B5C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1021CEE18;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

const char *sub_101790BC8()
{
  return "DisconnectedState";
}

const char *sub_101790BD4()
{
  return "InitializingState";
}

const char *sub_101790BE0()
{
  return "RunningState";
}

const char *sub_101790BEC()
{
  return "SleepingState";
}

const char *sub_101790BF8()
{
  return "InitErrorState";
}

void sub_101790C04(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101790C30(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_101790C30(a1, *a2);
    sub_101790C30(a1, a2[1]);
    sub_101790C78(a2 + 4);
    operator delete(a2);
  }
}

_QWORD *sub_101790C78(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_101790CFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021CEEC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101790D10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021CEEC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_101790D44(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_101790D58()
{
  operator delete();
}

_QWORD *sub_101790D6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CEF18;
  result[1] = v3;
  return result;
}

uint64_t sub_101790DA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CEF18;
  a2[1] = v2;
  return result;
}

uint64_t sub_101790DBC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 152) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152), a2, *a3);
}

uint64_t sub_101790DD4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101790E10()
{
}

char *sub_101790E1C(uint64_t **a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  void **v6;
  char *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v6 = (void **)sub_101790EDC((uint64_t)a1, &v12, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x68uLL);
    v10[1] = a1 + 1;
    *((_QWORD *)v7 + 4) = **a4;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    v11 = 1;
    sub_1000145B0(a1, v12, v8, (uint64_t *)v7);
    v10[0] = 0;
    sub_101790F9C((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_101790EDC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if (!sub_101790F60(*a3, v4[4]))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_101790F60(v7[4], *a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL sub_101790F60(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if ((v2 & 0x8000000000000000) != 0 && (v3 & 0x8000000000000000) != 0)
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) >> 31;
  else
    return v2 < v3;
}

void sub_101790F9C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_101790C78(v2 + 4);
    operator delete(v2);
  }
}

void sub_101790FE4()
{
  operator delete();
}

_QWORD *sub_101790FF8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CEFA8;
  result[1] = v3;
  return result;
}

uint64_t sub_10179102C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CEFA8;
  a2[1] = v2;
  return result;
}

void sub_101791048(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  const char *v13;

  v1 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v3 = (_QWORD *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0)
      v3 = (_QWORD *)*v3;
    v6 = 68289539;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v3;
    v12 = 2081;
    v13 = "InitActionNotSet";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#bb.e,initEvent\", \"fService\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&v6, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  }
  v4 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    v5 = (_QWORD *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0)
      v5 = (_QWORD *)*v5;
    v6 = 68289539;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v5;
    v12 = 2081;
    v13 = "InitActionNotSet";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,initEvent", "{\"msg%{public}.0s\":\"#bb.e,initEvent\", \"fService\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&v6, 0x26u);
  }
}

uint64_t sub_10179120C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101791248()
{
}

uint64_t **sub_101791254(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x48uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 8) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *sub_101791314(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10179147C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_101791488(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1017915F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1017915FC(uint64_t *a1, dispatch_group_t group)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v2 = *a1;
  if (group)
  {
    dispatch_group_leave(group);
    v3 = *(_QWORD *)(v2 + 240);
    if (v3)
      sub_10184C154(v3);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "stored nullptr", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CEE98);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "stored nullptr", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "auto CLQmiController::delaySleep(dispatch_group_t)::(anonymous class)::operator()(dispatch_group_t) const", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  if (*(_BYTE *)(v2 + 208))
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 152) + 88))(*(_QWORD *)(v2 + 152));
    sub_101789224(v2, v5);
  }
}

void sub_1017917D0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1017917F4(uint64_t a1)
{
  sub_1017915FC((uint64_t *)(a1 + 32), *(dispatch_group_t *)(a1 + 24));
}

uint64_t sub_101791818(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_101791858(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_101790F60(v3[4], *a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_101790F60(*a2, v5[4]))
    return v2;
  return v5;
}

uint64_t sub_1017918D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1017918DC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *sub_101791940(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021CF088;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_10179199C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1021CF088;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_QWORD *sub_101791A08(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = off_1021CF088;
  sub_100270E34((uint64_t)(v3 + 1), v2);
  v3[5] = *(_QWORD *)(a1 + 40);
  return v3;
}

void sub_101791A5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101791A70(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = off_1021CF088;
  result = sub_100270E34((uint64_t)(a2 + 1), a1 + 8);
  a2[5] = *(_QWORD *)(a1 + 40);
  return result;
}

_QWORD *sub_101791AB0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101791AE4(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_101791B34(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[5];
  uint8_t buf[8];
  __int128 v8;
  void *v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v8) = 2082;
    *(_QWORD *)((char *)&v8 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,registration action\"}", buf, 0x12u);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_101791CE0;
  v6[3] = &unk_1021CF0E8;
  v6[4] = v2;
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v8 = 3221225472;
  *((_QWORD *)&v8 + 1) = sub_101791DEC;
  v9 = &unk_1021C6CE8;
  v10 = v6;
  qmi::Client::setIndHandler(v2 + 32, 96, buf);
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v2 + 32);
}

uint64_t sub_101791C98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101791CD4()
{
}

void sub_101791CE0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289283;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    v6 = 2081;
    v7 = "pdsReady";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initIndMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)v3, 0x1Cu);
  }
  dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 296), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  sub_10178DFCC(v1);
}

void sub_101791DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_101791E48(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101791E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101791E48(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101791F28(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101791EE8((uint64_t)a2);
  }
}

void sub_101791ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101791EE8(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x60u);
  return a1;
}

void sub_101791F14(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_101791F28(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x60u);
  return a1;
}

void sub_101791F54(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101791F6C()
{
  operator delete();
}

_QWORD *sub_101791F80(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CF128;
  result[1] = v3;
  return result;
}

uint64_t sub_101791FB4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CF128;
  a2[1] = v2;
  return result;
}

void sub_101791FD0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  dispatch_time_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  v1 = *(_QWORD *)(a1 + 8);
  sub_1017909F0(v1, 2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,trigger reset timer\"}", (uint8_t *)v5, 0x12u);
  }
  v3 = *(NSObject **)(v1 + 288);
  v4 = dispatch_time(0, 4000000000);
  dispatch_source_set_timer(v3, v4, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
}

uint64_t sub_1017920E0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10179211C()
{
}

void sub_10179212C()
{
  operator delete();
}

_QWORD *sub_101792140(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CF1A8;
  result[1] = v3;
  return result;
}

uint64_t sub_101792174(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CF1A8;
  a2[1] = v2;
  return result;
}

id sub_101792190(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v1 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,cleanup reset and init timers\"}", (uint8_t *)v4, 0x12u);
  }
  dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 288), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 296), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  return sub_1017909F0(v1, 1);
}

uint64_t sub_1017922A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017922E0()
{
}

void sub_1017922F0()
{
  operator delete();
}

_QWORD *sub_101792304(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CF228;
  result[1] = v3;
  return result;
}

uint64_t sub_101792338(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CF228;
  a2[1] = v2;
  return result;
}

uint64_t **sub_101792354(uint64_t a1)
{
  uint64_t **v1;
  uint64_t **result;
  NSObject *v3;
  uint64_t *v4;
  int v5;
  uint8_t buf[8];
  __int16 v7;
  const char *v8;

  v1 = (uint64_t **)(*(_QWORD *)(a1 + 8) + 96);
  v5 = 4;
  *(_QWORD *)buf = &v5;
  result = sub_101791254(v1, &v5, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  if (result[8])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,trigger error handler\"}", buf, 0x12u);
    }
    v5 = 4;
    *(_QWORD *)buf = &v5;
    v4 = sub_101791254(v1, &v5, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8];
    if (!v4)
      sub_10025FD1C();
    return (uint64_t **)(*(uint64_t (**)(uint64_t *))(*v4 + 48))(v4);
  }
  return result;
}

uint64_t sub_1017924A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017924E4()
{
}

_QWORD *sub_1017924F0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021CF2A8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_10179254C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1021CF2A8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_QWORD *sub_1017925B8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = off_1021CF2A8;
  sub_100270E34((uint64_t)(v3 + 1), v2);
  v3[5] = *(_QWORD *)(a1 + 40);
  return v3;
}

void sub_10179260C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101792620(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = off_1021CF2A8;
  result = sub_100270E34((uint64_t)(a2 + 1), a1 + 8);
  a2[5] = *(_QWORD *)(a1 + 40);
  return result;
}

_QWORD *sub_101792660(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101792694(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_1017926E4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, *(_QWORD *)(a1 + 40) + 264);
}

uint64_t sub_101792714(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101792750()
{
}

uint64_t sub_10179275C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

char *sub_1017927C0(char *result, __int16 *a2, __int16 *a3, uint64_t a4)
{
  char *v6;
  _WORD *v7;
  __int16 v8;

  if (a4)
  {
    v6 = result;
    result = sub_100BFCC9C(result, a4);
    v7 = (_WORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_101792814(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_101792830()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"timer is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    }
    v1 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "timer is null", "{\"msg%{public}.0s\":\"timer is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CEE98);
    }
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"timer is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/Eureka/CLQmiController.mm", 857, "createTimer");
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021CEE98);
  }
}

void sub_1017929FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  _WORD v19[6];
  int v20;
  uint8_t buf[8];
  std::__shared_weak_count *v22;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  sub_100270E34(a1 + 16, a3);
  sub_100270E34(a1 + 48, a4);
  sub_100270E34(a1 + 80, a5);
  *(_DWORD *)(a1 + 112) = 1;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  sub_1001E4804(buf);
  sub_1001E4874(*(uint64_t *)buf, "DemEnable", (BOOL *)(a1 + 112));
  v8 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (*(_BYTE *)(a1 + 112))
    *(_QWORD *)(a1 + 8) = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLDigitalElevationModel"));
  v20 = 0;
  sub_1001E4804(buf);
  v11 = sub_1001E4B84(*(uint64_t *)buf, "GpsForceAllowCellularDemDownloads", &v20);
  if (v20 == 1)
    v12 = v11;
  else
    v12 = 0;
  v13 = v22;
  if (!v22)
    goto LABEL_15;
  v14 = (unint64_t *)&v22->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v12)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    if (!v12)
      goto LABEL_21;
  }
  *(_BYTE *)(a1 + 113) = 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF318);
  v16 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "DEM,GpsForceAllowCellularDemDownloads,1", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF318);
    v19[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,GpsForceAllowCellularDemDownloads,1", v19, 2);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "CLGnssAssistanceDem::CLGnssAssistanceDem(id<CLIntersiloUniverse>, CLSetCommandToExecute, UndulationCallback, PositionAssistanceCallback)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
LABEL_21:
  sub_1012A3B98();
}

void sub_101792D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v18 = v13[20];
  v13[20] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = (_QWORD *)v13[13];
  if (v19 == v16)
  {
    v20 = 4;
    v19 = v16;
  }
  else
  {
    if (!v19)
      goto LABEL_8;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_8:
  v21 = (_QWORD *)v13[9];
  if (v21 == v15)
  {
    v22 = 4;
    v21 = v15;
  }
  else
  {
    if (!v21)
      goto LABEL_13;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_13:
  v23 = (_QWORD *)v13[5];
  if (v23 == v14)
  {
    v24 = 4;
    v23 = v14;
  }
  else
  {
    if (!v23)
      goto LABEL_18;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_18:
  _Unwind_Resume(exception_object);
}

void sub_101792E20(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssAssistanceDem::onGpsAssistantNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF338);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceDem::onGpsAssistantNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF338);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceDem::onGpsAssistantNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101793F58((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101792FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101792FFC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  sub_100010B00(a1);

  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD **)(a1 + 104);
  if (v3 == (_QWORD *)(a1 + 80))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 80);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(_QWORD **)(a1 + 72);
  if (v5 == (_QWORD *)(a1 + 48))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
  v7 = *(_QWORD **)(a1 + 40);
  if (v7 == (_QWORD *)(a1 + 16))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 16);
    goto LABEL_17;
  }
  if (v7)
  {
    v8 = 5;
LABEL_17:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_1017930DC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;

  if (vabdd_f64(sub_100078B88(), *(double *)(a1 + 120)) < a3)
  {
    *(_BYTE *)(a2 + 155) = 1;
    v5 = *(_QWORD *)(a1 + 136);
    *(double *)(a2 + 160) = *(double *)(a1 + 128) + *(double *)(a1 + 144);
    *(_QWORD *)(a2 + 168) = v5;
  }
}

void sub_101793134(uint64_t a1, __int128 *a2, int a3)
{
  NSObject *v6;
  NSObject *v7;
  double v8;
  double v9;
  int v10;
  _BOOL8 v11;
  double v12;
  NSObject *v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  NSObject *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  const char *v41;
  char *v42;
  const char *v43;
  char *v44;
  const char *v45;
  char *v46;
  uint64_t v47;
  double v48;
  int v49;
  double v50;
  int v51;
  __int128 *v52;
  _BYTE v53[24];
  _BYTE *v54;
  int v55;
  double v56;
  __int16 v57;
  uint64_t v58;
  _OWORD v59[8];
  _OWORD v60[2];
  double v61[65];
  _QWORD v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char v69;
  _BYTE buf[24];
  void *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _OWORD v80[92];

  v52 = a2;
  if (*(_BYTE *)(a1 + 114)
    && *(_BYTE *)(a1 + 112)
    && *(_QWORD *)(a1 + 8)
    && *(double *)((char *)a2 + 52) > 0.0
    && *(double *)((char *)a2 + 44) < 45.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF318);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "DEM,feeding position", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF318);
      LOWORD(v59[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,feeding position", v59, 2);
      v40 = (char *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedPositionAndPopulateGroundAltUncAndClampLongitude(GNSS::DaemonLocation *, const BOOL)", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v51 = 0;
    v50 = 0.0;
    if (objc_msgSend(*(id *)(a1 + 8), "syncgetAltitude:rel:undulation:feedToAltFilter:", a2, &v51, &v50, 1))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF318);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "DEM,altitude available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF318);
        LOWORD(v59[0]) = 0;
        LODWORD(v47) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,altitude available", v59, v47);
        v42 = (char *)v41;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedPositionAndPopulateGroundAltUncAndClampLongitude(GNSS::DaemonLocation *, const BOOL)", "%s\n", v41);
        if (v42 != buf)
          free(v42);
      }
      if (*(_QWORD *)(a1 + 72))
        sub_101793BA0(a1 + 48, 2, v50, *(double *)((char *)a2 + 76));
      v8 = *((double *)a2 + 67);
      v9 = *(double *)((char *)a2 + 28);
      if (vabdd_f64(v8, v9) > 150.0)
      {
        if (qword_1022A0070 != -1)
        {
          v48 = *(double *)((char *)a2 + 28);
          dispatch_once(&qword_1022A0070, &stru_1021CF318);
          v9 = v48;
        }
        v12 = v8 - v9;
        v13 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "DEM, large altitude offset between DEM and GPS: %{public}f not feeding to hardware", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF318);
          LODWORD(v59[0]) = 134349056;
          *(double *)((char *)v59 + 4) = v12;
          LODWORD(v47) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM, large altitude offset between DEM and GPS: %{public}f not feeding to hardware", v59, v47);
          v15 = (char *)v14;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedPositionAndPopulateGroundAltUncAndClampLongitude(GNSS::DaemonLocation *, const BOOL)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
      }
      else
      {
        switch(v51)
        {
          case 1:
            v10 = 1;
            goto LABEL_43;
          case 2:
            v10 = 2;
            goto LABEL_43;
          case 3:
            v10 = 3;
            goto LABEL_43;
          case 4:
            v10 = 4;
LABEL_43:
            v49 = v10;
            break;
          default:
            v49 = 0;
            break;
        }
        if (*(_QWORD *)(a1 + 40))
        {
          *(double *)(a1 + 120) = sub_100078B88();
          *(_OWORD *)(a1 + 128) = *(__int128 *)((char *)a2 + 536);
          *(double *)(a1 + 144) = v50;
          v22 = a2[6];
          v23 = a2[8];
          v59[7] = a2[7];
          v60[0] = v23;
          *(_OWORD *)((char *)v60 + 12) = *(__int128 *)((char *)a2 + 140);
          v24 = a2[2];
          v25 = a2[4];
          v26 = a2[5];
          v59[3] = a2[3];
          v59[4] = v25;
          v59[5] = v26;
          v59[6] = v22;
          v27 = a2[1];
          v59[0] = *a2;
          v59[1] = v27;
          v59[2] = v24;
          memcpy(v61, a2 + 10, 0x201uLL);
          v62[0] = *((_QWORD *)a2 + 85);
          v28 = *((_QWORD *)a2 + 86);
          v62[1] = v28;
          if (v28)
          {
            v29 = (unint64_t *)(v28 + 8);
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
          }
          v31 = *(__int128 *)((char *)a2 + 776);
          v67 = *(__int128 *)((char *)a2 + 760);
          v68 = v31;
          v32 = *(__int128 *)((char *)a2 + 712);
          v63 = *(__int128 *)((char *)a2 + 696);
          v64 = v32;
          v33 = *(__int128 *)((char *)a2 + 744);
          v65 = *(__int128 *)((char *)a2 + 728);
          v66 = v33;
          v69 = *((_BYTE *)a2 + 792);
          if (a3
            && *(_BYTE *)(a1 + 115)
            && (*(_QWORD *)&v61[48] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && v61[48] < 40.0
            && v61[48] > 0.0)
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CF318);
            v34 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134349312;
              *(double *)&buf[4] = v61[48];
              *(_WORD *)&buf[12] = 2050;
              *(_QWORD *)&buf[14] = 0x4044000000000000;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "DEM,uncertainty inflated,old,%{public}0.3f,new,%{public}0.3f", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CF318);
              v55 = 134349312;
              v56 = v61[48];
              v57 = 2050;
              v58 = 0x4044000000000000;
              LODWORD(v47) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "DEM,uncertainty inflated,old,%{public}0.3f,new,%{public}0.3f", &v55, v47);
              v46 = (char *)v45;
              sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedPositionAndPopulateGroundAltUncAndClampLongitude(GNSS::DaemonLocation *, const BOOL)", "%s\n", v45);
              if (v46 != buf)
                free(v46);
            }
            v61[48] = 40.0;
          }
          v54 = 0;
          v35 = operator new(0x30uLL);
          *v35 = off_1021CF368;
          v35[1] = &v49;
          v35[2] = v59;
          v35[3] = &v50;
          v35[4] = a1;
          v35[5] = &v52;
          v54 = v35;
          v36 = *(_QWORD *)(a1 + 40);
          if (!v36)
            sub_10025FD1C();
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v36 + 48))(v36, v53);
          v37 = v54;
          if (v54 == v53)
          {
            v38 = 4;
            v37 = v53;
          }
          else
          {
            if (!v54)
            {
LABEL_65:
              sub_100261F44((uint64_t)v62);
              return;
            }
            v38 = 5;
          }
          (*(void (**)(void))(*v37 + 8 * v38))();
          goto LABEL_65;
        }
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 152))
        v11 = *(_BYTE *)(a1 + 113) != 0;
      else
        v11 = 1;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF318);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = v11;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "DEM,downloadIfNeeded,isGPSSignalQualityGood,%{public}d,allowCenterTileDownloadOverCellular,%{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF318);
        *(_QWORD *)&v59[0] = 67240448;
        WORD4(v59[0]) = 1026;
        *(_DWORD *)((char *)v59 + 10) = v11;
        LODWORD(v47) = 14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,downloadIfNeeded,isGPSSignalQualityGood,%{public}d,allowCenterTileDownloadOverCellular,%{public}d", v59, v47);
        v44 = (char *)v43;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedPositionAndPopulateGroundAltUncAndClampLongitude(GNSS::DaemonLocation *, const BOOL)", "%s\n", v43);
        if (v44 != buf)
          free(v44);
      }
      v17 = *(void **)(a1 + 8);
      v18 = a2[7];
      v78 = a2[6];
      v79 = v18;
      v80[0] = a2[8];
      *(_OWORD *)((char *)v80 + 12) = *(__int128 *)((char *)a2 + 140);
      v19 = a2[3];
      v74 = a2[2];
      v75 = v19;
      v20 = a2[5];
      v76 = a2[4];
      v77 = v20;
      v21 = a2[1];
      v72 = *a2;
      v73 = v21;
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_1017947DC;
      v71 = &unk_10214CAA0;
      objc_msgSend(v17, "downloadIfNeeded:signalQuality:allowCenterOverCellular:", objc_msgSend(buf, "copy"), 0, v11);
    }
  }
}

void sub_101793B38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101793BA0(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t v4;
  int v6;
  double v7;
  double v8;

  v8 = a3;
  v7 = a4;
  v6 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, double *, double *, int *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

void sub_101793BE8(uint64_t a1, uint64_t a2)
{
  void *v2;
  int v3;
  NSObject *v4;
  char *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (*(_BYTE *)(a1 + 112))
  {
    v2 = *(void **)(a1 + 8);
    if (v2)
    {
      v3 = a2;
      objc_msgSend(v2, "updateAirborneActivity:", a2);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF318);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        v8 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DEM,isAirborne,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF318);
        v6[0] = 67240192;
        v6[1] = v3;
        v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,isAirborne,%{public}d", v6, 8);
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedAirborneActivity(const BOOL)", "%s\n", v5);
        if (v5 != (char *)buf)
          free(v5);
      }
    }
  }
}

void sub_101793DA8(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF318);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DEM,Battery Saver enabled,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF318);
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,Battery Saver enabled,%{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedBatterySaverMode(const BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_BYTE *)(a1 + 152) = a2;
}

void sub_101793F58(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  NSObject *v17;
  int v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  _OWORD v31[3];
  int v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t v59;

  if (*a3 == 4)
  {
    if (*(_BYTE *)(a1 + 114) && *(_BYTE *)(a1 + 112) && *(_QWORD *)(a1 + 8))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF318);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_QWORD *)(a4 + 16);
        v8 = *(_QWORD *)(a4 + 24);
        v9 = *(unsigned __int8 *)(a4 + 42);
        v10 = *(unsigned __int8 *)(a4 + 43);
        v11 = *(unsigned __int8 *)(a4 + 40);
        v12 = *(unsigned __int8 *)(a4 + 41);
        v13 = *(_QWORD *)(a4 + 32);
        *(_DWORD *)buf = 134285057;
        v47 = v7;
        v48 = 2049;
        v49 = v8;
        v50 = 1026;
        v51 = v9;
        v52 = 1026;
        v53 = v10;
        v54 = 1026;
        v55 = v11;
        v56 = 1026;
        v57 = v12;
        v58 = 2048;
        v59 = v13;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "DEM,feeding TBA,search based on,lat,%{private}.7lf,lon,%{private}.7lf,isTunnel,%{public}d,isBridge,%{public}d,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,radius,%.1lf", buf, 0x38u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF318);
        v22 = *(_QWORD *)(a4 + 16);
        v23 = *(_QWORD *)(a4 + 24);
        v24 = *(unsigned __int8 *)(a4 + 42);
        v25 = *(unsigned __int8 *)(a4 + 43);
        v26 = *(unsigned __int8 *)(a4 + 40);
        v27 = *(unsigned __int8 *)(a4 + 41);
        v28 = *(_QWORD *)(a4 + 32);
        v32 = 134285057;
        v33 = v22;
        v34 = 2049;
        v35 = v23;
        v36 = 1026;
        v37 = v24;
        v38 = 1026;
        v39 = v25;
        v40 = 1026;
        v41 = v26;
        v42 = 1026;
        v43 = v27;
        v44 = 2048;
        v45 = v28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,feeding TBA,search based on,lat,%{private}.7lf,lon,%{private}.7lf,isTunnel,%{public}d,isBridge,%{public}d,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,radius,%.1lf", &v32, 56);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::onGpsAssistantNotification(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      v14 = *(void **)(a1 + 8);
      v15 = *(_OWORD *)(a4 + 16);
      v31[0] = *(_OWORD *)a4;
      v31[1] = v15;
      v31[2] = *(_OWORD *)(a4 + 32);
      objc_msgSend(v14, "updateTunnelBridgeAssistance:", v31);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF318);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v18 = *a3;
      *(_DWORD *)buf = 67109120;
      LODWORD(v47) = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#Warning, Unsupported notification %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF318);
      v19 = *a3;
      v32 = 67109120;
      LODWORD(v33) = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning, Unsupported notification %d", &v32);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::onGpsAssistantNotification(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
  }
}

void sub_101794348(uint64_t a1, char a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  *(_BYTE *)(a1 + 115) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF318);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v4 = *(unsigned __int8 *)(a1 + 115);
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLGnssAssistanceDem,DEMDeweightAreaMonitor,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF318);
    v5 = *(unsigned __int8 *)(a1 + 115);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLGnssAssistanceDem,DEMDeweightAreaMonitor,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::setInDEMDeweightArea(const BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_1017944FC(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101794528(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101794558()
{
  operator delete();
}

__n128 sub_10179456C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = off_1021CF368;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_1017945B4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = off_1021CF368;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1017945E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD **v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD v30[8];
  _BYTE v31[28];
  _BYTE v32[513];
  uint64_t v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;

  v3 = *(_QWORD *)(a1 + 32);
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, double))(*(_QWORD *)a2 + 128))(a2, **(unsigned int **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(v3 + 115), **(double **)(a1 + 24));
  v4 = *(_QWORD *)(v3 + 104);
  if (v4)
  {
    v5 = *(_OWORD ***)(a1 + 40);
    v6 = *v5;
    v7 = (*v5)[1];
    v30[0] = **v5;
    v30[1] = v7;
    v8 = v6[5];
    v10 = v6[2];
    v9 = v6[3];
    v30[4] = v6[4];
    v30[5] = v8;
    v30[2] = v10;
    v30[3] = v9;
    v12 = v6[7];
    v11 = v6[8];
    v13 = v6[6];
    *(_OWORD *)&v31[12] = *(_OWORD *)((char *)v6 + 140);
    v30[7] = v12;
    *(_OWORD *)v31 = v11;
    v30[6] = v13;
    memcpy(v32, v6 + 10, sizeof(v32));
    v33 = *((_QWORD *)v6 + 85);
    v14 = (std::__shared_weak_count *)*((_QWORD *)v6 + 86);
    v34 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v4 = *(_QWORD *)(v3 + 104);
      v17 = *(_OWORD *)((char *)v6 + 696);
      v18 = *(_OWORD *)((char *)v6 + 728);
      v36 = *(_OWORD *)((char *)v6 + 712);
      v37 = v18;
      v35 = v17;
      v19 = *((_BYTE *)v6 + 792);
      v20 = *(_OWORD *)((char *)v6 + 744);
      v21 = *(_OWORD *)((char *)v6 + 776);
      v39 = *(_OWORD *)((char *)v6 + 760);
      v40 = v21;
      v38 = v20;
      v41 = v19;
      if (!v4)
        sub_10025FD1C();
    }
    else
    {
      v22 = *(_OWORD *)((char *)v6 + 696);
      v23 = *(_OWORD *)((char *)v6 + 728);
      v36 = *(_OWORD *)((char *)v6 + 712);
      v37 = v23;
      v35 = v22;
      v24 = *((_BYTE *)v6 + 792);
      v25 = *(_OWORD *)((char *)v6 + 744);
      v26 = *(_OWORD *)((char *)v6 + 776);
      v39 = *(_OWORD *)((char *)v6 + 760);
      v40 = v26;
      v38 = v25;
      v41 = v24;
    }
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v4 + 48))(v4, v30);
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_10179477C(_Unwind_Exception *a1)
{
  if (STACK[0x2B0])
    sub_1018FBC0C((std::__shared_weak_count *)STACK[0x2B0]);
  _Unwind_Resume(a1);
}

uint64_t sub_101794794(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017947D0()
{
}

__n128 sub_1017947DC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = v2;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 172);
  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v4;
  result = *(__n128 *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  return result;
}

void sub_101794810()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1017948AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1017948C4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_101794950(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_101794968()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CDCED4;
      v1[3] = unk_101CDCEE4;
      v1[4] = xmmword_101CDCEF4;
      v1[0] = xmmword_101CDCEB4;
      v1[1] = unk_101CDCEC4;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_101794A3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_101794A54(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_101795234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v25 = (_QWORD *)v19[33];
  if (v25 == v22)
  {
    v26 = 4;
    v25 = v22;
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  v27 = (_QWORD *)v19[29];
  if (v27 == v21)
  {
    v28 = 4;
    v27 = v21;
  }
  else
  {
    if (!v27)
      goto LABEL_11;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_11:
  v29 = (_QWORD *)v19[25];
  if (v29 == v20)
  {
    v30 = 4;
    v29 = v20;
  }
  else
  {
    if (!v29)
      goto LABEL_16;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_16:
  v31 = v19[7];
  v19[7] = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v19[6];
  v19[6] = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = v19[5];
  v19[5] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = v19[4];
  v19[4] = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = v19[3];
  v19[3] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *v23;
  *v23 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v19[1];
  v19[1] = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  _Unwind_Resume(exception_object);
}

void sub_1017953E0(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLRhythmicGnssEngine::onGpsNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF3F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssEngine::onGpsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF3F8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssEngine::onGpsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1017991D4((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101795598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1017955B8(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id *v18;

  CLProfilingIdentify("CLRhythmicGnssEngine::onDaemonStatusNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF3F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssEngine::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF3F8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssEngine::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_10179D378((uint64_t)a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_101795768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101795788(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLRhythmicGnssEngine::onClientManagerNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF3F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssEngine::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF3F8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssEngine::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10179A2F0((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101795940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101795960(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  id *v16;

  CLProfilingIdentify("CLRhythmicGnssEngine::onWifiNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF3F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssEngine::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF3F8);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssEngine::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_101799FE8();
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_101795AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101795B1C(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  id *v16;

  CLProfilingIdentify("CLRhythmicGnssEngine::onCellNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF3F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssEngine::onCellNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF3F8);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssEngine::onCellNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_10179A16C();
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_101795CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101795CD8(uint64_t a1, _DWORD *a2, CLMotionActivity *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLRhythmicGnssEngine::onMotionActivityNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF3F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssEngine::onMotionActivityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF3F8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssEngine::onMotionActivityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10179A794((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101795E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101795EB0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,fRhythmicGnss1HzHeartbeatTimer timer set", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,fRhythmicGnss1HzHeartbeatTimer timer set", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "CLRhythmicGnssEngine::CLRhythmicGnssEngine(id<CLIntersiloUniverse>, RhythmicGnssUsageCallback, GnssStateUpdateCallback, RhythmicGnssHeartBeatTimerCallback)_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_101796048(v1);
}

void sub_101796048(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  double v15;
  double v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  int v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,onRhythmicGnss1HzHeartbeatTimeout", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    LOWORD(v33) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,onRhythmicGnss1HzHeartbeatTimeout", &v33, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onRhythmicGnss1HzHeartbeatTimeout()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v3 = *(_QWORD *)(a1 + 264);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,onRhythmicGnss1HzHeartbeatTimeout,no client HB callback", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,onRhythmicGnss1HzHeartbeatTimeout,no client HB callback", &v33, v32);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onRhythmicGnss1HzHeartbeatTimeout()", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
  }
  if (*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(double *)(a1 + 272);
      v7 = *(double *)(a1 + 280);
      v8 = sub_1001FCBB4();
      *(_DWORD *)buf = 134349568;
      v40 = v6;
      v41 = 2050;
      v42 = v7;
      v43 = 2050;
      v44 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLRGE,HbTimeout,fLastGpsOnTime_s,%{public}.3lf,fLastGpsOffTime_s,%{public}.3lf,CLCommonGetMachContinuousTime,%{public}.3lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v20 = qword_1022A0078;
      v21 = *(double *)(a1 + 272);
      v22 = *(double *)(a1 + 280);
      v23 = sub_1001FCBB4();
      v33 = 134349568;
      v34 = v21;
      v35 = 2050;
      v36 = v22;
      v37 = 2050;
      v38 = v23;
      LODWORD(v32) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 0, "CLRGE,HbTimeout,fLastGpsOnTime_s,%{public}.3lf,fLastGpsOffTime_s,%{public}.3lf,CLCommonGetMachContinuousTime,%{public}.3lf", &v33, v32);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onRhythmicGnss1HzHeartbeatTimeout()", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    if (*(double *)(a1 + 272) > *(double *)(a1 + 280)
      && sub_1001FCBB4() - *(double *)(a1 + 272) >= *(double *)(a1 + 80))
    {
      sub_101797250(a1);
    }
    sub_101796D94(a1);
    v9 = sub_1001FCBB4();
    v10 = *(double *)(a1 + 272);
    v11 = *(double *)(a1 + 280);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v12 = v9 - v10;
    v13 = v11 - v10;
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      v40 = v9;
      v41 = 2050;
      v42 = v12;
      v43 = 2050;
      v44 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLRGE,HbTimeout,curTime,%{public}.3lf,timeSinceLastStart,%{public}.3lf,lastSessionDuration,%{public}.3lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v33 = 134349568;
      v34 = v9;
      v35 = 2050;
      v36 = v12;
      v37 = 2050;
      v38 = v13;
      LODWORD(v32) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGE,HbTimeout,curTime,%{public}.3lf,timeSinceLastStart,%{public}.3lf,lastSessionDuration,%{public}.3lf", &v33, v32);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onRhythmicGnss1HzHeartbeatTimeout()", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    v15 = *(double *)(a1 + 272);
    v16 = *(double *)(a1 + 280);
    if (v15 == v16 || v15 < v16 && v12 >= *(double *)(a1 + 96) + -3.0)
      sub_101797900(a1, v9);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CLRGE,HbTimeout,no clients present", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,HbTimeout,no clients present", &v33, v32);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onRhythmicGnss1HzHeartbeatTimeout()", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    sub_101796D94(a1);
  }
}

uint64_t sub_1017967C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_1001FD94C();
  sub_1005254E4(v0);
  v1 = sub_1001FD94C();
  sub_1005254E4(v1);
  v2 = sub_1001FD94C();
  sub_1005254E4(v2);
  v3 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 944))(v3);
}

void sub_10179681C(double *a1)
{
  uint64_t v2;
  double v3;
  int v4;
  double v5;
  uint64_t v6;
  double v7;
  int v8;
  double v9;
  uint64_t v10;
  double v11;
  int v12;
  double v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  _BYTE buf[12];
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;

  v2 = sub_1001FD94C();
  v3 = a1[52];
  *(_QWORD *)buf = 0;
  v4 = sub_1001FD9FC(v2, (uint64_t)CFSTR("TotalActiveGnssSecondsUsedPerDayKeyString"), buf);
  v5 = *(double *)buf;
  if (!v4)
    v5 = v3;
  a1[52] = v5;
  v6 = sub_1001FD94C();
  v7 = a1[54];
  *(_QWORD *)buf = 0;
  v8 = sub_1001FD9FC(v6, (uint64_t)CFSTR("TotalSecondsIntoDayAtLastPowerBudgetStoredKeyString"), buf);
  v9 = *(double *)buf;
  if (!v8)
    v9 = v7;
  a1[54] = v9;
  v10 = sub_1001FD94C();
  v11 = a1[53];
  *(_QWORD *)buf = 0;
  v12 = sub_1001FD9FC(v10, (uint64_t)CFSTR("TotalActiveGnssSecondsUsedByAllRhythmicGnssClientsKeyString"), buf);
  v13 = *(double *)buf;
  if (!v12)
    v13 = v11;
  a1[53] = v13;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *((_QWORD *)a1 + 53);
    v15 = *((_QWORD *)a1 + 54);
    v17 = *((_QWORD *)a1 + 52);
    *(_DWORD *)buf = 134284033;
    *(_QWORD *)&buf[4] = v17;
    v30 = 2049;
    v31 = v15;
    v32 = 2050;
    v33 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLRGE,readDailyPowerBudgetUsageDataOnDisk,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{private}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{private}.3lf,fRhythmicGnssActiveTimeInADay_s,%{public}.3lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v19 = *((_QWORD *)a1 + 53);
    v18 = *((_QWORD *)a1 + 54);
    v20 = *((_QWORD *)a1 + 52);
    v23 = 134284033;
    v24 = v20;
    v25 = 2049;
    v26 = v18;
    v27 = 2050;
    v28 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,readDailyPowerBudgetUsageDataOnDisk,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{private}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{private}.3lf,fRhythmicGnssActiveTimeInADay_s,%{public}.3lf", &v23, 32);
    v22 = (char *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::readDailyPowerBudgetUsageDataOnDisk()", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
}

uint64_t sub_101796AA0(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v18;
  uint8_t *v19;
  _WORD v20[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,deconstructor", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v20[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,deconstructor", v20, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "CLRhythmicGnssEngine::~CLRhythmicGnssEngine()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v3 = *(void **)(a1 + 168);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");

    *(_QWORD *)(a1 + 168) = 0;
  }
  v4 = *(_QWORD **)(a1 + 264);
  if (v4 == (_QWORD *)(a1 + 240))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 240);
  }
  else
  {
    if (!v4)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
  v6 = *(_QWORD **)(a1 + 232);
  if (v6 == (_QWORD *)(a1 + 208))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 208);
  }
  else
  {
    if (!v6)
      goto LABEL_18;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_18:
  v8 = *(_QWORD **)(a1 + 200);
  if (v8 == (_QWORD *)(a1 + 176))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 176);
  }
  else
  {
    if (!v8)
      goto LABEL_23;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_23:
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return a1;
}

void sub_101796D84(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_101796D94(uint64_t a1)
{
  double v2;
  uint64_t v3;
  int v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  if (*(_BYTE *)(a1 + 160))
    v2 = *(double *)(a1 + 144);
  else
    v2 = 3.0;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3
    && *(int *)(v3 + 8) >= 1
    && *(double *)(a1 + 272) < *(double *)(a1 + 280)
    && sub_1001FCBB4() - *(double *)(a1 + 280) >= v2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#pah,off,CLRhythmicGnss", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#pah,off,CLRhythmicGnss", v16, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::releasePowerAssertionAndStopTimer()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    sub_100E3E6F0(*(_QWORD *)(a1 + 8));
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  if (*(int *)(*(_QWORD *)(a1 + 8) + 8) > 0 || *(_BYTE *)(a1 + 160) && *(_BYTE *)(a1 + 306))
  {
    v5 = 0;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CRLGE,stopTimer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      LOWORD(v16[0]) = 0;
      LODWORD(v15) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CRLGE,stopTimer", v16, v15);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::releasePowerAssertionAndStopTimer()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    objc_msgSend(*(id *)(a1 + 168), "setNextFireDelay:interval:", 1.79769313e308, 1.79769313e308);
    v5 = 1;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    v20 = v4;
    v21 = 1024;
    v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLRGE,releasePowerAssertionAndStopTimer,releasePowerAssertion,%d,stopTimer,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v16[0] = 67109376;
    v16[1] = v4;
    v17 = 1024;
    v18 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,releasePowerAssertionAndStopTimer,releasePowerAssertion,%d,stopTimer,%d", v16, 14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::releasePowerAssertionAndStopTimer()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_101797250(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  const char *v17;
  char *v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  double v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  _BOOL4 v31;
  _BYTE buf[12];
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  _BOOL4 v36;

  *(double *)(a1 + 376) = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 272));
  if (*(_BYTE *)(a1 + 304))
  {
    *(_WORD *)(a1 + 307) = 0;
    if (*(_BYTE *)(a1 + 160))
    {
      *(double *)(a1 + 280) = sub_1001FCBB4();
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v2 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v3 = *(_QWORD *)(a1 + 120);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLRGE,scheduling AP wake after,%.3lf,sec", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v14 = *(_QWORD *)(a1 + 120);
        v26 = 134217984;
        v27 = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,scheduling AP wake after,%.3lf,sec", COERCE_DOUBLE(&v26));
        v16 = (char *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopGps()", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      sub_10179BCC4(a1);
    }
    if (+[CLGnssProviderAdapter isSupported](CLGnssProviderAdapter, "isSupported")
      && *(_QWORD *)(a1 + 16))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,off,CLRhythmicGnss", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        LOWORD(v26) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,off,CLRhythmicGnss", &v26, 2);
        v20 = (char *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopGps()", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      v5 = 1;
      sub_10179B444(a1, 1, 0, *(_DWORD *)(a1 + 88));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 0);
      if (!*(_BYTE *)(a1 + 305))
      {
        v6 = *(double *)(a1 + 288);
        if (v6 != 0.0)
          v5 = v6 > *(double *)(a1 + 296);
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(a1 + 288);
        v9 = *(_QWORD *)(a1 + 296);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v8;
        v33 = 2048;
        v34 = v9;
        v35 = 1024;
        v36 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "fLastWifiCellOnTime_s,%f,fLastWifiCellOffTime_s,%f,isTimeToStopWifiCellPosition,%d", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v21 = *(_QWORD *)(a1 + 288);
        v22 = *(_QWORD *)(a1 + 296);
        v26 = 134218496;
        v27 = v21;
        v28 = 2048;
        v29 = v22;
        v30 = 1024;
        v31 = v5;
        LODWORD(v25) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "fLastWifiCellOnTime_s,%f,fLastWifiCellOffTime_s,%f,isTimeToStopWifiCellPosition,%d", COERCE_DOUBLE(&v26), v25);
        v24 = (char *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopGps()", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      if (v5)
      {
        sub_10179C2DC(a1);
        sub_10179C7B4(a1);
        *(_BYTE *)(a1 + 305) = 0;
        *(double *)(a1 + 288) = sub_1001FCBB4();
      }
      *(_BYTE *)(a1 + 304) = 0;
      sub_10179CC8C(a1);
      v10 = *(double *)(a1 + 272);
      v11 = 0.0;
      if (v10 > 0.0)
        v11 = *(double *)(a1 + 280) - v10;
      sub_10179CE58(a1, v11, *(double *)(a1 + 432));
      *(double *)(a1 + 432) = sub_10000E96C();
      sub_10179D160(a1, v11);
      v12 = *(_QWORD *)(a1 + 200);
      if (v12)
      {
        *(double *)buf = v11;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 48))(v12, buf);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLRGE,stopGps,already stopped gps session", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      LOWORD(v26) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,stopGps,already stopped gps session", &v26, 2);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopGps()", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

BOOL sub_101797900(uint64_t a1, double a2)
{
  NSObject *v2;
  _BOOL8 result;
  int isTypeStatic;
  NSObject *v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  double v16;
  double v17;
  double v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  double v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  int v38;
  NSObject *v39;
  const char *v40;
  const char *v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  const char *v46;
  char *v47;
  const char *v48;
  char *v49;
  uint64_t v50;
  double v51;
  const char *v52;
  char *v53;
  const char *v54;
  char *v55;
  const char *v56;
  char *v57;
  uint64_t v58;
  void *__p[2];
  char v60;
  int v61;
  _BYTE v62[10];
  double v63;
  _BYTE v64[10];
  _BYTE buf[1632];

  if (*(_BYTE *)(a1 + 304))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,startGps,already started", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    LOWORD(v61) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,startGps,already started", &v61, 2);
    v9 = (char *)v41;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v41);
    goto LABEL_100;
  }
  if (*(_BYTE *)(a1 + 160))
  {
    if (*(_BYTE *)(a1 + 306))
    {
      if (*(_BYTE *)(a1 + 152))
        isTypeStatic = CLMotionActivity::isTypeStatic(*(unsigned int *)(a1 + 320));
      else
        isTypeStatic = 0;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(_DWORD *)(a1 + 320);
        if (*(_BYTE *)(a1 + 160))
          v14 = *(unsigned __int8 *)(a1 + 152);
        else
          v14 = 0;
        v15 = CLMotionActivity::isTypeStatic(*(unsigned int *)(a1 + 320));
        *(_DWORD *)buf = 67175425;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 1025;
        *(_DWORD *)&buf[10] = v14;
        *(_WORD *)&buf[14] = 1025;
        *(_DWORD *)&buf[16] = v15;
        *(_WORD *)&buf[20] = 1025;
        *(_DWORD *)&buf[22] = isTypeStatic;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLRGE,block RhythmicGnss based on motion state,%{private}d,isStaticDeviceOptimizationEnabled,%{private}d,isStatic,%{private}d,blockRGBasedOnMotionState,%{private}d", buf, 0x1Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v42 = *(_DWORD *)(a1 + 320);
        if (*(_BYTE *)(a1 + 160))
          v43 = *(unsigned __int8 *)(a1 + 152);
        else
          v43 = 0;
        v44 = qword_1022A0078;
        v45 = CLMotionActivity::isTypeStatic(*(unsigned int *)(a1 + 320));
        v61 = 67175425;
        *(_DWORD *)v62 = v42;
        *(_WORD *)&v62[4] = 1025;
        *(_DWORD *)&v62[6] = v43;
        LOWORD(v63) = 1025;
        *(_DWORD *)((char *)&v63 + 2) = v45;
        HIWORD(v63) = 1025;
        *(_DWORD *)v64 = isTypeStatic;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 0, "CLRGE,block RhythmicGnss based on motion state,%{private}d,isStaticDeviceOptimizationEnabled,%{private}d,isStatic,%{private}d,blockRGBasedOnMotionState,%{private}d", &v61, 26);
        v47 = (char *)v46;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v46);
        if (v47 != buf)
          free(v47);
      }
      if ((isTypeStatic & 1) != 0)
        return 0;
      if (sub_10179AAF8(a1))
      {
        v16 = *(double *)(a1 + 272);
        v17 = a2 - v16;
        v18 = *(double *)(a1 + 280) - v16;
        if (a2 - v16 >= *(double *)(a1 + 96) - v18)
        {
          if (+[CLGnssProviderAdapter isSupported](CLGnssProviderAdapter, "isSupported")
            && *(_QWORD *)(a1 + 16))
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
            v25 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#wigo,on,CLRhythmicGnss", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
              LOWORD(v61) = 0;
              LODWORD(v58) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,on,CLRhythmicGnss", &v61, v58);
              v49 = (char *)v48;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v48);
              if (v49 != buf)
                free(v49);
            }
            if (*(_BYTE *)(a1 + 105))
            {
              v26 = *(_QWORD *)(a1 + 8);
              if (*(int *)(v26 + 8) <= 0)
              {
                sub_1015A2E04(__p, "none");
                sub_10002B684(v26, (uint64_t *)__p);
                if (v60 < 0)
                  operator delete(__p[0]);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
                v27 = qword_1022A0078;
                if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#pah,on,CLRhythmicGnss", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
                  LOWORD(v61) = 0;
                  LODWORD(v58) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#pah,on,CLRhythmicGnss", &v61, v58);
                  v57 = (char *)v56;
                  sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v56);
                  if (v57 != buf)
                    free(v57);
                }
              }
            }
            *(_QWORD *)(a1 + 328) = -1;
            *(_BYTE *)(a1 + 336) = 0;
            *(_QWORD *)(a1 + 344) = 0;
            *(_QWORD *)(a1 + 352) = 0xBFF0000000000000;
            *(_QWORD *)(a1 + 392) = 0;
            *(_OWORD *)(a1 + 360) = 0u;
            *(_OWORD *)(a1 + 376) = 0u;
            v28 = *(double *)(a1 + 96);
            *(double *)(a1 + 384) = v28;
            if (*(double *)(a1 + 280) != 0.0)
              v28 = sub_1001FCBB4() - *(double *)(a1 + 280);
            *(double *)(a1 + 392) = v28;
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
            v29 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v30 = *(_QWORD *)(a1 + 392);
              v31 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)buf = 134349312;
              *(_QWORD *)&buf[4] = v30;
              *(_WORD *)&buf[12] = 2050;
              *(_QWORD *)&buf[14] = v31;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLRGE,first fix received,realInterSessionDuration_s,%{public}.3lf,intendedInterSessionDuration_s,%{public}.3lf", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
              v50 = *(_QWORD *)(a1 + 392);
              v51 = *(double *)(a1 + 96);
              v61 = 134349312;
              *(_QWORD *)v62 = v50;
              *(_WORD *)&v62[8] = 2050;
              v63 = v51;
              LODWORD(v58) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGE,first fix received,realInterSessionDuration_s,%{public}.3lf,intendedInterSessionDuration_s,%{public}.3lf", &v61, v58);
              v53 = (char *)v52;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v52);
              if (v53 != buf)
                free(v53);
            }
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
            v32 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "CLRGE,cancelling sleep at start", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
              LOWORD(v61) = 0;
              LODWORD(v58) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,cancelling sleep at start", &v61, v58);
              v55 = (char *)v54;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v54);
              if (v55 != buf)
                free(v55);
            }
            sub_10179B03C(a1);
            __asm { FMOV            V0.2D, #-1.0 }
            *(_OWORD *)buf = _Q0;
            *(_WORD *)&buf[16] = 0;
            if (*(_BYTE *)(a1 + 128))
              v38 = 11;
            else
              v38 = 0;
            *(_DWORD *)&buf[20] = v38;
            *(_DWORD *)&buf[24] = 0;
            sub_10179B444(a1, 1, 1, *(_DWORD *)(a1 + 88));
            sub_1001B3AF0();
          }
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
          v39 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "CLRGE,failed to start GPS", buf, 2u);
          }
          result = sub_1001BFF7C(115, 0);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
            LOWORD(v61) = 0;
            LODWORD(v58) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "CLRGE,failed to start GPS", &v61, v58);
            v9 = (char *)v40;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v40);
            goto LABEL_100;
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
          v19 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            v20 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)buf = 134349568;
            *(_QWORD *)&buf[4] = v20;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v17;
            *(_WORD *)&buf[22] = 2050;
            *(double *)&buf[24] = v18;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "CLRGE,startGps,gps was on within last %{public}.3lf seconds so not turning on again, timeSinceLastStart,%{public}.3lf,lastSessionDuration,%{public}.3lf", buf, 0x20u);
          }
          result = sub_1001BFF7C(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
            v21 = *(_QWORD *)(a1 + 96);
            v61 = 134349568;
            *(_QWORD *)v62 = v21;
            *(_WORD *)&v62[8] = 2050;
            v63 = v17;
            *(_WORD *)v64 = 2050;
            *(double *)&v64[2] = v18;
            LODWORD(v58) = 32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,startGps,gps was on within last %{public}.3lf seconds so not turning on again, timeSinceLastStart,%{public}.3lf,lastSessionDuration,%{public}.3lf", &v61, v58);
            v9 = (char *)v22;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v22);
LABEL_100:
            if (v9 != buf)
              free(v9);
            return 0;
          }
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v23 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "CLRGE,power budget exceeded in proactive mode", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
          LOWORD(v61) = 0;
          LODWORD(v58) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,power budget exceeded in proactive mode", &v61, v58);
          v9 = (char *)v24;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v24);
          goto LABEL_100;
        }
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLRGE,startGps,LS toggle off,not starting GPS", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        LOWORD(v61) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,startGps,LS toggle off,not starting GPS", &v61, 2);
        v9 = (char *)v11;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v11);
        goto LABEL_100;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLRGE,can not startGps as no config", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      LOWORD(v61) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,can not startGps as no config", &v61, 2);
      v9 = (char *)v8;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v8);
      goto LABEL_100;
    }
  }
  return result;
}

void sub_1017988C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1017988EC(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  double v13;
  int v14;
  double v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  _BOOL8 result;
  const char *v23;
  uint8_t *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  double v46;
  int v47;
  double v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const char *v54;
  uint8_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  double v70;
  __int16 v71;
  int v72;
  __int16 v73;
  double v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  int v84;
  uint8_t buf[4];
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  int v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  double v98;
  __int16 v99;
  int v100;
  __int16 v101;
  double v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  int v112;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "enableRhythmicGnssEngine", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    LOWORD(v57) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "enableRhythmicGnssEngine", &v57, 2);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::enableRhythmicGnssEngine(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  v5 = *(unsigned __int8 *)(a1 + 160);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = *((_DWORD *)a2 + 4);
    v10 = a2[3];
    v11 = *((unsigned __int8 *)a2 + 32);
    v12 = *((unsigned __int8 *)a2 + 33);
    v13 = *((double *)a2 + 6);
    if (v13 == 1.79769313e308)
      v13 = -1.0;
    v14 = *((unsigned __int8 *)a2 + 34);
    if (*((double *)a2 + 5) == 1.79769313e308)
      v15 = -1.0;
    else
      v15 = *((double *)a2 + 5);
    v16 = *((unsigned __int8 *)a2 + 56);
    v17 = *((unsigned __int8 *)a2 + 57);
    v18 = a2[8];
    v19 = a2[9];
    v20 = *((unsigned __int8 *)a2 + 80);
    *(_DWORD *)buf = 134352384;
    v86 = v7;
    v87 = 2050;
    v88 = v8;
    v89 = 1026;
    v90 = v9;
    v91 = 2050;
    v92 = v10;
    v93 = 1026;
    v94 = v11;
    v95 = 1026;
    v96 = v12;
    v97 = 2050;
    v98 = v13;
    v99 = 1026;
    v100 = v14;
    v101 = 2050;
    v102 = v15;
    v103 = 1026;
    v104 = v16;
    v105 = 1026;
    v106 = v17;
    v107 = 2050;
    v108 = v18;
    v109 = 2050;
    v110 = v19;
    v111 = 1026;
    v112 = v20;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGE,enableRhythmicGnssEngine,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf,isStaticDeviceOptimizationEnabled,%{public}d", buf, 0x72u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v40 = *a2;
    v41 = a2[1];
    v42 = *((_DWORD *)a2 + 4);
    v43 = a2[3];
    v44 = *((unsigned __int8 *)a2 + 32);
    v45 = *((unsigned __int8 *)a2 + 33);
    v46 = *((double *)a2 + 6);
    if (v46 == 1.79769313e308)
      v46 = -1.0;
    v47 = *((unsigned __int8 *)a2 + 34);
    if (*((double *)a2 + 5) == 1.79769313e308)
      v48 = -1.0;
    else
      v48 = *((double *)a2 + 5);
    v49 = *((unsigned __int8 *)a2 + 56);
    v50 = *((unsigned __int8 *)a2 + 57);
    v52 = a2[8];
    v51 = a2[9];
    v53 = *((unsigned __int8 *)a2 + 80);
    v57 = 134352384;
    v58 = v40;
    v59 = 2050;
    v60 = v41;
    v61 = 1026;
    v62 = v42;
    v63 = 2050;
    v64 = v43;
    v65 = 1026;
    v66 = v44;
    v67 = 1026;
    v68 = v45;
    v69 = 2050;
    v70 = v46;
    v71 = 1026;
    v72 = v47;
    v73 = 2050;
    v74 = v48;
    v75 = 1026;
    v76 = v49;
    v77 = 1026;
    v78 = v50;
    v79 = 2050;
    v80 = v52;
    v81 = 2050;
    v82 = v51;
    v83 = 1026;
    v84 = v53;
    LODWORD(v56) = 114;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,enableRhythmicGnssEngine,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf,isStaticDeviceOptimizationEnabled,%{public}d", &v57, v56);
    v55 = (uint8_t *)v54;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::enableRhythmicGnssEngine(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v54);
    if (v55 != buf)
      free(v55);
  }
  if (!v5
    || *(_DWORD *)(a1 + 88) != *((_DWORD *)a2 + 4)
    || *(unsigned __int8 *)(a1 + 104) != *((unsigned __int8 *)a2 + 32)
    || *(double *)(a1 + 80) != *((double *)a2 + 1)
    || *(double *)(a1 + 112) != *((double *)a2 + 5)
    || *(double *)(a1 + 120) != *((double *)a2 + 6)
    || *(double *)(a1 + 96) != *((double *)a2 + 3)
    || *(unsigned __int8 *)(a1 + 152) != *((unsigned __int8 *)a2 + 80))
  {
    v25 = (_OWORD *)(a1 + 72);
    if (*(_BYTE *)(a1 + 160))
    {
      v26 = *((_OWORD *)a2 + 1);
      *v25 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 88) = v26;
      v27 = *((_OWORD *)a2 + 2);
      v28 = *((_OWORD *)a2 + 3);
      v29 = *((_OWORD *)a2 + 4);
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 80);
      *(_OWORD *)(a1 + 120) = v28;
      *(_OWORD *)(a1 + 136) = v29;
      *(_OWORD *)(a1 + 104) = v27;
      if (!v5)
        goto LABEL_38;
    }
    else
    {
      v30 = *((_OWORD *)a2 + 1);
      *v25 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 88) = v30;
      v31 = *((_OWORD *)a2 + 2);
      v32 = *((_OWORD *)a2 + 3);
      v33 = *((_OWORD *)a2 + 4);
      *(_QWORD *)(a1 + 152) = a2[10];
      *(_OWORD *)(a1 + 120) = v32;
      *(_OWORD *)(a1 + 136) = v33;
      *(_OWORD *)(a1 + 104) = v31;
      *(_BYTE *)(a1 + 160) = 1;
      if (!v5)
      {
LABEL_38:
        v34 = *(_QWORD *)(a1 + 40);
        if (v34)
        {
          objc_msgSend(*(id *)(v34 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v34 + 8), 2, 0);
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), 3, 0);
        }
        v35 = *(_QWORD *)(a1 + 56);
        if (v35)
          objc_msgSend(*(id *)(v35 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v35 + 8), 1, 0);
        v36 = *(_QWORD *)(a1 + 48);
        if (v36)
          objc_msgSend(*(id *)(v36 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v36 + 8), 4, 0);
        objc_msgSend(*(id *)(a1 + 168), "setNextFireDelay:interval:", 1.0, 1.0);
        v37 = sub_1001FCBB4();
        sub_101797900(a1, v37);
      }
    }
    return 1;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v21 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "enableRhythmicGnssEngine,no config change", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    LOWORD(v57) = 0;
    LODWORD(v56) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "enableRhythmicGnssEngine,no config change", &v57, v56);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::enableRhythmicGnssEngine(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
    return 0;
  }
  return result;
}

void sub_101798FBC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "disableRhythmicGnssEngine", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "disableRhythmicGnssEngine", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::disableRhythmicGnssEngine()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 2);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), 3);
  }
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
    objc_msgSend(*(id *)(v4 + 16), "unregister:forNotification:", *(_QWORD *)(v4 + 8), 1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    objc_msgSend(*(id *)(v5 + 16), "unregister:forNotification:", *(_QWORD *)(v5 + 8), 4);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 && *(int *)(v6 + 8) <= 0)
    objc_msgSend(*(id *)(a1 + 168), "setNextFireDelay:interval:", 1.79769313e308, 1.79769313e308);
  sub_101797250(a1);
  if (*(_BYTE *)(a1 + 160))
    *(_BYTE *)(a1 + 160) = 0;
}

void sub_1017991D4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  double v9;
  double v10;
  NSObject *v11;
  double v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  double v18;
  double v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  uint64_t v45;
  double v46;
  double v47;
  int v48;
  const char *v49;
  uint8_t *v50;
  uint64_t v51;
  _BYTE v52[688];
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  void *__p;
  char v56;
  std::__shared_weak_count *v57;
  id v58;
  _WORD v59[2];
  double v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  void *v75;
  char v76;
  std::__shared_weak_count *v77;
  id v78;
  int v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  int v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  uint8_t buf[4];
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  int v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLRGE,received gps update", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v59[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGE,received gps update", v59, 2);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
  sub_10011D234((uint64_t)v59, a4);
  if (*a3 <= 4u && ((1 << *a3) & 0x19) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134286849;
      v108 = v60;
      v109 = 2049;
      v110 = v61;
      v111 = 2050;
      v112 = v62;
      v113 = 2050;
      v114 = v63;
      v115 = 2049;
      v116 = v64;
      v117 = 2049;
      v118 = v65;
      v119 = 2049;
      v120 = v66;
      v121 = 2049;
      v122 = v67;
      v123 = 2050;
      v124 = v68;
      v125 = 1025;
      v126 = v69;
      v127 = 2050;
      v128 = v70;
      v129 = 2050;
      v130 = v70;
      v131 = 2050;
      v132 = v71;
      v133 = 2049;
      v134 = v72;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLRGE,updateLocation,latitude,%{private}.3lf,longitude,%{private}.3lf,horAccuracy,%{public}.3lf,verAccuracy,%{public}.3lf,speed,%{private}.3lf,speedAccuracy,%{private}.3lf,course,%{private}.3lf,courseAccuracy,%{private}.3lf,timestamp,%{public}.3lf,type,%{private}d,timestampGps,%{public}.3lf,timestampGps,%{public}.3lf,machtime,%{public}.3lf,groundAltitude,%{private}.3lf", buf, 0x8Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v79 = 134286849;
      v80 = v60;
      v81 = 2049;
      v82 = v61;
      v83 = 2050;
      v84 = v62;
      v85 = 2050;
      v86 = v63;
      v87 = 2049;
      v88 = v64;
      v89 = 2049;
      v90 = v65;
      v91 = 2049;
      v92 = v66;
      v93 = 2049;
      v94 = v67;
      v95 = 2050;
      v96 = v68;
      v97 = 1025;
      v98 = v69;
      v99 = 2050;
      v100 = v70;
      v101 = 2050;
      v102 = v70;
      v103 = 2050;
      v104 = v71;
      v105 = 2049;
      v106 = v72;
      LODWORD(v51) = 138;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,updateLocation,latitude,%{private}.3lf,longitude,%{private}.3lf,horAccuracy,%{public}.3lf,verAccuracy,%{public}.3lf,speed,%{private}.3lf,speedAccuracy,%{private}.3lf,course,%{private}.3lf,courseAccuracy,%{private}.3lf,timestamp,%{public}.3lf,type,%{private}d,timestampGps,%{public}.3lf,timestampGps,%{public}.3lf,machtime,%{public}.3lf,groundAltitude,%{private}.3lf", &v79, v51);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
    if (*(_BYTE *)(a1 + 160))
    {
      if (!*(_BYTE *)(a1 + 307) && v69 == 1)
      {
        *(_BYTE *)(a1 + 307) = 1;
        v9 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 272));
        if (v9 < 2.0)
          *(_BYTE *)(a1 + 336) = 1;
        v10 = v62;
        *(double *)(a1 + 344) = v9;
        *(double *)(a1 + 352) = v10;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v11 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134349056;
          v108 = v9;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLRGE,first fix received,ttff,%{public}.3lf", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
          v79 = 134349056;
          v80 = v9;
          LODWORD(v51) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,first fix received,ttff,%{public}.3lf", &v79, v51);
          v44 = (uint8_t *)v43;
          sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v43);
          if (v44 != buf)
            free(v44);
        }
      }
      v12 = sub_1001FCBB4();
      if (*(_BYTE *)(a1 + 160))
        v13 = *(double *)(a1 + 72);
      else
        v13 = 30.0;
      if (!*(_BYTE *)(a1 + 308) && sub_1016E1534((uint64_t)v59, vabdd_f64(v12, *(double *)(a1 + 272)), v13))
      {
        *(_BYTE *)(a1 + 308) = 1;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v17 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          v18 = v62;
          v19 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 272));
          v20 = *(unsigned __int8 *)(a1 + 160);
          *(_DWORD *)buf = 134349824;
          v108 = v13;
          v109 = 2050;
          v110 = v18;
          v111 = 2050;
          v112 = v19;
          v113 = 1024;
          LODWORD(v114) = v20;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "CLRGE,desiredAccuracy met,default,%{public}.3lf,horAcc,%{public}.3lf,timeToConverge,%{public}.3lf,hasClient,{public}%d", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
          v45 = qword_1022A0078;
          v46 = v62;
          v47 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 272));
          v48 = *(unsigned __int8 *)(a1 + 160);
          v79 = 134349824;
          v80 = v13;
          v81 = 2050;
          v82 = v46;
          v83 = 2050;
          v84 = v47;
          v85 = 1024;
          LODWORD(v86) = v48;
          LODWORD(v51) = 38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 1, "CLRGE,desiredAccuracy met,default,%{public}.3lf,horAcc,%{public}.3lf,timeToConverge,%{public}.3lf,hasClient,{public}%d", &v79, v51);
          v50 = (uint8_t *)v49;
          sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v49);
          if (v50 != buf)
            free(v50);
        }
      }
      sub_10011D234((uint64_t)v52, (uint64_t)v59);
      sub_101799D20(a1, (uint64_t)v52);

      v21 = v57;
      if (v57)
      {
        p_shared_owners = (unint64_t *)&v57->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v56 < 0)
        operator delete(__p);
      v24 = v54;
      if (v54)
      {
        v25 = (unint64_t *)&v54->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = v53;
      if (v53)
      {
        v28 = (unint64_t *)&v53->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (*(_BYTE *)(a1 + 307) && *(_BYTE *)(a1 + 308))
        sub_101797250(a1);
    }
    else
    {
      sub_101797250(a1);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLRGE,location update received when no clients", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        LOWORD(v79) = 0;
        LODWORD(v51) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "CLRGE,location update received when no clients", &v79, v51);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "void CLRhythmicGnssEngine::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
  }

  v30 = v77;
  if (v77)
  {
    v31 = (unint64_t *)&v77->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v76 < 0)
    operator delete(v75);
  v33 = v74;
  if (v74)
  {
    v34 = (unint64_t *)&v74->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v73;
  if (v73)
  {
    v37 = (unint64_t *)&v73->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_101799CB8(_Unwind_Exception *a1)
{
  sub_1004B4F0C((uint64_t)&STACK[0x610]);
  _Unwind_Resume(a1);
}

void sub_101799D20(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v13[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 307))
  {
    v4 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 272)) - *(double *)(a1 + 344);
    v5 = *(double *)(a2 + 20);
    if (v5 >= 20.0)
    {
      if (v5 >= 40.0)
      {
        if (v5 >= 65.0)
        {
          if (v5 >= 80.0)
          {
            if (v5 >= 100.0)
            {
              if (v5 >= 200.0)
              {
                if (v5 >= 400.0)
                {
                  if (v5 >= 1000.0)
                    v6 = 0;
                  else
                    v6 = 8;
                }
                else
                {
                  v6 = 7;
                }
              }
              else
              {
                v6 = 6;
              }
            }
            else
            {
              v6 = 5;
            }
          }
          else
          {
            v6 = 4;
          }
        }
        else
        {
          v6 = 3;
        }
      }
      else
      {
        v6 = 2;
      }
    }
    else
    {
      v6 = 1;
    }
    if (v4 >= 5.0)
    {
      if (v4 > 5.0 && v4 < 11.0)
      {
        *(_DWORD *)(a1 + 364) = v6;
      }
      else if (v4 > 10.0 && v4 < 16.0)
      {
        *(_DWORD *)(a1 + 368) = v6;
      }
      else if (v4 > 15.0 && v4 < 21.0)
      {
        *(_DWORD *)(a1 + 372) = v6;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 360) = v6;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLRGE,no CA data as FF not received", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,no CA data as FF not received", v13, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::updateCoreAnalyticsDataAtEachEpoch(const CLLocationProvider_Type::NotificationData)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_101799FE8()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "CLRGE,received Wifi update", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGE,received Wifi update", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onWifiNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_10179A16C()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "CLRGE,received Cell update", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGE,received Cell update", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onCellNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_10179A2F0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  void *v11;
  NSObject *v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint8_t buf[4];
  int v27;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67240192;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLRGE,LS Notification,type,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v17 = *a3;
    v24 = 67240192;
    v25 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGE,LS Notification,type,%{public}d", &v24, 8);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (*a3 == 4)
  {
    *(_BYTE *)(a1 + 306) = *(_DWORD *)(a4 + 188) != 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v10 = *(unsigned __int8 *)(a1 + 306);
      *(_DWORD *)buf = 67240192;
      v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLRGE,LS,location service enabled,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v20 = *(unsigned __int8 *)(a1 + 306);
      v24 = 67240192;
      v25 = v20;
      LODWORD(v23) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,LS,location service enabled,%{public}d", &v24, v23);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (*(_BYTE *)(a1 + 306) && *(_BYTE *)(a1 + 160))
    {
      v11 = *(void **)(a1 + 168);
      if (v11)
        objc_msgSend(v11, "setNextFireDelay:interval:", 1.0, 1.0);
    }
    else
    {
      sub_101797250(a1);
      sub_101796D94(a1);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v13 = *a3;
      *(_DWORD *)buf = 67240192;
      v27 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLRGE,#Warning,unhandled LS notification,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v14 = *a3;
      v24 = 67240192;
      v25 = v14;
      LODWORD(v23) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGE,#Warning,unhandled LS notification,%{public}d", &v24, v23);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

void sub_10179A794(uint64_t a1, uint64_t a2, _DWORD *a3, CLMotionActivity *a4)
{
  NSObject *v6;
  int type;
  int v8;
  const char *v9;
  NSObject *v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  int isTypeStatic;

  if (*a3 == 1)
  {
    if (*(_DWORD *)(a1 + 320) == a4->type)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        type = a4->type;
        *(_DWORD *)buf = 67240192;
        v23 = type;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGE,motionActivity,not Changed,Type,%{public}u", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v8 = a4->type;
        LODWORD(v19) = 67240192;
        HIDWORD(v19) = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,motionActivity,not Changed,Type,%{public}u", &v19, 8, v19, v20, v21);
LABEL_20:
        v18 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onMotionActivityNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v9);
        if (v18 != buf)
          free(v18);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 328) = a4->type;
      *(_DWORD *)(a1 + 320) = a4->type;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v11 = a4->type;
        v12 = CLMotionActivity::isInVehicle(a4);
        v13 = *(_DWORD *)(a1 + 320);
        *(_DWORD *)buf = 67240960;
        v23 = v11;
        v24 = 1026;
        v25 = v12;
        v26 = 1026;
        v27 = v13;
        v28 = 1026;
        isTypeStatic = CLMotionActivity::isTypeStatic(v13);
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLRGE,motionActivity,Type,%{public}u,isInVehicle,%{public}d,motionState,%{public}d,isStatic,%{public}d", buf, 0x1Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v14 = qword_1022A0078;
        v15 = a4->type;
        v16 = CLMotionActivity::isInVehicle(a4);
        v17 = *(unsigned int *)(a1 + 320);
        LODWORD(v19) = 67240960;
        HIDWORD(v19) = v15;
        LOWORD(v20) = 1026;
        *(_DWORD *)((char *)&v20 + 2) = v16;
        HIWORD(v20) = 1026;
        LODWORD(v21) = v17;
        WORD2(v21) = 1026;
        *(_DWORD *)((char *)&v21 + 6) = CLMotionActivity::isTypeStatic(v17);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 1, "CLRGE,motionActivity,Type,%{public}u,isInVehicle,%{public}d,motionState,%{public}d,isStatic,%{public}d", &v19, 26, v19, v20, v21);
        goto LABEL_20;
      }
    }
  }
}

BOOL sub_10179AAF8(uint64_t a1)
{
  double v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL8 result;
  const char *v8;
  NSObject *v9;
  uint8_t *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  _BYTE v19[12];
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  double v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  double v29;

  if (*(_BYTE *)(a1 + 160))
  {
    if (*(_BYTE *)(a1 + 106))
    {
      sub_10179DAB0((double *)a1);
      v2 = *(double *)(a1 + 112);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v3 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(_QWORD *)(a1 + 416);
        v5 = *(_QWORD *)(a1 + 432);
        *(_DWORD *)buf = 134349568;
        v25 = v4;
        v26 = 2050;
        v27 = v5;
        v28 = 2050;
        v29 = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLRGE,power budget,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{public}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{public}.3lf,allowedDurationInSec,%{public}.3lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v12 = *(_QWORD *)(a1 + 416);
        v13 = *(_QWORD *)(a1 + 432);
        *(_DWORD *)v19 = 134349568;
        *(_QWORD *)&v19[4] = v12;
        v20 = 2050;
        v21 = v13;
        v22 = 2050;
        v23 = v2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,power budget,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{public}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{public}.3lf,allowedDurationInSec,%{public}.3lf", v19, 32);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::hasPowerBudget()", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
      if (*(double *)(a1 + 416) >= v2)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v6 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGE,power budget exceeds permitted level or invalid", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
          *(_WORD *)v19 = 0;
          LODWORD(v18) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,power budget exceeds permitted level or invalid", v19, v18, *(_QWORD *)v19);
LABEL_25:
          v10 = (uint8_t *)v8;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::hasPowerBudget()", "%s\n", v8);
          if (v10 != buf)
            free(v10);
          return 0;
        }
        return result;
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLRGE,power budget not applicable", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        *(_WORD *)v19 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,power budget not applicable", v19, 2);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::hasPowerBudget()", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
    return 1;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRGE,#warning,hasPowerBudget,no clients", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    *(_WORD *)v19 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,#warning,hasPowerBudget,no clients", v19, 2, *(_QWORD *)v19);
    goto LABEL_25;
  }
  return result;
}

void sub_10179B03C(uint64_t a1)
{
  double v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  const __CFDate *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  __int128 v15;
  uint8_t buf[4];
  uint64_t v17;

  v1 = *(double *)(a1 + 312);
  if (v1 != 0.0)
  {
    v6 = CFDateCreate(kCFAllocatorDefault, v1);
    if (IOPMCancelScheduledPowerEvent(v6, CFSTR("CLRhythmicGnss"), CFSTR("wake")))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(a1 + 312);
        *(_DWORD *)buf = 134283521;
        v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGE,System wake couldn't cancel for,%{private}.3lf", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_25;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v9 = *(_QWORD *)(a1 + 312);
      LODWORD(v15) = 134283521;
      *(_QWORD *)((char *)&v15 + 4) = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,System wake couldn't cancel for,%{private}.3lf", &v15, 12, v15);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 312);
        *(_DWORD *)buf = 134283521;
        v17 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLRGE,System wake cancelled for,%{private}.3lf", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_25;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v13 = *(_QWORD *)(a1 + 312);
      LODWORD(v15) = 134283521;
      *(_QWORD *)((char *)&v15 + 4) = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,System wake cancelled for,%{private}.3lf", &v15, 12, v15);
    }
    v14 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::cancelAPWakeRequest()", "%s\n", v10);
    if (v14 != buf)
      free(v14);
LABEL_25:
    CFRelease(v6);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLRGE,there is no schedule to wake AP up,so not cancelling", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,there is no schedule to wake AP up,so not cancelling", &v15, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::cancelAPWakeRequest()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_10179B444(uint64_t a1, int a2, char a3, int a4)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
    sub_101879BF0(v8, a2, a3, a4);
  if (*(_QWORD *)(a1 + 232))
    sub_10179DEFC(a1 + 208, a2, a3, a4);
}

void sub_10179B4B4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,startWifiLocation", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,startWifiLocation", v12, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::startWifiLocation(const CFTimeInterval)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(_BYTE *)(a1 + 304))
  {
    if (*(_QWORD *)(a1 + 24))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v3 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,register wifi client", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v12[0] = 0;
        LODWORD(v11) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,register wifi client", v12, v11);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::startWifiLocation(const CFTimeInterval)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 24) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), 0, 0);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,gnss is not running", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v12[0] = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,gnss is not running", v12, v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::startWifiLocation(const CFTimeInterval)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_10179B8BC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,startCellLocation", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,startCellLocation", v12, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::startCellLocation(const CFTimeInterval)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(_BYTE *)(a1 + 304))
  {
    if (*(_QWORD *)(a1 + 32))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v3 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,register cell client", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v12[0] = 0;
        LODWORD(v11) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,register cell client", v12, v11);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::startCellLocation(const CFTimeInterval)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 0, 0);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,gnss is not running", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v12[0] = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,gnss is not running", v12, v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::startCellLocation(const CFTimeInterval)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_10179BCC4(uint64_t a1)
{
  NSObject *v2;
  double Current;
  double v4;
  double v5;
  const __CFDate *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  uint8_t *v16;
  uint64_t v17;
  __int128 v18;
  uint8_t buf[4];
  double v20;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLRGE,requestAPWake", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    LOWORD(v18) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,requestAPWake", &v18, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::requestAPWake()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (*(_BYTE *)(a1 + 160))
  {
    if (*(double *)(a1 + 120) != 1.79769313e308 || *(_BYTE *)(a1 + 104))
    {
      Current = CFAbsoluteTimeGetCurrent();
      sub_10179B03C(a1);
      v4 = Current + *(double *)(a1 + 120);
      v5 = v4 - (sub_1001FCBB4() - *(double *)(a1 + 272));
      v6 = CFDateCreate(kCFAllocatorDefault, v5);
      *(double *)(a1 + 312) = v5;
      if (IOPMSchedulePowerEvent(v6, CFSTR("CLRhythmicGnss"), CFSTR("wake")))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v7 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGE,Couldn't schedule wake event!", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_33;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        LOWORD(v18) = 0;
        LODWORD(v17) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,Couldn't schedule wake event!", &v18, v17, v18);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v12 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134283521;
          v20 = v5;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLRGE,System wake now scheduled for,%{private}.3lf", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_33;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        LODWORD(v18) = 134283521;
        *(double *)((char *)&v18 + 4) = v5;
        LODWORD(v17) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,System wake now scheduled for,%{private}.3lf", &v18, v17, v18);
      }
      v16 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::requestAPWake()", "%s\n", v8);
      if (v16 != buf)
        free(v16);
LABEL_33:
      CFRelease(v6);
      return;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLRGE,requestAPWake,don't wake AP", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,requestAPWake,don't wake AP", &v18, v17, (_QWORD)v18);
LABEL_26:
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::requestAPWake()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRGE,#warning,requestAPWake,no clients", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,#warning,requestAPWake,no clients", &v18, v17, (_QWORD)v18);
      goto LABEL_26;
    }
  }
}

void sub_10179C2DC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,stopWifiLocation", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    LOWORD(v13[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,stopWifiLocation", v13, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopWifiLocation()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (!*(_BYTE *)(a1 + 304))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,gnss is not running", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    LOWORD(v13[0]) = 0;
    LODWORD(v12) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,gnss is not running", v13, v12, v13[0]);
LABEL_40:
    v11 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopWifiLocation()", "%s\n", v5);
    if (v11 != buf)
      free(v11);
    return;
  }
  if (*(_BYTE *)(a1 + 305))
  {
    if (*(_QWORD *)(a1 + 24))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v3 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,unregister wifi client", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        LOWORD(v13[0]) = 0;
        LODWORD(v12) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,unregister wifi client", v13, v12);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopWifiLocation()", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 24) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), 0);
    }
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLRGE,Wifi and Cell are not running", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    LOWORD(v13[0]) = 0;
    LODWORD(v12) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,Wifi and Cell are not running", v13, v12, v13[0]);
    goto LABEL_40;
  }
}

void sub_10179C7B4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,stopCellLocation", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    LOWORD(v13[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,stopCellLocation", v13, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopCellLocation()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (!*(_BYTE *)(a1 + 304))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,gnss is not running", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    LOWORD(v13[0]) = 0;
    LODWORD(v12) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,gnss is not running", v13, v12, v13[0]);
LABEL_40:
    v11 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopCellLocation()", "%s\n", v5);
    if (v11 != buf)
      free(v11);
    return;
  }
  if (*(_BYTE *)(a1 + 305))
  {
    if (*(_QWORD *)(a1 + 32))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v3 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,unregister cell client", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        LOWORD(v13[0]) = 0;
        LODWORD(v12) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,unregister cell client", v13, v12);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopCellLocation()", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 0);
    }
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLRGE,Wifi and Cell are not running", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    LOWORD(v13[0]) = 0;
    LODWORD(v12) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,Wifi and Cell are not running", v13, v12, v13[0]);
    goto LABEL_40;
  }
}

void sub_10179CC8C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 160))
  {
    *(_DWORD *)(a1 + 332) = *(_DWORD *)(a1 + 88);
    v2 = sub_10073C788();
    sub_100747274(v2, (int *)(a1 + 328));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLRGE,#warning,sendDataToCA,no clients", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,#warning,sendDataToCA,no clients", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::sendRhythmicGnssDataToCoreAnalytics()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_10179CE58(uint64_t a1, double a2, double a3)
{
  unsigned int v6;
  double v7;
  double v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  _DWORD v21[2];
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BOOL4 v27;
  __int16 v28;
  _BOOL4 v29;
  __int16 v30;
  double v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  double v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BOOL4 v43;
  __int16 v44;
  _BOOL4 v45;
  __int16 v46;
  double v47;
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  double v51;

  v6 = sub_10000E96C();
  v7 = (double)v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v8 = v7 - a2;
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_DWORD *)(a1 + 400);
    v11 = *(_DWORD *)(a1 + 404);
    v12 = *(_DWORD *)(a1 + 408);
    *(_DWORD *)buf = 67241984;
    v37 = v10;
    v38 = 1026;
    v39 = v11;
    v40 = 1026;
    v41 = v12;
    v42 = 1026;
    v43 = v8 <= a3;
    v44 = 1026;
    v45 = v7 <= a3;
    v46 = 2050;
    v47 = a2;
    v48 = 1026;
    v49 = v6;
    v50 = 2050;
    v51 = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRGE,updateRhythmicGnssPerDayUsage,totalGnssInADay_s,%{public}d, totalLeechedGnssInADay_s,%{public}d,totalProactiveGnssInADay_s,%{public}d,hasDayChangedBeforeThisSession,%{public}d,hasDayChangedAfterThisSession,%{public}d,rhythmicSessionTime,%{public}.3lf,currentSecondsIntoToday,%{public}d,secondsInDayBeforeCurSession,%{public}.3lf", buf, 0x3Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v16 = *(_DWORD *)(a1 + 400);
    v17 = *(_DWORD *)(a1 + 404);
    v18 = *(_DWORD *)(a1 + 408);
    v21[0] = 67241984;
    v21[1] = v16;
    v22 = 1026;
    v23 = v17;
    v24 = 1026;
    v25 = v18;
    v26 = 1026;
    v27 = v8 <= a3;
    v28 = 1026;
    v29 = v7 <= a3;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v6;
    v34 = 2050;
    v35 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,updateRhythmicGnssPerDayUsage,totalGnssInADay_s,%{public}d, totalLeechedGnssInADay_s,%{public}d,totalProactiveGnssInADay_s,%{public}d,hasDayChangedBeforeThisSession,%{public}d,hasDayChangedAfterThisSession,%{public}d,rhythmicSessionTime,%{public}.3lf,currentSecondsIntoToday,%{public}d,secondsInDayBeforeCurSession,%{public}.3lf", v21, 58);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::updateRhythmicGnssPerDayUsageToCoreAnalytics(const double, const double)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  if (v8 <= a3)
  {
    v13 = sub_10073C788();
    sub_10074783C(v13, (int *)(a1 + 400));
    *(_QWORD *)(a1 + 404) = 0;
  }
  *(_DWORD *)(a1 + 400) = (int)(*(double *)(a1 + 424) + a2);
  if (*(_BYTE *)(a1 + 336))
    *(_DWORD *)(a1 + 404) = (int)((double)*(int *)(a1 + 404) + a2);
  if (v8 > a3 && v7 <= a3)
  {
    *(_DWORD *)(a1 + 408) = (int)((double)*(int *)(a1 + 408) + a2);
    v15 = sub_10073C788();
    sub_10074783C(v15, (int *)(a1 + 400));
    *(_QWORD *)(a1 + 400) = 0;
    *(_DWORD *)(a1 + 408) = 0;
  }
}

void sub_10179D160(uint64_t a1, double a2)
{
  double v4;
  double v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 160))
  {
    sub_10179DAB0((double *)a1);
    *(double *)(a1 + 432) = sub_10000E96C();
    if (*(_BYTE *)(a1 + 106))
    {
      v4 = 0.0;
      if (!*(_BYTE *)(a1 + 128))
        v4 = sub_10075F1BC();
      v5 = *(double *)(a1 + 416) + v4 + a2;
      *(double *)(a1 + 416) = v5;
      *(_DWORD *)(a1 + 408) = (int)v5;
    }
    *(double *)(a1 + 424) = *(double *)(a1 + 424) + a2;
    sub_10179DCC0((_BYTE *)a1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGE,#warning,updateTotalGnssPowerBudgetUsedInADay,no clients", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,#warning,updateTotalGnssPowerBudgetUsedInADay,no clients", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::updateTotalGnssPowerBudgetUsedInADay(const double)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_10179D378(uint64_t a1, uint64_t a2, int *a3)
{
  NSObject *v5;
  int v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t *v11;
  NSObject *v12;
  uint64_t v13;
  double v14;
  NSObject *v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  _BYTE v25[12];
  uint8_t buf[4];
  uint64_t v27;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *a3;
    *(_DWORD *)buf = 67240192;
    LODWORD(v27) = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLRGE,onDaemonStatusNotification,notification,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v16 = *a3;
    *(_DWORD *)v25 = 67240192;
    *(_DWORD *)&v25[4] = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,onDaemonStatusNotification,notification,%{public}d", v25, 8);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (*(_BYTE *)(a1 + 160))
  {
    if (*(_BYTE *)(a1 + 306))
    {
      if (*a3 == 2)
      {
        sub_101797250(a1);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v12 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v13 = *(_QWORD *)(a1 + 312);
          *(_DWORD *)buf = 134349056;
          v27 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLRGE,system entering sleep,fLastAPWakeRequestTime_s,%{public}.3lf", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
          v19 = *(_QWORD *)(a1 + 312);
          *(_DWORD *)v25 = 134349056;
          *(_QWORD *)&v25[4] = v19;
          LODWORD(v24) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,system entering sleep,fLastAPWakeRequestTime_s,%{public}.3lf", v25, v24);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
        v14 = *(double *)(a1 + 312);
        if (v14 < CFAbsoluteTimeGetCurrent())
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
          v15 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLRGE,system entering sleep only if last scheduled time is stale", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
            *(_WORD *)v25 = 0;
            LODWORD(v24) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,system entering sleep only if last scheduled time is stale", v25, v24);
            v23 = (uint8_t *)v22;
            sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v22);
            if (v23 != buf)
              free(v23);
          }
          sub_10179BCC4(a1);
        }
      }
      else if (*a3 == 3)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        v7 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGE,system has powered on", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
          *(_WORD *)v25 = 0;
          LODWORD(v24) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,system has powered on", v25, v24, *(_QWORD *)v25);
LABEL_34:
          v11 = (uint8_t *)v8;
          sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v8);
          if (v11 != buf)
            free(v11);
        }
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLRGE,LS toggle off,not handling AP sleep-wake state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
        *(_WORD *)v25 = 0;
        LODWORD(v24) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,LS toggle off,not handling AP sleep-wake state", v25, v24, *(_QWORD *)v25);
        goto LABEL_34;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRGE,onDaemonStatusNotification,no clients", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
      *(_WORD *)v25 = 0;
      LODWORD(v24) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,onDaemonStatusNotification,no clients", v25, v24, *(_QWORD *)v25);
      goto LABEL_34;
    }
  }
}

void sub_10179DAB0(double *a1)
{
  double v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  double v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  double v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v2 = sub_10000E96C();
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v5 = *((_QWORD *)a1 + 53);
    v4 = *((_QWORD *)a1 + 54);
    v6 = *((_QWORD *)a1 + 52);
    *(_DWORD *)buf = 134349824;
    v21 = v2;
    v22 = 2050;
    v23 = v6;
    v24 = 2050;
    v25 = v4;
    v26 = 2050;
    v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,reset power budget,secondsIntoDayCurrent,%{public}.3lf,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{public}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{public}.3lf,fRhythmicGnssActiveTimeInADay_s,%{public}.3lf", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v8 = *((_QWORD *)a1 + 53);
    v7 = *((_QWORD *)a1 + 54);
    v9 = *((_QWORD *)a1 + 52);
    v12 = 134349824;
    v13 = v2;
    v14 = 2050;
    v15 = v9;
    v16 = 2050;
    v17 = v7;
    v18 = 2050;
    v19 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGE,reset power budget,secondsIntoDayCurrent,%{public}.3lf,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{public}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{public}.3lf,fRhythmicGnssActiveTimeInADay_s,%{public}.3lf", &v12, 42);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::resetProactiveGnssPowerBudgetPerDayIfDayChanged()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (a1[54] > v2)
  {
    a1[52] = 0.0;
    a1[53] = 0.0;
  }
}

void sub_10179DCC0(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  if (a1[106])
  {
    v2 = sub_1001FD94C();
    sub_10018A534(v2, CFSTR("TotalActiveGnssSecondsUsedPerDayKeyString"), a1 + 416);
  }
  v3 = sub_1001FD94C();
  sub_10018A534(v3, CFSTR("TotalSecondsIntoDayAtLastPowerBudgetStoredKeyString"), a1 + 432);
  v4 = sub_1001FD94C();
  sub_10018A534(v4, CFSTR("TotalActiveGnssSecondsUsedByAllRhythmicGnssClientsKeyString"), a1 + 424);
  v5 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 944))(v5);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *((_QWORD *)a1 + 53);
    v7 = *((_QWORD *)a1 + 54);
    v9 = *((_QWORD *)a1 + 52);
    *(_DWORD *)buf = 134284033;
    v22 = v9;
    v23 = 2049;
    v24 = v7;
    v25 = 2050;
    v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGE,storeDailyPowerBudgetUsageDataOnDisk,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{private}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{private}.3lf,fRhythmicGnssActiveTimeInADay_s,%{public}.3lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF3D8);
    v11 = *((_QWORD *)a1 + 53);
    v10 = *((_QWORD *)a1 + 54);
    v12 = *((_QWORD *)a1 + 52);
    v15 = 134284033;
    v16 = v12;
    v17 = 2049;
    v18 = v10;
    v19 = 2050;
    v20 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,storeDailyPowerBudgetUsageDataOnDisk,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{private}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{private}.3lf,fRhythmicGnssActiveTimeInADay_s,%{public}.3lf", &v15, 32);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::storeDailyPowerBudgetUsageDataOnDisk()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
}

uint64_t sub_10179DEFC(uint64_t a1, int a2, char a3, int a4)
{
  uint64_t v4;
  int v6;
  char v7;
  int v8;

  v8 = a2;
  v7 = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, char *, int *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

void sub_10179DF44(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10179DF70(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10179DF9C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_10179E038(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_10179E050()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10179E0DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_10179E0F4()
{
  sub_1015A2E04(qword_10230FAD0, "t");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230FAD0, (void *)&_mh_execute_header);
}

void sub_10179E138(uint64_t a1)
{
  char *v2;
  std::string *v3;
  __int128 v4;
  NSObject *v5;
  char v6;
  char v7;
  void **v8;
  NSObject *v9;
  void **v10;
  void **v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  const char *v15;
  _WORD v16[8];
  std::string __str;
  void *__p[2];
  int64_t v19;
  _BYTE v20[12];
  _BYTE v21[1624];

  v2 = (char *)sub_1001FD94C();
  sub_1000B7884(v2, (uint64_t)v21);
  v3 = std::string::append((std::string *)v21, "ligl.bin");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v19 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if ((v21[23] & 0x80000000) != 0)
    operator delete(*(void **)v21);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF418);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v21 = 68289282;
    *(_WORD *)&v21[8] = 2082;
    *(_QWORD *)&v21[10] = "";
    *(_WORD *)&v21[18] = 2082;
    *(_QWORD *)&v21[20] = "knownACFile,injectknownACfile";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", v21, 0x1Cu);
  }
  memset(&__str, 0, sizeof(__str));
  if (!sub_10005DE60((uint64_t)__p, &__str))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v10 = __p;
      if (v19 < 0)
        v10 = (void **)__p[0];
      *(_DWORD *)v21 = 136446210;
      *(_QWORD *)&v21[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "knownACFile,failed to read file %{public}s", v21, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_36;
    bzero(v21, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v11 = __p;
    if (v19 < 0)
      v11 = (void **)__p[0];
    *(_DWORD *)v20 = 136446210;
    *(_QWORD *)&v20[4] = v11;
    _os_log_send_and_compose_impl(2, 0, v21, 1628, &_mh_execute_header, qword_1022A0078, 2, "knownACFile,failed to read file %{public}s", v20, 12);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssALD::handleKnownACFileUpdated()", "%s\n", v12);
LABEL_44:
    if (v13 != v21)
      free(v13);
    goto LABEL_36;
  }
  *(_QWORD *)v20 = 0;
  sub_1015A2E04(v21, "#imag");
  v6 = sub_101740038((unint64_t)&__str, 8uLL, (unint64_t *)v20, (uint64_t *)v21);
  v7 = v6;
  if ((v21[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v21);
    if ((v7 & 1) != 0)
      goto LABEL_10;
  }
  else if ((v6 & 1) != 0)
  {
LABEL_10:
    std::string::basic_string((std::string *)v21, &__str, 8uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v16);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = *(std::string *)v21;
    *(_QWORD *)v21 = 0;
    if (v19 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if (!sub_10000840C((const char *)v8, (double *)v21))
      *(_QWORD *)v21 = CFAbsoluteTimeGetCurrent();
    sub_10179E660(a1, (uint64_t)&__str, v21);
    goto LABEL_36;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF418);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "knownACFile,the file integrity failed", v21, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(v21, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v16[0] = 0;
    _os_log_send_and_compose_impl(2, 0, v21, 1628, &_mh_execute_header, qword_1022A0078, 16, "knownACFile,the file integrity failed", v16, 2);
    v13 = (char *)v15;
    sub_100512490("Generic", 1, 0, 0, "void CLGnssALD::handleKnownACFileUpdated()", "%s\n", v15);
    goto LABEL_44;
  }
LABEL_36:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
}

void sub_10179E5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10179E660(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  float v22;
  double v23;
  uint64_t *v24;
  NSObject *v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  NSObject *v29;
  uint64_t v30;
  const char *v31;
  NSObject *v32;
  const char *v33;
  uint8_t *v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v38;
  uint64_t v39;
  const char *v40;
  uint8_t *v41;
  NSObject *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  uint8_t *v48;
  double v49;
  __int128 v50;
  double v51;
  void *__p;
  _BYTE *v53;
  uint64_t v54;
  char v55[8];
  uint64_t *v56;
  int v57;
  int v58;
  char v59;
  int v60;
  unint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  double v65;
  uint8_t buf[4];
  unint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  double v71;

  sub_100EF9494((uint64_t)v55);
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromString(v55, a2) & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v32 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#imag,al,failed to parse known locations proto", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      LOWORD(v60) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#imag,al,failed to parse known locations proto", &v60, 2);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssALD::ingestKnownAC(const std::string &, const CFAbsoluteTime &)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
    return sub_100EFA374(v55);
  }
  v6 = v57 / 0xCuLL;
  v7 = *(unsigned int *)(a1 + 200);
  if (v6 > v7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v67 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#imag,al,num locations in file is %zu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v60 = 134217984;
      v61 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#imag,al,num locations in file is %zu", (size_t)&v60);
      v48 = (uint8_t *)v47;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssALD::ingestKnownAC(const std::string &, const CFAbsoluteTime &)", "%s\n", v47);
      if (v48 != buf)
        free(v48);
    }
    v6 = v7;
  }
  __p = 0;
  v53 = 0;
  v54 = 0;
  sub_100803C28(&__p, v6);
  if (!v57)
  {
LABEL_65:
    if (v53 != __p)
    {
      if ((void **)(a1 + 216) != &__p)
        sub_10031F73C((char *)(a1 + 216), (char *)__p, (uint64_t)v53, 0xAAAAAAAAAAAAAAABLL * ((v53 - (_BYTE *)__p) >> 3));
      *(_QWORD *)(a1 + 240) = *a3;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v35 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v36 = *(_QWORD *)(a1 + 240);
        *(_DWORD *)buf = 134218240;
        v67 = 0xAAAAAAAAAAAAAAABLL * ((v53 - (_BYTE *)__p) >> 3);
        v68 = 2048;
        v69 = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#imag,al,len of locVec,%lu,tagged at time,%f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF418);
        v45 = *(_QWORD *)(a1 + 240);
        v60 = 134218240;
        v61 = 0xAAAAAAAAAAAAAAABLL * ((v53 - (_BYTE *)__p) >> 3);
        v62 = 2048;
        v63 = v45;
        LODWORD(v49) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,al,len of locVec,%lu,tagged at time,%f", &v60, v49);
        v41 = (uint8_t *)v46;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssALD::ingestKnownAC(const std::string &, const CFAbsoluteTime &)", "%s\n", v46);
LABEL_96:
        if (v41 != buf)
          free(v41);
      }
    }
    goto LABEL_73;
  }
  v9 = 8 * v57;
  v10 = v56;
  v11 = &qword_1022A0000;
  while (1)
  {
    v12 = *v10;
    if ((~*(_DWORD *)(*v10 + 36) & 7) != 0)
      goto LABEL_48;
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      v13 = *(_QWORD *)(qword_1023118D8 + 8);
    v14 = *(_DWORD *)(v13 + 24);
    if ((~v14 & 3) != 0 || (v14 & 4) == 0)
      goto LABEL_48;
    v15 = *(_QWORD *)(v12 + 16);
    if (!v15)
      v15 = *(_QWORD *)(qword_1023118D8 + 16);
    v16 = *(_DWORD *)(v15 + 24);
    if ((~v16 & 3) != 0 || (v16 & 4) == 0)
      goto LABEL_48;
    v50 = 0uLL;
    v51 = 0.0;
    if ((v59 & 2) == 0)
      goto LABEL_77;
    if (v58 != 1)
      break;
    v17 = *(_QWORD *)(v12 + 8);
    if (!v17)
      v17 = *(_QWORD *)(qword_1023118D8 + 8);
    v18 = (double)*(int *)(v17 + 12) / 75.0 + (double)*(int *)(v17 + 8) + *(float *)(v17 + 16) / 5625.0 + -111.0;
    *(double *)&v50 = v18;
    v19 = *(_QWORD *)(v12 + 16);
    if (!v19)
      v19 = *(_QWORD *)(qword_1023118D8 + 16);
    v20 = (double)*(int *)(v19 + 12) / 75.0 + (double)*(int *)(v19 + 8) + *(float *)(v19 + 16) / 5625.0 + -190.0;
    v21 = *(double *)(v12 + 24);
    *((double *)&v50 + 1) = v20;
    v51 = v21;
    if (v18 < -90.0 || v18 > 90.0 || v20 < -180.0 || v20 > 180.0 || v21 <= 0.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v24 = v11;
      v29 = v11[15];
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134284033;
        v67 = v50;
        v68 = 2049;
        v69 = *((_QWORD *)&v50 + 1);
        v70 = 2048;
        v71 = v51;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#imag,al,invalid location,lat,%{private}.6lf,lon,%{private}.6lf,radiusM,%.1f", buf, 0x20u);
      }
      v11 = v24;
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_48;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v30 = v24[15];
      v60 = 134284033;
      v61 = v50;
      v62 = 2049;
      v63 = *((_QWORD *)&v50 + 1);
      v64 = 2048;
      v65 = v51;
      LODWORD(v49) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 0, "#imag,al,invalid location,lat,%{private}.6lf,lon,%{private}.6lf,radiusM,%.1f", &v60, *(_QWORD *)&v49);
      v28 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssALD::ingestKnownAC(const std::string &, const CFAbsoluteTime &)", "%s\n", v31);
    }
    else
    {
      v22 = *(float *)(a1 + 204);
      v23 = *(float *)(a1 + 208);
      if (v21 <= v23)
        v23 = v21;
      if (v23 < v22)
        v23 = v22;
      v51 = v23;
      sub_10179FF60(&__p, &v50);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v24 = v11;
      v25 = v11[15];
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134284033;
        v67 = v50;
        v68 = 2049;
        v69 = *((_QWORD *)&v50 + 1);
        v70 = 2048;
        v71 = v51;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#imag,al,lat,%{private}.6lf,lon,%{private}.6lf,radiusM,%.1f", buf, 0x20u);
      }
      v11 = v24;
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_48;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v26 = v24[15];
      v60 = 134284033;
      v61 = v50;
      v62 = 2049;
      v63 = *((_QWORD *)&v50 + 1);
      v64 = 2048;
      v65 = v51;
      LODWORD(v49) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "#imag,al,lat,%{private}.6lf,lon,%{private}.6lf,radiusM,%.1f", &v60, *(_QWORD *)&v49);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssALD::ingestKnownAC(const std::string &, const CFAbsoluteTime &)", "%s\n", v27);
    }
    if (v28 != buf)
      free(v28);
    v11 = v24;
LABEL_48:
    ++v10;
    v9 -= 8;
    if (!v9)
      goto LABEL_65;
  }
  if (!v58)
  {
LABEL_77:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v38 = v11[15];
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "#imag,al,encodingType is None", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v39 = v11[15];
      LOWORD(v60) = 0;
      LODWORD(v49) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 16, "#imag,al,encodingType is None", &v60, *(_QWORD *)&v49);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssALD::ingestKnownAC(const std::string &, const CFAbsoluteTime &)", "%s\n", v40);
      goto LABEL_96;
    }
    goto LABEL_73;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF418);
  v42 = v11[15];
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "#imag,al,encodingType is default", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v43 = v11[15];
    LOWORD(v60) = 0;
    LODWORD(v49) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 2, "#imag,al,encodingType is default", &v60, *(_QWORD *)&v49);
    v41 = (uint8_t *)v44;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssALD::ingestKnownAC(const std::string &, const CFAbsoluteTime &)", "%s\n", v44);
    goto LABEL_96;
  }
LABEL_73:
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
  return sub_100EFA374(v55);
}

void sub_10179F2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  sub_100EFA374(&a19);
  _Unwind_Resume(a1);
}

void sub_10179F304(uint64_t a1)
{
  char *v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  void **v5;
  NSObject *v6;
  void **v7;
  void **v8;
  const char *v9;
  std::string *v10;
  NSObject *v11;
  void **v12;
  void **v13;
  const char *v14;
  void *__p[2];
  int64_t v16;
  int v17;
  void **v18;
  std::string v19;

  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a1 + 216);
  v1 = (char *)sub_1001FD94C();
  sub_1000B7884(v1, (uint64_t)&v19);
  v2 = std::string::append(&v19, "ligl.bin");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v16 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (sub_1000B78B0((const char *)v4))
  {
    if (v16 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if (sub_100512FA8((const char *)v5))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v7 = __p;
        if (v16 < 0)
          v7 = (void **)__p[0];
        LODWORD(v19.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "knownACFile deleted %s", (uint8_t *)&v19, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v19, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF418);
        v8 = __p;
        if (v16 < 0)
          v8 = (void **)__p[0];
        v17 = 136315138;
        v18 = v8;
        _os_log_send_and_compose_impl(2, 0, &v19, 1628, &_mh_execute_header, qword_1022A0078, 2, "knownACFile deleted %s", (const char *)&v17);
        v10 = (std::string *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssALD::deleteKnownACFile()", "%s\n", v9);
LABEL_38:
        if (v10 != &v19)
          free(v10);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v12 = __p;
        if (v16 < 0)
          v12 = (void **)__p[0];
        LODWORD(v19.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "knownACFile error occured while deleting %s", (uint8_t *)&v19, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v19, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF418);
        v13 = __p;
        if (v16 < 0)
          v13 = (void **)__p[0];
        v17 = 136315138;
        v18 = v13;
        _os_log_send_and_compose_impl(2, 0, &v19, 1628, &_mh_execute_header, qword_1022A0078, 2, "knownACFile error occured while deleting %s", (const char *)&v17);
        v10 = (std::string *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssALD::deleteKnownACFile()", "%s\n", v14);
        goto LABEL_38;
      }
    }
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
}

void sub_10179F6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10179F6F0(uint64_t a1, double *a2, double *a3)
{
  double *v6;
  double *v7;
  double v8;
  uint64_t result;
  NSObject *v10;
  NSObject *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  const char *v17;
  uint8_t *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  double v27;
  double v28;
  int v29;
  double v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  uint8_t buf[4];
  double v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;

  if (!*(_BYTE *)(a1 + 196))
  {
LABEL_15:
    result = 0;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a1 + 216);
    return result;
  }
  if (vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 240)) >= 604800.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#imag,al,file validity has expired", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      LOWORD(v29) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#imag,al,file validity has expired", &v29, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssALD::isKnownAC(const double &, const double &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    goto LABEL_15;
  }
  if (sub_10179FB54(a1, a2, a3))
    return 0;
  v6 = *(double **)(a1 + 216);
  v7 = *(double **)(a1 + 224);
  if (v6 == v7)
    return 0;
  while (1)
  {
    if (vabdd_f64(*v6, *a2) <= 0.1 && fabs(sub_1010B9110(v6[1], *a3)) <= 0.1)
    {
      v27 = 0.0;
      v28 = 0.0;
      v26 = 0;
      sub_10011E780((double *)a1, &v28, &v27, (double *)&v26, *a2, *a3, 0.0, *v6, v6[1], 0.0);
      v8 = v27 * v27 + v28 * v28;
      if (v8 <= v6[2] * v6[2])
        break;
    }
    v6 += 3;
    if (v6 == v7)
      return 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF418);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *v6;
    v13 = *((_QWORD *)v6 + 1);
    v14 = *((_QWORD *)v6 + 2);
    v15 = *a2;
    v16 = *a3;
    *(_DWORD *)buf = 134284801;
    v42 = v12;
    v43 = 2049;
    v44 = v13;
    v45 = 2050;
    v46 = v14;
    v47 = 2049;
    v48 = v15;
    v49 = 2049;
    v50 = v16;
    v51 = 2050;
    v52 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#imag,al,aLat,%{private}.6lf,aLon,%{private}.6lf,aRadius,%{public}.1f,gnssLat,%{private}.6lf,gnssLon.%{private}.6lf,distanceSqM,%{public}.1f", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v19 = *v6;
    v20 = *((_QWORD *)v6 + 1);
    v21 = *((_QWORD *)v6 + 2);
    v22 = *a2;
    v23 = *a3;
    v29 = 134284801;
    v30 = v19;
    v31 = 2049;
    v32 = v20;
    v33 = 2050;
    v34 = v21;
    v35 = 2049;
    v36 = v22;
    v37 = 2049;
    v38 = v23;
    v39 = 2050;
    v40 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,al,aLat,%{private}.6lf,aLon,%{private}.6lf,aRadius,%{public}.1f,gnssLat,%{private}.6lf,gnssLon.%{private}.6lf,distanceSqM,%{public}.1f", &v29, 62);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssALD::isKnownAC(const double &, const double &)", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  return 1;
}

BOOL sub_10179FB54(uint64_t a1, double *a2, double *a3)
{
  double v4;
  NSObject *v5;
  _BOOL8 result;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  uint8_t *v12;
  int v13;
  double v14;
  uint8_t buf[4];
  double v16;

  if (!*(_BYTE *)(a1 + 197))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#imag,al,cross check disabled", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#imag,al,cross check disabled");
LABEL_30:
    v12 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssALD::didGnssAgreeWithOtherType(const double &, const double &)", "%s\n", v8);
    if (v12 != buf)
      free(v12);
    return 0;
  }
  v4 = sub_10011E634((double *)a1, *a2, *a3, *(double *)(a1 + 44), *(double *)(a1 + 52), 0.0);
  if (v4 <= fmin(*(double *)(a1 + 60) * 5.0, 1500.0))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#imag,al,locations match, separated by,%.1f,m", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v13 = 134217984;
      v14 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#imag,al,locations match, separated by,%.1f,m", COERCE_DOUBLE(&v13));
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssALD::didGnssAgreeWithOtherType(const double &, const double &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return 1;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF418);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#imag,al,locations mismatch, separated by,%.1f,m", buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#imag,al,locations mismatch, separated by,%.1f,m");
    goto LABEL_30;
  }
  return result;
}

void sub_10179FF60(void **a1, __int128 *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)sub_1002596A8(v4, v13);
    else
      v14 = 0;
    v15 = &v14[24 * v10];
    v16 = &v14[24 * v13];
    v17 = *a2;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = v17;
    v9 = v15 + 24;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v15 - 24) = v20;
        v15 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    v9 = (char *)(v7 + 24);
  }
  a1[1] = v9;
}

uint64_t sub_1017A0084(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  _BOOL4 v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  float v23;
  float v24;
  int v25;
  BOOL v26;
  BOOL v27;
  int v28;
  double v29;
  uint8_t buf[4];
  double v31;

  v27 = 0;
  if (sub_1001E4874(a2, "IsLocFilteringOn", &v27))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v31) = v27;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#imag,al,MA,filter on,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v28 = 67109120;
      LODWORD(v29) = v27;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,al,MA,filter on,%d", &v28);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "std::optional<BOOL> CLGnssALD::setKnownACConfigFromMA(const CLNameValuePair &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v5 = *(unsigned __int8 *)(a1 + 196);
    v6 = v27 != v5;
    v7 = v27 != v5 && v27;
    *(_BYTE *)(a1 + 196) = v27;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v26 = 0;
  if (sub_1001E4874(a2, "IsLocCrossCheckOn", &v26))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v31) = v26;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#imag,al,MA,crossCheck on,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v28 = 67109120;
      LODWORD(v29) = v26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,al,MA,crossCheck on,%d", &v28);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "std::optional<BOOL> CLGnssALD::setKnownACConfigFromMA(const CLNameValuePair &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *(_BYTE *)(a1 + 197) = v26;
  }
  v25 = 0;
  if (sub_100526244(a2, "MaxNumCoordinatesStored", &v25))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v31) = v25;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#imag,al,MA,max loc to store,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v28 = 67109120;
      LODWORD(v29) = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,al,MA,max loc to store,%d", &v28);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "std::optional<BOOL> CLGnssALD::setKnownACConfigFromMA(const CLNameValuePair &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    if ((v25 - 1) <= 0x3E7)
      *(_DWORD *)(a1 + 200) = v25;
  }
  v24 = 0.0;
  if (sub_100526804(a2, "MinRadiusM", &v24))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v31 = v24;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#imag,al,MA,min radius,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v28 = 134217984;
      v29 = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,al,MA,min radius,%f", COERCE_DOUBLE(&v28));
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "std::optional<BOOL> CLGnssALD::setKnownACConfigFromMA(const CLNameValuePair &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    if (v24 > 0.0 && v24 < 5000.0)
      *(float *)(a1 + 204) = v24;
  }
  v23 = 0.0;
  if (sub_100526804(a2, "MaxRadiusM", &v23))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v31 = v23;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#imag,al,MA,max radius,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v28 = 134217984;
      v29 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,al,MA,max radius,%f", COERCE_DOUBLE(&v28));
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "std::optional<BOOL> CLGnssALD::setKnownACConfigFromMA(const CLNameValuePair &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (v23 > 0.0 && v23 < 5000.0)
      *(float *)(a1 + 208) = v23;
  }
  return v7 | (v6 << 8);
}

void sub_1017A089C(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  BOOL v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const char *v27;
  uint8_t *v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint8_t buf[4];
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;

  if (*(double *)(a2 + 76) >= 0.0 && (sub_100182290(a2) & 1) != 0)
  {
    v6 = *(_DWORD *)(a2 + 96);
    v7 = v6 == 11 || v6 == 4;
    if (v7 && (a3 & 1) == 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_QWORD *)(a2 + 4);
        v10 = *(_QWORD *)(a2 + 12);
        v11 = *(_QWORD *)(a2 + 20);
        v12 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)buf = 134284289;
        v38 = v9;
        v39 = 2049;
        v40 = v10;
        v41 = 2048;
        v42 = v11;
        v43 = 1024;
        v44 = v12;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#imag,al,ref lat,%{private}.6lf,lon,%{private}.6lf,hUnc,%.1f,type,%d", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF418);
        v23 = *(_QWORD *)(a2 + 4);
        v24 = *(_QWORD *)(a2 + 12);
        v25 = *(_QWORD *)(a2 + 20);
        v26 = *(_DWORD *)(a2 + 96);
        v29 = 134284289;
        v30 = v23;
        v31 = 2049;
        v32 = v24;
        v33 = 2048;
        v34 = v25;
        v35 = 1024;
        v36 = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#imag,al,ref lat,%{private}.6lf,lon,%{private}.6lf,hUnc,%.1f,type,%d", &v29, 38);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssALD::injectRefLocation(const CLDaemonLocation &, const BOOL)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      v13 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 40) = v13;
      v14 = *(_OWORD *)(a2 + 32);
      v15 = *(_OWORD *)(a2 + 48);
      v16 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 104) = v16;
      *(_OWORD *)(a1 + 88) = v15;
      *(_OWORD *)(a1 + 72) = v14;
      v17 = *(_OWORD *)(a2 + 96);
      v18 = *(_OWORD *)(a2 + 112);
      v19 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 168) = v19;
      *(_OWORD *)(a1 + 152) = v18;
      *(_OWORD *)(a1 + 136) = v17;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF418);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#imag,al,ref loc invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF418);
      LOWORD(v29) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#imag,al,ref loc invalid", &v29, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssALD::injectRefLocation(const CLDaemonLocation &, const BOOL)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
}

void sub_1017A0C54(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1017A0C80(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1017A0C88(a1, a2);
}

void sub_1017A0C88(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      v4 = a1[3];
      *(_DWORD *)(a2 + 8) = a1[2];
      *(_BYTE *)(a2 + 12) = v4;
      sub_1017A39C0(a1 + 4, (int *)(a2 + 16));
      sub_1017A1F50((uint64_t)(v3 + 7), a2 + 28);
      sub_1017A2338(v3 + 13, a2 + 100);
      sub_1017A21A4(v3 + 18, (_DWORD *)(a2 + 224));
      sub_1017A21F4((uint64_t)(v3 + 19), a2 + 228);
      sub_1017A36D4(v3 + 70, (_DWORD *)(a2 + 432));
      sub_1017A3E9C((uint64_t)(v3 + 71), a2 + 436);
      *(_DWORD *)a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = (_DWORD *)sub_1017A4508();
  }
  v5 = sub_1017A4668(a1);
  sub_1017A0D20(v5, v6);
}

void sub_1017A0D20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1017A0D28(a1, a2);
}

void sub_1017A0D28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
      *(_BYTE *)(a2 + 12) = *(_BYTE *)(a1 + 12);
      sub_1017A39C0((int *)(a1 + 16), (int *)(a2 + 16));
      sub_1017A175C((_DWORD *)(v3 + 28), a2 + 28);
      sub_1017A1188((int *)(v3 + 488), a2 + 484);
      *(_DWORD *)(a2 + 3708) = *(_DWORD *)(v3 + 1400);
      *(_DWORD *)(a2 + 3712) = *(unsigned __int8 *)(v3 + 1404);
      *(_DWORD *)a2 = *(_DWORD *)v3;
      return;
    }
  }
  else
  {
    a1 = sub_1017A47C8();
  }
  v4 = sub_1017A4928(a1);
  sub_1017A0DA4(v4);
}

void sub_1017A0DA4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1017A0DAC(a1, a2);
}

void sub_1017A0DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 4);
      *(_BYTE *)(a2 + 12) = *(_BYTE *)(a1 + 8);
      sub_1017A39C0((int *)(a1 + 12), (int *)(a2 + 16));
      sub_1017A3A48(v3 + 24, a2 + 28);
      sub_1017A3AC0((_WORD *)(v3 + 64), a2 + 68);
      *(_DWORD *)a2 = *(_DWORD *)v3;
      return;
    }
  }
  else
  {
    a1 = sub_1017A4A88();
  }
  v4 = sub_1017A4BE8(a1);
  sub_1017A0E18(v4, v5);
}

void sub_1017A0E18(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;

  if (a1)
  {
    if (a2)
    {
      v3 = (_DWORD *)a1;
      a2[1] = *(_DWORD *)(a1 + 8);
      sub_1017A2EA8((int *)(a1 + 12), a2 + 2);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1017A4D48();
  }
  v4 = sub_1017A4EA8(a1);
  sub_1017A0E64(v4);
}

void sub_1017A0E64(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;

  if (a1)
  {
    if (a2)
    {
      v3 = (_DWORD *)a1;
      a2[1] = *(_DWORD *)(a1 + 8);
      sub_1017A2EA8((int *)(a1 + 12), a2 + 2);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1017A5008();
  }
  v4 = sub_1017A5168(a1);
  sub_1017A0EB0(v4);
}

void sub_1017A0EB0(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  if (a1)
  {
    if (a2)
    {
      v3 = (_DWORD *)a1;
      a2[1] = *(_DWORD *)(a1 + 8);
      sub_1017A2EA8((int *)(a1 + 12), a2 + 2);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1017A52C8();
  }
  v4 = sub_1017A5428(a1);
  sub_1017A0EFC(v4, v5);
}

void sub_1017A0EFC(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1017A0F04(a1, a2);
}

void sub_1017A0F04(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  if (a1)
  {
    if (a2)
    {
      v3 = (_DWORD *)a1;
      sub_1017A2394((int *)(a1 + 4), a2 + 2);
      sub_1017A25BC(v3 + 2, a2 + 3);
      a2[4] = v3[3];
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1017A5588();
  }
  v4 = sub_1017A56E8(a1);
  sub_1017A0F5C(v4, v5);
}

void sub_1017A0F5C(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;

  if (a1)
  {
    if (a2)
    {
      v3 = (_DWORD *)a1;
      sub_1017A2EA8((int *)(a1 + 8), a2 + 1);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1017A5848();
  }
  v4 = sub_1017A59A8(a1);
  sub_1017A0FA0(v4);
}

void sub_1017A0FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      sub_1017A2EA8((int *)(a1 + 4), (int *)(a2 + 4));
      sub_1017A32B4((int *)(v3 + 16), (int *)(a2 + 16));
      *(_DWORD *)a2 = *(_DWORD *)v3;
      *(_QWORD *)(a2 + 20) = *(_QWORD *)(v3 + 20);
      sub_1017A34EC((int *)(v3 + 28), (_DWORD *)(a2 + 28));
      return;
    }
  }
  else
  {
    a1 = sub_1017A5B08();
  }
  v4 = sub_1017A5C68(a1);
  sub_1017A1000(v4);
}

void sub_1017A1000(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      sub_1017A2EA8((int *)(a1 + 4), (int *)(a2 + 4));
      sub_1017A2EF4((int *)(v3 + 16), (_DWORD *)(a2 + 16));
      *(_QWORD *)(a2 + 20) = *(_QWORD *)(v3 + 20);
      *(_BYTE *)(a2 + 28) = *(_BYTE *)(v3 + 28);
      *(_WORD *)(a2 + 29) = *(_WORD *)(v3 + 29);
      sub_1017A30D4((int *)(v3 + 32), (_DWORD *)(a2 + 32));
      *(_DWORD *)a2 = *(_DWORD *)v3;
      return;
    }
  }
  else
  {
    a1 = sub_1017A5DC8();
  }
  v4 = sub_1017A5F28(a1);
  sub_1017A1074(v4, v5);
}

void sub_1017A1074(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;
  unsigned int *v4;

  if (a1)
  {
    if (a2)
    {
      v3 = (_DWORD *)a1;
      sub_1017A2EA8((int *)(a1 + 4), a2 + 1);
      a2[4] = v3[4];
      sub_1017A3B88(v3 + 5, a2 + 5);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1017A6088();
  }
  v4 = (unsigned int *)sub_1017A61E8(a1);
  sub_1017A10CC(v4);
}

uint64_t sub_1017A10CC(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (int)a1[1];
  if (v1 > 4)
    v2 = 0;
  else
    v2 = qword_101CDD048[v1];
  return v2 | *a1;
}

double sub_1017A10F8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4) == 0;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 > 1)
  {
    if (v2 == 2 || v2 == 0x7FFFFFFF)
    {
      v3 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    if (!v2)
    {
      v3 = 3;
      goto LABEL_9;
    }
    if (v2 == 1)
    {
      v3 = 4;
LABEL_9:
      *(_DWORD *)(a2 + 8) = v3;
    }
  }
  *(_WORD *)(a2 + 12) = *(_WORD *)(a1 + 12);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(_WORD *)(a2 + 20) = *(_WORD *)(a1 + 20);
  result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 32);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)a2 = *(_DWORD *)a1;
  return result;
}

void sub_1017A1188(int *a1, uint64_t a2)
{
  int *v3;
  int v4;
  int *v5;
  _DWORD *v6;

  if (!a1)
  {
    a1 = (int *)sub_1017A6348();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    v5 = (int *)sub_1017A64A8(a1);
    sub_1017A1220(v5, v6);
    return;
  }
  v3 = a1;
  sub_1017A1220(a1, (_DWORD *)a2);
  *(_DWORD *)(a2 + 4) = v3[1];
  *(_DWORD *)(a2 + 8) = v3[2];
  sub_1017A3A0C(v3 + 4, (_DWORD *)(a2 + 12));
  sub_1017A1DC0((uint64_t)(v3 + 6), a2 + 16);
  v4 = *((unsigned __int8 *)v3 + 128);
  *(_BYTE *)(a2 + 116) = v4;
  if (v4)
  {
    sub_1017A2838(v3 + 33, (_DWORD *)(a2 + 120));
    sub_1017A1E80((uint64_t)(v3 + 34), a2 + 124);
    bzero((void *)(a2 + 896), 0x918uLL);
  }
}

int *sub_1017A1220(int *result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!result)
  {
    result = (int *)sub_1017A6608();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    v3 = sub_1017A6768(result);
    return (int *)sub_1017A125C(v3);
  }
  v2 = *result;
  if (v2 <= 4)
    *a2 = dword_101CDD070[v2];
  return result;
}

void sub_1017A125C(int *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;

  if (!a1)
  {
    a1 = (int *)sub_1017A68C8();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    v6 = (int *)sub_1017A6A28(a1);
    sub_1017A12D4(v6, v7);
    return;
  }
  v3 = a1;
  sub_1017A12D4(a1, (int *)a2);
  v4 = 0;
  *(_WORD *)(a2 + 4) = *((_WORD *)v3 + 2);
  *(_BYTE *)(a2 + 6) = *((_BYTE *)v3 + 6);
  do
  {
    v5 = a2 + v4 * 4;
    *(_BYTE *)(v5 + 8) = v3[v4 + 2];
    *(_DWORD *)(v5 + 12) = v3[v4 + 3];
    v4 += 2;
  }
  while (v4 != 30);
  *(_DWORD *)(a2 + 218) = *(int *)((char *)v3 + 218);
}

void sub_1017A12D4(int *a1, int *a2)
{
  int *v2;
  uint64_t *v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!a1)
  {
    a1 = (int *)sub_1017A6B88();
LABEL_20:
    sub_1017A6CE8(a1);
LABEL_21:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
LABEL_6:
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v5 = *v2;
      *(_DWORD *)buf = 67240192;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF458);
      v6 = *v2;
      v10[0] = 67240192;
      v10[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value,%{public}d", v10, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const gnss::Emergency::Cplane::LcsGanssId *, IBISsLcsGanssId *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return;
  }
  if (!a2)
    goto LABEL_20;
  v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      v9 = 1;
      goto LABEL_17;
    case 2:
      v9 = 2;
      goto LABEL_17;
    case 3:
      v9 = 3;
      goto LABEL_17;
    case 4:
      v9 = 4;
LABEL_17:
      *a2 = v9;
      break;
    default:
      *a2 = 0x7FFFFFFF;
      v3 = &qword_1022A0000;
      if (qword_1022A0070 == -1)
        goto LABEL_6;
      goto LABEL_21;
  }
}

uint64_t sub_1017A14FC(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    if (a2)
    {
      *(_WORD *)a2 = *(_WORD *)result;
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(result + 4);
      *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 12);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
      *(_QWORD *)(a2 + 20) = *(_QWORD *)(result + 20);
      *(_WORD *)(a2 + 28) = *(_WORD *)(result + 28);
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
      *(_BYTE *)(a2 + 36) = *(_BYTE *)(result + 36);
      *(_BYTE *)(a2 + 37) = *(_BYTE *)(result + 37);
      *(_DWORD *)(a2 + 40) = *(_DWORD *)(result + 40);
      return result;
    }
  }
  else
  {
    result = sub_1017A6E48();
  }
  v2 = sub_1017A6FA8(result);
  return sub_1017A1574(v2);
}

void sub_1017A1574(int *a1, _DWORD *a2)
{
  int *v2;
  uint64_t *v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!a1)
  {
    a1 = (int *)sub_1017A7108();
    goto LABEL_14;
  }
  if (!a2)
  {
LABEL_14:
    sub_1017A7268(a1);
LABEL_15:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
    goto LABEL_9;
  }
  v2 = a1;
  v4 = *a1;
  if (*a1 == 2 || v4 == 1)
  {
    *a2 = v4;
    return;
  }
  if (!v4)
  {
    *a2 = 0;
    return;
  }
  v3 = &qword_1022A0000;
  if (qword_1022A0070 != -1)
    goto LABEL_15;
LABEL_9:
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v6 = *v2;
    *(_DWORD *)buf = 67240192;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF458);
    v7 = *v2;
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unhandled enum value,%{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpMethodType *, gnss::Emergency::Cplane::MethodType *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

_DWORD *sub_1017A175C(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t i;
  _DWORD *result;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
  {
    a1 = (_DWORD *)sub_1017A73C8();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    v6 = sub_1017A7528(a1);
    return sub_1017A1800(v6, v7);
  }
  v3 = a1;
  *(_DWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 4) = a1[1];
  for (i = 2; i != 98; i += 6)
    sub_1017A1800((uint64_t)&v3[i], a2 + i * 4);
  sub_1017A3A0C(v3 + 98, (_DWORD *)(a2 + 392));
  result = sub_1017A27D8((uint64_t)(v3 + 99), a2 + 396);
  *(_BYTE *)(a2 + 440) = *((_BYTE *)v3 + 440);
  *(_DWORD *)(a2 + 444) = v3[111];
  *(_DWORD *)(a2 + 448) = v3[112];
  *(_WORD *)(a2 + 452) = *((_WORD *)v3 + 226);
  *(_BYTE *)(a2 + 454) = *((_BYTE *)v3 + 454);
  return result;
}

_DWORD *sub_1017A1800(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *result;
  uint64_t v5;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      *(_WORD *)a2 = *(_WORD *)a1;
      *(_DWORD *)(a2 + 2) = *(_DWORD *)(a1 + 2);
      *(_BYTE *)(a2 + 6) = *(_BYTE *)(a1 + 6);
      *(_WORD *)(a2 + 7) = *(_WORD *)(a1 + 7);
      result = sub_1017A3B58((_DWORD *)(a1 + 12), (_DWORD *)(a2 + 12));
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 16);
      *(_BYTE *)(a2 + 20) = *(_BYTE *)(v3 + 20);
      return result;
    }
  }
  else
  {
    a1 = sub_1017A7688();
  }
  v5 = sub_1017A77E8(a1);
  return (_DWORD *)sub_1017A186C(v5);
}

void sub_1017A186C(uint64_t a1, int *a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int *v9;

  if (!a1)
  {
    a1 = sub_1017A7948();
    goto LABEL_8;
  }
  if (!a2)
  {
LABEL_8:
    a1 = sub_1017A7AA8(a1);
    goto LABEL_9;
  }
  if (!a3)
  {
LABEL_9:
    v8 = (int *)sub_1017A7C08(a1);
    sub_1017A193C(v8, v9);
    return;
  }
  v5 = (_DWORD *)a1;
  v6 = 0;
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  *(_WORD *)(a3 + 8) = *(_WORD *)(a1 + 8);
  *(_BYTE *)(a3 + 10) = *(_BYTE *)(a1 + 10);
  *(_BYTE *)(a3 + 11) = *(_BYTE *)(a1 + 764);
  do
  {
    v7 = a3 + v6;
    *(_WORD *)(v7 + 12) = *(_WORD *)(a1 + v6 + 768);
    *(_BYTE *)(v7 + 14) = *(_BYTE *)(a1 + v6 + 770);
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + v6 + 772);
    *(_BYTE *)(v7 + 24) = *(_BYTE *)(a1 + v6 + 780);
    v6 += 16;
  }
  while (v6 != 256);
  *(_BYTE *)(a3 + 268) = *(_BYTE *)(a1 + 1024);
  sub_1017A193C(a2, (int *)(a3 + 272));
  sub_1017A1B50(a2 + 1, (int *)(a3 + 276));
  *(_DWORD *)(a3 + 280) = a2[2];
  *(_DWORD *)a3 = *v5;
}

void sub_1017A193C(int *a1, int *a2)
{
  int *v2;
  uint64_t *v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!a1)
  {
    a1 = (int *)sub_1017A7D68();
LABEL_19:
    sub_1017A7EC8(a1);
LABEL_20:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
LABEL_6:
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v5 = *v2;
      *(_DWORD *)buf = 67240192;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF458);
      v6 = *v2;
      v10[0] = 67240192;
      v10[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unhandled enum value,%{public}d", v10, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpSessionProtocol *, gnss::Emergency::Cplane::SessionProtocol *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return;
  }
  if (!a2)
    goto LABEL_19;
  v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      v9 = 1;
      goto LABEL_16;
    case 2:
      v9 = 2;
      goto LABEL_16;
    case 3:
      v9 = 3;
LABEL_16:
      *a2 = v9;
      break;
    default:
      v3 = &qword_1022A0000;
      if (qword_1022A0070 == -1)
        goto LABEL_6;
      goto LABEL_20;
  }
}

void sub_1017A1B50(int *a1, int *a2)
{
  int *v2;
  uint64_t *v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!a1)
  {
    a1 = (int *)sub_1017A8028();
LABEL_20:
    sub_1017A8188(a1);
LABEL_21:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
LABEL_6:
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v5 = *v2;
      *(_DWORD *)buf = 67240192;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF458);
      v6 = *v2;
      v10[0] = 67240192;
      v10[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value,%{public}d", v10, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpPosProtocol *, gnss::Emergency::Cplane::PosProtocol *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return;
  }
  if (!a2)
    goto LABEL_20;
  v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      v9 = 1;
      goto LABEL_17;
    case 2:
      v9 = 2;
      goto LABEL_17;
    case 3:
      v9 = 3;
      goto LABEL_17;
    case 4:
      v9 = 4;
LABEL_17:
      *a2 = v9;
      break;
    default:
      *a2 = *a1;
      v3 = &qword_1022A0000;
      if (qword_1022A0070 == -1)
        goto LABEL_6;
      goto LABEL_21;
  }
}

void sub_1017A1D74(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    if (a2)
    {
      v3 = (_DWORD *)a1;
      a2[1] = *(_DWORD *)(a1 + 4);
      sub_1017A1B50((int *)(a1 + 8), a2 + 2);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1017A82E8();
  }
  v4 = sub_1017A8448(a1);
  sub_1017A1DC0(v4, v5);
}

uint64_t sub_1017A1DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      sub_1017A1E30(a1, a2);
      *(_BYTE *)(a2 + 32) = *(_BYTE *)(v3 + 32);
      *(_WORD *)(a2 + 34) = *(_WORD *)(v3 + 34);
      *(_DWORD *)(a2 + 36) = *(_DWORD *)(v3 + 36);
      *(_WORD *)(a2 + 40) = *(_WORD *)(v3 + 40);
      *(_QWORD *)(a2 + 44) = *(_QWORD *)(v3 + 44);
      *(_DWORD *)(a2 + 52) = *(_DWORD *)(v3 + 52);
      return sub_1017A14FC(v3 + 56, a2 + 56);
    }
  }
  else
  {
    a1 = sub_1017A85A8();
  }
  v5 = sub_1017A8708(a1);
  return sub_1017A1E30(v5, v6);
}

uint64_t sub_1017A1E30(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    if (a2)
    {
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 12);
      *(_WORD *)(a2 + 16) = *(_WORD *)(result + 16);
      *(_QWORD *)(a2 + 20) = *(_QWORD *)(result + 20);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(result + 28);
      return result;
    }
  }
  else
  {
    result = sub_1017A8868();
  }
  v2 = sub_1017A89C8(result);
  return sub_1017A1E80(v2);
}

_DWORD *sub_1017A1E80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  _DWORD *result;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
  {
    a1 = sub_1017A8B28();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    v6 = sub_1017A8C88(a1);
    return sub_1017A1EE4(v6, v7);
  }
  v3 = a1;
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_WORD *)(a2 + 1) = *(_WORD *)(a1 + 1);
  for (i = 4; i != 772; i += 24)
    result = sub_1017A1EE4(v3 + i, a2 + i);
  return result;
}

_DWORD *sub_1017A1EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *result;
  uint64_t v5;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      *(_WORD *)a2 = *(_WORD *)a1;
      *(_BYTE *)(a2 + 2) = *(_BYTE *)(a1 + 2);
      *(_WORD *)(a2 + 3) = *(_WORD *)(a1 + 3);
      result = sub_1017A3B58((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(v3 + 12);
      *(_WORD *)(a2 + 16) = *(_WORD *)(v3 + 16);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(v3 + 20);
      return result;
    }
  }
  else
  {
    a1 = sub_1017A8DE8();
  }
  v5 = sub_1017A8F48(a1);
  return (_DWORD *)sub_1017A1F50(v5);
}

void sub_1017A1F50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  _DWORD *v5;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      *(_DWORD *)a2 = *(_DWORD *)a1;
      *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 4);
      *(_BYTE *)(a2 + 6) = *(_BYTE *)(a1 + 6);
      sub_1017A1FBC((int *)(a1 + 8), (_DWORD *)(a2 + 8));
      *(_QWORD *)(a2 + 60) = *(_QWORD *)(v3 + 12);
      *(_WORD *)(a2 + 68) = *(_WORD *)(v3 + 20);
      *(_BYTE *)(a2 + 70) = *(_BYTE *)(v3 + 22);
      return;
    }
  }
  else
  {
    a1 = sub_1017A90A8();
  }
  v4 = (int *)sub_1017A9208(a1);
  sub_1017A1FBC(v4, v5);
}

void sub_1017A1FBC(int *a1, _DWORD *a2)
{
  int *v2;
  uint64_t *v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (!a1)
  {
    a1 = (int *)sub_1017A9368();
    goto LABEL_13;
  }
  if (!a2)
  {
LABEL_13:
    sub_1017A94C8(a1);
LABEL_14:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
    goto LABEL_8;
  }
  v2 = a1;
  if (*a1 == 1)
  {
    *a2 = 1;
    return;
  }
  if (!*a1)
  {
    *a2 = 0;
    return;
  }
  *a2 = 0x7FFFFFFF;
  v3 = &qword_1022A0000;
  if (qword_1022A0070 != -1)
    goto LABEL_14;
LABEL_8:
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v5 = *v2;
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF458);
    v6 = *v2;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const gnss::Emergency::Cplane::FixType *, IBILpFixType *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

int *sub_1017A21A4(int *result, _DWORD *a2)
{
  int v2;
  BOOL v3;
  uint64_t v4;

  if (!result)
  {
    result = (int *)sub_1017A9628();
    goto LABEL_12;
  }
  if (!a2)
  {
LABEL_12:
    v4 = sub_1017A9788(result);
    return (int *)sub_1017A21F4(v4);
  }
  v2 = *result;
  v3 = *result > 0xA || ((1 << *result) & 0x72B) == 0;
  if (!v3 || v2 == 255)
    *a2 = v2;
  return result;
}

_BYTE *sub_1017A21F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      *(_QWORD *)a2 = *(_QWORD *)a1;
      *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
      *(_QWORD *)(a2 + 12) = *(_QWORD *)(a1 + 12);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 20);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
      *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 32);
      *(_DWORD *)(a2 + 34) = *(_DWORD *)(a1 + 34);
      *(_BYTE *)(a2 + 38) = *(_BYTE *)(a1 + 38);
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
      *(_WORD *)(a2 + 48) = *(_WORD *)(a1 + 48);
      *(_DWORD *)(a2 + 50) = *(_DWORD *)(a1 + 50);
      *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
      *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
      result = sub_1017A22F8((_BYTE *)(a1 + 76), (_BYTE *)(a2 + 76));
      *(_BYTE *)(a2 + 200) = *(_BYTE *)(v3 + 200);
      return result;
    }
  }
  else
  {
    a1 = sub_1017A98E8();
  }
  v5 = sub_1017A9A48(a1);
  return (_BYTE *)sub_1017A22A0(v5, v6);
}

uint64_t sub_1017A22A0(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  if (!result)
  {
    result = sub_1017A9BA8();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    v3 = sub_1017A9D08(result);
    return sub_1017A22F8(v3);
  }
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  *(_DWORD *)(a2 + 10) = *(_DWORD *)(result + 10);
  v2 = *(_DWORD *)(result + 16) + 1;
  if (v2 <= 3)
    *(_DWORD *)(a2 + 16) = dword_101C20FA0[v2];
  return result;
}

_BYTE *sub_1017A22F8(_BYTE *result, _BYTE *a2)
{
  uint64_t i;
  uint64_t v3;

  if (!result)
  {
    result = (_BYTE *)sub_1017A9E68();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    v3 = sub_1017A9FC8(result);
    return (_BYTE *)sub_1017A2338(v3);
  }
  *a2 = *result;
  for (i = 4; i != 124; i += 8)
    *(_QWORD *)&a2[i] = *(_QWORD *)&result[i];
  return result;
}

void sub_1017A2338(int *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      sub_1017A1220(a1, (_DWORD *)a2);
      *(_DWORD *)(a2 + 4) = v3[1];
      *(_WORD *)(a2 + 8) = *((_WORD *)v3 + 4);
      sub_1017A1FBC(v3 + 3, (_DWORD *)(a2 + 12));
      *(_WORD *)(a2 + 120) = *((_WORD *)v3 + 8);
      return;
    }
  }
  else
  {
    a1 = (int *)sub_1017AA128();
  }
  v4 = (int *)sub_1017AA288(a1);
  sub_1017A2394(v4, v5);
}

void sub_1017A2394(int *a1, int *a2)
{
  int *v2;
  uint64_t *v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!a1)
  {
    a1 = (int *)sub_1017AA3E8();
LABEL_20:
    sub_1017AA548(a1);
LABEL_21:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
LABEL_6:
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v5 = *v2;
      *(_DWORD *)buf = 67240192;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF458);
      v6 = *v2;
      v10[0] = 67240192;
      v10[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value,%{public}d", v10, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const gnss::Emergency::Cplane::PosProtocol *, IBILpPosProtocol *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return;
  }
  if (!a2)
    goto LABEL_20;
  v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      v9 = 1;
      goto LABEL_17;
    case 2:
      v9 = 2;
      goto LABEL_17;
    case 3:
      v9 = 3;
      goto LABEL_17;
    case 4:
      v9 = 4;
LABEL_17:
      *a2 = v9;
      break;
    default:
      *a2 = 0x7FFFFFFF;
      v3 = &qword_1022A0000;
      if (qword_1022A0070 == -1)
        goto LABEL_6;
      goto LABEL_21;
  }
}

void sub_1017A25BC(int *a1, int *a2)
{
  int *v2;
  uint64_t *v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!a1)
  {
    a1 = (int *)sub_1017AA6A8();
LABEL_19:
    sub_1017AA808(a1);
LABEL_20:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
LABEL_6:
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v5 = *v2;
      *(_DWORD *)buf = 67240192;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF458);
      v6 = *v2;
      v10[0] = 67240192;
      v10[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value,%{public}d", v10, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const gnss::Emergency::Cplane::SessionProtocol *, IBILpSessionProtocol *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return;
  }
  if (!a2)
    goto LABEL_19;
  v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      v9 = 1;
      goto LABEL_16;
    case 2:
      v9 = 2;
      goto LABEL_16;
    case 3:
      v9 = 3;
LABEL_16:
      *a2 = v9;
      break;
    default:
      *a2 = 0x7FFFFFFF;
      v3 = &qword_1022A0000;
      if (qword_1022A0070 == -1)
        goto LABEL_6;
      goto LABEL_20;
  }
}

_DWORD *sub_1017A27D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *result;
  _DWORD *v5;
  _DWORD *v6;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      result = (_DWORD *)sub_1017A22A0(a1, a2);
      *(_QWORD *)(a2 + 20) = *(_QWORD *)(v3 + 20);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(v3 + 28);
      *(_BYTE *)(a2 + 32) = *(_BYTE *)(v3 + 32);
      *(_DWORD *)(a2 + 36) = *(_DWORD *)(v3 + 36);
      *(_BYTE *)(a2 + 40) = *(_BYTE *)(v3 + 40);
      return result;
    }
  }
  else
  {
    a1 = sub_1017AA968();
  }
  v5 = (_DWORD *)sub_1017AAAC8(a1);
  return sub_1017A2838(v5, v6);
}

_DWORD *sub_1017A2838(_DWORD *result, _DWORD *a2)
{
  uint64_t v2;

  if (!result)
  {
    result = (_DWORD *)sub_1017AAC28();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    v2 = sub_1017AAD88(result);
    return (_DWORD *)sub_1017A2868(v2);
  }
  if (*result <= 5u)
    *a2 = *result;
  return result;
}

void sub_1017A2868(uint64_t a1, int *a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
  {
    a1 = sub_1017AAEE8();
    goto LABEL_8;
  }
  if (!a2)
  {
LABEL_8:
    a1 = sub_1017AB048(a1);
    goto LABEL_9;
  }
  if (!a3)
  {
LABEL_9:
    v7 = sub_1017AB1A8(a1);
    sub_1017A28F8(v7, v8);
    return;
  }
  v5 = (_DWORD *)a1;
  *(_BYTE *)(a3 + 4) = *(_BYTE *)(a1 + 4);
  for (i = 2; i != 386; i += 24)
    sub_1017A28F8((uint64_t)&v5[i], a3 + i * 4);
  sub_1017A193C(a2, (int *)(a3 + 1544));
  sub_1017A1B50(a2 + 1, (int *)(a3 + 1548));
  *(_DWORD *)(a3 + 1552) = a2[2];
  *(_DWORD *)a3 = *v5;
}

uint64_t sub_1017A28F8(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;

  if (result)
  {
    if (a2)
    {
      *(_OWORD *)a2 = *(_OWORD *)result;
      v2 = *(_OWORD *)(result + 32);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(result + 16);
      *(_OWORD *)(a2 + 32) = v2;
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(result + 48);
      *(_DWORD *)(a2 + 56) = *(_DWORD *)(result + 56);
      *(_WORD *)(a2 + 60) = *(_WORD *)(result + 60);
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(result + 64);
      *(_BYTE *)(a2 + 68) = *(_BYTE *)(result + 68);
      *(_DWORD *)(a2 + 72) = *(_DWORD *)(result + 72);
      *(_BYTE *)(a2 + 76) = *(_BYTE *)(result + 76);
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(result + 80);
      return result;
    }
  }
  else
  {
    result = sub_1017AB308();
  }
  v3 = sub_1017AB468(result);
  return sub_1017A2968(v3);
}

void sub_1017A2968(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
  {
    a1 = sub_1017AB5C8();
    goto LABEL_8;
  }
  if (!a2)
  {
LABEL_8:
    a1 = sub_1017AB728(a1);
    goto LABEL_9;
  }
  if (!a3)
  {
LABEL_9:
    v7 = sub_1017AB888(a1);
    sub_1017A2A18(v7, v8);
    return;
  }
  v5 = a1;
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a1 + 8);
  sub_1017A2C94((int *)(a1 + 12), (int *)(a3 + 12));
  for (i = 760; i != 1080; i += 20)
    sub_1017A2A18(v5 + i, a3 + i - 716);
  *(_BYTE *)(a3 + 364) = *(_BYTE *)(v5 + 1080);
  sub_1017A193C(a2, (int *)(a3 + 368));
  sub_1017A1B50(a2 + 1, (int *)(a3 + 372));
  *(_DWORD *)(a3 + 376) = a2[2];
  *(_DWORD *)a3 = *(_DWORD *)v5;
}

void sub_1017A2A18(uint64_t a1, uint64_t a2)
{
  int *v2;
  int *v3;

  if (!a1)
  {
    a1 = sub_1017AB9E8();
    goto LABEL_6;
  }
  if (!a2)
  {
LABEL_6:
    v2 = (int *)sub_1017ABB48(a1);
    goto LABEL_4;
  }
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
  *(_WORD *)(a2 + 10) = *(_WORD *)(a1 + 10);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  v2 = (int *)(a1 + 16);
  v3 = (int *)(a2 + 16);
LABEL_4:
  sub_1017A2A68(v2, v3);
}

void sub_1017A2A68(int *a1, int *a2)
{
  int *v2;
  uint64_t *v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!a1)
  {
    a1 = (int *)sub_1017ABCA8();
LABEL_22:
    sub_1017ABE08(a1);
LABEL_23:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
    goto LABEL_8;
  }
  if (!a2)
    goto LABEL_22;
  v2 = a1;
  v4 = *a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      v4 = 1;
      goto LABEL_19;
    case 2:
      v4 = 2;
      goto LABEL_19;
    case 3:
      v4 = 3;
      goto LABEL_19;
    default:
      if (v4 == 254)
      {
        v4 = 255;
        goto LABEL_19;
      }
      if (v4 == 255)
      {
LABEL_19:
        *a2 = v4;
        return;
      }
      v3 = &qword_1022A0000;
      if (qword_1022A0070 != -1)
        goto LABEL_23;
LABEL_8:
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        v6 = *v2;
        *(_DWORD *)buf = 67240192;
        v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v3[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF458);
        v7 = *v2;
        v10[0] = 67240192;
        v10[1] = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unhandled enum value,%{public}d", v10, 8);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpGpsDopplerUncertExt *, gnss::Emergency::Cplane::GpsDopplerUncMpsExt *)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      return;
  }
}

void sub_1017A2C94(int *a1, int *a2)
{
  int *v2;
  uint64_t *v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!a1)
  {
    a1 = (int *)sub_1017ABF68();
LABEL_19:
    sub_1017AC0C8(a1);
LABEL_20:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
LABEL_6:
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v6 = *v2;
      *(_DWORD *)buf = 67240192;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF458);
      v7 = *v2;
      v10[0] = 67240192;
      v10[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unhandled enum value,%{public}d", v10, 8);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBIClsNetworkType *, gnss::Emergency::Cplane::ClsNetworkType *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return;
  }
  if (!a2)
    goto LABEL_19;
  v2 = a1;
  switch(*a1)
  {
    case 0:
      v4 = 1;
      goto LABEL_15;
    case 1:
      v4 = 2;
      goto LABEL_15;
    case 2:
      v4 = 3;
LABEL_15:
      *a2 = v4;
      break;
    case 3:
      *a2 = 0;
      break;
    default:
      v3 = &qword_1022A0000;
      if (qword_1022A0070 == -1)
        goto LABEL_6;
      goto LABEL_20;
  }
}

void sub_1017A2EA8(int *a1, int *a2)
{
  int *v3;
  uint64_t v4;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      sub_1017A193C(a1, a2);
      sub_1017A1B50(v3 + 1, a2 + 1);
      a2[2] = v3[2];
      return;
    }
  }
  else
  {
    a1 = (int *)sub_1017AC228();
  }
  v4 = sub_1017AC388(a1);
  sub_1017A2EF4(v4);
}

void sub_1017A2EF4(int *a1, _DWORD *a2)
{
  int *v2;
  uint64_t *v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (!a1)
  {
    a1 = (int *)sub_1017AC4E8();
    goto LABEL_13;
  }
  if (!a2)
  {
LABEL_13:
    sub_1017AC648(a1);
LABEL_14:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
    goto LABEL_8;
  }
  v2 = a1;
  if (*a1 == 1)
  {
    *a2 = 1;
    return;
  }
  if (!*a1)
  {
    *a2 = 0;
    return;
  }
  v3 = &qword_1022A0000;
  if (qword_1022A0070 != -1)
    goto LABEL_14;
LABEL_8:
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v5 = *v2;
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF458);
    v6 = *v2;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unhandled enum value,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpIs801LocationIndStatus *, gnss::Emergency::Cplane::Is801LocationIndStatus *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_1017A30D4(int *a1, _DWORD *a2)
{
  int *v2;
  uint64_t *v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (!a1)
  {
    a1 = (int *)sub_1017AC7A8();
    goto LABEL_13;
  }
  if (!a2)
  {
LABEL_13:
    sub_1017AC908(a1);
LABEL_14:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
    goto LABEL_8;
  }
  v2 = a1;
  if (*a1 == 1)
  {
    *a2 = 1;
    return;
  }
  if (!*a1)
  {
    *a2 = 0;
    return;
  }
  v3 = &qword_1022A0000;
  if (qword_1022A0070 != -1)
    goto LABEL_14;
LABEL_8:
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v5 = *v2;
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF458);
    v6 = *v2;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unhandled enum value,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpFixType *, gnss::Emergency::Cplane::Is801FixType *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_1017A32B4(int *a1, int *a2)
{
  int *v2;
  uint64_t *v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!a1)
  {
    a1 = (int *)sub_1017ACA68();
LABEL_22:
    sub_1017ACBC8(a1);
LABEL_23:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
LABEL_6:
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v5 = *v2;
      *(_DWORD *)buf = 67240192;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF458);
      v6 = *v2;
      v10[0] = 67240192;
      v10[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unhandled enum value,%{public}d", v10, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpDiscardedPosMsgType *, gnss::Emergency::Cplane::DiscardedPosMsgType *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return;
  }
  if (!a2)
    goto LABEL_22;
  v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      v9 = 1;
      goto LABEL_19;
    case 2:
      v9 = 2;
      goto LABEL_19;
    case 3:
      v9 = 3;
      goto LABEL_19;
    case 4:
      v9 = 4;
      goto LABEL_19;
    case 5:
      v9 = 5;
      goto LABEL_19;
    case 6:
      v9 = 6;
LABEL_19:
      *a2 = v9;
      break;
    default:
      v3 = &qword_1022A0000;
      if (qword_1022A0070 == -1)
        goto LABEL_6;
      goto LABEL_23;
  }
}

void sub_1017A34EC(int *a1, _DWORD *a2)
{
  int *v2;
  uint64_t *v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!a1)
  {
    a1 = (int *)sub_1017ACD28();
    goto LABEL_14;
  }
  if (!a2)
  {
LABEL_14:
    sub_1017ACE88(a1);
LABEL_15:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
    goto LABEL_9;
  }
  v2 = a1;
  v4 = *a1;
  if (*a1 == 2 || v4 == 1)
  {
    *a2 = v4;
    return;
  }
  if (!v4)
  {
    *a2 = 0;
    return;
  }
  v3 = &qword_1022A0000;
  if (qword_1022A0070 != -1)
    goto LABEL_15;
LABEL_9:
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v6 = *v2;
    *(_DWORD *)buf = 67240192;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF458);
    v7 = *v2;
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value,%{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpDiscardReason *, gnss::Emergency::Cplane::DiscardReason *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

int *sub_1017A36D4(int *result, _DWORD *a2)
{
  int v2;
  uint64_t v3;

  if (!result)
  {
    result = (int *)sub_1017ACFE8();
    goto LABEL_9;
  }
  if (!a2)
  {
LABEL_9:
    v3 = sub_1017AD148(result);
    return (int *)sub_1017A3710(v3);
  }
  v2 = *result;
  if (*result < 4 || v2 == 255)
    *a2 = v2;
  return result;
}

void sub_1017A3710(int *a1, int *a2)
{
  int *v2;
  uint64_t *v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!a1)
  {
    a1 = (int *)sub_1017AD2A8();
LABEL_23:
    sub_1017AD408(a1);
LABEL_24:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
LABEL_6:
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v5 = *v2;
      *(_DWORD *)buf = 67240192;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF458);
      v6 = *v2;
      v10[0] = 67240192;
      v10[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value,%{public}d", v10, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpAbortReason *, gnss::Emergency::Cplane::AbortReason *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return;
  }
  if (!a2)
    goto LABEL_23;
  v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      v9 = 1;
      goto LABEL_20;
    case 2:
      v9 = 2;
      goto LABEL_20;
    case 3:
      v9 = 3;
      goto LABEL_20;
    case 4:
      v9 = 4;
      goto LABEL_20;
    case 5:
      v9 = 5;
      goto LABEL_20;
    case 6:
      v9 = 6;
      goto LABEL_20;
    case 7:
      v9 = 7;
LABEL_20:
      *a2 = v9;
      break;
    default:
      v3 = &qword_1022A0000;
      if (qword_1022A0070 == -1)
        goto LABEL_6;
      goto LABEL_24;
  }
}

void sub_1017A3954(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  int *v5;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      sub_1017A1B50((int *)(a1 + 4), (int *)(a2 + 4));
      sub_1017A193C((int *)(v3 + 8), (int *)(a2 + 8));
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(v3 + 12);
      *(_DWORD *)a2 = *(_DWORD *)v3;
      sub_1017A3710((int *)(v3 + 16), (int *)(a2 + 16));
      *(_QWORD *)(a2 + 20) = *(_QWORD *)(v3 + 20);
      return;
    }
  }
  else
  {
    a1 = sub_1017AD568();
  }
  v4 = (int *)sub_1017AD6C8(a1);
  sub_1017A39C0(v4, v5);
}

void sub_1017A39C0(int *a1, int *a2)
{
  int *v3;
  int *v4;
  _DWORD *v5;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      sub_1017A25BC(a1, a2);
      sub_1017A2394(v3 + 1, a2 + 1);
      a2[2] = v3[2];
      return;
    }
  }
  else
  {
    a1 = (int *)sub_1017AD828();
  }
  v4 = (int *)sub_1017AD988(a1);
  sub_1017A3A0C(v4, v5);
}

int *sub_1017A3A0C(int *result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!result)
  {
    result = (int *)sub_1017ADAE8();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    v3 = sub_1017ADC48(result);
    return (int *)sub_1017A3A48(v3);
  }
  v2 = *result;
  if (v2 <= 4)
    *a2 = dword_101CDD084[v2];
  return result;
}

uint64_t sub_1017A3A48(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;

  if (!result)
  {
    result = sub_1017ADDA8();
    goto LABEL_9;
  }
  if (!a2)
  {
LABEL_9:
    v4 = sub_1017ADF08(result);
    return sub_1017A3AC0(v4);
  }
  v2 = 0;
  *(_WORD *)a2 = *(_WORD *)result;
  *(_DWORD *)(a2 + 2) = *(_DWORD *)(result + 2);
  do
  {
    *(_BYTE *)(a2 + 6 + v2) = *(_BYTE *)(result + 6 + v2);
    ++v2;
  }
  while (v2 != 15);
  for (i = 0; i != 15; ++i)
    *(_BYTE *)(a2 + 21 + i) = *(_BYTE *)(result + 21 + i);
  *(_BYTE *)(a2 + 36) = *(_BYTE *)(result + 36);
  return result;
}

void sub_1017A3AC0(_WORD *a1, uint64_t a2)
{
  _WORD *v3;
  uint64_t v4;
  _WORD *v5;
  uint64_t i;
  _DWORD *v7;
  _DWORD *v8;

  if (!a1)
  {
    a1 = (_WORD *)sub_1017AE068();
    goto LABEL_9;
  }
  if (!a2)
  {
LABEL_9:
    v7 = (_DWORD *)sub_1017AE1C8(a1);
    sub_1017A3B58(v7, v8);
    return;
  }
  v3 = a1;
  v4 = 0;
  v5 = a1 + 2;
  *(_WORD *)a2 = *a1;
  do
  {
    sub_1017A12D4((int *)&v5[v4], (int *)(a2 + 4 + v4 * 2));
    v4 += 2;
  }
  while (v4 != 16);
  *(_DWORD *)(a2 + 36) = *((_DWORD *)v3 + 9);
  *(_WORD *)(a2 + 40) = v3[20];
  for (i = 22; i != 918; i += 112)
    sub_1017A125C((int *)&v3[i], a2 + i * 2);
}

_DWORD *sub_1017A3B58(_DWORD *result, _DWORD *a2)
{
  uint64_t v2;

  if (!result)
  {
    result = (_DWORD *)sub_1017AE328();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    v2 = sub_1017AE488(result);
    return (_DWORD *)sub_1017A3B88(v2);
  }
  if (*result <= 4u)
    *a2 = *result;
  return result;
}

void sub_1017A3B88(int *a1, _DWORD *a2)
{
  int *v2;
  uint64_t *v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (!a1)
  {
    a1 = (int *)sub_1017AE5E8();
    goto LABEL_13;
  }
  if (!a2)
  {
LABEL_13:
    sub_1017AE748(a1);
LABEL_14:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
    goto LABEL_8;
  }
  v2 = a1;
  if (*a1 == 1)
  {
    *a2 = 1;
    return;
  }
  if (!*a1)
  {
    *a2 = 0;
    return;
  }
  v3 = &qword_1022A0000;
  if (qword_1022A0070 != -1)
    goto LABEL_14;
LABEL_8:
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v5 = *v2;
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF458);
    v6 = *v2;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unhandled enum value,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpLocationRequestStatus *, gnss::Emergency::Cplane::LocationRequestStatus *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_1017A3D68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 4);
      sub_1017A1574((int *)(a1 + 8), (_DWORD *)(a2 + 8));
      *(_WORD *)(a2 + 12) = *(_WORD *)(v3 + 12);
      *(_BYTE *)(a2 + 14) = *(_BYTE *)(v3 + 14);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 20);
      *(_BYTE *)(a2 + 20) = *(_BYTE *)(v3 + 28);
      *(_WORD *)(a2 + 21) = *(_WORD *)(v3 + 29);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(v3 + 36);
      *(_WORD *)(a2 + 32) = *(_WORD *)(v3 + 44);
      *(_WORD *)(a2 + 34) = *(_WORD *)(v3 + 64);
      *(_BYTE *)(a2 + 36) = *(_BYTE *)(v3 + 66);
      sub_1017A1B50((int *)(v3 + 68), (int *)(a2 + 40));
      *(_DWORD *)(a2 + 44) = *(_DWORD *)(v3 + 72);
      *(_DWORD *)a2 = *(_DWORD *)v3;
      return;
    }
  }
  else
  {
    a1 = sub_1017AE8A8();
  }
  v4 = sub_1017AEA08(a1);
  sub_1017A3E10(v4);
}

void sub_1017A3E10(uint64_t a1, int *a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
  {
    a1 = sub_1017AEB68();
    goto LABEL_6;
  }
  if (!a2)
  {
LABEL_6:
    a1 = sub_1017AECC8(a1);
    goto LABEL_7;
  }
  if (a3)
  {
    v5 = (_DWORD *)a1;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 16);
    *(_WORD *)(a3 + 20) = *(_WORD *)(a1 + 20);
    sub_1017A193C(a2, (int *)(a3 + 24));
    sub_1017A1B50(a2 + 1, (int *)(a3 + 28));
    *(_DWORD *)(a3 + 32) = a2[2];
    *(_DWORD *)a3 = *v5;
    return;
  }
LABEL_7:
  v6 = sub_1017AEE28(a1);
  sub_1017A3E9C(v6, v7);
}

uint64_t sub_1017A3E9C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;

  if (result)
  {
    if (a2)
    {
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
      *(_DWORD *)(a2 + 10) = *(_DWORD *)(result + 10);
      *(_BYTE *)(a2 + 14) = *(_BYTE *)(result + 14);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(result + 20);
      return result;
    }
  }
  else
  {
    result = sub_1017AEF88();
  }
  v2 = sub_1017AF0E8(result);
  return sub_1017A3EEC(v2, v3);
}

uint64_t sub_1017A3EEC(uint64_t result, _DWORD *a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 4);
  *a2 = 0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1017A3EF8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;

  v2 = 0;
  *(_BYTE *)a2 = *(_DWORD *)result == 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 4);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 20);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 28);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(result + 32);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(result + 48);
  do
  {
    *(_DWORD *)(a2 + 60 + v2) = *(_DWORD *)(result + 52 + v2);
    v2 += 4;
  }
  while (v2 != 540);
  for (i = 0; i != 270; i += 2)
    *(_WORD *)(a2 + 600 + i) = *(_WORD *)(result + 592 + i);
  v4 = 0;
  *(_BYTE *)(a2 + 36) = *(_DWORD *)(result + 864) != 0;
  *(_WORD *)(a2 + 38) = *(_WORD *)(result + 868);
  do
  {
    *(_WORD *)(a2 + 872 + v4) = *(_WORD *)(result + 870 + v4);
    v4 += 2;
  }
  while (v4 != 16);
  *(_WORD *)(a2 + 888) = *(_WORD *)(result + 886);
  *(_DWORD *)(a2 + 890) = *(_DWORD *)(result + 892);
  return result;
}

void sub_1017A3FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      *(_DWORD *)a2 = *(_DWORD *)a1;
      *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 16);
      sub_1017A2EA8((int *)(a1 + 4), (int *)(a2 + 4));
      *(_BYTE *)(a2 + 18) = *(_BYTE *)(v3 + 18);
      return;
    }
  }
  else
  {
    a1 = sub_1017AF248();
  }
  v4 = sub_1017AF3A8(a1);
  sub_1017A4014(v4, v5);
}

void sub_1017A4014(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1017A401C(a1, a2);
}

void sub_1017A401C(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    if (a2)
    {
      v3 = (_DWORD *)a1;
      a2[1] = *(_DWORD *)(a1 + 4);
      sub_1017A39C0((int *)(a1 + 8), a2 + 2);
      sub_1017A409C((uint64_t)(v3 + 5), (uint64_t)(a2 + 5));
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1017AF508();
  }
  v4 = sub_1017AF668(a1);
  sub_1017A4074(v4, v5);
}

void sub_1017A4074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)a2 = *(_QWORD *)a1;
      sub_1017A2EA8((int *)(a1 + 8), (int *)(a2 + 8));
      return;
    }
  }
  else
  {
    a1 = sub_1017AF7C8();
  }
  v2 = sub_1017AF928(a1);
  sub_1017A409C(v2);
}

uint64_t sub_1017A409C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
  {
    a1 = sub_1017AFA88();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    v7 = sub_1017AFBE8(a1);
    return sub_1017A413C(v7, v8);
  }
  v3 = a1;
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_DWORD *)(a2 + 1040) = *(unsigned __int8 *)(a1 + 780);
  sub_1017A419C((int *)(a1 + 784), (_DWORD *)(a2 + 1044));
  *(_DWORD *)(a2 + 1028) = *(unsigned __int8 *)(v3 + 770);
  *(_WORD *)(a2 + 1032) = *(_WORD *)(v3 + 772);
  *(_DWORD *)(a2 + 1034) = *(_DWORD *)(v3 + 774);
  *(_BYTE *)(a2 + 1038) = *(_BYTE *)(v3 + 778);
  v4 = a2 + 4;
  for (i = 2; i != 770; i += 12)
  {
    result = sub_1017A413C(v3 + i, v4);
    v4 += 16;
  }
  return result;
}

uint64_t sub_1017A413C(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t i;
  uint64_t v4;

  if (!result)
  {
    result = sub_1017AFD48();
    goto LABEL_10;
  }
  if (!a2)
  {
LABEL_10:
    v4 = sub_1017AFEA8(result);
    return sub_1017A419C(v4);
  }
  HIDWORD(v2) = *(_DWORD *)(result + 8);
  LODWORD(v2) = HIDWORD(v2);
  *(_DWORD *)(a2 + 6) = v2 >> 16;
  *(_DWORD *)(a2 + 12) = 0;
  if (*(_BYTE *)(result + 6) && *(_BYTE *)(result + 7))
    *(_DWORD *)(a2 + 12) = 1;
  for (i = 0; i != 6; ++i)
    *(_BYTE *)(a2 + i) = *(_BYTE *)(result + i);
  return result;
}

void sub_1017A419C(int *a1, _DWORD *a2)
{
  int *v2;
  uint64_t *v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!a1)
  {
    a1 = (int *)sub_1017B0008();
    goto LABEL_12;
  }
  if (!a2)
  {
LABEL_12:
    sub_1017B0168(a1);
LABEL_13:
    dispatch_once(&qword_1022A0070, &stru_1021CF458);
    goto LABEL_7;
  }
  v2 = a1;
  v4 = *a1;
  if (*a1 == 2 || v4 == 1)
  {
    *a2 = v4;
    return;
  }
  v3 = &qword_1022A0000;
  if (qword_1022A0070 != -1)
    goto LABEL_13;
LABEL_7:
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6 = *v2;
    *(_DWORD *)buf = 67240192;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Warning,Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF458);
    v7 = *v2;
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning,Unhandled enum value,%{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLIceTranslator::translate(const gnss::Emergency::Cplane::WlanErrorCause *, IBILpWlanErrorCause *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_1017A4378(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;

  if (a1)
  {
    if (a2)
    {
      v3 = (_DWORD *)a1;
      a2[1] = *(_DWORD *)(a1 + 4);
      sub_1017A2EA8((int *)(a1 + 8), a2 + 2);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1017B02C8();
  }
  v4 = sub_1017B0428(a1);
  sub_1017A43C4(v4);
}

uint64_t sub_1017A43C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
  {
    a1 = sub_1017B0588();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    v6 = sub_1017B06E8(a1);
    return sub_1017A4454(v6, v7);
  }
  v3 = a1;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 4);
  *(_BYTE *)(a2 + 12) = *(_BYTE *)(a1 + 8);
  sub_1017A39C0((int *)(a1 + 12), (int *)(a2 + 16));
  sub_1017A175C((_DWORD *)(v3 + 24), a2 + 28);
  result = sub_1017A4454(v3 + 480, a2 + 484);
  v5 = *(int *)(v3 + 524);
  if (v5 <= 2)
    *(_DWORD *)(a2 + 532) = dword_101CDD09C[v5];
  *(_DWORD *)(a2 + 536) = *(unsigned __int8 *)(v3 + 528);
  *(_DWORD *)a2 = *(_DWORD *)v3;
  return result;
}

uint64_t sub_1017A4454(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;

  if (result)
  {
    if (a2)
    {
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
      *(_WORD *)(a2 + 9) = *(_WORD *)(result + 9);
      v2 = *(unsigned __int8 *)(result + 16);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 12);
      *(_DWORD *)(a2 + 16) = v2;
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(result + 18);
      *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 22);
      v3 = *(_DWORD *)(result + 28);
      *(_DWORD *)(a2 + 28) = *(unsigned __int8 *)(result + 24);
      *(_DWORD *)(a2 + 32) = v3;
      *(_WORD *)(a2 + 36) = *(_WORD *)(result + 32);
      *(_DWORD *)(a2 + 40) = *(unsigned __int8 *)(result + 36);
      *(_WORD *)(a2 + 44) = *(_WORD *)(result + 38);
      *(_BYTE *)(a2 + 46) = *(_BYTE *)(result + 40);
      return result;
    }
  }
  else
  {
    result = sub_1017B0848();
  }
  v4 = sub_1017B09A8(result);
  return sub_1017A44D4(v4);
}

uint64_t sub_1017A44D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1017A43C4(a1, a2);
}

void sub_1017A44DC(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

#error "1017A457C: call analysis failed (funcsize=70)"

#error "1017A46DC: call analysis failed (funcsize=70)"

#error "1017A483C: call analysis failed (funcsize=70)"

#error "1017A499C: call analysis failed (funcsize=70)"

#error "1017A4AFC: call analysis failed (funcsize=70)"

#error "1017A4C5C: call analysis failed (funcsize=70)"

#error "1017A4DBC: call analysis failed (funcsize=70)"

#error "1017A4F1C: call analysis failed (funcsize=70)"

#error "1017A507C: call analysis failed (funcsize=70)"

#error "1017A51DC: call analysis failed (funcsize=70)"

#error "1017A533C: call analysis failed (funcsize=70)"

#error "1017A549C: call analysis failed (funcsize=70)"

#error "1017A55FC: call analysis failed (funcsize=70)"

#error "1017A575C: call analysis failed (funcsize=70)"

#error "1017A58BC: call analysis failed (funcsize=70)"

#error "1017A5A1C: call analysis failed (funcsize=70)"

#error "1017A5B7C: call analysis failed (funcsize=70)"

#error "1017A5CDC: call analysis failed (funcsize=70)"

#error "1017A5E3C: call analysis failed (funcsize=70)"

#error "1017A5F9C: call analysis failed (funcsize=70)"

#error "1017A60FC: call analysis failed (funcsize=70)"

#error "1017A625C: call analysis failed (funcsize=70)"

#error "1017A63BC: call analysis failed (funcsize=70)"

#error "1017A651C: call analysis failed (funcsize=70)"

#error "1017A667C: call analysis failed (funcsize=70)"

#error "1017A67DC: call analysis failed (funcsize=70)"

#error "1017A693C: call analysis failed (funcsize=70)"

#error "1017A6A9C: call analysis failed (funcsize=70)"

#error "1017A6BFC: call analysis failed (funcsize=70)"

#error "1017A6D5C: call analysis failed (funcsize=70)"

#error "1017A6EBC: call analysis failed (funcsize=70)"

#error "1017A701C: call analysis failed (funcsize=70)"

#error "1017A717C: call analysis failed (funcsize=70)"

#error "1017A72DC: call analysis failed (funcsize=70)"

#error "1017A743C: call analysis failed (funcsize=70)"

#error "1017A759C: call analysis failed (funcsize=70)"

#error "1017A76FC: call analysis failed (funcsize=70)"

#error "1017A785C: call analysis failed (funcsize=70)"

#error "1017A79BC: call analysis failed (funcsize=70)"

#error "1017A7B1C: call analysis failed (funcsize=70)"

#error "1017A7C7C: call analysis failed (funcsize=70)"

#error "1017A7DDC: call analysis failed (funcsize=70)"

#error "1017A7F3C: call analysis failed (funcsize=70)"

#error "1017A809C: call analysis failed (funcsize=70)"

#error "1017A81FC: call analysis failed (funcsize=70)"

#error "1017A835C: call analysis failed (funcsize=70)"

#error "1017A84BC: call analysis failed (funcsize=70)"

#error "1017A861C: call analysis failed (funcsize=70)"

#error "1017A877C: call analysis failed (funcsize=70)"

#error "1017A88DC: call analysis failed (funcsize=70)"

#error "1017A8A3C: call analysis failed (funcsize=70)"

#error "1017A8B9C: call analysis failed (funcsize=70)"

#error "1017A8CFC: call analysis failed (funcsize=70)"

#error "1017A8E5C: call analysis failed (funcsize=70)"

#error "1017A8FBC: call analysis failed (funcsize=70)"

#error "1017A911C: call analysis failed (funcsize=70)"

#error "1017A927C: call analysis failed (funcsize=70)"

#error "1017A93DC: call analysis failed (funcsize=70)"

#error "1017A953C: call analysis failed (funcsize=70)"

#error "1017A969C: call analysis failed (funcsize=70)"

#error "1017A97FC: call analysis failed (funcsize=70)"

#error "1017A995C: call analysis failed (funcsize=70)"

#error "1017A9ABC: call analysis failed (funcsize=70)"

#error "1017A9C1C: call analysis failed (funcsize=70)"

#error "1017A9D7C: call analysis failed (funcsize=70)"

#error "1017A9EDC: call analysis failed (funcsize=70)"

#error "1017AA03C: call analysis failed (funcsize=70)"

#error "1017AA19C: call analysis failed (funcsize=70)"

#error "1017AA2FC: call analysis failed (funcsize=70)"

#error "1017AA45C: call analysis failed (funcsize=70)"

#error "1017AA5BC: call analysis failed (funcsize=70)"

#error "1017AA71C: call analysis failed (funcsize=70)"

#error "1017AA87C: call analysis failed (funcsize=70)"

#error "1017AA9DC: call analysis failed (funcsize=70)"

#error "1017AAB3C: call analysis failed (funcsize=70)"

#error "1017AAC9C: call analysis failed (funcsize=70)"

#error "1017AADFC: call analysis failed (funcsize=70)"

#error "1017AAF5C: call analysis failed (funcsize=70)"

#error "1017AB0BC: call analysis failed (funcsize=70)"

#error "1017AB21C: call analysis failed (funcsize=70)"

#error "1017AB37C: call analysis failed (funcsize=70)"

#error "1017AB4DC: call analysis failed (funcsize=70)"

#error "1017AB63C: call analysis failed (funcsize=70)"

#error "1017AB79C: call analysis failed (funcsize=70)"

#error "1017AB8FC: call analysis failed (funcsize=70)"

#error "1017ABA5C: call analysis failed (funcsize=70)"

#error "1017ABBBC: call analysis failed (funcsize=70)"

#error "1017ABD1C: call analysis failed (funcsize=70)"

#error "1017ABE7C: call analysis failed (funcsize=70)"

#error "1017ABFDC: call analysis failed (funcsize=70)"

#error "1017AC13C: call analysis failed (funcsize=70)"

#error "1017AC29C: call analysis failed (funcsize=70)"

#error "1017AC3FC: call analysis failed (funcsize=70)"

#error "1017AC55C: call analysis failed (funcsize=70)"

#error "1017AC6BC: call analysis failed (funcsize=70)"

#error "1017AC81C: call analysis failed (funcsize=70)"

#error "1017AC97C: call analysis failed (funcsize=70)"

#error "1017ACADC: call analysis failed (funcsize=70)"

#error "1017ACC3C: call analysis failed (funcsize=70)"

#error "1017ACD9C: call analysis failed (funcsize=70)"

#error "1017ACEFC: call analysis failed (funcsize=70)"

#error "1017AD05C: call analysis failed (funcsize=70)"

#error "1017AD1BC: call analysis failed (funcsize=70)"

#error "1017AD31C: call analysis failed (funcsize=70)"

#error "1017AD47C: call analysis failed (funcsize=70)"

#error "1017AD5DC: call analysis failed (funcsize=70)"

#error "1017AD73C: call analysis failed (funcsize=70)"

#error "1017AD89C: call analysis failed (funcsize=70)"

#error "1017AD9FC: call analysis failed (funcsize=70)"

#error "1017ADB5C: call analysis failed (funcsize=70)"

#error "1017ADCBC: call analysis failed (funcsize=70)"

#error "1017ADE1C: call analysis failed (funcsize=70)"

#error "1017ADF7C: call analysis failed (funcsize=70)"

#error "1017AE0DC: call analysis failed (funcsize=70)"

#error "1017AE23C: call analysis failed (funcsize=70)"

#error "1017AE39C: call analysis failed (funcsize=70)"

#error "1017AE4FC: call analysis failed (funcsize=70)"

#error "1017AE65C: call analysis failed (funcsize=70)"

#error "1017AE7BC: call analysis failed (funcsize=70)"

#error "1017AE91C: call analysis failed (funcsize=70)"

#error "1017AEA7C: call analysis failed (funcsize=70)"

#error "1017AEBDC: call analysis failed (funcsize=70)"

#error "1017AED3C: call analysis failed (funcsize=70)"

#error "1017AEE9C: call analysis failed (funcsize=70)"

#error "1017AEFFC: call analysis failed (funcsize=70)"

#error "1017AF15C: call analysis failed (funcsize=70)"

#error "1017AF2BC: call analysis failed (funcsize=70)"

#error "1017AF41C: call analysis failed (funcsize=70)"

#error "1017AF57C: call analysis failed (funcsize=70)"

#error "1017AF6DC: call analysis failed (funcsize=70)"

#error "1017AF83C: call analysis failed (funcsize=70)"

#error "1017AF99C: call analysis failed (funcsize=70)"

#error "1017AFAFC: call analysis failed (funcsize=70)"

#error "1017AFC5C: call analysis failed (funcsize=70)"

#error "1017AFDBC: call analysis failed (funcsize=70)"

#error "1017AFF1C: call analysis failed (funcsize=70)"

#error "1017B007C: call analysis failed (funcsize=70)"

#error "1017B01DC: call analysis failed (funcsize=70)"

#error "1017B033C: call analysis failed (funcsize=70)"

#error "1017B049C: call analysis failed (funcsize=70)"

#error "1017B05FC: call analysis failed (funcsize=70)"

#error "1017B075C: call analysis failed (funcsize=70)"

#error "1017B08BC: call analysis failed (funcsize=70)"

#error "1017B0A1C: call analysis failed (funcsize=70)"

uint64_t sub_1017B0B08(uint64_t a1)
{
  __int128 v8;

  __asm { FMOV            V0.2D, #-1.0 }
  v8 = _Q0;
  *(_OWORD *)a1 = _Q0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1002433B8(a1 + 32);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = v8;
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 208) = v8;
  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 280) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 1;
  *(_OWORD *)(a1 + 320) = xmmword_101BAFEE0;
  *(_QWORD *)(a1 + 336) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 344) = 0;
  sub_100B26370((_OWORD *)(a1 + 352));
  *(_QWORD *)(a1 + 536) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_DWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_QWORD *)(a1 + 1200) = 0;
  *(_QWORD *)(a1 + 1192) = 0;
  *(_DWORD *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_DWORD *)(a1 + 784) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_DWORD *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_DWORD *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_DWORD *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_DWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_DWORD *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1260) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  sub_1017B0D08((__n128 *)a1);
  return a1;
}

void sub_1017B0CC8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6;

  sub_1017C38F8(v3);
  sub_100AA26AC(v2);
  v6 = *(void **)(v4 + 56);
  if (v6)
  {
    v1[37] = v6;
    operator delete(v6);
  }
  sub_1017B0EB4(v1);
  _Unwind_Resume(a1);
}

void sub_1017B0D08(__n128 *a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM,RhythmicScaled,resetting odometer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,RhythmicScaled,resetting odometer", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::reset()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  ++a1[79].n128_u32[2];
  sub_1017B5928(a1);
  a1[19].n128_u8[8] = 1;
}

_QWORD *sub_1017B0EB4(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  return a1;
}

__n128 sub_1017B0EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __n128 result;

  if (*(_BYTE *)(a3 + 32))
  {
    v4 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 336) = v4;
  }
  sub_1017B0F38(a1 + 152, a2);
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)a1 = result;
  return result;
}

double sub_1017B0F38(uint64_t a1, uint64_t a2)
{
  long double v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = *(double *)(a2 + 64);
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 56);
  sub_100080DCC(v4);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 176);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 72) = result;
  return result;
}

void sub_1017B0F8C(uint64_t a1)
{
  double v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  double v31;
  _OWORD *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float64x2_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  double v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint8_t *v101;
  uint64_t v102;
  _BYTE v103[24];
  uint64_t v104;
  _BYTE v105[32];
  uint64_t v106;
  _BYTE v107[32];
  uint64_t v108;
  _BYTE v109[24];
  uint8_t buf[4];
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;

  v2 = sub_1001FCBB4();
  if (*(_BYTE *)(a1 + 312))
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 216);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 152);
    *(_BYTE *)(a1 + 312) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_QWORD *)(a1 + 72);
      v5 = *(_QWORD *)(a1 + 80);
      v7 = *(_QWORD *)(a1 + 88);
      v6 = *(_QWORD *)(a1 + 96);
      v9 = *(_QWORD *)(a1 + 136);
      v8 = *(_QWORD *)(a1 + 144);
      v10 = *(_QWORD *)(a1 + 104);
      v11 = *(_QWORD *)(a1 + 112);
      v13 = *(_QWORD *)(a1 + 120);
      v12 = *(_QWORD *)(a1 + 128);
      v14 = *(_QWORD *)(a1 + 320);
      v15 = *(_QWORD *)(a1 + 328);
      v16 = *(_QWORD *)(a1 + 336);
      *(_DWORD *)buf = 134352129;
      v111 = v8;
      v112 = 2049;
      v113 = v4;
      v114 = 2049;
      v115 = v5;
      v116 = 2050;
      v117 = v6;
      v118 = 2050;
      v119 = v7;
      v120 = 2050;
      v121 = v10;
      v122 = 2050;
      v123 = v12;
      v124 = 2050;
      v125 = v9;
      v126 = 2050;
      v127 = v11;
      v128 = 2050;
      v129 = v13;
      v130 = 2050;
      v131 = v14;
      v132 = 2050;
      v133 = v15;
      v134 = 2050;
      v135 = v16;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,ScaledOdom,prevPos,%{public}.3lf,qualified fix received,LL,%{private}.8lf,%{private}.8lf,hunc,%{public}.2lf,altitude,%{public}.2lf,altUnc,%{public}.2lf,course,%{public}.2lf,courseUnc,%{public}.2lf,speed,%{public}.2lf,speedUnc,%{public}.2lf,straightnessTimeStamp,%{public}.2lf,straightnessMetric,%{public}.4lf,straightnessConfidence,%{public}.4lf", buf, 0x84u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v17 = *(_QWORD *)(a1 + 72);
      v18 = *(_QWORD *)(a1 + 80);
      v20 = *(_QWORD *)(a1 + 88);
      v19 = *(_QWORD *)(a1 + 96);
      v22 = *(_QWORD *)(a1 + 136);
      v21 = *(_QWORD *)(a1 + 144);
      v23 = *(_QWORD *)(a1 + 104);
      v24 = *(_QWORD *)(a1 + 112);
      v26 = *(_QWORD *)(a1 + 120);
      v25 = *(_QWORD *)(a1 + 128);
      v27 = *(_QWORD *)(a1 + 320);
      v28 = *(_QWORD *)(a1 + 328);
      v29 = *(_QWORD *)(a1 + 336);
      *(_DWORD *)v103 = 134352129;
      *(_QWORD *)&v103[4] = v21;
      *(_WORD *)&v103[12] = 2049;
      *(_QWORD *)&v103[14] = v17;
      *(_WORD *)&v103[22] = 2049;
      *(_WORD *)v105 = 2050;
      *(_QWORD *)&v105[2] = v19;
      *(_WORD *)&v105[10] = 2050;
      *(_QWORD *)&v105[12] = v20;
      *(_WORD *)&v105[20] = 2050;
      *(_QWORD *)&v105[22] = v23;
      *(_WORD *)&v105[30] = 2050;
      *(_WORD *)v107 = 2050;
      *(_QWORD *)&v107[2] = v22;
      *(_WORD *)&v107[10] = 2050;
      *(_QWORD *)&v107[12] = v24;
      *(_WORD *)&v107[20] = 2050;
      *(_QWORD *)&v107[22] = v26;
      *(_WORD *)&v107[30] = 2050;
      *(_WORD *)v109 = 2050;
      *(_QWORD *)&v109[2] = v28;
      *(_WORD *)&v109[10] = 2050;
      *(_QWORD *)&v109[12] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,ScaledOdom,prevPos,%{public}.3lf,qualified fix received,LL,%{private}.8lf,%{private}.8lf,hunc,%{public}.2lf,altitude,%{public}.2lf,altUnc,%{public}.2lf,course,%{public}.2lf,courseUnc,%{public}.2lf,speed,%{public}.2lf,speedUnc,%{public}.2lf,straightnessTimeStamp,%{public}.2lf,straightnessMetric,%{public}.4lf,straightnessConfidence,%{public}.4lf", v103, 132, *(_OWORD *)v103, *(_QWORD *)&v103[16], v18, *(_OWORD *)v105, *(_OWORD *)&v105[16], v25,
        *(_OWORD *)v107,
        *(_OWORD *)&v107[16],
        v27,
        *(_OWORD *)v109,
        *(_QWORD *)&v109[16]);
LABEL_36:
      v79 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::updateDistanceAndBatchedLocations()", "%s\n", v30);
      if (v79 != buf)
        free(v79);
    }
  }
  else
  {
    v31 = v2;
    if (sub_1017B1900((double *)(a1 + 72)) && (v32 = (_OWORD *)(a1 + 152), sub_1017B1900((double *)(a1 + 152))))
    {
      if (*(double *)(a1 + 536) < 0.0)
        *(double *)(a1 + 536) = sub_1001FCBB4();
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v33 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v34 = *(_QWORD *)(a1 + 152);
        v35 = *(_QWORD *)(a1 + 160);
        v37 = *(_QWORD *)(a1 + 168);
        v36 = *(_QWORD *)(a1 + 176);
        v39 = *(_QWORD *)(a1 + 216);
        v38 = *(_QWORD *)(a1 + 224);
        v40 = *(_QWORD *)(a1 + 184);
        v41 = *(_QWORD *)(a1 + 192);
        v43 = *(_QWORD *)(a1 + 200);
        v42 = *(_QWORD *)(a1 + 208);
        v44 = *(_QWORD *)(a1 + 320);
        v45 = *(_QWORD *)(a1 + 328);
        v46 = *(_QWORD *)(a1 + 336);
        *(_DWORD *)buf = 134352129;
        v111 = v38;
        v112 = 2049;
        v113 = v34;
        v114 = 2049;
        v115 = v35;
        v116 = 2050;
        v117 = v36;
        v118 = 2050;
        v119 = v37;
        v120 = 2050;
        v121 = v40;
        v122 = 2050;
        v123 = v42;
        v124 = 2050;
        v125 = v39;
        v126 = 2050;
        v127 = v41;
        v128 = 2050;
        v129 = v43;
        v130 = 2050;
        v131 = v44;
        v132 = 2050;
        v133 = v45;
        v134 = 2050;
        v135 = v46;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,ScaledOdom,latestPos,%{public}.3lf,qualified fix received,LL,%{private}.8lf,%{private}.8lf,hunc,%{public}.2lf,altitude,%{public}.2lf,altUnc,%{public}.2lf,course,%{public}.2lf,courseUnc,%{public}.2lf,speed,%{public}.2lf,speedUnc,%{public}.2lf,straightnessTimeStamp,%{public}.2lf,straightnessMetric,%{public}.4lf,straightnessConfidence,%{public}.4lf", buf, 0x84u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v80 = *(_QWORD *)(a1 + 152);
        v81 = *(_QWORD *)(a1 + 160);
        v83 = *(_QWORD *)(a1 + 168);
        v82 = *(_QWORD *)(a1 + 176);
        v85 = *(_QWORD *)(a1 + 216);
        v84 = *(_QWORD *)(a1 + 224);
        v86 = *(_QWORD *)(a1 + 184);
        v87 = *(_QWORD *)(a1 + 192);
        v89 = *(_QWORD *)(a1 + 200);
        v88 = *(_QWORD *)(a1 + 208);
        v90 = *(_QWORD *)(a1 + 320);
        v91 = *(_QWORD *)(a1 + 328);
        v92 = *(_QWORD *)(a1 + 336);
        *(_DWORD *)v103 = 134352129;
        *(_QWORD *)&v103[4] = v84;
        *(_WORD *)&v103[12] = 2049;
        *(_QWORD *)&v103[14] = v80;
        *(_WORD *)&v103[22] = 2049;
        v104 = v81;
        *(_WORD *)v105 = 2050;
        *(_QWORD *)&v105[2] = v82;
        *(_WORD *)&v105[10] = 2050;
        *(_QWORD *)&v105[12] = v83;
        *(_WORD *)&v105[20] = 2050;
        *(_QWORD *)&v105[22] = v86;
        *(_WORD *)&v105[30] = 2050;
        v106 = v88;
        *(_WORD *)v107 = 2050;
        *(_QWORD *)&v107[2] = v85;
        *(_WORD *)&v107[10] = 2050;
        *(_QWORD *)&v107[12] = v87;
        *(_WORD *)&v107[20] = 2050;
        *(_QWORD *)&v107[22] = v89;
        *(_WORD *)&v107[30] = 2050;
        v108 = v90;
        *(_WORD *)v109 = 2050;
        *(_QWORD *)&v109[2] = v91;
        *(_WORD *)&v109[10] = 2050;
        *(_QWORD *)&v109[12] = v92;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,ScaledOdom,latestPos,%{public}.3lf,qualified fix received,LL,%{private}.8lf,%{private}.8lf,hunc,%{public}.2lf,altitude,%{public}.2lf,altUnc,%{public}.2lf,course,%{public}.2lf,courseUnc,%{public}.2lf,speed,%{public}.2lf,speedUnc,%{public}.2lf,straightnessTimeStamp,%{public}.2lf,straightnessMetric,%{public}.4lf,straightnessConfidence,%{public}.4lf", v103, 132);
        v94 = (uint8_t *)v93;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::updateDistanceAndBatchedLocations()", "%s\n", v93);
        if (v94 != buf)
          free(v94);
      }
      *(double *)a1 = sub_1017B194C((__n128 *)a1, (double *)(a1 + 72), (double *)(a1 + 152), (double *)(a1 + 320), a1 + 536);
      sub_1017B1C7C(a1);
      v47 = vld1q_dup_f64((const double *)a1);
      *(float64x2_t *)(a1 + 16) = vaddq_f64(v47, *(float64x2_t *)(a1 + 16));
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v48 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v49 = *(_QWORD *)a1;
        v51 = *(_QWORD *)(a1 + 16);
        v50 = *(_QWORD *)(a1 + 24);
        v52 = *(_QWORD *)(a1 + 144);
        v53 = *(_QWORD *)(a1 + 224);
        *(_DWORD *)buf = 134350080;
        v111 = v50;
        v112 = 2050;
        v113 = v49;
        v114 = 2050;
        v115 = v51;
        v116 = 2050;
        v117 = v52;
        v118 = 2050;
        v119 = v53;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,greatestD,%{public}.2lf,deltaGreatestD,%{public}.2lf,totalScaledOdometerDistance,%{public}.2lf,startTime,%{public}.1lf,endTime,%{public}.1lf", buf, 0x34u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v95 = *(_QWORD *)a1;
        v97 = *(_QWORD *)(a1 + 16);
        v96 = *(_QWORD *)(a1 + 24);
        v98 = *(_QWORD *)(a1 + 144);
        v99 = *(_QWORD *)(a1 + 224);
        *(_DWORD *)v103 = 134350080;
        *(_QWORD *)&v103[4] = v96;
        *(_WORD *)&v103[12] = 2050;
        *(_QWORD *)&v103[14] = v95;
        *(_WORD *)&v103[22] = 2050;
        v104 = v97;
        *(_WORD *)v105 = 2050;
        *(_QWORD *)&v105[2] = v98;
        *(_WORD *)&v105[10] = 2050;
        *(_QWORD *)&v105[12] = v99;
        LODWORD(v102) = 52;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,greatestD,%{public}.2lf,deltaGreatestD,%{public}.2lf,totalScaledOdometerDistance,%{public}.2lf,startTime,%{public}.1lf,endTime,%{public}.1lf", v103, v102);
        v101 = (uint8_t *)v100;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::updateDistanceAndBatchedLocations()", "%s\n", v100);
        if (v101 != buf)
          free(v101);
      }
      sub_1017B2CD8(a1);
      v54 = *(_OWORD *)(a1 + 200);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 184);
      *(_OWORD *)(a1 + 120) = v54;
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 216);
      v55 = *(_OWORD *)(a1 + 168);
      *(_OWORD *)(a1 + 72) = *v32;
      *(_OWORD *)(a1 + 88) = v55;
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)v32 = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 176) = _Q0;
      *(_OWORD *)(a1 + 192) = _Q0;
      *(_OWORD *)(a1 + 208) = _Q0;
      v61 = 0.0;
      *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
      if (v31 >= 0.0)
        v61 = vabdd_f64(sub_1001FCBB4(), v31) * 1000.0;
      sub_100785E0C((char *)(a1 + 1184), v61);
      sub_1017B2D2C((uint64_t *)(a1 + 536));
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v62 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v63 = *(_QWORD *)(a1 + 72);
        v64 = *(_QWORD *)(a1 + 80);
        v65 = *(_QWORD *)(a1 + 88);
        v66 = *(_QWORD *)(a1 + 144);
        v67 = *(_QWORD *)(a1 + 152);
        v68 = *(_QWORD *)(a1 + 160);
        v69 = *(_QWORD *)(a1 + 168);
        v70 = *(_QWORD *)(a1 + 224);
        *(_DWORD *)buf = 134285313;
        v111 = v63;
        v112 = 2049;
        v113 = v64;
        v114 = 2049;
        v115 = v65;
        v116 = 2050;
        v117 = v66;
        v118 = 2049;
        v119 = v67;
        v120 = 2049;
        v121 = v68;
        v122 = 2049;
        v123 = v69;
        v124 = 2050;
        v125 = v70;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,invalid co-ordinates or altitude,%{private}.7lf,%{private}.7lf,%{private}.3lf,%{public}.6lf,%{private}.7lf,%{private}.7lf,%{private}.3lf,%{public}.6lf", buf, 0x52u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v71 = *(_QWORD *)(a1 + 72);
        v72 = *(_QWORD *)(a1 + 80);
        v73 = *(_QWORD *)(a1 + 88);
        v74 = *(_QWORD *)(a1 + 144);
        v75 = *(_QWORD *)(a1 + 152);
        v76 = *(_QWORD *)(a1 + 160);
        v77 = *(_QWORD *)(a1 + 168);
        v78 = *(_QWORD *)(a1 + 224);
        *(_DWORD *)v103 = 134285313;
        *(_QWORD *)&v103[4] = v71;
        *(_WORD *)&v103[12] = 2049;
        *(_QWORD *)&v103[14] = v72;
        *(_WORD *)&v103[22] = 2049;
        *(_WORD *)v105 = 2050;
        *(_QWORD *)&v105[2] = v74;
        *(_WORD *)&v105[10] = 2049;
        *(_QWORD *)&v105[12] = v75;
        *(_WORD *)&v105[20] = 2049;
        *(_QWORD *)&v105[22] = v76;
        *(_WORD *)&v105[30] = 2049;
        *(_WORD *)v107 = 2050;
        *(_QWORD *)&v107[2] = v78;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,invalid co-ordinates or altitude,%{private}.7lf,%{private}.7lf,%{private}.3lf,%{public}.6lf,%{private}.7lf,%{private}.7lf,%{private}.3lf,%{public}.6lf", v103, 82, *(_OWORD *)v103, *(_QWORD *)&v103[16], v73, *(_OWORD *)v105, *(_OWORD *)&v105[16], v77, *(_OWORD *)v107, *(_OWORD *)&v107[16],
          v108,
          *(_OWORD *)v109,
          *(_QWORD *)&v109[16]);
        goto LABEL_36;
      }
    }
  }
}

BOOL sub_1017B1900(double *a1)
{
  _BOOL8 result;

  if (sub_10011CE64(*a1, a1[1]))
    return 0;
  result = sub_10011CE88(*a1, a1[1]);
  if (result)
    return sub_10011E234(a1[2]);
  return result;
}

double sub_1017B194C(__n128 *a1, double *a2, double *a3, double *a4, uint64_t a5)
{
  unint64_t v10;
  double *v11;
  unint64_t v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  double v19;
  const char *v21;
  uint8_t *v22;
  _BYTE v23[12];
  double *v24;
  uint64_t v25;
  long double v26;
  void *v27;
  _BYTE *v28;
  uint64_t v29;
  _DWORD v30[2];
  __int16 v31;
  int v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  int v36;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v26 = -1.0;
  sub_1017B3598(a1, (uint64_t)a2, (uint64_t)a3, a4, (double **)&v27, a5, &v26);
  *(_DWORD *)&v23[8] = 0;
  v24 = 0;
  v25 = 0;
  v10 = (unint64_t)(v28 - (_BYTE *)v27) >> 3;
  *(_QWORD *)v23 = v10;
  sub_1017B42C8((uint64_t)a1, a2, a3, (unsigned int *)v23, (uint64_t)&v23[4], (uint64_t)a4, a5, v26);
  v11 = *(double **)&v23[4];
  v12 = ((unint64_t)v24 - *(_QWORD *)&v23[4]) >> 3;
  if ((_DWORD)v10 && (_DWORD)v12 && (_DWORD)v10 == (_DWORD)v12)
  {
    v13 = 0.0;
    if (*(double **)&v23[4] != v24)
    {
      v14 = (double *)v27;
      do
      {
        v15 = *v11++;
        v16 = v15;
        v17 = *v14++;
        v13 = v13 + v16 * v17;
      }
      while (v11 != v24);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      v34 = v10;
      v35 = 1026;
      v36 = v12;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "GPSODOM,Rhythmic,featuresAndModelMisMatch,featureCount,%{public}u,numberOfModelCoeff,%{public}u", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v30[0] = 67240448;
      v30[1] = v10;
      v31 = 1026;
      v32 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM,Rhythmic,featuresAndModelMisMatch,featureCount,%{public}u,numberOfModelCoeff,%{public}u", v30, 14);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "double CLGpsOdometryRhythmicScaled::estimate3DDeltaDistanceByMultipleRegression(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    v19 = sub_1017B3368(a1, a2, a3);
    v13 = -1.0;
    if (v19 >= 0.0)
    {
      *(_DWORD *)(a5 + 728) = 1;
      a1->n128_u64[1] = 0x4039FD70A3D70A3DLL;
      v13 = v19 * 1.12;
    }
  }
  if (*(_QWORD *)&v23[4])
  {
    v24 = *(double **)&v23[4];
    operator delete(*(void **)&v23[4]);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  return v13;
}

void sub_1017B1C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1017B1C7C(uint64_t a1)
{
  unint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  NSObject *v59;
  const char *v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  double v76;
  double v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  double v94;
  double v95;
  long double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  NSObject *v102;
  double v103;
  double v104;
  double v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  double v118;
  double v119;
  double v120;
  const char *v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char **v126;
  void **v127;
  int v128;
  double v129;
  double v130;
  double v131;
  uint64_t v132;
  double v133;
  uint64_t v134;
  double v135;
  double v136;
  double v137;
  int v138;
  double v139;
  __int16 v140;
  double v141;
  __int16 v142;
  double v143;
  __int16 v144;
  long double v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  double v149;
  uint8_t buf[4];
  double v151;
  __int16 v152;
  double v153;
  __int16 v154;
  double v155;
  __int16 v156;
  long double v157;
  __int16 v158;
  uint64_t v159;
  __int16 v160;
  double v161;

  LODWORD(v1) = vcvtpd_u64_f64(*(double *)(a1 + 224) - *(double *)(a1 + 144));
  if ((int)v1 > 1)
  {
    if (v1 < 0x259)
    {
      v8 = *(_QWORD *)(a1 + 232);
      v127 = (void **)(a1 + 232);
      if ((unint64_t)(0x6F96F96F96F96F97 * ((*(_QWORD *)(a1 + 240) - v8) >> 2)) >= 0x259)
      {
        *(_QWORD *)(a1 + 240) = v8;
        *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 256);
      }
      sub_1008356E4(v127, v1);
      v126 = (char **)(a1 + 256);
      sub_1017B5824((void **)(a1 + 256), v1);
      v130 = *(double *)(a1 + 152) - *(double *)(a1 + 72);
      v131 = sub_1010B9110(*(double *)(a1 + 80), *(double *)(a1 + 160));
      v9 = 0;
      v129 = *(double *)(a1 + 168) - *(double *)(a1 + 88);
      v10 = *(double *)(a1 + 144);
      v124 = a1 + 272;
      v125 = a1 + 248;
      v128 = v1 - 2;
      v133 = (double)(int)v1;
      do
      {
        v11 = (double)(v9 + 1);
        v12 = *(double *)(a1 + 72);
        sub_100080DCC(*(double *)(a1 + 80) + v131 * (v11 / v133));
        v136 = v13;
        v14 = v12 + v130 * (v11 / v133);
        v15 = *(double *)(a1 + 88) + v129 * (v11 / v133);
        v10 = v10 + 1.0;
        v16 = *(_QWORD *)(a1 + 192);
        v17 = *(_QWORD *)(a1 + 200);
        v19 = *(_QWORD *)(a1 + 208);
        v18 = *(_QWORD *)(a1 + 216);
        v20 = *(_QWORD *)(a1 + 176);
        v21 = *(_QWORD *)(a1 + 184);
        v22 = *(_QWORD *)(a1 + 240);
        v23 = *(_QWORD *)(a1 + 248);
        v135 = v14;
        v137 = v15;
        if (v22 >= v23)
        {
          v25 = 0x6F96F96F96F96F97 * ((uint64_t)(v22 - (_QWORD)*v127) >> 2);
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) > 0x1A41A41A41A41A4)
            sub_100259694();
          v27 = 0x6F96F96F96F96F97 * ((uint64_t)(v23 - (_QWORD)*v127) >> 2);
          if (2 * v27 > v26)
            v26 = 2 * v27;
          if (v27 >= 0xD20D20D20D20D2)
            v28 = 0x1A41A41A41A41A4;
          else
            v28 = v26;
          if (v28)
            v29 = (char *)sub_10055B5BC(v125, v28);
          else
            v29 = 0;
          v30 = &v29[156 * v25];
          *(_DWORD *)v30 = 0xFFFF;
          *(double *)(v30 + 4) = v135;
          *(double *)(v30 + 12) = v136;
          *(_QWORD *)(v30 + 20) = v20;
          *(double *)(v30 + 28) = v137;
          *(_QWORD *)(v30 + 36) = v21;
          *(_QWORD *)(v30 + 44) = v16;
          *(_QWORD *)(v30 + 52) = v17;
          *(_QWORD *)(v30 + 60) = v19;
          *(_QWORD *)(v30 + 68) = v18;
          *(double *)(v30 + 76) = v10;
          *(_QWORD *)(v30 + 92) = 0x1BFF00000;
          *(_QWORD *)(v30 + 84) = 0;
          *(_OWORD *)(v30 + 132) = xmmword_101CDD254;
          *(_OWORD *)(v30 + 116) = *(_OWORD *)algn_101CDD244;
          *(_OWORD *)(v30 + 100) = xmmword_101CDD234;
          *(_QWORD *)(v30 + 148) = 0;
          v32 = *(char **)(a1 + 232);
          v31 = *(char **)(a1 + 240);
          v33 = v30;
          if (v31 != v32)
          {
            do
            {
              v34 = *(_OWORD *)(v31 - 156);
              *(_OWORD *)(v33 - 140) = *(_OWORD *)(v31 - 140);
              *(_OWORD *)(v33 - 156) = v34;
              v35 = *(_OWORD *)(v31 - 124);
              v36 = *(_OWORD *)(v31 - 108);
              v37 = *(_OWORD *)(v31 - 92);
              *(_OWORD *)(v33 - 76) = *(_OWORD *)(v31 - 76);
              *(_OWORD *)(v33 - 92) = v37;
              *(_OWORD *)(v33 - 108) = v36;
              *(_OWORD *)(v33 - 124) = v35;
              v38 = *(_OWORD *)(v31 - 60);
              v39 = *(_OWORD *)(v31 - 44);
              v40 = *(_OWORD *)(v31 - 28);
              *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
              *(_OWORD *)(v33 - 28) = v40;
              *(_OWORD *)(v33 - 44) = v39;
              *(_OWORD *)(v33 - 60) = v38;
              v33 -= 156;
              v31 -= 156;
            }
            while (v31 != v32);
            v31 = (char *)*v127;
          }
          v24 = v30 + 156;
          *(_QWORD *)(a1 + 232) = v33;
          *(_QWORD *)(a1 + 240) = v30 + 156;
          *(_QWORD *)(a1 + 248) = &v29[156 * v28];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *(_DWORD *)v22 = 0xFFFF;
          *(double *)(v22 + 4) = v14;
          *(double *)(v22 + 12) = v13;
          *(_QWORD *)(v22 + 20) = v20;
          *(double *)(v22 + 28) = v15;
          *(_QWORD *)(v22 + 36) = v21;
          *(_QWORD *)(v22 + 44) = v16;
          *(_QWORD *)(v22 + 52) = v17;
          *(_QWORD *)(v22 + 60) = v19;
          *(_QWORD *)(v22 + 68) = v18;
          *(double *)(v22 + 76) = v10;
          *(_QWORD *)(v22 + 84) = 0;
          *(_QWORD *)(v22 + 92) = 0x1BFF00000;
          *(_QWORD *)(v22 + 148) = 0;
          *(_OWORD *)(v22 + 132) = xmmword_101CDD254;
          *(_OWORD *)(v22 + 116) = *(_OWORD *)algn_101CDD244;
          *(_OWORD *)(v22 + 100) = xmmword_101CDD234;
          v24 = (char *)(v22 + 156);
        }
        *(_QWORD *)(a1 + 240) = v24;
        v41 = *(_QWORD *)(a1 + 8);
        v42 = *(double *)a1 / v133;
        v43 = *(double *)(a1 + 24) + v42 * v11;
        v44 = *(_QWORD *)(a1 + 184);
        v46 = *(_QWORD *)(a1 + 264);
        v45 = *(_QWORD *)(a1 + 272);
        if (v46 >= v45)
        {
          v48 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v46 - (_QWORD)*v126) >> 4);
          v49 = v48 + 1;
          if (v48 + 1 > 0x75075075075075)
            sub_100259694();
          v50 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v45 - (_QWORD)*v126) >> 4);
          if (2 * v50 > v49)
            v49 = 2 * v50;
          if (v50 >= 0x3A83A83A83A83ALL)
            v51 = 0x75075075075075;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (char *)sub_1017C3F8C(v124, v51);
            v54 = v53;
          }
          else
          {
            v52 = 0;
            v54 = 0;
          }
          v55 = &v52[560 * v48];
          *(double *)v55 = v43;
          *((double *)v55 + 1) = v42;
          *((_QWORD *)v55 + 2) = v41;
          *((double *)v55 + 3) = v10;
          memcpy(v55 + 32, &unk_101CDD290, 0x158uLL);
          *((double *)v55 + 47) = v137;
          *((_QWORD *)v55 + 48) = v44;
          *(_OWORD *)(v55 + 488) = xmmword_101CDD458;
          *(_OWORD *)(v55 + 504) = unk_101CDD468;
          *(_OWORD *)(v55 + 520) = xmmword_101CDD478;
          *(_OWORD *)(v55 + 424) = xmmword_101CDD418;
          *(_OWORD *)(v55 + 440) = unk_101CDD428;
          *(_OWORD *)(v55 + 456) = xmmword_101CDD438;
          *(_OWORD *)(v55 + 472) = unk_101CDD448;
          *(_OWORD *)(v55 + 392) = xmmword_101CDD3F8;
          *(_OWORD *)(v55 + 408) = unk_101CDD408;
          *((_DWORD *)v55 + 134) = 1;
          *((_DWORD *)v55 + 139) = 0;
          *(_OWORD *)(v55 + 540) = xmmword_101CDD48C;
          v56 = *(char **)(a1 + 256);
          v57 = *(char **)(a1 + 264);
          v58 = v55;
          if (v57 != v56)
          {
            do
            {
              v57 -= 560;
              v58 -= 560;
              memcpy(v58, v57, 0x230uLL);
            }
            while (v57 != v56);
            v57 = *v126;
          }
          v47 = v55 + 560;
          *(_QWORD *)(a1 + 256) = v58;
          *(_QWORD *)(a1 + 264) = v55 + 560;
          *(_QWORD *)(a1 + 272) = &v52[560 * v54];
          if (v57)
            operator delete(v57);
        }
        else
        {
          *(double *)v46 = v43;
          *(double *)(v46 + 8) = v42;
          *(_QWORD *)(v46 + 16) = v41;
          *(double *)(v46 + 24) = v10;
          memcpy((void *)(v46 + 32), &unk_101CDD290, 0x158uLL);
          *(double *)(v46 + 376) = v137;
          *(_QWORD *)(v46 + 384) = v44;
          *(_OWORD *)(v46 + 488) = xmmword_101CDD458;
          *(_OWORD *)(v46 + 504) = unk_101CDD468;
          *(_OWORD *)(v46 + 520) = xmmword_101CDD478;
          *(_OWORD *)(v46 + 424) = xmmword_101CDD418;
          *(_OWORD *)(v46 + 440) = unk_101CDD428;
          *(_OWORD *)(v46 + 456) = xmmword_101CDD438;
          *(_OWORD *)(v46 + 472) = unk_101CDD448;
          *(_OWORD *)(v46 + 392) = xmmword_101CDD3F8;
          *(_OWORD *)(v46 + 408) = unk_101CDD408;
          *(_DWORD *)(v46 + 536) = 1;
          *(_DWORD *)(v46 + 556) = 0;
          v47 = (char *)(v46 + 560);
          *(_OWORD *)(v46 + 540) = xmmword_101CDD48C;
        }
        *(_QWORD *)(a1 + 264) = v47;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v59 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134284801;
          v151 = v135;
          v152 = 2049;
          v153 = v136;
          v154 = 2049;
          v155 = v137;
          v156 = 2050;
          v157 = v42;
          v158 = 2050;
          v159 = v41;
          v160 = 2050;
          v161 = v43;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,intermediate coordinates,%{private}.7lf,%{private}.7lf,%{private}.3lf,deltaDistance,%{public}.3lf,deltaDistanceUnc,%{public}.3lf,odometer,%{public}.3lf", buf, 0x3Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF508);
          v138 = 134284801;
          v139 = v135;
          v140 = 2049;
          v141 = v136;
          v142 = 2049;
          v143 = v137;
          v144 = 2050;
          v145 = v42;
          v146 = 2050;
          v147 = v41;
          v148 = 2050;
          v149 = v43;
          LODWORD(v123) = 62;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,intermediate coordinates,%{private}.7lf,%{private}.7lf,%{private}.3lf,deltaDistance,%{public}.3lf,deltaDistanceUnc,%{public}.3lf,odometer,%{public}.3lf", &v138, v123);
          v62 = (uint8_t *)v61;
          sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::updateBatchedLocations()", "%s\n", v61);
          if (v62 != buf)
            free(v62);
        }
      }
      while (v9++ != v128);
      v64 = *(_QWORD *)(a1 + 152);
      v63 = *(_QWORD *)(a1 + 160);
      v66 = *(_QWORD *)(a1 + 200);
      v65 = *(_QWORD *)(a1 + 208);
      v68 = *(_QWORD *)(a1 + 216);
      v67 = *(_QWORD *)(a1 + 224);
      v69 = *(_QWORD *)(a1 + 168);
      v70 = *(_QWORD *)(a1 + 176);
      v71 = *(_QWORD *)(a1 + 184);
      v72 = *(_QWORD *)(a1 + 192);
      v73 = *(_QWORD *)(a1 + 240);
      v74 = *(_QWORD *)(a1 + 248);
      if (v73 >= v74)
      {
        v132 = *(_QWORD *)(a1 + 200);
        v134 = *(_QWORD *)(a1 + 208);
        v78 = 0x6F96F96F96F96F97 * ((uint64_t)(v73 - (_QWORD)*v127) >> 2);
        v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) > 0x1A41A41A41A41A4)
          sub_100259694();
        v80 = 0x6F96F96F96F96F97 * ((uint64_t)(v74 - (_QWORD)*v127) >> 2);
        if (2 * v80 > v79)
          v79 = 2 * v80;
        if (v80 >= 0xD20D20D20D20D2)
          v81 = 0x1A41A41A41A41A4;
        else
          v81 = v79;
        if (v81)
          v82 = (char *)sub_10055B5BC(v125, v81);
        else
          v82 = 0;
        v83 = &v82[156 * v78];
        *(_DWORD *)v83 = 0xFFFF;
        *(_QWORD *)(v83 + 4) = v64;
        v84 = &v82[156 * v81];
        *(_QWORD *)(v83 + 12) = v63;
        *(_QWORD *)(v83 + 20) = v70;
        *(_QWORD *)(v83 + 28) = v69;
        *(_QWORD *)(v83 + 36) = v71;
        *(_QWORD *)(v83 + 44) = v72;
        *(_QWORD *)(v83 + 52) = v132;
        *(_QWORD *)(v83 + 60) = v134;
        *(_QWORD *)(v83 + 68) = v68;
        *(_QWORD *)(v83 + 76) = v67;
        *(_QWORD *)(v83 + 92) = 0x1BFF00000;
        *(_QWORD *)(v83 + 84) = 0;
        *(_OWORD *)(v83 + 132) = xmmword_101CDD254;
        *(_OWORD *)(v83 + 116) = *(_OWORD *)algn_101CDD244;
        *(_OWORD *)(v83 + 100) = xmmword_101CDD234;
        *(_QWORD *)(v83 + 148) = 0;
        v75 = v83 + 156;
        v86 = *(char **)(a1 + 232);
        v85 = *(char **)(a1 + 240);
        if (v85 == v86)
        {
          v76 = v135;
          v77 = v137;
        }
        else
        {
          v76 = v135;
          v77 = v137;
          do
          {
            v87 = *(_OWORD *)(v85 - 156);
            *(_OWORD *)(v83 - 140) = *(_OWORD *)(v85 - 140);
            *(_OWORD *)(v83 - 156) = v87;
            v88 = *(_OWORD *)(v85 - 124);
            v89 = *(_OWORD *)(v85 - 108);
            v90 = *(_OWORD *)(v85 - 92);
            *(_OWORD *)(v83 - 76) = *(_OWORD *)(v85 - 76);
            *(_OWORD *)(v83 - 92) = v90;
            *(_OWORD *)(v83 - 108) = v89;
            *(_OWORD *)(v83 - 124) = v88;
            v91 = *(_OWORD *)(v85 - 60);
            v92 = *(_OWORD *)(v85 - 44);
            v93 = *(_OWORD *)(v85 - 28);
            *((_OWORD *)v83 - 1) = *((_OWORD *)v85 - 1);
            *(_OWORD *)(v83 - 28) = v93;
            *(_OWORD *)(v83 - 44) = v92;
            *(_OWORD *)(v83 - 60) = v91;
            v83 -= 156;
            v85 -= 156;
          }
          while (v85 != v86);
          v85 = (char *)*v127;
        }
        *(_QWORD *)(a1 + 232) = v83;
        *(_QWORD *)(a1 + 240) = v75;
        *(_QWORD *)(a1 + 248) = v84;
        if (v85)
          operator delete(v85);
      }
      else
      {
        *(_DWORD *)v73 = 0xFFFF;
        *(_QWORD *)(v73 + 4) = v64;
        *(_QWORD *)(v73 + 12) = v63;
        *(_QWORD *)(v73 + 20) = v70;
        *(_QWORD *)(v73 + 28) = v69;
        *(_QWORD *)(v73 + 36) = v71;
        *(_QWORD *)(v73 + 44) = v72;
        *(_QWORD *)(v73 + 52) = v66;
        *(_QWORD *)(v73 + 60) = v65;
        *(_QWORD *)(v73 + 68) = v68;
        *(_QWORD *)(v73 + 76) = v67;
        *(_QWORD *)(v73 + 84) = 0;
        *(_QWORD *)(v73 + 92) = 0x1BFF00000;
        *(_QWORD *)(v73 + 148) = 0;
        *(_OWORD *)(v73 + 132) = xmmword_101CDD254;
        *(_OWORD *)(v73 + 116) = *(_OWORD *)algn_101CDD244;
        v75 = (char *)(v73 + 156);
        *(_OWORD *)(v73 + 100) = xmmword_101CDD234;
        v76 = v135;
        v77 = v137;
      }
      *(_QWORD *)(a1 + 240) = v75;
      v94 = *(double *)(a1 + 24);
      v95 = *(double *)a1;
      v96 = sub_1010B96D4((double *)(a1 + 32), v76, v136, v77, *(double *)(a1 + 152), *(double *)(a1 + 160), *(double *)(a1 + 168));
      v97 = *(_QWORD *)(a1 + 8);
      v98 = *(_QWORD *)(a1 + 224);
      v99 = *(_QWORD *)(a1 + 168);
      v100 = *(_QWORD *)(a1 + 184);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v101 = v94 + v95;
      v102 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v103 = *(double *)(a1 + 152);
        v104 = *(double *)(a1 + 160);
        v105 = *(double *)(a1 + 168);
        *(_DWORD *)buf = 134284801;
        v151 = v103;
        v152 = 2049;
        v153 = v104;
        v154 = 2049;
        v155 = v105;
        v156 = 2050;
        v157 = v96;
        v158 = 2050;
        v159 = v97;
        v160 = 2050;
        v161 = v101;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,last coordinate,%{private}.7lf,%{private}.7lf,%{private}.3lf,deltaDistance,%{public}.3lf,deltaDistanceUnc,%{public}.3lf,odometer,%{public}.3lf", buf, 0x3Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v118 = *(double *)(a1 + 152);
        v119 = *(double *)(a1 + 160);
        v120 = *(double *)(a1 + 168);
        v138 = 134284801;
        v139 = v118;
        v140 = 2049;
        v141 = v119;
        v142 = 2049;
        v143 = v120;
        v144 = 2050;
        v145 = v96;
        v146 = 2050;
        v147 = v97;
        v148 = 2050;
        v149 = v101;
        LODWORD(v123) = 62;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,last coordinate,%{private}.7lf,%{private}.7lf,%{private}.3lf,deltaDistance,%{public}.3lf,deltaDistanceUnc,%{public}.3lf,odometer,%{public}.3lf", &v138, v123);
        v122 = (uint8_t *)v121;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::updateBatchedLocations()", "%s\n", v121);
        if (v122 != buf)
          free(v122);
      }
      v107 = *(_QWORD *)(a1 + 264);
      v106 = *(_QWORD *)(a1 + 272);
      if (v107 >= v106)
      {
        v109 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v107 - (_QWORD)*v126) >> 4);
        if (v109 + 1 > 0x75075075075075)
          sub_100259694();
        v110 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v106 - (_QWORD)*v126) >> 4);
        v111 = 2 * v110;
        if (2 * v110 <= v109 + 1)
          v111 = v109 + 1;
        if (v110 >= 0x3A83A83A83A83ALL)
          v112 = 0x75075075075075;
        else
          v112 = v111;
        if (v112)
          v113 = (char *)sub_1017C3F8C(v124, v112);
        else
          v113 = 0;
        v114 = &v113[560 * v109];
        *(double *)v114 = v101;
        *((long double *)v114 + 1) = v96;
        v115 = &v113[560 * v112];
        *((_QWORD *)v114 + 2) = v97;
        *((_QWORD *)v114 + 3) = v98;
        memcpy(v114 + 32, &unk_101CDD290, 0x158uLL);
        *((_QWORD *)v114 + 47) = v99;
        *((_QWORD *)v114 + 48) = v100;
        *(_OWORD *)(v114 + 488) = xmmword_101CDD458;
        *(_OWORD *)(v114 + 504) = unk_101CDD468;
        *(_OWORD *)(v114 + 520) = xmmword_101CDD478;
        *(_OWORD *)(v114 + 424) = xmmword_101CDD418;
        *(_OWORD *)(v114 + 440) = unk_101CDD428;
        *(_OWORD *)(v114 + 456) = xmmword_101CDD438;
        *(_OWORD *)(v114 + 472) = unk_101CDD448;
        *(_OWORD *)(v114 + 392) = xmmword_101CDD3F8;
        *(_OWORD *)(v114 + 408) = unk_101CDD408;
        *((_DWORD *)v114 + 134) = 4;
        *((_DWORD *)v114 + 139) = 0;
        *(_OWORD *)(v114 + 540) = xmmword_101CDD48C;
        v108 = v114 + 560;
        v117 = *(char **)(a1 + 256);
        v116 = *(char **)(a1 + 264);
        if (v116 != v117)
        {
          do
          {
            v116 -= 560;
            v114 -= 560;
            memcpy(v114, v116, 0x230uLL);
          }
          while (v116 != v117);
          v116 = *v126;
        }
        *(_QWORD *)(a1 + 256) = v114;
        *(_QWORD *)(a1 + 264) = v108;
        *(_QWORD *)(a1 + 272) = v115;
        if (v116)
          operator delete(v116);
      }
      else
      {
        *(double *)v107 = v101;
        *(long double *)(v107 + 8) = v96;
        *(_QWORD *)(v107 + 16) = v97;
        *(_QWORD *)(v107 + 24) = v98;
        memcpy((void *)(v107 + 32), &unk_101CDD290, 0x158uLL);
        *(_QWORD *)(v107 + 376) = v99;
        *(_QWORD *)(v107 + 384) = v100;
        *(_OWORD *)(v107 + 488) = xmmword_101CDD458;
        *(_OWORD *)(v107 + 504) = unk_101CDD468;
        *(_OWORD *)(v107 + 520) = xmmword_101CDD478;
        *(_OWORD *)(v107 + 424) = xmmword_101CDD418;
        *(_OWORD *)(v107 + 440) = unk_101CDD428;
        *(_OWORD *)(v107 + 456) = xmmword_101CDD438;
        *(_OWORD *)(v107 + 472) = unk_101CDD448;
        *(_OWORD *)(v107 + 392) = xmmword_101CDD3F8;
        *(_OWORD *)(v107 + 408) = unk_101CDD408;
        *(_DWORD *)(v107 + 536) = 4;
        *(_DWORD *)(v107 + 556) = 0;
        v108 = (char *)(v107 + 560);
        *(_OWORD *)(v107 + 540) = xmmword_101CDD48C;
      }
      *(_QWORD *)(a1 + 264) = v108;
    }
    else
    {
      sub_1017B0D08((__n128 *)a1);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        LODWORD(v151) = v1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GPSODOM,Rhythmic,number of updates too high,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v138 = 67240192;
        LODWORD(v139) = v1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GPSODOM,Rhythmic,number of updates too high,%{public}d", &v138, 8);
        v4 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::updateBatchedLocations()", "%s\n", v7);
        goto LABEL_19;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v151) = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,invalid number of updates,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v138 = 67240192;
      LODWORD(v139) = v1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,invalid number of updates,%{public}d", &v138, 8);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::updateBatchedLocations()", "%s\n", v3);
LABEL_19:
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_1017B2CD8(uint64_t a1)
{
  *(_QWORD *)(a1 + 280) = 0xBFF0000000000000;
  if (sub_1017B1900((double *)(a1 + 72)) && sub_1017B1900((double *)(a1 + 152)))
    *(long double *)(a1 + 280) = sub_10011E634((double *)(a1 + 32), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 152), *(double *)(a1 + 160), 0.0);
}

void sub_1017B2D2C(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  const char *v53;
  uint8_t *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  uint8_t buf[4];
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    v4 = a1[5];
    v5 = a1[2];
    v6 = a1[25];
    v7 = a1[22];
    v8 = a1[45];
    v9 = a1[42];
    v10 = a1[65];
    v11 = a1[62];
    v12 = *((_DWORD *)a1 + 182);
    v13 = *((_DWORD *)a1 + 183);
    *(_DWORD *)buf = 134351616;
    v79 = v3;
    v80 = 2050;
    v81 = v4;
    v82 = 2050;
    v83 = v5;
    v84 = 2050;
    v85 = v6;
    v86 = 2050;
    v87 = v7;
    v88 = 2050;
    v89 = v8;
    v90 = 2050;
    v91 = v9;
    v92 = 2050;
    v93 = v10;
    v94 = 2050;
    v95 = v11;
    v96 = 1026;
    v97 = v12;
    v98 = 1026;
    v99 = v13;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,Scaled,analytics,featureValInfo,startMachContinuousTime,%{public}.1lf,distAvgM,%{public}.1lf,distMaxM,%{public}.1lf,heightAvgM,%{public}.1lf,heightMaxM,%{public}.1lf,courseAvgRad,%{public}.1lf,courseMaxRad,%{public}.1lf,straightMetricValAvg,%{public}.1lf,straightMetricValMax,%{public}.1lf,usedRegressionModel,%{public}d,usedFeatures,%{public}d", buf, 0x68u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v27 = *a1;
    v28 = a1[5];
    v29 = a1[2];
    v30 = a1[25];
    v31 = a1[22];
    v32 = a1[45];
    v33 = a1[42];
    v34 = a1[65];
    v35 = a1[62];
    v36 = *((_DWORD *)a1 + 182);
    v37 = *((_DWORD *)a1 + 183);
    v56 = 134351616;
    v57 = v27;
    v58 = 2050;
    v59 = v28;
    v60 = 2050;
    v61 = v29;
    v62 = 2050;
    v63 = v30;
    v64 = 2050;
    v65 = v31;
    v66 = 2050;
    v67 = v32;
    v68 = 2050;
    v69 = v33;
    v70 = 2050;
    v71 = v34;
    v72 = 2050;
    v73 = v35;
    v74 = 1026;
    v75 = v36;
    v76 = 1026;
    v77 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,Scaled,analytics,featureValInfo,startMachContinuousTime,%{public}.1lf,distAvgM,%{public}.1lf,distMaxM,%{public}.1lf,heightAvgM,%{public}.1lf,heightMaxM,%{public}.1lf,courseAvgRad,%{public}.1lf,courseMaxRad,%{public}.1lf,straightMetricValAvg,%{public}.1lf,straightMetricValMax,%{public}.1lf,usedRegressionModel,%{public}d,usedFeatures,%{public}d", &v56, 104);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics::debugLog()", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v15 = a1[15];
    v16 = a1[12];
    v17 = a1[35];
    v18 = a1[32];
    v19 = a1[55];
    v20 = a1[52];
    v21 = a1[75];
    v22 = a1[72];
    *(_DWORD *)buf = 134350848;
    v79 = v15;
    v80 = 2050;
    v81 = v16;
    v82 = 2050;
    v83 = v17;
    v84 = 2050;
    v85 = v18;
    v86 = 2050;
    v87 = v19;
    v88 = 2050;
    v89 = v20;
    v90 = 2050;
    v91 = v21;
    v92 = 2050;
    v93 = v22;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,Scaled,analytics,featureUncInfo,distUncAvgM,%{public}.1lf,distUncMaxM,%{public}.1lf,heightUncAvgM,%{public}.1lf,heightUncMaxM,%{public}.1lf,courseUncAvgRad,%{public}.1lf,courseUncMaxRad,%{public}.1lf,straightMetricUncAvg,%{public}.1lf,straightMetricUncMax,%{public}.1lf", buf, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v40 = a1[15];
    v41 = a1[12];
    v42 = a1[35];
    v43 = a1[32];
    v44 = a1[55];
    v45 = a1[52];
    v46 = a1[75];
    v47 = a1[72];
    v56 = 134350848;
    v57 = v40;
    v58 = 2050;
    v59 = v41;
    v60 = 2050;
    v61 = v42;
    v62 = 2050;
    v63 = v43;
    v64 = 2050;
    v65 = v44;
    v66 = 2050;
    v67 = v45;
    v68 = 2050;
    v69 = v46;
    v70 = 2050;
    v71 = v47;
    LODWORD(v55) = 82;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,Scaled,analytics,featureUncInfo,distUncAvgM,%{public}.1lf,distUncMaxM,%{public}.1lf,heightUncAvgM,%{public}.1lf,heightUncMaxM,%{public}.1lf,courseUncAvgRad,%{public}.1lf,courseUncMaxRad,%{public}.1lf,straightMetricUncAvg,%{public}.1lf,straightMetricUncMax,%{public}.1lf", &v56, v55);
    v49 = (uint8_t *)v48;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics::debugLog()", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v23 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v24 = a1[85];
    v25 = a1[82];
    v26 = *((_DWORD *)a1 + 184);
    *(_DWORD *)buf = 134349568;
    v79 = v24;
    v80 = 2050;
    v81 = v25;
    v82 = 1026;
    LODWORD(v83) = v26;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,Scaled,analytics,general,processingTimeAvg,%{public}.1lf,processingTimeMax,%{public}.1lf,resetCount,%{public}d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v50 = a1[85];
    v51 = a1[82];
    v52 = *((_DWORD *)a1 + 184);
    v56 = 134349568;
    v57 = v50;
    v58 = 2050;
    v59 = v51;
    v60 = 1026;
    LODWORD(v61) = v52;
    LODWORD(v55) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,Scaled,analytics,general,processingTimeAvg,%{public}.1lf,processingTimeMax,%{public}.1lf,resetCount,%{public}d", &v56, v55);
    v54 = (uint8_t *)v53;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics::debugLog()", "%s\n", v53);
    if (v54 != buf)
      free(v54);
  }
}

double sub_1017B3368(__n128 *a1, double *a2, double *a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  int v13;
  double v14;
  uint8_t buf[4];
  double v16;

  v4 = sub_1010B96D4(a1[2].n128_f64, *a2, a2[1], a2[2], *a3, a3[1], a3[2]);
  v5 = a1[9].n128_f64[0];
  v6 = -1.0;
  if (v5 >= 0.0)
  {
    v7 = a1[14].n128_f64[0];
    if (v7 >= 0.0)
    {
      if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v8 = v7 - v5, v8 >= 0.0)
        && v4 <= v8 / 120.0 * 3218.4)
      {
        return v4;
      }
      else
      {
        sub_1017B0D08(a1);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v9 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134349056;
          v16 = v4;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GPSODOM,Rhythmic,calculated 3D distance is invalid,%{public}.2lf", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF508);
          v13 = 134349056;
          v14 = v4;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM,Rhythmic,calculated 3D distance is invalid,%{public}.2lf", &v13, 12);
          v11 = (uint8_t *)v10;
          sub_100512490("Generic", 1, 0, 2, "double CLGpsOdometryRhythmicScaled::calculate3DIntermittentDistance(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &)", "%s\n", v10);
          if (v11 != buf)
            free(v11);
        }
      }
    }
  }
  return v6;
}

void sub_1017B3598(__n128 *a1, uint64_t a2, uint64_t a3, double *a4, double **a5, uint64_t a6, double *a7)
{
  double v14;
  double v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  unint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  double *v28;
  double *v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  double *v35;
  double *v36;
  double *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  double *v43;
  double *v44;
  uint64_t v45;
  double v46;
  BOOL v47;
  _BOOL4 v48;
  double v49;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  unint64_t v58;
  double *v59;
  double *v60;
  NSObject *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  NSObject *v83;
  double v84;
  double v85;
  const char *v86;
  uint8_t *v87;
  unint64_t v88;
  double *v89;
  double *v90;
  double *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  double *v97;
  double *v98;
  uint64_t v99;
  NSObject *v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  double *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  double *v116;
  double *v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  const char *v128;
  uint8_t *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  const char *v134;
  uint8_t *v135;
  uint64_t v136;
  double v137;
  double v138;
  int v139;
  double v140;
  __int16 v141;
  double v142;
  __int16 v143;
  double v144;
  __int16 v145;
  double v146;
  __int16 v147;
  double v148;
  __int16 v149;
  double v150;
  __int16 v151;
  double v152;
  __int16 v153;
  double v154;
  __int16 v155;
  uint64_t v156;
  __int16 v157;
  double v158;
  __int16 v159;
  uint64_t v160;
  __int16 v161;
  uint64_t v162;
  __int16 v163;
  double v164;
  uint8_t buf[4];
  double v166;
  __int16 v167;
  double v168;
  __int16 v169;
  double v170;
  __int16 v171;
  double v172;
  __int16 v173;
  double v174;
  __int16 v175;
  double v176;
  __int16 v177;
  double v178;
  __int16 v179;
  double v180;
  __int16 v181;
  uint64_t v182;
  __int16 v183;
  double v184;
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  uint64_t v188;
  __int16 v189;
  double v190;

  v14 = sub_1017B3368(a1, (double *)a2, (double *)a3);
  sub_100785E0C((char *)(a6 + 8), v14);
  v15 = hypot(*(long double *)(a2 + 24), *(long double *)(a3 + 24));
  sub_100785E0C((char *)(a6 + 88), v15);
  if (v14 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "GPSODOM,Rhythmic,Invalid 3D Distance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      LOWORD(v139) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM,Rhythmic,Invalid 3D Distance", &v139, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLGpsOdometryRhythmicScaled::extractFeaturesForMultipleRegression(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, std::vector<double> &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, double &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    return;
  }
  v19 = (unint64_t)a5[2];
  v20 = a5[1];
  if ((unint64_t)v20 >= v19)
  {
    v22 = *a5;
    v23 = v20 - *a5;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61)
      goto LABEL_158;
    v25 = v19 - (_QWORD)v22;
    if (v25 >> 2 > v24)
      v24 = v25 >> 2;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      v27 = (char *)sub_10025E6A0((uint64_t)(a5 + 2), v26);
      v22 = *a5;
      v20 = a5[1];
    }
    else
    {
      v27 = 0;
    }
    v28 = (double *)&v27[8 * v23];
    v29 = (double *)&v27[8 * v26];
    *v28 = v14;
    v21 = v28 + 1;
    while (v20 != v22)
    {
      v30 = *((_QWORD *)v20-- - 1);
      *((_QWORD *)v28-- - 1) = v30;
    }
    *a5 = v28;
    a5[1] = v21;
    a5[2] = v29;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v20 = v14;
    v21 = v20 + 1;
  }
  a5[1] = v21;
  v31 = vabdd_f64(*(double *)(a3 + 16), *(double *)(a2 + 16));
  if (v31 <= 8848.86)
    v32 = v31;
  else
    v32 = 8848.86;
  sub_100785E0C((char *)(a6 + 168), v32);
  v33 = hypot(*(long double *)(a2 + 32), *(long double *)(a3 + 32));
  sub_100785E0C((char *)(a6 + 248), v33);
  v35 = a5[1];
  v34 = (unint64_t)a5[2];
  if ((unint64_t)v35 >= v34)
  {
    v37 = *a5;
    v38 = v35 - *a5;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 61)
      goto LABEL_158;
    v40 = v34 - (_QWORD)v37;
    if (v40 >> 2 > v39)
      v39 = v40 >> 2;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    if (v41)
    {
      v42 = (char *)sub_10025E6A0((uint64_t)(a5 + 2), v41);
      v37 = *a5;
      v35 = a5[1];
    }
    else
    {
      v42 = 0;
    }
    v43 = (double *)&v42[8 * v38];
    v44 = (double *)&v42[8 * v41];
    *v43 = v32;
    v36 = v43 + 1;
    while (v35 != v37)
    {
      v45 = *((_QWORD *)v35-- - 1);
      *((_QWORD *)v43-- - 1) = v45;
    }
    *a5 = v43;
    a5[1] = v36;
    a5[2] = v44;
    if (v37)
      operator delete(v37);
  }
  else
  {
    *v35 = v32;
    v36 = v35 + 1;
  }
  a5[1] = v36;
  v46 = a4[1];
  if ((*(_QWORD *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v46 > 0.15 ? (v47 = v46 > 1.0) : (v47 = 1), v47))
  {
    v48 = 0;
  }
  else
  {
    v49 = a4[2];
    v48 = v49 > 0.25 && ((_QWORD)a4[2] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (v49 > 1.0)
      v48 = 0;
  }
  a1[21].n128_u8[8] = v48;
  v51 = *(double *)(a2 + 56);
  if ((*(_QWORD *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v52 = *(double *)(a3 + 56), (*(_QWORD *)&v52 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || v51 < 0.0
    || v52 < 0.0
    || (v53 = *(double *)(a2 + 64), v53 <= 0.0)
    || (v54 = *(double *)(a3 + 64), v54 <= 0.0)
    || v48 && (v53 >= 180.0 || v54 >= 180.0))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v61 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v62 = a1[8].n128_u64[0];
      v63 = a1[8].n128_u64[1];
      v64 = a1[13].n128_u64[0];
      v65 = a1[13].n128_u64[1];
      *(_DWORD *)buf = 134284289;
      v166 = *(double *)&v62;
      v167 = 2049;
      v168 = *(double *)&v63;
      v169 = 2049;
      v170 = *(double *)&v64;
      v171 = 2049;
      v172 = *(double *)&v65;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,CourseError,prevPosCourse,%{private}.2lf,prevPosCourseUnc,%{private}.2lf,latestPosCourse,%{private}.2lf,latestPosCourseUnc,%{private}.2lf", buf, 0x2Au);
    }
    v56 = -1.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v130 = a1[8].n128_u64[0];
      v131 = a1[8].n128_u64[1];
      v132 = a1[13].n128_u64[0];
      v133 = a1[13].n128_u64[1];
      v139 = 134284289;
      v140 = *(double *)&v130;
      v141 = 2049;
      v142 = *(double *)&v131;
      v143 = 2049;
      v144 = *(double *)&v132;
      v145 = 2049;
      v146 = *(double *)&v133;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,CourseError,prevPosCourse,%{private}.2lf,prevPosCourseUnc,%{private}.2lf,latestPosCourse,%{private}.2lf,latestPosCourseUnc,%{private}.2lf", &v139, 42);
      v135 = (uint8_t *)v134;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::extractFeaturesForMultipleRegression(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, std::vector<double> &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, double &)", "%s\n", v134);
      if (v135 != buf)
        free(v135);
    }
    goto LABEL_81;
  }
  v55 = fmod(v52 - v51, 360.0);
  if (v55 < 0.0)
    v55 = v55 + 360.0;
  if (v55 > 180.0)
    v55 = v55 + -360.0;
  v56 = fabs(v55) * 0.0174532925;
  sub_100785E0C((char *)(a6 + 328), v56);
  v57 = hypot(*(long double *)(a2 + 64), *(long double *)(a3 + 64));
  sub_100785E0C((char *)(a6 + 408), v57);
  v59 = a5[1];
  v58 = (unint64_t)a5[2];
  if ((unint64_t)v59 >= v58)
  {
    v110 = *a5;
    v111 = v59 - *a5;
    v112 = v111 + 1;
    if (!((unint64_t)(v111 + 1) >> 61))
    {
      v113 = v58 - (_QWORD)v110;
      if (v113 >> 2 > v112)
        v112 = v113 >> 2;
      if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
        v114 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v114 = v112;
      if (v114)
      {
        v115 = (char *)sub_10025E6A0((uint64_t)(a5 + 2), v114);
        v110 = *a5;
        v59 = a5[1];
      }
      else
      {
        v115 = 0;
      }
      v116 = (double *)&v115[8 * v111];
      v117 = (double *)&v115[8 * v114];
      *v116 = v56;
      v60 = v116 + 1;
      while (v59 != v110)
      {
        v118 = *((_QWORD *)v59-- - 1);
        *((_QWORD *)v116-- - 1) = v118;
      }
      *a5 = v116;
      a5[1] = v60;
      a5[2] = v117;
      if (v110)
        operator delete(v110);
      goto LABEL_149;
    }
LABEL_158:
    sub_100259694();
  }
  *v59 = v56;
  v60 = v59 + 1;
LABEL_149:
  a5[1] = v60;
LABEL_81:
  if (a1[21].n128_u8[8])
  {
    v66 = sub_10011E634(a1[2].n128_f64, *(double *)a2, *(double *)(a2 + 8), *(double *)a3, *(double *)(a3 + 8), *(double *)(a3 + 16));
    v67 = a4[1];
    if (v67 >= 0.1)
      v68 = a4[1];
    else
      v68 = 0.1;
    sub_100785E0C((char *)(a6 + 488), v67);
    sub_100785E0C((char *)(a6 + 568), a4[2]);
    v69 = *(double *)(a2 + 40);
    v70 = v66 / v68;
    if (v69 < 0.0
      || (v71 = *(double *)(a3 + 40), v71 < 0.0)
      || (v72 = *(double *)(a2 + 48), v72 <= 0.0)
      || (v73 = *(double *)(a3 + 48), v73 >= 1.0)
      || v72 >= 1.0
      || v73 <= 0.0
      || (v74 = *(double *)(a2 + 72), v74 <= 0.0)
      || (v75 = *(double *)(a3 + 72), v75 <= 0.0))
    {
      v89 = a5[1];
      v88 = (unint64_t)a5[2];
      if ((unint64_t)v89 >= v88)
      {
        v91 = *a5;
        v92 = v89 - *a5;
        v93 = v92 + 1;
        if ((unint64_t)(v92 + 1) >> 61)
          sub_100259694();
        v94 = v88 - (_QWORD)v91;
        if (v94 >> 2 > v93)
          v93 = v94 >> 2;
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
          v95 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v95 = v93;
        if (v95)
        {
          v96 = (char *)sub_10025E6A0((uint64_t)(a5 + 2), v95);
          v91 = *a5;
          v89 = a5[1];
        }
        else
        {
          v96 = 0;
        }
        v97 = (double *)&v96[8 * v92];
        v98 = (double *)&v96[8 * v95];
        *v97 = v70;
        v90 = v97 + 1;
        while (v89 != v91)
        {
          v99 = *((_QWORD *)v89-- - 1);
          *((_QWORD *)v97-- - 1) = v99;
        }
        *a5 = v97;
        a5[1] = v90;
        a5[2] = v98;
        if (v91)
          operator delete(v91);
      }
      else
      {
        *v89 = v70;
        v90 = v89 + 1;
      }
      a5[1] = v90;
    }
    else
    {
      v76 = sqrt(v73 * v73 + v72 * v72);
      v77 = vabdd_f64(v75, v74);
      v78 = fabs(v69 + v71) * 0.5;
      if (v78 >= 1.1176)
        v79 = v78;
      else
        v79 = 1.1176;
      v80 = (v79 + v76) * v77;
      v81 = (v79 - v76) * v77;
      if (v80 >= v70)
        v82 = v70;
      else
        v82 = (v79 + v76) * v77;
      if (v82 < v81)
        v82 = (v79 - v76) * v77;
      v137 = v77;
      v138 = v82;
      *a7 = vabdd_f64(v70, v82);
      sub_1017B5088((uint64_t)a5, &v138);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v83 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v84 = *a7;
        *(_DWORD *)buf = 134350848;
        v166 = v70;
        v167 = 2050;
        v168 = v79;
        v169 = 2050;
        v170 = v76;
        v171 = 2050;
        v172 = v137;
        v173 = 2050;
        v174 = v81;
        v175 = 2050;
        v176 = v80;
        v177 = 2050;
        v178 = v138;
        v179 = 2050;
        v180 = v84;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,SpeedBasedFilter,avgSpeedBetweenPrevAndLatestPos_mps,%{public}.2lf,propagatedSpeedUnc_mps,%{public}.2lf,dtBetweenPrevAndLatestPos_s,%{public}.2lf,lowerThresholdForSMRD_m,%{public}.2lf,upperThresholdForSMRD_m,%{public}.2lf,SMRD_m,%{public}.2lf,SMRDFiltered_m,%{public}.2lf,absSMRDDistanceChangeByFilter_m,%{public}.2lf", buf, 0x52u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v85 = *a7;
        v139 = 134350848;
        v140 = v70;
        v141 = 2050;
        v142 = v79;
        v143 = 2050;
        v144 = v76;
        v145 = 2050;
        v146 = v137;
        v147 = 2050;
        v148 = v81;
        v149 = 2050;
        v150 = v80;
        v151 = 2050;
        v152 = v138;
        v153 = 2050;
        v154 = v85;
        LODWORD(v136) = 82;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,SpeedBasedFilter,avgSpeedBetweenPrevAndLatestPos_mps,%{public}.2lf,propagatedSpeedUnc_mps,%{public}.2lf,dtBetweenPrevAndLatestPos_s,%{public}.2lf,lowerThresholdForSMRD_m,%{public}.2lf,upperThresholdForSMRD_m,%{public}.2lf,SMRD_m,%{public}.2lf,SMRDFiltered_m,%{public}.2lf,absSMRDDistanceChangeByFilter_m,%{public}.2lf", &v139, v136);
        v87 = (uint8_t *)v86;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::extractFeaturesForMultipleRegression(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, std::vector<double> &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, double &)", "%s\n", v86);
        if (v87 != buf)
          free(v87);
      }
    }
  }
  else
  {
    v70 = -1.0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v100 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v101 = *(double *)(a2 + 24);
    v102 = *(double *)(a2 + 32);
    v103 = *(double *)(a3 + 24);
    v104 = *(double *)(a3 + 32);
    v105 = *(double *)(a2 + 64);
    v106 = *(_QWORD *)(a3 + 64);
    v108 = *((_QWORD *)a4 + 1);
    v107 = *((_QWORD *)a4 + 2);
    v109 = *a4;
    *(_DWORD *)buf = 134352128;
    v166 = v14;
    v167 = 2050;
    v168 = v101;
    v169 = 2050;
    v170 = v103;
    v171 = 2050;
    v172 = v32;
    v173 = 2050;
    v174 = v102;
    v175 = 2050;
    v176 = v104;
    v177 = 2050;
    v178 = v56;
    v179 = 2050;
    v180 = v105;
    v181 = 2050;
    v182 = v106;
    v183 = 2050;
    v184 = v70;
    v185 = 2050;
    v186 = v108;
    v187 = 2050;
    v188 = v107;
    v189 = 2050;
    v190 = v109;
    _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,featureInfo,intermittent3DDist,%{public}.2lf,prevPosHorUnc,%{public}.2lf,latestPosHorUnc,%{public}.2lf,absHeightChange,%{public}.2lf,prevPosAltUnc,%{public}.2lf,latestPosAltUnc,%{public}.2lf,courseChange,%{public}.3lf,prevCourseUnc,%{public}.2lf,latestCourseUnc,%{public}.2lf,SMRD,%{public}.2lf,straightnessMetric,%{public}.2lf,confidence,%{public}.2lf,timestamp,%{public}.2lf", buf, 0x84u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v119 = *(double *)(a2 + 24);
    v120 = *(double *)(a2 + 32);
    v121 = *(double *)(a3 + 24);
    v122 = *(double *)(a3 + 32);
    v123 = *(double *)(a2 + 64);
    v124 = *(_QWORD *)(a3 + 64);
    v126 = *((_QWORD *)a4 + 1);
    v125 = *((_QWORD *)a4 + 2);
    v127 = *a4;
    v139 = 134352128;
    v140 = v14;
    v141 = 2050;
    v142 = v119;
    v143 = 2050;
    v144 = v121;
    v145 = 2050;
    v146 = v32;
    v147 = 2050;
    v148 = v120;
    v149 = 2050;
    v150 = v122;
    v151 = 2050;
    v152 = v56;
    v153 = 2050;
    v154 = v123;
    v155 = 2050;
    v156 = v124;
    v157 = 2050;
    v158 = v70;
    v159 = 2050;
    v160 = v126;
    v161 = 2050;
    v162 = v125;
    v163 = 2050;
    v164 = v127;
    LODWORD(v136) = 132;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,featureInfo,intermittent3DDist,%{public}.2lf,prevPosHorUnc,%{public}.2lf,latestPosHorUnc,%{public}.2lf,absHeightChange,%{public}.2lf,prevPosAltUnc,%{public}.2lf,latestPosAltUnc,%{public}.2lf,courseChange,%{public}.3lf,prevCourseUnc,%{public}.2lf,latestCourseUnc,%{public}.2lf,SMRD,%{public}.2lf,straightnessMetric,%{public}.2lf,confidence,%{public}.2lf,timestamp,%{public}.2lf", &v139, v136);
    v129 = (uint8_t *)v128;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::extractFeaturesForMultipleRegression(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, std::vector<double> &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, double &)", "%s\n", v128);
    if (v129 != buf)
      free(v129);
  }
  *(_DWORD *)(a6 + 732) = (unint64_t)((char *)a5[1] - (char *)*a5) >> 3;
}

void sub_1017B42C8(uint64_t a1, double *a2, double *a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, long double a8)
{
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v20;
  uint64_t *v21;
  double *v22;
  double *v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double v29;
  unsigned int v30;
  int v31;
  int v32;
  double v33;
  double v34;
  int v35;
  int v36;
  NSObject *v37;
  int v38;
  int v39;
  uint64_t v40;
  double v41;
  double v42;
  unint64_t v43;
  double *v44;
  double *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  double *v63;
  NSObject *v64;
  int v65;
  int v66;
  const char *v67;
  uint8_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  double *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint8_t *v81;
  const char *v82;
  uint8_t *v83;
  int v84;
  const char *v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  void *__p;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  int v96;
  int v97;
  __int16 v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  void *v103;
  double *v104;
  uint64_t v105;
  uint8_t buf[4];
  int v107;
  __int16 v108;
  uint64_t v109;

  if (*a4 - 5 <= 0xFFFFFFFC)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v10 = *a4;
      *(_DWORD *)buf = 67240192;
      v107 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "GPSODOM,Rhythmic,Invalid Feature Count,%{public}u", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v11 = *a4;
      LODWORD(v103) = 67240192;
      HIDWORD(v103) = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM,Rhythmic,Invalid Feature Count,%{public}u", &v103, 8);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLGpsOdometryRhythmicScaled::getRegressionModelCoefficients(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const unsigned int &, std::vector<double> &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, const double)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return;
  }
  if (*(_QWORD *)(a1 + 288) == *(_QWORD *)(a1 + 296))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,modelCoefficient is empty", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      LOWORD(v103) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,modelCoefficient is empty", &v103, 2);
      v83 = (uint8_t *)v82;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::getRegressionModelCoefficients(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const unsigned int &, std::vector<double> &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, const double)", "%s\n", v82);
      if (v83 != buf)
        free(v83);
    }
    sub_100B2388C(a1 + 352);
    sub_1017B516C(a1);
  }
  v21 = (uint64_t *)(a1 + 288);
  v103 = 0;
  v104 = 0;
  v105 = 0;
  if (&v103 == (void **)(a1 + 288))
  {
    v22 = 0;
  }
  else
  {
    sub_10034F2B0((char *)&v103, *(char **)(a1 + 288), *(_QWORD *)(a1 + 296), (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3);
    v22 = (double *)v103;
    v23 = v104;
    if (v103 != v104)
    {
      v24 = (double *)v103;
      do
      {
        *v24 = *v24 * *v24;
        ++v24;
      }
      while (v24 != v23);
    }
  }
  v25 = a3[3] * a3[3] + a2[3] * a2[3];
  v26 = a3[4] * a3[4] + a2[4] * a2[4];
  v27 = *(double *)(a6 + 16) * *(double *)(a6 + 16);
  v28 = *a4;
  if (*a4 == 2)
  {
    v35 = *(unsigned __int8 *)(a1 + 344);
    v30 = 2 * v35;
    if (*(_BYTE *)(a1 + 344))
      v36 = 3;
    else
      v36 = 2;
    *(_DWORD *)(a7 + 728) = v36;
    if (v35)
    {
      v33 = v22[3] * 7.18 / v27 + 2.1025 + v22[2] * v25;
      v34 = 3.967;
    }
    else
    {
      v33 = v25 * *v22 + 495.0625 + v22[1] * v26;
      v34 = 1.229;
    }
    goto LABEL_49;
  }
  v29 = (a3[8] * a3[8] + a2[8] * a2[8]) * 0.0174532925 * 0.0174532925;
  if (v28 == 3)
  {
    v31 = *(unsigned __int8 *)(a1 + 344);
    if (*(_BYTE *)(a1 + 344))
      v30 = 7;
    else
      v30 = 4;
    if (*(_BYTE *)(a1 + 344))
      v32 = 5;
    else
      v32 = 4;
    *(_DWORD *)(a7 + 728) = v32;
    if (v31)
    {
      v33 = v22[9] * 7.18 / v27 + 1.8496 + v22[7] * v25 + v22[8] * v26;
      v34 = 3.518;
    }
    else
    {
      v33 = v25 * v22[4] + 318.6225 + v22[5] * v26 + v22[6] * v29;
      v34 = 0.951;
    }
LABEL_49:
    *(double *)(a1 + 8) = sqrt(v33) * v34;
    goto LABEL_50;
  }
  if (v28 == 4)
  {
    *(_DWORD *)(a7 + 728) = 6;
    *(double *)(a1 + 8) = sqrt(v22[13] * 7.18 / v27 + 1.8225 + v22[10] * v25 + v22[11] * v26 + v22[12] * v29) * 3.298;
    v30 = 10;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v37 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v38 = *a4;
      *(_DWORD *)buf = 67174657;
      v107 = v38;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,InvalidFeatureCount,%{private}u", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v84 = *a4;
      LODWORD(v100) = 67174657;
      HIDWORD(v100) = v84;
      LODWORD(v87) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,InvalidFeatureCount,%{private}u", &v100, v87);
      v86 = (uint8_t *)v85;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::getRegressionModelCoefficients(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const unsigned int &, std::vector<double> &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, const double)", "%s\n", v85);
      if (v86 != buf)
        free(v86);
    }
    v30 = -1;
  }
LABEL_50:
  if (a8 > 0.0 && *(_BYTE *)(a1 + 344))
    *(long double *)(a1 + 8) = hypot(*(long double *)(a1 + 8), a8);
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  __p = 0;
  v91 = 0;
  v92 = 0;
  sub_1017B566C(a1, (uint64_t)&v100, (uint64_t)&v93, (uint64_t)&__p);
  sub_100407BF8((void **)a5, *a4);
  v39 = *a4;
  if (v30 < *a4 + v30)
  {
    v40 = v30;
    v88 = a5 + 16;
    do
    {
      if (*(_BYTE *)(a1 + 344))
      {
        v41 = (1.0 - *(double *)(a6 + 16)) / 0.15;
        switch(v39)
        {
          case 4:
            v42 = *(double *)(*v21 + 8 * v40) + *((double *)__p + v40 - v30) * v41;
            v44 = *(double **)(a5 + 8);
            v62 = *(_QWORD *)(a5 + 16);
            if ((unint64_t)v44 >= v62)
            {
              v45 = *(double **)a5;
              v69 = ((uint64_t)v44 - *(_QWORD *)a5) >> 3;
              v70 = v69 + 1;
              if ((unint64_t)(v69 + 1) >> 61)
                sub_100259694();
              v71 = v62 - (_QWORD)v45;
              if (v71 >> 2 > v70)
                v70 = v71 >> 2;
              if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v70;
              if (v49)
              {
                v50 = (char *)sub_10025E6A0(v88, v49);
                v45 = *(double **)a5;
                v44 = *(double **)(a5 + 8);
              }
              else
              {
                v50 = 0;
              }
              v72 = (double *)&v50[8 * v69];
              *v72 = v42;
              v63 = v72 + 1;
              while (v44 != v45)
              {
                v75 = *((_QWORD *)v44-- - 1);
                *((_QWORD *)v72-- - 1) = v75;
              }
              goto LABEL_123;
            }
            break;
          case 3:
            v42 = *(double *)(*v21 + 8 * v40) + *((double *)v93 + v40 - v30) * v41;
            v44 = *(double **)(a5 + 8);
            v58 = *(_QWORD *)(a5 + 16);
            if ((unint64_t)v44 >= v58)
            {
              v45 = *(double **)a5;
              v59 = ((uint64_t)v44 - *(_QWORD *)a5) >> 3;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 61)
                sub_100259694();
              v61 = v58 - (_QWORD)v45;
              if (v61 >> 2 > v60)
                v60 = v61 >> 2;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v60;
              if (v49)
              {
                v50 = (char *)sub_10025E6A0(v88, v49);
                v45 = *(double **)a5;
                v44 = *(double **)(a5 + 8);
              }
              else
              {
                v50 = 0;
              }
              v72 = (double *)&v50[8 * v59];
              *v72 = v42;
              v63 = v72 + 1;
              while (v44 != v45)
              {
                v74 = *((_QWORD *)v44-- - 1);
                *((_QWORD *)v72-- - 1) = v74;
              }
              goto LABEL_123;
            }
            break;
          case 2:
            v42 = *(double *)(*v21 + 8 * v40) + *((double *)v100 + v40 - v30) * v41;
            v44 = *(double **)(a5 + 8);
            v43 = *(_QWORD *)(a5 + 16);
            if ((unint64_t)v44 >= v43)
            {
              v45 = *(double **)a5;
              v46 = ((uint64_t)v44 - *(_QWORD *)a5) >> 3;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61)
                sub_100259694();
              v48 = v43 - (_QWORD)v45;
              if (v48 >> 2 > v47)
                v47 = v48 >> 2;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)sub_10025E6A0(v88, v49);
                v45 = *(double **)a5;
                v44 = *(double **)(a5 + 8);
              }
              else
              {
                v50 = 0;
              }
              v72 = (double *)&v50[8 * v46];
              *v72 = v42;
              v63 = v72 + 1;
              while (v44 != v45)
              {
                v76 = *((_QWORD *)v44-- - 1);
                *((_QWORD *)v72-- - 1) = v76;
              }
LABEL_123:
              *(_QWORD *)a5 = v72;
              *(_QWORD *)(a5 + 8) = v63;
              *(_QWORD *)(a5 + 16) = &v50[8 * v49];
              if (v45)
                operator delete(v45);
              goto LABEL_125;
            }
            break;
          default:
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CF508);
            v64 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v65 = *a4;
              *(_DWORD *)buf = 67174657;
              v107 = v65;
              _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,InvalidFeatureCount,%{private}u", buf, 8u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CF508);
              v66 = *a4;
              v96 = 67174657;
              v97 = v66;
              LODWORD(v87) = 8;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,InvalidFeatureCount,%{private}u", &v96, v87);
              v68 = (uint8_t *)v67;
              sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::getRegressionModelCoefficients(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const unsigned int &, std::vector<double> &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, const double)", "%s\n", v67);
              if (v68 != buf)
                free(v68);
            }
            goto LABEL_126;
        }
        *v44 = v42;
        v54 = v44 + 1;
      }
      else
      {
        v51 = *v21;
        v53 = *(double **)(a5 + 8);
        v52 = *(_QWORD *)(a5 + 16);
        if ((unint64_t)v53 >= v52)
        {
          v45 = *(double **)a5;
          v55 = ((uint64_t)v53 - *(_QWORD *)a5) >> 3;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61)
            sub_100259694();
          v57 = v52 - (_QWORD)v45;
          if (v57 >> 2 > v56)
            v56 = v57 >> 2;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
            v49 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v49 = v56;
          if (v49)
          {
            v50 = (char *)sub_10025E6A0(v88, v49);
            v45 = *(double **)a5;
            v53 = *(double **)(a5 + 8);
          }
          else
          {
            v50 = 0;
          }
          v72 = (double *)&v50[8 * v55];
          *v72 = *(double *)(v51 + 8 * v40);
          v63 = v72 + 1;
          while (v53 != v45)
          {
            v73 = *((_QWORD *)v53-- - 1);
            *((_QWORD *)v72-- - 1) = v73;
          }
          goto LABEL_123;
        }
        *v53 = *(double *)(v51 + 8 * v40);
        v54 = v53 + 1;
      }
      v63 = v54;
LABEL_125:
      *(_QWORD *)(a5 + 8) = v63;
LABEL_126:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v77 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v78 = *(_QWORD *)(*v21 + 8 * v40);
        *(_DWORD *)buf = 67240448;
        v107 = v40;
        v108 = 2050;
        v109 = v78;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,modelCoefficients,%{public}d,%{public}.6lf", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v79 = *(_QWORD *)(*v21 + 8 * v40);
        v96 = 67240448;
        v97 = v40;
        v98 = 2050;
        v99 = v79;
        LODWORD(v87) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Rhythmic,modelCoefficients,%{public}d,%{public}.6lf", &v96, v87);
        v81 = (uint8_t *)v80;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::getRegressionModelCoefficients(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const unsigned int &, std::vector<double> &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, const double)", "%s\n", v80);
        if (v81 != buf)
          free(v81);
      }
      ++v40;
      v39 = *a4;
    }
    while (*a4 + v30 > v40);
  }
  if (__p)
  {
    v91 = __p;
    operator delete(__p);
  }
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  if (v103)
  {
    v104 = (double *)v103;
    operator delete(v103);
  }
}

void sub_1017B4FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1017B5088(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100259694();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_10025E6A0(v4, v12);
      v8 = *(_QWORD **)a1;
      v6 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void sub_1017B516C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int isTypeRunning;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  uint64_t v22;
  uint8_t buf[16];
  uint64_t v24;

  if (CLMotionActivity::isTypeWalking(*(unsigned int *)(a1 + 400)))
  {
    sub_100B24B48(a1 + 352, buf);
    v3 = *(void **)(a1 + 288);
    if (v3)
    {
      *(_QWORD *)(a1 + 296) = v3;
      operator delete(v3);
    }
    *(_OWORD *)(a1 + 288) = *(_OWORD *)buf;
    *(_QWORD *)(a1 + 304) = v24;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v5 = (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GPSODOM,Rhythmic,Distance Multiplier Model Coefficients For Hike/Walk,Size,%{public}lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v6 = (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3;
      v21 = 134349056;
      v22 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM,Rhythmic,Distance Multiplier Model Coefficients For Hike/Walk,Size,%{public}lu", &v21, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::setDistanceMultiplierSettings()", "%s\n", v7);
LABEL_34:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    isTypeRunning = CLMotionActivity::isTypeRunning(*(unsigned int *)(a1 + 400), v2);
    v10 = a1 + 352;
    if (isTypeRunning)
    {
      sub_100B24B64(v10, buf);
      v11 = *(void **)(a1 + 288);
      if (v11)
      {
        *(_QWORD *)(a1 + 296) = v11;
        operator delete(v11);
      }
      *(_OWORD *)(a1 + 288) = *(_OWORD *)buf;
      *(_QWORD *)(a1 + 304) = v24;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v13 = (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3;
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "GPSODOM,Rhythmic,Distance Multiplier Model Coefficients For Run,Size,%{public}lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v14 = (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3;
        v21 = 134349056;
        v22 = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM,Rhythmic,Distance Multiplier Model Coefficients For Run,Size,%{public}lu", &v21, 12);
        v8 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::setDistanceMultiplierSettings()", "%s\n", v15);
        goto LABEL_34;
      }
    }
    else
    {
      sub_100B24B48(v10, buf);
      v16 = *(void **)(a1 + 288);
      if (v16)
      {
        *(_QWORD *)(a1 + 296) = v16;
        operator delete(v16);
      }
      *(_OWORD *)(a1 + 288) = *(_OWORD *)buf;
      *(_QWORD *)(a1 + 304) = v24;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v17 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v18 = (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3;
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "GPSODOM,Rhythmic,Distance Multiplier Model Coefficients For Default,Size,%{public}lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v19 = (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3;
        v21 = 134349056;
        v22 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM,Rhythmic,Distance Multiplier Model Coefficients For Default,Size,%{public}lu", &v21, 12);
        v8 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::setDistanceMultiplierSettings()", "%s\n", v20);
        goto LABEL_34;
      }
    }
  }
}

char *sub_1017B566C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  char *v9;
  char *v10;
  __int128 *v11;
  uint64_t v12;
  int isTypeRunning;
  uint64_t v14;
  _OWORD v16[2];
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  _OWORD v21[2];
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  __int128 __src;
  char v26[8];

  __src = xmmword_101CDD0B0;
  v8 = &v22;
  v9 = (char *)&v24;
  v10 = (char *)v21;
  v11 = &v22;
  v23 = 0xBFA42C3C9EECBFB1;
  v21[1] = unk_101CDD188;
  v22 = xmmword_101CDD160;
  v20 = xmmword_101CDD0C0;
  v21[0] = xmmword_101CDD178;
  v18 = 0xBFA3404EA4A8C155;
  v16[0] = xmmword_101CDD1B0;
  v16[1] = unk_101CDD1C0;
  v17 = xmmword_101CDD198;
  if (CLMotionActivity::isTypeWalking(*(unsigned int *)(a1 + 400)))
  {
    sub_100B2641C(a2, *(_QWORD *)(a2 + 8), (char *)&__src, v26, 2);
  }
  else
  {
    isTypeRunning = CLMotionActivity::isTypeRunning(*(unsigned int *)(a1 + 400), v12);
    v14 = *(_QWORD *)(a2 + 8);
    if (isTypeRunning)
    {
      v9 = (char *)&v19;
      v11 = &v17;
      sub_100B2641C(a2, v14, (char *)&v20, (char *)v21, 2);
      v10 = (char *)v16;
      v8 = &v17;
    }
    else
    {
      sub_100B2641C(a2, v14, (char *)&__src, v26, 2);
      v10 = (char *)v21;
      v8 = &v22;
    }
  }
  sub_100B2641C(a3, *(_QWORD *)(a3 + 8), (char *)v8, v9, 3);
  return sub_100B2641C(a4, *(_QWORD *)(a4 + 8), v10, (char *)v11, 4);
}

void sub_1017B5824(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAF8AF8AF8AF8AF8BLL * ((v4 - (_BYTE *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x75075075075076)
      sub_100259694();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 560;
    v6 = (char *)sub_1017C3F8C(v3, a2);
    v7 = &v6[560 * v5];
    v9 = &v6[560 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v10 -= 560;
        v12 -= 560;
        memcpy(v12, v10, 0x230uLL);
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

__n128 sub_1017B5928(__n128 *a1)
{
  __n128 result;

  __asm { FMOV            V0.2D, #-1.0 }
  *a1 = result;
  a1[5].n128_u64[0] = 0;
  a1[5].n128_u64[1] = 0;
  a1[4].n128_u64[1] = 0;
  a1[6] = result;
  a1[7] = result;
  a1[8] = result;
  a1[9].n128_u64[0] = 0xBFF0000000000000;
  a1[9].n128_u64[1] = 0;
  a1[10].n128_u64[0] = 0;
  a1[10].n128_u64[1] = 0;
  a1[11] = result;
  a1[12] = result;
  a1[13] = result;
  a1[14].n128_u64[0] = 0xBFF0000000000000;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  a1[15].n128_u64[0] = a1[14].n128_u64[1];
  a1[16].n128_u64[1] = a1[16].n128_u64[0];
  a1[17].n128_u64[1] = 0xBFF0000000000000;
  return result;
}

double sub_1017B5974(double *a1)
{
  double result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  _QWORD v7[6];
  uint8_t buf[1640];

  result = *a1;
  if (*a1 >= 0.0)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1017B5B58;
    v7[3] = &unk_1021CF478;
    v7[4] = a1;
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.scaledgpsodom"), v7);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "GPSODOM,RhythmicScaled,coreanalytics metric submitted", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GPSODOM,RhythmicScaled,coreanalytics metric submitted", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics::submitCoreAnalyticsMetric()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    return sub_1017B5F2C((uint64_t)a1);
  }
  return result;
}

NSDictionary *sub_1017B5B58(uint64_t a1)
{
  uint64_t v1;
  double v2;
  BOOL v3;
  unsigned int v4;
  uint64_t v5;
  double v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  double v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  double v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  double v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  double v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  double v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  double v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  double v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  double v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  double v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v45;
  double v46;
  BOOL v47;
  unsigned int v48;
  uint64_t v49;
  double v50;
  BOOL v51;
  unsigned int v52;
  uint64_t v53;
  double v54;
  BOOL v55;
  unsigned int v56;
  uint64_t v57;
  double v58;
  BOOL v59;
  unsigned int v60;
  uint64_t v61;
  double v62;
  BOOL v63;
  unsigned int v64;
  uint64_t v65;
  double v66;
  BOOL v67;
  unsigned int v68;
  uint64_t v69;
  double v70;
  BOOL v71;
  unsigned int v72;
  uint64_t v73;
  _QWORD v75[20];
  _QWORD v76[20];

  v1 = *(_QWORD *)(a1 + 32);
  v75[0] = CFSTR("3DDistanceFeatureValAvg");
  v2 = *(double *)(v1 + 40);
  v3 = v2 > 1.0 || v2 <= 0.0;
  v4 = llround(v2);
  if (v3)
    v5 = v4;
  else
    v5 = 1;
  v76[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5);
  v75[1] = CFSTR("3DDistanceFeatureValMax");
  v6 = *(double *)(v1 + 16);
  v7 = v6 > 1.0 || v6 <= 0.0;
  v8 = llround(v6);
  if (v7)
    v9 = v8;
  else
    v9 = 1;
  v76[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9);
  v75[2] = CFSTR("HeightChangeFeatureValAvg");
  v10 = *(double *)(v1 + 200);
  v11 = v10 > 1.0 || v10 <= 0.0;
  v12 = llround(v10);
  if (v11)
    v13 = v12;
  else
    v13 = 1;
  v76[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v13);
  v75[3] = CFSTR("HeightChangeFeatureValMax");
  v14 = *(double *)(v1 + 176);
  v15 = v14 > 1.0 || v14 <= 0.0;
  v16 = llround(v14);
  if (v15)
    v17 = v16;
  else
    v17 = 1;
  v76[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v17);
  v75[4] = CFSTR("CourseChangeFeatureValAvg");
  v18 = *(double *)(v1 + 360);
  v19 = v18 > 1.0 || v18 <= 0.0;
  v20 = llround(v18);
  if (v19)
    v21 = v20;
  else
    v21 = 1;
  v76[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v21);
  v75[5] = CFSTR("CourseChangeFeatureValMax");
  v22 = *(double *)(v1 + 336);
  v23 = v22 > 1.0 || v22 <= 0.0;
  v24 = llround(v22);
  if (v23)
    v25 = v24;
  else
    v25 = 1;
  v76[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v25);
  v75[6] = CFSTR("StraightnessFeatureValAvg");
  v26 = *(double *)(v1 + 520);
  v27 = v26 > 1.0 || v26 <= 0.0;
  v28 = llround(v26);
  if (v27)
    v29 = v28;
  else
    v29 = 1;
  v76[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v29);
  v75[7] = CFSTR("StraightnessFeatureValMax");
  v30 = *(double *)(v1 + 496);
  v31 = v30 > 1.0 || v30 <= 0.0;
  v32 = llround(v30);
  if (v31)
    v33 = v32;
  else
    v33 = 1;
  v76[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v33);
  v75[8] = CFSTR("3DDistanceFeatureUncAvg");
  v34 = *(double *)(v1 + 120);
  v35 = v34 > 1.0 || v34 <= 0.0;
  v36 = llround(v34);
  if (v35)
    v37 = v36;
  else
    v37 = 1;
  v76[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v37);
  v75[9] = CFSTR("3DDistanceFeatureUncMax");
  v38 = *(double *)(v1 + 96);
  v39 = v38 > 1.0 || v38 <= 0.0;
  v40 = llround(v38);
  if (v39)
    v41 = v40;
  else
    v41 = 1;
  v76[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v41);
  v75[10] = CFSTR("HeightChangeFeatureUncAvg");
  v42 = *(double *)(v1 + 280);
  v43 = v42 > 1.0 || v42 <= 0.0;
  v44 = llround(v42);
  if (v43)
    v45 = v44;
  else
    v45 = 1;
  v76[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v45);
  v75[11] = CFSTR("HeightChangeFeatureUncMax");
  v46 = *(double *)(v1 + 256);
  v47 = v46 > 1.0 || v46 <= 0.0;
  v48 = llround(v46);
  if (v47)
    v49 = v48;
  else
    v49 = 1;
  v76[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v49);
  v75[12] = CFSTR("CourseChangeFeatureUncAvg");
  v50 = *(double *)(v1 + 440);
  v51 = v50 > 1.0 || v50 <= 0.0;
  v52 = llround(v50);
  if (v51)
    v53 = v52;
  else
    v53 = 1;
  v76[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v53);
  v75[13] = CFSTR("CourseChangeFeatureUncMax");
  v54 = *(double *)(v1 + 416);
  v55 = v54 > 1.0 || v54 <= 0.0;
  v56 = llround(v54);
  if (v55)
    v57 = v56;
  else
    v57 = 1;
  v76[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v57);
  v75[14] = CFSTR("StraightnessFeatureUncAvg");
  v58 = *(double *)(v1 + 600);
  v59 = v58 > 1.0 || v58 <= 0.0;
  v60 = llround(v58);
  if (v59)
    v61 = v60;
  else
    v61 = 1;
  v76[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v61);
  v75[15] = CFSTR("StraightnessFeatureUncMax");
  v62 = *(double *)(v1 + 576);
  v63 = v62 > 1.0 || v62 <= 0.0;
  v64 = llround(v62);
  if (v63)
    v65 = v64;
  else
    v65 = 1;
  v76[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v65);
  v75[16] = CFSTR("NumberOfUsedFeatures");
  v76[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 732));
  v75[17] = CFSTR("UsedModelNumber");
  v76[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 728));
  v75[18] = CFSTR("TimeTakenToCompleteScaledOdometerProcessingAvg");
  v66 = *(double *)(v1 + 680);
  v67 = v66 > 1.0 || v66 <= 0.0;
  v68 = llround(v66);
  if (v67)
    v69 = v68;
  else
    v69 = 1;
  v76[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v69);
  v75[19] = CFSTR("TimeTakenToCompleteScaledOdometerProcessingMax");
  v70 = *(double *)(v1 + 656);
  v71 = v70 > 1.0 || v70 <= 0.0;
  v72 = llround(v70);
  if (v71)
    v73 = v72;
  else
    v73 = 1;
  v76[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v73);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v76, v75, 20);
}

double sub_1017B5F2C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  result = 0.0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  return result;
}

BOOL sub_1017B5FE8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v5;
  int **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  const void *v20;
  uint64_t v21;
  _BYTE v22[12];
  __int16 v23;
  uint64_t v24;
  uint8_t buf[4];
  _BYTE v26[18];

  v2 = a1[29];
  v3 = a1[30];
  if (v2 != v3)
  {
    v21 = 0x6F96F96F96F96F97 * ((v3 - v2) >> 2);
    v5 = (const void *)a1[32];
    if (v21 != 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(a1[33] - (_QWORD)v5) >> 4))
      sub_1017C4850();
    *(_QWORD *)v22 = v2;
    v20 = v5;
    sub_1017C3FD4((const void **)v22, &v20, (int *)&v21, buf);
    v7 = (int **)(a2 + 800);
    sub_1002B7674((uint64_t)v7, (__int128 *)buf);
    v8 = *(std::__shared_weak_count **)&v26[4];
    if (*(_QWORD *)&v26[4])
    {
      v9 = (unint64_t *)(*(_QWORD *)&v26[4] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v12 = sub_10104BD1C(*v7);
      v13 = 0x6F96F96F96F96F97 * ((uint64_t)(a1[30] - a1[29]) >> 2);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)v26 = v12;
      *(_WORD *)&v26[8] = 2050;
      *(_QWORD *)&v26[10] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "GPSODOM,CLGpsOdometryRhythmicBase,Batched locations size,%{public}lu,%{public}lu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v15 = qword_1022A0078;
      v16 = sub_10104BD1C(*v7);
      v17 = 0x6F96F96F96F96F97 * ((uint64_t)(a1[30] - a1[29]) >> 2);
      *(_DWORD *)v22 = 134349312;
      *(_QWORD *)&v22[4] = v16;
      v23 = 2050;
      v24 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 2, "GPSODOM,CLGpsOdometryRhythmicBase,Batched locations size,%{public}lu,%{public}lu", v22, 22);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicBase::getRhythmicGnssBatchedLocations(CLLocationProvider_Type::NotificationData &) const", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  return v2 != v3;
}

#error "1017B639C: call analysis failed (funcsize=60)"

void sub_1017B63CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  sub_1017C409C(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_1017B63E4(uint64_t a1, double *a2, uint64_t a3, _DWORD *a4, char a5, double a6)
{
  NSObject *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  double v24;
  uint8_t *v25;
  NSObject *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  NSObject *v37;
  uint64_t v38;
  double v39;
  double v40;
  NSObject *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  NSObject *v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  uint8_t *v81;
  uint64_t v82;
  const char *v83;
  uint8_t *v84;
  uint64_t v85;
  double v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint8_t *v92;
  uint64_t v93;
  _BYTE v94[24];
  double v95;
  _BYTE v96[32];
  uint64_t v97;
  __int128 v98;
  uint8_t buf[4];
  uint64_t v100;
  __int16 v101;
  double v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  double v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  double v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  double v114;

  ++a4[2];
  if (!sub_1017B1900(a2))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v27 = *((_QWORD *)a2 + 9);
      v28 = *a2;
      v29 = *((_QWORD *)a2 + 1);
      *(_DWORD *)buf = 134349569;
      v100 = v27;
      v101 = 2049;
      v102 = v28;
      v103 = 2049;
      v104 = v29;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,invalid location for cacheRoadData,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v77 = *((_QWORD *)a2 + 9);
      v78 = *(_QWORD *)a2;
      v79 = a2[1];
      *(_DWORD *)v94 = 134349569;
      *(_QWORD *)&v94[4] = v77;
      *(_WORD *)&v94[12] = 2049;
      *(_QWORD *)&v94[14] = v78;
      *(_WORD *)&v94[22] = 2049;
      v95 = v79;
      v80 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,invalid location for cacheRoadData,LL,%{private}.7lf,%{private}.7lf", v94, 32);
      v25 = v81;
      sub_100512490("Generic", 1, 0, 0, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLMMOdometryActivitySettings &, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &, double, const BOOL)", "%s\n", v80);
      goto LABEL_77;
    }
    return;
  }
  if (*(_BYTE *)(a1 + 112))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v13 = *((_QWORD *)a2 + 9);
      v14 = *a2;
      v15 = *((_QWORD *)a2 + 1);
      v16 = *(double *)(a1 + 48);
      v17 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 134350081;
      v100 = v13;
      v101 = 2049;
      v102 = v14;
      v103 = 2049;
      v104 = v15;
      v105 = 2049;
      v106 = v16;
      v107 = 2049;
      v108 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,cachingInProgress,LL,%{private}.7lf,%{private}.7lf,prevLL,%{private}.7lf,%{private}.7lf", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v18 = *((_QWORD *)a2 + 9);
      v19 = *a2;
      v20 = *((_QWORD *)a2 + 1);
      v21 = *(_QWORD *)(a1 + 48);
      v22 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)v94 = 134350081;
      *(_QWORD *)&v94[4] = v18;
      *(_WORD *)&v94[12] = 2049;
      *(double *)&v94[14] = v19;
      *(_WORD *)&v94[22] = 2049;
      *(_WORD *)v96 = 2049;
      *(_QWORD *)&v96[2] = v21;
      *(_WORD *)&v96[10] = 2049;
      *(_QWORD *)&v96[12] = v22;
      v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,cachingInProgress,LL,%{private}.7lf,%{private}.7lf,prevLL,%{private}.7lf,%{private}.7lf", v94, 52, *(_OWORD *)v94, *(_QWORD *)&v94[16], v20, *(_OWORD *)v96, *(_OWORD *)&v96[16], v97, v98);
LABEL_11:
      v25 = v23;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLMMOdometryActivitySettings &, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &, double, const BOOL)", "%s\n", v24);
LABEL_77:
      if (v25 != buf)
        free(v25);
      return;
    }
    return;
  }
  sub_1017B707C((double *)(a1 + 40));
  v31 = v30;
  if ((a5 & 1) == 0
    && (!*(_QWORD *)(a1 + 104)
     || !sub_1017C39D4(*(double *)(a1 + 40), *(double *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 56))
     || v31 > 600.0))
  {
    ++a4[4];
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v52 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v53 = *((_QWORD *)a2 + 9);
      *(_DWORD *)buf = 134349568;
      v100 = v53;
      v101 = 2050;
      v102 = v31;
      v103 = 2050;
      v104 = 0x4082C00000000000;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,no re-cache with non-qualified fix,no data has been cached previously or timeSinceLastCache,%{public}.2lf,is over threshold,%{public}.2lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v54 = *((_QWORD *)a2 + 9);
      *(_DWORD *)v94 = 134349568;
      *(_QWORD *)&v94[4] = v54;
      *(_WORD *)&v94[12] = 2050;
      *(double *)&v94[14] = v31;
      *(_WORD *)&v94[22] = 2050;
      v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,no re-cache with non-qualified fix,no data has been cached previously or timeSinceLastCache,%{public}.2lf,is over threshold,%{public}.2lf", v94, 32, *(_OWORD *)v94, *(_QWORD *)&v94[16], 0x4082C00000000000, *(_OWORD *)v96, *(_OWORD *)&v96[16], v97, v98);
      goto LABEL_11;
    }
    return;
  }
  v32 = *(double *)(a3 + 8);
  v33 = *(double *)(a3 + 16);
  v34 = v32 + a2[3] * 3.0;
  if (sub_1017C39D4(*(double *)(a1 + 40), *(double *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 56)))
  {
    v35 = a2[5];
    if (v35 >= 0.0 && a2[6] > 0.0 && v31 > 0.0)
    {
      v36 = a6 + v31 * v35;
      if (v36 >= v34)
        v34 = a6 + v31 * v35;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v37 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v38 = *((_QWORD *)a2 + 9);
        *(_DWORD *)buf = 134349824;
        v100 = v38;
        v101 = 2050;
        v102 = v31;
        v103 = 2050;
        v104 = *(_QWORD *)&v34;
        v105 = 2050;
        v106 = v36;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,cacheRoadData,timeSinceLastCache,%{public}.2lf,radius,%{public}.2lf,speedBasedRadius,%{public}.2lf", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v82 = *((_QWORD *)a2 + 9);
        *(_DWORD *)v94 = 134349824;
        *(_QWORD *)&v94[4] = v82;
        *(_WORD *)&v94[12] = 2050;
        *(double *)&v94[14] = v31;
        *(_WORD *)&v94[22] = 2050;
        v95 = v34;
        *(_WORD *)v96 = 2050;
        *(double *)&v96[2] = v36;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,cacheRoadData,timeSinceLastCache,%{public}.2lf,radius,%{public}.2lf,speedBasedRadius,%{public}.2lf", v94, 42);
        v84 = (uint8_t *)v83;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLMMOdometryActivitySettings &, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &, double, const BOOL)", "%s\n", v83);
        if (v84 != buf)
          free(v84);
      }
    }
  }
  if (!*(_QWORD *)(a1 + 104)
    || !sub_1017C39D4(*(double *)(a1 + 40), *(double *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 56)))
  {
LABEL_59:
    if (v33 >= v34)
      v62 = v34;
    else
      v62 = v33;
    if (v34 >= v32)
      v63 = v62;
    else
      v63 = v32;
    sub_1017B70CC(a1, (uint64_t)a4, a2[9], *a2, a2[1], v63);
    return;
  }
  v39 = sub_10011E634((double *)a1, *a2, a2[1], *(double *)(a1 + 48), *(double *)(a1 + 56), 0.0);
  v40 = v39;
  if ((a5 & 1) == 0)
  {
    ++a4[4];
    v34 = v39 + a6;
    if (v39 + a6 < *(double *)(a1 + 64))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v64 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v65 = *((_QWORD *)a2 + 9);
        v66 = *a2;
        v67 = *((_QWORD *)a2 + 1);
        v68 = *(double *)(a1 + 48);
        v69 = *(_QWORD *)(a1 + 56);
        v70 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 134350849;
        v100 = v65;
        v101 = 2049;
        v102 = v66;
        v103 = 2049;
        v104 = v67;
        v105 = 2049;
        v106 = v68;
        v107 = 2049;
        v108 = v69;
        v109 = 2050;
        v110 = v40;
        v111 = 2050;
        v112 = v70;
        v113 = 2050;
        v114 = v40 + a6;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,no re-cache with non-qualified fix, safeRadius is less than previously cached radius,LL,%{private}.7lf,%{private}.7lf,prevLL,%{private}.7lf,%{private}.7lf,distance,%{public}.2lf,lastRadius,%{public}.2lf,safeRadius,%{public}.2lf", buf, 0x52u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v71 = *((_QWORD *)a2 + 9);
        v72 = *a2;
        v73 = *((_QWORD *)a2 + 1);
        v74 = *(_QWORD *)(a1 + 48);
        v75 = *(_QWORD *)(a1 + 56);
        v76 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)v94 = 134350849;
        *(_QWORD *)&v94[4] = v71;
        *(_WORD *)&v94[12] = 2049;
        *(double *)&v94[14] = v72;
        *(_WORD *)&v94[22] = 2049;
        *(_WORD *)v96 = 2049;
        *(_QWORD *)&v96[2] = v74;
        *(_WORD *)&v96[10] = 2049;
        *(_QWORD *)&v96[12] = v75;
        *(_WORD *)&v96[20] = 2050;
        *(double *)&v96[22] = v40;
        *(_WORD *)&v96[30] = 2050;
        LOWORD(v98) = 2050;
        *(double *)((char *)&v98 + 2) = v40 + a6;
        LODWORD(v93) = 82;
        v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,no re-cache with non-qualified fix, safeRadius is less than previously cached radius,LL,%{private}.7lf,%{private}.7lf,prevLL,%{private}.7lf,%{private}.7lf,distance,%{public}.2lf,lastRadius,%{public}.2lf,safeRadius,%{public}.2lf", v94, v93, *(_OWORD *)v94, *(_QWORD *)&v94[16], v73, *(_OWORD *)v96, *(_OWORD *)&v96[16], v76, v98);
        goto LABEL_11;
      }
      return;
    }
    ++a4[5];
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v55 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v56 = *((_QWORD *)a2 + 9);
      v57 = *a2;
      v58 = *((_QWORD *)a2 + 1);
      v59 = *(double *)(a1 + 48);
      v60 = *(_QWORD *)(a1 + 56);
      v61 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 134350849;
      v100 = v56;
      v101 = 2049;
      v102 = v57;
      v103 = 2049;
      v104 = v58;
      v105 = 2049;
      v106 = v59;
      v107 = 2049;
      v108 = v60;
      v109 = 2050;
      v110 = v40;
      v111 = 2050;
      v112 = v61;
      v113 = 2050;
      v114 = v40 + a6;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,process re-cache with non-qualified fix,LL,%{private}.7lf,%{private}.7lf,prevLL,%{private}.7lf,%{private}.7lf,distance,%{public}.2lf,lastRadius,%{public}.2lf,radius,%{public}.2lf", buf, 0x52u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v85 = *((_QWORD *)a2 + 9);
      v86 = *a2;
      v87 = a2[1];
      v88 = *(_QWORD *)(a1 + 48);
      v89 = *(_QWORD *)(a1 + 56);
      v90 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)v94 = 134350849;
      *(_QWORD *)&v94[4] = v85;
      *(_WORD *)&v94[12] = 2049;
      *(double *)&v94[14] = v86;
      *(_WORD *)&v94[22] = 2049;
      v95 = v87;
      *(_WORD *)v96 = 2049;
      *(_QWORD *)&v96[2] = v88;
      *(_WORD *)&v96[10] = 2049;
      *(_QWORD *)&v96[12] = v89;
      *(_WORD *)&v96[20] = 2050;
      *(double *)&v96[22] = v40;
      *(_WORD *)&v96[30] = 2050;
      v97 = v90;
      LOWORD(v98) = 2050;
      *(double *)((char *)&v98 + 2) = v40 + a6;
      LODWORD(v93) = 82;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,process re-cache with non-qualified fix,LL,%{private}.7lf,%{private}.7lf,prevLL,%{private}.7lf,%{private}.7lf,distance,%{public}.2lf,lastRadius,%{public}.2lf,radius,%{public}.2lf", v94, v93);
      v92 = (uint8_t *)v91;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLMMOdometryActivitySettings &, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &, double, const BOOL)", "%s\n", v91);
      if (v92 != buf)
        free(v92);
    }
    goto LABEL_59;
  }
  if (v39 >= 50.0)
    goto LABEL_59;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v41 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v42 = *((_QWORD *)a2 + 9);
    v43 = *a2;
    v44 = *((_QWORD *)a2 + 1);
    v45 = *(double *)(a1 + 48);
    v46 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 134350337;
    v100 = v42;
    v101 = 2049;
    v102 = v43;
    v103 = 2049;
    v104 = v44;
    v105 = 2049;
    v106 = v45;
    v107 = 2049;
    v108 = v46;
    v109 = 2050;
    v110 = v40;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,skip caching as new location,LL,%{private}.7lf,%{private}.7lf,is too close to prevLL,%{private}.7lf,%{private}.7lf,distance,%{public}.2lf", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v47 = *((_QWORD *)a2 + 9);
    v48 = *a2;
    v49 = *((_QWORD *)a2 + 1);
    v50 = *(_QWORD *)(a1 + 48);
    v51 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)v94 = 134350337;
    *(_QWORD *)&v94[4] = v47;
    *(_WORD *)&v94[12] = 2049;
    *(double *)&v94[14] = v48;
    *(_WORD *)&v94[22] = 2049;
    *(_WORD *)v96 = 2049;
    *(_QWORD *)&v96[2] = v50;
    *(_WORD *)&v96[10] = 2049;
    *(_QWORD *)&v96[12] = v51;
    *(_WORD *)&v96[20] = 2050;
    *(double *)&v96[22] = v40;
    LODWORD(v93) = 62;
    v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,skip caching as new location,LL,%{private}.7lf,%{private}.7lf,is too close to prevLL,%{private}.7lf,%{private}.7lf,distance,%{public}.2lf", v94, v93, *(_OWORD *)v94, *(_QWORD *)&v94[16], v49, *(_OWORD *)v96, *(_OWORD *)&v96[16], v97, v98);
    goto LABEL_11;
  }
}

BOOL sub_1017B707C(double *a1)
{
  return sub_1017C39D4(*a1, a1[3], a1[1], a1[2]);
}

void sub_1017B70CC(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  const char *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD v21[9];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD **v24;
  _QWORD *v25[2];
  _QWORD v26[6];
  double v27;
  int v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  uint8_t buf[4];
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;

  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x3812000000;
  v26[3] = sub_10020750C;
  v26[4] = nullsub_61;
  v26[5] = &unk_102080316;
  v27 = -1.0;
  v27 = sub_1001FCBB4();
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x4812000000;
  v23[3] = sub_1017B78E8;
  v23[4] = sub_1017B7924;
  v25[0] = 0;
  v25[1] = 0;
  v23[5] = &unk_102080316;
  v24 = v25;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1017B7934;
  v22[3] = &unk_1021CF4A0;
  v22[4] = v23;
  v22[5] = a1;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1017B7B20;
  v21[3] = &unk_1021CF4C8;
  v21[5] = v26;
  v21[6] = a1;
  *(double *)&v21[7] = a3;
  v21[8] = a2;
  v21[4] = v23;
  if (sub_1017C39D4(a3, a6, a4, a5))
  {
    *(double *)(a1 + 40) = a3;
    *(double *)(a1 + 48) = a4;
    *(double *)(a1 + 56) = a5;
    *(double *)(a1 + 64) = a6;
    if (!*(_QWORD *)(a1 + 120))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "GPSODOM-MM,Creating maps geocaching OS transaction", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        LOWORD(v28) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GPSODOM-MM,Creating maps geocaching OS transaction", &v28, 2);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CFAbsoluteTime, const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      *(_QWORD *)(a1 + 120) = os_transaction_create("CLGpsOdometryRhythmicMapMatched");
    }
    ++*(_DWORD *)(a2 + 12);
    *(_BYTE *)(a1 + 112) = 1;
    objc_msgSend(*(id *)(a1 + 72), "findRoadsNear:radius:handler:completionHandler:", v22, v21, a4, a5, a6);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349825;
      v37 = a3;
      v38 = 2049;
      v39 = a4;
      v40 = 2049;
      v41 = a5;
      v42 = 2050;
      v43 = a6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,caching road near,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v28 = 134349825;
      v29 = a3;
      v30 = 2049;
      v31 = a4;
      v32 = 2049;
      v33 = a5;
      v34 = 2050;
      v35 = a6;
      LODWORD(v20) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,caching road near,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", &v28, v20);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CFAbsoluteTime, const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &)", "%s\n", v14);
LABEL_26:
      if (v15 != buf)
        free(v15);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349825;
      v37 = a3;
      v38 = 2049;
      v39 = a4;
      v40 = 2049;
      v41 = a5;
      v42 = 2050;
      v43 = a6;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,cacheRoadData,invalid input,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v28 = 134349825;
      v29 = a3;
      v30 = 2049;
      v31 = a4;
      v32 = 2049;
      v33 = a5;
      v34 = 2050;
      v35 = a6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,cacheRoadData,invalid input,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", &v28, 42);
      v15 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CFAbsoluteTime, const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &)", "%s\n", v17);
      goto LABEL_26;
    }
  }
  _Block_object_dispose(v23, 8);
  sub_1017C409C((uint64_t)&v24, v25[0]);
  _Block_object_dispose(v26, 8);
}

void sub_1017B76FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,_QWORD *a34,uint64_t a35,char a36)
{
  uint64_t v36;

  _Block_object_dispose(&a27, 8);
  sub_1017C409C(v36, a34);
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void sub_1017B7744(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 120))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GPSODOM-MM,Releasing maps geocaching OS transaction", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GPSODOM-MM,Releasing maps geocaching OS transaction", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::releaseOSTransaction()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }

    *(_QWORD *)(a1 + 120) = 0;
  }
}

_QWORD *sub_1017B78E8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_1017B7924(uint64_t a1)
{
  sub_1017C409C(a1 + 48, *(_QWORD **)(a1 + 56));
}

void sub_1017B7934(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t **v10;
  _OWORD *v11;
  __n128 v12;
  uint64_t **v13;
  _OWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _OWORD *v18;
  std::__shared_weak_count *v19;
  _BYTE v20[31];
  _OWORD *v21;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = a2;
    if (v4)
    {
      v5 = v4;
      if ((unint64_t)objc_msgSend(v4, "coordinateCount") >= 2)
      {
        v6 = objc_msgSend(v5, "isRoadPedestrianNavigable");
        v7 = objc_msgSend(v5, "walkableSide");
        v8 = objc_msgSend(v5, "isRail");
        if (((v7 - 1 > 2) & ~v6) == 0 && !v8)
        {
          sub_100F5C39C((uint64_t)v20, v5, 1);
          if (sub_101123FF0(v3 + 88, (uint64_t)v20)
            && (v18 = v20,
                *((_QWORD *)sub_1017C40E4((uint64_t **)(v3 + 88), (uint64_t)v20, (uint64_t)&unk_101B9EB60, &v18) + 7)))
          {
            v18 = v20;
            v9 = (uint64_t *)sub_1017C40E4((uint64_t **)(v3 + 88), (uint64_t)v20, (uint64_t)&unk_101B9EB60, &v18) + 7;
            v10 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
            v18 = v20;
            v11 = sub_1017C40E4(v10, (uint64_t)v20, (uint64_t)&unk_101B9EB60, &v18);
            sub_100349198((_QWORD *)v11 + 7, v9);
          }
          else
          {
            v12.n128_f64[0] = sub_100CC869C(v5, 1, (std::string **)&v18);
            if (v18 && sub_100408B10((uint64_t)v18))
            {
              v13 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
              v21 = v20;
              v14 = sub_1017C40E4(v13, (uint64_t)v20, (uint64_t)&unk_101B9EB60, &v21);
              sub_100349198((_QWORD *)v14 + 7, (uint64_t *)&v18);
            }
            v15 = v19;
            if (v19)
            {
              p_shared_owners = (unint64_t *)&v19->__shared_owners_;
              do
                v17 = __ldaxr(p_shared_owners);
              while (__stlxr(v17 - 1, p_shared_owners));
              if (!v17)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, v12);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
          }
        }
      }
    }
  }
}

void sub_1017B7B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1017B7B20(_QWORD *a1, void *a2)
{
  uint64_t v3;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  double v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  id v30;
  __int16 v31;
  double v32;
  __int16 v33;
  id v34;
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  id v38;
  __int16 v39;
  double v40;
  __int16 v41;
  id v42;

  v3 = a1[6];
  if (a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[7];
      *(_DWORD *)buf = 134349827;
      v36 = v6;
      v37 = 2050;
      v38 = objc_msgSend(a2, "code");
      v39 = 2114;
      v40 = COERCE_DOUBLE(objc_msgSend(a2, "domain"));
      v41 = 2113;
      v42 = objc_msgSend(a2, "localizedDescription");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning GPSODOM-MM,%{public}.1lf,cacheRoadData reported error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v16 = qword_1022A0078;
      v17 = a1[7];
      v27 = 134349827;
      v28 = v17;
      v29 = 2050;
      v30 = objc_msgSend(a2, "code");
      v31 = 2114;
      v32 = COERCE_DOUBLE(objc_msgSend(a2, "domain"));
      v33 = 2113;
      v34 = objc_msgSend(a2, "localizedDescription");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#Warning GPSODOM-MM,%{public}.1lf,cacheRoadData reported error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", &v27, 42);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CFAbsoluteTime, const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &)_block_invoke", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    ++*(_DWORD *)(a1[8] + 24);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v8 = a1[7];
      v9 = *(void **)(*(_QWORD *)(a1[4] + 8) + 64);
      v10 = *(_QWORD *)(a1[5] + 8);
      v11 = 0.0;
      if (*(double *)(v10 + 48) >= 0.0)
        v11 = vabdd_f64(sub_1001FCBB4(), *(double *)(v10 + 48)) * 1000.0;
      *(_DWORD *)buf = 134349568;
      v36 = v8;
      v37 = 2050;
      v38 = v9;
      v39 = 2050;
      v40 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,cacheRoadData completionHandler called,size,%{public}lu,timeTakenInMS,%{public}.1lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v20 = qword_1022A0078;
      v21 = a1[7];
      v22 = *(void **)(*(_QWORD *)(a1[4] + 8) + 64);
      v23 = *(_QWORD *)(a1[5] + 8);
      v24 = 0.0;
      if (*(double *)(v23 + 48) >= 0.0)
        v24 = vabdd_f64(sub_1001FCBB4(), *(double *)(v23 + 48)) * 1000.0;
      v27 = 134349568;
      v28 = v21;
      v29 = 2050;
      v30 = v22;
      v31 = 2050;
      v32 = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 1, "GPSODOM-MM,%{public}.1lf,cacheRoadData completionHandler called,size,%{public}lu,timeTakenInMS,%{public}.1lf", &v27, 32);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CFAbsoluteTime, const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &)_block_invoke", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v12 = *(_QWORD *)(a1[4] + 8);
    if (v3 + 88 != v12 + 48)
      sub_1017C41E0((uint64_t **)(v3 + 88), *(_QWORD **)(v12 + 48), (_QWORD *)(v12 + 56));
    v13 = (char *)(a1[8] + 32);
    v14 = *(_QWORD *)(a1[5] + 8);
    v15 = 0.0;
    if (*(double *)(v14 + 48) >= 0.0)
      v15 = vabdd_f64(sub_1001FCBB4(), *(double *)(v14 + 48)) * 1000.0;
    sub_100785E0C(v13, v15);
    sub_100785E0C((char *)(a1[8] + 112), (double)*(unint64_t *)(v3 + 104));
    objc_msgSend(*(id *)(v3 + 72), "clearRoadTiles");
  }
  *(_BYTE *)(v3 + 112) = 0;
  sub_1017B7744(v3);
}

void sub_1017B7FFC(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  double v15;
  double v16;
  double v17;
  _QWORD *v18;
  uint64_t v19;
  double *v20;
  double *v21;
  double v23;
  double v25;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  BOOL v30;
  char *v31;
  double v32;
  NSObject *v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  const char *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  int v52;
  uint64_t v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  uint8_t buf[4];
  uint64_t v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;

  if (*(_BYTE *)(a1 + 112))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "GPSODOM-MM,RoadBuffer,findRoadsNear, caching in progress", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      LOWORD(v52) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,RoadBuffer,findRoadsNear, caching in progress", &v52, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::findRoadsNear(const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &, std::map<CLParticleMapMatcherCommon::RoadKey, CLMapRoadPtr> &)", "%s\n", v7);
      if (v8 != buf)
        goto LABEL_59;
    }
    return;
  }
  v15 = sub_1001FCBB4();
  v50 = 0.0;
  v51 = 0.0;
  v48 = 0.0;
  v49 = 0.0;
  sub_100515834(&v51, &v50, &v49, &v48, a4, a5, a6);
  sub_100080DCC(v50);
  v50 = v16;
  sub_100080DCC(v48);
  v48 = v17;
  sub_1017C409C(a3, *(_QWORD **)(a3 + 8));
  *(_QWORD *)a3 = a3 + 8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v18 = *(_QWORD **)(a1 + 88);
  if (v18 == (_QWORD *)(a1 + 96))
  {
    v30 = 1;
    goto LABEL_41;
  }
  do
  {
    v19 = v18[7];
    if (!v19)
      goto LABEL_33;
    v20 = *(double **)(v19 + 136);
    v21 = *(double **)(v19 + 144);
    if (v20 == v21)
      goto LABEL_33;
    while (1)
    {
      if (*v20 < v51 || *v20 > v49)
        goto LABEL_30;
      if (v48 <= v50)
        break;
      v23 = v20[1];
      if (v23 >= v50 && v23 <= v48)
        goto LABEL_32;
LABEL_30:
      v20 += 2;
      if (v20 == v21)
        goto LABEL_33;
    }
    if (v48 >= v50)
      goto LABEL_30;
    v25 = v20[1];
    if (v25 >= v48 && v25 <= v50)
      goto LABEL_30;
LABEL_32:
    sub_1017C44A0((uint64_t **)a3, (uint64_t)(v18 + 4), (uint64_t)(v18 + 4));
LABEL_33:
    v27 = (_QWORD *)v18[1];
    if (v27)
    {
      do
      {
        v28 = v27;
        v27 = (_QWORD *)*v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        v28 = (_QWORD *)v18[2];
        v29 = *v28 == (_QWORD)v18;
        v18 = v28;
      }
      while (!v29);
    }
    v18 = v28;
  }
  while (v28 != (_QWORD *)(a1 + 96));
  v30 = *(_QWORD *)(a3 + 16) == 0;
LABEL_41:
  if (*(_QWORD *)(a1 + 104) && v30)
    ++*(_DWORD *)(a2 + 192);
  v31 = (char *)(a2 + 200);
  v32 = 0.0;
  if (v15 >= 0.0)
    v32 = vabdd_f64(sub_1001FCBB4(), v15) * 1000.0;
  sub_100785E0C(v31, v32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v33 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v34 = *(_QWORD *)(a3 + 16);
    v36 = v50;
    v35 = v51;
    v37 = 0.0;
    v39 = v48;
    v38 = v49;
    if (v15 >= 0.0)
      v37 = vabdd_f64(sub_1001FCBB4(), v15) * 1000.0;
    *(_DWORD *)buf = 134351105;
    v71 = v34;
    v72 = 2049;
    v73 = a4;
    v74 = 2049;
    v75 = a5;
    v76 = 2050;
    v77 = a6;
    v78 = 2049;
    v79 = v35;
    v80 = 2049;
    v81 = v36;
    v82 = 2049;
    v83 = v38;
    v84 = 2049;
    v85 = v39;
    v86 = 2050;
    v87 = v37;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,RoadBuffer,found roads,size,%{public}ld,searchCoord,%{private}.7lf,%{private}.7lf,radius,%{public}.1lf,min,%{private}.7lf,%{private}.7lf,max,%{private}.7lf,%{private}.7lf,timeTakenInMS,%{public}.2lf", buf, 0x5Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v40 = qword_1022A0078;
    v41 = *(_QWORD *)(a3 + 16);
    v43 = v50;
    v42 = v51;
    v44 = 0.0;
    v46 = v48;
    v45 = v49;
    if (v15 >= 0.0)
      v44 = vabdd_f64(sub_1001FCBB4(), v15) * 1000.0;
    v52 = 134351105;
    v53 = v41;
    v54 = 2049;
    v55 = a4;
    v56 = 2049;
    v57 = a5;
    v58 = 2050;
    v59 = a6;
    v60 = 2049;
    v61 = v42;
    v62 = 2049;
    v63 = v43;
    v64 = 2049;
    v65 = v45;
    v66 = 2049;
    v67 = v46;
    v68 = 2050;
    v69 = v44;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 2, "GPSODOM-MM,RoadBuffer,found roads,size,%{public}ld,searchCoord,%{private}.7lf,%{private}.7lf,radius,%{public}.1lf,min,%{private}.7lf,%{private}.7lf,max,%{private}.7lf,%{private}.7lf,timeTakenInMS,%{public}.2lf", &v52, 92);
    v8 = (uint8_t *)v47;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::findRoadsNear(const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &, std::map<CLParticleMapMatcherCommon::RoadKey, CLMapRoadPtr> &)", "%s\n", v47);
    if (v8 != buf)
LABEL_59:
      free(v8);
  }
}

void sub_1017B8578(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,CLMapRoadBufer reset", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM-MM,CLMapRoadBufer reset", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::reset()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v4 = *(_QWORD **)(a1 + 96);
  v3 = a1 + 96;
  *(_QWORD *)(v3 - 56) = 0xBFF0000000000000;
  *(_QWORD *)(v3 - 48) = 0;
  *(_QWORD *)(v3 - 40) = 0;
  *(_QWORD *)(v3 - 32) = 0xBFF0000000000000;
  sub_1017C409C(v3 - 8, v4);
  *(_QWORD *)(v3 - 8) = v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 16) = 0;
}

void sub_1017B872C(uint64_t a1)
{
  __int128 v7;

  __asm { FMOV            V0.2D, #-1.0 }
  v7 = _Q0;
  *(_OWORD *)a1 = _Q0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1002433B8(a1 + 32);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 192) = v7;
  *(_OWORD *)(a1 + 208) = v7;
  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 280) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 320) = v7;
  *(_OWORD *)(a1 + 336) = v7;
  *(_OWORD *)(a1 + 352) = v7;
  *(_BYTE *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 401) = 0u;
  *(_QWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  sub_100B263C4(a1 + 568);
  *(_BYTE *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 664) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_DWORD *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_DWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_DWORD *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_DWORD *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_DWORD *)(a1 + 1384) = 0;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_DWORD *)(a1 + 1472) = 0;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_DWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_DWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 940) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_DWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1188) = 0u;
  *(_DWORD *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_DWORD *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1436) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1524) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_QWORD *)(a1 + 1560) = 0;
  operator new();
}

void sub_1017B89A0()
{
  operator delete();
}

void sub_1017B8A18(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  unsigned __int8 *v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  unsigned __int8 *v9;
  __int128 v10;
  NSObject *v11;
  int v12;
  int v13;
  int isTypeCycling;
  uint64_t v15;
  __int128 v16;
  NSObject *v17;
  int v18;
  int v19;
  __int128 v20;
  NSObject *v21;
  int v22;
  int v23;
  uint8_t *v24;
  _QWORD v25[2];
  uint8_t buf[16];
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  if (CLMotionActivity::isTypeWalking(*(unsigned int *)(a1 + 432)))
  {
    sub_100B25448(a1 + 568, 0, (uint64_t)buf);
    v3 = v27;
    *(_OWORD *)(a1 + 608) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 624) = v3;
    *(_OWORD *)(a1 + 640) = v28;
    *(_QWORD *)(a1 + 656) = v29;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v4 = (unsigned __int8 *)(a1 + 608);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v6 = *v4;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GPSODOM-MM,set walking activity settings,enabled,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v7 = *v4;
      LODWORD(v25[0]) = 67240192;
      HIDWORD(v25[0]) = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,set walking activity settings,enabled,%{public}d", v25, 8, v25[0]);
LABEL_37:
      v24 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::setActivitySettings()", "%s\n", v8);
      if (v24 != buf)
        free(v24);
    }
  }
  else
  {
    v9 = (unsigned __int8 *)(a1 + 608);
    if (CLMotionActivity::isTypeRunning(*(unsigned int *)(a1 + 432), v2))
    {
      sub_100B25448(a1 + 568, 1, (uint64_t)buf);
      v10 = v27;
      *(_OWORD *)v9 = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 624) = v10;
      *(_OWORD *)(a1 + 640) = v28;
      *(_QWORD *)(a1 + 656) = v29;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v12 = *v9;
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GPSODOM-MM,set running activity settings,enabled,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v13 = *v9;
        LODWORD(v25[0]) = 67240192;
        HIDWORD(v25[0]) = v13;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,set running activity settings,enabled,%{public}d", v25, 8, v25[0]);
        goto LABEL_37;
      }
    }
    else
    {
      isTypeCycling = CLMotionActivity::isTypeCycling(*(unsigned int *)(a1 + 432));
      v15 = a1 + 568;
      if (isTypeCycling)
      {
        sub_100B25448(v15, 2, (uint64_t)buf);
        v16 = v27;
        *(_OWORD *)v9 = *(_OWORD *)buf;
        *(_OWORD *)(a1 + 624) = v16;
        *(_OWORD *)(a1 + 640) = v28;
        *(_QWORD *)(a1 + 656) = v29;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v17 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          v18 = *v9;
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "GPSODOM-MM,set cycling activity settings,enabled,%{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF508);
          v19 = *v9;
          LODWORD(v25[0]) = 67240192;
          HIDWORD(v25[0]) = v19;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,set cycling activity settings,enabled,%{public}d", v25, 8, v25[0]);
          goto LABEL_37;
        }
      }
      else
      {
        sub_100B25448(v15, 0, (uint64_t)buf);
        v20 = v27;
        *(_OWORD *)v9 = *(_OWORD *)buf;
        *(_OWORD *)(a1 + 624) = v20;
        *(_OWORD *)(a1 + 640) = v28;
        *(_QWORD *)(a1 + 656) = v29;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v21 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          v22 = *v9;
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "GPSODOM-MM,set default activity, using walking settings,enabled,%{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF508);
          v23 = *v9;
          LODWORD(v25[0]) = 67240192;
          HIDWORD(v25[0]) = v23;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,set default activity, using walking settings,enabled,%{public}d", v25, 8, v25[0]);
          goto LABEL_37;
        }
      }
    }
  }
}

void sub_1017B8F70(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint8_t *v33;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  double v56;
  uint8_t buf[4];
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  double v78;

  if (*(_BYTE *)(a1 + 608))
  {
    v4 = -1.0;
    if (sub_1017B1900((double *)(a1 + 152)))
      v4 = vabdd_f64(*(double *)(a1 + 224), *(double *)(a2 + 16));
    sub_1017B0F38(a1 + 152, a2);
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)a1 = _Q0;
    v10 = *(_QWORD *)(a1 + 424);
    if (v10 && v4 > *(double *)(a1 + 592))
      sub_1017B63E4(v10, (double *)(a1 + 152), a1 + 608, (_DWORD *)(a1 + 664), 0, *(double *)(a1 + 600));
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 152);
      v13 = *(_QWORD *)(a1 + 160);
      v14 = *(_QWORD *)(a1 + 168);
      v15 = *(_QWORD *)(a1 + 176);
      v17 = *(_QWORD *)(a1 + 216);
      v16 = *(_QWORD *)(a1 + 224);
      v19 = *(_QWORD *)(a1 + 200);
      v18 = *(_QWORD *)(a1 + 208);
      v20 = *(_QWORD *)(a1 + 184);
      v21 = *(_QWORD *)(a1 + 192);
      *(_DWORD *)buf = 134351617;
      v58 = v16;
      v59 = 2049;
      v60 = v12;
      v61 = 2049;
      v62 = v13;
      v63 = 2050;
      v64 = v18;
      v65 = 2050;
      v66 = v14;
      v67 = 2050;
      v68 = v21;
      v69 = 2050;
      v70 = v15;
      v71 = 2050;
      v72 = v17;
      v73 = 2050;
      v74 = v19;
      v75 = 2050;
      v76 = v20;
      v77 = 2050;
      v78 = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,%{public}.1lf,location received,LL,%{private}.7lf,%{private}.7lf,course,%{public}.2lf,altitude,%{public}.2lf,speed,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,speedUnc,%{public}.2lf,altUnc,%{public}.2lf,dT,%{public}.2lf", buf, 0x70u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v22 = *(_QWORD *)(a1 + 152);
      v23 = *(_QWORD *)(a1 + 160);
      v24 = *(_QWORD *)(a1 + 168);
      v25 = *(_QWORD *)(a1 + 176);
      v27 = *(_QWORD *)(a1 + 216);
      v26 = *(_QWORD *)(a1 + 224);
      v29 = *(_QWORD *)(a1 + 200);
      v28 = *(_QWORD *)(a1 + 208);
      v31 = *(_QWORD *)(a1 + 184);
      v30 = *(_QWORD *)(a1 + 192);
      v35 = 134351617;
      v36 = v26;
      v37 = 2049;
      v38 = v22;
      v39 = 2049;
      v40 = v23;
      v41 = 2050;
      v42 = v28;
      v43 = 2050;
      v44 = v24;
      v45 = 2050;
      v46 = v30;
      v47 = 2050;
      v48 = v25;
      v49 = 2050;
      v50 = v27;
      v51 = 2050;
      v52 = v29;
      v53 = 2050;
      v54 = v31;
      v55 = 2050;
      v56 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM-MM,%{public}.1lf,location received,LL,%{private}.7lf,%{private}.7lf,course,%{public}.2lf,altitude,%{public}.2lf,speed,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,speedUnc,%{public}.2lf,altUnc,%{public}.2lf,dT,%{public}.2lf", &v35, 112);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::update(const GNSS::PerEpochData &)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)a1 = _Q0;
  }
}

uint64_t sub_1017B9270(double a1, double a2)
{
  uint64_t result;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  double v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  double v16;
  __int16 v17;
  double v18;

  result = sub_1001133C0(a1, a2);
  if ((_DWORD)result)
  {
    if (+[GEOLocationShifter isLocationShiftRequiredForCoordinate:](GEOLocationShifter, "isLocationShiftRequiredForCoordinate:", a1, a2))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283777;
        v16 = a1;
        v17 = 2049;
        v18 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GPSODOM-MM,shifting required,LL,%{private}.7lf,%{private}.7lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v11 = 134283777;
        v12 = a1;
        v13 = 2049;
        v14 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,shifting required,LL,%{private}.7lf,%{private}.7lf", &v11, 22);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::isChinaShiftRequired(const double, const double) const", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      return 1;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283777;
        v16 = a1;
        v17 = 2049;
        v18 = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GPSODOM-MM,shifting not required,LL,%{private}.7lf,%{private}.7lf", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v11 = 134283777;
        v12 = a1;
        v13 = 2049;
        v14 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,shifting not required,LL,%{private}.7lf,%{private}.7lf", &v11, 22);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::isChinaShiftRequired(const double, const double) const", "%s\n", v9);
        if (v10 != buf)
          free(v10);
        return 0;
      }
    }
  }
  return result;
}

void sub_1017B95B4(uint64_t a1)
{
  double v2;
  double v3;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  double v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint8_t *v54;
  uint64_t v55;
  const char *v56;
  uint8_t *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  uint8_t buf[4];
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;

  v2 = sub_1001FCBB4();
  if (*(_BYTE *)(a1 + 608))
  {
    v3 = v2;
    if (sub_1017B1900((double *)(a1 + 152))
      && sub_1017B9270(*(double *)(a1 + 152), *(double *)(a1 + 160)))
    {
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)a1 = _Q0;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v10 = *(_QWORD *)(a1 + 224);
        *(_DWORD *)buf = 134349056;
        v88 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,qualified fix received,unsupported region", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v11 = *(_QWORD *)(a1 + 224);
        v59 = 134349056;
        v60 = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,qualified fix received,unsupported region", &v59, 12);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::updateDistanceAndBatchedLocations()", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
    }
    else
    {
      v14 = (uint64_t *)(a1 + 664);
      if (*(double *)(a1 + 664) < 0.0)
        *(double *)v14 = sub_1001FCBB4();
      if ((sub_1017B9C14(a1) & 1) == 0)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v15 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v16 = *(_QWORD *)(a1 + 224);
          *(_DWORD *)buf = 134349056;
          v88 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,%{public}.1lf,computeDeltaDistanceAndBatchedLocations failed to compute deltadistance", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF508);
          v55 = *(_QWORD *)(a1 + 224);
          v59 = 134349056;
          v60 = v55;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM-MM,%{public}.1lf,computeDeltaDistanceAndBatchedLocations failed to compute deltadistance", &v59, 12);
          v57 = (uint8_t *)v56;
          sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::updateDistanceAndBatchedLocations()", "%s\n", v56);
          if (v57 != buf)
            free(v57);
        }
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)a1 = _Q0;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v20 = *(_QWORD *)(a1 + 216);
        v19 = *(_QWORD *)(a1 + 224);
        v21 = *(_QWORD *)(a1 + 160);
        v22 = *(_QWORD *)(a1 + 168);
        v24 = *(_QWORD *)(a1 + 200);
        v23 = *(_QWORD *)(a1 + 208);
        v26 = *(_QWORD *)(a1 + 184);
        v25 = *(_QWORD *)(a1 + 192);
        v27 = *(_QWORD *)(a1 + 176);
        v29 = *(_QWORD *)(a1 + 16);
        v28 = *(_QWORD *)(a1 + 24);
        v30 = *(_QWORD *)a1;
        v32 = *(_QWORD *)(a1 + 144);
        v31 = *(_QWORD *)(a1 + 152);
        *(_DWORD *)buf = 134352385;
        v88 = v19;
        v89 = 2049;
        v90 = v31;
        v91 = 2049;
        v92 = v21;
        v93 = 2050;
        v94 = v23;
        v95 = 2050;
        v96 = v22;
        v97 = 2050;
        v98 = v25;
        v99 = 2050;
        v100 = v27;
        v101 = 2050;
        v102 = v20;
        v103 = 2050;
        v104 = v24;
        v105 = 2050;
        v106 = v26;
        v107 = 2050;
        v108 = v28;
        v109 = 2050;
        v110 = v29;
        v111 = 2050;
        v112 = v30;
        v113 = 2050;
        v114 = v32;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "GPSODOM-MM,%{public}.1lf,qualified fix received,LL,%{private}.7lf,%{private}.7lf,course,%{public}.2lf,altitude,%{public}.2lf,speed,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,speedUnc,%{public}.2lf,altUnc,%{public}.2lf,totalDistance,%{public}.1lf,totalMMOdometerDistance,%{public}.1lf,deltaDistance,%{public}.1lf,prevTime,%{public}.1lf", buf, 0x8Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v40 = *(_QWORD *)(a1 + 216);
        v39 = *(_QWORD *)(a1 + 224);
        v41 = *(_QWORD *)(a1 + 160);
        v42 = *(_QWORD *)(a1 + 168);
        v44 = *(_QWORD *)(a1 + 200);
        v43 = *(_QWORD *)(a1 + 208);
        v46 = *(_QWORD *)(a1 + 184);
        v45 = *(_QWORD *)(a1 + 192);
        v47 = *(_QWORD *)(a1 + 176);
        v48 = *(_QWORD *)(a1 + 16);
        v49 = *(_QWORD *)(a1 + 24);
        v50 = *(_QWORD *)a1;
        v52 = *(_QWORD *)(a1 + 144);
        v51 = *(_QWORD *)(a1 + 152);
        v59 = 134352385;
        v60 = v39;
        v61 = 2049;
        v62 = v51;
        v63 = 2049;
        v64 = v41;
        v65 = 2050;
        v66 = v43;
        v67 = 2050;
        v68 = v42;
        v69 = 2050;
        v70 = v45;
        v71 = 2050;
        v72 = v47;
        v73 = 2050;
        v74 = v40;
        v75 = 2050;
        v76 = v44;
        v77 = 2050;
        v78 = v46;
        v79 = 2050;
        v80 = v49;
        v81 = 2050;
        v82 = v48;
        v83 = 2050;
        v84 = v50;
        v85 = 2050;
        v86 = v52;
        LODWORD(v58) = 142;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GPSODOM-MM,%{public}.1lf,qualified fix received,LL,%{private}.7lf,%{private}.7lf,course,%{public}.2lf,altitude,%{public}.2lf,speed,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,speedUnc,%{public}.2lf,altUnc,%{public}.2lf,totalDistance,%{public}.1lf,totalMMOdometerDistance,%{public}.1lf,deltaDistance,%{public}.1lf,prevTime,%{public}.1lf", &v59, v58);
        v54 = (uint8_t *)v53;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::updateDistanceAndBatchedLocations()", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
      sub_1017B2CD8(a1);
      v33 = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 168);
      v34 = *(_OWORD *)(a1 + 200);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 184);
      *(_OWORD *)(a1 + 120) = v34;
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 216);
      *(_OWORD *)(a1 + 72) = v33;
      v35 = *(_QWORD *)(a1 + 424);
      if (v35)
        sub_1017B63E4(v35, (double *)(a1 + 152), a1 + 608, (_DWORD *)(a1 + 664), 1, *(double *)(a1 + 600));
      v36 = (char *)(a1 + 1448);
      v37 = 0.0;
      if (v3 >= 0.0)
        v37 = vabdd_f64(sub_1001FCBB4(), v3) * 1000.0;
      sub_100785E0C(v36, v37);
      sub_1017BAED8(v14);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)a1 = _Q0;
  }
}

uint64_t sub_1017B9C14(uint64_t a1)
{
  BOOL v2;
  BOOL v3;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v33;
  uint64_t v34;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  double v50;
  double v51;
  float64x2_t v52;
  NSObject *v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  char *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void *__p[2];
  char v85;
  void *v86[2];
  char v87;
  int v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  double v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  _BYTE v98[80];
  char v99;
  _OWORD v100[3];
  _BYTE buf[12];
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  double v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;

  if (!*(_QWORD *)(a1 + 424))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_QWORD *)(a1 + 224);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,MapRoadBuffer is not initialized", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v13 = *(_QWORD *)(a1 + 224);
    *(_DWORD *)v98 = 134349056;
    *(_QWORD *)&v98[4] = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,MapRoadBuffer is not initialized", v98, 12);
    v15 = (char *)v14;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v14);
    goto LABEL_129;
  }
  if (!sub_1017B1900((double *)(a1 + 152)))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(a1 + 224);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,latestpos is invalid", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v18 = *(_QWORD *)(a1 + 224);
    *(_DWORD *)v98 = 134349056;
    *(_QWORD *)&v98[4] = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,latestpos is invalid", v98, 12);
    v15 = (char *)v19;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v19);
    goto LABEL_129;
  }
  if (!sub_1017B1900((double *)(a1 + 72)))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(_QWORD *)(a1 + 224);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,%{public}.1lf,previous location is invalid,setting now", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v22 = *(_QWORD *)(a1 + 224);
    *(_DWORD *)v98 = 134349056;
    *(_QWORD *)&v98[4] = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM-MM,%{public}.1lf,previous location is invalid,setting now", v98, 12);
    v15 = (char *)v23;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v23);
    goto LABEL_129;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 424) + 104))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v25 = *(_QWORD *)(a1 + 224);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,empty road buffer,caching again", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v26 = *(_QWORD *)(a1 + 224);
    *(_DWORD *)v98 = 134349056;
    *(_QWORD *)&v98[4] = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,empty road buffer,caching again", v98, 12);
    v15 = (char *)v27;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v27);
    goto LABEL_129;
  }
  if (!*(_BYTE *)(a1 + 368)
    || !sub_1017B1900((double *)(a1 + 288))
    || vabdd_f64(*(double *)(a1 + 144), *(double *)(a1 + 360)) > 0.001)
  {
    sub_1015A2E04(v86, "Prev");
    v2 = sub_1017BB79C(a1, a1 + 72, a1 + 288, (uint64_t *)v86);
    v3 = v2;
    if ((v87 & 0x80000000) == 0)
    {
      if (v2)
        goto LABEL_10;
      goto LABEL_49;
    }
    operator delete(v86[0]);
    if (!v3)
    {
LABEL_49:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v28 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v29 = *(_QWORD *)(a1 + 224);
        v30 = *(_QWORD *)(a1 + 144);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v29;
        v102 = 2050;
        v103 = v30;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,unable to compute snap for prev position fix,%{public}.1lf", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v66 = *(_QWORD *)(a1 + 224);
      v67 = *(_QWORD *)(a1 + 144);
      *(_DWORD *)v98 = 134349312;
      *(_QWORD *)&v98[4] = v66;
      *(_WORD *)&v98[12] = 2050;
      *(_QWORD *)&v98[14] = v67;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,unable to compute snap for prev position fix,%{public}.1lf", v98, 22);
      v15 = (char *)v68;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v68);
LABEL_129:
      if (v15 != buf)
        free(v15);
      return 0;
    }
  }
LABEL_10:
  memset(v98, 0, 24);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v98[24] = _Q0;
  *(_OWORD *)&v98[40] = _Q0;
  *(_OWORD *)&v98[56] = _Q0;
  *(_QWORD *)&v98[72] = 0xBFF0000000000000;
  v99 = 0;
  memset(v100, 0, 41);
  sub_1015A2E04(__p, "Crnt");
  v8 = sub_1017BB79C(a1, a1 + 152, (uint64_t)v98, (uint64_t *)__p);
  if (v85 < 0)
    operator delete(__p[0]);
  if (!v8)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v33 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v34 = *(_QWORD *)(a1 + 224);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,unable to compute snap for latest position fix", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v69 = *(_QWORD *)(a1 + 224);
      v88 = 134349056;
      v89 = v69;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,unable to compute snap for latest position fix", &v88, 12);
      v71 = (char *)v70;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v70);
      if (v71 != buf)
        free(v71);
    }
    v31 = 0;
    goto LABEL_115;
  }
  v9 = *(_QWORD *)(a1 + 1552);
  v10 = *(_QWORD *)(a1 + 1544);
  while (v9 != v10)
    v9 = sub_100261F44(v9 - 16);
  *(_QWORD *)(a1 + 1552) = v10;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  if (*(_BYTE *)(a1 + 368))
    _ZF = v99 == 0;
  else
    _ZF = 1;
  if (!_ZF && sub_1017B1900((double *)(a1 + 288)) && sub_1017B1900((double *)v98))
  {
    ++*(_DWORD *)(a1 + 1192);
    if ((sub_1017BCE68(a1, a1 + 288, (uint64_t)v98) & 1) == 0)
    {
      ++*(_DWORD *)(a1 + 1196);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v41 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v42 = *(_QWORD *)(a1 + 224);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,unable to build path", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_125;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v43 = *(_QWORD *)(a1 + 224);
      v88 = 134349056;
      v89 = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,unable to build path", &v88, 12);
      v40 = (char *)v44;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v44);
      goto LABEL_138;
    }
    if (v82 == v81)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v45 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v46 = *(_QWORD *)(a1 + 224);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v46;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,error in constructing route path", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_125;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v47 = *(_QWORD *)(a1 + 224);
      v88 = 134349056;
      v89 = v47;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,error in constructing route path", &v88, 12);
      v40 = (char *)v48;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v48);
      goto LABEL_138;
    }
    if (*(unsigned __int8 *)(*(_QWORD *)v81 + 16) != *(unsigned __int8 *)(a1 + 416)
      && *(double *)(a1 + 344) >= 0.0
      && *(double *)(a1 + 352) > 0.0
      || *(unsigned __int8 *)(*((_QWORD *)v82 - 2) + 16) != BYTE8(v100[2])
      && *(double *)&v98[56] >= 0.0
      && *(double *)&v98[64] > 0.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v36 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v37 = *(_QWORD *)(a1 + 224);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v37;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,reverse path,path constructed is from behind the users direction of travel", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_125;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v38 = *(_QWORD *)(a1 + 224);
      v88 = 134349056;
      v89 = v38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,reverse path,path constructed is from behind the users direction of travel", &v88, 12);
      v40 = (char *)v39;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v39);
LABEL_138:
      if (v40 != buf)
        free(v40);
LABEL_125:
      v31 = 0;
      goto LABEL_114;
    }
    v49 = (v82 - v81) >> 4;
    if ((char **)(a1 + 1544) != &v81)
    {
      sub_100CCFB70(a1 + 1544, (uint64_t *)v81, (uint64_t *)v82, v49);
      v49 = (v82 - v81) >> 4;
    }
    sub_100785E0C((char *)(a1 + 1360), (double)v49);
    if ((sub_1017BEF28((uint64_t *)&v81, (double *)a1, *(double *)(a1 + 408), *(double *)&v100[2]) & 1) == 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v64 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v65 = *(_QWORD *)(a1 + 224);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v65;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,computeDistanceTravelledOnThisPath failed", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_125;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v72 = *(_QWORD *)(a1 + 224);
      v88 = 134349056;
      v89 = v72;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,computeDistanceTravelledOnThisPath failed", &v88, 12);
      v40 = (char *)v73;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v73);
      goto LABEL_138;
    }
    v50 = vabdd_f64(*(double *)(a1 + 224), *(double *)(a1 + 144));
    if (v50 >= 1.0)
      v51 = v50 * 0.02;
    else
      v51 = 0.02;
    if (*(double *)a1 * 0.05 >= v51)
      v51 = *(double *)a1 * 0.05;
    *(double *)(a1 + 8) = v51;
    sub_1017BF0D8(a1, a1 + 288, (uint64_t)v98, &v81);
    v52 = vld1q_dup_f64((const double *)a1);
    *(float64x2_t *)(a1 + 16) = vaddq_f64(v52, *(float64x2_t *)(a1 + 16));
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v53 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v54 = *(_QWORD *)(a1 + 224);
      v55 = *(double *)a1;
      v57 = *(_QWORD *)(a1 + 16);
      v56 = *(_QWORD *)(a1 + 24);
      v58 = *(_QWORD *)(a1 + 144);
      *(_DWORD *)buf = 134350080;
      *(_QWORD *)&buf[4] = v54;
      v102 = 2050;
      v103 = v56;
      v104 = 2050;
      v105 = v55;
      v106 = 2050;
      v107 = v57;
      v108 = 2050;
      v109 = v58;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,totalDistance,%{public}.2lf,deltaDistance,%{public}.2lf,totalMMOdometerDistance,%{public}.2lf,prevTime,%{public}.1lf", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v74 = *(_QWORD *)(a1 + 224);
      v75 = *(double *)a1;
      v77 = *(_QWORD *)(a1 + 16);
      v76 = *(_QWORD *)(a1 + 24);
      v78 = *(_QWORD *)(a1 + 144);
      v88 = 134350080;
      v89 = v74;
      v90 = 2050;
      v91 = v76;
      v92 = 2050;
      v93 = v75;
      v94 = 2050;
      v95 = v77;
      v96 = 2050;
      v97 = v78;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,totalDistance,%{public}.2lf,deltaDistance,%{public}.2lf,totalMMOdometerDistance,%{public}.2lf,prevTime,%{public}.1lf", &v88, 52);
      v80 = (char *)v79;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v79);
      if (v80 != buf)
        free(v80);
    }
  }
  v59 = *(_OWORD *)&v98[48];
  *(_OWORD *)(a1 + 320) = *(_OWORD *)&v98[32];
  *(_OWORD *)(a1 + 336) = v59;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)&v98[64];
  *(_BYTE *)(a1 + 368) = v99;
  v60 = *(_OWORD *)&v98[16];
  *(_OWORD *)(a1 + 288) = *(_OWORD *)v98;
  *(_OWORD *)(a1 + 304) = v60;
  sub_100349198((_QWORD *)(a1 + 376), (uint64_t *)v100);
  *(_OWORD *)(a1 + 392) = v100[1];
  *(_OWORD *)(a1 + 401) = *(_OWORD *)((char *)&v100[1] + 9);
  v31 = 1;
LABEL_114:
  *(_QWORD *)buf = &v81;
  sub_1002A3684((void ***)buf);
LABEL_115:
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v100[0] + 1);
  if (*((_QWORD *)&v100[0] + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v100[0] + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return v31;
}

void sub_1017BAE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char *a53)
{
  uint64_t v53;

  a53 = &a12;
  sub_1002A3684((void ***)&a53);
  sub_100261F44(v53);
  _Unwind_Resume(a1);
}

void sub_1017BAED8(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint8_t *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint8_t *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint8_t *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  const char *v84;
  uint8_t *v85;
  uint64_t v86;
  int v87;
  _BYTE v88[10];
  _BYTE v89[10];
  __int16 v90;
  _BYTE v91[10];
  _BYTE v92[18];
  _BYTE v93[10];
  _BYTE v94[10];
  uint64_t v95;
  __int16 v96;
  int v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  uint8_t buf[4];
  _BYTE v103[10];
  _BYTE v104[10];
  __int16 v105;
  _BYTE v106[10];
  _BYTE v107[18];
  _BYTE v108[10];
  _BYTE v109[10];
  uint64_t v110;
  __int16 v111;
  int v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    v4 = *((_DWORD *)a1 + 2);
    v5 = *((_DWORD *)a1 + 3);
    v7 = *((_DWORD *)a1 + 5);
    v6 = *((_DWORD *)a1 + 6);
    v8 = *((_DWORD *)a1 + 4);
    v9 = a1[8];
    v10 = a1[5];
    v11 = a1[18];
    v12 = a1[15];
    v13 = *((_DWORD *)a1 + 48);
    v14 = a1[29];
    v15 = a1[26];
    *(_DWORD *)buf = 134352128;
    *(_QWORD *)v103 = v3;
    *(_WORD *)&v103[8] = 1026;
    *(_DWORD *)v104 = v4;
    *(_WORD *)&v104[4] = 1026;
    *(_DWORD *)&v104[6] = v5;
    v105 = 1026;
    *(_DWORD *)v106 = v6;
    *(_WORD *)&v106[4] = 1026;
    *(_DWORD *)&v106[6] = v8;
    *(_WORD *)v107 = 1026;
    *(_DWORD *)&v107[2] = v7;
    *(_WORD *)&v107[6] = 2050;
    *(_QWORD *)&v107[8] = v9;
    *(_WORD *)&v107[16] = 2050;
    *(_QWORD *)v108 = v10;
    *(_WORD *)&v108[8] = 2050;
    *(_QWORD *)v109 = v11;
    *(_WORD *)&v109[8] = 2050;
    v110 = v12;
    v111 = 1026;
    v112 = v13;
    v113 = 2050;
    v114 = v14;
    v115 = 2050;
    v116 = v15;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,map-caching analytics,startTime,%{public}.1lf,mapReq,%{public}d,mapReqProcessed,%{public}d,mapReqFailed,%{public}d,unqualifiedMapReq,%{public}d,unqualifiedMapReqProcessed,%{public}d,cacheTimeAvg,%{public}.1lf,cacheTimeMax,%{public}.1lf,roadCntAvg,%{public}.1lf,roadCntMax,%{public}.1lf,mapDataReqFailures,%{public}d,dataReturnTimeAvg,%{public}.1lf,dataReturnTimeMax,%{public}.1lf", buf, 0x6Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v42 = *a1;
    v43 = *((_DWORD *)a1 + 2);
    v44 = *((_DWORD *)a1 + 3);
    v46 = *((_DWORD *)a1 + 5);
    v45 = *((_DWORD *)a1 + 6);
    v47 = *((_DWORD *)a1 + 4);
    v48 = a1[8];
    v49 = a1[5];
    v50 = a1[18];
    v51 = a1[15];
    v52 = *((_DWORD *)a1 + 48);
    v53 = a1[29];
    v54 = a1[26];
    v87 = 134352128;
    *(_QWORD *)v88 = v42;
    *(_WORD *)&v88[8] = 1026;
    *(_DWORD *)v89 = v43;
    *(_WORD *)&v89[4] = 1026;
    *(_DWORD *)&v89[6] = v44;
    v90 = 1026;
    *(_DWORD *)v91 = v45;
    *(_WORD *)&v91[4] = 1026;
    *(_DWORD *)&v91[6] = v47;
    *(_WORD *)v92 = 1026;
    *(_DWORD *)&v92[2] = v46;
    *(_WORD *)&v92[6] = 2050;
    *(_QWORD *)&v92[8] = v48;
    *(_WORD *)&v92[16] = 2050;
    *(_QWORD *)v93 = v49;
    *(_WORD *)&v93[8] = 2050;
    *(_QWORD *)v94 = v50;
    *(_WORD *)&v94[8] = 2050;
    v95 = v51;
    v96 = 1026;
    v97 = v52;
    v98 = 2050;
    v99 = v53;
    v100 = 2050;
    v101 = v54;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM-MM,map-caching analytics,startTime,%{public}.1lf,mapReq,%{public}d,mapReqProcessed,%{public}d,mapReqFailed,%{public}d,unqualifiedMapReq,%{public}d,unqualifiedMapReqProcessed,%{public}d,cacheTimeAvg,%{public}.1lf,cacheTimeMax,%{public}.1lf,roadCntAvg,%{public}.1lf,roadCntMax,%{public}.1lf,mapDataReqFailures,%{public}d,dataReturnTimeAvg,%{public}.1lf,dataReturnTimeMax,%{public}.1lf", &v87, 108);
    v56 = (uint8_t *)v55;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics::debugLog()", "%s\n", v55);
    if (v56 != buf)
      free(v56);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v16 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v17 = *((_DWORD *)a1 + 70);
    v18 = *((_DWORD *)a1 + 71);
    v19 = a1[40];
    v20 = a1[37];
    v21 = a1[50];
    v22 = a1[47];
    v23 = a1[60];
    v24 = a1[57];
    *(_DWORD *)buf = 67241984;
    *(_DWORD *)v103 = v17;
    *(_WORD *)&v103[4] = 1026;
    *(_DWORD *)&v103[6] = v18;
    *(_WORD *)v104 = 2050;
    *(_QWORD *)&v104[2] = v19;
    v105 = 2050;
    *(_QWORD *)v106 = v20;
    *(_WORD *)&v106[8] = 2050;
    *(_QWORD *)v107 = v21;
    *(_WORD *)&v107[8] = 2050;
    *(_QWORD *)&v107[10] = v22;
    *(_WORD *)v108 = 2050;
    *(_QWORD *)&v108[2] = v23;
    *(_WORD *)v109 = 2050;
    *(_QWORD *)&v109[2] = v24;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,snapping analytics,numAttempts,%{public}d,numSuccess,%{public}d,numCandidateAvg,%{public}.1lf,numCandidateMax,%{public}.1lf,snapDistanceAvg,%{public}.1lf,snapDistanceMax,%{public}.1lf,courseDiffAvg,%{public}.1lf,courseDiffMax,%{public}.1lf", buf, 0x4Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v57 = *((_DWORD *)a1 + 70);
    v58 = *((_DWORD *)a1 + 71);
    v59 = a1[40];
    v60 = a1[37];
    v61 = a1[50];
    v62 = a1[47];
    v63 = a1[60];
    v64 = a1[57];
    v87 = 67241984;
    *(_DWORD *)v88 = v57;
    *(_WORD *)&v88[4] = 1026;
    *(_DWORD *)&v88[6] = v58;
    *(_WORD *)v89 = 2050;
    *(_QWORD *)&v89[2] = v59;
    v90 = 2050;
    *(_QWORD *)v91 = v60;
    *(_WORD *)&v91[8] = 2050;
    *(_QWORD *)v92 = v61;
    *(_WORD *)&v92[8] = 2050;
    *(_QWORD *)&v92[10] = v62;
    *(_WORD *)v93 = 2050;
    *(_QWORD *)&v93[2] = v63;
    *(_WORD *)v94 = 2050;
    *(_QWORD *)&v94[2] = v64;
    LODWORD(v86) = 74;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM-MM,snapping analytics,numAttempts,%{public}d,numSuccess,%{public}d,numCandidateAvg,%{public}.1lf,numCandidateMax,%{public}.1lf,snapDistanceAvg,%{public}.1lf,snapDistanceMax,%{public}.1lf,courseDiffAvg,%{public}.1lf,courseDiffMax,%{public}.1lf", &v87, v86);
    v66 = (uint8_t *)v65;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics::debugLog()", "%s\n", v65);
    if (v66 != buf)
      free(v66);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v25 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v26 = *((_DWORD *)a1 + 132);
    v27 = *((_DWORD *)a1 + 133);
    v28 = a1[71];
    v29 = a1[68];
    v30 = a1[81];
    v31 = a1[78];
    v32 = a1[91];
    v33 = a1[88];
    *(_DWORD *)buf = 67241984;
    *(_DWORD *)v103 = v26;
    *(_WORD *)&v103[4] = 1026;
    *(_DWORD *)&v103[6] = v27;
    *(_WORD *)v104 = 2050;
    *(_QWORD *)&v104[2] = v28;
    v105 = 2050;
    *(_QWORD *)v106 = v29;
    *(_WORD *)&v106[8] = 2050;
    *(_QWORD *)v107 = v30;
    *(_WORD *)&v107[8] = 2050;
    *(_QWORD *)&v107[10] = v31;
    *(_WORD *)v108 = 2050;
    *(_QWORD *)&v108[2] = v32;
    *(_WORD *)v109 = 2050;
    *(_QWORD *)&v109[2] = v33;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,astarsearch analytics,numSearch,%{public}d,numFailed,%{public}d,searchTimeAvg,%{public}.1lf,searchTimeMax,%{public}.1lf,iterCountAvg,%{public}.1lf,iterCountMax,%{public}.1lf,numRoadsAvg,%{public}.1lf,numRoadsMax,%{public}.1lf", buf, 0x4Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v67 = *((_DWORD *)a1 + 132);
    v68 = *((_DWORD *)a1 + 133);
    v69 = a1[71];
    v70 = a1[68];
    v71 = a1[81];
    v72 = a1[78];
    v73 = a1[91];
    v74 = a1[88];
    v87 = 67241984;
    *(_DWORD *)v88 = v67;
    *(_WORD *)&v88[4] = 1026;
    *(_DWORD *)&v88[6] = v68;
    *(_WORD *)v89 = 2050;
    *(_QWORD *)&v89[2] = v69;
    v90 = 2050;
    *(_QWORD *)v91 = v70;
    *(_WORD *)&v91[8] = 2050;
    *(_QWORD *)v92 = v71;
    *(_WORD *)&v92[8] = 2050;
    *(_QWORD *)&v92[10] = v72;
    *(_WORD *)v93 = 2050;
    *(_QWORD *)&v93[2] = v73;
    *(_WORD *)v94 = 2050;
    *(_QWORD *)&v94[2] = v74;
    LODWORD(v86) = 74;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM-MM,astarsearch analytics,numSearch,%{public}d,numFailed,%{public}d,searchTimeAvg,%{public}.1lf,searchTimeMax,%{public}.1lf,iterCountAvg,%{public}.1lf,iterCountMax,%{public}.1lf,numRoadsAvg,%{public}.1lf,numRoadsMax,%{public}.1lf", &v87, v86);
    v76 = (uint8_t *)v75;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics::debugLog()", "%s\n", v75);
    if (v76 != buf)
      free(v76);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v34 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v35 = *((_DWORD *)a1 + 194);
    v36 = *((_DWORD *)a1 + 195);
    v37 = a1[102];
    v38 = a1[99];
    v39 = *((_DWORD *)a1 + 216);
    v40 = *((_DWORD *)a1 + 217);
    v41 = *((_DWORD *)a1 + 218);
    *(_DWORD *)buf = 67241728;
    *(_DWORD *)v103 = v35;
    *(_WORD *)&v103[4] = 1026;
    *(_DWORD *)&v103[6] = v36;
    *(_WORD *)v104 = 2050;
    *(_QWORD *)&v104[2] = v37;
    v105 = 2050;
    *(_QWORD *)v106 = v38;
    *(_WORD *)&v106[8] = 1026;
    *(_DWORD *)v107 = v39;
    *(_WORD *)&v107[4] = 1026;
    *(_DWORD *)&v107[6] = v40;
    *(_WORD *)&v107[10] = 1026;
    *(_DWORD *)&v107[12] = v41;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,general analytics,batchedLocAttemps,%{public}d,batchedLocFailures,%{public}d,processingTimeAvg,%{public}.1lf,processingTimeMax,%{public}.1lf,resetCount,%{public}d,screened,%{public}d,failedScreening,%{public}d", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v77 = *((_DWORD *)a1 + 194);
    v78 = *((_DWORD *)a1 + 195);
    v79 = a1[102];
    v80 = a1[99];
    v81 = *((_DWORD *)a1 + 216);
    v82 = *((_DWORD *)a1 + 217);
    v83 = *((_DWORD *)a1 + 218);
    v87 = 67241728;
    *(_DWORD *)v88 = v77;
    *(_WORD *)&v88[4] = 1026;
    *(_DWORD *)&v88[6] = v78;
    *(_WORD *)v89 = 2050;
    *(_QWORD *)&v89[2] = v79;
    v90 = 2050;
    *(_QWORD *)v91 = v80;
    *(_WORD *)&v91[8] = 1026;
    *(_DWORD *)v92 = v81;
    *(_WORD *)&v92[4] = 1026;
    *(_DWORD *)&v92[6] = v82;
    *(_WORD *)&v92[10] = 1026;
    *(_DWORD *)&v92[12] = v83;
    LODWORD(v86) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM-MM,general analytics,batchedLocAttemps,%{public}d,batchedLocFailures,%{public}d,processingTimeAvg,%{public}.1lf,processingTimeMax,%{public}.1lf,resetCount,%{public}d,screened,%{public}d,failedScreening,%{public}d", &v87, v86);
    v85 = (uint8_t *)v84;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics::debugLog()", "%s\n", v84);
    if (v85 != buf)
      free(v85);
  }
}

BOOL sub_1017BB79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  _QWORD **v18;
  double *v19;
  unint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  _BOOL4 v39;
  double v40;
  std::__shared_weak_count *v41;
  double v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  BOOL v45;
  unint64_t *v46;
  unint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  _BOOL4 v52;
  double v53;
  double v54;
  _BOOL4 v55;
  double v56;
  double v57;
  BOOL v58;
  double v59;
  NSObject *v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _QWORD *v70;
  _QWORD **v71;
  uint64_t v73;
  uint64_t *v74;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  const char *v82;
  uint8_t *v83;
  NSObject *v84;
  uint64_t v85;
  _BOOL8 v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint8_t *v91;
  uint64_t v92;
  _BYTE *v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  NSObject *v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  NSObject *v107;
  uint64_t v108;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  NSObject *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  double v123;
  double v124;
  double v125;
  uint64_t v126;
  unint64_t v127;
  double v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  double v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  uint64_t v143;
  unint64_t v144;
  double v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  double v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  const char *v153;
  uint8_t *v154;
  uint64_t v155;
  const char *v156;
  uint8_t *v157;
  const char *v158;
  uint8_t *v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double *v169;
  double v171;
  double v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  int v177;
  _QWORD *v178[2];
  double v179;
  double v180;
  double v181;
  _QWORD v182[3];
  __int128 v183;
  char v184;
  __int128 v185;
  __int128 v186;
  _QWORD **v187;
  _QWORD *v188;
  unint64_t v189;
  _BYTE v190[22];
  __int16 v191;
  double v192;
  __int16 v193;
  double v194;
  __int16 v195;
  uint64_t v196;
  __int16 v197;
  double v198;
  __int16 v199;
  double v200;
  __int16 v201;
  double v202;
  __int16 v203;
  uint64_t v204;
  __int16 v205;
  uint64_t v206;
  __int16 v207;
  double v208;
  __int16 v209;
  _QWORD *v210;
  __int16 v211;
  unint64_t v212;
  __int16 v213;
  double v214;
  __int16 v215;
  double v216;
  __int16 v217;
  double v218;
  __int16 v219;
  double v220;
  __int16 v221;
  uint64_t v222;
  __int16 v223;
  int v224;
  __int16 v225;
  uint64_t v226;
  uint8_t buf[64];
  double v228;
  __int16 v229;
  double v230;
  __int16 v231;
  uint64_t v232;
  __int16 v233;
  uint64_t v234;
  __int16 v235;
  double v236;
  __int16 v237;
  _QWORD *v238;
  __int16 v239;
  unint64_t v240;
  __int16 v241;
  double v242;
  __int16 v243;
  double v244;
  __int16 v245;
  double v246;
  __int16 v247;
  double v248;
  __int16 v249;
  uint64_t v250;
  __int16 v251;
  int v252;
  __int16 v253;
  uint64_t v254;

  v6 = *(_QWORD *)(a1 + 424);
  if (!v6)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v84 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v85 = *(_QWORD *)(a2 + 72);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v85;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,MapRoadBuffer is not initialized", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v155 = *(_QWORD *)(a2 + 72);
      *(_DWORD *)v190 = 134349056;
      *(_QWORD *)&v190[4] = v155;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,MapRoadBuffer is not initialized", v190, 12);
      v157 = (uint8_t *)v156;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::getSnappedSolution(const CLGpsOdometryRhythmic_Types::GpsPoint &, CLGpsOdometryRhythmic_Types::SnapData &, std::string)", "%s\n", v156);
      if (v157 != buf)
        free(v157);
    }
    return 0;
  }
  ++*(_DWORD *)(a1 + 944);
  v166 = *(double *)(a1 + 640);
  v167 = *(double *)(a1 + 632);
  if (v166 >= v167 + *(double *)(a2 + 24) * 2.0)
    v8 = v167 + *(double *)(a2 + 24) * 2.0;
  else
    v8 = *(double *)(a1 + 640);
  v188 = 0;
  *(double *)&v189 = 0.0;
  v187 = &v188;
  v165 = v8;
  sub_1017B7FFC(v6, a1 + 664, (uint64_t)&v187, *(double *)a2, *(double *)(a2 + 8), v8);
  if (*(double *)&v189 == 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v87 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v88 = *(_QWORD *)(a2 + 72);
      *(_DWORD *)buf = 134349824;
      *(_QWORD *)&buf[4] = v88;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v165;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v167;
      *(_WORD *)&buf[32] = 2050;
      *(double *)&buf[34] = v166;
      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,roads not available close to this point,radius,%{public}.1lf,minRadius,%{public}.1lf,maxRadius,%{public}.1lf", buf, 0x2Au);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_130;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v89 = *(_QWORD *)(a2 + 72);
    *(_DWORD *)v190 = 134349824;
    *(_QWORD *)&v190[4] = v89;
    *(_WORD *)&v190[12] = 2050;
    *(double *)&v190[14] = v165;
    v191 = 2050;
    v192 = v167;
    v193 = 2050;
    v194 = v166;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,roads not available close to this point,radius,%{public}.1lf,minRadius,%{public}.1lf,maxRadius,%{public}.1lf", v190, 42);
    v91 = (uint8_t *)v90;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::getSnappedSolution(const CLGpsOdometryRhythmic_Types::GpsPoint &, CLGpsOdometryRhythmic_Types::SnapData &, std::string)", "%s\n", v90);
    goto LABEL_175;
  }
  sub_100785E0C((char *)(a1 + 952), (double)v189);
  memset(v182, 0, sizeof(v182));
  v183 = xmmword_101BAFC90;
  v184 = 0;
  v185 = 0u;
  v186 = 0u;
  v169 = (double *)(a2 + 64);
  sub_100584090((uint64_t)v182, (double *)(a2 + 24), (double *)(a2 + 64));
  sub_10058413C((uint64_t)v182);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 64) = v11;
  *(_OWORD *)(a3 + 16) = v9;
  *(_OWORD *)(a3 + 32) = v10;
  v12 = v187;
  if (v187 == &v188)
  {
    *(_BYTE *)(a3 + 80) = 0;
    v92 = a3 + 80;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v92 + 24) = _Q0;
    v97 = (_BYTE *)v92;
    goto LABEL_103;
  }
  v13 = (double *)(a1 + 32);
  v14 = *(double *)a2;
  v15 = *(double *)(a2 + 8);
  v163 = a1;
  v16 = -1.0;
  do
  {
    v18 = (_QWORD **)(v12 + 7);
    v17 = v12[7];
    if (!v17)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v98 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v99 = *(_QWORD *)(a2 + 72);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v99;
        _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,road is nullptr", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_130;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v100 = *(_QWORD *)(a2 + 72);
      *(_DWORD *)v190 = 134349056;
      *(_QWORD *)&v190[4] = v100;
      LODWORD(v162) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,road is nullptr", v190, v162);
      v91 = (uint8_t *)v101;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::getSnappedSolution(const CLGpsOdometryRhythmic_Types::GpsPoint &, CLGpsOdometryRhythmic_Types::SnapData &, std::string)", "%s\n", v101);
      goto LABEL_175;
    }
    v19 = *(double **)(v17 + 136);
    v20 = *(_QWORD *)(v17 + 144) - (_QWORD)v19;
    if ((int)(v20 >> 4) <= 1)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021CF528);
      v102 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021CF528);
        *(_WORD *)v190 = 0;
        LODWORD(v162) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", v190, v162);
        v159 = (uint8_t *)v158;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "%s\n", v158);
        if (v159 != buf)
          free(v159);
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v103 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v104 = *(_QWORD *)(a2 + 72);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v104;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,findClosestPointOnRoad returned false", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_130;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v105 = *(_QWORD *)(a2 + 72);
      *(_DWORD *)v190 = 134349056;
      *(_QWORD *)&v190[4] = v105;
      LODWORD(v162) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,findClosestPointOnRoad returned false", v190, v162);
      v91 = (uint8_t *)v106;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::getSnappedSolution(const CLGpsOdometryRhythmic_Types::GpsPoint &, CLGpsOdometryRhythmic_Types::SnapData &, std::string)", "%s\n", v106);
      goto LABEL_175;
    }
    v21 = *v19;
    v22 = v19[1];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)v190 = 0;
    sub_10011E780(v13, (double *)buf, (double *)&buf[8], (double *)v190, v14, v15, 0.0, v21, v22, 0.0);
    v23 = 0;
    v24 = (v20 >> 4) - 1;
    v25 = 0.0;
    v26 = -1.0;
    v27 = 0.0;
    do
    {
      v28 = *(_QWORD *)(v17 + 136) + v23;
      v29 = *(double *)(v28 + 16);
      v30 = *(double *)(v28 + 24);
      *(_QWORD *)v190 = 0;
      *(_QWORD *)&v190[8] = 0;
      *(_QWORD *)&v173 = 0;
      sub_10011E780(v13, (double *)v190, (double *)&v190[8], (double *)&v173, v14, v15, 0.0, v29, v30, 0.0);
      v31 = (*(double *)buf - *(double *)v190) * (*(double *)buf - *(double *)v190)
          + (*(double *)&buf[8] - *(double *)&v190[8]) * (*(double *)&buf[8] - *(double *)&v190[8]);
      v32 = 0.0 - *(double *)buf;
      if (v31 < 0.001)
      {
        v33 = v32 * v32;
        v34 = 0.0;
        v35 = 0.0 - *(double *)&buf[8];
LABEL_13:
        v36 = v33 + v35 * v35;
        goto LABEL_18;
      }
      v34 = ((0.0 - *(double *)&buf[8]) * (*(double *)&v190[8] - *(double *)&buf[8])
           + v32 * (*(double *)v190 - *(double *)buf))
          / v31;
      if (v34 >= 0.0)
      {
        if (v34 <= 1.0)
        {
          v33 = (0.0 - (*(double *)buf + (*(double *)v190 - *(double *)buf) * v34))
              * (0.0 - (*(double *)buf + (*(double *)v190 - *(double *)buf) * v34));
          v35 = 0.0 - (*(double *)&buf[8] + (*(double *)&v190[8] - *(double *)&buf[8]) * v34);
          goto LABEL_13;
        }
        v36 = (0.0 - *(double *)v190) * (0.0 - *(double *)v190)
            + (0.0 - *(double *)&v190[8]) * (0.0 - *(double *)&v190[8]);
        v34 = 1.0;
      }
      else
      {
        v36 = v32 * v32 + (0.0 - *(double *)&buf[8]) * (0.0 - *(double *)&buf[8]);
        v34 = 0.0;
      }
LABEL_18:
      v37 = sqrt(v31);
      v38 = sqrt(v36);
      v39 = v26 < 0.0;
      if (v38 < v26)
        v39 = 1;
      v40 = v27 + v37 * v34;
      if (v39)
      {
        v26 = v38;
        v25 = v40;
      }
      v27 = v27 + v37;
      *(_QWORD *)buf = *(_QWORD *)v190;
      *(_QWORD *)&buf[8] = *(_QWORD *)&v190[8];
      v23 += 16;
      --v24;
    }
    while (v24);
    v41 = (std::__shared_weak_count *)v12[8];
    if (v27 >= 0.001)
      v42 = v25 / v27;
    else
      v42 = 0.0;
    v178[0] = *((_QWORD **)v12 + 7);
    v178[1] = &v41->__vftable;
    v179 = -1.0;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v44 = __ldxr(p_shared_owners);
      while (__stxr(v44 + 1, p_shared_owners));
    }
    v45 = sub_1017C0540(v13, v178, &v180, &v179, v42);
    if (v41)
    {
      v46 = (unint64_t *)&v41->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (!v45)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v107 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v108 = *(_QWORD *)(a2 + 72);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v108;
        _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,interpolateOnRoad,interpolateProjections returned false", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_130;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v160 = *(_QWORD *)(a2 + 72);
      *(_DWORD *)v190 = 134349056;
      *(_QWORD *)&v190[4] = v160;
      LODWORD(v162) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,interpolateOnRoad,interpolateProjections returned false", v190, v162);
      v91 = (uint8_t *)v161;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::getSnappedSolution(const CLGpsOdometryRhythmic_Types::GpsPoint &, CLGpsOdometryRhythmic_Types::SnapData &, std::string)", "%s\n", v161);
LABEL_175:
      if (v91 != buf)
        free(v91);
LABEL_130:
      v86 = 0;
      goto LABEL_131;
    }
    v172 = v42;
    v173 = 0uLL;
    *(_QWORD *)&v174 = 0;
    *((_QWORD *)&v174 + 1) = 0x3FF0000000000000;
    v175 = 0u;
    v176 = 0u;
    v177 = 0;
    v48 = v180;
    v49 = v181;
    sub_10011E780(v13, (double *)&v175 + 1, (double *)&v175, (double *)&v176, v180, v181, *(double *)(a2 + 16), *(double *)a2, *(double *)(a2 + 8), *(double *)(a2 + 16));
    v50 = *(double *)(a2 + 56);
    if (v50 >= 0.0)
    {
      v51 = v179;
      v52 = v179 >= 0.0;
      if (*v169 > 0.0 && v179 >= 0.0)
      {
        v168 = v16;
        v53 = v179;
        v54 = fmod(v50 - v179, 360.0);
        v51 = v53;
        v16 = v168;
        if (v54 < 0.0)
          v54 = v54 + 360.0;
        if (v54 > 180.0)
          v54 = v54 + -360.0;
        *((_QWORD *)&v176 + 1) = fabs(v54);
        v52 = 1;
      }
    }
    else
    {
      v51 = v179;
      v52 = v179 >= 0.0;
    }
    sub_1005846E4((uint64_t)v182, (uint64_t)&v173);
    v171 = v51;
    if (*(double *)(a2 + 56) >= 0.0 && (*v169 > 0.0 ? (v55 = v52) : (v55 = 0), v55))
    {
      memset(buf, 0, 24);
      *(_QWORD *)&buf[24] = 0x3FF0000000000000;
      memset(&buf[32], 0, 32);
      LODWORD(v228) = 0;
      sub_1001C6800(v51 + 180.0);
      *(_OWORD *)&buf[32] = v175;
      *(_QWORD *)&buf[48] = v176;
      v164 = v56;
      v57 = fmod(*(double *)(a2 + 56) - v56, 360.0);
      if (v57 < 0.0)
        v57 = v57 + 360.0;
      if (v57 > 180.0)
        v57 = v57 + -360.0;
      *(_QWORD *)&buf[56] = fabs(v57);
      sub_1005846E4((uint64_t)v182, (uint64_t)buf);
      v58 = *(double *)buf <= *(double *)&v173;
      if (*(double *)buf > *(double *)&v173)
      {
        v179 = v164;
        v175 = *(_OWORD *)&buf[32];
        v176 = *(_OWORD *)&buf[48];
        v177 = LODWORD(v228);
        v171 = v164;
        v173 = *(_OWORD *)buf;
        v174 = *(_OWORD *)&buf[16];
      }
    }
    else
    {
      v58 = 1;
    }
    v59 = *(double *)&v173;
    if (*(double *)&v173 > v16)
    {
      *(double *)a3 = v48;
      *(double *)(a3 + 8) = v49;
      *(double *)(a3 + 120) = v172;
      if (*(double *)(a3 + 56) >= 0.0 && *(double *)(a3 + 64) > 0.0 && v171 >= 0.0)
        *(double *)(a3 + 56) = v171;
      sub_100349198((_QWORD *)(a3 + 88), v12 + 7);
      *(_BYTE *)(a3 + 128) = v58;
      v16 = v59;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v60 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v61 = a4;
      if (*((char *)a4 + 23) < 0)
        v61 = (uint64_t *)*a4;
      v62 = *v18;
      if (*v18)
        v62 = (_QWORD *)*v62;
      v63 = *(_QWORD *)(a2 + 64);
      v64 = *(_QWORD *)(a2 + 72);
      v65 = *(double *)a2;
      v66 = *(_QWORD *)(a2 + 8);
      v67 = *(_QWORD *)(a2 + 24);
      v68 = *(_QWORD *)(a2 + 56);
      v69 = *(unsigned __int8 *)(a3 + 128);
      *(_DWORD *)buf = 134353411;
      *(_QWORD *)&buf[4] = v64;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v61;
      *(_WORD *)&buf[22] = 2049;
      *(double *)&buf[24] = v65;
      *(_WORD *)&buf[32] = 2049;
      *(_QWORD *)&buf[34] = v66;
      *(_WORD *)&buf[42] = 2050;
      *(_QWORD *)&buf[44] = v68;
      *(_WORD *)&buf[52] = 2049;
      *(double *)&buf[54] = v180;
      *(_WORD *)&buf[62] = 2049;
      v228 = v181;
      v229 = 2050;
      v230 = v179;
      v231 = 2050;
      v232 = v67;
      v233 = 2050;
      v234 = v63;
      v235 = 2049;
      v236 = v16;
      v237 = 2049;
      v238 = v62;
      v239 = 2050;
      v240 = v189;
      v241 = 2050;
      v242 = v172;
      v243 = 2050;
      v244 = v165;
      v245 = 2050;
      v246 = v167;
      v247 = 2050;
      v248 = v166;
      v249 = 1026;
      LODWORD(v250) = v69;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,%{public}.1lf,%s snap candidate,raw,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,candidate,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,score,%{private}.9lf,roadID,%{private}lld,numRoads,%{public}lu,projection,%{public}.2lf,searchRadius,%{public}.2lf,minRadius,%{public}.1lf,maxRadius,%{public}.1lf,forward,%{public}d", buf, 0xB2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v73 = *(_QWORD *)(a2 + 72);
      v74 = a4;
      if (*((char *)a4 + 23) < 0)
        v74 = (uint64_t *)*a4;
      v76 = *(double *)a2;
      v75 = *(double *)(a2 + 8);
      v77 = *(_QWORD *)(a2 + 24);
      v78 = *(_QWORD *)(a2 + 56);
      v79 = *(_QWORD *)(a2 + 64);
      v80 = *v18;
      if (*v18)
        v80 = (_QWORD *)*v80;
      v81 = *(unsigned __int8 *)(a3 + 128);
      *(_DWORD *)v190 = 134353411;
      *(_QWORD *)&v190[4] = v73;
      *(_WORD *)&v190[12] = 2080;
      *(_QWORD *)&v190[14] = v74;
      v191 = 2049;
      v192 = v76;
      v193 = 2049;
      v194 = v75;
      v195 = 2050;
      v196 = v78;
      v197 = 2049;
      v198 = v180;
      v199 = 2049;
      v200 = v181;
      v201 = 2050;
      v202 = v179;
      v203 = 2050;
      v204 = v77;
      v205 = 2050;
      v206 = v79;
      v207 = 2049;
      v208 = v16;
      v209 = 2049;
      v210 = v80;
      v211 = 2050;
      v212 = v189;
      v213 = 2050;
      v214 = v172;
      v215 = 2050;
      v216 = v165;
      v217 = 2050;
      v218 = v167;
      v219 = 2050;
      v220 = v166;
      v221 = 1026;
      LODWORD(v222) = v81;
      LODWORD(v162) = 178;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM-MM,%{public}.1lf,%s snap candidate,raw,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,candidate,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,score,%{private}.9lf,roadID,%{private}lld,numRoads,%{public}lu,projection,%{public}.2lf,searchRadius,%{public}.2lf,minRadius,%{public}.1lf,maxRadius,%{public}.1lf,forward,%{public}d", v190, v162);
      v83 = (uint8_t *)v82;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::getSnappedSolution(const CLGpsOdometryRhythmic_Types::GpsPoint &, CLGpsOdometryRhythmic_Types::SnapData &, std::string)", "%s\n", v82);
      if (v83 != buf)
        free(v83);
    }
    v70 = (_QWORD *)v12[1];
    if (v70)
    {
      do
      {
        v71 = (_QWORD **)v70;
        v70 = (_QWORD *)*v70;
      }
      while (v70);
    }
    else
    {
      do
      {
        v71 = (_QWORD **)v12[2];
        _ZF = *v71 == v12;
        v12 = v71;
      }
      while (!_ZF);
    }
    v12 = v71;
  }
  while (v71 != &v188);
  *(_BYTE *)(a3 + 80) = 0;
  v97 = (_BYTE *)(a3 + 80);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 104) = _Q0;
  if (v16 > 0.0 && sub_1017B1900((double *)a3))
  {
    v111 = sub_10011E634(v13, *(double *)a3, *(double *)(a3 + 8), *(double *)a2, *(double *)(a2 + 8), 0.0);
    *(double *)(a3 + 104) = v111;
    *(_BYTE *)(a3 + 80) = v111 < 20.0;
    if (v111 < 20.0)
    {
      v112 = *(double *)(a3 + 56);
      if (v112 < 0.0)
        goto LABEL_145;
      v113 = *(double *)(a3 + 64);
      if (v113 <= 0.0)
        goto LABEL_145;
      v114 = *(double *)(a2 + 56);
      if (v114 < 0.0 || *(double *)(a2 + 64) <= 0.0)
        goto LABEL_145;
      v115 = fmod(v114 - v112, 360.0);
      if (v115 < 0.0)
        v115 = v115 + 360.0;
      if (v115 > 180.0)
        v115 = v115 + -360.0;
      v116 = fabs(v115);
      *(double *)(a3 + 112) = v116;
      *(_BYTE *)(a3 + 80) = v116 < v113 + 30.0;
      if (v116 < v113 + 30.0)
LABEL_145:
        ++*(_DWORD *)(v163 + 948);
    }
    sub_100785E0C((char *)(v163 + 1032), v111);
    sub_100785E0C((char *)(v163 + 1112), *(double *)(a3 + 112));
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v117 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v118 = a4;
      if (*((char *)a4 + 23) < 0)
        v118 = (uint64_t *)*a4;
      v120 = *(_QWORD *)(a2 + 64);
      v119 = *(_QWORD *)(a2 + 72);
      v122 = *(double *)a2;
      v121 = *(_QWORD *)(a2 + 8);
      v124 = *(double *)a3;
      v123 = *(double *)(a3 + 8);
      v125 = *(double *)(a3 + 56);
      v127 = *(_QWORD *)(a2 + 48);
      v126 = *(_QWORD *)(a2 + 56);
      v128 = *(double *)(a2 + 16);
      v129 = *(_QWORD *)(a2 + 24);
      v130 = *(_QWORD **)(a2 + 40);
      v131 = *(_QWORD **)(a3 + 88);
      if (v131)
        v131 = (_QWORD *)*v131;
      v132 = *(double *)(a3 + 104);
      v133 = *(_QWORD *)(a3 + 112);
      v134 = *(unsigned __int8 *)(a3 + 80);
      v135 = *(_QWORD *)(a3 + 120);
      *(_DWORD *)buf = 134353923;
      *(_QWORD *)&buf[4] = v119;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v118;
      *(_WORD *)&buf[22] = 2049;
      *(double *)&buf[24] = v122;
      *(_WORD *)&buf[32] = 2049;
      *(_QWORD *)&buf[34] = v121;
      *(_WORD *)&buf[42] = 2050;
      *(_QWORD *)&buf[44] = v126;
      *(_WORD *)&buf[52] = 2049;
      *(double *)&buf[54] = v124;
      *(_WORD *)&buf[62] = 2049;
      v228 = v123;
      v229 = 2050;
      v230 = v125;
      v231 = 2050;
      v232 = v129;
      v233 = 2050;
      v234 = v120;
      v235 = 2050;
      v236 = v128;
      v237 = 2050;
      v238 = v130;
      v239 = 2050;
      v240 = v127;
      v241 = 2049;
      v242 = v16;
      v243 = 2049;
      v244 = *(double *)&v131;
      v245 = 2050;
      v246 = *(double *)&v189;
      v247 = 2050;
      v248 = v132;
      v249 = 2050;
      v250 = v133;
      v251 = 1026;
      v252 = v134;
      v253 = 2050;
      v254 = v135;
      _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,%{public}.1lf,%s snapped solution,raw,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,snapped,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,altitude,%{public}.2lf,speed,%{public}.2lf,speedUnc,%{public}.2lf,score,%{private}.9lf,roadID,%{private}lld,numRoads,%{public}lu,snapDistance,%{public}.2lf,snapCourseDiff,%{public}.2lf,isSnapValid,%{public}d,projection,%{public}.2lf", buf, 0xC6u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      if (*((char *)a4 + 23) < 0)
        a4 = (uint64_t *)*a4;
      v137 = *(_QWORD *)(a2 + 64);
      v136 = *(_QWORD *)(a2 + 72);
      v138 = *(double *)a2;
      v139 = *(double *)(a2 + 8);
      v141 = *(double *)a3;
      v140 = *(double *)(a3 + 8);
      v142 = *(double *)(a3 + 56);
      v144 = *(_QWORD *)(a2 + 48);
      v143 = *(_QWORD *)(a2 + 56);
      v145 = *(double *)(a2 + 16);
      v146 = *(_QWORD *)(a2 + 24);
      v147 = *(_QWORD **)(a2 + 40);
      v148 = *(_QWORD **)(a3 + 88);
      if (v148)
        v148 = (_QWORD *)*v148;
      v149 = *(double *)(a3 + 104);
      v150 = *(_QWORD *)(a3 + 112);
      v151 = *(unsigned __int8 *)(a3 + 80);
      v152 = *(_QWORD *)(a3 + 120);
      *(_DWORD *)v190 = 134353923;
      *(_QWORD *)&v190[4] = v136;
      *(_WORD *)&v190[12] = 2080;
      *(_QWORD *)&v190[14] = a4;
      v191 = 2049;
      v192 = v138;
      v193 = 2049;
      v194 = v139;
      v195 = 2050;
      v196 = v143;
      v197 = 2049;
      v198 = v141;
      v199 = 2049;
      v200 = v140;
      v201 = 2050;
      v202 = v142;
      v203 = 2050;
      v204 = v146;
      v205 = 2050;
      v206 = v137;
      v207 = 2050;
      v208 = v145;
      v209 = 2050;
      v210 = v147;
      v211 = 2050;
      v212 = v144;
      v213 = 2049;
      v214 = v16;
      v215 = 2049;
      v216 = *(double *)&v148;
      v217 = 2050;
      v218 = *(double *)&v189;
      v219 = 2050;
      v220 = v149;
      v221 = 2050;
      v222 = v150;
      v223 = 1026;
      v224 = v151;
      v225 = 2050;
      v226 = v152;
      LODWORD(v162) = 198;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM-MM,%{public}.1lf,%s snapped solution,raw,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,snapped,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,altitude,%{public}.2lf,speed,%{public}.2lf,speedUnc,%{public}.2lf,score,%{private}.9lf,roadID,%{private}lld,numRoads,%{public}lu,snapDistance,%{public}.2lf,snapCourseDiff,%{public}.2lf,isSnapValid,%{public}d,projection,%{public}.2lf", v190, v162);
      v154 = (uint8_t *)v153;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::getSnappedSolution(const CLGpsOdometryRhythmic_Types::GpsPoint &, CLGpsOdometryRhythmic_Types::SnapData &, std::string)", "%s\n", v153);
      if (v154 != buf)
        free(v154);
    }
  }
LABEL_103:
  v86 = *v97 != 0;
LABEL_131:
  sub_1017C409C((uint64_t)&v187, v188);
  return v86;
}

void sub_1017BCDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,_QWORD *a53)
{
  sub_1017C409C((uint64_t)&a52, a53);
  _Unwind_Resume(a1);
}

uint64_t sub_1017BCE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  const char *v9;
  _DWORD v10[3];
  _DWORD buf[3];

  v3 = *(_QWORD *)(a3 + 72);
  if (*(_BYTE *)(a2 + 80) && *(_QWORD *)(a2 + 88))
  {
    if (*(_BYTE *)(a3 + 80) && *(_QWORD *)(a3 + 88))
      operator new();
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 134349056;
      *(_QWORD *)&buf[1] = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,destination snap data is invalid", (uint8_t *)buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v10[0] = 134349056;
    *(_QWORD *)&v10[1] = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,destination snap data is invalid", v10, 12);
    v6 = (char *)v9;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::buildPath(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v9);
LABEL_23:
    if (v6 != (char *)buf)
      free(v6);
    return 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    buf[0] = 134349056;
    *(_QWORD *)&buf[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,start snap data is invalid", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v10[0] = 134349056;
    *(_QWORD *)&v10[1] = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,start snap data is invalid", v10, 12);
    v6 = (char *)v5;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::buildPath(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v5);
    goto LABEL_23;
  }
  return 0;
}

void sub_1017BED94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,_QWORD *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55)
{
  sub_100008848((uint64_t)&a11, a12);
  sub_100261F44((uint64_t)&a14);
  a55 = (void **)&a16;
  sub_1002A3684(&a55);
  a55 = (void **)&a19;
  sub_1002A3684(&a55);
  a55 = (void **)&a24;
  sub_1002A3684(&a55);
  sub_1017C409C((uint64_t)&a27, a28);
  sub_100261F44((uint64_t)&a44);
  sub_100261F44((uint64_t)&a46);
  _Unwind_Resume(a1);
}

uint64_t sub_1017BEF28(uint64_t *a1, double *a2, double a3, double a4)
{
  uint64_t v4;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v22;
  uint64_t v23;

  *a2 = 0.0;
  v4 = *a1;
  if (a1[1] == *a1)
    return 1;
  v9 = 0;
  while (1)
  {
    v10 = *(_OWORD *)(v4 + 16 * v9);
    v23 = *(_QWORD *)(v4 + 16 * v9);
    v11 = *(std::__shared_weak_count **)(v4 + 16 * v9 + 8);
    if (*((_QWORD *)&v10 + 1))
      break;
    v14 = *(_QWORD *)v10;
    if (!*(_QWORD *)v10)
      return 0;
LABEL_9:
    sub_1004078E0((_QWORD *)v14);
    if (*(_BYTE *)(v23 + 16))
      v15 = 0.0;
    else
      v15 = 1.0;
    v16 = a1[1] - *a1;
    v17 = a3;
    v18 = a4;
    if (v16 != 16)
    {
      v18 = (double)*(unsigned __int8 *)(v23 + 16);
      if (v9)
      {
        if ((v16 >> 4) - 1 == v9)
          v18 = a4;
        v17 = v15;
      }
      else
      {
        v17 = a3;
      }
    }
    *a2 = *a2 + vabdd_f64(v17, v18) * *(double *)(v14 + 40);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    ++v9;
    v4 = *a1;
    if (v9 >= (a1[1] - *a1) >> 4)
      return 1;
  }
  v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  v14 = *(_QWORD *)v10;
  if (*(_QWORD *)v10)
    goto LABEL_9;
  do
    v22 = __ldaxr(v12);
  while (__stlxr(v22 - 1, v12));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return 0;
}

void sub_1017BF0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1017BF0D8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  double v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  unsigned int v18;
  double v19;
  uint64_t v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  BOOL v36;
  unint64_t *v37;
  unint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  double v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  _OWORD *v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  NSObject *v89;
  uint64_t v90;
  int v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  double v96;
  const char *v97;
  uint8_t *v98;
  const char *v99;
  uint8_t *v100;
  NSObject *v101;
  double v102;
  NSObject *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  const char *v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint8_t *v113;
  double v114;
  const char *v115;
  uint8_t *v116;
  const char *v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  double v123;
  double v124;
  char **v125;
  char **v126;
  double v127;
  double v128;
  double v129;
  uint64_t v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  _QWORD *v136[2];
  double v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  int v141;
  double v142;
  __int16 v143;
  double v144;
  __int16 v145;
  _BYTE v146[18];
  __int16 v147;
  double v148;
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  int v152;
  __int16 v153;
  double v154;
  __int16 v155;
  double v156;
  __int16 v157;
  double v158;
  __int16 v159;
  double v160;
  __int16 v161;
  double v162;
  __int16 v163;
  double v164;
  __int16 v165;
  double v166;
  __int16 v167;
  double v168;
  __int16 v169;
  int v170;
  __int16 v171;
  uint64_t v172;
  __int16 v173;
  double v174;
  __int16 v175;
  double v176;
  uint8_t buf[4];
  double v178;
  __int16 v179;
  double v180;
  __int16 v181;
  _BYTE v182[18];
  __int16 v183;
  double v184;
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  int v188;
  __int16 v189;
  double v190;
  __int16 v191;
  double v192;
  __int16 v193;
  double v194;
  __int16 v195;
  double v196;
  __int16 v197;
  double v198;
  __int16 v199;
  double v200;
  __int16 v201;
  double v202;
  __int16 v203;
  double v204;
  __int16 v205;
  int v206;
  __int16 v207;
  uint64_t v208;
  __int16 v209;
  double v210;
  __int16 v211;
  double v212;

  v124 = sub_1001FCBB4();
  v120 = a2;
  v121 = a3;
  v8 = *(double *)(a2 + 72);
  v135 = *(double *)(a3 + 72);
  if (v135 - v8 <= 0.0)
    return;
  ++*(_DWORD *)(a1 + 1440);
  v9 = *a4;
  if (a4[1] == *a4)
    return;
  v10 = 0;
  v126 = (char **)(a1 + 232);
  v125 = (char **)(a1 + 256);
  v11 = *(double *)a1 / (v135 - v8);
  v131 = 0.0;
  v12 = 0.0;
  v122 = a4;
  v134 = v11;
  do
  {
    v13 = *(_OWORD *)(v9 + 16 * v10);
    v140 = v13;
    if (*((_QWORD *)&v13 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = (uint64_t **)v13;
    v17 = *(_QWORD *)v13;
    if (!*(_QWORD *)v13)
    {
      ++*(_DWORD *)(a1 + 1444);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v22 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v23 = (uint64_t)(a4[1] - *a4) >> 4;
        *(_DWORD *)buf = 134349568;
        v178 = v135;
        v179 = 2050;
        v180 = *(double *)&v23;
        v181 = 1026;
        *(_DWORD *)v182 = v10;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,updateBatchedLocations,null road vector,count,%{public}lu,iterations,%{public}d", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v107 = (uint64_t)(a4[1] - *a4) >> 4;
        v141 = 134349568;
        v142 = v135;
        v143 = 2050;
        v144 = *(double *)&v107;
        v145 = 1026;
        *(_DWORD *)v146 = v10;
        LODWORD(v119) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,updateBatchedLocations,null road vector,count,%{public}lu,iterations,%{public}d", &v141, v119);
        v109 = (uint8_t *)v108;
        sub_100512490("Generic", 1, 0, 0, "void CLGpsOdometryRhythmicMapMatched::updateBatchedLocations(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v108);
        if (v109 != buf)
          free(v109);
      }
      v24 = 1;
      goto LABEL_136;
    }
    sub_1004078E0(*(_QWORD **)v13);
    v133 = *(double *)(v17 + 40);
    if (v133 <= 0.0)
    {
      ++*(_DWORD *)(a1 + 1444);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v25 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v26 = (uint64_t)(a4[1] - *a4) >> 4;
        v27 = **v16;
        *(_DWORD *)buf = 134349825;
        v178 = v135;
        v179 = 2050;
        v180 = *(double *)&v26;
        v181 = 1026;
        *(_DWORD *)v182 = v10;
        *(_WORD *)&v182[4] = 2049;
        *(_QWORD *)&v182[6] = v27;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,updateBatchedLocations,road length is 0,count,%{public}lu,iterations,%{public}d,id,%{private}lld", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v110 = (uint64_t)(a4[1] - *a4) >> 4;
        v111 = **v16;
        v141 = 134349825;
        v142 = v135;
        v143 = 2050;
        v144 = *(double *)&v110;
        v145 = 1026;
        *(_DWORD *)v146 = v10;
        *(_WORD *)&v146[4] = 2049;
        *(_QWORD *)&v146[6] = v111;
        LODWORD(v119) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,updateBatchedLocations,road length is 0,count,%{public}lu,iterations,%{public}d,id,%{private}lld", &v141, v119);
        v113 = (uint8_t *)v112;
        sub_100512490("Generic", 1, 0, 0, "void CLGpsOdometryRhythmicMapMatched::updateBatchedLocations(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v112);
        if (v113 != buf)
          free(v113);
      }
      v24 = 4;
      goto LABEL_136;
    }
    v18 = *((unsigned __int8 *)v16 + 16);
    if (*((_BYTE *)v16 + 16))
      v19 = 0.0;
    else
      v19 = 1.0;
    v20 = a4[1] - *a4;
    if (v20 == 16)
    {
      v19 = *(double *)(v120 + 120);
      v21 = *(double *)(v121 + 120);
    }
    else
    {
      v21 = (double)v18;
      if (v10)
      {
        if ((v20 >> 4) - 1 == v10)
          v21 = *(double *)(v121 + 120);
      }
      else
      {
        v19 = *(double *)(v120 + 120);
      }
    }
    v123 = v19;
    v132 = v11 / v133;
    v128 = v21;
    while (1)
    {
      if ((!(_BYTE)v18 || v19 >= v21) && ((_BYTE)v18 || v19 <= v21))
      {
LABEL_122:
        v24 = 0;
        goto LABEL_136;
      }
      v28 = -(v132 - v12 / v133);
      v127 = v132 - v12 / v133;
      if ((_BYTE)v18)
        v28 = v132 - v12 / v133;
      v19 = v19 + v28;
      if ((_BYTE)v18 && v19 > v21)
      {
        v29 = v19 - v21;
      }
      else
      {
        if ((_BYTE)v18 || v19 >= v21)
        {
          v30 = v8 + 1.0;
          v12 = 0.0;
          goto LABEL_56;
        }
        v29 = v21 - v19;
      }
      v12 = v133 * (v132 - v29);
      if (((uint64_t)(a4[1] - *a4) >> 4) - 1 != v10)
        goto LABEL_122;
      v30 = v8 + 1.0;
      if (v8 + 1.0 > v135 || v8 + 2.0 <= v135)
        goto LABEL_122;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v32 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349824;
        v178 = v8;
        v179 = 2050;
        v180 = v19;
        v181 = 2050;
        *(double *)v182 = v21;
        *(_WORD *)&v182[8] = 2050;
        *(double *)&v182[10] = v12;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,numerical error in projection computation,projection,%{public}.15lf,projectionEnd,%{public}.15lf, remainingDistanceFromLastRoadVector,%{public}.5lf", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v141 = 134349824;
        v142 = v8;
        v143 = 2050;
        v144 = v19;
        v145 = 2050;
        *(double *)v146 = v21;
        *(_WORD *)&v146[8] = 2050;
        *(double *)&v146[10] = v12;
        LODWORD(v119) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,numerical error in projection computation,projection,%{public}.15lf,projectionEnd,%{public}.15lf, remainingDistanceFromLastRoadVector,%{public}.5lf", &v141, v119);
        v100 = (uint8_t *)v99;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::updateBatchedLocations(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v99);
        if (v100 != buf)
          free(v100);
      }
      v19 = v21;
LABEL_56:
      if (v30 > v135)
        break;
      v137 = -1.0;
      v33 = (std::__shared_weak_count *)v16[1];
      v136[0] = *v16;
      v136[1] = &v33->__vftable;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(p_shared_owners);
        while (__stxr(v35 + 1, p_shared_owners));
      }
      v36 = sub_1017C0540((double *)(a1 + 32), v136, (double *)&v138, &v137, v19);
      if (v33)
      {
        v37 = (unint64_t *)&v33->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (!v36)
      {
        ++*(_DWORD *)(a1 + 1444);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v103 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349056;
          v178 = v135;
          _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,updateBatchedLocations,interpolateProjections returned false", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF508);
          v141 = 134349056;
          v142 = v135;
          LODWORD(v119) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,%{public}.1lf,updateBatchedLocations,interpolateProjections returned false", &v141, v119);
          v118 = (uint8_t *)v117;
          sub_100512490("Generic", 1, 0, 0, "void CLGpsOdometryRhythmicMapMatched::updateBatchedLocations(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v117);
          if (v118 != buf)
            free(v118);
        }
        v24 = 1;
        goto LABEL_135;
      }
      v16 = (uint64_t **)v140;
      v39 = v137;
      v129 = v12;
      if (!*(_BYTE *)(v140 + 16))
      {
        sub_1001C6800(v137 + 180.0);
        v39 = v40;
        v137 = v40;
      }
      v42 = v138;
      v41 = v139;
      v43 = *(_QWORD *)(a1 + 216);
      v44 = *(_QWORD *)(a1 + 168);
      v45 = *(_QWORD *)(a1 + 176);
      v46 = *(_QWORD *)(a1 + 184);
      v47 = *(_QWORD *)(a1 + 240);
      v48 = *(_QWORD *)(a1 + 248);
      v130 = v139;
      if (v47 >= v48)
      {
        v52 = 0x6F96F96F96F96F97 * ((uint64_t)(v47 - (_QWORD)*v126) >> 2);
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) > 0x1A41A41A41A41A4)
          sub_100259694();
        v49 = v138;
        v54 = 0x6F96F96F96F96F97 * ((uint64_t)(v48 - (_QWORD)*v126) >> 2);
        if (2 * v54 > v53)
          v53 = 2 * v54;
        if (v54 >= 0xD20D20D20D20D2)
          v55 = 0x1A41A41A41A41A4;
        else
          v55 = v53;
        if (v55)
          v56 = (char *)sub_10055B5BC(a1 + 248, v55);
        else
          v56 = 0;
        v57 = &v56[156 * v52];
        *(_DWORD *)v57 = 0xFFFF;
        *(_QWORD *)(v57 + 4) = v49;
        *(_QWORD *)(v57 + 12) = v130;
        *(_QWORD *)(v57 + 20) = v45;
        *(_QWORD *)(v57 + 28) = v44;
        *(_QWORD *)(v57 + 36) = v46;
        v50 = v134;
        *(double *)(v57 + 44) = v134;
        *(_QWORD *)(v57 + 52) = 0x3FC3333333333333;
        *(double *)(v57 + 60) = v39;
        *(_QWORD *)(v57 + 68) = v43;
        *(double *)(v57 + 76) = v30;
        *(_QWORD *)(v57 + 92) = 0x1BFF00000;
        *(_QWORD *)(v57 + 84) = 0;
        *(_OWORD *)(v57 + 132) = xmmword_101CDD254;
        *(_OWORD *)(v57 + 116) = *(_OWORD *)algn_101CDD244;
        *(_OWORD *)(v57 + 100) = xmmword_101CDD234;
        *(_QWORD *)(v57 + 148) = 0;
        v59 = *(char **)(a1 + 232);
        v58 = *(char **)(a1 + 240);
        v60 = v57;
        if (v58 != v59)
        {
          do
          {
            v61 = *(_OWORD *)(v58 - 156);
            *(_OWORD *)(v60 - 140) = *(_OWORD *)(v58 - 140);
            *(_OWORD *)(v60 - 156) = v61;
            v62 = *(_OWORD *)(v58 - 124);
            v63 = *(_OWORD *)(v58 - 108);
            v64 = *(_OWORD *)(v58 - 92);
            *(_OWORD *)(v60 - 76) = *(_OWORD *)(v58 - 76);
            *(_OWORD *)(v60 - 92) = v64;
            *(_OWORD *)(v60 - 108) = v63;
            *(_OWORD *)(v60 - 124) = v62;
            v65 = *(_OWORD *)(v58 - 60);
            v66 = *(_OWORD *)(v58 - 44);
            v67 = *(_OWORD *)(v58 - 28);
            *((_OWORD *)v60 - 1) = *((_OWORD *)v58 - 1);
            *(_OWORD *)(v60 - 28) = v67;
            *(_OWORD *)(v60 - 44) = v66;
            *(_OWORD *)(v60 - 60) = v65;
            v60 -= 156;
            v58 -= 156;
          }
          while (v58 != v59);
          v58 = *v126;
        }
        v51 = v57 + 156;
        *(_QWORD *)(a1 + 232) = v60;
        *(_QWORD *)(a1 + 240) = v57 + 156;
        *(_QWORD *)(a1 + 248) = &v56[156 * v55];
        if (v58)
          operator delete(v58);
      }
      else
      {
        *(_DWORD *)v47 = 0xFFFF;
        v49 = v42;
        *(_QWORD *)(v47 + 4) = v42;
        *(_QWORD *)(v47 + 12) = v41;
        *(_QWORD *)(v47 + 20) = v45;
        *(_QWORD *)(v47 + 28) = v44;
        *(_QWORD *)(v47 + 36) = v46;
        v50 = v134;
        *(double *)(v47 + 44) = v134;
        *(_QWORD *)(v47 + 52) = 0x3FC3333333333333;
        *(double *)(v47 + 60) = v39;
        *(_QWORD *)(v47 + 68) = v43;
        *(double *)(v47 + 76) = v30;
        *(_QWORD *)(v47 + 84) = 0;
        *(_QWORD *)(v47 + 92) = 0x1BFF00000;
        *(_QWORD *)(v47 + 148) = 0;
        *(_OWORD *)(v47 + 132) = xmmword_101CDD254;
        *(_OWORD *)(v47 + 116) = *(_OWORD *)algn_101CDD244;
        *(_OWORD *)(v47 + 100) = xmmword_101CDD234;
        v51 = (char *)(v47 + 156);
      }
      *(_QWORD *)(a1 + 240) = v51;
      v68 = v50;
      v131 = v50 + v131;
      v69 = v131 + *(double *)(a1 + 24);
      v70 = *(_QWORD *)(a1 + 8);
      v71 = *(_QWORD *)(a1 + 168);
      v72 = *(_QWORD *)(a1 + 184);
      if (v30 + 1.0 <= v135)
        v73 = 2;
      else
        v73 = 3;
      v75 = *(_QWORD *)(a1 + 264);
      v74 = *(_QWORD *)(a1 + 272);
      if (v75 >= v74)
      {
        v78 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v75 - (_QWORD)*v125) >> 4);
        v79 = v78 + 1;
        if (v78 + 1 > 0x75075075075075)
          sub_100259694();
        v80 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v74 - (_QWORD)*v125) >> 4);
        if (2 * v80 > v79)
          v79 = 2 * v80;
        if (v80 >= 0x3A83A83A83A83ALL)
          v81 = 0x75075075075075;
        else
          v81 = v79;
        if (v81)
        {
          v82 = (char *)sub_1017C3F8C(a1 + 272, v81);
          v84 = v83;
        }
        else
        {
          v82 = 0;
          v84 = 0;
        }
        v85 = &v82[560 * v78];
        *(double *)v85 = v69;
        *((double *)v85 + 1) = v134;
        *((_QWORD *)v85 + 2) = v70;
        *((double *)v85 + 3) = v30;
        memcpy(v85 + 32, &unk_101CDD290, 0x158uLL);
        *((_QWORD *)v85 + 47) = v71;
        *((_QWORD *)v85 + 48) = v72;
        *(_OWORD *)(v85 + 488) = xmmword_101CDD458;
        *(_OWORD *)(v85 + 504) = unk_101CDD468;
        *(_OWORD *)(v85 + 520) = xmmword_101CDD478;
        *(_OWORD *)(v85 + 424) = xmmword_101CDD418;
        *(_OWORD *)(v85 + 440) = unk_101CDD428;
        *(_OWORD *)(v85 + 456) = xmmword_101CDD438;
        *(_OWORD *)(v85 + 472) = unk_101CDD448;
        *(_OWORD *)(v85 + 392) = xmmword_101CDD3F8;
        *(_OWORD *)(v85 + 408) = unk_101CDD408;
        *((_DWORD *)v85 + 134) = v73;
        *((_DWORD *)v85 + 139) = 0;
        *(_OWORD *)(v85 + 540) = xmmword_101CDD48C;
        v86 = *(char **)(a1 + 256);
        v87 = *(char **)(a1 + 264);
        v88 = v85;
        if (v87 != v86)
        {
          do
          {
            v87 -= 560;
            v88 -= 560;
            memcpy(v88, v87, 0x230uLL);
          }
          while (v87 != v86);
          v87 = *v125;
        }
        v77 = v85 + 560;
        *(_QWORD *)(a1 + 256) = v88;
        *(_QWORD *)(a1 + 264) = v77;
        *(_QWORD *)(a1 + 272) = &v82[560 * v84];
        if (v87)
          operator delete(v87);
        a4 = v122;
      }
      else
      {
        *(double *)v75 = v69;
        *(double *)(v75 + 8) = v68;
        *(_QWORD *)(v75 + 16) = v70;
        *(double *)(v75 + 24) = v30;
        memcpy((void *)(v75 + 32), &unk_101CDD290, 0x158uLL);
        *(_QWORD *)(v75 + 376) = v71;
        *(_QWORD *)(v75 + 384) = v72;
        *(_OWORD *)(v75 + 488) = xmmword_101CDD458;
        *(_OWORD *)(v75 + 504) = unk_101CDD468;
        *(_OWORD *)(v75 + 520) = xmmword_101CDD478;
        *(_OWORD *)(v75 + 424) = xmmword_101CDD418;
        *(_OWORD *)(v75 + 440) = unk_101CDD428;
        *(_OWORD *)(v75 + 456) = xmmword_101CDD438;
        *(_OWORD *)(v75 + 472) = unk_101CDD448;
        *(_OWORD *)(v75 + 392) = xmmword_101CDD3F8;
        *(_OWORD *)(v75 + 408) = unk_101CDD408;
        *(_DWORD *)(v75 + 536) = v73;
        v76 = (_OWORD *)(v75 + 540);
        *(_DWORD *)(v75 + 556) = 0;
        v77 = (char *)(v75 + 560);
        *v76 = xmmword_101CDD48C;
      }
      *(_QWORD *)(a1 + 264) = v77;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v89 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v90 = **v16;
        v91 = *((unsigned __int8 *)v16 + 16);
        v92 = 0.0;
        if (v124 >= 0.0)
          v92 = vabdd_f64(sub_1001FCBB4(), v124) * 1000.0;
        *(_DWORD *)buf = 134353665;
        v178 = v135;
        v179 = 2050;
        v180 = v30;
        v181 = 2049;
        *(_QWORD *)v182 = v49;
        *(_WORD *)&v182[8] = 2049;
        *(_QWORD *)&v182[10] = v130;
        v183 = 2049;
        v184 = v39;
        v185 = 2049;
        v186 = v90;
        v187 = 1026;
        v188 = v91;
        v189 = 2050;
        v190 = v133;
        v191 = 2050;
        v192 = v134;
        v193 = 2050;
        v194 = v19;
        v195 = 2050;
        v196 = v132;
        v197 = 2050;
        v198 = v127;
        v199 = 2050;
        v200 = v123;
        v201 = 2050;
        v202 = v128;
        v203 = 2050;
        v204 = v92;
        v205 = 1026;
        v206 = v73;
        v207 = 2050;
        v208 = v70;
        v209 = 2050;
        v210 = v131;
        v211 = 2050;
        v212 = v69;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,%{public}.1lf,Rhythmic,batched coordinates,time,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,course,%{private}.3lf,roadID,%{private}lld,forward,%{public}d,length,%{public}.2lf,deltaDistance,%{public}.3lf,proj,%{public}.15lf,deltaProjOnRoad,%{public}.3lf,deltaProjsUsed,%{public}.3lf,startProj,%{public}.3lf,endProj,%{public}.3lf,timeTakenInMS,%{public}.2lf,batchedLocationFixType,%{public}d,deltaDistUnc,%{public}.3lf,deltaDistAccumulated,%{public}.2lf,odometer,%{public}.2lf", buf, 0xB8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF508);
        v93 = qword_1022A0078;
        v94 = **v16;
        v95 = *((unsigned __int8 *)v16 + 16);
        v96 = 0.0;
        if (v124 >= 0.0)
          v96 = vabdd_f64(sub_1001FCBB4(), v124) * 1000.0;
        v141 = 134353665;
        v142 = v135;
        v143 = 2050;
        v144 = v30;
        v145 = 2049;
        *(_QWORD *)v146 = v49;
        *(_WORD *)&v146[8] = 2049;
        *(_QWORD *)&v146[10] = v130;
        v147 = 2049;
        v148 = v39;
        v149 = 2049;
        v150 = v94;
        v151 = 1026;
        v152 = v95;
        v153 = 2050;
        v154 = v133;
        v155 = 2050;
        v156 = v134;
        v157 = 2050;
        v158 = v19;
        v159 = 2050;
        v160 = v132;
        v161 = 2050;
        v162 = v127;
        v163 = 2050;
        v164 = v123;
        v165 = 2050;
        v166 = v128;
        v167 = 2050;
        v168 = v96;
        v169 = 1026;
        v170 = v73;
        v171 = 2050;
        v172 = v70;
        v173 = 2050;
        v174 = v131;
        v175 = 2050;
        v176 = v69;
        LODWORD(v119) = 184;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v93, 2, "GPSODOM-MM,%{public}.1lf,Rhythmic,batched coordinates,time,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,course,%{private}.3lf,roadID,%{private}lld,forward,%{public}d,length,%{public}.2lf,deltaDistance,%{public}.3lf,proj,%{public}.15lf,deltaProjOnRoad,%{public}.3lf,deltaProjsUsed,%{public}.3lf,startProj,%{public}.3lf,endProj,%{public}.3lf,timeTakenInMS,%{public}.2lf,batchedLocationFixType,%{public}d,deltaDistUnc,%{public}.3lf,deltaDistAccumulated,%{public}.2lf,odometer,%{public}.2lf", &v141, v119);
        v98 = (uint8_t *)v97;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::updateBatchedLocations(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v97);
        if (v98 != buf)
          free(v98);
      }
      LOBYTE(v18) = *((_BYTE *)v16 + 16);
      v8 = v30;
      v11 = v134;
      v21 = v128;
      v12 = v129;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v101 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v102 = *(double *)a1;
      *(_DWORD *)buf = 134349568;
      v178 = v30;
      v179 = 2050;
      v180 = v135;
      v181 = 2050;
      *(double *)v182 = v102;
      _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,updateBatchedLocations,max time reached for propagation,endTime,%{public}.1lf,deltaDistanceTotal,%{public}.1lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v114 = *(double *)a1;
      v141 = 134349568;
      v142 = v30;
      v143 = 2050;
      v144 = v135;
      v145 = 2050;
      *(double *)v146 = v114;
      LODWORD(v119) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,updateBatchedLocations,max time reached for propagation,endTime,%{public}.1lf,deltaDistanceTotal,%{public}.1lf", &v141, v119);
      v116 = (uint8_t *)v115;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::updateBatchedLocations(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v115);
      if (v116 != buf)
        free(v116);
    }
    v24 = 0;
LABEL_135:
    v8 = v30;
LABEL_136:
    v104 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
    if (*((_QWORD *)&v140 + 1))
    {
      v105 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    if ((v24 | 4) != 4)
      break;
    ++v10;
    v9 = *a4;
  }
  while (v10 < (uint64_t)(a4[1] - *a4) >> 4);
}

void sub_1017C04D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_100261F44((uint64_t)&a39);
  _Unwind_Resume(a1);
}

BOOL sub_1017C0540(double *a1, _QWORD **a2, double *a3, double *a4, double a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  _BOOL4 v22;
  _BOOL8 result;
  double *v24;
  double v25;
  double *v26;
  NSObject *v27;
  double *v28;
  double v29;
  NSObject *v30;
  double *v31;
  double *v32;
  uint64_t v33;
  double v34;
  int v35;
  double v36;
  NSObject *v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double *v52;
  double v53;
  double v54;
  long double v55;
  uint64_t v56;
  NSObject *v57;
  _BOOL4 v58;
  uint64_t v59;
  double __y[2];
  double __x[205];

  *a3 = 0.0;
  a3[1] = 0.0;
  *a4 = 0.0;
  v5 = *a2;
  if (*a2)
  {
    v6 = (v5[18] - v5[17]) >> 4;
    if ((int)v6 <= 0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021CF528);
      v27 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__x[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", (uint8_t *)__x, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!result)
        return result;
      bzero(__x, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021CF528);
      LOWORD(__y[0]) = 0;
      v29 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,CoordinateCount is 0", __y, 2);
    }
    else
    {
      if ((_DWORD)v6 == 1)
        return 1;
      sub_1004078E0(*a2);
      v12 = (uint64_t)(v5[21] - v5[20]) >> 3;
      if (v12 == (_DWORD)v6 - 1)
      {
        v13 = (uint64_t)*a2;
        sub_1004078E0((_QWORD *)v13);
        if (a5 < 0.000001)
        {
          *(_OWORD *)a3 = *(_OWORD *)*(_QWORD *)(v13 + 136);
          v14 = *a3;
          v15 = a3[1];
          v16 = *(double **)(v13 + 136);
LABEL_7:
          v17 = v16[2];
          v18 = v16[3];
          __x[0] = 0.0;
          v59 = 0;
          __y[0] = 0.0;
          sub_10011E780(a1, __x, __y, (double *)&v59, v14, v15, 0.0, v17, v18, 0.0);
          v19 = atan2(__y[0], __x[0]);
          if (v19 < 0.0)
            v19 = v19 + 6.28318531;
          v20 = v19 * 57.2957795;
          goto LABEL_54;
        }
        if (a5 >= 0.999999)
        {
          *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v13 + 136) + 16 * v12);
          v20 = sub_10073C714(a1, *(double *)(*(_QWORD *)(v13 + 136) + 16 * v12 - 16), *(double *)(*(_QWORD *)(v13 + 136) + 16 * v12 - 8), *a3, a3[1]);
LABEL_54:
          *a4 = v20;
          return 1;
        }
        v31 = (double *)v5[20];
        v32 = (double *)v5[21];
        if (v31 != v32)
        {
          v33 = 0;
          v34 = 0.0;
          v35 = 2;
          while (1)
          {
            v36 = *v31 / *(double *)(v13 + 40);
            if (vabdd_f64(a5, v34 + v36) < 0.000001)
              break;
            if (v34 + v36 > a5)
            {
              v51 = (a5 - v34) / v36;
              v52 = (double *)(*(_QWORD *)(v13 + 136) + v33);
              v53 = v52[1];
              v54 = v52[3];
              *a3 = *v52 + (v52[2] - *v52) * v51;
              v55 = v53 + sub_1010B9110(v53, v54) * v51;
              a3[1] = v55;
              sub_100080DCC(v55);
              *((_QWORD *)a3 + 1) = v56;
              v16 = (double *)(*(_QWORD *)(v13 + 136) + v33);
              v14 = *v16;
              v15 = v16[1];
              goto LABEL_7;
            }
            ++v31;
            v33 += 16;
            ++v35;
            v34 = v34 + v36;
            if (v31 == v32)
              goto LABEL_45;
          }
          if (v35 < (int)v6)
          {
            *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v13 + 136) + v33 + 16);
            v38 = (double *)(*(_QWORD *)(v13 + 136) + v33);
            v39 = *v38;
            v40 = v38[1];
            v41 = *a3;
            v42 = a3[1];
            __x[0] = 0.0;
            v59 = 0;
            __y[0] = 0.0;
            sub_10011E780(a1, __x, __y, (double *)&v59, v39, v40, 0.0, v41, v42, 0.0);
            v43 = atan2(__y[0], __x[0]);
            if (v43 < 0.0)
              v43 = v43 + 6.28318531;
            v44 = v43 * 57.2957795;
            v45 = *a3;
            v46 = a3[1];
            v47 = *(_QWORD *)(v13 + 136) + v33;
            v48 = *(double *)(v47 + 32);
            v49 = *(double *)(v47 + 40);
            __x[0] = 0.0;
            v59 = 0;
            __y[0] = 0.0;
            sub_10011E780(a1, __x, __y, (double *)&v59, v45, v46, 0.0, v48, v49, 0.0);
            v50 = atan2(__y[0], __x[0]);
            if (v50 < 0.0)
              v50 = v50 + 6.28318531;
            sub_100512AA0(v44, v50 * 57.2957795);
            goto LABEL_54;
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021CF528);
          v57 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__x[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", (uint8_t *)__x, 2u);
          }
          v58 = sub_1001BFF7C(115, 0);
          result = 0;
          if (v58)
          {
            bzero(__x, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021CF528);
            LOWORD(__y[0]) = 0;
            v25 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", __y, 2);
LABEL_18:
            v26 = v24;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v25);
LABEL_36:
            if (v26 != __x)
              free(v26);
            return 0;
          }
          return result;
        }
LABEL_45:
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021CF528);
        v37 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__x[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", (uint8_t *)__x, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(__x, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021CF528);
        LOWORD(__y[0]) = 0;
        v29 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,Could not interpolate to intended projection", __y, 2);
      }
      else
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021CF528);
        v30 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__x[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", (uint8_t *)__x, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(__x, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021CF528);
        LOWORD(__y[0]) = 0;
        v29 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,inconsistent array size", __y, 2);
      }
    }
    v26 = v28;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v29);
    goto LABEL_36;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021CF528);
  v21 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__x[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM, NULL road", (uint8_t *)__x, 2u);
  }
  v22 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v22)
  {
    bzero(__x, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021CF528);
    LOWORD(__y[0]) = 0;
    v25 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM, NULL road", __y, 2);
    goto LABEL_18;
  }
  return result;
}

BOOL sub_1017C0D28(uint64_t a1, double *a2, uint64_t *a3, double *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BOOL8 v10;
  _BOOL8 v11;
  unint64_t *v12;
  unint64_t v13;
  double v14;
  double v15;
  NSObject *v16;
  const char *v18;
  uint8_t *v19;
  __int16 v20;
  _QWORD *v21[2];
  unint64_t v22;
  double v23;
  double v24;
  uint8_t buf[8];

  if (!*a3)
    return 0;
  sub_100349198((_QWORD *)a1, a3);
  v7 = *(std::__shared_weak_count **)(a1 + 8);
  v21[0] = *(_QWORD **)a1;
  v21[1] = &v7->__vftable;
  v22 = 0xBFF0000000000000;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = sub_1017C0540(a2, v21, &v23, (double *)&v22, 0.5);
  v11 = v10;
  if (!v7)
    goto LABEL_9;
  v12 = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v11)
      goto LABEL_10;
  }
  else
  {
LABEL_9:
    if (v10)
    {
LABEL_10:
      *(_QWORD *)buf = 0;
      v15 = v23;
      v14 = v24;
      sub_10011E780(a2, (double *)(a1 + 48), (double *)(a1 + 40), (double *)buf, *a4, a4[1], a4[2], v23, v24, a4[2]);
      *(double *)(a1 + 24) = v15;
      *(double *)(a1 + 32) = v14;
      return v11;
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v16 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "GPSODOM-MM,Unable to initialize CLRoutePath", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v20 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM-MM,Unable to initialize CLRoutePath", &v20, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmic_Types::CLRoutePath::initialize(CLDistanceCalc &, const CLMapRoadPtr, const GpsPoint &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  return v11;
}

void sub_1017C0F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_1017C0FB8(uint64_t *a1, _QWORD *a2)
{
  if (!*a2 || !*a1)
    return 0;
  if (sub_1017C3B20(a1, (uint64_t)a2))
    return 1;
  return sub_1017C3BFC(a1, (uint64_t)a2);
}

void sub_1017C1014(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v3;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  v1 = *a1;
  if ((unint64_t)(a1[1] - *a1) >= 0x11)
  {
    v3 = 1;
    do
    {
      v4 = *(_OWORD *)(v1 + 16 * v3 - 16);
      v17 = v4;
      if (*((_QWORD *)&v4 + 1))
      {
        v5 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
        v1 = *a1;
      }
      v7 = *(_OWORD *)(v1 + 16 * v3);
      v16 = v7;
      if (*((_QWORD *)&v7 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      if (sub_1017C3B20((uint64_t *)v4, (uint64_t)&v16))
        *(_BYTE *)(v17 + 16) = 0;
      if (((a1[1] - *a1) >> 4) - 1 == v3 && sub_1017C3BFC((uint64_t *)v16, (uint64_t)&v17))
        *(_BYTE *)(v16 + 16) = 0;
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
      if (*((_QWORD *)&v16 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      ++v3;
      v1 = *a1;
    }
    while (v3 < (a1[1] - *a1) >> 4);
  }
}

void sub_1017C1170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL sub_1017C118C(uint64_t **a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  double v9;
  double v10;
  __int128 v12;

  v12 = 0uLL;
  sub_1002B7674((uint64_t)a2, &v12);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *a1;
  v8 = a1[1];
  if (v7 == v8)
    return 0;
  v9 = -1.0;
  do
  {
    v10 = *(double *)(*v7 + 56) + *(double *)(*v7 + 64);
    if (v9 < 0.0 || v10 < v9)
    {
      sub_100349198(a2, v7);
      v9 = v10;
    }
    v7 += 2;
  }
  while (v7 != v8);
  return v9 >= 0.0;
}

BOOL sub_1017C1264(__int128 **a1, uint64_t **a2, uint64_t a3)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t *v7;
  _QWORD *v8;

  if (!*a2)
    return 0;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      v7 = *a2;
      if ((!*a2 || (v8 = **(_QWORD ***)v4) == 0 || *v8 != *(_QWORD *)*v7) && sub_1017C0FB8(v7, v4))
      {
        if (*(_QWORD *)v4)
          sub_10033F68C((char **)a3, v4);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return *(_QWORD *)a3 != *(_QWORD *)(a3 + 8);
}

uint64_t sub_1017C1308(uint64_t result, _QWORD ***a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  unint64_t v5;
  char *i;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  if (*a2)
  {
    v2 = result;
    v4 = *(_QWORD ***)result;
    v3 = *(_QWORD *)(result + 8);
    if (*(_QWORD *)result != v3)
    {
      v5 = (v3 - (uint64_t)v4) >> 4;
      if (v5 <= 1)
        v5 = 1;
      for (i = *(char **)result; ; i += 16)
      {
        if (*v4)
        {
          v7 = (_QWORD *)**v4;
          if (v7)
          {
            if (*v7 == ***a2)
              break;
          }
        }
        v4 += 2;
        if (!--v5)
          return result;
      }
      v8 = i;
      if (v4 + 2 != (_QWORD **)v3)
      {
        v8 = i;
        v9 = (uint64_t)v4;
        do
        {
          result = sub_1002B7674(v9, (__int128 *)(v9 + 16));
          v8 += 16;
          v10 = v9 + 32;
          v9 += 16;
        }
        while (v10 != v3);
        v3 = *(_QWORD *)(v2 + 8);
      }
      v11 = (char *)v4 + v8 - i;
      while (v11 != (char *)v3)
      {
        v3 -= 16;
        result = sub_100261F44(v3);
      }
      *(_QWORD *)(v2 + 8) = v11;
    }
  }
  return result;
}

uint64_t *sub_1017C1400@<X0>(uint64_t *result@<X0>, _QWORD ***a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (*a2)
  {
    for (i = *result; i != result[1]; i += 16)
    {
      v4 = **(_QWORD ***)i;
      if (v4 && *v4 == ***a2)
      {
        v5 = *(_QWORD *)(i + 8);
        *a3 = *(_QWORD *)i;
        a3[1] = v5;
        if (v5)
        {
          v6 = (unint64_t *)(v5 + 8);
          do
            v7 = __ldxr(v6);
          while (__stxr(v7 + 1, v6));
        }
        return result;
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t sub_1017C1468(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *(uint64_t **)result;
  v2 = *(_QWORD *)(result + 8);
  v3 = (uint64_t *)(v2 - 16);
  if (*(_QWORD *)result != v2 && v3 > v1)
  {
    do
    {
      v5 = *v1;
      *v1 = *v3;
      *v3 = v5;
      v6 = v1[1];
      v1[1] = v3[1];
      v3[1] = v6;
      v1 += 2;
      v3 -= 2;
    }
    while (v1 < v3);
  }
  return result;
}

uint64_t sub_1017C14B0(uint64_t a1)
{
  double v2;
  uint64_t result;
  uint64_t v9;

  v2 = *(double *)(a1 + 16);
  if (v2 > 0.0)
    *(double *)(a1 + 16) = v2 - *(double *)a1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a1 = _Q0;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 256);
  result = *(_QWORD *)(a1 + 1552);
  v9 = *(_QWORD *)(a1 + 1544);
  while (result != v9)
    result = sub_100261F44(result - 16);
  *(_QWORD *)(a1 + 1552) = v9;
  ++*(_DWORD *)(a1 + 1536);
  return result;
}

uint64_t sub_1017C1528(uint64_t a1, double a2, double a3, double a4)
{
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  const char *v14;
  uint64_t v15;
  NSObject *v18;
  uint64_t v19;
  double v20;
  _BOOL4 v23;
  uint64_t v24;
  double v25;
  uint8_t *v26;
  _BYTE v27[24];
  uint64_t v28;
  __int128 v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;

  v7 = *(double *)a1;
  v8 = 10.0;
  if (*(double *)a1 < 10.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 224);
      v11 = *(double *)a1;
      *(_DWORD *)buf = 134349312;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,Rhythmic,map-matched odometer simulated failure due to distance less than threshold,%{public}.2lf", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_30;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v12 = *(_QWORD *)(a1 + 224);
    v13 = *(double *)a1;
    *(_DWORD *)v27 = 134349312;
    *(_QWORD *)&v27[4] = v12;
    *(_WORD *)&v27[12] = 2050;
    *(double *)&v27[14] = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,Rhythmic,map-matched odometer simulated failure due to distance less than threshold,%{public}.2lf", v27, 22, *(_OWORD *)v27, *(_QWORD *)&v27[16], v28, v29);
LABEL_47:
    v26 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::screenDistance(const double, const double, const double)", "%s\n", v14);
    if (v26 != buf)
      free(v26);
LABEL_30:
    sub_1017C14B0(a1);
    return 0;
  }
  ++*(_DWORD *)(a1 + 1532);
  v15 = (*(_QWORD *)(a1 + 1552) - *(_QWORD *)(a1 + 1544)) >> 4;
  if (a2 <= 0.0)
    goto LABEL_18;
  if (a2 > 10.0)
  {
    a3 = a3 / a2;
    v8 = 0.35;
  }
  if ((int)v15 < 3 || a3 >= v8)
  {
LABEL_18:
    v23 = 1;
  }
  else
  {
    v23 = v7 > a2 * 0.65;
    if (v7 >= a2 * 1.35)
      v23 = 0;
    if (a4 >= 0.0 && !v23)
    {
      v23 = v7 > a4 * 0.85;
      if (v7 >= a4 * 1.15)
        v23 = 0;
    }
  }
  if (a2 < 0.0 || !v23)
  {
    if (!v23)
    {
LABEL_25:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v19 = *(_QWORD *)(a1 + 224);
        v20 = *(double *)a1;
        *(_DWORD *)buf = 134350080;
        v31 = v19;
        v32 = 2050;
        v33 = v20;
        v34 = 2050;
        v35 = a2;
        v36 = 2050;
        v37 = a4;
        v38 = 1026;
        v39 = v15;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,Rhythmic,map-matched odometer screening failed,mmDistance,%{public}.2lf,scaledDistance,%{public}.2lf,avgDistance,%{public}.2lf,numRoads,%{public}d", buf, 0x30u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_30;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v24 = *(_QWORD *)(a1 + 224);
      v25 = *(double *)a1;
      *(_DWORD *)v27 = 134350080;
      *(_QWORD *)&v27[4] = v24;
      *(_WORD *)&v27[12] = 2050;
      *(double *)&v27[14] = v25;
      *(_WORD *)&v27[22] = 2050;
      LOWORD(v29) = 2050;
      *(double *)((char *)&v29 + 2) = a4;
      WORD5(v29) = 1026;
      HIDWORD(v29) = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,%{public}.1lf,Rhythmic,map-matched odometer screening failed,mmDistance,%{public}.2lf,scaledDistance,%{public}.2lf,avgDistance,%{public}.2lf,numRoads,%{public}d", v27, 48, *(_OWORD *)v27, *(_QWORD *)&v27[16], *(_QWORD *)&a2, v29);
      goto LABEL_47;
    }
  }
  else if (v7 <= a2 * 0.3 || v7 >= a2 * 1.7)
  {
    goto LABEL_25;
  }
  return 1;
}

uint64_t sub_1017C195C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  ++*(_DWORD *)(a1 + 1528);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "GPSODOM-MM,RhythmicMapMatched,resetting odometer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,RhythmicMapMatched,resetting odometer", v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::reset()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_1017B5928((__n128 *)a1);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 176) = _Q0;
  *(_OWORD *)(a1 + 192) = _Q0;
  *(_OWORD *)(a1 + 208) = _Q0;
  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 96) = _Q0;
  *(_OWORD *)(a1 + 112) = _Q0;
  *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 128) = _Q0;
  sub_1017C1B64(a1 + 288);
  v8 = *(_QWORD *)(a1 + 424);
  if (v8)
    sub_1017B8578(v8);
  result = *(_QWORD *)(a1 + 1552);
  v10 = *(_QWORD *)(a1 + 1544);
  while (result != v10)
    result = sub_100261F44(result - 16);
  *(_QWORD *)(a1 + 1552) = v10;
  return result;
}

void sub_1017C1B64(uint64_t a1)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _BYTE v10[64];
  __int128 v11[3];

  *(_QWORD *)v10 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v10[8] = _Q1;
  *(_OWORD *)&v10[24] = _Q1;
  *(_OWORD *)&v10[40] = _Q1;
  *(_QWORD *)&v10[56] = 0xBFF0000000000000;
  memset(v11, 0, sizeof(v11));
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v10;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v10[48];
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v10[16];
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&v10[32];
  sub_1002B7674(a1 + 88, v11);
  *(_OWORD *)(a1 + 104) = v11[1];
  *(_OWORD *)(a1 + 113) = *(__int128 *)((char *)&v11[1] + 9);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11[0] + 1);
  if (*((_QWORD *)&v11[0] + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11[0] + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

double sub_1017C1C3C(double *a1)
{
  double result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  _QWORD v7[6];
  uint8_t buf[1640];

  result = *a1;
  if (*a1 >= 0.0)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1017C1E20;
    v7[3] = &unk_1021CF4E8;
    v7[4] = a1;
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.mmgpsodom"), v7);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GPSODOM-MM,RhythmicMapMatched,coreanalytics metric submitted", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,RhythmicMapMatched,coreanalytics metric submitted", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics::submitCoreAnalyticsMetric()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    return sub_1017C2600((uint64_t)a1);
  }
  return result;
}

NSDictionary *sub_1017C1E20(uint64_t a1)
{
  uint64_t v1;
  int v2;
  double v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  double v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  double v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  double v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  double v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  double v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  double v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  double v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  double v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  double v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  double v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  double v51;
  BOOL v52;
  unsigned int v53;
  uint64_t v54;
  double v55;
  BOOL v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  double v60;
  BOOL v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  double v65;
  BOOL v66;
  unsigned int v67;
  uint64_t v68;
  double v69;
  BOOL v70;
  unsigned int v71;
  uint64_t v72;
  double v73;
  BOOL v74;
  unsigned int v75;
  uint64_t v76;
  double v77;
  BOOL v78;
  unsigned int v79;
  uint64_t v80;
  double v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  double v85;
  BOOL v86;
  unsigned int v87;
  uint64_t v88;
  double v89;
  BOOL v90;
  unsigned int v91;
  uint64_t v92;
  double v93;
  BOOL v94;
  unsigned int v95;
  uint64_t v96;
  double v97;
  BOOL v98;
  unsigned int v99;
  uint64_t v100;
  double v101;
  BOOL v102;
  unsigned int v103;
  uint64_t v104;
  double v105;
  BOOL v106;
  unsigned int v107;
  uint64_t v108;
  double v109;
  BOOL v110;
  unsigned int v111;
  uint64_t v112;
  double v113;
  BOOL v114;
  unsigned int v115;
  uint64_t v116;
  _QWORD v118[40];
  _QWORD v119[40];

  v1 = *(_QWORD *)(a1 + 32);
  v118[0] = CFSTR("mapCachingRequestCount");
  v119[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 8));
  v118[1] = CFSTR("mapCachingRequestFailures");
  v119[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 24));
  v118[2] = CFSTR("mapCachingRequestProcessed");
  v119[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 12));
  v118[3] = CFSTR("percentageOfTimeMapCachingReqIsProcessed");
  v2 = *(_DWORD *)(v1 + 8);
  if (v2)
  {
    v3 = (double)*(int *)(v1 + 12) * 100.0 / (double)v2;
    v4 = v3 > 1.0 || v3 <= 0.0;
    v5 = llround(v3);
    if (v4)
      v6 = v5;
    else
      v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  v119[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6);
  v118[4] = CFSTR("percentageOfMapCachingFailures");
  v7 = *(_DWORD *)(v1 + 12);
  if (v7)
  {
    v8 = (double)*(int *)(v1 + 24) * 100.0 / (double)v7;
    v9 = v8 > 1.0 || v8 <= 0.0;
    v10 = llround(v8);
    if (v9)
      v11 = v10;
    else
      v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v119[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11);
  v118[5] = CFSTR("numberOfAStarSearchAttempts");
  v119[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 528));
  v118[6] = CFSTR("numberOfAStarSearchFailures");
  v119[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 532));
  v118[7] = CFSTR("unqualifiedMapCachingRequestCount");
  v119[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 16));
  v118[8] = CFSTR("unqualifiedMapCachingRequestProcessed");
  v119[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 20));
  v118[9] = CFSTR("percentageOfUnqualifiedFixMapsCachingReqsProcessed");
  v12 = *(_DWORD *)(v1 + 16);
  if (v12)
  {
    v13 = (double)*(int *)(v1 + 20) * 100.0 / (double)v12;
    v14 = v13 > 1.0 || v13 <= 0.0;
    v15 = llround(v13);
    if (v14)
      v16 = v15;
    else
      v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  v119[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v16);
  v118[10] = CFSTR("numberOfBatchedLocationComputationAttempts");
  v119[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 776));
  v118[11] = CFSTR("numberOfBatchedLocationComputationFailures");
  v119[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 780));
  v118[12] = CFSTR("percentageOfBatchedLocationComputationFailures");
  v17 = *(_DWORD *)(v1 + 776);
  if (v17)
  {
    v18 = (double)*(int *)(v1 + 780) * 100.0 / (double)v17;
    v19 = v18 > 1.0 || v18 <= 0.0;
    v20 = llround(v18);
    if (v19)
      v21 = v20;
    else
      v21 = 1;
  }
  else
  {
    v21 = 0;
  }
  v119[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v21);
  v118[13] = CFSTR("percentageOfEpochsFailedScreening");
  v22 = *(_DWORD *)(v1 + 868);
  if (v22)
  {
    v23 = (double)*(int *)(v1 + 872) * 100.0 / (double)v22;
    v24 = v23 > 1.0 || v23 <= 0.0;
    v25 = llround(v23);
    if (v24)
      v26 = v25;
    else
      v26 = 1;
  }
  else
  {
    v26 = 0;
  }
  v119[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v26);
  v118[14] = CFSTR("numberOfIterationsNeededToCompleteAStarSearchAvg");
  v27 = *(double *)(v1 + 648);
  v28 = v27 > 1.0 || v27 <= 0.0;
  v29 = llround(v27);
  if (v28)
    v30 = v29;
  else
    v30 = 1;
  v119[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v30);
  v118[15] = CFSTR("numberOfIterationsNeededToCompleteAStarSearchMax");
  v31 = *(double *)(v1 + 624);
  v32 = v31 > 1.0 || v31 <= 0.0;
  v33 = llround(v31);
  if (v32)
    v34 = v33;
  else
    v34 = 1;
  v119[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v34);
  v118[16] = CFSTR("numberOfMapsDataRequestsFailures");
  v119[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 192));
  v118[17] = CFSTR("numberOfMMOdometerResets");
  v119[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 864));
  v118[18] = CFSTR("numberOfRoadsCachedAvg");
  v35 = *(double *)(v1 + 144);
  v36 = v35 > 1.0 || v35 <= 0.0;
  v37 = llround(v35);
  if (v36)
    v38 = v37;
  else
    v38 = 1;
  v119[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v38);
  v118[19] = CFSTR("numberOfRoadsCachedMax");
  v39 = *(double *)(v1 + 120);
  v40 = v39 > 1.0 || v39 <= 0.0;
  v41 = llround(v39);
  if (v40)
    v42 = v41;
  else
    v42 = 1;
  v119[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v42);
  v118[20] = CFSTR("numberOfRoadsInRouteConstructedByAStarSearchAvg");
  v43 = *(double *)(v1 + 728);
  v44 = v43 > 1.0 || v43 <= 0.0;
  v45 = llround(v43);
  if (v44)
    v46 = v45;
  else
    v46 = 1;
  v119[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v46);
  v118[21] = CFSTR("numberOfRoadsInRouteConstructedByAStarSearchMax");
  v47 = *(double *)(v1 + 704);
  v48 = v47 > 1.0 || v47 <= 0.0;
  v49 = llround(v47);
  if (v48)
    v50 = v49;
  else
    v50 = 1;
  v119[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v50);
  v118[22] = CFSTR("numberOfSnapAttempts");
  v119[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 280));
  v118[23] = CFSTR("numberOfSnapCandidatesAvg");
  v51 = *(double *)(v1 + 320);
  v52 = v51 > 1.0 || v51 <= 0.0;
  v53 = llround(v51);
  if (v52)
    v54 = v53;
  else
    v54 = 1;
  v119[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v54);
  v118[24] = CFSTR("numberOfSnapCandidatesMax");
  v55 = *(double *)(v1 + 296);
  v56 = v55 > 1.0 || v55 <= 0.0;
  v57 = llround(v55);
  if (v56)
    v58 = v57;
  else
    v58 = 1;
  v119[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v58);
  v118[25] = CFSTR("numberOfSuccessfulSnaps");
  v119[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 284));
  v118[26] = CFSTR("percentageOfAStarSearchFailures");
  v59 = *(_DWORD *)(v1 + 528);
  if (v59)
  {
    v60 = (double)*(int *)(v1 + 532) * 100.0 / (double)v59;
    v61 = v60 > 1.0 || v60 <= 0.0;
    v62 = llround(v60);
    if (v61)
      v63 = v62;
    else
      v63 = 1;
  }
  else
  {
    v63 = 0;
  }
  v119[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v63);
  v118[27] = CFSTR("percentageOfSnapFailures");
  v64 = *(_DWORD *)(v1 + 280);
  if (v64)
  {
    v65 = (double)(v64 - *(_DWORD *)(v1 + 284)) * 100.0 / (double)v64;
    v66 = v65 > 1.0 || v65 <= 0.0;
    v67 = llround(v65);
    if (v66)
      v68 = v67;
    else
      v68 = 1;
  }
  else
  {
    v68 = 0;
  }
  v119[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v68);
  v118[28] = CFSTR("snapSolutionCourseDiffFromRawFixAvg");
  v69 = *(double *)(v1 + 480);
  v70 = v69 > 1.0 || v69 <= 0.0;
  v71 = llround(v69);
  if (v70)
    v72 = v71;
  else
    v72 = 1;
  v119[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v72);
  v118[29] = CFSTR("snapSolutionCourseDiffFromRawFixMax");
  v73 = *(double *)(v1 + 456);
  v74 = v73 > 1.0 || v73 <= 0.0;
  v75 = llround(v73);
  if (v74)
    v76 = v75;
  else
    v76 = 1;
  v119[29] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v76);
  v118[30] = CFSTR("snapSolutionDistanceFromRawFixAvg");
  v77 = *(double *)(v1 + 400);
  v78 = v77 > 1.0 || v77 <= 0.0;
  v79 = llround(v77);
  if (v78)
    v80 = v79;
  else
    v80 = 1;
  v119[30] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v80);
  v118[31] = CFSTR("snapSolutionDistanceFromRawFixMax");
  v81 = *(double *)(v1 + 376);
  v82 = v81 > 1.0 || v81 <= 0.0;
  v83 = llround(v81);
  if (v82)
    v84 = v83;
  else
    v84 = 1;
  v119[31] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v84);
  v118[32] = CFSTR("timeTakenToCacheMapDataAvg");
  v85 = *(double *)(v1 + 64);
  v86 = v85 > 1.0 || v85 <= 0.0;
  v87 = llround(v85);
  if (v86)
    v88 = v87;
  else
    v88 = 1;
  v119[32] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v88);
  v118[33] = CFSTR("timeTakenToCacheMapDataMax");
  v89 = *(double *)(v1 + 40);
  v90 = v89 > 1.0 || v89 <= 0.0;
  v91 = llround(v89);
  if (v90)
    v92 = v91;
  else
    v92 = 1;
  v119[33] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v92);
  v118[34] = CFSTR("timeTakenToCompleteAStarSearchAvg");
  v93 = *(double *)(v1 + 568);
  v94 = v93 > 1.0 || v93 <= 0.0;
  v95 = llround(v93);
  if (v94)
    v96 = v95;
  else
    v96 = 1;
  v119[34] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v96);
  v118[35] = CFSTR("timeTakenToCompleteAStarSearchMax");
  v97 = *(double *)(v1 + 544);
  v98 = v97 > 1.0 || v97 <= 0.0;
  v99 = llround(v97);
  if (v98)
    v100 = v99;
  else
    v100 = 1;
  v119[35] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v100);
  v118[36] = CFSTR("timeTakenToCompleteMMOdometerProcessingAvg");
  v101 = *(double *)(v1 + 816);
  v102 = v101 > 1.0 || v101 <= 0.0;
  v103 = llround(v101);
  if (v102)
    v104 = v103;
  else
    v104 = 1;
  v119[36] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v104);
  v118[37] = CFSTR("timeTakenToCompleteMMOdometerProcessingMax");
  v105 = *(double *)(v1 + 792);
  v106 = v105 > 1.0 || v105 <= 0.0;
  v107 = llround(v105);
  if (v106)
    v108 = v107;
  else
    v108 = 1;
  v119[37] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v108);
  v118[38] = CFSTR("timeTakenToReturnMapDataFromCachedStoreAvg");
  v109 = *(double *)(v1 + 232);
  v110 = v109 > 1.0 || v109 <= 0.0;
  v111 = llround(v109);
  if (v110)
    v112 = v111;
  else
    v112 = 1;
  v119[38] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v112);
  v118[39] = CFSTR("timeTakenToReturnMapDataFromCachedStoreMax");
  v113 = *(double *)(v1 + 208);
  v114 = v113 > 1.0 || v113 <= 0.0;
  v115 = llround(v113);
  if (v114)
    v116 = v115;
  else
    v116 = 1;
  v119[39] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v116);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v119, v118, 40);
}

double sub_1017C2600(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  result = 0.0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_DWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_DWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 776) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1017C26F0(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char v9;
  int v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  NSObject *v18;
  void *v19;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  _QWORD v28[5];
  _DWORD v29[2];
  __int16 v30;
  int v31;
  uint8_t buf[8];
  std::__shared_weak_count *v33;

  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 8) = 257;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1001E4804(buf);
  v3 = *(_BYTE *)(a1 + 8);
  LOBYTE(v29[0]) = 0;
  v4 = sub_1001E4874(*(uint64_t *)buf, "EnableRhythmicScaledOdometer", (BOOL *)v29);
  v5 = v29[0];
  if (!v4)
    v5 = v3;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  sub_1001E4804(buf);
  v9 = *(_BYTE *)(a1 + 9);
  LOBYTE(v29[0]) = 0;
  v10 = sub_1001E4874(*(uint64_t *)buf, "EnableRhythmicMapMatchedOdometer", (BOOL *)v29);
  v11 = v29[0];
  if (!v10)
    v11 = v9;
  *(_BYTE *)(a1 + 9) = v11;
  v12 = v33;
  if (v33)
  {
    v13 = (unint64_t *)&v33->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (*(_BYTE *)(a1 + 8))
    operator new();
  if (*(_BYTE *)(a1 + 9))
    operator new();
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v15 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v16 = *(unsigned __int8 *)(a1 + 8);
    v17 = *(unsigned __int8 *)(a1 + 9);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v16;
    LOWORD(v33) = 1026;
    *(_DWORD *)((char *)&v33 + 2) = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "GPSODOM-MM,RhythmicOdometer,enableScaledOdometer,%{public}d,enableMapMatchedOdometer,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v21 = *(unsigned __int8 *)(a1 + 8);
    v22 = *(unsigned __int8 *)(a1 + 9);
    v29[0] = 67240448;
    v29[1] = v21;
    v30 = 1026;
    v31 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,RhythmicOdometer,enableScaledOdometer,%{public}d,enableMapMatchedOdometer,%{public}d", v29, 14);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "CLGpsOdometryRhythmic::CLGpsOdometryRhythmic(id<CLIntersiloUniverse>)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    *(_QWORD *)(a1 + 40) = objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "newTimer");
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "GPSODOM-MM,CLGpsOdometryRhythmic,coreAnalytics timer created", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      LOWORD(v29[0]) = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,CLGpsOdometryRhythmic,coreAnalytics timer created", v29, v27);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "CLGpsOdometryRhythmic::CLGpsOdometryRhythmic(id<CLIntersiloUniverse>)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v19 = *(void **)(a1 + 40);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_1017C2CFC;
    v28[3] = &unk_10212ECA0;
    v28[4] = a1;
    objc_msgSend(v19, "setHandler:", v28);
  }
  return a1;
}

void sub_1017C2C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  void *v23;
  uint64_t v24;
  _QWORD *v25;

  v23 = *(void **)(v20 + 48);
  if (v23)
  {
    *(_QWORD *)(v20 + 56) = v23;
    operator delete(v23);
  }
  v24 = *v21;
  *v21 = 0;
  if (v24)
    sub_1017C47B8((uint64_t)v21, v24);
  v25 = (_QWORD *)*v19;
  *v19 = 0;
  if (v25)
    sub_1017C4728((uint64_t)v19, v25);
  _Unwind_Resume(exception_object);
}

void sub_1017C2CFC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "GPSODOM-MM,CLGpsOdometryRhythmic,coreAnalytics timer fire", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,CLGpsOdometryRhythmic,coreAnalytics timer fire", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "CLGpsOdometryRhythmic::CLGpsOdometryRhythmic(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_1017C2E94(v1);
}

void sub_1017C2E94(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  sub_1017C323C(a1);
  objc_msgSend(*(id *)(a1 + 40), "setNextFireDelay:", 1.79769313e308);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "GPSODOM-MM,CLGpsOdometryRhythmic,coreanalytics timer,off", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,CLGpsOdometryRhythmic,coreanalytics timer,off", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic::onCoreAnalyticsMetricSubmissionTimerFire()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

uint64_t sub_1017C3034(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "GPSODOM-MM,CLGpsOdometryRhythmic deconstructor", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,CLGpsOdometryRhythmic deconstructor", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "CLGpsOdometryRhythmic::~CLGpsOdometryRhythmic()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    objc_msgSend(v3, "setNextFireDelay:", 1.79769313e308);
    v4 = *(void **)(a1 + 40);
    if (v4)
    {
      objc_msgSend(v4, "invalidate");

      *(_QWORD *)(a1 + 40) = 0;
    }
  }
  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v6)
    sub_1017C47B8(a1 + 32, v6);
  v7 = *(_QWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v7)
    sub_1017C4728(a1 + 24, v7);
  return a1;
}

void sub_1017C322C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

double sub_1017C323C(uint64_t a1)
{
  uint64_t v2;
  double result;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    result = sub_1017C1C3C((double *)(v2 + 664));
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    return sub_1017B5974((double *)(v4 + 536));
  return result;
}

void sub_1017C3280(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v5 = a1[3];
  if (v5)
    sub_1017B0EF4(v5, a2, a3);
  v6 = a1[4];
  if (v6)
    sub_1017B8F70(v6, a2);
  v7 = (void *)a1[5];
  if (v7)
  {
    objc_msgSend(v7, "setNextFireDelay:", 360.0);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GPSODOM-MM,CLGpsOdometryRhythmic,coreanalytics timer,setNextFireDelay", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,CLGpsOdometryRhythmic,coreanalytics timer,setNextFireDelay", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic::update(const GNSS::PerEpochData &, const std::optional<CLPedometerPathStraightness>)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_1017C3440(uint64_t a1)
{
  double *v2;
  double v3;
  double v4;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  int v17;
  double *v18;
  double v19;
  double *v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;
  __int16 v38;
  double v39;
  __int16 v40;
  int v41;
  uint8_t buf[4];
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  int v55;
  __int16 v56;
  double v57;
  __int16 v58;
  int v59;

  v2 = *(double **)(a1 + 24);
  if (v2)
  {
    v3 = v2[28];
    v4 = v2[18];
    v2[30] = v2[29];
    v2[33] = v2[32];
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v5 + 24) = *(_QWORD *)(a1 + 16);
    sub_1017B0F8C(v5);
    v6 = *(double **)(a1 + 24);
    v7 = v6[35];
    v8 = *v6;
    v9 = v6[1];
  }
  else
  {
    v7 = -1.0;
    v3 = -1.0;
    v4 = -1.0;
    v9 = -1.0;
    v8 = -1.0;
  }
  v10 = *(double **)(a1 + 32);
  if (v10)
  {
    v3 = v10[28];
    v4 = v10[18];
    v10[30] = v10[29];
    v10[33] = v10[32];
    v11 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(a1 + 16);
    sub_1017B95B4(v11);
    v12 = *(_QWORD **)(a1 + 32);
    v13 = *v12;
    v7 = *((double *)v12 + 35);
    v14 = (v12[194] - v12[193]) >> 4;
  }
  else
  {
    LODWORD(v14) = 0;
    v13 = 0xBFF0000000000000;
  }
  v15 = sub_1017C37D8((double **)(a1 + 48), v3, 360.0);
  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
  {
    v17 = sub_1017C1528(v16, v8, v9, v15);
    v18 = *(double **)(a1 + 32);
    if (v18)
    {
      v19 = *v18;
      if (*v18 >= 0.0)
        goto LABEL_14;
    }
  }
  else
  {
    v17 = 0;
  }
  v20 = *(double **)(a1 + 24);
  if (!v20)
  {
    v19 = 0.0;
    goto LABEL_17;
  }
  v19 = *v20;
LABEL_14:
  if (v19 >= 0.0)
  {
LABEL_17:
    *(double *)(a1 + 16) = v19 + *(double *)(a1 + 16);
    sub_1017C3868((char *)(a1 + 48), v3, v19);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  v21 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134351104;
    v43 = v3;
    v44 = 2050;
    v45 = v4;
    v46 = 2050;
    v47 = v13;
    v48 = 2050;
    v49 = v8;
    v50 = 2050;
    v51 = v7;
    v52 = 2050;
    v53 = v15;
    v54 = 1026;
    v55 = v17;
    v56 = 2050;
    v57 = v19;
    v58 = 1026;
    v59 = v14;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "GPSODOM-MM,RhythmicOdometerDistances,crntTime,%{public}.1lf,prevTime,%{public}.1lf,mmDeltaDistance,%{public}.1lf,scaledDeltaDistance,%{public}.1lf,losDeltaDistance,%{public}.1lf,avgDeltaDistance,%{public}.1lf,mmGood,%{public}d,outputDeltaDistance,%{public}.1lf,numberOfRoadsInMMPath,%{public}d", buf, 0x54u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
    v24 = 134351104;
    v25 = v3;
    v26 = 2050;
    v27 = v4;
    v28 = 2050;
    v29 = v13;
    v30 = 2050;
    v31 = v8;
    v32 = 2050;
    v33 = v7;
    v34 = 2050;
    v35 = v15;
    v36 = 1026;
    v37 = v17;
    v38 = 2050;
    v39 = v19;
    v40 = 1026;
    v41 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,RhythmicOdometerDistances,crntTime,%{public}.1lf,prevTime,%{public}.1lf,mmDeltaDistance,%{public}.1lf,scaledDeltaDistance,%{public}.1lf,losDeltaDistance,%{public}.1lf,avgDeltaDistance,%{public}.1lf,mmGood,%{public}d,outputDeltaDistance,%{public}.1lf,numberOfRoadsInMMPath,%{public}d", &v24, 84);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic::updateDistanceAndBatchedLocations()", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
}

double sub_1017C37D8(double **a1, double a2, double a3)
{
  double v3;
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _BOOL4 v11;
  double v12;

  v3 = -1.0;
  if (a2 >= 0.0 && a3 >= 0.0)
  {
    v4 = *a1;
    v5 = a1[1];
    if (*a1 == v5)
    {
      v8 = 0.0;
      v7 = 0.0;
    }
    else
    {
      v6 = a2 - a3;
      v7 = 0.0;
      v8 = 0.0;
      do
      {
        v9 = *v4;
        v10 = v4[1];
        v4 += 2;
        v11 = v9 >= a2;
        if (v9 < v6)
          v11 = 1;
        if (!v11)
          v8 = v8 + 1.0;
        v12 = -0.0;
        if (!v11)
          v12 = v10;
        v7 = v7 + v12;
      }
      while (v4 != v5);
    }
    if (v8 >= 2.0)
      return v7 / v8;
    else
      return -1.0;
  }
  return v3;
}

char *sub_1017C3868(char *result, double a2, double a3)
{
  char *v3;
  char *v4;
  double *v5;
  double *v6;
  uint64_t v7;
  __n128 v8;

  v3 = result;
  v4 = *(char **)result;
  v5 = (double *)*((_QWORD *)result + 1);
  if (*(double **)result == v5)
  {
LABEL_5:
    if (a2 >= 0.0 && a3 >= 0.0)
    {
      v8.n128_f64[0] = a2;
      v8.n128_f64[1] = a3;
      result = sub_1017C3CD8((uint64_t)result, v4, &v8);
      v7 = *((_QWORD *)v3 + 1);
      if ((unint64_t)(v7 - *(_QWORD *)v3) >= 0x1E1)
        *((_QWORD *)v3 + 1) = v7 - 16;
    }
  }
  else
  {
    v6 = *(double **)result;
    while (vabdd_f64(*v6, a2) >= 0.001)
    {
      v6 += 2;
      if (v6 == v5)
        goto LABEL_5;
    }
  }
  return result;
}

_QWORD *sub_1017C38F8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = (void *)a1[88];
  if (v2)
  {
    a1[89] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[78];
  if (v3)
  {
    a1[79] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[68];
  if (v4)
  {
    a1[69] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[58];
  if (v5)
  {
    a1[59] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[48];
  if (v6)
  {
    a1[49] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[38];
  if (v7)
  {
    a1[39] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[28];
  if (v8)
  {
    a1[29] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[18];
  if (v9)
  {
    a1[19] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[8];
  if (v10)
  {
    a1[9] = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1017C39A8(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

BOOL sub_1017C39D4(double a1, double a2, double a3, double a4)
{
  _BOOL8 result;

  result = 0;
  if (a1 > 0.0 && a2 > 0.0)
    return !sub_10011CE64(a3, a4) && sub_10011CE88(a3, a4);
  return result;
}

void sub_1017C3A34(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

_QWORD *sub_1017C3A60(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (void *)a1[105];
  if (v2)
  {
    a1[106] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[94];
  if (v3)
  {
    a1[95] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[84];
  if (v4)
  {
    a1[85] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[74];
  if (v5)
  {
    a1[75] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[63];
  if (v6)
  {
    a1[64] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[53];
  if (v7)
  {
    a1[54] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[43];
  if (v8)
  {
    a1[44] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[32];
  if (v9)
  {
    a1[33] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[21];
  if (v10)
  {
    a1[22] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[11];
  if (v11)
  {
    a1[12] = v11;
    operator delete(v11);
  }
  return a1;
}

BOOL sub_1017C3B20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  double *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  double **v11;
  double v12;
  double *v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;

  if (!*(_QWORD *)a2)
    return 0;
  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = v3 + 136;
  v5 = *(double **)(v3 + 136);
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  if (*(double **)(v6 + 8) != v5)
  {
    v8 = *v5;
    v9 = v5[1];
  }
  v11 = (double **)(**(_QWORD **)a2 + 136);
  v10 = *v11;
  v12 = 0.0;
  if (v11[1] != *v11)
  {
    v7 = *v10;
    v12 = v10[1];
  }
  if (sub_100512A74(v8, v9, v7, v12, 0.0000001))
    return 1;
  v14 = *(double **)(*a1 + 136);
  v15 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  if (*(double **)(*a1 + 144) != v14)
  {
    v16 = *v14;
    v17 = v14[1];
  }
  v18 = *(_QWORD *)(**(_QWORD **)a2 + 144);
  v19 = 0.0;
  if (v18 != *(_QWORD *)(**(_QWORD **)a2 + 136))
  {
    v15 = *(double *)(v18 - 16);
    v19 = *(double *)(v18 - 8);
  }
  return sub_100512A74(v16, v17, v15, v19, 0.0000001);
}

BOOL sub_1017C3BFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  double **v10;
  double v11;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;

  if (!*(_QWORD *)a2)
    return 0;
  v3 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_QWORD *)(v3 + 144);
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  if (v5 != *(_QWORD *)(v3 + 136))
  {
    v7 = *(double *)(v5 - 16);
    v8 = *(double *)(v5 - 8);
  }
  v10 = (double **)(**(_QWORD **)a2 + 136);
  v9 = *v10;
  v11 = 0.0;
  if (v10[1] != *v10)
  {
    v6 = *v9;
    v11 = v9[1];
  }
  if (sub_100512A74(v7, v8, v6, v11, 0.0000001))
    return 1;
  v13 = *(_QWORD *)(*a1 + 144);
  v14 = 0.0;
  v15 = 0.0;
  v16 = 0.0;
  if (v13 != *(_QWORD *)(*a1 + 136))
  {
    v15 = *(double *)(v13 - 16);
    v16 = *(double *)(v13 - 8);
  }
  v17 = *(_QWORD *)(**(_QWORD **)a2 + 144);
  v18 = 0.0;
  if (v17 != *(_QWORD *)(**(_QWORD **)a2 + 136))
  {
    v14 = *(double *)(v17 - 16);
    v18 = *(double *)(v17 - 8);
  }
  return sub_100512A74(v15, v16, v14, v18, 0.0000001);
}

char *sub_1017C3CD8(uint64_t a1, char *__src, __n128 *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 4) + 1;
    if (v15 >> 60)
      sub_100259694();
    v16 = (__src - v14) >> 4;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 3 > v15)
      v15 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)sub_10028E224(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[16 * v16];
    v23 = v22;
    v24 = &v19[16 * v18];
    sub_1017C3E78((__n128 **)&__p, a3);
    v4 = (char *)sub_1002F51A8((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(__n128 *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 16;
  }
  else
  {
    v10 = __src + 16;
    v11 = v6 - 16;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_OWORD *)v11;
      v11 += 16;
      *(_OWORD *)v12 = v13;
      v12 += 16;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-16 * ((v6 - v10) >> 4)], __src, v6 - v10);
    *(__n128 *)v4 = *a3;
  }
  return v4;
}

void sub_1017C3E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_1017C3E78(__n128 **a1, __n128 *a2)
{
  __n128 *v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 *v13;
  int64_t v14;
  __n128 *v15;
  unint64_t v16;
  __n128 *v17;
  uint64_t v18;
  __n128 *v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __n128 *v25;
  __n128 result;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = a1[1];
    v6 = (char *)v5 - (char *)*a1;
    if (v5 <= *a1)
    {
      if (v4 == *a1)
        v16 = 1;
      else
        v16 = ((char *)v4 - (char *)*a1) >> 3;
      v17 = (__n128 *)sub_10028E224((uint64_t)a1[4], v16);
      v19 = &v17[v16 >> 2];
      v20 = a1[1];
      v4 = v19;
      v21 = (char *)a1[2] - (char *)v20;
      if (v21)
      {
        v4 = (__n128 *)((char *)v19 + (v21 & 0xFFFFFFFFFFFFFFF0));
        v22 = 16 * (v21 >> 4);
        v23 = (char *)&v17[v16 >> 2];
        do
        {
          v24 = (__int128)*v20++;
          *(_OWORD *)v23 = v24;
          v23 += 16;
          v22 -= 16;
        }
        while (v22);
      }
      v25 = *a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[v18];
      if (v25)
      {
        operator delete(v25);
        v4 = a1[2];
      }
    }
    else
    {
      v7 = v6 >> 4;
      v8 = v6 >> 4 < -1;
      v9 = (v6 >> 4) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-v12];
      v14 = (char *)v4 - (char *)v5;
      if (v4 != v5)
      {
        memmove(&v5[-v12], v5, (char *)v4 - (char *)v5);
        v4 = a1[1];
      }
      v15 = &v4[v11];
      v4 = (__n128 *)((char *)v13 + v14);
      a1[1] = v15;
      a1[2] = (__n128 *)((char *)v13 + v14);
    }
  }
  result = *a2;
  *v4 = *a2;
  ++a1[2];
  return result;
}

void *sub_1017C3F8C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x75075075075076)
    sub_10025955C();
  return operator new(560 * a2);
}

_QWORD *sub_1017C3FD4@<X0>(const void **a1@<X1>, const void **a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x50uLL);
  result = sub_1017C4044(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1017C4030(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1017C4044(_QWORD *a1, const void **a2, const void **a3, int *a4)
{
  a1[2] = 0;
  *a1 = off_10214CF60;
  a1[1] = 0;
  sub_10104B42C((uint64_t)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_1017C4088(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1017C409C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1017C409C(a1, *a2);
    sub_1017C409C(a1, a2[1]);
    sub_100261F44((uint64_t)(a2 + 7));
    operator delete(a2);
  }
}

_OWORD *sub_1017C40E4(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v6 = (void **)sub_1011240E8((uint64_t)a1, &v13, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v11[1] = a1 + 1;
    v9 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 6) = v9;
    v12 = 1;
    sub_1000145B0(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_1017C419C((uint64_t)v11, 0);
  }
  return v7;
}

void sub_1017C419C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100261F44((uint64_t)v2 + 56);
    operator delete(v2);
  }
}

uint64_t **sub_1017C41E0(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  __int128 v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v10 = *((_OWORD *)v9 + 2);
          *((_BYTE *)v8 + 48) = *((_BYTE *)v9 + 48);
          *((_OWORD *)v8 + 2) = v10;
          sub_100349198(v8 + 7, v9 + 7);
          sub_10129DA04(v5, v8);
          v8 = v16;
          v17 = v16;
          if (v16)
            v16 = sub_10036C1BC((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_1017C4354((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_1017C43A8(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1017C4340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1017C4354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017C4354(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_1017C409C(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_1017C409C(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_1017C43A8(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v15[2];
  char v16;

  v4 = (uint64_t *)(a1 + 1);
  v5 = (uint64_t *)operator new(0x48uLL);
  v15[0] = v5;
  v15[1] = v4;
  *((_OWORD *)v5 + 2) = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  v5[6] = *(_QWORD *)(a2 + 16);
  v5[7] = v6;
  v7 = *(_QWORD *)(a2 + 32);
  v5[8] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v16 = 1;
  v10 = *v4;
  v11 = (uint64_t **)v4;
  if (*v4)
  {
    v12 = (uint64_t)(v5 + 4);
    do
    {
      while (1)
      {
        v4 = (uint64_t *)v10;
        if (!sub_100F5C430(v12, v10 + 32))
          break;
        v10 = *v4;
        v11 = (uint64_t **)v4;
        if (!*v4)
          goto LABEL_11;
      }
      v10 = v4[1];
    }
    while (v10);
    v11 = (uint64_t **)(v4 + 1);
  }
LABEL_11:
  v13 = v15[0];
  sub_1000145B0(a1, (uint64_t)v4, v11, v15[0]);
  v15[0] = 0;
  sub_1017C419C((uint64_t)v15, 0);
  return v13;
}

void sub_1017C4488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1017C419C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_OWORD *sub_1017C44A0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v5 = (void **)sub_1011240E8((uint64_t)a1, &v15, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x48uLL);
    v13[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    v8 = *(_QWORD *)(a3 + 24);
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *((_QWORD *)v6 + 7) = v8;
    v9 = *(_QWORD *)(a3 + 32);
    *((_QWORD *)v6 + 8) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v14 = 1;
    sub_1000145B0(a1, v15, v7, (uint64_t *)v6);
    v13[0] = 0;
    sub_1017C419C((uint64_t)v13, 0);
  }
  return v6;
}

uint64_t *sub_1017C4570(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_1017C409C(v2 + 88, *(_QWORD **)(v2 + 96));
    operator delete();
  }
  return result;
}

void sub_1017C45C0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  *a1 = a2;
  v2 = a2;
  operator new();
}

void sub_1017C4634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1017C46D8((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1017C464C(uint64_t a1)
{
  sub_1017C4694(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_1017C4654(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1017C4694(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100261F44(a2 + 72);
    sub_100261F44(a2);
    operator delete();
  }
}

uint64_t *sub_1017C46D8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_100261F44(v2 + 72);
    sub_100261F44(v2);
    operator delete();
  }
  return result;
}

void sub_1017C4728(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a2)
  {
    sub_1017C38F8(a2 + 67);
    v3 = (void *)a2[47];
    if (v3)
    {
      a2[48] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[44];
    if (v4)
    {
      a2[45] = v4;
      operator delete(v4);
    }
    v5 = (void *)a2[36];
    if (v5)
    {
      a2[37] = v5;
      operator delete(v5);
    }
    v6 = (void *)a2[32];
    if (v6)
    {
      a2[33] = v6;
      operator delete(v6);
    }
    v7 = (void *)a2[29];
    if (v7)
    {
      a2[30] = v7;
      operator delete(v7);
    }
    operator delete();
  }
}

void sub_1017C47B8(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void **v5;

  if (a2)
  {
    v5 = (void **)(a2 + 1544);
    sub_1002A3684(&v5);
    sub_1017C3A60((_QWORD *)(a2 + 664));
    sub_100008848(a2 + 568, *(_QWORD **)(a2 + 576));
    sub_1017C4570((uint64_t *)(a2 + 424), 0);
    sub_100261F44(a2 + 376);
    v3 = *(void **)(a2 + 256);
    if (v3)
    {
      *(_QWORD *)(a2 + 264) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a2 + 232);
    if (v4)
    {
      *(_QWORD *)(a2 + 240) = v4;
      operator delete(v4);
    }
    operator delete();
  }
}

void sub_1017C4850()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint8_t v3[40];

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10085FBA8())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed,GPSODOM,fClientLocationsVector size different from fClientLocationsPrivateVector\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
    }
    if (sub_10085FBE8())
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v0, v1, v2, "Assertion failed,GPSODOM,fClientLocationsVector size different from fClientLocationsPrivateVector", "{\"msg%{public}.0s\":\"Assertion failed,GPSODOM,fClientLocationsVector size different from fClientLocationsPrivateVector\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF508);
    }
    if (sub_10085FBBC())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed,GPSODOM,fClientLocationsVector size different from fClientLocationsPrivateVector\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/Odometry/CLGpsOdometryRhythmic.mm", 674, "getRhythmicGnssBatchedLocations");
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  }
}

void sub_1017C49DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  sub_10029A040();
  a23 = v26;
  a24 = v27;
  sub_10085FC2C();
  if (!v28)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"GPSODOM-MM,Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_100299E88((void *)&_mh_execute_header, v24, v29, v30, "GPSODOM-MM,Assertion failed,fGEOMapFeatureAccess==nil", "{\"msg%{public}.0s\":\"GPSODOM-MM,Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GPSODOM-MM,Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_1017C4B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  sub_10029A040();
  a23 = v26;
  a24 = v27;
  sub_10085FC2C();
  if (!v28)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"GPSODOM-MM,MapRoadBuffer Creation,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_100299E88((void *)&_mh_execute_header, v24, v29, v30, "GPSODOM-MM,MapRoadBuffer Creation,Assertion failed", "{\"msg%{public}.0s\":\"GPSODOM-MM,MapRoadBuffer Creation,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GPSODOM-MM,MapRoadBuffer Creation,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_1017C4C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  v28 = v27;
  sub_101256420();
  if (!v29)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"GPSODOM,ScaledOdometer Creation,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101256420();
    if (!v29)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v30, v31, "GPSODOM,ScaledOdometer Creation,Assertion failed", "{\"msg%{public}.0s\":\"GPSODOM,ScaledOdometer Creation,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101256420();
    if (!v29)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
  }
  if (sub_10085FC08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GPSODOM,ScaledOdometer Creation,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *v28 = 2185;
  sub_100299FDC();
}

void sub_1017C4DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  v28 = v27;
  sub_101256420();
  if (!v29)
    dispatch_once(&qword_1022A0070, &stru_1021CF508);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"GPSODOM,MapMatchedOdometer Creation,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101256420();
    if (!v29)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v30, v31, "GPSODOM,MapMatchedOdometer Creation,Assertion failed", "{\"msg%{public}.0s\":\"GPSODOM,MapMatchedOdometer Creation,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101256420();
    if (!v29)
      dispatch_once(&qword_1022A0070, &stru_1021CF508);
  }
  if (sub_10085FC08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GPSODOM,MapMatchedOdometer Creation,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *v28 = 2191;
  sub_100299FDC();
}

void sub_1017C4FC8(uint64_t a1, void *a2)
{
  NSObject *v4;
  _BOOL4 v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  _BOOL4 v15;
  __int16 v16;
  void *v17;

  if (a2)
  {
    *(_BYTE *)(a1 + 3481) = objc_msgSend(a2, "hasDepartureDate");
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF668);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_BYTE *)(a1 + 3481) == 0;
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 1026;
      v15 = v5;
      v16 = 2113;
      v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BaroAlt,received leeched visit notification\", \"InVisit\":%{public}d, \"visit\":%{private, location:escape_only}@}", buf, 0x22u);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF668);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,#warning,Received null visit", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF668);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "BaroAlt,#warning,Received null visit", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onVisit(CLVisit *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_1017C5224(uint64_t a1, uint64_t a2)
{
  __int128 v8;
  void *__p[2];
  char v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_101BAFC90;
  *(_DWORD *)(a1 + 40) = -1;
  *(_WORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = xmmword_101BAFC90;
  *(_DWORD *)(a1 + 120) = -1;
  *(_WORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = xmmword_101CDD6B0;
  *(_OWORD *)(a1 + 192) = xmmword_101CDD6C0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 252) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 260) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 276) = 0;
  *(_WORD *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 308) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 332) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 356) = 0;
  *(_WORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 362) = 0;
  *(_WORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 268) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 364) = 0x500000000;
  *(_WORD *)(a1 + 372) = 0;
  *(_DWORD *)(a1 + 376) = 5;
  *(_BYTE *)(a1 + 380) = 1;
  *(_QWORD *)(a1 + 384) = 0x4122750000000000;
  *(_DWORD *)(a1 + 392) = 50;
  *(_QWORD *)(a1 + 400) = 0x409C200000000000;
  *(_DWORD *)(a1 + 408) = 60;
  *(_QWORD *)(a1 + 416) = 0x403E000000000000;
  *(_DWORD *)(a1 + 424) = 8;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 480) = xmmword_101BAFC90;
  *(_BYTE *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = a2;
  *(_QWORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  sub_1015A2E04(__p, "CLBarometricAltitudeSignificantElevation");
  sub_1008B51D4(a1 + 528, __p);
  if (v10 < 0)
    operator delete(__p[0]);
  *(_WORD *)(a1 + 1336) = 0;
  *(_BYTE *)(a1 + 1338) = 0;
  *(_QWORD *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_QWORD *)(a1 + 1328) = -1;
  *(_WORD *)(a1 + 1432) = 0;
  *(_BYTE *)(a1 + 1434) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_QWORD *)(a1 + 1424) = -1;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_DWORD *)(a1 + 1544) = -1;
  *(_QWORD *)(a1 + 1600) = 0;
  *(_QWORD *)(a1 + 1608) = 0;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1580) = 0u;
  sub_1015A2E04((_QWORD *)(a1 + 1616), "");
  *(_BYTE *)(a1 + 1688) = 0;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_QWORD *)(a1 + 1704) = 0;
  *(_QWORD *)(a1 + 1696) = 0;
  *(_QWORD *)(a1 + 1712) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1920) = 0;
  *(_QWORD *)(a1 + 1912) = 0;
  *(_DWORD *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_WORD *)(a1 + 1872) = 0;
  *(_QWORD *)(a1 + 1888) = 0;
  *(_QWORD *)(a1 + 1880) = 0;
  *(_DWORD *)(a1 + 1904) = 0;
  *(_QWORD *)(a1 + 1896) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 1928), "");
  *(_QWORD *)(a1 + 1960) = 0;
  *(_QWORD *)(a1 + 1952) = 0;
  *(_DWORD *)(a1 + 1968) = 0;
  *(_QWORD *)(a1 + 1984) = 0;
  *(_QWORD *)(a1 + 1976) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 1992), "");
  *(_BYTE *)(a1 + 2016) = 0;
  *(_OWORD *)(a1 + 2024) = xmmword_101BAFEE0;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_QWORD *)(a1 + 2072) = 0;
  *(_QWORD *)(a1 + 2080) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_QWORD *)(a1 + 2120) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2128) = 0;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_DWORD *)(a1 + 2152) = -1;
  *(_BYTE *)(a1 + 2156) = 0;
  *(_QWORD *)(a1 + 2264) = 0;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2217) = 0u;
  *(_BYTE *)(a1 + 2256) = 0;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_QWORD *)(a1 + 2272) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2280) = 0;
  *(_QWORD *)(a1 + 2288) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_QWORD *)(a1 + 2344) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 2376) = 0;
  *(_DWORD *)(a1 + 2384) = 0xFFFF;
  *(_OWORD *)(a1 + 2388) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  v8 = _Q1;
  *(_OWORD *)(a1 + 2404) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 2420) = _Q1;
  *(_OWORD *)(a1 + 2436) = _Q1;
  *(_OWORD *)(a1 + 2452) = _Q1;
  *(_DWORD *)(a1 + 2468) = 0;
  *(_QWORD *)(a1 + 2472) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2496) = 0;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_QWORD *)(a1 + 2500) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2508) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 2536) = 0;
  *(_OWORD *)(a1 + 2512) = 0u;
  *(_QWORD *)(a1 + 2528) = 0;
  sub_10012A33C(a1 + 2544);
  *(_DWORD *)(a1 + 3184) = 0xFFFF;
  *(_OWORD *)(a1 + 3188) = 0u;
  *(_OWORD *)(a1 + 3204) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 3220) = v8;
  *(_OWORD *)(a1 + 3236) = v8;
  *(_OWORD *)(a1 + 3252) = v8;
  *(_DWORD *)(a1 + 3268) = 0;
  *(_QWORD *)(a1 + 3272) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_DWORD *)(a1 + 3296) = 0;
  *(_QWORD *)(a1 + 3300) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 3308) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 3312) = 0;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_BYTE *)(a1 + 3336) = 0;
  *(_QWORD *)(a1 + 3440) = 0;
  *(_OWORD *)(a1 + 3424) = 0u;
  *(_OWORD *)(a1 + 3408) = 0u;
  *(_OWORD *)(a1 + 3392) = 0u;
  *(_OWORD *)(a1 + 3376) = 0u;
  *(_OWORD *)(a1 + 3360) = 0u;
  *(_OWORD *)(a1 + 3344) = 0u;
  *(_QWORD *)(a1 + 3448) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 3456) = 0;
  *(_BYTE *)(a1 + 3460) = 0;
  *(_DWORD *)(a1 + 3479) = 0;
  *(_OWORD *)(a1 + 3464) = 0u;
  *(_OWORD *)(a1 + 3488) = 0u;
  *(_OWORD *)(a1 + 3504) = 0u;
  *(_OWORD *)(a1 + 3516) = 0u;
  *(_QWORD *)(a1 + 3552) = 0;
  *(_DWORD *)(a1 + 3560) = 0;
  *(_QWORD *)(a1 + 3536) = 0;
  *(_QWORD *)(a1 + 3544) = 0;
  *(_QWORD *)(a1 + 3584) = 0;
  *(_DWORD *)(a1 + 3592) = 0;
  *(_QWORD *)(a1 + 3568) = 0;
  *(_QWORD *)(a1 + 3576) = 0;
  *(_QWORD *)(a1 + 3608) = 0;
  *(_QWORD *)(a1 + 3600) = 0;
  *(_QWORD *)(a1 + 3616) = 0;
  *(_QWORD *)(a1 + 3624) = 0x4122750000000000;
  *(_OWORD *)(a1 + 3632) = xmmword_101CDD6D0;
  *(_QWORD *)(a1 + 3648) = 0x40AC200000000000;
  *(_OWORD *)(a1 + 3656) = 0u;
  *(_OWORD *)(a1 + 3672) = 0u;
  *(_OWORD *)(a1 + 3688) = 0u;
  *(_OWORD *)(a1 + 3704) = 0u;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_OWORD *)(a1 + 3736) = 0u;
  *(_DWORD *)(a1 + 3752) = 0;
  sub_1017C9950(a1);
  sub_1004FAEDC();
}

void sub_1017C9544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  sub_10047F25C((_QWORD *)(v12 + 3688));
  v15 = *(_QWORD *)(v12 + 3680);
  *(_QWORD *)(v12 + 3680) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(v12 + 3672);
  *(_QWORD *)(v12 + 3672) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(v12 + 3504);
  *(_QWORD *)(v12 + 3504) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(v12 + 3496);
  *(_QWORD *)(v12 + 3496) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_100427A00((_QWORD *)(v12 + 3400));
  sub_100427A00((_QWORD *)(v12 + 3352));
  sub_100261F44(v12 + 3064);
  v19 = *(_QWORD **)(v12 + 2376);
  if (v19 == (_QWORD *)(v12 + 2352))
  {
    v20 = 4;
    v19 = (_QWORD *)(v12 + 2352);
  }
  else
  {
    if (!v19)
      goto LABEL_14;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_14:
  sub_10047F25C(a12);
  v21 = *(_QWORD *)(v12 + 2280);
  *(_QWORD *)(v12 + 2280) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = (uint64_t *)(v12 + 2240);
  v23 = *(_QWORD *)(v12 + 2248);
  *(_QWORD *)(v12 + 2248) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *v22;
  *v22 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  sub_1017CC014(v13);
  sub_10047F25C((_QWORD *)(v12 + 1440));
  if (*(char *)(v12 + 1223) < 0)
    operator delete(*(void **)(v12 + 1200));
  v25 = *(_QWORD *)(v12 + 512);
  *(_QWORD *)(v12 + 512) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD **)v12;
  *(_QWORD *)v12 = 0;
  if (v26)
    sub_1017DC138(v12, v26);
  _Unwind_Resume(a1);
}

void sub_1017C9950(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int16 v9;
  __int16 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  int v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  int v34;
  const char *v35;
  uint8_t *v36;
  int v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint8_t buf[16];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,resetting", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    LOWORD(v41) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,resetting", &v41, 2);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::reset()", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  *(_QWORD *)(a1 + 1240) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  sub_1008B4FC8(a1 + 528);
  *(_QWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 480) = xmmword_101BAFC90;
  if (*(_BYTE *)(a1 + 520))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 512) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 512) + 8), 7);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,odometer unsubscribed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      LOWORD(v41) = 0;
      LODWORD(v40) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,odometer unsubscribed", &v41, v40);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::reset()", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  *(_BYTE *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2217) = 0u;
  memset(buf, 0, sizeof(buf));
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_QWORD *)(a1 + 1544) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_OWORD *)(a1 + 1552) = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 2120) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2128) = 0;
  *(_QWORD *)(a1 + 2144) = 0;
  *(_QWORD *)(a1 + 2136) = 0;
  *(_DWORD *)(a1 + 2152) = -1;
  sub_1017D15B4(a1);
  *(_WORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 362) = 0;
  *(_QWORD *)(a1 + 364) = 0x500000000;
  *(_WORD *)(a1 + 372) = 0;
  *(_DWORD *)(a1 + 376) = 5;
  *(_BYTE *)(a1 + 380) = 1;
  *(_QWORD *)(a1 + 384) = 0x4122750000000000;
  *(_DWORD *)(a1 + 392) = 50;
  *(_QWORD *)(a1 + 400) = 0x409C200000000000;
  *(_DWORD *)(a1 + 408) = 60;
  *(_QWORD *)(a1 + 416) = 0x403E000000000000;
  *(_DWORD *)(a1 + 424) = 8;
  if (*(_QWORD *)a1)
    sub_101742538(*(_QWORD *)a1);
  sub_1017D1898(a1 + 1576);
  *(_QWORD *)(a1 + 2024) = 0;
  *(_QWORD *)(a1 + 2032) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_QWORD *)(a1 + 2080) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  sub_1001E4804(buf);
  LOBYTE(v41) = 0;
  v4 = sub_1001E4874(*(uint64_t *)buf, "BaroAltCnOutdoorCalTriggerEnabled", (BOOL *)&v41);
  if ((_BYTE)v41)
    v5 = v4;
  else
    v5 = 0;
  v6 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_21;
  v7 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5)
      goto LABEL_36;
  }
  else
  {
LABEL_21:
    if (!v5)
      goto LABEL_36;
  }
  sub_1001E4804(buf);
  LOBYTE(v41) = 0;
  v9 = sub_1001E4874(*(uint64_t *)buf, "BaroAltCnOutdoorCalTriggerEnabled", (BOOL *)&v41);
  if ((_BYTE)v41)
    v10 = v9;
  else
    v10 = 0;
  *(_WORD *)(a1 + 238) = v10 | 0x100;
  v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v14 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (!*(_BYTE *)(a1 + 239))
      sub_10028DF3C();
    v15 = *(unsigned __int8 *)(a1 + 238);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BaroAlt,BaroAltCnOutdoorCalTriggerEnabled,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    if (!*(_BYTE *)(a1 + 239))
      sub_10028DF3C();
    v37 = *(unsigned __int8 *)(a1 + 238);
    v41 = 67240192;
    v42 = v37;
    LODWORD(v40) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,BaroAltCnOutdoorCalTriggerEnabled,%{public}d", &v41, v40);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::reset()", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
LABEL_36:
  sub_1001E4804(buf);
  v41 = 0;
  v16 = sub_1001E4B84(*(uint64_t *)buf, "CLBaroAltReferencePressureSource", &v41);
  v17 = v41;
  if (!v16)
    v17 = 0;
  *(_DWORD *)(a1 + 2152) = v17;
  v18 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v21 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v22 = *(_DWORD *)(a1 + 2152);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "BaroAlt,CLBaroAltReferencePressureSource,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v29 = *(_DWORD *)(a1 + 2152);
    v41 = 67240192;
    v42 = v29;
    LODWORD(v40) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,CLBaroAltReferencePressureSource,%{public}d", &v41, v40);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::reset()", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  if (*(_DWORD *)(a1 + 2152))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v23 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v24 = *(_DWORD *)(a1 + 2152);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "BaroAlt,unsupported reference pressure source,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v34 = *(_DWORD *)(a1 + 2152);
      v41 = 67240192;
      v42 = v34;
      LODWORD(v40) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "BaroAlt,unsupported reference pressure source,%{public}d", &v41, v40);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 0, "void CLBarometricAltimeter::reset()", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
  }
  v25 = *(void **)(a1 + 2264);
  if (v25)
    objc_msgSend(v25, "setNextFireDelay:", 1.79769313e308);
  *(_BYTE *)(a1 + 3460) = 0;
  v26 = 236;
  if (!*(_BYTE *)(a1 + 237))
    v26 = 360;
  if (*(_BYTE *)(a1 + v26))
  {
    sub_1017CC3E8((_QWORD *)a1);
    *(_BYTE *)(a1 + 3460) = 1;
  }
  sub_1017D1B48(a1);
  sub_10021CBD4(a1 + 2384);
}

