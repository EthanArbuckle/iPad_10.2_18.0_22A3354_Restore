void sub_100A98DA8(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100A98DD4()
{
  _DWORD *v0;
  _QWORD *v1;
  void *__p;
  void *v4;
  _QWORD *v5;

  v0 = operator new(4uLL);
  __p = v0;
  *v0 = 3;
  v4 = v0 + 1;
  v5 = v0 + 1;
  sub_1009FAD60((uint64_t)&xmmword_102306808, 10, 0, 1, (uint64_t)&__p, 10.0, 1.0, 1.0);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
  __cxa_atexit((void (*)(void *))sub_100A987FC, &xmmword_102306808, (void *)&_mh_execute_header);
  v1 = operator new(8uLL);
  __p = v1;
  *v1 = 0x900000001;
  v4 = v1 + 1;
  v5 = v1 + 1;
  sub_1009FAD64((uint64_t)&qword_102306840, (uint64_t)&__p, 30.0);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
  return __cxa_atexit((void (*)(void *))sub_100A9882C, &qword_102306840, (void *)&_mh_execute_header);
}

void sub_100A98EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A98EDC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5, float a6)
{
  NSObject *v10;
  double v11;
  double v12;
  double v14;
  double v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;

  *(_DWORD *)a1 = -1082130432;
  *(_BYTE *)(a1 + 4) = 0;
  *(float *)(a1 + 8) = a5;
  *(float *)(a1 + 12) = a6;
  *(_DWORD *)(a1 + 16) = 5;
  *(_QWORD *)(a1 + 24) = off_102138370;
  *(_QWORD *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = off_102166E70;
  *(_QWORD *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = off_102138370;
  *(_QWORD *)(a1 + 192) = a2;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_BYTE *)(a1 + 256) = a4;
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102166E40);
  v10 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(float *)(a1 + 8);
    v12 = *(float *)(a1 + 12);
    *(_DWORD *)buf = 134219008;
    v30 = v11;
    v31 = 2048;
    v32 = v12;
    v33 = 2048;
    v34 = a2;
    v35 = 2048;
    v36 = a3;
    v37 = 1024;
    v38 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd), coverAttached (%d)", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102166E40);
    v14 = *(float *)(a1 + 8);
    v15 = *(float *)(a1 + 12);
    v19 = 134219008;
    v20 = v14;
    v21 = 2048;
    v22 = v15;
    v23 = 2048;
    v24 = a2;
    v25 = 2048;
    v26 = a3;
    v27 = 1024;
    v28 = a4;
    LODWORD(v18) = 48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd), coverAttached (%d)", COERCE_DOUBLE(&v19), v18);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "CLCompassAccuracy::CLCompassAccuracy(const float, const float, const size_t, const size_t, const BOOL)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return a1;
}

void sub_100A9918C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1[23] = v3 + 16;
  sub_100412390(v1 + 26);
  v1[12] = v4 + 16;
  sub_100412390(v2);
  v1[3] = v3 + 16;
  sub_100412390(v1 + 6);
  _Unwind_Resume(a1);
}

_QWORD *sub_100A991C8(_QWORD *a1)
{
  *a1 = off_102166E70;
  sub_100412390(a1 + 5);
  return a1;
}

_QWORD *sub_100A99200(_QWORD *a1)
{
  a1[23] = off_102138370;
  sub_100412390(a1 + 26);
  a1[12] = off_102166E70;
  sub_100412390(a1 + 17);
  a1[3] = off_102138370;
  sub_100412390(a1 + 6);
  return a1;
}

void sub_100A99260(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  NSObject *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  int v16;
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  *(_DWORD *)a1 = -1082130432;
  *(float *)(a1 + 8) = a4;
  *(float *)(a1 + 12) = a5;
  *(_QWORD *)(a1 + 32) = a2;
  sub_10041250C((_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102166E40);
  v8 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(float *)(a1 + 8);
    v10 = *(float *)(a1 + 12);
    *(_DWORD *)buf = 134218752;
    v25 = v9;
    v26 = 2048;
    v27 = v10;
    v28 = 2048;
    v29 = a2;
    v30 = 2048;
    v31 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd)", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102166E40);
    v11 = *(float *)(a1 + 8);
    v12 = *(float *)(a1 + 12);
    v16 = 134218752;
    v17 = v11;
    v18 = 2048;
    v19 = v12;
    v20 = 2048;
    v21 = a2;
    v22 = 2048;
    v23 = a3;
    LODWORD(v15) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd)", COERCE_DOUBLE(&v16), v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLCompassAccuracy::init(const float, const float, const size_t, const size_t)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
}

float sub_100A99490(uint64_t a1, float a2, float a3)
{
  unint64_t v4;
  float v5;
  float v7;
  float v8;
  float v9;

  v9 = a3;
  if (*(_BYTE *)(a1 + 4))
  {
    v8 = (float)(a2 - *(float *)(a1 + 8)) * (float)(a2 - *(float *)(a1 + 8));
    sub_10007D084(a1 + 24, &v8);
    v4 = *(_QWORD *)(a1 + 88);
    if (v4)
      v5 = *(float *)(a1 + 40) / (float)v4;
    else
      v5 = 0.0;
    v7 = v5;
    sub_100A99514(a1 + 96, &v7);
  }
  return sub_10007D084(a1 + 184, &v9);
}

void sub_100A99514(uint64_t a1, float *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = a1 + 40;
  sub_1000BFB54((_QWORD *)(a1 + 40), a2);
  v5 = *(_QWORD *)(a1 + 80);
  if (v5 > *(_QWORD *)(a1 + 8))
  {
    ++*(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 80) = v5 - 1;
    sub_1004128C0(v4, 1);
  }
  if (*a2 <= *(float *)(a1 + 16))
  {
    v6 = *(_QWORD *)(a1 + 24) + 1;
    *(_QWORD *)(a1 + 24) = v6;
    if (v6 >= *(_QWORD *)(a1 + 8))
      sub_100A99934(a1);
  }
  else
  {
    *(float *)(a1 + 16) = *a2;
    *(_QWORD *)(a1 + 24) = 0;
  }
}

float sub_100A995BC(uint64_t a1)
{
  sub_10041250C((_QWORD *)(a1 + 24));
  return sub_100A995E4(a1 + 96);
}

float sub_100A995E4(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;

  v2 = *(void ***)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 80) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 56);
      v2 = (void **)(*(_QWORD *)(a1 + 48) + 8);
      *(_QWORD *)(a1 + 48) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 72) = v6;
  }
  result = *(float *)(a1 + 32);
  *(float *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

float sub_100A99664(uint64_t a1, int a2)
{
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  float v7;

  if (a2 < 1)
    return *(float *)a1;
  v3 = *(_DWORD *)(a1 + 16) - a2;
  if (v3 > 4)
    v4 = 40.0;
  else
    v4 = flt_101C05530[v3];
  if (*(_BYTE *)(a1 + 4))
  {
    v5 = sub_100A9976C(a1);
    if (*(float *)(a1 + 8) >= 70.0)
      v6 = v4 + 10.0;
    else
      v6 = v4;
    if (v5 < v6)
      v4 = v6;
    else
      v4 = v5;
  }
  if (*(_BYTE *)(a1 + 256))
  {
    v7 = v4 + sub_100A99820(a1);
    v4 = -1.0;
    if (v7 > 0.0)
    {
      v4 = 10.0;
      if (v7 > 10.0)
      {
        v4 = 15.0;
        if (v7 > 15.0)
        {
          v4 = 20.0;
          if (v7 > 20.0)
          {
            v4 = 25.0;
            if (v7 > 25.0)
            {
              v4 = 30.0;
              if (v7 > 30.0)
              {
                if (v7 <= 35.0)
                  return 35.0;
                else
                  return 40.0;
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

float sub_100A9976C(uint64_t a1)
{
  unint64_t v1;
  float v2;
  float v3;
  float result;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    v2 = sqrtf(*(float *)(a1 + 112)) / sqrt((double)v1);
  else
    v2 = 0.0;
  v3 = v2 * *(float *)(a1 + 12);
  result = 10.0;
  if (v3 >= 15.0)
  {
    result = 15.0;
    if (v3 >= 30.0)
    {
      result = 20.0;
      if (v3 >= 45.0)
      {
        result = 25.0;
        if (v3 >= 60.0)
        {
          result = 30.0;
          if (v3 >= 75.0)
          {
            if (v3 >= 90.0)
              return 40.0;
            else
              return 35.0;
          }
        }
      }
    }
  }
  return result;
}

float sub_100A99820(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(a1 + 192);
  if (v1 && (v2 = *(_QWORD *)(a1 + 248), v2 >= v1))
    return sub_100A99850(*(float *)(a1 + 200) / (float)v2, 5.0);
  else
    return 0.0;
}

float sub_100A99850(float a1, float a2)
{
  float v5;
  float v6;
  float v7;

  if (a2 > a1)
    return 180.0;
  v5 = (float)-a2 / a1;
  v6 = acosf(v5);
  v7 = sinf(v6);
  return fabsf(atan2f(v7 * a2, a1 + (float)(a2 * v5))) * 57.2957795;
}

void sub_100A998C4(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100A998F0(_QWORD *a1)
{
  *a1 = off_102166E70;
  sub_100412390(a1 + 5);
  operator delete();
}

uint64_t sub_100A99934(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  float *v13;
  unint64_t v14;
  _BOOL4 v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(result + 72);
  v2 = *(_QWORD *)(result + 48);
  v3 = *(_QWORD *)(result + 56);
  v4 = (char *)(v2 + 8 * (v1 >> 10));
  if (v3 == v2)
  {
    v6 = 0;
    v5 = *(_QWORD *)(result + 72) & 0x3FFLL;
  }
  else
  {
    v5 = *(_QWORD *)(result + 72) & 0x3FFLL;
    v6 = *(_QWORD *)v4 + 4 * v5;
  }
  v7 = *(float *)(result + 32);
  *(float *)(result + 16) = v7;
  v8 = *(_QWORD *)(result + 80);
  *(_QWORD *)(result + 24) = v8 - 1;
  v9 = v8 + v1;
  v10 = (char *)(v2 + 8 * (v9 >> 10));
  v11 = v9 & 0x3FF;
  v12 = v4;
LABEL_5:
  v13 = (float *)v6;
  while (1)
  {
    v14 = v3 == v2 ? 0 : *(_QWORD *)v10 + 4 * v11;
    v15 = (unint64_t)v13 < v14 && v12 == v10;
    if (v12 >= v10 && !v15)
      return result;
    v16 = *v13;
    if (*v13 > v7)
    {
      *(float *)(result + 16) = v16;
      if (v3 == v2)
        v17 = 0;
      else
        v17 = *(_QWORD *)v4 + 4 * v5;
      if (v13 == (float *)v17)
        v18 = 0;
      else
        v18 = ((v12 - v4) << 7) + ((v6 - *(_QWORD *)v12) >> 2) - ((v17 - *(_QWORD *)v4) >> 2);
      *(_QWORD *)(result + 24) = v18;
      v7 = v16;
    }
    ++v13;
    v6 += 4;
    if (*(_QWORD *)v12 + 4096 == v6)
    {
      v19 = *((_QWORD *)v12 + 1);
      v12 += 8;
      v6 = v19;
      goto LABEL_5;
    }
  }
}

double sub_100A99A48(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = off_102138370;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = off_102138370;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_QWORD *)(a1 + 176) = off_102138370;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = off_102138370;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  return result;
}

_QWORD *sub_100A99AB4(_QWORD *a1)
{
  a1[32] = off_102138370;
  sub_100412390(a1 + 35);
  a1[22] = off_102138370;
  sub_100412390(a1 + 25);
  a1[11] = off_102138370;
  sub_100412390(a1 + 14);
  a1[2] = off_102138370;
  sub_100412390(a1 + 5);
  return a1;
}

void sub_100A99B14(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, unsigned int a5, unsigned int a6, unsigned int a7, _DWORD *a8, char a9)
{
  unint64_t v14;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  const char *v26;
  uint8_t *v27;
  double v28;
  int v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  int v36;
  __int16 v37;
  double v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  int v46;
  __int16 v47;
  double v48;

  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = *a3;
  *(_DWORD *)(a1 + 12) = *a4;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = a5;
  sub_10041250C((_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 96) = a6;
  sub_10041250C((_QWORD *)(a1 + 88));
  *(_QWORD *)(a1 + 160) = a7 / a5;
  *(_DWORD *)(a1 + 168) = *a8;
  *(_QWORD *)(a1 + 184) = a6;
  sub_10041250C((_QWORD *)(a1 + 176));
  *(_BYTE *)(a1 + 248) = a9;
  if (a9)
    v14 = vcvtad_u64_f64(*(float *)a1 * 0.25);
  else
    v14 = 1;
  *(_QWORD *)(a1 + 264) = v14;
  sub_10041250C((_QWORD *)(a1 + 256));
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102166EB0);
  v15 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v16 = *(float *)a1;
    v17 = *(float *)(a1 + 4);
    v18 = *(float *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 160);
    v20 = *(float *)(a1 + 168);
    *(_DWORD *)buf = 134219008;
    v40 = v16;
    v41 = 2048;
    v42 = v17;
    v43 = 2048;
    v44 = v18;
    v45 = 1024;
    v46 = v19;
    v47 = 2048;
    v48 = v20;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "sample rate (%.3f) observation rate (%.3f) observation threshold (%.3f) deviation count threshold (%d) standard deviation threshold (%.3f)", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102166EB0);
    v21 = *(float *)a1;
    v22 = *(float *)(a1 + 4);
    v23 = *(float *)(a1 + 12);
    v24 = *(_DWORD *)(a1 + 160);
    v25 = *(float *)(a1 + 168);
    v29 = 134219008;
    v30 = v21;
    v31 = 2048;
    v32 = v22;
    v33 = 2048;
    v34 = v23;
    v35 = 1024;
    v36 = v24;
    v37 = 2048;
    v38 = v25;
    LODWORD(v28) = 48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "sample rate (%.3f) observation rate (%.3f) observation threshold (%.3f) deviation count threshold (%d) standard deviation threshold (%.3f)", COERCE_DOUBLE(&v29), v28);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLThreshold::init(const float &, const float &, const float &, const unsigned int, const unsigned int, const unsigned int, const float &, const BOOL)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
}

BOOL sub_100A99DF0(uint64_t a1, float *a2)
{
  unint64_t v4;
  float v5;
  float v6;
  unint64_t v7;
  _BOOL8 result;
  NSObject *v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  float v15;
  int v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  unint64_t v21;
  float v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  int v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  int v36;
  uint8_t buf[4];
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  int v46;

  ++*(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 248) && *(_QWORD *)(a1 + 320) < *(_QWORD *)(a1 + 264))
    sub_10007D084(a1 + 256, a2);
  sub_10007D084(a1 + 16, a2);
  if ((unint64_t)*(unsigned int *)(a1 + 8) % *(_QWORD *)(a1 + 24))
    return 0;
  v4 = *(_QWORD *)(a1 + 80);
  v5 = 0.0;
  v6 = 0.0;
  if (v4)
    v6 = *(float *)(a1 + 32) / (float)v4;
  *(float *)buf = v6;
  sub_10007D084(a1 + 88, (float *)buf);
  v7 = *(_QWORD *)(a1 + 152);
  if (v7)
    v5 = *(float *)(a1 + 104) / (float)v7;
  *((float *)&v26 + 1) = (float)(*a2 - v5) * (float)(*a2 - v5);
  sub_10007D084(a1 + 176, (float *)&v26 + 1);
  if (*(_DWORD *)(a1 + 8) % (float)(*(float *)a1 / *(float *)(a1 + 4)))
    return 0;
  result = sub_100A9A18C(a1);
  if (result)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102166EB0);
    v9 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_QWORD *)(a1 + 320);
      if (v10)
        v11 = (float)(*(float *)(a1 + 272) / (float)v10);
      else
        v11 = 0.0;
      v12 = *(float *)(a1 + 12);
      v13 = *a2;
      v14 = *(_QWORD *)(a1 + 240);
      if (v14)
        v15 = *(float *)(a1 + 192) / (float)v14;
      else
        v15 = 0.0;
      v16 = *(_DWORD *)(a1 + 164);
      *(_DWORD *)buf = 134219008;
      v38 = v12;
      v39 = 2048;
      v40 = v13;
      v41 = 2048;
      v42 = v11;
      v43 = 2048;
      v44 = sqrtf(fabsf(v15));
      v45 = 1024;
      v46 = v16;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "threshold (%f) was exceeded with observed value (%f) and base value (%f) and standard deviation (%f) and count of (%d)", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102166EB0);
      v17 = *(_QWORD *)(a1 + 320);
      if (v17)
        v18 = (float)(*(float *)(a1 + 272) / (float)v17);
      else
        v18 = 0.0;
      v19 = *(float *)(a1 + 12);
      v20 = *a2;
      v21 = *(_QWORD *)(a1 + 240);
      if (v21)
        v22 = *(float *)(a1 + 192) / (float)v21;
      else
        v22 = 0.0;
      v23 = *(_DWORD *)(a1 + 164);
      v27 = 134219008;
      v28 = v19;
      v29 = 2048;
      v30 = v20;
      v31 = 2048;
      v32 = v18;
      v33 = 2048;
      v34 = sqrtf(fabsf(v22));
      v35 = 1024;
      v36 = v23;
      LODWORD(v26) = 48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "threshold (%f) was exceeded with observed value (%f) and base value (%f) and standard deviation (%f) and count of (%d)", COERCE_DOUBLE(&v27), v26);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLThreshold::update(const float &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    return 1;
  }
  return result;
}

BOOL sub_100A9A18C(uint64_t a1)
{
  unint64_t v1;
  float v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v7;
  unsigned int v8;
  int v9;

  v1 = *(_QWORD *)(a1 + 152);
  v2 = 0.0;
  v3 = 0.0;
  if (v1)
    v3 = *(float *)(a1 + 104) / (float)v1;
  v4 = *(_QWORD *)(a1 + 320);
  if (v4)
    v2 = *(float *)(a1 + 272) / (float)v4;
  v5 = vabds_f32(v3, v2);
  v6 = *(_QWORD *)(a1 + 240);
  if (v6)
    v7 = *(float *)(a1 + 192) / (float)v6;
  else
    v7 = 0.0;
  v8 = *(_DWORD *)(a1 + 164);
  if (v5 <= *(float *)(a1 + 12))
  {
    if (!v8)
      return sqrtf(v7) != 0.0 && v8 > *(_DWORD *)(a1 + 160);
    v9 = -1;
  }
  else
  {
    v9 = 1;
  }
  v8 += v9;
  *(_DWORD *)(a1 + 164) = v8;
  return sqrtf(v7) != 0.0 && v8 > *(_DWORD *)(a1 + 160);
}

float sub_100A9A21C(uint64_t a1, int a2)
{
  unint64_t v3;
  float v4;
  float result;
  float v6;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 320);
    if (v3)
      v4 = *(float *)(a1 + 272) / (float)v3;
    else
      v4 = 0.0;
    v6 = v4;
    *(_DWORD *)(a1 + 8) = 0;
    sub_10041250C((_QWORD *)(a1 + 16));
    sub_10041250C((_QWORD *)(a1 + 88));
    *(_DWORD *)(a1 + 164) = 0;
    sub_10041250C((_QWORD *)(a1 + 176));
    return sub_100A9A2C4((_QWORD *)a1, &v6);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    sub_10041250C((_QWORD *)(a1 + 16));
    sub_10041250C((_QWORD *)(a1 + 88));
    *(_DWORD *)(a1 + 164) = 0;
    sub_10041250C((_QWORD *)(a1 + 176));
    sub_10041250C((_QWORD *)(a1 + 256));
  }
  return result;
}

float sub_100A9A2C4(_QWORD *a1, float *a2)
{
  uint64_t v4;
  float result;

  v4 = (uint64_t)(a1 + 32);
  sub_10041250C(a1 + 32);
  while (a1[40] < a1[33])
    result = sub_10007D084(v4, a2);
  return result;
}

float sub_100A9A318(uint64_t a1)
{
  return *(float *)(a1 + 12);
}

float sub_100A9A320(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 152);
  if (v1)
    return *(float *)(a1 + 104) / (float)v1;
  else
    return 0.0;
}

float sub_100A9A340(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 320);
  if (v1)
    return *(float *)(a1 + 272) / (float)v1;
  else
    return 0.0;
}

void sub_100A9A360(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_100A9A38C(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v6[232];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 48))(*(_QWORD *)(a3 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a3 + 48) + 24))(*(_QWORD *)(a3 + 48), v6, a1);
    if (v6[208])
      return sub_1004C5730(*(_QWORD *)(a3 + 8));
  }
  return result;
}

uint64_t sub_100A9A424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v5;
  int v6;
  float v7;
  double v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  int v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  double v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  double v31;

  v5 = *(float *)(a3 + 1372);
  v6 = sub_100219944(a3);
  if (!*(_BYTE *)(a3 + 352))
    return a2;
  if (!v6)
    return a2;
  if (*(double *)(a3 + 600) >= *(double *)a3)
    return a2;
  v7 = *(double *)(a3 + 560);
  v8 = 1.0
     - (v5 * -0.699999988 + 208.0 - v7)
     / (v5 * -0.699999988 + 208.0 - fmax(fmin(v5 * -3.20000005 + 117.900002, 100.0), 65.0));
  if (v8 <= 0.324999988)
    return a2;
  v9 = sub_100793C68(2, a2);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102166F18);
  v10 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
  {
    v11 = *(_QWORD *)(a3 + 120);
    *(_DWORD *)buf = 134218752;
    v25 = v11;
    v26 = 1026;
    v27 = a2;
    v28 = 1026;
    v29 = v9;
    v30 = 2050;
    v31 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Overriding youth type for heart rate, beginTime, %f, before, %{public}d, after, %{public}d, fhr,%{public}f", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102166F18);
    v12 = *(_QWORD *)(a3 + 120);
    v16 = 134218752;
    v17 = v12;
    v18 = 1026;
    v19 = a2;
    v20 = 1026;
    v21 = v9;
    v22 = 2050;
    v23 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "Overriding youth type for heart rate, beginTime, %f, before, %{public}d, after, %{public}d, fhr,%{public}f", &v16, 34);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMotionActivity::TypeYouth CLFitnessYouthHeartRateOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  return v9;
}

void sub_100A9A6DC(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100A9A708(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100A9B140(v2, a2);
}

double sub_100A9A718(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = a1 - 8;
  if (!a1)
    v1 = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 752) = 0u;
  return result;
}

BOOL sub_100A9A730(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 20) < 5;
}

double sub_100A9A740(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = a1 - 8;
  if (!a1)
    v1 = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 752) = 0u;
  return result;
}

BOOL sub_100A9A758(uint64_t a1, uint64_t a2)
{
  return *(int *)(a2 + 20) >= 8 && *(double *)a2 < 5.0;
}

uint64_t sub_100A9A780(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100A9B1E8(v2, a2);
}

uint64_t sub_100A9A790(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100A9B288(v2, a2);
}

uint64_t sub_100A9A7A0(uint64_t a1, int a2)
{
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 + 8) = &unk_102166F38;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 10;
  *(_WORD *)(a1 + 24) = 512;
  *(_QWORD *)a1 = off_102167038;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_QWORD *)(a1 + 168) = off_10215FBA0;
  *(_OWORD *)(a1 + 176) = xmmword_101BB1EC0;
  *(_QWORD *)(a1 + 192) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 1;
  *(_DWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 252) = 75;
  *(_DWORD *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(int64x2_t *)(a1 + 576) = vdupq_n_s64(0xC08F380000000000);
  *(_BYTE *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 616) = 1;
  *(_QWORD *)(a1 + 632) = 0xA00000000;
  *(_DWORD *)(a1 + 628) = 0;
  *(_BYTE *)(a1 + 680) = 1;
  *(_QWORD *)(a1 + 696) = 0xC00000000;
  *(_DWORD *)(a1 + 692) = 1031798784;
  *(_OWORD *)(a1 + 752) = 0u;
  if (a2 == 1)
    sub_10023195C(v3, 1, (uint64_t)&v5);
  return a1;
}

void sub_100A9A8A0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v3 = v2;
  v1[21] = v3 + 16;
  v5 = (void *)v1[26];
  if (v5)
  {
    v1[27] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A9A8D0(uint64_t a1, double *a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  unsigned __int16 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int16 v19;
  float v20;
  double v21;
  BOOL v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  NSObject *v28;
  int v29;
  int v30;
  int v31;
  int v33;
  int v34;
  int v35;
  const char *v36;
  uint8_t *v37;
  double v38;
  double v39;
  double v40;
  void *__p;
  void *v42;
  char *v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  _QWORD v61[19];
  __int16 v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  _QWORD v67[6];
  char v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[25];
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  int v93;
  uint64_t v94;
  __int16 v95;
  __int128 v96;
  __int128 v97;
  char v98;
  _BYTE v99[11];
  int v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  unint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  char v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  unint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  int v150;
  unint64_t v151;
  __int16 v152;
  int v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint8_t buf[8];
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  int v167;
  __int16 v168;
  double v169;
  __int16 v170;
  double v171;
  __int16 v172;
  int v173;
  __int16 v174;
  int v175;
  __int16 v176;
  int v177;

  v4 = operator new(0xCuLL);
  v42 = v4 + 3;
  v43 = (char *)(v4 + 3);
  *(_QWORD *)v4 = 7;
  v4[2] = 5;
  __p = v4;
  v5 = sub_100955CE0(a1 + 168, (uint64_t)a2);
  if ((_DWORD)v5 && ((v6 = *(unsigned __int8 *)(a1 + 24), v6 != 3) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102167090);
    v8 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(unsigned __int8 *)(a1 + 24);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HRStop detect in rowing model during state,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102167090);
      v10 = *(unsigned __int8 *)(a1 + 24);
      LODWORD(v61[0]) = 67240192;
      HIDWORD(v61[0]) = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "HRStop detect in rowing model during state,%{public}d", v61, 8);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLRowingWorkoutStopModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    v62 = 0;
    *(_OWORD *)v61 = xmmword_101BB1ED0;
    memset(&v61[2], 0, 135);
    v63 = xmmword_101BB1ED0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67[0] = 0;
    *(_QWORD *)((char *)v67 + 5) = 0;
    *(_QWORD *)((char *)&v67[1] + 6) = 0;
    v68 = 0;
    memset(&v67[3], 0, 24);
    v69 = xmmword_101BB1ED0;
    v70 = 0;
    v71 = 0;
    v72 = 0xFFEFFFFFFFFFFFFFLL;
    v83 = 0;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    memset(v82, 0, sizeof(v82));
    v84 = 0;
    v85 = 0;
    v86 = 0xFFEFFFFFFFFFFFFFLL;
    v87 = 0;
    v88 = 0;
    v94 = 0;
    v95 = 0;
    v100 = 0;
    v93 = 0;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v97 = 0u;
    v96 = 0u;
    v98 = 0;
    memset(v99, 0, sizeof(v99));
    v101 = 0xFFEFFFFFFFFFFFFFLL;
    v120 = 0u;
    v119 = 0u;
    v118 = 0u;
    v117 = 0u;
    v116 = 0u;
    v115 = 0u;
    v114 = 0u;
    v113 = 0u;
    v112 = 0u;
    v111 = 0u;
    v110 = 0u;
    v109 = 0u;
    v108 = 0u;
    v107 = 0u;
    v106 = 0u;
    v105 = 0u;
    v104 = 0u;
    v103 = 0u;
    v102 = 0u;
    v121 = 0;
    v122 = 0xFFEFFFFFFFFFFFFFLL;
    v123 = 0u;
    v124 = 0u;
    v125 = 0u;
    v126 = 0u;
    v127 = 0xFFEFFFFFFFFFFFFFLL;
    v128 = 0;
    v129 = 0;
    v130 = 0;
    v131 = 0;
    v132 = 0xFFEFFFFFFFFFFFFFLL;
    v134 = 0;
    v133 = 0;
    v135 = 0x80000000800000;
    v137 = 0;
    v136 = 0;
    v138 = xmmword_101BB1EE0;
    v139 = 0x80000000800000;
    v140 = 0u;
    v141 = 0u;
    v142 = 0;
    v143 = 0xFFEFFFFFFFFFFFFFLL;
    v144 = 0u;
    v145 = 0u;
    v146 = 0u;
    v147 = 0u;
    v148 = 0u;
    v149 = 0u;
    v150 = 0;
    v151 = 0xFFEFFFFFFFFFFFFFLL;
    v152 = 0;
    v153 = 0;
    v154 = 0xFFEFFFFFFFFFFFFFLL;
    v155 = 7;
    v156 = 0xFFEFFFFFFFFFFFFFLL;
    v157 = 0;
    v159 = 0;
    v158 = 0;
    v160 = 0;
    if ((sub_1000D03AC(a2, &__p, (uint64_t)v61) & 1) != 0)
    {
      sub_100A9B2CC((unsigned __int16 *)(a1 + 32), (uint64_t)v61, v123);
      v13 = sub_100A9B348((unsigned __int16 *)(a1 + 32));
      *(_DWORD *)buf = v13 & 1;
      sub_1000E3564((unsigned __int16 *)(a1 + 632), buf);
      *(_BYTE *)(a1 + 616) = 1;
      v14 = *(unsigned __int16 *)(a1 + 698);
      v15 = *(unsigned int *)(a1 + 700);
      v16 = *(unsigned __int16 *)(a1 + 696);
      if (v16 + v14 >= v15)
        v17 = *(unsigned int *)(a1 + 700);
      else
        v17 = 0;
      *(float *)(a1 + 696 + 4 * (v16 + v14 - v17) + 8) = *((float *)&v133 + 1) * 57.296;
      if (v15 <= v14)
      {
        v18 = v16 + 1;
        if (v18 >= v15)
          v19 = v15;
        else
          v19 = 0;
        *(_WORD *)(a1 + 696) = v18 - v19;
      }
      else
      {
        LOWORD(v14) = v14 + 1;
        *(_WORD *)(a1 + 698) = v14;
      }
      v5 = 0;
      *(_BYTE *)(a1 + 680) = 1;
      if (*(_DWORD *)(a1 + 636) != *(unsigned __int16 *)(a1 + 634) || (_DWORD)v15 != (unsigned __int16)v14)
        goto LABEL_45;
      sub_1004786E8(a1 + 680);
      v20 = *(float *)(a1 + 688);
      v21 = sqrt(v20);
      v22 = v20 <= 0.0;
      v23 = 0.0;
      if (!v22)
        v23 = v21;
      v38 = (float)(*(float *)&v133 * 57.296);
      v39 = v23;
      LOBYTE(v40) = v13 & 1;
      BYTE1(v40) = v13 > 0xFFu;
      v24 = *(unsigned __int16 *)(a1 + 634);
      if (*(_WORD *)(a1 + 634))
      {
        v25 = 0;
        v26 = 0;
        do
          v26 += *(_DWORD *)sub_1000E3624((unsigned __int16 *)(a1 + 632), v25++);
        while (v24 != v25);
      }
      else
      {
        v26 = 0;
      }
      HIDWORD(v40) = v26;
      sub_10023195C(a1 + 8, 0, (uint64_t)&v38);
      v27 = *(unsigned __int8 *)(a1 + 24);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102167090);
      v28 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
      {
        v29 = *(_DWORD *)(a1 + 752);
        v30 = *(_DWORD *)(a1 + 756);
        v31 = *(_DWORD *)(a1 + 760);
        *(_DWORD *)buf = 67111168;
        *(_DWORD *)&buf[4] = v27;
        v162 = 1024;
        v163 = v29;
        v164 = 1024;
        v165 = v30;
        v166 = 1024;
        v167 = v31;
        v168 = 2048;
        v169 = v39;
        v170 = 2048;
        v171 = v38;
        v172 = 1024;
        v173 = LOBYTE(v40);
        v174 = 1024;
        v175 = HIDWORD(v40);
        v176 = 1024;
        v177 = BYTE1(v40);
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "RowStop,state,%d,rowCounter,%d,headingCounter,%d,epochsInExit,%d,longStd,%f,shortStd,%f,isRow,%d,isRowHistory,%d,isRowUnf,%d", buf, 0x40u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102167090);
        v33 = *(_DWORD *)(a1 + 752);
        v34 = *(_DWORD *)(a1 + 756);
        v35 = *(_DWORD *)(a1 + 760);
        v45 = 1024;
        v46 = v33;
        v47 = 1024;
        v48 = v34;
        v49 = 1024;
        v50 = v35;
        v51 = 2048;
        v52 = v39;
        v53 = 2048;
        v54 = v38;
        v55 = 1024;
        v56 = LOBYTE(v40);
        v57 = 1024;
        v58 = HIDWORD(v40);
        v59 = 1024;
        v60 = BYTE1(v40);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "RowStop,state,%d,rowCounter,%d,headingCounter,%d,epochsInExit,%d,longStd,%f,shortStd,%f,isRow,%d,isRowHistory,%d,isRowUnf,%d", &v44, 64, LODWORD(v38), LODWORD(v39), v40, *(double *)&__p, (_DWORD)v42, (_DWORD)v43, 67111168);
        v37 = (uint8_t *)v36;
        sub_100512490("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLRowingWorkoutStopModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
      if (*(_BYTE *)(a1 + 24) == 4)
      {
        v5 = 1;
        goto LABEL_45;
      }
    }
    else
    {
      sub_1015A2E04(buf, "RowStop");
      sub_101069F5C(a2, (uint64_t *)buf, (uint64_t)&__p);
      if (SBYTE1(v167) < 0)
        operator delete(*(void **)buf);
    }
    v5 = 0;
  }
LABEL_45:
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_100A9B0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100A9B140(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;
  char v7;

  v3 = result;
  if (*(int *)(a2 + 20) <= 7)
  {
    *(_DWORD *)(result + 752) = 0;
    v5 = *(_DWORD *)(result + 760) + 1;
    *(_DWORD *)(result + 760) = v5;
  }
  else
  {
    v4 = *(_DWORD *)(result + 752);
    *(_DWORD *)(result + 752) = v4 + 1;
    v5 = *(_DWORD *)(result + 760) + 1;
    *(_DWORD *)(result + 760) = v5;
    if (v4 >= 15)
    {
      result = sub_10023195C(result + 8, 1, (uint64_t)&v7);
      v5 = *(_DWORD *)(v3 + 760);
    }
  }
  if (v5 >= 118 && !*(_DWORD *)(a2 + 20) && !*(_BYTE *)(a2 + 17))
  {
    *(_DWORD *)(v3 + 764) = v5;
    return sub_10023195C(v3 + 8, 4, (uint64_t)&v6);
  }
  return result;
}

uint64_t sub_100A9B1E8(uint64_t result, uint64_t a2)
{
  int v2;
  double v3;
  int v4;
  int v5;
  char v6;

  v2 = *(_DWORD *)(result + 764);
  *(_DWORD *)(result + 764) = v2 + 1;
  v3 = *(double *)(a2 + 8);
  if (v3 > 30.0)
  {
    v4 = *(_DWORD *)(result + 756) + 1;
LABEL_3:
    *(_DWORD *)(result + 756) = v4;
    goto LABEL_9;
  }
  if (v3 < 15.0)
  {
    v5 = *(_DWORD *)(result + 756);
    if (v5 <= 14)
    {
      if (v5 <= 1)
        v5 = 1;
      v4 = v5 - 1;
      goto LABEL_3;
    }
  }
LABEL_9:
  if (v2 >= 23 && (*(int *)(result + 756) > 15 || (v2 + 1) >= 0x2F) && !*(_BYTE *)(a2 + 16))
    return sub_10023195C(result + 8, 3, (uint64_t)&v6);
  return result;
}

uint64_t sub_100A9B288(uint64_t result, uint64_t a2)
{
  int v2;
  char v3;

  v2 = *(_DWORD *)(result + 764);
  *(_DWORD *)(result + 764) = v2 + 1;
  if (v2 >= 58 && !*(_BYTE *)(a2 + 17))
    return sub_10023195C(result + 8, 4, (uint64_t)&v3);
  return result;
}

unsigned __int16 *sub_100A9B2CC(unsigned __int16 *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  double v5;
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  double v10;

  if (!result[1])
  {
    v5 = *(double *)(a2 + 8);
LABEL_7:
    v7 = *(_DWORD *)(a2 + 124);
    v6 = *(_DWORD *)(a2 + 128);
    LODWORD(v8) = *(_DWORD *)(a2 + 112);
    DWORD1(v8) = v6;
    DWORD2(v8) = *(_DWORD *)(a2 + 136);
    HIDWORD(v8) = v7;
    v9 = a3;
    v10 = v5;
    return sub_100A9B618(result, &v8);
  }
  v3 = result[1] + (unint64_t)*result - 1;
  v4 = *((unsigned int *)result + 1);
  if (v3 < v4)
    v4 = 0;
  v5 = *(double *)(a2 + 8);
  if (*(double *)&result[16 * (v3 - v4) + 16] != v5)
    goto LABEL_7;
  return result;
}

uint64_t sub_100A9B348(unsigned __int16 *a1)
{
  int v1;
  int v3;
  unint64_t v4;
  float v5;
  int v6;
  float v7;
  float v8;
  int v9;
  int v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  _BOOL4 v20;
  float v21;
  _BOOL4 v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  _BOOL4 v29;

  v1 = a1[1];
  if (*((_DWORD *)a1 + 1) != v1)
  {
    v1 = 0;
    v23 = 0;
    return v1 | (v23 << 8);
  }
  if (a1[1])
  {
    v3 = 0;
    v4 = 0;
    v5 = 0.0;
    LOBYTE(v6) = 1;
    v7 = 1.1755e-38;
    v8 = 3.4028e38;
    LOBYTE(v9) = 1;
    LOBYTE(v10) = 1;
    v11 = 3.4028e38;
    v12 = 1.1755e-38;
    v13 = 0.0;
    do
    {
      v9 = v9 & (*(float *)(sub_100A9B77C(a1, v4) + 8) > 8.0);
      v6 = v6 & (*(float *)(sub_100A9B77C(a1, v4) + 4) > 0.1);
      v14 = sub_100A9B77C(a1, v4);
      v15 = *(float *)(v14 + 4);
      if (v8 > v15)
        v8 = *(float *)(v14 + 4);
      if (v7 < v15)
        v7 = *(float *)(v14 + 4);
      v13 = v13 + *(float *)sub_100A9B77C(a1, v4);
      v16 = v4 + 1;
      v17 = sub_100A9B77C(a1, v4);
      v18 = *(float *)(v17 + 12);
      if (v11 > v18)
        v11 = *(float *)(v17 + 12);
      if (v12 < v18)
        v12 = *(float *)(v17 + 12);
      v5 = v5 + *(float *)(sub_100A9B77C(a1, v4) + 12);
      v3 |= *(_QWORD *)(sub_100A9B77C(a1, v4) + 16) == 12;
      v10 = v10 & (*(_QWORD *)(sub_100A9B77C(a1, v4) + 16) == 1);
      v19 = a1[1];
      ++v4;
    }
    while (v16 < v19);
    v20 = 0;
    v1 = v10 ^ 1;
    v21 = v5 / (float)v16;
    if (v21 > 1.25 && v21 < 1.85)
      v20 = (float)(v12 - v11) < 0.2;
    v22 = fabsf(v13 / (float)v16) < 0.5;
    if (!v6)
      goto LABEL_23;
  }
  else
  {
    v19 = 0;
    v3 = 0;
    v20 = 0;
    v22 = 1;
    v7 = 1.1755e-38;
    v8 = 3.4028e38;
    v9 = 1;
  }
  if ((float)(v7 - v8) < 0.2)
  {
    if (((v9 & v22 | v3) & 1) != 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_23:
  if (((v20 && v22) & v9 & 1) != 0 || (v3 & 1) != 0)
    goto LABEL_26;
LABEL_25:
  v1 = 0;
LABEL_26:
  v24 = v19 + *a1 - 1;
  v25 = *((unsigned int *)a1 + 1);
  if (v24 < v25)
    v25 = 0;
  v26 = &a1[16 * (v24 - v25)];
  v27 = *((_QWORD *)v26 + 3);
  v29 = *((float *)v26 + 3) > 0.1 && *((float *)v26 + 4) > 8.0 && fabsf(*((float *)v26 + 2)) < 0.5;
  if (v27 == 12)
    v29 = 1;
  v23 = v27 != 1 && v29;
  return v1 | (v23 << 8);
}

unsigned __int16 *sub_100A9B618(unsigned __int16 *result, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  __int128 v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[16 * (v3 - v2)];
  v5 = *a2;
  *(_OWORD *)(v4 + 12) = a2[1];
  *(_OWORD *)(v4 + 4) = v5;
  v6 = result[1];
  v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    v8 = *result + 1;
    if (v8 < v7)
      LOWORD(v7) = 0;
    *result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

_QWORD *sub_100A9B67C(_QWORD *a1)
{
  void *v2;

  *a1 = off_102167038;
  a1[21] = off_10215FBA0;
  v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100A9B6C8(_QWORD *a1)
{
  void *v2;

  *a1 = off_102167038;
  a1[21] = off_10215FBA0;
  v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_100A9B724(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100A9B750(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100A9B77C(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021670B0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021670B0);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CLRowingWorkoutStopModel::RowMotionDetector::Features>::operator[](const size_t) const [T = CLRowingWorkoutStopModel::RowMotionDetector::Features]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[16 * (v4 - v5) + 4];
}

double sub_100A9B974@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  sub_100130BF0((_DWORD *)a2, a1);
  if (*(_BYTE *)(a1 + 6448) && (*(int *)(a1 + 6472) > 0 || *(int *)(a1 + 6476) > 0 || *(int *)(a1 + 6480) >= 1))
  {
    sub_100223558(a1, (uint64_t)v6);
    v5 = v6[1];
    *(_OWORD *)(a2 + 1872) = v6[0];
    *(_OWORD *)(a2 + 1888) = v5;
    *(_OWORD *)(a2 + 1904) = v7[0];
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)(a2 + 1913) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

void sub_100A9BA04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100A9BA18(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100A9BA44()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100A9BAE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100A9BAF8()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100A9BB84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_100A9BE9C(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, float *a5@<X8>)
{
  unint64_t v6;
  float *v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float *v12;
  float *v13;
  unint64_t v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  float *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  float *v32;
  float v33;
  float *v34;
  float v35;
  float *v36;
  float *v37;
  float *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  float *v44;
  float v45;
  unint64_t v46;
  float *v47;
  _BOOL4 v48;
  float *v49;
  void *__p;
  float *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  v53 = a3;
  v54 = a4;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  if (v6 >= 0x42)
    sub_10191819C();
  v8 = a1;
  __p = 0;
  v51 = 0;
  v52 = 0;
  v9 = (v6 - 1) * v6;
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = v9;
  sub_1003908C0(&__p, v10);
  v46 = v10;
  if (a2 == v8)
  {
    v48 = 0;
  }
  else
  {
    v55 = 0;
    v12 = sub_100A9C320(v8, a2);
    v11 = *v13 - *v12;
    v48 = v11 >= 3.0;
  }
  v14 = 0;
  v15 = v8 + 6;
  v47 = v8;
  v49 = v8 + 6;
  do
  {
    if (BYTE4(v54))
    {
      v11 = *(float *)sub_100534E68((uint64_t)&v53, v14);
LABEL_11:
      a5[v14] = v11;
      goto LABEL_39;
    }
    if (v48)
    {
      v16 = (float *)__p;
      v51 = (float *)__p;
      if (v8 == a2)
      {
        v51 = (float *)__p;
        goto LABEL_60;
      }
      if (v15 != a2)
      {
        v17 = v15;
        v18 = v8;
        do
        {
          v19 = v18;
          v18 = v17;
          v20 = v17;
          do
          {
            v21 = *v19;
            v22 = *v20;
            v11 = vabds_f32(*v19, *v20);
            if (v11 > 0.25)
            {
              v23 = sub_100533668((uint64_t)(v19 + 1), v14);
              v11 = v23 - sub_100533668((uint64_t)(v20 + 1), v14);
              v24 = v51;
              v25 = v11 / (float)(v21 - v22);
              if (v51 >= (float *)v52)
              {
                v26 = (float *)__p;
                v27 = ((char *)v51 - (_BYTE *)__p) >> 2;
                v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 62)
                  sub_100259694();
                v29 = v52 - (_BYTE *)__p;
                if ((v52 - (_BYTE *)__p) >> 1 > v28)
                  v28 = v29 >> 1;
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                  v30 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v30 = v28;
                if (v30)
                {
                  v31 = (char *)sub_100260634((uint64_t)&v52, v30);
                  v26 = (float *)__p;
                  v24 = v51;
                }
                else
                {
                  v31 = 0;
                }
                v32 = (float *)&v31[4 * v27];
                *v32 = v25;
                v16 = v32 + 1;
                while (v24 != v26)
                {
                  v33 = *--v24;
                  v11 = v33;
                  *--v32 = v33;
                }
                __p = v32;
                v51 = v16;
                v52 = &v31[4 * v30];
                if (v26)
                  operator delete(v26);
              }
              else
              {
                *v51 = v25;
                v16 = v24 + 1;
              }
              v51 = v16;
            }
            v20 += 6;
          }
          while (v20 != a2);
          v17 = v18 + 6;
        }
        while (v18 + 6 != a2);
      }
      v15 = v49;
      v8 = v47;
      if (v16 != __p)
      {
        v11 = sub_10053EDE8((float *)__p, v16, v11);
        goto LABEL_11;
      }
    }
LABEL_39:
    v51 = (float *)__p;
    if (v8 != a2)
    {
      v34 = v8;
      do
      {
        v11 = sub_100533668((uint64_t)(v34 + 1), v14);
        v35 = v11 - (float)(a5[v14] * *v34);
        v36 = v51;
        if (v51 >= (float *)v52)
        {
          v38 = (float *)__p;
          v39 = ((char *)v51 - (_BYTE *)__p) >> 2;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62)
            sub_100259694();
          v41 = v52 - (_BYTE *)__p;
          if ((v52 - (_BYTE *)__p) >> 1 > v40)
            v40 = v41 >> 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
            v42 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          if (v42)
          {
            v43 = (char *)sub_100260634((uint64_t)&v52, v42);
            v38 = (float *)__p;
            v36 = v51;
          }
          else
          {
            v43 = 0;
          }
          v44 = (float *)&v43[4 * v39];
          *v44 = v35;
          v37 = v44 + 1;
          while (v36 != v38)
          {
            v45 = *--v36;
            v11 = v45;
            *--v44 = v45;
          }
          __p = v44;
          v51 = v37;
          v52 = &v43[4 * v42];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v51 = v35;
          v37 = v36 + 1;
        }
        v51 = v37;
        v34 += 6;
      }
      while (v34 != a2);
      v15 = v49;
      if (v37 != __p)
      {
        v11 = sub_10053EDE8((float *)__p, v37, v11);
        a5[v14 + 3] = v11;
      }
    }
LABEL_60:
    ++v14;
  }
  while (v14 != 3);
  if (v46 == (v52 - (_BYTE *)__p) >> 2)
  {
    if (__p)
    {
      v51 = (float *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_10191832C();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLGyroBiasFitter.cpp", 77, "computeLinearFit");
    __break(1u);
  }
}

void sub_100A9C294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A9C2CC(uint64_t result, uint64_t a2, float a3)
{
  uint64_t i;

  for (i = 0; i != 12; i += 4)
    *(float *)(result + i) = *(float *)(a2 + i + 12) + (float)(a3 * *(float *)(a2 + i));
  return result;
}

void sub_100A9C2F4(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

float *sub_100A9C320(float *result, float *a2)
{
  float *v2;
  float v4;
  float v5;
  float *v6;
  float *v7;
  float v8;
  float v9;

  v2 = result;
  if (result != a2 && result + 6 != a2)
  {
    v4 = result[6];
    v5 = *result;
    if (v4 < *result)
      result += 6;
    v6 = v4 >= *v2 ? v2 + 6 : v2;
    v7 = v2 + 12;
    if (v7 != a2)
    {
      if (v4 >= v5)
        v4 = v5;
      while (v7 + 6 != a2)
      {
        v8 = v7[6];
        v9 = *v7;
        if (v8 >= *v7)
        {
          if (v9 < v4)
          {
            v4 = *v7;
            result = v7;
          }
          if (v8 >= *v6)
            v6 = v7 + 6;
        }
        else
        {
          v4 = *result;
          if (v8 < *result)
          {
            v4 = v7[6];
            result = v7 + 6;
          }
          if (v9 >= *v6)
            v6 = v7;
        }
        v7 += 12;
        if (v7 == a2)
          return result;
      }
      if (*v7 < *result)
        return v7;
    }
  }
  return result;
}

BOOL sub_100A9C3FC()
{
  return os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT);
}

BOOL sub_100A9C410()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 3416), OS_LOG_TYPE_INFO);
}

BOOL sub_100A9C420()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 3416));
}

uint64_t sub_100A9C42C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  NSObject *v19;
  const char *v20;
  int *v21;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  NSObject *v26;
  const char *v27;
  int *v28;
  NSObject *v29;
  uint64_t v30;
  const char *v32;
  double v33;
  double v34;
  float64x2_t v35;
  void *v36;
  void *v37;
  char *v38;
  char *v39;
  void *__p[2];
  uint64_t v41;
  int buf;
  void *buf_4;
  __int16 v44;
  void *v45;
  __int16 v46;
  uint64_t v47;
  int v48;
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;

  v61 = 0uLL;
  v62 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  sub_100803C28(&v37, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4));
  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    v4 = 0;
LABEL_26:
    v58 = 0x300000028;
    *(_QWORD *)v57 = off_102167160;
    *(_OWORD *)&v57[8] = xmmword_101C05610;
    v59 = &v60;
    if (v4 > 0x28)
    {
      sub_1000ECE2C(&v36, v4 - 40);
      v22 = v4;
      v23 = (double *)(*a1 + 64);
      v24 = 0.0;
      do
      {
        v25 = *v23;
        v23 += 14;
        v24 = v24 + v25;
        --v22;
      }
      while (v22);
      sub_100A9DC9C(&v48);
    }
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102167130);
    v19 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLRS,CLCF,No corners found, input segment too short.", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102167130);
      LOWORD(v48) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLCF,No corners found, input segment too short.", &v48, 2);
      v21 = (int *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLSmootherCornerFinder::findCorners(const std::vector<swan::RouteSmootherEpoch> &, std::vector<int> &)", "%s\n", v20);
      if (v21 != &buf)
        free(v21);
    }
    v30 = 1;
  }
  else
  {
    v4 = 0;
    v35 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    while (1)
    {
      *(float64x2_t *)v57 = vmulq_f64(*(float64x2_t *)(v2 + 8), v35);
      *(_QWORD *)&v57[16] = *(_QWORD *)(v2 + 32);
      __p[0] = 0;
      __p[1] = 0;
      v41 = 0;
      if (cnnavigation::LLAToECEF(v57, 1, __p))
        break;
      if (!v4)
      {
        v61 = *(_OWORD *)__p;
        v62 = v41;
      }
      v55 = 0;
      v54 = 0;
      v56 = 0;
      if (cnnavigation::ECEFToENU(__p, 1, 0, &v61, 0, &v54))
      {
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102167130);
        v29 = qword_1022A00B8;
        if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
        {
          buf = 134218496;
          buf_4 = __p[0];
          v44 = 2048;
          v45 = __p[1];
          v46 = 2048;
          v47 = v41;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "CLRS,CLCF,Could not convert ECEF Coordinate %.3lf,%.3lf,%.3lf to ENU", (uint8_t *)&buf, 0x20u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_52;
        bzero(&buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102167130);
        v48 = 134218496;
        v49 = __p[0];
        v50 = 2048;
        v51 = __p[1];
        v52 = 2048;
        v53 = v41;
        LODWORD(v33) = 32;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,CLCF,Could not convert ECEF Coordinate %.3lf,%.3lf,%.3lf to ENU", COERCE_DOUBLE(&v48), v33, v34);
        v28 = (int *)v32;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLSmootherCornerFinder::findCorners(const std::vector<swan::RouteSmootherEpoch> &, std::vector<int> &)", "%s\n", v32);
LABEL_60:
        if (v28 != &buf)
          free(v28);
        goto LABEL_52;
      }
      v5 = v54;
      v6 = v55;
      v7 = v56;
      v8 = v38;
      if (v38 >= v39)
      {
        v10 = 0xAAAAAAAAAAAAAAABLL * ((v38 - (_BYTE *)v37) >> 3);
        v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        if (0x5555555555555556 * ((v39 - (_BYTE *)v37) >> 3) > v11)
          v11 = 0x5555555555555556 * ((v39 - (_BYTE *)v37) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v39 - (_BYTE *)v37) >> 3) >= 0x555555555555555)
          v12 = 0xAAAAAAAAAAAAAAALL;
        else
          v12 = v11;
        if (v12)
          v13 = (char *)sub_1002596A8((uint64_t)&v39, v12);
        else
          v13 = 0;
        v14 = &v13[24 * v10];
        *(_QWORD *)v14 = v5;
        *((_QWORD *)v14 + 1) = v6;
        *((_QWORD *)v14 + 2) = v7;
        v16 = (char *)v37;
        v15 = v38;
        v17 = v14;
        if (v38 != v37)
        {
          do
          {
            v18 = *(_OWORD *)(v15 - 24);
            *((_QWORD *)v17 - 1) = *((_QWORD *)v15 - 1);
            *(_OWORD *)(v17 - 24) = v18;
            v17 -= 24;
            v15 -= 24;
          }
          while (v15 != v16);
          v15 = (char *)v37;
        }
        v9 = v14 + 24;
        v37 = v17;
        v38 = v14 + 24;
        v39 = &v13[24 * v12];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v38 = v54;
        *((_QWORD *)v8 + 1) = v6;
        v9 = v8 + 24;
        *((_QWORD *)v8 + 2) = v7;
      }
      ++v4;
      v38 = v9;
      v2 += 112;
      if (v2 == v3)
        goto LABEL_26;
    }
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102167130);
    v26 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
    {
      buf = 134218240;
      buf_4 = *(void **)v57;
      v44 = 2048;
      v45 = *(void **)&v57[8];
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLRS,CLCF,Could not convert LLA Coordinate %.7lf,%.7lf to ECEF", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102167130);
      v48 = 134218240;
      v49 = *(void **)v57;
      v50 = 2048;
      v51 = *(void **)&v57[8];
      LODWORD(v33) = 22;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,CLCF,Could not convert LLA Coordinate %.7lf,%.7lf to ECEF", COERCE_DOUBLE(&v48), v33);
      v28 = (int *)v27;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLSmootherCornerFinder::findCorners(const std::vector<swan::RouteSmootherEpoch> &, std::vector<int> &)", "%s\n", v27);
      goto LABEL_60;
    }
LABEL_52:
    v30 = 0;
  }
  if (v37)
  {
    v38 = (char *)v37;
    operator delete(v37);
  }
  return v30;
}

void sub_100A9D2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_100A9D404(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;

  v3 = *(_DWORD *)(a2 + 8) < 0x29u && *(_DWORD *)(a2 + 12) < 4u;
  if (v3)
  {
    *(_BYTE *)(a1 + 3296) = 0;
    sub_10007A0C8(a1, a2);
    sub_100079AC4((_DWORD *)(a1 + 1000), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 1064), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 1128), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 1176), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 2176), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 2288), 0, 0);
    *(_QWORD *)(a1 + 3288) = *(_QWORD *)(a1 + 8);
  }
  return v3;
}

_DWORD *sub_100A9D4AC(_DWORD *result)
{
  BOOL v1;
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD v6[5];
  uint64_t (**v7)();
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (**v12)();
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  if (result[2])
    v1 = result[3] == 0;
  else
    v1 = 1;
  if (!v1)
  {
    v2 = result;
    sub_100A9E32C(result);
    sub_10021C264(v2 + 572, v2[822], v2[823]);
    if (v2[822])
    {
      v3 = 0;
      do
      {
        sub_100A9E4E0(":", (uint64_t)v2, v3, (uint64_t)&v12);
        v9 = 0x300000001;
        v7 = off_1021671A8;
        v8 = xmmword_101C05660;
        v10 = &v11;
        sub_100A9EDB8((uint64_t)&v12, (uint64_t)(v2 + 250), (uint64_t)&v7);
        sub_100A9E4E0(":", (uint64_t)(v2 + 572), v3, (uint64_t)v6);
        sub_100A9E5F0((uint64_t)v6, (uint64_t)&v7);
        ++v3;
      }
      while (v3 < v2[822]);
    }
    v4 = v2[574];
    v5 = v2[575];
    v17 = 0x300000028;
    v12 = off_102167160;
    if (v4 <= 0x28)
    {
      if (v5 < 4)
      {
        v13 = v4;
        v14 = v5;
        v15 = v5 * v4;
        v16 = v4;
        v18 = &v19;
        sub_100A9F2E4((uint64_t)v6);
      }
      sub_1019184AC(423, "this->max_num_cols_ >= num_cols");
    }
    sub_1019184AC(422, "this->max_num_rows_ >= num_rows");
  }
  return result;
}

void sub_100A9D6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

double sub_100A9D70C(uint64_t a1)
{
  unsigned int v2;
  double v3;
  double v4;

  if (!*(_BYTE *)(a1 + 3296))
    return NAN;
  if (!*(_DWORD *)(a1 + 3288))
    return 0.0;
  v2 = 0;
  v3 = 0.0;
  do
  {
    sub_100A9F750(a1, v2);
    v3 = v3 + v4;
    ++v2;
  }
  while (v2 < *(_DWORD *)(a1 + 3288));
  return v3;
}

uint64_t sub_100A9D780@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int32x4_t v8;
  unsigned int i;
  uint64_t (**v11)();
  int32x4_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  if (strcmp(__s1, ":"))
    sub_1019184DC();
  v7 = *(_DWORD *)(a2 + 12);
  v13 = 0x100000003;
  v11 = off_1021673E0;
  if ((v7 & 0x80000000) != 0)
    sub_1019184D0("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  if (v7 >= 4)
    sub_1019184D0("SetMatrixSize", "cnmatrixbase.h", 422, "this->max_num_rows_ >= num_rows");
  v8 = vdupq_lane_s32((int32x2_t)(v7 | 0x100000000), 0);
  v8.i32[1] = 1;
  v12 = v8;
  v14 = &v15;
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)sub_100A9E948((uint64_t)&v11, i) = i;
  }
  return sub_100AA0514(a4, a2, a3, (uint64_t)&v11);
}

_QWORD *sub_100A9D89C(_QWORD *result)
{
  *result = off_1021673B0;
  return result;
}

BOOL sub_100A9D8B0(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;

  v3 = *(_DWORD *)(a2 + 8) < 0x15u && *(_DWORD *)(a2 + 12) < 4u;
  if (v3)
  {
    *(_BYTE *)(a1 + 5048) = 0;
    sub_10007A0C8(a1, a2);
    sub_100079AC4((_DWORD *)(a1 + 520), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 584), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 648), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 3888), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 4408), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 4520), 0, 0);
    *(_QWORD *)(a1 + 5040) = *(_QWORD *)(a1 + 8);
  }
  return v3;
}

_DWORD *sub_100A9D964(_DWORD *result)
{
  BOOL v1;
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD v6[5];
  uint64_t (**v7)();
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (**v12)();
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  if (result[2])
    v1 = result[3] == 0;
  else
    v1 = 1;
  if (!v1)
  {
    v2 = result;
    sub_100AA071C(result);
    sub_10021C264(v2 + 1130, v2[1260], v2[1261]);
    if (v2[1260])
    {
      v3 = 0;
      do
      {
        sub_100A9E4E0(":", (uint64_t)v2, v3, (uint64_t)&v12);
        v9 = 0x300000001;
        v7 = off_1021671A8;
        v8 = xmmword_101C05660;
        v10 = &v11;
        sub_100A9EDB8((uint64_t)&v12, (uint64_t)(v2 + 130), (uint64_t)&v7);
        sub_100A9E4E0(":", (uint64_t)(v2 + 1130), v3, (uint64_t)v6);
        sub_100A9E5F0((uint64_t)v6, (uint64_t)&v7);
        ++v3;
      }
      while (v3 < v2[1260]);
    }
    v4 = v2[1132];
    v5 = v2[1133];
    v17 = 0x300000014;
    v12 = off_1021672C8;
    if (v4 <= 0x14)
    {
      if (v5 < 4)
      {
        v13 = v4;
        v14 = v5;
        v15 = v5 * v4;
        v16 = v4;
        v18 = &v19;
        sub_100AA0930((uint64_t)v6);
      }
      sub_1019184AC(423, "this->max_num_cols_ >= num_cols");
    }
    sub_1019184AC(422, "this->max_num_rows_ >= num_rows");
  }
  return result;
}

void sub_100A9DB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

double sub_100A9DBD0(uint64_t a1)
{
  unsigned int v2;
  double v3;
  double v4;

  if (!*(_BYTE *)(a1 + 5048))
    return NAN;
  if (!*(_DWORD *)(a1 + 5040))
    return 0.0;
  v2 = 0;
  v3 = 0.0;
  do
  {
    sub_100AA0B50(a1, v2);
    v3 = v3 + v4;
    ++v2;
  }
  while (v2 < *(_DWORD *)(a1 + 5040));
  return v3;
}

_QWORD *sub_100A9DC48(_QWORD *result)
{
  result[81] = off_1021673B0;
  result[66] = off_1021673B0;
  *result = off_102155D60;
  return result;
}

void sub_100A9DC70(id a1)
{
  qword_1022A00B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "RouteSmoother");
}

void sub_100A9DC9C(_QWORD *a1)
{
  a1[3] = 0x300000028;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102167160;
  a1[4] = a1 + 5;
  a1[128] = 0x300000001;
  a1[125] = off_1021671A8;
  a1[127] = 0;
  a1[126] = 0;
  a1[129] = a1 + 130;
  a1[136] = 0x100000003;
  a1[133] = off_1021671F0;
  a1[135] = 0;
  a1[137] = a1 + 138;
  a1[134] = 0;
  sub_100A9DFB8((uint64_t)(a1 + 141));
}

void sub_100A9DDB8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[133] = off_102155D60;
  v1[125] = off_102155D60;
  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

_QWORD *sub_100A9DDD4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102167238;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    operator delete[]();
  *a1 = off_102155D60;
  return a1;
}

void sub_100A9DE34(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

void sub_100A9DE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[120];

  sub_100A9DEA4(a1, v3, a3);
}

void sub_100A9DEA4(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v5 = *(_DWORD *)(a1 + 12);
    if (v5 >= 2)
    {
      if (!a2)
        sub_101918504(a1, 0, a3);
      v7 = v5 + v3 - *(_DWORD *)(a1 + 20);
      if (v7 <= 0)
        sub_101918528(a1, (uint64_t)a2, a3);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v8 = *(_DWORD *)(a1 + 16);
      if (v8 >= 3)
      {
        v9 = (v8 - 1);
        v10 = *(_QWORD *)(a1 + 32);
        v11 = 1;
        do
        {
          v12 = &a2[v11];
          if (!a2[v11])
          {
            v13 = *(_QWORD *)(v10 + 8 * v11);
            v14 = v11;
            do
            {
              v14 = v14 * v7 % (int)v9;
              v15 = *(_QWORD *)(v10 + 8 * v14);
              *(_QWORD *)(v10 + 8 * v14) = v13;
              *v12 = 1;
              v12 = &a2[v14];
              v13 = v15;
            }
            while (!*v12);
          }
          ++v11;
        }
        while (v11 != v9);
      }
    }
  }
}

void sub_100A9DF74(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

void sub_100A9DF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[3];

  sub_100A9DEA4(a1, v3, a3);
}

void sub_100A9DFB8(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x2800000028;
  *(_QWORD *)a1 = off_102167238;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_101C05670;
  sub_100A9E0E4();
}

void sub_100A9E00C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    operator delete[]();
  *v1 = off_102155D60;
  _Unwind_Resume(exception_object);
}

void sub_100A9E048(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102167238;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    operator delete[]();
  *a1 = off_102155D60;
  operator delete();
}

void sub_100A9E0B8()
{
  sub_100A9E0E4();
}

void sub_100A9E0E4()
{
  operator new[]();
}

void sub_100A9E150()
{
  operator new[]();
}

void sub_100A9E1B0()
{
  operator delete[]();
}

void sub_100A9E1D4(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

void sub_100A9E1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[9];

  sub_100A9DEA4(a1, v3, a3);
}

void sub_100A9E244(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

void sub_100A9E268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[60];

  sub_100A9DEA4(a1, v3, a3);
}

void sub_100A9E2B4(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

void sub_100A9E2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[400];

  sub_100A9DEA4(a1, v3, a3);
}

void sub_100A9E32C(_DWORD *a1)
{
  BOOL v2;
  int v3;
  unsigned int v4;
  uint64_t (**v5)();
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD v20[5];
  uint64_t v21;

  if (a1[2])
    v2 = a1[3] == 0;
  else
    v2 = 1;
  if (v2)
  {
    v20[3] = 0x300000001;
    v20[1] = 0;
    v20[2] = 0;
    v20[0] = off_1021671A8;
    v20[4] = &v21;
    sub_10007A0C8((uint64_t)(a1 + 250), (uint64_t)v20);
  }
  else
  {
    sub_100A9E4E0(":", (uint64_t)a1, 0, (uint64_t)v20);
    sub_10007A0C8((uint64_t)(a1 + 250), (uint64_t)v20);
    if (a1[822] >= 2u)
    {
      v3 = 1;
      do
      {
        v4 = v3 + 1;
        sub_100A9E4E0(":", (uint64_t)a1, v3, (uint64_t)v20);
        v7 = 0x300000001;
        v5 = off_1021671A8;
        v6 = xmmword_101C05660;
        v8 = &v9;
        sub_100A9EDB8((uint64_t)v20, (uint64_t)(a1 + 250), (uint64_t)&v5);
        v12 = 0x300000001;
        v10 = off_1021671A8;
        v11 = xmmword_101C05660;
        v13 = &v14;
        sub_100078B9C((uint64_t)&v5, (uint64_t)&v10, 1.0 / (double)v4);
        v17 = 0x300000001;
        v15 = off_1021671A8;
        v16 = xmmword_101C05660;
        v18 = &v19;
        sub_100A9ECBC((uint64_t)(a1 + 250), (uint64_t)&v10, (uint64_t)&v15);
        sub_10007A0C8((uint64_t)(a1 + 250), (uint64_t)&v15);
        v3 = v4;
      }
      while (v4 < a1[822]);
    }
  }
}

uint64_t sub_100A9E4E0@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int32x4_t v15;
  unsigned int i;
  uint64_t (**v18)();
  int32x4_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v7 = strcmp(__s1, ":");
  if ((_DWORD)v7)
    sub_10191874C(v7, v8, v9);
  v25 = 0x100000001;
  v23 = off_102167358;
  *(_QWORD *)&v10 = 0x100000001;
  *((_QWORD *)&v10 + 1) = 0x100000001;
  v24 = v10;
  v26 = &v27;
  v11 = (_DWORD *)sub_100A9E948((uint64_t)&v23, 0);
  *v11 = a3;
  v14 = *(_DWORD *)(a2 + 12);
  v20 = 0x100000003;
  v18 = off_1021673E0;
  if (v14 >= 4)
    sub_101918728((uint64_t)v11, v12, v13);
  v15 = vdupq_lane_s32((int32x2_t)(v14 | 0x100000000), 0);
  v15.i32[1] = 1;
  v19 = v15;
  v21 = &v22;
  if (v14)
  {
    for (i = 0; i != v14; ++i)
      *(_DWORD *)sub_100A9E948((uint64_t)&v18, i) = i;
  }
  return sub_100A9E9C4(a4, a2, (uint64_t)&v23, (uint64_t)&v18);
}

uint64_t sub_100A9E5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t i;
  uint64_t j;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 8))
    sub_101918798();
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 12))
    sub_101918770();
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i != v5; ++i)
    {
      if ((_DWORD)v2)
      {
        for (j = 0; j != v2; ++j)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v6 + j));
          *(_QWORD *)sub_100A9EB8C(*(_QWORD *)(a1 + 64), *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * i)) = v9;
          *(_QWORD *)sub_100206B6C(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

_QWORD *sub_100A9E6C8(_QWORD *result)
{
  result[15] = off_1021673B0;
  result[9] = off_1021673B0;
  *result = off_102155D60;
  return result;
}

uint64_t sub_100A9E6F0@<X0>(char *__s1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int32x4_t v11;
  unsigned int i;
  __int128 v13;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (**v20)();
  int32x4_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v7 = strcmp(__s1, ":");
  if ((_DWORD)v7)
    sub_1019187C0();
  v10 = *(_DWORD *)(a2 + 8);
  v22 = 0x100000003;
  v20 = off_1021673E0;
  if (v10 >= 4)
    sub_101918728(v7, v8, v9);
  v11 = vdupq_lane_s32((int32x2_t)(v10 | 0x100000000), 0);
  v11.i32[1] = 1;
  v21 = v11;
  v23 = &v24;
  if (v10)
  {
    for (i = 0; i != v10; ++i)
      *(_DWORD *)sub_100A9E948((uint64_t)&v20, i) = i;
  }
  v17 = 0x100000001;
  v15 = off_102167358;
  *(_QWORD *)&v13 = 0x100000001;
  *((_QWORD *)&v13 + 1) = 0x100000001;
  v16 = v13;
  v18 = &v19;
  *(_DWORD *)sub_100A9E948((uint64_t)&v15, 0) = a3;
  return sub_100A9F560(a4, a2, (uint64_t)&v20, (uint64_t)&v15);
}

_QWORD *sub_100A9E80C(_QWORD *result)
{
  result[16] = off_1021673B0;
  result[9] = off_1021673B0;
  *result = off_102155D60;
  return result;
}

void sub_100A9E834(_QWORD *a1)
{
  *a1 = off_1021673B0;
  operator delete();
}

void sub_100A9E858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  sub_100A9E878(a1, &v3, a3);
}

void sub_100A9E878(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v5 = *(_DWORD *)(a1 + 12);
    if (v5 >= 2)
    {
      if (!a2)
        sub_101918504(a1, 0, a3);
      v7 = v5 + v3 - *(_DWORD *)(a1 + 20);
      if (v7 <= 0)
        sub_101918528(a1, (uint64_t)a2, a3);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v8 = *(_DWORD *)(a1 + 16);
      if (v8 >= 3)
      {
        v9 = (v8 - 1);
        v10 = *(_QWORD *)(a1 + 32);
        v11 = 1;
        do
        {
          v12 = &a2[v11];
          if (!a2[v11])
          {
            v13 = *(_DWORD *)(v10 + 4 * v11);
            v14 = v11;
            do
            {
              v14 = v14 * v7 % (int)v9;
              v15 = *(_DWORD *)(v10 + 4 * v14);
              *(_DWORD *)(v10 + 4 * v14) = v13;
              *v12 = 1;
              v12 = &a2[v14];
              v13 = v15;
            }
            while (!*v12);
          }
          ++v11;
        }
        while (v11 != v9);
      }
    }
  }
}

uint64_t sub_100A9E948(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_1019187E8();
  if ((a2 & 0x80000000) != 0)
    sub_101918810();
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2)
    sub_101918838();
  return v2 + 4 * a2;
}

void sub_100A9E980(_QWORD *a1)
{
  *a1 = off_1021673B0;
  operator delete();
}

void sub_100A9E9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[3];

  sub_100A9E878(a1, v3, a3);
}

uint64_t sub_100A9E9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  uint64_t j;
  const char *v14;
  int v15;

  *(_QWORD *)(a1 + 24) = 0x300000001;
  *(_OWORD *)(a1 + 8) = xmmword_101C05660;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_102167428;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 96) = 0x100000001;
  *(_QWORD *)(a1 + 72) = off_102167358;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = off_1021673E0;
  *(_QWORD *)(a1 + 144) = 0x100000003;
  *(_OWORD *)(a1 + 128) = xmmword_101C05680;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  sub_100A9EC04(a1 + 72, a3);
  sub_100A9EC04(a1 + 120, a4);
  v8 = *(unsigned int *)(a1 + 88);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    v14 = "this->max_num_rows_ >= num_rows";
    v15 = 422;
    goto LABEL_12;
  }
  v9 = *(unsigned int *)(a1 + 136);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    v14 = "this->max_num_cols_ >= num_cols";
    v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (j = 0; j != v8; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v10 + j)) = *(_QWORD *)sub_100A9EB8C(a2, *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_100A9EB60(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[15] = off_1021673B0;
  v1[9] = off_1021673B0;
  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

uint64_t sub_100A9EB8C(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_101918860();
  v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0)
    sub_101918888();
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16))
    sub_1019188B0();
  return v3 + 8 * v4;
}

void sub_100A9EBCC(_QWORD *a1)
{
  a1[15] = off_1021673B0;
  a1[9] = off_1021673B0;
  *a1 = off_102155D60;
  operator delete();
}

uint64_t sub_100A9EC04(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  uint64_t v12;
  _DWORD *v13;
  int *v14;
  int v15;

  if (result != a2)
  {
    v2 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(result + 24) < v2)
      sub_101918688();
    v3 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(result + 28) < v3)
      sub_1019186B0();
    *(_DWORD *)(result + 8) = v2;
    *(_DWORD *)(result + 12) = v3;
    v4 = v3 * v2;
    *(_DWORD *)(result + 16) = v4;
    *(_DWORD *)(result + 20) = v2;
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      v9 = (v5 - 1);
      v10 = *(_DWORD **)(result + 32);
      v11 = *(int **)(a2 + 32);
      v12 = v9;
      v13 = v10;
      v14 = v11;
      do
      {
        v15 = *v14++;
        *v13++ = v15;
        --v12;
      }
      while (v12);
      v10[v9] = v11[v9];
    }
    else if (v4 >= 1)
    {
      v6 = 0;
      v7 = *(_QWORD *)(a2 + 32);
      v8 = *(_QWORD *)(result + 32);
      do
      {
        *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)(v7 + 4 * v6);
        ++v6;
      }
      while (v6 < *(int *)(result + 16));
    }
  }
  return result;
}

float64x2_t sub_100A9ECBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v7;
  float64x2_t result;
  uint64_t v9;
  double *v10;
  double *v11;
  float64_t *v12;
  double v13;
  double v14;
  double v15;
  float64x2_t *v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t *v19;
  float64x2_t *v20;
  float64x2_t *v21;
  uint64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 != *(_DWORD *)(a2 + 8))
    sub_101918950();
  v7 = *(_DWORD *)(a1 + 12);
  if (v7 != *(_DWORD *)(a2 + 12))
    sub_101918928();
  if (a1 == a3)
    sub_1019188D8();
  if (a2 == a3)
    sub_101918900();
  sub_100079AC4((_DWORD *)a3, v4, v7);
  v9 = *(unsigned int *)(a3 + 16);
  if ((int)v9 > 3)
  {
    v16 = *(float64x2_t **)(a1 + 32);
    v17 = *(float64x2_t **)(a2 + 32);
    v18 = (float64x2_t *)((char *)v16 + 8 * (v9 - 2));
    v19 = *(float64x2_t **)(a3 + 32);
    v20 = (float64x2_t *)((char *)v17 + 8 * (v9 - 2));
    v21 = (float64x2_t *)((char *)v19 + 8 * (v9 - 2));
    v22 = (v9 - 1) >> 1;
    do
    {
      v23 = *v16++;
      v24 = v23;
      v25 = *v17++;
      *v19++ = vaddq_f64(v24, v25);
      --v22;
    }
    while (v22);
    result = vaddq_f64(*v18, *v20);
    *v21 = result;
  }
  else if ((int)v9 >= 1)
  {
    v10 = *(double **)(a1 + 32);
    v11 = *(double **)(a2 + 32);
    v12 = *(float64_t **)(a3 + 32);
    do
    {
      v13 = *v10++;
      v14 = v13;
      v15 = *v11++;
      result.f64[0] = v14 + v15;
      *v12++ = result.f64[0];
      --v9;
    }
    while (v9);
  }
  return result;
}

float64x2_t sub_100A9EDB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v7;
  float64x2_t result;
  uint64_t v9;
  double *v10;
  double *v11;
  float64_t *v12;
  double v13;
  double v14;
  double v15;
  float64x2_t *v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t *v19;
  float64x2_t *v20;
  float64x2_t *v21;
  uint64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 != *(_DWORD *)(a2 + 8))
    sub_101918A18();
  v7 = *(_DWORD *)(a1 + 12);
  if (v7 != *(_DWORD *)(a2 + 12))
    sub_1019189F0();
  if (a1 == a3)
    sub_1019189A0();
  if (a2 == a3)
    sub_1019189C8();
  sub_100079AC4((_DWORD *)a3, v4, v7);
  v9 = *(unsigned int *)(a3 + 16);
  if ((int)v9 > 3)
  {
    v16 = *(float64x2_t **)(a1 + 32);
    v17 = *(float64x2_t **)(a2 + 32);
    v18 = (float64x2_t *)((char *)v16 + 8 * (v9 - 2));
    v19 = *(float64x2_t **)(a3 + 32);
    v20 = (float64x2_t *)((char *)v17 + 8 * (v9 - 2));
    v21 = (float64x2_t *)((char *)v19 + 8 * (v9 - 2));
    v22 = (v9 - 1) >> 1;
    do
    {
      v23 = *v16++;
      v24 = v23;
      v25 = *v17++;
      *v19++ = vsubq_f64(v24, v25);
      --v22;
    }
    while (v22);
    result = vsubq_f64(*v18, *v20);
    *v21 = result;
  }
  else if ((int)v9 >= 1)
  {
    v10 = *(double **)(a1 + 32);
    v11 = *(double **)(a2 + 32);
    v12 = *(float64_t **)(a3 + 32);
    do
    {
      v13 = *v10++;
      v14 = v13;
      v15 = *v11++;
      result.f64[0] = v14 - v15;
      *v12++ = result.f64[0];
      --v9;
    }
    while (v9);
  }
  return result;
}

_DWORD *sub_100A9EEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v15;
  __CLPK_integer v16;
  __CLPK_integer v17;
  __CLPK_doublereal *v18;
  __CLPK_doublereal *v19;
  __CLPK_doublereal *v20;
  __CLPK_doublereal *v21;
  __CLPK_doublereal *v22;
  cnprint::CNPrinter *v23;
  __CLPK_integer v24;
  uint64_t i;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int j;
  int v30;
  __CLPK_integer v32;
  __CLPK_integer __lwork;
  __CLPK_integer __ldvt;
  __CLPK_integer __ldu;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;
  char __jobvt;
  char __jobu;

  v8 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  if (v7 <= v8)
    v9 = *(_DWORD *)(a1 + 8);
  else
    v9 = *(_DWORD *)(a1 + 12);
  if (v7 >= v8)
    v10 = v8;
  else
    v10 = v7;
  if (a1 == a2)
    sub_101918A40();
  if (a1 == a3)
    sub_101918A68();
  if (a1 == a4)
    sub_101918A90();
  if (a1 == a5)
    sub_101918AB8();
  if (a1 == a6)
    sub_101918AE0();
  if (a2 == a3)
    sub_101918B08();
  if (a2 == a4)
    sub_101918B30();
  if (a2 == a5)
    sub_101918B58();
  if (a2 == a6)
    sub_101918B80();
  if (a3 == a4)
    sub_101918BA8();
  if (a3 == a5)
    sub_101918BD0();
  if (a3 == a6)
    sub_101918BF8();
  if (a4 == a5)
    sub_101918C20();
  if (a4 == a6)
    sub_101918C48();
  if (a5 == a6)
    sub_101918C70();
  v15 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  if (!v15)
    sub_101918C98();
  if (v15 < 3 * (int)v10 + v9)
    sub_101918CC0();
  if (v15 < 5 * (int)v10)
    sub_101918CE8();
  if (*(_DWORD *)(a2 + 24) < v8)
    sub_101918D10();
  if (*(_DWORD *)(a2 + 28) < v7)
    sub_101918D38();
  if (*(_DWORD *)(a4 + 24) < v8)
    sub_101918D60();
  if (*(_DWORD *)(a4 + 28) < v8)
    sub_101918D88();
  if (*(_DWORD *)(a5 + 24) < v8)
    sub_101918DB0();
  if (*(_DWORD *)(a5 + 28) < v7)
    sub_101918DD8();
  if (*(_DWORD *)(a6 + 24) < v7)
    sub_101918E00();
  if (*(_DWORD *)(a6 + 28) < v7)
    sub_101918E28();
  sub_10007A0C8(a2, a1);
  v16 = *(_DWORD *)(a2 + 8);
  v17 = *(_DWORD *)(a2 + 12);
  v18 = *(__CLPK_doublereal **)(a2 + 32);
  v19 = *(__CLPK_doublereal **)(a5 + 32);
  v20 = *(__CLPK_doublereal **)(a4 + 32);
  v21 = *(__CLPK_doublereal **)(a6 + 32);
  v22 = *(__CLPK_doublereal **)(a3 + 32);
  __jobu = 65;
  __jobvt = 65;
  __n = v17;
  __m = v16;
  __ldu = v16;
  __lda = v16;
  __lwork = v15;
  __ldvt = v17;
  v32 = 0;
  v23 = (cnprint::CNPrinter *)dgesvd_(&__jobu, &__jobvt, &__m, &__n, v18, &__lda, v19, v20, &__ldu, v21, &__ldvt, v22, &__lwork, &v32);
  v24 = v32;
  if (v32)
  {
    LOWORD(__m) = 4;
    if (v32 < 0)
      LOBYTE(__n) = 5;
    else
      LOBYTE(__n) = 4;
    v23 = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(&__m, &__n);
  }
  if (v15 < **(double **)(a3 + 32) && cnprint::CNPrinter::GetLogLevel(v23) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print(&__m, &__n);
  }
  if (v24)
    sub_101918E50();
  sub_100079AC4((_DWORD *)a3, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 28));
  sub_100079AC4((_DWORD *)a4, v8, v8);
  sub_100079AC4((_DWORD *)a5, v8, v7);
  if ((_DWORD)v10)
  {
    for (i = 0; i != v10; ++i)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(a5 + 32) + 8 * i);
      *(_QWORD *)sub_100206B6C(a5, i, i) = v26;
    }
  }
  if (v7)
  {
    v27 = 0;
    do
    {
      v28 = v27;
      if (v8 < v27)
        v27 = v8;
      if (v27)
      {
        for (j = 0; j != v27; ++j)
          *(_QWORD *)sub_100206B6C(a5, j, v28) = 0;
      }
      v27 = v28 + 1;
      v30 = v28 + 1;
      if (v28 + 1 < v8)
      {
        do
          *(_QWORD *)sub_100206B6C(a5, v30++, v28) = 0;
        while (v8 != v30);
      }
    }
    while (v27 != v7);
  }
  sub_100079AC4((_DWORD *)a6, v7, v7);
  return sub_100A9F504((_DWORD *)a6);
}

_QWORD *sub_100A9F284(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102167470;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    operator delete[]();
  *a1 = off_102155D60;
  return a1;
}

void sub_100A9F2E4(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x100001A09;
  *(_QWORD *)a1 = off_102167470;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_101C05690;
  sub_100A9F414();
}

void sub_100A9F33C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    operator delete[]();
  *v1 = off_102155D60;
  _Unwind_Resume(exception_object);
}

void sub_100A9F378(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102167470;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    operator delete[]();
  *a1 = off_102155D60;
  operator delete();
}

void sub_100A9F3E8()
{
  sub_100A9F414();
}

void sub_100A9F414()
{
  operator new[]();
}

void sub_100A9F480()
{
  operator new[]();
}

void sub_100A9F4E0()
{
  operator delete[]();
}

_DWORD *sub_100A9F504(_DWORD *a1)
{
  if (a1[6] < a1[3])
    sub_101918E78();
  if (a1[7] < a1[2])
    sub_101918EA0();
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
  return sub_100079AC4(a1, a1[3], a1[2]);
}

uint64_t sub_100A9F560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  uint64_t j;
  const char *v14;
  int v15;

  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_OWORD *)(a1 + 8) = xmmword_101C05680;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_1021674B8;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 96) = 0x100000003;
  *(_QWORD *)(a1 + 72) = off_1021673E0;
  *(_OWORD *)(a1 + 80) = xmmword_101C05680;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 128) = off_102167358;
  *(_QWORD *)(a1 + 152) = 0x100000001;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  sub_100A9EC04(a1 + 72, a3);
  sub_100A9EC04(a1 + 128, a4);
  v8 = *(unsigned int *)(a1 + 88);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    v14 = "this->max_num_rows_ >= num_rows";
    v15 = 422;
    goto LABEL_12;
  }
  v9 = *(unsigned int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    v14 = "this->max_num_cols_ >= num_cols";
    v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (j = 0; j != v8; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v10 + j)) = *(_QWORD *)sub_100A9EB8C(a2, *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_100A9F6EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[16] = off_1021673B0;
  v1[9] = off_1021673B0;
  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

void sub_100A9F718(_QWORD *a1)
{
  a1[16] = off_1021673B0;
  a1[9] = off_1021673B0;
  *a1 = off_102155D60;
  operator delete();
}

void sub_100A9F750(uint64_t a1, unsigned int a2)
{
  _BYTE v3[64];

  if (*(_DWORD *)(a1 + 3288) > a2)
  {
    sub_100A9F9B4(":", a1, a2, (uint64_t)v3);
    sub_100A9F7A0(a1, (uint64_t)v3);
  }
}

void sub_100A9F7A0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  double v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  __int128 v8;
  uint64_t (**v9)();
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (**v27)();
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;

  if (*(_DWORD *)(a1 + 8))
    v2 = *(_DWORD *)(a1 + 12) == 0;
  else
    v2 = 1;
  if (!v2 && *(_BYTE *)(a1 + 3296))
  {
    v29 = 0x300000001;
    v27 = off_1021671A8;
    v28 = xmmword_101C05660;
    v30 = &v31;
    sub_100A9EDB8(a2, a1 + 1000, (uint64_t)&v27);
    v4 = sub_100A9FA30((uint64_t)&v27, a1 + 1064);
    v5 = *(_DWORD *)(a1 + 1076);
    v6 = *(_DWORD *)(a1 + 1072);
    v14 = 0x300000001;
    v9 = off_1021671A8;
    if (v5 > 1)
      sub_1019184AC(422, "this->max_num_rows_ >= num_rows");
    if (v6 >= 4)
      sub_1019184AC(423, "this->max_num_cols_ >= num_cols");
    v7 = v4;
    v10 = v5;
    v11 = v6;
    v12 = v6 * v5;
    v13 = v5;
    v15 = &v16;
    sub_100AA0214(a1 + 1064, &v9);
    v19 = 0x300000001;
    v17 = off_1021671A8;
    v18 = xmmword_101C05660;
    v20 = &v21;
    sub_100078B9C((uint64_t)&v9, (uint64_t)&v17, v7);
    v24 = 0x300000001;
    v22 = off_1021671A8;
    v23 = xmmword_101C05660;
    v25 = &v26;
    sub_100A9EDB8((uint64_t)&v27, (uint64_t)&v17, (uint64_t)&v22);
    v44 = 0x300000001;
    v42 = off_1021671A8;
    v43 = xmmword_101C05660;
    v45 = &v46;
    v39 = 0x100000134;
    v37 = off_102167500;
    v38 = xmmword_101C056A0;
    v40 = &v41;
    v34 = 0x100000001;
    v32 = off_102167548;
    *(_QWORD *)&v8 = 0x100000001;
    *((_QWORD *)&v8 + 1) = 0x100000001;
    v33 = v8;
    v35 = &v36;
    sub_100A9FAAC((uint64_t)&v22, (uint64_t)&v42, (uint64_t)&v37, (uint64_t)&v32, "2");
  }
}

double sub_100A9F9B4@<D0>(char *__s1@<X2>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X8>)
{
  unsigned int v7;
  double result;
  int v9;
  uint64_t v10;
  double *v11;

  if (strcmp(__s1, ":"))
    sub_101918EC8();
  v7 = *(_DWORD *)(a2 + 12);
  sub_100AA02BC(a4, 1u, v7);
  if (v7)
  {
    v9 = *(_DWORD *)(a2 + 20);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(double **)(a4 + 32);
    do
    {
      result = *(double *)(v10 + 8 * a3);
      *v11++ = result;
      a3 += v9;
      --v7;
    }
    while (v7);
  }
  return result;
}

double sub_100A9FA30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double *v6;
  double result;
  double v8;
  double v9;
  double v10;

  if (*(_DWORD *)(a1 + 8) != 1 && *(_DWORD *)(a1 + 12) != 1)
    sub_101918EF0();
  if (*(_DWORD *)(a2 + 8) != 1 && *(_DWORD *)(a2 + 12) != 1)
    sub_101918F18();
  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4 != *(_DWORD *)(a2 + 16))
    sub_101918F40();
  if ((int)v4 < 1)
    return 0.0;
  v5 = *(double **)(a1 + 32);
  v6 = *(double **)(a2 + 32);
  result = 0.0;
  do
  {
    v8 = *v5++;
    v9 = v8;
    v10 = *v6++;
    result = result + v9 * v10;
    --v4;
  }
  while (v4);
  return result;
}

void sub_100A9FAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s1)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double *v14;
  double v15;
  double *v16;
  uint64_t v17;
  double v18;
  long double v19;
  double *v20;
  double v21;
  double *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  int v28;
  double v29;
  uint64_t v30;
  unsigned int v31;
  double v32;
  double *v33;
  uint64_t v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double *v39;
  uint64_t v40;
  double v41;
  double *v42;
  double *v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  double *v52;
  double *v53;
  double v54;
  double *v55;
  uint64_t v56;
  double v57;
  double v58;
  double *v59;
  double v60;
  double *v61;
  uint64_t v62;
  double v63;
  double v64;
  double *v65;
  long double v66;
  double *v67;
  uint64_t v68;
  double v69;
  double v70;
  double *v71;
  uint64_t v72;
  double v73;
  double v74;
  long double v75;

  if (a1 == a2)
    sub_101918F68();
  if (a1 == a3)
    sub_101918F90();
  if (a1 == a4)
    sub_101918FB8();
  if (a2 == a3)
    sub_101918FE0();
  if (a2 == a4)
    sub_101919008();
  if (a3 == a4)
    sub_101919030();
  v9 = *(unsigned int *)(a1 + 16);
  if (*(_DWORD *)(a2 + 16) < (int)v9)
    sub_101919058();
  if ((_DWORD)v9)
  {
    v11 = *(unsigned int *)(a1 + 8);
    v12 = *(unsigned int *)(a1 + 12);
    v13 = strcmp(__s1, "2");
    if ((_DWORD)v11 == 1 || (_DWORD)v12 == 1)
    {
      if (v13)
      {
        if (!strcmp(__s1, "1"))
        {
          v37 = *(double **)(a1 + 32);
          v38 = fabs(*v37);
          if (v9 >= 2)
          {
            v39 = v37 + 1;
            v40 = v9 - 1;
            do
            {
              v41 = *v39++;
              v38 = v38 + fabs(v41);
              --v40;
            }
            while (v40);
          }
        }
        else if (!strcmp(__s1, "inf"))
        {
          v53 = *(double **)(a1 + 32);
          v54 = fabs(*v53);
          if (v9 >= 2)
          {
            v55 = v53 + 1;
            v56 = v9 - 1;
            do
            {
              v57 = *v55++;
              v58 = fabs(v57);
              if (v58 > v54)
                v54 = v58;
              --v56;
            }
            while (v56);
          }
        }
        else if (!strcmp(__s1, "-inf"))
        {
          v59 = *(double **)(a1 + 32);
          v60 = fabs(*v59);
          if (v9 >= 2)
          {
            v61 = v59 + 1;
            v62 = v9 - 1;
            do
            {
              v63 = *v61++;
              v64 = fabs(v63);
              if (v64 < v60)
                v60 = v64;
              --v62;
            }
            while (v62);
          }
        }
        else
        {
          v75 = 0.0;
          if (sscanf(__s1, "%lg", &v75) != 1)
            sub_1019190CC();
          v19 = v75;
          if (fabs(v75) >= 2.22044605e-16)
          {
            v65 = *(double **)(a1 + 32);
            v66 = pow(fabs(*v65), v75);
            if (v9 >= 2)
            {
              v67 = v65 + 1;
              v68 = v9 - 1;
              do
              {
                v69 = *v67++;
                v66 = v66 + pow(fabs(v69), v19);
                --v68;
              }
              while (v68);
            }
            pow(v66, 1.0 / v19);
          }
        }
      }
      else
      {
        v20 = *(double **)(a1 + 32);
        v21 = *v20 * *v20;
        if (v9 >= 2)
        {
          v22 = v20 + 1;
          v23 = v9 - 1;
          do
          {
            v24 = *v22++;
            v21 = v21 + v24 * v24;
            --v23;
          }
          while (v23);
        }
      }
    }
    else if (v13)
    {
      if (!strcmp(__s1, "1"))
      {
        if ((_DWORD)v12)
        {
          v25 = 0;
          v26 = *(_QWORD *)(a1 + 32);
          v27 = *(double **)(a2 + 32);
          v28 = 1;
          do
          {
            v29 = fabs(*(double *)(v26 + 8 * (v11 * v25)));
            v27[v25] = v29;
            v30 = v11 - 1;
            v31 = v28;
            if (v11 >= 2)
            {
              do
              {
                v29 = v29 + fabs(*(double *)(v26 + 8 * v31));
                v27[v25] = v29;
                ++v31;
                --v30;
              }
              while (v30);
            }
            ++v25;
            v28 += v11;
          }
          while (v25 != v12);
          v32 = *v27;
          v33 = v27 + 1;
          v34 = v12 - 1;
          do
          {
            v35 = *v33++;
            v36 = v35;
            if (v35 > v32)
              v32 = v36;
            --v34;
          }
          while (v34);
        }
      }
      else if (!strcmp(__s1, "inf"))
      {
        if ((_DWORD)v11)
        {
          v42 = *(double **)(a1 + 32);
          v43 = *(double **)(a2 + 32);
          v44 = v11;
          do
          {
            v45 = *v42++;
            *v43++ = fabs(v45);
            --v44;
          }
          while (v44);
        }
        if (v12 <= 1)
        {
          v47 = *(double **)(a2 + 32);
        }
        else
        {
          v46 = *(_QWORD *)(a1 + 32);
          v47 = *(double **)(a2 + 32);
          v48 = 1;
          v49 = v11;
          do
          {
            v50 = v11;
            v51 = v49;
            v52 = v47;
            if ((_DWORD)v11)
            {
              do
              {
                *v52 = fabs(*(double *)(v46 + 8 * v51)) + *v52;
                ++v52;
                ++v51;
                --v50;
              }
              while (v50);
            }
            ++v48;
            v49 += v11;
          }
          while (v48 != (_DWORD)v12);
        }
        v70 = *v47;
        if (v11 >= 2)
        {
          v71 = v47 + 1;
          v72 = v11 - 1;
          do
          {
            v73 = *v71++;
            v74 = v73;
            if (v73 > v70)
              v70 = v74;
            --v72;
          }
          while (v72);
        }
      }
      else
      {
        if (strcmp(__s1, "fro"))
          sub_101919080();
        v14 = *(double **)(a1 + 32);
        v15 = *v14 * *v14;
        if (v9 >= 2)
        {
          v16 = v14 + 1;
          v17 = v9 - 1;
          do
          {
            v18 = *v16++;
            v15 = v15 + v18 * v18;
            --v17;
          }
          while (v17);
        }
      }
    }
    else
    {
      sub_100A9FFE0(a1, a2, a3, a4);
    }
  }
}

void sub_100A9FF24(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

void sub_100A9FF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[308];

  sub_100A9DEA4(a1, v3, a3);
}

void sub_100A9FF9C(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

void sub_100A9FFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  sub_100A9DEA4(a1, &v3, a3);
}

_DWORD *sub_100A9FFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v11;
  __CLPK_integer v12;
  __CLPK_integer v13;
  __CLPK_doublereal *v14;
  __CLPK_doublereal *v15;
  __CLPK_doublereal *v16;
  cnprint::CNPrinter *v17;
  __CLPK_integer v18;
  __CLPK_integer v20;
  __CLPK_integer __lwork;
  __CLPK_integer __ldvt;
  __CLPK_integer __ldu;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;
  char __jobvt;
  char __jobu;

  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  if (v5 <= v6)
    v7 = *(_DWORD *)(a1 + 8);
  else
    v7 = *(_DWORD *)(a1 + 12);
  if (v5 >= v6)
    v8 = *(_DWORD *)(a1 + 8);
  else
    v8 = *(_DWORD *)(a1 + 12);
  if (a1 == a2)
    sub_101919118();
  if (a1 == a3)
    sub_101919140();
  if (a1 == a4)
    sub_101919168();
  if (a2 == a3)
    sub_101919190();
  if (a2 == a4)
    sub_1019191B8();
  if (a3 == a4)
    sub_1019191E0();
  v11 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  if (!v11)
    sub_101919208();
  if (v11 < 3 * v8 + v7)
    sub_101919230();
  if (v11 < 5 * v8)
    sub_101919258();
  if (*(_DWORD *)(a2 + 24) < v6)
    sub_101919280();
  if (*(_DWORD *)(a2 + 28) < v5)
    sub_1019192A8();
  if (*(_DWORD *)(a4 + 24) < v8)
    sub_1019192D0();
  if (!*(_DWORD *)(a4 + 28))
    sub_1019192F8();
  sub_10007A0C8(a2, a1);
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *(_DWORD *)(a2 + 12);
  v14 = *(__CLPK_doublereal **)(a2 + 32);
  v15 = *(__CLPK_doublereal **)(a4 + 32);
  v16 = *(__CLPK_doublereal **)(a3 + 32);
  __jobu = 78;
  __jobvt = 78;
  __n = v13;
  __m = v12;
  __lda = v12;
  __ldvt = 1;
  __ldu = 1;
  v20 = 0;
  __lwork = v11;
  v17 = (cnprint::CNPrinter *)dgesvd_(&__jobu, &__jobvt, &__m, &__n, v14, &__lda, v15, 0, &__ldu, 0, &__ldvt, v16, &__lwork, &v20);
  v18 = v20;
  if (v20)
  {
    LOWORD(__m) = 4;
    if (v20 < 0)
      LOBYTE(__n) = 5;
    else
      LOBYTE(__n) = 4;
    v17 = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(&__m, &__n);
  }
  if (v11 < **(double **)(a3 + 32) && cnprint::CNPrinter::GetLogLevel(v17) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print(&__m, &__n);
  }
  if (v18)
    sub_101919320();
  sub_100079AC4((_DWORD *)a3, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 28));
  return sub_100079AC4((_DWORD *)a4, v8, 1);
}

double *sub_100AA0214(uint64_t a1, _DWORD *a2)
{
  double *result;
  int v5;
  int v6;
  int v7;
  int i;
  double v9;

  if ((_DWORD *)a1 == a2)
    sub_101919348();
  result = (double *)sub_100079AC4(a2, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  v5 = a2[2];
  if (v5)
  {
    v6 = 0;
    v7 = a2[3];
    do
    {
      if (v7)
      {
        for (i = 0; i != v7; ++i)
        {
          v9 = sub_100208094(a1, i, v6);
          result = (double *)sub_100206B6C((uint64_t)a2, v6, i);
          *result = v9;
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_100AA02BC(uint64_t result, unsigned int a2, unsigned int a3)
{
  const char *v3;
  int v4;
  const char *v5;
  const char *v6;

  *(_QWORD *)(result + 24) = 0x300000001;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1021671A8;
  *(_QWORD *)(result + 8) = 0;
  if ((a2 & 0x80000000) != 0)
  {
    v3 = "nr >= 0";
    v4 = 454;
    v5 = "cnmatrix.h";
    v6 = "CNMatrix";
    goto LABEL_9;
  }
  if (a2 > 1)
  {
    v3 = "this->max_num_rows_ >= num_rows";
    v4 = 422;
LABEL_8:
    v5 = "cnmatrixbase.h";
    v6 = "SetMatrixSize";
LABEL_9:
    __assert_rtn(v6, v5, v4, v3);
  }
  if (a3 >= 4)
  {
    v3 = "this->max_num_cols_ >= num_cols";
    v4 = 423;
    goto LABEL_8;
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_100AA037C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

_DWORD *sub_100AA0390(int a1, int a2, _DWORD *a3)
{
  int v4;
  int v6;
  _DWORD *result;
  int v8;
  unsigned int v9;

  if (!a3[6])
    sub_1019193E8();
  v4 = a3[7];
  if (!v4)
    sub_101919410();
  v6 = a2 - a1;
  if (a2 == a1)
  {
    sub_100079AC4(a3, 1, 1);
    result = (_DWORD *)sub_100AA04DC((uint64_t)a3, 0);
    *result = a1;
  }
  else if (a2 - a1 < 0)
  {
    return sub_100079AC4(a3, 0, 0);
  }
  else
  {
    if (v4 <= v6)
      sub_101919438();
    v8 = v6 + 1;
    sub_100079AC4(a3, 1, v6 + 1);
    v9 = 0;
    do
    {
      result = (_DWORD *)sub_100AA04DC((uint64_t)a3, v9);
      *result = a1 + v9++;
    }
    while (v8 != v9);
  }
  return result;
}

void sub_100AA046C(_QWORD *a1)
{
  *a1 = off_1021673B0;
  operator delete();
}

void sub_100AA0490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[20];

  sub_100A9E878(a1, v3, a3);
}

uint64_t sub_100AA04DC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_101919460();
  if ((a2 & 0x80000000) != 0)
    sub_101919488();
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2)
    sub_1019194B0();
  return v2 + 4 * a2;
}

uint64_t sub_100AA0514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  uint64_t j;
  const char *v14;
  int v15;

  *(_QWORD *)(a1 + 24) = 0x300000014;
  *(_OWORD *)(a1 + 8) = xmmword_101C05630;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_1021675D8;
  *(_QWORD *)(a1 + 520) = a2;
  v7 = a1 + 528;
  *(_QWORD *)(a1 + 552) = 0x1400000001;
  *(_QWORD *)(a1 + 528) = off_102167590;
  *(_OWORD *)(v7 + 8) = xmmword_101C05650;
  *(_QWORD *)(a1 + 560) = a1 + 568;
  *(_QWORD *)(a1 + 672) = 0x100000003;
  *(_QWORD *)(a1 + 648) = off_1021673E0;
  *(_OWORD *)(a1 + 656) = xmmword_101C05680;
  *(_QWORD *)(a1 + 680) = a1 + 688;
  sub_100A9EC04(v7, a3);
  sub_100A9EC04(a1 + 648, a4);
  v8 = *(unsigned int *)(a1 + 544);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    v14 = "this->max_num_rows_ >= num_rows";
    v15 = 422;
    goto LABEL_12;
  }
  v9 = *(unsigned int *)(a1 + 664);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    v14 = "this->max_num_cols_ >= num_cols";
    v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (j = 0; j != v8; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v10 + j)) = *(_QWORD *)sub_100A9EB8C(a2, *(_DWORD *)(*(_QWORD *)(a1 + 560) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 680) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_100AA06B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[81] = off_1021673B0;
  v1[66] = off_1021673B0;
  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

void sub_100AA06E4(_QWORD *a1)
{
  a1[81] = off_1021673B0;
  a1[66] = off_1021673B0;
  *a1 = off_102155D60;
  operator delete();
}

void sub_100AA071C(_DWORD *a1)
{
  BOOL v2;
  int v3;
  unsigned int v4;
  uint64_t (**v5)();
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD v20[5];
  uint64_t v21;

  if (a1[2])
    v2 = a1[3] == 0;
  else
    v2 = 1;
  if (v2)
  {
    v20[3] = 0x300000001;
    v20[1] = 0;
    v20[2] = 0;
    v20[0] = off_1021671A8;
    v20[4] = &v21;
    sub_10007A0C8((uint64_t)(a1 + 130), (uint64_t)v20);
  }
  else
  {
    sub_100A9E4E0(":", (uint64_t)a1, 0, (uint64_t)v20);
    sub_10007A0C8((uint64_t)(a1 + 130), (uint64_t)v20);
    if (a1[1260] >= 2u)
    {
      v3 = 1;
      do
      {
        v4 = v3 + 1;
        sub_100A9E4E0(":", (uint64_t)a1, v3, (uint64_t)v20);
        v7 = 0x300000001;
        v5 = off_1021671A8;
        v6 = xmmword_101C05660;
        v8 = &v9;
        sub_100A9EDB8((uint64_t)v20, (uint64_t)(a1 + 130), (uint64_t)&v5);
        v12 = 0x300000001;
        v10 = off_1021671A8;
        v11 = xmmword_101C05660;
        v13 = &v14;
        sub_100078B9C((uint64_t)&v5, (uint64_t)&v10, 1.0 / (double)v4);
        v17 = 0x300000001;
        v15 = off_1021671A8;
        v16 = xmmword_101C05660;
        v18 = &v19;
        sub_100A9ECBC((uint64_t)(a1 + 130), (uint64_t)&v10, (uint64_t)&v15);
        sub_10007A0C8((uint64_t)(a1 + 130), (uint64_t)&v15);
        v3 = v4;
      }
      while (v4 < a1[1260]);
    }
  }
}

_QWORD *sub_100AA08D0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102167620;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    operator delete[]();
  *a1 = off_102155D60;
  return a1;
}

void sub_100AA0930(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x100000A55;
  *(_QWORD *)a1 = off_102167620;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_101C056B0;
  sub_100AA0A60();
}

void sub_100AA0988(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    operator delete[]();
  *v1 = off_102155D60;
  _Unwind_Resume(exception_object);
}

void sub_100AA09C4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102167620;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    operator delete[]();
  *a1 = off_102155D60;
  operator delete();
}

void sub_100AA0A34()
{
  sub_100AA0A60();
}

void sub_100AA0A60()
{
  operator new[]();
}

void sub_100AA0ACC()
{
  operator new[]();
}

void sub_100AA0B2C()
{
  operator delete[]();
}

void sub_100AA0B50(uint64_t a1, unsigned int a2)
{
  _BYTE v3[64];

  if (*(_DWORD *)(a1 + 5040) > a2)
  {
    sub_100A9F9B4(":", a1, a2, (uint64_t)v3);
    sub_100AA0BA0(a1, (uint64_t)v3);
  }
}

void sub_100AA0BA0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  double v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  __int128 v8;
  uint64_t (**v9)();
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (**v27)();
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;

  if (*(_DWORD *)(a1 + 8))
    v2 = *(_DWORD *)(a1 + 12) == 0;
  else
    v2 = 1;
  if (!v2 && *(_BYTE *)(a1 + 5048))
  {
    v29 = 0x300000001;
    v27 = off_1021671A8;
    v28 = xmmword_101C05660;
    v30 = &v31;
    sub_100A9EDB8(a2, a1 + 520, (uint64_t)&v27);
    v4 = sub_100A9FA30((uint64_t)&v27, a1 + 584);
    v5 = *(_DWORD *)(a1 + 596);
    v6 = *(_DWORD *)(a1 + 592);
    v14 = 0x300000001;
    v9 = off_1021671A8;
    if (v5 > 1)
      sub_1019184AC(422, "this->max_num_rows_ >= num_rows");
    if (v6 >= 4)
      sub_1019184AC(423, "this->max_num_cols_ >= num_cols");
    v7 = v4;
    v10 = v5;
    v11 = v6;
    v12 = v6 * v5;
    v13 = v5;
    v15 = &v16;
    sub_100AA0214(a1 + 584, &v9);
    v19 = 0x300000001;
    v17 = off_1021671A8;
    v18 = xmmword_101C05660;
    v20 = &v21;
    sub_100078B9C((uint64_t)&v9, (uint64_t)&v17, v7);
    v24 = 0x300000001;
    v22 = off_1021671A8;
    v23 = xmmword_101C05660;
    v25 = &v26;
    sub_100A9EDB8((uint64_t)&v27, (uint64_t)&v17, (uint64_t)&v22);
    v44 = 0x300000001;
    v42 = off_1021671A8;
    v43 = xmmword_101C05660;
    v45 = &v46;
    v39 = 0x100000134;
    v37 = off_102167500;
    v38 = xmmword_101C056A0;
    v40 = &v41;
    v34 = 0x100000001;
    v32 = off_102167548;
    *(_QWORD *)&v8 = 0x100000001;
    *((_QWORD *)&v8 + 1) = 0x100000001;
    v33 = v8;
    v35 = &v36;
    sub_100A9FAAC((uint64_t)&v22, (uint64_t)&v42, (uint64_t)&v37, (uint64_t)&v32, "2");
  }
}

void sub_100AA0DB8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 128, a4);
}

void sub_100AA0DC0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 122, a4);
}

void sub_100AA0DC8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 422, a4);
}

void sub_100AA0DD0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 992, a4);
}

void sub_100AA0DD8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 284, a4);
}

uint64_t sub_100AA0DE0()
{
  uint64_t v0;

  return cnprint::CNPrinter::Print(v0 - 4, v0 - 1);
}

uint64_t sub_100AA0DEC(uint64_t a1, _QWORD *a2)
{
  float v3;

  *(_QWORD *)(a1 + 8) = *a2;
  v3 = 1.0 / *(double *)a2;
  *(float *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(_QWORD *)(a1 + 32) = off_1021388A0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_102167668;
  bzero((void *)(a1 + 56), 0x2D8uLL);
  *(_WORD *)(a1 + 822) = 0;
  *(_DWORD *)(a1 + 818) = 0;
  return a1;
}

void sub_100AA0E6C()
{
  operator delete();
}

void sub_100AA0E80(uint64_t a1, _QWORD *a2)
{
  float v3;

  *(_QWORD *)(a1 + 8) = *a2;
  v3 = 1.0 / *(double *)a2;
  *(float *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  bzero((void *)(a1 + 56), 0x2D8uLL);
  *(_WORD *)(a1 + 822) = 0;
  *(_DWORD *)(a1 + 818) = 0;
}

void sub_100AA0EE4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  *(_DWORD *)(a1 + 56) = 0;
  v1 = a1 + 56;
  *(_DWORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 776) = 0;
  *(_WORD *)(a1 + 60) = 0;
  sub_1003FD610(a1 + 62);
  sub_1003FE74C(v1 + 208, 0, 0, 0, v1, *(_DWORD *)(v1 + 720));
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102167718);
  v2 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "compass calibrator has been reset", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102167718);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "compass calibrator has been reset", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCompassCalibratorAKM::reset()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_100AA10A4(uint64_t a1, float *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  const char *v40;
  uint8_t *v41;
  int v42;
  int v43;
  int v44;
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  uint8_t buf[4];
  const char *v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  __int16 v112;
  int v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;

  sub_1003FD724((int)(a2[2] / 0.3 * 5.0), (int)(a2[3] / 0.3 * 5.0), (int)(a2[4] / 0.3 * 5.0), a1 + 62, (_WORD *)(a1 + 254));
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_WORD *)(a1 + 816) = 0;
  if ((int)sub_1003FEAB0(0, 0, 0, (uint64_t *)(a1 + 264), a1 + 62, *(_WORD *)(a1 + 254), 0, 1, a1 + 56, (_DWORD *)(a1 + 776), a1 + 784) >= 1)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102167718);
    v3 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(__int16 *)(a1 + 660);
      v5 = *(__int16 *)(a1 + 798);
      v6 = *(__int16 *)(a1 + 796);
      v7 = *(__int16 *)(a1 + 800);
      v8 = *(__int16 *)(a1 + 802);
      v9 = *(__int16 *)(a1 + 786);
      v10 = *(__int16 *)(a1 + 804);
      v11 = *(__int16 *)(a1 + 806);
      v12 = *(__int16 *)(a1 + 808);
      v13 = *(__int16 *)(a1 + 792);
      v14 = *(__int16 *)(a1 + 784);
      v15 = *(__int16 *)(a1 + 810);
      v16 = *(__int16 *)(a1 + 812);
      v17 = *(__int16 *)(a1 + 814);
      v18 = *(__int16 *)(a1 + 790);
      v19 = *(__int16 *)(a1 + 788);
      v20 = *(__int16 *)(a1 + 794);
      v21 = *(__int16 *)(a1 + 816);
      *(_DWORD *)buf = 136319746;
      v83 = "Compass-DOE";
      v84 = 1024;
      v85 = v4;
      v86 = 1024;
      v87 = v5;
      v88 = 1024;
      v89 = v6;
      v90 = 1024;
      v91 = v7;
      v92 = 1024;
      v93 = v8;
      v94 = 1024;
      v95 = v9;
      v96 = 1024;
      v97 = v10;
      v98 = 1024;
      v99 = v11;
      v100 = 1024;
      v101 = v12;
      v102 = 1024;
      v103 = v13;
      v104 = 1024;
      v105 = v14;
      v106 = 1024;
      v107 = v15;
      v108 = 1024;
      v109 = v16;
      v110 = 1024;
      v111 = v17;
      v112 = 1024;
      v113 = v18;
      v114 = 1024;
      v115 = v19;
      v116 = 1024;
      v117 = v20;
      v118 = 1024;
      v119 = v21;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Type,%s,radius,%d,hrmin,%d,hrmax,%d,hrvar,%d,rvar,%d,m,%d,ovar,%d,%d,%d,hovar,%d,n,%d,vvar,%d,%d,%d,hvarA,%d,hvar,%d,hdistpl,%d,dvar,%d,", buf, 0x78u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102167718);
      v22 = *(__int16 *)(a1 + 660);
      v23 = *(__int16 *)(a1 + 798);
      v24 = *(__int16 *)(a1 + 796);
      v25 = *(__int16 *)(a1 + 800);
      v26 = *(__int16 *)(a1 + 802);
      v27 = *(__int16 *)(a1 + 786);
      v28 = *(__int16 *)(a1 + 804);
      v29 = *(__int16 *)(a1 + 806);
      v30 = *(__int16 *)(a1 + 808);
      v31 = *(__int16 *)(a1 + 792);
      v32 = *(__int16 *)(a1 + 784);
      v33 = *(__int16 *)(a1 + 810);
      v34 = *(__int16 *)(a1 + 812);
      v35 = *(__int16 *)(a1 + 814);
      v36 = *(__int16 *)(a1 + 790);
      v37 = *(__int16 *)(a1 + 788);
      v38 = *(__int16 *)(a1 + 794);
      v39 = *(__int16 *)(a1 + 816);
      v44 = 136319746;
      v45 = "Compass-DOE";
      v46 = 1024;
      v47 = v22;
      v48 = 1024;
      v49 = v23;
      v50 = 1024;
      v51 = v24;
      v52 = 1024;
      v53 = v25;
      v54 = 1024;
      v55 = v26;
      v56 = 1024;
      v57 = v27;
      v58 = 1024;
      v59 = v28;
      v60 = 1024;
      v61 = v29;
      v62 = 1024;
      v63 = v30;
      v64 = 1024;
      v65 = v31;
      v66 = 1024;
      v67 = v32;
      v68 = 1024;
      v69 = v33;
      v70 = 1024;
      v71 = v34;
      v72 = 1024;
      v73 = v35;
      v74 = 1024;
      v75 = v36;
      v76 = 1024;
      v77 = v37;
      v78 = 1024;
      v79 = v38;
      v80 = 1024;
      v81 = v39;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Type,%s,radius,%d,hrmin,%d,hrmax,%d,hrvar,%d,rvar,%d,m,%d,ovar,%d,%d,%d,hovar,%d,n,%d,vvar,%d,%d,%d,hvarA,%d,hvar,%d,hdistpl,%d,dvar,%d,", (const char *)&v44, 120, v42, v43);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLCompassCalibratorAKM::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
  }
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 776);
}

void sub_100AA14CC(uint64_t a1, float *a2, int *a3)
{
  int v5;
  uint64_t v6;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;
  double v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  int v34;

  v5 = *a3;
  *(_WORD *)(a1 + 56) = (int)(a2[2] / 0.3 * 5.0);
  v6 = a1 + 56;
  *(_DWORD *)(a1 + 776) = v5;
  *(_DWORD *)(a1 + 20) = v5;
  *(_WORD *)(a1 + 58) = (int)(a2[3] / 0.3 * 5.0);
  *(_WORD *)(a1 + 60) = (int)(a2[4] / 0.3 * 5.0);
  sub_1003FD610(a1 + 62);
  sub_1003FE74C(v6 + 208, 0, 0, 0, v6, *(_DWORD *)(v6 + 720));
  *(_DWORD *)(v6 - 28) = *(_DWORD *)(v6 + 720);
  *(_DWORD *)(v6 + 762) = *(_DWORD *)v6;
  *(_WORD *)(v6 + 766) = *(_WORD *)(v6 + 4);
  *(_BYTE *)(v6 - 32) = 1;
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102167718);
  v7 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[4];
    v11 = *a3;
    *(_DWORD *)buf = 134218752;
    v28 = v8;
    v29 = 2048;
    v30 = v9;
    v31 = 2048;
    v32 = v10;
    v33 = 1024;
    v34 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "compass calibrator has been set with offsets (%+.3f/%+.3f/%+.3f) and calibration level (%d)", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102167718);
    v12 = a2[2];
    v13 = a2[3];
    v14 = a2[4];
    v15 = *a3;
    v19 = 134218752;
    v20 = v12;
    v21 = 2048;
    v22 = v13;
    v23 = 2048;
    v24 = v14;
    v25 = 1024;
    v26 = v15;
    LODWORD(v18) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "compass calibrator has been set with offsets (%+.3f/%+.3f/%+.3f) and calibration level (%d)", COERCE_DOUBLE(&v19), v18);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCompassCalibratorAKM::setBias(const CLVector3d<float> &, const CLMotionTypeCompassCalibrationLevel &, const CLVector3d<float> &, const CLClientQuaternion *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

uint64_t sub_100AA1794(uint64_t result, float *a2, _DWORD *a3)
{
  int v3;
  int v4;
  float v5;
  float v6;
  float v7;
  int v8;

  v3 = *(_DWORD *)(result + 776);
  *a3 = v3;
  v4 = *(__int16 *)(result + 56);
  *(_DWORD *)(result + 20) = v3;
  v5 = (float)((float)v4 / 5.0) * 0.3;
  *a2 = v5;
  v6 = (float)((float)*(__int16 *)(result + 58) / 5.0) * 0.3;
  a2[1] = v6;
  v7 = (float)((float)*(__int16 *)(result + 60) / 5.0) * 0.3;
  a2[2] = v7;
  v8 = *(_DWORD *)(result + 28);
  if (v8 == v3
    && *(unsigned __int16 *)(result + 818) == *(unsigned __int16 *)(result + 56)
    && *(unsigned __int16 *)(result + 820) == *(unsigned __int16 *)(result + 58)
    && *(unsigned __int16 *)(result + 822) == *(unsigned __int16 *)(result + 60))
  {
    *(_WORD *)(result + 25) = 0;
  }
  else
  {
    *(_BYTE *)(result + 26) = v8 <= v3;
    *(_WORD *)(result + 24) = 256;
    *(_DWORD *)(result + 28) = v3;
    *(_DWORD *)(result + 818) = *(_DWORD *)(result + 56);
    *(_WORD *)(result + 822) = *(_WORD *)(result + 60);
  }
  return result;
}

float32_t sub_100AA1878(__int16 *a1, float32x2_t *a2, float32x2_t *a3)
{
  float v3;
  float32_t v4;
  int32x2_t v5;
  float32x2_t v11;
  float32_t result;

  v3 = (float)((float)a1[30] / 5.0) * 0.3;
  v4 = a2[2].f32[0] - v3;
  v5.i32[0] = a1[28];
  v5.i32[1] = a1[29];
  __asm { FMOV            V3.2S, #5.0 }
  v11 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(vdiv_f32(vcvt_f32_s32(v5), _D3)), (float64x2_t)vdupq_n_s64(0x3FD3333333333333uLL)));
  a2[1] = vsub_f32(a2[1], v11);
  a2[2].f32[0] = v4;
  result = a3[2].f32[0] - v3;
  a3[1] = vsub_f32(a3[1], v11);
  a3[2].f32[0] = result;
  return result;
}

BOOL sub_100AA1904(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 776)
      && *(_BYTE *)(a1 + 25)
      && !*(_WORD *)(a1 + 56)
      && !*(_WORD *)(a1 + 58)
      && *(_WORD *)(a1 + 60) == 0;
}

BOOL sub_100AA193C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) > 0;
}

BOOL sub_100AA194C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) > 3;
}

uint64_t sub_100AA195C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t sub_100AA1964(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

void sub_100AA196C(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

BOOL sub_100AA1998(double **a1, double a2, double a3)
{
  unsigned __int8 v6;
  unsigned int v7;
  unsigned int v8;
  double v9;
  double v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _BOOL8 v22;
  int v23;
  double *v24;
  double *v25;
  double v26;
  double v27;
  char *v28;
  NSObject *v29;
  __int128 *v30;
  BOOL v31;
  char *v32;
  uint64_t v34;
  _DWORD v35[2];
  __int16 v36;
  int v37;
  __int16 v38;
  _BOOL4 v39;
  uint8_t buf[4];
  unsigned int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  _BOOL4 v45;

  v6 = atomic_load((unsigned __int8 *)&qword_1023068B8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1023068B8))
  {
    sub_1002433B8((uint64_t)dbl_102306890);
    __cxa_guard_release(&qword_1023068B8);
  }
  if (*((_DWORD *)sub_1000288A0() + 20))
  {
    v7 = 0;
    v8 = 0;
    v9 = 0.0;
    v10 = 0.0;
    while (1)
    {
      v12 = *a1;
      v11 = a1[1];
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v12) >> 5) < *((unsigned int *)sub_1000288A0() + 22))
        break;
      v13 = *a1;
      v14 = a1[1];
      if (*a1 == v14)
      {
        v17 = -360.0;
        v18 = 360.0;
        v16 = -360.0;
        v15 = 360.0;
      }
      else
      {
        v16 = -360.0;
        v15 = 360.0;
        v17 = -360.0;
        v18 = 360.0;
        do
        {
          v19 = *v13;
          v20 = v13[1];
          v13 += 12;
          v9 = v9 + v19;
          v10 = v10 + v20;
          ++v7;
          if (v19 > v17)
            v17 = v19;
          if (v19 < v18)
            v18 = v19;
          if (v20 > v16)
            v16 = v20;
          if (v20 < v15)
            v15 = v20;
        }
        while (v13 != v14);
      }
      v21 = sub_10011E634(dbl_102306890, v18, v15, v17, v16, a2);
      v22 = v21 <= a3;
      if (v21 > a3)
      {
        v25 = *a1;
        v24 = a1[1];
        if (*a1 == v24)
        {
          v25 = a1[1];
        }
        else
        {
          v26 = -1.0;
          do
          {
            v27 = sub_10011E634(dbl_102306890, v9 / (double)v7, v10 / (double)v7, *v25, v25[1], a2);
            if (v27 > v26)
            {
              v24 = v25;
              v26 = v27;
            }
            v25 += 12;
          }
          while (v25 != a1[1]);
        }
        v28 = (char *)((char *)v25 - (char *)(v24 + 12));
        if (v28)
          memmove(v24, v24 + 12, (size_t)(v28 - 7));
        a1[1] = (double *)&v28[(_QWORD)v24];
        v23 = 1;
      }
      else
      {
        v23 = 0;
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102167738);
      v29 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240704;
        v41 = v8 + 1;
        v42 = 1026;
        v43 = v23;
        v44 = 1026;
        v45 = v21 <= a3;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "WifiCalc, outlieriter, %{public}d, dropped, %{public}d, verified, %{public}d", buf, 0x14u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102167738);
        ++v8;
        v35[0] = 67240704;
        v35[1] = v8;
        v36 = 1026;
        v37 = v23;
        v38 = 1026;
        v39 = v21 <= a3;
        LODWORD(v34) = 20;
        v32 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, outlieriter, %{public}d, dropped, %{public}d, verified, %{public}d", v35, v34);
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiLocationCalculatorLatLonOutlierRejection::rejectOutlierLatLonIteratively(std::vector<CLWifiAccessPoint> &, const double, const double)", "%s\n", v32);
        if (v32 != (char *)buf)
          free(v32);
      }
      else
      {
        ++v8;
      }
      v30 = sub_1000288A0();
      v31 = v21 > a3;
      if (v8 >= *((_DWORD *)v30 + 20))
        v31 = 0;
      if (!v31)
        return v22;
    }
  }
  return 0;
}

void sub_100AA1D8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1023068B8);
  _Unwind_Resume(a1);
}

BOOL sub_100AA1DAC(double **a1, double a2, long double a3)
{
  double *v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double *v20;
  double *v21;
  double v22;
  double v23;
  uint64_t v24;
  double *v25;
  double v26;
  unsigned __int8 v27;

  v5 = *a1;
  v6 = a1[1];
  v7 = (uint64_t)(*a1 + 12);
  v8 = **a1;
  if (*a1 == v6 || v7 == (_QWORD)v6)
  {
    v10 = v5[1];
    v11 = **a1;
  }
  else
  {
    v12 = **a1;
    v13 = (uint64_t)(*a1 + 12);
    v14 = *a1;
    v15 = (double *)v13;
    do
    {
      v16 = *v15;
      v15 += 12;
      v17 = v16;
      if (v12 < v16)
      {
        v12 = v17;
        v14 = (double *)v13;
      }
      v13 = (uint64_t)v15;
    }
    while (v15 != v6);
    v18 = *v14;
    v19 = (uint64_t)(*a1 + 12);
    v20 = *a1;
    v21 = (double *)v19;
    do
    {
      v22 = *v21;
      v21 += 12;
      v23 = v22;
      if (v22 < v8)
      {
        v8 = v23;
        v20 = (double *)v19;
      }
      v19 = (uint64_t)v21;
    }
    while (v21 != v6);
    v11 = *v20;
    v24 = (uint64_t)(*a1 + 12);
    v25 = *a1;
    do
    {
      if (v25[1] < *(double *)(v24 + 8))
        v25 = (double *)v24;
      v24 += 96;
    }
    while ((double *)v24 != v6);
    v10 = v25[1];
    do
    {
      if (*(double *)(v7 + 8) < v5[1])
        v5 = (double *)v7;
      v7 += 96;
    }
    while ((double *)v7 != v6);
    v8 = v18;
  }
  v26 = v5[1];
  v27 = atomic_load((unsigned __int8 *)&qword_102306888);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_102306888))
  {
    sub_1002433B8((uint64_t)dbl_102306860);
    __cxa_guard_release(&qword_102306888);
  }
  return sub_10011E634(dbl_102306860, v11, v26, v8, v10, a2) > a3;
}

void sub_100AA1F14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102306888);
  _Unwind_Resume(a1);
}

void sub_100AA1F2C(int a1@<W0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  void *__p;
  char *v21;
  char *v22;
  void *__b;
  _DWORD *v24;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_1001FE9E0(&__b, a1);
  if (a2 >= 1)
    memset_pattern16(__b, &unk_101C05940, 4 * a2);
  do
  {
    __p = 0;
    v21 = 0;
    v22 = 0;
    if (a1 >= 1)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        if (*((_DWORD *)__b + v7))
        {
          if (v6 >= v22)
          {
            v9 = (char *)__p;
            v10 = (v6 - (_BYTE *)__p) >> 2;
            v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 62)
              sub_100259694();
            v12 = v22 - (_BYTE *)__p;
            if ((v22 - (_BYTE *)__p) >> 1 > v11)
              v11 = v12 >> 1;
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
              v13 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v13 = v11;
            if (v13)
            {
              v14 = (char *)sub_100260634((uint64_t)&v22, v13);
              v9 = (char *)__p;
              v6 = v21;
            }
            else
            {
              v14 = 0;
            }
            v15 = &v14[4 * v10];
            *(_DWORD *)v15 = v7;
            v8 = v15 + 4;
            while (v6 != v9)
            {
              v16 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v15 - 1) = v16;
              v15 -= 4;
            }
            __p = v15;
            v21 = v8;
            v22 = &v14[4 * v13];
            if (v9)
              operator delete(v9);
          }
          else
          {
            *(_DWORD *)v6 = v7;
            v8 = v6 + 4;
          }
          v21 = v8;
          v6 = v8;
        }
        ++v7;
      }
      while (v7 != a1);
    }
    v17 = a3[1];
    if (v17 >= a3[2])
    {
      v18 = sub_100AA2234(a3, (uint64_t)&__p);
    }
    else
    {
      sub_100AA21E4((uint64_t)a3, (uint64_t)&__p);
      v18 = v17 + 24;
    }
    a3[1] = v18;
    if (__p)
    {
      v21 = (char *)__p;
      operator delete(__p);
    }
    sub_100AA2490((unint64_t)__b, v24);
  }
  while ((v19 & 1) != 0);
  if (__b)
  {
    v24 = __b;
    operator delete(__b);
  }
}

void sub_100AA20F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  sub_10025E1F0((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_100AA2140(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

_QWORD *sub_100AA216C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100675778(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 7);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100AA21C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100AA21E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = sub_10027205C(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_100AA222C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100AA2234(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002596A8(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_10027205C(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  sub_100AA2348(a1, v14);
  v12 = a1[1];
  sub_10025E974((uint64_t)v14);
  return v12;
}

void sub_100AA2334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10025E974((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100AA2348(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100AA23BC((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100AA23BC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_100AA245C((uint64_t)v11);
  return v9;
}

uint64_t sub_100AA245C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10025E930(a1);
  return a1;
}

_DWORD *sub_100AA2490(unint64_t a1, _DWORD *a2)
{
  int *v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  int v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  unint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;

  if (a2 != (_DWORD *)a1)
  {
    v2 = a2 - 1;
    if (a2 - 1 != (_DWORD *)a1)
    {
      v3 = 0;
      v4 = *v2;
      v5 = a2 - 1;
      while (1)
      {
        v6 = v4;
        v4 = *(v5 - 1);
        if (v6 < v4)
          break;
        --v5;
        ++v3;
        if (v5 == (_DWORD *)a1)
        {
          if ((unint64_t)v2 > a1)
          {
            v7 = a1 + 4;
            do
            {
              v8 = *(_DWORD *)(v7 - 4);
              *(_DWORD *)(v7 - 4) = *v2;
              *v2-- = v8;
              v9 = v7 >= (unint64_t)v2;
              v7 += 4;
            }
            while (!v9);
          }
          return a2;
        }
      }
      v11 = (unint64_t)(v5 + 1);
      v12 = a2;
      do
      {
        v14 = *--v12;
        v13 = v14;
      }
      while (v14 >= v4);
      *(v5 - 1) = v13;
      *v12 = v4;
      if (v3)
      {
        do
        {
          v15 = *(_DWORD *)(v11 - 4);
          *(_DWORD *)(v11 - 4) = *v2;
          *v2-- = v15;
          v9 = v11 >= (unint64_t)v2;
          v11 += 4;
        }
        while (!v9);
      }
    }
  }
  return a2;
}

void sub_100AA2554()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100AA25F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100AA2608()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100AA2694(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100AA26AC(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100AA29B8()
{
  operator delete();
}

BOOL sub_100AA29E0(_BOOL8 result)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  int v6;
  CFAbsoluteTime v7;
  uint8_t buf[4];
  CFAbsoluteTime Current;

  if (*(int *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 48) + 8) >= 1)
  {
    v1 = result;
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021677E0);
    v2 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      Current = CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "power assertion for submersion state change,timestamp,%{public}f,assertionState,0,reason,timeout", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021677E0);
      v3 = qword_10229FE88;
      v6 = 134349056;
      v7 = CFAbsoluteTimeGetCurrent();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v3, 0, "power assertion for submersion state change,timestamp,%{public}f,assertionState,0,reason,timeout", &v6, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "-[CLContextManagerWaterSubmersionBase initWithUniverse:delegate:withBuffer:withSourceAggregator:]_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    return sub_100E3E6F0(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 48));
  }
  return result;
}

void sub_100AA2EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100AA4060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100AA4CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100AA5410(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[688];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  v5 = *a2;
  sub_10011D234((uint64_t)v15, a3);
  objc_msgSend(a4, "onForcedLocationNotificationSub:data:", v5, v15);

  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19 < 0)
    operator delete(__p);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_100AA5520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100AA57D8(int a1, void *a2, CFStringRef theString1)
{
  id result;

  if (CFStringCompare(theString1, CFSTR("com.apple.locationd.WaterSubmersion.EnableEasySubmersion"), 0) == kCFCompareEqualTo)
    objc_msgSend(a2, "onEnableEasySubmersion:", 1);
  result = (id)CFStringCompare(theString1, CFSTR("com.apple.locationd.WaterSubmersion.DisableEasySubmersion"), 0);
  if (!result)
    return objc_msgSend(a2, "onEnableEasySubmersion:", 0);
  return result;
}

void sub_100AA5A78()
{
  operator delete();
}

BOOL sub_100AA5A9C(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_1021677E0);
  v2 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "unsubscribing from Surface Cal GPS notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021677E0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "unsubscribing from Surface Cal GPS notifications", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLContextManagerWaterSubmersion setUpGPSSubscriptionForSurfaceCal]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 192) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 192) + 8), 0);
  result = sub_100E3E6F0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 184));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 200) = 0;
  return result;
}

void sub_100AA6324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  sub_100261F44((uint64_t)&a25);
  sub_1006F0FB8(&a27);
  sub_100261F44((uint64_t)&a33);
  sub_1006F0FB8(&a35);
  sub_1006F0FB8(&a41);
  _Unwind_Resume(a1);
}

void sub_100AA6C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29)
{
  sub_100261F44((uint64_t)&a16);
  sub_100261F44((uint64_t)&a25);
  sub_100261F44((uint64_t)&a27);
  sub_1006F0FB8(&a29);
  _Unwind_Resume(a1);
}

void sub_100AA7A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  sub_100261F44((uint64_t)&a32);
  sub_100261F44((uint64_t)&a34);
  if (a41 < 0)
    operator delete(__p);
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  _Unwind_Resume(a1);
}

float sub_100AA7BF8(uint64_t a1, int a2)
{
  float v4;
  int v5;
  float *v6;
  float *v7;
  float v8;
  void *__p;
  float *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  sub_10027205C(&__p, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v5 = (int)((((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2) - 1) * a2) / 100;
  v6 = (float *)__p;
  v7 = (float *)((char *)__p + 4 * v5);
  if (v7 != v11)
  {
    sub_10053EEC0((float *)__p, v7, v11, v4);
    v6 = (float *)__p;
  }
  v8 = v6[v5];
  v11 = v6;
  operator delete(v6);
  return v8;
}

void sub_100AA7CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100AA8230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27)
{
  sub_100261F44((uint64_t)&a25);
  sub_1006F0FB8(&a27);
  _Unwind_Resume(a1);
}

void sub_100AA88D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100AA8A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100AA93F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a71;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

void sub_100AA94B8(uint64_t a1, void *a2, const __CFString *a3)
{
  _QWORD *v5;
  unint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CFAbsoluteTime Current;
  double *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  double *v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  double *v25;
  std::__shared_weak_count *v26;

  v5 = operator new(0x28uLL);
  v5[1] = 0;
  v6 = v5 + 1;
  v5[2] = 0;
  *v5 = off_102167810;
  v5[3] = 0x7FEFFFFFFFFFFFFFLL;
  v5[4] = 0;
  v25 = (double *)(v5 + 3);
  v26 = (std::__shared_weak_count *)v5;
  if (CFStringCompare(a3, CFSTR("com.apple.locationd.WaterSubmersion.SimulateSubmerged"), 0) == kCFCompareEqualTo)
  {
    *((CFAbsoluteTime *)v5 + 3) = CFAbsoluteTimeGetCurrent();
    *((_BYTE *)v5 + 32) = 2;
    v23 = v5 + 3;
    v24 = (std::__shared_weak_count *)v5;
    do
      v10 = __ldxr(v6);
    while (__stxr(v10 + 1, v6));
    objc_msgSend(a2, "updateEvent_bounce:", &v23);
    v11 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (CFStringCompare(a3, CFSTR("com.apple.locationd.WaterSubmersion.SimulateNotSubmerged"), 0) == kCFCompareEqualTo)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v15 = v25;
    *v25 = Current;
    *((_BYTE *)v15 + 8) = 1;
    v21 = v15;
    v22 = v26;
    if (v26)
    {
      v16 = (unint64_t *)&v26->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    objc_msgSend(a2, "updateEvent_bounce:", &v21);
    v18 = v22;
    if (v22)
    {
      v19 = (unint64_t *)&v22->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  if (CFStringCompare(a3, CFSTR("com.apple.locationd.WaterSubmersion.PauseDemo"), 0) == kCFCompareEqualTo)
    objc_msgSend(a2, "pauseEvent_bounce");
  if (CFStringCompare(a3, CFSTR("com.apple.locationd.WaterSubmersion.ResumeDemo"), 0) == kCFCompareEqualTo)
    objc_msgSend(a2, "resumeEvent_bounce");
  if (CFStringCompare(a3, CFSTR("com.apple.locationd.WaterSubmersion.DemoDepthUpdate"), 0) == kCFCompareEqualTo)
    objc_msgSend(a2, "demoDepthUpdate_bounce");
  v7 = v26;
  if (v26)
  {
    v8 = (unint64_t *)&v26->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_100AA96DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_100AA970C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  float v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  CLWaterSubmersionMeasurement *v15;

  if (objc_msgSend(*(id *)(a1 + 32), "externalSubmersionState") == (id)2)
  {
    v3 = *(unsigned __int8 *)(a1 + 128);
    v4 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), v2);
    objc_msgSend(*(id *)(a1 + 32), "targetPressure");
    v6 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    if (v3)
      objc_msgSend(v4, "boundedIncrementBetweenStart:andStop:withCurrent:withIncrement:", v6, 101.325, v5, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
    else
      objc_msgSend(v4, "incrementTowardsTarget:andCurrent:withIncrement:", v5, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), *v6);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v8;
    objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v7), "settleToTemperatureFromStart:toStop:withCurrent:withDecrement:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v11;
    objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v12), "settleToTemperatureFromStart:toStop:withCurrent:withDecrement:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8)
                                                                            + 24);
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  *(_QWORD *)(v10 + 24) = v9;
  v15 = objc_alloc_init(CLWaterSubmersionMeasurement);
  -[CLWaterSubmersionMeasurement setStartAt:](v15, "setStartAt:", CFAbsoluteTimeGetCurrent());
  -[CLWaterSubmersionMeasurement setPressure:](v15, "setPressure:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  -[CLWaterSubmersionMeasurement setSurfacePressure:](v15, "setSurfacePressure:", 101.325);
  -[CLWaterSubmersionMeasurement setTemperature:](v15, "setTemperature:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));
  -[CLWaterSubmersionMeasurement setTemperatureUncertainty:](v15, "setTemperatureUncertainty:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24));
  v13 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  -[CLWaterSubmersionMeasurement surfacePressure](v15, "surfacePressure");
  +[CLContextManagerWaterSubmersion calculateDepthFromPressure:withSurfacePressure:](CLContextManagerWaterSubmersion, "calculateDepthFromPressure:withSurfacePressure:", v13, v14);
  -[CLWaterSubmersionMeasurement setDepth:](v15, "setDepth:");
  -[CLWaterSubmersionMeasurement setState:](v15, "setState:", objc_msgSend(*(id *)(a1 + 32), "submersionState"));
  objc_msgSend(*(id *)(a1 + 32), "updateSubmersionStateFromMeasurement:", v15);
  objc_msgSend(*(id *)(a1 + 32), "updateClientsSubmersionMeasurement:", v15);

}

void sub_100AA9A90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_100AA9AA4(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (void *)a1[4];
  v4 = a1[5];
  v3 = (std::__shared_weak_count *)a1[6];
  v10 = v4;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  objc_msgSend(v2, "updateSubmersionStateFromAOPState:", &v10);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_100AA9B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AA9B40(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100AA9B64(uint64_t a1)
{
  return sub_100261F44(a1 + 40);
}

id sub_100AA9BDC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "stopUpdates");
}

id sub_100AA9C54(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startUpdates");
}

id sub_100AA9CCC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateTargetDemoDepth");
}

void sub_100AA9D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100AA9E98(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t sub_100AA9EC4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      sub_100AA9F38(a1, a2, a2);
      a2 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_100AA9F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100AA9F38(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = a2[1];
  v7 = *a2;
  v8 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v7) ^ ((0xC6A4A7935BD1E995 * v7) >> 47)) + 3864292196u))
     + 3864292196u;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v7) ^ ((0xC6A4A7935BD1E995 * v7) >> 47)) + 3864292196u))
         + 3864292196u;
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v7 && *((_DWORD *)v12 + 5) == (_DWORD)v6)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v12 = *v22;
LABEL_42:
    *v22 = v12;
    goto LABEL_43;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v23 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_100AAA18C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100AAA1A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102167810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100AAA1B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102167810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100AAA1F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102167860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100AAA204(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102167860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100AAA240()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C0612C;
      v1[3] = unk_101C0613C;
      v1[4] = xmmword_101C0614C;
      v1[0] = xmmword_101C0610C;
      v1[1] = unk_101C0611C;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100AAA314(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100AAA32C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[24];

  sub_1015A2E04(qword_1023068C0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023068C0, (void *)&_mh_execute_header);
  qword_1023068E0 = 0;
  qword_1023068E8 = 0;
  qword_1023068D8 = 0;
  qword_1023068D8 = (uint64_t)operator new(0x284uLL);
  v0 = qword_1023068D8 + 644;
  qword_1023068E8 = qword_1023068D8 + 644;
  memcpy((void *)qword_1023068D8, &unk_101C05980, 0x284uLL);
  qword_1023068E0 = v0;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_1023068D8, (void *)&_mh_execute_header);
  qword_1023068F8 = 0;
  qword_102306900 = 0;
  qword_1023068F0 = 0;
  qword_1023068F0 = (uint64_t)operator new(0x284uLL);
  v1 = qword_1023068F0 + 644;
  qword_102306900 = qword_1023068F0 + 644;
  memcpy((void *)qword_1023068F0, &unk_101C05C04, 0x284uLL);
  qword_1023068F8 = v1;
  qword_102306910 = 0;
  qword_102306918 = 0;
  qword_102306908 = 0;
  qword_102306908 = (uint64_t)operator new(0x284uLL);
  v2 = qword_102306908 + 644;
  qword_102306918 = qword_102306908 + 644;
  memcpy((void *)qword_102306908, &unk_101C05E88, 0x284uLL);
  qword_102306910 = v2;
  __cxa_atexit((void (*)(void *))sub_100AA26AC, &qword_1023068F0, (void *)&_mh_execute_header);
  qword_102306928 = 0;
  qword_102306930 = 0;
  qword_102306920 = 0;
  qword_102306920 = (uint64_t)operator new(0x284uLL);
  v3 = qword_102306920 + 644;
  qword_102306930 = qword_102306920 + 644;
  memcpy((void *)qword_102306920, &unk_101C05C04, 0x284uLL);
  qword_102306928 = v3;
  qword_102306940 = 0;
  qword_102306948 = 0;
  qword_102306938 = 0;
  qword_102306938 = (uint64_t)operator new(0x284uLL);
  v4 = qword_102306938 + 644;
  qword_102306948 = qword_102306938 + 644;
  memcpy((void *)qword_102306938, &unk_101C05E88, 0x284uLL);
  qword_102306940 = v4;
  __cxa_atexit((void (*)(void *))sub_100AA26AC, &qword_102306920, (void *)&_mh_execute_header);
  v6[0] = 0x7800000001;
  v6[1] = &qword_102306920;
  v6[2] = 0x7A00000001;
  v6[3] = &qword_102306920;
  v6[4] = 0x7900000001;
  v6[5] = &qword_102306920;
  v6[6] = 0x7B00000001;
  v6[7] = &qword_102306920;
  v6[8] = 0x7800000004;
  v6[9] = &qword_102306920;
  v6[10] = 0x7A00000004;
  v6[11] = &qword_102306920;
  v6[12] = 0x7900000004;
  v6[13] = &qword_102306920;
  v6[14] = 0x7B00000004;
  v6[15] = &qword_102306920;
  v6[16] = 0x7300000004;
  v6[17] = &qword_1023068F0;
  v6[18] = 0x7C00000004;
  v6[19] = &qword_1023068F0;
  v6[20] = 0x7300000000;
  v6[21] = &qword_1023068F0;
  v6[22] = 0x7C00000000;
  v6[23] = &qword_1023068F0;
  sub_100AA9EC4((uint64_t)&unk_102306950, (int *)v6, 12);
  return __cxa_atexit((void (*)(void *))sub_100AA26EC, &unk_102306950, (void *)&_mh_execute_header);
}

void sub_100AAA5B8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100AAA690(id a1)
{
  qword_102306978 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLDuetMonitorSilo"));
}

void sub_100AAA708(id a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (!objc_opt_class(_DKObject, v1))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021678E0);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLDuetMonitor: not supported on this platform because CoreDuet.framework is not present", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021678E0);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "CLDuetMonitor: not supported on this platform because CoreDuet.framework is not present", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "+[CLDuetMonitor isSupported]_block_invoke", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    byte_102306988 = 1;
  }
}

void sub_100AAA9E8(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

BOOL sub_100AAAA14()
{
  return os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT);
}

BOOL sub_100AAAA28()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 680), OS_LOG_TYPE_INFO);
}

BOOL sub_100AAAA38()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 680));
}

_QWORD *sub_100AAAA44(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  float32x2_t v11;
  float v12;

  v4 = *((unsigned __int8 *)a1 + 8);
  if ((~v4 & 3) == 0)
  {
    v5 = *a1;
    v6 = *(int32x2_t *)((char *)a1 + 12);
    v7 = (float32x2_t)vrev64_s32(v6);
    v6.i32[1] = *((_DWORD *)a1 + 5);
    v8 = (float32x2_t)vdup_n_s32(0x3C8EFA35u);
    v9 = (float)((float)((float)(*(float *)(a2 + 8) * *(float *)v6.i32) + *(float *)(a2 + 20)) * 0.017453)
       - (float)((float)((float)(*((float *)a1 + 6) * *(float *)v6.i32) + *((float *)a1 + 9)) * 0.017453);
    v11 = vsub_f32(vmul_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a2, *(float *)v6.i32), *(float32x2_t *)(a2 + 12)), v8), vmul_f32(vadd_f32(vmul_f32(v7, (float32x2_t)v6), *(float32x2_t *)((char *)a1 + 28)), v8));
    v12 = v9;
    (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v5 + 32))(v5, &v11);
    LOBYTE(v4) = *((_BYTE *)a1 + 8);
  }
  *((_BYTE *)a1 + 8) = v4 | 1;
  *((_DWORD *)a1 + 4) = *(_DWORD *)a2;
  *((_DWORD *)a1 + 5) = *(_DWORD *)(a2 + 4);
  *((_DWORD *)a1 + 6) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)a1 + 7) = *(_DWORD *)(a2 + 12);
  *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)a1 + 9) = *(_DWORD *)(a2 + 20);
  *((_BYTE *)a1 + 40) = *(_BYTE *)(a2 + 24);
  return sub_100AAAB58(a1);
}

_QWORD *sub_100AAAB58(_QWORD *result)
{
  float32x2_t v1;
  float32x2_t v2;
  float v3;
  _BOOL8 v5;
  float32x2_t v6;
  float v7;

  if ((~*((unsigned __int8 *)result + 8) & 3) == 0)
  {
    v1 = *(float32x2_t *)((char *)result + 12);
    v2 = (float32x2_t)vrev64_s32((int32x2_t)v1);
    v1.i32[1] = *((_DWORD *)result + 5);
    v3 = (float)(*((float *)result + 6) * v1.f32[0]) + *((float *)result + 9);
    v6 = vmul_f32(vadd_f32(vmul_f32(v2, v1), *(float32x2_t *)((char *)result + 28)), (float32x2_t)vdup_n_s32(0x3C8EFA35u));
    v7 = v3 * 0.017453;
    v5 = v1.f32[0] < 20.0 || *((unsigned __int8 *)result + 40) > 0x60u;
    return (_QWORD *)(*(uint64_t (**)(_QWORD, float32x2_t *, _BOOL8))(*(_QWORD *)*result + 16))(*result, &v6, v5);
  }
  return result;
}

_QWORD *sub_100AAABFC(uint64_t a1, float a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (a2 == 3.4028e38)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102167920);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      v11 = 0x47EFFFFFE0000000;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: temperature != 3.40282347e+38F, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMLinearTemperatureFit.cpp, line 45,temperature,%f.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102167920);
      v8 = 134217984;
      v9 = 0x47EFFFFFE0000000;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: temperature != 3.40282347e+38F, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMLinearTemperatureFit.cpp, line 45,temperature,%f.", COERCE_DOUBLE(&v8));
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CMLinearTemperatureFit::feedGyroTemperature(float)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  *(_BYTE *)(a1 + 8) |= 2u;
  *(float *)(a1 + 12) = a2;
  return sub_100AAAB58((_QWORD *)a1);
}

void sub_100AAADE8(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

id sub_100AAAE14@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id result;
  uint64_t v8;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  objc_msgSend(objc_msgSend(a1, "startDate"), "timeIntervalSinceReferenceDate");
  *(_QWORD *)a2 = v4;
  objc_msgSend(objc_msgSend(a1, "endDate"), "timeIntervalSinceReferenceDate");
  *(_QWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = 0;
  v6 = (unint64_t)objc_msgSend(a1, "workoutActivityType");
  *(_BYTE *)(a2 + 20) = (v6 < 0x35) & (0x10002001000000uLL >> v6);
  *(_BYTE *)(a2 + 21) = objc_msgSend(objc_msgSend(objc_msgSend(a1, "metadata"), "objectForKeyedSubscript:", HKMetadataKeyIndoorWorkout), "BOOLValue");
  result = objc_msgSend(objc_msgSend(a1, "totalEnergyBurned"), "doubleValueForUnit:", +[HKUnit unitFromString:](HKUnit, "unitFromString:", CFSTR("cal")));
  *(_QWORD *)(a2 + 24) = v8;
  return result;
}

void sub_100AAAED4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id v7;
  id v8;
  NSCompoundPredicate *v9;
  id v10;
  id v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  void *__p;
  void *v21;
  uint64_t v22;
  _WORD v23[8];
  _QWORD v24[4];
  _BYTE v25[24];
  _BYTE *v26;
  _QWORD v27[2];
  uint8_t buf[1640];

  if (objc_opt_class(HKHealthStore, a2))
  {
    if (+[HKHealthStore isHealthDataAvailable](HKHealthStore, "isHealthDataAvailable"))
    {
      v7 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a3);
      v8 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a4);
      v27[0] = +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", v7, v8, 3);
      v27[1] = +[HKQuery _predicateForObjectsFromAppleWatches](HKQuery, "_predicateForObjectsFromAppleWatches");
      v9 = +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v27, 2));
      v10 = objc_alloc((Class)HKSampleQuery);
      v11 = +[HKSampleType workoutType](HKSampleType, "workoutType");
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3321888768;
      v24[2] = sub_100AAB2AC;
      v24[3] = &unk_102167940;
      v12 = v25;
      sub_100270E34((uint64_t)v25, a1);
      v13 = objc_msgSend(v10, "initWithSampleType:predicate:limit:sortDescriptors:resultsHandler:", v11, v9, 0, 0, v24);
      v14 = objc_alloc_init((Class)HKHealthStore);
      objc_msgSend(v14, "executeQuery:", v13);

      if (v26 == v25)
      {
        v15 = 4;
      }
      else
      {
        if (!v26)
          return;
        v15 = 5;
        v12 = v26;
      }
      (*(void (**)(_QWORD *))(*v12 + 8 * v15))(v12);
    }
    else
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102167970);
      v16 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Workout query, health data is not available.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102167970);
        v23[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Workout query, health data is not available.", v23, 2);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 0, "void CLHKHealthStoreAccessUtils::queryWorkouts(CFAbsoluteTime, CFAbsoluteTime, WorkoutHandlerFunction)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      __p = 0;
      v21 = 0;
      v22 = 0;
      sub_10053C1B0(&__p, 0, 0, 0);
      buf[0] = 0;
      v17 = *(_QWORD *)(a1 + 24);
      if (!v17)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint8_t *, void **))(*(_QWORD *)v17 + 48))(v17, buf, &__p);
      if (__p)
      {
        v21 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_100AAB24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24)
{
  _QWORD *v24;
  uint64_t v26;

  if (a24 == v24)
  {
    v26 = 4;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v26 = 5;
    v24 = a24;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v26))(v24);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100AAB2AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSObject *v5;
  uint64_t v6;
  id v8;
  uint64_t v9;
  void *i;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  const char *v23;
  char *v24;
  void *__p;
  void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  _OWORD *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  __int128 buf;
  __int128 v39;
  _BYTE v40[128];

  v33 = 0;
  v34 = 0;
  v35 = 0;
  if (a4)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102167970);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = a4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Workout query, %@", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102167970);
      v36 = 138412290;
      v37 = a4;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Workout query, %@", &v36, 12);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 0, "void CLHKHealthStoreAccessUtils::queryWorkouts(CFAbsoluteTime, CFAbsoluteTime, WorkoutHandlerFunction)_block_invoke", "%s\n", v23);
      if (v24 != (char *)&buf)
        free(v24);
    }
  }
  else if (a3)
  {
    if (objc_msgSend(a3, "count"))
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v29, v40, 16);
      if (v8)
      {
        v9 = *(_QWORD *)v30;
        do
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(_QWORD *)v30 != v9)
              objc_enumerationMutation(a3);
            sub_100AAAE14(*(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i), (uint64_t)&buf);
            v11 = v34;
            if ((unint64_t)v34 >= v35)
            {
              v13 = v33;
              v14 = ((char *)v34 - (_BYTE *)v33) >> 5;
              v15 = v14 + 1;
              if ((unint64_t)(v14 + 1) >> 59)
                sub_100259694();
              v16 = v35 - (_QWORD)v33;
              if ((uint64_t)(v35 - (_QWORD)v33) >> 4 > v15)
                v15 = v16 >> 4;
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
                v17 = 0x7FFFFFFFFFFFFFFLL;
              else
                v17 = v15;
              if (v17)
              {
                v18 = (char *)sub_10025BA00((uint64_t)&v35, v17);
                v13 = v33;
                v11 = v34;
              }
              else
              {
                v18 = 0;
              }
              v19 = &v18[32 * v14];
              *(_OWORD *)v19 = buf;
              *((_OWORD *)v19 + 1) = v39;
              if (v11 == v13)
              {
                v22 = &v18[32 * v14];
              }
              else
              {
                v20 = &v18[32 * v14];
                do
                {
                  v21 = *(v11 - 1);
                  v22 = v20 - 32;
                  *((_OWORD *)v20 - 2) = *(v11 - 2);
                  *((_OWORD *)v20 - 1) = v21;
                  v11 -= 2;
                  v20 -= 32;
                }
                while (v11 != v13);
              }
              v12 = v19 + 32;
              v33 = v22;
              v34 = v19 + 32;
              v35 = (unint64_t)&v18[32 * v17];
              if (v13)
                operator delete(v13);
            }
            else
            {
              *v34 = buf;
              v11[1] = v39;
              v12 = v11 + 2;
            }
            v34 = v12;
          }
          v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v29, v40, 16);
        }
        while (v8);
      }
    }
  }
  __p = 0;
  v27 = 0;
  v28 = 0;
  sub_10053C1B0(&__p, v33, (uint64_t)v34, ((char *)v34 - (_BYTE *)v33) >> 5);
  LOBYTE(buf) = a4 == 0;
  v6 = *(_QWORD *)(a1 + 56);
  if (!v6)
    sub_10025FD1C();
  (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v6 + 48))(v6, &buf, &__p);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
}

void sub_100AAB674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AAB6C0(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_100AAB6CC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100AAB700(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

_QWORD *sub_100AAB72C(_QWORD *__dst, uint64_t a2, __int128 *a3)
{
  __int128 v5;

  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  __dst[3] = a2;
  __dst[4] = 0xBFF0000000000000;
  sub_100AAB7A4((uint64_t)__dst);
  return __dst;
}

void sub_100AAB788(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100AAB7A4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *result;
  uint64_t v41;
  _BYTE v42[24];
  _BYTE *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  _BYTE v48[24];
  _BYTE *v49;
  _BYTE v50[24];
  _BYTE *v51;
  _BYTE v52[24];
  _BYTE *v53;
  _BYTE v54[24];
  _BYTE *v55;
  _BYTE v56[24];
  _BYTE *v57;
  _BYTE v58[24];
  _BYTE *v59;
  _BYTE v60[24];
  _BYTE *v61;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24));
  v3 = operator new(0x20uLL);
  *v3 = off_1021679E0;
  v3[1] = sub_1000D1DB0;
  v3[2] = 0;
  v3[3] = a1;
  v61 = v3;
  sub_100AB0394((_QWORD *)(v2 + 256), (uint64_t)v60);
  v4 = v61;
  if (v61 == v60)
  {
    v5 = 4;
    v4 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24));
  v7 = operator new(0x20uLL);
  *v7 = off_102167AA0;
  v7[1] = sub_10023EA0C;
  v7[2] = 0;
  v7[3] = a1;
  v59 = v7;
  sub_100AB0658((_QWORD *)(v6 + 112), (uint64_t)v58);
  v8 = v59;
  if (v59 == v58)
  {
    v9 = 4;
    v8 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 112))(*(_QWORD *)(a1 + 24));
  v11 = operator new(0x20uLL);
  *v11 = off_102167B60;
  v11[1] = sub_1001D4834;
  v11[2] = 0;
  v11[3] = a1;
  v57 = v11;
  sub_100AB091C((_QWORD *)(v10 + 416), (uint64_t)v56);
  v12 = v57;
  if (v57 == v56)
  {
    v13 = 4;
    v12 = v56;
  }
  else
  {
    if (!v57)
      goto LABEL_16;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_16:
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24));
  v15 = operator new(0x20uLL);
  *v15 = off_102167C20;
  v15[1] = sub_100121F74;
  v15[2] = 0;
  v15[3] = a1;
  v55 = v15;
  sub_100AB0BE0((_QWORD *)(v14 + 112), (uint64_t)v54);
  v16 = v55;
  if (v55 == v54)
  {
    v17 = 4;
    v16 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_21;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_21:
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
  v19 = operator new(0x20uLL);
  *v19 = off_102167CE0;
  v19[1] = sub_100AABE68;
  v19[2] = 0;
  v19[3] = a1;
  v53 = v19;
  sub_100AB0EA4((_QWORD *)(v18 + 288), (uint64_t)v52);
  v20 = v53;
  if (v53 == v52)
  {
    v21 = 4;
    v20 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_26;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_26:
  v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24));
  v23 = operator new(0x20uLL);
  *v23 = off_102167D90;
  v23[1] = sub_100AAC0A0;
  v23[2] = 0;
  v23[3] = a1;
  v51 = v23;
  sub_100AB1184((_QWORD *)(v22 + 168), (uint64_t)v50);
  v24 = v51;
  if (v51 == v50)
  {
    v25 = 4;
    v24 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_31;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_31:
  v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 144))(*(_QWORD *)(a1 + 24));
  v27 = operator new(0x20uLL);
  *v27 = off_102167E50;
  v27[1] = sub_100AAC2E0;
  v27[2] = 0;
  v27[3] = a1;
  v49 = v27;
  sub_100AB1464((_QWORD *)(v26 + 128), (uint64_t)v48);
  v28 = v49;
  if (v49 == v48)
  {
    v29 = 4;
    v28 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_36;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_36:
  v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 160))(*(_QWORD *)(a1 + 24));
  v31 = operator new(0x20uLL);
  *v31 = off_102167F10;
  v31[1] = sub_100AAC518;
  v31[2] = 0;
  v31[3] = a1;
  v47 = v31;
  sub_100AB1744((_QWORD *)(v30 + 144), (uint64_t)v46);
  v32 = v47;
  if (v47 == v46)
  {
    v33 = 4;
    v32 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_41;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_41:
  v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24));
  v35 = operator new(0x20uLL);
  *v35 = off_102167FD0;
  v35[1] = sub_100138108;
  v35[2] = 0;
  v35[3] = a1;
  v45 = v35;
  sub_100AB1A24((_QWORD *)(v34 + 128), (uint64_t)v44);
  v36 = v45;
  if (v45 == v44)
  {
    v37 = 4;
    v36 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_46;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_46:
  v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 168))(*(_QWORD *)(a1 + 24));
  v39 = operator new(0x20uLL);
  *v39 = off_102168090;
  v39[1] = sub_100AAC6F8;
  v39[2] = 0;
  v39[3] = a1;
  v43 = v39;
  sub_100AB1CE8((_QWORD *)(v38 + 152), (uint64_t)v42);
  result = v43;
  if (v43 == v42)
  {
    v41 = 4;
    result = v42;
  }
  else
  {
    if (!v43)
      return result;
    v41 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v41))();
}

void sub_100AABCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  char *v33;
  char *v35;
  uint64_t v36;

  v35 = a13;
  if (a13 == v33)
  {
    v36 = 4;
    v35 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AABE10(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 904);
  if (v2)
  {
    *(_QWORD *)(a1 + 912) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 864);
  if (v3)
  {
    *(_QWORD *)(a1 + 872) = v3;
    operator delete(v3);
  }
  v5 = (void **)(a1 + 784);
  sub_100279AA4(&v5);
  return a1;
}

void sub_100AABE68(uint64_t *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  int v17;
  uint64_t *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint8_t buf[4];
  uint64_t *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102167990);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1;
    if (*((char *)a1 + 23) < 0)
      v5 = (uint64_t *)*a1;
    v6 = *a2;
    v8 = a2[4];
    v7 = a2[5];
    v9 = a2[7];
    *(_DWORD *)buf = 136316418;
    v30 = v5;
    v31 = 2048;
    v32 = v6;
    v33 = 2048;
    v34 = v7;
    v35 = 2048;
    v36 = v8;
    v37 = 2048;
    v38 = v9;
    v39 = 2048;
    v40 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Odometer,context,%s,startTime,%f,rawSpeed,%f,speed,%f,speedAccuracy,%f,startTime,%f", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102167990);
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    v10 = *a2;
    v12 = a2[4];
    v11 = a2[5];
    v13 = a2[7];
    v17 = 136316418;
    v18 = a1;
    v19 = 2048;
    v20 = v10;
    v21 = 2048;
    v22 = v11;
    v23 = 2048;
    v24 = v12;
    v25 = 2048;
    v26 = v13;
    v27 = 2048;
    v28 = v10;
    LODWORD(v16) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "Odometer,context,%s,startTime,%f,rawSpeed,%f,speed,%f,speedAccuracy,%f,startTime,%f", (const char *)&v17, v16);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorInputs::logGps(const CLOutdoorGps &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_100AAC0A0(uint64_t *a1, float *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  int v17;
  uint64_t *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  uint8_t buf[4];
  uint64_t *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102167990);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1;
    if (*((char *)a1 + 23) < 0)
      v5 = (uint64_t *)*a1;
    v6 = *(_QWORD *)a2;
    v7 = a2[2];
    v8 = a2[6];
    v9 = a2[7];
    *(_DWORD *)buf = 136316162;
    v28 = v5;
    v29 = 2048;
    v30 = v6;
    v31 = 2048;
    v32 = v7;
    v33 = 2048;
    v34 = v8;
    v35 = 2048;
    v36 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Turn,context,%s,startTime,%f,%f,%f,%f", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102167990);
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    v10 = *(_QWORD *)a2;
    v11 = a2[2];
    v12 = a2[6];
    v13 = a2[7];
    v17 = 136316162;
    v18 = a1;
    v19 = 2048;
    v20 = v10;
    v21 = 2048;
    v22 = v11;
    v23 = 2048;
    v24 = v12;
    v25 = 2048;
    v26 = v13;
    LODWORD(v16) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "Turn,context,%s,startTime,%f,%f,%f,%f", (const char *)&v17, v16);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorInputs::logTurn(const CLOutdoorTurn &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_100AAC2E0(uint64_t *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  int v13;
  uint64_t *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102167990);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1;
    if (*((char *)a1 + 23) < 0)
      v5 = (uint64_t *)*a1;
    v6 = *a2;
    v7 = 0x2E8BA2E8BA2E8BA3 * ((a2[2] - a2[1]) >> 3);
    *(_DWORD *)buf = 136315650;
    v20 = v5;
    v21 = 2048;
    v22 = v6;
    v23 = 2048;
    v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WifiScan,context,%s,startTime,%f,accessPointCount,%lu", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102167990);
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    v8 = *a2;
    v9 = 0x2E8BA2E8BA2E8BA3 * ((a2[2] - a2[1]) >> 3);
    v13 = 136315650;
    v14 = a1;
    v15 = 2048;
    v16 = v8;
    v17 = 2048;
    v18 = v9;
    LODWORD(v12) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "WifiScan,context,%s,startTime,%f,accessPointCount,%lu", (const char *)&v13, v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorInputs::logWifiScan(const CLOutdoorWifiScan &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
}

void sub_100AAC518(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102167990);
  v3 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    *(_DWORD *)buf = 134218496;
    v20 = v4;
    v21 = 2048;
    v22 = v5;
    v23 = 2048;
    v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GnssLeechLocation,startTime,%f,machTime,%f,lifespan,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102167990);
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    v13 = 134218496;
    v14 = v7;
    v15 = 2048;
    v16 = v8;
    v17 = 2048;
    v18 = v9;
    LODWORD(v12) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "GnssLeechLocation,startTime,%f,machTime,%f,lifespan,%f", COERCE_DOUBLE(&v13), v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorInputs::logGnssLeechLocation(const CLOutdoorGnssLeechLocation &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
}

void sub_100AAC6F8(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102167990);
  v3 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    v5 = a2[5];
    v6 = a2[6];
    v7 = *((_DWORD *)a2 + 2);
    v8 = *((_DWORD *)a2 + 3);
    *(_DWORD *)buf = 134219009;
    v27 = v4;
    v28 = 2048;
    v29 = v5;
    v30 = 2048;
    v31 = v6;
    v32 = 1025;
    v33 = v7;
    v34 = 1025;
    v35 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "MapsRouteHint,startTime,%f,iosTime,%f,machTime,%f,routingType,%{private}d,stepType,%{private}d", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102167990);
    v9 = *a2;
    v10 = a2[5];
    v11 = a2[6];
    v12 = *((_DWORD *)a2 + 2);
    v13 = *((_DWORD *)a2 + 3);
    v16 = 134219009;
    v17 = v9;
    v18 = 2048;
    v19 = v10;
    v20 = 2048;
    v21 = v11;
    v22 = 1025;
    v23 = v12;
    v24 = 1025;
    v25 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "MapsRouteHint,startTime,%f,iosTime,%f,machTime,%f,routingType,%{private}d,stepType,%{private}d", &v16, 44);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorInputs::logMapsRouteHint(const CLOutdoorMapsRouteHint &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_100AAC908(id a1)
{
  qword_1022A0198 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

unint64_t sub_100AAC934(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 25 * (a4 - a2)
       - 0x3333333333333333 * ((uint64_t)&a5[-*a4] >> 5)
       + 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 5);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x19));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[160 * (v7 % 0x19)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 25 * ((char **)a2 - v9)
        - 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 5)
        + 0x3333333333333333 * ((v10 - *v9) >> 5);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x19);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_100AACD9C(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100AACD9C(v24, v6);
      sub_100AACE58(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100AACCCC((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_100AACD9C(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x19));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[160 * (v14 % 0x19)];
      v24[0] = v12;
      sub_100AAD004(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_100AACD28(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x19));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 160 * (v19 % 0x19);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_100AACD9C(v24, v11);
  return v24[0].n128_u64[0];
}

_QWORD *sub_100AACBCC(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)(a2 + 8) <= *(double *)(a6 + 88))
    {
      a2 += 160;
      if (a2 - *result == 4000)
      {
        v6 = result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4)
        return result;
    }
  }
  if (a2 != a4)
  {
    v7 = a2;
    v8 = result;
    while (1)
    {
      v7 += 160;
      if (v7 - *v8 == 4000)
      {
        v9 = v8[1];
        ++v8;
        v7 = v9;
      }
      if (v7 == a4)
        break;
      if (*(double *)&a5 - *(double *)(v7 + 8) <= *(double *)(a6 + 88))
      {
        v10 = *(_OWORD *)(v7 + 16);
        *(_OWORD *)a2 = *(_OWORD *)v7;
        *(_OWORD *)(a2 + 16) = v10;
        v11 = *(_OWORD *)(v7 + 32);
        v12 = *(_OWORD *)(v7 + 48);
        v13 = *(_OWORD *)(v7 + 80);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)(v7 + 64);
        *(_OWORD *)(a2 + 80) = v13;
        *(_OWORD *)(a2 + 32) = v11;
        *(_OWORD *)(a2 + 48) = v12;
        v14 = *(_OWORD *)(v7 + 96);
        v15 = *(_OWORD *)(v7 + 112);
        v16 = *(_OWORD *)(v7 + 144);
        *(_OWORD *)(a2 + 128) = *(_OWORD *)(v7 + 128);
        *(_OWORD *)(a2 + 144) = v16;
        *(_OWORD *)(a2 + 96) = v14;
        *(_OWORD *)(a2 + 112) = v15;
        a2 += 160;
        if (a2 - *result == 4000)
        {
          v17 = result[1];
          ++result;
          a2 = v17;
        }
      }
    }
  }
  return result;
}

void sub_100AACCA0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100AACCCC(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x19)
    a2 = 1;
  if (v2 < 0x32)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 25;
  }
  return v4 ^ 1u;
}

uint64_t sub_100AACD28(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 25 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x19)
    a2 = 1;
  if (v5 < 0x32)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *sub_100AACD9C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x3333333333333333 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 5);
    if ((uint64_t)v3 < 1)
    {
      v5 = 24 - v3;
      v6 = &v2[-(v5 / 0x19)];
      *result = v6;
      v4 = *v6 + 160 * (25 * (v5 / 0x19) - v5) + 3840;
    }
    else
    {
      *result = &v2[v3 / 0x19];
      v4 = v2[v3 / 0x19] + 160 * (v3 % 0x19);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_100AACE58@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100AACF24(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4000;
    }
    v18 = *a1 + 4000;
    v19 = a2;
  }
  sub_100AACF24(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100AACF24@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 5);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 5)) < v12)
        v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 5);
      v11 -= 160 * v12;
      a4 -= 160 * v12;
      if (v12)
        result = memmove(a4, v11, 160 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4000);
    }
    if ((char *)(*v6 + 4000) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100AAD004(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4000); ; i = v12 + 4000)
    {
      sub_100AAD094(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100AAD094(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100AAD094@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4000) >> 5);
      v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 5)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 5);
      if (v12)
        result = memmove(__dst, v7, 160 * v12);
      v7 += 160 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 160 * v12;
    if ((char *)*(v6 - 1) + 4000 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

_QWORD *sub_100AAD17C(_QWORD *result, double *a2, uint64_t a3, double *a4, uint64_t a5, uint64_t a6)
{
  double *v6;
  double *v7;
  _QWORD *v8;
  double *v9;
  double *v10;

  if (a2 != a4)
  {
    while (*(double *)&a5 - *a2 <= *(double *)(a6 + 88))
    {
      a2 += 2;
      if ((double *)((char *)a2 - *result) == (double *)4096)
      {
        v6 = (double *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4)
        return result;
    }
  }
  if (a2 != a4)
  {
    v7 = a2;
    v8 = result;
    while (1)
    {
      v7 += 2;
      if ((double *)((char *)v7 - *v8) == (double *)4096)
      {
        v9 = (double *)v8[1];
        ++v8;
        v7 = v9;
      }
      if (v7 == a4)
        break;
      if (*(double *)&a5 - *v7 <= *(double *)(a6 + 88))
      {
        *(_OWORD *)a2 = *(_OWORD *)v7;
        a2 += 2;
        if ((double *)((char *)a2 - *result) == (double *)4096)
        {
          v10 = (double *)result[1];
          ++result;
          a2 = v10;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_100AAD22C(_QWORD *a1, double *__dst, uint64_t a3, double *a4, uint64_t a5, uint64_t a6)
{
  double *v8;
  double *v11;
  double *v12;
  _QWORD *v13;
  double *v14;
  double *v15;

  v8 = __dst;
  if (__dst != a4)
  {
    while (*(double *)&a5 - *v8 <= *(double *)(a6 + 88))
    {
      v8 += 40;
      if ((double *)((char *)v8 - *a1) == (double *)5120)
      {
        v11 = (double *)a1[1];
        ++a1;
        v8 = v11;
      }
      if (v8 == a4)
        return a1;
    }
  }
  if (v8 != a4)
  {
    v12 = v8;
    v13 = a1;
    while (1)
    {
      v12 += 40;
      if ((double *)((char *)v12 - *v13) == (double *)5120)
      {
        v14 = (double *)v13[1];
        ++v13;
        v12 = v14;
      }
      if (v12 == a4)
        break;
      if (*(double *)&a5 - *v12 <= *(double *)(a6 + 88))
      {
        memcpy(v8, v12, 0x140uLL);
        v8 += 40;
        if ((double *)((char *)v8 - *a1) == (double *)5120)
        {
          v15 = (double *)a1[1];
          ++a1;
          v8 = v15;
        }
      }
    }
  }
  return a1;
}

uint64_t **sub_100AAD33C(uint64_t **result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t *v8;

  if (a2)
  {
    v2 = *result;
    v3 = a2 - 0x3333333333333333 * (((uint64_t)result[1] - **result) >> 6);
    if (v3 < 1)
    {
      v7 = 15 - v3;
      v8 = &v2[-(v7 >> 4)];
      *result = v8;
      v5 = *v8;
      v6 = ~(_DWORD)v7 & 0xF;
    }
    else
    {
      v4 = (uint64_t *)((char *)v2 + (((unint64_t)v3 >> 1) & 0x7FFFFFFFFFFFFFF8));
      *result = v4;
      v5 = *v4;
      v6 = v3 & 0xF;
    }
    result[1] = (uint64_t *)(v5 + 320 * v6);
  }
  return result;
}

__n128 sub_100AAD3B0@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char **v12;
  _QWORD *i;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __n128 result;
  uint64_t v19;
  __n128 v20;

  if (a1 == a3)
  {
    v17 = a2;
    v16 = a4;
    i = a5;
    v14 = a6;
  }
  else
  {
    v12 = a3 - 1;
    sub_100AAD498(*a3, a4, a5, a6, &v19);
    v14 = (char *)v20.n128_u64[1];
    for (i = (_QWORD *)v20.n128_u64[0]; v12 != a1; i = (_QWORD *)v20.n128_u64[0])
    {
      v15 = *v12--;
      sub_100AAD498(v15, v15 + 5120, i, v14, &v19);
      v14 = (char *)v20.n128_u64[1];
    }
    v16 = *a1 + 5120;
    v17 = a2;
  }
  sub_100AAD498(v17, v16, i, v14, &v19);
  result = v20;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100AAD498@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 6);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 6)) < v12)
        v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 6);
      v11 -= 320 * v12;
      a4 -= 320 * v12;
      if (v12)
        result = memmove(a4, v11, 320 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 5120);
    }
    if ((char *)(*v6 + 5120) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100AAD580(_BYTE **a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _BYTE **v10;
  _BYTE *v11;
  double result;
  uint64_t v13;
  __int128 v14;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    sub_100AAD638(a2, v8, *a1 + 5120, v7, &v13);
    v8 = (char *)*((_QWORD *)&v14 + 1);
    v7 = (void **)v14;
    *(_QWORD *)a5 = v14;
    for (*(_QWORD *)(a5 + 8) = v8; v10 != a3; *(_QWORD *)(a5 + 8) = v8)
    {
      v11 = *v10++;
      sub_100AAD638(v11, v8, v11 + 5120, v7, &v13);
      v8 = (char *)*((_QWORD *)&v14 + 1);
      v7 = (void **)v14;
      *(_QWORD *)a5 = v14;
    }
    a2 = *a3;
  }
  sub_100AAD638(a2, v8, a4, v7, &v13);
  result = *(double *)&v14;
  *(_OWORD *)a5 = v14;
  return result;
}

void *sub_100AAD638@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 5120) >> 6);
      v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 6)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 6);
      if (v12)
        result = memmove(__dst, v7, 320 * v12);
      v7 += 320 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 320 * v12;
    if ((char *)*(v6 - 1) + 5120 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

unint64_t sub_100AAD730(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 21 * (a4 - a2)
       - 0x5555555555555555 * ((uint64_t)&a5[-*a4] >> 6)
       + 0x5555555555555555 * ((uint64_t)&a3[-*a2] >> 6);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x15));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[192 * (v7 % 0x15)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 21 * ((char **)a2 - v9)
        - 0x5555555555555555 * ((uint64_t)&a3[-*a2] >> 6)
        + 0x5555555555555555 * ((v10 - *v9) >> 6);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x15);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_100AADB74(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100AADB74(v24, v6);
      sub_100AADC30(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100AADAA4((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_100AADB74(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x15));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[192 * (v14 % 0x15)];
      v24[0] = v12;
      sub_100AADDDC(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_100AADB00(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x15));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 192 * (v19 % 0x15);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_100AADB74(v24, v11);
  return v24[0].n128_u64[0];
}

_QWORD *sub_100AAD9C8(_QWORD *result, double *a2, uint64_t a3, double *a4, uint64_t a5, uint64_t a6)
{
  double *v6;
  double *v7;
  _QWORD *v8;
  double *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double *v19;

  if (a2 != a4)
  {
    while (*(double *)&a5 - *a2 <= *(double *)(a6 + 88))
    {
      a2 += 24;
      if ((double *)((char *)a2 - *result) == (double *)4032)
      {
        v6 = (double *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4)
        return result;
    }
  }
  if (a2 != a4)
  {
    v7 = a2;
    v8 = result;
    while (1)
    {
      v7 += 24;
      if ((double *)((char *)v7 - *v8) == (double *)4032)
      {
        v9 = (double *)v8[1];
        ++v8;
        v7 = v9;
      }
      if (v7 == a4)
        break;
      if (*(double *)&a5 - *v7 <= *(double *)(a6 + 88))
      {
        v10 = *(_OWORD *)v7;
        v11 = *((_OWORD *)v7 + 1);
        v12 = *((_OWORD *)v7 + 3);
        *((_OWORD *)a2 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)a2 + 3) = v12;
        *(_OWORD *)a2 = v10;
        *((_OWORD *)a2 + 1) = v11;
        v13 = *((_OWORD *)v7 + 4);
        v14 = *((_OWORD *)v7 + 5);
        v15 = *((_OWORD *)v7 + 7);
        *((_OWORD *)a2 + 6) = *((_OWORD *)v7 + 6);
        *((_OWORD *)a2 + 7) = v15;
        *((_OWORD *)a2 + 4) = v13;
        *((_OWORD *)a2 + 5) = v14;
        v16 = *((_OWORD *)v7 + 8);
        v17 = *((_OWORD *)v7 + 9);
        v18 = *((_OWORD *)v7 + 11);
        *((_OWORD *)a2 + 10) = *((_OWORD *)v7 + 10);
        *((_OWORD *)a2 + 11) = v18;
        *((_OWORD *)a2 + 8) = v16;
        *((_OWORD *)a2 + 9) = v17;
        a2 += 24;
        if ((double *)((char *)a2 - *result) == (double *)4032)
        {
          v19 = (double *)result[1];
          ++result;
          a2 = v19;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100AADAA4(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x15)
    a2 = 1;
  if (v2 < 0x2A)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 21;
  }
  return v4 ^ 1u;
}

uint64_t sub_100AADB00(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 21 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x15)
    a2 = 1;
  if (v5 < 0x2A)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *sub_100AADB74(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 6);
    if ((uint64_t)v3 < 1)
    {
      v5 = 20 - v3;
      v6 = &v2[-(v5 / 0x15)];
      *result = v6;
      v4 = *v6 + 192 * (21 * (v5 / 0x15) - v5) + 3840;
    }
    else
    {
      *result = &v2[v3 / 0x15];
      v4 = v2[v3 / 0x15] + 192 * (v3 % 0x15);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_100AADC30@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100AADCFC(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4032;
    }
    v18 = *a1 + 4032;
    v19 = a2;
  }
  sub_100AADCFC(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100AADCFC@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-v10] >> 6);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 6)) < v12)
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 6);
      v11 -= 192 * v12;
      a4 -= 192 * v12;
      if (v12)
        result = memmove(a4, v11, 192 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4032);
    }
    if ((char *)(*v6 + 4032) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100AADDDC(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4032); ; i = v12 + 4032)
    {
      sub_100AADE6C(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100AADE6C(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100AADE6C@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - __dst + 4032) >> 6);
      v12 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 6)) >= v11 ? v11 : 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 6);
      if (v12)
        result = memmove(__dst, v7, 192 * v12);
      v7 += 192 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 192 * v12;
    if ((char *)*(v6 - 1) + 4032 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

unint64_t sub_100AADF54(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 56 * (a4 - a2) - 0x71C71C71C71C71C7 * ((a5 - *a4) >> 3) + 0x71C71C71C71C71C7 * ((a3 - *a2) >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (uint64_t *)(v8 + 8 * (v7 / 0x38));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = *v9 + 72 * (v7 % 0x38);
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 56 * (a2 - v9) - 0x71C71C71C71C71C7 * ((a3 - *a2) >> 3) + 0x71C71C71C71C71C7 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x38);
  v24[0].n128_u64[1] = v10;
  sub_1005E5C2C(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1005E5C2C(v24, v6);
      sub_100AAE2C8(v9, v10, (uint64_t *)v12.n128_u64[0], v12.n128_i64[1], (uint64_t *)v24[0].n128_u64[0], v24[0].n128_i64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100554D9C((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1005E5C2C(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (uint64_t *)(v15 + 8 * (v14 / 0x38));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = *v16 + 72 * (v14 % 0x38);
      v24[0] = v12;
      sub_100AAE470((uint64_t *)v13.n128_u64[0], v13.n128_i64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1005E5CE0(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x38));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 72 * (v19 % 0x38);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1005E5C2C(v24, v11);
  return v24[0].n128_u64[0];
}

_QWORD *sub_100AAE1FC(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)a2 <= *(double *)(a6 + 88))
    {
      a2 += 72;
      if (a2 - *result == 4032)
      {
        v6 = result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4)
        return result;
    }
  }
  if (a2 != a4)
  {
    v7 = a2;
    v8 = result;
    while (1)
    {
      v7 += 72;
      if (v7 - *v8 == 4032)
      {
        v9 = v8[1];
        ++v8;
        v7 = v9;
      }
      if (v7 == a4)
        break;
      if (*(double *)&a5 - *(double *)v7 <= *(double *)(a6 + 88))
      {
        *(_OWORD *)a2 = *(_OWORD *)v7;
        v10 = *(_OWORD *)(v7 + 16);
        v11 = *(_OWORD *)(v7 + 32);
        v12 = *(_OWORD *)(v7 + 48);
        *(_QWORD *)(a2 + 64) = *(_QWORD *)(v7 + 64);
        *(_OWORD *)(a2 + 32) = v11;
        *(_OWORD *)(a2 + 48) = v12;
        *(_OWORD *)(a2 + 16) = v10;
        a2 += 72;
        if (a2 - *result == 4032)
        {
          v13 = result[1];
          ++result;
          a2 = v13;
        }
      }
    }
  }
  return result;
}

__n128 sub_100AAE2C8@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100AAE394(v12, v14, v15, v16, &v21);
      v16 = v22.n128_i64[1];
      v15 = (uint64_t *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4032;
    }
    v18 = *a1 + 4032;
    v19 = a2;
  }
  sub_100AAE394(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

void sub_100AAE394(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    v5 = *a3;
    v6 = a4;
    v7 = a2;
    while (1)
    {
      v8 = 0x8E38E38E38E38E39 * ((v6 - v5) >> 3);
      if ((uint64_t)(0x8E38E38E38E38E39 * ((v7 - a1) >> 3)) < v8)
        v8 = 0x8E38E38E38E38E39 * ((v7 - a1) >> 3);
      if (v8)
      {
        v9 = -72 * v8;
        v10 = v7 - 72;
        do
        {
          a4 = v6 - 72;
          *(_OWORD *)(v6 - 72) = *(_OWORD *)v10;
          v11 = *(_OWORD *)(v10 + 16);
          v12 = *(_OWORD *)(v10 + 32);
          v13 = *(_OWORD *)(v10 + 48);
          *(_QWORD *)(v6 - 8) = *(_QWORD *)(v10 + 64);
          *(_OWORD *)(v6 - 24) = v13;
          *(_OWORD *)(v6 - 40) = v12;
          *(_OWORD *)(v6 - 56) = v11;
          v10 -= 72;
          v6 -= 72;
          v9 += 72;
        }
        while (v9);
      }
      else
      {
        a4 = v6;
      }
      v7 -= 72 * v8;
      if (v7 == a1)
        break;
      v14 = *--a3;
      v5 = v14;
      v6 = v14 + 4032;
    }
    if (*a3 + 4032 == a4)
    {
      v15 = a3[1];
      ++a3;
      a4 = v15;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

double sub_100AAE470(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t i;
  uint64_t v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(uint64_t **)a5;
  v8 = *(_QWORD *)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = *a1 + 4032; ; i = v12 + 4032)
    {
      sub_100AAE500(a2, i, v7, v8, &v14);
      v8 = *((_QWORD *)&v15 + 1);
      v7 = (uint64_t *)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100AAE500(a2, a4, v7, v8, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_100AAE500(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    v5 = *a3;
    while (1)
    {
      v6 = 0x8E38E38E38E38E39 * ((v5 - a4 + 4032) >> 3);
      v7 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 3);
      if (v7 >= v6)
        v7 = v6;
      if (v7)
      {
        v8 = a1 + 72 * v7;
        v9 = 72 * v7;
        do
        {
          *(_OWORD *)a4 = *(_OWORD *)a1;
          v10 = *(_OWORD *)(a1 + 16);
          v11 = *(_OWORD *)(a1 + 32);
          v12 = *(_OWORD *)(a1 + 48);
          *(_QWORD *)(a4 + 64) = *(_QWORD *)(a1 + 64);
          *(_OWORD *)(a4 + 32) = v11;
          *(_OWORD *)(a4 + 48) = v12;
          *(_OWORD *)(a4 + 16) = v10;
          a1 += 72;
          a4 += 72;
          v9 -= 72;
        }
        while (v9);
        a1 = v8;
      }
      if (a1 == a2)
        break;
      v13 = a3[1];
      ++a3;
      v5 = v13;
      a4 = v13;
    }
    if (*a3 + 4032 == a4)
    {
      v14 = a3[1];
      ++a3;
      a4 = v14;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

_QWORD *sub_100AAE5C4(_QWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v37;
  uint64_t *v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = ((a5 - *(_QWORD *)a4) >> 5) + 16 * (a4 - a2) - ((a3 - *(_QWORD *)a2) >> 5);
  v7 = a1[1];
  v8 = (char *)(v7 + 8 * (a1[4] >> 7));
  if (a1[2] == v7)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 32 * (a1[4] & 0x7FLL);
  v38 = (uint64_t *)(v7 + 8 * (a1[4] >> 7));
  v39 = v9;
  if (v9 == a3)
    v10 = 0;
  else
    v10 = ((a3 - *(_QWORD *)a2) >> 5) + 16 * (a2 - v8) - ((v9 - *(_QWORD *)v8) >> 5);
  v11 = sub_100AAE988((uint64_t)&v38, v10);
  v37.n128_u64[0] = (unint64_t)v11;
  v37.n128_u64[1] = v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      v19 = v11;
      v20 = v12;
      v21 = v38;
      v22 = v39;
      v23 = sub_100AAE988((uint64_t)&v37, v6);
      sub_100AAEA58(v21, v22, v19, v20, v23, v24, &v40);
      v25 = v41;
      v26 = v39;
      while (v26 != v25)
      {
        v40.n128_u64[0] = v26 + 8;
        sub_100279AA4((void ***)&v40);
        v26 = v39 + 32;
        v39 = v26;
        if (v26 - *v38 == 4096)
        {
          v26 = v38[1];
          ++v38;
          v39 = v26;
        }
      }
      v27 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v27;
      while ((sub_1003432C8((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      v13 = sub_100AAE988((uint64_t)&v37, v6);
      v15 = a1[4] + a1[5];
      v16 = a1[1];
      v17 = (uint64_t *)(v16 + 8 * (v15 >> 7));
      if (a1[2] == v16)
        v18 = 0;
      else
        v18 = *v17 + 32 * (v15 & 0x7F);
      v40 = v37;
      sub_100AAECA8(v13, v14, v17, v18, (uint64_t)&v40);
      v28 = v40.n128_u64[1];
      v29 = a1[1];
      if (a1[2] == v29)
      {
        v31 = 0;
      }
      else
      {
        v30 = a1[5] + a1[4];
        v31 = *(_QWORD *)(v29 + ((v30 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v30 & 0x7F);
      }
      if (v31 != v40.n128_u64[1])
      {
        v32 = (_QWORD *)v40.n128_u64[0];
        do
        {
          v40.n128_u64[0] = v28 + 8;
          sub_100279AA4((void ***)&v40);
          v28 += 32;
          if (v28 - *v32 == 4096)
          {
            v33 = v32[1];
            ++v32;
            v28 = v33;
          }
        }
        while (v28 != v31);
      }
      a1[5] -= v6;
      while ((sub_100AAE9EC(a1, 1) & 1) != 0)
        ;
    }
  }
  v34 = a1[1];
  if (a1[2] == v34)
    v35 = 0;
  else
    v35 = *(_QWORD *)(v34 + 8 * (a1[4] >> 7)) + 32 * (a1[4] & 0x7FLL);
  v40.n128_u64[0] = v34 + 8 * (a1[4] >> 7);
  v40.n128_u64[1] = v35;
  return sub_100AAE988((uint64_t)&v40, v10);
}

_QWORD *sub_100AAE874(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v8 = a2;
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)v8 <= *(double *)(a6 + 88))
    {
      v8 += 32;
      if (v8 - *a1 == 4096)
      {
        v11 = a1[1];
        ++a1;
        v8 = v11;
      }
      if (v8 == a4)
        return a1;
    }
  }
  if (v8 != a4)
  {
    v12 = v8;
    v13 = a1;
    while (1)
    {
      v12 += 32;
      if (v12 - *v13 == 4096)
      {
        v14 = v13[1];
        ++v13;
        v12 = v14;
      }
      if (v12 == a4)
        break;
      if (*(double *)&a5 - *(double *)v12 <= *(double *)(a6 + 88))
      {
        *(_QWORD *)v8 = *(_QWORD *)v12;
        sub_1000ADC24((uint64_t *)(v8 + 8));
        *(_OWORD *)(v8 + 8) = *(_OWORD *)(v12 + 8);
        *(_QWORD *)(v8 + 24) = *(_QWORD *)(v12 + 24);
        *(_QWORD *)(v12 + 8) = 0;
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)(v12 + 24) = 0;
        v8 += 32;
        if (v8 - *a1 == 4096)
        {
          v15 = a1[1];
          ++a1;
          v8 = v15;
        }
      }
    }
  }
  return a1;
}

_QWORD *sub_100AAE988(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 5);
    if (v4 < 1)
      result -= (unint64_t)(127 - v4) >> 7;
    else
      result += (unint64_t)v4 >> 7;
  }
  return result;
}

uint64_t sub_100AAE9EC(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 16 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x80)
    a2 = 1;
  if (v5 < 0x100)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_100AAEA58@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100AAEB24(v12, v14, v15, v16, &v21);
      v16 = v22.n128_i64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  sub_100AAEB24(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

uint64_t sub_100AAEB24@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v5 = a4;
  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = a4 - *a3;
    if ((a2 - a1) >> 5 >= v10 >> 5)
      v11 = v10 >> 5;
    else
      v11 = (a2 - a1) >> 5;
    v12 = a2 - 32 * v11;
    result = sub_100AAEC1C((uint64_t)&v20, v12, a2, a4);
    if (v12 != a1)
    {
      do
      {
        v15 = *--v6;
        v16 = v15 + 4096;
        v17 = (v12 - a1) >> 5;
        if (v17 >= 128)
          v17 = 128;
        v18 = v12 - 32 * v17;
        result = sub_100AAEC1C((uint64_t)&v20, v18, v12, v16);
        v12 = v18;
      }
      while (v18 != a1);
    }
    v5 = v14;
    if (*v6 + 4096 == v14)
    {
      v19 = v6[1];
      ++v6;
      v5 = v19;
    }
  }
  *a5 = v9;
  a5[1] = (uint64_t)v6;
  a5[2] = v5;
  return result;
}

uint64_t sub_100AAEC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      *(_QWORD *)(a4 + v7 - 32) = *(_QWORD *)(a3 + v7 - 32);
      sub_1000ADC24((uint64_t *)(a4 + v7 - 24));
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 + v7 - 8);
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      v7 -= 32;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

double sub_100AAECA8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v10;
  uint64_t i;
  uint64_t v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(_QWORD **)a5;
  v8 = *(_QWORD **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = *a1 + 4096; ; i = v12 + 4096)
    {
      sub_100AAED38(a2, i, v7, v8, &v14);
      v8 = (_QWORD *)*((_QWORD *)&v15 + 1);
      v7 = (_QWORD *)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100AAED38(a2, a4, v7, v8, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_100AAED38(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;

  v5 = a4;
  v6 = a3;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v9 = *a3 - (_QWORD)a4 + 4096;
    if ((a2 - a1) >> 5 >= v9 >> 5)
      v10 = v9 >> 5;
    else
      v10 = (a2 - a1) >> 5;
    v11 = sub_100AAEE20((uint64_t)&v18, a1, a1 + 32 * v10, a4);
    if (v11 != v8)
    {
      v13 = v11;
      do
      {
        v15 = (_QWORD *)v6[1];
        ++v6;
        v14 = v15;
        v16 = (v8 - v13) >> 5;
        if (v16 >= 128)
          v16 = 128;
        v13 = sub_100AAEE20((uint64_t)&v18, v13, v13 + 32 * v16, v14);
      }
      while (v13 != v8);
    }
    v5 = v12;
    if ((_QWORD *)(*v6 + 4096) == v12)
    {
      v17 = (_QWORD *)v6[1];
      ++v6;
      v5 = v17;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v6;
  a5[2] = (uint64_t)v5;
}

uint64_t sub_100AAEE20(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *a4 = *(_QWORD *)v5;
    sub_1000ADC24(a4 + 1);
    *(_OWORD *)(a4 + 1) = *(_OWORD *)(v5 + 8);
    a4[3] = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    a4 += 4;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

_QWORD *sub_100AAEE9C(_QWORD *a1, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  __int128 *v8;
  __int128 *v11;
  __int128 *v12;
  _QWORD *v13;
  __int128 *v14;
  __int128 v15;
  __int128 *v16;

  v8 = a2;
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)v8 <= *(double *)(a6 + 88))
    {
      v8 += 3;
      if ((__int128 *)((char *)v8 - *a1) == (__int128 *)4080)
      {
        v11 = (__int128 *)a1[1];
        ++a1;
        v8 = v11;
      }
      if (v8 == a4)
        return a1;
    }
  }
  if (v8 != a4)
  {
    v12 = v8;
    v13 = a1;
    while (1)
    {
      v12 += 3;
      if ((__int128 *)((char *)v12 - *v13) == (__int128 *)4080)
      {
        v14 = (__int128 *)v13[1];
        ++v13;
        v12 = v14;
      }
      if (v12 == a4)
        break;
      if (*(double *)&a5 - *(double *)v12 <= *(double *)(a6 + 88))
      {
        v15 = *v12;
        *((_QWORD *)v8 + 2) = *((_QWORD *)v12 + 2);
        *v8 = v15;
        sub_100006898((uint64_t)v8 + 24, (__n128 *)((char *)v12 + 24));
        v8 += 3;
        if ((__int128 *)((char *)v8 - *a1) == (__int128 *)4080)
        {
          v16 = (__int128 *)a1[1];
          ++a1;
          v8 = v16;
        }
      }
    }
  }
  return a1;
}

char *sub_100AAEFA8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x924924924924924)
      sub_100259694();
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x492492492492492)
      v12 = 0x924924924924924;
    else
      v12 = v11;
    result = sub_100AAF100(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *sub_100AAF100(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x924924924924925)
    sub_100259694();
  result = (char *)sub_100AAF154((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[28 * v4];
  return result;
}

void *sub_100AAF154(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925)
    sub_10025955C();
  return operator new(28 * a2);
}

uint64_t sub_100AAF19C(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 85 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x55)
    a2 = 1;
  if (v5 < 0xAA)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *sub_100AAF210(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      v5 = 84 - v3;
      v6 = &v2[-(v5 / 0x55)];
      *result = v6;
      v4 = *v6 + 48 * (85 * (v5 / 0x55) - v5) + 4032;
    }
    else
    {
      *result = &v2[v3 / 0x55];
      v4 = v2[v3 / 0x55] + 48 * (v3 % 0x55);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_100AAF2AC@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  char *v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100AAF378(v12, v14, v15, v16, &v21);
      v16 = v22.n128_i64[1];
      v15 = (char *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4080;
    }
    v18 = *a1 + 4080;
    v19 = a2;
  }
  sub_100AAF378(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

char *sub_100AAF378@<X0>(char *a1@<X1>, char *a2@<X2>, char *a3@<X3>, uint64_t a4@<X4>, char **a5@<X8>)
{
  char *v5;
  char *v8;
  uint64_t v9;
  char *i;
  int64_t v11;
  char *v12;
  char *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = a3;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v9 = *(_QWORD *)a3;
    for (i = a2; ; i = v12)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((a4 - v9) >> 4);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((i - a1) >> 4)) < v11)
        v11 = 0xAAAAAAAAAAAAAAABLL * ((i - a1) >> 4);
      v12 = &i[-48 * v11];
      result = sub_100AAF448(v12, i, a4);
      if (v12 == a1)
        break;
      v15 = *((_QWORD *)v5 - 1);
      v5 -= 8;
      v9 = v15;
      a4 = v15 + 4080;
    }
    a4 = v14;
    if (*(_QWORD *)v5 + 4080 == v14)
    {
      v16 = *((_QWORD *)v5 + 1);
      v5 += 8;
      a4 = v16;
    }
  }
  *a5 = v8;
  a5[1] = v5;
  a5[2] = (char *)a4;
  return result;
}

char *sub_100AAF448(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  __n128 *v6;
  char *v7;
  __int128 v8;

  if (a2 != a1)
  {
    v5 = a3 - 24;
    v6 = (__n128 *)(a2 - 24);
    do
    {
      v7 = &v6[-2].n128_i8[8];
      v8 = *(__int128 *)((char *)&v6[-2] + 8);
      *(_QWORD *)(v5 - 8) = v6[-1].n128_u64[1];
      *(_OWORD *)(v5 - 24) = v8;
      sub_100006898(v5, v6);
      v5 -= 48;
      v6 -= 3;
    }
    while (v7 != a1);
  }
  return a2;
}

double sub_100AAF4C4(__int128 **a1, __int128 *a2, __int128 **a3, __int128 *a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  __int128 **v10;
  __int128 *i;
  __int128 *v12;
  double result;
  __int128 *v14;
  __int128 v15;

  v7 = *(uint64_t **)a5;
  v8 = *(_QWORD *)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = *a1 + 255; ; i = v12 + 255)
    {
      sub_100AAF554(a2, i, v7, v8, &v14);
      v8 = *((_QWORD *)&v15 + 1);
      v7 = (uint64_t *)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100AAF554(a2, a4, v7, v8, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

__int128 *sub_100AAF554@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, __int128 **a5@<X8>)
{
  uint64_t *v5;
  __int128 *result;
  __int128 *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a3;
  result = a1;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v5 = a3 + 1;
    v9 = *a3;
    while (1)
    {
      v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - a4 + 4080) >> 4);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (v8 - result)) < v10)
        v10 = 0xAAAAAAAAAAAAAAABLL * (v8 - result);
      result = sub_100AAF61C(result, &result[3 * v10], a4);
      if (result == v8)
        break;
      v12 = *v5++;
      v9 = v12;
      a4 = v12;
    }
    a4 = v11;
    if (*(v5 - 1) + 4080 == v11)
      a4 = *v5;
    else
      --v5;
  }
  *a5 = v8;
  a5[1] = (__int128 *)v5;
  a5[2] = (__int128 *)a4;
  return result;
}

__int128 *sub_100AAF61C(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;
  __int128 *v5;
  __int128 v6;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = *v4;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)v4 + 2);
    *(_OWORD *)a3 = v6;
    sub_100006898(a3 + 24, (__n128 *)((char *)v4 + 24));
    a3 += 48;
    v4 += 3;
  }
  while (v4 != v5);
  return v5;
}

_QWORD *sub_100AAF68C(_QWORD *result, _OWORD *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  _OWORD *v6;
  _OWORD *v7;
  _QWORD *v8;
  _OWORD *v9;
  __int128 v10;
  _OWORD *v11;

  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)a2 <= *(double *)(a6 + 88))
    {
      a2 += 2;
      if ((_OWORD *)((char *)a2 - *result) == (_OWORD *)4096)
      {
        v6 = (_OWORD *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4)
        return result;
    }
  }
  if (a2 != a4)
  {
    v7 = a2;
    v8 = result;
    while (1)
    {
      v7 += 2;
      if ((_OWORD *)((char *)v7 - *v8) == (_OWORD *)4096)
      {
        v9 = (_OWORD *)v8[1];
        ++v8;
        v7 = v9;
      }
      if (v7 == a4)
        break;
      if (*(double *)&a5 - *(double *)v7 <= *(double *)(a6 + 88))
      {
        v10 = v7[1];
        *a2 = *v7;
        a2[1] = v10;
        a2 += 2;
        if ((_OWORD *)((char *)a2 - *result) == (_OWORD *)4096)
        {
          v11 = (_OWORD *)result[1];
          ++result;
          a2 = v11;
        }
      }
    }
  }
  return result;
}

__n128 sub_100AAF73C@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100AAF808(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  sub_100AAF808(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100AAF808@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  char *v16;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 5 >= v12 >> 5)
        v13 = v12 >> 5;
      else
        v13 = (v11 - a1) >> 5;
      v11 -= 32 * v13;
      a4 -= 32 * v13;
      if (v13)
        result = memmove(a4, v11, 32 * v13);
      if (v11 == a1)
        break;
      v15 = *--v6;
      v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100AAF8C0(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    sub_100AAF98C(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      sub_100AAF98C(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  sub_100AAF98C(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_100AAF98C@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 5 >= v11 >> 5 ? v11 >> 5 : (a3 - v9) >> 5;
      if (v12)
        __src = (char *)memmove(__dst, v9, 32 * v12);
      v9 += 32 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 32 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

unint64_t sub_100AAFA48(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  __n128 v34;
  uint64_t v35;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 73 * (a4 - a2) + 0x6DB6DB6DB6DB6DB7 * ((a5 - *a4) >> 3) - 0x6DB6DB6DB6DB6DB7 * ((a3 - *a2) >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (uint64_t *)(v8 + 8 * (v7 / 0x49));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = *v9 + 56 * (v7 % 0x49);
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 73 * (a2 - v9) + 0x6DB6DB6DB6DB6DB7 * ((a3 - *a2) >> 3) - 0x6DB6DB6DB6DB6DB7 * ((v10 - *v9) >> 3);
  v34.n128_u64[0] = v8 + 8 * (v7 / 0x49);
  v34.n128_u64[1] = v10;
  sub_10081FEC4(&v34, v11);
  if (v6 >= 1)
  {
    v12 = v34;
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10081FEC4(&v34, v6);
      sub_100AAFF90(v9, v10, (uint64_t *)v12.n128_u64[0], v12.n128_i64[1], v34.n128_u64[0], v34.n128_i64[1], &v34);
      v18 = v35;
      while (v10 != v18)
      {
        v19 = *(void **)(v10 + 16);
        if (v19)
        {
          *(_QWORD *)(v10 + 24) = v19;
          operator delete(v19);
        }
        v10 += 56;
        if (v10 - *v9 == 4088)
        {
          v20 = v9[1];
          ++v9;
          v10 = v20;
        }
      }
      v21 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v21;
      while ((sub_100AAFEC0((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_10081FEC4(&v34, v6);
      v13 = v34;
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (uint64_t *)(v15 + 8 * (v14 / 0x49));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = *v16 + 56 * (v14 % 0x49);
      v34 = v12;
      sub_100AB01BC((uint64_t *)v13.n128_u64[0], v13.n128_i64[1], v16, v17, (uint64_t)&v34);
      v22 = v34.n128_u64[1];
      v23 = a1[1];
      if (a1[2] == v23)
      {
        v25 = 0;
      }
      else
      {
        v24 = a1[5] + a1[4];
        v25 = *(_QWORD *)(v23 + 8 * (v24 / 0x49)) + 56 * (v24 % 0x49);
      }
      if (v25 != v34.n128_u64[1])
      {
        v26 = (_QWORD *)v34.n128_u64[0];
        do
        {
          v27 = *(void **)(v22 + 16);
          if (v27)
          {
            *(_QWORD *)(v22 + 24) = v27;
            operator delete(v27);
          }
          v22 += 56;
          if (v22 - *v26 == 4088)
          {
            v28 = v26[1];
            ++v26;
            v22 = v28;
          }
        }
        while (v22 != v25);
      }
      a1[5] -= v6;
      while ((sub_100AAFF1C(a1, 1) & 1) != 0)
        ;
    }
  }
  v29 = a1[4];
  v30 = a1[1];
  v31 = (_QWORD *)(v30 + 8 * (v29 / 0x49));
  if (a1[2] == v30)
    v32 = 0;
  else
    v32 = *v31 + 56 * (v29 % 0x49);
  v34.n128_u64[0] = (unint64_t)v31;
  v34.n128_u64[1] = v32;
  sub_10081FEC4(&v34, v11);
  return v34.n128_u64[0];
}

_QWORD *sub_100AAFDB0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v8 = a2;
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)v8 <= *(double *)(a6 + 88))
    {
      v8 += 56;
      if (v8 - *a1 == 4088)
      {
        v11 = a1[1];
        ++a1;
        v8 = v11;
      }
      if (v8 == a4)
        return a1;
    }
  }
  if (v8 != a4)
  {
    v12 = v8;
    v13 = a1;
    while (1)
    {
      v12 += 56;
      if (v12 - *v13 == 4088)
      {
        v14 = v13[1];
        ++v13;
        v12 = v14;
      }
      if (v12 == a4)
        break;
      if (*(double *)&a5 - *(double *)v12 <= *(double *)(a6 + 88))
      {
        *(_QWORD *)v8 = *(_QWORD *)v12;
        *(_QWORD *)(v8 + 8) = *(_QWORD *)(v12 + 8);
        sub_100006898(v8 + 16, (__n128 *)(v12 + 16));
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v12 + 40);
        v8 += 56;
        if (v8 - *a1 == 4088)
        {
          v15 = a1[1];
          ++a1;
          v8 = v15;
        }
      }
    }
  }
  return a1;
}

uint64_t sub_100AAFEC0(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x49)
    a2 = 1;
  if (v2 < 0x92)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 73;
  }
  return v4 ^ 1u;
}

uint64_t sub_100AAFF1C(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 73 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x49)
    a2 = 1;
  if (v5 < 0x92)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_100AAFF90@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100AB005C(v12, v14, v15, v16, &v21);
      v16 = v22.n128_i64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4088;
    }
    v18 = *a1 + 4088;
    v19 = a2;
  }
  sub_100AB005C(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

uint64_t sub_100AB005C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = a3;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v9 = *a3;
    for (i = a2; ; i = v12)
    {
      v11 = 0x6DB6DB6DB6DB6DB7 * ((a4 - v9) >> 3);
      if (0x6DB6DB6DB6DB6DB7 * ((i - a1) >> 3) < v11)
        v11 = 0x6DB6DB6DB6DB6DB7 * ((i - a1) >> 3);
      v12 = i - 56 * v11;
      result = sub_100AB0134(v12, i, a4);
      if (v12 == a1)
        break;
      v15 = *--v5;
      v9 = v15;
      a4 = v15 + 4088;
    }
    a4 = v14;
    if (*v5 + 4088 == v14)
    {
      v16 = v5[1];
      ++v5;
      a4 = v16;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_100AB0134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a2 != a1)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      *(_QWORD *)(v7 - 56) = *(_QWORD *)(a2 + v6 - 56);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + v6 - 48);
      sub_100006898(a3 + v6 - 40, (__n128 *)(a2 + v6 - 40));
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a2 + v6 - 16);
      v6 -= 56;
    }
    while (a2 + v6 != a1);
  }
  return a2;
}

double sub_100AB01BC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t i;
  uint64_t v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(uint64_t **)a5;
  v8 = *(_QWORD *)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = *a1 + 4088; ; i = v12 + 4088)
    {
      sub_100AB024C(a2, i, v7, v8, &v14);
      v8 = *((_QWORD *)&v15 + 1);
      v7 = (uint64_t *)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100AB024C(a2, a4, v7, v8, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

uint64_t sub_100AB024C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a3;
  result = a1;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v5 = a3 + 1;
    v9 = *a3;
    while (1)
    {
      v10 = 0x6DB6DB6DB6DB6DB7 * ((v9 - a4 + 4088) >> 3);
      if (0x6DB6DB6DB6DB6DB7 * ((v8 - result) >> 3) < v10)
        v10 = 0x6DB6DB6DB6DB6DB7 * ((v8 - result) >> 3);
      result = sub_100AB031C(result, result + 56 * v10, a4);
      if (result == v8)
        break;
      v12 = *v5++;
      v9 = v12;
      a4 = v12;
    }
    a4 = v11;
    if (*(v5 - 1) + 4088 == v11)
      a4 = *v5;
    else
      --v5;
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_100AB031C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *(_QWORD *)a3 = *(_QWORD *)v4;
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(v4 + 8);
    sub_100006898(a3 + 16, (__n128 *)(v4 + 16));
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(v4 + 40);
    a3 += 56;
    v4 += 56;
  }
  while (v4 != v5);
  return v5;
}

_QWORD *sub_100AB0394(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100AB042C(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100AB042C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100AB0594(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_100AB05A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1021679E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100AB05E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021679E0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100AB0610(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100AB064C()
{
}

_QWORD *sub_100AB0658(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100AB06F0(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100AB06F0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100AB0858(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_100AB0864(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102167AA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100AB08A8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102167AA0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100AB08D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100AB0910()
{
}

_QWORD *sub_100AB091C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100AB09B4(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100AB09B4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100AB0B1C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_100AB0B28(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102167B60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100AB0B6C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102167B60;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100AB0B98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100AB0BD4()
{
}

_QWORD *sub_100AB0BE0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100AB0C78(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100AB0C78(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100AB0DE0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_100AB0DEC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102167C20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100AB0E30(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102167C20;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100AB0E5C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100AB0E98()
{
}

_QWORD *sub_100AB0EA4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100AB0F3C(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100AB0F3C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100AB10A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_100AB10B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102167CE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100AB10F4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102167CE0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100AB1120(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_100AB113C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100AB1178()
{
}

_QWORD *sub_100AB1184(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100AB121C(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100AB121C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100AB1384(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_100AB1390(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102167D90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100AB13D4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102167D90;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100AB1400(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_100AB141C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100AB1458()
{
}

_QWORD *sub_100AB1464(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100AB14FC(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100AB14FC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100AB1664(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_100AB1670(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102167E50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100AB16B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102167E50;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100AB16E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_100AB16FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100AB1738()
{
}

_QWORD *sub_100AB1744(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100AB17DC(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100AB17DC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100AB1944(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_100AB1950(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102167F10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100AB1994(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102167F10;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100AB19C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_100AB19DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100AB1A18()
{
}

_QWORD *sub_100AB1A24(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100AB1ABC(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100AB1ABC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100AB1C24(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_100AB1C30(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102167FD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100AB1C74(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102167FD0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100AB1CA0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100AB1CDC()
{
}

_QWORD *sub_100AB1CE8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100AB1D80(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100AB1D80(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100AB1EE8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_100AB1EF4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102168090;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100AB1F38(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102168090;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100AB1F64(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_100AB1F80(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100AB1FBC()
{
}

id sub_100AB1FC8(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  __int128 v5;
  _OWORD v7[2];
  int v8;

  v4 = *a2;
  v5 = *(_OWORD *)(a3 + 16);
  v7[0] = *(_OWORD *)a3;
  v7[1] = v5;
  v8 = *(_DWORD *)(a3 + 32);
  return objc_msgSend(a4, "onMotionStateObserverNotification:data:", v4, v7);
}

id sub_100AB2030(int a1, unsigned int *a2, void *__src, void *a4)
{
  uint64_t v5;
  _BYTE __dst[320];

  v5 = *a2;
  memcpy(__dst, __src, sizeof(__dst));
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", v5, __dst);
}

id sub_100AB20AC(uint64_t a1, unsigned int *a2, __int128 *a3, void *a4)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v4 = *a2;
  v6 = *a3;
  v7 = *((_QWORD *)a3 + 2);
  return objc_msgSend(a4, "onDaemonStatusNotification:data:", v4, &v6);
}

uint64_t sub_100AB20E8(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;

  v6 = *a2;
  sub_100525028(v8);
  v9 = *(_QWORD *)(a3 + 16);
  objc_msgSend(a4, "onMobileAssetNotification:data:", v6, v8);
  return sub_10011A5A8(v8);
}

void sub_100AB2148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100AB2200(id a1)
{
  qword_1023069F8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLBarometerCalibrationSilo"));
}

void sub_100AB22B4(id a1)
{
  unsigned __int8 v1;

  byte_102306A08 = +[CLBarometerCalibration isNotificationSupported:](CLBarometerCalibration, "isNotificationSupported:", 0);
  if ((byte_102306A08 & 1) != 0)
    v1 = 1;
  else
    v1 = +[CLBarometerCalibration isNotificationSupported:](CLBarometerCalibration, "isNotificationSupported:", 1);
  byte_102306A08 = v1;
}

void sub_100AB3C30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 384; i != -48; i -= 48)
    sub_1006F0FB8((_QWORD *)(v1 + i));
  _Unwind_Resume(a1);
}

id sub_100AB3C5C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t i;
  _QWORD v6[58];

  v2 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_100AB8894;
  v6[3] = &unk_102168238;
  do
  {
    sub_100211128((uint64_t)&v6[v2 + 4], (_QWORD *)(a1 + v2 * 8));
    v2 += 6;
  }
  while (v2 != 54);
  v3 = objc_msgSend(v6, "copy");
  for (i = 52; i != -2; i -= 6)
    sub_1006F0FB8(&v6[i]);
  return v3;
}

void sub_100AB3D0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 416; i != -16; i -= 48)
    sub_1006F0FB8((_QWORD *)(v1 + i));
  _Unwind_Resume(a1);
}

void sub_100AB4928(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_100AB4F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100AB5628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100AB5A80(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_1021681F8);
  v2 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "destructing Altimeter context", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021681F8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "destructing Altimeter context", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLBarometerCalibration setupAltimeterReleaseTimer]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 32), "releaseAndClearManager:", *(_QWORD *)(a1 + 32) + 480);
}

void sub_100AB60BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

id sub_100AB6150(uint64_t a1)
{
  id v2;
  double v3;
  float v4;
  void **v5;
  double v6;
  double v7;
  float v8;
  void **v9;
  void *v11;
  void *v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19[2];
  char v20;
  _QWORD v21[5];
  _QWORD v22[5];

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v21[0] = CFSTR("deviceWet");
  v22[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 624));
  v21[1] = CFSTR("inVisit");
  v22[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 680));
  v21[2] = CFSTR("isCompanionConnected");
  v22[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 656));
  v21[3] = CFSTR("uncertainty_binned");
  v3 = *(double *)(a1 + 40);
  v17 = 0;
  v18 = 0;
  v16 = 0;
  sub_10027205C(&v16, (const void *)qword_1023069B0, qword_1023069B8, (qword_1023069B8 - qword_1023069B0) >> 2);
  v4 = v3;
  sub_10041CAFC((uint64_t)&v16, v19, v4);
  if (v20 >= 0)
    v5 = v19;
  else
    v5 = (void **)v19[0];
  v22[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v21[4] = CFSTR("timeElapsedSinceLastClientRegistered_binned");
  v6 = *(double *)(a1 + 48);
  v7 = *(double *)(*(_QWORD *)(a1 + 32) + 688);
  v12 = 0;
  v13 = 0;
  v11 = 0;
  sub_10027205C(&v11, (const void *)qword_1023069C8, qword_1023069D0, (qword_1023069D0 - qword_1023069C8) >> 2);
  v8 = v6 - v7;
  sub_10041CAFC((uint64_t)&v11, __p, v8 / 60.0);
  if (v15 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v22[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9);
  objc_msgSend(v2, "setDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 5));
  if (v15 < 0)
    operator delete(__p[0]);
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v20 < 0)
    operator delete(v19[0]);
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (objc_msgSend(*(id *)(a1 + 32), "isIHAAuthorized"))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "isInOutdoorWorkout")), CFSTR("inOutdoorWorkout"));
  return v2;
}

void sub_100AB63E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_100AB658C(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];

  v2 = objc_alloc((Class)RTStoredVisitFetchOptions);
  v3 = objc_msgSend(v2, "initWithAscending:confidence:dateInterval:limit:", 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", RTVisitConfidenceHigh), 0, 0);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 672);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100AB6644;
  v6[3] = &unk_10212BB80;
  v6[4] = v4;
  objc_msgSend(v5, "fetchStoredVisitsWithOptions:withReply:", v3, v6);

}

id sub_100AB6644(uint64_t a1, void *a2, uint64_t a3)
{
  double Current;
  NSObject *v7;
  double v8;
  id v9;
  BOOL v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  const char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  char *v48;
  double v49;
  uint64_t buf;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  char v61;
  _DWORD v62[2];
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;

  Current = CFAbsoluteTimeGetCurrent();
  if (a3)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021681F8);
    v7 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "error fetching visits", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021681F8);
      LOWORD(v62[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "error fetching visits", v62, 2);
      v37 = (char *)v36;
      sub_100512490("Generic", 1, 0, 0, "-[CLBarometerCalibration fetchVisitStatusAtStart]_block_invoke", "%s\n", v36);
      if (v37 != (char *)&buf)
        free(v37);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 680) = 0;
    v8 = 0.0;
  }
  else
  {
    v9 = objc_msgSend(a2, "lastObject");
    v10 = objc_msgSend(v9, "type") == (id)1 || objc_msgSend(v9, "type") == (id)2;
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 680) = v10;
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021681F8);
    v11 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 680);
      objc_msgSend(objc_msgSend(v9, "location"), "latitude");
      v14 = v13;
      objc_msgSend(objc_msgSend(v9, "location"), "longitude");
      v16 = v15;
      objc_msgSend(objc_msgSend(v9, "entry"), "timeIntervalSinceReferenceDate");
      v18 = v17;
      objc_msgSend(objc_msgSend(v9, "exit"), "timeIntervalSinceReferenceDate");
      LODWORD(buf) = 67110144;
      HIDWORD(buf) = v12;
      v51 = 2048;
      v52 = v14;
      v53 = 2048;
      v54 = v16;
      v55 = 2048;
      v56 = v18;
      v57 = 2048;
      v58 = v19;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "retrieved visits,inVisit,%d,lat,%f,lon,%f,arrivalTime,%f,departureTime,%f", (uint8_t *)&buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021681F8);
      v38 = qword_10229FE88;
      v39 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 680);
      objc_msgSend(objc_msgSend(v9, "location"), "latitude");
      v41 = v40;
      objc_msgSend(objc_msgSend(v9, "location"), "longitude");
      v43 = v42;
      objc_msgSend(objc_msgSend(v9, "entry"), "timeIntervalSinceReferenceDate");
      v45 = v44;
      objc_msgSend(objc_msgSend(v9, "exit"), "timeIntervalSinceReferenceDate");
      v62[0] = 67110144;
      v62[1] = v39;
      v63 = 2048;
      v64 = v41;
      v65 = 2048;
      v66 = v43;
      v67 = 2048;
      v68 = v45;
      v69 = 2048;
      v70 = v46;
      LODWORD(v49) = 48;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v38, 0, "retrieved visits,inVisit,%d,lat,%f,lon,%f,arrivalTime,%f,departureTime,%f", v62, v49);
      v48 = (char *)v47;
      sub_100512490("Generic", 1, 0, 2, "-[CLBarometerCalibration fetchVisitStatusAtStart]_block_invoke", "%s\n", v47);
      if (v48 != (char *)&buf)
        free(v48);
    }
    objc_msgSend(objc_msgSend(v9, "entry"), "timeIntervalSinceReferenceDate");
    v8 = v20;
    objc_msgSend(objc_msgSend(v9, "exit"), "timeIntervalSinceReferenceDate");
    v22 = v21;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 681))
    {
      sub_1015EB864(&buf);
      sub_1016058C0((uint64_t)&buf);
      v61 |= 1u;
      v59 = Current;
      v23 = v60;
      objc_msgSend(objc_msgSend(v9, "location"), "longitude");
      *(_WORD *)(v23 + 92) |= 0x40u;
      *(_QWORD *)(v23 + 56) = v24;
      v25 = v60;
      objc_msgSend(objc_msgSend(v9, "location"), "latitude");
      *(_WORD *)(v25 + 92) |= 0x20u;
      *(_QWORD *)(v25 + 48) = v26;
      v27 = v60;
      objc_msgSend(objc_msgSend(v9, "exit"), "timeIntervalSinceReferenceDate");
      *(_WORD *)(v27 + 92) |= 4u;
      *(_QWORD *)(v27 + 24) = v28;
      v29 = v60;
      objc_msgSend(objc_msgSend(v9, "entry"), "timeIntervalSinceReferenceDate");
      *(_WORD *)(v29 + 92) |= 1u;
      *(_QWORD *)(v29 + 8) = v30;
      v31 = v60;
      *(_WORD *)(v60 + 92) |= 0x10u;
      *(_QWORD *)(v31 + 40) = 0xBFF0000000000000;
      v32 = v60;
      *(_WORD *)(v60 + 92) |= 0x200u;
      *(_DWORD *)(v32 + 80) = 2;
      v33 = v60;
      v34 = objc_msgSend(v9, "type");
      *(_WORD *)(v33 + 92) |= 0x400u;
      *(_DWORD *)(v33 + 84) = v34;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_102168218);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)&buf);
      sub_1015EE304((PB::Base *)&buf);
    }
    Current = v22;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 576), "updateVisitState:arrivalTime:departureTime:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 680), v8, Current);
  return objc_msgSend(*(id *)(a1 + 32), "sendInVisit:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 680));
}

void sub_100AB6C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

id sub_100AB6E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100AB6ED0;
  v10[3] = &unk_1021681D8;
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v10[4] = a3;
  v10[5] = v7;
  v10[8] = *(_QWORD *)(a1 + 48);
  v10[6] = a2;
  v10[7] = v8;
  return objc_msgSend(v6, "async:", v10);
}

void sub_100AB6ED0(uint64_t a1)
{
  NSObject *v2;
  double v3;
  uint64_t v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  double Current;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  double *v21;
  NSObject *v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  double v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  double *v52;
  uint64_t v53;
  NSObject *v54;
  double *v55;
  double v56;
  double v57;
  uint64_t v58;
  double *v59;
  double v60;
  double v61;
  uint64_t v62;
  const char *v63;
  uint8_t *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  NSObject *v78;
  CFAbsoluteTime v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  NSObject *v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint8_t *v103;
  const char *v104;
  uint8_t *v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  uint64_t v114;
  const char *v115;
  uint8_t *v116;
  double v117;
  __int128 v118;
  void **v119;
  uint64_t v120;
  NSDictionary *(*v121)(uint64_t);
  void *v122;
  __int128 v123;
  double v124;
  void *v125;
  _QWORD *v126;
  unint64_t v127;
  void *v128;
  _QWORD *v129;
  unint64_t v130;
  void *__p;
  _BYTE *v132;
  char *v133;
  int v134;
  double v135;
  __int16 v136;
  double v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  double v143;
  __int16 v144;
  uint64_t v145;
  uint8_t buf[4];
  double v147;
  __int16 v148;
  double v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  uint64_t v153;
  __int16 v154;
  double v155;
  __int16 v156;
  uint64_t v157;
  CFAbsoluteTime v158;
  uint64_t v159;
  char v160;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021681F8);
    v2 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      v3 = COERCE_DOUBLE(objc_msgSend(*(id *)(a1 + 40), "UUIDString"));
      *(_DWORD *)buf = 138412290;
      v147 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received error when fetching LOI from visit, LOI id %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021681F8);
      v4 = qword_10229FE88;
      v5 = COERCE_DOUBLE(objc_msgSend(*(id *)(a1 + 40), "UUIDString"));
      v134 = 138412290;
      v135 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 0, "Received error when fetching LOI from visit, LOI id %@", &v134, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    Current = CFAbsoluteTimeGetCurrent();
    __p = 0;
    v132 = 0;
    v133 = 0;
    objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
    if (v9 > 0.0)
    {
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "altitude");
      v11 = v10;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
      v13 = v12;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
      v15 = v13 * v14;
      v16 = (v132 - (_BYTE *)__p) >> 4;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
        sub_100259694();
      v18 = v133 - (_BYTE *)__p;
      if ((v133 - (_BYTE *)__p) >> 3 > v17)
        v17 = v18 >> 3;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
        v20 = (char *)sub_10028E224((uint64_t)&v133, v19);
      else
        v20 = 0;
      v21 = (double *)&v20[16 * v16];
      *(_QWORD *)v21 = v11;
      v21[1] = v15;
      __p = v21;
      v133 = &v20[16 * v19];
      v132 = v21 + 2;
    }
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021681F8);
    v22 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      v23 = COERCE_DOUBLE(objc_msgSend(*(id *)(a1 + 40), "UUIDString"));
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "altitude");
      v25 = v24;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
      v26 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 138413314;
      v147 = v23;
      v148 = 2048;
      v149 = v25;
      v150 = 2048;
      v151 = v27;
      v152 = 2048;
      v153 = v26;
      v154 = 2048;
      v155 = Current;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "LOI id,%@,elevation,%f,uncertainty,%f,visitEntryTime,%f,currentTimestamp,%f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021681F8);
      v96 = qword_10229FE88;
      v97 = COERCE_DOUBLE(objc_msgSend(*(id *)(a1 + 40), "UUIDString"));
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "altitude");
      v99 = v98;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
      v100 = *(_QWORD *)(a1 + 64);
      v134 = 138413314;
      v135 = v97;
      v136 = 2048;
      v137 = v99;
      v138 = 2048;
      v139 = v101;
      v140 = 2048;
      v141 = v100;
      v142 = 2048;
      v143 = Current;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v96, 0, "LOI id,%@,elevation,%f,uncertainty,%f,visitEntryTime,%f,currentTimestamp,%f", &v134, 52);
      v103 = (uint8_t *)v102;
      sub_100512490("Generic", 1, 0, 2, "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke", "%s\n", v102);
      if (v103 != buf)
        free(v103);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 576), "updateLoiInfo:", &__p);
    v29 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(v29 + 682))
    {
      v128 = 0;
      v129 = 0;
      v130 = 0;
      v125 = 0;
      v126 = 0;
      v127 = 0;
      if (v132 == __p)
      {
        v65 = sub_10025E6A0((uint64_t)&v130, 1uLL);
        *v65 = 0;
        v128 = v65;
        v130 = (unint64_t)&v65[v66];
        v129 = v65 + 1;
        v67 = v126;
        if ((unint64_t)v126 >= v127)
        {
          v69 = v125;
          v70 = ((char *)v126 - (_BYTE *)v125) >> 3;
          v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 61)
            sub_100259694();
          v72 = v127 - (_QWORD)v125;
          if ((uint64_t)(v127 - (_QWORD)v125) >> 2 > v71)
            v71 = v72 >> 2;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
            v73 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v73 = v71;
          if (v73)
          {
            v74 = (char *)sub_10025E6A0((uint64_t)&v127, v73);
            v69 = v125;
            v67 = v126;
          }
          else
          {
            v74 = 0;
          }
          v75 = &v74[8 * v70];
          v76 = &v74[8 * v73];
          *(_QWORD *)v75 = 0xBFF0000000000000;
          v68 = v75 + 8;
          while (v67 != v69)
          {
            v77 = *--v67;
            *((_QWORD *)v75 - 1) = v77;
            v75 -= 8;
          }
          v125 = v75;
          v126 = v68;
          v127 = (unint64_t)v76;
          if (v69)
            operator delete(v69);
        }
        else
        {
          *v126 = 0xBFF0000000000000;
          v68 = v67 + 1;
        }
        v126 = v68;
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_1021681F8);
        v78 = qword_10229FE88;
        if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "received zero loi visit so write negative uncertainty to msl.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE80 != -1)
            dispatch_once(&qword_10229FE80, &stru_1021681F8);
          LOWORD(v134) = 0;
          LODWORD(v117) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "received zero loi visit so write negative uncertainty to msl.", &v134, *(_QWORD *)&v117);
          v105 = (uint8_t *)v104;
          sub_100512490("Generic", 1, 0, 2, "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke", "%s\n", v104);
          if (v105 != buf)
            free(v105);
        }
      }
      else
      {
        v30 = 0;
        if ((unint64_t)((v132 - (_BYTE *)__p) >> 4) <= 1)
          v31 = 1;
        else
          v31 = (v132 - (_BYTE *)__p) >> 4;
        *(_QWORD *)&v28 = 134218496;
        v118 = v28;
        do
        {
          v32 = (char *)__p + 16 * v30;
          v33 = v129;
          if ((unint64_t)v129 >= v130)
          {
            v35 = v128;
            v36 = ((char *)v129 - (_BYTE *)v128) >> 3;
            v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 61)
              sub_100259694();
            v38 = v130 - (_QWORD)v128;
            if ((uint64_t)(v130 - (_QWORD)v128) >> 2 > v37)
              v37 = v38 >> 2;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
              v39 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v39 = v37;
            if (v39)
            {
              v40 = (char *)sub_10025E6A0((uint64_t)&v130, v39);
              v35 = v128;
              v33 = v129;
            }
            else
            {
              v40 = 0;
            }
            v41 = &v40[8 * v36];
            *(_QWORD *)v41 = *v32;
            v34 = v41 + 8;
            while (v33 != v35)
            {
              v42 = *--v33;
              *((_QWORD *)v41 - 1) = v42;
              v41 -= 8;
            }
            v128 = v41;
            v129 = v34;
            v130 = (unint64_t)&v40[8 * v39];
            if (v35)
              operator delete(v35);
          }
          else
          {
            *v129 = *v32;
            v34 = v33 + 1;
          }
          v129 = v34;
          v43 = sqrt(*((double *)__p + 2 * v30 + 1));
          v44 = v126;
          if ((unint64_t)v126 >= v127)
          {
            v46 = v125;
            v47 = ((char *)v126 - (_BYTE *)v125) >> 3;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61)
              sub_100259694();
            v49 = v127 - (_QWORD)v125;
            if ((uint64_t)(v127 - (_QWORD)v125) >> 2 > v48)
              v48 = v49 >> 2;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              v51 = (char *)sub_10025E6A0((uint64_t)&v127, v50);
              v46 = v125;
              v44 = v126;
            }
            else
            {
              v51 = 0;
            }
            v52 = (double *)&v51[8 * v47];
            *v52 = v43;
            v45 = v52 + 1;
            while (v44 != v46)
            {
              v53 = *--v44;
              *((_QWORD *)v52-- - 1) = v53;
            }
            v125 = v52;
            v126 = v45;
            v127 = (unint64_t)&v51[8 * v50];
            if (v46)
              operator delete(v46);
          }
          else
          {
            *(double *)v126 = v43;
            v45 = v44 + 1;
          }
          v126 = v45;
          if (qword_10229FE80 != -1)
            dispatch_once(&qword_10229FE80, &stru_1021681F8);
          v54 = qword_10229FE88;
          if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
          {
            v55 = (double *)((char *)__p + 16 * v30);
            v56 = *v55;
            v57 = v55[1];
            v58 = *(_QWORD *)(a1 + 64);
            *(_DWORD *)buf = v118;
            v147 = v56;
            v148 = 2048;
            v149 = sqrt(v57);
            v150 = 2048;
            v151 = v58;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "writing loi visit to msl,altitude,%f,verticalUncertainty,%f,timestamp,%f", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE80 != -1)
              dispatch_once(&qword_10229FE80, &stru_1021681F8);
            v59 = (double *)((char *)__p + 16 * v30);
            v60 = *v59;
            v61 = v59[1];
            v62 = *(_QWORD *)(a1 + 64);
            v134 = v118;
            v135 = v60;
            v136 = 2048;
            v137 = sqrt(v61);
            v138 = 2048;
            v139 = v62;
            LODWORD(v117) = 32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "writing loi visit to msl,altitude,%f,verticalUncertainty,%f,timestamp,%f", COERCE_DOUBLE(&v134), v117, *(double *)&v118);
            v64 = (uint8_t *)v63;
            sub_100512490("Generic", 1, 0, 2, "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke", "%s\n", v63);
            if (v64 != buf)
              free(v64);
          }
          ++v30;
        }
        while (v30 != v31);
      }
      sub_1015EB864(buf);
      sub_101604858((uint64_t)buf);
      v79 = CFAbsoluteTimeGetCurrent();
      v160 |= 1u;
      v158 = v79;
      v80 = v159;
      if ((void **)(v159 + 8) != &v128)
      {
        sub_10034F2B0((char *)(v159 + 8), (char *)v128, (uint64_t)v129, ((char *)v129 - (_BYTE *)v128) >> 3);
        v80 = v159;
      }
      if ((void **)(v80 + 32) != &v125)
        sub_10034F2B0((char *)(v80 + 32), (char *)v125, (uint64_t)v126, ((char *)v126 - (_BYTE *)v125) >> 3);
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_102168218);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)buf);
      sub_1015EE304((PB::Base *)buf);
      if (v125)
      {
        v126 = v125;
        operator delete(v125);
      }
      if (v128)
      {
        v129 = v128;
        operator delete(v128);
      }
      v29 = *(_QWORD *)(a1 + 56);
    }
    objc_msgSend(*(id *)(v29 + 592), "timestamp");
    if (v81 != 1.79769313e308)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 592), "timestamp");
      if (vabdd_f64(v82, Current) < 10.0)
      {
        objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
        if (v83 > 0.0)
        {
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 592), "altitude");
          v85 = v84;
          objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "altitude");
          v119 = _NSConcreteStackBlock;
          v120 = 3221225472;
          v121 = sub_100AB7E24;
          v122 = &unk_1021681B0;
          v124 = v85 - v86;
          v123 = *(_OWORD *)(a1 + 48);
          AnalyticsSendEventLazy(CFSTR("com.apple.Motion.Altimeter.VisitEntry"), &v119);
          if (qword_10229FE80 != -1)
            dispatch_once(&qword_10229FE80, &stru_1021681F8);
          v87 = qword_10229FE88;
          if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
          {
            v88 = *(double *)(a1 + 64);
            objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "altitude");
            v90 = v89;
            objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
            v92 = v91;
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 592), "altitude");
            v94 = v93;
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 592), "accuracy");
            *(_DWORD *)buf = 134219264;
            v147 = v88;
            v148 = 2048;
            v149 = Current;
            v150 = 2048;
            v151 = v90;
            v152 = 2048;
            v153 = v92;
            v154 = 2048;
            v155 = v94;
            v156 = 2048;
            v157 = v95;
            _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "LOI visit entry,timestamp,%f,currentTimestamp,%f,loiAltitude,%f,loiVerticalUncertainty,%f,altimeter,%f,altimeterUncertainty,%f", buf, 0x3Eu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE80 != -1)
              dispatch_once(&qword_10229FE80, &stru_1021681F8);
            v106 = qword_10229FE88;
            v107 = *(double *)(a1 + 64);
            objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "altitude");
            v109 = v108;
            objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
            v111 = v110;
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 592), "altitude");
            v113 = v112;
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 592), "accuracy");
            v134 = 134219264;
            v135 = v107;
            v136 = 2048;
            v137 = Current;
            v138 = 2048;
            v139 = v109;
            v140 = 2048;
            v141 = v111;
            v142 = 2048;
            v143 = v113;
            v144 = 2048;
            v145 = v114;
            LODWORD(v117) = 62;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v106, 0, "LOI visit entry,timestamp,%f,currentTimestamp,%f,loiAltitude,%f,loiVerticalUncertainty,%f,altimeter,%f,altimeterUncertainty,%f", COERCE_DOUBLE(&v134), v117, *(double *)&v118, *((double *)&v118 + 1), *(double *)&v119, *(double *)&v120);
            v116 = (uint8_t *)v115;
            sub_100512490("Generic", 1, 0, 2, "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke", "%s\n", v115);
            if (v116 != buf)
              free(v116);
          }
        }
      }
    }
    if (__p)
    {
      v132 = __p;
      operator delete(__p);
    }
  }
}

void sub_100AB7D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100AB7E24(uint64_t a1)
{
  double v2;
  float v3;
  void **v4;
  double v5;
  double v6;
  float v7;
  void **v8;
  double v9;
  double v10;
  float v11;
  void **v12;
  NSDictionary *v13;
  void *v15;
  void *v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23[2];
  char v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28[2];
  char v29;
  _QWORD v30[3];
  _QWORD v31[3];

  v30[0] = CFSTR("loiAltitudeError_binned");
  v2 = *(double *)(a1 + 48);
  v26 = 0;
  v27 = 0;
  v25 = 0;
  sub_10027205C(&v25, (const void *)qword_1023069E0, qword_1023069E8, (qword_1023069E8 - qword_1023069E0) >> 2);
  v3 = v2;
  sub_10041CAFC((uint64_t)&v25, v28, v3);
  if (v29 >= 0)
    v4 = v28;
  else
    v4 = (void **)v28[0];
  v31[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4);
  v30[1] = CFSTR("loiAltitudeUncertainty_binned");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "location"), "verticalUncertainty");
  v6 = v5;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_10027205C(&v20, (const void *)qword_1023069B0, qword_1023069B8, (qword_1023069B8 - qword_1023069B0) >> 2);
  v7 = v6;
  sub_10041CAFC((uint64_t)&v20, v23, v7);
  if (v24 >= 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  v31[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8);
  v30[2] = CFSTR("altitudeUncertainty_binned");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 592), "accuracy");
  v10 = v9;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_10027205C(&v15, (const void *)qword_1023069B0, qword_1023069B8, (qword_1023069B8 - qword_1023069B0) >> 2);
  v11 = v10;
  sub_10041CAFC((uint64_t)&v15, __p, v11);
  if (v19 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v31[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12);
  v13 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v31, v30, 3);
  if (v19 < 0)
    operator delete(__p[0]);
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  if (v24 < 0)
    operator delete(v23[0]);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v29 < 0)
    operator delete(v28[0]);
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  return v13;
}

void sub_100AB8060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a19)
    operator delete(a19);
  if (a36 < 0)
    operator delete(a31);
  if (a28)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void sub_100AB83A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_100008848((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_100AB8588(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1015EE304((PB::Base *)va);
  sub_1004E5F2C((uint64_t)&STACK[0xE48]);
  _Unwind_Resume(a1);
}

__n128 sub_100AB85CC(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  __n128 result;

  sub_100AB8834(a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(char *)(v4 + 23) < 0)
    operator delete(*(void **)v4);
  result = *a2;
  *(_QWORD *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v4 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void sub_100AB8804(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t sub_100AB8834(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

uint64_t sub_100AB8894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = 0;
  v4 = a1 + 32;
  do
  {
    result = sub_100211128(a2 + v3, (_QWORD *)(v4 + v3));
    v3 += 48;
  }
  while (v3 != 432);
  return result;
}

void sub_100AB88D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      sub_1006F0FB8((_QWORD *)(v4 + v2));
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AB88FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = 0;
  v3 = a2 + 32;
  v4 = a1 + 32;
  do
  {
    result = sub_100211128(v4 + v2, (_QWORD *)(v3 + v2));
    v2 += 48;
  }
  while (v2 != 432);
  return result;
}

void sub_100AB8944(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 16;
    do
    {
      sub_1006F0FB8((_QWORD *)(v4 + v2));
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AB8968(uint64_t a1)
{
  uint64_t i;
  uint64_t result;

  for (i = 416; i != -16; i -= 48)
    result = sub_1006F0FB8((_QWORD *)(a1 + i));
  return result;
}

uint64_t sub_100AB899C()
{
  _OWORD *v0;
  _OWORD *v1;
  _OWORD *v2;

  sub_1015A2E04(qword_102306998, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102306998, (void *)&_mh_execute_header);
  qword_1023069B8 = 0;
  unk_1023069C0 = 0;
  qword_1023069B0 = 0;
  v0 = operator new(0x30uLL);
  qword_1023069B8 = (uint64_t)(v0 + 3);
  unk_1023069C0 = v0 + 3;
  *v0 = xmmword_101C07638;
  v0[1] = unk_101C07648;
  v0[2] = xmmword_101C07658;
  qword_1023069B0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_1023069B0, (void *)&_mh_execute_header);
  qword_1023069D0 = 0;
  unk_1023069D8 = 0;
  qword_1023069C8 = 0;
  v1 = operator new(0x20uLL);
  qword_1023069D0 = (uint64_t)(v1 + 2);
  unk_1023069D8 = v1 + 2;
  *v1 = xmmword_101C07668;
  v1[1] = unk_101C07678;
  qword_1023069C8 = (uint64_t)v1;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_1023069C8, (void *)&_mh_execute_header);
  qword_1023069E8 = 0;
  unk_1023069F0 = 0;
  qword_1023069E0 = 0;
  v2 = operator new(0x5CuLL);
  qword_1023069E8 = (uint64_t)v2 + 92;
  unk_1023069F0 = (char *)v2 + 92;
  v2[2] = xmmword_101C076A8;
  v2[3] = unk_101C076B8;
  v2[4] = xmmword_101C076C8;
  *(_OWORD *)((char *)v2 + 76) = *(__int128 *)((char *)&xmmword_101C076C8 + 12);
  *v2 = xmmword_101C07688;
  v2[1] = unk_101C07698;
  qword_1023069E0 = (uint64_t)v2;
  return __cxa_atexit((void (*)(void *))sub_10041C534, &qword_1023069E0, (void *)&_mh_execute_header);
}

uint64_t sub_100AB8AE0(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100AB8B10(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t v5;
  __int128 *v6;
  char *v7;
  __int128 v8;
  void *v9;
  uint64_t *v10;
  uint64_t *v11;

  if (a2)
    v4 = &qword_102306A48;
  else
    v4 = &qword_102306A18;
  v5 = *v4;
  *(_WORD *)(a1 + 8) = *((_WORD *)v4 + 4);
  *(_QWORD *)a1 = v5;
  v6 = &xmmword_102306A28;
  if (a2)
    v6 = &xmmword_102306A58;
  v7 = (char *)&qword_102306A68 + 7;
  if (!a2)
    v7 = (char *)&qword_102306A38 + 7;
  if (*v7 < 0)
  {
    v9 = (void *)v4[2];
    if (a2)
      v10 = &qword_102306A48;
    else
      v10 = &qword_102306A18;
    sub_100115CE4((_BYTE *)(a1 + 16), v9, v10[3]);
  }
  else
  {
    v8 = *v6;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)v6 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  if (a2)
    v11 = &qword_102306A48;
  else
    v11 = &qword_102306A18;
  *(_QWORD *)(a1 + 40) = v11[5];
  *(_QWORD *)(a1 + 48) = 0;
  sub_100AB8C08();
}

void sub_100AB8BD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100AB8C08()
{
  operator new();
}

void sub_100AB8F7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_100AB8FCC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
    return sub_1000CC4F4(v1);
  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102168268);
  v3 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Database is not accessible.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102168268);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 1, "Database is not accessible.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmDatabase::isDbAccessible() const", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

uint64_t sub_100AB9188(uint64_t a1, void *a2)
{
  void *v4;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (!sub_100AB8FCC(a1))
    return 0;
  if (!objc_msgSend(objc_msgSend(a2, "bundleId"), "length") || !objc_msgSend(objc_msgSend(a2, "name"), "length"))
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102168268);
    v6 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to update alarm because bundleId, executable or name is empty.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102168268);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to update alarm because bundleId, executable or name is empty.", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmDatabase::upsertAlarm(CMMotionAlarm *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return 0;
  }
  v4 = (void *)sub_100AB93E0(a1, objc_msgSend(a2, "bundleId"), objc_msgSend(a2, "name"));
  if (!v4)
    return sub_100AB99CC(a1, a2);
  objc_msgSend(a2, "setAlarmId:", objc_msgSend(v4, "alarmId"));
  return sub_100AB9670(a1, a2);
}

uint64_t sub_100AB93E0(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (sub_100AB8FCC(a1))
  {
    if (objc_msgSend(a2, "length") && objc_msgSend(a3, "length"))
      sub_1000CDA68(*(_QWORD *)(a1 + 48), "SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm WHERE 1 = 1 AND bundleId = ? AND name = ?");
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102168268);
    v6 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to get alarm because bundleId, executable or name is empty.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102168268);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to get alarm because bundleId, executable or name is empty.", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "CMMotionAlarm *CLMotionAlarmDatabase::getAlarm(NSString *, NSString *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  return 0;
}

void sub_100AB9648(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AB9670(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (sub_100AB8FCC(a1))
  {
    if (objc_msgSend(objc_msgSend(a2, "bundleId"), "length") && objc_msgSend(objc_msgSend(a2, "name"), "length"))
      sub_1000CDA68(*(_QWORD *)(a1 + 48), "UPDATE MotionAlarm SET state = ?, duration = ?, type = ?, repeats = ? WHERE 1 = 1 AND id = ? AND bundleId = ? AND name = ?");
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102168268);
    v4 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to update alarm because bundleId or name is empty.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102168268);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to update alarm because bundleId or name is empty.", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmDatabase::updateAlarm(CMMotionAlarm *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return 0;
}

void sub_100AB99A4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AB99CC(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (sub_100AB8FCC(a1))
  {
    if (objc_msgSend(objc_msgSend(a2, "bundleId"), "length") && objc_msgSend(objc_msgSend(a2, "name"), "length"))
      sub_1000CDA68(*(_QWORD *)(a1 + 48), "INSERT INTO MotionAlarm (state, duration, type, repeats, bundleId, name) VALUES (?, ?, ?, ?, ?, ?)");
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102168268);
    v4 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to insert alarm because bundleId or name is empty.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102168268);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to insert alarm because bundleId or name is empty.", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmDatabase::insertAlarm(CMMotionAlarm *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return 0;
}

void sub_100AB9CF0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AB9D18(uint64_t a1)
{
  if (sub_100AB8FCC(a1))
    sub_1000CDA68(*(_QWORD *)(a1 + 48), "SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm");
  return 0;
}

void sub_100AB9D94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

NSMutableArray *sub_100AB9DB4(uint64_t a1, sqlite3_stmt *a2)
{
  NSMutableArray *i;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  for (i = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 5);
        ;
        -[NSMutableArray addObject:](i, "addObject:", sub_100ABA1E8(v4, a2)))
  {
    v4 = sqlite3_step(a2);
    if ((_DWORD)v4 != 100)
      break;
  }
  if ((_DWORD)v4 != 16 && (_DWORD)v4 != 101)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102168268);
    v5 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to iterate through all rows for getAllAlarms!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102168268);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to iterate through all rows for getAllAlarms!", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "NSArray<CMMotionAlarm *> *CLMotionAlarmDatabase::alarmsFromStatement(sqlite3_stmt *) const", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return i;
}

uint64_t sub_100AB9F94(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (sub_100AB8FCC(a1))
  {
    if (objc_msgSend(a2, "length"))
      sub_1000CDA68(*(_QWORD *)(a1 + 48), "SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm WHERE bundleId = ?");
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102168268);
    v4 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to get alarms because bundleId or executable is empty.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102168268);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to get alarms because bundleId or executable is empty.", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "NSArray<CMMotionAlarm *> *CLMotionAlarmDatabase::getAlarms(NSString *) const", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return 0;
}

void sub_100ABA1C0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id sub_100ABA1E8(uint64_t a1, sqlite3_stmt *a2)
{
  id v3;
  NSString *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  sqlite3_int64 v8;
  NSString *v9;
  uint64_t v11;

  v3 = objc_alloc((Class)CMMotionAlarm);
  v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_column_text(a2, 6));
  v5 = sqlite3_column_int(a2, 3);
  v6 = sqlite3_column_int(a2, 2);
  v7 = sqlite3_column_int(a2, 4) != 0;
  v8 = sqlite3_column_int64(a2, 0);
  v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_column_text(a2, 5));
  LODWORD(v11) = sqlite3_column_int(a2, 1);
  return objc_msgSend(v3, "initWithName:type:duration:repeats:alarmId:bundleId:state:", v4, v5, v6, v7, v8, v9, v11);
}

uint64_t sub_100ABA2EC(uint64_t a1)
{
  if (sub_100AB8FCC(a1))
    sub_1000CDA68(*(_QWORD *)(a1 + 48), "SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm WHERE id = ?");
  return 0;
}

void sub_100ABA3A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ABA3C0(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (sub_100AB8FCC(a1))
  {
    if (objc_msgSend(a2, "length") && objc_msgSend(a3, "length"))
      sub_1000CDA68(*(_QWORD *)(a1 + 48), "DELETE FROM MotionAlarm WHERE 1 = 1 AND bundleId = ? AND name = ?");
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102168268);
    v6 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to delete alarm because bundleId, executable or name is empty.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102168268);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to delete alarm because bundleId, executable or name is empty.", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmDatabase::deleteAlarm(NSString *, NSString *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  return 0;
}

void sub_100ABA620(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100ABA648(id a1)
{
  qword_10229FDD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionAlarm");
}

uint64_t sub_100ABA674()
{
  void *__p[2];
  uint64_t v2;

  sub_1015A2E04(__p, "");
  qword_102306A18 = 0x100000003;
  word_102306A20 = 0;
  if (SHIBYTE(v2) < 0)
  {
    sub_100115CE4(&xmmword_102306A28, __p[0], (unint64_t)__p[1]);
    qword_102306A40 = 0;
    if (SHIBYTE(v2) < 0)
      operator delete(__p[0]);
  }
  else
  {
    xmmword_102306A28 = *(_OWORD *)__p;
    qword_102306A38 = v2;
    qword_102306A40 = 0;
  }
  __cxa_atexit((void (*)(void *))sub_100AB8AE0, &qword_102306A18, (void *)&_mh_execute_header);
  sub_1015A2E04(__p, "");
  word_102306A50 = 0;
  qword_102306A48 = 0;
  if (SHIBYTE(v2) < 0)
  {
    sub_100115CE4(&xmmword_102306A58, __p[0], (unint64_t)__p[1]);
    qword_102306A70 = 0;
    if (SHIBYTE(v2) < 0)
      operator delete(__p[0]);
  }
  else
  {
    xmmword_102306A58 = *(_OWORD *)__p;
    qword_102306A68 = v2;
    qword_102306A70 = 0;
  }
  return __cxa_atexit((void (*)(void *))sub_100AB8AE0, &qword_102306A48, (void *)&_mh_execute_header);
}

void sub_100ABA7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100ABA7CC(char a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a3 + 52) |= 1u;
  v4 = *(_QWORD *)(a3 + 32);
  if (!v4)
    operator new();
  *(_DWORD *)(v4 + 44) |= 1u;
  *(double *)(v4 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v5 = *(_QWORD *)(a3 + 40);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 492) |= 0x1000u;
  v6 = *(_QWORD *)(v5 + 360);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 24) |= 1u;
  *(_BYTE *)(v6 + 16) = a1;
  *(_DWORD *)(a3 + 52) |= 2u;
  *(_DWORD *)(v5 + 492) |= 0x1000u;
  v7 = *(_QWORD *)(v5 + 360);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 24) |= 2u;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    operator new();
  return sub_101383410(a2, v8);
}

void sub_100ABA984()
{
  operator delete();
}

void sub_100ABA9E0()
{
  JUMPOUT(0x100ABA9D4);
}

BOOL sub_100ABA9FC(_DWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL8 result;

  *(_DWORD *)(a3 + 52) |= 1u;
  v6 = *(_QWORD *)(a3 + 32);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v7 = *(_QWORD *)(a3 + 40);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 492) |= 0x2000u;
  v8 = *(_QWORD *)(v7 + 368);
  if (!v8)
    operator new();
  v9 = sub_10138376C(a1);
  if (!sub_100454A04(v9))
    sub_101910FB0();
  *(_DWORD *)(v8 + 32) |= 1u;
  *(_DWORD *)(v8 + 16) = v9;
  *(_DWORD *)(a3 + 52) |= 2u;
  v10 = *(_QWORD *)(a3 + 40);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 492) |= 0x2000u;
  v11 = *(_QWORD *)(v10 + 368);
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 32) |= 2u;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    operator new();
  sub_101383410(a2, v12);
  *(_DWORD *)(a3 + 52) |= 2u;
  v13 = *(_QWORD *)(a3 + 40);
  if (!v13)
    operator new();
  *(_DWORD *)(v13 + 492) |= 0x2000u;
  v14 = *(_QWORD *)(v13 + 368);
  if (!v14)
    operator new();
  v15 = sub_101383598((int *)(a2 + 248));
  if (!sub_100106094(v15))
    sub_101910F88();
  *(_DWORD *)(v14 + 32) |= 4u;
  *(_DWORD *)(v14 + 20) = v15;
  *(_DWORD *)(a3 + 52) |= 2u;
  v16 = *(_QWORD *)(a3 + 40);
  if (!v16)
    operator new();
  *(_DWORD *)(v16 + 492) |= 0x2000u;
  v17 = *(_QWORD *)(v16 + 368);
  if (!v17)
    operator new();
  v18 = sub_101383598((int *)(a2 + 408));
  result = sub_100106094(v18);
  if (!result)
    sub_101910F60();
  *(_DWORD *)(v17 + 32) |= 8u;
  *(_DWORD *)(v17 + 24) = v18;
  return result;
}

void sub_100ABAD00()
{
  operator delete();
}

void sub_100ABAD84()
{
  JUMPOUT(0x100ABAD78);
}

BOOL sub_100ABADA0(int *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  *(_DWORD *)(a3 + 52) |= 1u;
  v6 = *(_QWORD *)(a3 + 32);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v7 = *(_QWORD *)(a3 + 40);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 492) |= 0x800u;
  v8 = *(_QWORD *)(v7 + 352);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 184) |= 0x200u;
  v9 = *(_QWORD *)(v8 + 72);
  if (!v9)
    operator new();
  v10 = sub_10138156C(a1);
  result = sub_10002A324(v10);
  if (!result)
    sub_10191983C();
  *(_DWORD *)(v9 + 28) |= 2u;
  *(_DWORD *)(v9 + 12) = v10;
  *(_DWORD *)(a3 + 52) |= 2u;
  v12 = *(_QWORD *)(a3 + 40);
  if (!v12)
    operator new();
  *(_DWORD *)(v12 + 492) |= 0x800u;
  v13 = *(_QWORD *)(v12 + 352);
  if (!v13)
    operator new();
  *(_DWORD *)(v13 + 184) |= 0x200u;
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
    operator new();
  *(_DWORD *)(v14 + 28) |= 4u;
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
    operator new();
  v16 = *(_BYTE *)(a2 + 113);
  *(_DWORD *)(v15 + 16) |= 1u;
  *(_BYTE *)(v15 + 8) = v16;
  return result;
}

void sub_100ABAFEC()
{
  operator delete();
}

BOOL sub_100ABB08C(int *a1, char *a2, uint64_t a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  *(_DWORD *)(a3 + 52) |= 1u;
  v7 = *(_QWORD *)(a3 + 32);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 44) |= 1u;
  *(double *)(v7 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v8 = *(_QWORD *)(a3 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 492) |= 0x800u;
  v9 = *(_QWORD *)(v8 + 352);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 184) |= 0x400u;
  v10 = *(_QWORD *)(v9 + 80);
  if (!v10)
    operator new();
  v11 = sub_10138173C(a1);
  result = sub_1002BC6D0(v11);
  if (!result)
    sub_101919864();
  *(_DWORD *)(v10 + 28) |= 2u;
  *(_DWORD *)(v10 + 12) = v11;
  if (*a1 == 5)
  {
    *(_DWORD *)(a3 + 52) |= 2u;
    v13 = *(_QWORD *)(a3 + 40);
    if (!v13)
      operator new();
    *(_DWORD *)(v13 + 492) |= 0x800u;
    v14 = *(_QWORD *)(v13 + 352);
    if (!v14)
      operator new();
    *(_DWORD *)(v14 + 184) |= 0x400u;
    v15 = *(_QWORD *)(v14 + 80);
    if (!v15)
      operator new();
    *(_DWORD *)(v15 + 28) |= 4u;
    v16 = *(_QWORD *)(v15 + 16);
    if (!v16)
      operator new();
    v17 = *a2;
    *(_DWORD *)(v16 + 16) |= 1u;
    *(_BYTE *)(v16 + 8) = v17;
  }
  return result;
}

void sub_100ABB2E4()
{
  operator delete();
}

void sub_100ABB384(int *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(a3 + 52) |= 1u;
  v6 = *(_QWORD *)(a3 + 32);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v7 = *(_QWORD *)(a3 + 40);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 492) |= 0x800u;
  v8 = *(_QWORD *)(v7 + 352);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 184) |= 0x800u;
  v9 = *(_QWORD *)(v8 + 88);
  if (!v9)
    operator new();
  v10 = sub_101382E70(a1);
  if (!sub_100106094(v10))
    sub_10191988C();
  v11 = 0;
  v12 = *(_DWORD *)(v9 + 28);
  *(_DWORD *)(v9 + 28) = v12 | 2;
  *(_DWORD *)(v9 + 12) = v10;
  v13 = &xmmword_101C07710;
  while (dword_101C076F8[v11] != *a1)
  {
    if (++v11 == 6)
      goto LABEL_15;
  }
  v13 = (__int128 *)&dword_101C076F8[v11];
LABEL_15:
  if ((char *)v13 - (char *)dword_101C076F8 != 24)
  {
    *(_DWORD *)(v9 + 28) = v12 | 6;
    v14 = *(_QWORD *)(v9 + 16);
    if (!v14)
      operator new();
    *(_DWORD *)(v14 + 20) |= 1u;
    v15 = *(_QWORD *)(v14 + 8);
    if (!v15)
      operator new();
    sub_10137854C(a2, v15, 0);
  }
}

void sub_100ABB5B0()
{
  operator delete();
}

void sub_100ABB640(int *a1, char *a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)(a3 + 52) |= 1u;
  v4 = *(_QWORD *)(a3 + 32);
  if (!v4)
    operator new();
  *(_DWORD *)(v4 + 44) |= 1u;
  *(double *)(v4 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v5 = *(_QWORD *)(a3 + 40);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 492) |= 0x800u;
  v6 = *(_QWORD *)(v5 + 352);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 184) |= 0x20u;
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
    operator new();
  sub_101381AE4(a1, a2, v7);
}

void sub_100ABB774()
{
  operator delete();
}

BOOL sub_100ABB7DC(int *a1, int *a2, uint64_t a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL8 result;

  *(_DWORD *)(a3 + 52) |= 1u;
  v5 = *(_QWORD *)(a3 + 32);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 44) |= 1u;
  *(double *)(v5 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v6 = *(_QWORD *)(a3 + 40);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 492) |= 0x800u;
  v7 = *(_QWORD *)(v6 + 352);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 184) |= 0x2000u;
  v8 = *(_QWORD *)(v7 + 104);
  if (!v8)
    operator new();
  v9 = sub_101382AE8(a1);
  if (!sub_1002BC6D0(v9))
    sub_1019198B4();
  v10 = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v8 + 12) = v9;
  *(_DWORD *)(v8 + 28) = v10 | 6;
  v11 = *(_QWORD *)(v8 + 16);
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 20) |= 1u;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    operator new();
  v13 = sub_10136FBF8(a2);
  if (!sub_10044281C(v13))
    sub_1018FAC70();
  *(_DWORD *)(v12 + 20) |= 1u;
  *(_DWORD *)(v12 + 8) = v13;
  *(_DWORD *)(v11 + 20) |= 1u;
  v14 = *(_QWORD *)(v11 + 8);
  if (!v14)
    operator new();
  v15 = sub_101382CA8(a2 + 1);
  result = sub_10002A324(v15);
  if (!result)
    sub_1018FAC48();
  *(_DWORD *)(v14 + 20) |= 2u;
  *(_DWORD *)(v14 + 12) = v15;
  return result;
}

void sub_100ABBA20()
{
  operator delete();
}

uint64_t sub_100ABBAB4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  int v9;
  int v10;
  uint64_t result;

  *(_DWORD *)(a2 + 52) |= 1u;
  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
    operator new();
  *(_DWORD *)(v4 + 44) |= 1u;
  *(double *)(v4 + 8) = a3;
  *(_DWORD *)(a2 + 52) |= 2u;
  v5 = *(_QWORD *)(a2 + 40);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 492) |= 0x4000u;
  v6 = *(_QWORD *)(v5 + 376);
  if (!v6)
    operator new();
  v7 = sub_100AD3730(a1);
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = v7;
  v8 = sub_100C3C620(a1);
  *(_DWORD *)(v6 + 44) |= 2u;
  *(double *)(v6 + 16) = v8;
  v9 = sub_1002E6028(a1);
  *(_DWORD *)(v6 + 44) |= 8u;
  *(_DWORD *)(v6 + 28) = v9;
  v10 = sub_1002E6038(a1);
  *(_DWORD *)(v6 + 44) |= 0x10u;
  *(_DWORD *)(v6 + 32) = v10;
  result = sub_1002E6080(a1);
  *(_DWORD *)(v6 + 44) |= 0x20u;
  *(_DWORD *)(v6 + 36) = result;
  return result;
}

void sub_100ABBC18()
{
  operator delete();
}

BOOL sub_100ABBC6C(int *a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  NSObject *v7;
  _BOOL8 result;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  *(_DWORD *)(a2 + 52) |= 1u;
  v3 = *(_QWORD *)(a2 + 32);
  if (!v3)
    operator new();
  *(_DWORD *)(v3 + 44) |= 1u;
  *(double *)(v3 + 8) = a3;
  *(_DWORD *)(a2 + 52) |= 2u;
  v4 = *(_QWORD *)(a2 + 40);
  if (!v4)
    operator new();
  v5 = *a1;
  if (*a1)
  {
    if (v5 == 1)
    {
      v6 = 2;
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102168408);
      v7 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: Unhandled ControlCommand, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102168408);
        v11[0] = 67240192;
        v11[1] = v5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Unhandled ControlCommand, %{public}d", v11, 8);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::RegionMonitoring::RegionMonitoringControl (anonymous namespace)::ConvertFenceMonitorControlCommandToProtobuf(const CLFenceMonitor::ControlCommand)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      v6 = 0;
    }
  }
  else
  {
    v6 = 1;
  }
  result = sub_10008D1F0(v6);
  if (!result)
    sub_10190DAC0();
  *(_DWORD *)(v4 + 492) |= 0x8000u;
  *(_DWORD *)(v4 + 480) = v6;
  return result;
}

void sub_100ABBEEC()
{
  operator delete();
}

BOOL sub_100ABBF34(uint64_t a1, unsigned int *a2, uint64_t a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL8 result;

  *(_DWORD *)(a3 + 52) |= 1u;
  v6 = *(_QWORD *)(a3 + 32);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v7 = *(_QWORD *)(a3 + 40);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 492) |= 0x10000u;
  v8 = *(_QWORD *)(v7 + 384);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 24) |= 2u;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    operator new();
  sub_101383410(a1, v9);
  *(_DWORD *)(a3 + 52) |= 2u;
  v10 = *(_QWORD *)(a3 + 40);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 492) |= 0x10000u;
  v11 = *(_QWORD *)(v10 + 384);
  if (!v11)
    operator new();
  v12 = sub_101383250(a2);
  result = sub_100106094(v12);
  if (!result)
    sub_101910FD8();
  *(_DWORD *)(v11 + 24) |= 1u;
  *(_DWORD *)(v11 + 16) = v12;
  return result;
}

void sub_100ABC108()
{
  operator delete();
}

void sub_100ABC16C()
{
  JUMPOUT(0x100ABC160);
}

BOOL sub_100ABC188(int a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)(a3 + 52) |= 1u;
  v6 = *(_QWORD *)(a3 + 32);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v7 = *(_QWORD *)(a3 + 40);
  if (a1)
  {
    if (!v7)
      operator new();
    *(_DWORD *)(v7 + 492) |= 0x20000u;
    v8 = *(_QWORD *)(v7 + 392);
    if (!v8)
      operator new();
    v9 = 1;
    if (!sub_1002BC6D0(1u))
      sub_101911000();
  }
  else
  {
    if (!v7)
      operator new();
    *(_DWORD *)(v7 + 492) |= 0x20000u;
    v8 = *(_QWORD *)(v7 + 392);
    if (!v8)
      operator new();
    v9 = 0;
    if (!sub_1002BC6D0(0))
      sub_101911000();
  }
  *(_DWORD *)(v8 + 24) |= 1u;
  *(_DWORD *)(v8 + 16) = v9;
  *(_DWORD *)(a3 + 52) |= 2u;
  v10 = *(_QWORD *)(a3 + 40);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 492) |= 0x20000u;
  v11 = *(_QWORD *)(v10 + 392);
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 24) |= 2u;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    operator new();
  return sub_101383410(a2, v12);
}

void sub_100ABC3C4()
{
  operator delete();
}

void sub_100ABC428()
{
  JUMPOUT(0x100ABC41CLL);
}

BOOL sub_100ABC444(std::string *__str, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(a3 + 52) |= 1u;
  v7 = *(_QWORD *)(a3 + 32);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 44) |= 1u;
  *(double *)(v7 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v8 = *(_QWORD *)(a3 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 492) |= 0x40000u;
  v9 = *(_QWORD *)(v8 + 400);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 28) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 44) |= 1u;
  v11 = *(std::string **)(v10 + 8);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v11, __str);
  v12 = *(_DWORD *)(v10 + 44);
  *(_QWORD *)(v10 + 32) = *((_QWORD *)&__str[1].__r_.__value_.__l + 2);
  *(_DWORD *)(v10 + 44) = v12 | 0xE;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
  *(_DWORD *)(a3 + 52) |= 2u;
  v13 = *(_QWORD *)(a3 + 40);
  if (!v13)
    operator new();
  *(_DWORD *)(v13 + 492) |= 0x40000u;
  v14 = *(_QWORD *)(v13 + 400);
  if (!v14)
    operator new();
  *(_DWORD *)(v14 + 28) |= 2u;
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
    operator new();
  return sub_101383410(a2, v15);
}

void sub_100ABC68C()
{
  operator delete();
}

void sub_100ABC704()
{
  JUMPOUT(0x100ABC6F8);
}

void sub_100ABC720(void *a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(a2 + 52) |= 1u;
  v3 = *(_QWORD *)(a2 + 32);
  if (!v3)
    operator new();
  *(_DWORD *)(v3 + 44) |= 1u;
  *(double *)(v3 + 8) = a3;
  *(_DWORD *)(a2 + 52) |= 2u;
  v4 = *(_QWORD *)(a2 + 40);
  if (!v4)
    operator new();
  *(_DWORD *)(v4 + 492) |= 1u;
  v5 = *(_QWORD *)(v4 + 264);
  if (!v5)
    operator new();
  sub_10137BE1C(a1, v5);
}

void sub_100ABC814()
{
  operator delete();
}

std::string *sub_100ABC868(unsigned int a1, char a2, const std::string *a3, uint64_t a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  NSObject *v12;
  int v13;
  std::string *v14;
  std::string *result;
  const char *v16;
  uint8_t *v17;
  _DWORD v18[4];
  uint8_t buf[4];
  unsigned int v20;

  *(_DWORD *)(a4 + 52) |= 1u;
  v8 = *(_QWORD *)(a4 + 32);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 44) |= 1u;
  *(double *)(v8 + 8) = a5;
  *(_DWORD *)(a4 + 52) |= 2u;
  v9 = *(_QWORD *)(a4 + 40);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 492) |= 0x100000u;
  v10 = *(_QWORD *)(v9 + 416);
  if (!v10)
    operator new();
  if (a1 >= 5)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102168408);
    v12 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      v20 = a1;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Fence: Unhandled LocationRequestType, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102168408);
      v18[0] = 67240192;
      v18[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Unhandled LocationRequestType, %{public}d", v18, 8);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::RegionMonitoring::LocationRequestType (anonymous namespace)::ConvertLocationRequestTypeToProtobuf(CLFenceMonitor::LocationRequestType)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    v11 = 0;
  }
  else
  {
    v11 = a1 + 1;
  }
  if (!sub_1002BC6DC(v11))
    sub_101911050();
  v13 = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v10 + 8) = v11;
  *(_DWORD *)(v10 + 28) = v13 | 5;
  v14 = *(std::string **)(v10 + 16);
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  result = std::string::operator=(v14, a3);
  *(_DWORD *)(v10 + 28) |= 2u;
  *(_BYTE *)(v10 + 12) = a2;
  return result;
}

void sub_100ABCB74()
{
  operator delete();
}

uint64_t sub_100ABCBD0(void *a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;

  *(_DWORD *)(a2 + 52) |= 1u;
  v5 = *(_QWORD *)(a2 + 32);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 44) |= 1u;
  *(double *)(v5 + 8) = a3;
  *(_DWORD *)(a2 + 52) |= 2u;
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 492) |= 0x200000u;
  v7 = *(_QWORD *)(v6 + 424);
  if (!v7)
    operator new();
  if (!sub_10008D1F0(1u))
    sub_1019110A0();
  *(_DWORD *)(v7 + 28) |= 1u;
  *(_DWORD *)(v7 + 16) = 1;
  if (a1)
  {
    v27 = objc_msgSend(a1, "type");
    *(_DWORD *)(a2 + 52) |= 2u;
    v8 = *(_QWORD *)(a2 + 40);
    if (!v8)
      operator new();
    *(_DWORD *)(v8 + 492) |= 0x200000u;
    v9 = *(_QWORD *)(v8 + 424);
    if (!v9)
      operator new();
    *(_DWORD *)(v9 + 28) |= 2u;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      operator new();
    sub_10138377C((char *)&v27, v10);
    v12 = objc_opt_class(RTScenarioTriggerSettled, v11);
    if ((objc_opt_isKindOfClass(a1, v12) & 1) != 0)
    {
      *(_DWORD *)(a2 + 52) |= 2u;
      v14 = *(_QWORD *)(a2 + 40);
      if (!v14)
        operator new();
      *(_DWORD *)(v14 + 492) |= 0x200000u;
      v15 = *(_QWORD *)(v14 + 424);
      if (!v15)
        operator new();
      v16 = 2;
      result = sub_10008D1F0(2u);
      if ((result & 1) == 0)
        sub_1019198DC(result, v18, v19);
    }
    else
    {
      v23 = objc_opt_class(RTScenarioTriggerUnsettled, v13);
      result = objc_opt_isKindOfClass(a1, v23);
      if ((result & 1) == 0)
        return result;
      *(_DWORD *)(a2 + 52) |= 2u;
      v24 = *(_QWORD *)(a2 + 40);
      if (!v24)
        operator new();
      *(_DWORD *)(v24 + 492) |= 0x200000u;
      v15 = *(_QWORD *)(v24 + 424);
      if (!v15)
        operator new();
      v16 = 1;
      result = sub_10008D1F0(1u);
      if ((result & 1) == 0)
        sub_1019198DC(result, v25, v26);
    }
  }
  else
  {
    *(_DWORD *)(a2 + 52) |= 2u;
    v20 = *(_QWORD *)(a2 + 40);
    if (!v20)
      operator new();
    *(_DWORD *)(v20 + 492) |= 0x200000u;
    v15 = *(_QWORD *)(v20 + 424);
    if (!v15)
      operator new();
    result = sub_10008D1F0(0);
    v16 = 0;
    if ((result & 1) == 0)
      sub_1019198DC(result, v21, v22);
  }
  *(_DWORD *)(v15 + 28) |= 4u;
  *(_DWORD *)(v15 + 20) = v16;
  return result;
}

void sub_100ABCF80()
{
  operator delete();
}

void sub_100ABD010(uint64_t *a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  *(_DWORD *)(a3 + 52) |= 1u;
  v6 = *(_QWORD *)(a3 + 32);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v7 = *(_QWORD *)(a3 + 40);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 492) |= 0x400000u;
  if (!*(_QWORD *)(v7 + 432))
    operator new();
  v8 = *a1;
  v9 = a1[1];
  while (v8 != v9)
  {
    *(_DWORD *)(a3 + 52) |= 2u;
    v10 = *(_QWORD *)(a3 + 40);
    if (!v10)
      operator new();
    *(_DWORD *)(v10 + 492) |= 0x400000u;
    v11 = *(int **)(v10 + 432);
    if (!v11)
      operator new();
    v12 = v11[5];
    v13 = v11[4];
    if ((int)v13 >= v12)
    {
      if (v12 == v11[6])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v11 + 2), v12 + 1);
        v12 = v11[5];
      }
      v11[5] = v12 + 1;
      sub_1002318FC();
    }
    v14 = *((_QWORD *)v11 + 1);
    v11[4] = v13 + 1;
    sub_10002A05C(v8, *(_QWORD *)(v14 + 8 * v13));
    v8 += 88;
  }
  v15 = *a2;
  v16 = a2[1];
  while (v15 != v16)
  {
    *(_DWORD *)(a3 + 52) |= 2u;
    v17 = *(_QWORD *)(a3 + 40);
    if (!v17)
      operator new();
    *(_DWORD *)(v17 + 492) |= 0x400000u;
    v18 = *(int **)(v17 + 432);
    if (!v18)
      operator new();
    v19 = v18[11];
    v20 = v18[10];
    if ((int)v20 >= v19)
    {
      if (v19 == v18[12])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v18 + 8), v19 + 1);
        v19 = v18[11];
      }
      v18[11] = v19 + 1;
      sub_1002318FC();
    }
    v21 = *((_QWORD *)v18 + 4);
    v18[10] = v20 + 1;
    sub_10002A05C(v15, *(_QWORD *)(v21 + 8 * v20));
    v15 += 88;
  }
}

void sub_100ABD2E8()
{
  operator delete();
}

std::string *sub_100ABD36C(std::string *__str, uint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;

  *(_DWORD *)(a2 + 52) |= 1u;
  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
    operator new();
  *(_DWORD *)(v4 + 44) |= 1u;
  *(double *)(v4 + 8) = a3;
  *(_DWORD *)(a2 + 52) |= 2u;
  v5 = *(_QWORD *)(a2 + 40);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 492) |= 0x800000u;
  v6 = *(_QWORD *)(v5 + 440);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 24) |= 1u;
  *(_BYTE *)(v6 + 16) = 1;
  *(_DWORD *)(a2 + 52) |= 2u;
  *(_DWORD *)(v5 + 492) |= 0x800000u;
  v7 = *(_QWORD *)(v5 + 440);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 24) |= 2u;
  v8 = *(std::string **)(v7 + 8);
  if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  return std::string::operator=(v8, __str);
}

void sub_100ABD524()
{
  operator delete();
}

uint64_t sub_100ABD588(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(result + 52) |= 1u;
  v2 = *(_QWORD *)(result + 32);
  if (!v2)
    operator new();
  *(_DWORD *)(v2 + 44) |= 1u;
  *(double *)(v2 + 8) = a2;
  *(_DWORD *)(result + 52) |= 2u;
  v3 = *(_QWORD *)(result + 40);
  if (!v3)
    operator new();
  *(_DWORD *)(v3 + 492) |= 0x800000u;
  v4 = *(_QWORD *)(v3 + 440);
  if (!v4)
    operator new();
  *(_DWORD *)(v4 + 24) |= 1u;
  *(_BYTE *)(v4 + 16) = 0;
  return result;
}

void sub_100ABD678()
{
  operator delete();
}

std::string *sub_100ABD6D0(std::string *__str, uint64_t a2, double a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string *result;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  *(_DWORD *)(a2 + 52) |= 1u;
  v7 = *(_QWORD *)(a2 + 32);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 44) |= 1u;
  *(double *)(v7 + 8) = a3;
  *(_DWORD *)(a2 + 52) |= 2u;
  v8 = *(_QWORD *)(a2 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 492) |= 0x1000000u;
  v9 = *(_QWORD *)(v8 + 448);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 28) |= 1u;
  v10 = *(std::string **)(v9 + 8);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  result = std::string::operator=(v10, __str);
  *(_DWORD *)(a2 + 52) |= 2u;
  v12 = *(_QWORD *)(a2 + 40);
  if (!v12)
    operator new();
  *(_DWORD *)(v12 + 492) |= 0x1000000u;
  v13 = *(_QWORD *)(v12 + 448);
  if (!v13)
    operator new();
  v14 = a4;
  *(_DWORD *)(v13 + 28) |= 2u;
  *(float *)(v13 + 16) = v14;
  *(_DWORD *)(a2 + 52) |= 2u;
  *(_DWORD *)(v12 + 492) |= 0x1000000u;
  v15 = *(_QWORD *)(v12 + 448);
  if (!v15)
    operator new();
  *(_DWORD *)(v15 + 28) |= 4u;
  *(_BYTE *)(v15 + 20) = 0;
  return result;
}

void sub_100ABD910()
{
  operator delete();
}

void sub_100ABD968()
{
  JUMPOUT(0x100ABD95CLL);
}

uint64_t sub_100ABD984(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(result + 52) |= 1u;
  v2 = *(_QWORD *)(result + 32);
  if (!v2)
    operator new();
  *(_DWORD *)(v2 + 44) |= 1u;
  *(double *)(v2 + 8) = a2;
  *(_DWORD *)(result + 52) |= 2u;
  v3 = *(_QWORD *)(result + 40);
  if (!v3)
    operator new();
  *(_DWORD *)(v3 + 492) |= 0x1000000u;
  v4 = *(_QWORD *)(v3 + 448);
  if (!v4)
    operator new();
  *(_DWORD *)(v4 + 28) |= 4u;
  *(_BYTE *)(v4 + 20) = 1;
  return result;
}

void sub_100ABDA78()
{
  operator delete();
}

std::string *sub_100ABDAD0(void *a1, const std::string *a2, uint64_t a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  unsigned int v21;

  *(_DWORD *)(a3 + 52) |= 1u;
  v7 = *(_QWORD *)(a3 + 32);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 44) |= 1u;
  *(double *)(v7 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v8 = *(_QWORD *)(a3 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 492) |= 0x2000000u;
  v9 = *(_QWORD *)(v8 + 456);
  if (!v9)
    operator new();
  v21 = objc_msgSend(a1, "trigger");
  v10 = sub_1013837A0((int *)&v21);
  if (!sub_100452D9C(v10))
    sub_1019110C8();
  *(_DWORD *)(v9 + 40) |= 1u;
  *(_DWORD *)(v9 + 32) = v10;
  *(_DWORD *)(a3 + 52) |= 2u;
  v11 = *(_QWORD *)(a3 + 40);
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 492) |= 0x2000000u;
  v12 = *(_QWORD *)(v11 + 456);
  if (!v12)
    operator new();
  objc_msgSend(a1, "duration");
  *(_DWORD *)(v12 + 40) |= 2u;
  *(_QWORD *)(v12 + 8) = v13;
  *(_DWORD *)(a3 + 52) |= 2u;
  v14 = *(_QWORD *)(a3 + 40);
  if (!v14)
    operator new();
  *(_DWORD *)(v14 + 492) |= 0x2000000u;
  v15 = *(_QWORD *)(v14 + 456);
  if (!v15)
    operator new();
  objc_msgSend(a1, "activityDuration");
  *(_DWORD *)(v15 + 40) |= 4u;
  *(_QWORD *)(v15 + 16) = v16;
  *(_DWORD *)(a3 + 52) |= 2u;
  v17 = *(_QWORD *)(a3 + 40);
  if (!v17)
    operator new();
  *(_DWORD *)(v17 + 492) |= 0x2000000u;
  v18 = *(_QWORD *)(v17 + 456);
  if (!v18)
    operator new();
  *(_DWORD *)(v18 + 40) |= 8u;
  v19 = *(std::string **)(v18 + 24);
  if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  return std::string::operator=(v19, a2);
}

void sub_100ABDDD0()
{
  operator delete();
}

void sub_100ABDE30()
{
  JUMPOUT(0x100ABDE24);
}

std::string *sub_100ABDE4C(const std::string *a1, unsigned int a2, uint64_t a3, double a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::string *result;
  uint64_t v17;
  uint64_t v18;
  float v19;

  *(_DWORD *)(a3 + 52) |= 1u;
  v9 = *(_QWORD *)(a3 + 32);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 44) |= 1u;
  *(double *)(v9 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v10 = *(_QWORD *)(a3 + 40);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 492) |= 0x4000000u;
  v11 = *(_QWORD *)(v10 + 464);
  if (!v11)
    operator new();
  if (a2 - 1 >= 3)
    v12 = 0;
  else
    v12 = a2;
  if (!sub_10002A324(v12))
    sub_1019110F0();
  *(_DWORD *)(v11 + 36) |= 1u;
  *(_DWORD *)(v11 + 16) = v12;
  *(_DWORD *)(a3 + 52) |= 2u;
  v13 = *(_QWORD *)(a3 + 40);
  if (!v13)
    operator new();
  *(_DWORD *)(v13 + 492) |= 0x4000000u;
  v14 = *(_QWORD *)(v13 + 464);
  if (!v14)
    operator new();
  *(_DWORD *)(v14 + 36) |= 2u;
  v15 = *(std::string **)(v14 + 8);
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  result = std::string::operator=(v15, a1);
  if (a2 == 2)
  {
    *(_DWORD *)(a3 + 52) |= 2u;
    v17 = *(_QWORD *)(a3 + 40);
    if (!v17)
      operator new();
    *(_DWORD *)(v17 + 492) |= 0x4000000u;
    v18 = *(_QWORD *)(v17 + 464);
    if (!v18)
      operator new();
    v19 = a5;
    *(_DWORD *)(v18 + 36) |= 4u;
    *(float *)(v18 + 20) = v19;
  }
  return result;
}

void sub_100ABE0BC()
{
  operator delete();
}

void sub_100ABE114()
{
  JUMPOUT(0x100ABE108);
}

BOOL sub_100ABE130(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, double a5)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = a1;
  *(_DWORD *)(a4 + 52) |= 1u;
  v9 = *(_QWORD *)(a4 + 32);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 44) |= 1u;
  *(double *)(v9 + 8) = a5;
  *(_DWORD *)(a4 + 52) |= 2u;
  v10 = *(_QWORD *)(a4 + 40);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 492) |= 0x8000000u;
  v11 = *(_QWORD *)(v10 + 472);
  if (!v11)
    operator new();
  if (a1 - 1 >= 4)
    v8 = 0;
  if (!sub_100106094(v8))
    sub_101911140();
  *(_DWORD *)(v11 + 28) |= 1u;
  *(_DWORD *)(v11 + 8) = v8;
  *(_DWORD *)(a4 + 52) |= 2u;
  v12 = *(_QWORD *)(a4 + 40);
  if (!v12)
    operator new();
  *(_DWORD *)(v12 + 492) |= 0x8000000u;
  v13 = *(_QWORD *)(v12 + 472);
  if (!v13)
    operator new();
  if (a2 - 1 >= 5)
    a2 = 0;
  result = sub_1002BC6DC(a2);
  if (!result)
    sub_101911118();
  *(_DWORD *)(v13 + 28) |= 2u;
  *(_DWORD *)(v13 + 12) = a2;
  v15 = *(unsigned __int8 *)(a3 + 23);
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a3 + 8);
  if (v15)
    goto LABEL_23;
  v16 = *(unsigned __int8 *)(a3 + 47);
  if ((v16 & 0x80u) != 0)
    v16 = *(_QWORD *)(a3 + 32);
  if (v16)
  {
LABEL_23:
    *(_DWORD *)(a4 + 52) |= 2u;
    v17 = *(_QWORD *)(a4 + 40);
    if (!v17)
      operator new();
    *(_DWORD *)(v17 + 492) |= 0x8000000u;
    v18 = *(_QWORD *)(v17 + 472);
    if (!v18)
      operator new();
    *(_DWORD *)(v18 + 28) |= 4u;
    v19 = *(_QWORD *)(v18 + 16);
    if (!v19)
      operator new();
    return sub_101383410(a3, v19);
  }
  return result;
}

void sub_100ABE3EC()
{
  operator delete();
}

void sub_100ABE468()
{
  JUMPOUT(0x100ABE45CLL);
}

void sub_100ABE484(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100ABE4B0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 4052, a4);
}

void sub_100ABF5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100ABF5E4(uint64_t a1)
{
  id result;
  void *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  int v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;

  result = objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    v2 = result;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102168478);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v9 = "-[CLEEDCoexMonitorCellular checkAndRestartRsrpTimer]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EED2CXCL,%{public}s, rsrpTimerExpiry", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102168478);
      v6 = 136446210;
      v7 = "-[CLEEDCoexMonitorCellular checkAndRestartRsrpTimer]_block_invoke";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2CXCL,%{public}s, rsrpTimerExpiry", &v6, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "-[CLEEDCoexMonitorCellular checkAndRestartRsrpTimer]_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    return objc_msgSend(v2, "fetchSignalStrengthMeasurements");
  }
  return result;
}

void sub_100AC0314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AC0338(uint64_t a1, void *a2)
{
  id Weak;
  unsigned int *v4;
  NSObject *v5;
  unsigned int v6;
  unsigned int v7;
  id v8;
  unsigned int v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  id v16;
  const char *v17;
  uint8_t *v18;
  uint8_t *v19;
  _BYTE v20[18];
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  id v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  id v32;

  Weak = objc_loadWeak((id *)(a1 + 32));
  if (!Weak)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102168478);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "-[CLEEDCoexMonitorCellular fetchSignalStrengthMeasurements]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2CXCL,%{public}s, strongSelf nil, returning", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102168478);
    *(_DWORD *)v20 = 136446210;
    *(_QWORD *)&v20[4] = "-[CLEEDCoexMonitorCellular fetchSignalStrengthMeasurements]_block_invoke";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2CXCL,%{public}s, strongSelf nil, returning", v20, 12, *(_OWORD *)v20);
LABEL_32:
    v19 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "-[CLEEDCoexMonitorCellular fetchSignalStrengthMeasurements]_block_invoke", "%s\n", v11);
    if (v19 != buf)
      free(v19);
    return;
  }
  v4 = (unsigned int *)Weak;
  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend(objc_msgSend(*((id *)Weak + 1), "silo"), "queue"));
  if (a2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102168478);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v6 = objc_msgSend(objc_msgSend(a2, "rsrp"), "intValue");
      v7 = objc_msgSend(objc_msgSend(a2, "rscp"), "intValue");
      v8 = objc_msgSend(objc_msgSend(v4, "ratAsString:", v4[12]), "UTF8String");
      *(_DWORD *)buf = 136446978;
      v26 = "-[CLEEDCoexMonitorCellular fetchSignalStrengthMeasurements]_block_invoke";
      v27 = 1026;
      v28 = v6;
      v29 = 1026;
      v30 = v7;
      v31 = 2082;
      v32 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#EED2CXCL,%{public}s, rsrp:%{public}d, rscp:%{public}d, rat:%{public}s", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102168478);
      v13 = qword_1022A0088;
      v14 = objc_msgSend(objc_msgSend(a2, "rsrp"), "intValue");
      v15 = objc_msgSend(objc_msgSend(a2, "rscp"), "intValue");
      v16 = objc_msgSend(objc_msgSend(v4, "ratAsString:", v4[12]), "UTF8String");
      *(_DWORD *)v20 = 136446978;
      *(_QWORD *)&v20[4] = "-[CLEEDCoexMonitorCellular fetchSignalStrengthMeasurements]_block_invoke";
      *(_WORD *)&v20[12] = 1026;
      *(_DWORD *)&v20[14] = v14;
      v21 = 1026;
      v22 = v15;
      v23 = 2082;
      v24 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "#EED2CXCL,%{public}s, rsrp:%{public}d, rscp:%{public}d, rat:%{public}s", v20, 34);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "-[CLEEDCoexMonitorCellular fetchSignalStrengthMeasurements]_block_invoke", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v9 = v4[12];
    if (v9 == 10 || v9 == 6)
      objc_msgSend(v4, "storeRsrpUpdate:", objc_msgSend(a2, "rsrp"));
    return;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102168478);
  v12 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v26 = "-[CLEEDCoexMonitorCellular fetchSignalStrengthMeasurements]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2CXCL,%{public}s, nil SignalStrengthMeasurements", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102168478);
    *(_DWORD *)v20 = 136446210;
    *(_QWORD *)&v20[4] = "-[CLEEDCoexMonitorCellular fetchSignalStrengthMeasurements]_block_invoke";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2CXCL,%{public}s, nil SignalStrengthMeasurements", v20, 12, *(_OWORD *)v20);
    goto LABEL_32;
  }
}

void sub_100AC2450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id location)
{
  id *v48;
  id *v49;

  objc_destroyWeak(v49);
  objc_destroyWeak(v48);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

_QWORD *sub_100AC2498(uint64_t a1)
{
  NSObject *v2;
  _QWORD *result;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  const char *v8;
  uint8_t buf[4];
  const char *v10;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102168478);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v10 = "-[CLEEDCoexMonitorCellular initWithUniverse:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:"
          "eventCB:coexMetricUpdateCB:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2CXPB,%{public}s CellularMitigation Disabled, returning with nominal.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102168478);
    v7 = 136446210;
    v8 = "-[CLEEDCoexMonitorCellular initWithUniverse:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:e"
         "ventCB:coexMetricUpdateCB:]_block_invoke";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2CXPB,%{public}s CellularMitigation Disabled, returning with nominal.", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CLEEDCoexMonitorCellular initWithUniverse:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  result = *(_QWORD **)(a1 + 32);
  v4 = result[4];
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, id, _QWORD))(v4 + 16))(v4, objc_msgSend(result, "getCurrentMitigation"), 0);
  return result;
}

void sub_100AC2670(uint64_t a1, uint64_t a2)
{
  id *Weak;
  id *v4;
  NSObject *v5;
  _QWORD v6[6];

  Weak = (id *)objc_loadWeak((id *)(a1 + 32));
  if (Weak)
  {
    v4 = Weak;
    v5 = objc_msgSend(objc_msgSend(Weak[1], "silo"), "queue");
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100AC26E8;
    v6[3] = &unk_10212BB30;
    v6[4] = a2;
    v6[5] = v4;
    dispatch_async(v5, v6);
  }
}

id sub_100AC26E8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  uint64_t v15;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102168478);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    v13 = "-[CLEEDCoexMonitorCellular initWithUniverse:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:"
          "eventCB:coexMetricUpdateCB:]_block_invoke_2";
    v14 = 2114;
    v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2CXCL,%{public}s, WRMCB:%{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102168478);
    v5 = *(_QWORD *)(a1 + 32);
    v8 = 136446466;
    v9 = "-[CLEEDCoexMonitorCellular initWithUniverse:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:e"
         "ventCB:coexMetricUpdateCB:]_block_invoke";
    v10 = 2114;
    v11 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2CXCL,%{public}s, WRMCB:%{public}@", &v8, 22);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "-[CLEEDCoexMonitorCellular initWithUniverse:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(a1 + 40), "handleUplinkFrequency:", *(_QWORD *)(a1 + 32));
}

id sub_100AC28C4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "getWirelessULFrequencyBandUpdates:", *(_QWORD *)(a1 + 40));
}

id sub_100AC28D0(uint64_t a1)
{
  id result;

  result = objc_loadWeak((id *)(a1 + 32));
  if (result)
    return _objc_msgSend(result, "queryDCAwareState");
  return result;
}

id sub_100AC28F4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "queryDCAwareState");
}

id sub_100AC28FC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "checkAndRestartRsrpTimer");
  return objc_msgSend(*(id *)(a1 + 32), "checkAndSendMitigation");
}

void sub_100AC33E0(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_100AC340C(uint64_t a1, _QWORD *a2)
{
  float v2;
  double v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)(a1 + 8) = *a2;
  v2 = 1.0 / *(double *)a2;
  *(float *)(a1 + 16) = v2;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(_QWORD *)(a1 + 32) = off_1021388A0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_102168508;
  *(_DWORD *)(a1 + 56) = 256;
  *(_BYTE *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 64) = off_1021388A0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = off_1021388A0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = off_1021388A0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = off_1021388A0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = off_1021685D8;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = off_1021388A0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 228) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 256) = off_1021388A0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = off_1021388A0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 320) = 3;
  *(_WORD *)(a1 + 332) = 0;
  *(_QWORD *)(a1 + 324) = 0;
  *(_QWORD *)(a1 + 336) = off_102165E68;
  *(_QWORD *)(a1 + 344) = off_1021388A0;
  *(_QWORD *)(a1 + 352) = 1065353216;
  *(_DWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = off_1021388A0;
  *(_QWORD *)(a1 + 376) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = off_1021388A0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 448) = off_1021388A0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = off_1021388A0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = off_1021388A0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  v3 = v2;
  v4 = vcvtad_u64_f64(v3 * 0.125);
  *(_QWORD *)(a1 + 536) = off_102138340;
  *(_QWORD *)(a1 + 544) = v4;
  *(_QWORD *)(a1 + 552) = off_102138370;
  *(_QWORD *)(a1 + 560) = v4;
  *(_QWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 624) = off_102138370;
  *(_QWORD *)(a1 + 632) = v4;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 696) = off_102138370;
  *(_QWORD *)(a1 + 704) = v4;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_QWORD *)(a1 + 760) = 0;
  v5 = vcvtad_u64_f64(v3 * 0.625);
  *(_QWORD *)(a1 + 768) = off_102138340;
  *(_QWORD *)(a1 + 776) = v5;
  *(_QWORD *)(a1 + 784) = off_102138370;
  *(_QWORD *)(a1 + 792) = v5;
  *(_QWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_QWORD *)(a1 + 856) = off_102138370;
  *(_QWORD *)(a1 + 864) = v5;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 928) = off_102138370;
  *(_QWORD *)(a1 + 936) = v5;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  v6 = vcvtad_u64_f64(*(float *)(a1 + 16) * 0.75);
  *(_QWORD *)(a1 + 1008) = off_102138370;
  *(_QWORD *)(a1 + 1016) = v6;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_QWORD *)(a1 + 1080) = off_102138370;
  *(_QWORD *)(a1 + 1088) = v6;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_QWORD *)(a1 + 1152) = off_102138370;
  *(_QWORD *)(a1 + 1160) = v6;
  *(_OWORD *)(a1 + 1212) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_QWORD *)(a1 + 1232) = off_102138340;
  *(_QWORD *)(a1 + 1240) = 2;
  *(_QWORD *)(a1 + 1248) = off_102138370;
  *(_QWORD *)(a1 + 1256) = 2;
  *(_QWORD *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_QWORD *)(a1 + 1320) = off_102138370;
  *(_QWORD *)(a1 + 1328) = 2;
  *(_QWORD *)(a1 + 1384) = 0;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_QWORD *)(a1 + 1392) = off_102138370;
  *(_QWORD *)(a1 + 1400) = 2;
  *(_OWORD *)(a1 + 1452) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  operator new[]();
}

void sub_100AC37C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v5;
  sub_100412424(v4);
  v1[144] = v6;
  sub_100412390(v1 + 147);
  v1[135] = v6;
  sub_100412390(v1 + 138);
  v1[126] = v6;
  sub_100412390(v1 + 129);
  sub_100412424(v3);
  sub_100412424(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_100AC3810(_QWORD *a1)
{
  *a1 = off_102168508;
  if (a1[195])
    operator delete[]();
  if (a1[196])
    operator delete[]();
  if (a1[197])
    operator delete[]();
  if (a1[198])
    operator delete[]();
  sub_100412424(a1 + 154);
  a1[144] = off_102138370;
  sub_100412390(a1 + 147);
  a1[135] = off_102138370;
  sub_100412390(a1 + 138);
  a1[126] = off_102138370;
  sub_100412390(a1 + 129);
  sub_100412424(a1 + 96);
  sub_100412424(a1 + 67);
  return a1;
}

void sub_100AC38F8(_QWORD *a1)
{
  sub_100AC3810(a1);
  operator delete();
}

float sub_100AC391C(uint64_t a1)
{
  NSObject *v2;
  float result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (!*(_QWORD *)(a1 + 1000))
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v2 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "RotationStability buffer not set.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "RotationStability buffer not set.", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLAttitudeDependentKFCalibrator::init()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  *(_DWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  if (!*(_BYTE *)(a1 + 333))
  {
    *(_DWORD *)(a1 + 248) = 0;
    *(_DWORD *)(a1 + 232) = 0;
    *(_WORD *)(a1 + 184) = 0;
    *(_BYTE *)(a1 + 220) = 0;
    *(_DWORD *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 324) = 0;
    *(_DWORD *)(a1 + 1608) = 0;
    sub_10041250C((_QWORD *)(a1 + 1080));
    sub_10041250C((_QWORD *)(a1 + 1008));
    sub_10041250C((_QWORD *)(a1 + 1152));
    sub_10041250C((_QWORD *)(a1 + 1248));
    sub_10041250C((_QWORD *)(a1 + 1320));
    sub_10041250C((_QWORD *)(a1 + 1392));
    *(_DWORD *)(a1 + 1224) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    *(_DWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_DWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    *(_WORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 328) = 0;
  }
  *(_BYTE *)(a1 + 244) = 0;
  sub_10041250C((_QWORD *)(a1 + 552));
  sub_10041250C((_QWORD *)(a1 + 624));
  sub_10041250C((_QWORD *)(a1 + 696));
  sub_10041250C((_QWORD *)(a1 + 784));
  sub_10041250C((_QWORD *)(a1 + 856));
  sub_10041250C((_QWORD *)(a1 + 928));
  result = *(double *)(a1 + 1536);
  *(float32x2_t *)(a1 + 144) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1520));
  *(float *)(a1 + 152) = result;
  *(_QWORD *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 59) = 0;
  return result;
}

void sub_100AC3B90(_QWORD *a1)
{
  sub_10041250C(a1 + 2);
  sub_10041250C(a1 + 11);
  sub_10041250C(a1 + 20);
}

float sub_100AC3BC0(float64x2_t *a1, float *a2, int *a3, float *a4, double *a5)
{
  NSObject *v10;
  double v11;
  double v12;
  double v13;
  int v14;
  float v15;
  float v16;
  float v17;
  NSObject *v18;
  float result;
  const char *v20;
  uint8_t *v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float64_t v29;
  double v30;
  double v31;
  double v32;
  int v33;
  const char *v34;
  uint8_t *v35;
  double v36;
  int v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  int v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  int v52;

  if (a5 && *a3 > 0)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v10 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v11 = a2[2];
      v12 = a2[3];
      v13 = a2[4];
      v14 = *a3;
      *(_DWORD *)buf = 134218752;
      v46 = v11;
      v47 = 2048;
      v48 = v12;
      v49 = 2048;
      v50 = v13;
      v51 = 1024;
      v52 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "setting bias (%.3f/%.3f/%.3f) level (%d)", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v30 = a2[2];
      v31 = a2[3];
      v32 = a2[4];
      v33 = *a3;
      v37 = 134218752;
      v38 = v30;
      v39 = 2048;
      v40 = v31;
      v41 = 2048;
      v42 = v32;
      v43 = 1024;
      v44 = v33;
      LODWORD(v36) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "setting bias (%.3f/%.3f/%.3f) level (%d)", COERCE_DOUBLE(&v37), v36);
      v35 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::setBias(const CLVector3d<float> &, const CLMotionTypeCompassCalibrationLevel &, const CLVector3d<float> &, const CLClientQuaternion *)", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
    BYTE5(a1[20].f64[1]) = 0;
    BYTE1(a1[3].f64[1]) = 0;
    LOBYTE(a1[1].f64[1]) = 1;
    BYTE4(a1[15].f64[1]) = 0;
    sub_100AC40D8((float32x2_t *)&a1[21], a5);
    if (&a1[4] == (float64x2_t *)a2)
    {
      v16 = *((float *)&a1[4].f64[1] + 1);
      v17 = *(float *)a1[5].f64;
      v15 = *(float *)&a1[4].f64[1];
    }
    else
    {
      v15 = a2[2];
      *(float *)&a1[4].f64[1] = v15;
      v16 = a2[3];
      *((float *)&a1[4].f64[1] + 1) = v16;
      v17 = a2[4];
      *(float *)a1[5].f64 = v17;
    }
    v22 = *a3;
    HIDWORD(a1[1].f64[0]) = *a3;
    a1[6].f64[0] = 0.0;
    LODWORD(a1[6].f64[1]) = 0;
    v23 = a4[4] - v17;
    v24 = a4[2] - v15;
    v25 = a4[3] - v16;
    v26 = (float)((float)(v25 * *(float *)a1[24].f64) + (float)(v24 * *(float *)&a1[22].f64[1]))
        + (float)(v23 * *(float *)&a1[25].f64[1]);
    *(float32x2_t *)&a1[7].f64[1] = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)&a1[23].f64[1], v25), *(float32x2_t *)&a1[22].f64[0], v24), *(float32x2_t *)&a1[25].f64[0], v23);
    *(float *)a1[8].f64 = v26;
    *(_QWORD *)&a1[10].f64[1] = 0x100000001;
    LODWORD(a1[11].f64[0]) = 1;
    HIDWORD(a1[1].f64[1]) = v22;
    *(float *)&a1[32].f64[1] = v15;
    *((float *)&a1[32].f64[1] + 1) = v16;
    *(float *)a1[33].f64 = v17;
    HIDWORD(a1[20].f64[0]) = 0;
    bzero(&a1[92], 0x48uLL);
    v27 = *(float *)a1[5].f64;
    a1[92] = vcvtq_f64_f32(*(float32x2_t *)&a1[4].f64[1]);
    a1[93].f64[0] = v27;
    a1[95] = vcvtq_f64_f32(*(float32x2_t *)&a1[7].f64[1]);
    a1[96].f64[0] = *(float *)a1[8].f64;
    bzero(*(void **)&a1[98].f64[0], 0x144uLL);
    v28 = 9.0 / (float)*a3;
    v29 = a1[98].f64[0];
    **(float **)&v29 = v28;
    *(float *)(*(_QWORD *)&v29 + 40) = v28;
    *(float *)(*(_QWORD *)&v29 + 80) = v28;
    *(_DWORD *)(*(_QWORD *)&v29 + 120) = 869711765;
    *(_DWORD *)(*(_QWORD *)&v29 + 160) = 869711765;
    *(_DWORD *)(*(_QWORD *)&v29 + 200) = 869711765;
    *(float *)(*(_QWORD *)&v29 + 240) = v28;
    *(float *)(*(_QWORD *)&v29 + 280) = v28;
    *(float *)(*(_QWORD *)&v29 + 320) = v28;
    if (LOBYTE(a1[3].f64[1]))
    {
      LOBYTE(a1[3].f64[1]) = 0;
      BYTE4(a1[20].f64[1]) = 0;
    }
    sub_100AC391C((uint64_t)a1);
    sub_100AC417C((uint64_t)a1, 0);
    sub_10007D084((uint64_t)&a1[78], (float *)&a1[4].f64[1]);
    sub_10007D084((uint64_t)&a1[82].f64[1], (float *)&a1[4].f64[1] + 1);
    return sub_10007D084((uint64_t)&a1[87], (float *)&a1[5]);
  }
  else
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v18 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Could not set bias retrieved from database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      LOWORD(v37) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Could not set bias retrieved from database", &v37, 2);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLAttitudeDependentKFCalibrator::setBias(const CLVector3d<float> &, const CLMotionTypeCompassCalibrationLevel &, const CLVector3d<float> &, const CLClientQuaternion *)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
  }
  return result;
}

float32_t sub_100AC40D8(float32x2_t *a1, double *a2)
{
  float32_t result;
  float32_t v4;
  float32_t v5;
  float64x2_t v6;
  double v7;
  float64x2_t v8;
  double v9;
  float64x2_t v10;
  double v11;

  sub_100A000E0(v6.f64, a2);
  result = v11;
  v4 = v9;
  v5 = v7;
  a1[2] = vcvt_f32_f64(v6);
  a1[3].f32[0] = v5;
  a1[5] = vcvt_f32_f64(v8);
  a1[6].f32[0] = v4;
  a1[8] = vcvt_f32_f64(v10);
  a1[9].f32[0] = result;
  return result;
}

void sub_100AC417C(uint64_t a1, int a2)
{
  float v4;
  float v5;
  float v6;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  double v19;
  double v20;
  double v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  int v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  uint8_t buf[4];
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;

  v4 = *(float *)(a1 + 120);
  v5 = *(float *)(a1 + 124);
  *(float *)(a1 + 200) = v4;
  *(float *)(a1 + 204) = v5;
  v6 = *(float *)(a1 + 128);
  *(float *)(a1 + 208) = v6;
  *(float *)(a1 + 216) = sqrtf((float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6));
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021685A8);
  v7 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(float *)(a1 + 200);
    v9 = *(float *)(a1 + 204);
    v10 = *(float *)(a1 + 208);
    v11 = *(_DWORD *)(a1 + 20);
    v12 = *(_DWORD *)(a1 + 224);
    v13 = *(_DWORD *)(a1 + 168);
    v14 = *(_DWORD *)(a1 + 172);
    v15 = *(_DWORD *)(a1 + 176);
    v16 = *(_DWORD *)(a1 + 236);
    v17 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)buf = 134220544;
    v55 = v8;
    v56 = 2048;
    v57 = v9;
    v58 = 2048;
    v59 = v10;
    v60 = 1024;
    v61 = v11;
    v62 = 1024;
    v63 = v12;
    v64 = 1024;
    v65 = v13;
    v66 = 1024;
    v67 = v14;
    v68 = 1024;
    v69 = v15;
    v70 = 1024;
    v71 = v16;
    v72 = 1024;
    v73 = v17;
    v74 = 1024;
    v75 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "set coasting vector (%.3f/%.3f/%.3f), levels (%d %d) conv(%d %d %d) age (%d) syncAge (%d) DueTo (%d)", buf, 0x50u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v19 = *(float *)(a1 + 200);
    v20 = *(float *)(a1 + 204);
    v21 = *(float *)(a1 + 208);
    v22 = *(_DWORD *)(a1 + 20);
    v23 = *(_DWORD *)(a1 + 224);
    v24 = *(_DWORD *)(a1 + 168);
    v25 = *(_DWORD *)(a1 + 172);
    v26 = *(_DWORD *)(a1 + 176);
    v27 = *(_DWORD *)(a1 + 236);
    v28 = *(_DWORD *)(a1 + 240);
    v32 = 134220544;
    v33 = v19;
    v34 = 2048;
    v35 = v20;
    v36 = 2048;
    v37 = v21;
    v38 = 1024;
    v39 = v22;
    v40 = 1024;
    v41 = v23;
    v42 = 1024;
    v43 = v24;
    v44 = 1024;
    v45 = v25;
    v46 = 1024;
    v47 = v26;
    v48 = 1024;
    v49 = v27;
    v50 = 1024;
    v51 = v28;
    v52 = 1024;
    v53 = a2;
    LODWORD(v31) = 80;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "set coasting vector (%.3f/%.3f/%.3f), levels (%d %d) conv(%d %d %d) age (%d) syncAge (%d) DueTo (%d)", COERCE_DOUBLE(&v32), v31);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::setCoastingVector(BOOL)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  *(_DWORD *)(a1 + 240) = 0;
  v18 = *(_DWORD *)(a1 + 20);
  if ((a2 & 1) != 0)
  {
    *(_DWORD *)(a1 + 224) = v18;
    sub_10041250C((_QWORD *)(a1 + 1080));
    sub_10041250C((_QWORD *)(a1 + 1008));
    sub_10041250C((_QWORD *)(a1 + 1152));
    *(_BYTE *)(a1 + 59) = 1;
  }
  else
  {
    if (v18 > *(_DWORD *)(a1 + 224))
    {
      *(_DWORD *)(a1 + 236) = 0;
      *(_DWORD *)(a1 + 1608) = 0;
    }
    *(_QWORD *)(a1 + 264) = 0;
    *(_DWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_DWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    *(_WORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 224) = v18;
    sub_10041250C((_QWORD *)(a1 + 1080));
    sub_10041250C((_QWORD *)(a1 + 1008));
    sub_10041250C((_QWORD *)(a1 + 1152));
  }
}

float sub_100AC44D0(uint64_t a1, float *a2, float *a3, float *a4)
{
  sub_10007D084(a1 + 16, a2);
  sub_10007D084(a1 + 88, a3);
  return sub_10007D084(a1 + 160, a4);
}

void sub_100AC4518(float64x2_t *a1, float *a2, float32x2_t *a3, int a4)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float64x2_t *v10;
  float32x2_t v11;
  float v12;
  int v13;
  float64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  double v22;
  int v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  double v33;

  BYTE5(a1[20].f64[1]) = 1;
  BYTE1(a1[3].f64[1]) = 0;
  LODWORD(a1[91].f64[1]) = a4;
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = (float)((float)(a3[6].f32[0] * v7) + (float)(v6 * a3[3].f32[0])) + (float)(v8 * a3[9].f32[0]);
  v10 = a1 + 92;
  v11 = vmla_n_f32(vmla_n_f32(vmul_n_f32(a3[5], v7), a3[2], v6), a3[8], v8);
  bzero(&a1[92], 0x48uLL);
  a1[92] = vcvtq_f64_f32(*(float32x2_t *)&a1[4].f64[1]);
  a1[93].f64[0] = *(float *)a1[5].f64;
  *(float64x2_t *)((char *)v10 + 24) = vcvtq_f64_f32(*(float32x2_t *)&a1[6].f64[0]);
  a1[94].f64[1] = *(float *)&a1[6].f64[1];
  a1[95] = vcvtq_f64_f32(v11);
  a1[96].f64[0] = v9;
  bzero(*(void **)&a1[98].f64[0], 0x144uLL);
  v12 = 9.0;
  if ((*(unsigned int (**)(float64x2_t *))(*(_QWORD *)&a1->f64[0] + 72))(a1))
  {
    v13 = HIDWORD(a1[1].f64[0]);
    if (!LOBYTE(a1[1].f64[1]))
      v13 *= v13;
    v12 = 9.0 / (float)v13;
  }
  v14 = a1[98].f64[0];
  **(float **)&v14 = v12;
  *(float *)(*(_QWORD *)&v14 + 40) = v12;
  *(float *)(*(_QWORD *)&v14 + 80) = v12;
  *(_DWORD *)(*(_QWORD *)&v14 + 120) = 869711765;
  *(_DWORD *)(*(_QWORD *)&v14 + 160) = 869711765;
  *(_DWORD *)(*(_QWORD *)&v14 + 200) = 869711765;
  *(float *)(*(_QWORD *)&v14 + 240) = v12;
  *(float *)(*(_QWORD *)&v14 + 280) = v12;
  *(float *)(*(_QWORD *)&v14 + 320) = v12;
  a1[32].f64[1] = a1[4].f64[1];
  LODWORD(a1[33].f64[0]) = LODWORD(a1[5].f64[0]);
  sub_100AC391C((uint64_t)a1);
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021685A8);
  v15 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v16 = HIDWORD(a1[1].f64[0]);
    v17 = LOBYTE(a1[1].f64[1]);
    *(_DWORD *)buf = 67109888;
    v27 = v16;
    v28 = 1024;
    v29 = a4;
    v30 = 1024;
    v31 = v17;
    v32 = 2048;
    v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "reset internal. levels-data(%d %d %d), pScale=%.3f ", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v18 = LOBYTE(a1[1].f64[1]);
    LOWORD(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 2) = a4;
    HIWORD(v22) = 1024;
    v23 = v18;
    v24 = 2048;
    v25 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "reset internal. levels-data(%d %d %d), pScale=%.3f ", &v21, 30, 67109888, v22);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::resetInternal(const CLVector3d<float> &, const CLMatrix3d<float> &, CLMotionTypeCompassCalibrationLevel)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
}

void sub_100AC4840(uint64_t a1)
{
  _DWORD *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  *(_BYTE *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 320) = 3;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  bzero(*(void **)(a1 + 1576), 0x6CuLL);
  v2 = *(_DWORD **)(a1 + 1576);
  *v2 = 1065353216;
  v2[4] = 1065353216;
  v2[8] = 1065353216;
  *(_BYTE *)(a1 + 25) = 0;
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021685A8);
  v3 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "compass calibrator reset", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "compass calibrator reset", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::reset()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

float sub_100AC4A14(uint64_t a1, float *a2, float32x2_t *a3)
{
  NSObject *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  _DWORD *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021685A8);
  v6 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Resetting calibrator states.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Resetting calibrator states.", v15, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::resetCalibration(const CLVector3d<float> &, const CLMatrix3d<float> &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  *(_WORD *)(a1 + 332) = 1;
  *(_BYTE *)(a1 + 57) = 1;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 236) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 320) = 3;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  v8 = a2[3];
  v7 = a2[4];
  v9 = a2[2];
  v10 = (float)((float)(a3[6].f32[0] * v8) + (float)(v9 * a3[3].f32[0])) + (float)(v7 * a3[9].f32[0]);
  *(float32x2_t *)(a1 + 120) = vmla_n_f32(vmla_n_f32(vmul_n_f32(a3[5], v8), a3[2], v9), a3[8], v7);
  *(float *)(a1 + 128) = v10;
  bzero((void *)(a1 + 1472), 0x48uLL);
  *(float64x2_t *)(a1 + 1520) = vcvtq_f64_f32(*(float32x2_t *)(a1 + 120));
  *(double *)(a1 + 1536) = *(float *)(a1 + 128);
  bzero(*(void **)(a1 + 1568), 0x144uLL);
  v11 = *(_DWORD **)(a1 + 1568);
  *v11 = 1091567616;
  v11[10] = 1091567616;
  v11[20] = 1091567616;
  v11[30] = 869711765;
  v11[40] = 869711765;
  v11[50] = 869711765;
  v11[60] = 1091567616;
  v11[70] = 1091567616;
  v11[80] = 1091567616;
  return sub_100AC391C(a1);
}

BOOL sub_100AC4CB4(uint64_t a1, int a2, int a3, int a4, float *a5, float *a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13)
{
  int v19;
  float v20;
  float v21;
  double v22;
  unint64_t v23;
  float v24;
  float v25;
  double v26;
  unint64_t v27;
  double v28;
  unint64_t v29;
  float v30;
  double v31;
  float v32;
  double v33;
  float v34;
  float v35;
  NSObject *v36;
  int v37;
  int v38;
  BOOL v39;
  float v41;
  float v43;
  float v46;
  _BOOL4 v47;
  _BOOL4 v48;
  double v49;
  int v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  NSObject *v56;
  unint64_t v57;
  double v58;
  double v59;
  float v60;
  unint64_t v61;
  float v62;
  int v63;
  int v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  unint64_t v72;
  double v73;
  float v74;
  _BOOL8 result;
  float v76;
  NSObject *v77;
  unint64_t v78;
  double v79;
  double v80;
  float v81;
  unint64_t v82;
  float v83;
  int v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  unint64_t v94;
  double v95;
  float v96;
  int v97;
  int v98;
  double v99;
  int v100;
  unint64_t v101;
  double v102;
  double v103;
  float v104;
  unint64_t v105;
  float v106;
  int v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  unint64_t v117;
  double v118;
  float v119;
  int v120;
  int v121;
  double v122;
  int v123;
  const char *v124;
  float v125;
  float v126;
  NSObject *v127;
  int v128;
  int v129;
  NSObject *v130;
  NSObject *v131;
  int v132;
  int v133;
  float v134;
  double v135;
  float v136;
  int v137;
  int v138;
  int v139;
  float v140;
  unint64_t v141;
  double v142;
  double v143;
  float v144;
  unint64_t v145;
  float v146;
  int v147;
  int v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  unint64_t v156;
  double v157;
  float v158;
  double v159;
  float v160;
  int v161;
  int v162;
  int v163;
  float v164;
  uint8_t *v165;
  int v166;
  int v167;
  const char *v168;
  uint8_t *v169;
  int v170;
  int v171;
  const char *v172;
  uint8_t *v173;
  int v174;
  int v175;
  const char *v176;
  uint8_t *v177;
  double v178;
  double v179;
  double v180;
  _BYTE v181[214];
  __int16 v182;
  int v183;
  __int16 v184;
  int v185;
  __int16 v186;
  int v187;
  __int16 v188;
  double v189;
  uint8_t buf[4];
  _BYTE v191[210];
  __int16 v192;
  int v193;
  __int16 v194;
  int v195;
  __int16 v196;
  int v197;
  __int16 v198;
  double v199;

  *((float *)&v180 + 1) = a12;
  v19 = *(_DWORD *)(a1 + 240);
  v20 = (float)v19;
  v21 = *(float *)(a1 + 16);
  v22 = 0.0;
  if ((float)(v21 * 10.0) < (float)v19)
    v22 = 1.0;
  v23 = *(_QWORD *)(a1 + 1072);
  v24 = 0.0;
  v25 = 0.0;
  if (v23)
    v25 = *(float *)(a1 + 1024) / (float)v23;
  v26 = a7;
  v27 = *(_QWORD *)(a1 + 1216);
  if (v27)
    v24 = *(float *)(a1 + 1168) / (float)v27;
  v28 = v22 * 0.1 + v26 * 0.16;
  v29 = *(_QWORD *)(a1 + 1144);
  if (v29)
    v30 = *(float *)(a1 + 1096) / (float)v29;
  else
    v30 = 0.0;
  v31 = (double)*(int *)(a1 + 232);
  v32 = v28;
  v33 = v21;
  if (round(v21 * 20.0) < v31)
  {
    v34 = 0.1875;
    if (v32 >= 0.1875)
      v34 = v32;
    if (v30 > v34 && *(float *)(a1 + 1224) < 13.75 && v25 < 27.5 && a2 && a4 && a3 && a11 < 78.0 && v25 * 0.9 < v24)
    {
      v35 = a13;
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v36 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        v37 = *(_DWORD *)(a1 + 232);
        v38 = *(_DWORD *)(a1 + 240);
        *(_DWORD *)buf = 134219776;
        *(double *)v191 = v30;
        *(_WORD *)&v191[8] = 2048;
        *(double *)&v191[10] = v24;
        *(_WORD *)&v191[18] = 2048;
        *(double *)&v191[20] = a9;
        *(_WORD *)&v191[28] = 2048;
        *(double *)&v191[30] = v35;
        *(_WORD *)&v191[38] = 2048;
        *(double *)&v191[40] = *((float *)&v180 + 1);
        *(_WORD *)&v191[48] = 2048;
        *(double *)&v191[50] = a11;
        *(_WORD *)&v191[58] = 1024;
        *(_DWORD *)&v191[60] = v37;
        *(_WORD *)&v191[64] = 1024;
        *(_DWORD *)&v191[66] = v38;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Resync after long coasting with mag drift. mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), Age(%d,%d)", buf, 0x4Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v174 = *(_DWORD *)(a1 + 232);
        v175 = *(_DWORD *)(a1 + 240);
        *(_DWORD *)v181 = 134219776;
        *(double *)&v181[4] = v30;
        *(_WORD *)&v181[12] = 2048;
        *(double *)&v181[14] = v24;
        *(_WORD *)&v181[22] = 2048;
        *(double *)&v181[24] = a9;
        *(_WORD *)&v181[32] = 2048;
        *(double *)&v181[34] = v35;
        *(_WORD *)&v181[42] = 2048;
        *(double *)&v181[44] = *((float *)&v180 + 1);
        *(_WORD *)&v181[52] = 2048;
        *(double *)&v181[54] = a11;
        *(_WORD *)&v181[62] = 1024;
        *(_DWORD *)&v181[64] = v174;
        *(_WORD *)&v181[68] = 1024;
        *(_DWORD *)&v181[70] = v175;
        LODWORD(v178) = 74;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Resync after long coasting with mag drift. mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), Age(%d,%d)", COERCE_DOUBLE(v181), v178, v179, v180);
        v177 = (uint8_t *)v176;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "%s\n", v176);
        if (v177 != buf)
          free(v177);
      }
      *(_BYTE *)(a1 + 185) = 1;
      if (!*(_BYTE *)(a1 + 333))
        sub_100AC4518((float64x2_t *)a1, a5, (float32x2_t *)(a1 + 336), 3);
      return 0;
    }
  }
  if (a9 <= 5.0 && *(float *)(a1 + 1224) <= 13.75)
    goto LABEL_89;
  if (v25 <= 4.0 || !a3)
    goto LABEL_89;
  v39 = v30 >= v32 || a4 == 0;
  if (v39 || a2 == 0)
    goto LABEL_89;
  v41 = v26 * 2.0 + 4.0;
  if (v41 < a10 || v24 > v41)
  {
    v43 = v21 + v21;
    v47 = v30 < 0.1 && v43 < v20 || (float)(v21 * 10.0) < v20 || *(_BYTE *)(a1 + 184) != 0;
    v46 = *(float *)(a1 + 1224);
    v48 = v46 >= 27.5;
    if (vabds_f32(v46, a9) < 5.0)
      v48 = 0;
    if (v47 && !v48 || v25 * 0.9 < v24 && (v43 < v20 || v21 < v20 && a9 * 0.95 < a10) && v25 > v46 && v46 < 27.5)
      goto LABEL_57;
LABEL_89:
    if ((-858993459 * *(_DWORD *)(a1 + 324) + 429496729) > 0x33333332)
      return 0;
    v76 = a13;
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v77 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v78 = *(_QWORD *)(a1 + 1072);
      v79 = 0.0;
      v80 = 0.0;
      if (v78 >= 2)
      {
        v81 = (float)((float)v78 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
        v80 = 0.0;
        if (v81 >= 0.0)
          v80 = (float)(v81 / (float)((v78 - 1) * v78));
      }
      v82 = *(_QWORD *)(a1 + 1144);
      if (v82 >= 2)
      {
        v83 = (float)((float)v82 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        if (v83 >= 0.0)
          v79 = (float)(v83 / (float)((v82 - 1) * v82));
      }
      v84 = *(_DWORD *)(a1 + 248);
      v85 = *(float *)(a1 + 200);
      v86 = *(float *)(a1 + 204);
      v87 = *(float *)(a1 + 208);
      v88 = a6[2];
      v89 = a6[3];
      v90 = a6[4];
      v91 = a5[2];
      v92 = a5[3];
      v93 = a5[4];
      v94 = *(_QWORD *)(a1 + 1216);
      v95 = 0.0;
      if (v94 >= 2)
      {
        v96 = (float)((float)v94 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
        if (v96 >= 0.0)
          v95 = (float)(v96 / (float)((v94 - 1) * v94));
      }
      v98 = *(_DWORD *)(a1 + 236);
      v97 = *(_DWORD *)(a1 + 240);
      v99 = *(float *)(a1 + 216);
      v100 = *(_DWORD *)(a1 + 232);
      *(_DWORD *)buf = 67115008;
      *(_DWORD *)v191 = v84;
      *(_WORD *)&v191[4] = 2048;
      *(double *)&v191[6] = a8;
      *(_WORD *)&v191[14] = 2048;
      *(double *)&v191[16] = v85;
      *(_WORD *)&v191[24] = 2048;
      *(double *)&v191[26] = v86;
      *(_WORD *)&v191[34] = 2048;
      *(double *)&v191[36] = v87;
      *(_WORD *)&v191[44] = 2048;
      *(double *)&v191[46] = v88;
      *(_WORD *)&v191[54] = 2048;
      *(double *)&v191[56] = v89;
      *(_WORD *)&v191[64] = 2048;
      *(double *)&v191[66] = v90;
      *(_WORD *)&v191[74] = 2048;
      *(double *)&v191[76] = v91;
      *(_WORD *)&v191[84] = 2048;
      *(double *)&v191[86] = v92;
      *(_WORD *)&v191[94] = 2048;
      *(double *)&v191[96] = v93;
      *(_WORD *)&v191[104] = 2048;
      *(double *)&v191[106] = v25;
      *(_WORD *)&v191[114] = 2048;
      *(double *)&v191[116] = v80;
      *(_WORD *)&v191[124] = 2048;
      *(double *)&v191[126] = v30;
      *(_WORD *)&v191[134] = 2048;
      *(double *)&v191[136] = v79;
      *(_WORD *)&v191[144] = 2048;
      *(double *)&v191[146] = v24;
      *(_WORD *)&v191[154] = 2048;
      *(double *)&v191[156] = v95;
      *(_WORD *)&v191[164] = 2048;
      *(double *)&v191[166] = a9;
      *(_WORD *)&v191[174] = 2048;
      *(double *)&v191[176] = v76;
      *(_WORD *)&v191[184] = 2048;
      *(double *)&v191[186] = (float)(a11 - *((float *)&v180 + 1));
      *(_WORD *)&v191[194] = 2048;
      *(double *)&v191[196] = v99;
      *(_WORD *)&v191[204] = 1024;
      *(_DWORD *)&v191[206] = v98;
      v192 = 1024;
      v193 = v97;
      v194 = 1024;
      v195 = v100;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "numBad(%d), delH(%.3f), coastVec(%.3f/%.3f/%.3f), expectedVec(%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d)", buf, 0xE2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v101 = *(_QWORD *)(a1 + 1072);
      v102 = 0.0;
      v103 = 0.0;
      if (v101 >= 2)
      {
        v104 = (float)((float)v101 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
        v103 = 0.0;
        if (v104 >= 0.0)
          v103 = (float)(v104 / (float)((v101 - 1) * v101));
      }
      v105 = *(_QWORD *)(a1 + 1144);
      if (v105 >= 2)
      {
        v106 = (float)((float)v105 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        if (v106 >= 0.0)
          v102 = (float)(v106 / (float)((v105 - 1) * v105));
      }
      v107 = *(_DWORD *)(a1 + 248);
      v108 = *(float *)(a1 + 200);
      v109 = *(float *)(a1 + 204);
      v110 = *(float *)(a1 + 208);
      v111 = a6[2];
      v112 = a6[3];
      v113 = a6[4];
      v114 = a5[2];
      v115 = a5[3];
      v116 = a5[4];
      v117 = *(_QWORD *)(a1 + 1216);
      v118 = 0.0;
      if (v117 >= 2)
      {
        v119 = (float)((float)v117 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
        if (v119 >= 0.0)
          v118 = (float)(v119 / (float)((v117 - 1) * v117));
      }
      v121 = *(_DWORD *)(a1 + 236);
      v120 = *(_DWORD *)(a1 + 240);
      v122 = *(float *)(a1 + 216);
      v123 = *(_DWORD *)(a1 + 232);
      *(_DWORD *)v181 = 67115008;
      *(_DWORD *)&v181[4] = v107;
      *(_WORD *)&v181[8] = 2048;
      *(double *)&v181[10] = a8;
      *(_WORD *)&v181[18] = 2048;
      *(double *)&v181[20] = v108;
      *(_WORD *)&v181[28] = 2048;
      *(double *)&v181[30] = v109;
      *(_WORD *)&v181[38] = 2048;
      *(double *)&v181[40] = v110;
      *(_WORD *)&v181[48] = 2048;
      *(double *)&v181[50] = v111;
      *(_WORD *)&v181[58] = 2048;
      *(double *)&v181[60] = v112;
      *(_WORD *)&v181[68] = 2048;
      *(double *)&v181[70] = v113;
      *(_WORD *)&v181[78] = 2048;
      *(double *)&v181[80] = v114;
      *(_WORD *)&v181[88] = 2048;
      *(double *)&v181[90] = v115;
      *(_WORD *)&v181[98] = 2048;
      *(double *)&v181[100] = v116;
      *(_WORD *)&v181[108] = 2048;
      *(double *)&v181[110] = v25;
      *(_WORD *)&v181[118] = 2048;
      *(double *)&v181[120] = v103;
      *(_WORD *)&v181[128] = 2048;
      *(double *)&v181[130] = v30;
      *(_WORD *)&v181[138] = 2048;
      *(double *)&v181[140] = v102;
      *(_WORD *)&v181[148] = 2048;
      *(double *)&v181[150] = v24;
      *(_WORD *)&v181[158] = 2048;
      *(double *)&v181[160] = v118;
      *(_WORD *)&v181[168] = 2048;
      *(double *)&v181[170] = a9;
      *(_WORD *)&v181[178] = 2048;
      *(double *)&v181[180] = v76;
      *(_WORD *)&v181[188] = 2048;
      *(double *)&v181[190] = (float)(a11 - *((float *)&v180 + 1));
      *(_WORD *)&v181[198] = 2048;
      *(double *)&v181[200] = v122;
      *(_WORD *)&v181[208] = 1024;
      *(_DWORD *)&v181[210] = v121;
      v182 = 1024;
      v183 = v120;
      v184 = 1024;
      v185 = v123;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "numBad(%d), delH(%.3f), coastVec(%.3f/%.3f/%.3f), expectedVec(%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d)", v181, 226);
      goto LABEL_163;
    }
    return result;
  }
  v46 = *(float *)(a1 + 1224);
LABEL_57:
  if (v46 < 27.5 || v46 < a9)
    goto LABEL_63;
  v49 = 0.0;
  if (v33 * 3.0 < v31)
    v49 = 1.0;
  if (v46 < (float)(a9 * 4.0) && v49 * 10.0 + 80.0 > v46)
  {
LABEL_63:
    *(_BYTE *)(a1 + 185) = 1;
    if (!*(_BYTE *)(a1 + 333) && *(_BYTE *)(a1 + 184) && v25 < 27.5 && v30 < 0.15 && v24 < 5.0)
    {
      v125 = a13;
      sub_100AC4518((float64x2_t *)a1, a5, (float32x2_t *)(a1 + 336), 3);
      a13 = v125;
      v19 = *(_DWORD *)(a1 + 240);
      v33 = *(float *)(a1 + 16);
    }
    if (v33 * 1.5 >= (double)v19 && ((v50 = *(_DWORD *)(a1 + 304)) != 0 || *(_BYTE *)(a1 + 312)))
    {
      v51 = *(float *)(a1 + 308);
      v52 = fabsf(v51);
      v53 = v51 + a8;
      *(float *)(a1 + 308) = v53;
      v54 = fabsf(v53);
      if (v54 > (float)(v52 + 5.0))
      {
        *(_DWORD *)(a1 + 304) = v50 + 1;
        if (v50 >= 1 && v54 < (float)((float)(v50 + 1) * 5.0))
        {
          *(_QWORD *)(a1 + 264) = 0;
          *(_DWORD *)(a1 + 272) = 0;
          *(_QWORD *)(a1 + 288) = 0;
          *(_DWORD *)(a1 + 296) = 0;
          *(_QWORD *)(a1 + 304) = 0;
          *(_WORD *)(a1 + 312) = 0;
        }
      }
    }
    else
    {
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 72);
      *(_DWORD *)(a1 + 272) = *(_DWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 200);
      *(_DWORD *)(a1 + 296) = *(_DWORD *)(a1 + 208);
      *(_DWORD *)(a1 + 316) = *(_DWORD *)(a1 + 324);
      *(_DWORD *)(a1 + 304) = 0;
      *(_WORD *)(a1 + 312) = 1;
      *(float *)(a1 + 308) = a8;
    }
    v55 = a13;
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v56 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v57 = *(_QWORD *)(a1 + 1072);
      v58 = 0.0;
      v59 = 0.0;
      if (v57 >= 2)
      {
        v60 = (float)((float)v57 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
        v59 = 0.0;
        if (v60 >= 0.0)
          v59 = (float)(v60 / (float)((v57 - 1) * v57));
      }
      v61 = *(_QWORD *)(a1 + 1144);
      if (v61 >= 2)
      {
        v62 = (float)((float)v61 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        if (v62 >= 0.0)
          v58 = (float)(v62 / (float)((v61 - 1) * v61));
      }
      v63 = *(_DWORD *)(a1 + 248);
      v64 = *(_DWORD *)(a1 + 304);
      v65 = *(float *)(a1 + 308);
      v66 = a6[2];
      v67 = a6[3];
      v68 = a6[4];
      v69 = a5[2];
      v70 = a5[3];
      v71 = a5[4];
      v72 = *(_QWORD *)(a1 + 1216);
      v73 = 0.0;
      if (v72 >= 2)
      {
        v134 = (float)((float)v72 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
        v74 = v55;
        if (v134 >= 0.0)
          v73 = (float)(v134 / (float)((v72 - 1) * v72));
      }
      else
      {
        v74 = v55;
      }
      v135 = *(float *)(a1 + 216);
      v136 = (float)(*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 316));
      v138 = *(_DWORD *)(a1 + 236);
      v137 = *(_DWORD *)(a1 + 240);
      v139 = *(_DWORD *)(a1 + 232);
      *(_DWORD *)buf = 67115520;
      v140 = *(float *)(a1 + 16);
      *(_DWORD *)v191 = v63;
      *(_WORD *)&v191[4] = 2048;
      *(double *)&v191[6] = v26;
      *(_WORD *)&v191[14] = 2048;
      *(double *)&v191[16] = a8;
      *(_WORD *)&v191[24] = 1024;
      *(_DWORD *)&v191[26] = v64;
      *(_WORD *)&v191[30] = 2048;
      *(double *)&v191[32] = v65;
      *(_WORD *)&v191[40] = 2048;
      *(double *)&v191[42] = v66;
      *(_WORD *)&v191[50] = 2048;
      *(double *)&v191[52] = v67;
      *(_WORD *)&v191[60] = 2048;
      *(double *)&v191[62] = v68;
      *(_WORD *)&v191[70] = 2048;
      *(double *)&v191[72] = v69;
      *(_WORD *)&v191[80] = 2048;
      *(double *)&v191[82] = v70;
      *(_WORD *)&v191[90] = 2048;
      *(double *)&v191[92] = v71;
      *(_WORD *)&v191[100] = 2048;
      *(double *)&v191[102] = v25;
      *(_WORD *)&v191[110] = 2048;
      *(double *)&v191[112] = v59;
      *(_WORD *)&v191[120] = 2048;
      *(double *)&v191[122] = v30;
      *(_WORD *)&v191[130] = 2048;
      *(double *)&v191[132] = v58;
      *(_WORD *)&v191[140] = 2048;
      *(double *)&v191[142] = v24;
      *(_WORD *)&v191[150] = 2048;
      *(double *)&v191[152] = v73;
      *(_WORD *)&v191[160] = 2048;
      *(double *)&v191[162] = a9;
      *(_WORD *)&v191[170] = 2048;
      *(double *)&v191[172] = v74;
      *(_WORD *)&v191[180] = 2048;
      *(double *)&v191[182] = (float)(a11 - *((float *)&v180 + 1));
      *(_WORD *)&v191[190] = 2048;
      *(double *)&v191[192] = *((float *)&v180 + 1);
      *(_WORD *)&v191[200] = 2048;
      *(double *)&v191[202] = v135;
      v192 = 1024;
      v193 = v138;
      v194 = 1024;
      v195 = v137;
      v196 = 1024;
      v197 = v139;
      v198 = 2048;
      v199 = (float)(v136 / v140);
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "DRIFT DETECTED. numBad=%d,s=%.3f,delH(%.3f,%d,%.3f), expectedVec (%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d),deltaTime(%.3f)", buf, 0xF2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v141 = *(_QWORD *)(a1 + 1072);
    v142 = 0.0;
    v143 = 0.0;
    if (v141 >= 2)
    {
      v144 = (float)((float)v141 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
      v143 = 0.0;
      if (v144 >= 0.0)
        v143 = (float)(v144 / (float)((v141 - 1) * v141));
    }
    v145 = *(_QWORD *)(a1 + 1144);
    if (v145 >= 2)
    {
      v146 = (float)((float)v145 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
      if (v146 >= 0.0)
        v142 = (float)(v146 / (float)((v145 - 1) * v145));
    }
    v147 = *(_DWORD *)(a1 + 248);
    v148 = *(_DWORD *)(a1 + 304);
    v149 = *(float *)(a1 + 308);
    v150 = a6[2];
    v151 = a6[3];
    v152 = a6[4];
    v153 = a5[2];
    v154 = a5[3];
    v155 = a5[4];
    v156 = *(_QWORD *)(a1 + 1216);
    v157 = 0.0;
    if (v156 >= 2)
    {
      v158 = (float)((float)v156 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
      if (v158 >= 0.0)
        v157 = (float)(v158 / (float)((v156 - 1) * v156));
    }
    v159 = *(float *)(a1 + 216);
    v160 = (float)(*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 316));
    v162 = *(_DWORD *)(a1 + 236);
    v161 = *(_DWORD *)(a1 + 240);
    v163 = *(_DWORD *)(a1 + 232);
    *(_DWORD *)v181 = 67115520;
    v164 = *(float *)(a1 + 16);
    *(_DWORD *)&v181[4] = v147;
    *(_WORD *)&v181[8] = 2048;
    *(double *)&v181[10] = v26;
    *(_WORD *)&v181[18] = 2048;
    *(double *)&v181[20] = a8;
    *(_WORD *)&v181[28] = 1024;
    *(_DWORD *)&v181[30] = v148;
    *(_WORD *)&v181[34] = 2048;
    *(double *)&v181[36] = v149;
    *(_WORD *)&v181[44] = 2048;
    *(double *)&v181[46] = v150;
    *(_WORD *)&v181[54] = 2048;
    *(double *)&v181[56] = v151;
    *(_WORD *)&v181[64] = 2048;
    *(double *)&v181[66] = v152;
    *(_WORD *)&v181[74] = 2048;
    *(double *)&v181[76] = v153;
    *(_WORD *)&v181[84] = 2048;
    *(double *)&v181[86] = v154;
    *(_WORD *)&v181[94] = 2048;
    *(double *)&v181[96] = v155;
    *(_WORD *)&v181[104] = 2048;
    *(double *)&v181[106] = v25;
    *(_WORD *)&v181[114] = 2048;
    *(double *)&v181[116] = v143;
    *(_WORD *)&v181[124] = 2048;
    *(double *)&v181[126] = v30;
    *(_WORD *)&v181[134] = 2048;
    *(double *)&v181[136] = v142;
    *(_WORD *)&v181[144] = 2048;
    *(double *)&v181[146] = v24;
    *(_WORD *)&v181[154] = 2048;
    *(double *)&v181[156] = v157;
    *(_WORD *)&v181[164] = 2048;
    *(double *)&v181[166] = a9;
    *(_WORD *)&v181[174] = 2048;
    *(double *)&v181[176] = v55;
    *(_WORD *)&v181[184] = 2048;
    *(double *)&v181[186] = (float)(a11 - *((float *)&v180 + 1));
    *(_WORD *)&v181[194] = 2048;
    *(double *)&v181[196] = *((float *)&v180 + 1);
    *(_WORD *)&v181[204] = 2048;
    *(double *)&v181[206] = v159;
    v182 = 1024;
    v183 = v162;
    v184 = 1024;
    v185 = v161;
    v186 = 1024;
    v187 = v163;
    v188 = 2048;
    v189 = (float)(v160 / v164);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "DRIFT DETECTED. numBad=%d,s=%.3f,delH(%.3f,%d,%.3f), expectedVec (%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d),deltaTime(%.3f)", v181, 242);
LABEL_163:
    v165 = (uint8_t *)v124;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "%s\n", v124);
    if (v165 != buf)
      free(v165);
    return 0;
  }
  v126 = a13;
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021685A8);
  v127 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v128 = *(unsigned __int8 *)(a1 + 312);
    v129 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v191 = v128;
    *(_WORD *)&v191[4] = 1024;
    *(_DWORD *)&v191[6] = v129;
    _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEBUG, "fBackupInfoSet(%d), syncAge(%d)", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v166 = *(unsigned __int8 *)(a1 + 312);
    v167 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)v181 = 67109376;
    *(_DWORD *)&v181[4] = v166;
    *(_WORD *)&v181[8] = 1024;
    *(_DWORD *)&v181[10] = v167;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "fBackupInfoSet(%d), syncAge(%d)", v181, 14);
    v169 = (uint8_t *)v168;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "%s\n", v168);
    if (v169 != buf)
      free(v169);
  }
  if (*(_BYTE *)(a1 + 312)
    && *(float *)(a1 + 16) * 1.5 > (double)*(int *)(a1 + 240)
    && *(float *)(a1 + 1224) > 80.0
    && *((float *)&v180 + 1) > 78.0
    && *(int *)(a1 + 248) >= 5)
  {
    *(_BYTE *)(a1 + 185) = 1;
    *(_BYTE *)(a1 + 313) = 1;
    *(_DWORD *)(a1 + 248) = 0;
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v130 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEBUG, "Likely bad resync. Backup.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      *(_WORD *)v181 = 0;
      LODWORD(v178) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Likely bad resync. Backup.", v181, *(_QWORD *)&v178);
      goto LABEL_163;
    }
  }
  else
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v131 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v132 = *(_DWORD *)(a1 + 248);
      v133 = *(_DWORD *)(a1 + 240);
      *(_DWORD *)buf = 67110912;
      *(_DWORD *)v191 = v132;
      *(_WORD *)&v191[4] = 2048;
      *(double *)&v191[6] = v30;
      *(_WORD *)&v191[14] = 2048;
      *(double *)&v191[16] = v24;
      *(_WORD *)&v191[24] = 2048;
      *(double *)&v191[26] = a9;
      *(_WORD *)&v191[34] = 2048;
      *(double *)&v191[36] = v126;
      *(_WORD *)&v191[44] = 2048;
      *(double *)&v191[46] = *((float *)&v180 + 1);
      *(_WORD *)&v191[54] = 2048;
      *(double *)&v191[56] = a11;
      *(_WORD *)&v191[64] = 1024;
      *(_DWORD *)&v191[66] = v133;
      _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEBUG, "RESYNC Rejected. numBad=%d,mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), syncAge(%d)", buf, 0x4Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v170 = *(_DWORD *)(a1 + 248);
      v171 = *(_DWORD *)(a1 + 240);
      *(_DWORD *)v181 = 67110912;
      *(_DWORD *)&v181[4] = v170;
      *(_WORD *)&v181[8] = 2048;
      *(double *)&v181[10] = v30;
      *(_WORD *)&v181[18] = 2048;
      *(double *)&v181[20] = v24;
      *(double *)&v181[30] = a9;
      *(_WORD *)&v181[38] = 2048;
      *(double *)&v181[40] = v126;
      *(_WORD *)&v181[48] = 2048;
      *(double *)&v181[50] = *((float *)&v180 + 1);
      *(_WORD *)&v181[58] = 2048;
      *(double *)&v181[60] = a11;
      *(_WORD *)&v181[68] = 1024;
      *(_DWORD *)&v181[70] = v171;
      LODWORD(v178) = 74;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "RESYNC Rejected. numBad=%d,mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), syncAge(%d)", v181, v178, v179, v180, *(double *)v181, *(double *)&v181[8], *(double *)&v181[16], HIDWORD(COERCE_UNSIGNED_INT64(v24)));
      v173 = (uint8_t *)v172;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "%s\n", v172);
      if (v173 != buf)
        free(v173);
    }
    return 1;
  }
  return result;
}

BOOL sub_100AC62C8(uint64_t a1, float *a2, float *a3, int a4, int a5)
{
  int *v5;
  int v6;
  float v7;
  float v13;
  NSObject *v14;
  _BOOL8 result;
  const char *v16;
  uint8_t *v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  float v35;
  uint64_t v36;
  unint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  NSObject *v42;
  unint64_t v43;
  float v44;
  NSObject *v45;
  NSObject *v46;
  float v47;
  float v48;
  float v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  unint64_t v58;
  double v59;
  float v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  NSObject *v65;
  int v66;
  int v67;
  double v68;
  double v69;
  double v70;
  double v71;
  float v72;
  unint64_t v73;
  float v74;
  float v75;
  double v76;
  unint64_t v77;
  double v78;
  double v79;
  float v80;
  float v81;
  float v82;
  int v83;
  NSObject *v86;
  int v87;
  float v88;
  NSObject *v89;
  _BOOL4 v90;
  float v91;
  int v92;
  NSObject *v93;
  int v94;
  int v95;
  int v96;
  NSObject *v97;
  const char *v98;
  uint8_t *v99;
  BOOL v100;
  BOOL v101;
  int v102;
  float v103;
  NSObject *v104;
  BOOL v105;
  int v106;
  float v107;
  float v108;
  float v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  unint64_t v118;
  double v119;
  float v120;
  uint64_t v121;
  int v122;
  const char *v123;
  uint8_t *v124;
  const char *v125;
  uint8_t *v126;
  int v127;
  int v128;
  const char *v129;
  uint8_t *v130;
  const char *v131;
  uint8_t *v132;
  const char *v133;
  uint8_t *v134;
  const char *v135;
  uint8_t *v136;
  const char *v137;
  uint8_t *v138;
  const char *v139;
  uint8_t *v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  uint64_t (**v148)();
  unint64_t v149;
  double v150;
  double v151;
  int v152;
  double v153;
  __int16 v154;
  _BYTE v155[40];
  _BYTE v156[10];
  double v157;
  __int16 v158;
  double v159;
  __int16 v160;
  double v161;
  __int16 v162;
  double v163;
  __int16 v164;
  int v165;
  uint8_t buf[4];
  double v167;
  __int16 v168;
  _BYTE v169[40];
  _BYTE v170[10];
  double v171;
  __int16 v172;
  double v173;
  __int16 v174;
  double v175;
  __int16 v176;
  double v177;
  __int16 v178;
  int v179;

  v5 = (int *)(a1 + 20);
  if (*(int *)(a1 + 20) <= 3)
    v6 = 3;
  else
    v6 = *(_DWORD *)(a1 + 20);
  v7 = *(float *)(a1 + 216);
  if (v7 > 0.0)
  {
    *((float *)&v151 + 1) = vabds_f32(v7, sqrtf((float)((float)(a2[3] * a2[3]) + (float)(a2[2] * a2[2])) + (float)(a2[4] * a2[4])))/ v7;
    sub_10007D084(a1 + 1080, (float *)&v151 + 1);
    v13 = (double)(5 - v6) * 0.25 + 1.5;
    if (*((float *)&v151 + 1) > (float)((float)(v13 * 10.0) * 0.1875))
    {
      if (*(_BYTE *)(a1 + 184))
        ++*(_DWORD *)(a1 + 232);
      else
        sub_100AC7C20(a1);
      v43 = *(_QWORD *)(a1 + 1144);
      if (v43)
      {
        if ((v44 = *(float *)(a1 + 1096) / (float)v43, v44 > 5.0)
          && roundf(*(float *)(a1 + 16) * 30.0) < (float)*(int *)(a1 + 232)
          || v44 > 10.0 && roundf(*(float *)(a1 + 16) * 10.0) < (float)*(int *)(a1 + 232))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021685A8);
          v45 = qword_10229FD48;
          if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "Prolonged high magDiff. Likely bad calibration. Resetting.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD40 != -1)
              dispatch_once(&qword_10229FD40, &stru_1021685A8);
            LOWORD(v152) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Prolonged high magDiff. Likely bad calibration. Resetting.", &v152, 2);
            v126 = (uint8_t *)v125;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v125);
            if (v126 != buf)
              free(v126);
          }
        }
      }
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v46 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        v47 = a2[2];
        v48 = a2[3];
        v49 = a2[4];
        v50 = sqrtf((float)((float)(v48 * v48) + (float)(v47 * v47)) + (float)(v49 * v49));
        v51 = v47;
        v52 = v48;
        v53 = v49;
        v54 = *(float *)(a1 + 200);
        v55 = *(float *)(a1 + 204);
        v56 = *(float *)(a1 + 208);
        v57 = (float)((float)*(int *)(a1 + 232) / *(float *)(a1 + 16));
        v58 = *(_QWORD *)(a1 + 1144);
        v59 = 0.0;
        if (v58 >= 2)
        {
          v60 = (float)((float)v58 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
          v61 = (v58 - 1) * v58;
          if (v60 >= 0.0)
            v59 = (float)(v60 / (float)(unint64_t)v61);
          else
            v59 = 0.0;
        }
        v62 = *(unsigned __int8 *)(a1 + 333);
        *(_DWORD *)buf = 134220544;
        v167 = *((float *)&v151 + 1);
        v168 = 2048;
        *(double *)v169 = v50;
        *(_WORD *)&v169[8] = 2048;
        *(double *)&v169[10] = v51;
        *(_WORD *)&v169[18] = 2048;
        *(double *)&v169[20] = v52;
        *(_WORD *)&v169[28] = 2048;
        *(double *)&v169[30] = v53;
        *(_WORD *)&v169[38] = 2048;
        *(double *)v170 = v54;
        *(_WORD *)&v170[8] = 2048;
        v171 = v55;
        v172 = 2048;
        v173 = v56;
        v174 = 2048;
        v175 = v57;
        v176 = 2048;
        v177 = v59;
        v178 = 1024;
        v179 = v62;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "Extremely high magnitude.  magDiff (%.3f), magnitude (%.3f), calibrated (%.3f/%.3f/%.3f), coastVector (%.3f/%.3f/%.3f),coastingTime,%.3f,magDiffVar,%.3f,resetInternal,%d", buf, 0x6Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v107 = a2[2];
        v108 = a2[3];
        v109 = a2[4];
        v110 = sqrtf((float)((float)(v108 * v108) + (float)(v107 * v107)) + (float)(v109 * v109));
        v111 = v107;
        v112 = v108;
        v113 = v109;
        v114 = *(float *)(a1 + 200);
        v115 = *(float *)(a1 + 204);
        v116 = *(float *)(a1 + 208);
        v117 = (float)((float)*(int *)(a1 + 232) / *(float *)(a1 + 16));
        v118 = *(_QWORD *)(a1 + 1144);
        v119 = 0.0;
        if (v118 >= 2)
        {
          v120 = (float)((float)v118 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
          v121 = (v118 - 1) * v118;
          if (v120 >= 0.0)
            v119 = (float)(v120 / (float)(unint64_t)v121);
          else
            v119 = 0.0;
        }
        v122 = *(unsigned __int8 *)(a1 + 333);
        v152 = 134220544;
        v153 = *((float *)&v151 + 1);
        v154 = 2048;
        *(double *)v155 = v110;
        *(_WORD *)&v155[8] = 2048;
        *(double *)&v155[10] = v111;
        *(_WORD *)&v155[18] = 2048;
        *(double *)&v155[20] = v112;
        *(_WORD *)&v155[28] = 2048;
        *(double *)&v155[30] = v113;
        *(_WORD *)&v155[38] = 2048;
        *(double *)v156 = v114;
        *(_WORD *)&v156[8] = 2048;
        v157 = v115;
        v158 = 2048;
        v159 = v116;
        v160 = 2048;
        v161 = v117;
        v162 = 2048;
        v163 = v119;
        v164 = 1024;
        v165 = v122;
        LODWORD(v141) = 108;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Extremely high magnitude.  magDiff (%.3f), magnitude (%.3f), calibrated (%.3f/%.3f/%.3f), coastVector (%.3f/%.3f/%.3f),coastingTime,%.3f,magDiffVar,%.3f,resetInternal,%d", COERCE_DOUBLE(&v152), v141, v142, v144, v146, v147, *(double *)&v148, *(double *)&v149, v150, v151);
        v124 = (uint8_t *)v123;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v123);
        if (v124 != buf)
          free(v124);
      }
      return 1;
    }
    v18 = *(float *)(a1 + 200);
    v19 = *(float *)(a1 + 204);
    v20 = *(float *)(a1 + 208);
    *(float *)&v21 = (float)((float)(v19 * *(float *)(a1 + 356)) + (float)(v18 * *(float *)(a1 + 352)))
                   + (float)(v20 * *(float *)(a1 + 360));
    *(float *)&v22 = (float)((float)(v19 * *(float *)(a1 + 380)) + (float)(v18 * *(float *)(a1 + 376)))
                   + (float)(v20 * *(float *)(a1 + 384));
    v23 = (float)((float)(v19 * *(float *)(a1 + 404)) + (float)(v18 * *(float *)(a1 + 400)))
        + (float)(v20 * *(float *)(a1 + 408));
    v148 = off_1021388A0;
    v149 = __PAIR64__(v22, v21);
    *(float *)&v150 = v23;
    *((float *)&v147 + 1) = sub_100A45410(a2, (float *)&v148) * 57.296;
    v24 = 90.0 - sub_100A45410(a2, a3) * 57.2957795;
    v25 = 90.0 - sub_100A45410((float *)&v148, a3) * 57.2957795;
    LODWORD(v147) = vabds_f32(v24, v25);
    sub_10007D084(a1 + 1008, (float *)&v147 + 1);
    sub_10007D084(a1 + 1152, (float *)&v147);
    *(_DWORD *)(a1 + 1224) = 0;
    v146 = 0.0;
    v26 = 0.0;
    if (sub_100A3BDC0((float *)&v148, a3, (float *)&v146) && sub_100A3BDC0(a2, a3, (float *)&v146 + 1))
    {
      v26 = *((float *)&v146 + 1) - *(float *)&v146;
      v27 = vabds_f32(*((float *)&v146 + 1), *(float *)&v146);
      *(float *)(a1 + 1224) = v27;
      if (v27 > 180.0)
      {
        v28 = 360.0 - v27;
        *(float *)(a1 + 1224) = v28;
        if (v26 < 0.0)
          v26 = -v28;
        else
          v26 = v28;
      }
    }
    if (*v5 < 2 || (a5 & 1) == 0 && ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1) & a4) != 1)
      return !*(_BYTE *)(a1 + 333)
          && *(_BYTE *)(a1 + 184)
          && *((float *)&v151 + 1) > (float)((float)(v13 + 1.0) * 0.1875);
    *(_BYTE *)(a1 + 185) = 0;
    v29 = *(_QWORD *)(a1 + 1216);
    v30 = 0.0;
    v31 = 0.0;
    if (v29 >= 2)
    {
      v32 = (float)((float)v29 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
      v33 = (v29 - 1) * v29;
      if (v32 >= 0.0)
        v31 = v32 / (float)(unint64_t)v33;
      else
        v31 = 0.0;
    }
    v34 = *(_QWORD *)(a1 + 1072);
    if (v34 >= 2)
    {
      v35 = (float)((float)v34 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
      v36 = (v34 - 1) * v34;
      if (v35 >= 0.0)
        v30 = v35 / (float)(unint64_t)v36;
      else
        v30 = 0.0;
    }
    v37 = *(_QWORD *)(a1 + 1144);
    v38 = 0.0;
    if (v37 >= 2)
    {
      v39 = (float)((float)v37 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
      if (v39 >= 0.0)
        v38 = v39 / (float)((v37 - 1) * v37);
    }
    v40 = v13 * 0.0032;
    v41 = *(float *)(a1 + 1224);
    if (*(_BYTE *)(a1 + 252)
      && v41 > 27.5
      && v38 <= v40
      && (!v37 || (float)(*(float *)(a1 + 1096) / (float)v37) < 0.45))
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v42 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Likely bad database lookup. Resetting. ", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        LOWORD(v152) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Likely bad database lookup. Resetting. ", &v152, 2);
        v132 = (uint8_t *)v131;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v131);
        if (v132 != buf)
          free(v132);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      return 1;
    }
    v63 = *(_DWORD *)(a1 + 248);
    if (v41 <= 80.0)
    {
      if (v63 < 1)
        goto LABEL_74;
      v64 = -1;
    }
    else
    {
      v64 = 1;
    }
    *(_DWORD *)(a1 + 248) = v63 + v64;
LABEL_74:
    *(float *)&v145 = v31;
    v143 = v13;
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    *((float *)&v145 + 1) = v13 * 13.0;
    v65 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v66 = *(_DWORD *)(a1 + 236);
      v67 = *(_DWORD *)(a1 + 248);
      *(_DWORD *)buf = 134219776;
      v167 = v13;
      v168 = 1024;
      *(_DWORD *)v169 = v66;
      *(_WORD *)&v169[4] = 2048;
      *(double *)&v169[6] = *((float *)&v151 + 1);
      *(_WORD *)&v169[14] = 2048;
      *(double *)&v169[16] = v26;
      *(_WORD *)&v169[24] = 2048;
      *(double *)&v169[26] = *((float *)&v147 + 1);
      *(_WORD *)&v169[34] = 1024;
      *(_DWORD *)&v169[36] = v67;
      *(_WORD *)v170 = 2048;
      *(double *)&v170[2] = v24;
      LOWORD(v171) = 1024;
      *(_DWORD *)((char *)&v171 + 2) = *(float *)&v145 < *((float *)&v145 + 1);
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "******* scale(%.3f),cAge(%d), magDiff(%.3f), dHeading(%.3f), deltaAngle(%.3f), numBad(%d), calInc(%.3f), incDiffIsStable(%d)", buf, 0x46u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v127 = *(_DWORD *)(a1 + 236);
      v128 = *(_DWORD *)(a1 + 248);
      v152 = 134219776;
      v153 = v13;
      v154 = 1024;
      *(_DWORD *)v155 = v127;
      *(_WORD *)&v155[4] = 2048;
      *(double *)&v155[6] = *((float *)&v151 + 1);
      *(_WORD *)&v155[14] = 2048;
      *(double *)&v155[16] = v26;
      *(_WORD *)&v155[24] = 2048;
      *(double *)&v155[26] = *((float *)&v147 + 1);
      *(_WORD *)&v155[34] = 1024;
      *(_DWORD *)&v155[36] = v128;
      *(_WORD *)v156 = 2048;
      *(double *)&v156[2] = v24;
      LOWORD(v157) = 1024;
      *(_DWORD *)((char *)&v157 + 2) = *(float *)&v145 < *((float *)&v145 + 1);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "******* scale(%.3f),cAge(%d), magDiff(%.3f), dHeading(%.3f), deltaAngle(%.3f), numBad(%d), calInc(%.3f), incDiffIsStable(%d)", COERCE_DOUBLE(&v152), 70, v143, v145, v146, LODWORD(v147), *(double *)&v148, v149);
      v130 = (uint8_t *)v129;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v129);
      if (v130 != buf)
        free(v130);
    }
    v68 = *((float *)&v145 + 1);
    v69 = v30;
    v70 = *((float *)&v145 + 1) * 1.5;
    if (a5)
    {
      if (*(float *)(a1 + 16) < (float)(*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328)))
      {
        LODWORD(v68) = *(_DWORD *)(a1 + 1216);
        if (round((double)*(unint64_t *)(a1 + 1160) * 0.5) < (double)*(unint64_t *)&v68)
        {
          v71 = v69;
          *(_DWORD *)(a1 + 328) = 0;
          sub_100AC4CB4(a1, *(float *)&v145 < *((float *)&v145 + 1), v70 > v69, v38 <= v40, a2, (float *)&v148, v13, v26, *((float *)&v147 + 1), *(float *)&v147, v24, v25, *((float *)&v151 + 1));
          v69 = v71;
          if (*(_BYTE *)(a1 + 313))
            return 0;
        }
      }
    }
    v72 = *(float *)(a1 + 16);
    v73 = *(_QWORD *)(a1 + 1072);
    v74 = 0.0;
    v75 = 0.0;
    if (v73)
      v75 = *(float *)(a1 + 1024) / (float)v73;
    v76 = v72;
    v77 = *(_QWORD *)(a1 + 1144);
    if (v77)
      v74 = *(float *)(a1 + 1096) / (float)v77;
    v78 = (double)*(int *)(a1 + 236);
    v79 = v76 * 2.0 + 40.0;
    if (*(_BYTE *)(a1 + 185))
    {
      if (!*(_BYTE *)(a1 + 184))
        return !*(_BYTE *)(a1 + 333)
            && *(_BYTE *)(a1 + 184)
            && *((float *)&v151 + 1) > (float)((float)(v13 + 1.0) * 0.1875);
      v80 = v13 * 13.75;
      v81 = v13 * 0.1875;
LABEL_98:
      v83 = *(_DWORD *)(a1 + 232) + 1;
      *(_DWORD *)(a1 + 232) = v83;
      if (v74 <= v81 && v38 <= v40)
      {
        if (v75 <= v80)
        {
          if (v70 > v69)
          {
LABEL_107:
            if (qword_10229FD40 != -1)
              dispatch_once(&qword_10229FD40, &stru_1021685A8);
            v86 = qword_10229FD48;
            if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "Interference is gone.", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD40 != -1)
                dispatch_once(&qword_10229FD40, &stru_1021685A8);
              LOWORD(v152) = 0;
              LODWORD(v141) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Interference is gone.", &v152, *(_QWORD *)&v141);
              v134 = (uint8_t *)v133;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v133);
              if (v134 != buf)
                free(v134);
            }
            sub_100AC7DE4(a1);
            if (*(_BYTE *)(a1 + 333) && *(int *)(a1 + 1592) <= 2)
            {
              v87 = 0;
              v5 = (int *)(a1 + 1464);
LABEL_126:
              sub_100AC4518((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *v5);
              goto LABEL_131;
            }
            v87 = 0;
            goto LABEL_131;
          }
        }
        else if (*(float *)(a1 + 1224) < v80 && v70 > v69)
        {
          goto LABEL_107;
        }
      }
      if (*(_BYTE *)(a1 + 333))
      {
        v87 = 1;
        goto LABEL_131;
      }
      if (roundf(v72 * 10.0) < (float)v83
        || v79 >= v78
        || (v87 = 1, v24 < 78.0)
        && *(float *)&v145 < *((float *)&v145 + 1)
        && v74 < 0.45
        && v75 > v80
        && *(float *)(a1 + 1224) > 80.0)
      {
        sub_100AC3B90((_QWORD *)(a1 + 1232));
        v87 = 1;
        goto LABEL_126;
      }
LABEL_131:
      if (!*(_BYTE *)(a1 + 333))
        goto LABEL_183;
      return !*(_BYTE *)(a1 + 333)
          && *(_BYTE *)(a1 + 184)
          && *((float *)&v151 + 1) > (float)((float)(v13 + 1.0) * 0.1875);
    }
    v82 = *(float *)(a1 + 1224);
    if (v82 > 80.0
      && v25 > 78.0
      && v72 < (float)*(int *)(a1 + 248)
      && v75 > 13.75
      && v74 < 0.45
      && (v76 * 3.5 < (double)*(int *)(a1 + 240) || v79 >= v78))
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v93 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "Steep inclination. Likely bad interference or bad database lookup. Resetting. ", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        LOWORD(v152) = 0;
        LODWORD(v141) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Steep inclination. Likely bad interference or bad database lookup. Resetting. ", &v152, *(_QWORD *)&v141);
        v136 = (uint8_t *)v135;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v135);
        if (v136 != buf)
          free(v136);
      }
      *(_DWORD *)(a1 + 248) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      return 1;
    }
    v80 = v13 * 13.75;
    v81 = v13 * 0.1875;
    if (*(_BYTE *)(a1 + 184))
      goto LABEL_98;
    if (v82 <= 13.75 && *((float *)&v151 + 1) <= 0.45)
    {
LABEL_129:
      v87 = 0;
      goto LABEL_142;
    }
    v88 = v143 + 0.8;
    if (*((float *)&v147 + 1) < (float)(v88 * 13.75)
      && (*((float *)&v147 + 1) <= 13.75 || *((float *)&v151 + 1) < (float)(v88 * 0.1875)))
    {
      if (*((float *)&v151 + 1) > v81)
        v94 = 1;
      else
        v94 = a5;
      v95 = *(_DWORD *)(a1 + 228);
      if (*((float *)&v147 + 1) <= v80 || !v94)
      {
        v105 = __OFSUB__(v95, 1);
        v106 = v95 - 1;
        if (v106 < 0 == v105)
        {
          v87 = 0;
          *(_DWORD *)(a1 + 228) = v106;
          goto LABEL_142;
        }
        goto LABEL_129;
      }
      *(_DWORD *)(a1 + 228) = v95 + 1;
      v96 = *(unsigned __int8 *)(a1 + 333);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v97 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218752;
        v167 = *((float *)&v147 + 1);
        v168 = 2048;
        *(double *)v169 = v26;
        *(_WORD *)&v169[8] = 2048;
        *(double *)&v169[10] = *((float *)&v151 + 1);
        *(_WORD *)&v169[18] = 2048;
        *(double *)&v169[20] = *(float *)&v147;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "**INTERFERENCE-0 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f", buf, 0x2Au);
      }
      v87 = v96 ^ 1;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v152 = 134218752;
        v153 = *((float *)&v147 + 1);
        v154 = 2048;
        *(double *)v155 = v26;
        *(_WORD *)&v155[8] = 2048;
        *(double *)&v155[10] = *((float *)&v151 + 1);
        *(_WORD *)&v155[18] = 2048;
        *(double *)&v155[20] = *(float *)&v147;
        LODWORD(v141) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "**INTERFERENCE-0 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f", COERCE_DOUBLE(&v152), v141, v143, v145);
        v99 = (uint8_t *)v98;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v98);
        if (v99 != buf)
          free(v99);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 228) += 5;
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v89 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218752;
        v167 = *((float *)&v147 + 1);
        v168 = 2048;
        *(double *)v169 = v26;
        *(_WORD *)&v169[8] = 2048;
        *(double *)&v169[10] = *((float *)&v151 + 1);
        *(_WORD *)&v169[18] = 2048;
        *(double *)&v169[20] = *(float *)&v147;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "**INTERFERENCE-1 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v152 = 134218752;
        v153 = *((float *)&v147 + 1);
        v154 = 2048;
        *(double *)v155 = v26;
        *(_WORD *)&v155[8] = 2048;
        *(double *)&v155[10] = *((float *)&v151 + 1);
        *(_WORD *)&v155[18] = 2048;
        *(double *)&v155[20] = *(float *)&v147;
        LODWORD(v141) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "**INTERFERENCE-1 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f", COERCE_DOUBLE(&v152), v141, v143, v145);
        v138 = (uint8_t *)v137;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v137);
        if (v138 != buf)
          free(v138);
      }
      v87 = 1;
    }
LABEL_142:
    v90 = 0;
    v91 = (float)(v13 * 4.0) * 13.75;
    v92 = *(_DWORD *)(a1 + 228);
    if (*(_BYTE *)(a1 + 24) && v92 >= 2)
      v90 = (*((float *)&v147 + 1) > v91 || *(float *)(a1 + 1224) > 32.0) && *((float *)&v151 + 1) < 1.12499997;
    if (v92 > 40 || (*((float *)&v147 + 1) <= v91 ? (v100 = !v90) : (v100 = 0), !v100))
    {
      v101 = !v90;
      if (*(_BYTE *)(a1 + 24))
        v101 = 0;
      if (v101
        || (v102 = *(_DWORD *)(a1 + 236), v103 = *(float *)(a1 + 16), v103 * 0.25 <= (double)v102)
        && ((float)(v103 * 10.0) <= (float)v102
         || v103 >= (float)*(int *)(a1 + 248)
         || v24 >= 78.0
         || *(float *)&v145 >= *((float *)&v145 + 1)))
      {
        sub_100AC7C20(a1);
        *(_DWORD *)(a1 + 228) = 0;
        return 1;
      }
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v104 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "Likely bad database lookup. Resetting. ", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        LOWORD(v152) = 0;
        LODWORD(v141) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Likely bad database lookup. Resetting. ", &v152, *(_QWORD *)&v141);
        v140 = (uint8_t *)v139;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v139);
        if (v140 != buf)
          free(v140);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    }
LABEL_183:
    if (v87)
      return 1;
    return !*(_BYTE *)(a1 + 333) && *(_BYTE *)(a1 + 184) && *((float *)&v151 + 1) > (float)((float)(v13 + 1.0) * 0.1875);
  }
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021685A8);
  v14 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Coasting vector not set.", buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    LOWORD(v152) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Coasting vector not set.", &v152, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
    return 0;
  }
  return result;
}

void sub_100AC7C20(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  *(_BYTE *)(a1 + 184) = 1;
  if (!*(_BYTE *)(a1 + 333) && *(_BYTE *)(a1 + 57))
  {
    v1 = *(float *)(a1 + 200);
    v2 = *(float *)(a1 + 204);
    *(float *)(a1 + 120) = v1;
    *(float *)(a1 + 124) = v2;
    v3 = *(float *)(a1 + 208);
    *(float *)(a1 + 128) = v3;
    *(double *)(a1 + 1520) = v1;
    *(double *)(a1 + 1528) = v2;
    *(double *)(a1 + 1536) = v3;
  }
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021685A8);
  v4 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "enters coasting", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "enters coasting", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::enterCoasting()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_100AC7DE4(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021685A8);
  v1 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "exits coasting", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "exits coasting", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::exitCoasting()", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

void sub_100AC7F70(uint64_t a1, double a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t j;
  float v8;
  float v9;

  v2 = 0;
  *(float64x2_t *)(a1 + 1520) = vmlaq_n_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 144)), 1.0 - a2), *(float64x2_t *)(a1 + 1520), a2);
  *(double *)(a1 + 1536) = (1.0 - a2) * *(float *)(a1 + 152) + a2 * *(double *)(a1 + 1536);
  v3 = a2 * a2;
  v4 = *(_QWORD *)(a1 + 1568);
  v5 = v4 + 240;
  for (i = 6; i != 9; ++i)
  {
    for (j = 0; j != 108; j += 36)
    {
      v8 = v3 * *(float *)(v5 + j);
      if (v2 == j)
      {
        v9 = (1.0 - v3) * 6.25 + v8;
        v8 = v9;
      }
      *(float *)(v5 + j) = v8;
    }
    v2 += 36;
    v5 += 4;
  }
  sub_100AD8A88((void **)(a1 + 1544), v4, 9);
}

float sub_100AC8020(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v3;
  float result;

  v3 = *(_QWORD *)(a1 + 1576);
  *(float *)(v3 + 36) = -a2[2];
  *(float *)(v3 + 52) = -a2[3];
  *(float *)(v3 + 68) = -a2[4];
  *(_DWORD *)(v3 + 72) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(v3 + 84) = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(v3 + 96) = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(v3 + 76) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(v3 + 88) = *(_DWORD *)(a3 + 44);
  *(_DWORD *)(v3 + 100) = *(_DWORD *)(a3 + 48);
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(a3 + 64);
  *(_DWORD *)(v3 + 92) = *(_DWORD *)(a3 + 68);
  result = *(float *)(a3 + 72);
  *(float *)(v3 + 104) = result;
  return result;
}

void sub_100AC8094(uint64_t a1, float32x2_t *a2, uint64_t a3, char a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float v12;
  uint64_t v13;
  float *v14;
  float v15;
  uint64_t i;
  float v17;
  float v18;
  float v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  _BYTE v26[72];
  float32x2_t v27;
  float v28;
  float32x2_t v29;
  float v30;
  _DWORD v31[3];

  sub_100AC8020(a1, (float *)a2, a3);
  v9 = 0;
  *(float *)v31 = a5;
  *(float *)&v31[1] = a5;
  *(float *)&v31[2] = a5;
  v30 = 0.0;
  v29 = 0;
  v10 = *(_QWORD *)(a1 + 1576);
  v11 = (float *)v10;
  do
  {
    v12 = v29.f32[v9];
    v13 = 1472;
    v14 = v11;
    do
    {
      v15 = *v14;
      v14 += 3;
      v12 = v12 + v15 * *(double *)(a1 + v13);
      v13 += 8;
    }
    while (v13 != 1544);
    v29.f32[v9++] = v12;
    ++v11;
  }
  while (v9 != 3);
  v27 = vsub_f32(a2[1], v29);
  v28 = a2[2].f32[0] - v30;
  sub_100AD7F9C(v26, (uint64_t *)(a1 + 1544), v10, (uint64_t)v31, (uint64_t)&v27, 9, 3, (uint64_t)&v25);
  sub_100AC826C(a1, *(void **)(a1 + 1568), (uint64_t *)(a1 + 1544), 9);
  for (i = 0; i != 72; i += 8)
    *(double *)(a1 + 1472 + i) = *(double *)&v26[i] + *(double *)(a1 + 1472 + i);
  v17 = *(double *)(a1 + 1520);
  v18 = *(double *)(a1 + 1528);
  v19 = *(double *)(a1 + 1536);
  *(float *)(a1 + 144) = v17;
  *(float *)(a1 + 148) = v18;
  *(float *)(a1 + 152) = v19;
  if ((a4 & 1) != 0)
  {
    v20 = *(_DWORD *)(a1 + 504) + 1;
    *(_DWORD *)(a1 + 504) = v20;
    v21 = *(float *)(a1 + 488) + v17;
    *(float *)(a1 + 488) = v21;
    v22 = *(float *)(a1 + 492) + v18;
    *(float *)(a1 + 492) = v22;
    v23 = *(float *)(a1 + 496) + v19;
    *(float *)(a1 + 496) = v23;
    v24 = 1.0 / (double)v20;
    *(float *)(a1 + 144) = v21 * v24;
    *(float *)(a1 + 148) = v22 * v24;
    *(float *)(a1 + 152) = v23 * v24;
  }
}

void sub_100AC826C(uint64_t a1, void *a2, uint64_t *a3, int a4)
{
  size_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  float *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;

  v8 = 4 * a4 * (uint64_t)a4;
  bzero(*(void **)(a1 + 1584), v8);
  bzero(a2, v8);
  if (a4 >= 1)
  {
    v9 = 0;
    v10 = *(float **)(a1 + 1584);
    v12 = *a3;
    v11 = a3[1];
    v13 = 4 * a4;
    v14 = v10;
    do
    {
      v10[(a4 + 1) * (int)v9] = *(float *)(v11 + 4 * v9);
      if (v9)
      {
        v15 = 0;
        v16 = v14;
        do
        {
          *v16 = *(float *)(v11 + 4 * v9) * *(float *)(v12 + 4 * (((int)v9 - 1) * (int)v9 / 2) + 4 * v15++);
          v16 = (float *)((char *)v16 + v13);
        }
        while (v9 != v15);
      }
      ++v9;
      ++v14;
    }
    while (v9 != a4);
    v17 = 0;
    do
    {
      v18 = 0;
      v19 = 0;
      v20 = *a3;
      do
      {
        if (v17 <= v19)
          LODWORD(v21) = v19;
        else
          LODWORD(v21) = v17;
        if (v17 >= v19)
        {
          v22 = *(float *)(*(_QWORD *)(a1 + 1584) + 4 * (v19 * a4 + (int)v21)) + 0.0;
          LODWORD(v21) = v21 + 1;
        }
        else
        {
          v22 = 0.0;
        }
        if ((int)v21 >= a4)
        {
          v23 = v19 * a4;
        }
        else
        {
          v23 = v19 * a4;
          v21 = v21;
          do
          {
            v22 = v22
                + (float)(*(float *)(v20 + 4 * (v17 + ((int)v21 - 1) * (int)v21 / 2))
                        * *(float *)(*(_QWORD *)(a1 + 1584) + v18 + 4 * v21));
            ++v21;
          }
          while (a4 != v21);
        }
        *((float *)a2 + v23 + v17) = v22;
        ++v19;
        v18 += v13;
      }
      while (v19 != a4);
      ++v17;
    }
    while (v17 != a4);
  }
}

uint64_t sub_100AC8404(uint64_t result)
{
  unint64_t v1;
  double v2;
  double v3;
  unint64_t v4;
  unint64_t v5;
  double v6;

  v1 = *(_QWORD *)(result + 1312);
  v2 = 0.0;
  v3 = 0.0;
  if (v1)
    v3 = (float)(*(float *)(result + 1264) / (float)v1);
  v4 = *(_QWORD *)(result + 1384);
  v5 = *(_QWORD *)(result + 1456);
  *(double *)(result + 1472) = v3;
  if (v4)
    v2 = (float)(*(float *)(result + 1336) / (float)v4);
  *(double *)(result + 1480) = v2;
  if (v5)
    v6 = (float)(*(float *)(result + 1408) / (float)v5);
  else
    v6 = 0.0;
  *(double *)(result + 1488) = v6;
  *(_DWORD *)(result + 236) = 0;
  *(_BYTE *)(result + 244) = 1;
  return result;
}

void sub_100AC8478(uint64_t a1, float *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021685A8);
  v4 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Divergence!!! Resetting.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Divergence!!! Resetting.", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::handleDivergence(const CLVector3d<float> &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_10041250C((_QWORD *)(a1 + 1248));
  sub_10041250C((_QWORD *)(a1 + 1320));
  sub_10041250C((_QWORD *)(a1 + 1392));
  if (*(_BYTE *)(a1 + 24))
  {
    sub_10007D084(a1 + 1248, (float *)(a1 + 72));
    sub_10007D084(a1 + 1320, (float *)(a1 + 76));
    sub_10007D084(a1 + 1392, (float *)(a1 + 80));
  }
  sub_100AC4518((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 20));
}

uint64_t sub_100AC8680(uint64_t a1, float *a2)
{
  _OWORD *v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  float v18;
  float v19;
  unint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  int v26;
  float v27;
  int v28;
  float v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  float v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  float v52;
  float v53;
  float v54;
  int v55;
  int v56;
  BOOL v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  float v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  float v73;
  float v74;
  float v75;
  NSObject *v76;
  int v77;
  NSObject *v78;
  int v79;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  NSObject *v87;
  int v88;
  int v89;
  const char *v90;
  uint8_t *v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  float v97;
  float v98;
  float v99;
  uint64_t v100;
  float v101;
  unsigned int v102;
  NSObject *v103;
  int v104;
  float v105;
  NSObject *v106;
  int v107;
  int v108;
  int v109;
  int v110;
  const char *v111;
  NSObject *v112;
  int v113;
  int v114;
  const char *v115;
  NSObject *v116;
  int v117;
  int v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  const char *v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  const char *v141;
  uint8_t *v142;
  int v143;
  const char *v144;
  uint8_t *v145;
  int v146;
  const char *v147;
  uint8_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  const char *v153;
  uint8_t *v154;
  int v155;
  const char *v156;
  uint8_t *v157;
  double v158;
  double v159;
  double v160;
  _BYTE v161[14];
  _BYTE v162[10];
  uint64_t v163;
  __int16 v164;
  double v165;
  __int16 v166;
  int v167;
  __int16 v168;
  int v169;
  __int16 v170;
  int v171;
  __int16 v172;
  int v173;
  uint8_t buf[4];
  _BYTE v175[10];
  _BYTE v176[10];
  uint64_t v177;
  __int16 v178;
  double v179;
  __int16 v180;
  int v181;
  __int16 v182;
  int v183;
  __int16 v184;
  int v185;
  __int16 v186;
  int v187;
  _DWORD v188[2];
  float v189;
  float v190[3];

  v4 = (_OWORD *)(a1 + 1592);
  *(_OWORD *)(a1 + 1592) = 0u;
  v5 = *(double *)(a1 + 1472);
  *(float *)buf = v5;
  v6 = *(double *)(a1 + 1480);
  *(float *)v161 = v6;
  v7 = *(double *)(a1 + 1488);
  v190[0] = v7;
  sub_10007D084(a1 + 784, (float *)buf);
  sub_10007D084(a1 + 856, (float *)v161);
  sub_10007D084(a1 + 928, v190);
  v8 = 0;
  v9 = *(float **)(a1 + 1568);
  v10 = 0.0;
  do
  {
    v11 = *v9;
    v9 += 10;
    v190[v8] = v11;
    v10 = v10 + v11;
    ++v8;
  }
  while (v8 != 3);
  v12 = *(_QWORD *)(a1 + 848);
  v13 = 0.0;
  v14 = 0.0;
  if (v12 >= 2)
  {
    v15 = (float)((float)v12 * *(float *)(a1 + 804)) - (float)(*(float *)(a1 + 800) * *(float *)(a1 + 800));
    v14 = 0.0;
    if (v15 >= 0.0)
      v14 = v15 / (float)((v12 - 1) * v12);
  }
  v16 = sqrtf(v14);
  *(float *)v188 = v16;
  v17 = *(_QWORD *)(a1 + 920);
  if (v17 >= 2)
  {
    v18 = (float)((float)v17 * *(float *)(a1 + 876)) - (float)(*(float *)(a1 + 872) * *(float *)(a1 + 872));
    if (v18 >= 0.0)
      v13 = v18 / (float)((v17 - 1) * v17);
  }
  v19 = sqrtf(v13);
  *(float *)&v188[1] = v19;
  v20 = *(_QWORD *)(a1 + 992);
  v21 = 0.0;
  if (v20 >= 2)
  {
    v22 = (float)((float)v20 * *(float *)(a1 + 948)) - (float)(*(float *)(a1 + 944) * *(float *)(a1 + 944));
    if (v22 >= 0.0)
      v21 = v22 / (float)((v20 - 1) * v20);
  }
  v189 = sqrtf(v21);
  v23 = (float)(v16 + v19) + v189;
  if (v23 > 1000.0)
  {
LABEL_13:
    sub_100AC8478(a1, a2);
    return 0;
  }
  if (*(int *)(a1 + 20) < 3 || *(_BYTE *)(a1 + 24))
    v24 = 0.08;
  else
    v24 = 0.04;
  v25 = 0;
  v26 = 0;
  v27 = 0.0;
  do
  {
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
    v29 = v190[v25];
    if (v29 <= 0.02)
      v30 = v28;
    else
      v30 = 0;
    if (v30 == 1 && *(float *)&v188[v25] > 10.0)
      goto LABEL_13;
    if (v29 > v27)
      v27 = v190[v25];
    if (v29 <= v24 && *(float *)&v188[v25] <= 1.0)
    {
      *(_DWORD *)(a1 + v25 * 4 + 1596) = 1;
      ++v26;
    }
    ++v25;
  }
  while (v25 != 3);
  if (v10 <= 0.125
    && (v26 == 3
     || (v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1), v23 < 15.0) && v31 != 1 && v27 <= 0.08))
  {
    *v4 = xmmword_101C07760;
    *(_DWORD *)(a1 + 320) = -1;
    if (v10 <= 0.06)
      *(_DWORD *)v4 = 5;
  }
  else if (v23 <= 1.0 && v26 >= 1)
  {
    if (v10 <= 0.6)
    {
      *(_DWORD *)v4 = 3;
      if (v26 <= 1)
      {
        v32 = 0;
        v33 = -1;
        v34 = 9.0;
        do
        {
          if (!*(_DWORD *)(a1 + 1596 + 4 * v32) && v190[v32] < v34)
          {
            v33 = v32;
            v34 = v190[v32];
          }
          ++v32;
        }
        while (v32 != 3);
        *(_DWORD *)(a1 + 4 * v33 + 1596) = 1;
      }
    }
    else if (v26 >= 2)
    {
      *(_DWORD *)v4 = v26;
    }
    if (*(_DWORD *)(a1 + 1596))
    {
      *(_DWORD *)(a1 + 320) = 0;
    }
    else
    {
      if (*(_DWORD *)(a1 + 1600))
        v35 = 1;
      else
        v35 = 2;
      *(_DWORD *)(a1 + 320) = v35;
    }
  }
  HIDWORD(v158) = 0;
  if (!*(_BYTE *)(a1 + 57))
  {
    if (!*(_BYTE *)(a1 + 333) || *(_DWORD *)(a1 + 1592) < *(_DWORD *)(a1 + 1464))
    {
      if (!*(_BYTE *)(a1 + 24) || (v56 = *(_DWORD *)(a1 + 1592), v56 < *(_DWORD *)(a1 + 20)) && (v26 < 2 || v56 <= 2))
      {
        if (!*(_BYTE *)(a1 + 184))
          return 0;
        v57 = roundf(*(float *)(a1 + 16) * 20.0) >= (float)*(int *)(a1 + 232) || v26 < 2;
        if (v57 || *(int *)v4 < 3)
          return 0;
      }
    }
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v58 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v59 = *(_QWORD *)(a1 + 1472);
      v60 = *(_QWORD *)(a1 + 1480);
      v61 = *(_QWORD *)(a1 + 1488);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)v175 = v59;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)v176 = v60;
      *(_WORD *)&v176[8] = 2048;
      v177 = v61;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "new internal estimates (%.3f %.3f %.3f)", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v120 = *(_QWORD *)(a1 + 1472);
      v121 = *(_QWORD *)(a1 + 1480);
      v122 = *(_QWORD *)(a1 + 1488);
      *(_DWORD *)v161 = 134218496;
      *(_QWORD *)&v161[4] = v120;
      *(_WORD *)&v161[12] = 2048;
      *(_QWORD *)v162 = v121;
      *(_WORD *)&v162[8] = 2048;
      v163 = v122;
      LODWORD(v158) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "new internal estimates (%.3f %.3f %.3f)", COERCE_DOUBLE(v161), v158, v159);
      v124 = (uint8_t *)v123;
      sub_100512490("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v123);
      if (v124 != buf)
        free(v124);
    }
    *(_BYTE *)(a1 + 57) = 1;
    if (*(_BYTE *)(a1 + 333))
    {
      v62 = *(double *)(a1 + 1472);
      *(float *)buf = v62;
      v63 = *(double *)(a1 + 1480);
      *(float *)v161 = v63;
      v64 = *(double *)(a1 + 1488);
      *(float *)&v159 = v64;
      sub_10007D084(a1 + 1248, (float *)buf);
      sub_10007D084(a1 + 1320, (float *)v161);
      sub_10007D084(a1 + 1392, (float *)&v159);
      if (*(_QWORD *)(a1 + 1312) < *(_QWORD *)(a1 + 1256))
      {
        sub_100AC4518((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1464));
        return 0;
      }
      if (sub_100AC9F94(a1, (unsigned int *)(a1 + 1596), *(_DWORD *)(a1 + 1464), (float *)&v158 + 1))
      {
        sub_100AC8404(a1);
        v84 = *(double *)(a1 + 1472);
        v85 = *(double *)(a1 + 1480);
        v86 = *(double *)(a1 + 1488);
        sub_100ACA33C(a1, v84, v85, v86);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v87 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
        {
          v88 = *(unsigned __int8 *)(a1 + 184);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v175 = v88;
          _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "taking new estimates, Internal. fIsCoasting (%d)", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 2))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v89 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)v161 = 67109120;
        *(_DWORD *)&v161[4] = v89;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "taking new estimates, Internal. fIsCoasting (%d)", v161);
        v91 = (uint8_t *)v90;
        sub_100512490("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v90);
      }
      else
      {
        sub_100AC4518((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1592));
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v112 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
        {
          v113 = *(unsigned __int8 *)(a1 + 184);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v175 = v113;
          _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEBUG, "new estimates denied, fIsCoasting (%d)", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 2))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v114 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)v161 = 67109120;
        *(_DWORD *)&v161[4] = v114;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "new estimates denied, fIsCoasting (%d)", v161);
        v91 = (uint8_t *)v115;
        sub_100512490("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v115);
      }
    }
    else
    {
      v81 = *(double *)(a1 + 1472);
      *(float *)buf = v81;
      v82 = *(double *)(a1 + 1480);
      *(float *)v161 = v82;
      v83 = *(double *)(a1 + 1488);
      *(float *)&v159 = v83;
      sub_10007D084(a1 + 1248, (float *)buf);
      sub_10007D084(a1 + 1320, (float *)v161);
      sub_10007D084(a1 + 1392, (float *)&v159);
      if (sub_100AC9F94(a1, (unsigned int *)(a1 + 1596), *(_DWORD *)(a1 + 1592), (float *)&v158 + 1))
      {
        if (*(_DWORD *)v4 == 3 && *(int *)(a1 + 20) >= 4)
        {
          sub_100AC44D0(a1 + 1232, (float *)(a1 + 72), (float *)(a1 + 76), (float *)(a1 + 80));
          return 0;
        }
        sub_100AC8404(a1);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v116 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
        {
          v117 = *(_DWORD *)v4;
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v175 = v117;
          _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEBUG, "taking new estimates, reached database. (%d)", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 2))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v118 = *(_DWORD *)v4;
        *(_DWORD *)v161 = 67109120;
        *(_DWORD *)&v161[4] = v118;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "taking new estimates, reached database. (%d)", v161);
        v91 = (uint8_t *)v119;
        sub_100512490("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v119);
      }
      else
      {
        sub_100AC4518((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1592));
        v105 = *((float *)&v158 + 1);
        if (*((float *)&v158 + 1) > 25.0 && !*(_BYTE *)(a1 + 184))
          *(_BYTE *)(a1 + 252) = 1;
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v106 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
        {
          v107 = *(_DWORD *)(a1 + 1592);
          v108 = *(unsigned __int8 *)(a1 + 252);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)v175 = v107;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = v108;
          *(_WORD *)v176 = 2048;
          *(double *)&v176[2] = v105;
          _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "new esitmates disagree with database. (%d,%d,%.3f)", buf, 0x18u);
        }
        if (!sub_1001BFF7C(115, 2))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v109 = *(_DWORD *)(a1 + 1592);
        v110 = *(unsigned __int8 *)(a1 + 252);
        *(_DWORD *)v161 = 67109632;
        *(_DWORD *)&v161[4] = v109;
        *(_WORD *)&v161[8] = 1024;
        *(_DWORD *)&v161[10] = v110;
        *(_WORD *)v162 = 2048;
        *(double *)&v162[2] = v105;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "new esitmates disagree with database. (%d,%d,%.3f)", v161, 24, v159);
        v91 = (uint8_t *)v111;
        sub_100512490("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v111);
      }
    }
    if (v91 != buf)
      free(v91);
    return 0;
  }
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v37 = *(_DWORD *)(a1 + 1592);
  v38 = *(_DWORD *)(a1 + 20);
  if (v37 >= v38)
    v39 = v36;
  else
    v39 = 0;
  if (v39 != 1)
  {
    if (v37 <= v38)
      return 0;
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v65 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v66 = *(_QWORD *)(a1 + 1472);
      v67 = *(_QWORD *)(a1 + 1480);
      v68 = *(_QWORD *)(a1 + 1488);
      v69 = *(_DWORD *)(a1 + 1596);
      v70 = *(_DWORD *)(a1 + 1600);
      v71 = *(_DWORD *)(a1 + 1604);
      v72 = *(_DWORD *)(a1 + 1592);
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)v175 = v66;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)v176 = v67;
      *(_WORD *)&v176[8] = 2048;
      v177 = v68;
      v178 = 2048;
      v179 = v10;
      v180 = 1024;
      v181 = v69;
      v182 = 1024;
      v183 = v70;
      v184 = 1024;
      v185 = v71;
      v186 = 1024;
      v187 = v72;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)", buf, 0x42u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v134 = *(_QWORD *)(a1 + 1472);
      v135 = *(_QWORD *)(a1 + 1480);
      v136 = *(_QWORD *)(a1 + 1488);
      v137 = *(_DWORD *)(a1 + 1596);
      v138 = *(_DWORD *)(a1 + 1600);
      v139 = *(_DWORD *)(a1 + 1604);
      v140 = *(_DWORD *)(a1 + 1592);
      *(_DWORD *)v161 = 134219776;
      *(_QWORD *)&v161[4] = v134;
      *(_WORD *)&v161[12] = 2048;
      *(_QWORD *)v162 = v135;
      *(_WORD *)&v162[8] = 2048;
      v163 = v136;
      v164 = 2048;
      v165 = v10;
      v166 = 1024;
      v167 = v137;
      v168 = 1024;
      v169 = v138;
      v170 = 1024;
      v171 = v139;
      v172 = 1024;
      v173 = v140;
      LODWORD(v158) = 66;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)", COERCE_DOUBLE(v161), v158, v159, v160);
      v142 = (uint8_t *)v141;
      sub_100512490("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v141);
      if (v142 != buf)
        free(v142);
    }
    sub_10041250C((_QWORD *)(a1 + 1248));
    sub_10041250C((_QWORD *)(a1 + 1320));
    sub_10041250C((_QWORD *)(a1 + 1392));
    v73 = *(double *)(a1 + 1472);
    *(float *)buf = v73;
    v74 = *(double *)(a1 + 1480);
    *(float *)v161 = v74;
    v75 = *(double *)(a1 + 1488);
    *(float *)&v159 = v75;
    sub_10007D084(a1 + 1248, (float *)buf);
    sub_10007D084(a1 + 1320, (float *)v161);
    sub_10007D084(a1 + 1392, (float *)&v159);
    goto LABEL_112;
  }
  if (v37 <= v38
    && (v40 = *(float *)(a1 + 72) - *(double *)(a1 + 1472),
        v41 = *(float *)(a1 + 76) - *(double *)(a1 + 1480),
        v42 = *(float *)(a1 + 80) - *(double *)(a1 + 1488),
        v43 = (float)(fabsf(v40) + fabsf(v41)) + fabsf(v42),
        10.0 / (double)v38 >= v43))
  {
    if (v43 <= 1.0)
      return 0;
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v92 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v93 = *(_QWORD *)(a1 + 1472);
      v94 = *(_QWORD *)(a1 + 1480);
      v95 = *(_QWORD *)(a1 + 1488);
      v96 = *(_DWORD *)(a1 + 1608);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)v175 = v93;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)v176 = v94;
      *(_WORD *)&v176[8] = 2048;
      v177 = v95;
      v178 = 1024;
      LODWORD(v179) = v96;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "estimates improved.(%.3f/%.3f/%.3f), numImprov=%d ", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v149 = *(_QWORD *)(a1 + 1472);
      v150 = *(_QWORD *)(a1 + 1480);
      v151 = *(_QWORD *)(a1 + 1488);
      v152 = *(_DWORD *)(a1 + 1608);
      *(_DWORD *)v161 = 134218752;
      *(_QWORD *)&v161[4] = v149;
      *(_WORD *)&v161[12] = 2048;
      *(_QWORD *)v162 = v150;
      *(_WORD *)&v162[8] = 2048;
      v163 = v151;
      v164 = 1024;
      LODWORD(v165) = v152;
      LODWORD(v158) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "estimates improved.(%.3f/%.3f/%.3f), numImprov=%d ", COERCE_DOUBLE(v161), v158, v159, LODWORD(v160));
      v154 = (uint8_t *)v153;
      sub_100512490("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v153);
      if (v154 != buf)
        free(v154);
    }
    v97 = *(double *)(a1 + 1472);
    *(float *)buf = v97;
    v98 = *(double *)(a1 + 1480);
    *(float *)v161 = v98;
    v99 = *(double *)(a1 + 1488);
    *(float *)&v159 = v99;
    sub_100AC44D0(a1 + 1232, (float *)buf, (float *)v161, (float *)&v159);
    v100 = 0;
    v101 = 0.0;
    do
    {
      v101 = v101 + (float)((float)*(unsigned int *)(a1 + v100 * 4 + 1596) * v190[v100]);
      ++v100;
    }
    while (v100 != 3);
    if (v101 >= 0.03 || (v102 = *(_DWORD *)(a1 + 1608) + 1, *(_DWORD *)(a1 + 1608) = v102, v102 < 2))
    {
LABEL_112:
      *(_BYTE *)(a1 + 244) = 1;
      return 0;
    }
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v103 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v104 = *(unsigned __int8 *)(a1 + 184);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v175 = v104;
      _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEBUG, "new estimates needed, fIsCoasting (%d)", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v155 = *(unsigned __int8 *)(a1 + 184);
      *(_DWORD *)v161 = 67109120;
      *(_DWORD *)&v161[4] = v155;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "new estimates needed, fIsCoasting (%d)", v161);
      v157 = (uint8_t *)v156;
      sub_100512490("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v156);
      if (v157 != buf)
        free(v157);
    }
    sub_100AC4518((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1592));
    *(_DWORD *)(a1 + 1608) = 0;
  }
  else
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v44 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v45 = *(_QWORD *)(a1 + 1472);
      v46 = *(_QWORD *)(a1 + 1480);
      v47 = *(_QWORD *)(a1 + 1488);
      v48 = *(_DWORD *)(a1 + 1596);
      v49 = *(_DWORD *)(a1 + 1600);
      v50 = *(_DWORD *)(a1 + 1604);
      v51 = *(_DWORD *)(a1 + 1592);
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)v175 = v45;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)v176 = v46;
      *(_WORD *)&v176[8] = 2048;
      v177 = v47;
      v178 = 2048;
      v179 = v10;
      v180 = 1024;
      v181 = v48;
      v182 = 1024;
      v183 = v49;
      v184 = 1024;
      v185 = v50;
      v186 = 1024;
      v187 = v51;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "calibrated, first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)", buf, 0x42u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v125 = *(_QWORD *)(a1 + 1472);
      v126 = *(_QWORD *)(a1 + 1480);
      v127 = *(_QWORD *)(a1 + 1488);
      v128 = *(_DWORD *)(a1 + 1596);
      v129 = *(_DWORD *)(a1 + 1600);
      v130 = *(_DWORD *)(a1 + 1604);
      v131 = *(_DWORD *)(a1 + 1592);
      *(_DWORD *)v161 = 134219776;
      *(_QWORD *)&v161[4] = v125;
      *(_WORD *)&v161[12] = 2048;
      *(_QWORD *)v162 = v126;
      *(_WORD *)&v162[8] = 2048;
      v163 = v127;
      v164 = 2048;
      v165 = v10;
      v166 = 1024;
      v167 = v128;
      v168 = 1024;
      v169 = v129;
      v170 = 1024;
      v171 = v130;
      v172 = 1024;
      v173 = v131;
      LODWORD(v158) = 66;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "calibrated, first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)", COERCE_DOUBLE(v161), v158, v159, v160);
      v133 = (uint8_t *)v132;
      sub_100512490("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v132);
      if (v133 != buf)
        free(v133);
    }
    v52 = *(double *)(a1 + 1472);
    *(float *)buf = v52;
    v53 = *(double *)(a1 + 1480);
    *(float *)v161 = v53;
    v54 = *(double *)(a1 + 1488);
    *(float *)&v159 = v54;
    sub_10007D084(a1 + 1248, (float *)buf);
    sub_10007D084(a1 + 1320, (float *)v161);
    sub_10007D084(a1 + 1392, (float *)&v159);
    *(_QWORD *)v161 = *(_QWORD *)(a1 + 168);
    *(_DWORD *)&v161[8] = *(_DWORD *)(a1 + 176);
    if (sub_100AC9F94(a1, (unsigned int *)v161, *(_DWORD *)(a1 + 1592), (float *)&v158 + 1))
    {
      if ((*(_DWORD *)(a1 + 172) + *(_DWORD *)(a1 + 168) + *(_DWORD *)(a1 + 176)) <= 2
        && (float)(*(float *)(a1 + 16) * 180.0) < (float)*(int *)(a1 + 236))
      {
        v55 = *(_DWORD *)(a1 + 1592);
        if (v55 >= 4 && v55 > *(_DWORD *)(a1 + 20))
        {
          sub_100AC4518((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), v55);
          return 0;
        }
      }
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v78 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        v79 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v175 = v79;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "taking new estimates, fIsCoasting (%d)", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v146 = *(unsigned __int8 *)(a1 + 184);
        LODWORD(v159) = 67109120;
        HIDWORD(v159) = v146;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "taking new estimates, fIsCoasting (%d)", &v159);
        v148 = (uint8_t *)v147;
        sub_100512490("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v147);
        if (v148 != buf)
          free(v148);
      }
      goto LABEL_112;
    }
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v76 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v77 = *(unsigned __int8 *)(a1 + 184);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v175 = v77;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "new estimates denied, fIsCoasting (%d)", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v143 = *(unsigned __int8 *)(a1 + 184);
      LODWORD(v159) = 67109120;
      HIDWORD(v159) = v143;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "new estimates denied, fIsCoasting (%d)", &v159);
      v145 = (uint8_t *)v144;
      sub_100512490("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v144);
      if (v145 != buf)
        free(v145);
    }
    sub_100AC4518((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1592));
  }
  return 0;
}

BOOL sub_100AC9F94(uint64_t a1, unsigned int *a2, int a3, float *a4)
{
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  float v25;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  double v33;
  __int128 v34;
  _BYTE v35[12];
  double v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint8_t buf[4];
  unsigned int v42;
  __int16 v43;
  unsigned int v44;
  __int16 v45;
  unsigned int v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;

  *a4 = 0.0;
  v8 = *(_QWORD *)(a1 + 1312);
  v9 = 0.0;
  v10 = 0.0;
  if (v8 >= 2)
  {
    v11 = (float)((float)v8 * *(float *)(a1 + 1268)) - (float)(*(float *)(a1 + 1264) * *(float *)(a1 + 1264));
    if (v11 >= 0.0)
      v10 = v11 / (float)((v8 - 1) * v8);
  }
  v12 = *(_QWORD *)(a1 + 1384);
  if (v12 >= 2)
  {
    v13 = (float)((float)v12 * *(float *)(a1 + 1340)) - (float)(*(float *)(a1 + 1336) * *(float *)(a1 + 1336));
    if (v13 >= 0.0)
      v9 = v13 / (float)((v12 - 1) * v12);
  }
  v14 = *(_QWORD *)(a1 + 1456);
  v15 = 0.0;
  if (v14 >= 2)
  {
    v16 = (float)((float)v14 * *(float *)(a1 + 1412)) - (float)(*(float *)(a1 + 1408) * *(float *)(a1 + 1408));
    if (v16 >= 0.0)
      v15 = v16 / (float)((v14 - 1) * v14);
  }
  v17 = (float)(v9 * (float)a2[1]) + (float)((float)*a2 * v10);
  v18 = (float)a2[2];
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021685A8);
  v19 = v17 + (float)(v18 * v15);
  v20 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v21 = *a2;
    v22 = a2[1];
    v23 = a2[2];
    v24 = *(_QWORD *)(a1 + 1312);
    *(_DWORD *)buf = 67111168;
    v42 = v21;
    v43 = 1024;
    v44 = v22;
    v45 = 1024;
    v46 = v23;
    v47 = 2048;
    v48 = v10;
    v49 = 2048;
    v50 = v9;
    v51 = 2048;
    v52 = v15;
    v53 = 2048;
    v54 = v19;
    v55 = 1024;
    v56 = a3;
    v57 = 1024;
    v58 = v24;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "new estimates calculated, converged(%d %d %d) Var (%.3f %.3f %.3f), remain (%.3f), level (%d), num=%d ", buf, 0x48u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v27 = a2[1];
    v28 = a2[2];
    v29 = *(_QWORD *)(a1 + 1312);
    LOWORD(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 2) = v27;
    HIWORD(v33) = 1024;
    LODWORD(v34) = v28;
    WORD2(v34) = 2048;
    *(double *)((char *)&v34 + 6) = v10;
    HIWORD(v34) = 2048;
    *(_WORD *)v35 = 2048;
    *(double *)&v35[2] = v15;
    *(_WORD *)&v35[10] = 2048;
    v36 = v19;
    v37 = 1024;
    v38 = a3;
    v39 = 1024;
    v40 = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "new estimates calculated, converged(%d %d %d) Var (%.3f %.3f %.3f), remain (%.3f), level (%d), num=%d ", &v32, 72, 67111168, v33, *(double *)&v34, *((double *)&v34 + 1), v9, *(_DWORD *)v35, *(_DWORD *)&v35[8]);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::sanityCheck(unsigned int *, CLMotionTypeCompassCalibrationLevel, float &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  v25 = 100.0 / (float)a3;
  if (v19 > v25)
    *a4 = (float)(v19 - v25) / v25;
  return v19 <= v25;
}

float sub_100ACA33C(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  float v9;
  float v10;
  float v11;

  v10 = a3;
  v11 = a2;
  v9 = a4;
  if (!*(_BYTE *)(a1 + 24))
    *(_BYTE *)(a1 + 57) = 1;
  *(_BYTE *)(a1 + 333) = 0;
  v5 = a1 + 1248;
  sub_10041250C((_QWORD *)(a1 + 1248));
  v6 = a1 + 1320;
  sub_10041250C((_QWORD *)(a1 + 1320));
  v7 = (_QWORD *)(a1 + 1392);
  sub_10041250C(v7);
  sub_10007D084(v5, &v11);
  sub_10007D084(v6, &v10);
  return sub_10007D084((uint64_t)v7, &v9);
}

void sub_100ACA3CC(uint64_t a1)
{
  float v1;
  double v2;
  unint64_t v3;
  float v4;
  float v5;
  unint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  NSObject *v10;
  const char *v11;
  float v12;
  int v13;
  float v14;
  unint64_t v15;
  float v16;
  unint64_t v17;
  float v18;
  float v19;
  int v20;
  float v21;
  NSObject *v22;
  NSObject *v23;
  float v24;
  double v25;
  double v26;
  NSObject *v27;
  uint8_t *v28;
  _QWORD v29[2];
  uint8_t buf[1640];

  if (!*(_BYTE *)(a1 + 184))
    return;
  v1 = *(float *)(a1 + 16);
  v2 = v1;
  v3 = *(_QWORD *)(a1 + 1144);
  if (v1 * 8.0 < (double)*(int *)(a1 + 248))
  {
    v4 = 0.0;
    if (v3 >= 2)
    {
      v5 = (float)((float)v3 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
      if (v5 >= 0.0)
        v4 = v5 / (float)((v3 - 1) * v3);
    }
    if (v4 < 0.01)
    {
      v6 = *(_QWORD *)(a1 + 1072);
      if (v6 < 2
        || (v7 = (float)((float)v6 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024)),
            v7 < 0.0)
        || (float)(v7 / (float)((v6 - 1) * v6)) < 20.0)
      {
        v8 = *(_QWORD *)(a1 + 1216);
        if (v8 < 2
          || (v9 = (float)((float)v8 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168)),
              v9 < 0.0)
          || (float)(v9 / (float)((v8 - 1) * v8)) < 10.0)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021685A8);
          v10 = qword_10229FD48;
          if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Bad heading divergence for too long. Prompt user to re-calibrate.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD40 != -1)
              dispatch_once(&qword_10229FD40, &stru_1021685A8);
            LOWORD(v29[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Bad heading divergence for too long. Prompt user to re-calibrate.", v29, 2, v29[0]);
LABEL_74:
            v28 = (uint8_t *)v11;
            sub_100512490("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::resetAfterCoasting()", "%s\n", v11);
            if (v28 != buf)
              free(v28);
            return;
          }
          return;
        }
      }
    }
  }
  if (v3)
  {
    v12 = *(float *)(a1 + 1096);
    if ((float)(v12 / (float)v3) >= 1.0)
    {
      v20 = *(_DWORD *)(a1 + 232);
      if (roundf(v1 * 120.0) >= (float)v20
        || v3 >= 2
        && (v21 = (float)((float)v3 * *(float *)(a1 + 1100)) - (float)(v12 * v12), v21 >= 0.0)
        && (float)(v21 / (float)((v3 - 1) * v3)) >= 0.04)
      {
        if (round(v2 * 360.0) < (double)v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021685A8);
          v23 = qword_10229FD48;
          if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Coasting for too long. Exit coasting.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD40 != -1)
              dispatch_once(&qword_10229FD40, &stru_1021685A8);
            LOWORD(v29[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Coasting for too long. Exit coasting.", v29, 2, v29[0]);
            goto LABEL_74;
          }
        }
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v22 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Waiting too long for high magnitude interference to go away. Exit coasting.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021685A8);
          LOWORD(v29[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Waiting too long for high magnitude interference to go away. Exit coasting.", v29, 2, v29[0]);
          goto LABEL_74;
        }
      }
      return;
    }
  }
  v13 = *(_DWORD *)(a1 + 232);
  if (roundf(v1 * 120.0) > (float)v13)
  {
    if (!*(_BYTE *)(a1 + 333))
      return;
    if (round(v2 * 30.0) > (double)v13)
      return;
    if (*(float *)(a1 + 1224) <= 30.0)
      return;
    if (v3 >= 2)
    {
      v14 = (float)((float)v3 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
      if (v14 >= 0.0 && (float)(v14 / (float)((v3 - 1) * v3)) >= 0.01)
        return;
    }
    v15 = *(_QWORD *)(a1 + 1072);
    if (v15 >= 2)
    {
      v16 = (float)((float)v15 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
      if (v16 >= 0.0 && (float)(v16 / (float)((v15 - 1) * v15)) >= 200.0)
        return;
    }
    v17 = *(_QWORD *)(a1 + 1216);
    if (v17 >= 2)
    {
      v19 = (float)v17;
      v18 = *(float *)(a1 + 1168);
      v24 = (float)((float)v17 * *(float *)(a1 + 1172)) - (float)(v18 * v18);
      if (v24 >= 0.0 && (float)(v24 / (float)((v17 - 1) * v17)) >= 100.0)
        return;
    }
    else
    {
      if (!v17)
      {
        v25 = 0.0;
LABEL_61:
        if (v15)
          v26 = (float)(*(float *)(a1 + 1024) / (float)v15) * 0.9;
        else
          v26 = 0.0;
        if (v26 <= v25)
          return;
        goto LABEL_65;
      }
      v18 = *(float *)(a1 + 1168);
      v19 = (float)v17;
    }
    v25 = (float)(v18 / v19);
    goto LABEL_61;
  }
LABEL_65:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021685A8);
  v27 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Waiting too long for internal re-calibration. Prompt user.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    LOWORD(v29[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Waiting too long for internal re-calibration. Prompt user.", v29, 2, v29[0]);
    goto LABEL_74;
  }
}

void sub_100ACAB0C(uint64_t a1, int a2, int *a3)
{
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  int v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;

  *(_BYTE *)(a1 + 60) = a2;
  if (a2)
  {
    v4 = *a3;
    *(_DWORD *)(a1 + 120) = *a3;
    v5 = a3[1];
    *(_DWORD *)(a1 + 124) = v5;
    v6 = a3[2];
    *(_DWORD *)(a1 + 128) = v6;
    *(_DWORD *)(a1 + 200) = v4;
    *(_DWORD *)(a1 + 204) = v5;
    *(_DWORD *)(a1 + 208) = v6;
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v7 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(float *)(a1 + 200);
      v9 = *(float *)(a1 + 204);
      v10 = *(float *)(a1 + 208);
      v11 = *(float *)(a1 + 120);
      v12 = *(float *)(a1 + 124);
      v13 = *(float *)(a1 + 128);
      *(_DWORD *)buf = 134219264;
      v36 = v8;
      v37 = 2048;
      v38 = v9;
      v39 = 2048;
      v40 = v10;
      v41 = 2048;
      v42 = v11;
      v43 = 2048;
      v44 = v12;
      v45 = 2048;
      v46 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "fCoastingVecPrint: %.3f, %.3f, %.3f, %.3f, %.3f, %.3f", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v14 = *(float *)(a1 + 200);
      v15 = *(float *)(a1 + 204);
      v16 = *(float *)(a1 + 208);
      v17 = *(float *)(a1 + 120);
      v18 = *(float *)(a1 + 124);
      v19 = *(float *)(a1 + 128);
      v23 = 134219264;
      v24 = v14;
      v25 = 2048;
      v26 = v15;
      v27 = 2048;
      v28 = v16;
      v29 = 2048;
      v30 = v17;
      v31 = 2048;
      v32 = v18;
      v33 = 2048;
      v34 = v19;
      LODWORD(v22) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "fCoastingVecPrint: %.3f, %.3f, %.3f, %.3f, %.3f, %.3f", COERCE_DOUBLE(&v23), v22);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::referenceAttitudeChanged(BOOL, const CLMotionTypeMagneticField &)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
  }
}

void sub_100ACAD84(uint64_t a1, float *a2, uint64_t a3)
{
  float v6;
  float v7;
  __int128 v8;
  __int128 v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  float v25;
  unint64_t v26;
  float32_t v27;
  NSObject *v28;
  unint64_t v29;
  NSObject *v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  float v35;
  int v36;
  char v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  NSObject *v44;
  unint64_t v45;
  NSObject *v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  NSObject *v52;
  const char *v53;
  float v54;
  float v60;
  float v61;
  double v62;
  NSObject *v63;
  int v64;
  int v65;
  const char *v66;
  uint64_t v67;
  float v68;
  double v69;
  double v70;
  int v71;
  int v72;
  double v73;
  int v74;
  __int128 v75;
  float v76;
  NSObject *v77;
  const char *v78;
  char *v79;
  const char *v80;
  char *v81;
  const char *v82;
  int v83;
  const char *v84;
  char *v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  char *v91;
  double v92;
  __int128 v93;
  __int128 v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100[4];
  uint64_t (**v101)();
  float v102;
  float v103;
  float v104;
  uint64_t (**v105)();
  int v106;
  int v107;
  float v108;
  uint64_t (**v109)();
  float v110;
  float v111;
  int v112;
  int v113;
  _BYTE v114[60];
  __int16 v115;
  uint64_t v116;
  _BYTE buf[64];
  __int16 v118;
  uint64_t v119;

  if (!a3)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v10 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Attitude data not set.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      LOWORD(v113) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Attitude data not set.", &v113, 2);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v11);
      goto LABEL_102;
    }
    return;
  }
  ++*(_DWORD *)(a1 + 324);
  sub_100ACA3CC(a1);
  *(_BYTE *)(a1 + 59) = 0;
  *(_BYTE *)(a1 + 25) = 0;
  sub_100AC40D8((float32x2_t *)(a1 + 336), (double *)a3);
  v6 = sub_100A00188((double *)a3);
  v7 = sub_100A001A4((double *)a3);
  *(float *)&v8 = sub_100A001C0((double *)a3);
  v109 = off_1021388A0;
  v110 = v6;
  v111 = v7;
  v112 = v8;
  if (*(_BYTE *)(a1 + 56))
  {
    sub_100AC4A14(a1, a2, (float32x2_t *)(a1 + 336));
    v9 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 432) = v9;
    if ((float *)(a1 + 448) != a2)
    {
      *(_QWORD *)(a1 + 456) = *((_QWORD *)a2 + 1);
      *(float *)(a1 + 464) = a2[4];
    }
    *(_BYTE *)(a1 + 332) = 1;
    *(_BYTE *)(a1 + 56) = 0;
  }
  else if (!*(_BYTE *)(a1 + 332))
  {
    goto LABEL_17;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
    *(_BYTE *)(a1 + 332) = 0;
LABEL_17:
  *(int32x2_t *)&v8 = vadd_s32(*(int32x2_t *)(a1 + 236), (int32x2_t)0x100000001);
  *(_QWORD *)(a1 + 236) = v8;
  v13 = *(_QWORD *)(a1 + 1000);
  v14 = *(_QWORD *)(v13 + 64);
  LODWORD(v8) = 0;
  v94 = v8;
  v15 = 0.0;
  v16 = 0.0;
  if (v14)
  {
    v17 = *(float *)(v13 + 16);
    v15 = v17 / (float)v14;
    if (v14 != 1)
    {
      v18 = (float)((float)v14 * *(float *)(v13 + 20)) - (float)(v17 * v17);
      if (v18 >= 0.0)
        v16 = v18 / (float)((v14 - 1) * v14);
    }
  }
  v19 = v16 <= 6.0 && v15 <= 4.7124;
  v20 = v16 <= 0.8 && v15 <= 1.5708;
  sub_10007D084(a1 + 552, a2 + 2);
  sub_10007D084(a1 + 624, a2 + 3);
  sub_10007D084(a1 + 696, a2 + 4);
  v23 = *(_QWORD *)(a1 + 616);
  if (v23)
  {
    *(float *)&v21 = *(float *)(a1 + 568) / (float)v23;
    v94 = v21;
  }
  v24 = *(_QWORD *)(a1 + 688);
  v25 = 0.0;
  LODWORD(v22) = 0;
  if (v24)
    *(float *)&v22 = *(float *)(a1 + 640) / (float)v24;
  v26 = *(_QWORD *)(a1 + 760);
  if (v26)
    v25 = *(float *)(a1 + 712) / (float)v26;
  v105 = off_1021388A0;
  v106 = v94;
  v107 = v22;
  v108 = v25;
  v101 = off_1021388A0;
  v102 = *(float *)&v94;
  v103 = *(float *)&v22;
  v93 = v22;
  v104 = v25;
  v27 = sub_100ACC020((float32x2_t *)a1, (float32x2_t *)&v101);
  if ((*(unsigned int (**)(uint64_t, float32_t))(*(_QWORD *)a1 + 72))(a1, v27))
  {
    if (*(_BYTE *)(a1 + 60))
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v28 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "Compass-withFusion";
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Type,%s,Updating reference frame.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v113 = 136315138;
        *(_QWORD *)v114 = "Compass-withFusion";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Type,%s,Updating reference frame.", (const char *)&v113);
        v81 = (char *)v80;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v80);
        if (v81 != buf)
          free(v81);
      }
      *(_BYTE *)(a1 + 60) = 0;
    }
    if (sub_100AC62C8(a1, (float *)&v101, (float *)&v109, v19, v20))
      return;
    if (*(_BYTE *)(a1 + 184))
    {
      HIDWORD(v29) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
      LODWORD(v29) = HIDWORD(v29);
      if ((v29 >> 1) <= 0x19999998)
      {
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v30 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
        {
          v31 = *(unsigned __int8 *)(a1 + 333);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Updating during coasting, fIsResetInternal(%d)", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021685A8);
          v83 = *(unsigned __int8 *)(a1 + 333);
          v113 = 67109120;
          *(_DWORD *)v114 = v83;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Updating during coasting, fIsResetInternal(%d)", &v113);
          v85 = (char *)v84;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v84);
          if (v85 != buf)
            free(v85);
        }
      }
    }
    if (*(_BYTE *)(a1 + 185))
      v32 = v20;
    else
      v32 = 0;
    if (v32 == 1)
    {
      v33 = *(_DWORD *)(a1 + 324);
      v34 = v15 > 0.15;
      if (v16 >= 0.01)
        v34 = 0;
      if (*(_BYTE *)(a1 + 313))
        goto LABEL_64;
      v35 = fabsf(*(float *)(a1 + 308));
      v36 = *(_DWORD *)(a1 + 304);
      if (v36 >= 2 && v35 > (float)((float)((float)(v33 - *(_DWORD *)(a1 + 316)) / *(float *)(a1 + 16)) * 40.0))
        goto LABEL_64;
      if (v36 >= 6 && v35 > 100.0)
        goto LABEL_64;
      v37 = !v34;
      if (v36 < 7)
        v37 = 1;
      if ((v37 & 1) != 0 || v35 <= 70.0)
      {
        v76 = (float)((float)(*(float *)(a1 + 384) * v103) + (float)(v102 * *(float *)(a1 + 360)))
            + (float)(v104 * *(float *)(a1 + 408));
        *(float32x2_t *)(a1 + 120) = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(a1 + 376), v103), *(float32x2_t *)(a1 + 352), v102), *(float32x2_t *)(a1 + 400), v104);
        *(float *)(a1 + 128) = v76;
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v77 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v16;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "resync coasting vector. rotM,%.3f,rotV,%.3f", buf, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_71;
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v113 = 134218240;
        *(double *)v114 = v15;
        *(_WORD *)&v114[8] = 2048;
        *(double *)&v114[10] = v16;
        LODWORD(v92) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "resync coasting vector. rotM,%.3f,rotV,%.3f", COERCE_DOUBLE(&v113), v92);
        v79 = (char *)v78;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v78);
      }
      else
      {
LABEL_64:
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 264);
        *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 272);
        v38 = *(float *)(a1 + 288);
        v39 = *(float *)(a1 + 292);
        *(float *)(a1 + 120) = v38;
        *(float *)(a1 + 124) = v39;
        v40 = *(float *)(a1 + 296);
        *(float *)(a1 + 128) = v40;
        *(_DWORD *)(a1 + 328) = v33;
        *(_QWORD *)(a1 + 264) = 0;
        *(_DWORD *)(a1 + 272) = 0;
        *(_QWORD *)(a1 + 288) = 0;
        *(_DWORD *)(a1 + 296) = 0;
        *(_QWORD *)(a1 + 304) = 0;
        *(_WORD *)(a1 + 312) = 0;
        if (!*(_BYTE *)(a1 + 333))
        {
          v41 = (float)((float)(v39 * *(float *)(a1 + 356)) + (float)(v38 * *(float *)(a1 + 352)))
              + (float)(v40 * *(float *)(a1 + 360));
          v42 = (float)((float)(v39 * *(float *)(a1 + 380)) + (float)(v38 * *(float *)(a1 + 376)))
              + (float)(v40 * *(float *)(a1 + 384));
          v43 = (float)((float)(v39 * *(float *)(a1 + 404)) + (float)(v38 * *(float *)(a1 + 400)))
              + (float)(v40 * *(float *)(a1 + 408));
          *(_QWORD *)buf = off_1021388A0;
          *(float *)&buf[8] = v41;
          *(float *)&buf[12] = v42;
          *(float *)&buf[16] = v43;
          sub_100AC4518((float64x2_t *)a1, (float *)buf, (float32x2_t *)(a1 + 336), 3);
        }
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v44 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "BACKUP resync coasting vector", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_71;
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        LOWORD(v113) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "BACKUP resync coasting vector", &v113, 2);
        v79 = (char *)v82;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v82);
      }
      if (v79 != buf)
        free(v79);
LABEL_71:
      sub_100AC417C(a1, 1);
      goto LABEL_78;
    }
    HIDWORD(v45) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
    LODWORD(v45) = HIDWORD(v45);
    if ((v45 >> 1) <= 0x19999998)
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v46 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        v47 = *(double *)a3;
        v48 = *(_QWORD *)(a3 + 8);
        v49 = *(_QWORD *)(a3 + 16);
        v50 = *(_QWORD *)(a3 + 24);
        *(_DWORD *)buf = 67110912;
        *(_DWORD *)&buf[4] = v19;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v20;
        *(_WORD *)&buf[14] = 2048;
        *(double *)&buf[16] = v15;
        *(_WORD *)&buf[24] = 2048;
        *(double *)&buf[26] = v16;
        *(_WORD *)&buf[34] = 2048;
        *(double *)&buf[36] = v47;
        *(_WORD *)&buf[44] = 2048;
        *(_QWORD *)&buf[46] = v48;
        *(_WORD *)&buf[54] = 2048;
        *(_QWORD *)&buf[56] = v49;
        v118 = 2048;
        v119 = v50;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "device status: (smooth static) = (%d %d), rotM,%.3f,rotV,%.3f, q.x,%.3f,q.y,%.3f,q.z,%.3f,q.w,%.3f)", buf, 0x4Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v86 = *(double *)a3;
        v87 = *(_QWORD *)(a3 + 8);
        v88 = *(_QWORD *)(a3 + 16);
        v89 = *(_QWORD *)(a3 + 24);
        v113 = 67110912;
        *(_DWORD *)v114 = v19;
        *(_WORD *)&v114[4] = 1024;
        *(_DWORD *)&v114[6] = v20;
        *(_WORD *)&v114[10] = 2048;
        *(double *)&v114[12] = v15;
        *(_WORD *)&v114[20] = 2048;
        *(double *)&v114[22] = v16;
        *(_WORD *)&v114[30] = 2048;
        *(double *)&v114[32] = v86;
        *(_WORD *)&v114[40] = 2048;
        *(_QWORD *)&v114[42] = v87;
        *(_WORD *)&v114[50] = 2048;
        *(_QWORD *)&v114[52] = v88;
        v115 = 2048;
        v116 = v89;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "device status: (smooth static) = (%d %d), rotM,%.3f,rotV,%.3f, q.x,%.3f,q.y,%.3f,q.z,%.3f,q.w,%.3f)", &v113, 74, *(double *)&v93, *((double *)&v93 + 1), *(double *)&v94, *((double *)&v94 + 1), v95, v96);
        v91 = (char *)v90;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v90);
        if (v91 != buf)
          free(v91);
      }
    }
  }
LABEL_78:
  if (*(_BYTE *)(a1 + 57) && *(_DWORD *)(a1 + 20) == 5 && *(_BYTE *)(a1 + 220))
  {
    HIDWORD(v51) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
    LODWORD(v51) = HIDWORD(v51);
    if ((v51 >> 2) <= 0xCCCCCCC)
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v52 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "coasting vector is mature, no more updating", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        LOWORD(v113) = 0;
        LODWORD(v92) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "coasting vector is mature, no more updating", &v113, *(_QWORD *)&v92);
        v12 = (char *)v53;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v53);
LABEL_102:
        if (v12 != buf)
          free(v12);
      }
    }
  }
  else
  {
    sub_100A002A8((uint64_t)v100, a1 + 416);
    sub_100A002C4(&v96, v100, (double *)a3);
    v54 = fabs(v96) + fabs(v97) + fabs(v98) + fabs(v99);
    if (v54 >= 1.001)
      goto LABEL_105;
    __asm { FMOV            V3.2S, #1.0 }
    v60 = vaddv_f32(vabs_f32(vdiv_f32(vsub_f32((float32x2_t)__PAIR64__(v93, v94), *(float32x2_t *)(a1 + 456)), (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32((float32x2_t)__PAIR64__(v93, v94)), _D3, (int8x8_t)__PAIR64__(v93, v94)))));
    v61 = 1.0;
    if (v25 != 0.0)
      v61 = v25;
    v62 = (float)(v60 + fabsf((float)(v25 - *(float *)(a1 + 464)) / v61));
    if (v62 <= 0.2)
    {
LABEL_105:
      if (*(_BYTE *)(a1 + 57) && *(_DWORD *)(a1 + 20) == 5)
      {
        if ((v20 & 1) == 0)
        {
          ++*(_DWORD *)(a1 + 472);
          --*(_DWORD *)(a1 + 236);
          return;
        }
        if (!*(_BYTE *)(a1 + 184)
          && !*(_BYTE *)(a1 + 220)
          && (float)(*(float *)(a1 + 16) * 4.0) <= (float)*(int *)(a1 + 236))
        {
          *(_BYTE *)(a1 + 220) = 1;
        }
      }
      v67 = 0;
      v68 = 0.0;
      do
      {
        v68 = v68 + *(float *)(*(_QWORD *)(a1 + 1568) + v67);
        v67 += 40;
      }
      while (v67 != 360);
      v69 = exp(v68 * 5.0) * 15.0;
      if (v69 > 5000.0)
        v69 = 5000.0;
      if (v69 < 300.0)
        v69 = 300.0;
      v70 = exp(-1.0 / *(float *)(a1 + 16) / v69);
      v71 = *(_DWORD *)(a1 + 472);
      if (v71 < 2)
      {
        v73 = v70;
      }
      else
      {
        v72 = v71 - 1;
        v73 = v70;
        do
        {
          v73 = v70 * v73;
          --v72;
        }
        while (v72);
      }
      v74 = *(_DWORD *)(a1 + 20);
      sub_100AC7F70(a1, v73);
      sub_100AC8094(a1, (float32x2_t *)&v105, a1 + 336, v74 > 0, 1.0);
      sub_100AC8680(a1, (float *)&v101);
      if (*(_BYTE *)(a1 + 244))
      {
        sub_100ACC0B0(a1);
        sub_100AC417C(a1, 0);
        *(_BYTE *)(a1 + 244) = 0;
        *(_BYTE *)(a1 + 220) = 0;
      }
      *(_DWORD *)(a1 + 472) = 0;
      v75 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 432) = v75;
      *(_DWORD *)(a1 + 456) = v94;
      *(_DWORD *)(a1 + 460) = v93;
      *(float *)(a1 + 464) = v25;
    }
    else
    {
      ++*(_DWORD *)(a1 + 472);
      --*(_DWORD *)(a1 + 236);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021685A8);
      v63 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        v64 = *(_DWORD *)(a1 + 472);
        *(_DWORD *)buf = 67110400;
        *(_DWORD *)&buf[4] = v64;
        *(_WORD *)&buf[8] = 2048;
        *(double *)&buf[10] = v96;
        *(_WORD *)&buf[18] = 2048;
        *(double *)&buf[20] = v97;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v98;
        *(_WORD *)&buf[38] = 2048;
        *(double *)&buf[40] = v99;
        *(_WORD *)&buf[48] = 2048;
        *(double *)&buf[50] = v62;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "numSamplesSkipped (%d), deltaQ (%.3f/%.3f/%.3f/%.3f), deltaReadingM (%.3f)", buf, 0x3Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021685A8);
        v65 = *(_DWORD *)(a1 + 472);
        v113 = 67110400;
        *(_DWORD *)v114 = v65;
        *(_WORD *)&v114[4] = 2048;
        *(double *)&v114[6] = v96;
        *(_WORD *)&v114[14] = 2048;
        *(double *)&v114[16] = v97;
        *(_WORD *)&v114[24] = 2048;
        *(double *)&v114[26] = v98;
        *(_WORD *)&v114[34] = 2048;
        *(double *)&v114[36] = v99;
        *(_WORD *)&v114[44] = 2048;
        *(double *)&v114[46] = v62;
        LODWORD(v92) = 58;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "numSamplesSkipped (%d), deltaQ (%.3f/%.3f/%.3f/%.3f), deltaReadingM (%.3f)", &v113, v92, *(double *)&v93, *((double *)&v93 + 1), *(double *)&v94, *((double *)&v94 + 1));
        v12 = (char *)v66;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v66);
        goto LABEL_102;
      }
    }
  }
}

float32_t sub_100ACC020(float32x2_t *a1, float32x2_t *a2)
{
  float32_t result;
  float32_t v5;
  float32x2_t v11;

  if ((*(unsigned int (**)(float32x2_t *))(*(_QWORD *)a1 + 72))(a1))
  {
    v5 = (a1[13].f32[0] + 1.0) * a2[2].f32[0];
    a2[2].f32[0] = v5;
    result = v5 - a1[10].f32[0];
    __asm { FMOV            V2.2D, #1.0 }
    v11 = vcvt_f32_f64(vmulq_f64(vaddq_f64(vcvtq_f64_f32(a1[12]), _Q2), vcvtq_f64_f32(a2[1])));
    a2[1] = v11;
    a2[1] = vsub_f32(v11, a1[9]);
    a2[2].f32[0] = result;
  }
  return result;
}

void sub_100ACC0B0(uint64_t a1)
{
  int v2;
  int v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint8_t *v36;
  double v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint8_t buf[4];
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 1592);
  if (v2 >= 2)
  {
    if (v2 != v3)
      goto LABEL_4;
    v4 = *(double *)(a1 + 1472);
    v5 = vabdd_f64(*(float *)(a1 + 520), v4);
    LODWORD(v4) = *(_DWORD *)(a1 + 1596);
    v6 = *(double *)(a1 + 1480);
    v7 = vabdd_f64(*(float *)(a1 + 524), v6);
    LODWORD(v6) = *(_DWORD *)(a1 + 1600);
    v8 = v7 * (double)*(unint64_t *)&v6 + v5 * (double)*(unint64_t *)&v4;
    v9 = *(double *)(a1 + 1488);
    v10 = vabdd_f64(*(float *)(a1 + 528), v9);
    LODWORD(v9) = *(_DWORD *)(a1 + 1604);
    *(float *)&v8 = v8 + v10 * (double)*(unint64_t *)&v9;
    v3 = *(_DWORD *)(a1 + 20);
    if (*(float *)&v8 > 2.5)
LABEL_4:
      *(_BYTE *)(a1 + 25) = 1;
  }
  v11 = *(double *)(a1 + 1472);
  v12 = *(double *)(a1 + 1480);
  v13 = *(double *)(a1 + 1488);
  *(float *)(a1 + 72) = v11;
  *(float *)(a1 + 76) = v12;
  *(float *)(a1 + 80) = v13;
  v14 = *(double *)(a1 + 1512);
  *(float32x2_t *)(a1 + 96) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1496));
  *(float *)(a1 + 104) = v14;
  v15 = *(double *)(a1 + 1536);
  *(float32x2_t *)(a1 + 120) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1520));
  *(float *)(a1 + 128) = v15;
  *(_DWORD *)(a1 + 20) = v3;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a1 + 1596);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 1604);
  if (*(_BYTE *)(a1 + 25))
  {
    *(float *)(a1 + 520) = v11;
    *(float *)(a1 + 524) = v12;
    *(float *)(a1 + 528) = v13;
  }
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 252) = 0;
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021685A8);
  v16 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v17 = *(_QWORD *)(a1 + 1472);
    v18 = *(_QWORD *)(a1 + 1480);
    v19 = *(_QWORD *)(a1 + 1488);
    v20 = *(_QWORD *)(a1 + 1496);
    v21 = *(_QWORD *)(a1 + 1504);
    v22 = *(_QWORD *)(a1 + 1512);
    v23 = *(_QWORD *)(a1 + 1520);
    v24 = *(_QWORD *)(a1 + 1528);
    v25 = *(_QWORD *)(a1 + 1536);
    *(_DWORD *)buf = 134220032;
    v57 = v17;
    v58 = 2048;
    v59 = v18;
    v60 = 2048;
    v61 = v19;
    v62 = 2048;
    v63 = v20;
    v64 = 2048;
    v65 = v21;
    v66 = 2048;
    v67 = v22;
    v68 = 2048;
    v69 = v23;
    v70 = 2048;
    v71 = v24;
    v72 = 2048;
    v73 = v25;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "bias.x,%.3f,bias.y,%.3f,bias.z,%.3f,scale.x,%.5f,scale.y,%.5f,scale.z,%.5f,extF.x,%.3f,extF.y,%.3f,extF.z,%.3f", buf, 0x5Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021685A8);
    v26 = *(_QWORD *)(a1 + 1472);
    v27 = *(_QWORD *)(a1 + 1480);
    v28 = *(_QWORD *)(a1 + 1488);
    v29 = *(_QWORD *)(a1 + 1496);
    v30 = *(_QWORD *)(a1 + 1504);
    v31 = *(_QWORD *)(a1 + 1512);
    v32 = *(_QWORD *)(a1 + 1520);
    v33 = *(_QWORD *)(a1 + 1528);
    v34 = *(_QWORD *)(a1 + 1536);
    v38 = 134220032;
    v39 = v26;
    v40 = 2048;
    v41 = v27;
    v42 = 2048;
    v43 = v28;
    v44 = 2048;
    v45 = v29;
    v46 = 2048;
    v47 = v30;
    v48 = 2048;
    v49 = v31;
    v50 = 2048;
    v51 = v32;
    v52 = 2048;
    v53 = v33;
    v54 = 2048;
    v55 = v34;
    LODWORD(v37) = 92;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "bias.x,%.3f,bias.y,%.3f,bias.z,%.3f,scale.x,%.5f,scale.y,%.5f,scale.z,%.5f,extF.x,%.3f,extF.y,%.3f,extF.z,%.3f", COERCE_DOUBLE(&v38), v37);
    v36 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::setCalibrationValues()", "%s\n", v35);
    if (v36 != buf)
      free(v36);
  }
}

float32_t sub_100ACC438(float32x2_t *a1, float *a2, float32x2_t *a3, double *a4)
{
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;

  sub_100AC40D8(a1 + 42, a4);
  v7 = a1[48].f32[0];
  v8 = a1[47].f32[0];
  v9 = a1[47].f32[1];
  v10 = 51;
  if (!a1[23].i8[0])
    v10 = 31;
  v11 = 25;
  if (!a1[23].i8[0])
    v11 = 15;
  v12 = 26;
  if (!a1[23].i8[0])
    v12 = 16;
  v13 = a1[v12].f32[0];
  v14 = a1[v11].f32[0];
  v15 = a1->f32[v10];
  v16 = (float)((float)(v15 * a1[50].f32[1]) + (float)(v14 * a1[50].f32[0])) + (float)(v13 * a1[51].f32[0]);
  a2[2] = (float)((float)(v15 * a1[44].f32[1]) + (float)(v14 * a1[44].f32[0])) + (float)(v13 * a1[45].f32[0]);
  a2[3] = (float)((float)(v15 * v9) + (float)(v14 * v8)) + (float)(v13 * v7);
  a2[4] = v16;
  return sub_100ACC020(a1, a3);
}

float32_t sub_100ACC500(float32x2_t *a1, float32x2_t *a2, double *a3)
{
  float v5;
  float v6;
  float v7;
  float32_t v8;
  float32_t v9;
  float32_t result;

  if (!a1[23].i8[0])
    return sub_100ACC020(a1, a2);
  sub_100AC40D8(a1 + 42, a3);
  v6 = a1[25].f32[1];
  v5 = a1[26].f32[0];
  v7 = a1[25].f32[0];
  v8 = (float)((float)(v6 * a1[50].f32[1]) + (float)(v7 * a1[50].f32[0])) + (float)(v5 * a1[51].f32[0]);
  v9 = (float)((float)(v6 * a1[47].f32[1]) + (float)(v7 * a1[47].f32[0])) + (float)(v5 * a1[48].f32[0]);
  result = (float)((float)(v6 * a1[44].f32[1]) + (float)(v7 * a1[44].f32[0])) + (float)(v5 * a1[45].f32[0]);
  a2[1].f32[0] = result;
  a2[1].f32[1] = v9;
  a2[2].f32[0] = v8;
  return result;
}

float sub_100ACC5A0(uint64_t a1, _QWORD *a2)
{
  float result;

  *(_QWORD *)(a1 + 8) = *a2;
  result = 1.0 / *(double *)a2;
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  return result;
}

float sub_100ACC5D4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  float result;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 72);
  result = *(float *)(a1 + 80);
  *(float *)(a2 + 8) = result;
  *a3 = *(_DWORD *)(a1 + 20);
  return result;
}

uint64_t sub_100ACC5F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 332);
}

uint64_t sub_100ACC5F8()
{
  return 5;
}

uint64_t sub_100ACC600(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 59);
}

void sub_100ACC608(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_100ACC634()
{
  uint64_t result;

  if (qword_1023111B0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023111B0 + 8))(qword_1023111B0);
  if (qword_1023111B8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023111B8 + 8))(qword_1023111B8);
  result = qword_1023111C0;
  if (qword_1023111C0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1023111C0 + 8))(qword_1023111C0);
  return result;
}

void sub_100ACC690(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_102306A78 & 1) == 0)
  {
    byte_102306A78 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPTropicalSavannaLogEntry.pb.cc", a4);
    operator new();
  }
}

_QWORD *sub_100ACC7D4(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_102168608;
  return result;
}

double sub_100ACC7E8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102168680;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

double sub_100ACC804(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021686F8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_100ACC820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPTropicalSavannaLogEntry.pb.cc", 204);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      operator new();
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_1023111B0 + 8);
    sub_100ACCD10(v5, v6);
  }
}

void sub_100ACC8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100ACC90C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102168608;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023111B0 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100ACC960(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100ACC90C(a1);
  operator delete();
}

uint64_t sub_100ACC984(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_1023111B0;
  if (!qword_1023111B0)
  {
    sub_100ACC690(0, a2, a3, a4);
    return qword_1023111B0;
  }
  return result;
}

void sub_100ACC9B0()
{
  operator new();
}

uint64_t sub_100ACC9E8(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = sub_100ACCA1C(result);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100ACCA1C(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  LOBYTE(v1) = *(_BYTE *)(result + 36);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(result + 36) & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 36))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_QWORD *)(v2 + 16) = 0;
          *(_QWORD *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 36) = 0;
        v1 = *(_DWORD *)(result + 36);
      }
    }
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100ACCA74(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v17 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0;
      }
      else
      {
        v17 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = *((_DWORD *)this + 14);
      v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10)
        return 0;
      v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_100ACD43C(v7, this, v12) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      v13 = *((_DWORD *)this + 14);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v15 < 0 == v14)
        *((_DWORD *)this + 14) = v15;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100ACCC2C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_1023111B0 + 8);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100ACCC58(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  unsigned int v6;
  int v7;
  int v8;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_1023111B0 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100ACD8E0(v4, a2);
    v7 = (int)v5;
    if (v5 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    else
      v8 = 1;
    result = (v7 + v8 + 1);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100ACCCC4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100ACC820(a1, (uint64_t)lpsrc);
}

void sub_100ACCD10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPTropicalSavannaLogEntry.pb.cc", 733);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(qword_1023111C0 + 8);
      sub_100ACCED4(v6, v7);
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_19;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 36) |= 2u;
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_1023111C0 + 16);
    sub_100ACCED4(v8, v9);
    v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
LABEL_20:
      v11 = *(_DWORD *)(a2 + 28);
      if (v11 >= 3)
        sub_101919900();
      *(_DWORD *)(a1 + 36) |= 8u;
      *(_DWORD *)(a1 + 28) = v11;
      return;
    }
LABEL_19:
    v10 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_DWORD *)(a1 + 24) = v10;
    if ((*(_DWORD *)(a2 + 36) & 8) == 0)
      return;
    goto LABEL_20;
  }
}

void sub_100ACCEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100ACCEBC()
{
  return 1;
}

_QWORD *sub_100ACCEC4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.TropicalSavanna.LogEntry");
}

double sub_100ACCED4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPTropicalSavannaLogEntry.pb.cc", 427);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return result;
LABEL_7:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_100ACCFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100ACCFBC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102168680;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100ACCFCC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102168680;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100ACCFFC()
{
  operator new();
}

uint64_t sub_100ACD03C(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100ACD054(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t result;
  unint64_t v12;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v12;
        *(_DWORD *)(a1 + 36) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 < *((_QWORD *)this + 2) && *v9 == 17)
        {
          *((_QWORD *)this + 1) = v9 + 1;
LABEL_17:
          v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
            return 0;
          *(_QWORD *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 36) |= 2u;
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 25)
          {
            *((_QWORD *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_27;
      }
      v8 = TagFallback & 7;
      if (v8 == 1)
        break;
LABEL_27:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_21:
    v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_100ACD218(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
  return result;
}

uint64_t sub_100ACD290(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

double sub_100ACD2C8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100ACCED4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100ACD314()
{
  return 1;
}

_QWORD *sub_100ACD31C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.TropicalSavanna.TimeStamp");
}

_QWORD *sub_100ACD32C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_1023111C0 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100ACD388(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021686F8;
  sub_100ACD32C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100ACD3B8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021686F8;
  sub_100ACD32C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100ACD3FC()
{
  operator new();
}

uint64_t sub_100ACD43C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t result;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  v5 = (unsigned int *)(a1 + 24);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_20;
        *(_DWORD *)(a1 + 36) |= 1u;
        v9 = *(_QWORD *)(a1 + 8);
        if (!v9)
          operator new();
        v35 = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v35))return 0;
        }
        else
        {
          v35 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        v14 = *((_DWORD *)this + 14);
        v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15)
          return 0;
        v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
        if (!sub_100ACD054(v9, this, v17) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        v18 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v18, 1);
        v20 = v18 - 1;
        if (v20 < 0 == v19)
          *((_DWORD *)this + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 != 18)
          continue;
        *((_QWORD *)this + 1) = v21 + 1;
        goto LABEL_33;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_20;
LABEL_33:
        *(_DWORD *)(a1 + 36) |= 2u;
        v22 = *(_QWORD *)(a1 + 16);
        if (!v22)
          operator new();
        v36 = 0;
        v23 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v36))return 0;
        }
        else
        {
          v36 = *v23;
          *((_QWORD *)this + 1) = v23 + 1;
        }
        v24 = *((_DWORD *)this + 14);
        v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 < v25)
        {
          v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v36);
          if (sub_100ACD054(v22, this, v27))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
              v28 = *((_DWORD *)this + 14);
              v19 = __OFSUB__(v28, 1);
              v29 = v28 - 1;
              if (v29 < 0 == v19)
                *((_DWORD *)this + 14) = v29;
              v30 = (_BYTE *)*((_QWORD *)this + 1);
              v11 = *((_QWORD *)this + 2);
              if ((unint64_t)v30 < v11 && *v30 == 24)
              {
                v12 = v30 + 1;
                *((_QWORD *)this + 1) = v12;
LABEL_47:
                if ((unint64_t)v12 >= v11 || *v12 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
                  if (!(_DWORD)result)
                    return result;
                  v31 = (_BYTE *)*((_QWORD *)this + 1);
                  v11 = *((_QWORD *)this + 2);
                }
                else
                {
                  *v5 = *v12;
                  v31 = v12 + 1;
                  *((_QWORD *)this + 1) = v31;
                }
                *(_DWORD *)(a1 + 36) |= 4u;
                if ((unint64_t)v31 < v11 && *v31 == 32)
                {
                  v13 = v31 + 1;
                  *((_QWORD *)this + 1) = v13;
LABEL_55:
                  v34 = 0;
                  if ((unint64_t)v13 >= v11 || *v13 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34);
                    if (!(_DWORD)result)
                      return result;
                    v33 = v34;
                  }
                  else
                  {
                    v33 = *v13;
                    *((_QWORD *)this + 1) = v13 + 1;
                  }
                  if (v33 <= 2)
                  {
                    *(_DWORD *)(a1 + 36) |= 8u;
                    *(_DWORD *)(a1 + 28) = v33;
                  }
                  if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                  {
                    *((_DWORD *)this + 8) = 0;
                    result = 1;
                    *((_BYTE *)this + 36) = 1;
                    return result;
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_47;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v13 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_55;
      default:
        v8 = TagFallback & 7;
LABEL_20:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100ACD82C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_1023111C0 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_1023111C0 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 28), (int)a2, a4);
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 24), a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 28), (int)a2, a4);
  return result;
}

uint64_t sub_100ACD8E0(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_37;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 36) & 2) == 0)
      goto LABEL_24;
    goto LABEL_15;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_1023111C0 + 8);
  v6 = *(unsigned __int8 *)(v5 + 36);
  if (*(_BYTE *)(v5 + 36))
  {
    v7 = (v6 << 31 >> 31) & 9;
    if ((v6 & 2) != 0)
      v7 += 9;
    if ((v6 & 4) != 0)
      v6 = v7 + 9;
    else
      v6 = v7;
  }
  *(_DWORD *)(v5 + 32) = v6;
  v4 = (v6 + 2);
  v3 = *(_DWORD *)(a1 + 36);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_1023111C0 + 16);
    v9 = *(unsigned __int8 *)(v8 + 36);
    if (*(_BYTE *)(v8 + 36))
    {
      v10 = (v9 << 31 >> 31) & 9;
      if ((v9 & 2) != 0)
        v10 += 9;
      if ((v9 & 4) != 0)
        v9 = v10 + 9;
      else
        v9 = v10;
    }
    *(_DWORD *)(v8 + 32) = v9;
    v4 = (v4 + v9 + 2);
    v3 = *(_DWORD *)(a1 + 36);
  }
LABEL_24:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_37;
    goto LABEL_31;
  }
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    v3 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    v12 = 2;
  }
  v4 = (v12 + v4);
  if ((v3 & 8) != 0)
  {
LABEL_31:
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v13 & 0x80000000) != 0)
    {
      v14 = 11;
    }
    else if (v13 >= 0x80)
    {
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    }
    else
    {
      v14 = 2;
    }
    v4 = (v14 + v4);
  }
LABEL_37:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

void sub_100ACDA24(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100ACCD10(a1, (uint64_t)lpsrc);
}

uint64_t sub_100ACDA70()
{
  return 1;
}

_QWORD *sub_100ACDA78@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.TropicalSavanna.TropicalSavannaHint");
}

void sub_100ACDACC(id a1)
{
  NSObject *v1;
  uint64_t v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  objc_class *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  const char *v10;
  uint8_t buf[4];
  const char *v12;

  sub_100197040();
  if ((sub_1000C4240() & 1) != 0 || (sub_100081BD0() & 1) != 0 || (sub_100197040(), (sub_10075C028() & 1) != 0))
  {
    byte_102306A80 = 1;
  }
  else
  {
    if (qword_1022A0260 != -1)
      dispatch_once(&qword_1022A0260, &stru_1021687E8);
    v1 = qword_1022A0268;
    if (os_log_type_enabled((os_log_t)qword_1022A0268, OS_LOG_TYPE_INFO))
    {
      v3 = (objc_class *)objc_opt_class(CLSuggestedActionManager, v2);
      *(_DWORD *)buf = 136446210;
      v12 = -[NSString UTF8String](NSStringFromClass(v3), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%{public}s not supported on this device type", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0260 != -1)
        dispatch_once(&qword_1022A0260, &stru_1021687E8);
      v5 = qword_1022A0268;
      v6 = (objc_class *)objc_opt_class(CLSuggestedActionManager, v4);
      v9 = 136446210;
      v10 = -[NSString UTF8String](NSStringFromClass(v6), "UTF8String");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 1, "%{public}s not supported on this device type", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "+[CLSuggestedActionManager(IsSupported) isSupported]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_100ACDD64(id a1)
{
  qword_102306A90 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSuggestedActionManagerSilo"));
}

void sub_100ACDE34(id a1)
{
  qword_1022A0268 = (uint64_t)os_log_create("com.apple.locationd.Core", "SAM");
}

BOOL sub_100ACDE60(int a1)
{
  return (a1 - 32112928) < 0x2C0DA0;
}

void sub_100ACDE80()
{
  operator new();
}

void sub_100ACDEC0()
{
  operator delete();
}

uint64_t sub_100ACDEE8(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  NSObject *global_queue;

  v2 = sub_1012246D0((char *)a1);
  *(_QWORD *)v2 = off_1021688B8;
  *((_DWORD *)v2 + 40) = 0;
  *((_WORD *)v2 + 82) = 0;
  *(_OWORD *)(v2 + 168) = xmmword_101BB0BF0;
  *((_DWORD *)v2 + 46) = 0;
  *((_QWORD *)v2 + 24) = 0;
  *((_QWORD *)v2 + 25) = 0;
  *((_QWORD *)v2 + 26) = __stderrp;
  *((_QWORD *)v2 + 28) = 0;
  *((_QWORD *)v2 + 29) = 0;
  std::string::assign((std::string *)(v2 + 112), ".log");
  v3 = dispatch_queue_create("com.apple.locationd.log.compression", 0);
  *(_QWORD *)(a1 + 216) = v3;
  global_queue = dispatch_get_global_queue(-32768, 0);
  dispatch_set_target_queue(v3, global_queue);
  return a1;
}

void sub_100ACDF98(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_100261F44(v2);
  sub_10122480C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100ACDFB4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021688B8;
  sub_100ACE000(a1, 0, 0);
  dispatch_release(*(dispatch_object_t *)(a1 + 216));
  sub_100261F44(a1 + 224);
  return sub_10122480C((_QWORD *)a1);
}

uint64_t sub_100ACE000(uint64_t a1, FILE *a2, char a3)
{
  _QWORD *v6;
  FILE *v7;

  v6 = (_QWORD *)(a1 + 48);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v7 = (FILE *)v6[18];
  if (v7 != a2)
  {
    *(_QWORD *)(a1 + 192) = a2;
    if (v7 && *(_BYTE *)(a1 + 164))
      fclose(v7);
    *(_BYTE *)(a1 + 164) = a3;
  }
  return (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
}

void sub_100ACE07C(uint64_t a1)
{
  sub_100ACDFB4(a1);
  operator delete();
}

uint64_t sub_100ACE0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;

  v15 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  sub_100ACE160(a1, a2, a3, a4, a5, a6, &a9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
}

void sub_100ACE14C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100ACE160(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, const char *a6, va_list a7)
{
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  va_list v18;
  char __str[512];

  v18 = a7;
  v13 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v14 = vsnprintf(__str, 0x1FFuLL, a6, v18);
  if ((v14 & 0x80000000) == 0)
  {
    if (v14 >= 0x1FF)
      operator new[]();
    v15 = (int)v14 - 1;
    if (__str[v15] != 10)
      __assert_rtn("vlog", "CLLog.mm", 172, "'\\n' == buffer[fullContentLength - 1]");
    if (v14 >= 2)
    {
      v15 = v15;
      v16 = __str;
      do
      {
        if (*v16 == 10)
          *v16 = 32;
        ++v16;
        --v15;
      }
      while (v15);
    }
    sub_100ACE3A0(a1, a2, a3, a4, a5, __str);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
}

void sub_100ACE350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100ACE3A0(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, const char *a6)
{
  double Current;
  FILE *v13;
  const char *v14;
  FILE *v15;
  const char *v16;
  FILE *v17;
  const char *v18;
  int v19;

  Current = CFAbsoluteTimeGetCurrent();
  if (*(_BYTE *)(a1 + 160))
  {
    v13 = *(FILE **)(a1 + 208);
    v14 = sub_10051242C(a4);
    fprintf(v13, "%s,%s,Time,%08.3f,Function,\"%s\",", v14, a2, Current, a5);
    fputs(a6, *(FILE **)(a1 + 208));
  }
  else
  {
    v15 = *(FILE **)(a1 + 192);
    if (v15 && *(_DWORD *)(a1 + 168) >= a4)
    {
      v16 = sub_10051242C(a4);
      fprintf(v15, "%s,%s,Time,%08.3f,Function,\"%s\",", v16, a2, Current, a5);
      fputs(a6, *(FILE **)(a1 + 192));
      if (*(_DWORD *)(a1 + 180) >= a4)
        sub_100ACE7B0(a1, 3, *(FILE **)(a1 + 192));
      sub_100ACE9D8(a1);
    }
    v17 = *(FILE **)(a1 + 200);
    if (v17 && *(_DWORD *)(a1 + 172) >= a4)
    {
      v18 = sub_10051242C(a4);
      fprintf(v17, "%s,%s,Time,%08.3f,", v18, a2, Current);
      fputs(a6, *(FILE **)(a1 + 200));
    }
    if ((!a3 || *(_DWORD *)(a1 + 184)) && *(_DWORD *)(a1 + 176) >= a4)
    {
      if (a4)
        v19 = 5;
      else
        v19 = 3;
      syslog(v19, "%s", a6);
    }
  }
}

uint64_t sub_100ACE538(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, char *__src, va_list a7)
{
  int v13;
  char __dst[1628];

  v13 = strncpy(__dst, __src, 0x65CuLL);
  sub_100ACE5EC(v13, __dst);
  return sub_100ACE160(a1, a2, a3, a4, a5, __dst, a7);
}

BOOL sub_100ACE5EC(int a1, char *__s)
{
  int64_t v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  _BOOL8 result;
  NSObject *v14;

  v3 = strlen(__s);
  if (v3 < 1)
    return 1;
  v4 = &__s[v3];
  v5 = __s;
  while (1)
  {
    if (*v5 != 37)
    {
      v6 = v5;
      goto LABEL_18;
    }
    v6 = v5 + 1;
    v7 = v5[1];
    if (v7 == 123)
      break;
LABEL_11:
    v6 = v5 + 1;
    v12 = v5 + 1;
    if (v7 != 64)
    {
      if (v7 != 46)
        goto LABEL_18;
      if (v5[2] != 42)
        goto LABEL_18;
      v12 = v5 + 3;
      if (v5[3] != 80)
        goto LABEL_18;
      *(_WORD *)(v5 + 1) = 9572;
    }
    *v12 = 112;
LABEL_18:
    v5 = v6 + 1;
    if (v6 + 1 >= v4)
      return 1;
  }
  if (v6 != v4)
  {
    v8 = 0;
    while (1)
    {
      v9 = &v5[v8 + 2];
      if (v9 == v4)
        break;
      ++v8;
      if (*v9 == 125)
      {
        if (v8 == -1)
          goto LABEL_18;
        v10 = &v5[v8];
        v11 = (uint64_t)&v5[v8 + 1];
        memmove(v5, v6, v8 + 1);
        v10[1] = 37;
        v7 = v10[2];
        v5 = (char *)v11;
        goto LABEL_11;
      }
    }
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102168990);
  v14 = qword_1022A01D8;
  result = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_101919928((uint64_t)__s, v14);
    return 0;
  }
  return result;
}

BOOL sub_100ACE75C(uint64_t a1)
{
  uint64_t v1;

  if (*(int *)(a1 + 12) < 1 || !*(_QWORD *)(a1 + 192))
    return 0;
  if (*(char *)(a1 + 159) < 0)
  {
    if (*(_QWORD *)(a1 + 144))
      goto LABEL_5;
    return 0;
  }
  if (!*(_BYTE *)(a1 + 159))
    return 0;
LABEL_5:
  if (*(char *)(a1 + 87) < 0)
    v1 = *(_QWORD *)(a1 + 72);
  else
    v1 = *(unsigned __int8 *)(a1 + 87);
  return v1 != 0;
}

uint64_t sub_100ACE7B0(uint64_t a1, int a2, FILE *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  const void **v9;
  Dl_info v11;
  uint64_t v12;
  __int16 v13;
  void *v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v6 = a1 + 48;
  v5 = *(_QWORD *)(a1 + 48);
  v12 = a1 + 48;
  (*(void (**)(uint64_t))(v5 + 16))(a1 + 48);
  v13 = 256;
  CFAbsoluteTimeGetCurrent();
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)v14 = 0u;
  v7 = backtrace(v14, 128);
  v8 = a2 + 1;
  if (a2 + 1 < v7)
  {
    v9 = (const void **)&v14[v8];
    do
    {
      if (dladdr(*v9, &v11))
      {
        if (v11.dli_sname)
        {
          basename((char *)v11.dli_fname);
          fprintf(a3, "%s,%s,Time,%08.3f,%d\t%s\t0x%08lx %s + %lu\n", "STATUS");
        }
        else
        {
          basename((char *)v11.dli_fname);
          fprintf(a3, "%s,%s,Time,%08.3f,%d\t%s\t0x%08lx 0x%08lx + %lu\n", "STATUS");
        }
      }
      else
      {
        fprintf(a3, "%s,%s,Time,%08.3f,%d\t0x%08lx\n");
      }
      ++v9;
      ++v8;
    }
    while (v7 != v8);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_100ACE9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ACE9D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  fpos_t v5[3];
  __int16 v6;

  v3 = a1 + 48;
  v2 = *(_QWORD *)(a1 + 48);
  v5[1] = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  v6 = 256;
  if (sub_100ACE75C(a1))
  {
    v5[0] = 0;
    fgetpos(*(FILE **)(a1 + 192), v5);
    if (v5[0] >= *(int *)(a1 + 12))
      sub_100ACF29C(a1);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

void sub_100ACEA60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100ACEA78(uint64_t a1)
{
  NSNumber *v2;
  uint64_t v3;
  std::string::size_type size;
  size_t v5;
  std::string *v6;
  const void *v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  std::string::size_type v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  std::string *p_p;
  uint64_t v24;
  std::string *v25;
  uint64_t v26;
  std::string *v27;
  const char *v28;
  uint64_t v29;
  int v30;
  std::string v31;
  std::string v32;
  std::string __p;
  int v34;
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];

  sub_1000CDFB0(a1 + 48);
  sub_1001E4874(*(_QWORD *)(a1 + 24), "ShowError", (BOOL *)(a1 + 162));
  sub_1001E4874(*(_QWORD *)(a1 + 24), "LogShowUI", (BOOL *)(a1 + 163));
  sub_1001E4B84(*(_QWORD *)(a1 + 24), "LogFileLevel", (_DWORD *)(a1 + 168));
  sub_1001E4B84(*(_QWORD *)(a1 + 24), "LogBufferLevel", (_DWORD *)(a1 + 172));
  sub_1001E4B84(*(_QWORD *)(a1 + 24), "LogConsoleLevel", (_DWORD *)(a1 + 176));
  sub_1001E4B84(*(_QWORD *)(a1 + 24), "LogStackLevel", (_DWORD *)(a1 + 180));
  sub_1000BCB64(*(_QWORD *)(a1 + 24), "LogFileDirectory", (std::string *)(a1 + 64));
  sub_1000BCB64(*(_QWORD *)(a1 + 24), "LogFilePrefix", (std::string *)(a1 + 88));
  sub_1001E4874(*(_QWORD *)(a1 + 24), "LogFileFlush", (BOOL *)(a1 + 165));
  sub_1001E4874(*(_QWORD *)(a1 + 24), "LogFence", (BOOL *)(a1 + 161));
  v34 = 0;
  sub_1001E4B84(*(_QWORD *)(a1 + 24), "LogBufferSize", &v34);
  v36[0] = CFSTR("Level");
  v2 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 168));
  v36[1] = CFSTR("RotationEnabled");
  v37[0] = v2;
  v37[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100ACE75C(a1));
  sub_10019E128((uint64_t)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v37, v36, 2), (uint64_t)"LogLevel");
  if ((*(_DWORD *)(a1 + 168) & 0x80000000) != 0)
  {
    sub_100ACE000(a1, 0, 0);
    goto LABEL_75;
  }
  v3 = *(_QWORD *)(a1 + 192);
  memset(&__p, 0, sizeof(__p));
  if (!sub_1000BCB64(*(_QWORD *)(a1 + 24), "LogFile", &__p))
    goto LABEL_6;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (!size)
  {
LABEL_6:
    if (*(char *)(a1 + 87) < 0)
    {
      if (!*(_QWORD *)(a1 + 72))
        goto LABEL_43;
    }
    else if (!*(_BYTE *)(a1 + 87))
    {
      goto LABEL_43;
    }
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_43;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_43;
    }
    if (*(char *)(a1 + 87) >= 0)
      v5 = *(unsigned __int8 *)(a1 + 87);
    else
      v5 = *(_QWORD *)(a1 + 72);
    v6 = &v31;
    sub_100259584((uint64_t)&v31, v5 + 1);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
    if (v5)
    {
      if (*(char *)(a1 + 87) >= 0)
        v7 = (const void *)(a1 + 64);
      else
        v7 = *(const void **)(a1 + 64);
      memmove(v6, v7, v5);
    }
    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
    v8 = *(char *)(a1 + 111);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)(a1 + 88);
    else
      v9 = *(const std::string::value_type **)(a1 + 88);
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 111);
    else
      v10 = *(_QWORD *)(a1 + 96);
    v11 = std::string::append(&v31, v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = *(char *)(a1 + 135);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)(a1 + 112);
    else
      v14 = *(const std::string::value_type **)(a1 + 112);
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 135);
    else
      v15 = *(_QWORD *)(a1 + 120);
    v16 = std::string::append(&v32, v14, v15);
    v17 = v16->__r_.__value_.__r.__words[0];
    v35[0] = v16->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v35 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
    v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v17;
    __p.__r_.__value_.__l.__size_ = v35[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v35 + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v18;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
LABEL_43:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v19 = __p.__r_.__value_.__l.__size_;
  if (v19)
  {
    if (v3)
    {
      v20 = *(unsigned __int8 *)(a1 + 159);
      v21 = (char)v20;
      if ((v20 & 0x80u) != 0)
        v20 = *(_QWORD *)(a1 + 144);
      if (v19 == v20)
      {
        if (v21 >= 0)
          v22 = (unsigned __int8 *)(a1 + 136);
        else
          v22 = *(unsigned __int8 **)(a1 + 136);
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (memcmp(__p.__r_.__value_.__l.__data_, v22, __p.__r_.__value_.__l.__size_))
            goto LABEL_63;
        }
        else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
        {
          p_p = &__p;
          v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          while (p_p->__r_.__value_.__s.__data_[0] == *v22)
          {
            p_p = (std::string *)((char *)p_p + 1);
            ++v22;
            if (!--v24)
              goto LABEL_66;
          }
          goto LABEL_60;
        }
LABEL_66:
        sub_100ACF230(a1, *(unsigned __int8 *)(a1 + 165));
        v27 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (*(_BYTE *)(a1 + 165))
          v28 = " and flushing immediately";
        else
          v28 = " no flush";
        syslog(5, "%s,%s,logging locations to %s%s\n", "NOTICE", "CLLog", (const char *)v27, v28);
        goto LABEL_73;
      }
    }
LABEL_60:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__p;
    else
      v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_63:
    sub_100ACF11C(a1, (char *)v25);
    if (!v3)
    {
      v26 = *(_QWORD *)(a1 + 224);
      if (v26)
        sub_100AD3988(v26, *(FILE **)(a1 + 192));
    }
    goto LABEL_66;
  }
  sub_100ACE000(a1, 0, 0);
LABEL_73:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_75:
  if ((*(_DWORD *)(a1 + 172) & 0x80000000) != 0 || v34 < 1)
  {
    sub_100346F9C((_QWORD *)(a1 + 224));
    *(_QWORD *)(a1 + 200) = 0;
  }
  else
  {
    if (v34 > 0xA00000)
      v34 = 10485760;
    v29 = *(_QWORD *)(a1 + 224);
    if (!v29 || (v30 = sub_100201404(v29), v30 != v34))
      operator new();
    *(_QWORD *)(a1 + 200) = sub_100AD386C(*(FILE ***)(a1 + 224));
    syslog(5, "%s,%s,logging locations to an internal buffer with capacity %d\n", "NOTICE", "CLLog", v34);
  }
}

void sub_100ACF094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ACF11C(uint64_t a1, char *a2)
{
  uint64_t v4;
  uid_t v5;
  gid_t v6;
  FILE *v7;
  int *v8;

  v4 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  if (a2)
  {
    v5 = getuid();
    v6 = getgid();
    sub_100512E84(a2, v5, v6);
    v7 = fopen(a2, "a");
    if (v7)
    {
      std::string::assign((std::string *)(a1 + 136), a2);
      sub_100ACE000(a1, v7, 1);
      sub_100ACF230(a1, *(unsigned __int8 *)(a1 + 165));
      sub_100ACFE2C(a1);
    }
    else
    {
      v8 = __error();
      syslog(3, "%s,%s,could not open locations log %s, errno %d\n", "ERROR", "CLLog", a2, *v8);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100ACF21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100ACF230(uint64_t a1, int a2)
{
  uint64_t v3;
  FILE *v4;

  v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  *(_BYTE *)(v3 + 117) = a2 != 0;
  v4 = *(FILE **)(v3 + 144);
  if (v4)
    setvbuf(v4, 0, a2 != 0, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

uint64_t sub_100ACF29C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSDate *v4;
  std::string::size_type size;
  __int128 *v6;
  std::string *v7;
  std::string *v8;
  uid_t v9;
  gid_t v10;
  std::error_code *v11;
  char *v12;
  const std::__fs::filesystem::path *v13;
  const std::__fs::filesystem::path *v14;
  int v15;
  const char *v16;
  int *v17;
  const char *v18;
  int v19;
  NSObject *v20;
  _QWORD block[5];
  std::string v23;
  __int128 v24;
  uint64_t v25;
  __int128 __p;
  uint64_t v27;
  int v28;
  _QWORD v29[6];
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  void *v35[2];
  uint64_t v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  std::string v44;
  uint64_t v45;
  __int16 v46;

  v3 = a1 + 48;
  v2 = *(_QWORD *)(a1 + 48);
  v45 = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  v46 = 256;
  sub_1015A2E04(v35, ".log");
  v4 = sub_1012256C0();
  sub_1012252CC((const void **)(v3 + 16), v3 + 40, (uint64_t)v35, (uint64_t)v4, &v44);
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    size = v44.__r_.__value_.__l.__size_;
  v6 = &v42;
  sub_100259584((uint64_t)&v42, size + 4);
  if (v43 < 0)
    v6 = (__int128 *)v42;
  if (size)
  {
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v44;
    else
      v7 = (std::string *)v44.__r_.__value_.__r.__words[0];
    memmove(v6, v7, size);
  }
  strcpy((char *)v6 + size, ".bz2");
  sub_100ACF7E4(a1);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v44;
  else
    v8 = (std::string *)v44.__r_.__value_.__r.__words[0];
  v9 = getuid();
  v10 = getgid();
  sub_100512E84(v8, v9, v10);
  v12 = (char *)(a1 + 136);
  v13 = (const std::__fs::filesystem::path *)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
    v13 = *(const std::__fs::filesystem::path **)v12;
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = (const std::__fs::filesystem::path *)&v44;
  else
    v14 = (const std::__fs::filesystem::path *)v44.__r_.__value_.__r.__words[0];
  if (!sub_100512FE0(v13, v14, v11))
  {
    v15 = SHIBYTE(v43);
    v16 = (const char *)v42;
    v17 = __error();
    v18 = (const char *)&v42;
    if (v15 < 0)
      v18 = v16;
    syslog(3, "%s,%s,Failed to move aside log file %s (%d)\n", "ERROR", "CLLog", v18, *v17);
  }
  if (*(char *)(a1 + 159) < 0)
    v12 = *(char **)v12;
  sub_100ACF11C(a1, v12);
  if (*(char *)(a1 + 111) < 0)
  {
    sub_100115CE4(&__dst, *(void **)(a1 + 88), *(_QWORD *)(a1 + 96));
  }
  else
  {
    __dst = *(_OWORD *)(v3 + 40);
    v41 = *(_QWORD *)(v3 + 56);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    sub_100115CE4(&v38, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
  else
  {
    v38 = *(_OWORD *)(v3 + 16);
    v39 = *(_QWORD *)(v3 + 32);
  }
  v19 = *(_DWORD *)(a1 + 16);
  v35[0] = 0;
  v35[1] = v35;
  v36 = 0x2020000000;
  v37 = 0;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3321888768;
  v29[2] = sub_100ACF830;
  v29[3] = &unk_1021688E0;
  v29[5] = a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_100115CE4(&v30, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v30 = __dst;
    v31 = v41;
  }
  v29[4] = v35;
  v34 = v19;
  if (SHIBYTE(v39) < 0)
  {
    sub_100115CE4(&v32, (void *)v38, *((unint64_t *)&v38 + 1));
  }
  else
  {
    v32 = v38;
    v33 = v39;
  }
  v20 = *(NSObject **)(a1 + 216);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100ACFC20;
  block[3] = &unk_102168918;
  v28 = v19;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    sub_100115CE4(&v23, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  else
    v23 = v44;
  if (SHIBYTE(v43) < 0)
  {
    sub_100115CE4(&v24, (void *)v42, *((unint64_t *)&v42 + 1));
  }
  else
  {
    v24 = v42;
    v25 = v43;
  }
  if (SHIBYTE(v39) < 0)
  {
    sub_100115CE4(&__p, (void *)v38, *((unint64_t *)&v38 + 1));
  }
  else
  {
    __p = v38;
    v27 = v39;
  }
  block[4] = v29;
  dispatch_async(v20, block);
  if (SHIBYTE(v27) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33) < 0)
    operator delete((void *)v32);
  if (SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  _Block_object_dispose(v35, 8);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

void sub_100ACF6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (a29 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a51 < 0)
    operator delete(a46);
  if (a45 < 0)
    operator delete(a40);
  _Block_object_dispose((const void *)(v51 - 240), 8);
  if (*(char *)(v51 - 185) < 0)
    operator delete(*(void **)(v51 - 208));
  if (*(char *)(v51 - 153) < 0)
    operator delete(*(void **)(v51 - 176));
  if (*(char *)(v51 - 129) < 0)
    operator delete(*(void **)(v51 - 152));
  if (*(char *)(v51 - 105) < 0)
    operator delete(*(void **)(v51 - 128));
  sub_10187E514(v51 - 104);
  _Unwind_Resume(a1);
}

uint64_t sub_100ACF7E4(uint64_t a1)
{
  _QWORD *v1;
  FILE *v2;

  v1 = (_QWORD *)(a1 + 48);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v2 = (FILE *)v1[18];
  if (v2)
    fflush(v2);
  return (*(uint64_t (**)(_QWORD *))(*v1 + 24))(v1);
}

uint64_t sub_100ACF830(uint64_t a1, char *a2)
{
  uint64_t v4;
  size_t v5;
  void **v6;
  const void *v7;
  int v8;
  const char *v9;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;

  v4 = *(_QWORD *)(a1 + 40);
  sub_1015A2E04(v21, a2);
  if (*(char *)(a1 + 71) >= 0)
    v5 = *(unsigned __int8 *)(a1 + 71);
  else
    v5 = *(_QWORD *)(a1 + 56);
  v6 = v19;
  sub_100259584((uint64_t)v19, v5 + 1);
  if (v20 < 0)
    v6 = (void **)v19[0];
  if (v5)
  {
    if (*(char *)(a1 + 71) >= 0)
      v7 = (const void *)(a1 + 48);
    else
      v7 = *(const void **)(a1 + 48);
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)v6 + v5) = 95;
  if (sub_1012256CC(v4, (char **)v21, (char *)v19))
  {
    sub_1015A2E04(v17, a2);
    sub_1015A2E04(v15, ".log.bz2");
    if ((sub_1012257A0(v4, v17, (char *)v15) & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      sub_1015A2E04(v13, a2);
      sub_1015A2E04(__p, ".log");
      v8 = sub_1012257A0(v4, v13, (char *)__p);
      if (v12 < 0)
        operator delete(__p[0]);
      if (v14 < 0)
        operator delete(v13[0]);
    }
    if (v16 < 0)
      operator delete(v15[0]);
    if (v18 < 0)
      operator delete(v17[0]);
  }
  else
  {
    v8 = 0;
  }
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
  {
    operator delete(v21[0]);
    if (!v8)
      return 1;
  }
  else if (!v8)
  {
    return 1;
  }
  if (++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) > *(_DWORD *)(a1 + 96))
  {
    LOBYTE(v21[0]) = 0;
    v9 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v9 = *(const char **)v9;
    if (snprintf((char *)v21, 0x400uLL, "%s/%s", v9, a2) > 1023)
    {
      syslog(3, "%s,%s,Rotation path is too long, could not delete old logs.\n", "ERROR", "CLLog");
    }
    else if (!sub_100512FA8((const char *)v21))
    {
      perror("Failed to delete log");
    }
  }
  return 1;
}

void sub_100ACFA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  if (a46 < 0)
    operator delete(a41);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100ACFB3C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *result;
  __int128 v6;

  if (*(char *)(a2 + 71) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  result = (_BYTE *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  v6 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)result = v6;
  return result;
}

void sub_100ACFBC0(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 71) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_100ACFBDC(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_100ACFC20(uint64_t a1)
{
  const char *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  _QWORD *v6;

  if (!*(_DWORD *)(a1 + 112))
    goto LABEL_7;
  v2 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v2 = *(const char **)v2;
  v3 = (const char *)(a1 + 64);
  v4 = (const char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v4 = *(const char **)v3;
  if (!sub_100514F40(v2, v4))
  {
    if (*(char *)(a1 + 87) < 0)
      v3 = *(const char **)v3;
    syslog(3, "%s,%s,Failed to write %s\n", "ERROR", "CLLog", v3);
  }
  else
  {
LABEL_7:
    v5 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v5 = *(const char **)v5;
    sub_100512FA8(v5);
  }
  if ((*(_DWORD *)(a1 + 112) & 0x80000000) == 0)
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    sub_100AD4F6C((uint64_t)v6, *(_QWORD *)(a1 + 32));
  }
}

_BYTE *sub_100ACFCF0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  if (*(char *)(a2 + 63) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 64), *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  result = (_BYTE *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 88), *(_QWORD *)(a2 + 96));
  v7 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)result = v7;
  return result;
}

void sub_100ACFDA4(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 87) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 63) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_100ACFDD8(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_100ACFE2C(uint64_t a1)
{
  FILE *v2;
  char *v3;
  std::string::size_type size;
  char v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  uint32_t bufsize;
  std::string v31;
  char buf[784];
  char __p[114];
  _BYTE v34[6];

  v2 = *(FILE **)(a1 + 192);
  if (v2)
    sub_100516010(v2);
  sub_100197040();
  sub_10075AA9C((uint64_t)__p);
  if (__p[23] >= 0)
    v3 = __p;
  else
    v3 = *(char **)__p;
  sub_1015A2E04(&v31, v3);
  if (__p[23] < 0)
    operator delete(*(void **)__p);
  size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  v5 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v31.__r_.__value_.__l.__size_;
  if (!size)
  {
    std::string::assign(&v31, "Unplugged!");
    v5 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  bzero(__p, 0x65CuLL);
  v6 = &v31;
  if (v5 < 0)
    v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
  snprintf(__p, 0x65CuLL, "CoreLocation-%s\n", (const char *)v6);
  sub_100ACE0A0(a1, (uint64_t)"Generic", 0, 2, (uint64_t)"void CLLog::logHeader()", (uint64_t)"%s\n", v7, v8, (uint64_t)__p);
  bzero(__p, 0x65CuLL);
  snprintf(__p, 0x65CuLL, "locationd was compiled on %s at %s\n", "Aug 13 2024", "21:08:23");
  sub_100ACE0A0(a1, (uint64_t)"Generic", 0, 2, (uint64_t)"void CLLog::logHeader()", (uint64_t)"%s\n", v9, v10, (uint64_t)__p);
  bufsize = 1024;
  if (_NSGetExecutablePath(buf, &bufsize))
  {
    bzero(__p, 0x65CuLL);
    v11 = sub_100197040();
    v12 = v28;
    sub_10075A5A0(v11, (uint64_t)v28);
    if (v29 < 0)
      v12 = (void **)v28[0];
    sub_100197040();
    sub_10075A1D4((uint64_t)v26);
    if (v27 >= 0)
      v13 = v26;
    else
      v13 = (void **)v26[0];
    snprintf(__p, 0x65CuLL, "/usr/libexec/locationd @ system model %s / version %s\n", (const char *)v12, (const char *)v13);
    if (v27 < 0)
      operator delete(v26[0]);
    if (v29 < 0)
      operator delete(v28[0]);
  }
  else
  {
    bzero(__p, 0x65CuLL);
    v16 = sub_100197040();
    v17 = v28;
    sub_10075A5A0(v16, (uint64_t)v28);
    if (v29 < 0)
      v17 = (void **)v28[0];
    sub_100197040();
    sub_10075A1D4((uint64_t)v26);
    if (v27 >= 0)
      v18 = v26;
    else
      v18 = (void **)v26[0];
    snprintf(__p, 0x65CuLL, "%s @ system model %s / version %s\n", buf, (const char *)v17, (const char *)v18);
    if (v27 < 0)
      operator delete(v26[0]);
    if (v29 < 0)
      operator delete(v28[0]);
  }
  sub_100ACE0A0(a1, (uint64_t)"Generic", 0, 2, (uint64_t)"void CLLog::logHeader()", (uint64_t)"%s\n", v14, v15, (uint64_t)__p);
  bzero(__p, 0x65CuLL);
  sub_100197040();
  sub_10075ACDC((uint64_t)v28);
  if (v29 >= 0)
    v19 = v28;
  else
    v19 = (void **)v28[0];
  snprintf(__p, 0x65CuLL, "IOPlatformSerialNumber: %s\n", (const char *)v19);
  if (v29 < 0)
    operator delete(v28[0]);
  sub_100ACE0A0(a1, (uint64_t)"Generic", 0, 2, (uint64_t)"void CLLog::logHeader()", (uint64_t)"%s\n", v20, v21, (uint64_t)__p);
  bzero(v34, 0x5EAuLL);
  strcpy(__p, "Begin settings dump (read at construction of CLSettings or upon darwin notification 'com.apple.locationd/prefs')\n");
  sub_100ACE0A0(a1, (uint64_t)"Generic", 0, 2, (uint64_t)"void CLLog::logHeader()", (uint64_t)"%s\n", v22, v23, (uint64_t)__p);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 792))(*(_QWORD *)(a1 + 24));
  bzero(&__p[19], 0x649uLL);
  strcpy(__p, "End settings dump\n");
  sub_100ACE0A0(a1, (uint64_t)"Generic", 0, 2, (uint64_t)"void CLLog::logHeader()", (uint64_t)"%s\n", v24, v25, (uint64_t)__p);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_100AD02C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100AD0340(uint64_t a1, int a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)(a1 + 48);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v3[34] = a2;
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
}

BOOL sub_100AD0388(uint64_t a1)
{
  _DWORD *v1;
  int v2;

  v1 = (_DWORD *)(a1 + 48);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v2 = v1[34];
  (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 24))(v1);
  return v2 != 0;
}

uint64_t sub_100AD03D4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;

  v1 = (unsigned __int8 *)(a1 + 48);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v2 = v1[115];
  (*(void (**)(unsigned __int8 *))(*(_QWORD *)v1 + 24))(v1);
  return v2;
}

void sub_100AD041C(uint64_t a1)
{
  uint64_t v2;
  NSDate *v3;
  std::string *v4;
  FILE *v5;
  FILE *v6;
  char v7;
  const char *p_dst;
  char v9;
  __int128 *v10;
  char *v11;
  const char *v12;
  std::error_code *v13;
  const std::__fs::filesystem::path *v14;
  const std::__fs::filesystem::path *v15;
  std::string *v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  __int128 v25;
  const char *v26;
  const char *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  const char *v40;
  const char *v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  const char *v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  const char *v53;
  std::string *v54;
  std::string *v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  std::string *v63;
  const char *v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  __int128 v69;
  std::string v70;
  uint64_t v71;
  std::string __p[6];
  BOOL v73;
  _QWORD v74[5];
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 __dst;
  uint64_t v82;
  uint64_t v83;
  pthread_mutex_t *v84;
  __int16 v85;

  v2 = *(_QWORD *)(a1 + 48);
  v83 = a1 + 48;
  (*(void (**)(void))(v2 + 16))();
  v85 = 256;
  v3 = sub_1012256C0();
  if (*(char *)(a1 + 87) < 0)
  {
    sub_100115CE4(&__dst, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
  else
  {
    __dst = *(_OWORD *)(a1 + 64);
    v82 = *(_QWORD *)(a1 + 80);
  }
  if (*(char *)(a1 + 111) < 0)
  {
    sub_100115CE4(&v79, *(void **)(a1 + 88), *(_QWORD *)(a1 + 96));
  }
  else
  {
    v79 = *(_OWORD *)(a1 + 88);
    v80 = *(_QWORD *)(a1 + 104);
  }
  if (*(_QWORD *)(a1 + 224))
  {
    syslog(5, "%s,%s,dumping internal buffer\n", "NOTICE", "CLLog");
    sub_1012255F4(a1, __p);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = __p;
    else
      v4 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v5 = fopen((const char *)v4, "a");
    v6 = v5;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v6)
        goto LABEL_13;
    }
    else if (v5)
    {
LABEL_13:
      sub_100AD3988(*(_QWORD *)(a1 + 224), v6);
      fclose(v6);
      v7 = 1;
      goto LABEL_16;
    }
  }
  v7 = 0;
LABEL_16:
  if (v82 >= 0)
    p_dst = (const char *)&__dst;
  else
    p_dst = (const char *)__dst;
  if (sub_1000B78B0(p_dst))
  {
    v9 = HIBYTE(v82);
    if (v82 >= 0)
      v10 = &__dst;
    else
      v10 = (__int128 *)__dst;
    v74[0] = _NSConcreteStackBlock;
    v74[1] = 3321888768;
    v74[2] = sub_100AD1124;
    v74[3] = &unk_102168948;
    v74[4] = a1;
    if (SHIBYTE(v80) < 0)
    {
      sub_100115CE4(&v75, (void *)v79, *((unint64_t *)&v79 + 1));
      v9 = HIBYTE(v82);
    }
    else
    {
      v75 = v79;
      v76 = v80;
    }
    if (v9 < 0)
    {
      sub_100115CE4(&v77, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      v77 = __dst;
      v78 = v82;
    }
    sub_100AD4F6C((uint64_t)v10, (uint64_t)v74);
    if (SHIBYTE(v78) < 0)
      operator delete((void *)v77);
    if (SHIBYTE(v76) < 0)
      operator delete((void *)v75);
  }
  sub_100ACF7E4(a1);
  v11 = (char *)(a1 + 136);
  v12 = (const char *)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
    v12 = *(const char **)v11;
  if (sub_1000B78B0(v12))
  {
    sub_1012255F4(a1, __p);
    v14 = (const std::__fs::filesystem::path *)(a1 + 136);
    if (*(char *)(a1 + 159) < 0)
      v14 = *(const std::__fs::filesystem::path **)v11;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = (const std::__fs::filesystem::path *)__p;
    else
      v15 = (const std::__fs::filesystem::path *)__p[0].__r_.__value_.__r.__words[0];
    sub_100512FE0(v14, v15, v13);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = __p;
    else
      v16 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    sub_100512E44((const char *)v16);
    if (*(char *)(a1 + 159) < 0)
      v11 = *(char **)v11;
    sub_100ACF11C(a1, v11);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v7 = 1;
  }
  v73 = 0;
  sub_1001E4804(__p);
  if ((sub_1001E4874((uint64_t)__p[0].__r_.__value_.__l.__data_, "LogNatalimetry", &v73) & 1) != 0)
  {
    v17 = 1;
  }
  else
  {
    sub_1001E4804(&v69);
    v17 = sub_1001E4874(v69, "LogCalorimetry", &v73);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
  if (!__p[0].__r_.__value_.__l.__size_)
    goto LABEL_60;
  v22 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_60:
    if ((v17 & 1) != 0)
      goto LABEL_61;
LABEL_65:
    v73 = 0;
    goto LABEL_135;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if ((v17 & 1) == 0)
    goto LABEL_65;
LABEL_61:
  if (v73)
  {
    sub_1015A2E04(&v68, "");
    *(_QWORD *)&v69 = 0x100000003;
    WORD4(v69) = 0;
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      sub_100115CE4(&v70, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
    else
      v70 = v68;
    v71 = 0;
    sub_100631F84(__p, &v69);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    sub_101225108((uint64_t)&v68);
    v24 = std::string::append(&v68, "/cache_encryptedC.db");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__r.__words[2];
    v69 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (v70.__r_.__value_.__s.__data_[7] >= 0)
      v26 = (const char *)&v69;
    else
      v26 = (const char *)v69;
    sub_10063BA08((uint64_t)__p, v26);
    if (v70.__r_.__value_.__s.__data_[7] >= 0)
      v27 = (const char *)&v69;
    else
      v27 = (const char *)v69;
    sub_100512E44(v27);
    if (v70.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v69);
    sub_1006322C0(__p);
    sub_100584F4C(0, &v68);
    v28 = std::string::append(&v68, "userinfo");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[0] = v28->__r_.__value_.__r.__words[2];
    v69 = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append((std::string *)&v69, ".plist");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (v70.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v69);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = __p;
    else
      v32 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if (sub_1000B78B0((const char *)v32))
    {
      sub_101225108((uint64_t)&v66);
      v33 = std::string::append(&v66, "/");
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v35 = std::string::append(&v67, "userinfo");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      v37 = std::string::append(&v68, ".log");
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[0] = v37->__r_.__value_.__r.__words[2];
      v69 = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = __p;
      else
        v39 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if (v70.__r_.__value_.__s.__data_[7] >= 0)
        v40 = (const char *)&v69;
      else
        v40 = (const char *)v69;
      sub_100512FFC((const char *)v39, v40);
      if (v70.__r_.__value_.__s.__data_[7] >= 0)
        v41 = (const char *)&v69;
      else
        v41 = (const char *)v69;
      sub_100512E44(v41);
      if (v70.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v69);
    }
    sub_100584F4C(0, &v67);
    v42 = std::string::append(&v67, "cache");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = std::string::append(&v68, ".plist");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[0] = v44->__r_.__value_.__r.__words[2];
    v69 = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if (v70.__r_.__value_.__s.__data_[7] >= 0)
      v46 = (const char *)&v69;
    else
      v46 = (const char *)v69;
    if (sub_1000B78B0(v46))
    {
      sub_101225108((uint64_t)&v65);
      v47 = std::string::append(&v65, "/");
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      v49 = std::string::append(&v66, "cache");
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v51 = std::string::append(&v67, ".log");
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (v70.__r_.__value_.__s.__data_[7] >= 0)
        v53 = (const char *)&v69;
      else
        v53 = (const char *)v69;
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = &v68;
      else
        v54 = (std::string *)v68.__r_.__value_.__r.__words[0];
      sub_100512FFC(v53, (const char *)v54);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v68;
      else
        v55 = (std::string *)v68.__r_.__value_.__r.__words[0];
      sub_100512E44((const char *)v55);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (v70.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v69);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_135:
  sub_101224F44((uint64_t)&v67);
  v56 = std::string::append(&v67, "/");
  v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  v58 = std::string::append(&v68, "com.apple.timed");
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[0] = v58->__r_.__value_.__r.__words[2];
  v69 = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v60 = std::string::append((std::string *)&v69, ".plist");
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  if (v70.__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)v69);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = __p;
  else
    v62 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if (!sub_1000B78B0((const char *)v62))
    goto LABEL_160;
  sub_101224E58((uint64_t)&v68);
  sub_1015A2E04(&v67, "com.apple.timed");
  sub_1015A2E04(&v66, ".plist.log");
  sub_1012252CC((const void **)&v68.__r_.__value_.__l.__data_, (uint64_t)&v67, (uint64_t)&v66, (uint64_t)v3, (std::string *)&v69);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = __p;
  else
    v63 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if (v70.__r_.__value_.__s.__data_[7] >= 0)
    v64 = (const char *)&v69;
  else
    v64 = (const char *)v69;
  if (sub_100512FFC((const char *)v63, v64) == 1)
    syslog(5, "%s,%s,could not copy %s log\n", "WARNING", "CLLog", "com.apple.timed");
  if ((v70.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
LABEL_160:
    if ((v7 & 1) != 0)
      goto LABEL_162;
    goto LABEL_161;
  }
  operator delete((void *)v69);
  if ((v7 & 1) == 0)
LABEL_161:
    syslog(5, "%s,%s,could not dump log file\n", "WARNING", "CLLog");
LABEL_162:
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v80) < 0)
    operator delete((void *)v79);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)__dst);
  if (HIBYTE(v85))
  {
    if ((_BYTE)v85)
      pthread_mutex_unlock(v84);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 24))(v83);
  }
}

void sub_100AD0E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (a37 < 0)
    operator delete(__p);
  if (*(char *)(v56 - 121) < 0)
    operator delete(*(void **)(v56 - 144));
  if (*(char *)(v56 - 89) < 0)
    operator delete(*(void **)(v56 - 112));
  sub_10187E514(v56 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_100AD1124(uint64_t a1, char *a2)
{
  uint64_t v4;
  size_t v5;
  std::string *v6;
  const void *v7;
  int v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  size_t v13;
  std::string *v14;
  const void *v15;
  std::string *v16;
  std::error_code *v17;
  __int128 v18;
  const std::__fs::filesystem::path *v19;
  const std::__fs::filesystem::path *v20;
  const char *v21;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  std::string v29;
  std::string v30;
  __int128 v31;
  int64_t v32;

  v4 = *(_QWORD *)(a1 + 32);
  sub_1015A2E04(&v31, a2);
  if (*(char *)(a1 + 63) >= 0)
    v5 = *(unsigned __int8 *)(a1 + 63);
  else
    v5 = *(_QWORD *)(a1 + 48);
  v6 = &v30;
  sub_100259584((uint64_t)&v30, v5 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*(char *)(a1 + 63) >= 0)
      v7 = (const void *)(a1 + 40);
    else
      v7 = *(const void **)(a1 + 40);
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 95;
  if (sub_1012256CC(v4, (char **)&v31, (char *)&v30))
  {
    sub_1015A2E04(&v29, a2);
    sub_1015A2E04(v27, ".log.bz2");
    if ((sub_1012257A0(v4, (void **)&v29.__r_.__value_.__l.__data_, (char *)v27) & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      sub_1015A2E04(v25, a2);
      sub_1015A2E04(__p, ".log");
      v8 = sub_1012257A0(v4, v25, (char *)__p);
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(v25[0]);
    }
    if (v28 < 0)
      operator delete(v27[0]);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = 0;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32) < 0)
  {
    operator delete((void *)v31);
    if (!v8)
      return 1;
  }
  else if (!v8)
  {
    return 1;
  }
  sub_101225108((uint64_t)&v29);
  v9 = std::string::append(&v29, "/");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v30, a2);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v32 = v11->__r_.__value_.__r.__words[2];
  v31 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 87) >= 0)
    v13 = *(unsigned __int8 *)(a1 + 87);
  else
    v13 = *(_QWORD *)(a1 + 72);
  v14 = &v29;
  sub_100259584((uint64_t)&v29, v13 + 1);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if (*(char *)(a1 + 87) >= 0)
      v15 = (const void *)(a1 + 64);
    else
      v15 = *(const void **)(a1 + 64);
    memmove(v14, v15, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 47;
  v16 = std::string::append(&v29, a2);
  v18 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v18;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = (const std::__fs::filesystem::path *)&v30;
  else
    v19 = (const std::__fs::filesystem::path *)v30.__r_.__value_.__r.__words[0];
  if (v32 >= 0)
    v20 = (const std::__fs::filesystem::path *)&v31;
  else
    v20 = (const std::__fs::filesystem::path *)v31;
  sub_100512FE0(v19, v20, v17);
  if (v32 >= 0)
    v21 = (const char *)&v31;
  else
    v21 = (const char *)v31;
  sub_100512E44(v21);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  return 1;
}

void sub_100AD142C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (*(char *)(v38 - 57) < 0)
    operator delete(*(void **)(v38 - 80));
  _Unwind_Resume(exception_object);
}

void sub_100AD1510(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100AD153C(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100AD15A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100AD162C((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100AD15B8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_100AD3868();
    operator delete();
  }
  return result;
}

uint64_t sub_100AD15EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100AD162C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100AD3868();
    operator delete();
  }
  return result;
}

uint64_t sub_100AD1668(uint64_t a1, const __CFString *a2, char a3)
{
  uint64_t v4;

  v4 = sub_100568D94(a1, a2, a3, (uint64_t)CFSTR("mobile"));
  *(_QWORD *)v4 = off_102168A38;
  if (*(_BYTE *)(v4 + 16))
    sub_100569650(a1, 1);
  return a1;
}

void sub_100AD16B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1005695B8(v1);
  _Unwind_Resume(a1);
}

void sub_100AD16D8(uint64_t a1)
{
  sub_1005695B8(a1);
  operator delete();
}

BOOL sub_100AD1700(uint64_t a1, const __CFString *a2, const void *a3)
{
  sub_10056AE64(a1, a2, a3);
  return sub_100569514(a1);
}

double sub_100AD1724(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0x404E000000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(_OWORD *)(a1 + 56) = _Q0;
  *(_DWORD *)(a1 + 72) = 0;
  result = 0.156897439;
  *(_OWORD *)(a1 + 80) = xmmword_101C07950;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0x3FC415371D0ABDC0;
  *(_BYTE *)(a1 + 128) = 0;
  return result;
}

double sub_100AD1770(double a1)
{
  double v1;
  float v2;

  v1 = 1.0;
  if (a1 >= 0.372823626)
  {
    v1 = 0.0;
    if (a1 < 0.559235454)
    {
      v2 = sub_1002446AC(0.559235454, 0.0, 0.372823626, 1.0, a1);
      v1 = v2;
    }
  }
  return (1.0 - v1) * 60.0 + 120.0;
}

double sub_100AD17E0(uint64_t a1, _QWORD *a2, double a3, double a4)
{
  double v4;
  double v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (a4 - a3 > 0.0)
  {
    v4 = sub_100AD1C38(a1, a2, a3, a4) / (a4 - a3);
    if (v4 > 0.0)
      return 1.0 / v4;
    if (v4 == 0.0)
      return 0.0;
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_102168E08);
  v6 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Odometer failed to compute a mean pace.", buf, 2u);
  }
  v5 = -1.0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_102168E08);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "Odometer failed to compute a mean pace.", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "double CLPedometerPaceFusion::computeMeanPace(const T_buffer &, CFAbsoluteTime, CFAbsoluteTime) const [T_buffer = CLNatalieInput<CLOdometerEntry>]", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return v5;
}

BOOL sub_100AD19A8(_QWORD *a1, uint64_t a2, _QWORD *a3, double a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _BOOL8 result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v4 = a1[7];
  v5 = a1[4];
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x15));
  if (a1[5] == v5)
    v7 = 0;
  else
    v7 = *v6 + 192 * (v4 % 0x15);
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v7;
  v8 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v8;
  v9 = a1[8];
  if (!v9)
    return 0;
  v10 = a1[7] + v9;
  v11 = ((v10 - 1) * (unsigned __int128)0x8618618618618619) >> 64;
  v12 = (v11 + ((v10 - 1 - v11) >> 1)) >> 4;
  v13 = a1[4];
  v14 = a1[5];
  v15 = (_QWORD *)(v13 + 8 * (v10 / 0x15));
  if (*(double *)(*(_QWORD *)(v13 + 8 * v12) + 192 * (v10 - 1 - 21 * v12)) < a4)
  {
    if (v14 == v13)
      v16 = 0;
    else
      v16 = *v15 + 192 * (v10 % 0x15);
    result = 0;
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = v16;
    *(_QWORD *)(a2 + 16) = v15;
    *(_QWORD *)(a2 + 24) = v16;
    return result;
  }
  if (v14 == v13)
    v18 = 0;
  else
    v18 = *v15 + 192 * (v10 % 0x15);
  v19 = a3[3];
  if (v18 == v19)
  {
LABEL_22:
    v24 = *(_QWORD *)(a2 + 24);
    return v24 != v19;
  }
  v20 = *v15;
  v21 = v18;
  v22 = v15;
  while (1)
  {
    v23 = v21 - v20;
    if (v21 == v20)
      break;
    if (*(double *)(v21 - 192) <= a4)
      goto LABEL_23;
LABEL_21:
    v21 -= 192;
    if (v21 == v19)
      goto LABEL_22;
  }
  v20 = *(v22 - 1);
  if (*(double *)(v20 + 3840) > a4)
  {
    v21 = v20 + 4032;
    --v22;
    goto LABEL_21;
  }
LABEL_23:
  v25 = 0xAAAAAAAAAAAAAAABLL * (v23 >> 6);
  if (v23 < -191)
  {
    v30 = 19 - v25;
    v31 = ((19 - v25) * (unsigned __int128)0x8618618618618619) >> 64;
    v32 = (v31 + ((v30 - v31) >> 1)) >> 4;
    v29 = &v22[-v32];
    v24 = *v29 + 192 * (21 * v32 - v30) + 3840;
  }
  else
  {
    v26 = v25 + 1;
    v27 = ((v25 + 1) * (unsigned __int128)0x8618618618618619) >> 64;
    v28 = (v27 + ((v26 - v27) >> 1)) >> 4;
    v29 = &v22[v28];
    v24 = *v29 + 192 * (v26 - 21 * v28);
  }
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v18;
  *(_QWORD *)(a2 + 16) = v29;
  *(_QWORD *)(a2 + 24) = v24;
  v19 = a3[3];
  return v24 != v19;
}

void sub_100AD1C0C(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

double sub_100AD1C38(uint64_t a1, _QWORD *a2, double a3, double a4)
{
  NSObject *v6;
  double v7;
  double v8;
  uint8_t *v9;
  uint8_t *v10;
  NSObject *v11;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  uint8_t *v20;
  double v21;
  double v22;
  _OWORD v23[2];
  uint8_t buf[1640];

  v21 = 0.0;
  v22 = 0.0;
  if (a3 <= a4)
  {
    if (a3 != a4)
    {
      v15 = a2[8];
      if (v15)
        v16 = *(double *)(*(_QWORD *)(a2[4] + 8 * ((v15 + a2[7] - 1) / 0x15uLL)) + 192 * ((v15 + a2[7] - 1) % 0x15uLL));
      else
        v16 = -1.79769313e308;
      if (v16 == a4)
      {
        memset(buf, 0, 32);
        memset(v23, 0, sizeof(v23));
        v7 = -1.0;
        if (!(*(unsigned int (**)(_QWORD *, uint8_t *, _OWORD *, double))(*a2 + 16))(a2, buf, v23, a4)
          || !sub_1002185C0(a3, a1, a2, &v22))
        {
          return v7;
        }
        v17 = *(_QWORD *)&buf[24];
        if (*(_QWORD *)&buf[24] == **(_QWORD **)&buf[16])
          v17 = *(_QWORD *)(*(_QWORD *)&buf[16] - 8) + 4032;
        v18 = *(double *)(v17 - 144);
      }
      else
      {
        v7 = -1.0;
        if (!sub_1002185C0(a3, a1, a2, &v22) || !sub_1002185C0(a4, a1, a2, &v21))
          return v7;
        v18 = v21;
      }
      return v18 - v22;
    }
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_102168E08);
    v11 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Time didn't move! time,%{public}f", buf, 0xCu);
    }
    v7 = -1.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_102168E08);
      LODWORD(v23[0]) = 134349056;
      *(double *)((char *)v23 + 4) = a3;
      v19 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "Time didn't move! time,%{public}f", v23, 12);
      v10 = v20;
      sub_100512490("Generic", 1, 0, 0, "double CLPedometerPaceFusion::getOdometerDistance(const T_buffer &, CFAbsoluteTime, CFAbsoluteTime) const [T_buffer = CLNatalieInput<CLOdometerEntry>]", "%s\n", v19);
      goto LABEL_33;
    }
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_102168E08);
    v6 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = a3;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Time rolled back! t1,%{public}f,t2,%{public}f", buf, 0x16u);
    }
    v7 = -1.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_102168E08);
      LODWORD(v23[0]) = 134349312;
      *(double *)((char *)v23 + 4) = a3;
      WORD6(v23[0]) = 2050;
      *(double *)((char *)v23 + 14) = a4;
      v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "#Warning Time rolled back! t1,%{public}f,t2,%{public}f", v23, 22);
      v10 = v9;
      sub_100512490("Generic", 1, 0, 2, "double CLPedometerPaceFusion::getOdometerDistance(const T_buffer &, CFAbsoluteTime, CFAbsoluteTime) const [T_buffer = CLNatalieInput<CLOdometerEntry>]", "%s\n", v8);
LABEL_33:
      if (v10 != buf)
        free(v10);
    }
  }
  return v7;
}

uint64_t sub_100AD206C(uint64_t a1, double *a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 24))
  {
    *a2 = *(double *)(a1 + 16) - *(double *)a1;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "TCONV,getMachContinuousToCFAbsoluteOffsetSec failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "TCONV,getMachContinuousToCFAbsoluteOffsetSec failed", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLUtils::Timestamp::getMachContinuousToCFAbsoluteTimeOffsetSec(CFTimeInterval &) const", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  return *(unsigned __int8 *)(a1 + 24);
}

float sub_100AD221C(int *a1, float a2, float a3)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;

  v4 = a2 / 57.296;
  v5 = a3 / 57.296;
  v6 = cosf(a2 / 57.296);
  v7 = -0.014538 / (float)(v6 * cosf(v5));
  v8 = tanf(v4);
  v9 = v7 - (float)(v8 * tanf(v5));
  v10 = 2 * (v9 < -1.0);
  if (v9 > 1.0)
    v10 = 1;
  *a1 = v10;
  return acosf(v9) * 57.296;
}

double sub_100AD22BC(double *a1, double *a2, int *a3, double a4, float a5, float a6)
{
  NSCalendar *v12;
  NSDateComponents *v13;
  float v14;
  double v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  double v28;
  double result;

  v12 = +[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian);
  -[NSCalendar setTimeZone:](v12, "setTimeZone:", +[NSTimeZone timeZoneForSecondsFromGMT:](NSTimeZone, "timeZoneForSecondsFromGMT:", 0));
  v13 = -[NSCalendar components:fromDate:](v12, "components:fromDate:", 28, +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a4));
  v14 = sub_1000F2304((int)-[NSDateComponents year](v13, "year"), (int)-[NSDateComponents month](v13, "month"), (int)-[NSDateComponents day](v13, "day"), 0.5);
  v15 = v14;
  v16 = v14 * (v14 * 0.0003032 + 36000.7698) + 280.46646;
  v17 = fmodf(v16, 360.0);
  if (v17 >= 0.0)
    v18 = v17;
  else
    v18 = v17 + 360.0;
  v19 = v15 * (v15 * -0.0001537 + 35999.0503) + 357.52911;
  v20 = ((21.448 - v15 * (v15 * (v15 * -0.001813 + 0.00059) + 46.815)) / 60.0 + 26.0) / 60.0 + 23.0;
  v21 = v20;
  v22 = v15 * -1934.136 + 125.04;
  v23 = v21 + cosf(v22 / 57.296) * 0.00256;
  LODWORD(v21) = sub_1000F21DC(v14, v23, v18, v19);
  v24 = sub_1000F20B4(v14, v23, v18, v19);
  v25 = sub_100AD221C(a3, a5, v24);
  v26 = (a6 * -4.0 + 720.0 - *(float *)&v21) / 1440.0;
  v27 = (float)(v25 * 4.0) / 1440.0;
  v28 = floor(a4 / 86400.0) * 86400.0;
  *a1 = v28 + (float)(v26 - v27) * 86400.0;
  result = v28 + (float)(v27 + v26) * 86400.0;
  *a2 = result;
  return result;
}

BOOL sub_100AD2554(uint64_t a1, double *a2)
{
  _BOOL8 result;
  _BYTE v5[40];

  result = sub_10010FB90(a1, (uint64_t)v5);
  if (result)
    return sub_10010EFA0(a1, a2);
  return result;
}

BOOL sub_100AD25A0(uint64_t a1, double *a2, double *a3)
{
  NSObject *v7;
  char *v8;
  __int16 v9;
  double v10;
  uint8_t buf[1640];

  v10 = 0.0;
  if (sub_10010F9D4(a1, &v10))
  {
    *a3 = *a2 - v10;
    return sub_10010EFA0(a1, a3);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TCONV,Failed in getting the offset between mach continuous time and mach absolute time", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      v9 = 0;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "TCONV,Failed in getting the offset between mach continuous time and mach absolute time", &v9, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::convertMachContinuousToMachAbsolute_RealTime(const CFTimeInterval &, CFTimeInterval &)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    return 0;
  }
}

void sub_100AD2788(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

double sub_100AD27B4(uint64_t a1, char a2)
{
  uint64_t v3;
  double result;

  sub_100E3F864(a1);
  *(int64x2_t *)(v3 + 24) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(v3 + 40) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0x3FFB333340000000;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 124) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_BYTE *)(v3 + 192) = a2;
  *(_DWORD *)(v3 + 200) = 0;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_QWORD *)&result = 1050253722;
  *(_QWORD *)(v3 + 240) = 1050253722;
  return result;
}

void sub_100AD2828(double a1, uint64_t a2, _DWORD *a3, int *a4, uint64_t a5)
{
  NSObject *v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  const char *v58;
  uint8_t *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  __int128 v64;
  int v65;
  int v66;
  int v67;
  double v68;
  int v69;
  double v70;
  _BYTE v71[10];
  int v72;
  int v73;
  int v74;
  int v75;
  __int16 v76;
  int v77;
  uint8_t buf[4];
  int v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;
  __int16 v88;
  int v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  __int16 v112;
  double v113;
  __int16 v114;
  int v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  double v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102168E48);
  v9 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
  {
    v10 = *a4;
    v11 = *(_QWORD *)(a5 + 32);
    v12 = *(float *)(a5 + 24);
    v13 = *(float *)(a5 + 40);
    v14 = *(float *)(a5 + 44);
    v15 = *(_DWORD *)(a5 + 56);
    v16 = *(_QWORD *)(a5 + 64);
    v17 = *(unsigned __int8 *)(a5 + 72);
    v18 = *(unsigned __int8 *)(a5 + 73);
    v19 = *(_DWORD *)(a5 + 76);
    v20 = a4[2] - a3[2];
    HIDWORD(v62) = a4[3] - a3[3];
    v21 = a4[7] - a3[7];
    v22 = a4[8] - a3[8];
    v23 = *(_QWORD *)(a5 + 80);
    v61 = *(double *)(a5 + 88);
    v24 = a4[9] - a3[9];
    v25 = a4[10] - a3[10];
    v26 = a4[11] - a3[11];
    v27 = a4[14] - a3[14];
    v28 = a4[15] - a3[15];
    v29 = *(_QWORD *)(a5 + 96);
    v30 = a4[12] - a3[12];
    v31 = a4[13] - a3[13];
    v32 = *(unsigned __int8 *)(a5 + 104);
    *(_DWORD *)buf = 67116032;
    v79 = v10;
    v80 = 2048;
    v81 = v11;
    v82 = 2048;
    v83 = v12;
    v84 = 2048;
    v85 = v13;
    v86 = 2048;
    v87 = v14;
    v88 = 1024;
    v89 = v15;
    v90 = 2048;
    v91 = v16;
    v92 = 1024;
    v93 = v17;
    v94 = 1024;
    v95 = v18;
    v96 = 1024;
    v97 = v19;
    v98 = 1024;
    v99 = v23;
    v100 = 1024;
    v101 = 1;
    v102 = 1024;
    v103 = v20;
    v104 = 1024;
    v105 = 1;
    v106 = 1024;
    v107 = HIDWORD(v62);
    v108 = 1024;
    v109 = v21;
    v110 = 1024;
    v111 = v22;
    v112 = 2048;
    v113 = v61;
    v114 = 1024;
    v115 = v24;
    v116 = 2048;
    v117 = v29;
    v118 = 1024;
    v119 = v25;
    v120 = 1024;
    v121 = v26;
    v122 = 2048;
    v123 = a1;
    v124 = 1024;
    v125 = v27;
    v126 = 1024;
    v127 = v28;
    v128 = 1024;
    v129 = v30;
    v130 = 1024;
    v131 = v31;
    v132 = 1024;
    v133 = v32;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "pairNumber,%d,startTime,%f,mets,%f,hr,%f,hrConfidence,%f,gradeType,%d,grade,%f,hasGPS,%d,hasStrideCal,%d,metSource,%d,workoutType,%d,warmupOK,%d,gradeOK,%d,metDeltaOK,%d,metsAboveMin,%d,metSourceOK,%d,hrOK,%d,cadence,%f,workoutLengthOK,%d,pace,%f,paceOK,%d,strollerOK,%d,percentGradeSigma,%.6f,percentWalkingOK,%d,metsAboveAdaptiveAlgMin,%d,pairOKForClustering,%d,pairOKForAdaptiveModel,%d,isStroller,%d", buf, 0xCAu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102168E48);
    v33 = *a4;
    v34 = *(_QWORD *)(a5 + 32);
    v35 = *(float *)(a5 + 24);
    v36 = *(float *)(a5 + 40);
    v37 = *(float *)(a5 + 44);
    v38 = *(_DWORD *)(a5 + 56);
    v39 = *(_QWORD *)(a5 + 64);
    v40 = *(unsigned __int8 *)(a5 + 72);
    v41 = *(unsigned __int8 *)(a5 + 73);
    v42 = *(_DWORD *)(a5 + 76);
    v43 = a4[2] - a3[2];
    v44 = a4[3] - a3[3];
    v45 = a4[7] - a3[7];
    v46 = a4[8] - a3[8];
    v47 = a4[9] - a3[9];
    v48 = a4[10] - a3[10];
    v49 = a4[12];
    v50 = a3[12];
    v51 = a4[11] - a3[11];
    v52 = a4[13];
    v53 = a3[13];
    v54 = a4[14] - a3[14];
    v55 = *(_QWORD *)(a5 + 88);
    v56 = *(_QWORD *)(a5 + 96);
    v57 = *(unsigned __int8 *)(a5 + 104);
    LODWORD(v63) = 67116032;
    HIDWORD(v63) = v33;
    LOWORD(v64) = 2048;
    *(_QWORD *)((char *)&v64 + 2) = v34;
    WORD5(v64) = 2048;
    HIDWORD(v64) = LODWORD(v35);
    LOWORD(v65) = 1024;
    HIWORD(v65) = v38;
    LOWORD(v66) = 1024;
    HIWORD(v66) = v40;
    LOWORD(v67) = HIWORD(v42);
    HIWORD(v67) = 1024;
    LODWORD(v68) = 0x4000000;
    HIDWORD(v68) = v44;
    LOWORD(v69) = 1024;
    HIWORD(v69) = v45;
    LODWORD(v70) = v46;
    WORD2(v70) = 2048;
    HIWORD(v70) = v55;
    *(_QWORD *)v71 = v56;
    *(_WORD *)&v71[8] = 1024;
    LOWORD(v72) = HIWORD(v51);
    HIWORD(v72) = 2048;
    LOWORD(v73) = HIWORD(v54);
    HIWORD(v73) = 1024;
    LOWORD(v74) = 1024;
    HIWORD(v74) = v49 - v50;
    v75 = v52 - v53;
    v76 = 1024;
    v77 = v57;
    LODWORD(v60) = 202;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "pairNumber,%d,startTime,%f,mets,%f,hr,%f,hrConfidence,%f,gradeType,%d,grade,%f,hasGPS,%d,hasStrideCal,%d,metSource,%d,workoutType,%d,warmupOK,%d,gradeOK,%d,metDeltaOK,%d,metsAboveMin,%d,metSourceOK,%d,hrOK,%d,cadence,%f,workoutLengthOK,%d,pace,%f,paceOK,%d,strollerOK,%d,percentGradeSigma,%.6f,percentWalkingOK,%d,metsAboveAdaptiveAlgMin,%d,pairOKForClustering,%d,pairOKForAdaptiveModel,%d,isStroller,%d", &v63, v60, v61, v62, v63, (_DWORD)v64, *((double *)&v64 + 1), HIDWORD(v35),
      *(_QWORD *)&v36 >> 16,
      LODWORD(v37),
      v65,
      v39,
      v66,
      v41,
      v67,
      66560,
      v43,
      v68,
      v69,
      v70,
      v55 >> 16,
      v47,
      *(double *)&v71[2],
      v48,
      v72,
      HIDWORD(a1),
      v73,
      v74);
    v59 = (uint8_t *)v58;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxPreprocessor::logSinglePairStats(const PairStats &, const PairStats &, const VO2MaxInput &, const double) const", "%s\n", v58);
    if (v59 != buf)
      free(v59);
  }
}

void sub_100AD2D14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  double v7;
  float v8;
  int v9;
  int *v10;
  __int128 v11;
  __int128 v12;
  double v13;
  _BOOL4 v14;
  int v15;
  int v16;
  double v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  int v36;
  int v37;
  int v38;
  float v39;
  float v40;
  BOOL v41;
  float v42;
  float v43;
  int v44;
  int v45;
  _BOOL4 v46;
  int v47;
  char *v48;
  _OWORD v49[3];
  _OWORD v50[2];

  v6 = *(double *)(a2 + 32);
  v7 = *(double *)(a2 + 48);
  *(double *)a3 = v6;
  *(double *)(a3 + 8) = v7;
  v8 = *(float *)(a2 + 24) * 3.5;
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a2 + 40);
  *(float *)(a3 + 20) = v8;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 52) = 0u;
  v10 = (int *)(a1 + 64);
  v9 = *(_DWORD *)(a1 + 64);
  v11 = *(_OWORD *)(a1 + 80);
  v12 = *(_OWORD *)(a1 + 112);
  v49[2] = *(_OWORD *)(a1 + 96);
  v50[0] = v12;
  *(_OWORD *)((char *)v50 + 12) = *(_OWORD *)(a1 + 124);
  v49[0] = *(_OWORD *)(a1 + 64);
  v49[1] = v11;
  v13 = *(double *)(a1 + 24);
  if (v13 < 0.0)
    v13 = v6;
  *(double *)(a1 + 24) = v13;
  *(double *)(a1 + 32) = v6;
  *v10 = v9 + 1;
  v14 = v7 == 0.0;
  if (vabdd_f64(v7, *(double *)(a2 + 32)) < 5.0)
    v14 = 1;
  v15 = *(_DWORD *)(a2 + 56);
  if (!v15)
    v14 = 0;
  v16 = *(_DWORD *)(a1 + 68);
  if (v15)
    ++v16;
  *(_DWORD *)(a1 + 68) = v16;
  if (v15)
  {
    v17 = *(double *)(a2 + 64);
    v18 = v17 > -0.02;
    if (*(_BYTE *)(a1 + 192))
    {
      v18 = v17 > -0.02;
      if (v17 >= 0.02)
        v18 = 0;
    }
    v19 = v14 & v18;
    *(_DWORD *)(a1 + 72) += v18;
    v20 = *(_DWORD *)(a1 + 136);
    if (fabs(v17) > 0.0525)
      ++v20;
    *(_DWORD *)(a1 + 136) = v20;
  }
  else
  {
    v19 = 0;
  }
  v21 = sub_100AD3014(a1, *(_QWORD *)(a2 + 80), *(double *)(a2 + 96), *(double *)(a2 + 88));
  v22 = v19 & v21;
  v23 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 104) += v21;
  v24 = *(double *)(a2 + 96) <= 0.0 || *(_BYTE *)(a2 + 104) == 0;
  if (v24)
  {
    v25 = v23 + 1;
  }
  else
  {
    v22 = 0;
    v25 = v23;
  }
  *(_DWORD *)(a1 + 108) = v25;
  v26 = *(unsigned __int8 *)(a2 + 72);
  v24 = v26 == 0;
  v27 = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a1 + 80) += v26;
  v28 = *(_DWORD *)(a1 + 92);
  v29 = *(_DWORD *)(a1 + 88) + v26;
  if (v24)
    v22 = 0;
  *(_DWORD *)(a1 + 84) = v27 + *(unsigned __int8 *)(a2 + 73);
  *(_DWORD *)(a1 + 88) = v29;
  if (*(_DWORD *)(a2 + 76))
  {
    v22 = 0;
    v30 = v28;
  }
  else
  {
    v30 = v28 + 1;
  }
  *(_DWORD *)(a1 + 92) = v30;
  v31 = *(float *)(a2 + 44);
  if (v31 <= 0.35)
    v22 = 0;
  v32 = *(_DWORD *)(a1 + 96);
  if (v31 > 0.35)
    ++v32;
  *(_DWORD *)(a1 + 96) = v32;
  v33 = *(float *)(a2 + 40);
  v35 = *(float *)(a1 + 8);
  v34 = *(float *)(a1 + 12);
  v37 = *(_DWORD *)(a1 + 124);
  v36 = *(_DWORD *)(a1 + 128);
  if (v33 > v34)
    ++v36;
  v38 = *(_DWORD *)(a1 + 132);
  if (v33 < v35)
    ++v38;
  *(_DWORD *)(a1 + 128) = v36;
  *(_DWORD *)(a1 + 132) = v38;
  v39 = (v34 - v33) / (v34 - v35);
  v40 = 1.0 - v39;
  if (v40 <= 0.0)
    v22 = 0;
  v41 = v31 < 0.6;
  v42 = 0.0;
  if (!v41)
    v42 = v40;
  *(float *)(a1 + 244) = v42;
  v43 = *(float *)(a2 + 24);
  if (v43 > 2.5)
    v44 = v22;
  else
    v44 = 0;
  if (v43 <= 2.5)
    v45 = v37;
  else
    v45 = v37 + 1;
  *(_DWORD *)(a1 + 124) = v45;
  v46 = sub_100AD30B0((_QWORD *)a1, a2);
  if (v46)
    ++*(_DWORD *)(a1 + 120);
  if (v44)
  {
    ++*(_DWORD *)(a1 + 112);
    sub_1004182EC((double *)(a1 + 200), *(double *)(a2 + 64));
    if (v46)
    {
      *(_DWORD *)(a3 + 64) = 2;
      ++*(_DWORD *)(a1 + 116);
    }
    else
    {
      *(_DWORD *)(a3 + 64) = 1;
    }
  }
  v47 = *(_DWORD *)(a1 + 76);
  if (*(float *)(a2 + 24) > 4.0)
    ++v47;
  *(_DWORD *)(a1 + 76) = v47;
  v48 = sub_100AD3288((_QWORD *)a1, a2, a3);
  sub_100AD2828(*(double *)(a3 + 40), (uint64_t)v48, v49, v10, a2);
}

uint64_t sub_100AD3014(uint64_t a1, unint64_t a2, double a3, double a4)
{
  uint64_t result;

  if (a3 <= 0.0)
    return 0;
  LODWORD(result) = sub_10009DDEC(a3, *(double *)(a1 + 56));
  if (a4 * 60.0 > 140.0)
    result = 1;
  else
    result = result;
  if (*(_DWORD *)(a1 + 48) == 3 && (result & 1) != 0)
    return 0;
  if (a2 > 0x12 || ((1 << a2) & 0x60004) == 0)
    return 1;
  return result;
}

BOOL sub_100AD30B0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char **v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  double v21;
  char *v22;
  char *v23;
  double *v24;
  double *v25;
  double v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v6 = a1[23];
  v4 = (uint64_t)(a1 + 23);
  v5 = v6;
  v7 = (char **)(v4 - 16);
  v8 = *(double *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(v4 - 8);
  if (v10 >= v6)
  {
    v13 = (uint64_t)(v10 - (_QWORD)*v7) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      sub_100259694();
    v15 = v5 - (_QWORD)*v7;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    v17 = (char *)sub_10028E224(v4, v16);
    v18 = &v17[16 * v13];
    v20 = &v17[16 * v19];
    v21 = 0.0;
    if (v8 <= 0.0)
      v21 = 1.0;
    *(_QWORD *)v18 = v9;
    *((double *)v18 + 1) = v21;
    v12 = v18 + 16;
    v23 = (char *)a1[21];
    v22 = (char *)a1[22];
    if (v22 != v23)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v22 - 1);
        v18 -= 16;
        v22 -= 16;
      }
      while (v22 != v23);
      v22 = *v7;
    }
    a1[21] = v18;
    a1[22] = v12;
    a1[23] = v20;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v11 = 0.0;
    if (v8 <= 0.0)
      v11 = 1.0;
    *(_QWORD *)v10 = v9;
    *(double *)(v10 + 8) = v11;
    v12 = (char *)(v10 + 16);
  }
  a1[22] = v12;
  v24 = (double *)a1[21];
  v25 = (double *)v12;
  if (v24 != (double *)v12)
  {
    v26 = *(double *)(a2 + 32);
    while (vabdd_f64(v26, *v24) <= 122.56)
    {
      v24 += 2;
      if (v24 == (double *)v12)
      {
        v25 = (double *)v12;
        goto LABEL_29;
      }
    }
    v25 = (double *)v12;
    if (v24 != (double *)v12)
    {
      v27 = v24 + 2;
      v25 = v24;
      while (v27 != (double *)v12)
      {
        if (vabdd_f64(v26, *v27) <= 122.56)
        {
          *v25 = *v27;
          v25[1] = v27[1];
          v25 += 2;
        }
        v27 += 2;
      }
    }
  }
LABEL_29:
  sub_100956AB4((uint64_t)v7, (char *)v25, v12);
  v28 = a1[21];
  v29 = a1[22];
  if (v28 == v29)
    return 1;
  v30 = 0;
  do
  {
    v30 = (int)(*(double *)(v28 + 8) + (double)v30);
    v28 += 16;
  }
  while (v28 != v29);
  return v30 < 10;
}

char *sub_100AD3288(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  void **v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  double *v22;
  double *v23;
  double v24;
  double *v25;
  char *result;
  double *v27;
  double *v28;
  double v29;
  unint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;

  v6 = *(_QWORD *)(a2 + 88);
  v7 = *(double *)(a2 + 64) * 100.0;
  *(double *)(a3 + 24) = 2.23693991 / *(double *)(a2 + 96);
  *(double *)(a3 + 32) = v7;
  *(double *)(a3 + 48) = *(float *)(a2 + 44);
  *(_QWORD *)(a3 + 56) = v6;
  v8 = (uint64_t)(a1 + 20);
  v9 = a1[20];
  v10 = (void **)(a1 + 18);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = (char *)a1[19];
  if ((unint64_t)v12 >= v9)
  {
    v14 = (char *)*v10;
    v15 = (v12 - (_BYTE *)*v10) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      sub_100259694();
    v17 = v9 - (_QWORD)v14;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      v19 = (char *)sub_10028E224(v8, v18);
      v14 = (char *)a1[18];
      v12 = (char *)a1[19];
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[16 * v15];
    v21 = &v19[16 * v18];
    *(_QWORD *)v20 = v11;
    *((double *)v20 + 1) = v7;
    v13 = v20 + 16;
    if (v12 != v14)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v12 - 1);
        v20 -= 16;
        v12 -= 16;
      }
      while (v12 != v14);
      v14 = (char *)*v10;
    }
    a1[18] = v20;
    a1[19] = v13;
    a1[20] = v21;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_QWORD *)v12 = v11;
    *((double *)v12 + 1) = v7;
    v13 = v12 + 16;
  }
  a1[19] = v13;
  v22 = (double *)a1[18];
  v23 = (double *)v13;
  if (v22 != (double *)v13)
  {
    v24 = *(double *)(a2 + 32);
    while (vabdd_f64(v24, *v22) <= 62.56)
    {
      v22 += 2;
      if (v22 == (double *)v13)
      {
        v23 = (double *)v13;
        goto LABEL_28;
      }
    }
    v23 = (double *)v13;
    if (v22 != (double *)v13)
    {
      v25 = v22 + 2;
      v23 = v22;
      while (v25 != (double *)v13)
      {
        if (vabdd_f64(v24, *v25) <= 62.56)
        {
          *v23 = *v25;
          v23[1] = v25[1];
          v23 += 2;
        }
        v25 += 2;
      }
    }
  }
LABEL_28:
  result = sub_100956AB4((uint64_t)v10, (char *)v23, v13);
  v28 = (double *)a1[18];
  v27 = (double *)a1[19];
  v29 = 0.0;
  if (vabdd_f64(*(v27 - 2), *v28) >= 60.0)
  {
    if (v28 == v27)
      goto LABEL_34;
    v30 = -1;
    v31 = 0.0;
    do
    {
      v32 = v28[1];
      v33 = v32 - v31;
      v31 = v31 + (v32 - v31) / (double)(v30 + 2);
      v29 = v29 + v33 * (v32 - v31);
      v28 += 2;
      ++v30;
    }
    while (v28 != v27);
    if (!v30)
LABEL_34:
      v34 = 2.22044605e-16;
    else
      v34 = v29 / (double)v30 + 2.22044605e-16;
    v29 = sqrt(v34);
  }
  *(double *)(a3 + 40) = v29;
  return result;
}

void sub_100AD34E4(uint64_t a1)
{
  uint64_t v2;
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[32];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  void *__p[2];
  _OWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v2 = a1 + 192;
  v3 = *(_BYTE *)(a1 + 192);
  sub_100E3F864((uint64_t)&v15);
  *(int64x2_t *)&v16[8] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)&v16[24] = 0xFFEFFFFFFFFFFFFFLL;
  LODWORD(v17) = 0;
  *((_QWORD *)&v17 + 1) = 0x3FFB333340000000;
  v4 = 0uLL;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  memset(v21, 0, 28);
  *(_OWORD *)__p = 0u;
  memset(v23, 0, sizeof(v23));
  LOBYTE(v24) = v3;
  DWORD2(v24) = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 1050253722;
  v5 = v15;
  v6 = *(_OWORD *)v16;
  v7 = v17;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v16[16];
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  v8 = v18;
  v9 = v19;
  *(_OWORD *)(a1 + 124) = *(_OWORD *)((char *)v21 + 12);
  v10 = v21[0];
  *(_OWORD *)(a1 + 96) = v20;
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  v11 = *(void **)(a1 + 144);
  if (v11)
  {
    *(_QWORD *)(a1 + 152) = v11;
    operator delete(v11);
    v4 = *(_OWORD *)__p;
    v12 = *(_QWORD *)&v23[0];
  }
  else
  {
    v12 = 0;
  }
  *(_OWORD *)(a1 + 144) = v4;
  *(_QWORD *)(a1 + 160) = v12;
  __p[1] = 0;
  *(_QWORD *)&v23[0] = 0;
  __p[0] = 0;
  v13 = *(void **)(a1 + 168);
  if (v13)
  {
    *(_QWORD *)(a1 + 176) = v13;
    operator delete(v13);
    v13 = __p[0];
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)((char *)v23 + 8);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)&v23[1] + 1);
  memset((char *)v23 + 8, 0, 24);
  v14 = v25;
  *(_OWORD *)v2 = v24;
  *(_OWORD *)(v2 + 16) = v14;
  *(_OWORD *)(v2 + 32) = v26;
  *(_QWORD *)(v2 + 48) = v27;
  if (v13)
  {
    __p[1] = v13;
    operator delete(v13);
  }
}

uint64_t sub_100AD3654(uint64_t a1, uint64_t a2)
{
  *(double *)(a1 + 56) = *(float *)(a2 + 8);
  return sub_100E3F878(a1, *(float *)(a2 + 28));
}

float sub_100AD3668(float *a1, double a2)
{
  float v2;
  float v3;
  float result;

  v2 = a2;
  v3 = (a1[3] - v2) / (a1[3] - a1[2]);
  result = fminf(1.0 - v3, 0.3);
  a1[60] = result;
  return result;
}

BOOL sub_100AD36A8(uint64_t a1)
{
  return *(float *)(a1 + 244) >= *(float *)(a1 + 240);
}

float sub_100AD36B8(uint64_t a1)
{
  return (float)((float)(*(_DWORD *)(a1 + 64) - *(_DWORD *)(a1 + 108)) * 100.0) / (float)*(int *)(a1 + 64);
}

float sub_100AD36E0(uint64_t a1)
{
  return (float)*(int *)(a1 + 116) * 2.56;
}

void sub_100AD36F8(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

double sub_100AD3724(double *a1, uint64_t a2)
{
  double result;

  result = *(double *)(a2 + 72);
  *a1 = result;
  a1[1] = result;
  return result;
}

double sub_100AD3730(uint64_t a1)
{
  return *(double *)a1;
}

double sub_100AD3738(double *a1, double a2)
{
  double result;

  result = *a1 + a2;
  *a1 = result;
  return result;
}

uint64_t sub_100AD3748(uint64_t a1, int a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = 0;
  sub_10055D44C(a1 + 32, "CLCircularLogBuffer", 1, 1);
  return a1;
}

FILE **sub_100AD378C(FILE **a1)
{
  sub_100AD37BC(a1);
  sub_10055D4D0(a1 + 4);
  return a1;
}

uint64_t sub_100AD37BC(FILE **a1)
{
  _QWORD *v2;
  FILE *v3;
  FILE *v4;
  uint64_t v5;

  v2 = a1 + 4;
  (*(void (**)(FILE **))&a1[4]->_flags)(a1 + 4);
  v3 = *a1;
  if (*a1)
  {
    *a1 = 0;
    fclose(v3);
  }
  v4 = a1[1];
  if (v4)
  {
    free(v4);
    a1[1] = 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  sub_100AD3944((uint64_t)a1);
  (*(void (**)(_QWORD *))(*v2 + 24))(v2);
  return v5;
}

void sub_100AD3854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

FILE *sub_100AD386C(FILE **a1)
{
  char *v2;
  FILE *v3;
  FILE *v4;

  v2 = (char *)(a1 + 4);
  (*(void (**)(FILE **))&a1[4]->_flags)(a1 + 4);
  v3 = *a1;
  if (!*a1)
  {
    v4 = (FILE *)malloc_type_malloc(*((int *)a1 + 4), 0x100004077774924uLL);
    a1[1] = v4;
    if (v4)
    {
      *a1 = funopen(a1, 0, (int (__cdecl *)(void *, const char *, int))sub_100AD393C, 0, (int (__cdecl *)(void *))sub_100AD3940);
      sub_100AD3944((uint64_t)a1);
    }
    v3 = *a1;
  }
  (*(void (**)(char *))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_100AD3924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100AD3944(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  *(_QWORD *)(v1 - 12) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
}

uint64_t sub_100AD3988(uint64_t a1, FILE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v4 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  v5 = *(_QWORD *)(v4 - 24);
  if (v5)
  {
    if (*(_QWORD *)a1)
    {
      fflush(*(FILE **)a1);
      v5 = *(_QWORD *)(a1 + 8);
    }
    v6 = *(unsigned int *)(a1 + 24);
    v7 = *(int *)(a1 + 16);
    if ((int)v6 >= (int)v7)
    {
      v8 = v7 + v5;
      v9 = *(char *)(v8 - 1);
      *(_BYTE *)(v8 - 1) = 0;
      fputs((const char *)(*(_QWORD *)(a1 + 8) + *(int *)(a1 + 20)), a2);
      fputc(v9, a2);
      v5 = *(_QWORD *)(a1 + 8);
    }
    *(_BYTE *)(v5 + *(int *)(a1 + 20)) = 0;
    fputs(*(const char **)(a1 + 8), a2);
    sub_100AD3944(a1);
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v6;
}

void sub_100AD3A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100AD3A8C(uint64_t a1, const void *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  LODWORD(v3) = a3;
  v6 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  v7 = *(_QWORD *)(v6 - 24);
  if (v7)
  {
    v8 = *(int *)(a1 + 20);
    v9 = *(_DWORD *)(a1 + 16) - v8;
    if (v9 >= (int)v3)
      v3 = v3;
    else
      v3 = v9;
    memcpy((void *)(v7 + v8), a2, (int)v3);
    v10 = *(_DWORD *)(a1 + 16);
    v11 = (*(_DWORD *)(a1 + 20) + (int)v3) % v10;
    if (*(_DWORD *)(a1 + 24) + (int)v3 < v10)
      v10 = *(_DWORD *)(a1 + 24) + v3;
    *(_DWORD *)(a1 + 20) = v11;
    *(_DWORD *)(a1 + 24) = v10;
  }
  else
  {
    v3 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v3;
}

uint64_t sub_100AD3B3C(uint64_t a1)
{
  uint64_t result;
  double v3;
  double v4;
  int v5;
  int v6;
  _BOOL4 v7;
  double v8[13];
  int v9;

  result = (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)a1 + 120))(a1, v8);
  if ((_DWORD)result)
  {
    v3 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
    v4 = v3 - v8[9];
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v6 = v5 - v9;
    v7 = v4 > 25.0;
    if (v4 < 0.0)
      v7 = 1;
    if (v6 > 0x3B)
      v7 = 1;
    return v6 > 3 && v7;
  }
  return result;
}

double sub_100AD3BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  BOOL v5;
  double result;
  int v7;
  double v8;
  BOOL v9;

  v2 = 0;
  v3 = *(_DWORD *)(a1 + 100);
  do
  {
    v4 = *(_DWORD *)((char *)&xmmword_101C07AC0 + v2);
    v5 = v4 == v3 || v2 == 12;
    v2 += 4;
  }
  while (!v5);
  result = 0.0;
  if (v4 == v3)
  {
    v7 = *(_DWORD *)(a1 + 104) - *(_DWORD *)(a2 + 104);
    v8 = *(double *)(a1 + 48) - *(double *)(a1 + 40);
    v9 = v8 <= 0.0 || v7 <= 0;
    result = v8 + (double)v7;
    if (v9)
      return 0.0;
  }
  return result;
}

double sub_100AD3C5C(uint64_t a1, uint64_t a2)
{
  double v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1632];
  _BYTE v10[152];

  if (((*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 120))(a2, v10) & 1) != 0)
    return sub_100AD3BFC(a1, (uint64_t)v10);
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_102168E68);
  v4 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#SWOLF,unable to calculate lap SWOLF since last entry is not available", buf, 2u);
  }
  v3 = 0.0;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102168E68);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 0, "#SWOLF,unable to calculate lap SWOLF since last entry is not available", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "double CLSWOLFUtil::calculateLapSwimSWOLF(const CLSwimEntry &, const CLSwimDataStore &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return v3;
}

double sub_100AD3E24(uint64_t a1, uint64_t a2)
{
  double result;
  double v3;
  double v5;
  double v6;
  int v7;
  BOOL v8;

  result = 0.0;
  if (*(_DWORD *)(a1 + 100) == 1)
  {
    v3 = *(double *)(a1 + 72) - *(double *)(a2 + 72);
    if (v3 >= 20.0 && v3 <= 30.0)
    {
      v5 = 25.0 / v3;
      v6 = v5 * (*(double *)(a1 + 48) - *(double *)(a1 + 40));
      v7 = llround(v5 * (double)(*(_DWORD *)(a1 + 104) - *(_DWORD *)(a2 + 104)));
      v8 = v7 <= 0 || v6 <= 0.0;
      result = v6 + (double)v7;
      if (v8)
        return 0.0;
    }
  }
  return result;
}

double sub_100AD3E9C(uint64_t a1, uint64_t a2)
{
  double v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1632];
  _BYTE v10[152];

  if (((*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 120))(a2, v10) & 1) != 0)
    return sub_100AD3E24(a1, (uint64_t)v10);
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_102168E68);
  v4 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#SWOLF,unable to calculate lap SWOLF since last entry is not available", buf, 2u);
  }
  v3 = 0.0;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102168E68);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 0, "#SWOLF,unable to calculate lap SWOLF since last entry is not available", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "double CLSWOLFUtil::calculateOpenWaterSWOLF(const CLSwimEntry &, const CLSwimDataStore &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return v3;
}

double sub_100AD4064(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double *v4;
  double v5;
  BOOL v6;
  double v7;
  double *v9;
  double *v10;

  (*(void (**)(double **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(&v9, a2, a1);
  if (v9 == v10)
  {
    v7 = 0.0;
    if (!v9)
      return v7;
    goto LABEL_12;
  }
  v2 = 0.0;
  v3 = 0.0;
  v4 = v9;
  do
  {
    v5 = v4[4];
    v6 = v5 == 0.0;
    if (v5 == 0.0)
      v5 = -0.0;
    v3 = v3 + v5;
    if (!v6)
      v2 = v2 + 1.0;
    v4 += 5;
  }
  while (v4 != v10);
  if (v2 <= 0.0)
    v7 = 0.0;
  else
    v7 = v3 / v2;
  if (v9)
  {
LABEL_12:
    v10 = v9;
    operator delete(v9);
  }
  return v7;
}

void sub_100AD4114(_QWORD *a1, __n128 a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  unint64_t v9;
  double *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  double *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  BOOL v39;
  unint64_t v40;
  double *v41;
  char *v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  double *v46;
  const char *v47;
  uint8_t *v48;
  const char *v49;
  const char *v50;
  _QWORD *v51;
  __n128 v52;
  double out[6];
  char v54[48];
  int v55;
  unint64_t v56;
  __int16 v57;
  double *v58;
  __int16 v59;
  char *v60;
  __int16 v61;
  _BYTE v62[10];
  uint64_t v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint8_t buf[4];
  unint64_t v79;
  __int16 v80;
  double *v81;
  __int16 v82;
  char *v83;
  __int16 v84;
  _BYTE v85[10];
  uint64_t v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;

  v2 = a1;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    memset(v54, 0, 37);
    memset(out, 0, 37);
    goto LABEL_23;
  }
  v51 = a1;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  a2.n128_u64[0] = 134220800;
  v52 = a2;
  do
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102168E68);
    v8 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)v3;
      v10 = *(double **)(v3 + 40);
      v11 = *(char **)(v3 + 48);
      v12 = *(_QWORD *)(v3 + 72);
      v13 = *(_QWORD *)(v3 + 80);
      v14 = *(_DWORD *)(v3 + 96);
      v15 = *(_DWORD *)(v3 + 100);
      v16 = *(_DWORD *)(v3 + 104);
      v17 = *(_DWORD *)(v3 + 108);
      v18 = *(_DWORD *)(v3 + 120);
      v19 = *(_QWORD *)(v3 + 128);
      v20 = *(_QWORD *)(v3 + 136);
      *(_DWORD *)buf = v52.n128_u32[0];
      v79 = v9;
      v80 = 2048;
      v81 = v10;
      v82 = 2048;
      v83 = v11;
      v84 = 2048;
      *(_QWORD *)v85 = v12;
      *(_WORD *)&v85[8] = 2048;
      v86 = v13;
      v87 = 1024;
      v88 = v14;
      v89 = 1024;
      v90 = v15;
      v91 = 1024;
      v92 = v16;
      v93 = 1024;
      v94 = v17;
      v95 = 1024;
      v96 = v18;
      v97 = 2048;
      v98 = v19;
      v99 = 2048;
      v100 = v20;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "SWOLF session entries,id,%llu,startTime,%f,endTime,%f,distance,%f,distanceTimestamp,%f,type,%d,style,%d,strokes,%d,laps,%d,segment,%d,SWOLF,%f,segmentSWOLF,%f", buf, 0x66u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102168E68);
      v22 = *(_QWORD *)v3;
      v23 = *(double **)(v3 + 40);
      v24 = *(char **)(v3 + 48);
      v25 = *(_QWORD *)(v3 + 72);
      v26 = *(_QWORD *)(v3 + 80);
      v27 = *(_DWORD *)(v3 + 96);
      v28 = *(_DWORD *)(v3 + 100);
      v29 = *(_DWORD *)(v3 + 104);
      v30 = *(_DWORD *)(v3 + 108);
      v31 = *(_DWORD *)(v3 + 120);
      v32 = *(_QWORD *)(v3 + 128);
      v33 = *(_QWORD *)(v3 + 136);
      v55 = v52.n128_u32[0];
      v56 = v22;
      v57 = 2048;
      v58 = v23;
      v59 = 2048;
      v60 = v24;
      v61 = 2048;
      *(_QWORD *)v62 = v25;
      *(_WORD *)&v62[8] = 2048;
      v63 = v26;
      v64 = 1024;
      v65 = v27;
      v66 = 1024;
      v67 = v28;
      v68 = 1024;
      v69 = v29;
      v70 = 1024;
      v71 = v30;
      v72 = 1024;
      v73 = v31;
      v74 = 2048;
      v75 = v32;
      v76 = 2048;
      v77 = v33;
      LODWORD(v49) = 102;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "SWOLF session entries,id,%llu,startTime,%f,endTime,%f,distance,%f,distanceTimestamp,%f,type,%d,style,%d,strokes,%d,laps,%d,segment,%d,SWOLF,%f,segmentSWOLF,%f", &v55, *(double *)&v49, *(double *)&v50, *(double *)&v51, v52.n128_f64[0], v52.n128_u32[2], LODWORD(out[0]), LODWORD(out[1]), LODWORD(out[2]), LODWORD(out[3]),
        out[4],
        out[5]);
      v35 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "void CLSWOLFUtil::logEntries(const std::vector<CLSwimEntry> &)", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
    v21 = *(_DWORD *)(v3 + 96);
    if ((v21 - 1) >= 2)
    {
      if (v21 != 3)
        goto LABEL_14;
      ++v6;
    }
    else
    {
      ++v5;
    }
    if (*(double *)(v3 + 128) != 0.0)
      ++v7;
LABEL_14:
    v3 += 152;
  }
  while (v3 != v4);
  v2 = v51;
  v36 = *v51;
  v37 = v51[1];
  memset(v54, 0, 37);
  memset(out, 0, 37);
  if (v36 != v37)
  {
    uuid_unparse((const unsigned __int8 *)(v36 + 24), (char *)out);
    uuid_unparse((const unsigned __int8 *)(*v51 + 8), v54);
  }
LABEL_23:
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_102168E68);
  v38 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
  {
    v39 = v2[1] == *v2;
    v40 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v2[1] - *v2) >> 3);
    *(_DWORD *)buf = 134219266;
    v41 = out;
    if (v39)
      v41 = (double *)"--";
    v79 = v40;
    v42 = v54;
    v80 = 2080;
    if (v39)
      v42 = "--";
    v81 = v41;
    v82 = 2080;
    v83 = v42;
    v84 = 1024;
    *(_DWORD *)v85 = v6;
    *(_WORD *)&v85[4] = 1024;
    *(_DWORD *)&v85[6] = v5;
    LOWORD(v86) = 1024;
    *(_DWORD *)((char *)&v86 + 2) = v7;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "SWOLF, totalEntries, %lu, sourceId, %s, session id, %s, openWaterEntries, %d, poolEntries, %d, SWOLF entries, %d", buf, 0x32u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102168E68);
    v43 = v2[1] == *v2;
    v44 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v2[1] - *v2) >> 3);
    v45 = "--";
    v46 = out;
    if (v2[1] == *v2)
      v46 = (double *)"--";
    v55 = 134219266;
    if (!v43)
      v45 = v54;
    v56 = v44;
    v57 = 2080;
    v58 = v46;
    v59 = 2080;
    v60 = v45;
    v61 = 1024;
    *(_DWORD *)v62 = v6;
    *(_WORD *)&v62[4] = 1024;
    *(_DWORD *)&v62[6] = v5;
    LOWORD(v63) = 1024;
    *(_DWORD *)((char *)&v63 + 2) = v7;
    LODWORD(v49) = 50;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 0, "SWOLF, totalEntries, %lu, sourceId, %s, session id, %s, openWaterEntries, %d, poolEntries, %d, SWOLF entries, %d", &v55, v49, v50, (_DWORD)v51, v52.n128_u32[0], v52.n128_u32[2]);
    v48 = (uint8_t *)v47;
    sub_100512490("Generic", 1, 0, 2, "void CLSWOLFUtil::logEntries(const std::vector<CLSwimEntry> &)", "%s\n", v47);
    if (v48 != buf)
      free(v48);
  }
}

BOOL sub_100AD469C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 result;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  _BOOL4 v10;
  NSObject *v11;
  _BOOL4 v12;
  double v13;
  uint8_t *v14;
  _QWORD v15[2];
  uint8_t buf[1640];

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102168E68);
    v5 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "empty session SWOLF entries", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102168E68);
      LOWORD(v15[0]) = 0;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 0, "empty session SWOLF entries", v15, 2);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLSWOLFUtil::checkSessionSWOLFEntries(const std::vector<CLSwimEntry> &)", "%s\n", v6);
LABEL_29:
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  else
  {
    while (!uuid_compare((const unsigned __int8 *)(v1 + 8), (const unsigned __int8 *)(*a1 + 8)))
    {
      if (uuid_compare((const unsigned __int8 *)(v1 + 24), (const unsigned __int8 *)(*a1 + 24)))
      {
        if (qword_10229FCA0 != -1)
          dispatch_once(&qword_10229FCA0, &stru_102168E68);
        v11 = qword_10229FCA8;
        if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "programmer error, entries passed into calculateSessionSWOLF should all have same session id", buf, 2u);
        }
        v12 = sub_1001BFF7C(115, 0);
        result = 0;
        if (!v12)
          return result;
        bzero(buf, 0x65CuLL);
        if (qword_10229FCA0 == -1)
        {
LABEL_28:
          LOWORD(v15[0]) = 0;
          v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 16, "programmer error, entries passed into calculateSessionSWOLF should all have same session id", v15, 2, v15[0]);
          v8 = v14;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLSWOLFUtil::checkSessionSWOLFEntries(const std::vector<CLSwimEntry> &)", "%s\n", v13);
          goto LABEL_29;
        }
LABEL_32:
        dispatch_once(&qword_10229FCA0, &stru_102168E68);
        goto LABEL_28;
      }
      v1 += 152;
      if (v1 == v2)
        return 1;
    }
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102168E68);
    v9 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "programmer error, entries passed into calculateSessionSWOLF should all have same session id", buf, 2u);
    }
    v10 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 == -1)
        goto LABEL_28;
      goto LABEL_32;
    }
  }
  return result;
}

void sub_100AD4A70(uint64_t *a1@<X0>, unsigned __int8 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  double v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  char *v45;
  __int16 v46;
  char *v47;
  uint8_t buf[4];
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  char *v63;
  __int16 v64;
  char *v65;
  char out[48];
  char v67[40];

  uuid_clear(a2 + 16);
  uuid_clear(a2 + 32);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_QWORD *)a2 + 10) = 0;
  sub_100AD4114(a1, (__n128)0);
  if (sub_100AD469C(a1))
  {
    v29 = xmmword_101C07AC0;
    *((double *)a2 + 6) = sub_100AD4E54((uint64_t)&v29, a1);
    *(_DWORD *)buf = 1;
    *((double *)a2 + 7) = sub_100AD4ED4(buf, a1);
    *(_DWORD *)buf = 2;
    *((double *)a2 + 8) = sub_100AD4ED4(buf, a1);
    *(_DWORD *)buf = 3;
    *((double *)a2 + 9) = sub_100AD4ED4(buf, a1);
    *(_DWORD *)buf = 4;
    *((double *)a2 + 10) = sub_100AD4ED4(buf, a1);
    v4 = *a1;
    v5 = a1[1];
    v6 = *(double *)(*a1 + 40);
    *(double *)a2 = v6;
    v7 = *(double *)(v4 + 48);
    *((double *)a2 + 1) = v7;
    if (v4 != v5)
    {
      v8 = v4;
      do
      {
        if ((*(_DWORD *)(v8 + 96) - 1) > 2)
          goto LABEL_9;
        v9 = *(double *)(v8 + 40);
        if (v9 < v6)
        {
          *(double *)a2 = v9;
          v6 = v9;
        }
        v10 = *(double *)(v8 + 48);
        if (v10 <= v7)
LABEL_9:
          v10 = v7;
        else
          *((double *)a2 + 1) = v10;
        v8 += 152;
        v7 = v10;
      }
      while (v8 != v5);
    }
    uuid_copy(a2 + 16, (const unsigned __int8 *)(v4 + 8));
    uuid_copy(a2 + 32, (const unsigned __int8 *)(*a1 + 24));
    memset(v67, 0, 37);
    memset(out, 0, 37);
    uuid_unparse(a2 + 32, out);
    uuid_unparse(a2 + 16, v67);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102168E68);
    v11 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *((_QWORD *)a2 + 6);
      v13 = *((_QWORD *)a2 + 7);
      v14 = *((_QWORD *)a2 + 8);
      v15 = *((_QWORD *)a2 + 9);
      v16 = *((_QWORD *)a2 + 10);
      v17 = *(_QWORD *)a2;
      v18 = *((_QWORD *)a2 + 1);
      *(_DWORD *)buf = 134220034;
      v49 = v12;
      v50 = 2048;
      v51 = v13;
      v52 = 2048;
      v53 = v14;
      v54 = 2048;
      v55 = v15;
      v56 = 2048;
      v57 = v16;
      v58 = 2048;
      v59 = v17;
      v60 = 2048;
      v61 = v18;
      v62 = 2080;
      v63 = out;
      v64 = 2080;
      v65 = v67;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "SessionSWOLF,SWOLF,%f,freestyle,%f,backstroke,%f,breastroke,%f,butterfly,%f,startTime,%f,endTime,%f,sourceID,%s,sessionId,%s", buf, 0x5Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102168E68);
      v19 = *((_QWORD *)a2 + 6);
      v20 = *((_QWORD *)a2 + 7);
      v21 = *((_QWORD *)a2 + 8);
      v22 = *((_QWORD *)a2 + 9);
      v23 = *((_QWORD *)a2 + 10);
      v24 = *(_QWORD *)a2;
      v25 = *((_QWORD *)a2 + 1);
      v30 = 134220034;
      v31 = v19;
      v32 = 2048;
      v33 = v20;
      v34 = 2048;
      v35 = v21;
      v36 = 2048;
      v37 = v22;
      v38 = 2048;
      v39 = v23;
      v40 = 2048;
      v41 = v24;
      v42 = 2048;
      v43 = v25;
      v44 = 2080;
      v45 = out;
      v46 = 2080;
      v47 = v67;
      LODWORD(v28) = 92;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 0, "SessionSWOLF,SWOLF,%f,freestyle,%f,backstroke,%f,breastroke,%f,butterfly,%f,startTime,%f,endTime,%f,sourceID,%s,sessionId,%s", COERCE_DOUBLE(&v30), v28, *(double *)&v29, *((double *)&v29 + 1));
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "CLSWOLFSummary CLSWOLFUtil::calculateSessionSWOLF(const std::vector<CLSwimEntry> &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
}

double sub_100AD4E54(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  double v10;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0.0;
  v4 = 0;
  v5 = 0.0;
  do
  {
    v6 = 0;
    v7 = *(_DWORD *)(v2 + 100);
    do
    {
      v8 = *(_DWORD *)(a1 + v6);
      v9 = v8 == v7 || v6 == 12;
      v6 += 4;
    }
    while (!v9);
    if (v8 == v7)
    {
      v10 = *(double *)(v2 + 128);
      if (v10 != 0.0 && (*(_DWORD *)(v2 + 96) - 1) <= 2)
      {
        v5 = v5 + v10;
        ++v4;
      }
    }
    v2 += 152;
  }
  while (v2 != v3);
  if (!v4)
    return 0.0;
  else
    return v5 / (double)v4;
}

double sub_100AD4ED4(_DWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double v5;
  double v6;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0.0;
  v4 = 0;
  v5 = 0.0;
  do
  {
    if (*a1 == *(_DWORD *)(v2 + 100))
    {
      v6 = *(double *)(v2 + 128);
      if (v6 != 0.0 && (*(_DWORD *)(v2 + 96) - 1) <= 2)
      {
        v5 = v5 + v6;
        ++v4;
      }
    }
    v2 += 152;
  }
  while (v2 != v3);
  if (!v4)
    return 0.0;
  else
    return v5 / (double)v4;
}

void sub_100AD4F40(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void sub_100AD4F6C(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v4 = objc_alloc_init((Class)NSFileManager);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = objc_msgSend(objc_msgSend(v4, "contentsOfDirectoryAtPath:error:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1), 0), "reverseObjectEnumerator", 0);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v11 != v8)
        objc_enumerationMutation(v5);
      if (!(*(unsigned int (**)(uint64_t, id))(a2 + 16))(a2, objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9), "UTF8String")))break;
      if (v7 == (id)++v9)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v7)
          goto LABEL_3;
        break;
      }
    }
  }

}

void sub_100AD50A4(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v4 = objc_alloc_init((Class)NSFileManager);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = objc_msgSend(objc_msgSend(v4, "contentsOfDirectoryAtPath:error:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1), 0), "objectEnumerator", 0);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v11 != v8)
        objc_enumerationMutation(v5);
      if (!(*(unsigned int (**)(uint64_t, id))(a2 + 16))(a2, objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9), "UTF8String")))break;
      if (v7 == (id)++v9)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v7)
          goto LABEL_3;
        break;
      }
    }
  }

}

BOOL sub_100AD51DC(const char *a1, __int16 a2, uint64_t a3)
{
  NSDictionary *v5;
  NSDictionary *v6;
  uint64_t v8;

  v8 = a3;
  v5 = -[NSFileManager attributesOfItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "attributesOfItemAtPath:error:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1), &v8);
  v6 = v5;
  if (v5)
    chmod(a1, (unsigned __int16)-[NSDictionary filePosixPermissions](v5, "filePosixPermissions") | a2);
  return v6 != 0;
}

void sub_100AD5268(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v4;
  int v5;
  float v6;
  BOOL v7;
  float v8;
  float v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  __int16 v23;
  int v24;
  __int16 v25;
  double v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  int v32;
  __int16 v33;
  double v34;

  v4 = *(float *)(a1 + 300);
  v5 = *(_DWORD *)(a1 + 520);
  v6 = 0.0;
  if (v5)
    v7 = 0;
  else
    v7 = v4 <= 20.0;
  if (v7)
    goto LABEL_12;
  v8 = (float)(v4 * 0.0467) + 0.3694;
  if (v4 <= 8.0)
    v8 = 0.0;
  v9 = (float)(v8 * 0.9308) + 1.8885;
  v6 = v4 <= 8.0 ? 1.8 : v9;
  if (!v5)
  {
LABEL_12:
    if (v4 > 17.5 && *(float *)(a1 + 292) < 0.0)
    {
      v10 = sub_100BFA9D4();
      sub_100BFAC68(v10);
    }
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102168ED8);
  v11 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(_QWORD *)(a1 + 112);
    *(_DWORD *)buf = 134218752;
    v28 = v12;
    v29 = 2048;
    v30 = v6;
    v31 = 1024;
    v32 = v5;
    v33 = 2048;
    v34 = v4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "WheelchairPush, computeTime, %f, metsFromPushes, %.1f, Push Count, %d, pushEM, %.1f", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102168ED8);
    v15 = *(_QWORD *)(a1 + 112);
    v19 = 134218752;
    v20 = v15;
    v21 = 2048;
    v22 = v6;
    v23 = 1024;
    v24 = v5;
    v25 = 2048;
    v26 = v4;
    LODWORD(v18) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "WheelchairPush, computeTime, %f, metsFromPushes, %.1f, Push Count, %d, pushEM, %.1f", COERCE_DOUBLE(&v19), v18);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieWheelchairPushModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if (*(_QWORD *)(a1 + 344) == 21)
    v13 = 18;
  else
    v13 = 17;
  *(_DWORD *)a2 = 0;
  *(float *)(a2 + 4) = v6;
  *(_DWORD *)(a2 + 8) = 0;
  *(float *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 20) = v6;
  *(_DWORD *)(a2 + 24) = 0;
  *(float *)(a2 + 28) = v6;
  if (v6 == 1.8)
    v14 = 3;
  else
    v14 = 0;
  *(_DWORD *)(a2 + 32) = v14;
  *(_DWORD *)(a2 + 36) = v13;
}

uint64_t sub_100AD5548(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 48))(*(_QWORD *)(a2 + 40));
}

void sub_100AD5558(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100AD5628(id a1)
{
  qword_102306AA8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLVDRNotifierSilo"));
}

uint64_t sub_100AD56DC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100AD5A8C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102306AC8 != -1)
    dispatch_once(&qword_102306AC8, block);
  return qword_1023111D0;
}

void sub_100AD587C(id a1)
{
  sub_100197040();
  if (sub_1000C4240())
    byte_102306AB8 = 1;
}

_QWORD *sub_100AD58FC(uint64_t a1, void *a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_100AD5928(a1, "CLVDRNotifier", a2);
  *result = off_102168F48;
  return result;
}

uint64_t sub_100AD5928(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102169100;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100AD59A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AD59C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_102168F48;
  return sub_100AD59D4(a1);
}

uint64_t sub_100AD59D4(uint64_t a1)
{
  *(_QWORD *)a1 = off_102169100;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100AD5A48(uint64_t a1)
{
  *(_QWORD *)a1 = off_102168F48;
  return sub_100AD59D4(a1);
}

void sub_100AD5A58(_QWORD *a1)
{
  *a1 = off_102168F48;
  sub_100AD59D4((uint64_t)a1);
  operator delete();
}

void sub_100AD5A8C()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  BOOL v7;

  sub_1001E4804(&v5);
  v7 = 0;
  v0 = sub_1001E4874(v5, "CLTSPVDRNotifierTypeSensorRecorder", &v7);
  if (v7)
    v1 = v0;
  else
    v1 = 0;
  v2 = v6;
  if (!v6)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v1)
LABEL_9:
      operator new();
  }
  else
  {
LABEL_8:
    if (v1)
      goto LABEL_9;
  }
  operator new();
}

void sub_100AD5B7C()
{
  operator delete();
}

_QWORD *sub_100AD5BC4@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v2;

  if (*a1)
    v2 = "Unknown";
  else
    v2 = "";
  return sub_1015A2E04(a2, v2);
}

uint64_t sub_100AD5BE8(uint64_t **a1, int a2, unsigned int *a3, int a4)
{
  NSObject *v7;
  char *v8;
  id v9;
  unsigned int v10;
  int v11;
  _BYTE *v12;
  const __CFString *v13;
  _BYTE *v14;
  NSDictionary *v15;
  uint64_t v17;
  const char *v18;
  id v19;
  unsigned int v20;
  int v21;
  void **v22;
  char *v23;
  char *v24;
  void *v25[2];
  char v26;
  int v27;
  _QWORD v28[5];
  _QWORD v29[5];
  _BYTE __p[12];
  __int16 v31;
  id v32;
  __int16 v33;
  unsigned int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  void **v38;
  _BYTE buf[12];
  __int16 v40;
  id v41;
  __int16 v42;
  unsigned int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  _BYTE *v47;

  v27 = a2;
  if (qword_1022A01A0 != -1)
    dispatch_once(&qword_1022A01A0, &stru_1021690D0);
  v7 = qword_1022A01A8;
  if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = a4 ? "Registration" : "Unregistration";
    *(_QWORD *)buf = &v27;
    v9 = objc_msgSend(objc_msgSend(sub_1000823D0(a1 + 10, &v27, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description"), "UTF8String");
    v10 = *a3;
    *(_DWORD *)buf = *a3;
    v11 = sub_1001B7864((uint64_t)a1, (int *)buf, 1);
    ((void (*)(_BYTE *__return_ptr, uint64_t **, unsigned int *))(*a1)[20])(__p, a1, a3);
    v12 = v33 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136447234;
    *(_QWORD *)&buf[4] = v8;
    v40 = 2082;
    v41 = v9;
    v42 = 1026;
    v43 = v10;
    v44 = 1026;
    v45 = v11;
    v46 = 2082;
    v47 = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "VDR, action, %{public}s, client, %{public}s, notification, %{public}d, notificationClientCount, %{public}d, notificationString, %{public}s", buf, 0x2Cu);
    if (SHIBYTE(v33) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_1021690D0);
    v17 = qword_1022A01A8;
    if (a4)
      v18 = "Registration";
    else
      v18 = "Unregistration";
    *(_QWORD *)__p = &v27;
    v19 = objc_msgSend(objc_msgSend(sub_1000823D0(a1 + 10, &v27, (uint64_t)&unk_101B9EB60, (_DWORD **)__p)[8], "description"), "UTF8String");
    v20 = *a3;
    *(_DWORD *)__p = *a3;
    v21 = sub_1001B7864((uint64_t)a1, (int *)__p, 1);
    ((void (*)(void **__return_ptr, uint64_t **, unsigned int *))(*a1)[20])(v25, a1, a3);
    if (v26 >= 0)
      v22 = v25;
    else
      v22 = (void **)v25[0];
    *(_DWORD *)__p = 136447234;
    *(_QWORD *)&__p[4] = v18;
    v31 = 2082;
    v32 = v19;
    v33 = 1026;
    v34 = v20;
    v35 = 1026;
    v36 = v21;
    v37 = 2082;
    v38 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "VDR, action, %{public}s, client, %{public}s, notification, %{public}d, notificationClientCount, %{public}d, notificationString, %{public}s", __p, 44);
    v24 = v23;
    if (v26 < 0)
      operator delete(v25[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLVDRNotifier::logClient(int, const CLVDRNotifier_Type::Notification &, BOOL)", "%s\n", v24);
    if (v24 != buf)
      free(v24);
  }
  v13 = CFSTR("Unregistration");
  if (a4)
    v13 = CFSTR("Registration");
  v29[0] = v13;
  v28[0] = CFSTR("action");
  v28[1] = CFSTR("client");
  *(_QWORD *)buf = &v27;
  v29[1] = objc_msgSend(sub_1000823D0(a1 + 10, &v27, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description");
  v28[2] = CFSTR("notification");
  v29[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a3);
  v28[3] = CFSTR("notificationClientCount");
  *(_DWORD *)buf = *a3;
  v29[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_1001B7864((uint64_t)a1, (int *)buf, 1));
  v28[4] = CFSTR("notificationString");
  ((void (*)(_BYTE *__return_ptr, uint64_t **, unsigned int *))(*a1)[20])(buf, a1, a3);
  if (v42 >= 0)
    v14 = buf;
  else
    v14 = *(_BYTE **)buf;
  v29[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14);
  v15 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 5);
  if (SHIBYTE(v42) < 0)
    operator delete(*(void **)buf);
  return sub_10019E128((uint64_t)v15, (uint64_t)"MotionVDR");
}

void sub_100AD60A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AD60C8(uint64_t **a1, uint64_t a2, unsigned int *a3)
{
  int v4;
  uint64_t v6;

  v4 = a2;
  v6 = ((uint64_t (*)(uint64_t **, uint64_t, unsigned int *, void *))(*a1)[12])(a1, a2, a3, &unk_1022F9A98);
  sub_100AD5BE8(a1, v4, a3, 1);
  return v6;
}

uint64_t sub_100AD6124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022F9A98);
}

BOOL sub_100AD6138(char *a1, int a2, int *a3)
{
  _BOOL8 v6;

  v6 = sub_100AD6184(a1, a2, a3);
  sub_100AD5BE8((uint64_t **)a1, a2, (unsigned int *)a3, 0);
  return v6;
}

BOOL sub_100AD6184(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021690B0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021690B0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVDRNotifier_Type::Notification, CLVDRNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLVDRNotifier_Type::Notification, NotificationData_T = CLVDRNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100AD650C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_1021691E0;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100AD65E0()
{
  operator new();
}

void sub_100AD668C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100AD66CC(uint64_t a1)
{
  sub_100AD6794(a1);
  operator delete();
}

id sub_100AD66F0(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1006F4C80(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100AD673C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100AD6768(id a1)
{
  qword_1022A01A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "VDR");
}

uint64_t sub_100AD6794(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_1021691E0;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100AD67F4()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C07B24;
      v1[3] = unk_101C07B34;
      v1[4] = xmmword_101C07B44;
      v1[0] = xmmword_101C07B04;
      v1[1] = unk_101C07B14;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100AD68C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100AD68E0(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v6[232];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 48))(*(_QWORD *)(a3 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a3 + 48) + 24))(*(_QWORD *)(a3 + 48), v6, a1);
    if (v6[208])
      return sub_1004C5730(*(_QWORD *)(a3 + 8));
  }
  return result;
}

void sub_100AD6978(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  float v14;
  float v15;
  float v16;
  int v17;
  float v18;
  int v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  __int16 v32;
  double v33;
  __int16 v34;
  int v35;
  uint8_t buf[4];
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  int v43;
  __int16 v44;
  double v45;
  __int16 v46;
  int v47;

  v4 = *(float *)(a1 + 1368);
  v5 = *(float *)(a1 + 1372);
  v6 = *(float *)(a1 + 1376);
  v7 = *(float *)(a1 + 1380);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 3;
  *(_QWORD *)(a2 + 32) = 3;
  sub_1006B2E70();
  v9 = v8;
  if (sub_100219944(a1) && *(double *)(a1 + 600) < *(double *)a1)
  {
    v10 = *(double *)(a1 + 560);
    v11 = (v7 - v10) / (v7 - v6);
    v12 = v4 * sub_10108B14C(v11, v5);
    *(float *)a2 = v12;
    *(float *)(a2 + 28) = v12;
    v13 = 1;
    *(_DWORD *)(a2 + 32) = 1;
    v14 = 0.0;
    v15 = 7.0;
    v16 = v12;
    if (v12 > 7.0)
    {
LABEL_9:
      v18 = v16;
      v17 = v13;
      *(float *)(a2 + 20) = v15;
      v13 = 3;
      *(_DWORD *)(a2 + 24) = 3;
      v16 = v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = 0;
    *(float *)(a2 + 4) = v9;
    *(float *)(a2 + 28) = v9;
    v12 = 0.0;
    v14 = v9;
    v16 = v9;
    *(_DWORD *)(a2 + 32) = 0;
  }
  *(float *)(a2 + 20) = v16;
  *(_DWORD *)(a2 + 24) = v13;
  v15 = 4.4021;
  if (v16 >= 4.4021)
  {
    v17 = v13;
    v18 = v16;
    goto LABEL_11;
  }
  if (!sub_100219944(a1))
    goto LABEL_9;
  v17 = v13;
  v18 = v16;
  if (*(double *)(a1 + 600) >= *(double *)a1)
    goto LABEL_9;
LABEL_11:
  if (v18 < 1.6 && (!sub_100219944(a1) || *(double *)(a1 + 600) >= *(double *)a1))
  {
    *(_QWORD *)(a2 + 28) = 0x33FCCCCCDLL;
    v17 = 3;
    v18 = 1.6;
  }
  *(float *)(a2 + 12) = v9;
  if (*(_DWORD *)(a1 + 152) == 2101)
    v19 = 20;
  else
    v19 = 13;
  *(_DWORD *)(a2 + 36) = v19;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102169248);
  v20 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134219264;
    v37 = v14;
    v38 = 2048;
    v39 = v12;
    v40 = 2048;
    v41 = v18;
    v42 = 1024;
    v43 = v17;
    v44 = 2048;
    v45 = v16;
    v46 = 1024;
    v47 = v13;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Yoga,metsWR,%f,metsHR,%f,truthMets,%f,truthMetsSrc,%d,userMets,%f,userMetsSrc,%d", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102169248);
    v24 = 134219264;
    v25 = v14;
    v26 = 2048;
    v27 = v12;
    v28 = 2048;
    v29 = v18;
    v30 = 1024;
    v31 = v17;
    v32 = 2048;
    v33 = v16;
    v34 = 1024;
    v35 = v13;
    LODWORD(v23) = 54;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Yoga,metsWR,%f,metsHR,%f,truthMets,%f,truthMetsSrc,%d,userMets,%f,userMetsSrc,%d", COERCE_DOUBLE(&v24), v23);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieYogaModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
}

void sub_100AD6D40(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100AD6D6C(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_102169280;
  *(_BYTE *)(a1 + 10) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  *(_BYTE *)(a1 + 196) = a4;
  *(_QWORD *)(a1 + 200) = *a2;
  *(_DWORD *)(a1 + 208) = 4;
  *(_QWORD *)(a1 + 216) = 0x3FA0A3D70A3D70A4;
  *(_BYTE *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 232) = off_102138370;
  *(_QWORD *)(a1 + 240) = 100;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = off_1021693C8;
  *(_QWORD *)(a1 + 312) = 20;
  *(_QWORD *)(a1 + 320) = off_1021693F8;
  *(_QWORD *)(a1 + 328) = 20;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 400) = off_1021693F8;
  *(_QWORD *)(a1 + 408) = 20;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 480) = off_1021693F8;
  *(_QWORD *)(a1 + 488) = 20;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 608) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 616) = 0;
  operator new[]();
}

void sub_100AD74B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_100ADB1A0(v1 + 38);
  v1[29] = v2 + 16;
  sub_100412390(v1 + 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_100AD74EC(_QWORD *a1)
{
  *a1 = off_102169280;
  if (a1[16])
    operator delete[]();
  sub_100ADB1A0(a1 + 38);
  a1[29] = off_102138370;
  sub_100412390(a1 + 32);
  return a1;
}

void sub_100AD7558(_QWORD *a1)
{
  sub_100AD74EC(a1);
  operator delete();
}

uint64_t sub_100AD757C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_100AD7584(uint64_t a1)
{
  uint64_t v2;

  *(_BYTE *)(a1 + 8) = 0;
  bzero((void *)(a1 + 16), 0x20uLL);
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  bzero((void *)(a1 + 64), 0x30uLL);
  bzero(*(void **)(a1 + 120), 0x18uLL);
  bzero(*(void **)(a1 + 112), 0x3CuLL);
  v2 = *(_QWORD *)(a1 + 120);
  memset_pattern16((void *)v2, &unk_101C07CF0, 0xCuLL);
  memset_pattern16((void *)(v2 + 12), &unk_101C07D00, 0xCuLL);
  *(_BYTE *)(a1 + 10) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  bzero((void *)(a1 + 184), 0xCuLL);
  bzero((void *)(a1 + 156), 0xCuLL);
  bzero((void *)(a1 + 136), 0xCuLL);
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  bzero((void *)(a1 + 560), 0xCuLL);
  bzero((void *)(a1 + 576), 0x18uLL);
  *(_DWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 608) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 616) = 0;
  sub_10023235C((_QWORD *)(a1 + 320));
  sub_10023235C((_QWORD *)(a1 + 400));
  sub_10023235C((_QWORD *)(a1 + 480));
  sub_10041250C((_QWORD *)(a1 + 232));
}

void sub_100AD7680(uint64_t a1, float64x2_t *a2, uint64_t a3, double *a4, _QWORD *a5)
{
  float v7;
  float64x2_t v8;
  float v9;
  float v10;
  NSObject *v11;
  float32x2_t v12;
  float v13;
  double v14;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  double v30;
  float64x2_t v31;
  double v32;
  float v33;
  int v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  uint8_t buf[4];
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  uint64_t v53;
  float32x2_t v54;
  float v55;

  *(_QWORD *)(a1 + 168) = *a5;
  ++*(_DWORD *)(a1 + 152);
  v7 = *a4;
  v8 = *(float64x2_t *)(a1 + 88);
  *(float32x2_t *)&v8.f64[0] = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(*a2), (float32x2_t)vdup_n_s32(0x3C8EFA35u))), v8));
  v54 = *(float32x2_t *)&v8.f64[0];
  v9 = (float)(v7 * 0.017453) - *(double *)(a1 + 104);
  v55 = v9;
  *(float *)(a1 + 164) = v9;
  *(float32x2_t *)(a1 + 156) = v54;
  v31 = v8;
  if (*(_BYTE *)(a1 + 224))
  {
    v10 = *((float *)v8.f64 + 1);
    v33 = sqrtf(vmlas_n_f32(vmuls_lane_f32(*((float *)v8.f64 + 1), *(float32x2_t *)&v8.f64[0], 1), *(float *)v8.f64, *(float *)v8.f64)+ (float)(v9 * v9));
    sub_10007D084(a1 + 232, &v33);
    if (*(_BYTE *)(a1 + 196))
    {
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102169358);
      v11 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218752;
        v45 = (float)(v33 / 0.017453);
        v46 = 2048;
        v47 = (float)(*(float *)v31.f64 * 57.296);
        v48 = 2048;
        v49 = (float)(v10 * 57.296);
        v50 = 2048;
        v51 = (float)(v9 * 57.296);
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "omegaMag6, %.3f, omega, %.3f, %.3f, %.3f", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_102169358);
        v34 = 134218752;
        v35 = (float)(v33 / 0.017453);
        v36 = 2048;
        v37 = (float)(*(float *)v31.f64 * 57.296);
        v38 = 2048;
        v39 = (float)(v10 * 57.296);
        v40 = 2048;
        v41 = (float)(v9 * 57.296);
        LODWORD(v30) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "omegaMag6, %.3f, omega, %.3f, %.3f, %.3f", COERCE_DOUBLE(&v34), v30, v31.f64[0], v31.f64[1]);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
    }
  }
  sub_100AD7BAC(a1 + 16, &v54, (double *)(a1 + 200));
  v12 = vadd_f32(*(float32x2_t *)(a1 + 136), *(float32x2_t *)&v31.f64[0]);
  *(float32x2_t *)(a1 + 136) = v12;
  v13 = *(float *)(a1 + 144) + v9;
  *(float *)(a1 + 144) = v13;
  ++*(_DWORD *)(a1 + 148);
  v14 = *(double *)(a1 + 200)
      * (*(double *)(a1 + 200)
       * (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v12, v12).i32[1]), v12.f32[0], v12.f32[0]) + (float)(v13 * v13)));
  if (v14 > 0.122500002)
    sub_100AD7C44(a1, v14, (int32x2_t)0x3FBF5C2900000000);
  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102169398);
    v15 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(double *)(a1 + 16);
      v17 = *(double *)(a1 + 24);
      v18 = *(double *)(a1 + 32);
      v19 = *(double *)(a1 + 40);
      v20 = *a5;
      *(_DWORD *)buf = 134219008;
      v45 = v16;
      v46 = 2048;
      v47 = v17;
      v48 = 2048;
      v49 = v18;
      v50 = 2048;
      v51 = v19;
      v52 = 2048;
      v53 = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[AppleQuaternion] x,%f,y,%f,z,%f,w,%f,timestamp,%f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102169398);
      v21 = *(double *)(a1 + 16);
      v22 = *(double *)(a1 + 24);
      v23 = *(double *)(a1 + 32);
      v24 = *(double *)(a1 + 40);
      v25 = *a5;
      v34 = 134219008;
      v35 = v21;
      v36 = 2048;
      v37 = v22;
      v38 = 2048;
      v39 = v23;
      v40 = 2048;
      v41 = v24;
      v42 = 2048;
      v43 = v25;
      LODWORD(v30) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[AppleQuaternion] x,%f,y,%f,z,%f,w,%f,timestamp,%f", COERCE_DOUBLE(&v34), v30, v31.f64[0], v31.f64[1], v32);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
}

double sub_100AD7BAC(uint64_t a1, float32x2_t *a2, double *a3)
{
  double v4;
  double result;
  __int128 v6;
  _OWORD v7[2];
  double v8[4];
  float64x2_t v9;
  double v10;

  v4 = *a3;
  v9 = vmulq_n_f64(vcvtq_f64_f32(*a2), *a3);
  v10 = v4 * a2[1].f32[0];
  sub_100AD8480(v8, v9.f64);
  sub_100A002C4((double *)v7, v8, (double *)a1);
  result = *(double *)v7;
  v6 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t sub_100AD7C44(uint64_t result, double a2, int32x2_t a3)
{
  int v3;
  uint64_t v4;
  void *v5;
  float v6;
  double v7;
  float32x2_t v8;
  uint64_t v10;
  uint64_t v17;
  double v18;
  float32x2_t v19;
  int32x2_t v20;
  double v21;
  double v22;
  void *v23[2];
  double v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29[144];
  float v30[36];
  float v31[2];
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  int v39;
  float32_t v40;
  float32x2_t v41;
  int v42;
  float v43;
  __int32 v44;
  float v45;
  int v46;

  v3 = *(_DWORD *)(result + 148);
  if (v3)
  {
    v4 = result;
    v5 = (void *)(result + 136);
    *(float *)a3.i32 = (float)v3;
    v20 = a3;
    v6 = *(float *)(result + 136) / (float)v3;
    v24 = *(double *)(result + 200) * (double)v3;
    v7 = v24;
    *(_DWORD *)(result + 148) = 0;
    v18 = exp(v7 / -5000.0);
    v19 = vdiv_f32(*(float32x2_t *)(v4 + 140), (float32x2_t)vdup_lane_s32(v20, 0));
    bzero(v5, 0xCuLL);
    v8 = v19;
    *(float64x2_t *)(v4 + 88) = vmulq_n_f64(*(float64x2_t *)(v4 + 88), v18);
    *(double *)(v4 + 104) = v18 * *(double *)(v4 + 104);
    v39 = 0;
    _S9 = v19.i32[1];
    v40 = v19.f32[1];
    v41 = vneg_f32(v19);
    v42 = 0;
    v43 = v6;
    v44 = v19.i32[0];
    v45 = -v6;
    v46 = 0;
    v31[0] = -(float)(vmul_f32(v8, v8).f32[0] + (float)(v19.f32[1] * v19.f32[1]));
    v31[1] = v6 * v19.f32[0];
    v32 = vmuls_lane_f32(v6, v19, 1);
    v33 = v6 * v19.f32[0];
    v34 = -(float)((float)(v6 * v6) + (float)(v40 * v40));
    v35 = vmuls_lane_f32(v8.f32[0], v8, 1);
    v36 = v32;
    v37 = v35;
    v38 = -(float)((float)(v6 * v6) + (float)(v8.f32[0] * v8.f32[0]));
    sub_100AD85B4((uint64_t)v30, &v24, (uint64_t)&v39, (uint64_t)v31);
    v10 = *(_QWORD *)(v4 + 112);
    v4 += 112;
    sub_100AD87B4(v30, v10, 6);
    v23[0] = &v28;
    v23[1] = &v27;
    _V1.S[1] = v19.i32[1];
    __asm { FMLA            S0, S9, V1.S[1] }
    v21 = (float)(*(float *)v20.i32 * 0.00000021323) * 0.5;
    v22 = 2.76135698e-10 / (7.0 / (exp((0.11 - sqrtf(_S0)) / 0.012) + 1.0) + 1.0);
    sub_100AD8848(v29, &v24, (uint64_t)&v39, &v21, &v22);
    sub_100AD8A88(v23, (uint64_t)v29, 6);
    result = sub_100AD8C1C((uint64_t)&v25, (uint64_t *)v4, (uint64_t)v30, (uint64_t *)v23, 6);
    v17 = *(_QWORD *)(v4 + 8);
    *(_OWORD *)v17 = v25;
    *(_QWORD *)(v17 + 16) = v26;
  }
  return result;
}

double sub_100AD7E80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t i;
  double result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[48];
  _BYTE v12[36];
  int v13;
  int v14;
  int v15;

  bzero(v12, 0x48uLL);
  v13 = 1065353216;
  v14 = 1065353216;
  v15 = 1065353216;
  v9 = *a3;
  v10 = *((_DWORD *)a3 + 2);
  sub_100AD7F9C(v11, (uint64_t *)(a1 + 112), (uint64_t)v12, (uint64_t)&v9, a2, 6, 3, (uint64_t)&v8);
  for (i = 0; i != 24; i += 8)
  {
    result = *(double *)&v11[i + 24] + *(double *)(a1 + i + 88);
    *(double *)(a1 + i + 88) = result;
  }
  return result;
}

void sub_100AD7F9C(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  float *v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  float *v33;
  double *v34;
  float v35;

  bzero(a1, 8 * a6);
  if (a7 >= 1)
  {
    v13 = 0;
    v14 = a8 + 4 * a6;
    do
    {
      sub_100ADAF4C(a8, *a2, a3 + 4 * v13, a7, a6);
      if (a6 >= 1)
      {
        v15 = (float *)a2[1];
        v16 = a6;
        v17 = (float *)a8;
        do
        {
          v18 = *v15++;
          v17[a6] = v18 * *v17;
          ++v17;
          --v16;
        }
        while (v16);
        v19 = 0;
        v20 = *(float *)(a5 + 4 * v13);
        v21 = *(float *)(a4 + 4 * v13);
        v23 = *a2;
        v22 = a2[1];
        v24 = 1.0 / v21;
        do
        {
          v25 = v21;
          v26 = *(float *)(a8 + 4 * v19);
          v21 = v21 + (float)(v26 * *(float *)(v14 + 4 * v19));
          *(float *)(v22 + 4 * v19) = *(float *)(v22 + 4 * v19) * (float)(v25 * (float)(1.0 / v21));
          if (v19)
          {
            v27 = 0;
            v28 = -(float)(v26 * v24);
            v29 = v23 + 4 * (((int)v19 - 1) * (int)v19 / 2);
            do
            {
              v30 = *(float *)(v29 + 4 * v27);
              *(float *)(v29 + 4 * v27) = v30 + (float)(*(float *)(v14 + 4 * v27) * v28);
              *(float *)(v14 + 4 * v27) = *(float *)(v14 + 4 * v27) + (float)(*(float *)(v14 + 4 * v19) * v30);
              ++v27;
            }
            while (v19 != v27);
          }
          ++v19;
          v24 = 1.0 / v21;
        }
        while (v19 != a6);
        v31 = v20 * (float)(1.0 / v21);
        v32 = a6;
        v33 = (float *)(a8 + 4 * a6);
        v34 = (double *)a1;
        do
        {
          v35 = *v33++;
          *v34 = *v34 + (float)(v31 * v35);
          ++v34;
          --v32;
        }
        while (v32);
      }
      ++v13;
    }
    while (v13 != a7);
  }
}

double sub_100AD814C(uint64_t a1, float32x2_t *a2, float *a3)
{
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double result;
  float v15;
  int v16;
  int v17;
  float v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  const char *v25;
  char *v26;
  double v27;
  _BYTE v28[12];
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  _BYTE buf[12];
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;

  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102169398);
    v6 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v7 = a2->f32[0];
      v8 = a2->f32[1];
      v9 = a2[1].f32[0];
      v10 = *a3;
      v11 = a3[1];
      v12 = a3[2];
      *(_DWORD *)buf = 134219264;
      *(double *)&buf[4] = v7;
      v40 = 2048;
      v41 = v8;
      v42 = 2048;
      v43 = v9;
      v44 = 2048;
      v45 = v10;
      v46 = 2048;
      v47 = v11;
      v48 = 2048;
      v49 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102169398);
      v19 = a2->f32[0];
      v20 = a2->f32[1];
      v21 = a2[1].f32[0];
      v22 = *a3;
      v23 = a3[1];
      v24 = a3[2];
      *(_DWORD *)v28 = 134219264;
      *(double *)&v28[4] = v19;
      v29 = 2048;
      v30 = v20;
      v31 = 2048;
      v32 = v21;
      v33 = 2048;
      v34 = v22;
      v35 = 2048;
      v36 = v23;
      v37 = 2048;
      v38 = v24;
      LODWORD(v27) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f", COERCE_DOUBLE(v28), v27);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedGyroBias(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
  }
  if (*(_BYTE *)(a1 + 10))
  {
    v13 = 0;
    result = *(double *)a3;
    *(_QWORD *)buf = *(_QWORD *)a3;
    *(float *)&buf[8] = a3[2];
    LODWORD(result) = 897988541;
    do
    {
      v15 = *(float *)&buf[v13];
      if (v15 < 0.000001)
        v15 = 0.000001;
      *(float *)&buf[v13] = v15;
      v13 += 4;
    }
    while (v13 != 12);
    v16 = *(_DWORD *)(a1 + 152);
    if (v16 >= 1)
    {
      if (v16 >= 50)
        v17 = 50;
      else
        v17 = *(_DWORD *)(a1 + 152);
      do
      {
        *(float32x2_t *)v28 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*a2), *(float64x2_t *)(a1 + 88)));
        v18 = a2[1].f32[0] - *(double *)(a1 + 104);
        *(float *)&v28[8] = v18;
        result = sub_100AD7E80(a1, (uint64_t)v28, (uint64_t *)buf);
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a1 + 152) = 0;
  }
  else
  {
    *(float64x2_t *)(a1 + 88) = vcvtq_f64_f32(*a2);
    result = a2[1].f32[0];
    *(double *)(a1 + 104) = result;
    *(_BYTE *)(a1 + 10) = 1;
  }
  return result;
}

void sub_100AD8480(double *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double cosval;
  __double2 v13;

  v4 = *a2;
  v5 = sqrt(a2[1] * a2[1] + v4 * v4 + a2[2] * a2[2]);
  if (v5 >= 0.00000002)
  {
    v13 = __sincos_stret(v5 * 0.5);
    cosval = v13.__cosval;
    *a1 = v4 * v13.__sinval / v5;
    a1[1] = v13.__sinval * a2[1] / v5;
    v11 = v13.__sinval * a2[2] / v5;
  }
  else
  {
    *a1 = v4 * 0.5;
    v6 = a2[1] * 0.5;
    a1[1] = v6;
    v7 = a2[2] * 0.5;
    v8 = v5 * v5 * 0.125;
    v9 = 1.0 - v8;
    v10 = sqrt(v8 + 1.0);
    *a1 = v4 * 0.5 / v10;
    a1[1] = v6 / v10;
    v11 = v7 / v10;
    cosval = v9 / v10;
  }
  a1[2] = v11;
  a1[3] = cosval;
}

double sub_100AD855C(double *a1, double *a2)
{
  double result;

  *a1 = a2[3] * (a2[1] + a2[1]) - *a2 * (a2[2] + a2[2]);
  a1[1] = -(a2[3] * (*a2 + *a2)) - a2[1] * (a2[2] + a2[2]);
  result = *a2 * (*a2 + *a2) + -1.0 + a2[1] * (a2[1] + a2[1]);
  a1[2] = result;
  return result;
}

void sub_100AD85B4(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  double v7;
  float v8;
  float v9;
  double v10;
  float v11;
  uint64_t v12;
  float *v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float *v19;
  uint64_t j;
  uint64_t v21;
  uint64_t v22;
  uint64_t k;
  long double v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  char *v28;
  float v29[9];

  v6 = 0;
  v7 = *a2;
  v8 = *a2;
  v9 = -v8;
  v10 = v7 * v7 * 0.5;
  v11 = v10;
  v12 = a3;
  v13 = v29;
  do
  {
    for (i = 0; i != 3; ++i)
      v13[i] = (float)(*(float *)(a4 + i * 4) * v11) + (float)(v9 * *(float *)(v12 + i * 4));
    v29[4 * v6] = v29[4 * v6] + 1.0;
    ++v6;
    v13 += 3;
    a4 += 12;
    v12 += 12;
  }
  while (v6 != 3);
  v15 = 0;
  v16 = a1;
  do
  {
    *(_QWORD *)v16 = *(_QWORD *)&v29[v15];
    *(float *)(v16 + 8) = v29[v15 + 2];
    v15 += 3;
    v16 += 24;
  }
  while (v15 != 9);
  v17 = 0;
  v18 = v10 / 5000.0 - v7;
  v19 = v29;
  do
  {
    for (j = 0; j != 3; ++j)
      v19[j] = *(float *)(a3 + j * 4) * v11;
    v29[4 * v17] = v29[4 * v17] + v18;
    ++v17;
    v19 += 3;
    a3 += 12;
  }
  while (v17 != 3);
  v21 = 0;
  v22 = a1 + 72;
  do
  {
    *(_QWORD *)v22 = *(_QWORD *)&v29[v21];
    *(float *)(v22 + 8) = v29[v21 + 2];
    v21 += 3;
    v22 += 24;
  }
  while (v21 != 9);
  for (k = 12; k != 84; k += 24)
    bzero((void *)(a1 + k), 0xCuLL);
  v24 = exp(*a2 / -5000.0);
  v25 = 0;
  v26 = v24;
  v27 = a1 + 84;
  v28 = (char *)(a1 + 84);
  do
  {
    bzero(v28, 0xCuLL);
    *(float *)(v27 + v25) = v26;
    v28 += 24;
    v25 += 28;
  }
  while (v25 != 84);
}

float *sub_100AD87B4(float *result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float *v15;

  v3 = (a3 - 1);
  if (a3 >= 1)
  {
    v4 = 0;
    v5 = 4 * a3;
    v6 = result;
    v7 = a3;
    do
    {
      v8 = v7;
      v9 = v3;
      while (v8 >= 2)
      {
        v10 = 0;
        v11 = v8 - 1;
        v12 = v4 + (v8 - 1) * v7;
        v13 = result[v12];
        v14 = a2 + 4 * (((int)v8 - 1) * ((int)v8 - 2) / 2);
        v15 = v6;
        do
        {
          v13 = v13 + (float)(*v15 * *(float *)(v14 + 4 * v10++));
          v15 = (float *)((char *)v15 + v5);
        }
        while (v9 != v10);
        result[v12] = v13;
        --v9;
        v8 = v11;
      }
      ++v4;
      ++v6;
    }
    while (v4 != v7);
  }
  return result;
}

void sub_100AD8848(char *a1, double *a2, uint64_t a3, double *a4, double *a5)
{
  uint64_t v9;
  float v10;
  char *v11;
  double v12;
  double v13;
  double v14;
  long double v15;
  uint64_t v16;
  long double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  float *v22;
  uint64_t i;
  float *v24;
  char *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  float v30;
  uint64_t v31;
  float v32;
  char *v33;
  char *v34;
  float v35[9];

  v9 = 0;
  v10 = (*a2 * -0.25 / 5000.0 + 0.333333333) * (*a2 * (*a2 * (*a2 * *a5))) + *a4 * *a2;
  v11 = a1;
  do
  {
    bzero(v11, 0xCuLL);
    *(float *)&a1[v9] = v10;
    v11 += 24;
    v9 += 28;
  }
  while (v9 != 84);
  v12 = *a2;
  v13 = *a2 / 5000.0;
  v14 = expm1(-v13);
  v15 = exp(-v13);
  v16 = 0;
  v17 = v15 * (v13 * v13 + v13 * 2.0) + v14 * 2.0;
  v18 = *a5;
  v19 = *a5 * -0.5;
  v20 = v15 * (v12 * (v12 * v19));
  v21 = v19 * 1.24999999e11 * v17;
  v22 = v35;
  do
  {
    for (i = 0; i != 3; ++i)
      v22[i] = *(float *)(a3 + i * 4) * v21;
    v35[4 * v16] = v35[4 * v16] + v20;
    ++v16;
    v22 += 3;
    a3 += 12;
  }
  while (v16 != 3);
  v24 = (float *)(a1 + 12);
  v25 = a1 + 72;
  v26 = v35;
  v27 = 3;
  do
  {
    v28 = 0;
    v29 = v24;
    do
    {
      v30 = v26[v28];
      *(float *)&v25[v28 * 4] = v30;
      *v29 = v30;
      v29 += 6;
      ++v28;
    }
    while (v28 != 3);
    ++v27;
    ++v24;
    v25 += 24;
    v26 += 3;
  }
  while (v27 != 6);
  v31 = 0;
  v32 = v18 * 5000.0 * (1.0 - exp(v12 * -2.0 / 5000.0)) * 0.5;
  v33 = a1 + 84;
  v34 = a1 + 84;
  do
  {
    bzero(v34, 0xCuLL);
    *(float *)&v33[v31] = v32;
    v34 += 24;
    v31 += 28;
  }
  while (v31 != 84);
}

void sub_100AD8A88(void **a1, uint64_t a2, int a3)
{
  int v6;
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float *v12;
  uint64_t v13;
  int v14;
  float v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  float v19;
  uint64_t v20;

  bzero(*a1, 4 * ((a3 - 1) * a3 / 2));
  bzero(a1[1], 4 * a3);
  if (a3 >= 1)
  {
    v6 = 0;
    v7 = (float *)*a1;
    v8 = (float *)a1[1];
    v9 = a3 - 2;
    v10 = a3 - 1;
    v11 = a3 - 1;
    v12 = &v8[a3];
    v13 = v10;
    v14 = a3;
    while (1)
    {
      v15 = *(float *)(a2 + 4 * (v13 + (int)v13 * a3));
      if (v13 < v10)
      {
        v16 = 0;
        do
        {
          v15 = v15
              + (float)((float)-(float)(v7[v13 + (v11 + (int)v16) * (v14 + (int)v16) / 2]
                                      * v7[v13 + (v11 + (int)v16) * (v14 + (int)v16) / 2])
                      * v12[v16]);
          ++v16;
        }
        while (v6 != (_DWORD)v16);
      }
      v8[v13] = v15;
      if (v13 < 1)
        break;
      v17 = (float *)*a1;
      v18 = v9;
      do
      {
        v19 = *(float *)(a2 + 4 * (v18 + v13 * a3));
        if (v13 < v10)
        {
          v20 = 0;
          do
          {
            v19 = v19
                + (float)((float)-(float)(v17[v18 + (v11 + (int)v20) * (v14 + (int)v20) / 2]
                                        * v17[v13 + (v11 + (int)v20) * (v14 + (int)v20) / 2])
                        * v12[v20]);
            ++v20;
          }
          while (v6 != (_DWORD)v20);
        }
        v7[v18 + ((uint64_t)(int)((v13 - 1) * v13 + (((int)v13 - 1) * (int)v13 < 0)) >> 1)] = v19 / v8[v13];
      }
      while (v18-- > 0);
      --v14;
      --v9;
      --v11;
      --v12;
      ++v6;
      --v13;
    }
  }
}

uint64_t sub_100AD8C1C(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float *v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;

  v5 = (a5 - 1);
  if ((int)a5 >= 1)
  {
    v6 = 0;
    v7 = *a4;
    v8 = a4[1];
    v9 = a5;
    v10 = 4 * a5;
    v12 = *a2;
    v11 = (float *)a2[1];
    v13 = a3 + v10 - 4;
    v14 = a5 - 1;
    v15 = v8 + v10;
    a5 = a5;
    while (1)
    {
      v16 = a5--;
      v17 = 0.0;
      v18 = v9;
      v19 = v11;
      v20 = (float *)v13;
      do
      {
        v21 = *v19++;
        v17 = v17 + (float)((float)(*v20 * *v20) * v21);
        v20 = (float *)((char *)v20 + v10);
        --v18;
      }
      while (v18);
      if (v16 < v9)
      {
        v22 = 0;
        do
        {
          v17 = v17
              + (float)((float)(*(float *)(v7 + 4 * (a5 + (v14 + (int)v22) * ((int)v16 + (int)v22) / 2))
                              * *(float *)(v7 + 4 * (a5 + (v14 + (int)v22) * ((int)v16 + (int)v22) / 2)))
                      * *(float *)(v15 + 4 * v22));
          ++v22;
        }
        while (v6 != (_DWORD)v22);
      }
      *(float *)(result + 4 * a5) = v17 + *(float *)(v8 + 4 * a5);
      if (v16 < 2)
        break;
      v23 = 0;
      v24 = (float *)a2[1];
      v25 = (uint64_t)(int)(a5 * (v16 - 2) + ((int)a5 * ((int)v16 - 2) < 0)) >> 1;
      v26 = a3;
      do
      {
        v27 = 0;
        v28 = 0.0;
        v29 = v9;
        v30 = v24;
        do
        {
          v31 = *v30++;
          v28 = v28 + (float)((float)(*(float *)(v13 + v27) * v31) * *(float *)(v26 + v27));
          v27 += v10;
          --v29;
        }
        while (v29);
        v32 = v23 + v25;
        v33 = v28 + (float)(*(float *)(v8 + 4 * a5) * *(float *)(v7 + 4 * (v23 + v25)));
        if (v16 < v9)
        {
          v34 = 0;
          do
          {
            v33 = v33
                + (float)((float)(*(float *)(v7 + 4 * (a5 + (v14 + (int)v34) * ((int)v16 + (int)v34) / 2))
                                * *(float *)(v15 + 4 * v34))
                        * *(float *)(v7 + 4 * (v23 + (v14 + (int)v34) * ((int)v16 + (int)v34) / 2)));
            ++v34;
          }
          while (v6 != (_DWORD)v34);
        }
        v35 = 0;
        *(float *)(v12 + 4 * v32) = v33 / *(float *)(result + 4 * a5);
        v36 = v9;
        do
        {
          *(float *)(v26 + v35) = *(float *)(v26 + v35) - (float)(*(float *)(v12 + 4 * v32) * *(float *)(v13 + v35));
          v35 += v10;
          --v36;
        }
        while (v36);
        v37 = v6;
        v38 = v16;
        if (v16 < v9)
        {
          do
          {
            *(float *)(v7 + 4 * (v23 + (v38 - 1) * v38 / 2)) = *(float *)(v7 + 4 * (v23 + (v38 - 1) * v38 / 2))
                                                             - (float)(*(float *)(v12 + 4 * v32)
                                                                     * *(float *)(v7 + 4 * (a5 + (v38 - 1) * v38 / 2)));
            ++v38;
            --v37;
          }
          while (v37);
        }
        *(float *)(v7 + 4 * v32) = *(float *)(v7 + 4 * v32) - *(float *)(v12 + 4 * v32);
        ++v23;
        v26 += 4;
      }
      while (v23 != v5);
      --v5;
      v13 -= 4;
      --v14;
      v15 -= 4;
      ++v6;
    }
  }
  return result;
}

void sub_100AD8E68(uint64_t a1, double *a2, double *a3, double *a4, _QWORD *a5)
{
  float64x2_t v10;
  float v11;
  double v12;
  float v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float32x2_t v19;
  float v20;
  double v21;
  double v22;
  NSObject *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  NSObject *v31;
  double v32;
  double v33;
  double v34;
  unint64_t v35;
  float v36;
  float v37;
  double v38;
  float v39;
  double v40;
  double v41;
  double v42;
  float v43;
  int v44;
  double v45;
  double v46;
  int v47;
  NSObject *v48;
  double v49;
  int v50;
  BOOL v51;
  int v52;
  NSObject *v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  const char *v69;
  char *v70;
  float v71;
  float v72;
  float v73;
  unint64_t v74;
  float v75;
  float v76;
  NSObject *v77;
  const char *v78;
  char *v79;
  double v80;
  uint64_t v81;
  float v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  NSObject *v95;
  NSObject *v96;
  unint64_t v97;
  float v98;
  NSObject *v99;
  const char *v100;
  char *v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  uint64_t v108;
  const char *v109;
  char *v110;
  double v111;
  double v112;
  double v113;
  unint64_t v114;
  float v115;
  float v116;
  double v117;
  float v118;
  BOOL v119;
  double v120;
  float v121;
  NSObject *v122;
  const char *v123;
  const char *v124;
  char *v125;
  const char *v126;
  char *v127;
  const char *v128;
  char *v129;
  int v130;
  int *v131;
  double v132;
  NSObject *v133;
  NSObject *v134;
  const char *v135;
  unint64_t v136;
  NSObject *v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  const char *v141;
  char *v142;
  const char *v143;
  char *v144;
  const char *v145;
  char *v146;
  const char *v147;
  char *v148;
  const char *v149;
  char *v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  float v160;
  float v161;
  double v162;
  double v163;
  double v164;
  double v165;
  __int128 v166;
  double v167;
  _BYTE v168[24];
  double v169;
  __int16 v170;
  double v171;
  __int16 v172;
  double v173;
  __int16 v174;
  double v175;
  __int16 v176;
  uint64_t v177;
  _BYTE buf[24];
  double v179;
  __int16 v180;
  double v181;
  __int16 v182;
  double v183;
  __int16 v184;
  double v185;
  __int16 v186;
  uint64_t v187;

  v10.f64[0] = *a2;
  v11 = *a2;
  *(float *)(a1 + 184) = v11;
  v12 = *a3;
  v13 = *a3;
  *(float *)(a1 + 188) = v13;
  v14 = *a4;
  v15 = *a4;
  *(float *)(a1 + 192) = v15;
  if (*(double *)(a1 + 176) < 0.0)
  {
    sub_100A001DC(a1 + 16, a2, a3, a4);
    *(_QWORD *)(a1 + 176) = *a5;
    v16 = *a2;
    *(float *)(a1 + 560) = v16;
    v17 = *a3;
    *(float *)(a1 + 564) = v17;
    v18 = *a4;
    *(float *)(a1 + 568) = v18;
    *(_DWORD *)(a1 + 600) = 0;
    sub_100AD855C((double *)(a1 + 576), (double *)(a1 + 16));
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v10.f64[1] = v12;
    v19 = vcvt_f32_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 560)), (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL)), (float64x2_t)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL), v10));
    *(float32x2_t *)(a1 + 560) = v19;
    v20 = *(float *)(a1 + 568) * 0.1 + v14 * 0.9;
    *(float *)(a1 + 568) = v20;
    *(double *)buf = v19.f32[0];
    *(double *)v168 = v19.f32[1];
    v162 = v20;
    sub_100ADB200(a1 + 320, (double *)buf);
    sub_100ADB200(a1 + 400, (double *)v168);
    sub_100ADB200(a1 + 480, &v162);
  }
  *(_QWORD *)(a1 + 176) = *a5;
  if (!*(_DWORD *)(a1 + 148))
    return;
  v21 = *(double *)a5;
  v22 = *(double *)(a1 + 168);
  if (*(double *)a5 < v22)
    return;
  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102169398);
    v23 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v24 = *a2;
      v25 = *a3;
      v26 = *a4;
      v27 = *(float *)(a1 + 560);
      v28 = *(float *)(a1 + 564);
      v29 = *(float *)(a1 + 568);
      v30 = *a5;
      *(_DWORD *)buf = 134219520;
      *(double *)&buf[4] = v24;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v25;
      *(_WORD *)&buf[22] = 2048;
      v179 = v26;
      v180 = 2048;
      v181 = v27;
      v182 = 2048;
      v183 = v28;
      v184 = 2048;
      v185 = v29;
      v186 = 2048;
      v187 = v30;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "[Accelerometer6] x,%.4f,y,%.4f,z,%.4f,lpf, %.4f, %.4f, %.4f, timestamp,%lf", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102169398);
      v102 = *a2;
      v103 = *a3;
      v104 = *a4;
      v105 = *(float *)(a1 + 560);
      v106 = *(float *)(a1 + 564);
      v107 = *(float *)(a1 + 568);
      v108 = *a5;
      *(_DWORD *)v168 = 134219520;
      *(double *)&v168[4] = v102;
      *(_WORD *)&v168[12] = 2048;
      *(double *)&v168[14] = v103;
      *(_WORD *)&v168[22] = 2048;
      v169 = v104;
      v170 = 2048;
      v171 = v105;
      v172 = 2048;
      v173 = v106;
      v174 = 2048;
      v175 = v107;
      v176 = 2048;
      v177 = v108;
      LODWORD(v151) = 72;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[Accelerometer6] x,%.4f,y,%.4f,z,%.4f,lpf, %.4f, %.4f, %.4f, timestamp,%lf", COERCE_DOUBLE(v168), v151, v152, v153, v154, v155, v156);
      v110 = (char *)v109;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v109);
      if (v110 != buf)
        free(v110);
    }
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102169398);
    v31 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v32 = *(float *)(a1 + 156);
      v33 = *(float *)(a1 + 160);
      v34 = *(float *)(a1 + 164);
      v35 = *(_QWORD *)(a1 + 296);
      v36 = 0.0;
      if (v35)
      {
        v37 = *(float *)(a1 + 248);
        v38 = (float)(v37 / (float)v35);
        if (v35 != 1)
        {
          v39 = (float)((float)v35 * *(float *)(a1 + 252)) - (float)(v37 * v37);
          if (v39 >= 0.0)
            v36 = v39 / (float)((v35 - 1) * v35);
        }
      }
      else
      {
        v38 = 0.0;
      }
      *(_DWORD *)buf = 134219008;
      *(double *)&buf[4] = v32;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v33;
      *(_WORD *)&buf[22] = 2048;
      v179 = v34;
      v180 = 2048;
      v181 = v38;
      v182 = 2048;
      v183 = v36;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "[RotationRate6X] %.3f, %.3f, %.3f, %.3f, %.3f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102169398);
      v111 = *(float *)(a1 + 156);
      v112 = *(float *)(a1 + 160);
      v113 = *(float *)(a1 + 164);
      v114 = *(_QWORD *)(a1 + 296);
      v115 = 0.0;
      if (v114)
      {
        v116 = *(float *)(a1 + 248);
        v117 = (float)(v116 / (float)v114);
        if (v114 != 1)
        {
          v118 = (float)((float)v114 * *(float *)(a1 + 252)) - (float)(v116 * v116);
          if (v118 >= 0.0)
            v115 = v118 / (float)((v114 - 1) * v114);
        }
      }
      else
      {
        v117 = 0.0;
      }
      *(_DWORD *)v168 = 134219008;
      *(double *)&v168[4] = v111;
      *(_WORD *)&v168[12] = 2048;
      *(double *)&v168[14] = v112;
      *(_WORD *)&v168[22] = 2048;
      v169 = v113;
      v170 = 2048;
      v171 = v117;
      v172 = 2048;
      v173 = v115;
      LODWORD(v151) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[RotationRate6X] %.3f, %.3f, %.3f, %.3f, %.3f", COERCE_DOUBLE(v168), v151, v152, v153, v154);
      v129 = (char *)v128;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v128);
      if (v129 != buf)
        free(v129);
    }
  }
  v41 = *a3;
  *(double *)&v166 = *a2;
  v40 = *(double *)&v166;
  *((double *)&v166 + 1) = v41;
  v167 = *a4;
  v42 = v167;
  LODWORD(v22) = *(_DWORD *)(a1 + 136);
  LODWORD(v21) = *(_DWORD *)(a1 + 140);
  v43 = *(float *)(a1 + 144);
  v160 = *(float *)&v21;
  v161 = *(float *)&v22;
  v44 = *(_DWORD *)(a1 + 148);
  sub_100AD7C44(a1, v21, *(int32x2_t *)&v22);
  v45 = sqrt(v41 * v41 + v40 * v40 + v42 * v42);
  v46 = fabs(v45 + -1.0) / v45;
  if (v46 > 0.1)
    return;
  if (!*(_BYTE *)(a1 + 224) || *(_DWORD *)(a1 + 616))
    goto LABEL_26;
  v71 = fabsf(*(float *)(a1 + 156));
  if (v71 > 10.0)
    goto LABEL_86;
  v72 = fabsf(*(float *)(a1 + 160));
  if (v72 > 10.0)
    goto LABEL_86;
  v73 = fabsf(*(float *)(a1 + 164));
  if (v73 > 10.0)
    goto LABEL_86;
  v74 = *(_QWORD *)(a1 + 296);
  if (v74)
  {
    if ((float)(*(float *)(a1 + 248) / (float)v74) > 10.0)
      goto LABEL_86;
  }
  if (v71 > 3.14159265
    || v72 > 3.14159265
    || v73 > 3.14159265
    || (!v74 ? (v75 = 0.0) : (v75 = *(float *)(a1 + 248) / (float)v74), v75 > 3.14159265))
  {
    if (v74 < 2
      || (v76 = (float)((float)v74 * *(float *)(a1 + 252)) - (float)(*(float *)(a1 + 248) * *(float *)(a1 + 248)),
          v76 < 0.0)
      || (float)(v76 / (float)((v74 - 1) * v74)) < 1.25)
    {
      sub_100AD855C((double *)(a1 + 576), (double *)(a1 + 16));
      if (!*(_BYTE *)(a1 + 196))
      {
        *(_DWORD *)(a1 + 600) = 0;
        goto LABEL_32;
      }
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102169358);
      v77 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "rotating and going through.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_102169358);
        *(_WORD *)v168 = 0;
        LODWORD(v151) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "rotating and going through.", v168, *(_QWORD *)&v151);
        v79 = (char *)v78;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v78);
        if (v79 != buf)
          free(v79);
      }
LABEL_26:
      v47 = *(unsigned __int8 *)(a1 + 196);
      *(_DWORD *)(a1 + 600) = 0;
      if (v47)
      {
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_102169358);
        v48 = qword_10229FD28;
        if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218752;
          *(double *)&buf[4] = v40;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v41;
          *(_WORD *)&buf[22] = 2048;
          v179 = v42;
          v180 = 2048;
          v181 = v45;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "accM, (%.4f, %.4f, %.4f), mag, %.3f", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_102169358);
          *(_DWORD *)v168 = 134218752;
          *(double *)&v168[4] = v40;
          *(_WORD *)&v168[12] = 2048;
          *(double *)&v168[14] = v41;
          *(_WORD *)&v168[22] = 2048;
          v169 = v42;
          v170 = 2048;
          v171 = v45;
          LODWORD(v151) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "accM, (%.4f, %.4f, %.4f), mag, %.3f", COERCE_DOUBLE(v168), v151, v152, v153);
          v127 = (char *)v126;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v126);
          if (v127 != buf)
            free(v127);
        }
      }
LABEL_32:
      v49 = v46
          * (0.015
           / (exp((0.9- sqrtf((float)((float)((float)(v160 / (float)v44) * (float)(v160 / (float)v44))+ (float)((float)(v161 / (float)v44) * (float)(v161 / (float)v44)))+ (float)((float)(v43 / (float)v44) * (float)(v43 / (float)v44))))/ 0.08)+ 1.0))+ 0.00000900000032;
      if (*(_BYTE *)(a1 + 224) && !*(_DWORD *)(a1 + 616))
        v49 = v49 * 0.85;
      *(double *)&v166 = v40 / v45;
      *((double *)&v166 + 1) = v41 / v45;
      v167 = v42 / v45;
      sub_100ADAD2C(a1, (double *)&v166, v49);
      if (*(_BYTE *)(a1 + 224))
        sub_100AD855C((double *)(a1 + 576), (double *)(a1 + 16));
      *(_QWORD *)(a1 + 608) = *a5;
      v50 = *(_DWORD *)(a1 + 616);
      v51 = __OFSUB__(v50, 1);
      v52 = v50 - 1;
      if (v52 < 0 == v51)
      {
        *(_DWORD *)(a1 + 616) = v52;
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_102169358);
        v53 = qword_10229FD28;
        if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "Doing some crude updates to catch up.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_102169358);
          *(_WORD *)v168 = 0;
          LODWORD(v151) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Doing some crude updates to catch up.", v168, *(_QWORD *)&v151);
          v125 = (char *)v124;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v124);
          if (v125 != buf)
            free(v125);
        }
      }
      if (*(_BYTE *)(a1 + 196))
      {
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_102169398);
        v54 = qword_10229FD38;
        if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
        {
          v55 = *(_QWORD *)(a1 + 64);
          v56 = *(_QWORD *)(a1 + 72);
          v57 = *(double *)(a1 + 80);
          v58 = *(double *)(a1 + 88);
          v59 = *(double *)(a1 + 96);
          v60 = *(double *)(a1 + 104);
          v61 = *a5;
          *(_DWORD *)buf = 134219520;
          *(_QWORD *)&buf[4] = v55;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v56;
          *(_WORD *)&buf[22] = 2048;
          v179 = v57;
          v180 = 2048;
          v181 = v58;
          v182 = 2048;
          v183 = v59;
          v184 = 2048;
          v185 = v60;
          v186 = 2048;
          v187 = v61;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "[KalmanFilterStates] %f,%f,%f,%f,%f,%f,%f", buf, 0x48u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD30 != -1)
            dispatch_once(&qword_10229FD30, &stru_102169398);
          v62 = *(_QWORD *)(a1 + 64);
          v63 = *(_QWORD *)(a1 + 72);
          v64 = *(double *)(a1 + 80);
          v65 = *(double *)(a1 + 88);
          v66 = *(double *)(a1 + 96);
          v67 = *(double *)(a1 + 104);
          v68 = *a5;
          *(_DWORD *)v168 = 134219520;
          *(_QWORD *)&v168[4] = v62;
          *(_WORD *)&v168[12] = 2048;
          *(_QWORD *)&v168[14] = v63;
          *(_WORD *)&v168[22] = 2048;
          v169 = v64;
          v170 = 2048;
          v171 = v65;
          v172 = 2048;
          v173 = v66;
          v174 = 2048;
          v175 = v67;
          v176 = 2048;
          v177 = v68;
          LODWORD(v151) = 72;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[KalmanFilterStates] %f,%f,%f,%f,%f,%f,%f", COERCE_DOUBLE(v168), v151, v152, v153, v154, v155, v156);
          v70 = (char *)v69;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v69);
LABEL_52:
          if (v70 != buf)
            free(v70);
          return;
        }
      }
      return;
    }
  }
  sub_100ADABF0(a1 + 304, (uint64_t)&v162);
  v159 = sqrt(v164 * v164 + v163 * v163 + v165 * v165);
  v80 = *(double *)(a1 + 608);
  if (v80 > 0.0 && *(double *)(a1 + 176) - v80 > 15.0 && v159 < 0.3)
  {
    sub_100ADACC4(a1 + 304, (uint64_t)buf);
    if (fabs(sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v179 * v179)+ -1.0) <= 0.1)
    {
      *(_DWORD *)(a1 + 616) = 10;
      if (!*(_BYTE *)(a1 + 196))
        goto LABEL_187;
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102169358);
      v99 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "it's been too long. go through.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_187;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102169358);
      *(_WORD *)v168 = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "it's been too long. go through.", v168, *(_QWORD *)&v151);
      v101 = (char *)v100;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v100);
LABEL_121:
      if (v101 != buf)
        free(v101);
      goto LABEL_187;
    }
  }
  if (*(_DWORD *)(a1 + 392) <= (int)((double)*(unint64_t *)(a1 + 312) * 0.5))
  {
LABEL_86:
    sub_100AD855C((double *)(a1 + 576), (double *)(a1 + 16));
    return;
  }
  v81 = *(_QWORD *)(a1 + 296);
  if (v81)
    v82 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 264)
                               + (((unint64_t)(v81 + *(_QWORD *)(a1 + 288) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v81 + *(_QWORD *)(a1 + 288) - 1) & 0x3FF));
  else
    v82 = 0.0;
  if (v82 > 0.2)
  {
    sub_100AD855C((double *)(a1 + 576), (double *)(a1 + 16));
    if (*(_BYTE *)(a1 + 196))
    {
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102169358);
      v83 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
      {
        v84 = *(_QWORD *)(a1 + 576);
        v85 = *(_QWORD *)(a1 + 584);
        v86 = *(double *)(a1 + 592);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v84;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v85;
        *(_WORD *)&buf[22] = 2048;
        v179 = v86;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "grabing gravity, %.4f, %.4f, %.4f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_102169358);
        v138 = *(_QWORD *)(a1 + 576);
        v139 = *(_QWORD *)(a1 + 584);
        v140 = *(double *)(a1 + 592);
        *(_DWORD *)v168 = 134218496;
        *(_QWORD *)&v168[4] = v138;
        *(_WORD *)&v168[12] = 2048;
        *(_QWORD *)&v168[14] = v139;
        *(_WORD *)&v168[22] = 2048;
        v169 = v140;
        LODWORD(v151) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "grabing gravity, %.4f, %.4f, %.4f", COERCE_DOUBLE(v168), v151, v152);
        v142 = (char *)v141;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v141);
        if (v142 != buf)
          free(v142);
      }
    }
  }
  if (v159 <= *(double *)(a1 + 216) * 0.75)
    goto LABEL_187;
  v87 = *(double *)(a1 + 576);
  v88 = *(double *)(a1 + 584);
  v89 = *(double *)(a1 + 592);
  v90 = fabs(v164 * v88 + v163 * v87 + v165 * v89);
  v158 = v159 - v90;
  v91 = *(double *)(a1 + 336);
  v92 = *(double *)(a1 + 416);
  v93 = *(double *)(a1 + 496);
  v94 = v88 * v92 + v91 * v87 + v93 * v89;
  v153 = v91 - v94 * v87;
  v154 = v92 - v94 * v88;
  v155 = v93 - v94 * v89;
  v156 = v94;
  v157 = fabs(v155) + fabs(v153) + fabs(v154);
  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102169358);
    v95 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219264;
      *(double *)&buf[4] = v163;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v164;
      *(_WORD *)&buf[22] = 2048;
      v179 = v165;
      v180 = 2048;
      v181 = v159;
      v182 = 2048;
      v183 = v90;
      v184 = 2048;
      v185 = v159 - v90;
      _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102169358);
      *(_DWORD *)v168 = 134219264;
      *(double *)&v168[4] = v163;
      *(_WORD *)&v168[12] = 2048;
      *(double *)&v168[14] = v164;
      *(_WORD *)&v168[22] = 2048;
      v169 = v165;
      v170 = 2048;
      v171 = v159;
      v172 = 2048;
      v173 = v90;
      v174 = 2048;
      v175 = v159 - v90;
      LODWORD(v151) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f", COERCE_DOUBLE(v168), v151, v152, v153, v154, v155);
      v144 = (char *)v143;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v143);
      if (v144 != buf)
        free(v144);
    }
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102169358);
    v96 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219008;
      *(double *)&buf[4] = v153;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v154;
      *(_WORD *)&buf[22] = 2048;
      v179 = v155;
      v180 = 2048;
      v181 = v156;
      v182 = 2048;
      v183 = v157;
      _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102169358);
      *(_DWORD *)v168 = 134219008;
      *(double *)&v168[4] = v153;
      *(_WORD *)&v168[12] = 2048;
      *(double *)&v168[14] = v154;
      *(_WORD *)&v168[22] = 2048;
      v169 = v155;
      v170 = 2048;
      v171 = v156;
      v172 = 2048;
      v173 = v157;
      LODWORD(v151) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f", COERCE_DOUBLE(v168), v151, v152, v153, v154);
      v146 = (char *)v145;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v145);
      if (v146 != buf)
        free(v146);
    }
  }
  if (v158 > *(double *)(a1 + 216))
    goto LABEL_137;
  v97 = *(_QWORD *)(a1 + 296);
  if (v97)
    v98 = *(float *)(a1 + 248) / (float)v97;
  else
    v98 = 0.0;
  v119 = v98 <= 1.57079633;
  v120 = 0.0;
  if (!v119)
    v120 = 1.0;
  if (v157 > (v120 * 0.5 + 1.0) * 6.0)
  {
LABEL_137:
    *(_DWORD *)(a1 + 600) = 0;
    return;
  }
  if (v158 >= 0.01 || v157 >= 0.6)
  {
    v130 = *(_DWORD *)(a1 + 600) + 1;
    *(_DWORD *)(a1 + 600) = v130;
    if (!v97)
      goto LABEL_177;
    v131 = (int *)(a1 + 600);
    v121 = *(float *)(a1 + 248) / (float)v97;
  }
  else
  {
    if (!v97)
    {
      v130 = *(_DWORD *)(a1 + 600) + 1;
      *(_DWORD *)(a1 + 600) = v130;
      goto LABEL_177;
    }
    v121 = *(float *)(a1 + 248) / (float)v97;
    if (v121 > 0.5)
    {
      if (!*(_BYTE *)(a1 + 196))
        goto LABEL_187;
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102169358);
      v122 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEBUG, "===========Skip ahead.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_187;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102169358);
      *(_WORD *)v168 = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "===========Skip ahead.", v168, *(_QWORD *)&v151);
      v101 = (char *)v123;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v123);
      goto LABEL_121;
    }
    v131 = (int *)(a1 + 600);
    v130 = *(_DWORD *)(a1 + 600) + 1;
    *(_DWORD *)(a1 + 600) = v130;
  }
  if (v121 > 1.0
    && *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + (((v97 + *(_QWORD *)(a1 + 288) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                + 4 * ((v97 + *(_QWORD *)(a1 + 288) - 1) & 0x3FF)) < 0.2)
  {
    sub_100ADACC4(a1 + 304, (uint64_t)buf);
    v132 = sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v179 * v179);
    if (fabs(v132 + -1.0) / v132 >= 0.025)
    {
      v130 = *v131;
    }
    else
    {
      if (*(_BYTE *)(a1 + 196))
      {
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_102169358);
        v133 = qword_10229FD28;
        if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEBUG, "Skip ahead------.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_102169358);
          *(_WORD *)v168 = 0;
          LODWORD(v151) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Skip ahead------.", v168, *(_QWORD *)&v151);
          v150 = (char *)v149;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v149);
          if (v150 != buf)
            free(v150);
        }
      }
      v130 = *v131 + 2;
      *v131 = v130;
    }
  }
LABEL_177:
  if (v130 >= *(_DWORD *)(a1 + 208))
  {
LABEL_187:
    if (*(_BYTE *)(a1 + 224))
    {
      if (v159 > 0.2)
      {
        v136 = *(_QWORD *)(a1 + 296);
        if (!v136
          || *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 264)
                                  + (((v136 + *(_QWORD *)(a1 + 288) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v136 + *(_QWORD *)(a1 + 288) - 1) & 0x3FF)) < 0.75
          && (float)(*(float *)(a1 + 248) / (float)v136) < 1.0)
        {
          sub_100ADACC4(a1 + 304, (uint64_t)v168);
          v41 = *(double *)&v168[16];
          v40 = *(double *)&v168[8];
          v42 = v169;
          v166 = *(_OWORD *)&v168[8];
          v167 = v169;
          if (*(_BYTE *)(a1 + 196))
          {
            if (qword_10229FD20 != -1)
              dispatch_once(&qword_10229FD20, &stru_102169358);
            v137 = qword_10229FD28;
            if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEBUG, "using mean accel", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD20 != -1)
                dispatch_once(&qword_10229FD20, &stru_102169358);
              LOWORD(v162) = 0;
              LODWORD(v151) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "using mean accel", &v162, *(_QWORD *)&v151);
              v148 = (char *)v147;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v147);
              if (v148 != buf)
                free(v148);
            }
          }
          v45 = sqrt(v41 * v41 + v40 * v40 + v42 * v42);
          v46 = fabs(v45 + -1.0) / v45;
        }
      }
    }
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102169358);
    v134 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEBUG, "Taking another look.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102169358);
      *(_WORD *)v168 = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Taking another look.", v168, *(_QWORD *)&v151);
      v70 = (char *)v135;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v135);
      goto LABEL_52;
    }
  }
}

double sub_100ADABF0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  double v3;
  double v4;
  double v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  double v9;
  double v10;
  double result;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = 0.0;
  v4 = 0.0;
  if (v2 >= 2)
  {
    v5 = (double)v2 * *(double *)(a1 + 40) - *(double *)(a1 + 32) * *(double *)(a1 + 32);
    v4 = 0.0;
    if (v5 >= 0.0)
      v4 = v5 / (double)((v2 - 1) * v2);
  }
  v6 = *(_QWORD *)(a1 + 168);
  if (v6 >= 2)
  {
    v7 = (double)v6 * *(double *)(a1 + 120) - *(double *)(a1 + 112) * *(double *)(a1 + 112);
    if (v7 >= 0.0)
      v3 = v7 / (double)((v6 - 1) * v6);
  }
  v8 = *(_QWORD *)(a1 + 248);
  v9 = 0.0;
  if (v8 >= 2)
  {
    v10 = (double)v8 * *(double *)(a1 + 200) - *(double *)(a1 + 192) * *(double *)(a1 + 192);
    if (v10 >= 0.0)
      v9 = v10 / (double)((v8 - 1) * v8);
  }
  *(_QWORD *)a2 = off_102169428;
  *(double *)(a2 + 8) = sqrt(v4);
  *(double *)(a2 + 16) = sqrt(v3);
  result = sqrt(v9);
  *(double *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100ADACC4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  double v3;
  double v4;
  unint64_t v5;
  unint64_t v6;
  double v7;

  v2 = *(_QWORD *)(result + 88);
  v3 = 0.0;
  v4 = 0.0;
  if (v2)
    v4 = *(double *)(result + 32) / (double)v2;
  v5 = *(_QWORD *)(result + 168);
  if (v5)
    v3 = *(double *)(result + 112) / (double)v5;
  v6 = *(_QWORD *)(result + 248);
  if (v6)
    v7 = *(double *)(result + 192) / (double)v6;
  else
    v7 = 0.0;
  *(_QWORD *)a2 = off_102169428;
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v3;
  *(double *)(a2 + 24) = v7;
  return result;
}

void sub_100ADAD2C(uint64_t a1, double *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t i;
  float v16;
  float v17;
  float v18;
  float v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  _DWORD v25[3];
  _DWORD v26[3];
  _BYTE v27[36];
  uint64_t v28;
  _DWORD v29[9];

  v6 = 0;
  v7 = 0;
  v8 = *(double *)(a1 + 40);
  v9 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
  v10 = *(double *)(a1 + 16);
  v11 = *(double *)(a1 + 24);
  v12 = v8 * (v11 + v11) - v10 * v9;
  v13 = -(v8 * (v10 + v10)) - v11 * v9;
  v14 = v10 * (v10 + v10) + -1.0 + v11 * (v11 + v11);
  *(float *)&v9 = v13;
  *(float *)&v8 = v14;
  v29[0] = 0;
  v29[1] = LODWORD(v8);
  *(float *)&v29[2] = -*(float *)&v9;
  *(float *)&v10 = v12;
  *(float *)&v29[3] = -*(float *)&v8;
  v29[4] = 0;
  v29[5] = LODWORD(v10);
  v29[6] = LODWORD(v9);
  *(float *)&v29[7] = -*(float *)&v10;
  v29[8] = 0;
  do
  {
    for (i = 0; i != 9; i += 3)
      *(_DWORD *)&v27[v6 * 4 + i * 4] = v29[v6 + i];
    ++v7;
    ++v6;
  }
  while (v7 != 3);
  bzero(&v28, 0x24uLL);
  v16 = a3;
  *(float *)v26 = v16;
  *(float *)&v26[1] = v16;
  *(float *)&v26[2] = v16;
  v17 = *a2 - v12;
  v18 = a2[1] - v13;
  *(float *)v25 = v17;
  *(float *)&v25[1] = v18;
  v19 = a2[2] - v14;
  *(float *)&v25[2] = v19;
  sub_100AD7F9C(&v22, (uint64_t *)(a1 + 112), (uint64_t)v27, (uint64_t)v26, (uint64_t)v25, 6, 3, (uint64_t)&v21);
  v20 = v13 * v23 + v22 * v12 + v24 * v14;
  v22 = v22 - v20 * v12;
  v23 = v23 - v20 * v13;
  v24 = v24 - v20 * v14;
  sub_100ADAEDC(a1, &v22);
}

double sub_100ADAEDC(uint64_t a1, double *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  double result;
  _OWORD v8[2];
  double v9[4];

  sub_100AD8480(v9, a2);
  sub_100A002C4((double *)v8, v9, (double *)(a1 + 16));
  v4 = 0;
  v5 = v8[1];
  *(_OWORD *)(a1 + 16) = v8[0];
  *(_OWORD *)(a1 + 32) = v5;
  v6 = a1 + 88;
  do
  {
    result = a2[v4 + 3] + *(double *)(v6 + v4 * 8);
    *(double *)(v6 + v4 * 8) = result;
    ++v4;
  }
  while (v4 != 3);
  return result;
}

uint64_t sub_100ADAF4C(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  float *v6;
  float v7;
  float *v8;
  uint64_t v9;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = (float *)(a3 - 4 * a4);
    do
    {
      v7 = *(float *)(a3 + 4 * v5 * a4);
      *(float *)(result + 4 * v5) = v7;
      if (v5)
      {
        v8 = v6;
        v9 = v5;
        do
        {
          v7 = v7 + (float)(*v8 * *(float *)(a2 - 4 + 4 * (((int)v5 - 1) * (int)v5 / 2) + 4 * v9));
          *(float *)(result + 4 * v5) = v7;
          v8 -= a4;
        }
        while (v9-- > 1);
      }
      ++v5;
      v6 += a4;
    }
    while (v5 != a5);
  }
  return result;
}

double sub_100ADAFD0(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

double sub_100ADAFD8(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

double sub_100ADAFE0(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

uint64_t sub_100ADAFE8(_DWORD *a1, _DWORD *a2)
{
  *a2 = a1[39];
  a2[1] = a1[40];
  a2[2] = a1[41];
  return 1;
}

BOOL sub_100ADB008(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  _BOOL8 result;

  v2 = *(double *)(a1 + 176);
  if (v2 <= 0.0)
  {
    *(_QWORD *)a2 = 0;
    v10 = 0.0;
  }
  else
  {
    v3 = *(double *)(a1 + 40);
    v4 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
    v5 = *(double *)(a1 + 16);
    v6 = *(double *)(a1 + 24);
    v7 = v3 * (v6 + v6) - v5 * v4;
    v8 = -(v3 * (v5 + v5)) - v6 * v4;
    v9 = v5 * (v5 + v5) + -1.0 + v6 * (v6 + v6);
    *(float *)&v5 = *(float *)(a1 + 184) - v7;
    *(_DWORD *)a2 = LODWORD(v5);
    *(float *)&v8 = *(float *)(a1 + 188) - v8;
    *(_DWORD *)(a2 + 4) = LODWORD(v8);
    v10 = *(float *)(a1 + 192) - v9;
  }
  result = v2 > 0.0;
  *(float *)(a2 + 8) = v10;
  return result;
}

uint64_t sub_100ADB098(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

float sub_100ADB0A0(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

void sub_100ADB0AC(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100ADB0D8(id a1)
{
  qword_10229FD38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

_QWORD *sub_100ADB104(_QWORD *a1)
{
  *a1 = off_1021693F8;
  sub_10047F25C(a1 + 4);
  return a1;
}

void sub_100ADB138(_QWORD *a1)
{
  sub_100ADB1A0(a1);
  operator delete();
}

void sub_100ADB15C(_QWORD *a1)
{
  *a1 = off_1021693F8;
  sub_10047F25C(a1 + 4);
  operator delete();
}

_QWORD *sub_100ADB1A0(_QWORD *a1)
{
  *a1 = off_1021693C8;
  a1[22] = off_1021693F8;
  sub_10047F25C(a1 + 26);
  a1[12] = off_1021693F8;
  sub_10047F25C(a1 + 16);
  a1[2] = off_1021693F8;
  sub_10047F25C(a1 + 6);
  return a1;
}

double sub_100ADB200(uint64_t a1, double *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double result;

  v4 = a1 + 32;
  sub_1000D796C((_QWORD *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 72);
  if (v5 > *(_QWORD *)(a1 + 8))
  {
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v6 & 0x1FF));
    v8 = *(double *)(a1 + 16) - v7;
    v9 = *(double *)(a1 + 24) - v7 * v7;
    *(double *)(a1 + 16) = v8;
    *(double *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 64) = v6 + 1;
    *(_QWORD *)(a1 + 72) = v5 - 1;
    sub_10047F604(v4, 1);
  }
  v10 = *(double *)(a1 + 24);
  *(double *)(a1 + 16) = *a2 + *(double *)(a1 + 16);
  result = v10 + *a2 * *a2;
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100ADB2A4()
{
  uint64_t result;

  result = sub_1001E4BF4();
  if ((result & 1) != 0)
    operator new();
  return result;
}

void sub_100ADB2EC()
{
  operator delete();
}

uint64_t sub_100ADB310()
{
  return sub_1001E4BF4() & 1;
}

void sub_100ADB32C(uint64_t a1)
{
  sub_1009BAC4C(a1, (uint64_t)"CLMagnetometer", 1);
}

void sub_100ADB410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44(v10);
  sub_1009BAD18(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_100ADB43C(_QWORD *a1)
{
  uint64_t v3;

  *a1 = off_102169478;
  v3 = 0;
  sub_100017A44((uint64_t)a1, (double *)&v3);
  sub_100346F9C(a1 + 10);
  sub_100261F44((uint64_t)(a1 + 10));
  return sub_1009BAD18(a1);
}

void sub_100ADB498(_QWORD *a1)
{
  sub_100ADB43C(a1);
  operator delete();
}

BOOL sub_100ADB4BC(uint64_t a1)
{
  uint64_t v1;
  id v3;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v3 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithBool:", 1);
    (*(void (**)(_QWORD, const __CFString *, id))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), CFSTR("IOHIDCompasssResetDAC"), v3);

  }
  return v1 != 0;
}

void sub_100ADB528(float *a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  int v15;
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  uint8_t buf[4];
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;

  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_1021694E0);
  v4 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = a1[2];
    *(_DWORD *)buf = 134218496;
    v22 = v5;
    v23 = 2048;
    v24 = v6;
    v25 = 2048;
    v26 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Received magnetometer offset (%f, %f, %f)", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021694E0);
    v9 = *a1;
    v10 = a1[1];
    v11 = a1[2];
    v15 = 134218496;
    v16 = v9;
    v17 = 2048;
    v18 = v10;
    v19 = 2048;
    v20 = v11;
    LODWORD(v14) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "Received magnetometer offset (%f, %f, %f)", COERCE_DOUBLE(&v15), v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "static void CLMagnetometer::onOffset(const CLMotionTypeMagneticField *, void *)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v8 = *(_QWORD *)a1;
  *(float *)(a2 + 56) = a1[2];
  *(_QWORD *)(a2 + 48) = v8;
}

void sub_100ADB734(id a1)
{
  qword_10229FD68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accel");
}

void sub_100ADB760(id a1)
{
  qword_10229FD38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void sub_100ADB790(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  double v10;
  double v11;
  double v12;
  float v13;
  float v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;

  v4 = *(float *)(a1 + 1368);
  v5 = *(float *)(a1 + 1372);
  v6 = *(float *)(a1 + 1376);
  v7 = *(float *)(a1 + 1380);
  v8 = 0.0;
  if (sub_100219944(a1) && *(double *)(a1 + 600) < *(double *)a1)
  {
    v9 = *(double *)(a1 + 560);
    v10 = v9;
    v11 = v6;
    v12 = v7;
    v13 = (v12 - v9) / (v12 - v11);
    v14 = sub_10108B14C(v13, v5);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021695C0);
    v8 = v4 * v14;
    v15 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219008;
      v30 = v10;
      v31 = 2048;
      v32 = v12;
      v33 = 2048;
      v34 = v11;
      v35 = 2048;
      v36 = v4;
      v37 = 2048;
      v38 = v8;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "High Intensity, CR DT Regression, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021695C0);
      v19 = 134219008;
      v20 = v10;
      v21 = 2048;
      v22 = v12;
      v23 = 2048;
      v24 = v11;
      v25 = 2048;
      v26 = v4;
      v27 = 2048;
      v28 = v8;
      LODWORD(v18) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "High Intensity, CR DT Regression, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f", COERCE_DOUBLE(&v19), v18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieHighIntensityModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  *(float *)a2 = v8;
  *(_QWORD *)(a2 + 4) = 0;
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 20) = 0x340B33333;
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 32) = 3;
  if (v8 > 5.6)
  {
    *(_QWORD *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 12) = 0;
    *(float *)(a2 + 20) = v8;
    *(_DWORD *)(a2 + 24) = 1;
    *(_DWORD *)(a2 + 32) = 3;
  }
}

void sub_100ADBA68(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100ADBA94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[696];
  uint64_t v12;

  v3 = a1 + 166080;
  v4 = sub_100959E78(a1, a2);
  *(_QWORD *)v4 = off_1021695F0;
  v5 = (_QWORD *)(v4 + 166136);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_DWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v4 + 166136) = 0u;
  *(_DWORD *)(v4 + 166152) = 0;
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_102169628);
  v6 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLSwimPoolSessionSimulator Instantiated", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102169628);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 0, "CLSwimPoolSessionSimulator Instantiated", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "CLSwimPoolSessionSimulator::CLSwimPoolSessionSimulator(CLSwimDataStore *, float)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  memcpy(buf, &unk_101C07D90, sizeof(buf));
  sub_10031F73C((char *)v3, (char *)buf, (uint64_t)&v12, 0x1DuLL);
  *(_DWORD *)(v3 + 48) = 0;
  *v5 = 0;
  v5[1] = 0;
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(v3 + 24);
  return a1;
}

void sub_100ADBCA4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;
  void *v5;

  v4 = *(void **)(v2 + 24);
  if (v4)
  {
    *(_QWORD *)(v2 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v5;
    operator delete(v5);
  }
  *v1 = off_10215FCD8;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ADBCEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  int v11;
  int v12;
  double v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  char *v28;
  __int128 v29;
  double v30;
  unsigned int v31;

  if (!sub_10047D950(*(_QWORD *)(a1 + 8)))
    return 0;
  v6 = (char **)(a1 + 166104);
  v7 = *(_QWORD *)(a1 + 166080);
  if (*(_QWORD *)(a1 + 166112) - *(_QWORD *)(a1 + 166104) == *(_QWORD *)(a1 + 166088) - v7)
    goto LABEL_3;
  v9 = *(_QWORD *)(a1 + 166144);
  v10 = (__int128 *)(v7 + 24 * v9);
  v11 = *(_DWORD *)(a1 + 166152);
  switch(v11)
  {
    case 2:
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8)))
      {
        if (sub_10095B1F0((uint64_t *)a1, *(double *)(a2 + 56), *(double *)(a2 + 56)))
          v8 = 2;
        else
          v8 = 0;
      }
      else
      {
        v8 = 0;
      }
      v15 = *(_QWORD *)(a1 + 166120);
      *(_DWORD *)(a1 + 166128) = 0;
      ++*(_QWORD *)(a1 + 166144);
      v16 = *(_QWORD *)(a1 + 166112);
      if (v16 >= v15)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)*v6) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)*v6) >> 3);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x555555555555555)
          v22 = 0xAAAAAAAAAAAAAAALL;
        else
          v22 = v20;
        if (v22)
          v23 = (char *)sub_1002596A8(a1 + 166120, v22);
        else
          v23 = 0;
        v24 = &v23[24 * v19];
        v25 = &v23[24 * v22];
        v26 = *v10;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v24 = v26;
        v18 = v24 + 24;
        v28 = *(char **)(a1 + 166104);
        v27 = *(char **)(a1 + 166112);
        if (v27 != v28)
        {
          do
          {
            v29 = *(_OWORD *)(v27 - 24);
            *((_QWORD *)v24 - 1) = *((_QWORD *)v27 - 1);
            *(_OWORD *)(v24 - 24) = v29;
            v24 -= 24;
            v27 -= 24;
          }
          while (v27 != v28);
          v27 = *v6;
        }
        *(_QWORD *)(a1 + 166104) = v24;
        *(_QWORD *)(a1 + 166112) = v18;
        *(_QWORD *)(a1 + 166120) = v25;
        if (v27)
          operator delete(v27);
      }
      else
      {
        v17 = *v10;
        *(_QWORD *)(v16 + 16) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v16 = v17;
        v18 = (char *)(v16 + 24);
      }
      v14 = 0;
      *(_QWORD *)(a1 + 166112) = v18;
      goto LABEL_38;
    case 1:
      v8 = 0;
      if (*(double *)(a2 + 56) - *(double *)(a1 + 166136) < 20.0)
        goto LABEL_39;
      v14 = 2;
LABEL_38:
      *(_DWORD *)(a1 + 166152) = v14;
      goto LABEL_39;
    case 0:
      v12 = *((_DWORD *)v10 + 1);
      v13 = *(double *)(a2 + 56);
      if (vabdd_f64(v13, *(double *)(a1 + 166136)) > *(double *)(v7 + 24 * v9 + 8) / (double)v12)
      {
        *(double *)(a1 + 166136) = v13;
        ++*(_DWORD *)(a1 + 166128);
        sub_10047C430(*(_QWORD *)(a1 + 8), *(_DWORD *)v10, 1, v13);
        v12 = *((_DWORD *)v10 + 1);
      }
      if (*(_DWORD *)(a1 + 166128) >= v12)
      {
        v8 = 0;
        if (*(_BYTE *)(v7 + 24 * v9 + 16))
          v14 = 1;
        else
          v14 = 2;
        goto LABEL_38;
      }
      break;
  }
LABEL_3:
  v8 = 0;
LABEL_39:
  v30 = vabdd_f64(*(double *)(a2 + 56), *(double *)(a1 + 720));
  if (v30 > sub_10095B3A0(a1))
  {
    v31 = sub_10095B3D4(a1, a3);
    v8 = v8 & 2 | v31;
    if (v31)
      *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 56);
  }
  return v8;
}

_QWORD *sub_100ADBFD4(_QWORD *a1)
{
  void **v2;
  void *v3;
  void *v4;

  v2 = (void **)(a1 + 20760);
  *a1 = off_1021695F0;
  v3 = (void *)a1[20763];
  if (v3)
  {
    v2[4] = v3;
    operator delete(v3);
  }
  v4 = *v2;
  if (*v2)
  {
    v2[1] = v4;
    operator delete(v4);
  }
  *a1 = off_10215FCD8;
  return a1;
}

void sub_100ADC038(_QWORD *a1)
{
  void **v2;
  void *v3;
  void *v4;

  v2 = (void **)(a1 + 20760);
  *a1 = off_1021695F0;
  v3 = (void *)a1[20763];
  if (v3)
  {
    v2[4] = v3;
    operator delete(v3);
  }
  v4 = *v2;
  if (*v2)
  {
    v2[1] = v4;
    operator delete(v4);
  }
  *a1 = off_10215FCD8;
  operator delete();
}

void sub_100ADC0AC(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void sub_100ADC0D8()
{
  operator new();
}

void sub_100ADC128()
{
  operator delete();
}

void sub_100ADC1F0(id a1)
{
  qword_102306AF0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLAnalyticsLoggerSilo"));
}

void sub_100ADCAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a17;
  sub_1006AB5A0(&a23);
  _Unwind_Resume(a1);
}

void sub_100ADD720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;

  a68 = (uint64_t)&a36;
  sub_1006AB5A0((void ***)&a68);
  if (a47 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100ADD7FC(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __CFString *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  unsigned int v17;
  __CFString *v18;
  NSObject *v19;
  unsigned int v20;
  __CFString *v21;
  NSObject *v22;
  unsigned int v23;
  __CFString *v24;
  NSObject *v25;
  unsigned int v26;
  __CFString *v27;
  NSObject *v28;
  unsigned int v29;
  __CFString *v30;
  NSObject *v31;
  unsigned int v32;
  __CFString *v33;
  NSObject *v34;
  unsigned int v35;
  __CFString *v36;
  NSObject *v37;
  unsigned int v38;
  __CFString *v39;
  NSObject *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  const char *v44;
  uint8_t *v45;
  __CFString *v46;
  NSObject *v47;
  unsigned int v48;
  __CFString *v49;
  NSObject *v50;
  unsigned int v51;
  __CFString *v52;
  NSObject *v53;
  unsigned int v54;
  __CFString *v55;
  NSObject *v56;
  unsigned int v57;
  __CFString *v58;
  NSObject *v59;
  unsigned int v60;
  __CFString *v61;
  NSObject *v62;
  unsigned int v63;
  __CFString *v64;
  NSObject *v65;
  unsigned int v66;
  __CFString *v67;
  NSObject *v68;
  unsigned int v69;
  const char *v70;
  uint8_t *v71;
  uint64_t v72;
  unsigned int v73;
  const char *v74;
  uint8_t *v75;
  uint64_t v76;
  unsigned int v77;
  const char *v78;
  uint8_t *v79;
  uint64_t v80;
  unsigned int v81;
  const char *v82;
  uint8_t *v83;
  uint64_t v84;
  unsigned int v85;
  const char *v86;
  uint8_t *v87;
  uint64_t v88;
  unsigned int v89;
  const char *v90;
  uint8_t *v91;
  uint64_t v92;
  unsigned int v93;
  const char *v94;
  uint8_t *v95;
  uint64_t v96;
  unsigned int v97;
  const char *v98;
  uint8_t *v99;
  uint64_t v100;
  unsigned int v101;
  const char *v102;
  uint64_t v103;
  unsigned int v104;
  const char *v105;
  uint8_t *v106;
  uint64_t v107;
  unsigned int v108;
  const char *v109;
  uint8_t *v110;
  uint64_t v111;
  unsigned int v112;
  const char *v113;
  uint8_t *v114;
  uint64_t v115;
  unsigned int v116;
  const char *v117;
  uint8_t *v118;
  uint64_t v119;
  unsigned int v120;
  const char *v121;
  uint8_t *v122;
  uint64_t v123;
  unsigned int v124;
  const char *v125;
  uint8_t *v126;
  uint64_t v127;
  unsigned int v128;
  const char *v129;
  uint8_t *v130;
  uint64_t v131;
  unsigned int v132;
  const char *v133;
  _DWORD v134[8];
  _DWORD v135[8];
  _DWORD v136[8];
  _DWORD v137[8];
  _DWORD v138[8];
  _DWORD v139[8];
  _DWORD v140[8];
  _DWORD v141[8];
  _DWORD v142[8];
  _DWORD v143[8];
  _DWORD v144[8];
  _DWORD v145[8];
  _DWORD v146[8];
  _DWORD v147[8];
  _DWORD v148[8];
  _DWORD v149[8];
  int v150;
  unsigned int v151;
  uint8_t buf[4];
  unsigned int v153;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  v4 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ca,computeEmergencyDerivedMeasurements", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    LOWORD(v150) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#ca,computeEmergencyDerivedMeasurements", &v150, 2);
    v71 = (uint8_t *)v70;
    sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v70);
    if (v71 != buf)
      free(v71);
  }
  v5 = a2[23];
  if ((v5 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)&xmmword_102311240 + 1);
  if (byte_102311257 >= 0)
    v7 = byte_102311257;
  if (v6 != v7)
    goto LABEL_21;
  if (byte_102311257 >= 0)
    v8 = &xmmword_102311240;
  else
    v8 = (__int128 *)xmmword_102311240;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v8, *((_QWORD *)a2 + 1)))
      goto LABEL_21;
  }
  else if (a2[23])
  {
    while (*a2 == *(unsigned __int8 *)v8)
    {
      ++a2;
      v8 = (__int128 *)((char *)v8 + 1);
      if (!--v5)
        goto LABEL_29;
    }
LABEL_21:
    *(_DWORD *)buf = 79;
    v9 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v10 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = -[__CFString intValue](v9, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ca,callSim,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v12 = qword_1022A02A8;
      v13 = -[__CFString intValue](v9, "intValue");
      v150 = 67109120;
      v151 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#ca,callSim,%d", &v150);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v14);
      goto LABEL_188;
    }
    goto LABEL_34;
  }
LABEL_29:
  *(_DWORD *)buf = 141;
  v9 = (__CFString *)sub_100AEA478(a1, (int *)buf);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  v16 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v17 = -[__CFString intValue](v9, "intValue");
    *(_DWORD *)buf = 67109120;
    v153 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ca,EED,simInstance,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v131 = qword_1022A02A8;
    v132 = -[__CFString intValue](v9, "intValue");
    v150 = 67109120;
    v151 = v132;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v131, 0, "#ca,EED,simInstance,%d", &v150);
    v15 = (uint8_t *)v133;
    sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v133);
LABEL_188:
    if (v15 != buf)
      free(v15);
  }
LABEL_34:
  sub_100AEA504(a1, (int)-[__CFString intValue](v9, "intValue"));
  if (-[__CFString intValue](v9, "intValue"))
  {
    if (-[__CFString intValue](v9, "intValue") == 1)
    {
      *(_DWORD *)buf = 12;
      v18 = (__CFString *)sub_100AEA478(a1, (int *)buf);
      *(_DWORD *)buf = 54;
      v141[0] = -[__CFString intValue](v18, "intValue");
      v141[6] = 0;
      sub_1001F80F0(a1, (int *)buf, (uint64_t)v141);
      sub_1001F8644((uint64_t)v141);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v19 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v20 = -[__CFString intValue](v18, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#ca,callCarrierMcc,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        v103 = qword_1022A02A8;
        v104 = -[__CFString intValue](v18, "intValue");
        v150 = 67109120;
        v151 = v104;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v103, 0, "#ca,callCarrierMcc,%d", &v150);
        v106 = (uint8_t *)v105;
        sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v105);
        if (v106 != buf)
          free(v106);
      }
      *(_DWORD *)buf = 13;
      v21 = (__CFString *)sub_100AEA478(a1, (int *)buf);
      *(_DWORD *)buf = 55;
      v140[0] = -[__CFString intValue](v21, "intValue");
      v140[6] = 0;
      sub_1001F80F0(a1, (int *)buf, (uint64_t)v140);
      sub_1001F8644((uint64_t)v140);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v22 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v23 = -[__CFString intValue](v21, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#ca,callCarrierMnc,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        v107 = qword_1022A02A8;
        v108 = -[__CFString intValue](v21, "intValue");
        v150 = 67109120;
        v151 = v108;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v107, 0, "#ca,callCarrierMnc,%d", &v150);
        v110 = (uint8_t *)v109;
        sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v109);
        if (v110 != buf)
          free(v110);
      }
      *(_DWORD *)buf = 14;
      v24 = (__CFString *)sub_100AEA478(a1, (int *)buf);
      *(_DWORD *)buf = 56;
      v139[0] = -[__CFString intValue](v24, "intValue");
      v139[6] = 0;
      sub_1001F80F0(a1, (int *)buf, (uint64_t)v139);
      sub_1001F8644((uint64_t)v139);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v25 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v26 = -[__CFString intValue](v24, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ca,calloperatorMcc,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        v111 = qword_1022A02A8;
        v112 = -[__CFString intValue](v24, "intValue");
        v150 = 67109120;
        v151 = v112;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v111, 0, "#ca,calloperatorMcc,%d", &v150);
        v114 = (uint8_t *)v113;
        sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v113);
        if (v114 != buf)
          free(v114);
      }
      *(_DWORD *)buf = 15;
      v27 = (__CFString *)sub_100AEA478(a1, (int *)buf);
      *(_DWORD *)buf = 57;
      v138[0] = -[__CFString intValue](v27, "intValue");
      v138[6] = 0;
      sub_1001F80F0(a1, (int *)buf, (uint64_t)v138);
      sub_1001F8644((uint64_t)v138);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v28 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v29 = -[__CFString intValue](v27, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#ca,callOperatorMnc,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        v115 = qword_1022A02A8;
        v116 = -[__CFString intValue](v27, "intValue");
        v150 = 67109120;
        v151 = v116;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v115, 0, "#ca,callOperatorMnc,%d", &v150);
        v118 = (uint8_t *)v117;
        sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v117);
        if (v118 != buf)
          free(v118);
      }
      *(_DWORD *)buf = 21;
      v30 = (__CFString *)sub_100AEA478(a1, (int *)buf);
      *(_DWORD *)buf = 50;
      v137[0] = -[__CFString intValue](v30, "intValue");
      v137[6] = 0;
      sub_1001F80F0(a1, (int *)buf, (uint64_t)v137);
      sub_1001F8644((uint64_t)v137);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v31 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v32 = -[__CFString intValue](v30, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#ca,callrat,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        v119 = qword_1022A02A8;
        v120 = -[__CFString intValue](v30, "intValue");
        v150 = 67109120;
        v151 = v120;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v119, 0, "#ca,callrat,%d", &v150);
        v122 = (uint8_t *)v121;
        sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v121);
        if (v122 != buf)
          free(v122);
      }
      *(_DWORD *)buf = 23;
      v33 = (__CFString *)sub_100AEA478(a1, (int *)buf);
      *(_DWORD *)buf = 53;
      v136[0] = -[__CFString intValue](v33, "intValue");
      v136[6] = 0;
      sub_1001F80F0(a1, (int *)buf, (uint64_t)v136);
      sub_1001F8644((uint64_t)v136);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v34 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v35 = -[__CFString intValue](v33, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#ca,isSimPresentValue,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        v123 = qword_1022A02A8;
        v124 = -[__CFString intValue](v33, "intValue");
        v150 = 67109120;
        v151 = v124;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v123, 0, "#ca,isSimPresentValue,%d", &v150);
        v126 = (uint8_t *)v125;
        sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v125);
        if (v126 != buf)
          free(v126);
      }
      *(_DWORD *)buf = 35;
      v36 = (__CFString *)sub_100AEA478(a1, (int *)buf);
      *(_DWORD *)buf = 78;
      v135[0] = -[__CFString intValue](v36, "intValue");
      v135[6] = 0;
      sub_1001F80F0(a1, (int *)buf, (uint64_t)v135);
      sub_1001F8644((uint64_t)v135);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v37 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v38 = -[__CFString intValue](v36, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#ca,dataPreferredInfo,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        v127 = qword_1022A02A8;
        v128 = -[__CFString intValue](v36, "intValue");
        v150 = 67109120;
        v151 = v128;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v127, 0, "#ca,dataPreferredInfo,%d", &v150);
        v130 = (uint8_t *)v129;
        sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v129);
        if (v130 != buf)
          free(v130);
      }
      *(_DWORD *)buf = 36;
      v39 = (__CFString *)sub_100AEA478(a1, (int *)buf);
      *(_DWORD *)buf = 80;
      v134[0] = -[__CFString intValue](v39, "intValue");
      v134[6] = 0;
      sub_1001F80F0(a1, (int *)buf, (uint64_t)v134);
      sub_1001F8644((uint64_t)v134);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v40 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v41 = -[__CFString intValue](v39, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v41;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#ca,voiceDefaultInfo,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        v42 = qword_1022A02A8;
        v43 = -[__CFString intValue](v39, "intValue");
        v150 = 67109120;
        v151 = v43;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 0, "#ca,voiceDefaultInfo,%d", &v150);
        v45 = (uint8_t *)v44;
        sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v44);
LABEL_155:
        if (v45 != buf)
          free(v45);
      }
    }
  }
  else
  {
    *(_DWORD *)buf = 4;
    v46 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    *(_DWORD *)buf = 54;
    v149[0] = -[__CFString intValue](v46, "intValue");
    v149[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v149);
    sub_1001F8644((uint64_t)v149);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v47 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v48 = -[__CFString intValue](v46, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#ca,callCarrierMcc,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v72 = qword_1022A02A8;
      v73 = -[__CFString intValue](v46, "intValue");
      v150 = 67109120;
      v151 = v73;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v72, 0, "#ca,callCarrierMcc,%d", &v150);
      v75 = (uint8_t *)v74;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v74);
      if (v75 != buf)
        free(v75);
    }
    *(_DWORD *)buf = 5;
    v49 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    *(_DWORD *)buf = 55;
    v148[0] = -[__CFString intValue](v49, "intValue");
    v148[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v148);
    sub_1001F8644((uint64_t)v148);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v50 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v51 = -[__CFString intValue](v49, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v51;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#ca,callCarrierMnc,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v76 = qword_1022A02A8;
      v77 = -[__CFString intValue](v49, "intValue");
      v150 = 67109120;
      v151 = v77;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v76, 0, "#ca,callCarrierMnc,%d", &v150);
      v79 = (uint8_t *)v78;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v78);
      if (v79 != buf)
        free(v79);
    }
    *(_DWORD *)buf = 8;
    v52 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    *(_DWORD *)buf = 56;
    v147[0] = -[__CFString intValue](v52, "intValue");
    v147[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v147);
    sub_1001F8644((uint64_t)v147);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v53 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v54 = -[__CFString intValue](v52, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v54;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#ca,calloperatorMcc,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v80 = qword_1022A02A8;
      v81 = -[__CFString intValue](v52, "intValue");
      v150 = 67109120;
      v151 = v81;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v80, 0, "#ca,calloperatorMcc,%d", &v150);
      v83 = (uint8_t *)v82;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v82);
      if (v83 != buf)
        free(v83);
    }
    *(_DWORD *)buf = 9;
    v55 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    *(_DWORD *)buf = 57;
    v146[0] = -[__CFString intValue](v55, "intValue");
    v146[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v146);
    sub_1001F8644((uint64_t)v146);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v56 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v57 = -[__CFString intValue](v55, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v57;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#ca,callOperatorMnc,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v84 = qword_1022A02A8;
      v85 = -[__CFString intValue](v55, "intValue");
      v150 = 67109120;
      v151 = v85;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v84, 0, "#ca,callOperatorMnc,%d", &v150);
      v87 = (uint8_t *)v86;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v86);
      if (v87 != buf)
        free(v87);
    }
    *(_DWORD *)buf = 20;
    v58 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    *(_DWORD *)buf = 50;
    v145[0] = -[__CFString intValue](v58, "intValue");
    v145[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v145);
    sub_1001F8644((uint64_t)v145);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v59 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v60 = -[__CFString intValue](v58, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v60;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#ca,callrat,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v88 = qword_1022A02A8;
      v89 = -[__CFString intValue](v58, "intValue");
      v150 = 67109120;
      v151 = v89;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v88, 0, "#ca,callrat,%d", &v150);
      v91 = (uint8_t *)v90;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v90);
      if (v91 != buf)
        free(v91);
    }
    *(_DWORD *)buf = 22;
    v61 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    *(_DWORD *)buf = 53;
    v144[0] = -[__CFString intValue](v61, "intValue");
    v144[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v144);
    sub_1001F8644((uint64_t)v144);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v62 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v63 = -[__CFString intValue](v61, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v63;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#ca,isSimPresentValue,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v92 = qword_1022A02A8;
      v93 = -[__CFString intValue](v61, "intValue");
      v150 = 67109120;
      v151 = v93;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v92, 0, "#ca,isSimPresentValue,%d", &v150);
      v95 = (uint8_t *)v94;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v94);
      if (v95 != buf)
        free(v95);
    }
    *(_DWORD *)buf = 33;
    v64 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    *(_DWORD *)buf = 78;
    v143[0] = -[__CFString intValue](v64, "intValue");
    v143[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v143);
    sub_1001F8644((uint64_t)v143);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v65 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v66 = -[__CFString intValue](v64, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v66;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#ca,dataPreferredInfo,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v96 = qword_1022A02A8;
      v97 = -[__CFString intValue](v64, "intValue");
      v150 = 67109120;
      v151 = v97;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v96, 0, "#ca,dataPreferredInfo,%d", &v150);
      v99 = (uint8_t *)v98;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v98);
      if (v99 != buf)
        free(v99);
    }
    *(_DWORD *)buf = 34;
    v67 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    *(_DWORD *)buf = 80;
    v142[0] = -[__CFString intValue](v67, "intValue");
    v142[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v142);
    sub_1001F8644((uint64_t)v142);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v68 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v69 = -[__CFString intValue](v67, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v69;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#ca,voiceDefaultInfo,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v100 = qword_1022A02A8;
      v101 = -[__CFString intValue](v67, "intValue");
      v150 = 67109120;
      v151 = v101;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v100, 0, "#ca,voiceDefaultInfo,%d", &v150);
      v45 = (uint8_t *)v102;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v102);
      goto LABEL_155;
    }
  }
}

void sub_100ADF684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001F8644((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100ADF754(uint64_t a1)
{
  NSObject *v2;
  __CFString *v3;
  NSObject *v4;
  unsigned int v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  unsigned int v14;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ca,computePhoneNumberAvailabilityDerivedMeasurements", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#ca,computePhoneNumberAvailabilityDerivedMeasurements", v12, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computePhoneNumberAvailabilityDerivedMeasurements()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_DWORD *)buf = 146;
  v3 = (__CFString *)sub_100AEA478(a1, (int *)buf);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  v4 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = -[__CFString intValue](v3, "intValue");
    *(_DWORD *)buf = 67109120;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ca,PhoneNumberAvailability,simInstance,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v8 = qword_1022A02A8;
    v9 = -[__CFString intValue](v3, "intValue");
    v12[0] = 67109120;
    v12[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "#ca,PhoneNumberAvailability,simInstance,%d", v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::computePhoneNumberAvailabilityDerivedMeasurements()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_100AEA504(a1, (int)-[__CFString intValue](v3, "intValue"));
}

void sub_100ADFA64(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *v6;
  int *v7;
  int *i;
  uint64_t *v9;
  _DWORD *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  unsigned __int8 *v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  _BYTE buf[18];
  char v26;
  _DWORD v27[2];
  __int16 v28;
  _BYTE *v29;
  _BYTE __p[12];
  char v31;

  v3 = a2;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = sub_1001987C8((_QWORD *)(a1 + 88), a2);
  if (v6)
  {
    v7 = (int *)*((_QWORD *)v6 + 5);
    for (i = (int *)*((_QWORD *)v6 + 6); v7 != i; ++v7)
    {
      v9 = sub_1001F8DEC((_QWORD *)(a1 + 48), v7);
      if (v9)
      {
        v10 = (_DWORD *)a3[1];
        if ((unint64_t)v10 >= a3[2])
        {
          v11 = sub_100AECA00(a3, (_DWORD *)v9 + 4);
        }
        else
        {
          *v10 = *((_DWORD *)v9 + 4);
          sub_1001F869C((uint64_t)(v10 + 2), (uint64_t)(v9 + 3));
          v11 = (uint64_t)(v10 + 10);
          a3[1] = (uint64_t)(v10 + 10);
        }
        a3[1] = v11;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021698C0);
        v12 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          v13 = *v7;
          sub_100ADFED8(a1, *v7, (uint64_t)__p);
          v14 = __p;
          if (v31 < 0)
            v14 = *(_BYTE **)__p;
          *(_DWORD *)buf = 67240450;
          *(_DWORD *)&buf[4] = v13;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ca,serializeEvent,no value for meas,id,%{public}d,name,%s", buf, 0x12u);
          if (v31 < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021698C0);
          v15 = qword_1022A0078;
          v16 = *v7;
          sub_100ADFED8(a1, *v7, (uint64_t)buf);
          v17 = buf;
          if (v26 < 0)
            v17 = *(_BYTE **)buf;
          v27[0] = 67240450;
          v27[1] = v16;
          v28 = 2080;
          v29 = v17;
          LODWORD(v24) = 18;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, 16, "#ca,serializeEvent,no value for meas,id,%{public}d,name,%s", v27, v24);
          v19 = v18;
          if (v26 < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 0, "MeasurementSetList AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::serializeEvent(std::string) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v19);
          if (v19 != __p)
            free(v19);
        }
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021698C0);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v21 = v3;
      if ((char)v3[23] < 0)
        v21 = *(unsigned __int8 **)v3;
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#ca,serializeEvent,invalid event,[%{public}s]", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021698C0);
      if ((char)v3[23] < 0)
        v3 = *(unsigned __int8 **)v3;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v3;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ca,serializeEvent,invalid event,[%{public}s]", buf, 12);
      v23 = (char *)v22;
      sub_100512490("Generic", 1, 0, 0, "MeasurementSetList AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::serializeEvent(std::string) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v22);
      if (v23 != __p)
        free(v23);
    }
  }
}

void sub_100ADFEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_1006AB5A0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100ADFED8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *result;
  __int128 v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[6];
  int v10;
  uint8_t buf[1640];

  v10 = a2;
  result = sub_1001F8DEC((_QWORD *)(a1 + 8), &v10);
  if (result)
  {
    if (*((char *)result + 47) < 0)
    {
      return (uint64_t *)sub_100115CE4((_BYTE *)a3, (void *)result[3], result[4]);
    }
    else
    {
      v5 = *(_OWORD *)(result + 3);
      *(_QWORD *)(a3 + 16) = result[5];
      *(_OWORD *)a3 = v5;
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v6 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ca,ERROR,toString,invalid measurement", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,ERROR,toString,invalid measurement", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "std::string AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::toString(Measurement) const [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return sub_1015A2E04((_QWORD *)a3, "");
  }
  return result;
}

uint64_t sub_100AE00BC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_100AE00C4(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v4;
  int *v5;
  int *i;
  uint64_t *v7;
  uint64_t *v8;
  NSObject *v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  NSObject *v17;
  unsigned __int8 *v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  _BYTE buf[18];
  char v23;
  _DWORD v24[2];
  __int16 v25;
  _BYTE *v26;
  _BYTE __p[12];
  char v28;

  v2 = a2;
  v4 = sub_1001987C8(a1 + 11, a2);
  if (v4)
  {
    v5 = (int *)*((_QWORD *)v4 + 5);
    for (i = (int *)*((_QWORD *)v4 + 6); v5 != i; ++v5)
    {
      v7 = sub_1001F8DEC(a1 + 6, v5);
      if (v7)
      {
        v8 = sub_1001F8DEC(a1 + 1, v5);
        if (v8)
        {
          if (!*((_BYTE *)v8 + 56))
          {
            sub_1000592D8(a1 + 6, v7, (uint64_t)__p);
            sub_100AEC3F8((uint64_t)__p, 0);
          }
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021698C0);
        v9 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          v10 = *v5;
          sub_100ADFED8((uint64_t)a1, *v5, (uint64_t)__p);
          v11 = __p;
          if (v28 < 0)
            v11 = *(_BYTE **)__p;
          *(_DWORD *)buf = 67240450;
          *(_DWORD *)&buf[4] = v10;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ca,clearEventMeasurements,no value for meas,%{public}d,name,%s", buf, 0x12u);
          if (v28 < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021698C0);
          v12 = qword_1022A0078;
          v13 = *v5;
          sub_100ADFED8((uint64_t)a1, *v5, (uint64_t)buf);
          v14 = buf;
          if (v23 < 0)
            v14 = *(_BYTE **)buf;
          v24[0] = 67240450;
          v24[1] = v13;
          v25 = 2080;
          v26 = v14;
          LODWORD(v21) = 18;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 16, "#ca,clearEventMeasurements,no value for meas,%{public}d,name,%s", v24, v21);
          v16 = v15;
          if (v23 < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 0, "void AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::clearEventMeasurements(std::string) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v16);
          if (v16 != __p)
            free(v16);
        }
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021698C0);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v18 = v2;
      if ((char)v2[23] < 0)
        v18 = *(unsigned __int8 **)v2;
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#ca,clearEventMeasurements,invalid event,[%{public}s]", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021698C0);
      if ((char)v2[23] < 0)
        v2 = *(unsigned __int8 **)v2;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ca,clearEventMeasurements,invalid event,[%{public}s]", buf, 12);
      v20 = (char *)v19;
      sub_100512490("Generic", 1, 0, 0, "void AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::clearEventMeasurements(std::string) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v19);
      if (v20 != __p)
        free(v20);
    }
  }
}

uint64_t sub_100AE0528(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_QWORD *)a1 = off_102169678;
  *(_QWORD *)(a1 + 208) = a2;
  sub_1002433B8(a1 + 224);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  objc_msgSend(*(id *)(a1 + 208), "silo");
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  v3 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ca,CLAnalyticsLogger initialized", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#ca,CLAnalyticsLogger initialized", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLAnalyticsLogger::CLAnalyticsLogger(id<CLIntersiloUniverse>)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100AE0814(a1);
  sub_100AE9410(a1);
  sub_100AE9A08(a1);
  sub_100AE9A9C(a1);
  sub_100AE9CC4(a1);
  sub_100AE9D58(a1);
  sub_100AE9FD8(a1);
  return a1;
}

void sub_100AE0764(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v1[39];
  v1[39] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v1[38];
  v1[38] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = v1[37];
  v1[37] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v1[36];
  v1[36] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *v2;
  *v2 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v1[33];
  v1[33] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_100AEA1D0(v1);
  _Unwind_Resume(a1);
}

void sub_100AE0814(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  _QWORD *v357;
  uint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  _QWORD *v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t v370;
  _QWORD *v371;
  uint64_t v372;
  _QWORD *v373;
  uint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  _QWORD *v381;
  uint64_t v382;
  _QWORD *v383;
  uint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  _QWORD *v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  _QWORD *v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  _QWORD *v405;
  uint64_t v406;
  _QWORD *v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  _QWORD *v411;
  uint64_t v412;
  _QWORD *v413;
  uint64_t v414;
  _QWORD *v415;
  uint64_t v416;
  _QWORD *v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  _QWORD *v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  _QWORD *v433;
  uint64_t v434;
  _QWORD *v435;
  uint64_t v436;
  _QWORD *v437;
  uint64_t v438;
  _QWORD *v439;
  uint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  const char *v443;
  char *v444;
  _WORD v445[8];
  std::string v446;
  void *v447;
  char v448;
  _QWORD v449[3];
  _QWORD *v450;
  std::string v451;
  void *v452;
  char v453;
  _QWORD v454[3];
  _QWORD *v455;
  std::string v456;
  void *v457;
  char v458;
  _QWORD v459[3];
  _QWORD *v460;
  std::string v461;
  void *v462;
  char v463;
  _QWORD v464[3];
  _QWORD *v465;
  std::string v466;
  void *v467;
  char v468;
  _QWORD v469[3];
  _QWORD *v470;
  std::string v471;
  void *v472;
  char v473;
  _QWORD v474[3];
  _QWORD *v475;
  std::string v476;
  void *v477;
  char v478;
  _QWORD v479[3];
  _QWORD *v480;
  std::string v481;
  void *v482;
  char v483;
  _QWORD v484[3];
  _QWORD *v485;
  std::string v486;
  void *v487;
  char v488;
  _QWORD v489[3];
  _QWORD *v490;
  std::string v491;
  void *v492;
  char v493;
  _QWORD v494[3];
  _QWORD *v495;
  std::string v496;
  void *v497;
  char v498;
  _QWORD v499[3];
  _QWORD *v500;
  std::string v501;
  void *v502;
  char v503;
  _QWORD v504[3];
  _QWORD *v505;
  std::string v506;
  void *v507;
  char v508;
  _QWORD v509[3];
  _QWORD *v510;
  std::string v511;
  void *v512;
  char v513;
  _QWORD v514[3];
  _QWORD *v515;
  std::string v516;
  void *v517;
  char v518;
  _QWORD v519[3];
  _QWORD *v520;
  std::string v521;
  void *v522;
  char v523;
  _QWORD v524[3];
  _QWORD *v525;
  std::string v526;
  void *v527;
  char v528;
  _QWORD v529[3];
  _QWORD *v530;
  std::string v531;
  _UNKNOWN **v532;
  char v533;
  _QWORD v534[3];
  _QWORD *v535;
  std::string v536;
  void *v537;
  char v538;
  _QWORD v539[3];
  _QWORD *v540;
  std::string v541;
  void *v542;
  char v543;
  _QWORD v544[3];
  _QWORD *v545;
  std::string v546;
  void *v547;
  char v548;
  _QWORD v549[3];
  _QWORD *v550;
  std::string v551;
  void *v552;
  char v553;
  _QWORD v554[3];
  _QWORD *v555;
  std::string v556;
  void *v557;
  char v558;
  _QWORD v559[3];
  _QWORD *v560;
  std::string v561;
  void *v562;
  char v563;
  _QWORD v564[3];
  _QWORD *v565;
  std::string v566;
  void *v567;
  char v568;
  _QWORD v569[3];
  _QWORD *v570;
  std::string v571;
  void *v572;
  char v573;
  _QWORD v574[3];
  _QWORD *v575;
  std::string v576;
  void *v577;
  char v578;
  _QWORD v579[3];
  _QWORD *v580;
  std::string v581;
  void *v582;
  char v583;
  _QWORD v584[3];
  _QWORD *v585;
  std::string v586;
  void *v587;
  char v588;
  _QWORD v589[3];
  _QWORD *v590;
  std::string v591;
  void *v592;
  char v593;
  _QWORD v594[3];
  _QWORD *v595;
  std::string v596;
  _UNKNOWN **v597;
  char v598;
  _QWORD v599[3];
  _QWORD *v600;
  std::string v601;
  void *v602;
  char v603;
  _QWORD v604[3];
  _QWORD *v605;
  std::string v606;
  void *v607;
  char v608;
  _QWORD v609[3];
  _QWORD *v610;
  std::string v611;
  void *v612;
  char v613;
  _QWORD v614[3];
  _QWORD *v615;
  std::string v616;
  void *v617;
  char v618;
  _QWORD v619[3];
  _QWORD *v620;
  std::string v621;
  void *v622;
  char v623;
  _QWORD v624[3];
  _QWORD *v625;
  std::string v626;
  void *v627;
  char v628;
  _QWORD v629[3];
  _QWORD *v630;
  std::string v631;
  void *v632;
  char v633;
  _QWORD v634[3];
  _QWORD *v635;
  std::string v636;
  void *v637;
  char v638;
  _QWORD v639[3];
  _QWORD *v640;
  std::string v641;
  void *v642;
  char v643;
  _QWORD v644[3];
  _QWORD *v645;
  std::string v646;
  void *v647;
  char v648;
  _QWORD v649[3];
  _QWORD *v650;
  std::string v651;
  void *v652;
  char v653;
  _QWORD v654[3];
  _QWORD *v655;
  std::string v656;
  void *v657;
  char v658;
  _QWORD v659[3];
  _QWORD *v660;
  std::string v661;
  void *v662;
  char v663;
  _QWORD v664[3];
  _QWORD *v665;
  std::string v666;
  void *v667;
  char v668;
  _QWORD v669[3];
  _QWORD *v670;
  std::string v671;
  void *v672;
  char v673;
  _QWORD v674[3];
  _QWORD *v675;
  std::string v676;
  void *v677;
  char v678;
  _QWORD v679[3];
  _QWORD *v680;
  std::string v681;
  void *v682;
  char v683;
  _QWORD v684[3];
  _QWORD *v685;
  std::string v686;
  void *v687;
  char v688;
  _QWORD v689[3];
  _QWORD *v690;
  std::string v691;
  void *v692;
  char v693;
  _QWORD v694[3];
  _QWORD *v695;
  std::string v696;
  void *v697;
  char v698;
  _QWORD v699[3];
  _QWORD *v700;
  std::string v701;
  void *v702;
  char v703;
  _QWORD v704[3];
  _QWORD *v705;
  std::string v706;
  void *v707;
  char v708;
  _QWORD v709[3];
  _QWORD *v710;
  std::string v711;
  void *v712;
  char v713;
  _QWORD v714[3];
  _QWORD *v715;
  std::string v716;
  void *v717;
  char v718;
  _QWORD v719[3];
  _QWORD *v720;
  std::string v721;
  void *v722;
  char v723;
  _QWORD v724[3];
  _QWORD *v725;
  std::string v726;
  void *v727;
  char v728;
  _QWORD v729[3];
  _QWORD *v730;
  std::string v731;
  void *v732;
  char v733;
  _QWORD v734[3];
  _QWORD *v735;
  std::string v736;
  void *v737;
  char v738;
  _QWORD v739[3];
  _QWORD *v740;
  std::string v741;
  void *v742;
  char v743;
  _QWORD v744[3];
  _QWORD *v745;
  std::string v746;
  void *v747;
  char v748;
  _QWORD v749[3];
  _QWORD *v750;
  std::string v751;
  void *v752;
  char v753;
  _QWORD v754[3];
  _QWORD *v755;
  std::string v756;
  _UNKNOWN **v757;
  char v758;
  _QWORD v759[3];
  _QWORD *v760;
  std::string v761;
  _UNKNOWN **v762;
  char v763;
  _QWORD v764[3];
  _QWORD *v765;
  std::string v766;
  _UNKNOWN **v767;
  char v768;
  _QWORD v769[3];
  _QWORD *v770;
  std::string v771;
  void *v772;
  char v773;
  _QWORD v774[3];
  _QWORD *v775;
  std::string v776;
  void *v777;
  char v778;
  _QWORD v779[3];
  _QWORD *v780;
  std::string v781;
  void *v782;
  char v783;
  _QWORD v784[3];
  _QWORD *v785;
  std::string v786;
  void *v787;
  char v788;
  _QWORD v789[3];
  _QWORD *v790;
  std::string v791;
  void *v792;
  char v793;
  _QWORD v794[3];
  _QWORD *v795;
  std::string v796;
  void *v797;
  char v798;
  _QWORD v799[3];
  _QWORD *v800;
  std::string v801;
  void *v802;
  char v803;
  _QWORD v804[3];
  _QWORD *v805;
  std::string v806;
  void *v807;
  char v808;
  _QWORD v809[3];
  _QWORD *v810;
  std::string v811;
  void *v812;
  char v813;
  _QWORD v814[3];
  _QWORD *v815;
  std::string v816;
  void *v817;
  char v818;
  _QWORD v819[3];
  _QWORD *v820;
  std::string v821;
  void *v822;
  char v823;
  _QWORD v824[3];
  _QWORD *v825;
  std::string v826;
  void *v827;
  char v828;
  _QWORD v829[3];
  _QWORD *v830;
  std::string v831;
  void *v832;
  char v833;
  _QWORD v834[3];
  _QWORD *v835;
  std::string v836;
  void *v837;
  char v838;
  _QWORD v839[3];
  _QWORD *v840;
  std::string v841;
  void *v842;
  char v843;
  _QWORD v844[3];
  _QWORD *v845;
  std::string v846;
  void *v847;
  char v848;
  _QWORD v849[3];
  _QWORD *v850;
  std::string v851;
  void *v852;
  char v853;
  _QWORD v854[3];
  _QWORD *v855;
  std::string v856;
  void *v857;
  char v858;
  _QWORD v859[3];
  _QWORD *v860;
  std::string v861;
  void *v862;
  char v863;
  _QWORD v864[3];
  _QWORD *v865;
  std::string v866;
  void *v867;
  char v868;
  _QWORD v869[3];
  _QWORD *v870;
  std::string v871;
  void *v872;
  char v873;
  _QWORD v874[3];
  _QWORD *v875;
  std::string v876;
  void *v877;
  char v878;
  _QWORD v879[3];
  _QWORD *v880;
  std::string v881;
  void *v882;
  char v883;
  _QWORD v884[3];
  _QWORD *v885;
  std::string v886;
  void *v887;
  char v888;
  _QWORD v889[3];
  _QWORD *v890;
  std::string v891;
  void *v892;
  char v893;
  _QWORD v894[3];
  _QWORD *v895;
  std::string v896;
  void *v897;
  char v898;
  _QWORD v899[3];
  _QWORD *v900;
  std::string v901;
  void *v902;
  char v903;
  _QWORD v904[3];
  _QWORD *v905;
  std::string v906;
  void *v907;
  char v908;
  _QWORD v909[3];
  _QWORD *v910;
  std::string v911;
  void *v912;
  char v913;
  _QWORD v914[3];
  _QWORD *v915;
  std::string v916;
  void *v917;
  char v918;
  _QWORD v919[3];
  _QWORD *v920;
  std::string v921;
  void *v922;
  char v923;
  _QWORD v924[3];
  _QWORD *v925;
  std::string v926;
  void *v927;
  char v928;
  _QWORD v929[3];
  _QWORD *v930;
  std::string v931;
  _UNKNOWN **v932;
  char v933;
  _QWORD v934[3];
  _QWORD *v935;
  std::string v936;
  _UNKNOWN **v937;
  char v938;
  _QWORD v939[3];
  _QWORD *v940;
  std::string v941;
  void *v942;
  char v943;
  _QWORD v944[3];
  _QWORD *v945;
  std::string v946;
  void *v947;
  char v948;
  _QWORD v949[3];
  _QWORD *v950;
  std::string v951;
  void *v952;
  char v953;
  _QWORD v954[3];
  _QWORD *v955;
  std::string v956;
  void *v957;
  char v958;
  _QWORD v959[3];
  _QWORD *v960;
  std::string v961;
  void *v962;
  char v963;
  _QWORD v964[3];
  _QWORD *v965;
  std::string v966;
  void *v967;
  char v968;
  _QWORD v969[3];
  _QWORD *v970;
  std::string v971;
  void *v972;
  char v973;
  _QWORD v974[3];
  _QWORD *v975;
  std::string v976;
  void *v977;
  char v978;
  _QWORD v979[3];
  _QWORD *v980;
  std::string v981;
  void *v982;
  char v983;
  _QWORD v984[3];
  _QWORD *v985;
  std::string v986;
  void *v987;
  char v988;
  _QWORD v989[3];
  _QWORD *v990;
  std::string v991;
  void *v992;
  char v993;
  _QWORD v994[3];
  _QWORD *v995;
  std::string v996;
  void *v997;
  char v998;
  _QWORD v999[3];
  _QWORD *v1000;
  std::string v1001;
  void *v1002;
  char v1003;
  _QWORD v1004[3];
  _QWORD *v1005;
  std::string v1006;
  void *v1007;
  char v1008;
  _QWORD v1009[3];
  _QWORD *v1010;
  std::string v1011;
  void *v1012;
  char v1013;
  _QWORD v1014[3];
  _QWORD *v1015;
  std::string v1016;
  void *v1017;
  char v1018;
  _QWORD v1019[3];
  _QWORD *v1020;
  std::string v1021;
  void *v1022;
  char v1023;
  _QWORD v1024[3];
  _QWORD *v1025;
  std::string v1026;
  void *v1027;
  char v1028;
  _QWORD v1029[3];
  _QWORD *v1030;
  std::string v1031;
  void *v1032;
  char v1033;
  _QWORD v1034[3];
  _QWORD *v1035;
  std::string v1036;
  void *v1037;
  char v1038;
  _QWORD v1039[3];
  _QWORD *v1040;
  std::string v1041;
  void *v1042;
  char v1043;
  _QWORD v1044[3];
  _QWORD *v1045;
  std::string v1046;
  void *v1047;
  char v1048;
  _QWORD v1049[3];
  _QWORD *v1050;
  std::string v1051;
  void *v1052;
  char v1053;
  _QWORD v1054[3];
  _QWORD *v1055;
  std::string v1056;
  void *v1057;
  char v1058;
  _QWORD v1059[3];
  _QWORD *v1060;
  std::string v1061;
  void *v1062;
  char v1063;
  _QWORD v1064[3];
  _QWORD *v1065;
  std::string v1066;
  void *v1067;
  char v1068;
  _QWORD v1069[3];
  _QWORD *v1070;
  std::string v1071;
  void *v1072;
  char v1073;
  _QWORD v1074[3];
  _QWORD *v1075;
  std::string v1076;
  void *v1077;
  char v1078;
  _QWORD v1079[3];
  _QWORD *v1080;
  std::string v1081;
  void *v1082;
  char v1083;
  _QWORD v1084[3];
  _QWORD *v1085;
  std::string v1086;
  void *v1087;
  char v1088;
  _QWORD v1089[3];
  _QWORD *v1090;
  std::string v1091;
  void *v1092;
  char v1093;
  _QWORD v1094[3];
  _QWORD *v1095;
  std::string v1096;
  void *v1097;
  char v1098;
  _QWORD v1099[3];
  _QWORD *v1100;
  std::string v1101;
  void *v1102;
  char v1103;
  _QWORD v1104[3];
  _QWORD *v1105;
  std::string v1106;
  void *v1107;
  char v1108;
  _QWORD v1109[3];
  _QWORD *v1110;
  std::string v1111;
  void *v1112;
  char v1113;
  _QWORD v1114[3];
  _QWORD *v1115;
  std::string v1116;
  void *v1117;
  char v1118;
  _QWORD v1119[3];
  _QWORD *v1120;
  std::string v1121;
  void *v1122;
  char v1123;
  _QWORD v1124[3];
  _QWORD *v1125;
  std::string v1126;
  void *v1127;
  char v1128;
  _QWORD v1129[3];
  _QWORD *v1130;
  std::string v1131;
  void *v1132;
  char v1133;
  _QWORD v1134[3];
  _QWORD *v1135;
  std::string v1136;
  void *v1137;
  char v1138;
  _QWORD v1139[3];
  _QWORD *v1140;
  std::string v1141;
  void *v1142;
  char v1143;
  _QWORD v1144[3];
  _QWORD *v1145;
  std::string v1146;
  void *v1147;
  char v1148;
  _QWORD v1149[3];
  _QWORD *v1150;
  std::string v1151;
  void *v1152;
  char v1153;
  _QWORD v1154[3];
  _QWORD *v1155;
  std::string v1156;
  void *v1157;
  char v1158;
  _QWORD v1159[3];
  _QWORD *v1160;
  std::string v1161;
  void *v1162;
  char v1163;
  _QWORD v1164[3];
  _QWORD *v1165;
  std::string v1166;
  void *v1167;
  char v1168;
  _QWORD v1169[3];
  _QWORD *v1170;
  std::string v1171;
  void *v1172;
  char v1173;
  _QWORD v1174[3];
  _QWORD *v1175;
  std::string v1176;
  void *v1177;
  char v1178;
  _QWORD v1179[3];
  _QWORD *v1180;
  std::string v1181;
  void *v1182;
  char v1183;
  _QWORD v1184[3];
  _QWORD *v1185;
  std::string v1186;
  void *v1187;
  char v1188;
  _QWORD v1189[3];
  _QWORD *v1190;
  std::string v1191;
  void *v1192;
  char v1193;
  _QWORD v1194[3];
  _QWORD *v1195;
  std::string v1196;
  void *v1197;
  char v1198;
  _QWORD v1199[3];
  _QWORD *v1200;
  std::string v1201;
  void *v1202;
  char v1203;
  _QWORD v1204[3];
  _QWORD *v1205;
  std::string v1206;
  void *v1207;
  char v1208;
  _QWORD v1209[3];
  _QWORD *v1210;
  std::string v1211;
  void *v1212;
  char v1213;
  _QWORD v1214[3];
  _QWORD *v1215;
  std::string v1216;
  void *v1217;
  char v1218;
  _QWORD v1219[3];
  _QWORD *v1220;
  std::string v1221;
  void *v1222;
  char v1223;
  _QWORD v1224[3];
  _QWORD *v1225;
  std::string v1226;
  void *v1227;
  char v1228;
  _QWORD v1229[3];
  _QWORD *v1230;
  std::string v1231;
  void *v1232;
  char v1233;
  _QWORD v1234[3];
  _QWORD *v1235;
  std::string v1236;
  void *v1237;
  char v1238;
  _QWORD v1239[3];
  _QWORD *v1240;
  std::string v1241;
  void *v1242;
  char v1243;
  _QWORD v1244[3];
  _QWORD *v1245;
  std::string v1246;
  void *v1247;
  char v1248;
  _QWORD v1249[3];
  _QWORD *v1250;
  std::string v1251;
  void *v1252;
  char v1253;
  _QWORD v1254[3];
  _QWORD *v1255;
  std::string v1256;
  void *v1257;
  char v1258;
  _QWORD v1259[3];
  _QWORD *v1260;
  std::string v1261;
  void *v1262;
  char v1263;
  _QWORD v1264[3];
  _QWORD *v1265;
  std::string v1266;
  void *v1267;
  char v1268;
  _QWORD v1269[3];
  _QWORD *v1270;
  std::string v1271;
  void *v1272;
  char v1273;
  _QWORD v1274[3];
  _QWORD *v1275;
  std::string v1276;
  _UNKNOWN **v1277;
  char v1278;
  _QWORD v1279[3];
  _QWORD *v1280;
  std::string v1281;
  void *v1282;
  char v1283;
  _QWORD v1284[3];
  _QWORD *v1285;
  std::string v1286;
  void *v1287;
  char v1288;
  _QWORD v1289[3];
  _QWORD *v1290;
  std::string v1291;
  void *v1292;
  char v1293;
  _QWORD v1294[3];
  _QWORD *v1295;
  std::string v1296;
  void *v1297;
  char v1298;
  _QWORD v1299[3];
  _QWORD *v1300;
  std::string v1301;
  void *v1302;
  char v1303;
  _QWORD v1304[3];
  _QWORD *v1305;
  std::string v1306;
  void *v1307;
  char v1308;
  _QWORD v1309[3];
  _QWORD *v1310;
  std::string v1311;
  void *v1312;
  char v1313;
  _QWORD v1314[3];
  _QWORD *v1315;
  std::string v1316;
  void *v1317;
  char v1318;
  _QWORD v1319[3];
  _QWORD *v1320;
  std::string v1321;
  void *v1322;
  char v1323;
  _QWORD v1324[3];
  _QWORD *v1325;
  std::string v1326;
  void *v1327;
  char v1328;
  _QWORD v1329[3];
  _QWORD *v1330;
  std::string v1331;
  void *v1332;
  char v1333;
  _QWORD v1334[3];
  _QWORD *v1335;
  std::string v1336;
  void *v1337;
  char v1338;
  _QWORD v1339[3];
  _QWORD *v1340;
  std::string v1341;
  void *v1342;
  char v1343;
  _QWORD v1344[3];
  _QWORD *v1345;
  std::string v1346;
  void *v1347;
  char v1348;
  _QWORD v1349[3];
  _QWORD *v1350;
  std::string v1351;
  void *v1352;
  char v1353;
  _QWORD v1354[3];
  _QWORD *v1355;
  std::string v1356;
  void *v1357;
  char v1358;
  _QWORD v1359[3];
  _QWORD *v1360;
  std::string v1361;
  void *v1362;
  char v1363;
  _QWORD v1364[3];
  _QWORD *v1365;
  std::string v1366;
  void *v1367;
  char v1368;
  _QWORD v1369[3];
  _QWORD *v1370;
  std::string v1371;
  void *v1372;
  char v1373;
  _QWORD v1374[3];
  _QWORD *v1375;
  std::string v1376;
  void *v1377;
  char v1378;
  _QWORD v1379[3];
  _QWORD *v1380;
  std::string v1381;
  void *v1382;
  char v1383;
  _QWORD v1384[3];
  _QWORD *v1385;
  std::string v1386;
  void *v1387;
  char v1388;
  _QWORD v1389[3];
  _QWORD *v1390;
  std::string v1391;
  void *v1392;
  char v1393;
  _QWORD v1394[3];
  _QWORD *v1395;
  std::string v1396;
  void *v1397;
  char v1398;
  _QWORD v1399[3];
  _QWORD *v1400;
  std::string v1401;
  _UNKNOWN **v1402;
  char v1403;
  _QWORD v1404[3];
  _QWORD *v1405;
  std::string v1406;
  void *v1407;
  char v1408;
  _QWORD v1409[3];
  _QWORD *v1410;
  std::string v1411;
  void *v1412;
  char v1413;
  _QWORD v1414[3];
  _QWORD *v1415;
  std::string v1416;
  void *v1417;
  char v1418;
  _QWORD v1419[3];
  _QWORD *v1420;
  std::string v1421;
  void *v1422;
  char v1423;
  _QWORD v1424[3];
  _QWORD *v1425;
  std::string v1426;
  void *v1427;
  char v1428;
  _QWORD v1429[3];
  _QWORD *v1430;
  std::string v1431;
  void *v1432;
  char v1433;
  _QWORD v1434[3];
  _QWORD *v1435;
  std::string v1436;
  _UNKNOWN **v1437;
  char v1438;
  _QWORD v1439[3];
  _QWORD *v1440;
  std::string v1441;
  _UNKNOWN **v1442;
  char v1443;
  _QWORD v1444[3];
  _QWORD *v1445;
  std::string v1446;
  _UNKNOWN **v1447;
  char v1448;
  _QWORD v1449[3];
  _QWORD *v1450;
  std::string v1451;
  _UNKNOWN **v1452;
  char v1453;
  _QWORD v1454[3];
  _QWORD *v1455;
  std::string v1456;
  _UNKNOWN **v1457;
  char v1458;
  _QWORD v1459[3];
  _QWORD *v1460;
  std::string v1461;
  _UNKNOWN **v1462;
  char v1463;
  _QWORD v1464[3];
  _QWORD *v1465;
  std::string v1466;
  _UNKNOWN **v1467;
  char v1468;
  _QWORD v1469[3];
  _QWORD *v1470;
  std::string v1471;
  _UNKNOWN **v1472;
  char v1473;
  _QWORD v1474[3];
  _QWORD *v1475;
  std::string v1476;
  _UNKNOWN **v1477;
  char v1478;
  _QWORD v1479[3];
  _QWORD *v1480;
  std::string v1481;
  _UNKNOWN **v1482;
  char v1483;
  _QWORD v1484[3];
  _QWORD *v1485;
  std::string v1486;
  _UNKNOWN **v1487;
  char v1488;
  _QWORD v1489[3];
  _QWORD *v1490;
  std::string v1491;
  _UNKNOWN **v1492;
  char v1493;
  _QWORD v1494[3];
  _QWORD *v1495;
  std::string v1496;
  _UNKNOWN **v1497;
  char v1498;
  _QWORD v1499[3];
  _QWORD *v1500;
  std::string v1501;
  _UNKNOWN **v1502;
  char v1503;
  _QWORD v1504[3];
  _QWORD *v1505;
  std::string v1506;
  void *v1507;
  char v1508;
  _QWORD v1509[3];
  _QWORD *v1510;
  std::string v1511;
  void *v1512;
  char v1513;
  _QWORD v1514[3];
  _QWORD *v1515;
  std::string v1516;
  void *v1517;
  char v1518;
  _QWORD v1519[3];
  _QWORD *v1520;
  std::string v1521;
  void *v1522;
  char v1523;
  _QWORD v1524[3];
  _QWORD *v1525;
  std::string v1526;
  void *v1527;
  char v1528;
  _QWORD v1529[3];
  _QWORD *v1530;
  std::string v1531;
  void *v1532;
  char v1533;
  _QWORD v1534[3];
  _QWORD *v1535;
  std::string v1536;
  void *v1537;
  char v1538;
  _QWORD v1539[3];
  _QWORD *v1540;
  std::string __p;
  void *v1542;
  char v1543;
  _QWORD v1544[3];
  _QWORD *v1545;
  _WORD v1546[820];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v1546[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ca,defineMeasurements", (uint8_t *)v1546, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v1546, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v445[0] = 0;
    _os_log_send_and_compose_impl(2, 0, v1546, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#ca,defineMeasurements", v445, 2);
    v444 = (char *)v443;
    sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::defineMeasurements()", "%s\n", v443);
    if (v444 != (char *)v1546)
      free(v444);
  }
  sub_1015A2E04(&__p, "carrier1Mcc");
  v1543 = 1;
  v1544[0] = off_1021698F0;
  v1544[1] = v1546;
  v1545 = v1544;
  sub_100AEA22C(a1, 4, &__p);
  v3 = v1545;
  if (v1545 == v1544)
  {
    v4 = 4;
    v3 = v1544;
  }
  else
  {
    if (!v1545)
      goto LABEL_11;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_11:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1536, "carrier1Mnc");
  v1538 = 1;
  v1539[0] = off_102169980;
  v1539[1] = v1546;
  v1540 = v1539;
  sub_100AEA22C(a1, 5, &v1536);
  v5 = v1540;
  if (v1540 == v1539)
  {
    v6 = 4;
    v5 = v1539;
  }
  else
  {
    if (!v1540)
      goto LABEL_18;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_18:
  if (SHIBYTE(v1536.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1536.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1531, "carrier2Mcc");
  v1533 = 1;
  v1534[0] = off_102169A00;
  v1534[1] = v1546;
  v1535 = v1534;
  sub_100AEA22C(a1, 12, &v1531);
  v7 = v1535;
  if (v1535 == v1534)
  {
    v8 = 4;
    v7 = v1534;
  }
  else
  {
    if (!v1535)
      goto LABEL_25;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_25:
  if (SHIBYTE(v1531.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1531.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1526, "carrier2Mnc");
  v1528 = 1;
  v1529[0] = off_102169A80;
  v1529[1] = v1546;
  v1530 = v1529;
  sub_100AEA22C(a1, 13, &v1526);
  v9 = v1530;
  if (v1530 == v1529)
  {
    v10 = 4;
    v9 = v1529;
  }
  else
  {
    if (!v1530)
      goto LABEL_32;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_32:
  if (SHIBYTE(v1526.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1526.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1521, "operator1Mcc");
  v1523 = 1;
  v1524[0] = off_102169B00;
  v1524[1] = v1546;
  v1525 = v1524;
  sub_100AEA22C(a1, 8, &v1521);
  v11 = v1525;
  if (v1525 == v1524)
  {
    v12 = 4;
    v11 = v1524;
  }
  else
  {
    if (!v1525)
      goto LABEL_39;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_39:
  if (SHIBYTE(v1521.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1521.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1516, "operator1Mnc");
  v1518 = 1;
  v1519[0] = off_102169B80;
  v1519[1] = v1546;
  v1520 = v1519;
  sub_100AEA22C(a1, 9, &v1516);
  v13 = v1520;
  if (v1520 == v1519)
  {
    v14 = 4;
    v13 = v1519;
  }
  else
  {
    if (!v1520)
      goto LABEL_46;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_46:
  if (SHIBYTE(v1516.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1516.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1511, "operator2Mcc");
  v1513 = 1;
  v1514[0] = off_102169C00;
  v1514[1] = v1546;
  v1515 = v1514;
  sub_100AEA22C(a1, 14, &v1511);
  v15 = v1515;
  if (v1515 == v1514)
  {
    v16 = 4;
    v15 = v1514;
  }
  else
  {
    if (!v1515)
      goto LABEL_53;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_53:
  if (SHIBYTE(v1511.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1511.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1506, "operator2Mnc");
  v1508 = 1;
  v1509[0] = off_102169C80;
  v1509[1] = v1546;
  v1510 = v1509;
  sub_100AEA22C(a1, 15, &v1506);
  v17 = v1510;
  if (v1510 == v1509)
  {
    v18 = 4;
    v17 = v1509;
  }
  else
  {
    if (!v1510)
      goto LABEL_60;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_60:
  if (SHIBYTE(v1506.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1506.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1501, "carrier1BundleId");
  v1503 = 1;
  v1504[0] = off_102169D00;
  v1504[1] = v1546;
  v1505 = v1504;
  sub_100AEA22C(a1, 7, &v1501);
  v19 = v1505;
  if (v1505 == v1504)
  {
    v20 = 4;
    v19 = v1504;
  }
  else
  {
    if (!v1505)
      goto LABEL_67;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_67:
  if (SHIBYTE(v1501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1501.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1496, "carrier2BundleId");
  v1498 = 1;
  v1499[0] = off_102169D80;
  v1499[1] = v1546;
  v1500 = v1499;
  sub_100AEA22C(a1, 17, &v1496);
  v21 = v1500;
  if (v1500 == v1499)
  {
    v22 = 4;
    v21 = v1499;
  }
  else
  {
    if (!v1500)
      goto LABEL_74;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_74:
  if (SHIBYTE(v1496.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1496.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1491, "carrier1Country");
  v1493 = 1;
  v1494[0] = off_102169E00;
  v1494[1] = v1546;
  v1495 = v1494;
  sub_100AEA22C(a1, 6, &v1491);
  v23 = v1495;
  if (v1495 == v1494)
  {
    v24 = 4;
    v23 = v1494;
  }
  else
  {
    if (!v1495)
      goto LABEL_81;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_81:
  if (SHIBYTE(v1491.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1491.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1486, "carrier2Country");
  v1488 = 1;
  v1489[0] = off_102169E80;
  v1489[1] = v1546;
  v1490 = v1489;
  sub_100AEA22C(a1, 16, &v1486);
  v25 = v1490;
  if (v1490 == v1489)
  {
    v26 = 4;
    v25 = v1489;
  }
  else
  {
    if (!v1490)
      goto LABEL_88;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_88:
  if (SHIBYTE(v1486.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1486.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1481, "operator1BundleId");
  v1483 = 1;
  v1484[0] = off_102169F00;
  v1484[1] = v1546;
  v1485 = v1484;
  sub_100AEA22C(a1, 11, &v1481);
  v27 = v1485;
  if (v1485 == v1484)
  {
    v28 = 4;
    v27 = v1484;
  }
  else
  {
    if (!v1485)
      goto LABEL_95;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_95:
  if (SHIBYTE(v1481.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1481.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1476, "operator2BundleId");
  v1478 = 1;
  v1479[0] = off_102169F80;
  v1479[1] = v1546;
  v1480 = v1479;
  sub_100AEA22C(a1, 19, &v1476);
  v29 = v1480;
  if (v1480 == v1479)
  {
    v30 = 4;
    v29 = v1479;
  }
  else
  {
    if (!v1480)
      goto LABEL_102;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_102:
  if (SHIBYTE(v1476.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1476.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1471, "operator1Country");
  v1473 = 1;
  v1474[0] = off_10216A000;
  v1474[1] = v1546;
  v1475 = v1474;
  sub_100AEA22C(a1, 10, &v1471);
  v31 = v1475;
  if (v1475 == v1474)
  {
    v32 = 4;
    v31 = v1474;
  }
  else
  {
    if (!v1475)
      goto LABEL_109;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_109:
  if (SHIBYTE(v1471.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1471.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1466, "operator2Country");
  v1468 = 1;
  v1469[0] = off_10216A080;
  v1469[1] = v1546;
  v1470 = v1469;
  sub_100AEA22C(a1, 18, &v1466);
  v33 = v1470;
  if (v1470 == v1469)
  {
    v34 = 4;
    v33 = v1469;
  }
  else
  {
    if (!v1470)
      goto LABEL_116;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_116:
  if (SHIBYTE(v1466.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1466.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1461, "carrierCountry");
  v1463 = 0;
  v1464[0] = off_10216A100;
  v1464[1] = v1546;
  v1465 = v1464;
  sub_100AEA22C(a1, 58, &v1461);
  v35 = v1465;
  if (v1465 == v1464)
  {
    v36 = 4;
    v35 = v1464;
  }
  else
  {
    if (!v1465)
      goto LABEL_123;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_123:
  if (SHIBYTE(v1461.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1461.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1456, "carrierBundleId");
  v1458 = 0;
  v1459[0] = off_10216A180;
  v1459[1] = v1546;
  v1460 = v1459;
  sub_100AEA22C(a1, 59, &v1456);
  v37 = v1460;
  if (v1460 == v1459)
  {
    v38 = 4;
    v37 = v1459;
  }
  else
  {
    if (!v1460)
      goto LABEL_130;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_130:
  if (SHIBYTE(v1456.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1456.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1451, "operatorCountry");
  v1453 = 0;
  v1454[0] = off_10216A200;
  v1454[1] = v1546;
  v1455 = v1454;
  sub_100AEA22C(a1, 60, &v1451);
  v39 = v1455;
  if (v1455 == v1454)
  {
    v40 = 4;
    v39 = v1454;
  }
  else
  {
    if (!v1455)
      goto LABEL_137;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_137:
  if (SHIBYTE(v1451.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1451.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1446, "operatorBundleId");
  v1448 = 0;
  v1449[0] = off_10216A280;
  v1449[1] = v1546;
  v1450 = v1449;
  sub_100AEA22C(a1, 61, &v1446);
  v41 = v1450;
  if (v1450 == v1449)
  {
    v42 = 4;
    v41 = v1449;
  }
  else
  {
    if (!v1450)
      goto LABEL_144;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_144:
  if (SHIBYTE(v1446.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1446.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1441, "simBundleId");
  v1443 = 0;
  v1444[0] = off_10216A300;
  v1444[1] = v1546;
  v1445 = v1444;
  sub_100AEA22C(a1, 140, &v1441);
  v43 = v1445;
  if (v1445 == v1444)
  {
    v44 = 4;
    v43 = v1444;
  }
  else
  {
    if (!v1445)
      goto LABEL_151;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_151:
  if (SHIBYTE(v1441.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1441.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1436, "simCountry");
  v1438 = 0;
  v1439[0] = off_10216A380;
  v1439[1] = v1546;
  v1440 = v1439;
  sub_100AEA22C(a1, 139, &v1436);
  v45 = v1440;
  if (v1440 == v1439)
  {
    v46 = 4;
    v45 = v1439;
  }
  else
  {
    if (!v1440)
      goto LABEL_158;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_158:
  if (SHIBYTE(v1436.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1436.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1431, "simSlot");
  v1433 = 0;
  v1434[0] = off_10216A400;
  v1434[1] = v1546;
  v1435 = v1434;
  sub_100AEA22C(a1, 141, &v1431);
  v47 = v1435;
  if (v1435 == v1434)
  {
    v48 = 4;
    v47 = v1434;
  }
  else
  {
    if (!v1435)
      goto LABEL_165;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_165:
  if (SHIBYTE(v1431.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1431.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1426, "sim1RAT");
  v1428 = 1;
  v1429[0] = off_10216A480;
  v1429[1] = v1546;
  v1430 = v1429;
  sub_100AEA22C(a1, 20, &v1426);
  v49 = v1430;
  if (v1430 == v1429)
  {
    v50 = 4;
    v49 = v1429;
  }
  else
  {
    if (!v1430)
      goto LABEL_172;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_172:
  if (SHIBYTE(v1426.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1426.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1421, "sim2RAT");
  v1423 = 1;
  v1424[0] = off_10216A500;
  v1424[1] = v1546;
  v1425 = v1424;
  sub_100AEA22C(a1, 21, &v1421);
  v51 = v1425;
  if (v1425 == v1424)
  {
    v52 = 4;
    v51 = v1424;
  }
  else
  {
    if (!v1425)
      goto LABEL_179;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_179:
  if (SHIBYTE(v1421.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1421.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1416, "wifiAssociatedState");
  v1418 = 1;
  v1419[0] = off_10216A580;
  v1419[1] = v1546;
  v1420 = v1419;
  sub_100AEA22C(a1, 24, &v1416);
  v53 = v1420;
  if (v1420 == v1419)
  {
    v54 = 4;
    v53 = v1419;
  }
  else
  {
    if (!v1420)
      goto LABEL_186;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_186:
  if (SHIBYTE(v1416.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1416.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1411, "networkReachablilityState");
  v1413 = 1;
  v1414[0] = off_10216A600;
  v1414[1] = v1546;
  v1415 = v1414;
  sub_100AEA22C(a1, 26, &v1411);
  v55 = v1415;
  if (v1415 == v1414)
  {
    v56 = 4;
    v55 = v1414;
  }
  else
  {
    if (!v1415)
      goto LABEL_193;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_193:
  if (SHIBYTE(v1411.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1411.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1406, "watchMode");
  v1408 = 1;
  v1409[0] = off_10216A680;
  v1409[1] = v1546;
  v1410 = v1409;
  sub_100AEA22C(a1, 30, &v1406);
  v57 = v1410;
  if (v1410 == v1409)
  {
    v58 = 4;
    v57 = v1409;
  }
  else
  {
    if (!v1410)
      goto LABEL_200;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_200:
  if (SHIBYTE(v1406.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1406.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1401, "mobileAssetVersion");
  v1403 = 1;
  v1404[0] = off_10216A700;
  v1404[1] = v1546;
  v1405 = v1404;
  sub_100AEA22C(a1, 29, &v1401);
  v59 = v1405;
  if (v1405 == v1404)
  {
    v60 = 4;
    v59 = v1404;
  }
  else
  {
    if (!v1405)
      goto LABEL_207;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_207:
  if (SHIBYTE(v1401.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1401.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1396, "callTriggerType");
  v1398 = 1;
  v1399[0] = off_10216A780;
  v1399[1] = v1546;
  v1400 = v1399;
  sub_100AEA22C(a1, 82, &v1396);
  v61 = v1400;
  if (v1400 == v1399)
  {
    v62 = 4;
    v61 = v1399;
  }
  else
  {
    if (!v1400)
      goto LABEL_214;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_214:
  if (SHIBYTE(v1396.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1396.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1391, "isSim1Present");
  v1393 = 1;
  v1394[0] = off_10216A800;
  v1394[1] = v1546;
  v1395 = v1394;
  sub_100AEA22C(a1, 22, &v1391);
  v63 = v1395;
  if (v1395 == v1394)
  {
    v64 = 4;
    v63 = v1394;
  }
  else
  {
    if (!v1395)
      goto LABEL_221;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_221:
  if (SHIBYTE(v1391.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1391.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1386, "isSim2Present");
  v1388 = 1;
  v1389[0] = off_10216A880;
  v1389[1] = v1546;
  v1390 = v1389;
  sub_100AEA22C(a1, 23, &v1386);
  v65 = v1390;
  if (v1390 == v1389)
  {
    v66 = 4;
    v65 = v1389;
  }
  else
  {
    if (!v1390)
      goto LABEL_228;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_228:
  if (SHIBYTE(v1386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1386.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1381, "isSim1DataPreferred");
  v1383 = 1;
  v1384[0] = off_10216A900;
  v1384[1] = v1546;
  v1385 = v1384;
  sub_100AEA22C(a1, 33, &v1381);
  v67 = v1385;
  if (v1385 == v1384)
  {
    v68 = 4;
    v67 = v1384;
  }
  else
  {
    if (!v1385)
      goto LABEL_235;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_235:
  if (SHIBYTE(v1381.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1381.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1376, "isSim2DataPreferred");
  v1378 = 1;
  v1379[0] = off_10216A980;
  v1379[1] = v1546;
  v1380 = v1379;
  sub_100AEA22C(a1, 35, &v1376);
  v69 = v1380;
  if (v1380 == v1379)
  {
    v70 = 4;
    v69 = v1379;
  }
  else
  {
    if (!v1380)
      goto LABEL_242;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_242:
  if (SHIBYTE(v1376.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1376.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1371, "isSim1DefaultVoice");
  v1373 = 1;
  v1374[0] = off_10216AA00;
  v1374[1] = v1546;
  v1375 = v1374;
  sub_100AEA22C(a1, 34, &v1371);
  v71 = v1375;
  if (v1375 == v1374)
  {
    v72 = 4;
    v71 = v1374;
  }
  else
  {
    if (!v1375)
      goto LABEL_249;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_249:
  if (SHIBYTE(v1371.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1371.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1366, "isSim2DefaultVoice");
  v1368 = 1;
  v1369[0] = off_10216AA80;
  v1369[1] = v1546;
  v1370 = v1369;
  sub_100AEA22C(a1, 36, &v1366);
  v73 = v1370;
  if (v1370 == v1369)
  {
    v74 = 4;
    v73 = v1369;
  }
  else
  {
    if (!v1370)
      goto LABEL_256;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_256:
  if (SHIBYTE(v1366.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1366.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1361, "GNSSSignalEnvironment");
  v1363 = 1;
  v1364[0] = off_10216AB00;
  v1364[1] = v1546;
  v1365 = v1364;
  sub_100AEA22C(a1, 25, &v1361);
  v75 = v1365;
  if (v1365 == v1364)
  {
    v76 = 4;
    v75 = v1364;
  }
  else
  {
    if (!v1365)
      goto LABEL_263;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_263:
  if (SHIBYTE(v1361.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1361.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1356, "communicationType");
  v1358 = 1;
  v1359[0] = off_10216AB80;
  v1359[1] = v1546;
  v1360 = v1359;
  sub_100AEA22C(a1, 77, &v1356);
  v77 = v1360;
  if (v1360 == v1359)
  {
    v78 = 4;
    v77 = v1359;
  }
  else
  {
    if (!v1360)
      goto LABEL_270;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_270:
  if (SHIBYTE(v1356.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1356.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1351, "latitude");
  v1353 = 0;
  v1354[0] = off_10216AC00;
  v1354[1] = v1546;
  v1355 = v1354;
  sub_100AEA22C(a1, 37, &v1351);
  v79 = v1355;
  if (v1355 == v1354)
  {
    v80 = 4;
    v79 = v1354;
  }
  else
  {
    if (!v1355)
      goto LABEL_277;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_277:
  if (SHIBYTE(v1351.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1351.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1346, "longitude");
  v1348 = 0;
  v1349[0] = off_10216AC80;
  v1349[1] = v1546;
  v1350 = v1349;
  sub_100AEA22C(a1, 38, &v1346);
  v81 = v1350;
  if (v1350 == v1349)
  {
    v82 = 4;
    v81 = v1349;
  }
  else
  {
    if (!v1350)
      goto LABEL_284;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_284:
  if (SHIBYTE(v1346.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1346.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1341, "altitude");
  v1343 = 0;
  v1344[0] = off_10216AD00;
  v1344[1] = v1546;
  v1345 = v1344;
  sub_100AEA22C(a1, 39, &v1341);
  v83 = v1345;
  if (v1345 == v1344)
  {
    v84 = 4;
    v83 = v1344;
  }
  else
  {
    if (!v1345)
      goto LABEL_291;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_291:
  if (SHIBYTE(v1341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1341.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1336, "horizontalAccuracy");
  v1338 = 0;
  v1339[0] = off_10216AD80;
  v1339[1] = v1546;
  v1340 = v1339;
  sub_100AEA22C(a1, 40, &v1336);
  v85 = v1340;
  if (v1340 == v1339)
  {
    v86 = 4;
    v85 = v1339;
  }
  else
  {
    if (!v1340)
      goto LABEL_298;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_298:
  if (SHIBYTE(v1336.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1336.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1331, "verticalAccuracy");
  v1333 = 0;
  v1334[0] = off_10216AE00;
  v1334[1] = v1546;
  v1335 = v1334;
  sub_100AEA22C(a1, 41, &v1331);
  v87 = v1335;
  if (v1335 == v1334)
  {
    v88 = 4;
    v87 = v1334;
  }
  else
  {
    if (!v1335)
      goto LABEL_305;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_305:
  if (SHIBYTE(v1331.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1331.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1326, "timetoFix");
  v1328 = 0;
  v1329[0] = off_10216AE80;
  v1329[1] = v1546;
  v1330 = v1329;
  sub_100AEA22C(a1, 42, &v1326);
  v89 = v1330;
  if (v1330 == v1329)
  {
    v90 = 4;
    v89 = v1329;
  }
  else
  {
    if (!v1330)
      goto LABEL_312;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_312:
  if (SHIBYTE(v1326.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1326.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1321, "fixSource");
  v1323 = 0;
  v1324[0] = off_10216AF00;
  v1324[1] = v1546;
  v1325 = v1324;
  sub_100AEA22C(a1, 43, &v1321);
  v91 = v1325;
  if (v1325 == v1324)
  {
    v92 = 4;
    v91 = v1324;
  }
  else
  {
    if (!v1325)
      goto LABEL_319;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_319:
  if (SHIBYTE(v1321.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1321.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1316, "requestedResponseTime");
  v1318 = 0;
  v1319[0] = off_10216AF80;
  v1319[1] = v1546;
  v1320 = v1319;
  sub_100AEA22C(a1, 44, &v1316);
  v93 = v1320;
  if (v1320 == v1319)
  {
    v94 = 4;
    v93 = v1319;
  }
  else
  {
    if (!v1320)
      goto LABEL_326;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_326:
  if (SHIBYTE(v1316.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1316.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1311, "requestedAccuracy");
  v1313 = 0;
  v1314[0] = off_10216B000;
  v1314[1] = v1546;
  v1315 = v1314;
  sub_100AEA22C(a1, 45, &v1311);
  v95 = v1315;
  if (v1315 == v1314)
  {
    v96 = 4;
    v95 = v1314;
  }
  else
  {
    if (!v1315)
      goto LABEL_333;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_333:
  if (SHIBYTE(v1311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1311.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1306, "requestedPosReportType");
  v1308 = 0;
  v1309[0] = off_10216B080;
  v1309[1] = v1546;
  v1310 = v1309;
  sub_100AEA22C(a1, 46, &v1306);
  v97 = v1310;
  if (v1310 == v1309)
  {
    v98 = 4;
    v97 = v1309;
  }
  else
  {
    if (!v1310)
      goto LABEL_340;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_340:
  if (SHIBYTE(v1306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1306.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1301, "isInActiveEmergency");
  v1303 = 0;
  v1304[0] = off_10216B100;
  v1304[1] = v1546;
  v1305 = v1304;
  sub_100AEA22C(a1, 83, &v1301);
  v99 = v1305;
  if (v1305 == v1304)
  {
    v100 = 4;
    v99 = v1304;
  }
  else
  {
    if (!v1305)
      goto LABEL_347;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_347:
  if (SHIBYTE(v1301.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1301.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1296, "sessionResult");
  v1298 = 0;
  v1299[0] = off_10216B180;
  v1299[1] = v1546;
  v1300 = v1299;
  sub_100AEA22C(a1, 47, &v1296);
  v101 = v1300;
  if (v1300 == v1299)
  {
    v102 = 4;
    v101 = v1299;
  }
  else
  {
    if (!v1300)
      goto LABEL_354;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_354:
  if (SHIBYTE(v1296.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1296.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1291, "posProtocol");
  v1293 = 0;
  v1294[0] = off_10216B200;
  v1294[1] = v1546;
  v1295 = v1294;
  sub_100AEA22C(a1, 49, &v1291);
  v103 = v1295;
  if (v1295 == v1294)
  {
    v104 = 4;
    v103 = v1294;
  }
  else
  {
    if (!v1295)
      goto LABEL_361;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_361:
  if (SHIBYTE(v1291.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1291.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1286, "sessionType");
  v1288 = 0;
  v1289[0] = off_10216B280;
  v1289[1] = v1546;
  v1290 = v1289;
  sub_100AEA22C(a1, 51, &v1286);
  v105 = v1290;
  if (v1290 == v1289)
  {
    v106 = 4;
    v105 = v1289;
  }
  else
  {
    if (!v1290)
      goto LABEL_368;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_368:
  if (SHIBYTE(v1286.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1286.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1281, "methodType");
  v1283 = 0;
  v1284[0] = off_10216B300;
  v1284[1] = v1546;
  v1285 = v1284;
  sub_100AEA22C(a1, 52, &v1281);
  v107 = v1285;
  if (v1285 == v1284)
  {
    v108 = 4;
    v107 = v1284;
  }
  else
  {
    if (!v1285)
      goto LABEL_375;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_375:
  if (SHIBYTE(v1281.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1281.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1276, "abortCause");
  v1278 = 0;
  v1279[0] = off_10216B380;
  v1279[1] = v1546;
  v1280 = v1279;
  sub_100AEA22C(a1, 66, &v1276);
  v109 = v1280;
  if (v1280 == v1279)
  {
    v110 = 4;
    v109 = v1279;
  }
  else
  {
    if (!v1280)
      goto LABEL_382;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_382:
  if (SHIBYTE(v1276.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1276.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1271, "carrier1Mcc");
  v1273 = 1;
  v1274[0] = off_10216B400;
  v1274[1] = v1546;
  v1275 = v1274;
  sub_100AEA22C(a1, 4, &v1271);
  v111 = v1275;
  if (v1275 == v1274)
  {
    v112 = 4;
    v111 = v1274;
  }
  else
  {
    if (!v1275)
      goto LABEL_389;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_389:
  if (SHIBYTE(v1271.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1271.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1266, "carrier1Mnc");
  v1268 = 1;
  v1269[0] = off_10216B480;
  v1269[1] = v1546;
  v1270 = v1269;
  sub_100AEA22C(a1, 5, &v1266);
  v113 = v1270;
  if (v1270 == v1269)
  {
    v114 = 4;
    v113 = v1269;
  }
  else
  {
    if (!v1270)
      goto LABEL_396;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_396:
  if (SHIBYTE(v1266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1266.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1261, "carrier2Mcc");
  v1263 = 1;
  v1264[0] = off_10216B500;
  v1264[1] = v1546;
  v1265 = v1264;
  sub_100AEA22C(a1, 12, &v1261);
  v115 = v1265;
  if (v1265 == v1264)
  {
    v116 = 4;
    v115 = v1264;
  }
  else
  {
    if (!v1265)
      goto LABEL_403;
    v116 = 5;
  }
  (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_403:
  if (SHIBYTE(v1261.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1261.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1256, "carrier2Mnc");
  v1258 = 1;
  v1259[0] = off_10216B580;
  v1259[1] = v1546;
  v1260 = v1259;
  sub_100AEA22C(a1, 13, &v1256);
  v117 = v1260;
  if (v1260 == v1259)
  {
    v118 = 4;
    v117 = v1259;
  }
  else
  {
    if (!v1260)
      goto LABEL_410;
    v118 = 5;
  }
  (*(void (**)(void))(*v117 + 8 * v118))();
LABEL_410:
  if (SHIBYTE(v1256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1256.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1251, "phoneNumberAvailable");
  v1253 = 1;
  v1254[0] = off_10216B600;
  v1254[1] = v1546;
  v1255 = v1254;
  sub_100AEA22C(a1, 31, &v1251);
  v119 = v1255;
  if (v1255 == v1254)
  {
    v120 = 4;
    v119 = v1254;
  }
  else
  {
    if (!v1255)
      goto LABEL_417;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_417:
  if (SHIBYTE(v1251.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1251.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1246, "wasTCPositionInjected");
  v1248 = 0;
  v1249[0] = off_10216B680;
  v1249[1] = v1546;
  v1250 = v1249;
  sub_100AEA22C(a1, 62, &v1246);
  v121 = v1250;
  if (v1250 == v1249)
  {
    v122 = 4;
    v121 = v1249;
  }
  else
  {
    if (!v1250)
      goto LABEL_424;
    v122 = 5;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_424:
  if (SHIBYTE(v1246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1246.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1241, "TCPositionUsage");
  v1243 = 0;
  v1244[0] = off_10216B700;
  v1244[1] = v1546;
  v1245 = v1244;
  sub_100AEA22C(a1, 63, &v1241);
  v123 = v1245;
  if (v1245 == v1244)
  {
    v124 = 4;
    v123 = v1244;
  }
  else
  {
    if (!v1245)
      goto LABEL_431;
    v124 = 5;
  }
  (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_431:
  if (SHIBYTE(v1241.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1241.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1236, "nwRefLocAvailability");
  v1238 = 0;
  v1239[0] = off_10216B780;
  v1239[1] = v1546;
  v1240 = v1239;
  sub_100AEA22C(a1, 67, &v1236);
  v125 = v1240;
  if (v1240 == v1239)
  {
    v126 = 4;
    v125 = v1239;
  }
  else
  {
    if (!v1240)
      goto LABEL_438;
    v126 = 5;
  }
  (*(void (**)(void))(*v125 + 8 * v126))();
LABEL_438:
  if (SHIBYTE(v1236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1236.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1231, "nwTimeAssistanceAvailability");
  v1233 = 0;
  v1234[0] = off_10216B800;
  v1234[1] = v1546;
  v1235 = v1234;
  sub_100AEA22C(a1, 74, &v1231);
  v127 = v1235;
  if (v1235 == v1234)
  {
    v128 = 4;
    v127 = v1234;
  }
  else
  {
    if (!v1235)
      goto LABEL_445;
    v128 = 5;
  }
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_445:
  if (SHIBYTE(v1231.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1231.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1226, "nwNavModelAvailability");
  v1228 = 0;
  v1229[0] = off_10216B880;
  v1229[1] = v1546;
  v1230 = v1229;
  sub_100AEA22C(a1, 75, &v1226);
  v129 = v1230;
  if (v1230 == v1229)
  {
    v130 = 4;
    v129 = v1229;
  }
  else
  {
    if (!v1230)
      goto LABEL_452;
    v130 = 5;
  }
  (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_452:
  if (SHIBYTE(v1226.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1226.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1221, "nwRefLocLatitude");
  v1223 = 0;
  v1224[0] = off_10216B900;
  v1224[1] = v1546;
  v1225 = v1224;
  sub_100AEA22C(a1, 68, &v1221);
  v131 = v1225;
  if (v1225 == v1224)
  {
    v132 = 4;
    v131 = v1224;
  }
  else
  {
    if (!v1225)
      goto LABEL_459;
    v132 = 5;
  }
  (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_459:
  if (SHIBYTE(v1221.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1221.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1216, "nwRefLocLongitude");
  v1218 = 0;
  v1219[0] = off_10216B980;
  v1219[1] = v1546;
  v1220 = v1219;
  sub_100AEA22C(a1, 69, &v1216);
  v133 = v1220;
  if (v1220 == v1219)
  {
    v134 = 4;
    v133 = v1219;
  }
  else
  {
    if (!v1220)
      goto LABEL_466;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_466:
  if (SHIBYTE(v1216.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1216.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1211, "nwRefLocUncertainity");
  v1213 = 0;
  v1214[0] = off_10216BA00;
  v1214[1] = v1546;
  v1215 = v1214;
  sub_100AEA22C(a1, 70, &v1211);
  v135 = v1215;
  if (v1215 == v1214)
  {
    v136 = 4;
    v135 = v1214;
  }
  else
  {
    if (!v1215)
      goto LABEL_473;
    v136 = 5;
  }
  (*(void (**)(void))(*v135 + 8 * v136))();
LABEL_473:
  if (SHIBYTE(v1211.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1211.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1206, "nwRefLocConfidence");
  v1208 = 0;
  v1209[0] = off_10216BA80;
  v1209[1] = v1546;
  v1210 = v1209;
  sub_100AEA22C(a1, 71, &v1206);
  v137 = v1210;
  if (v1210 == v1209)
  {
    v138 = 4;
    v137 = v1209;
  }
  else
  {
    if (!v1210)
      goto LABEL_480;
    v138 = 5;
  }
  (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_480:
  if (SHIBYTE(v1206.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1206.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1201, "nwRefLocDeviationFromTCP");
  v1203 = 0;
  v1204[0] = off_10216BB00;
  v1204[1] = v1546;
  v1205 = v1204;
  sub_100AEA22C(a1, 72, &v1201);
  v139 = v1205;
  if (v1205 == v1204)
  {
    v140 = 4;
    v139 = v1204;
  }
  else
  {
    if (!v1205)
      goto LABEL_487;
    v140 = 5;
  }
  (*(void (**)(void))(*v139 + 8 * v140))();
LABEL_487:
  if (SHIBYTE(v1201.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1201.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1196, "nwRefLocDeviationFromCellLocation");
  v1198 = 0;
  v1199[0] = off_10216BB80;
  v1199[1] = v1546;
  v1200 = v1199;
  sub_100AEA22C(a1, 73, &v1196);
  v141 = v1200;
  if (v1200 == v1199)
  {
    v142 = 4;
    v141 = v1199;
  }
  else
  {
    if (!v1200)
      goto LABEL_494;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_494:
  if (SHIBYTE(v1196.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1196.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1191, "finalFixDeviationFromCellLocation");
  v1193 = 0;
  v1194[0] = off_10216BC00;
  v1194[1] = v1546;
  v1195 = v1194;
  sub_100AEA22C(a1, 76, &v1191);
  v143 = v1195;
  if (v1195 == v1194)
  {
    v144 = 4;
    v143 = v1194;
  }
  else
  {
    if (!v1195)
      goto LABEL_501;
    v144 = 5;
  }
  (*(void (**)(void))(*v143 + 8 * v144))();
LABEL_501:
  if (SHIBYTE(v1191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1191.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1186, "simSlotId");
  v1188 = 1;
  v1189[0] = off_10216BC80;
  v1189[1] = v1546;
  v1190 = v1189;
  sub_100AEA22C(a1, 79, &v1186);
  v145 = v1190;
  if (v1190 == v1189)
  {
    v146 = 4;
    v145 = v1189;
  }
  else
  {
    if (!v1190)
      goto LABEL_508;
    v146 = 5;
  }
  (*(void (**)(void))(*v145 + 8 * v146))();
LABEL_508:
  if (SHIBYTE(v1186.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1186.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1181, "carrierMcc");
  v1183 = 0;
  v1184[0] = off_10216BD00;
  v1184[1] = v1546;
  v1185 = v1184;
  sub_100AEA22C(a1, 54, &v1181);
  v147 = v1185;
  if (v1185 == v1184)
  {
    v148 = 4;
    v147 = v1184;
  }
  else
  {
    if (!v1185)
      goto LABEL_515;
    v148 = 5;
  }
  (*(void (**)(void))(*v147 + 8 * v148))();
LABEL_515:
  if (SHIBYTE(v1181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1181.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1176, "carrierMnc");
  v1178 = 0;
  v1179[0] = off_10216BD80;
  v1179[1] = v1546;
  v1180 = v1179;
  sub_100AEA22C(a1, 55, &v1176);
  v149 = v1180;
  if (v1180 == v1179)
  {
    v150 = 4;
    v149 = v1179;
  }
  else
  {
    if (!v1180)
      goto LABEL_522;
    v150 = 5;
  }
  (*(void (**)(void))(*v149 + 8 * v150))();
LABEL_522:
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1171, "operatorMcc");
  v1173 = 0;
  v1174[0] = off_10216BE00;
  v1174[1] = v1546;
  v1175 = v1174;
  sub_100AEA22C(a1, 56, &v1171);
  v151 = v1175;
  if (v1175 == v1174)
  {
    v152 = 4;
    v151 = v1174;
  }
  else
  {
    if (!v1175)
      goto LABEL_529;
    v152 = 5;
  }
  (*(void (**)(void))(*v151 + 8 * v152))();
LABEL_529:
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1166, "operatorMnc");
  v1168 = 0;
  v1169[0] = off_10216BE80;
  v1169[1] = v1546;
  v1170 = v1169;
  sub_100AEA22C(a1, 57, &v1166);
  v153 = v1170;
  if (v1170 == v1169)
  {
    v154 = 4;
    v153 = v1169;
  }
  else
  {
    if (!v1170)
      goto LABEL_536;
    v154 = 5;
  }
  (*(void (**)(void))(*v153 + 8 * v154))();
LABEL_536:
  if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1166.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1161, "ratType");
  v1163 = 0;
  v1164[0] = off_10216BF00;
  v1164[1] = v1546;
  v1165 = v1164;
  sub_100AEA22C(a1, 50, &v1161);
  v155 = v1165;
  if (v1165 == v1164)
  {
    v156 = 4;
    v155 = v1164;
  }
  else
  {
    if (!v1165)
      goto LABEL_543;
    v156 = 5;
  }
  (*(void (**)(void))(*v155 + 8 * v156))();
LABEL_543:
  if (SHIBYTE(v1161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1161.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1156, "isSimPresent");
  v1158 = 0;
  v1159[0] = off_10216BF80;
  v1159[1] = v1546;
  v1160 = v1159;
  sub_100AEA22C(a1, 53, &v1156);
  v157 = v1160;
  if (v1160 == v1159)
  {
    v158 = 4;
    v157 = v1159;
  }
  else
  {
    if (!v1160)
      goto LABEL_550;
    v158 = 5;
  }
  (*(void (**)(void))(*v157 + 8 * v158))();
LABEL_550:
  if (SHIBYTE(v1156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1156.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1151, "callOverDataPrefferedSim");
  v1153 = 0;
  v1154[0] = off_10216C000;
  v1154[1] = v1546;
  v1155 = v1154;
  sub_100AEA22C(a1, 78, &v1151);
  v159 = v1155;
  if (v1155 == v1154)
  {
    v160 = 4;
    v159 = v1154;
  }
  else
  {
    if (!v1155)
      goto LABEL_557;
    v160 = 5;
  }
  (*(void (**)(void))(*v159 + 8 * v160))();
LABEL_557:
  if (SHIBYTE(v1151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1151.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1146, "callOverVoiceDefaultSim");
  v1148 = 0;
  v1149[0] = off_10216C080;
  v1149[1] = v1546;
  v1150 = v1149;
  sub_100AEA22C(a1, 80, &v1146);
  v161 = v1150;
  if (v1150 == v1149)
  {
    v162 = 4;
    v161 = v1149;
  }
  else
  {
    if (!v1150)
      goto LABEL_564;
    v162 = 5;
  }
  (*(void (**)(void))(*v161 + 8 * v162))();
LABEL_564:
  if (SHIBYTE(v1146.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1146.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1141, "orbitFileAvailability");
  v1143 = 0;
  v1144[0] = off_10216C100;
  v1144[1] = v1546;
  v1145 = v1144;
  sub_100AEA22C(a1, 27, &v1141);
  v163 = v1145;
  if (v1145 == v1144)
  {
    v164 = 4;
    v163 = v1144;
  }
  else
  {
    if (!v1145)
      goto LABEL_571;
    v164 = 5;
  }
  (*(void (**)(void))(*v163 + 8 * v164))();
LABEL_571:
  if (SHIBYTE(v1141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1141.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1136, "orbitFileAge");
  v1138 = 0;
  v1139[0] = off_10216C180;
  v1139[1] = v1546;
  v1140 = v1139;
  sub_100AEA22C(a1, 28, &v1136);
  v165 = v1140;
  if (v1140 == v1139)
  {
    v166 = 4;
    v165 = v1139;
  }
  else
  {
    if (!v1140)
      goto LABEL_578;
    v166 = 5;
  }
  (*(void (**)(void))(*v165 + 8 * v166))();
LABEL_578:
  if (SHIBYTE(v1136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1136.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1131, "discardReason");
  v1133 = 0;
  v1134[0] = off_10216C200;
  v1134[1] = v1546;
  v1135 = v1134;
  sub_100AEA22C(a1, 84, &v1131);
  v167 = v1135;
  if (v1135 == v1134)
  {
    v168 = 4;
    v167 = v1134;
  }
  else
  {
    if (!v1135)
      goto LABEL_585;
    v168 = 5;
  }
  (*(void (**)(void))(*v167 + 8 * v168))();
LABEL_585:
  if (SHIBYTE(v1131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1131.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1126, "discardedPositionMessageType");
  v1128 = 0;
  v1129[0] = off_10216C280;
  v1129[1] = v1546;
  v1130 = v1129;
  sub_100AEA22C(a1, 85, &v1126);
  v169 = v1130;
  if (v1130 == v1129)
  {
    v170 = 4;
    v169 = v1129;
  }
  else
  {
    if (!v1130)
      goto LABEL_592;
    v170 = 5;
  }
  (*(void (**)(void))(*v169 + 8 * v170))();
LABEL_592:
  if (SHIBYTE(v1126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1126.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1121, "posProtocolType");
  v1123 = 0;
  v1124[0] = off_10216C300;
  v1124[1] = v1546;
  v1125 = v1124;
  sub_100AEA22C(a1, 86, &v1121);
  v171 = v1125;
  if (v1125 == v1124)
  {
    v172 = 4;
    v171 = v1124;
  }
  else
  {
    if (!v1125)
      goto LABEL_599;
    v172 = 5;
  }
  (*(void (**)(void))(*v171 + 8 * v172))();
LABEL_599:
  if (SHIBYTE(v1121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1121.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1116, "timetoFirstFix");
  v1118 = 0;
  v1119[0] = off_10216C380;
  v1119[1] = v1546;
  v1120 = v1119;
  sub_100AEA22C(a1, 89, &v1116);
  v173 = v1120;
  if (v1120 == v1119)
  {
    v174 = 4;
    v173 = v1119;
  }
  else
  {
    if (!v1120)
      goto LABEL_606;
    v174 = 5;
  }
  (*(void (**)(void))(*v173 + 8 * v174))();
LABEL_606:
  if (SHIBYTE(v1116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1116.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1111, "firstFixSource");
  v1113 = 0;
  v1114[0] = off_10216C400;
  v1114[1] = v1546;
  v1115 = v1114;
  sub_100AEA22C(a1, 90, &v1111);
  v175 = v1115;
  if (v1115 == v1114)
  {
    v176 = 4;
    v175 = v1114;
  }
  else
  {
    if (!v1115)
      goto LABEL_613;
    v176 = 5;
  }
  (*(void (**)(void))(*v175 + 8 * v176))();
LABEL_613:
  if (SHIBYTE(v1111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1111.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1106, "timeToBestFix");
  v1108 = 0;
  v1109[0] = off_10216C480;
  v1109[1] = v1546;
  v1110 = v1109;
  sub_100AEA22C(a1, 91, &v1106);
  v177 = v1110;
  if (v1110 == v1109)
  {
    v178 = 4;
    v177 = v1109;
  }
  else
  {
    if (!v1110)
      goto LABEL_620;
    v178 = 5;
  }
  (*(void (**)(void))(*v177 + 8 * v178))();
LABEL_620:
  if (SHIBYTE(v1106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1106.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1101, "bestFixSource");
  v1103 = 0;
  v1104[0] = off_10216C500;
  v1104[1] = v1546;
  v1105 = v1104;
  sub_100AEA22C(a1, 92, &v1101);
  v179 = v1105;
  if (v1105 == v1104)
  {
    v180 = 4;
    v179 = v1104;
  }
  else
  {
    if (!v1105)
      goto LABEL_627;
    v180 = 5;
  }
  (*(void (**)(void))(*v179 + 8 * v180))();
LABEL_627:
  if (SHIBYTE(v1101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1101.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1096, "horzAccuracy");
  v1098 = 0;
  v1099[0] = off_10216C580;
  v1099[1] = v1546;
  v1100 = v1099;
  sub_100AEA22C(a1, 93, &v1096);
  v181 = v1100;
  if (v1100 == v1099)
  {
    v182 = 4;
    v181 = v1099;
  }
  else
  {
    if (!v1100)
      goto LABEL_634;
    v182 = 5;
  }
  (*(void (**)(void))(*v181 + 8 * v182))();
LABEL_634:
  if (SHIBYTE(v1096.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1096.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1091, "vertAccuracy");
  v1093 = 0;
  v1094[0] = off_10216C600;
  v1094[1] = v1546;
  v1095 = v1094;
  sub_100AEA22C(a1, 94, &v1091);
  v183 = v1095;
  if (v1095 == v1094)
  {
    v184 = 4;
    v183 = v1094;
  }
  else
  {
    if (!v1095)
      goto LABEL_641;
    v184 = 5;
  }
  (*(void (**)(void))(*v183 + 8 * v184))();
LABEL_641:
  if (SHIBYTE(v1091.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1091.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1086, "sessionResult");
  v1088 = 0;
  v1089[0] = off_10216C680;
  v1089[1] = v1546;
  v1090 = v1089;
  sub_100AEA22C(a1, 96, &v1086);
  v185 = v1090;
  if (v1090 == v1089)
  {
    v186 = 4;
    v185 = v1089;
  }
  else
  {
    if (!v1090)
      goto LABEL_648;
    v186 = 5;
  }
  (*(void (**)(void))(*v185 + 8 * v186))();
LABEL_648:
  if (SHIBYTE(v1086.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1086.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1081, "numValidFixesSent");
  v1083 = 0;
  v1084[0] = off_10216C700;
  v1084[1] = v1546;
  v1085 = v1084;
  sub_100AEA22C(a1, 95, &v1081);
  v187 = v1085;
  if (v1085 == v1084)
  {
    v188 = 4;
    v187 = v1084;
  }
  else
  {
    if (!v1085)
      goto LABEL_655;
    v188 = 5;
  }
  (*(void (**)(void))(*v187 + 8 * v188))();
LABEL_655:
  if (SHIBYTE(v1081.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1081.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1076, "numNoFixMessagesSent");
  v1078 = 0;
  v1079[0] = off_10216C780;
  v1079[1] = v1546;
  v1080 = v1079;
  sub_100AEA22C(a1, 97, &v1076);
  v189 = v1080;
  if (v1080 == v1079)
  {
    v190 = 4;
    v189 = v1079;
  }
  else
  {
    if (!v1080)
      goto LABEL_662;
    v190 = 5;
  }
  (*(void (**)(void))(*v189 + 8 * v190))();
LABEL_662:
  if (SHIBYTE(v1076.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1076.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1071, "numSendSuccessForValidFix");
  v1073 = 0;
  v1074[0] = off_10216C800;
  v1074[1] = v1546;
  v1075 = v1074;
  sub_100AEA22C(a1, 98, &v1071);
  v191 = v1075;
  if (v1075 == v1074)
  {
    v192 = 4;
    v191 = v1074;
  }
  else
  {
    if (!v1075)
      goto LABEL_669;
    v192 = 5;
  }
  (*(void (**)(void))(*v191 + 8 * v192))();
LABEL_669:
  if (SHIBYTE(v1071.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1071.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1066, "numSendFailForValidFix");
  v1068 = 0;
  v1069[0] = off_10216C880;
  v1069[1] = v1546;
  v1070 = v1069;
  sub_100AEA22C(a1, 99, &v1066);
  v193 = v1070;
  if (v1070 == v1069)
  {
    v194 = 4;
    v193 = v1069;
  }
  else
  {
    if (!v1070)
      goto LABEL_676;
    v194 = 5;
  }
  (*(void (**)(void))(*v193 + 8 * v194))();
LABEL_676:
  if (SHIBYTE(v1066.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1066.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1061, "amlSessionOverNas");
  v1063 = 0;
  v1064[0] = off_10216C900;
  v1064[1] = v1546;
  v1065 = v1064;
  sub_100AEA22C(a1, 100, &v1061);
  v195 = v1065;
  if (v1065 == v1064)
  {
    v196 = 4;
    v195 = v1064;
  }
  else
  {
    if (!v1065)
      goto LABEL_683;
    v196 = 5;
  }
  (*(void (**)(void))(*v195 + 8 * v196))();
LABEL_683:
  if (SHIBYTE(v1061.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1061.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1056, "timetoFirstFix");
  v1058 = 0;
  v1059[0] = off_10216C980;
  v1059[1] = v1546;
  v1060 = v1059;
  sub_100AEA22C(a1, 101, &v1056);
  v197 = v1060;
  if (v1060 == v1059)
  {
    v198 = 4;
    v197 = v1059;
  }
  else
  {
    if (!v1060)
      goto LABEL_690;
    v198 = 5;
  }
  (*(void (**)(void))(*v197 + 8 * v198))();
LABEL_690:
  if (SHIBYTE(v1056.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1056.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1051, "firstFixSource");
  v1053 = 0;
  v1054[0] = off_10216CA00;
  v1054[1] = v1546;
  v1055 = v1054;
  sub_100AEA22C(a1, 102, &v1051);
  v199 = v1055;
  if (v1055 == v1054)
  {
    v200 = 4;
    v199 = v1054;
  }
  else
  {
    if (!v1055)
      goto LABEL_697;
    v200 = 5;
  }
  (*(void (**)(void))(*v199 + 8 * v200))();
LABEL_697:
  if (SHIBYTE(v1051.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1051.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1046, "timeToBestFix");
  v1048 = 0;
  v1049[0] = off_10216CA80;
  v1049[1] = v1546;
  v1050 = v1049;
  sub_100AEA22C(a1, 103, &v1046);
  v201 = v1050;
  if (v1050 == v1049)
  {
    v202 = 4;
    v201 = v1049;
  }
  else
  {
    if (!v1050)
      goto LABEL_704;
    v202 = 5;
  }
  (*(void (**)(void))(*v201 + 8 * v202))();
LABEL_704:
  if (SHIBYTE(v1046.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1046.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1041, "bestFixSource");
  v1043 = 0;
  v1044[0] = off_10216CB00;
  v1044[1] = v1546;
  v1045 = v1044;
  sub_100AEA22C(a1, 104, &v1041);
  v203 = v1045;
  if (v1045 == v1044)
  {
    v204 = 4;
    v203 = v1044;
  }
  else
  {
    if (!v1045)
      goto LABEL_711;
    v204 = 5;
  }
  (*(void (**)(void))(*v203 + 8 * v204))();
LABEL_711:
  if (SHIBYTE(v1041.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1041.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1036, "horzAccuracy");
  v1038 = 0;
  v1039[0] = off_10216CB80;
  v1039[1] = v1546;
  v1040 = v1039;
  sub_100AEA22C(a1, 105, &v1036);
  v205 = v1040;
  if (v1040 == v1039)
  {
    v206 = 4;
    v205 = v1039;
  }
  else
  {
    if (!v1040)
      goto LABEL_718;
    v206 = 5;
  }
  (*(void (**)(void))(*v205 + 8 * v206))();
LABEL_718:
  if (SHIBYTE(v1036.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1036.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1031, "vertAccuracy");
  v1033 = 0;
  v1034[0] = off_10216CC00;
  v1034[1] = v1546;
  v1035 = v1034;
  sub_100AEA22C(a1, 106, &v1031);
  v207 = v1035;
  if (v1035 == v1034)
  {
    v208 = 4;
    v207 = v1034;
  }
  else
  {
    if (!v1035)
      goto LABEL_725;
    v208 = 5;
  }
  (*(void (**)(void))(*v207 + 8 * v208))();
LABEL_725:
  if (SHIBYTE(v1031.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1031.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1026, "sessionResult");
  v1028 = 0;
  v1029[0] = off_10216CC80;
  v1029[1] = v1546;
  v1030 = v1029;
  sub_100AEA22C(a1, 107, &v1026);
  v209 = v1030;
  if (v1030 == v1029)
  {
    v210 = 4;
    v209 = v1029;
  }
  else
  {
    if (!v1030)
      goto LABEL_732;
    v210 = 5;
  }
  (*(void (**)(void))(*v209 + 8 * v210))();
LABEL_732:
  if (SHIBYTE(v1026.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1026.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1021, "numValidFixesSent");
  v1023 = 0;
  v1024[0] = off_10216CD00;
  v1024[1] = v1546;
  v1025 = v1024;
  sub_100AEA22C(a1, 108, &v1021);
  v211 = v1025;
  if (v1025 == v1024)
  {
    v212 = 4;
    v211 = v1024;
  }
  else
  {
    if (!v1025)
      goto LABEL_739;
    v212 = 5;
  }
  (*(void (**)(void))(*v211 + 8 * v212))();
LABEL_739:
  if (SHIBYTE(v1021.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1021.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1016, "numNoFixMessagesSent");
  v1018 = 0;
  v1019[0] = off_10216CD80;
  v1019[1] = v1546;
  v1020 = v1019;
  sub_100AEA22C(a1, 109, &v1016);
  v213 = v1020;
  if (v1020 == v1019)
  {
    v214 = 4;
    v213 = v1019;
  }
  else
  {
    if (!v1020)
      goto LABEL_746;
    v214 = 5;
  }
  (*(void (**)(void))(*v213 + 8 * v214))();
LABEL_746:
  if (SHIBYTE(v1016.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1016.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1011, "numSendSuccessForValidFix");
  v1013 = 0;
  v1014[0] = off_10216CE00;
  v1014[1] = v1546;
  v1015 = v1014;
  sub_100AEA22C(a1, 110, &v1011);
  v215 = v1015;
  if (v1015 == v1014)
  {
    v216 = 4;
    v215 = v1014;
  }
  else
  {
    if (!v1015)
      goto LABEL_753;
    v216 = 5;
  }
  (*(void (**)(void))(*v215 + 8 * v216))();
LABEL_753:
  if (SHIBYTE(v1011.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1011.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1006, "numSendFailForValidFix");
  v1008 = 0;
  v1009[0] = off_10216CE80;
  v1009[1] = v1546;
  v1010 = v1009;
  sub_100AEA22C(a1, 111, &v1006);
  v217 = v1010;
  if (v1010 == v1009)
  {
    v218 = 4;
    v217 = v1009;
  }
  else
  {
    if (!v1010)
      goto LABEL_760;
    v218 = 5;
  }
  (*(void (**)(void))(*v217 + 8 * v218))();
LABEL_760:
  if (SHIBYTE(v1006.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1006.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v1001, "payloadSendErrorCode");
  v1003 = 0;
  v1004[0] = off_10216CF00;
  v1004[1] = v1546;
  v1005 = v1004;
  sub_100AEA22C(a1, 112, &v1001);
  v219 = v1005;
  if (v1005 == v1004)
  {
    v220 = 4;
    v219 = v1004;
  }
  else
  {
    if (!v1005)
      goto LABEL_767;
    v220 = 5;
  }
  (*(void (**)(void))(*v219 + 8 * v220))();
LABEL_767:
  if (SHIBYTE(v1001.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1001.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v996, "countOfADRTotalPayloadsSent");
  v998 = 0;
  v999[0] = off_10216CF80;
  v999[1] = v1546;
  v1000 = v999;
  sub_100AEA22C(a1, 113, &v996);
  v221 = v1000;
  if (v1000 == v999)
  {
    v222 = 4;
    v221 = v999;
  }
  else
  {
    if (!v1000)
      goto LABEL_774;
    v222 = 5;
  }
  (*(void (**)(void))(*v221 + 8 * v222))();
LABEL_774:
  if (SHIBYTE(v996.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v996.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v991, "countOfADRSuccessfulPayloadsSent");
  v993 = 0;
  v994[0] = off_10216D000;
  v994[1] = v1546;
  v995 = v994;
  sub_100AEA22C(a1, 114, &v991);
  v223 = v995;
  if (v995 == v994)
  {
    v224 = 4;
    v223 = v994;
  }
  else
  {
    if (!v995)
      goto LABEL_781;
    v224 = 5;
  }
  (*(void (**)(void))(*v223 + 8 * v224))();
LABEL_781:
  if (SHIBYTE(v991.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v991.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v986, "nameAvailability");
  v988 = 0;
  v989[0] = off_10216D080;
  v989[1] = v1546;
  v990 = v989;
  sub_100AEA22C(a1, 116, &v986);
  v225 = v990;
  if (v990 == v989)
  {
    v226 = 4;
    v225 = v989;
  }
  else
  {
    if (!v990)
      goto LABEL_788;
    v226 = 5;
  }
  (*(void (**)(void))(*v225 + 8 * v226))();
LABEL_788:
  if (SHIBYTE(v986.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v986.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v981, "ageAvailability");
  v983 = 0;
  v984[0] = off_10216D100;
  v984[1] = v1546;
  v985 = v984;
  sub_100AEA22C(a1, 117, &v981);
  v227 = v985;
  if (v985 == v984)
  {
    v228 = 4;
    v227 = v984;
  }
  else
  {
    if (!v985)
      goto LABEL_795;
    v228 = 5;
  }
  (*(void (**)(void))(*v227 + 8 * v228))();
LABEL_795:
  if (SHIBYTE(v981.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v981.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v976, "weightAvailability");
  v978 = 0;
  v979[0] = off_10216D180;
  v979[1] = v1546;
  v980 = v979;
  sub_100AEA22C(a1, 118, &v976);
  v229 = v980;
  if (v980 == v979)
  {
    v230 = 4;
    v229 = v979;
  }
  else
  {
    if (!v980)
      goto LABEL_802;
    v230 = 5;
  }
  (*(void (**)(void))(*v229 + 8 * v230))();
LABEL_802:
  if (SHIBYTE(v976.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v976.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v971, "heightAvailability");
  v973 = 0;
  v974[0] = off_10216D200;
  v974[1] = v1546;
  v975 = v974;
  sub_100AEA22C(a1, 119, &v971);
  v231 = v975;
  if (v975 == v974)
  {
    v232 = 4;
    v231 = v974;
  }
  else
  {
    if (!v975)
      goto LABEL_809;
    v232 = 5;
  }
  (*(void (**)(void))(*v231 + 8 * v232))();
LABEL_809:
  if (SHIBYTE(v971.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v971.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v966, "bloodTypeAvailability");
  v968 = 0;
  v969[0] = off_10216D280;
  v969[1] = v1546;
  v970 = v969;
  sub_100AEA22C(a1, 120, &v966);
  v233 = v970;
  if (v970 == v969)
  {
    v234 = 4;
    v233 = v969;
  }
  else
  {
    if (!v970)
      goto LABEL_816;
    v234 = 5;
  }
  (*(void (**)(void))(*v233 + 8 * v234))();
LABEL_816:
  if (SHIBYTE(v966.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v966.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v961, "medicalNotesAvailability");
  v963 = 0;
  v964[0] = off_10216D300;
  v964[1] = v1546;
  v965 = v964;
  sub_100AEA22C(a1, 121, &v961);
  v235 = v965;
  if (v965 == v964)
  {
    v236 = 4;
    v235 = v964;
  }
  else
  {
    if (!v965)
      goto LABEL_823;
    v236 = 5;
  }
  (*(void (**)(void))(*v235 + 8 * v236))();
LABEL_823:
  if (SHIBYTE(v961.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v961.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v956, "allergyDetailsAvailability");
  v958 = 0;
  v959[0] = off_10216D380;
  v959[1] = v1546;
  v960 = v959;
  sub_100AEA22C(a1, 122, &v956);
  v237 = v960;
  if (v960 == v959)
  {
    v238 = 4;
    v237 = v959;
  }
  else
  {
    if (!v960)
      goto LABEL_830;
    v238 = 5;
  }
  (*(void (**)(void))(*v237 + 8 * v238))();
LABEL_830:
  if (SHIBYTE(v956.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v956.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v951, "medicationsAvailability");
  v953 = 0;
  v954[0] = off_10216D400;
  v954[1] = v1546;
  v955 = v954;
  sub_100AEA22C(a1, 123, &v951);
  v239 = v955;
  if (v955 == v954)
  {
    v240 = 4;
    v239 = v954;
  }
  else
  {
    if (!v955)
      goto LABEL_837;
    v240 = 5;
  }
  (*(void (**)(void))(*v239 + 8 * v240))();
LABEL_837:
  if (SHIBYTE(v951.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v951.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v946, "emergencyContactsAvailability");
  v948 = 0;
  v949[0] = off_10216D480;
  v949[1] = v1546;
  v950 = v949;
  sub_100AEA22C(a1, 124, &v946);
  v241 = v950;
  if (v950 == v949)
  {
    v242 = 4;
    v241 = v949;
  }
  else
  {
    if (!v950)
      goto LABEL_844;
    v242 = 5;
  }
  (*(void (**)(void))(*v241 + 8 * v242))();
LABEL_844:
  if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v946.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v941, "medicalConditionsAvailability");
  v943 = 0;
  v944[0] = off_10216D500;
  v944[1] = v1546;
  v945 = v944;
  sub_100AEA22C(a1, 125, &v941);
  v243 = v945;
  if (v945 == v944)
  {
    v244 = 4;
    v243 = v944;
  }
  else
  {
    if (!v945)
      goto LABEL_851;
    v244 = 5;
  }
  (*(void (**)(void))(*v243 + 8 * v244))();
LABEL_851:
  if (SHIBYTE(v941.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v941.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v936, "devicePrimaryLanguage");
  v938 = 0;
  v939[0] = off_10216D580;
  v939[1] = v1546;
  v940 = v939;
  sub_100AEA22C(a1, 126, &v936);
  v245 = v940;
  if (v940 == v939)
  {
    v246 = 4;
    v245 = v939;
  }
  else
  {
    if (!v940)
      goto LABEL_858;
    v246 = 5;
  }
  (*(void (**)(void))(*v245 + 8 * v246))();
LABEL_858:
  if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v936.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v931, "deviceSystemLanguage");
  v933 = 0;
  v934[0] = off_10216D600;
  v934[1] = v1546;
  v935 = v934;
  sub_100AEA22C(a1, 127, &v931);
  v247 = v935;
  if (v935 == v934)
  {
    v248 = 4;
    v247 = v934;
  }
  else
  {
    if (!v935)
      goto LABEL_865;
    v248 = 5;
  }
  (*(void (**)(void))(*v247 + 8 * v248))();
LABEL_865:
  if (SHIBYTE(v931.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v931.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v926, "dispatchableSearchAreaAvailability");
  v928 = 0;
  v929[0] = off_10216D680;
  v929[1] = v1546;
  v930 = v929;
  sub_100AEA22C(a1, 115, &v926);
  v249 = v930;
  if (v930 == v929)
  {
    v250 = 4;
    v249 = v929;
  }
  else
  {
    if (!v930)
      goto LABEL_872;
    v250 = 5;
  }
  (*(void (**)(void))(*v249 + 8 * v250))();
LABEL_872:
  if (SHIBYTE(v926.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v926.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v921, "daysSinceLastNameUpdate");
  v923 = 0;
  v924[0] = off_10216D700;
  v924[1] = v1546;
  v925 = v924;
  sub_100AEA22C(a1, 128, &v921);
  v251 = v925;
  if (v925 == v924)
  {
    v252 = 4;
    v251 = v924;
  }
  else
  {
    if (!v925)
      goto LABEL_879;
    v252 = 5;
  }
  (*(void (**)(void))(*v251 + 8 * v252))();
LABEL_879:
  if (SHIBYTE(v921.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v921.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v916, "daysSinceLastAgeUpdate");
  v918 = 0;
  v919[0] = off_10216D780;
  v919[1] = v1546;
  v920 = v919;
  sub_100AEA22C(a1, 129, &v916);
  v253 = v920;
  if (v920 == v919)
  {
    v254 = 4;
    v253 = v919;
  }
  else
  {
    if (!v920)
      goto LABEL_886;
    v254 = 5;
  }
  (*(void (**)(void))(*v253 + 8 * v254))();
LABEL_886:
  if (SHIBYTE(v916.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v916.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v911, "daysSinceLastWeightUpdate");
  v913 = 0;
  v914[0] = off_10216D800;
  v914[1] = v1546;
  v915 = v914;
  sub_100AEA22C(a1, 130, &v911);
  v255 = v915;
  if (v915 == v914)
  {
    v256 = 4;
    v255 = v914;
  }
  else
  {
    if (!v915)
      goto LABEL_893;
    v256 = 5;
  }
  (*(void (**)(void))(*v255 + 8 * v256))();
LABEL_893:
  if (SHIBYTE(v911.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v911.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v906, "daysSinceLastHeightUpdate");
  v908 = 0;
  v909[0] = off_10216D880;
  v909[1] = v1546;
  v910 = v909;
  sub_100AEA22C(a1, 131, &v906);
  v257 = v910;
  if (v910 == v909)
  {
    v258 = 4;
    v257 = v909;
  }
  else
  {
    if (!v910)
      goto LABEL_900;
    v258 = 5;
  }
  (*(void (**)(void))(*v257 + 8 * v258))();
LABEL_900:
  if (SHIBYTE(v906.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v906.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v901, "daysSinceLastMedicalNotesUpdate");
  v903 = 0;
  v904[0] = off_10216D900;
  v904[1] = v1546;
  v905 = v904;
  sub_100AEA22C(a1, 132, &v901);
  v259 = v905;
  if (v905 == v904)
  {
    v260 = 4;
    v259 = v904;
  }
  else
  {
    if (!v905)
      goto LABEL_907;
    v260 = 5;
  }
  (*(void (**)(void))(*v259 + 8 * v260))();
LABEL_907:
  if (SHIBYTE(v901.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v901.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v896, "daysSinceLastAllergyDetailsUpdate");
  v898 = 0;
  v899[0] = off_10216D980;
  v899[1] = v1546;
  v900 = v899;
  sub_100AEA22C(a1, 133, &v896);
  v261 = v900;
  if (v900 == v899)
  {
    v262 = 4;
    v261 = v899;
  }
  else
  {
    if (!v900)
      goto LABEL_914;
    v262 = 5;
  }
  (*(void (**)(void))(*v261 + 8 * v262))();
LABEL_914:
  if (SHIBYTE(v896.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v896.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v891, "daysSinceLastMedicationsUpdate");
  v893 = 0;
  v894[0] = off_10216DA00;
  v894[1] = v1546;
  v895 = v894;
  sub_100AEA22C(a1, 134, &v891);
  v263 = v895;
  if (v895 == v894)
  {
    v264 = 4;
    v263 = v894;
  }
  else
  {
    if (!v895)
      goto LABEL_921;
    v264 = 5;
  }
  (*(void (**)(void))(*v263 + 8 * v264))();
LABEL_921:
  if (SHIBYTE(v891.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v891.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v886, "daysSinceLastEmergencyContactsUpdate");
  v888 = 0;
  v889[0] = off_10216DA80;
  v889[1] = v1546;
  v890 = v889;
  sub_100AEA22C(a1, 135, &v886);
  v265 = v890;
  if (v890 == v889)
  {
    v266 = 4;
    v265 = v889;
  }
  else
  {
    if (!v890)
      goto LABEL_928;
    v266 = 5;
  }
  (*(void (**)(void))(*v265 + 8 * v266))();
LABEL_928:
  if (SHIBYTE(v886.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v886.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v881, "daysSinceLastMedicalConditionsUpdate");
  v883 = 0;
  v884[0] = off_10216DB00;
  v884[1] = v1546;
  v885 = v884;
  sub_100AEA22C(a1, 136, &v881);
  v267 = v885;
  if (v885 == v884)
  {
    v268 = 4;
    v267 = v884;
  }
  else
  {
    if (!v885)
      goto LABEL_935;
    v268 = 5;
  }
  (*(void (**)(void))(*v267 + 8 * v268))();
LABEL_935:
  if (SHIBYTE(v881.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v881.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v876, "daysSinceLastDevicePrimaryLanguageUpdate");
  v878 = 0;
  v879[0] = off_10216DB80;
  v879[1] = v1546;
  v880 = v879;
  sub_100AEA22C(a1, 137, &v876);
  v269 = v880;
  if (v880 == v879)
  {
    v270 = 4;
    v269 = v879;
  }
  else
  {
    if (!v880)
      goto LABEL_942;
    v270 = 5;
  }
  (*(void (**)(void))(*v269 + 8 * v270))();
LABEL_942:
  if (SHIBYTE(v876.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v876.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v871, "featureVersion");
  v873 = 0;
  v874[0] = off_10216DC00;
  v874[1] = v1546;
  v875 = v874;
  sub_100AEA22C(a1, 138, &v871);
  v271 = v875;
  if (v875 == v874)
  {
    v272 = 4;
    v271 = v874;
  }
  else
  {
    if (!v875)
      goto LABEL_949;
    v272 = 5;
  }
  (*(void (**)(void))(*v271 + 8 * v272))();
LABEL_949:
  if (SHIBYTE(v871.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v871.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v866, "callDuration");
  v868 = 0;
  v869[0] = off_10216DC80;
  v869[1] = v1546;
  v870 = v869;
  sub_100AEA22C(a1, 32, &v866);
  v273 = v870;
  if (v870 == v869)
  {
    v274 = 4;
    v273 = v869;
  }
  else
  {
    if (!v870)
      goto LABEL_956;
    v274 = 5;
  }
  (*(void (**)(void))(*v273 + 8 * v274))();
LABEL_956:
  if (SHIBYTE(v866.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v866.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v861, "apnsTokenReceived");
  v863 = 0;
  v864[0] = off_10216DD00;
  v864[1] = v1546;
  v865 = v864;
  sub_100AEA22C(a1, 190, &v861);
  v275 = v865;
  if (v865 == v864)
  {
    v276 = 4;
    v275 = v864;
  }
  else
  {
    if (!v865)
      goto LABEL_963;
    v276 = 5;
  }
  (*(void (**)(void))(*v275 + 8 * v276))();
LABEL_963:
  if (SHIBYTE(v861.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v861.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v856, "numRequestsReceived");
  v858 = 0;
  v859[0] = off_10216DD80;
  v859[1] = v1546;
  v860 = v859;
  sub_100AEA22C(a1, 191, &v856);
  v277 = v860;
  if (v860 == v859)
  {
    v278 = 4;
    v277 = v859;
  }
  else
  {
    if (!v860)
      goto LABEL_970;
    v278 = 5;
  }
  (*(void (**)(void))(*v277 + 8 * v278))();
LABEL_970:
  if (SHIBYTE(v856.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v856.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v851, "numSuccessfulRequestsReceived");
  v853 = 0;
  v854[0] = off_10216DE00;
  v854[1] = v1546;
  v855 = v854;
  sub_100AEA22C(a1, 192, &v851);
  v279 = v855;
  if (v855 == v854)
  {
    v280 = 4;
    v279 = v854;
  }
  else
  {
    if (!v855)
      goto LABEL_977;
    v280 = 5;
  }
  (*(void (**)(void))(*v279 + 8 * v280))();
LABEL_977:
  if (SHIBYTE(v851.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v851.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v846, "numControlPayloadsSent");
  v848 = 0;
  v849[0] = off_10216DE80;
  v849[1] = v1546;
  v850 = v849;
  sub_100AEA22C(a1, 193, &v846);
  v281 = v850;
  if (v850 == v849)
  {
    v282 = 4;
    v281 = v849;
  }
  else
  {
    if (!v850)
      goto LABEL_984;
    v282 = 5;
  }
  (*(void (**)(void))(*v281 + 8 * v282))();
LABEL_984:
  if (SHIBYTE(v846.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v846.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v841, "numSuccessfulControlPayloadsSent");
  v843 = 0;
  v844[0] = off_10216DF00;
  v844[1] = v1546;
  v845 = v844;
  sub_100AEA22C(a1, 194, &v841);
  v283 = v845;
  if (v845 == v844)
  {
    v284 = 4;
    v283 = v844;
  }
  else
  {
    if (!v845)
      goto LABEL_991;
    v284 = 5;
  }
  (*(void (**)(void))(*v283 + 8 * v284))();
LABEL_991:
  if (SHIBYTE(v841.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v841.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v836, "numRequestsDuringEEM");
  v838 = 0;
  v839[0] = off_10216DF80;
  v839[1] = v1546;
  v840 = v839;
  sub_100AEA22C(a1, 195, &v836);
  v285 = v840;
  if (v840 == v839)
  {
    v286 = 4;
    v285 = v839;
  }
  else
  {
    if (!v840)
      goto LABEL_998;
    v286 = 5;
  }
  (*(void (**)(void))(*v285 + 8 * v286))();
LABEL_998:
  if (SHIBYTE(v836.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v836.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v831, "numDuplicateRequests");
  v833 = 0;
  v834[0] = off_10216E000;
  v834[1] = v1546;
  v835 = v834;
  sub_100AEA22C(a1, 196, &v831);
  v287 = v835;
  if (v835 == v834)
  {
    v288 = 4;
    v287 = v834;
  }
  else
  {
    if (!v835)
      goto LABEL_1005;
    v288 = 5;
  }
  (*(void (**)(void))(*v287 + 8 * v288))();
LABEL_1005:
  if (SHIBYTE(v831.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v831.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v826, "locationdRestartedDuringSession");
  v828 = 0;
  v829[0] = off_10216E080;
  v829[1] = v1546;
  v830 = v829;
  sub_100AEA22C(a1, 197, &v826);
  v289 = v830;
  if (v830 == v829)
  {
    v290 = 4;
    v289 = v829;
  }
  else
  {
    if (!v830)
      goto LABEL_1012;
    v290 = 5;
  }
  (*(void (**)(void))(*v289 + 8 * v290))();
LABEL_1012:
  if (SHIBYTE(v826.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v826.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v821, "firstRequestTypeReceived");
  v823 = 0;
  v824[0] = off_10216E100;
  v824[1] = v1546;
  v825 = v824;
  sub_100AEA22C(a1, 198, &v821);
  v291 = v825;
  if (v825 == v824)
  {
    v292 = 4;
    v291 = v824;
  }
  else
  {
    if (!v825)
      goto LABEL_1019;
    v292 = 5;
  }
  (*(void (**)(void))(*v291 + 8 * v292))();
LABEL_1019:
  if (SHIBYTE(v821.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v821.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v816, "numStreamingRequests");
  v818 = 0;
  v819[0] = off_10216E180;
  v819[1] = v1546;
  v820 = v819;
  sub_100AEA22C(a1, 199, &v816);
  v293 = v820;
  if (v820 == v819)
  {
    v294 = 4;
    v293 = v819;
  }
  else
  {
    if (!v820)
      goto LABEL_1026;
    v294 = 5;
  }
  (*(void (**)(void))(*v293 + 8 * v294))();
LABEL_1026:
  if (SHIBYTE(v816.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v816.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v811, "numUploadRequests");
  v813 = 0;
  v814[0] = off_10216E200;
  v814[1] = v1546;
  v815 = v814;
  sub_100AEA22C(a1, 200, &v811);
  v295 = v815;
  if (v815 == v814)
  {
    v296 = 4;
    v295 = v814;
  }
  else
  {
    if (!v815)
      goto LABEL_1033;
    v296 = 5;
  }
  (*(void (**)(void))(*v295 + 8 * v296))();
LABEL_1033:
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v806, "numDuplicateMediaSelections");
  v808 = 0;
  v809[0] = off_10216E280;
  v809[1] = v1546;
  v810 = v809;
  sub_100AEA22C(a1, 201, &v806);
  v297 = v810;
  if (v810 == v809)
  {
    v298 = 4;
    v297 = v809;
  }
  else
  {
    if (!v810)
      goto LABEL_1040;
    v298 = 5;
  }
  (*(void (**)(void))(*v297 + 8 * v298))();
LABEL_1040:
  if (SHIBYTE(v806.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v806.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v801, "totalItems");
  v803 = 0;
  v804[0] = off_10216E300;
  v804[1] = v1546;
  v805 = v804;
  sub_100AEA22C(a1, 202, &v801);
  v299 = v805;
  if (v805 == v804)
  {
    v300 = 4;
    v299 = v804;
  }
  else
  {
    if (!v805)
      goto LABEL_1047;
    v300 = 5;
  }
  (*(void (**)(void))(*v299 + 8 * v300))();
LABEL_1047:
  if (SHIBYTE(v801.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v801.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v796, "numImages");
  v798 = 0;
  v799[0] = off_10216E380;
  v799[1] = v1546;
  v800 = v799;
  sub_100AEA22C(a1, 203, &v796);
  v301 = v800;
  if (v800 == v799)
  {
    v302 = 4;
    v301 = v799;
  }
  else
  {
    if (!v800)
      goto LABEL_1054;
    v302 = 5;
  }
  (*(void (**)(void))(*v301 + 8 * v302))();
LABEL_1054:
  if (SHIBYTE(v796.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v796.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v791, "numVideos");
  v793 = 0;
  v794[0] = off_10216E400;
  v794[1] = v1546;
  v795 = v794;
  sub_100AEA22C(a1, 204, &v791);
  v303 = v795;
  if (v795 == v794)
  {
    v304 = 4;
    v303 = v794;
  }
  else
  {
    if (!v795)
      goto LABEL_1061;
    v304 = 5;
  }
  (*(void (**)(void))(*v303 + 8 * v304))();
LABEL_1061:
  if (SHIBYTE(v791.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v791.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v786, "batteryLevelChange");
  v788 = 0;
  v789[0] = off_10216E480;
  v789[1] = v1546;
  v790 = v789;
  sub_100AEA22C(a1, 205, &v786);
  v305 = v790;
  if (v790 == v789)
  {
    v306 = 4;
    v305 = v789;
  }
  else
  {
    if (!v790)
      goto LABEL_1068;
    v306 = 5;
  }
  (*(void (**)(void))(*v305 + 8 * v306))();
LABEL_1068:
  if (SHIBYTE(v786.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v786.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v781, "powerSourceConnected");
  v783 = 0;
  v784[0] = off_10216E500;
  v784[1] = v1546;
  v785 = v784;
  sub_100AEA22C(a1, 206, &v781);
  v307 = v785;
  if (v785 == v784)
  {
    v308 = 4;
    v307 = v784;
  }
  else
  {
    if (!v785)
      goto LABEL_1075;
    v308 = 5;
  }
  (*(void (**)(void))(*v307 + 8 * v308))();
LABEL_1075:
  if (SHIBYTE(v781.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v781.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v776, "batteryLevelAtStartOfCall");
  v778 = 0;
  v779[0] = off_10216E580;
  v779[1] = v1546;
  v780 = v779;
  sub_100AEA22C(a1, 207, &v776);
  v309 = v780;
  if (v780 == v779)
  {
    v310 = 4;
    v309 = v779;
  }
  else
  {
    if (!v780)
      goto LABEL_1082;
    v310 = 5;
  }
  (*(void (**)(void))(*v309 + 8 * v310))();
LABEL_1082:
  if (SHIBYTE(v776.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v776.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v771, "batteryLevelAtEndOfCall");
  v773 = 0;
  v774[0] = off_10216E600;
  v774[1] = v1546;
  v775 = v774;
  sub_100AEA22C(a1, 208, &v771);
  v311 = v775;
  if (v775 == v774)
  {
    v312 = 4;
    v311 = v774;
  }
  else
  {
    if (!v775)
      goto LABEL_1089;
    v312 = 5;
  }
  (*(void (**)(void))(*v311 + 8 * v312))();
LABEL_1089:
  if (SHIBYTE(v771.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v771.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v766, "partnerID");
  v768 = 0;
  v769[0] = off_10216E680;
  v769[1] = v1546;
  v770 = v769;
  sub_100AEA22C(a1, 209, &v766);
  v313 = v770;
  if (v770 == v769)
  {
    v314 = 4;
    v313 = v769;
  }
  else
  {
    if (!v770)
      goto LABEL_1096;
    v314 = 5;
  }
  (*(void (**)(void))(*v313 + 8 * v314))();
LABEL_1096:
  if (SHIBYTE(v766.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v766.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v761, "psapID");
  v763 = 0;
  v764[0] = off_10216E700;
  v764[1] = v1546;
  v765 = v764;
  sub_100AEA22C(a1, 210, &v761);
  v315 = v765;
  if (v765 == v764)
  {
    v316 = 4;
    v315 = v764;
  }
  else
  {
    if (!v765)
      goto LABEL_1103;
    v316 = 5;
  }
  (*(void (**)(void))(*v315 + 8 * v316))();
LABEL_1103:
  if (SHIBYTE(v761.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v761.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v756, "geofenceID");
  v758 = 0;
  v759[0] = off_10216E780;
  v759[1] = v1546;
  v760 = v759;
  sub_100AEA22C(a1, 211, &v756);
  v317 = v760;
  if (v760 == v759)
  {
    v318 = 4;
    v317 = v759;
  }
  else
  {
    if (!v760)
      goto LABEL_1110;
    v318 = 5;
  }
  (*(void (**)(void))(*v317 + 8 * v318))();
LABEL_1110:
  if (SHIBYTE(v756.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v756.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v751, "requestType");
  v753 = 0;
  v754[0] = off_10216E800;
  v754[1] = v1546;
  v755 = v754;
  sub_100AEA22C(a1, 212, &v751);
  v319 = v755;
  if (v755 == v754)
  {
    v320 = 4;
    v319 = v754;
  }
  else
  {
    if (!v755)
      goto LABEL_1117;
    v320 = 5;
  }
  (*(void (**)(void))(*v319 + 8 * v320))();
LABEL_1117:
  if (SHIBYTE(v751.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v751.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v746, "requestStatusAtFirstUserResponse");
  v748 = 0;
  v749[0] = off_10216E880;
  v749[1] = v1546;
  v750 = v749;
  sub_100AEA22C(a1, 213, &v746);
  v321 = v750;
  if (v750 == v749)
  {
    v322 = 4;
    v321 = v749;
  }
  else
  {
    if (!v750)
      goto LABEL_1124;
    v322 = 5;
  }
  (*(void (**)(void))(*v321 + 8 * v322))();
LABEL_1124:
  if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v746.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v741, "requestStatusAtCallEnd");
  v743 = 0;
  v744[0] = off_10216E900;
  v744[1] = v1546;
  v745 = v744;
  sub_100AEA22C(a1, 214, &v741);
  v323 = v745;
  if (v745 == v744)
  {
    v324 = 4;
    v323 = v744;
  }
  else
  {
    if (!v745)
      goto LABEL_1131;
    v324 = 5;
  }
  (*(void (**)(void))(*v323 + 8 * v324))();
LABEL_1131:
  if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v741.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v736, "receivedTimeSinceSessionStart");
  v738 = 0;
  v739[0] = off_10216E980;
  v739[1] = v1546;
  v740 = v739;
  sub_100AEA22C(a1, 215, &v736);
  v325 = v740;
  if (v740 == v739)
  {
    v326 = 4;
    v325 = v739;
  }
  else
  {
    if (!v740)
      goto LABEL_1138;
    v326 = 5;
  }
  (*(void (**)(void))(*v325 + 8 * v326))();
LABEL_1138:
  if (SHIBYTE(v736.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v736.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v731, "receivedTimeToFirstUserResponse");
  v733 = 0;
  v734[0] = off_10216EA00;
  v734[1] = v1546;
  v735 = v734;
  sub_100AEA22C(a1, 216, &v731);
  v327 = v735;
  if (v735 == v734)
  {
    v328 = 4;
    v327 = v734;
  }
  else
  {
    if (!v735)
      goto LABEL_1145;
    v328 = 5;
  }
  (*(void (**)(void))(*v327 + 8 * v328))();
LABEL_1145:
  if (SHIBYTE(v731.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v731.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v726, "receivedTimeToAcceptTime");
  v728 = 0;
  v729[0] = off_10216EA80;
  v729[1] = v1546;
  v730 = v729;
  sub_100AEA22C(a1, 217, &v726);
  v329 = v730;
  if (v730 == v729)
  {
    v330 = 4;
    v329 = v729;
  }
  else
  {
    if (!v730)
      goto LABEL_1152;
    v330 = 5;
  }
  (*(void (**)(void))(*v329 + 8 * v330))();
LABEL_1152:
  if (SHIBYTE(v726.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v726.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v721, "numMediaSelectIterations");
  v723 = 0;
  v724[0] = off_10216EB00;
  v724[1] = v1546;
  v725 = v724;
  sub_100AEA22C(a1, 218, &v721);
  v331 = v725;
  if (v725 == v724)
  {
    v332 = 4;
    v331 = v724;
  }
  else
  {
    if (!v725)
      goto LABEL_1159;
    v332 = 5;
  }
  (*(void (**)(void))(*v331 + 8 * v332))();
LABEL_1159:
  if (SHIBYTE(v721.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v721.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v716, "requestTransmissionTime");
  v718 = 0;
  v719[0] = off_10216EB80;
  v719[1] = v1546;
  v720 = v719;
  sub_100AEA22C(a1, 219, &v716);
  v333 = v720;
  if (v720 == v719)
  {
    v334 = 4;
    v333 = v719;
  }
  else
  {
    if (!v720)
      goto LABEL_1166;
    v334 = 5;
  }
  (*(void (**)(void))(*v333 + 8 * v334))();
LABEL_1166:
  if (SHIBYTE(v716.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v716.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v711, "thermalLevelAtStartOfCall");
  v713 = 0;
  v714[0] = off_10216EC00;
  v714[1] = v1546;
  v715 = v714;
  sub_100AEA22C(a1, 220, &v711);
  v335 = v715;
  if (v715 == v714)
  {
    v336 = 4;
    v335 = v714;
  }
  else
  {
    if (!v715)
      goto LABEL_1173;
    v336 = 5;
  }
  (*(void (**)(void))(*v335 + 8 * v336))();
LABEL_1173:
  if (SHIBYTE(v711.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v711.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v706, "maxThermalLevelInCall");
  v708 = 0;
  v709[0] = off_10216EC80;
  v709[1] = v1546;
  v710 = v709;
  sub_100AEA22C(a1, 221, &v706);
  v337 = v710;
  if (v710 == v709)
  {
    v338 = 4;
    v337 = v709;
  }
  else
  {
    if (!v710)
      goto LABEL_1180;
    v338 = 5;
  }
  (*(void (**)(void))(*v337 + 8 * v338))();
LABEL_1180:
  if (SHIBYTE(v706.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v706.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v701, "thermalLevelAtEndOfCall");
  v703 = 0;
  v704[0] = off_10216ED00;
  v704[1] = v1546;
  v705 = v704;
  sub_100AEA22C(a1, 222, &v701);
  v339 = v705;
  if (v705 == v704)
  {
    v340 = 4;
    v339 = v704;
  }
  else
  {
    if (!v705)
      goto LABEL_1187;
    v340 = 5;
  }
  (*(void (**)(void))(*v339 + 8 * v340))();
LABEL_1187:
  if (SHIBYTE(v701.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v701.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v696, "peakPowerAtStartOfCall");
  v698 = 0;
  v699[0] = off_10216ED80;
  v699[1] = v1546;
  v700 = v699;
  sub_100AEA22C(a1, 223, &v696);
  v341 = v700;
  if (v700 == v699)
  {
    v342 = 4;
    v341 = v699;
  }
  else
  {
    if (!v700)
      goto LABEL_1194;
    v342 = 5;
  }
  (*(void (**)(void))(*v341 + 8 * v342))();
LABEL_1194:
  if (SHIBYTE(v696.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v696.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v691, "maxPeakPowerInCall");
  v693 = 0;
  v694[0] = off_10216EE00;
  v694[1] = v1546;
  v695 = v694;
  sub_100AEA22C(a1, 224, &v691);
  v343 = v695;
  if (v695 == v694)
  {
    v344 = 4;
    v343 = v694;
  }
  else
  {
    if (!v695)
      goto LABEL_1201;
    v344 = 5;
  }
  (*(void (**)(void))(*v343 + 8 * v344))();
LABEL_1201:
  if (SHIBYTE(v691.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v691.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v686, "peakPowerAtEndOfCall");
  v688 = 0;
  v689[0] = off_10216EE80;
  v689[1] = v1546;
  v690 = v689;
  sub_100AEA22C(a1, 225, &v686);
  v345 = v690;
  if (v690 == v689)
  {
    v346 = 4;
    v345 = v689;
  }
  else
  {
    if (!v690)
      goto LABEL_1208;
    v346 = 5;
  }
  (*(void (**)(void))(*v345 + 8 * v346))();
LABEL_1208:
  if (SHIBYTE(v686.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v686.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v681, "phoneNumberAvailability");
  v683 = 0;
  v684[0] = off_10216EF00;
  v684[1] = v1546;
  v685 = v684;
  sub_100AEA22C(a1, 142, &v681);
  v347 = v685;
  if (v685 == v684)
  {
    v348 = 4;
    v347 = v684;
  }
  else
  {
    if (!v685)
      goto LABEL_1215;
    v348 = 5;
  }
  (*(void (**)(void))(*v347 + 8 * v348))();
LABEL_1215:
  if (SHIBYTE(v681.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v681.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v676, "timeSinceProvisioning");
  v678 = 0;
  v679[0] = off_10216EF80;
  v679[1] = v1546;
  v680 = v679;
  sub_100AEA22C(a1, 143, &v676);
  v349 = v680;
  if (v680 == v679)
  {
    v350 = 4;
    v349 = v679;
  }
  else
  {
    if (!v680)
      goto LABEL_1222;
    v350 = 5;
  }
  (*(void (**)(void))(*v349 + 8 * v350))();
LABEL_1222:
  if (SHIBYTE(v676.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v676.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v671, "timeWithoutNativeNumber");
  v673 = 0;
  v674[0] = off_10216F000;
  v674[1] = v1546;
  v675 = v674;
  sub_100AEA22C(a1, 144, &v671);
  v351 = v675;
  if (v675 == v674)
  {
    v352 = 4;
    v351 = v674;
  }
  else
  {
    if (!v675)
      goto LABEL_1229;
    v352 = 5;
  }
  (*(void (**)(void))(*v351 + 8 * v352))();
LABEL_1229:
  if (SHIBYTE(v671.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v671.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v666, "isEEDEnabledCarrier");
  v668 = 0;
  v669[0] = off_10216F080;
  v669[1] = v1546;
  v670 = v669;
  sub_100AEA22C(a1, 145, &v666);
  v353 = v670;
  if (v670 == v669)
  {
    v354 = 4;
    v353 = v669;
  }
  else
  {
    if (!v670)
      goto LABEL_1236;
    v354 = 5;
  }
  (*(void (**)(void))(*v353 + 8 * v354))();
LABEL_1236:
  if (SHIBYTE(v666.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v666.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v661, "simInstance");
  v663 = 0;
  v664[0] = off_10216F100;
  v664[1] = v1546;
  v665 = v664;
  sub_100AEA22C(a1, 146, &v661);
  v355 = v665;
  if (v665 == v664)
  {
    v356 = 4;
    v355 = v664;
  }
  else
  {
    if (!v665)
      goto LABEL_1243;
    v356 = 5;
  }
  (*(void (**)(void))(*v355 + 8 * v356))();
LABEL_1243:
  if (SHIBYTE(v661.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v661.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v656, "catalogDownloadDuration");
  v658 = 0;
  v659[0] = off_10216F180;
  v659[1] = v1546;
  v660 = v659;
  sub_100AEA22C(a1, 147, &v656);
  v357 = v660;
  if (v660 == v659)
  {
    v358 = 4;
    v357 = v659;
  }
  else
  {
    if (!v660)
      goto LABEL_1250;
    v358 = 5;
  }
  (*(void (**)(void))(*v357 + 8 * v358))();
LABEL_1250:
  if (SHIBYTE(v656.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v656.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v651, "daysSinceLastCatalogDownloadAttempt");
  v653 = 0;
  v654[0] = off_10216F200;
  v654[1] = v1546;
  v655 = v654;
  sub_100AEA22C(a1, 148, &v651);
  v359 = v655;
  if (v655 == v654)
  {
    v360 = 4;
    v359 = v654;
  }
  else
  {
    if (!v655)
      goto LABEL_1257;
    v360 = 5;
  }
  (*(void (**)(void))(*v359 + 8 * v360))();
LABEL_1257:
  if (SHIBYTE(v651.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v651.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v646, "daysSinceLastCatalogDownloadSuccess");
  v648 = 0;
  v649[0] = off_10216F280;
  v649[1] = v1546;
  v650 = v649;
  sub_100AEA22C(a1, 149, &v646);
  v361 = v650;
  if (v650 == v649)
  {
    v362 = 4;
    v361 = v649;
  }
  else
  {
    if (!v650)
      goto LABEL_1264;
    v362 = 5;
  }
  (*(void (**)(void))(*v361 + 8 * v362))();
LABEL_1264:
  if (SHIBYTE(v646.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v646.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v641, "aggressiveCatalogDownloadCriteriaUsed");
  v643 = 0;
  v644[0] = off_10216F300;
  v644[1] = v1546;
  v645 = v644;
  sub_100AEA22C(a1, 150, &v641);
  v363 = v645;
  if (v645 == v644)
  {
    v364 = 4;
    v363 = v644;
  }
  else
  {
    if (!v645)
      goto LABEL_1271;
    v364 = 5;
  }
  (*(void (**)(void))(*v363 + 8 * v364))();
LABEL_1271:
  if (SHIBYTE(v641.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v641.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v636, "catalogDownloadResult");
  v638 = 0;
  v639[0] = off_10216F380;
  v639[1] = v1546;
  v640 = v639;
  sub_100AEA22C(a1, 151, &v636);
  v365 = v640;
  if (v640 == v639)
  {
    v366 = 4;
    v365 = v639;
  }
  else
  {
    if (!v640)
      goto LABEL_1278;
    v366 = 5;
  }
  (*(void (**)(void))(*v365 + 8 * v366))();
LABEL_1278:
  if (SHIBYTE(v636.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v636.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v631, "mobileAssetType");
  v633 = 0;
  v634[0] = off_10216F400;
  v634[1] = v1546;
  v635 = v634;
  sub_100AEA22C(a1, 152, &v631);
  v367 = v635;
  if (v635 == v634)
  {
    v368 = 4;
    v367 = v634;
  }
  else
  {
    if (!v635)
      goto LABEL_1285;
    v368 = 5;
  }
  (*(void (**)(void))(*v367 + 8 * v368))();
LABEL_1285:
  if (SHIBYTE(v631.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v631.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v626, "assetDownloadDuration");
  v628 = 0;
  v629[0] = off_10216F480;
  v629[1] = v1546;
  v630 = v629;
  sub_100AEA22C(a1, 153, &v626);
  v369 = v630;
  if (v630 == v629)
  {
    v370 = 4;
    v369 = v629;
  }
  else
  {
    if (!v630)
      goto LABEL_1292;
    v370 = 5;
  }
  (*(void (**)(void))(*v369 + 8 * v370))();
LABEL_1292:
  if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v626.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v621, "daysSinceLastAssetDownloadAttempt");
  v623 = 0;
  v624[0] = off_10216F500;
  v624[1] = v1546;
  v625 = v624;
  sub_100AEA22C(a1, 154, &v621);
  v371 = v625;
  if (v625 == v624)
  {
    v372 = 4;
    v371 = v624;
  }
  else
  {
    if (!v625)
      goto LABEL_1299;
    v372 = 5;
  }
  (*(void (**)(void))(*v371 + 8 * v372))();
LABEL_1299:
  if (SHIBYTE(v621.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v621.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v616, "daysSinceLastAssetDownloadSuccess");
  v618 = 0;
  v619[0] = off_10216F580;
  v619[1] = v1546;
  v620 = v619;
  sub_100AEA22C(a1, 155, &v616);
  v373 = v620;
  if (v620 == v619)
  {
    v374 = 4;
    v373 = v619;
  }
  else
  {
    if (!v620)
      goto LABEL_1306;
    v374 = 5;
  }
  (*(void (**)(void))(*v373 + 8 * v374))();
LABEL_1306:
  if (SHIBYTE(v616.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v616.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v611, "assetDownloadResult");
  v613 = 0;
  v614[0] = off_10216F600;
  v614[1] = v1546;
  v615 = v614;
  sub_100AEA22C(a1, 156, &v611);
  v375 = v615;
  if (v615 == v614)
  {
    v376 = 4;
    v375 = v614;
  }
  else
  {
    if (!v615)
      goto LABEL_1313;
    v376 = 5;
  }
  (*(void (**)(void))(*v375 + 8 * v376))();
LABEL_1313:
  if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v611.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v606, "genericAssetUsed");
  v608 = 0;
  v609[0] = off_10216F680;
  v609[1] = v1546;
  v610 = v609;
  sub_100AEA22C(a1, 157, &v606);
  v377 = v610;
  if (v610 == v609)
  {
    v378 = 4;
    v377 = v609;
  }
  else
  {
    if (!v610)
      goto LABEL_1320;
    v378 = 5;
  }
  (*(void (**)(void))(*v377 + 8 * v378))();
LABEL_1320:
  if (SHIBYTE(v606.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v606.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v601, "mobileAssetComponent");
  v603 = 0;
  v604[0] = off_10216F700;
  v604[1] = v1546;
  v605 = v604;
  sub_100AEA22C(a1, 158, &v601);
  v379 = v605;
  if (v605 == v604)
  {
    v380 = 4;
    v379 = v604;
  }
  else
  {
    if (!v605)
      goto LABEL_1327;
    v380 = 5;
  }
  (*(void (**)(void))(*v379 + 8 * v380))();
LABEL_1327:
  if (SHIBYTE(v601.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v601.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v596, "mobileAssetVersion");
  v598 = 0;
  v599[0] = off_10216F780;
  v599[1] = v1546;
  v600 = v599;
  sub_100AEA22C(a1, 159, &v596);
  v381 = v600;
  if (v600 == v599)
  {
    v382 = 4;
    v381 = v599;
  }
  else
  {
    if (!v600)
      goto LABEL_1334;
    v382 = 5;
  }
  (*(void (**)(void))(*v381 + 8 * v382))();
LABEL_1334:
  if (SHIBYTE(v596.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v596.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v591, "daysSinceLastAssetDownloadAttempt");
  v593 = 0;
  v594[0] = off_10216F800;
  v594[1] = v1546;
  v595 = v594;
  sub_100AEA22C(a1, 162, &v591);
  v383 = v595;
  if (v595 == v594)
  {
    v384 = 4;
    v383 = v594;
  }
  else
  {
    if (!v595)
      goto LABEL_1341;
    v384 = 5;
  }
  (*(void (**)(void))(*v383 + 8 * v384))();
LABEL_1341:
  if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v591.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v586, "daysSinceLastAssetDownloadSuccess");
  v588 = 0;
  v589[0] = off_10216F880;
  v589[1] = v1546;
  v590 = v589;
  sub_100AEA22C(a1, 163, &v586);
  v385 = v590;
  if (v590 == v589)
  {
    v386 = 4;
    v385 = v589;
  }
  else
  {
    if (!v590)
      goto LABEL_1348;
    v386 = 5;
  }
  (*(void (**)(void))(*v385 + 8 * v386))();
LABEL_1348:
  if (SHIBYTE(v586.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v586.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v581, "daysSinceLastCatalogDownloadAttempt");
  v583 = 0;
  v584[0] = off_10216F900;
  v584[1] = v1546;
  v585 = v584;
  sub_100AEA22C(a1, 164, &v581);
  v387 = v585;
  if (v585 == v584)
  {
    v388 = 4;
    v387 = v584;
  }
  else
  {
    if (!v585)
      goto LABEL_1355;
    v388 = 5;
  }
  (*(void (**)(void))(*v387 + 8 * v388))();
LABEL_1355:
  if (SHIBYTE(v581.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v581.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v576, "daysSinceLastCatalogDownloadSuccess");
  v578 = 0;
  v579[0] = off_10216F980;
  v579[1] = v1546;
  v580 = v579;
  sub_100AEA22C(a1, 165, &v576);
  v389 = v580;
  if (v580 == v579)
  {
    v390 = 4;
    v389 = v579;
  }
  else
  {
    if (!v580)
      goto LABEL_1362;
    v390 = 5;
  }
  (*(void (**)(void))(*v389 + 8 * v390))();
LABEL_1362:
  if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v576.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v571, "aggressiveCatelogDownloadCriteriaUsed");
  v573 = 0;
  v574[0] = off_10216FA00;
  v574[1] = v1546;
  v575 = v574;
  sub_100AEA22C(a1, 160, &v571);
  v391 = v575;
  if (v575 == v574)
  {
    v392 = 4;
    v391 = v574;
  }
  else
  {
    if (!v575)
      goto LABEL_1369;
    v392 = 5;
  }
  (*(void (**)(void))(*v391 + 8 * v392))();
LABEL_1369:
  if (SHIBYTE(v571.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v571.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v566, "mobileAssetType");
  v568 = 0;
  v569[0] = off_10216FA80;
  v569[1] = v1546;
  v570 = v569;
  sub_100AEA22C(a1, 161, &v566);
  v393 = v570;
  if (v570 == v569)
  {
    v394 = 4;
    v393 = v569;
  }
  else
  {
    if (!v570)
      goto LABEL_1376;
    v394 = 5;
  }
  (*(void (**)(void))(*v393 + 8 * v394))();
LABEL_1376:
  if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v566.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v561, "daysSinceLastAssetDownloadAttempt");
  v563 = 0;
  v564[0] = off_10216FB00;
  v564[1] = v1546;
  v565 = v564;
  sub_100AEA22C(a1, 166, &v561);
  v395 = v565;
  if (v565 == v564)
  {
    v396 = 4;
    v395 = v564;
  }
  else
  {
    if (!v565)
      goto LABEL_1383;
    v396 = 5;
  }
  (*(void (**)(void))(*v395 + 8 * v396))();
LABEL_1383:
  if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v561.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v556, "daysSinceLastAssetDownloadSuccess");
  v558 = 0;
  v559[0] = off_10216FB80;
  v559[1] = v1546;
  v560 = v559;
  sub_100AEA22C(a1, 167, &v556);
  v397 = v560;
  if (v560 == v559)
  {
    v398 = 4;
    v397 = v559;
  }
  else
  {
    if (!v560)
      goto LABEL_1390;
    v398 = 5;
  }
  (*(void (**)(void))(*v397 + 8 * v398))();
LABEL_1390:
  if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v556.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v551, "daysSinceLastCatalogDownloadAttempt");
  v553 = 0;
  v554[0] = off_10216FC00;
  v554[1] = v1546;
  v555 = v554;
  sub_100AEA22C(a1, 168, &v551);
  v399 = v555;
  if (v555 == v554)
  {
    v400 = 4;
    v399 = v554;
  }
  else
  {
    if (!v555)
      goto LABEL_1397;
    v400 = 5;
  }
  (*(void (**)(void))(*v399 + 8 * v400))();
LABEL_1397:
  if (SHIBYTE(v551.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v551.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v546, "daysSinceLastCatalogDownloadSuccess");
  v548 = 0;
  v549[0] = off_10216FC80;
  v549[1] = v1546;
  v550 = v549;
  sub_100AEA22C(a1, 169, &v546);
  v401 = v550;
  if (v550 == v549)
  {
    v402 = 4;
    v401 = v549;
  }
  else
  {
    if (!v550)
      goto LABEL_1404;
    v402 = 5;
  }
  (*(void (**)(void))(*v401 + 8 * v402))();
LABEL_1404:
  if (SHIBYTE(v546.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v546.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v541, "genericAssetUsed");
  v543 = 0;
  v544[0] = off_10216FD00;
  v544[1] = v1546;
  v545 = v544;
  sub_100AEA22C(a1, 170, &v541);
  v403 = v545;
  if (v545 == v544)
  {
    v404 = 4;
    v403 = v544;
  }
  else
  {
    if (!v545)
      goto LABEL_1411;
    v404 = 5;
  }
  (*(void (**)(void))(*v403 + 8 * v404))();
LABEL_1411:
  if (SHIBYTE(v541.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v541.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v536, "mobileAssetComponent");
  v538 = 0;
  v539[0] = off_10216FD80;
  v539[1] = v1546;
  v540 = v539;
  sub_100AEA22C(a1, 171, &v536);
  v405 = v540;
  if (v540 == v539)
  {
    v406 = 4;
    v405 = v539;
  }
  else
  {
    if (!v540)
      goto LABEL_1418;
    v406 = 5;
  }
  (*(void (**)(void))(*v405 + 8 * v406))();
LABEL_1418:
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v536.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v531, "mobileAssetVersion");
  v533 = 0;
  v534[0] = off_10216FE00;
  v534[1] = v1546;
  v535 = v534;
  sub_100AEA22C(a1, 172, &v531);
  v407 = v535;
  if (v535 == v534)
  {
    v408 = 4;
    v407 = v534;
  }
  else
  {
    if (!v535)
      goto LABEL_1425;
    v408 = 5;
  }
  (*(void (**)(void))(*v407 + 8 * v408))();
LABEL_1425:
  if (SHIBYTE(v531.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v531.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v526, "ERAResult");
  v528 = 0;
  v529[0] = off_10216FE80;
  v529[1] = v1546;
  v530 = v529;
  sub_100AEA22C(a1, 173, &v526);
  v409 = v530;
  if (v530 == v529)
  {
    v410 = 4;
    v409 = v529;
  }
  else
  {
    if (!v530)
      goto LABEL_1432;
    v410 = 5;
  }
  (*(void (**)(void))(*v409 + 8 * v410))();
LABEL_1432:
  if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v526.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v521, "apiResponseTime");
  v523 = 0;
  v524[0] = off_10216FF00;
  v524[1] = v1546;
  v525 = v524;
  sub_100AEA22C(a1, 174, &v521);
  v411 = v525;
  if (v525 == v524)
  {
    v412 = 4;
    v411 = v524;
  }
  else
  {
    if (!v525)
      goto LABEL_1439;
    v412 = 5;
  }
  (*(void (**)(void))(*v411 + 8 * v412))();
LABEL_1439:
  if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v521.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v516, "placemarkLocCount");
  v518 = 0;
  v519[0] = off_10216FF80;
  v519[1] = v1546;
  v520 = v519;
  sub_100AEA22C(a1, 175, &v516);
  v413 = v520;
  if (v520 == v519)
  {
    v414 = 4;
    v413 = v519;
  }
  else
  {
    if (!v520)
      goto LABEL_1446;
    v414 = 5;
  }
  (*(void (**)(void))(*v413 + 8 * v414))();
LABEL_1446:
  if (SHIBYTE(v516.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v516.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v511, "chosenPlacemarkLocConfidence");
  v513 = 0;
  v514[0] = off_102170000;
  v514[1] = v1546;
  v515 = v514;
  sub_100AEA22C(a1, 176, &v511);
  v415 = v515;
  if (v515 == v514)
  {
    v416 = 4;
    v415 = v514;
  }
  else
  {
    if (!v515)
      goto LABEL_1453;
    v416 = 5;
  }
  (*(void (**)(void))(*v415 + 8 * v416))();
LABEL_1453:
  if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v511.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v506, "chosenPlacemarkLocType");
  v508 = 0;
  v509[0] = off_102170080;
  v509[1] = v1546;
  v510 = v509;
  sub_100AEA22C(a1, 177, &v506);
  v417 = v510;
  if (v510 == v509)
  {
    v418 = 4;
    v417 = v509;
  }
  else
  {
    if (!v510)
      goto LABEL_1460;
    v418 = 5;
  }
  (*(void (**)(void))(*v417 + 8 * v418))();
LABEL_1460:
  if (SHIBYTE(v506.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v506.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v501, "chosenPlacemarkLocSource");
  v503 = 0;
  v504[0] = off_102170100;
  v504[1] = v1546;
  v505 = v504;
  sub_100AEA22C(a1, 178, &v501);
  v419 = v505;
  if (v505 == v504)
  {
    v420 = 4;
    v419 = v504;
  }
  else
  {
    if (!v505)
      goto LABEL_1467;
    v420 = 5;
  }
  (*(void (**)(void))(*v419 + 8 * v420))();
LABEL_1467:
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v496, "placemarkLocDeviationFromE911Loc");
  v498 = 0;
  v499[0] = off_102170180;
  v499[1] = v1546;
  v500 = v499;
  sub_100AEA22C(a1, 179, &v496);
  v421 = v500;
  if (v500 == v499)
  {
    v422 = 4;
    v421 = v499;
  }
  else
  {
    if (!v500)
      goto LABEL_1474;
    v422 = 5;
  }
  (*(void (**)(void))(*v421 + 8 * v422))();
LABEL_1474:
  if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v496.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v491, "placemarkLocDeviationFromCurrentDeviceLoc");
  v493 = 0;
  v494[0] = off_102170200;
  v494[1] = v1546;
  v495 = v494;
  sub_100AEA22C(a1, 180, &v491);
  v423 = v495;
  if (v495 == v494)
  {
    v424 = 4;
    v423 = v494;
  }
  else
  {
    if (!v495)
      goto LABEL_1481;
    v424 = 5;
  }
  (*(void (**)(void))(*v423 + 8 * v424))();
LABEL_1481:
  if (SHIBYTE(v491.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v491.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v486, "placemarkLocUncertainity");
  v488 = 0;
  v489[0] = off_102170280;
  v489[1] = v1546;
  v490 = v489;
  sub_100AEA22C(a1, 181, &v486);
  v425 = v490;
  if (v490 == v489)
  {
    v426 = 4;
    v425 = v489;
  }
  else
  {
    if (!v490)
      goto LABEL_1488;
    v426 = 5;
  }
  (*(void (**)(void))(*v425 + 8 * v426))();
LABEL_1488:
  if (SHIBYTE(v486.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v486.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v481, "e911LocUncertainity");
  v483 = 0;
  v484[0] = off_102170300;
  v484[1] = v1546;
  v485 = v484;
  sub_100AEA22C(a1, 182, &v481);
  v427 = v485;
  if (v485 == v484)
  {
    v428 = 4;
    v427 = v484;
  }
  else
  {
    if (!v485)
      goto LABEL_1495;
    v428 = 5;
  }
  (*(void (**)(void))(*v427 + 8 * v428))();
LABEL_1495:
  if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v481.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v476, "subPremiseFromMeCard");
  v478 = 0;
  v479[0] = off_102170380;
  v479[1] = v1546;
  v480 = v479;
  sub_100AEA22C(a1, 183, &v476);
  v429 = v480;
  if (v480 == v479)
  {
    v430 = 4;
    v429 = v479;
  }
  else
  {
    if (!v480)
      goto LABEL_1502;
    v430 = 5;
  }
  (*(void (**)(void))(*v429 + 8 * v430))();
LABEL_1502:
  if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v476.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v471, "lastInjectedAltAssistanceSource");
  v473 = 0;
  v474[0] = off_102170400;
  v474[1] = v1546;
  v475 = v474;
  sub_100AEA22C(a1, 184, &v471);
  v431 = v475;
  if (v475 == v474)
  {
    v432 = 4;
    v431 = v474;
  }
  else
  {
    if (!v475)
      goto LABEL_1509;
    v432 = 5;
  }
  (*(void (**)(void))(*v431 + 8 * v432))();
LABEL_1509:
  if (SHIBYTE(v471.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v471.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v466, "lastInjectedAltAssistanceUnc");
  v468 = 0;
  v469[0] = off_102170480;
  v469[1] = v1546;
  v470 = v469;
  sub_100AEA22C(a1, 185, &v466);
  v433 = v470;
  if (v470 == v469)
  {
    v434 = 4;
    v433 = v469;
  }
  else
  {
    if (!v470)
      goto LABEL_1516;
    v434 = 5;
  }
  (*(void (**)(void))(*v433 + 8 * v434))();
LABEL_1516:
  if (SHIBYTE(v466.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v466.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v461, "bestWifiAltUncertainty");
  v463 = 0;
  v464[0] = off_102170500;
  v464[1] = v1546;
  v465 = v464;
  sub_100AEA22C(a1, 186, &v461);
  v435 = v465;
  if (v465 == v464)
  {
    v436 = 4;
    v435 = v464;
  }
  else
  {
    if (!v465)
      goto LABEL_1523;
    v436 = 5;
  }
  (*(void (**)(void))(*v435 + 8 * v436))();
LABEL_1523:
  if (SHIBYTE(v461.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v461.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v456, "bestRpaAltUncertainty");
  v458 = 0;
  v459[0] = off_102170580;
  v459[1] = v1546;
  v460 = v459;
  sub_100AEA22C(a1, 187, &v456);
  v437 = v460;
  if (v460 == v459)
  {
    v438 = 4;
    v437 = v459;
  }
  else
  {
    if (!v460)
      goto LABEL_1530;
    v438 = 5;
  }
  (*(void (**)(void))(*v437 + 8 * v438))();
LABEL_1530:
  if (SHIBYTE(v456.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v456.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v451, "bestGpsAltUncertainty");
  v453 = 0;
  v454[0] = off_102170600;
  v454[1] = v1546;
  v455 = v454;
  sub_100AEA22C(a1, 188, &v451);
  v439 = v455;
  if (v455 == v454)
  {
    v440 = 4;
    v439 = v454;
  }
  else
  {
    if (!v455)
      goto LABEL_1537;
    v440 = 5;
  }
  (*(void (**)(void))(*v439 + 8 * v440))();
LABEL_1537:
  if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v451.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v446, "deviceInCMA");
  v448 = 0;
  v449[0] = off_102170680;
  v449[1] = v1546;
  v450 = v449;
  sub_100AEA22C(a1, 189, &v446);
  v441 = v450;
  if (v450 == v449)
  {
    v442 = 4;
    v441 = v449;
  }
  else
  {
    if (!v450)
      goto LABEL_1544;
    v442 = 5;
  }
  (*(void (**)(void))(*v441 + 8 * v442))();
LABEL_1544:
  if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v446.__r_.__value_.__l.__data_);
}

void sub_100AE8724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100AEA2A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100AE9410(uint64_t a1)
{
  NSObject *v2;
  _OWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  char *v6;
  char *v7;
  _DWORD *v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  const char *v15;
  uint8_t *v16;
  __int16 v17[8];
  uint8_t buf[8];
  void *v19;
  char *v20;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ca,defineEventRecipies", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v17[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#ca,defineEventRecipies", v17, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::defineEventRecipies()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v3 = operator new(0xDCuLL);
  *(_QWORD *)buf = v3;
  v20 = (char *)v3 + 220;
  v3[10] = xmmword_101C08148;
  v3[11] = unk_101C08158;
  v3[12] = xmmword_101C08168;
  *(_OWORD *)((char *)v3 + 204) = *(__int128 *)((char *)&xmmword_101C08168 + 12);
  v3[6] = xmmword_101C08108;
  v3[7] = unk_101C08118;
  v3[8] = xmmword_101C08128;
  v3[9] = unk_101C08138;
  v3[2] = xmmword_101C080C8;
  v3[3] = unk_101C080D8;
  v3[4] = xmmword_101C080E8;
  v3[5] = unk_101C080F8;
  *v3 = *(_OWORD *)"%";
  v3[1] = *(_OWORD *)")";
  v19 = (char *)v3 + 220;
  sub_100AEA308(a1, &xmmword_1023111E0, buf);
  if (*(_QWORD *)buf)
  {
    v19 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  v4 = operator new(0x3CuLL);
  *(_QWORD *)buf = v4;
  v20 = (char *)v4 + 60;
  *v4 = xmmword_101C08184;
  v4[1] = unk_101C08194;
  v4[2] = xmmword_101C081A4;
  *(_OWORD *)((char *)v4 + 44) = *(__int128 *)((char *)&xmmword_101C081A4 + 12);
  v19 = (char *)v4 + 60;
  sub_100AEA308(a1, &xmmword_102311210, buf);
  if (*(_QWORD *)buf)
  {
    v19 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  v5 = operator new(0x80uLL);
  *(_QWORD *)buf = v5;
  v20 = (char *)(v5 + 8);
  v5[4] = xmmword_101C08200;
  v5[5] = unk_101C08210;
  v5[6] = xmmword_101C08220;
  v5[7] = unk_101C08230;
  *v5 = xmmword_101C081C0;
  v5[1] = unk_101C081D0;
  v5[2] = xmmword_101C081E0;
  v5[3] = unk_101C081F0;
  v19 = v5 + 8;
  sub_100AEA308(a1, &xmmword_1023111F8, buf);
  if (*(_QWORD *)buf)
  {
    v19 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  v6 = (char *)operator new(0x14CuLL);
  v7 = v6 + 332;
  *(_QWORD *)buf = v6;
  v20 = v6 + 332;
  memcpy(v6, &unk_101C08240, 0x14CuLL);
  v19 = v7;
  sub_100AEA308(a1, &xmmword_102311240, buf);
  if (*(_QWORD *)buf)
  {
    v19 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  v8 = operator new(0x24uLL);
  *(_QWORD *)buf = v8;
  v20 = (char *)(v8 + 9);
  v8[8] = 61;
  *(_OWORD *)v8 = xmmword_101C0838C;
  *((_OWORD *)v8 + 1) = unk_101C0839C;
  v19 = v8 + 9;
  sub_100AEA308(a1, (__int128 *)&qword_102311258, buf);
  if (*(_QWORD *)buf)
  {
    v19 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  v9 = operator new(0x18uLL);
  *(_QWORD *)buf = v9;
  v20 = (char *)(v9 + 3);
  v9[2] = 0x9800000097;
  *(_OWORD *)v9 = xmmword_101C083B0;
  v19 = v9 + 3;
  sub_100AEA308(a1, &xmmword_102311270, buf);
  if (*(_QWORD *)buf)
  {
    v19 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  v10 = operator new(0x1CuLL);
  *(_QWORD *)buf = v10;
  v20 = (char *)v10 + 28;
  *v10 = xmmword_101C083C8;
  *(_OWORD *)((char *)v10 + 12) = *(__int128 *)((char *)&xmmword_101C083C8 + 12);
  v19 = (char *)v10 + 28;
  sub_100AEA308(a1, &xmmword_102311288, buf);
  if (*(_QWORD *)buf)
  {
    v19 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  v11 = operator new(0x18uLL);
  *(_QWORD *)buf = v11;
  v20 = (char *)(v11 + 3);
  v11[2] = 0xA5000000A4;
  *(_OWORD *)v11 = xmmword_101C083E4;
  v19 = v11 + 3;
  sub_100AEA308(a1, &xmmword_1023112A0, buf);
  if (*(_QWORD *)buf)
  {
    v19 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  v12 = operator new(0x1CuLL);
  *(_QWORD *)buf = v12;
  v20 = (char *)v12 + 28;
  *v12 = xmmword_101C083FC;
  *(_OWORD *)((char *)v12 + 12) = *(__int128 *)((char *)&xmmword_101C083FC + 12);
  v19 = (char *)v12 + 28;
  sub_100AEA308(a1, &xmmword_1023112B8, buf);
  if (*(_QWORD *)buf)
  {
    v19 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  v13 = operator new(0x3CuLL);
  *(_QWORD *)buf = v13;
  v20 = (char *)v13 + 60;
  *v13 = xmmword_101C08418;
  v13[1] = unk_101C08428;
  v13[2] = xmmword_101C08438;
  *(_OWORD *)((char *)v13 + 44) = *(__int128 *)((char *)&xmmword_101C08438 + 12);
  v19 = (char *)v13 + 60;
  sub_100AEA308(a1, &xmmword_102311228, buf);
  if (*(_QWORD *)buf)
  {
    v19 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  v14 = operator new(0x2CuLL);
  *(_QWORD *)buf = v14;
  v20 = (char *)v14 + 44;
  *v14 = xmmword_101C08454;
  v14[1] = unk_101C08464;
  *(_OWORD *)((char *)v14 + 28) = unk_101C08470;
  v19 = (char *)v14 + 44;
  sub_100AEA308(a1, &xmmword_1023112D0, buf);
  if (*(_QWORD *)buf)
  {
    v19 = *(void **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_100AE99BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AE9A08(uint64_t result)
{
  if (!*(_QWORD *)(result + 280))
    sub_1001B7DEC();
  return result;
}

void sub_100AE9A9C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ca,registerForDaemonStatusNotification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,registerForDaemonStatusNotification", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::registerForDaemonStatusNotification()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  if (!*(_QWORD *)(a1 + 288))
    sub_100647FA8();
}

uint64_t sub_100AE9CC4(uint64_t result)
{
  if (!*(_QWORD *)(result + 296))
    sub_1001B6A0C();
  return result;
}

uint64_t sub_100AE9D58(uint64_t result)
{
  if (!*(_QWORD *)(result + 264))
    sub_1005A7F94();
  return result;
}

uint64_t sub_100AE9FD8(uint64_t result)
{
  if (!*(_QWORD *)(result + 312))
    sub_1013DF780();
  return result;
}

_QWORD *sub_100AEA1D0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_102169760;
  v2 = (uint64_t)(a1 + 1);
  sub_100127554((uint64_t)(a1 + 21));
  sub_100AEC04C((uint64_t)(a1 + 16));
  sub_100AEC0D0((uint64_t)(a1 + 11));
  sub_100AEC144((uint64_t)(a1 + 6));
  sub_100AEC1B8(v2);
  return a1;
}

uint64_t sub_100AEA22C(uint64_t a1, int a2, const std::string *a3)
{
  std::string *v4;
  std::string::value_type v5;
  int v7;
  int *v8;

  v7 = a2;
  v8 = &v7;
  v4 = (std::string *)sub_100AECC08(a1 + 8, &v7, (uint64_t)&unk_101B9EB60, &v8);
  std::string::operator=(v4 + 1, a3);
  v5 = a3[1].__r_.__value_.__s.__data_[8];
  v4[2].__r_.__value_.__r.__words[0] = a3[1].__r_.__value_.__r.__words[0];
  v4[2].__r_.__value_.__s.__data_[8] = v5;
  sub_100AECEE8(&v4[2].__r_.__value_.__r.__words[2], (uint64_t)&a3[1].__r_.__value_.__r.__words[2]);
  return 1;
}

uint64_t sub_100AEA2A8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 40);
  v3 = *(_QWORD **)(a1 + 64);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

unsigned __int8 *sub_100AEA308(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  int **v6;
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  __int128 *v21;

  v21 = a2;
  v5 = sub_100AFAC94(a1 + 88, (unsigned __int8 *)a2, (uint64_t)&unk_101B9EB60, &v21);
  v6 = (int **)(v5 + 40);
  *((_QWORD *)v5 + 6) = *((_QWORD *)v5 + 5);
  sub_1002778C8((void **)v5 + 5, (uint64_t)(a3[1] - *a3) >> 2);
  v7 = (_DWORD *)*a3;
  v8 = (_DWORD *)a3[1];
  if ((_DWORD *)*a3 != v8)
  {
    v9 = v5 + 56;
    v10 = (_DWORD *)*((_QWORD *)v5 + 6);
    do
    {
      if ((unint64_t)v10 >= *v9)
      {
        v12 = *v6;
        v13 = v10 - *v6;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          sub_100259694();
        v15 = *v9 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)sub_100260634((uint64_t)(v5 + 56), v16);
          v12 = (int *)*((_QWORD *)v5 + 5);
          v10 = (_DWORD *)*((_QWORD *)v5 + 6);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = *v7;
        v11 = v18 + 4;
        while (v10 != v12)
        {
          v19 = *--v10;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        *((_QWORD *)v5 + 5) = v18;
        *((_QWORD *)v5 + 6) = v11;
        *((_QWORD *)v5 + 7) = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v10 = *v7;
        v11 = v10 + 1;
      }
      *((_QWORD *)v5 + 6) = v11;
      ++v7;
      v10 = v11;
    }
    while (v7 != v8);
  }
  sub_100AFAC00(a1, v6);
  return v5 + 40;
}

const __CFString *sub_100AEA478(uint64_t a1, int *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  char v7;
  char *v8;

  v3 = (_QWORD *)(a1 + 48);
  if (!sub_1001F8DEC((_QWORD *)(a1 + 48), a2))
    return &stru_1021D8FB8;
  v4 = sub_1001F8DEC(v3, a2);
  if (!v4)
    sub_100263950("unordered_map::at: key not found");
  v5 = *((unsigned int *)v4 + 12);
  if ((_DWORD)v5 == -1)
    sub_100392428();
  v8 = &v7;
  return (const __CFString *)((uint64_t (*)(char **, uint64_t *))off_1021706F0[v5])(&v8, v4 + 3);
}

void sub_100AEA504(uint64_t a1, int a2)
{
  NSObject *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  __int128 *v9;
  __CFString *v10;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  const char *v14;
  uint8_t *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  int v52[4];
  uint8_t buf[16];
  uint64_t v54;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  v4 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ca,fillCountryAndBundleId,simInstance,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v52[0] = 67109120;
    v52[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#ca,fillCountryAndBundleId,simInstance,%d", v52);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::fillCountryAndBundleId(int)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (a2 == 1)
  {
    *(_DWORD *)buf = 17;
    v10 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    v52[0] = 59;
    sub_1015A2E04(buf, (char *)-[__CFString UTF8String](v10, "UTF8String"));
    v31 = *(_OWORD *)buf;
    v32 = v54;
    v54 = 0;
    memset(buf, 0, sizeof(buf));
    v33 = 6;
    sub_1001F80F0(a1, v52, (uint64_t)&v31);
    sub_1001F8644((uint64_t)&v31);
    if (SHIBYTE(v54) < 0)
      operator delete(*(void **)buf);
    *(_DWORD *)buf = 16;
    v11 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    v52[0] = 58;
    sub_1015A2E04(buf, (char *)-[__CFString UTF8String](v11, "UTF8String"));
    v28 = *(_OWORD *)buf;
    v29 = v54;
    v54 = 0;
    memset(buf, 0, sizeof(buf));
    v30 = 6;
    sub_1001F80F0(a1, v52, (uint64_t)&v28);
    sub_1001F8644((uint64_t)&v28);
    if (SHIBYTE(v54) < 0)
      operator delete(*(void **)buf);
    v52[0] = 140;
    sub_1015A2E04(buf, (char *)-[__CFString UTF8String](v10, "UTF8String"));
    v25 = *(_OWORD *)buf;
    v26 = v54;
    v54 = 0;
    memset(buf, 0, sizeof(buf));
    v27 = 6;
    sub_1001F80F0(a1, v52, (uint64_t)&v25);
    sub_1001F8644((uint64_t)&v25);
    if (SHIBYTE(v54) < 0)
      operator delete(*(void **)buf);
    v52[0] = 139;
    sub_1015A2E04(buf, (char *)-[__CFString UTF8String](v11, "UTF8String"));
    v22 = *(_OWORD *)buf;
    v23 = v54;
    v54 = 0;
    memset(buf, 0, sizeof(buf));
    v24 = 6;
    sub_1001F80F0(a1, v52, (uint64_t)&v22);
    sub_1001F8644((uint64_t)&v22);
    if (SHIBYTE(v54) < 0)
      operator delete(*(void **)buf);
    *(_DWORD *)buf = 19;
    v12 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    v52[0] = 61;
    sub_1015A2E04(buf, (char *)-[__CFString UTF8String](v12, "UTF8String"));
    v19 = *(_OWORD *)buf;
    v20 = v54;
    v54 = 0;
    memset(buf, 0, sizeof(buf));
    v21 = 6;
    sub_1001F80F0(a1, v52, (uint64_t)&v19);
    sub_1001F8644((uint64_t)&v19);
    if (SHIBYTE(v54) < 0)
      operator delete(*(void **)buf);
    *(_DWORD *)buf = 18;
    v13 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    v52[0] = 60;
    sub_1015A2E04(buf, (char *)-[__CFString UTF8String](v13, "UTF8String"));
    v16 = *(_OWORD *)buf;
    v17 = v54;
    v54 = 0;
    memset(buf, 0, sizeof(buf));
    v18 = 6;
    sub_1001F80F0(a1, v52, (uint64_t)&v16);
    v9 = &v16;
  }
  else
  {
    if (a2)
      return;
    *(_DWORD *)buf = 7;
    v5 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    v52[0] = 59;
    sub_1015A2E04(buf, (char *)-[__CFString UTF8String](v5, "UTF8String"));
    v49 = *(_OWORD *)buf;
    v50 = v54;
    v54 = 0;
    memset(buf, 0, sizeof(buf));
    v51 = 6;
    sub_1001F80F0(a1, v52, (uint64_t)&v49);
    sub_1001F8644((uint64_t)&v49);
    if (SHIBYTE(v54) < 0)
      operator delete(*(void **)buf);
    *(_DWORD *)buf = 6;
    v6 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    v52[0] = 58;
    sub_1015A2E04(buf, (char *)-[__CFString UTF8String](v6, "UTF8String"));
    v46 = *(_OWORD *)buf;
    v47 = v54;
    v54 = 0;
    memset(buf, 0, sizeof(buf));
    v48 = 6;
    sub_1001F80F0(a1, v52, (uint64_t)&v46);
    sub_1001F8644((uint64_t)&v46);
    if (SHIBYTE(v54) < 0)
      operator delete(*(void **)buf);
    v52[0] = 140;
    sub_1015A2E04(buf, (char *)-[__CFString UTF8String](v5, "UTF8String"));
    v43 = *(_OWORD *)buf;
    v44 = v54;
    v54 = 0;
    memset(buf, 0, sizeof(buf));
    v45 = 6;
    sub_1001F80F0(a1, v52, (uint64_t)&v43);
    sub_1001F8644((uint64_t)&v43);
    if (SHIBYTE(v54) < 0)
      operator delete(*(void **)buf);
    v52[0] = 139;
    sub_1015A2E04(buf, (char *)-[__CFString UTF8String](v6, "UTF8String"));
    v40 = *(_OWORD *)buf;
    v41 = v54;
    v54 = 0;
    memset(buf, 0, sizeof(buf));
    v42 = 6;
    sub_1001F80F0(a1, v52, (uint64_t)&v40);
    sub_1001F8644((uint64_t)&v40);
    if (SHIBYTE(v54) < 0)
      operator delete(*(void **)buf);
    *(_DWORD *)buf = 11;
    v7 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    v52[0] = 61;
    sub_1015A2E04(buf, (char *)-[__CFString UTF8String](v7, "UTF8String"));
    v37 = *(_OWORD *)buf;
    v38 = v54;
    v54 = 0;
    memset(buf, 0, sizeof(buf));
    v39 = 6;
    sub_1001F80F0(a1, v52, (uint64_t)&v37);
    sub_1001F8644((uint64_t)&v37);
    if (SHIBYTE(v54) < 0)
      operator delete(*(void **)buf);
    *(_DWORD *)buf = 10;
    v8 = (__CFString *)sub_100AEA478(a1, (int *)buf);
    v52[0] = 60;
    sub_1015A2E04(buf, (char *)-[__CFString UTF8String](v8, "UTF8String"));
    v34 = *(_OWORD *)buf;
    v35 = v54;
    v54 = 0;
    memset(buf, 0, sizeof(buf));
    v36 = 6;
    sub_1001F80F0(a1, v52, (uint64_t)&v34);
    v9 = &v34;
  }
  sub_1001F8644((uint64_t)v9);
  if (SHIBYTE(v54) < 0)
    operator delete(*(void **)buf);
}

void sub_100AEABEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;

  sub_1001F8644((uint64_t)&a11);
  if (a66 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100AEAC9C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLAnalyticsLogger::onWifiServiceNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 208), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102169770);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAnalyticsLogger::onWifiServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102169770);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAnalyticsLogger::onWifiServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100AEAE74(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100AEAE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100AEAE74(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v6;
  BOOL v7;
  int v8;
  BOOL v9;
  char v10;
  NSObject *v12;
  int v13;
  BOOL v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  _BYTE v21[24];
  int v22;
  int v23;
  int v24;
  uint8_t buf[4];
  int v26;

  if (*a3 == 6)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v6 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      if (*(_BYTE *)(a4 + 96))
        v7 = *(_DWORD *)(a4 + 48) <= 0;
      else
        v7 = 1;
      v8 = !v7;
      *(_DWORD *)buf = 67109120;
      v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ca,received wifi service link status,%d,", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      if (*(_BYTE *)(a4 + 96))
        v14 = *(_DWORD *)(a4 + 48) <= 0;
      else
        v14 = 1;
      v15 = !v14;
      v23 = 67109120;
      v24 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,received wifi service link status,%d,", &v23);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    *(_DWORD *)buf = 24;
    if (*(_BYTE *)(a4 + 96))
      v9 = *(_DWORD *)(a4 + 48) <= 0;
    else
      v9 = 1;
    v10 = !v9;
    v21[0] = v10;
    v22 = 7;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v21);
    sub_1001F8644((uint64_t)v21);
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v12 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      v13 = *a3;
      *(_DWORD *)buf = 67174657;
      v26 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#ca, received unhandled wifi service notification,%{private}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v18 = *a3;
      v23 = 67174657;
      v24 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca, received unhandled wifi service notification,%{private}d", &v23, 8);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
}

void sub_100AEB1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001F8644((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100AEB200(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLAnalyticsLogger::onClientManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 208), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102169770);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAnalyticsLogger::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102169770);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAnalyticsLogger::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100AEB3D8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100AEB3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100AEB3D8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;

  if (*a3 == 4)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v6 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_DWORD *)(a1 + 216);
      v8 = *(_DWORD *)(a4 + 188);
      *(_DWORD *)buf = 67240448;
      v19 = v7;
      v20 = 1026;
      v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ca,LS Toggle,prev,%{public}d,now,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v11 = *(_DWORD *)(a1 + 216);
      v12 = *(_DWORD *)(a4 + 188);
      v15[0] = 67240448;
      v15[1] = v11;
      v16 = 1026;
      v17 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,LS Toggle,prev,%{public}d,now,%{public}d", v15, 14);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v9 = *(_DWORD *)(a1 + 216);
    v10 = *(_DWORD *)(a4 + 188);
    if (!v9 && v10 == 1 || v9 == 1 && !v10)
      *(_DWORD *)(a1 + 216) = v10;
  }
}

void sub_100AEB5DC(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLAnalyticsLogger::onDaemonStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 208), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102169770);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAnalyticsLogger::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102169770);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAnalyticsLogger::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100AEB7B4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100AEB794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100AEB7B4(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v5;
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  const char *v12;
  int v13;
  _DWORD v14[8];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  v5 = *a3;
  if (*a3 == 15)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v10 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(unsigned __int8 *)a4;
      *(_DWORD *)buf = 68289282;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      v20 = v11;
      v12 = "{\"msg%{public}.0s\":\"#ca received daemon status batterSaveMode\", \"BatterySaverMode\":%{public}d}";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, v12, buf, 0x18u);
    }
  }
  else
  {
    if (v5 != 8)
    {
      if (v5 == 6)
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        v7 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
        {
          v8 = *a4;
          v9 = a4[1];
          *(_DWORD *)buf = 68289538;
          v16 = 0;
          v17 = 2082;
          v18 = "";
          v19 = 1026;
          v20 = v8;
          v21 = 1026;
          v22 = v9;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ca,received daemon status reachability change\", \"ReachabilityOld\":%{public}d, \"ReachabilityNew\":%{public}d}", buf, 0x1Eu);
        }
        *(_DWORD *)buf = 26;
        v14[0] = a4[1];
        v14[6] = 0;
        sub_1001F80F0(a1, (int *)buf, (uint64_t)v14);
        sub_1001F8644((uint64_t)v14);
      }
      return;
    }
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v10 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(unsigned __int8 *)a4;
      *(_DWORD *)buf = 68289282;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      v20 = v13;
      v12 = "{\"msg%{public}.0s\":\"#ca received daemon status airplaneMode\", \"AirplaneMode\":%{public}d}";
      goto LABEL_17;
    }
  }
}

void sub_100AEBA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100AEBA30(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLAnalyticsLogger::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 208), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102169770);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAnalyticsLogger::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102169770);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAnalyticsLogger::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100AEBC08(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100AEBBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100AEBC08(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  std::string v14;
  std::string v15;
  std::string::size_type v16;
  _BYTE v17[15];
  char v18;
  int v19;
  int v20;
  _QWORD v21[2];
  _BYTE buf[28];

  if (*a3 == 1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v6 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)buf = 68289282;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = sub_10011A5AC(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ca,Asset notification,CLMobileAssetManager_Type::kNotificationEmergencyCarrierSettings\", \"Asset data:\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    v20 = 29;
    std::to_string(&v15, *(_DWORD *)(a4 + 20));
    v7 = std::string::append(&v15, ".");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v14, *(_DWORD *)(a4 + 16));
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v14;
    else
      v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      size = v14.__r_.__value_.__l.__size_;
    v11 = std::string::append((std::string *)buf, (const std::string::value_type *)v9, size);
    v12 = v11->__r_.__value_.__r.__words[0];
    v21[0] = v11->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&v17[7] = *(_QWORD *)((char *)v21 + 7);
    v16 = v12;
    *(_QWORD *)v17 = v21[0];
    v18 = v13;
    v19 = 6;
    sub_1001F80F0(a1, &v20, (uint64_t)&v16);
    sub_1001F8644((uint64_t)&v16);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_100AEBDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  sub_1001F8644((uint64_t)&a22);
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v22 - 57) < 0)
    operator delete(*(void **)(v22 - 80));
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_100AEBE98(_QWORD *a1)
{
  sub_100AFB1B8(a1);
  operator delete();
}

void sub_100AEBEBC(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

NSNumber *sub_100AEBEE8(uint64_t a1, unsigned int *a2)
{
  return +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *a2);
}

NSNumber *sub_100AEBEF8(uint64_t a1, _QWORD *a2)
{
  return +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *a2);
}

NSNumber *sub_100AEBF08(uint64_t a1, _QWORD *a2)
{
  return +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *a2);
}

NSNumber *sub_100AEBF18(uint64_t a1, unsigned int *a2)
{
  return +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a2);
}

NSNumber *sub_100AEBF28(double a1, uint64_t a2, _DWORD *a3)
{
  LODWORD(a1) = *a3;
  return +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", a1);
}

NSNumber *sub_100AEBF38(uint64_t a1, double *a2)
{
  return +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *a2);
}

NSString *sub_100AEBF48(uint64_t a1, uint64_t a2)
{
  void **v2;
  NSString *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  if (v6 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2, __p[0], __p[1], v6);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_100AEBFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSNumber *sub_100AEBFE8(uint64_t a1, unsigned __int8 *a2)
{
  return +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *a2);
}

void sub_100AEBFFC(_QWORD *a1)
{
  sub_100AEA1D0(a1);
  operator delete();
}

void sub_100AEC020(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100AEC04C(uint64_t a1)
{
  void *v2;

  sub_100AEC084(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100AEC084(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 24);
      sub_100259608(&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100AEC0D0(uint64_t a1)
{
  void *v2;

  sub_100AEC108(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100AEC108(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_10055CB64((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100AEC144(uint64_t a1)
{
  void *v2;

  sub_100AEC17C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100AEC17C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1001F8644((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100AEC1B8(uint64_t a1)
{
  void *v2;

  sub_100AEC1F0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100AEC1F0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100AEC22C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_100AEC22C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void *sub_100AEC290()
{
}

void *sub_100AEC29C()
{
}

void *sub_100AEC2A8()
{
}

void *sub_100AEC2B4()
{
}

void *sub_100AEC2C0()
{
}

void *sub_100AEC2CC()
{
}

_UNKNOWN **sub_100AEC2D8()
{
}

void *sub_100AEC2E4()
{
}

uint64_t sub_100AEC2F0()
{
  return 0;
}

_QWORD *sub_100AEC2F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021697E0;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEC330(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021697E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEC350(uint64_t a1, uint64_t a2)
{
  return sub_100AEC3A0((uint64_t (**)(_BYTE *))(a1 + 8), a2);
}

uint64_t sub_100AEC358(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_102169860))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEC394()
{
  return &off_102169860;
}

uint64_t sub_100AEC3A0(uint64_t (**a1)(_BYTE *), uint64_t a2)
{
  uint64_t (*v2)(_BYTE *);
  uint64_t v3;
  _BYTE v5[32];

  v2 = *a1;
  sub_1001F8F88((uint64_t)v5, a2);
  v3 = v2(v5);
  sub_1001F8644((uint64_t)v5);
  return v3;
}

void sub_100AEC3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100AEC3F8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1001F8644((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

uint64_t sub_100AEC43C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 24);
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1021696D0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_102169880 + v4))(&v5, result, a2);
}

_DWORD *sub_100AEC4C8(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *result;

  result = *a1;
  if (result[6])
    return sub_100AEC5C8(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t sub_100AEC4E8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 1)
    return sub_100AEC630(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t sub_100AEC50C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 2)
    return sub_100AEC694(result, a3);
  *a2 = *a3;
  return result;
}

_DWORD *sub_100AEC530(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *result;

  result = *a1;
  if (result[6] != 3)
    return sub_100AEC6F8(result, a3);
  *a2 = *a3;
  return result;
}

_DWORD *sub_100AEC554(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *result;

  result = *a1;
  if (result[6] != 4)
    return sub_100AEC764(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t sub_100AEC578(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 5)
    return sub_100AEC7C8(result, a3);
  *a2 = *a3;
  return result;
}

void sub_100AEC59C(uint64_t *a1, std::string *a2, std::string *a3)
{
  sub_100AEC82C(*a1, a2, a3);
}

uint64_t sub_100AEC5A4(uint64_t *a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 7)
    return sub_100AEC970(result, a3);
  *a2 = *a3;
  return result;
}

_DWORD *sub_100AEC5C8(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_1021696D0[v4])(&v6, a1);
  a1[6] = -1;
  *a1 = *a2;
  a1[6] = 0;
  return a1;
}

uint64_t sub_100AEC630(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1021696D0[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

uint64_t sub_100AEC694(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1021696D0[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 2;
  return a1;
}

_DWORD *sub_100AEC6F8(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_1021696D0[v4])(&v6, a1);
  a1[6] = -1;
  *a1 = *a2;
  a1[6] = 3;
  return a1;
}

_DWORD *sub_100AEC764(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_1021696D0[v4])(&v6, a1);
  *a1 = *a2;
  a1[6] = 4;
  return a1;
}

uint64_t sub_100AEC7C8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1021696D0[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 5;
  return a1;
}

void sub_100AEC82C(uint64_t a1, std::string *this, std::string *__str)
{
  uint64_t v3[2];

  if (*(_DWORD *)(a1 + 24) == 6)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    v3[0] = a1;
    v3[1] = (uint64_t)__str;
    sub_100AEC870(v3);
  }
}

void sub_100AEC870(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  void *__p[2];
  uint64_t v5;

  v2 = *a1;
  v1 = a1[1];
  if (*(char *)(v1 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)v1, *(_QWORD *)(v1 + 8));
  }
  else
  {
    v3 = *(_OWORD *)v1;
    v5 = *(_QWORD *)(v1 + 16);
    *(_OWORD *)__p = v3;
  }
  sub_100AEC8F4(v2, (__int128 *)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_100AEC8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AEC8F4(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1021696D0[v4])(&v7, a1);
  *(_DWORD *)(a1 + 24) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 24) = 6;
  return a1;
}

uint64_t sub_100AEC970(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1021696D0[v4])(&v6, a1);
  *(_BYTE *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 7;
  return a1;
}

void sub_100AEC9D4(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_100AECA00(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100357184(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[40 * v9];
  *(_DWORD *)v11 = *a2;
  sub_1001F869C((uint64_t)(v11 + 8), (uint64_t)(a2 + 2));
  v15 += 40;
  sub_1006AB998(a1, v14);
  v12 = a1[1];
  sub_1006ABA28((uint64_t)v14);
  return v12;
}

void sub_100AECAF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1006ABA28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100AECB10()
{
  operator delete();
}

_QWORD *sub_100AECB24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021698F0;
  result[1] = v3;
  return result;
}

uint64_t sub_100AECB58(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021698F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AECB74(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AECBC0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AECBFC()
{
}

uint64_t *sub_100AECC08(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x60uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_QWORD *)v14 + 8) = off_1021697E0;
  *((_QWORD *)v14 + 9) = sub_100AEC2F0;
  *((_QWORD *)v14 + 11) = v14 + 64;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_100AECEA4((uint64_t)v24, 0);
  return i;
}

void sub_100AECE8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100AECEA4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_100AECEA4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100AEC22C((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_100AECEE8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100AECF80(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100AECF80(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100AED0E8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100AED0F8()
{
  operator delete();
}

_QWORD *sub_100AED10C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102169980;
  result[1] = v3;
  return result;
}

uint64_t sub_100AED140(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102169980;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AED15C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AED1A8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AED1E4()
{
}

void sub_100AED1F4()
{
  operator delete();
}

_QWORD *sub_100AED208(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102169A00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AED23C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102169A00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AED258(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AED2A4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AED2E0()
{
}

void sub_100AED2F0()
{
  operator delete();
}

_QWORD *sub_100AED304(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102169A80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AED338(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102169A80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AED354(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AED3A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AED3DC()
{
}

void sub_100AED3EC()
{
  operator delete();
}

_QWORD *sub_100AED400(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102169B00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AED434(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102169B00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AED450(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AED49C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AED4D8()
{
}

void sub_100AED4E8()
{
  operator delete();
}

_QWORD *sub_100AED4FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102169B80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AED534(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AED570()
{
}

void sub_100AED580()
{
  operator delete();
}

_QWORD *sub_100AED594(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102169C00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AED5CC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AED608()
{
}

void sub_100AED618()
{
  operator delete();
}

_QWORD *sub_100AED62C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102169C80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AED660(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102169C80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AED67C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AED6C8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AED704()
{
}

void sub_100AED714()
{
  operator delete();
}

_QWORD *sub_100AED728(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102169D00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AED75C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102169D00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AED778(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AED7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AED80C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AED848()
{
}

void sub_100AED858()
{
  operator delete();
}

_QWORD *sub_100AED86C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102169D80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AED8A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102169D80;
  a2[1] = v2;
  return result;
}

BOOL sub_100AED8BC(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AED93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AED950(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AED98C()
{
}

void sub_100AED99C()
{
  operator delete();
}

_QWORD *sub_100AED9B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102169E00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AED9E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102169E00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEDA00(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AEDA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AEDA94(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEDAD0()
{
}

void sub_100AEDAE0()
{
  operator delete();
}

_QWORD *sub_100AEDAF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102169E80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEDB28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102169E80;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEDB44(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AEDBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AEDBD8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEDC14()
{
}

void sub_100AEDC24()
{
  operator delete();
}

_QWORD *sub_100AEDC38(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102169F00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEDC6C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102169F00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEDC88(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AEDD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AEDD1C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEDD58()
{
}

void sub_100AEDD68()
{
  operator delete();
}

_QWORD *sub_100AEDD7C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102169F80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEDDB0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102169F80;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEDDCC(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AEDE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AEDE60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEDE9C()
{
}

void sub_100AEDEAC()
{
  operator delete();
}

_QWORD *sub_100AEDEC0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A000;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEDEF4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A000;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEDF10(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AEDF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AEDFA4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEDFE0()
{
}

void sub_100AEDFF0()
{
  operator delete();
}

_QWORD *sub_100AEE004(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A080;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEE03C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEE078()
{
}

void sub_100AEE088()
{
  operator delete();
}

_QWORD *sub_100AEE09C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A100;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEE0D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A100;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEE0EC(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AEE16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AEE180(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEE1BC()
{
}

void sub_100AEE1CC()
{
  operator delete();
}

_QWORD *sub_100AEE1E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A180;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEE214(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A180;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEE230(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AEE2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AEE2C4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEE300()
{
}

void sub_100AEE310()
{
  operator delete();
}

_QWORD *sub_100AEE324(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A200;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEE358(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A200;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEE374(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AEE3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AEE408(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEE444()
{
}

void sub_100AEE454()
{
  operator delete();
}

_QWORD *sub_100AEE468(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A280;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEE49C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A280;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEE4B8(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AEE538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AEE54C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEE588()
{
}

void sub_100AEE598()
{
  operator delete();
}

_QWORD *sub_100AEE5AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A300;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEE5E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A300;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEE5FC(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AEE67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AEE690(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEE6CC()
{
}

void sub_100AEE6DC()
{
  operator delete();
}

_QWORD *sub_100AEE6F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A380;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEE724(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A380;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEE740(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AEE7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AEE7D4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEE810()
{
}

void sub_100AEE820()
{
  operator delete();
}

_QWORD *sub_100AEE834(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A400;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEE868(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A400;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEE884(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (v4[6])
    v2 = 0;
  else
    v2 = v4[0] < 2u || v4[0] == 255;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AEE8E0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEE91C()
{
}

void sub_100AEE92C()
{
  operator delete();
}

_QWORD *sub_100AEE940(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A480;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEE974(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A480;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEE990(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0xDu;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEE9D8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEEA14()
{
}

void sub_100AEEA24()
{
  operator delete();
}

_QWORD *sub_100AEEA38(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A500;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEEA70(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEEAAC()
{
}

void sub_100AEEABC()
{
  operator delete();
}

_QWORD *sub_100AEEAD0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A580;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEEB04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A580;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEEB20(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 7;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AEEB60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEEB9C()
{
}

void sub_100AEEBAC()
{
  operator delete();
}

_QWORD *sub_100AEEBC0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A600;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEEBF4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A600;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEEC10(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E9u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEEC5C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEEC98()
{
}

void sub_100AEECA8()
{
  operator delete();
}

_QWORD *sub_100AEECBC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A680;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEECF0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A680;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEED0C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEED54(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEED90()
{
}

void sub_100AEEDA0()
{
  operator delete();
}

_QWORD *sub_100AEEDB4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A700;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEEDE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A700;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEEE04(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AEEE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AEEE98(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEEED4()
{
}

void sub_100AEEEE4()
{
  operator delete();
}

_QWORD *sub_100AEEEF8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A780;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEEF2C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A780;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEEF48(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x14u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEEF90(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEEFCC()
{
}

void sub_100AEEFDC()
{
  operator delete();
}

_QWORD *sub_100AEEFF0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A800;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEF024(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A800;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEF040(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEF088(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEF0C4()
{
}

void sub_100AEF0D4()
{
  operator delete();
}

_QWORD *sub_100AEF0E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A880;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEF11C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A880;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEF138(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEF180(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEF1BC()
{
}

void sub_100AEF1CC()
{
  operator delete();
}

_QWORD *sub_100AEF1E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A900;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEF214(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A900;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEF230(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEF278(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEF2B4()
{
}

void sub_100AEF2C4()
{
  operator delete();
}

_QWORD *sub_100AEF2D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216A980;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEF30C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A980;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEF328(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEF370(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEF3AC()
{
}

void sub_100AEF3BC()
{
  operator delete();
}

_QWORD *sub_100AEF3D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216AA00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEF404(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216AA00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEF420(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEF468(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEF4A4()
{
}

void sub_100AEF4B4()
{
  operator delete();
}

_QWORD *sub_100AEF4C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216AA80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEF4FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216AA80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEF518(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEF560(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEF59C()
{
}

void sub_100AEF5AC()
{
  operator delete();
}

_QWORD *sub_100AEF5C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216AB00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEF5F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216AB00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEF610(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 7u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEF658(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEF694()
{
}

void sub_100AEF6A4()
{
  operator delete();
}

_QWORD *sub_100AEF6B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216AB80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEF6EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216AB80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEF708(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEF750(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEF78C()
{
}

void sub_100AEF79C()
{
  operator delete();
}

_QWORD *sub_100AEF7B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216AC00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEF7E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216AC00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEF800(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] <= 90.0 && v4[0] >= -90.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AEF86C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEF8A8()
{
}

void sub_100AEF8B8()
{
  operator delete();
}

_QWORD *sub_100AEF8CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216AC80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEF900(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216AC80;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEF91C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] <= 180.0 && v4[0] >= -180.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AEF988(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEF9C4()
{
}

void sub_100AEF9D4()
{
  operator delete();
}

_QWORD *sub_100AEF9E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216AD00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEFA1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216AD00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEFA38(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  float v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  v3 = v5[0] >= -500.0 && LODWORD(v5[6]) == 4;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEFA88(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEFAC4()
{
}

void sub_100AEFAD4()
{
  operator delete();
}

_QWORD *sub_100AEFAE8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216AD80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEFB1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216AD80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEFB38(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEFB80(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEFBBC()
{
}

void sub_100AEFBCC()
{
  operator delete();
}

_QWORD *sub_100AEFBE0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216AE00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEFC14(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216AE00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEFC30(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEFC78(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEFCB4()
{
}

void sub_100AEFCC4()
{
  operator delete();
}

_QWORD *sub_100AEFCD8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216AE80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEFD0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216AE80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEFD28(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEFD70(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEFDAC()
{
}

void sub_100AEFDBC()
{
  operator delete();
}

_QWORD *sub_100AEFDD0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216AF00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEFE04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216AF00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AEFE20(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AEFE60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEFE9C()
{
}

void sub_100AEFEAC()
{
  operator delete();
}

_QWORD *sub_100AEFEC0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216AF80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEFEF4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216AF80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AEFF10(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = (v5[0] - 1) >= 0x77;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AEFF60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AEFF9C()
{
}

void sub_100AEFFAC()
{
  operator delete();
}

_QWORD *sub_100AEFFC0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B000;
  result[1] = v3;
  return result;
}

uint64_t sub_100AEFFF4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B000;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF0010(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = (v5[0] - 1) >= 0x77;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF0060(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF009C()
{
}

void sub_100AF00AC()
{
  operator delete();
}

_QWORD *sub_100AF00C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B080;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF00F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B080;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF0110(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 4u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF0158(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF0194()
{
}

void sub_100AF01A4()
{
  operator delete();
}

_QWORD *sub_100AF01B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B100;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF01EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B100;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF0208(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 7;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF0248(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF0284()
{
}

void sub_100AF0294()
{
  operator delete();
}

_QWORD *sub_100AF02A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B180;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF02DC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B180;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF02F8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x27u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF0344(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF0380()
{
}

void sub_100AF0390()
{
  operator delete();
}

_QWORD *sub_100AF03A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B200;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF03D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B200;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF03F4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 6u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF043C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF0478()
{
}

void sub_100AF0488()
{
  operator delete();
}

_QWORD *sub_100AF049C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B280;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF04D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B280;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF04EC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF0534(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF0570()
{
}

void sub_100AF0580()
{
  operator delete();
}

_QWORD *sub_100AF0594(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B300;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF05C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B300;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF05E4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0xBu;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF062C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF0668()
{
}

void sub_100AF0678()
{
  operator delete();
}

_QWORD *sub_100AF068C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B380;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF06C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B380;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF06DC(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  std::string v4;
  int v5;
  std::string __str;

  sub_1001F8F88((uint64_t)&v4, a2);
  if (v5 == 6)
  {
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      sub_100115CE4(&__str, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_);
    else
      __str = v4;
    v2 = (std::stoi(&__str, 0, 10) - 1) < 0xB;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    v2 = 0;
  }
  sub_1001F8644((uint64_t)&v4);
  return v2;
}

void sub_100AF0778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AF07A4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF07E0()
{
}

void sub_100AF07F0()
{
  operator delete();
}

_QWORD *sub_100AF0804(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B400;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF0838(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B400;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF0854(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF08A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF08DC()
{
}

void sub_100AF08EC()
{
  operator delete();
}

_QWORD *sub_100AF0900(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B480;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF0934(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B480;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF0950(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF099C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF09D8()
{
}

void sub_100AF09E8()
{
  operator delete();
}

_QWORD *sub_100AF09FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B500;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF0A30(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B500;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF0A4C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF0A98(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF0AD4()
{
}

void sub_100AF0AE4()
{
  operator delete();
}

_QWORD *sub_100AF0AF8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B580;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF0B2C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B580;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF0B48(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF0B94(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF0BD0()
{
}

void sub_100AF0BE0()
{
  operator delete();
}

_QWORD *sub_100AF0BF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B600;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF0C28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B600;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF0C44(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 5u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF0C8C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF0CC8()
{
}

void sub_100AF0CD8()
{
  operator delete();
}

_QWORD *sub_100AF0CEC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B680;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF0D20(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B680;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF0D3C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 7;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF0D7C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF0DB8()
{
}

void sub_100AF0DC8()
{
  operator delete();
}

_QWORD *sub_100AF0DDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B700;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF0E10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B700;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF0E2C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 0;
  else
    v2 = v5[0] < 3;
  v3 = v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF0E74(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF0EB0()
{
}

void sub_100AF0EC0()
{
  operator delete();
}

_QWORD *sub_100AF0ED4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B780;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF0F08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B780;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF0F24(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF0F6C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF0FA8()
{
}

void sub_100AF0FB8()
{
  operator delete();
}

_QWORD *sub_100AF0FCC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B800;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF1000(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B800;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF101C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF1064(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF10A0()
{
}

void sub_100AF10B0()
{
  operator delete();
}

_QWORD *sub_100AF10C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B880;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF10F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B880;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF1114(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF115C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF1198()
{
}

void sub_100AF11A8()
{
  operator delete();
}

_QWORD *sub_100AF11BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B900;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF11F0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B900;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF120C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] <= 90.0 && v4[0] >= -90.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF1278(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF12B4()
{
}

void sub_100AF12C4()
{
  operator delete();
}

_QWORD *sub_100AF12D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216B980;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF130C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216B980;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF1328(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] <= 180.0 && v4[0] >= -180.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF1394(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF13D0()
{
}

void sub_100AF13E0()
{
  operator delete();
}

_QWORD *sub_100AF13F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216BA00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF1428(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216BA00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF1444(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 0;
  else
    v2 = v5[0] > 0 || v5[0] == -1;
  sub_1001F8644((uint64_t)v5);
  return v2;
}

uint64_t sub_100AF1498(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF14D4()
{
}

void sub_100AF14E4()
{
  operator delete();
}

_QWORD *sub_100AF14F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216BA80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF152C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216BA80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF1548(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] < 0;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF1590(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF15CC()
{
}

void sub_100AF15DC()
{
  operator delete();
}

_QWORD *sub_100AF15F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216BB00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF1624(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216BB00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF1640(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 0;
  else
    v2 = v5[0] > 0 || v5[0] == -1;
  sub_1001F8644((uint64_t)v5);
  return v2;
}

uint64_t sub_100AF1694(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF16D0()
{
}

void sub_100AF16E0()
{
  operator delete();
}

_QWORD *sub_100AF16F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216BB80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF1728(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216BB80;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF1744(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 0;
  else
    v2 = v5[0] > 0 || v5[0] == -1;
  sub_1001F8644((uint64_t)v5);
  return v2;
}

uint64_t sub_100AF1798(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF17D4()
{
}

void sub_100AF17E4()
{
  operator delete();
}

_QWORD *sub_100AF17F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216BC00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF182C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216BC00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF1848(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  double v4[3];
  int v5;

  sub_1001F8F88((uint64_t)v4, a2);
  if (v5 == 5)
    v2 = v4[0] == -1.0 || v4[0] > 0.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF18A8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF18E4()
{
}

void sub_100AF18F4()
{
  operator delete();
}

_QWORD *sub_100AF1908(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216BC80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF193C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216BC80;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF1958(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (v4[6])
    v2 = 0;
  else
    v2 = v4[0] < 2u || v4[0] == 255;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF19B4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF19F0()
{
}

void sub_100AF1A00()
{
  operator delete();
}

_QWORD *sub_100AF1A14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216BD00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF1A48(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216BD00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF1A64(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF1AB0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF1AEC()
{
}

void sub_100AF1AFC()
{
  operator delete();
}

_QWORD *sub_100AF1B10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216BD80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF1B44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216BD80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF1B60(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF1BAC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF1BE8()
{
}

void sub_100AF1BF8()
{
  operator delete();
}

_QWORD *sub_100AF1C0C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216BE00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF1C40(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216BE00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF1C5C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF1CA8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF1CE4()
{
}

void sub_100AF1CF4()
{
  operator delete();
}

_QWORD *sub_100AF1D08(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216BE80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF1D3C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216BE80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF1D58(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF1DA4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF1DE0()
{
}

void sub_100AF1DF0()
{
  operator delete();
}

_QWORD *sub_100AF1E04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216BF00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF1E38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216BF00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF1E54(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0xDu;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF1E9C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF1ED8()
{
}

void sub_100AF1EE8()
{
  operator delete();
}

_QWORD *sub_100AF1EFC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216BF80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF1F30(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216BF80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF1F4C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF1F94(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF1FD0()
{
}

void sub_100AF1FE0()
{
  operator delete();
}

_QWORD *sub_100AF1FF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C000;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF2028(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C000;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF2044(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF208C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF20C8()
{
}

void sub_100AF20D8()
{
  operator delete();
}

_QWORD *sub_100AF20EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C080;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF2120(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C080;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF213C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF2184(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF21C0()
{
}

void sub_100AF21D0()
{
  operator delete();
}

_QWORD *sub_100AF21E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C100;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF2218(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C100;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF2234(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF227C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF22B8()
{
}

void sub_100AF22C8()
{
  operator delete();
}

_QWORD *sub_100AF22DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C180;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF2310(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C180;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF232C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 2;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF236C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF23A8()
{
}

void sub_100AF23B8()
{
  operator delete();
}

_QWORD *sub_100AF23CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C200;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF2400(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C200;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF241C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF2464(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF24A0()
{
}

void sub_100AF24B0()
{
  operator delete();
}

_QWORD *sub_100AF24C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C280;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF24F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C280;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF2514(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF255C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF2598()
{
}

void sub_100AF25A8()
{
  operator delete();
}

_QWORD *sub_100AF25BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C300;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF25F0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C300;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF260C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 6u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF2654(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF2690()
{
}

void sub_100AF26A0()
{
  operator delete();
}

_QWORD *sub_100AF26B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C380;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF26E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C380;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF2704(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF274C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF2788()
{
}

void sub_100AF2798()
{
  operator delete();
}

_QWORD *sub_100AF27AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C400;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF27E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C400;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF27FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0xFu;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF2844(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF2880()
{
}

void sub_100AF2890()
{
  operator delete();
}

_QWORD *sub_100AF28A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C480;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF28D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C480;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF28F4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF293C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF2978()
{
}

void sub_100AF2988()
{
  operator delete();
}

_QWORD *sub_100AF299C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C500;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF29D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C500;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF29EC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0xFu;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF2A34(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF2A70()
{
}

void sub_100AF2A80()
{
  operator delete();
}

_QWORD *sub_100AF2A94(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C580;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF2AC8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C580;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF2AE4(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF2B44(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF2B80()
{
}

void sub_100AF2B90()
{
  operator delete();
}

_QWORD *sub_100AF2BA4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C600;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF2BD8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C600;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF2BF4(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF2C54(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF2C90()
{
}

void sub_100AF2CA0()
{
  operator delete();
}

_QWORD *sub_100AF2CB4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C680;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF2CE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C680;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF2D04(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0xAu;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF2D4C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF2D88()
{
}

void sub_100AF2D98()
{
  operator delete();
}

_QWORD *sub_100AF2DAC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C700;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF2DE0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C700;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF2DFC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF2E44(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF2E80()
{
}

void sub_100AF2E90()
{
  operator delete();
}

_QWORD *sub_100AF2EA4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C780;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF2ED8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C780;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF2EF4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF2F3C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF2F78()
{
}

void sub_100AF2F88()
{
  operator delete();
}

_QWORD *sub_100AF2F9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C800;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF2FD0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C800;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF2FEC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF3034(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3070()
{
}

void sub_100AF3080()
{
  operator delete();
}

_QWORD *sub_100AF3094(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C880;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF30C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C880;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF30E4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF312C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3168()
{
}

void sub_100AF3178()
{
  operator delete();
}

_QWORD *sub_100AF318C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C900;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF31C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C900;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF31DC(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 7;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF321C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3258()
{
}

void sub_100AF3268()
{
  operator delete();
}

_QWORD *sub_100AF327C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216C980;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF32B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216C980;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF32CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF3314(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3350()
{
}

void sub_100AF3360()
{
  operator delete();
}

_QWORD *sub_100AF3374(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216CA00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF33A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216CA00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF33C4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0xFu;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF340C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3448()
{
}

void sub_100AF3458()
{
  operator delete();
}

_QWORD *sub_100AF346C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216CA80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF34A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216CA80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF34BC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF3504(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3540()
{
}

void sub_100AF3550()
{
  operator delete();
}

_QWORD *sub_100AF3564(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216CB00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF3598(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216CB00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF35B4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0xFu;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF35FC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3638()
{
}

void sub_100AF3648()
{
  operator delete();
}

_QWORD *sub_100AF365C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216CB80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF3690(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216CB80;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF36AC(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF370C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3748()
{
}

void sub_100AF3758()
{
  operator delete();
}

_QWORD *sub_100AF376C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216CC00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF37A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216CC00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF37BC(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF381C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3858()
{
}

void sub_100AF3868()
{
  operator delete();
}

_QWORD *sub_100AF387C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216CC80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF38B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216CC80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF38CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0xBu;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF3914(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3950()
{
}

void sub_100AF3960()
{
  operator delete();
}

_QWORD *sub_100AF3974(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216CD00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF39A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216CD00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF39C4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF3A0C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3A48()
{
}

void sub_100AF3A58()
{
  operator delete();
}

_QWORD *sub_100AF3A6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216CD80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF3AA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216CD80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF3ABC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF3B04(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3B40()
{
}

void sub_100AF3B50()
{
  operator delete();
}

_QWORD *sub_100AF3B64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216CE00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF3B98(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216CE00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF3BB4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF3BFC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3C38()
{
}

void sub_100AF3C48()
{
  operator delete();
}

_QWORD *sub_100AF3C5C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216CE80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF3C90(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216CE80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF3CAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF3CF4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3D30()
{
}

void sub_100AF3D40()
{
  operator delete();
}

_QWORD *sub_100AF3D54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216CF00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF3D88(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216CF00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF3DA4(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF3DE4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3E20()
{
}

void sub_100AF3E30()
{
  operator delete();
}

_QWORD *sub_100AF3E44(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216CF80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF3E78(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216CF80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF3E94(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF3EDC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF3F18()
{
}

void sub_100AF3F28()
{
  operator delete();
}

_QWORD *sub_100AF3F3C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D000;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF3F70(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D000;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF3F8C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF3FD4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF4010()
{
}

void sub_100AF4020()
{
  operator delete();
}

_QWORD *sub_100AF4034(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D080;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4068(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D080;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF4084(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 4u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF40CC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF4108()
{
}

void sub_100AF4118()
{
  operator delete();
}

_QWORD *sub_100AF412C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D100;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4160(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D100;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF417C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 4u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF41C4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF4200()
{
}

void sub_100AF4210()
{
  operator delete();
}

_QWORD *sub_100AF4224(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D180;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4258(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D180;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF4274(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 4u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF42BC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF42F8()
{
}

void sub_100AF4308()
{
  operator delete();
}

_QWORD *sub_100AF431C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D200;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4350(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D200;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF436C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 4u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF43B4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF43F0()
{
}

void sub_100AF4400()
{
  operator delete();
}

_QWORD *sub_100AF4414(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D280;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4448(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D280;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF4464(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 4u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF44AC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF44E8()
{
}

void sub_100AF44F8()
{
  operator delete();
}

_QWORD *sub_100AF450C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D300;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4540(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D300;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF455C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 4u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF45A4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF45E0()
{
}

void sub_100AF45F0()
{
  operator delete();
}

_QWORD *sub_100AF4604(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D380;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4638(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D380;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF4654(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 4u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF469C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF46D8()
{
}

void sub_100AF46E8()
{
  operator delete();
}

_QWORD *sub_100AF46FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D400;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4730(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D400;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF474C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 4u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF4794(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF47D0()
{
}

void sub_100AF47E0()
{
  operator delete();
}

_QWORD *sub_100AF47F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D480;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4828(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D480;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF4844(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 4u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF488C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF48C8()
{
}

void sub_100AF48D8()
{
  operator delete();
}

_QWORD *sub_100AF48EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D500;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4920(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D500;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF493C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 4u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF4984(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF49C0()
{
}

void sub_100AF49D0()
{
  operator delete();
}

_QWORD *sub_100AF49E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D580;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4A18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D580;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF4A34(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AF4AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AF4AC8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF4B04()
{
}

void sub_100AF4B14()
{
  operator delete();
}

_QWORD *sub_100AF4B28(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D600;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4B5C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D600;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF4B78(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AF4BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AF4C0C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF4C48()
{
}

void sub_100AF4C58()
{
  operator delete();
}

_QWORD *sub_100AF4C6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D680;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4CA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D680;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF4CBC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF4D04(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF4D40()
{
}

void sub_100AF4D50()
{
  operator delete();
}

_QWORD *sub_100AF4D64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D700;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4D98(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D700;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF4DB4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF4DFC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF4E38()
{
}

void sub_100AF4E48()
{
  operator delete();
}

_QWORD *sub_100AF4E5C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D780;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4E90(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D780;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF4EAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF4EF4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF4F30()
{
}

void sub_100AF4F40()
{
  operator delete();
}

_QWORD *sub_100AF4F54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D800;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF4F88(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D800;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF4FA4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF4FEC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF5028()
{
}

void sub_100AF5038()
{
  operator delete();
}

_QWORD *sub_100AF504C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D880;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5080(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D880;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF509C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF50E4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF5120()
{
}

void sub_100AF5130()
{
  operator delete();
}

_QWORD *sub_100AF5144(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D900;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5178(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D900;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF5194(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF51DC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF5218()
{
}

void sub_100AF5228()
{
  operator delete();
}

_QWORD *sub_100AF523C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216D980;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5270(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216D980;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF528C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF52D4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF5310()
{
}

void sub_100AF5320()
{
  operator delete();
}

_QWORD *sub_100AF5334(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216DA00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5368(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216DA00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF5384(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF53CC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF5408()
{
}

void sub_100AF5418()
{
  operator delete();
}

_QWORD *sub_100AF542C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216DA80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5460(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216DA80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF547C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF54C4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF5500()
{
}

void sub_100AF5510()
{
  operator delete();
}

_QWORD *sub_100AF5524(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216DB00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5558(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216DB00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF5574(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF55BC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF55F8()
{
}

void sub_100AF5608()
{
  operator delete();
}

_QWORD *sub_100AF561C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216DB80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5650(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216DB80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF566C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF56B4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF56F0()
{
}

void sub_100AF5700()
{
  operator delete();
}

_QWORD *sub_100AF5714(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216DC00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5748(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216DC00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF5764(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF57AC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF57E8()
{
}

void sub_100AF57F8()
{
  operator delete();
}

_QWORD *sub_100AF580C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216DC80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5840(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216DC80;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF585C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  v3 = v5[6] == 3 && v5[0] > -2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF58A4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF58E0()
{
}

void sub_100AF58F0()
{
  operator delete();
}

_QWORD *sub_100AF5904(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216DD00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5938(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216DD00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF5954(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 7;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF5994(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF59D0()
{
}

void sub_100AF59E0()
{
  operator delete();
}

_QWORD *sub_100AF59F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216DD80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5A28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216DD80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF5A44(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF5A8C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF5AC8()
{
}

void sub_100AF5AD8()
{
  operator delete();
}

_QWORD *sub_100AF5AEC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216DE00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5B20(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216DE00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF5B3C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF5B84(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF5BC0()
{
}

void sub_100AF5BD0()
{
  operator delete();
}

_QWORD *sub_100AF5BE4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216DE80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5C18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216DE80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF5C34(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF5C7C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF5CB8()
{
}

void sub_100AF5CC8()
{
  operator delete();
}

_QWORD *sub_100AF5CDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216DF00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5D10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216DF00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF5D2C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF5D74(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF5DB0()
{
}

void sub_100AF5DC0()
{
  operator delete();
}

_QWORD *sub_100AF5DD4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216DF80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5E08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216DF80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF5E24(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF5E6C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF5EA8()
{
}

void sub_100AF5EB8()
{
  operator delete();
}

_QWORD *sub_100AF5ECC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E000;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5F00(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E000;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF5F1C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF5F64(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF5FA0()
{
}

void sub_100AF5FB0()
{
  operator delete();
}

_QWORD *sub_100AF5FC4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E080;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF5FF8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E080;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF6014(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 7;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF6054(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6090()
{
}

void sub_100AF60A0()
{
  operator delete();
}

_QWORD *sub_100AF60B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E100;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF60E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E100;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF6104(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF614C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6188()
{
}

void sub_100AF6198()
{
  operator delete();
}

_QWORD *sub_100AF61AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E180;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF61E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E180;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF61FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF6244(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6280()
{
}

void sub_100AF6290()
{
  operator delete();
}

_QWORD *sub_100AF62A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E200;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF62D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E200;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF62F4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF633C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6378()
{
}

void sub_100AF6388()
{
  operator delete();
}

_QWORD *sub_100AF639C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E280;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF63D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E280;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF63EC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF6434(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6470()
{
}

void sub_100AF6480()
{
  operator delete();
}

_QWORD *sub_100AF6494(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E300;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF64C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E300;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF64E4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF652C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6568()
{
}

void sub_100AF6578()
{
  operator delete();
}

_QWORD *sub_100AF658C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E380;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF65C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E380;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF65DC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF6624(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6660()
{
}

void sub_100AF6670()
{
  operator delete();
}

_QWORD *sub_100AF6684(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E400;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF66B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E400;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF66D4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF671C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6758()
{
}

void sub_100AF6768()
{
  operator delete();
}

_QWORD *sub_100AF677C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E480;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF67B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E480;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF67CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF6814(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6850()
{
}

void sub_100AF6860()
{
  operator delete();
}

_QWORD *sub_100AF6874(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E500;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF68A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E500;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF68C4(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 7;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF6904(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6940()
{
}

void sub_100AF6950()
{
  operator delete();
}

_QWORD *sub_100AF6964(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E580;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF6998(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E580;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF69B4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF69FC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6A38()
{
}

void sub_100AF6A48()
{
  operator delete();
}

_QWORD *sub_100AF6A5C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E600;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF6A90(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E600;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF6AAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF6AF4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6B30()
{
}

void sub_100AF6B40()
{
  operator delete();
}

_QWORD *sub_100AF6B54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E680;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF6B88(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E680;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF6BA4(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AF6C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AF6C38(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6C74()
{
}

void sub_100AF6C84()
{
  operator delete();
}

_QWORD *sub_100AF6C98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E700;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF6CCC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E700;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF6CE8(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AF6D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AF6D7C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6DB8()
{
}

void sub_100AF6DC8()
{
  operator delete();
}

_QWORD *sub_100AF6DDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E780;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF6E10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E780;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF6E2C(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_100AF6EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AF6EC0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6EFC()
{
}

void sub_100AF6F0C()
{
  operator delete();
}

_QWORD *sub_100AF6F20(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E800;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF6F54(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E800;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF6F70(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF6FB8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF6FF4()
{
}

void sub_100AF7004()
{
  operator delete();
}

_QWORD *sub_100AF7018(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E880;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF704C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E880;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7068(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x13u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF70B0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF70EC()
{
}

void sub_100AF70FC()
{
  operator delete();
}

_QWORD *sub_100AF7110(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E900;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF7144(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E900;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7160(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x13u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF71A8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF71E4()
{
}

void sub_100AF71F4()
{
  operator delete();
}

_QWORD *sub_100AF7208(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216E980;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF723C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216E980;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7258(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF72A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF72DC()
{
}

void sub_100AF72EC()
{
  operator delete();
}

_QWORD *sub_100AF7300(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216EA00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF7334(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216EA00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7350(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF7398(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF73D4()
{
}

void sub_100AF73E4()
{
  operator delete();
}

_QWORD *sub_100AF73F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216EA80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF742C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216EA80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7448(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF7490(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF74CC()
{
}

void sub_100AF74DC()
{
  operator delete();
}

_QWORD *sub_100AF74F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216EB00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF7524(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216EB00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7540(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF7588(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF75C4()
{
}

void sub_100AF75D4()
{
  operator delete();
}

_QWORD *sub_100AF75E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216EB80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF761C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216EB80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7638(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF7680(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF76BC()
{
}

void sub_100AF76CC()
{
  operator delete();
}

_QWORD *sub_100AF76E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216EC00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF7714(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216EC00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7730(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF7778(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF77B4()
{
}

void sub_100AF77C4()
{
  operator delete();
}

_QWORD *sub_100AF77D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216EC80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF780C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216EC80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7828(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF7870(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF78AC()
{
}

void sub_100AF78BC()
{
  operator delete();
}

_QWORD *sub_100AF78D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216ED00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF7904(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216ED00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7920(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF7968(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF79A4()
{
}

void sub_100AF79B4()
{
  operator delete();
}

_QWORD *sub_100AF79C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216ED80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF79FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216ED80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7A18(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF7A60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF7A9C()
{
}

void sub_100AF7AAC()
{
  operator delete();
}

_QWORD *sub_100AF7AC0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216EE00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF7AF4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216EE00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7B10(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF7B58(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF7B94()
{
}

void sub_100AF7BA4()
{
  operator delete();
}

_QWORD *sub_100AF7BB8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216EE80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF7BEC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216EE80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7C08(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF7C50(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF7C8C()
{
}

void sub_100AF7C9C()
{
  operator delete();
}

_QWORD *sub_100AF7CB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216EF00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF7CE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216EF00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF7D00(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 6u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF7D48(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF7D84()
{
}

void sub_100AF7D94()
{
  operator delete();
}

_QWORD *sub_100AF7DA8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216EF80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF7DDC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216EF80;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF7DF8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF7E38(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF7E74()
{
}

void sub_100AF7E84()
{
  operator delete();
}

_QWORD *sub_100AF7E98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F000;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF7ECC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F000;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF7EE8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF7F28(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF7F64()
{
}

void sub_100AF7F74()
{
  operator delete();
}

_QWORD *sub_100AF7F88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F080;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF7FBC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F080;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF7FD8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 7;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF8018(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF8054()
{
}

void sub_100AF8064()
{
  operator delete();
}

_QWORD *sub_100AF8078(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F100;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF80AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F100;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF80C8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (v4[6] == 3)
    v2 = v4[0] < 2u || v4[0] == 255;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF8128(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF8164()
{
}

void sub_100AF8174()
{
  operator delete();
}

_QWORD *sub_100AF8188(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F180;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF81BC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F180;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF81D8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF8218(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF8254()
{
}

void sub_100AF8264()
{
  operator delete();
}

_QWORD *sub_100AF8278(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F200;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF82AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F200;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF82C8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF8308(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF8344()
{
}

void sub_100AF8354()
{
  operator delete();
}

_QWORD *sub_100AF8368(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F280;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF839C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F280;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF83B8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF83F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF8434()
{
}

void sub_100AF8444()
{
  operator delete();
}

_QWORD *sub_100AF8458(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F300;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF848C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F300;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF84A8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 7;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF84E8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF8524()
{
}

void sub_100AF8534()
{
  operator delete();
}

_QWORD *sub_100AF8548(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F380;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF857C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F380;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF8598(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF85D8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF8614()
{
}

void sub_100AF8624()
{
  operator delete();
}

_QWORD *sub_100AF8638(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F400;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF866C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F400;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF8688(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF86D0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF870C()
{
}

void sub_100AF871C()
{
  operator delete();
}

_QWORD *sub_100AF8730(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F480;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF8764(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F480;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF8780(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF87C0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF87FC()
{
}

void sub_100AF880C()
{
  operator delete();
}

_QWORD *sub_100AF8820(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F500;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF8854(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F500;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF8870(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF88B0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF88EC()
{
}

void sub_100AF88FC()
{
  operator delete();
}

_QWORD *sub_100AF8910(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F580;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF8944(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F580;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF8960(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF89A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF89DC()
{
}

void sub_100AF89EC()
{
  operator delete();
}

_QWORD *sub_100AF8A00(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F600;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF8A34(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F600;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF8A50(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF8A90(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF8ACC()
{
}

void sub_100AF8ADC()
{
  operator delete();
}

_QWORD *sub_100AF8AF0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F680;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF8B24(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F680;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF8B40(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 7;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF8B80(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF8BBC()
{
}

void sub_100AF8BCC()
{
  operator delete();
}

_QWORD *sub_100AF8BE0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F700;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF8C14(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F700;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF8C30(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = (v5[0] + 1) >= 0xC;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF8C7C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF8CB8()
{
}

void sub_100AF8CC8()
{
  operator delete();
}

_QWORD *sub_100AF8CDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F780;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF8D10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F780;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF8D2C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  void *v3;
  __int128 v5;
  uint64_t v6;
  int v7;
  void *__p[2];
  uint64_t v9;

  sub_1001F8F88((uint64_t)&v5, a2);
  if (v7 == 6)
  {
    if (SHIBYTE(v6) < 0)
    {
      sub_100115CE4(__p, (void *)v5, *((unint64_t *)&v5 + 1));
    }
    else
    {
      *(_OWORD *)__p = v5;
      v9 = v6;
    }
    v3 = __p[1];
    if (v9 >= 0)
      v3 = (void *)HIBYTE(v9);
    v2 = v3 != 0;
    if (SHIBYTE(v9) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v2 = 0;
  }
  sub_1001F8644((uint64_t)&v5);
  return v2;
}

void sub_100AF8DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AF8DD8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF8E14()
{
}

void sub_100AF8E24()
{
  operator delete();
}

_QWORD *sub_100AF8E38(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F800;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF8E6C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F800;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF8E88(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF8EC8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF8F04()
{
}

void sub_100AF8F14()
{
  operator delete();
}

_QWORD *sub_100AF8F28(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F880;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF8F5C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F880;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF8F78(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF8FB8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF8FF4()
{
}

void sub_100AF9004()
{
  operator delete();
}

_QWORD *sub_100AF9018(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F900;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF904C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F900;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF9068(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF90A8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF90E4()
{
}

void sub_100AF90F4()
{
  operator delete();
}

_QWORD *sub_100AF9108(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216F980;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF913C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216F980;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF9158(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF9198(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF91D4()
{
}

void sub_100AF91E4()
{
  operator delete();
}

_QWORD *sub_100AF91F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216FA00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF922C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216FA00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF9248(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 7;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF9288(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF92C4()
{
}

void sub_100AF92D4()
{
  operator delete();
}

_QWORD *sub_100AF92E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216FA80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF931C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216FA80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF9338(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 3u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF9380(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF93BC()
{
}

void sub_100AF93CC()
{
  operator delete();
}

_QWORD *sub_100AF93E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216FB00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF9414(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216FB00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF9430(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF9470(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF94AC()
{
}

void sub_100AF94BC()
{
  operator delete();
}

_QWORD *sub_100AF94D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216FB80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF9504(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216FB80;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF9520(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF9560(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF959C()
{
}

void sub_100AF95AC()
{
  operator delete();
}

_QWORD *sub_100AF95C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216FC00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF95F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216FC00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF9610(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF9650(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF968C()
{
}

void sub_100AF969C()
{
  operator delete();
}

_QWORD *sub_100AF96B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216FC80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF96E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216FC80;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF9700(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF9740(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF977C()
{
}

void sub_100AF978C()
{
  operator delete();
}

_QWORD *sub_100AF97A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216FD00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF97D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216FD00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF97F0(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  v2 = v4[6] == 7;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF9830(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF986C()
{
}

void sub_100AF987C()
{
  operator delete();
}

_QWORD *sub_100AF9890(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216FD80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF98C4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216FD80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF98E0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = (v5[0] + 1) >= 0xC;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF992C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF9968()
{
}

void sub_100AF9978()
{
  operator delete();
}

_QWORD *sub_100AF998C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216FE00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF99C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216FE00;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF99DC(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  void *v3;
  __int128 v5;
  uint64_t v6;
  int v7;
  void *__p[2];
  uint64_t v9;

  sub_1001F8F88((uint64_t)&v5, a2);
  if (v7 == 6)
  {
    if (SHIBYTE(v6) < 0)
    {
      sub_100115CE4(__p, (void *)v5, *((unint64_t *)&v5 + 1));
    }
    else
    {
      *(_OWORD *)__p = v5;
      v9 = v6;
    }
    v3 = __p[1];
    if (v9 >= 0)
      v3 = (void *)HIBYTE(v9);
    v2 = v3 != 0;
    if (SHIBYTE(v9) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v2 = 0;
  }
  sub_1001F8644((uint64_t)&v5);
  return v2;
}

void sub_100AF9A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100AF9A88(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF9AC4()
{
}

void sub_100AF9AD4()
{
  operator delete();
}

_QWORD *sub_100AF9AE8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216FE80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF9B1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216FE80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF9B38(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 9u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF9B80(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF9BBC()
{
}

void sub_100AF9BCC()
{
  operator delete();
}

_QWORD *sub_100AF9BE0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216FF00;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF9C14(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216FF00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF9C30(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF9C78(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF9CB4()
{
}

void sub_100AF9CC4()
{
  operator delete();
}

_QWORD *sub_100AF9CD8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10216FF80;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF9D0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216FF80;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF9D28(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF9D70(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF9DAC()
{
}

void sub_100AF9DBC()
{
  operator delete();
}

_QWORD *sub_100AF9DD0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170000;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF9E04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170000;
  a2[1] = v2;
  return result;
}

BOOL sub_100AF9E20(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AF9E80(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF9EBC()
{
}

void sub_100AF9ECC()
{
  operator delete();
}

_QWORD *sub_100AF9EE0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170080;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF9F14(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170080;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF9F30(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] < 0;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AF9F78(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AF9FB4()
{
}

void sub_100AF9FC4()
{
  operator delete();
}

_QWORD *sub_100AF9FD8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170100;
  result[1] = v3;
  return result;
}

uint64_t sub_100AFA00C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170100;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AFA028(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] < 0;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AFA070(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AFA0AC()
{
}

void sub_100AFA0BC()
{
  operator delete();
}

_QWORD *sub_100AFA0D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170180;
  result[1] = v3;
  return result;
}

uint64_t sub_100AFA104(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170180;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AFA120(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AFA168(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AFA1A4()
{
}

void sub_100AFA1B4()
{
  operator delete();
}

_QWORD *sub_100AFA1C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170200;
  result[1] = v3;
  return result;
}

uint64_t sub_100AFA1FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170200;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AFA218(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AFA260(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AFA29C()
{
}

void sub_100AFA2AC()
{
  operator delete();
}

_QWORD *sub_100AFA2C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170280;
  result[1] = v3;
  return result;
}

uint64_t sub_100AFA2F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170280;
  a2[1] = v2;
  return result;
}

BOOL sub_100AFA310(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AFA370(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AFA3AC()
{
}

void sub_100AFA3BC()
{
  operator delete();
}

_QWORD *sub_100AFA3D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170300;
  result[1] = v3;
  return result;
}

uint64_t sub_100AFA404(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170300;
  a2[1] = v2;
  return result;
}

BOOL sub_100AFA420(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AFA480(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AFA4BC()
{
}

void sub_100AFA4CC()
{
  operator delete();
}

_QWORD *sub_100AFA4E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170380;
  result[1] = v3;
  return result;
}

uint64_t sub_100AFA514(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170380;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AFA530(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] < 0;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AFA578(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AFA5B4()
{
}

void sub_100AFA5C4()
{
  operator delete();
}

_QWORD *sub_100AFA5D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170400;
  result[1] = v3;
  return result;
}

uint64_t sub_100AFA60C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170400;
  a2[1] = v2;
  return result;
}

BOOL sub_100AFA628(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 0;
  else
    v2 = v5[0] < 0xEu || v5[0] == 100;
  sub_1001F8644((uint64_t)v5);
  return v2;
}

uint64_t sub_100AFA680(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AFA6BC()
{
}

void sub_100AFA6CC()
{
  operator delete();
}

_QWORD *sub_100AFA6E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170480;
  result[1] = v3;
  return result;
}

uint64_t sub_100AFA714(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170480;
  a2[1] = v2;
  return result;
}

BOOL sub_100AFA730(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AFA790(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AFA7CC()
{
}

void sub_100AFA7DC()
{
  operator delete();
}

_QWORD *sub_100AFA7F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170500;
  result[1] = v3;
  return result;
}

uint64_t sub_100AFA824(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170500;
  a2[1] = v2;
  return result;
}

BOOL sub_100AFA840(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AFA8A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AFA8DC()
{
}

void sub_100AFA8EC()
{
  operator delete();
}

_QWORD *sub_100AFA900(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170580;
  result[1] = v3;
  return result;
}

uint64_t sub_100AFA934(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170580;
  a2[1] = v2;
  return result;
}

BOOL sub_100AFA950(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AFA9B0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AFA9EC()
{
}

void sub_100AFA9FC()
{
  operator delete();
}

_QWORD *sub_100AFAA10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170600;
  result[1] = v3;
  return result;
}

uint64_t sub_100AFAA44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170600;
  a2[1] = v2;
  return result;
}

BOOL sub_100AFAA60(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  float v4[8];

  sub_1001F8F88((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4)
    v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  else
    v2 = 0;
  sub_1001F8644((uint64_t)v4);
  return v2;
}

uint64_t sub_100AFAAC0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AFAAFC()
{
}

void sub_100AFAB0C()
{
  operator delete();
}

_QWORD *sub_100AFAB20(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102170680;
  result[1] = v3;
  return result;
}

uint64_t sub_100AFAB54(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102170680;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AFAB70(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] <= -2;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_100AFABB8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100AFABF4()
{
}

uint64_t sub_100AFAC00(uint64_t a1, int **a2)
{
  int *v3;
  _OWORD v5[2];
  int v6;

  memset(v5, 0, sizeof(v5));
  v6 = 1065353216;
  v3 = sub_100AFB010(*a2, a2[1], (uint64_t)v5);
  if (a2[1] != v3)
    a2[1] = v3;
  return sub_100067AC4((uint64_t)v5);
}

void sub_100AFAC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100067AC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100AFAC94(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_100AFAF2C(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_10012E444(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_100AFAFCC((uint64_t)v26, 0);
  return i;
}

void sub_100AFAF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100AFAFCC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_100AFAF2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100AFAFB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100AFAFCC(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100AFAFCC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10055CB64((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

int *sub_100AFB010(int *a1, int *a2, uint64_t a3)
{
  int *v5;
  char v6;
  int *i;
  char v9;

  if (a1 == a2)
    return a2;
  v5 = a1;
  while (1)
  {
    sub_1003121F0(a3, v5, v5);
    if ((v6 & 1) == 0)
      break;
    if (++v5 == a2)
      return a2;
  }
  if (v5 != a2)
  {
    for (i = v5 + 1; i != a2; ++i)
    {
      sub_1003121F0(a3, i, i);
      if ((v9 & 1) != 0)
        *v5++ = *i;
    }
  }
  return v5;
}

NSNumber *sub_100AFB0A4(uint64_t a1, unsigned int *a2)
{
  return +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *a2);
}

NSNumber *sub_100AFB0B4(uint64_t a1, _QWORD *a2)
{
  return +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *a2);
}

NSNumber *sub_100AFB0C4(uint64_t a1, _QWORD *a2)
{
  return +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *a2);
}

NSNumber *sub_100AFB0D4(uint64_t a1, unsigned int *a2)
{
  return +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a2);
}

NSNumber *sub_100AFB0E4(double a1, uint64_t a2, _DWORD *a3)
{
  LODWORD(a1) = *a3;
  return +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", a1);
}

NSNumber *sub_100AFB0F4(uint64_t a1, double *a2)
{
  return +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *a2);
}

NSNumber *sub_100AFB108(uint64_t a1, unsigned __int8 *a2)
{
  return +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *a2);
}

NSString *sub_100AFB118(uint64_t a1, uint64_t a2)
{
  void **v2;
  NSString *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  if (v6 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2, __p[0], __p[1], v6);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_100AFB19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100AFB1B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_102169678;
  v2 = a1[39];
  a1[39] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[38];
  a1[38] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[37];
  a1[37] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[36];
  a1[36] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[35];
  a1[35] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[33];
  a1[33] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return sub_100AEA1D0(a1);
}

uint64_t sub_100AFB278()
{
  sub_1015A2E04(qword_102306AD8, "AnalyticsLogger");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102306AD8, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102311270, "com.apple.locationd.emergency.MobileAssetStats.CatalogDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102311270, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102311288, "com.apple.locationd.emergency.MobileAssetStats.AssetDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102311288, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023112A0, "com.apple.locationd.emergency.MobileAssetStats.DownloadNotTriggered");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023112A0, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023112B8, "com.apple.locationd.emergency.MobileAssetStats.VersionReporting");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023112B8, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102311228, "com.apple.location.emergency.era");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102311228, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102311240, "com.apple.locationd.emergency.eed");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102311240, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023111F8, "com.apple.locationd.emergency.aml");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023111F8, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023111E0, "com.apple.locationd.emergency.nilr");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023111E0, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102311210, "com.apple.locationd.emergency.non_emergency_nilr");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102311210, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102311258, "com.apple.locationd.emergency.phone_number_availability");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102311258, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023112D0, "com.apple.locationd.eed.request");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023112D0, (void *)&_mh_execute_header);
}

double sub_100AFB484(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_101C147C8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = &unk_101C14848;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = &unk_101C147C8;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = &unk_101C14848;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 184) = 0x80000000800000;
  *(_BYTE *)(a1 + 192) = 1;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_QWORD *)(a1 + 220) = 0x6400000000;
  *(_WORD *)(a1 + 628) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  return result;
}

uint64_t sub_100AFB504(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double a5, double a6)
{
  int v11;
  double v12;
  int v14;
  double v15;
  double v16;
  int v17;
  int v18;

  v11 = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)a3 + 136))(a3, 100, a6 + -12.0);
  v12 = *(double *)(a2 + 56);
  if (v12 == *(double *)a1)
    return 0;
  v14 = v11;
  *(double *)a1 = v12;
  if (sub_100AFB62C(a1, a2))
  {
    if (*(double *)(a1 + 640) >= a6)
      return 0;
    *(double *)(a1 + 632) = a6;
  }
  else
  {
    v15 = a6 + -6.0;
    if (*(double *)(a1 + 632) >= *(double *)(a1 + 640))
      v16 = *(double *)(a1 + 632);
    else
      v16 = *(double *)(a1 + 640);
    v17 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a3 + 128))(a3, v15);
    v18 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a3 + 128))(a3, v16);
    if ((v14 != 2) == (*(_BYTE *)(a1 + 629) == 0))
      return 0;
    *(_BYTE *)(a1 + 629) ^= 1u;
    if ((v17 - v18) < 5 || v15 <= v16)
      return 0;
    *a4 = v15;
    *(double *)(a1 + 640) = v15;
  }
  return 1;
}

uint64_t sub_100AFB62C(uint64_t a1, uint64_t a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t result;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23[2];
  float v24[9];

  sub_100B61F44((float *)(a2 + 36), v24);
  v3 = sub_1011A2C18(v24);
  v5 = v4;
  v6 = sub_100AFB91C((_QWORD *)(a1 + 64), 0, v3);
  *(float *)(a1 + 72) = v6;
  *(float *)(a1 + 72) = sub_100AFB91C((_QWORD *)(a1 + 64), 1, v6);
  v7 = sub_100AFB91C((_QWORD *)(a1 + 144), 0, v5);
  *(float *)(a1 + 152) = v7;
  v8 = sub_100AFB91C((_QWORD *)(a1 + 144), 1, v7);
  *(float *)(a1 + 152) = v8;
  v9 = *(_QWORD *)(a1 + 16) + 1;
  *(_QWORD *)(a1 + 16) = v9;
  if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v9, 1) > 0x1999999999999999uLL)
    return 0;
  v11 = v8;
  v12 = sub_100AFB91C((_QWORD *)(a1 + 24), 0, *(float *)(a1 + 72));
  *(float *)(a1 + 32) = v12;
  *(float *)(a1 + 32) = sub_100AFB91C((_QWORD *)(a1 + 24), 1, v12);
  v13 = sub_100AFB91C((_QWORD *)(a1 + 104), 0, v11);
  *(float *)(a1 + 112) = v13;
  v14 = sub_100AFB91C((_QWORD *)(a1 + 104), 1, v13);
  *(float *)(a1 + 112) = v14;
  v15 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(v15 + 1) < 0x64)
    v16 = v15 + 1;
  else
    v16 = 100;
  *(_QWORD *)(a1 + 8) = v16;
  if (v16 < 0x64)
    goto LABEL_16;
  v17 = v14;
  v18 = *(float *)(a1 + 32);
  v19 = sqrtf((float)(v17 * v17) + (float)(v18 * v18));
  if (v19 > 0.00000011921)
  {
    v18 = v18 / v19;
    v17 = v17 / v19;
  }
  v23[0] = v18;
  v23[1] = v17;
  v22 = sub_100AFB814(a1, v23);
  *(float *)(a1 + 184) = v18;
  *(float *)(a1 + 188) = v17;
  sub_100AFB84C(a1 + 192, &v22);
  v20 = 0;
  v21 = fabsf(*(float *)(a1 + 204));
  while (v21 > flt_101C148C8[v20])
  {
    if (++v20 == 16)
      goto LABEL_15;
  }
  if (v20 < 0xA)
  {
    result = 0;
    *(_BYTE *)(a1 + 628) = 0;
    goto LABEL_17;
  }
LABEL_15:
  if (*(_BYTE *)(a1 + 628))
  {
LABEL_16:
    result = 0;
  }
  else
  {
    result = 1;
    *(_BYTE *)(a1 + 628) = 1;
  }
LABEL_17:
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

float sub_100AFB814(uint64_t a1, float *a2)
{
  float v2;
  float v3;

  v2 = *(float *)(a1 + 184);
  v3 = *(float *)(a1 + 188);
  if (v2 == 1.1755e-38 && v3 == 1.1755e-38)
    return 0.0;
  else
    return atan2f((float)(v2 * a2[1]) - (float)(v3 * *a2), (float)(a2[1] * v3) + (float)(v2 * *a2));
}

unsigned __int16 *sub_100AFB84C(uint64_t a1, float *a2)
{
  unsigned __int16 *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  unsigned __int16 *result;

  v3 = (unsigned __int16 *)(a1 + 28);
  if (*(_DWORD *)(a1 + 32) == *(unsigned __int16 *)(a1 + 30))
  {
    v4 = *(float *)(a1 + 28 + 4 * *(unsigned __int16 *)(a1 + 28) + 8);
    v5 = *(float *)(a1 + 12);
    v6 = (float)(*a2 - v4) - *(float *)(a1 + 16);
    *(float *)(a1 + 12) = v5 + v6;
    *(float *)(a1 + 16) = (float)((float)(v5 + v6) - v5) - v6;
    v7 = *(float *)(a1 + 20);
    v8 = (float)((float)(*a2 * *a2) - (float)(v4 * v4)) - *(float *)(a1 + 24);
  }
  else
  {
    v9 = *(float *)(a1 + 12);
    v10 = *a2 - *(float *)(a1 + 16);
    *(float *)(a1 + 12) = v9 + v10;
    *(float *)(a1 + 16) = (float)((float)(v9 + v10) - v9) - v10;
    v7 = *(float *)(a1 + 20);
    v8 = (float)(*a2 * *a2) - *(float *)(a1 + 24);
  }
  *(float *)(a1 + 20) = v7 + v8;
  *(float *)(a1 + 24) = (float)((float)(v7 + v8) - v7) - v8;
  result = sub_10087DBE8(v3, a2);
  *(_BYTE *)a1 = 1;
  return result;
}

float sub_100AFB91C(_QWORD *a1, uint64_t a2, float a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  double v9;
  float v10;
  double v11;
  float result;

  v4 = *a1;
  v3 = (char *)a1 + 12;
  v5 = v4 + 8 * a2;
  v6 = 3 * a2 + 1;
  v7 = *(float *)&v3[4 * v6];
  v8 = 3 * a2 + 2;
  v9 = *(float *)&v3[4 * v8];
  v10 = *(double *)(v4 + 48 + 24 * a2) * a3 * *(double *)(v5 + 96)
      - *(double *)(v4 + 48 + 8 * v6) * v7
      - *(double *)(v4 + 48 + 8 * v8) * v9;
  v11 = *(double *)(v5 + 112)
      * (*(double *)(v4 + 8 * v6) * v7 + *(double *)(v4 + 24 * a2) * v10 + *(double *)(v4 + 8 * v8) * v9);
  *(float *)&v3[4 * v8] = v7;
  result = v11;
  *(float *)&v3[4 * v6] = v10;
  *(_DWORD *)&v3[12 * a2] = 0;
  return result;
}

void sub_100AFBE58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100AFC0EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100AFC600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100AFC7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  sub_100B04710((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_100AFC84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100AFC994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  if (a33)
  {
    if (a31 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100AFDC70(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend(objc_alloc((Class)CKRecordID), "initWithRecordName:zoneID:", a2, objc_msgSend(objc_alloc((Class)CKRecordZoneID), "initWithZoneName:ownerName:", *(_QWORD *)(a1 + 32), CKCurrentUserDefaultName));
  v4 = objc_msgSend(objc_alloc((Class)CKSyncEnginePendingRecordZoneChange), "initWithRecordID:type:", v3, *(_QWORD *)(a1 + 48));

  return objc_msgSend(*(id *)(a1 + 40), "addObject:", v4);
}

void sub_100AFEAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100AFF088(uint64_t a1, void *a2)
{
  return sub_100D4739C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), a2);
}

void sub_100B012D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100B01AC0(id a1, CKRecordZone *a2, unint64_t a3, BOOL *a4)
{
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  NSString *v10;
  uint8_t buf[4];
  NSString *v12;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021707B8);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v12 = -[CKRecordZoneID zoneName](-[CKRecordZone zoneID](a2, "zoneID"), "zoneName");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CloudKit] WifiAssociatedApCentroidStore, Successfully saved zone %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v6 = qword_1022A0048;
    v9 = 138543362;
    v10 = -[CKRecordZoneID zoneName](-[CKRecordZone zoneID](a2, "zoneID"), "zoneName");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "[CloudKit] WifiAssociatedApCentroidStore, Successfully saved zone %{public}@", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentDatabaseChanges:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

id sub_100B01C84(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021707B8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v12 = objc_msgSend(a2, "zoneName");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[CloudKit] WifiAssociatedApCentroidStore, Successfully deleted zone ID %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v6 = qword_1022A0048;
    v9 = 138543362;
    v10 = objc_msgSend(a2, "zoneName");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "[CloudKit] WifiAssociatedApCentroidStore, Successfully deleted zone ID %{public}@", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentDatabaseChanges:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return objc_msgSend(*(id *)(a1 + 32), "handleZoneDeleted:", a2);
}

id sub_100B01E50(uint64_t a1, void *a2)
{
  NSObject *v4;
  id result;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  __int16 v11;
  id v12;
  uint8_t buf[4];
  id v14;
  __int16 v15;
  id v16;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021707B8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543618;
    v14 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID"), "zoneName");
    v15 = 2114;
    v16 = objc_msgSend(a2, "error");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, Failed to save zone changes %{public}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v6 = qword_1022A0048;
    v9 = 138543618;
    v10 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID"), "zoneName");
    v11 = 2114;
    v12 = objc_msgSend(a2, "error");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 16, "[CloudKit] WifiAssociatedApCentroidStore, Failed to save zone changes %{public}@. Error: %{public}@", &v9, 22);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentDatabaseChanges:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  result = objc_msgSend(objc_msgSend(a2, "error"), "code");
  if (result == (id)112)
    return objc_msgSend(*(id *)(a1 + 32), "deleteZone:", objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID"));
  return result;
}

void sub_100B02088(id a1, CKRecordZoneID *a2, NSError *a3, BOOL *a4)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  NSString *v11;
  __int16 v12;
  NSError *v13;
  uint8_t buf[4];
  NSString *v15;
  __int16 v16;
  NSError *v17;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021707B8);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 138543618;
    v15 = -[CKRecordZoneID zoneName](a2, "zoneName");
    v16 = 2114;
    v17 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "[CloudKit] WifiAssociatedApCentroidStore, Failed to delete zone %{public}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v7 = qword_1022A0048;
    v10 = 138543618;
    v11 = -[CKRecordZoneID zoneName](a2, "zoneName");
    v12 = 2114;
    v13 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 17, "[CloudKit] WifiAssociatedApCentroidStore, Failed to delete zone %{public}@. Error: %{public}@", &v10, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentDatabaseChanges:]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_100B02504(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint8_t buf[4];
  void *v14;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021707B8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CloudKit] WifiAssociatedApCentroidStore, Successfully saved record %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v11 = 138477827;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "[CloudKit] WifiAssociatedApCentroidStore, Successfully saved record %{private}@", &v11, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (objc_msgSend(*(id *)(a1 + 32), "isCentroidDatabaseValid")
    && (sub_100D47784(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), objc_msgSend(a2, "recordID"), (uint64_t)+[CMHealthColdStorageUtils getSystemFieldsFromCKRecord:](CMHealthColdStorageUtils, "getSystemFieldsFromCKRecord:", a2)) & 1) == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, SentRecordChanges: Failed to update local system fields for saved record", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021707B8);
      LOWORD(v11) = 0;
      LODWORD(v10) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "[CloudKit] WifiAssociatedApCentroidStore, SentRecordChanges: Failed to update local system fields for saved record", &v11, v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_100B02824(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint8_t buf[4];
  void *v14;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021707B8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CloudKit] WifiAssociatedApCentroidStore, Successfully deleted record %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v11 = 138477827;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "[CloudKit] WifiAssociatedApCentroidStore, Successfully deleted record %{private}@", &v11, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (objc_msgSend(*(id *)(a1 + 32), "isCentroidDatabaseValid")
    && (sub_100D47784(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), a2, 0) & 1) == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, SentRecordChanges: Failed to update local system fields for failed record", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021707B8);
      LOWORD(v11) = 0;
      LODWORD(v10) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "[CloudKit] WifiAssociatedApCentroidStore, SentRecordChanges: Failed to update local system fields for failed record", &v11, v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_100B02B24(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  int v24;
  id v25;
  __int16 v26;
  id v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  id v31;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021707B8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138478083;
    v29 = objc_msgSend(objc_msgSend(a2, "record"), "recordID");
    v30 = 2114;
    v31 = objc_msgSend(a2, "error");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, Failed to save record changes %{private}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v10 = qword_1022A0048;
    v24 = 138478083;
    v25 = objc_msgSend(objc_msgSend(a2, "record"), "recordID");
    v26 = 2114;
    v27 = objc_msgSend(a2, "error");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 16, "[CloudKit] WifiAssociatedApCentroidStore, Failed to save record changes %{private}@. Error: %{public}@", &v24, 22);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (CKErrorIsCode(objc_msgSend(a2, "error"), 14))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, CKErrorServerRecordChanged: The record was rejected because the version on the server was different", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021707B8);
      LOWORD(v24) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "[CloudKit] WifiAssociatedApCentroidStore, CKErrorServerRecordChanged: The record was rejected because the version on the server was different", &v24, v23);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    objc_msgSend(*(id *)(a1 + 32), "handleServerRecordChanged:", objc_msgSend(objc_msgSend(objc_msgSend(a2, "error"), "userInfo"), "objectForKeyedSubscript:", CKRecordChangedErrorServerRecordKey));
  }
  else if (CKErrorIsCode(objc_msgSend(a2, "error"), 11))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, CKErrorUnknownItem: Record does not exist", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021707B8);
      LOWORD(v24) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "[CloudKit] WifiAssociatedApCentroidStore, CKErrorUnknownItem: Record does not exist", &v24, v23);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    objc_msgSend(*(id *)(a1 + 32), "handleUnknownItem:", objc_msgSend(a2, "record"));
  }
  else if (CKErrorIsCode(objc_msgSend(a2, "error"), 26))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, CKErrorZoneNotFound: The specified zone does not exist on the server", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021707B8);
      LOWORD(v24) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "[CloudKit] WifiAssociatedApCentroidStore, CKErrorZoneNotFound: The specified zone does not exist on the server", &v24, v23);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    objc_msgSend(*(id *)(a1 + 32), "handleZoneNotFound:", objc_msgSend(a2, "record"));
  }
  else if (CKErrorIsCode(objc_msgSend(a2, "error"), 112))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, CKErrorPrivateMissingManateeIdentity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021707B8);
      LOWORD(v24) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "[CloudKit] WifiAssociatedApCentroidStore, CKErrorPrivateMissingManateeIdentity", &v24, v23);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    objc_msgSend(*(id *)(a1 + 32), "deleteZone:", objc_msgSend(objc_msgSend(objc_msgSend(a2, "record"), "recordID"), "zoneID"));
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[CloudKit] WifiAssociatedApCentroidStore, Unhandled error, ignoring failed record", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021707B8);
      LOWORD(v24) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "[CloudKit] WifiAssociatedApCentroidStore, Unhandled error, ignoring failed record", &v24, v23);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
}

void sub_100B033C0(id a1, CKRecordID *a2, NSError *a3, BOOL *a4)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  CKRecordID *v10;
  __int16 v11;
  NSError *v12;
  uint8_t buf[4];
  CKRecordID *v14;
  __int16 v15;
  NSError *v16;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021707B8);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138478083;
    v14 = a2;
    v15 = 2114;
    v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, Failed to delete record %{private}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021707B8);
    v9 = 138478083;
    v10 = a2;
    v11 = 2114;
    v12 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "[CloudKit] WifiAssociatedApCentroidStore, Failed to delete record %{private}@. Error: %{public}@", &v9, 22);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_100B04684(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100B046B0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1006322C0(a2 + 72);
    if (*(char *)(a2 + 71) < 0)
      operator delete(*(void **)(a2 + 48));
    if (*(char *)(a2 + 39) < 0)
      operator delete(*(void **)(a2 + 16));
    operator delete();
  }
}

void sub_100B04710(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100B04750((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100B04750(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 112)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

void sub_100B0479C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100B04838(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100B04850()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100B048DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100B048F4(uint64_t a1, double a2)
{
  void **v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)a1 = _Q1;
  *(_QWORD *)(a1 + 24) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = _Q1;
  v8 = (void **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 62) = 0;
  *(_QWORD *)(a1 + 72) = 3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(double *)(a1 + 16) = a2;
  v9 = sub_100EFA98C();
  sub_100EFA9D0(v9, (uint64_t)CFSTR("VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds"), v8);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021707D8);
  v10 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134349312;
    v23 = v11;
    v24 = 2050;
    v25 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Now watching for deescalation event for background VO2Max estimation; start time: %{public}f, extendAfterHightExer"
      "tionTimeSeconds: %{public}f",
      buf,
      0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021707D8);
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_QWORD *)(a1 + 40);
    v18 = 134349312;
    v19 = v14;
    v20 = 2050;
    v21 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Now watching for deescalation event for background VO2Max estimation; start time: %{public}f, extendAfterHightExer"
      "tionTimeSeconds: %{public}f",
      &v18,
      22);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "CLVO2MaxEstimationDeescalator::CLVO2MaxEstimationDeescalator(CFAbsoluteTime)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return a1;
}

uint64_t sub_100B04B18(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(result + 72) = *a2;
  return result;
}

BOOL sub_100B04B24(double *a1)
{
  double v2;

  if (a1[5] <= 0.0 || CFAbsoluteTimeGetCurrent() - a1[6] >= a1[5])
    v2 = (double)(int)sub_100E3C868();
  else
    v2 = a1[5] + (double)(int)sub_100E3C868();
  return CFAbsoluteTimeGetCurrent() - a1[2] > v2;
}

BOOL sub_100B04B98(uint64_t a1)
{
  double v2;
  double v3;
  float v4;
  _BOOL8 result;
  double v6;
  double v7;
  float v8;

  v2 = *(double *)(a1 + 56);
  v3 = *(double *)(a1 + 16);
  v4 = *(float *)(a1 + 64);
  result = 0;
  if ((sub_100E3CAD0() & 1) == 0)
  {
    v6 = v2 - v3;
    if (v6 > (double)(int)sub_100E3C7D4())
      return 1;
    v7 = v6 - v4;
    v8 = (float)(int)sub_100E3C7D4();
    if (v7 > (float)(sub_100E3C880() * v8) || *(_BYTE *)(a1 + 68))
      return 1;
  }
  return result;
}

uint64_t sub_100B04C24(uint64_t a1, double *a2)
{
  int v4;
  double v5;
  float v6;
  float v7;
  int v8;
  uint64_t result;
  int v10;
  int v11;

  ++*(_DWORD *)(a1 + 96);
  v4 = 0;
  if (a2[82] != -1.79769313e308)
  {
    v5 = a2[92];
    if (v5 > 0.140000001 && v5 <= 2.23693991)
    {
      v6 = 2.23693991 / v5;
      if (v6 >= 1.0)
      {
        v7 = (float)((float)(v6 * -0.793) + (float)((float)(v6 * 0.3564) * v6)) + 3.142;
        if (v7 > 8.0)
          v7 = 8.0;
        v4 = v7 > 2.5;
      }
      else
      {
        v4 = 0;
      }
    }
    v4 |= sub_100E3C914();
    *(_DWORD *)(a1 + 84) += v4;
  }
  if ((sub_100E3C9A8() & 1) != 0)
    v8 = 1;
  else
    v8 = a2[33] != -1.79769313e308 && a2[30] > 0.349999994;
  *(_DWORD *)(a1 + 80) += v8;
  result = sub_100E3CA3C();
  if ((result & 1) != 0)
    v10 = 1;
  else
    v10 = a2[36] != -1.79769313e308 && a2[41] > -1.0;
  v11 = v4 & v8;
  *(_DWORD *)(a1 + 88) += v10;
  if (!*(_BYTE *)(a1 + 104))
  {
    if ((v11 & v10 & 1) != 0)
      return result;
    goto LABEL_24;
  }
  if (((v11 ^ 1 | v10) & 1) == 0)
    ++*(_DWORD *)(a1 + 100);
  if ((v11 & 1) == 0)
LABEL_24:
    ++*(_DWORD *)(a1 + 92);
  return result;
}

uint64_t sub_100B04DD8(uint64_t a1)
{
  int v3;
  BOOL v4;
  double v5;
  float v6;

  if (*(double *)(a1 + 40) > 0.0 && CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 48) < *(double *)(a1 + 40))
  {
    if (sub_100B04B24((double *)a1))
      return 4294967291;
    else
      return 0;
  }
  v3 = *(unsigned __int8 *)(a1 + 104);
  v4 = sub_100B04B24((double *)a1);
  if (!v3)
  {
    if (!v4)
    {
      if ((sub_100E3CB64() & 1) == 0 && *(_QWORD *)(a1 + 72) < 2uLL)
        return 4294967294;
      if (sub_100B04B98(a1))
        return 4294967293;
      goto LABEL_8;
    }
    return 0xFFFFFFFFLL;
  }
  if (v4)
    return 0xFFFFFFFFLL;
LABEL_8:
  v5 = (double)*(int *)(a1 + 92) * 2.56;
  v6 = (float)(int)sub_100E3C7D4();
  if (v5 <= (float)(sub_100E3C880() * v6))
    return 0;
  else
    return 4294967292;
}

void sub_100B04EB8(uint64_t a1, double *a2, char a3)
{
  unsigned __int8 v6;
  int v7;
  NSObject *v8;
  CFAbsoluteTime Current;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  double v23;
  double v24;
  NSObject *v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  CFAbsoluteTime v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  const char *v47;
  char *v48;
  uint64_t v49;
  int v50;
  _BYTE v51[24];
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  _BYTE buf[28];
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  int v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  _QWORD v101[19];
  __int16 v102;
  __int128 v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  _QWORD v107[6];
  char v108;
  __int128 v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  int v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _BYTE v122[25];
  int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  int v133;
  uint64_t v134;
  __int16 v135;
  __int128 v136;
  __int128 v137;
  char v138;
  _BYTE v139[11];
  int v140;
  unint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  unint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  char v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  unint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  int v190;
  unint64_t v191;
  __int16 v192;
  int v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;

  sub_100B056A0(a1, *(_DWORD *)(a1 + 32));
  if (*(double *)(a1 + 24) == -1.0)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_102306B20);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_102306B20))
    {
      *(_QWORD *)buf = 0x300000008;
      *(_DWORD *)&buf[8] = 2;
      sub_100546300(qword_102306B08, buf, 3uLL);
      __cxa_atexit((void (*)(void *))sub_100546380, qword_102306B08, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102306B20);
    }
    v102 = 0;
    *(_OWORD *)v101 = xmmword_101BB1ED0;
    memset(&v101[2], 0, 135);
    v103 = xmmword_101BB1ED0;
    v104 = 0;
    v105 = 0;
    v107[0] = 0;
    v106 = 0;
    *(_QWORD *)((char *)v107 + 5) = 0;
    *(_QWORD *)((char *)&v107[1] + 6) = 0;
    v108 = 0;
    memset(&v107[3], 0, 24);
    v109 = xmmword_101BB1ED0;
    v110 = 0;
    v111 = 0;
    v112 = 0xFFEFFFFFFFFFFFFFLL;
    v123 = 0;
    v113 = 0u;
    v114 = 0u;
    v115 = 0u;
    v116 = 0u;
    v117 = 0u;
    v118 = 0;
    v119 = 0u;
    v120 = 0u;
    v121 = 0u;
    memset(v122, 0, sizeof(v122));
    v124 = 0;
    v125 = 0;
    v126 = 0xFFEFFFFFFFFFFFFFLL;
    v127 = 0;
    v128 = 0;
    v134 = 0;
    v135 = 0;
    v140 = 0;
    v133 = 0;
    v132 = 0u;
    v131 = 0u;
    v130 = 0u;
    v129 = 0u;
    v137 = 0u;
    v136 = 0u;
    v138 = 0;
    memset(v139, 0, sizeof(v139));
    v141 = 0xFFEFFFFFFFFFFFFFLL;
    v160 = 0u;
    v159 = 0u;
    v158 = 0u;
    v157 = 0u;
    v156 = 0u;
    v155 = 0u;
    v154 = 0u;
    v153 = 0u;
    v152 = 0u;
    v151 = 0u;
    v150 = 0u;
    v149 = 0u;
    v148 = 0u;
    v147 = 0u;
    v146 = 0u;
    v145 = 0u;
    v144 = 0u;
    v143 = 0u;
    v142 = 0u;
    v161 = 0;
    v162 = 0xFFEFFFFFFFFFFFFFLL;
    v163 = 0u;
    v164 = 0u;
    v165 = 0u;
    v166 = 0u;
    v167 = 0xFFEFFFFFFFFFFFFFLL;
    v168 = 0;
    v169 = 0;
    v170 = 0;
    v171 = 0;
    v172 = 0xFFEFFFFFFFFFFFFFLL;
    v174 = 0;
    v173 = 0;
    v175 = 0x80000000800000;
    v177 = 0;
    v176 = 0;
    v178 = xmmword_101BB1EE0;
    v179 = 0x80000000800000;
    v180 = 0u;
    v181 = 0u;
    v182 = 0;
    v183 = 0xFFEFFFFFFFFFFFFFLL;
    v184 = 0u;
    v185 = 0u;
    v186 = 0u;
    v187 = 0u;
    v188 = 0u;
    v189 = 0u;
    v190 = 0;
    v191 = 0xFFEFFFFFFFFFFFFFLL;
    v192 = 0;
    v193 = 0;
    v194 = 0xFFEFFFFFFFFFFFFFLL;
    v195 = 7;
    v196 = 0xFFEFFFFFFFFFFFFFLL;
    v197 = 0;
    v199 = 0;
    v198 = 0;
    v200 = 0;
    sub_1000D03AC(a2, qword_102306B08, (uint64_t)v101);
    *(_BYTE *)(a1 + 104) = a3;
    sub_100B04C24(a1, (double *)v101);
    v7 = sub_100B04DD8(a1);
    if (v7)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021707D8);
      v8 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        Current = CFAbsoluteTimeGetCurrent();
        v10 = *(double *)(a1 + 16);
        v11 = *(_QWORD *)(a1 + 40);
        v12 = *(_QWORD *)(a1 + 48);
        v13 = *(_QWORD *)(a1 + 72);
        v14 = *(double *)(a1 + 56) - v10;
        v15 = v14 - *(float *)(a1 + 64);
        v16 = *(unsigned __int8 *)(a1 + 68);
        v17 = *(_DWORD *)(a1 + 96);
        v18 = *(_DWORD *)(a1 + 100);
        v19 = v17 - *(_DWORD *)(a1 + 80);
        v20 = v17 - *(_DWORD *)(a1 + 84);
        v21 = *(_DWORD *)(a1 + 92);
        v22 = v17 - *(_DWORD *)(a1 + 88);
        *(_DWORD *)buf = 67243776;
        *(_DWORD *)&buf[4] = v7;
        *(_WORD *)&buf[8] = 2050;
        *(CFAbsoluteTime *)&buf[10] = Current;
        *(_WORD *)&buf[18] = 2050;
        *(double *)&buf[20] = v10;
        v77 = 2050;
        v78 = v11;
        v79 = 2050;
        v80 = v12;
        v81 = 1026;
        v82 = v13;
        v83 = 2050;
        v84 = v14;
        v85 = 2050;
        v86 = v15;
        v87 = 1026;
        v88 = v16;
        v89 = 1026;
        v90 = v17;
        v91 = 1026;
        v92 = v19;
        v93 = 1026;
        v94 = v20;
        v95 = 1026;
        v96 = v22;
        v97 = 1026;
        v98 = v21;
        v99 = 1026;
        v100 = v18;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "VO2MaxBackgroundEstimationDeescalation,reason,%{public}d,timestamp,%{public}f,deescalatorStartTime,%{public}f,timeToExtendAfterHighExertion,%{public}f,lastTimeHRMetExertionThreshold,%{public}f,locationType,%{public}d,sessionStatsDuration,%{public}f,sessionStatsBadSeconds,%{public}f,sessionStatsPreconditionFailed,%{public}d,pairStatsTotalSamples,%{public}d,pairStatsBadHR,%{public}d,pairStatsBadWR,%{public}d,pairStatsBadGPS,%{public}d,pairStatsBadSamples,%{public}d,pairStatsExtraSamplesFromRelaxedDeescalationRules,%{public}d", buf, 0x74u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021707D8);
        v32 = qword_10229FE68;
        v33 = CFAbsoluteTimeGetCurrent();
        v34 = *(double *)(a1 + 16);
        v35 = *(_QWORD *)(a1 + 40);
        v36 = *(_QWORD *)(a1 + 48);
        v37 = *(_QWORD *)(a1 + 72);
        v38 = *(double *)(a1 + 56) - v34;
        v39 = v38 - *(float *)(a1 + 64);
        v40 = *(unsigned __int8 *)(a1 + 68);
        v41 = *(_DWORD *)(a1 + 96);
        v42 = *(_DWORD *)(a1 + 100);
        v43 = v41 - *(_DWORD *)(a1 + 80);
        v44 = v41 - *(_DWORD *)(a1 + 84);
        v45 = *(_DWORD *)(a1 + 92);
        v46 = v41 - *(_DWORD *)(a1 + 88);
        v50 = 67243776;
        *(_DWORD *)v51 = v7;
        *(_WORD *)&v51[4] = 2050;
        *(CFAbsoluteTime *)&v51[6] = v33;
        *(_WORD *)&v51[14] = 2050;
        *(double *)&v51[16] = v34;
        v52 = 2050;
        v53 = v35;
        v54 = 2050;
        v55 = v36;
        v56 = 1026;
        v57 = v37;
        v58 = 2050;
        v59 = v38;
        v60 = 2050;
        v61 = v39;
        v62 = 1026;
        v63 = v40;
        v64 = 1026;
        v65 = v41;
        v66 = 1026;
        v67 = v43;
        v68 = 1026;
        v69 = v44;
        v70 = 1026;
        v71 = v46;
        v72 = 1026;
        v73 = v45;
        v74 = 1026;
        v75 = v42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 0, "VO2MaxBackgroundEstimationDeescalation,reason,%{public}d,timestamp,%{public}f,deescalatorStartTime,%{public}f,timeToExtendAfterHighExertion,%{public}f,lastTimeHRMetExertionThreshold,%{public}f,locationType,%{public}d,sessionStatsDuration,%{public}f,sessionStatsBadSeconds,%{public}f,sessionStatsPreconditionFailed,%{public}d,pairStatsTotalSamples,%{public}d,pairStatsBadHR,%{public}d,pairStatsBadWR,%{public}d,pairStatsBadGPS,%{public}d,pairStatsBadSamples,%{public}d,pairStatsExtraSamplesFromRelaxedDeescalationRules,%{public}d", &v50, 116);
        v48 = (char *)v47;
        sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxEstimationDeescalator::update(const CLWorkoutPredictorInputs &, BOOL)", "%s\n", v47);
        if (v48 != buf)
          free(v48);
      }
      v23 = CFAbsoluteTimeGetCurrent();
      *(double *)(a1 + 24) = v23;
      if (*(double *)(a1 + 40) > 0.0)
      {
        v24 = *(double *)(a1 + 48);
        if (v24 > 0.0 && v24 < v23)
        {
          *(double *)a1 = v24;
          *(double *)(a1 + 8) = v23;
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021707D8);
          v25 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
          {
            v26 = *(double *)a1;
            v27 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)buf = 134349312;
            *(double *)&buf[4] = v26;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v27;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "VO2Max Background Escalation, HRRecovery startTime,%{public}f,endTime,%{public}f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_1021707D8);
            v28 = *(double *)a1;
            v29 = *(_QWORD *)(a1 + 8);
            v50 = 134349312;
            *(double *)v51 = v28;
            *(_WORD *)&v51[8] = 2050;
            *(_QWORD *)&v51[10] = v29;
            LODWORD(v49) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "VO2Max Background Escalation, HRRecovery startTime,%{public}f,endTime,%{public}f", &v50, v49);
            v31 = (char *)v30;
            sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxEstimationDeescalator::update(const CLWorkoutPredictorInputs &, BOOL)", "%s\n", v30);
            if (v31 != buf)
              free(v31);
          }
        }
      }
    }
  }
}

void sub_100B05644(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102306B20);
  _Unwind_Resume(a1);
}

BOOL sub_100B05664(uint64_t a1, uint64_t *a2)
{
  *a2 = sub_100B056A0(a1, *(_DWORD *)(a1 + 32));
  return *(double *)(a1 + 24) != -1.0;
}

uint64_t sub_100B056A0(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if ((a2 + 5) < 6)
    return 5 - (a2 + 5);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021707D8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unexpected DeescalationReason value: %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021707D8);
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Unexpected DeescalationReason value: %{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "CMActivityReason CLVO2MaxEstimationDeescalator::getActivityReasonFromDeescalationReason(CLVO2MaxEstimationDeescalator::DeescalationReason) const", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return 0;
}

void sub_100B05864(uint64_t a1, uint64_t a2)
{
  double Current;
  double v5;
  double v6;
  float v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  double v12;
  int v13;
  int v14;
  uint64_t v15;
  double v16;
  int v17;
  int v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  uint8_t buf[4];
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;

  *(_OWORD *)(a1 + 56) = *(_OWORD *)a2;
  Current = CFAbsoluteTimeGetCurrent();
  v5 = *(double *)(a1 + 16);
  v6 = *(double *)a2;
  v7 = *(float *)(a2 + 8);
  if (*(_BYTE *)(a2 + 13))
    *(double *)(a1 + 48) = v6;
  v8 = v6 - v5;
  v9 = v7;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021707D8);
  v10 = Current - v5;
  v11 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    v12 = *(float *)(a2 + 8);
    v13 = *(unsigned __int8 *)(a2 + 12);
    v14 = *(unsigned __int8 *)(a2 + 13);
    v15 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 134285057;
    v37 = v8;
    v38 = 2049;
    v39 = v12;
    v40 = 2049;
    v41 = v8 - v9;
    v42 = 2049;
    v43 = v10;
    v44 = 1025;
    v45 = v13;
    v46 = 1025;
    v47 = v14;
    v48 = 2049;
    v49 = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "VO2SessionStatus,duration,%{private}.3f,totalGoodSeconds,%{private}.3f,totalBadSeconds,%{private}.3f,timeElapsed,%{private}.3f,preConditionFailed,%{private}d,lastHRMetExertionThreshold,%{private}d,lastTimeHRMetExertionThreshold,%{private}f", buf, 0x40u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021707D8);
    v16 = *(float *)(a2 + 8);
    v17 = *(unsigned __int8 *)(a2 + 12);
    v18 = *(unsigned __int8 *)(a2 + 13);
    v19 = *(_QWORD *)(a1 + 48);
    v22 = 134285057;
    v23 = v8;
    v24 = 2049;
    v25 = v16;
    v26 = 2049;
    v27 = v8 - v9;
    v28 = 2049;
    v29 = v10;
    v30 = 1025;
    v31 = v17;
    v32 = 1025;
    v33 = v18;
    v34 = 2049;
    v35 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "VO2SessionStatus,duration,%{private}.3f,totalGoodSeconds,%{private}.3f,totalBadSeconds,%{private}.3f,timeElapsed,%{private}.3f,preConditionFailed,%{private}d,lastHRMetExertionThreshold,%{private}d,lastTimeHRMetExertionThreshold,%{private}f", &v22, 64);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxEstimationDeescalator::feedVO2MaxSessionStats(const VO2MaxSessionStats &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
}

void sub_100B05AF0(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

NSDictionary *sub_100B05B1C()
{
  NSDictionary *result;
  _QWORD v1[7];
  _QWORD v2[7];

  v1[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxPowerBudgetEstimatorQueryLookbackInterval");
  v2[0] = &off_1022205A0;
  v1[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetRefreshInterval");
  v2[1] = &off_1022205B8;
  v1[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds");
  v2[2] = &off_1022205D0;
  v1[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationBudgetAllowanceSeconds");
  v2[3] = &off_1022205E8;
  v1[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetAllowanceSeconds");
  v2[4] = &off_102220600;
  v1[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetAllowanceSeconds");
  v2[5] = &off_102220618;
  v1[6] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetRefreshInterval");
  v2[6] = &off_102220630;
  result = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v2, v1, 7);
  qword_102306B00 = (uint64_t)result;
  return result;
}

void *sub_100B05C6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v9[2];
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;
  void *v14[2];
  char v15;

  if (*(char *)(a1 + 23) < 0)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_15;
    if (v3 != 12)
      goto LABEL_17;
    v2 = *(_QWORD *)a1;
  }
  else
  {
    v2 = a1;
    if (*(_BYTE *)(a1 + 23) != 12)
    {
      if (*(_BYTE *)(a1 + 23))
      {
LABEL_17:
        sub_1015A2E04(v9, "size");
        v7 = sub_100B05E8C((uint64_t *)v9, (uint64_t *)a1);
LABEL_19:
        v5 = (void *)v7;
        goto LABEL_20;
      }
LABEL_15:
      sub_1015A2E04(v9, "empty");
      sub_1015A2E04(v14, " ");
      v5 = (void *)sub_100B05E8C((uint64_t *)v9, (uint64_t *)v14);
      if (v15 < 0)
        operator delete(v14[0]);
LABEL_20:
      if (SHIBYTE(v10) < 0)
        operator delete(v9[0]);
      return v5;
    }
  }
  for (i = 0; i != 12; ++i)
  {
    if (*(char *)(v2 + i) < 0 || (_DefaultRuneLocale.__runetype[*(unsigned __int8 *)(v2 + i)] & 0x10000) == 0)
    {
      sub_1015A2E04(v9, "nonhex");
      v7 = sub_100B05E8C((uint64_t *)v9, (uint64_t *)a1);
      goto LABEL_19;
    }
  }
  v14[0] = 0;
  sub_100512D24((void (__cdecl ***)(std::basic_stringstream<char> *__hidden))v9, (const std::string *)a1, 24);
  *(_DWORD *)((char *)&v9[1] + *((_QWORD *)v9[0] - 3)) = *(_DWORD *)((_BYTE *)&v9[1] + *((_QWORD *)v9[0] - 3)) & 0xFFFFFFB5 | 8;
  std::istream::operator>>(v9, v14);
  v5 = v14[0];
  *(void **)((char *)v9
  v10 = v6;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf(v11);
  std::ios::~ios(&v13);
  return v5;
}

void sub_100B05E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_1018B38B4((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100B05E8C(uint64_t *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  int v12;
  uint64_t *v13;
  __int16 v14;
  uint64_t *v15;
  _BYTE buf[12];
  __int16 v17;
  uint64_t *v18;
  char v19;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102170818);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a1 + 23) >= 0)
      v5 = a1;
    else
      v5 = (uint64_t *)*a1;
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136446467;
    *(_QWORD *)&buf[4] = v5;
    v17 = 2081;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Warning malformed mac address error, %{public}s, %{private}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102170818);
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = (uint64_t *)*a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    v12 = 136446467;
    v13 = v9;
    v14 = 2081;
    v15 = v10;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "#Warning malformed mac address error, %{public}s, %{private}s", &v12, 22);
    sub_100512490("Generic", 1, 0, 0, "static CLMacAddress CLMacAddress::newFromMalformedMac(const std::string &, const std::string &)", "%s\n", v11);
    if (v11 != buf)
      free(v11);
  }
  sub_1015A2E04(buf, "ff:ff:ff:ff:ff:ff");
  v7 = sub_1000CC740(buf);
  if (v19 < 0)
    operator delete(*(void **)buf);
  return v7;
}

void sub_100B060C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B060E4(char *a1)
{
  uint64_t v2;
  char *v3;
  __darwin_ct_rune_t v4;
  std::string::value_type v5;
  std::string::size_type size;
  std::string::size_type v7;
  _BOOL4 v8;
  std::string::size_type v9;
  uint64_t v10;
  unint64_t v11;
  std::string *p_str;
  uint64_t v13;
  std::string __p;
  std::string __str;

  if (a1[23] < 0)
  {
    v2 = *((_QWORD *)a1 + 1);
    if (v2)
    {
      memset(&__str, 0, sizeof(__str));
      v3 = *(char **)a1;
      goto LABEL_6;
    }
    goto LABEL_17;
  }
  v2 = a1[23];
  if (!a1[23])
  {
LABEL_17:
    sub_1015A2E04(&__str, "empty");
    sub_1015A2E04(&__p, " ");
    v10 = sub_100B05E8C((uint64_t *)&__str, (uint64_t *)&__p);
    goto LABEL_29;
  }
  memset(&__str, 0, sizeof(__str));
  v3 = a1;
  do
  {
LABEL_6:
    v4 = *v3;
    if (v4 < 0 || (_DefaultRuneLocale.__runetype[v4] & 0x10000) == 0)
    {
      sub_1015A2E04(&__p, "nonhex");
      v10 = sub_100B05E8C((uint64_t *)&__p, (uint64_t *)a1);
      goto LABEL_29;
    }
    v5 = __tolower(v4);
    std::string::push_back(&__str, v5);
    ++v3;
    --v2;
  }
  while (v2);
  size = __str.__r_.__value_.__l.__size_;
  v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = __str.__r_.__value_.__l.__size_;
  if (v7 > 0xB)
  {
    std::string::operator=(&__p, &__str);
  }
  else
  {
    v8 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if (size == 12)
    {
      v9 = 12;
    }
    else
    {
      v11 = 0;
      do
      {
        std::string::push_back(&__p, 48);
        ++v11;
        v8 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v9 = __str.__r_.__value_.__l.__size_;
      }
      while (12 - v9 > v11);
    }
    if (v8)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    else
      p_str = &__str;
    std::string::append(&__p, (const std::string::value_type *)p_str, v9);
  }
  v10 = (uint64_t)sub_100B05C6C((uint64_t)&__p);
LABEL_29:
  v13 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v13;
}

void sub_100B062A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

unint64_t sub_100B062F0(unsigned __int8 *a1)
{
  return bswap32(*(_DWORD *)(a1 + 2)) | ((unint64_t)a1[1] << 32) | ((unint64_t)*a1 << 40);
}

BOOL sub_100B0630C(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2;
}

BOOL sub_100B06320(_QWORD *a1, _QWORD *a2)
{
  return *a1 <= *a2;
}

BOOL sub_100B06334(_QWORD *a1, _QWORD *a2)
{
  return *a1 > *a2;
}

_QWORD *sub_100B06348(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_100B063D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

unint64_t sub_100B063E8(unint64_t *a1)
{
  return bswap64(*a1) >> 16;
}

void sub_100B063F8(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100B06424(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100B06450()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100B064EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100B06504()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100B06590(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

id sub_100B06834(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onGeoCountryCodeChangeNotification:andMonitorRegion:", a2, *(_QWORD *)(a1 + 40));
}

void sub_100B06BC0(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100B06BEC(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 48))
    sub_101306878();
  return a1 + 48;
}

void sub_100B06C70(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLRangingSubscription::onBTLERangeNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102170900);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRangingSubscription::onBTLERangeNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102170900);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRangingSubscription::onBTLERangeNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100B09848(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100B06E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100B06E48@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  void *__p[2];
  char v9;
  _BYTE v10[24];
  _BYTE *v11;

  v6[0] = off_102170970;
  v6[1] = sub_100B06FA4;
  v6[2] = 0;
  v7 = v6;
  sub_1015A2E04(__p, "kCLConnectionMessageRanging");
  sub_100B0A624((uint64_t)v10, (uint64_t)v6);
  sub_100B0AB18(a1, (unsigned __int8 *)__p, 1);
  v2 = v11;
  if (v11 == v10)
  {
    v3 = 4;
    v2 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v9 < 0)
    operator delete(__p[0]);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100B06F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  uint64_t *v14;
  uint64_t v15;

  sub_1004E21A4((uint64_t)&a13);
  v14 = a12;
  if (a12 == &a9)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100B06FA4(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  int v6;
  std::string::size_type size;
  NSObject *v8;
  void **v9;
  std::string *p_p;
  void **v11;
  std::string *v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  const char *v16;
  char *v17;
  char v18;
  char v19;
  uint64_t *v20;
  NSObject *v21;
  std::string *v22;
  std::string *v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  uint64_t i;
  NSObject *v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  const char *v32;
  NSObject *v33;
  const char *v34;
  NSObject *v35;
  const char *v36;
  NSObject *v37;
  const char *v38;
  char *v39;
  const char *v40;
  uint64_t v41;
  id v43;
  BOOL v44;
  __int16 v45;
  __int16 v46;
  std::string __p;
  std::string v48;
  void *v49[2];
  void *v50[2];
  char v51;
  uint64_t v52[3];
  _BYTE v53[12];
  int v54;
  _BYTE v55[20];
  uint64_t v56;
  _QWORD v57[10];
  int v58;
  _BYTE buf[24];
  uint64_t v60;
  uint64_t v61;

  v43 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100B0B2E0(v52, a1 + 56);
  sub_1007A1CAC(a1 + 56, *(_QWORD **)(a1 + 64));
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1015A2E04(v50, (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "legacyClientKey"), "UTF8String"));
  v5 = sub_10000CA44(a3, "kCLConnectionMessageRegionsKey");
  if (v5 < 1)
  {
LABEL_76:
    sub_100B09100(a1);
    if (sub_1001A638C(a1))
    {
      sub_100B08BA8(a1);
      sub_1001A765C(a1);
    }
    else if (a2)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102170920);
      v26 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#Warning Unable to subscribe to ranging.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102170920);
        LOWORD(v54) = 0;
        LODWORD(v41) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#Warning Unable to subscribe to ranging.", &v54, v41);
        v39 = (char *)v38;
        sub_100512490("Generic", 1, 0, 2, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
      *(_QWORD *)buf = buf;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0;
      sub_100B09754((uint64_t)v52, (_QWORD *)(a1 + 56), (uint64_t *)buf);
      for (i = *(_QWORD *)&buf[8]; (_BYTE *)i != buf; i = *(_QWORD *)(i + 8))
      {
        sub_100119F3C(&v54);
        sub_100B0954C(i + 16, (uint64_t)&v54);
        v48.__r_.__value_.__r.__words[0] = 1;
        sub_1005282E8((uint64_t)&v54, "kCLConnectionMessageErrorKey", &v48);
        v48.__r_.__value_.__r.__words[0] = sub_10011A5AC((uint64_t)&v54);
        sub_100B096AC(a1, &v48);
        sub_10011A5A8(&v54);
      }
      sub_1000CAD6C((uint64_t *)buf);
    }
    goto LABEL_129;
  }
  v6 = 0;
  while (1)
  {
    sub_100119F3C(v49);
    if (!sub_100006BB4(a3, "kCLConnectionMessageRegionsKey", v49))
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102170920);
      v15 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Unable to parse ranged region,%{public}d.", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102170920);
        v54 = 67240192;
        *(_DWORD *)v55 = v6;
        LODWORD(v41) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Unable to parse ranged region,%{public}d.", &v54, v41);
        v17 = (char *)v16;
        sub_100512490("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      goto LABEL_68;
    }
    memset(&v48, 0, sizeof(v48));
    sub_1000BCB64((uint64_t)v49, "kCLConnectionMessageIdentifierKey", &v48);
    memset(&__p, 0, sizeof(__p));
    sub_1000BCB64((uint64_t)v49, "kCLConnectionMessageOnBehalfOfKey", &__p);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102170920);
      v8 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        v9 = v50;
        if (v51 < 0)
          v9 = (void **)v50[0];
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = p_p;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Client %{public}s is attempting ranging as a proxy service to %{public}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102170920);
        v11 = v50;
        if (v51 < 0)
          v11 = (void **)v50[0];
        v12 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v54 = 136446466;
        *(_QWORD *)v55 = v11;
        *(_WORD *)&v55[8] = 2082;
        *(_QWORD *)&v55[10] = v12;
        LODWORD(v41) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Client %{public}s is attempting ranging as a proxy service to %{public}s", &v54, v41);
        v14 = (char *)v13;
        sub_100512490("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      goto LABEL_64;
    }
    sub_1004E5948((uint64_t)&v54, (__int128 *)v50, (__int128 *)&v48, (__int128 *)&__p);
    sub_1001E4B84((uint64_t)v49, "kCLConnectionMessageRegionDefinitionKey", (_DWORD *)v57 + 1);
    sub_1000BCB64((uint64_t)v49, "kCLConnectionMessageProximityUUIDKey", (std::string *)&v55[4]);
    sub_100525CE4((uint64_t)v49, "kCLConnectionMessageMajorKey", v57);
    sub_100525CE4((uint64_t)v49, "kCLConnectionMessageMinorKey", (_WORD *)v57 + 1);
    v46 = 0;
    v45 = 0;
    v44 = 0;
    if ((sub_1001E4874(a3, "kCLConnectionMessageNotifyOnEntryKey", (BOOL *)&v46 + 1) & 1) == 0)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102170920);
      v28 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "kCLConnectionMessageNotifyOnEntryKey";
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102170920);
        *(_DWORD *)v53 = 136446210;
        *(_QWORD *)&v53[4] = "kCLConnectionMessageNotifyOnEntryKey";
        LODWORD(v41) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v53, v41);
        v30 = (char *)v29;
        sub_100512490("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v29);
        goto LABEL_139;
      }
      goto LABEL_124;
    }
    if ((sub_1001E4874(a3, "kCLConnectionMessageNotifyOnExitKey", (BOOL *)&v46) & 1) == 0)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102170920);
      v31 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "kCLConnectionMessageNotifyOnExitKey";
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102170920);
        *(_DWORD *)v53 = 136446210;
        *(_QWORD *)&v53[4] = "kCLConnectionMessageNotifyOnExitKey";
        LODWORD(v41) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v53, v41);
        v30 = (char *)v32;
        sub_100512490("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v32);
        goto LABEL_139;
      }
      goto LABEL_124;
    }
    if ((sub_1001E4874(a3, "kCLConnectionMessageNotifyEntryStateOnDisplayKey", (BOOL *)&v45 + 1) & 1) == 0)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102170920);
      v33 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102170920);
        *(_DWORD *)v53 = 136446210;
        *(_QWORD *)&v53[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
        LODWORD(v41) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v53, v41);
        v30 = (char *)v34;
        sub_100512490("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v34);
        goto LABEL_139;
      }
      goto LABEL_124;
    }
    if ((sub_1001E4874(a3, "kCLConnectionMessageConservativeEntry", (BOOL *)&v45) & 1) == 0)
      break;
    if ((sub_1001E4874(a3, "kCLConnectionMessageEmergencyKey", &v44) & 1) == 0)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102170920);
      v37 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "kCLConnectionMessageEmergencyKey";
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_124;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102170920);
      *(_DWORD *)v53 = 136446210;
      *(_QWORD *)&v53[4] = "kCLConnectionMessageEmergencyKey";
      LODWORD(v41) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v53, v41);
      v30 = (char *)v40;
      sub_100512490("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v40);
LABEL_139:
      if (v30 != buf)
        free(v30);
      goto LABEL_124;
    }
    if (HIBYTE(v46))
      v58 |= 1u;
    if ((_BYTE)v46)
      v58 |= 2u;
    if (HIBYTE(v45))
      v58 |= 4u;
    if ((_BYTE)v45)
      v58 |= 8u;
    if (!HIDWORD(v57[0]))
    {
      sub_1015A2E04(buf, "com.apple.locationd.ranging");
      v18 = sub_1002255E0(a1);
      v19 = v18;
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if ((v19 & 1) == 0)
        {
LABEL_55:
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102170920);
          v21 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
          {
            v22 = &v48;
            if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v22 = (std::string *)v48.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Ranging any region,%{public}s, requires an entitlement.", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_102170920);
            v23 = &v48;
            if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v23 = (std::string *)v48.__r_.__value_.__r.__words[0];
            *(_DWORD *)v53 = 136446210;
            *(_QWORD *)&v53[4] = v23;
            LODWORD(v41) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Ranging any region,%{public}s, requires an entitlement.", v53, v41);
            v25 = (char *)v24;
            sub_100512490("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v24);
            if (v25 != buf)
              free(v25);
          }
          sub_100119F3C(buf);
          sub_100B0954C((uint64_t)&v54, (uint64_t)buf);
          *(_QWORD *)v53 = 1;
          sub_1005282E8((uint64_t)buf, "kCLConnectionMessageErrorKey", v53);
          *(_QWORD *)v53 = sub_10011A5AC((uint64_t)buf);
          sub_100B096AC(a1, v53);
          sub_10011A5A8(buf);
          goto LABEL_63;
        }
      }
      else if ((v18 & 1) == 0)
      {
        goto LABEL_55;
      }
    }
    *(_QWORD *)buf = off_10213F058;
    if (SHIBYTE(v56) < 0)
    {
      sub_100115CE4(&buf[8], *(void **)&v55[4], *(unint64_t *)&v55[12]);
    }
    else
    {
      *(_OWORD *)&buf[8] = *(_OWORD *)&v55[4];
      v60 = v56;
    }
    v61 = v57[0];
    *(_QWORD *)v53 = buf;
    v20 = sub_100B0B9B8((uint64_t **)(a1 + 56), (uint64_t)buf, (uint64_t)&unk_101B9EB60, (uint64_t *)v53);
    sub_1007A3468((uint64_t **)v20 + 9, (uint64_t)&v54, (uint64_t)&v54);
    *(_QWORD *)buf = off_10213F058;
    if (SHIBYTE(v60) < 0)
      operator delete(*(void **)&buf[8]);
LABEL_63:
    sub_100114750((uint64_t)&v54);
LABEL_64:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
LABEL_68:
    sub_10011A5A8(v49);
    if (v5 == ++v6)
      goto LABEL_76;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102170920);
  v35 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "kCLConnectionMessageConservativeEntry";
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102170920);
    *(_DWORD *)v53 = 136446210;
    *(_QWORD *)&v53[4] = "kCLConnectionMessageConservativeEntry";
    LODWORD(v41) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v53, v41);
    v30 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v36);
    goto LABEL_139;
  }
LABEL_124:
  sub_100114750((uint64_t)&v54);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  sub_10011A5A8(v49);
LABEL_129:
  if (v51 < 0)
    operator delete(v50[0]);
  sub_1007A1CAC((uint64_t)v52, (_QWORD *)v52[1]);

}

void sub_100B0813C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_100114750((uint64_t)&a52);
  if (a31 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  sub_10011A5A8(&a38);
  if (a45 < 0)
    operator delete(a40);
  sub_1007A1CAC((uint64_t)&a46, (_QWORD *)a47);

  _Unwind_Resume(a1);
}

uint64_t sub_100B082A8(uint64_t a1)
{
  _OWORD *v2;
  NSObject *v3;
  uint64_t v4;
  void **v5;
  void **v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  _BYTE v15[12];
  uint8_t buf[16];
  void *v17[2];
  void *__p[4];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *(_QWORD *)a1 = off_1021708B0;
  v2 = (_OWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102170920);
    v3 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "iB: ending metric session (BeaconRangingSession) for %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102170920);
      v12 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)v15 = 138412290;
      *(_QWORD *)&v15[4] = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "iB: ending metric session (BeaconRangingSession) for %@", v15, 12);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual CLRangingSubscription::~CLRangingSubscription()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    sub_100C33C30((uint64_t)v2);
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    memset(__p, 0, sizeof(__p));
    *(_QWORD *)buf = 0;
    *(_OWORD *)v17 = 0u;
    *(_QWORD *)&buf[8] = 0xBFF0000000000000;
    LODWORD(v19) = 0;
    DWORD2(v22) = 0;
    *v2 = *(_OWORD *)buf;
    v5 = (void **)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = *(_OWORD *)v17;
    *(void **)(a1 + 112) = __p[0];
    HIBYTE(__p[0]) = 0;
    LOBYTE(v17[0]) = 0;
    v6 = (void **)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&__p[1];
    *(void **)(a1 + 136) = __p[3];
    HIBYTE(__p[3]) = 0;
    LOBYTE(__p[1]) = 0;
    v7 = v20;
    *(_OWORD *)(a1 + 144) = v19;
    *(_OWORD *)(a1 + 160) = v7;
    sub_100B0A6B4((void **)(a1 + 176));
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)&v22 = 0;
    v21 = 0uLL;
    *(_DWORD *)(a1 + 200) = 0;
    *(_QWORD *)v15 = &v21;
    sub_100B0A728((void ***)v15);
    if (SHIBYTE(__p[3]) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v17[0]);
  }
  v8 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  if (*(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  v9 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *(_QWORD *)buf = a1 + 176;
  sub_100B0A728((void ***)buf);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_1007A1CAC(a1 + 56, *(_QWORD **)(a1 + 64));
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_10002FA68(a1);
  return a1;
}

void sub_100B08630(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100B0863C(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 96);
  sub_100B0A728(&v3);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100B08698(uint64_t a1)
{
  sub_100B082A8(a1);
  operator delete();
}

void sub_100B086BC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5;

  v5 = sub_1001B5A2C(a1, a2, a3, a4, a5);
  *(_QWORD *)v5 = off_1021708B0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 56) = v5 + 64;
  *(_QWORD *)(v5 + 72) = 0;
  *(_BYTE *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(v5 + 152) = 0;
  *(_BYTE *)(v5 + 160) = 0;
  *(_DWORD *)(v5 + 164) = 0;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_DWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 184) = 0;
  *(_QWORD *)(v5 + 192) = 0;
  *(_QWORD *)(v5 + 176) = 0;
  *(_DWORD *)(v5 + 200) = 0;
  *(_DWORD *)(v5 + 216) = -1;
  *(_QWORD *)(v5 + 208) = 0;
  *(_BYTE *)(v5 + 320) = 0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_DWORD *)(v5 + 324) = -1;
  sub_1011482D0();
}

void sub_100B08818(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  sub_10079C284(v4);
  v6 = *(_QWORD *)(v1 + 208);
  *(_QWORD *)(v1 + 208) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_100B0863C(v3);
  sub_1007A1CAC(v2, *(_QWORD **)(v1 + 64));
  v7 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_100B08888(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLRangingSubscription::onAppMonitorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102170900);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRangingSubscription::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102170900);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRangingSubscription::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100B0A484(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100B08A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100B08A64(uint64_t a1)
{
  unsigned int v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE v8[16];

  if ((sub_100FFB2C8(a1, 2) & 1) == 0)
    sub_100FFB31C(a1);
  v2 = objc_msgSend(*(id *)(a1 + 16), "transientAwareRegistrationResult");
  if (v2 <= 8)
  {
    if (((1 << v2) & 0x1C) != 0)
    {
      sub_100B09100(a1);
      sub_100119F3C(v8);
      v5 = 1;
      sub_1005282E8((uint64_t)v8, "kCLConnectionMessageErrorKey", &v5);
      v5 = (uint64_t)&v5;
      v6 = &v5;
      v7 = 0;
      sub_100B09454((_QWORD *)(a1 + 56), &v5);
      for (i = v6; i != &v5; i = (uint64_t *)i[1])
      {
        sub_100B0954C((uint64_t)(i + 2), (uint64_t)v8);
        v4 = sub_10011A5AC((uint64_t)v8);
        sub_100B096AC(a1, &v4);
      }
      sub_1000CAD6C(&v5);
      sub_10011A5A8(v8);
    }
    else if (((1 << v2) & 0x103) != 0)
    {
      sub_100B08BA8(a1);
    }
  }
  sub_100B08BA8(a1);
}

void sub_100B08B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_1000CAD6C((uint64_t *)va);
  sub_10011A5A8(va1);
  _Unwind_Resume(a1);
}

void sub_100B08BA8(uint64_t a1)
{
  char v2;
  char v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8[2];
  uint64_t v9;
  uint64_t __p;
  __int16 __p_8;
  const char *__p_10;
  __int16 v13;
  uint64_t v14;

  sub_1015A2E04(&__p, "kCLConnectionMessageRanging");
  v2 = sub_100FFB214(a1);
  v3 = v2;
  if (SBYTE3(v14) < 0)
  {
    operator delete((void *)__p);
    if ((v3 & 1) == 0)
      return;
  }
  else if ((v2 & 1) == 0)
  {
    return;
  }
  if ((sub_100FFB2C8(a1, 2) & 1) != 0)
  {
    v8[0] = (uint64_t)v8;
    v8[1] = (uint64_t)v8;
    v9 = 0;
    sub_100B09454((_QWORD *)(a1 + 56), v8);
    if (v9)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102170920);
      v4 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        __p = 68289282;
        __p_8 = 2082;
        __p_10 = "";
        v13 = 2050;
        v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Starting ranging for regions\", \"rangedRegions\":%{public}lu}", (uint8_t *)&__p, 0x1Cu);
      }
      sub_1001B49DC(a1, 4);
      sub_100B06BEC(a1);
      sub_100B0BB38();
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102170920);
    v7 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      __p = 68289026;
      __p_8 = 2082;
      __p_10 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning There are no regions to range.\"}", (uint8_t *)&__p, 0x12u);
    }
    sub_1000CAD6C(v8);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102170940);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 24);
      __p = 68289282;
      __p_8 = 2082;
      __p_10 = "";
      v13 = 2114;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client not authorized for ranging; not starting yet\", \"Client\":%{public, location:escape_only}@}",
        (uint8_t *)&__p,
        0x1Cu);
    }
    sub_100B09100(a1);
  }
}

void sub_100B090C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_1000CAD6C(&a12);
  _Unwind_Resume(a1);
}

void sub_100B09100(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void **v6;
  void **v7;
  __int128 v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  _BYTE v12[12];
  _BYTE buf[64];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102170920);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Stopping ranging.\"}", buf, 0x12u);
  }
  sub_100FFB31C(a1);
  v3 = sub_100B06BEC(a1);
  objc_msgSend(*(id *)(*(_QWORD *)v3 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v3 + 8), 0);
  if (*(_BYTE *)(a1 + 80))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102170920);
    v4 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: ending metric session (BeaconRangingSession) for %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102170920);
      v9 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)v12 = 138412290;
      *(_QWORD *)&v12[4] = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "iB: ending metric session (BeaconRangingSession) for %@", v12, 12);
      v11 = (char *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLRangingSubscription::stopRanging_nl()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_100C33C30(a1 + 80);
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_QWORD *)buf = 0;
    memset(&buf[16], 0, 48);
    *(_QWORD *)&buf[8] = 0xBFF0000000000000;
    LODWORD(v14) = 0;
    DWORD2(v17) = 0;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)buf;
    v6 = (void **)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&buf[16];
    *(_QWORD *)(a1 + 112) = *(_QWORD *)&buf[32];
    buf[39] = 0;
    buf[16] = 0;
    v7 = (void **)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      operator delete(*v7);
    *(_OWORD *)v7 = *(_OWORD *)&buf[40];
    *(_QWORD *)(a1 + 136) = *(_QWORD *)&buf[56];
    buf[63] = 0;
    buf[40] = 0;
    v8 = v15;
    *(_OWORD *)(a1 + 144) = v14;
    *(_OWORD *)(a1 + 160) = v8;
    sub_100B0A6B4((void **)(a1 + 176));
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)&v17 = 0;
    v16 = 0uLL;
    *(_DWORD *)(a1 + 200) = 0;
    *(_QWORD *)v12 = &v16;
    sub_100B0A728((void ***)v12);
    if ((buf[63] & 0x80000000) != 0)
      operator delete(*(void **)&buf[40]);
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
}

uint64_t sub_100B09454(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;

  sub_1000CAD6C(a2);
  v6 = (_QWORD *)*a1;
  v4 = a1 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      v7 = (_QWORD *)v5[9];
      if (v7 != v5 + 10)
      {
        do
        {
          v8 = sub_100B0AEF8((uint64_t)a2, 0, 0, (uint64_t)(v7 + 4));
          v9 = *a2;
          *v8 = *a2;
          v8[1] = a2;
          *(_QWORD *)(v9 + 8) = v8;
          *a2 = (uint64_t)v8;
          ++a2[2];
          v10 = (_QWORD *)v7[1];
          if (v10)
          {
            do
            {
              v11 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              v11 = (_QWORD *)v7[2];
              v12 = *v11 == (_QWORD)v7;
              v7 = v11;
            }
            while (!v12);
          }
          v7 = v11;
        }
        while (v11 != v5 + 10);
      }
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v12 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v12);
      }
      v5 = v14;
    }
    while (v14 != v4);
  }
  return 1;
}

uint64_t sub_100B0954C(uint64_t a1, uint64_t a2)
{
  int v5;
  int v6;

  sub_100528888(a2, "kCLConnectionMessageNameKey", (char *)(a1 + 88));
  sub_100528888(a2, "kCLConnectionMessageOnBehalfOfKey", (char *)(a1 + 64));
  v6 = 0;
  sub_10011B4E4(a2, "kCLConnectionMessageRegionTypeKey", &v6);
  v6 = *(_DWORD *)(a1 + 36) & 7;
  sub_10011B4E4(a2, "kCLConnectionMessageRegionDefinitionKey", &v6);
  sub_100528888(a2, "kCLConnectionMessageProximityUUIDKey", (char *)(a1 + 8));
  sub_100527A78(a2, "kCLConnectionMessageMajorKey", (unsigned __int16 *)(a1 + 32));
  sub_100527A78(a2, "kCLConnectionMessageMinorKey", (unsigned __int16 *)(a1 + 34));
  v5 = *(_DWORD *)(a1 + 112) & 1;
  sub_10011B4E4(a2, "kCLConnectionMessageNotifyOnEntryKey", &v5);
  v5 = *(_DWORD *)(a1 + 112) & 2;
  sub_10011B4E4(a2, "kCLConnectionMessageNotifyOnExitKey", &v5);
  v5 = *(_DWORD *)(a1 + 112) & 4;
  sub_10011B4E4(a2, "kCLConnectionMessageNotifyEntryStateOnDisplayKey", &v5);
  v5 = *(_DWORD *)(a1 + 112) & 8;
  sub_10011B4E4(a2, "kCLConnectionMessageConservativeEntry", &v5);
  LOBYTE(v5) = 0;
  sub_10011B47C(a2, "kCLConnectionMessageEmergencyKey", &v5);
  return 1;
}

void sub_100B096AC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(off_1021709F0, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100B09740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B09754(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _BYTE v14[24];
  _QWORD v15[2];
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  sub_1000CAD6C(a3);
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
  {
    do
    {
      v9 = sub_1007A2DB4(a1, (uint64_t)(v7 + 4));
      if ((_QWORD *)(a1 + 8) == v9)
      {
        sub_100B0AF54((uint64_t)v14, (_QWORD *)v7[9], v7 + 10, a3);
      }
      else
      {
        v10 = v9[9];
        v19 = v7[9];
        v17 = v10;
        v18 = v7 + 10;
        v15[1] = a3;
        v16 = v9 + 10;
        v15[0] = a3;
        sub_100B0AFFC((uint64_t)&v19, &v18, (uint64_t)&v17, &v16, (uint64_t)v15, (uint64_t)v14);
      }
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v7[2];
          v13 = *v12 == (_QWORD)v7;
          v7 = v12;
        }
        while (!v13);
      }
      v7 = v12;
    }
    while (v12 != v6);
  }
}

void sub_100B09848(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  uint8_t *v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  _DWORD *v24;
  int v25;
  __CFArray *Mutable;
  CFNumberRef v27;
  char *v28;
  CFStringRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  char *v36;
  _QWORD *v37;
  _QWORD *v38;
  NSObject *v39;
  int v40;
  uint8_t *v41;
  int v42;
  uint8_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  _BYTE *v49;
  int v50;
  _BYTE *v51;
  char *v52;
  char *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  NSObject *v57;
  uint8_t *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _BYTE *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  __CFArray *theArray;
  _BYTE v71[16];
  int valuePtr;
  _BYTE *v73;
  __int16 v74;
  int v75;
  _BYTE v76[12];
  __int16 v77;
  int v78;
  char v79;
  uint8_t buf[8];
  char v81;

  if (!*a3)
  {
    sub_100119F3C(v71);
    v12 = a4 + 8;
    v13 = sub_1007A2DB4(a1 + 56, a4 + 8);
    v14 = v13;
    if ((_QWORD *)(a1 + 64) == v13)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102170920);
      v16 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        sub_1004E5D0C(v12, buf);
        v17 = v81 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v76 = 136380675;
        *(_QWORD *)&v76[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "iB: Unable to find ranged region,%{private}s.", v76, 0xCu);
        if (v81 < 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102170920);
        v18 = qword_1022A01C8;
        sub_1004E5D0C(v12, v76);
        if (v79 >= 0)
          v19 = v76;
        else
          v19 = *(_BYTE **)v76;
        valuePtr = 136380675;
        v73 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 2, "iB: Unable to find ranged region,%{private}s.", &valuePtr, 12);
        v21 = v20;
        if (v79 < 0)
          operator delete(*(void **)v76);
        sub_100512490("Generic", 1, 0, 2, "void CLRangingSubscription::onBTLERangeNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLERangeManager_Type::NotificationData &)", "%s\n", v21);
        if (v21 != (char *)buf)
          free(v21);
      }
      goto LABEL_92;
    }
    if ((*(_DWORD *)a4 - 1) >= 2)
    {
      if (!*(_DWORD *)a4)
      {
        v66 = v13;
        v69 = a1;
        theArray = CFArrayCreateMutable(kCFAllocatorDefault, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3), &kCFTypeArrayCallBacks);
        v22 = *(_QWORD *)(a4 + 48);
        v68 = a4;
        if (v22 != *(_QWORD *)(a4 + 56))
        {
          v23 = (_BYTE *)(a1 + 80);
          v24 = (_DWORD *)(v22 + 56);
          v67 = (_BYTE *)(a1 + 80);
          do
          {
            if (*v23)
              sub_100C33B6C((uint64_t)v23, (uint64_t)(v24 - 14));
            sub_100119F3C(buf);
            valuePtr = *(v24 - 5) & 7;
            if ((*(v24 - 4) - 1) >= 3)
              v25 = 0;
            else
              v25 = *(v24 - 4);
            Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 8, &kCFTypeArrayCallBacks);
            v27 = sub_10019CED4(&valuePtr);
            v28 = (char *)(v24 - 12);
            if (*((char *)v24 - 25) < 0)
              v28 = *(char **)v28;
            v29 = sub_1001A48D8(v28);
            v30 = sub_100528930((unsigned __int16 *)v24 - 12);
            v31 = sub_100528930((unsigned __int16 *)v24 - 11);
            *(_DWORD *)v76 = v25;
            v32 = sub_10019CED4(v76);
            v33 = sub_1005289B8(v24 - 2);
            v34 = sub_100528968(v24);
            *(_QWORD *)v76 = CFAbsoluteTimeGetCurrent();
            v35 = sub_1005289B8(v76);
            CFArrayAppendValue(Mutable, v27);
            CFArrayAppendValue(Mutable, v29);
            CFArrayAppendValue(Mutable, v30);
            CFArrayAppendValue(Mutable, v31);
            CFArrayAppendValue(Mutable, v32);
            CFArrayAppendValue(Mutable, v33);
            CFArrayAppendValue(Mutable, v34);
            CFArrayAppendValue(Mutable, v35);
            CFArrayAppendValue(theArray, Mutable);
            CFRelease(v34);
            CFRelease(v33);
            CFRelease(v32);
            CFRelease(v31);
            CFRelease(v30);
            CFRelease(v29);
            CFRelease(v27);
            CFRelease(Mutable);
            CFRelease(v35);
            sub_10011A5A8(buf);
            v23 = v67;
            v36 = (char *)(v24 + 8);
            v24 += 22;
          }
          while (v36 != *(char **)(v68 + 56));
        }
        sub_10011B54C((uint64_t)v71, "kCLConnectionMessageBeaconsKey", (uint64_t)theArray);
        CFRelease(theArray);
        v37 = (_QWORD *)v66[9];
        if (v37 != v66 + 10)
        {
          do
          {
            v38 = v37 + 4;
            sub_100B0954C((uint64_t)(v37 + 4), (uint64_t)v71);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_102170920);
            v39 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
            {
              (*(void (**)(uint8_t *__return_ptr, _QWORD *))(*v38 + 16))(buf, v37 + 4);
              v40 = v81;
              v41 = *(uint8_t **)buf;
              v42 = sub_10000CA44((uint64_t)v71, "kCLConnectionMessageBeaconsKey");
              *(_DWORD *)v76 = 136380931;
              v43 = buf;
              if (v40 < 0)
                v43 = v41;
              *(_QWORD *)&v76[4] = v43;
              v77 = 1026;
              v78 = v42;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "@iB: Sending kCLConnectionMessageRanging for region,%{private}s, with beacons,%{public}d.", v76, 0x12u);
              if (v81 < 0)
                operator delete(*(void **)buf);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_102170920);
              v47 = qword_1022A01C8;
              (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v38 + 16))(v76, v37 + 4);
              v48 = v79;
              v49 = *(_BYTE **)v76;
              v50 = sub_10000CA44((uint64_t)v71, "kCLConnectionMessageBeaconsKey");
              valuePtr = 136380931;
              v51 = v76;
              if (v48 < 0)
                v51 = v49;
              v73 = v51;
              v74 = 1026;
              v75 = v50;
              LODWORD(v65) = 18;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v47, 1, "@iB: Sending kCLConnectionMessageRanging for region,%{private}s, with beacons,%{public}d.", &valuePtr, v65);
              v53 = v52;
              if (v79 < 0)
                operator delete(*(void **)v76);
              sub_100512490("Generic", 1, 0, 2, "void CLRangingSubscription::onBTLERangeNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLERangeManager_Type::NotificationData &)", "%s\n", v53);
              if (v53 != (char *)buf)
                free(v53);
            }
            *(_QWORD *)buf = sub_10011A5AC((uint64_t)v71);
            sub_100B0A3DC(v69, buf);
            v44 = (_QWORD *)v37[1];
            if (v44)
            {
              do
              {
                v45 = v44;
                v44 = (_QWORD *)*v44;
              }
              while (v44);
            }
            else
            {
              do
              {
                v45 = (_QWORD *)v37[2];
                v46 = *v45 == (_QWORD)v37;
                v37 = v45;
              }
              while (!v46);
            }
            v37 = v45;
          }
          while (v45 != v66 + 10);
        }
        goto LABEL_92;
      }
      v15 = 17;
    }
    else
    {
      v15 = 16;
    }
    *(_QWORD *)buf = v15;
    sub_1005282E8((uint64_t)v71, "kCLConnectionMessageErrorKey", buf);
    v54 = (_QWORD *)v14[9];
    v55 = v14 + 10;
    if (v54 != v14 + 10)
    {
      do
      {
        v56 = v54 + 4;
        sub_100B0954C((uint64_t)(v54 + 4), (uint64_t)v71);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102170920);
        v57 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(uint8_t *__return_ptr, _QWORD *))(*v56 + 16))(buf, v54 + 4);
          v58 = buf;
          if (v81 < 0)
            v58 = *(uint8_t **)buf;
          *(_DWORD *)v76 = 136380931;
          *(_QWORD *)&v76[4] = v58;
          v77 = 1026;
          v78 = v15;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#Warning Sending kCLConnectionMessageRangingError for region,%{private}s with error,%{public}d.", v76, 0x12u);
          if (v81 < 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102170920);
          v61 = qword_1022A01C8;
          (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v56 + 16))(v76, v54 + 4);
          v62 = v76;
          if (v79 < 0)
            v62 = *(_BYTE **)v76;
          valuePtr = 136380931;
          v73 = v62;
          v74 = 1026;
          v75 = v15;
          LODWORD(v65) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v61, 0, "#Warning Sending kCLConnectionMessageRangingError for region,%{private}s with error,%{public}d.", &valuePtr, v65);
          v64 = v63;
          if (v79 < 0)
            operator delete(*(void **)v76);
          sub_100512490("Generic", 1, 0, 2, "void CLRangingSubscription::onBTLERangeNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLERangeManager_Type::NotificationData &)", "%s\n", v64);
          if (v64 != (char *)buf)
            free(v64);
        }
        *(_QWORD *)buf = sub_10011A5AC((uint64_t)v71);
        sub_100B096AC(a1, buf);
        v59 = (_QWORD *)v54[1];
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = (_QWORD *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = (_QWORD *)v54[2];
            v46 = *v60 == (_QWORD)v54;
            v54 = v60;
          }
          while (!v46);
        }
        v54 = v60;
      }
      while (v60 != v55);
    }
LABEL_92:
    sub_10011A5A8(v71);
    return;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102170920);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *a3;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Unknown range notification received, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102170920);
    v7 = *a3;
    *(_DWORD *)v76 = 67240192;
    *(_DWORD *)&v76[4] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#Warning Unknown range notification received, %{public}d", v76, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLRangingSubscription::onBTLERangeNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLERangeManager_Type::NotificationData &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_100B0A31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  sub_10011A5A8(&a19);
  _Unwind_Resume(a1);
}

void sub_100B0A3DC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_1021709F8, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100B0A470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B0A484(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  void *v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void **v17;

  if ((*a3 - 1) >= 3)
  {
    if (*a3 != 4)
      return;
    *(_DWORD *)(a1 + 216) = *(_DWORD *)a4;
    std::string::operator=((std::string *)(a1 + 224), (const std::string *)(a4 + 8));
    std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a4 + 32));
    std::string::operator=((std::string *)(a1 + 272), (const std::string *)(a4 + 56));
    std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a4 + 80));
    v14 = *(_QWORD *)(a4 + 104);
    goto LABEL_28;
  }
  v6 = *(unsigned __int8 *)(a4 + 31);
  if ((v6 & 0x80u) == 0)
    v7 = *(unsigned __int8 *)(a4 + 31);
  else
    v7 = *(_QWORD *)(a4 + 16);
  v8 = *(unsigned __int8 *)(a1 + 247);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 232);
  if (v7 != v8)
    return;
  v10 = (const void **)(a4 + 8);
  v12 = (_QWORD *)(a1 + 224);
  v11 = *(void **)(a1 + 224);
  if (v9 >= 0)
    v13 = (unsigned __int8 *)(a1 + 224);
  else
    v13 = *(unsigned __int8 **)(a1 + 224);
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, v13, *(_QWORD *)(a4 + 16)))
      return;
    goto LABEL_19;
  }
  if (!*(_BYTE *)(a4 + 31))
  {
LABEL_19:
    *(_DWORD *)(a1 + 216) = -1;
    if (v9 < 0)
      operator delete(v11);
    v15 = (void **)(a1 + 248);
    *v12 = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    if (*(char *)(a1 + 271) < 0)
      operator delete(*v15);
    v16 = (void **)(a1 + 272);
    *v15 = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    if (*(char *)(a1 + 295) < 0)
      operator delete(*v16);
    v17 = (void **)(a1 + 296);
    *v16 = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    if (*(char *)(a1 + 319) < 0)
      operator delete(*v17);
    *v17 = 0;
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    v14 = 0xFFFFFFFF00000000;
LABEL_28:
    *(_QWORD *)(a1 + 320) = v14;
    return;
  }
  while (*(unsigned __int8 *)v10 == *v13)
  {
    v10 = (const void **)((char *)v10 + 1);
    ++v13;
    if (!--v6)
      goto LABEL_19;
  }
}

void sub_100B0A5F8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100B0A624(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100B0A688(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100B0A6B4(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 40;
      v6 = v3 - 40;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 40;
        (*v7)(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_100B0A728(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 40;
      v7 = v4 - 40;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 40;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100B0A7B4(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

__n128 sub_100B0A7E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102170970;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100B0A81C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102170970;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100B0A840(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_100B0A890(a1 + 8, a2, a3);
}

uint64_t sub_100B0A848(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100B0A884()
{
}

void sub_100B0A890(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100B0A914(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100B0A8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B0A914(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102170920);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102170920);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_100B0AAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B0AB18(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100B0AB90(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100B0AB7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100B0AB90(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100B0AE10(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100B0ADF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B0AE10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100B0AE84(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100B0AE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B0AE84(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100B0AEDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100B0AEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x88uLL);
  *v7 = a2;
  v7[1] = a3;
  sub_1004E5FB0((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_100B0AF40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B0AF54(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = sub_100B0AEF8((uint64_t)a4, 0, 0, (uint64_t)(v5 + 4));
      v8 = *a4;
      *v7 = *a4;
      v7[1] = a4;
      *(_QWORD *)(v8 + 8) = v7;
      *a4 = (uint64_t)v7;
      ++a4[2];
      v9 = (_QWORD *)v5[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v5[2];
          v11 = *v10 == (_QWORD)v5;
          v5 = v10;
        }
        while (!v11);
      }
      v5 = v10;
    }
    while (v10 != a3);
    return a3;
  }
  return v5;
}

double sub_100B0AFFC@<D0>(uint64_t a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *i;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  double result;
  uint64_t v28;
  __int128 v29;

  v10 = *(_QWORD **)a1;
  v11 = *a2;
  if (*(_QWORD **)a1 == *a2)
  {
LABEL_31:
    v11 = v10;
    goto LABEL_32;
  }
  for (i = *(_QWORD **)a3; *(_QWORD *)a3 != *a4; i = *(_QWORD **)a3)
  {
    if (sub_1007A2FD8((uint64_t)(v10 + 4), (uint64_t)(i + 4)))
    {
      sub_100B0B1B8((uint64_t *)a5, *(_QWORD *)a1 + 32);
      v15 = *(_QWORD **)a1;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v15[2];
          v18 = *v17 == (_QWORD)v15;
          v15 = v17;
        }
        while (!v18);
      }
      *(_QWORD *)a1 = v17;
    }
    else
    {
      if (sub_1007A2FD8(*(_QWORD *)a3 + 32, *(_QWORD *)a1 + 32))
      {
        v19 = *(_QWORD **)a3;
        v20 = *(_QWORD **)(*(_QWORD *)a3 + 8);
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v19[2];
            v18 = *v21 == (_QWORD)v19;
            v19 = v21;
          }
          while (!v18);
        }
      }
      else
      {
        v22 = *(_QWORD **)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8);
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v22[2];
            v18 = *v24 == (_QWORD)v22;
            v22 = v24;
          }
          while (!v18);
        }
        *(_QWORD *)a1 = v24;
        v25 = *(_QWORD **)a3;
        v26 = *(_QWORD **)(*(_QWORD *)a3 + 8);
        if (v26)
        {
          do
          {
            v21 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v25[2];
            v18 = *v21 == (_QWORD)v25;
            v25 = v21;
          }
          while (!v18);
        }
      }
      *(_QWORD *)a3 = v21;
    }
    v10 = *(_QWORD **)a1;
    v11 = *a2;
    if (*(_QWORD **)a1 == *a2)
      goto LABEL_31;
  }
LABEL_32:
  sub_100B0B224(v10, v11, *(_QWORD *)a5, *(uint64_t **)(a5 + 8), &v28);
  *(_QWORD *)a6 = v28;
  result = *(double *)&v29;
  *(_OWORD *)(a6 + 8) = v29;
  return result;
}

uint64_t *sub_100B0B1B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (uint64_t *)a1[1];
  v5 = sub_100B0AEF8(*a1, 0, 0, a2);
  v6 = *v4;
  *(_QWORD *)(v6 + 8) = v5;
  *v5 = v6;
  *v4 = (uint64_t)v5;
  v5[1] = v4;
  ++*(_QWORD *)(v3 + 16);
  a1[1] = (uint64_t)v5;
  a1[1] = v5[1];
  return a1;
}

void sub_100B0B224(_QWORD *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v7;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  v7 = a1;
  if (a1 != a2)
  {
    do
    {
      v10 = sub_100B0AEF8(a3, 0, 0, (uint64_t)(v7 + 4));
      v11 = *a4;
      *(_QWORD *)(v11 + 8) = v10;
      *v10 = v11;
      *a4 = (uint64_t)v10;
      v10[1] = a4;
      ++*(_QWORD *)(a3 + 16);
      v12 = (_QWORD *)v7[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v7[2];
          v14 = *v13 == (_QWORD)v7;
          v7 = v13;
        }
        while (!v14);
      }
      v7 = v13;
    }
    while (v13 != a2);
    v7 = a2;
  }
  *a5 = v7;
  a5[1] = a3;
  a5[2] = a4;
}

uint64_t *sub_100B0B2E0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100B0B334(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_100B0B31C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1007A1CAC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100B0B334(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100B0B3B8(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100B0B3B8(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  uint64_t v12;

  v6 = sub_100B0B44C(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_100B0B5D0((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1007A3424((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *sub_100B0B44C(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_1007A2E2C(a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_1007A2E2C((uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return sub_1007A32B4((uint64_t)a1, a3, a5);
  }
  if (sub_1007A2E2C((uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1007A2E2C(a5, (uint64_t)(v15 + 4)))
        return sub_1007A32B4((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t sub_100B0B5D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_100B0B638((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100B0B620(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1007A3424(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100B0B638(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = off_10213F058;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_100B0B6DC((uint64_t *)(a1 + 40), a2 + 40);
  return a1;
}

void sub_100B0B6B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3 + 16;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100B0B6DC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100B0B730(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_100B0B718(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100364238(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100B0B730(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100B0B7B4(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100B0B7B4(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)sub_100B0B834(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1007A3574((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_100B0B834(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_1007A2FD8(a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_1007A2FD8((uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return sub_1007A34E4((uint64_t)a1, a3, a5);
  }
  if (sub_1007A2FD8((uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1007A2FD8(a5, (uint64_t)(v15 + 4)))
        return sub_1007A34E4((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t *sub_100B0B9B8(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_1007A32B4((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_100B0BA60((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1007A3424((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_100B0BA60@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_100B0BAC8(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100B0BAB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1007A3424(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B0BAC8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;

  *a1 = off_10213F058;
  v4 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4(v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 32);
  a1[7] = 0;
  a1[6] = 0;
  a1[4] = v6;
  a1[5] = a1 + 6;
  return a1;
}

void sub_100B0BB38()
{
  operator new();
}

void sub_100B0BBCC()
{
  operator delete();
}

uint64_t sub_100B0BBF0(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
  {
    sub_1000CAD6C(*(uint64_t **)(result + 32));
    operator delete();
  }
  return result;
}

uint64_t *sub_100B0BC38(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    v5 = sub_100B0AEF8((uint64_t)a1, 0, 0, i + 16);
    v6 = *a1;
    *v5 = *a1;
    v5[1] = a1;
    *(_QWORD *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_100B0BCB4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1000CAD6C(v1);
  _Unwind_Resume(a1);
}

void sub_100B0BCC8(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      sub_100B0BD20(a1, v3, a3);
      v3 += 72;
    }
    while (v3 != v4);
  }
}

void sub_100B0BD20(uint64_t a1, uint64_t a2, double a3)
{
  int v6;
  float32x4_t v7;

  *(_QWORD *)a1 = *(_QWORD *)(a2 + 8);
  if (sub_100182290(a1 + 8))
  {
    if (*(double *)(a2 + 8) >= *(double *)(a1 + 168))
    {
      ++*(_DWORD *)(a1 + 400);
      v6 = *(unsigned __int8 *)(a2 + 63);
      *(_DWORD *)(a1 + 404) += v6;
      *(_DWORD *)(a1 + 408) += *(unsigned __int8 *)(a2 + 64);
      *(_DWORD *)(a1 + 412) += *(unsigned __int8 *)(a2 + 65);
      if (v6)
      {
        v7 = *(float32x4_t *)(a2 + 20);
        v7.i64[1] = *(_QWORD *)(a2 + 32);
        *(float32x4_t *)(a1 + 344) = vaddq_f32(v7, *(float32x4_t *)(a1 + 344));
      }
    }
  }
  sub_100B0BDD0((double *)a1, a3);
}

void sub_100B0BDD0(double *a1, double a2)
{
  double v4;

  if (sub_100182290((uint64_t)(a1 + 1)) && sub_100182290((uint64_t)(a1 + 22)))
  {
    v4 = a1[42];
    if (*a1 > v4 || v4 + 2.0 < a2)
      sub_100B0C26C((uint64_t)a1);
  }
}

void sub_100B0BE40(uint64_t a1, char a2, double a3)
{
  sub_100B0BE7C(a1, a3);
  *(_BYTE *)(a1 + 360) = a2;
  sub_100B0BDD0((double *)a1, a3);
}

uint64_t sub_100B0BE7C(uint64_t result, double a2)
{
  double v2;
  double v4;
  float v5;
  float v6;

  v2 = *(double *)(result + 336);
  if (v2 < a2 && v2 > 0.0)
    a2 = *(double *)(result + 336);
  v4 = a2 - *(double *)(result + 368);
  if (*(_BYTE *)(result + 360))
  {
    v5 = v4 + *(float *)(result + 432);
    *(float *)(result + 432) = v5;
  }
  else
  {
    v6 = v4 + *(float *)(result + 436);
    *(float *)(result + 436) = v6;
  }
  *(double *)(result + 368) = a2;
  return result;
}

void sub_100B0BED4(uint64_t a1, _DWORD *a2, _DWORD *a3, double a4)
{
  if ((*a2 - 1) <= 1)
  {
    sub_100B0BF34(a1, a4);
    *(_DWORD *)(a1 + 376) = *a3;
    sub_100B0BDD0((double *)a1, a4);
  }
}

float sub_100B0BF34(uint64_t a1, double a2)
{
  double v2;
  double v4;
  int v5;
  float result;

  v2 = *(double *)(a1 + 336);
  if (v2 >= a2 || v2 <= 0.0)
    v2 = a2;
  v4 = v2 - *(double *)(a1 + 384);
  *(double *)(a1 + 384) = v2;
  v5 = *(_DWORD *)(a1 + 376);
  if (v5 > 40)
  {
    if (v5 == 41)
    {
LABEL_15:
      result = v4 + *(float *)(a1 + 456);
      *(float *)(a1 + 456) = result;
    }
    else if (v5 == 52 || v5 == 56)
    {
LABEL_13:
      result = v4 + *(float *)(a1 + 460);
      *(float *)(a1 + 460) = result;
    }
    else
    {
LABEL_20:
      result = v4 + *(float *)(a1 + 472);
      *(float *)(a1 + 472) = result;
    }
  }
  else
  {
    switch(v5)
    {
      case 0:
        result = v4 + *(float *)(a1 + 440);
        *(float *)(a1 + 440) = result;
        break;
      case 1:
      case 10:
        result = v4 + *(float *)(a1 + 444);
        *(float *)(a1 + 444) = result;
        break;
      case 2:
      case 11:
        result = v4 + *(float *)(a1 + 448);
        *(float *)(a1 + 448) = result;
        break;
      case 3:
      case 7:
      case 9:
        result = v4 + *(float *)(a1 + 452);
        *(float *)(a1 + 452) = result;
        break;
      case 4:
        goto LABEL_15;
      case 5:
        goto LABEL_13;
      case 6:
        result = v4 + *(float *)(a1 + 464);
        *(float *)(a1 + 464) = result;
        break;
      case 8:
        result = v4 + *(float *)(a1 + 468);
        *(float *)(a1 + 468) = result;
        break;
      default:
        goto LABEL_20;
    }
  }
  return result;
}

void sub_100B0C070(uint64_t a1, uint64_t a2, double a3)
{
  _OWORD *v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (*(double *)(a2 + 20) < 30.0)
  {
    v6 = (_OWORD *)(a1 + 8);
    if ((sub_100182290(a1 + 8) & 1) != 0 || (sub_100182290(a1 + 176) & 1) != 0)
    {
      if ((sub_100182290(a1 + 176) & 1) == 0)
      {
        v7 = *(double *)(a2 + 76) - *(double *)(a1 + 84);
        if (v7 <= 110.0 || v7 > 300.0)
        {
          if (v7 > 300.0)
          {
            v22 = *(_OWORD *)(a2 + 16);
            *v6 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 24) = v22;
            v23 = *(_OWORD *)(a2 + 32);
            v24 = *(_OWORD *)(a2 + 48);
            v25 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 88) = v25;
            *(_OWORD *)(a1 + 40) = v23;
            *(_OWORD *)(a1 + 56) = v24;
            v26 = *(_OWORD *)(a2 + 96);
            v27 = *(_OWORD *)(a2 + 112);
            v28 = *(_OWORD *)(a2 + 128);
            v29 = *(_OWORD *)(a2 + 140);
            *(_DWORD *)(a1 + 176) = 0xFFFF;
            *(_OWORD *)(a1 + 148) = v29;
            *(_OWORD *)(a1 + 120) = v27;
            *(_OWORD *)(a1 + 136) = v28;
            *(_OWORD *)(a1 + 104) = v26;
            *(double *)(a1 + 168) = a3;
            *(_QWORD *)(a1 + 180) = 0;
            *(_QWORD *)(a1 + 188) = 0;
            *(_OWORD *)(a1 + 196) = xmmword_101BAFC90;
            __asm { FMOV            V0.2D, #-1.0 }
            *(_OWORD *)(a1 + 212) = _Q0;
            *(_OWORD *)(a1 + 228) = _Q0;
            *(_OWORD *)(a1 + 244) = _Q0;
            *(_DWORD *)(a1 + 260) = 0;
            *(_DWORD *)(a1 + 288) = 0;
            *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
            *(_QWORD *)(a1 + 272) = 0;
            *(_QWORD *)(a1 + 280) = 0;
            *(_QWORD *)(a1 + 292) = 0xBFF0000000000000;
            *(_DWORD *)(a1 + 300) = 0x7FFFFFFF;
            *(_BYTE *)(a1 + 328) = 0;
            *(_QWORD *)(a1 + 312) = 0;
            *(_QWORD *)(a1 + 320) = 0;
            *(_QWORD *)(a1 + 304) = 0;
            *(_DWORD *)(a1 + 472) = 0;
            *(_OWORD *)(a1 + 440) = 0u;
            *(_OWORD *)(a1 + 456) = 0u;
            *(_OWORD *)(a1 + 424) = 0u;
            *(_OWORD *)(a1 + 408) = 0u;
            *(_OWORD *)(a1 + 392) = 0u;
            *(double *)(a1 + 368) = a3;
            *(double *)(a1 + 384) = a3;
            *(_QWORD *)(a1 + 344) = 0;
            *(_QWORD *)(a1 + 352) = 0;
          }
        }
        else
        {
          v8 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 176) = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 192) = v8;
          v9 = *(_OWORD *)(a2 + 32);
          v10 = *(_OWORD *)(a2 + 48);
          v11 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 256) = v11;
          *(_OWORD *)(a1 + 208) = v9;
          *(_OWORD *)(a1 + 224) = v10;
          v12 = *(_OWORD *)(a2 + 96);
          v13 = *(_OWORD *)(a2 + 112);
          v14 = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 316) = *(_OWORD *)(a2 + 140);
          *(_OWORD *)(a1 + 288) = v13;
          *(_OWORD *)(a1 + 304) = v14;
          *(_OWORD *)(a1 + 272) = v12;
          *(double *)(a1 + 336) = a3;
        }
      }
    }
    else
    {
      v15 = *(_OWORD *)(a2 + 16);
      *v6 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 24) = v15;
      v16 = *(_OWORD *)(a2 + 32);
      v17 = *(_OWORD *)(a2 + 48);
      v18 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 88) = v18;
      *(_OWORD *)(a1 + 40) = v16;
      *(_OWORD *)(a1 + 56) = v17;
      v19 = *(_OWORD *)(a2 + 96);
      v20 = *(_OWORD *)(a2 + 112);
      v21 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 148) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 120) = v20;
      *(_OWORD *)(a1 + 136) = v21;
      *(_OWORD *)(a1 + 104) = v19;
      *(double *)(a1 + 168) = a3;
      *(_DWORD *)(a1 + 472) = 0;
      *(_OWORD *)(a1 + 440) = 0u;
      *(_OWORD *)(a1 + 456) = 0u;
      *(_OWORD *)(a1 + 408) = 0u;
      *(_OWORD *)(a1 + 424) = 0u;
      *(_OWORD *)(a1 + 392) = 0u;
      *(double *)(a1 + 368) = a3;
      *(double *)(a1 + 384) = a3;
      *(_QWORD *)(a1 + 344) = 0;
      *(_QWORD *)(a1 + 352) = 0;
    }
  }
  sub_100B0BDD0((double *)a1, a3);
}

double sub_100B0C26C(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  float DistanceCoordinates;
  float v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double v15;
  double v16;
  double v17;
  double result;

  v2 = (_OWORD *)(a1 + 392);
  *(double *)(a1 + 392) = *(double *)(a1 + 336) - *(double *)(a1 + 168);
  v3 = a1 + 176;
  DistanceCoordinates = CLClientGetDistanceCoordinates(*(double *)(a1 + 12), *(double *)(a1 + 20), *(double *)(a1 + 180), *(double *)(a1 + 188));
  *(float *)(a1 + 416) = DistanceCoordinates;
  *(float *)(a1 + 420) = sqrtf((float)(*(float *)(a1 + 348) * *(float *)(a1 + 348))+ (float)(*(float *)(a1 + 344) * *(float *)(a1 + 344)));
  v5 = sqrt(*(double *)(a1 + 196) * *(double *)(a1 + 196) + *(double *)(a1 + 28) * *(double *)(a1 + 28));
  *(float *)(a1 + 428) = v5;
  sub_100B0BE7C(a1, *(double *)(a1 + 336));
  sub_100B0BF34(a1, *(double *)(a1 + 336));
  v6 = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 272);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(a1 + 148) = *(_OWORD *)(v3 + 140);
  v7 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 56) = v7;
  v8 = *(_OWORD *)(a1 + 256);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 240);
  *(_OWORD *)(a1 + 88) = v8;
  v9 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a1 + 336);
  *(_DWORD *)(a1 + 176) = 0xFFFF;
  *(_QWORD *)(a1 + 188) = 0;
  *(_QWORD *)(a1 + 180) = 0;
  *(_OWORD *)(a1 + 196) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 212) = _Q0;
  *(_OWORD *)(a1 + 228) = _Q0;
  *(_OWORD *)(a1 + 244) = _Q0;
  *(_DWORD *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(v3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 300) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  sub_100B0C3E0(a1, *(double *)&_Q0, *(double *)&v9, v15, v16, v17);
  *(_DWORD *)(a1 + 472) = 0;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *v2 = 0u;
  result = *(double *)(a1 + 168);
  *(double *)(a1 + 368) = result;
  *(double *)(a1 + 384) = result;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  return result;
}

void sub_100B0C3E0(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;
  unsigned int v8;
  float v9;
  double v10;
  double v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  float v15;
  float v16;
  float v22;
  float v23;
  float v24;
  float v25;
  float32x4_t v26;
  float v27;
  float v28;
  NSObject *v30;
  double v31;
  const char *v32;
  uint8_t *v33;
  int v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  float v39;
  float32x2_t v40;
  _QWORD v41[4];
  int v42;
  float v43;
  float v44;
  float32x2_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float32x4_t v50;
  float32x4_t v51;
  float v52;
  float v53;
  float v54;
  int v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  uint8_t buf[4];
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  double v130;
  __int16 v131;
  double v132;
  __int16 v133;
  double v134;

  v6 = *(double *)(a1 + 392);
  if (v6 > 0.0)
  {
    *(float *)&a6 = v6;
    v8 = *(_DWORD *)(a1 + 400);
    *(float *)&v6 = (float)v8;
    if ((float)v8 <= *(float *)&a6)
      v9 = (float)v8 / *(float *)&a6;
    else
      v9 = 1.0;
    v10 = *(float *)&v6;
    v11 = *(float *)&a6;
    if (*(float *)&a6 + 2.0 >= *(float *)&v6)
    {
      v15 = -1.0;
      if (v8)
      {
        v40 = vdiv_f32(vcvt_f32_u32(*(uint32x2_t *)(a1 + 408)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v6, 0));
        v16 = (float)*(unsigned int *)(a1 + 404) / *(float *)&v6;
      }
      else
      {
        __asm { FMOV            V0.2S, #-1.0 }
        v40 = _D0;
        v16 = -1.0;
      }
      v39 = v16;
      v22 = *(float *)(a1 + 416);
      v23 = *(float *)(a1 + 420) - v22;
      if (v22 <= 0.0)
        v24 = -1.0;
      else
        v24 = v23 / v22;
      v25 = *(float *)(a1 + 428);
      if (v25 <= 0.0)
        v25 = -1.0;
      v37 = v25;
      v38 = v24;
      v34 = LODWORD(a6);
      if (*(float *)&a6 <= 0.0)
      {
        __asm { FMOV            V0.4S, #-1.0 }
        v27 = -1.0;
        v28 = -1.0;
        v35 = _Q0;
        v36 = _Q0;
      }
      else
      {
        v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
        v35 = vdivq_f32(*(float32x4_t *)(a1 + 448), v26);
        v36 = vdivq_f32(*(float32x4_t *)(a1 + 432), v26);
        v27 = *(float *)(a1 + 464) / *(float *)&a6;
        v15 = *(float *)(a1 + 468) / *(float *)&a6;
        v28 = *(float *)(a1 + 472) / *(float *)&a6;
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102170A20);
      v30 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134353920;
        v96 = v11;
        v97 = 2050;
        v98 = v9;
        v99 = 2050;
        v100 = v39;
        v101 = 2050;
        v102 = v40.f32[0];
        v103 = 2050;
        v104 = v40.f32[1];
        v105 = 2050;
        v106 = v22;
        v107 = 2050;
        v108 = v37;
        v109 = 2050;
        v110 = v23;
        v111 = 2050;
        v112 = v38;
        v113 = 2050;
        v114 = v36.f32[0];
        v115 = 2050;
        v116 = v36.f32[1];
        v117 = 2050;
        v118 = v36.f32[2];
        v119 = 2050;
        v120 = v36.f32[3];
        v121 = 2050;
        v122 = v35.f32[0];
        v123 = 2050;
        v124 = v35.f32[1];
        v125 = 2050;
        v126 = v35.f32[2];
        v127 = 2050;
        v128 = v35.f32[3];
        v129 = 2050;
        v130 = v27;
        v131 = 2050;
        v132 = v15;
        v133 = 2050;
        v134 = v28;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#pbio,submitToCoreAnalytics,IOMeasurementInterval_s,%{public}.2f,IOSampleYield,%{public}.2f,FractionOfIOSamplesWithValidDeltaPosition,%{public}.2f,FractionOfIOSamplesWithValidDeltaVelocity,%{public}.2f,FractionOfIOSamplesWithValidAttitude,%{public}.2f,ReferenceDisplacement_m,%{public}.2f,ReferenceDisplacementUncertainty_m,%{public}.2f,DisplacementError_m,%{public}.2f,FractionalDisplacementError_m,%{public}.2f,FractionOfTimeInVisit_s,%{public}.2f,FractionOfTimeOutOfVisit_s,%{public}.2f,FractionOfTimeInMotionTypeUnknown_s,%{public}.2f,FractionOfTimeInMotionTypeFrozen_s,%{public}.2f,FractionOfTimeInMotionTypeStatic_s,%{public}.2f,FractionOfTimeInMotionTypeMoving_s,%{public}.2f,FractionOfTimeInMotionTypeWalking_s,%{public}.2f,FractionOfTimeInMotionTypeDriving_s,%{public}.2f,FractionOfTimeInMotionTypeCycling_s,%{public}.2f,FractionOfTimeInMotionTypeRunning_s,%{public}.2f,FractionOfTimeInMotionTypeWorkoutGeneric_s,%{public}.2f", buf, 0xCAu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102170A20);
        v55 = 134353920;
        v56 = v11;
        v57 = 2050;
        v58 = v9;
        v59 = 2050;
        v60 = v39;
        v61 = 2050;
        v62 = v40.f32[0];
        v63 = 2050;
        v64 = v40.f32[1];
        v65 = 2050;
        v66 = v22;
        v67 = 2050;
        v68 = v37;
        v69 = 2050;
        v70 = v23;
        v71 = 2050;
        v72 = v38;
        v73 = 2050;
        v74 = v36.f32[0];
        v75 = 2050;
        v76 = v36.f32[1];
        v77 = 2050;
        v78 = v36.f32[2];
        v79 = 2050;
        v80 = v36.f32[3];
        v81 = 2050;
        v82 = v35.f32[0];
        v83 = 2050;
        v84 = v35.f32[1];
        v85 = 2050;
        v86 = v35.f32[2];
        v87 = 2050;
        v88 = v35.f32[3];
        v89 = 2050;
        v90 = v27;
        v91 = 2050;
        v92 = v15;
        v93 = 2050;
        v94 = v28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#pbio,submitToCoreAnalytics,IOMeasurementInterval_s,%{public}.2f,IOSampleYield,%{public}.2f,FractionOfIOSamplesWithValidDeltaPosition,%{public}.2f,FractionOfIOSamplesWithValidDeltaVelocity,%{public}.2f,FractionOfIOSamplesWithValidAttitude,%{public}.2f,ReferenceDisplacement_m,%{public}.2f,ReferenceDisplacementUncertainty_m,%{public}.2f,DisplacementError_m,%{public}.2f,FractionalDisplacementError_m,%{public}.2f,FractionOfTimeInVisit_s,%{public}.2f,FractionOfTimeOutOfVisit_s,%{public}.2f,FractionOfTimeInMotionTypeUnknown_s,%{public}.2f,FractionOfTimeInMotionTypeFrozen_s,%{public}.2f,FractionOfTimeInMotionTypeStatic_s,%{public}.2f,FractionOfTimeInMotionTypeMoving_s,%{public}.2f,FractionOfTimeInMotionTypeWalking_s,%{public}.2f,FractionOfTimeInMotionTypeDriving_s,%{public}.2f,FractionOfTimeInMotionTypeCycling_s,%{public}.2f,FractionOfTimeInMotionTypeRunning_s,%{public}.2f,FractionOfTimeInMotionTypeWorkoutGeneric_s,%{public}.2f", &v55, 202);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "void CLBackgroundInertialOdometryTelemetryCalculator::submitToCoreAnalytics()", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      v31 = *(double *)(a1 + 336);
      if (v31 >= *(double *)(a1 + 480) + 1800.0)
      {
        *(double *)(a1 + 480) = v31;
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472;
        v41[2] = sub_100B0CAC0;
        v41[3] = &unk_102170A00;
        v42 = v34;
        v43 = v9;
        v44 = v39;
        v45 = v40;
        v46 = v22;
        v47 = v37;
        v48 = v23;
        v49 = v38;
        v50 = v36;
        v51 = v35;
        v52 = v27;
        v53 = v15;
        v54 = v28;
        AnalyticsSendEventLazy(CFSTR("com.apple.locationd.proactiveInertialOdometry"), v41);
      }
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102170A20);
      v12 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349312;
        v96 = v10;
        v97 = 2050;
        v98 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#pbio,submitToCoreAnalytics, NumIOSamplesTotal, %{public}f, IOMeasurementInterval_s, %{public}.2f, unexpected number of IO samples received.", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102170A20);
        v55 = 134349312;
        v56 = v10;
        v57 = 2050;
        v58 = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#pbio,submitToCoreAnalytics, NumIOSamplesTotal, %{public}f, IOMeasurementInterval_s, %{public}.2f, unexpected number of IO samples received.", &v55, 22);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "void CLBackgroundInertialOdometryTelemetryCalculator::submitToCoreAnalytics()", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

NSDictionary *sub_100B0CAC0(_DWORD *a1, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _QWORD v23[20];
  _QWORD v24[20];

  v23[0] = CFSTR("MeasurementInterval_s");
  LODWORD(a2) = a1[8];
  v24[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", a2);
  v23[1] = CFSTR("IOSampleYield");
  LODWORD(v3) = a1[9];
  v24[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
  v23[2] = CFSTR("FractionOfIOSamplesWithValidDeltaPosition");
  LODWORD(v4) = a1[10];
  v24[2] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4);
  v23[3] = CFSTR("FractionOfIOSamplesWithValidDeltaVelocity");
  LODWORD(v5) = a1[11];
  v24[3] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v5);
  v23[4] = CFSTR("FractionOfIOSamplesWithValidAttitude");
  LODWORD(v6) = a1[12];
  v24[4] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6);
  v23[5] = CFSTR("ReferenceDisplacement_m");
  LODWORD(v7) = a1[13];
  v24[5] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v7);
  v23[6] = CFSTR("ReferenceDisplacementUncertainty_m");
  LODWORD(v8) = a1[14];
  v24[6] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8);
  v23[7] = CFSTR("DisplacementError_m");
  LODWORD(v9) = a1[15];
  v24[7] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v9);
  v23[8] = CFSTR("FractionalDisplacementError_m");
  LODWORD(v10) = a1[16];
  v24[8] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10);
  v23[9] = CFSTR("FractionOfTimeInVisit_s");
  LODWORD(v11) = a1[17];
  v24[9] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11);
  v23[10] = CFSTR("FractionOfTimeOutOfVisit_s");
  LODWORD(v12) = a1[18];
  v24[10] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12);
  v23[11] = CFSTR("FractionOfTimeInMotionTypeUnknown_s");
  LODWORD(v13) = a1[19];
  v24[11] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v13);
  v23[12] = CFSTR("FractionOfTimeInMotionTypeFrozen_s");
  LODWORD(v14) = a1[20];
  v24[12] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v14);
  v23[13] = CFSTR("FractionOfTimeInMotionTypeStatic_s");
  LODWORD(v15) = a1[21];
  v24[13] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v15);
  v23[14] = CFSTR("FractionOfTimeInMotionTypeMoving_s");
  LODWORD(v16) = a1[22];
  v24[14] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v16);
  v23[15] = CFSTR("FractionOfTimeInMotionTypeWalking_s");
  LODWORD(v17) = a1[23];
  v24[15] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v17);
  v23[16] = CFSTR("FractionOfTimeInMotionTypeDriving_s");
  LODWORD(v18) = a1[24];
  v24[16] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v18);
  v23[17] = CFSTR("FractionOfTimeInMotionTypeCycling_s");
  LODWORD(v19) = a1[25];
  v24[17] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v19);
  v23[18] = CFSTR("FractionOfTimeInMotionTypeRunning_s");
  LODWORD(v20) = a1[26];
  v24[18] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v20);
  v23[19] = CFSTR("FractionOfTimeInMotionTypeWorkoutGeneric_s");
  LODWORD(v21) = a1[27];
  v24[19] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v21);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v24, v23, 20);
}

void sub_100B0CD64(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100B0CD90()
{
  if (qword_102306B30 != -1)
    dispatch_once(&qword_102306B30, &stru_102170BE8);
  return qword_102306B28;
}

void sub_100B0CDD0(id a1)
{
  NSDictionary *v1;
  id v2;
  uint64_t v3;
  __CFString *v4;
  NSObject *v5;
  NSObject *v6;
  CLClientKeyPath *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  __CFString *v12;
  CLClientKeyPath *v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  NSArray *v17;
  NSArray *v18;
  id v19;
  uint64_t v20;
  void *i;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  __CFString *v27;
  NSObject *v28;
  NSObject *v29;
  id v30;
  NSDictionary *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[7];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  _BYTE v54[128];
  _QWORD v55[2];
  uint8_t buf[4];
  int v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  __CFString *v61;
  __int16 v62;
  __CFString *v63;
  _BYTE v64[128];
  _BYTE v65[128];

  v30 = objc_alloc_init((Class)NSAutoreleasePool);
  qword_102306B28 = (uint64_t)objc_alloc_init((Class)NSMutableDictionary);
  v1 = sub_10089627C();
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v2 = -[NSDictionary countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v49, v65, 16);
  if (v2)
  {
    v32 = *(_QWORD *)v50;
    v31 = v1;
    do
    {
      v3 = 0;
      v33 = v2;
      do
      {
        if (*(_QWORD *)v50 != v32)
          objc_enumerationMutation(v1);
        v4 = *(__CFString **)(*((_QWORD *)&v49 + 1) + 8 * v3);
        if (!sub_100197BA8(v4))
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102170C30);
          v5 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68289282;
            v57 = 0;
            v58 = 2082;
            v59 = "";
            v60 = 2114;
            v61 = v4;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Bellwethers of groups MUST be system services\", \"Bellwether\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102170C30);
          }
          v6 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            *(_DWORD *)buf = 68289282;
            v57 = 0;
            v58 = 2082;
            v59 = "";
            v60 = 2114;
            v61 = v4;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Bellwethers of groups MUST be system services", "{\"msg%{public}.0s\":\"Bellwethers of groups MUST be system services\", \"Bellwether\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        v7 = +[CLClientKeyPath clientKeyPathWithUserName:clientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithUserName:clientAnchor:anchorType:", 0, v4, 112);
        objc_msgSend((id)qword_102306B28, "setObject:forKeyedSubscript:", v7, v4);
        v8 = -[NSDictionary objectForKeyedSubscript:](v1, "objectForKeyedSubscript:", v4);
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v45, v64, 16);
        v34 = v3;
        if (v9)
        {
          v10 = *(_QWORD *)v46;
          do
          {
            v11 = 0;
            do
            {
              if (*(_QWORD *)v46 != v10)
                objc_enumerationMutation(v8);
              v12 = *(__CFString **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)v11);
              if (sub_100197BA8(v12))
              {
                v13 = +[CLClientKeyPath clientKeyPathWithUserName:clientAnchor:anchorType:subIdentityId:subIdentityType:](CLClientKeyPath, "clientKeyPathWithUserName:clientAnchor:anchorType:subIdentityId:subIdentityType:", 0, v4, 112, v12, 112);
                objc_msgSend((id)qword_102306B28, "setObject:forKeyedSubscript:", v13, v12);
              }
              else
              {
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_102170C30);
                v14 = qword_1022A01D8;
                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 68289538;
                  v57 = 0;
                  v58 = 2082;
                  v59 = "";
                  v60 = 2114;
                  v61 = v4;
                  v62 = 2114;
                  v63 = v12;
                  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Innate system service found in grouping, but is not a system service on disk\", \"Group\":%{public, location:escape_only}@, \"Innate\":%{public, location:escape_only}@}", buf, 0x26u);
                  if (qword_1022A01D0 != -1)
                    dispatch_once(&qword_1022A01D0, &stru_102170C30);
                }
                v15 = qword_1022A01D8;
                if (os_signpost_enabled((os_log_t)qword_1022A01D8))
                {
                  *(_DWORD *)buf = 68289538;
                  v57 = 0;
                  v58 = 2082;
                  v59 = "";
                  v60 = 2114;
                  v61 = v4;
                  v62 = 2114;
                  v63 = v12;
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Innate system service found in grouping, but is not a system service on disk", "{\"msg%{public}.0s\":\"Innate system service found in grouping, but is not a system service on disk\", \"Group\":%{public, location:escape_only}@, \"Innate\":%{public, location:escape_only}@}", buf, 0x26u);
                }
              }
              v11 = (char *)v11 + 1;
            }
            while (v9 != v11);
            v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v45, v64, 16);
          }
          while (v9);
        }
        v3 = v34 + 1;
        v1 = v31;
      }
      while ((id)(v34 + 1) != v33);
      v2 = -[NSDictionary countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v49, v65, 16);
    }
    while (v2);
  }
  v16 = -[NSArray mutableCopy](sub_1008965CC(), "mutableCopy");
  v17 = sub_1008966CC();
  v55[0] = CFSTR("/System/Library/LocationBundles");
  v55[1] = CFSTR("/AppleInternal/Library/LocationBundles");
  v18 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v55, 2);
  v35 = v16;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v19 = -[NSArray countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &v41, v54, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v42;
    do
    {
      for (i = 0; i != v19; i = (char *)i + 1)
      {
        if (*(_QWORD *)v42 != v20)
          objc_enumerationMutation(v18);
        v22 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
        v23 = objc_msgSend(v22, "UTF8String");
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472;
        v40[2] = sub_100B0D5E0;
        v40[3] = &unk_102170C10;
        v40[4] = v22;
        v40[5] = v17;
        v40[6] = 0;
        sub_100AD50A4((uint64_t)v23, (uint64_t)v40);
      }
      v19 = -[NSArray countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &v41, v54, 16);
    }
    while (v19);
  }
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v24 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v36, v53, 16);
  if (v24)
  {
    v25 = *(_QWORD *)v37;
    do
    {
      v26 = 0;
      do
      {
        if (*(_QWORD *)v37 != v25)
          objc_enumerationMutation(v35);
        v27 = *(__CFString **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)v26);
        if (!objc_msgSend((id)qword_102306B28, "objectForKeyedSubscript:", v27))
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102170C30);
          v28 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68289282;
            v57 = 0;
            v58 = 2082;
            v59 = "";
            v60 = 2114;
            v61 = v27;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"System service found in known standalone set, but is not a system service on disk\", \"SystemService\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102170C30);
          }
          v29 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            *(_DWORD *)buf = 68289282;
            v57 = 0;
            v58 = 2082;
            v59 = "";
            v60 = 2114;
            v61 = v27;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "System service found in known standalone set, but is not a system service on disk", "{\"msg%{public}.0s\":\"System service found in known standalone set, but is not a system service on disk\", \"SystemService\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        v26 = (char *)v26 + 1;
      }
      while (v24 != v26);
      v24 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v36, v53, 16);
    }
    while (v24);
  }

}

void sub_100B0D568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

uint64_t sub_100B0D5E0(uint64_t a1, uint64_t a2)
{
  __CFString *v3;
  __CFString *v4;
  NSObject *v5;
  NSObject *v6;
  CLClientKeyPath *v7;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  __CFString *v14;

  v3 = (__CFString *)objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "stringByAppendingPathComponent:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2)), "stringByResolvingSymlinksInPath");
  if (v3)
  {
    v4 = v3;
    if (!objc_msgSend((id)qword_102306B28, "objectForKeyedSubscript:", v3) && sub_100197BA8(v4))
    {
      if (objc_msgSend(*(id *)(a1 + 40), "containsObject:", v4))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102170C30);
        v5 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
        {
          v9 = 68289282;
          v10 = 0;
          v11 = 2082;
          v12 = "";
          v13 = 2114;
          v14 = v4;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"System service found in known standalone set, but is not a system service on disk\", \"SystemService\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102170C30);
        }
        v6 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          v9 = 68289282;
          v10 = 0;
          v11 = 2082;
          v12 = "";
          v13 = 2114;
          v14 = v4;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "System service found in known standalone set, but is not a system service on disk", "{\"msg%{public}.0s\":\"System service found in known standalone set, but is not a system service on disk\", \"SystemService\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
        }
      }
      v7 = +[CLClientKeyPath clientKeyPathWithUserName:clientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithUserName:clientAnchor:anchorType:", *(_QWORD *)(a1 + 48), v4, 112);
      objc_msgSend((id)qword_102306B28, "setObject:forKeyedSubscript:", v7, v4);
    }
  }
  return 1;
}

void sub_100B0D858(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

_QWORD *sub_100B0D884(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100B0D940((uint64_t)a1, "HRRecoverySessionHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_102170C60;
  a1[9] = off_102170D28;
  a1[58] = off_102170D78;
  sub_100B0EDC4((uint64_t)a1);
  return a1;
}

void sub_100B0D914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_100B0DDB4(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100B0D940(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_102171168;
  *(_QWORD *)(a1 + 72) = off_102171210;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102171168;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 72) = off_102171210;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 384) = 12000;
  *(_QWORD *)(a1 + 392) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 400));
  *(_QWORD *)(a1 + 400) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100B0DD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[49] = off_102138DA8;
  sub_100427950(v27);
  sub_100542DDC(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100B0DDAC()
{
  JUMPOUT(0x100B0DD8CLL);
}

_QWORD *sub_100B0DDB4(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_102171210;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_102171168;
  a1[49] = off_102138DA8;
  sub_100427950(a1 + 50);
  sub_100542DDC(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100B0DE34(uint64_t a1)
{
  return sub_100B0DDB4((_QWORD *)(a1 - 72));
}

_QWORD *sub_100B0DE3C(uint64_t a1)
{
  return sub_100B0DDB4((_QWORD *)(a1 - 464));
}

void sub_100B0DE44(_QWORD *a1)
{
  sub_100B0DDB4(a1);
  operator delete();
}

void sub_100B0DE68(uint64_t a1)
{
  sub_100B0DDB4((_QWORD *)(a1 - 72));
  operator delete();
}

void sub_100B0DE90(uint64_t a1)
{
  sub_100B0DDB4((_QWORD *)(a1 - 464));
  operator delete();
}

uint64_t sub_100B0DEB8(uint64_t a1, uint64_t a2)
{
  id v5[2];

  sub_100131938(v5, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0);
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM HRRecoverySessionHistory WHERE startTime < ?");
  }
  sub_100131740(v5);
  return -1;
}

void sub_100B0DFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B0E024(uint64_t a1, uint64_t a2)
{
  return sub_100B0DEB8(a1 - 72, a2);
}

uint64_t sub_100B0E02C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from HRRecoverySessionHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_100B0E28C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B0E2BC(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  sub_100B0F580(a1, a2);
  return 0;
}

uint64_t sub_100B0E318(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM HRRecoverySessionHistory");
  return 0xFFFFFFFFLL;
}

void sub_100B0E3B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B0E3DC(uint64_t a1)
{
  return sub_100B0E318(a1 - 72);
}

uint64_t sub_100B0E3E4(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE HRRecoverySessionHistory SET startTime = ?, activityEndTime = ?, workoutSessionId = ?, workoutType = ?, hrRecovery = ?, lambda = ?, hrMax = ?, hrMinAdjusted = ?, recoveryOnsetTime = ?, steadyStateHR = ?, status = ?, sessionHrRecovery = ?, peakHR = ?, hrRecoveryReference = ? WHERE id = ?");
  return result;
}

void sub_100B0E614(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100B0E63C(_QWORD *a1, double *a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  _OWORD v23[10];

  (*(void (**)(_QWORD *, double *, _QWORD))(*a1 + 120))(a1, a2, 0);
  memset(v23, 0, 32);
  memset(&v23[3], 0, 60);
  memset(&v23[7], 0, 42);
  if (!sub_10051DBC4(a1, (uint64_t)v23))
  {
LABEL_17:
    v4 = 0;
    goto LABEL_18;
  }
  if (*((double *)v23 + 1) != a2[1])
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_102170E18);
    v10 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_ERROR))
    {
      v11 = *((_QWORD *)a2 + 1);
      *(_DWORD *)buf = 134349312;
      v20 = v11;
      v21 = 2050;
      v22 = *((_QWORD *)&v23[0] + 1);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Inserted session (startTime=%{public}f) is not the latest session (startTime=%{public}f)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_102170E18);
      v12 = *((_QWORD *)a2 + 1);
      v15 = 134349312;
      v16 = v12;
      v17 = 2050;
      v18 = *((_QWORD *)&v23[0] + 1);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 16, "Inserted session (startTime=%{public}f) is not the latest session (startTime=%{public}f)", &v15, 22);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLHRRecoverySessionRecorderDb::addSession(HRRecoverySession &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    goto LABEL_17;
  }
  v4 = *(_QWORD *)&v23[0];
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_102170E18);
  v5 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_DWORD *)buf = 134349312;
    v20 = v4;
    v21 = 2050;
    v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Wrote session to db: id=%{public}llu, startTime=%{public}.2f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_102170E18);
    v7 = *((_QWORD *)a2 + 1);
    v15 = 134349312;
    v16 = v4;
    v17 = 2050;
    v18 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "Wrote session to db: id=%{public}llu, startTime=%{public}.2f", &v15, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLHRRecoverySessionRecorderDb::addSession(HRRecoverySession &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
LABEL_18:
  *(_QWORD *)a2 = v4;
}

uint64_t sub_100B0E9D4(uint64_t a1, _QWORD *a2, int a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  uint8_t buf[16];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a2[1] = *a2;
    if (a3)
      sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM HRRecoverySessionHistory WHERE status = 1 AND sessionHrRecovery IS NOT NULL AND startTime > ? ORDER BY startTime ASC");
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM HRRecoverySessionHistory WHERE sessionHrRecovery IS NOT NULL AND startTime > ? ORDER BY startTime ASC");
  }
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_102170E18);
  v6 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HRRecoverySessionHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_102170E18);
    LOWORD(v10) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "HRRecoverySessionHistory, DB not accessible", &v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "CMError CLHRRecoverySessionRecorderDb::querySinceTime(CFAbsoluteTime, std::vector<HRRecoverySession> &, BOOL) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return 109;
}

void sub_100B0ED98(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B0EDC4(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_100B0EE20(a1);
    return sub_100634364(*(_QWORD *)(a1 + 80), "HRRecoverySessionHistory", (const char **)&off_102170E38, (const std::string::value_type **)&off_1022F9B60, 0);
  }
  return result;
}

BOOL sub_100B0EE20(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "HRRecoverySessionHistory");
  if (result)
  {
    v3 = "startTime";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "HRRecoverySessionHistory", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_100B0F1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a59);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B0F25C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "HRRecoverySessionHistory");
}

_QWORD *sub_100B0F26C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "HRRecoverySessionHistory");
}

uint64_t sub_100B0F27C(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM HRRecoverySessionHistory");
  return result;
}

void sub_100B0F310(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B0F330(uint64_t a1)
{
  return sub_100B0F27C(a1 - 72);
}

uint64_t sub_100B0F338(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO HRRecoverySessionHistory (startTime, activityEndTime, workoutSessionId, workoutType, hrRecovery, lambda, hrMax, hrMinAdjusted, recoveryOnsetTime, steadyStateHR, status, sessionHrRecovery, peakHR, hrRecoveryReference) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  return result;
}

void sub_100B0F54C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100B0F574(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_100B0F580(a2, a3);
}

void sub_100B0F580(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  const unsigned __int8 *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v4, 0);
  v5 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v8 = sqlite3_column_text(v7, 3);
  uuid_parse((const char *)v8, (unsigned __int8 *)(a2 + 32));
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 48) = sqlite3_column_int(v9, 4);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v10, 5);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v11, 6);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v12, 7);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v13, 8);
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v14, 9);
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v15, 10);
  v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 104) = sqlite3_column_int(v16, 11);
  v17 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 112) = sqlite3_column_double(v17, 12);
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 120) = sqlite3_column_double(v18, 13);
  v19 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 128) = sqlite3_column_double(v19, 14);
}

uint64_t sub_100B0F6D8(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102171250);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102171250);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_100B10870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_100B10B90(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM HRRecoverySessionHistory WHERE status = 1 AND sessionHrRecovery IS NOT NULL");
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_102170E18);
  v2 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "HRRecoverySessionHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_102170E18);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "HRRecoverySessionHistory, DB not accessible", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHRRecoverySessionRecorderDb::hasRecentSuccessfulEstimate() const", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

void sub_100B10D94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B10DC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[3];
  __int16 v10;
  uint8_t buf[16];

  v3 = a1 + 112;
  v2 = *(_QWORD *)(a1 + 112);
  v4 = a1 + 72;
  v9[1] = a1 + 112;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
  v10 = 256;
  if ((sub_10008950C(v4) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM HRRecoverySessionHistory WHERE startTime > ? and startTime < ? ORDER BY startTime ASC LIMIT ?");
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_102170E18);
  v5 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "HRRecoverySessionHistory not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_102170E18);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "HRRecoverySessionHistory not accessible", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual CMError CLHRRecoverySessionRecorderDb::queryHRRecoverySessionInTimeRange(CFAbsoluteTime, CFAbsoluteTime, int, std::vector<HRRecoverySession> &) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return 109;
}

void sub_100B111D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B11220(uint64_t a1)
{
  return sub_100B10DC0(a1 - 464);
}

uint64_t sub_100B11228(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[3];
  __int16 v10;
  uint8_t buf[16];

  v3 = a1 + 112;
  v2 = *(_QWORD *)(a1 + 112);
  v4 = a1 + 72;
  v9[1] = a1 + 112;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
  v10 = 256;
  if ((sub_10008950C(v4) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from HRRecoverySessionHistory ORDER BY startTime ASC");
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_102171138);
  v5 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "HRRecoverySessionHistory not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_102171138);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "HRRecoverySessionHistory not accessible", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual CMError CLHRRecoverySessionRecorderDb::queryHRRecoverySessionAllRecords(std::vector<HRRecoverySession> &) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return 109;
}

void sub_100B115E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B11638(uint64_t a1)
{
  return sub_100B11228(a1 - 464);
}

uint64_t sub_100B11640(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *__p[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_101919B24(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100B11A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100B11A90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102171250);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102171250);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102171250);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100B12090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100B120C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  v6 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  result = *(__n128 *)(a3 + 96);
  v8 = *(_OWORD *)(a3 + 112);
  v9 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 138) = *(_OWORD *)(a3 + 138);
  *(_OWORD *)(a2 + 112) = v8;
  *(_OWORD *)(a2 + 128) = v9;
  *(__n128 *)(a2 + 96) = result;
  return result;
}

id *sub_100B120F4(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  double v37;
  id v38[2];
  int v39;
  double v40;
  __int16 v41;
  uint64_t v42;
  uint8_t buf[4];
  double v44;
  __int16 v45;
  uint64_t v46;
  _OWORD v47[10];

  v38[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v38[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v38);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  memset(v47, 0, 32);
  memset(&v47[3], 0, 60);
  memset(&v47[7], 0, 42);
  v6 = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 104))(a1, v47);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102171250);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102171250);
        LOWORD(v39) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v39, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = *((double *)v47 + 1);
    v9 = v7 - *((double *)v47 + 1);
    if (v7 - *((double *)v47 + 1) < 0.0)
      v9 = -(v7 - *((double *)v47 + 1));
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102171250);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v44 = *((double *)v47 + 1);
        v45 = 2050;
        v46 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102171250);
        v29 = *(_QWORD *)(a2 + 8);
        v39 = 134349312;
        v40 = *((double *)v47 + 1);
        v41 = 2050;
        v42 = v29;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v39, 22);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = *((double *)v47 + 1);
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102171250);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v44 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102171250);
          v32 = *(double *)(a2 + 8);
          v39 = 134217984;
          v40 = v32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v39));
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v37 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_102171250);
        v18 = v37;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v44 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102171250);
        v39 = 134217984;
        v40 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v39));
        v36 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v47, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(_OWORD *)(a2 + 48);
  v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v23;
  v25 = *(_OWORD *)(a2 + 96);
  v26 = *(_OWORD *)(a2 + 112);
  v27 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 362) = *(_OWORD *)(a2 + 138);
  *(_OWORD *)(a1 + 336) = v26;
  *(_OWORD *)(a1 + 352) = v27;
  *(_OWORD *)(a1 + 320) = v25;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v38);
}

void sub_100B12878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B128A4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_101919C90(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100B12B04(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101919DFC(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100B12D3C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101919F68(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

uint64_t sub_100B12F64(uint64_t a1)
{
  return sub_100B11A90(a1 - 72);
}

void sub_100B12F6C(id a1)
{
  qword_10229FF68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_100B12F98(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100B12FC4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_10191A0D4(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v17 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100B13360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100B133D0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100B133FC(uint64_t a1, double *a2)
{
  unsigned __int8 v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[23];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD v20[6];
  char v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[25];
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  __int16 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  _BYTE v52[11];
  int v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  int v103;
  unint64_t v104;
  __int16 v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v4 = atomic_load((unsigned __int8 *)&qword_102306B50);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_102306B50))
  {
    *(_QWORD *)&v7 = 0xC00000000;
    v6 = xmmword_101C14DD4;
    sub_100546300(qword_102306B38, &v6, 6uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_102306B38, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102306B50);
  }
  v15 = 0;
  v6 = xmmword_101BB1ED0;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v16 = xmmword_101BB1ED0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20[0] = 0;
  *(_QWORD *)((char *)v20 + 5) = 0;
  *(_QWORD *)((char *)&v20[1] + 6) = 0;
  v21 = 0;
  memset(&v20[3], 0, 24);
  v22 = xmmword_101BB1ED0;
  v23 = 0;
  v24 = 0;
  v25 = 0xFFEFFFFFFFFFFFFFLL;
  v36 = 0;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  memset(v35, 0, sizeof(v35));
  v37 = 0;
  v38 = 0;
  v39 = 0xFFEFFFFFFFFFFFFFLL;
  v40 = 0;
  v41 = 0;
  v47 = 0;
  v48 = 0;
  v53 = 0;
  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v50 = 0u;
  v49 = 0u;
  v51 = 0;
  memset(v52, 0, sizeof(v52));
  v54 = 0xFFEFFFFFFFFFFFFFLL;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v74 = 0;
  v75 = 0xFFEFFFFFFFFFFFFFLL;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0xFFEFFFFFFFFFFFFFLL;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0xFFEFFFFFFFFFFFFFLL;
  v87 = 0;
  v86 = 0;
  v88 = 0x80000000800000;
  v90 = 0;
  v89 = 0;
  v91 = xmmword_101BB1EE0;
  v92 = 0x80000000800000;
  v93 = 0u;
  v94 = 0u;
  v95 = 0;
  v96 = 0xFFEFFFFFFFFFFFFFLL;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0;
  v104 = 0xFFEFFFFFFFFFFFFFLL;
  v105 = 0;
  v106 = 0;
  v107 = 0xFFEFFFFFFFFFFFFFLL;
  v108 = 7;
  v109 = 0xFFEFFFFFFFFFFFFFLL;
  v110 = 0;
  v112 = 0;
  v111 = 0;
  v113 = 0;
  sub_1000D03AC(a2, qword_102306B38, (uint64_t)&v6);
  return sub_100B136F0(a1, (uint64_t)a2, (uint64_t)&v6);
}

void sub_100B136D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102306B50);
  _Unwind_Resume(a1);
}

uint64_t sub_100B136F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  unsigned int v11;
  double v12;
  double v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _BOOL8 v17;
  double v18;
  _BOOL4 v19;
  double v20;
  double v21;
  int v22;
  int v23;
  int v24;
  _BOOL4 v27;
  double v28;
  _BOOL4 v30;
  char v33;
  _BOOL4 v39;
  float v42;
  float v43;
  float v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  _BOOL4 v49;
  double v50;
  double v51;
  _BOOL4 v52;
  _BOOL4 v53;
  _BOOL4 v55;
  _BOOL4 v56;
  BOOL v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  double v63;
  float v64;
  float v65;
  unsigned int v66;
  NSObject *v67;
  _BOOL4 v68;
  _BOOL4 v69;
  _BOOL4 v71;
  int v72;
  _BOOL4 v73;
  float v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  BOOL v80;
  int v81;
  _BOOL4 v82;
  _BOOL4 v83;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v87;
  _BOOL4 v88;
  int v89;
  double v90;
  float v91;
  uint64_t v92;
  double v93;
  double v94;
  double v95;
  const char *v96;
  char *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _BOOL4 v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  int v111;
  float v112;
  float v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  double v121;
  double v122;
  double v123;
  __int128 v124;
  double v125;
  _BYTE v126[10];
  _BYTE v127[32];
  double v128;
  __int16 v129;
  int v130;
  __int16 v131;
  _BOOL4 v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  __int16 v141;
  double v142;
  __int16 v143;
  double v144;
  __int16 v145;
  double v146;
  __int16 v147;
  uint64_t v148;
  __int16 v149;
  double v150;
  __int16 v151;
  double v152;
  __int16 v153;
  double v154;
  __int16 v155;
  double v156;
  __int16 v157;
  unsigned int v158;
  __int16 v159;
  double v160;
  __int16 v161;
  uint64_t v162;
  __int16 v163;
  int v164;
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  double v168;
  __int16 v169;
  double v170;
  __int128 buf;
  _BYTE v172[10];
  __int16 v173;
  _BOOL4 v174;
  __int16 v175;
  int v176;
  __int16 v177;
  unsigned int v178;
  __int16 v179;
  double v180;
  __int16 v181;
  double v182;
  __int16 v183;
  uint64_t v184;
  __int16 v185;
  double v186;
  __int16 v187;
  double v188;
  __int16 v189;
  double v190;
  __int16 v191;
  int v192;
  __int16 v193;
  _BOOL4 v194;
  __int16 v195;
  int v196;
  __int16 v197;
  int v198;
  __int16 v199;
  int v200;
  __int16 v201;
  unsigned int v202;
  __int16 v203;
  double v204;
  __int16 v205;
  double v206;
  __int16 v207;
  double v208;
  __int16 v209;
  uint64_t v210;
  __int16 v211;
  double v212;
  __int16 v213;
  double v214;
  __int16 v215;
  double v216;
  __int16 v217;
  double v218;
  __int16 v219;
  unsigned int v220;
  __int16 v221;
  double v222;
  __int16 v223;
  uint64_t v224;
  __int16 v225;
  int v226;
  __int16 v227;
  uint64_t v228;
  __int16 v229;
  double v230;
  __int16 v231;
  double v232;

  v6 = *(double *)(a3 + 320);
  v7 = 0.0;
  v8 = 0.0;
  if (v6 > 0.0)
    v8 = *(double *)(a3 + 192) / v6;
  v9 = *(double *)(a3 + 880);
  if (v9 > 0.0)
    v7 = *(double *)(a3 + 912) / v9;
  v10 = *(_DWORD *)(a3 + 24);
  v11 = *(unsigned __int8 *)(a3 + 1352);
  v112 = *(float *)(a3 + 1360);
  v113 = *(float *)(a3 + 1356);
  LODWORD(v108) = *(_DWORD *)(a3 + 1364);
  v12 = *(double *)(a3 + 328);
  v13 = *(double *)(a3 + 232);
  v119 = *(double *)(a3 + 240);
  v111 = *(_DWORD *)(a3 + 872);
  v14 = *(_QWORD *)(a3 + 8);
  HIBYTE(v121) = 0;
  v15 = sub_100B14728(a3, (_BYTE *)&v121 + 7);
  v116 = sub_100F6323C((_QWORD *)a2, a3);
  v109 = *(double *)(a3 + 296);
  v16 = *(_QWORD *)(a3 + 192);
  sub_100B14820((void **)a1, (double *)a3, a2 + 328, (uint64_t)&buf);
  *(_OWORD *)(a1 + 24) = buf;
  v120 = a1;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)v172;
  v18 = *(double *)(a3 + 288);
  v19 = v18 != -1.79769313e308;
  v20 = *(double *)(a3 + 328);
  if (v20 <= -1.0)
    v19 = 0;
  v21 = *(double *)(a3 + 656);
  v117 = v14;
  if (!v19 || v12 >= 0.44704 || v21 == -1.79769313e308 || !HIBYTE(v121) || v15)
  {
    if (v12 < 0.44704)
      LOBYTE(v19) = 0;
    if (!v19)
    {
      v24 = v21 != -1.79769313e308 && HIBYTE(v121) != 0 && v15 != 0;
      v22 = 1;
      v23 = 7;
      goto LABEL_31;
    }
    v22 = 1;
    v23 = 7;
  }
  else
  {
    v17 = sub_1002BC6D0(v116);
    v22 = 0;
    if (v17)
      v23 = 0;
    else
      v23 = 11;
    v18 = *(double *)(a3 + 288);
    v20 = *(double *)(a3 + 328);
    v21 = *(double *)(a3 + 656);
  }
  v24 = 1;
LABEL_31:
  v27 = v20 > -1.0 && v18 != -1.79769313e308;
  v110 = v7;
  if (!v27 || v12 < 0.44704 || v12 >= 1.56464 || v21 == -1.79769313e308 || !HIBYTE(v121) || v15)
  {
    v30 = v12 >= 1.56464 && v27 || v21 != -1.79769313e308 && HIBYTE(v121) != 0 && v15 != 0;
    v24 &= v30;
  }
  else if (*(double *)(a3 + 168) == -1.79769313e308 || !*(_DWORD *)(a3 + 184) || (v28 = fabs(v8), v28 < 0.03))
  {
    v22 = 0;
    v23 = 5;
  }
  else if (v28 > 0.03)
  {
    v22 = 0;
    v23 = 4;
  }
  v33 = !v27;
  if (v6 >= 8.9408)
    v33 = 1;
  if ((v33 & 1) != 0 || v21 == -1.79769313e308 || !HIBYTE(v121) || !v15)
  {
    v39 = v6 >= 8.9408 && v27 || v21 != -1.79769313e308 && HIBYTE(v121) != 0 && v15 == 0;
    v24 &= v39;
  }
  else
  {
    v22 = 0;
    v23 = 1;
    if (*(double *)(a3 + 168) != -1.79769313e308 && *(_DWORD *)(a3 + 184))
    {
      v22 = 0;
      if (v15 < 0xA && v12 >= 0.44704 && v8 <= 0.03 && v12 <= 1.56464 && *(float *)(a3 + 1364) < 0.5)
        v23 = 14;
      else
        v23 = 1;
    }
  }
  v42 = v13;
  sub_100B148EC(v17, a3);
  v44 = v43;
  HIDWORD(v108) = v15;
  if (v6 > 8.9408
    && *(double *)(a3 + 288) != -1.79769313e308
    && *(double *)(a3 + 328) > -1.0
    && *(double *)(a3 + 264) != -1.79769313e308
    && *(double *)(a3 + 240) >= 0.8
    && sub_100B149A4(v120, a3, (float *)(a2 + 328)) == 1
    && *(double *)(a3 + 168) != -1.79769313e308
    && *(_DWORD *)(a3 + 184)
    && v8 > -0.005
    && *(double *)(v120 + 40) > -0.005
    && v42 <= 120.0)
  {
    v22 = 0;
    v23 = 2;
LABEL_147:
    v48 = v120;
    goto LABEL_182;
  }
  if (v6 > 8.9408
    && *(double *)(a3 + 288) != -1.79769313e308
    && *(double *)(a3 + 328) > -1.0
    && *(double *)(a3 + 264) != -1.79769313e308
    && *(double *)(a3 + 240) >= 0.8
    && sub_100B149A4(v120, a3, (float *)(a2 + 328)) == 1
    && *(double *)(a3 + 168) != -1.79769313e308
    && *(_DWORD *)(a3 + 184)
    && (v8 <= -0.005 || *(double *)(v120 + 40) <= -0.005)
    && v42 <= 120.0)
  {
    v22 = 0;
    v23 = 13;
    goto LABEL_147;
  }
  if (*(double *)(a3 + 288) != -1.79769313e308
    && *(double *)(a3 + 328) > -1.0
    && v12 >= 0.44704
    && v119 >= 0.4
    && (sub_100B149A4(v120, a3, (float *)(a2 + 328)) == 2
     || sub_100B149A4(v120, a3, (float *)(a2 + 328)) == 1)
    && v42 <= 120.0)
  {
    v22 = 0;
    v23 = 3;
    goto LABEL_147;
  }
  v45 = *(double *)(a3 + 1344);
  v46 = *(double *)(a3 + 288);
  v47 = *(double *)(a3 + 328);
  if (v23 == 7
    && v45 != -1.79769313e308
    && v46 != -1.79769313e308
    && v47 > -1.0
    && v12 >= 0.44704
    && v12 < 8.9408
    && v44 > 0.5
    && (v42 <= 120.0 || v119 < 0.4)
    || v45 != -1.79769313e308
    && v46 != -1.79769313e308
    && v47 > -1.0
    && v12 >= 8.9408
    && v44 > 0.5
    && v42 <= 120.0
    && v119 >= 0.4)
  {
    v22 = 0;
    v23 = 12;
    goto LABEL_147;
  }
  v49 = v46 != -1.79769313e308;
  if (v47 <= -1.0)
    v49 = 0;
  v48 = v120;
  if (v49 && v12 >= 8.9408 && *(float *)(a3 + 1364) < 0.5 && v119 < 0.4)
    goto LABEL_160;
  if (!v49)
    goto LABEL_162;
  if (*(double *)(a3 + 168) != -1.79769313e308
    && *(_DWORD *)(a3 + 184)
    && v12 >= 11.176
    && *(float *)(a3 + 1364) < 0.2
    && v8 > -0.005)
  {
LABEL_160:
    v22 = 0;
    v23 = 12;
    goto LABEL_182;
  }
  if (v6 > 8.9408)
  {
LABEL_162:
    v50 = *(double *)(a3 + 264);
    v51 = *(double *)(a3 + 240);
    if (v50 != -1.79769313e308 && v51 >= 0.8)
    {
      if (!sub_100B149A4(v120, a3, (float *)(a2 + 328)))
      {
        v52 = 1;
LABEL_170:
        v48 = v120;
        goto LABEL_173;
      }
      v50 = *(double *)(a3 + 264);
      v51 = *(double *)(a3 + 240);
    }
    v52 = v50 != -1.79769313e308;
    if (v51 < 0.8)
      v52 = 0;
    if (v42 <= 120.0)
      v52 = 0;
    goto LABEL_170;
  }
  v52 = 1;
LABEL_173:
  v53 = 0;
  if (*(double *)(a3 + 288) != -1.79769313e308 && *(double *)(a3 + 328) > -1.0)
    v53 = *(double *)(a3 + 168) != -1.79769313e308 && *(_DWORD *)(a3 + 184) != 0;
  v24 &= v52 || v53;
LABEL_182:
  sub_100B14A3C((unsigned __int16 *)v48, a3);
  v55 = sub_100B14AE0(v48);
  v56 = *(double *)(a3 + 288) != -1.79769313e308;
  if (*(double *)(a3 + 328) <= -1.0)
    v56 = 0;
  if (v6 > 22.352 && v56)
  {
    v57 = *(double *)(a3 + 168) == -1.79769313e308 || *(_DWORD *)(a3 + 184) == 0;
    v58 = !v57;
    if (!v57 && v8 > -0.005 && *(double *)(v48 + 40) > -0.005)
    {
      v59 = 2;
LABEL_216:
      v62 = v117;
      goto LABEL_217;
    }
    if (v58 && (v8 <= -0.005 || *(double *)(v48 + 40) <= -0.005))
    {
      v59 = 13;
      goto LABEL_216;
    }
  }
  if (v6 <= 22.352)
    v60 = v24;
  else
    v60 = 0;
  if ((v60 & v56) != 0)
    v61 = 6;
  else
    v61 = 7;
  if (!v22)
    v61 = v23;
  if (v55)
    v59 = 2;
  else
    v59 = v61;
  v62 = v117;
  if (v59 == 7)
  {
    if ((v10 - 1) >= 2 && (v113 >= 4.0 || v112 >= 1.045))
    {
      v59 = 7;
      if (v10 == 64 || v10 == 16)
      {
        if (v111)
          v80 = v11 == 0;
        else
          v80 = 0;
        if (v80)
          v59 = 10;
        else
          v59 = 7;
      }
    }
    else
    {
      v59 = 9;
    }
  }
LABEL_217:
  HIDWORD(v107) = v55;
  v63 = fmin((*(float *)(a2 + 356) - *(double *)(a3 + 232)) / (*(float *)(a2 + 356) - *(float *)(a2 + 352)), 1.0);
  v64 = v63;
  v65 = sub_10108B14C(v64, *(float *)(a2 + 348)) * *(float *)(a2 + 344);
  v66 = sub_100B149A4(v48, a3, (float *)(a2 + 328));
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102171270);
  v67 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v105 = v66;
    v68 = *(double *)(a3 + 328) > -1.0 && *(double *)(a3 + 288) != -1.79769313e308;
    v69 = *(double *)(a3 + 656) != -1.79769313e308;
    v71 = *(double *)(a3 + 168) != -1.79769313e308 && *(_DWORD *)(a3 + 184) != 0;
    v72 = v10;
    v73 = *(double *)(a3 + 240) >= 0.8 && *(double *)(a3 + 264) != -1.79769313e308;
    v100 = *(_QWORD *)(a3 + 232);
    v101 = *(double *)(a3 + 8) != -1.79769313e308;
    v102 = HIBYTE(v121);
    v103 = *(_QWORD *)(v120 + 32);
    v74 = log10f(*(float *)(a3 + 1368));
    v75 = *(unsigned __int16 *)(v120 + 50);
    v76 = (float)(v74 * 10.0);
    v77 = *(float *)(a3 + 1372);
    v78 = *(float *)(a3 + 1376);
    LODWORD(buf) = 67117568;
    DWORD1(buf) = v59;
    WORD4(buf) = 1024;
    *(_DWORD *)((char *)&buf + 10) = v68;
    v66 = v105;
    HIWORD(buf) = 1024;
    *(_DWORD *)v172 = v69;
    *(_WORD *)&v172[4] = 1024;
    *(_DWORD *)&v172[6] = v71;
    v173 = 1024;
    v174 = v73;
    v10 = v72;
    v175 = 1024;
    v176 = v111;
    v177 = 1024;
    v178 = v15;
    v179 = 2048;
    v180 = v6;
    v181 = 2048;
    v182 = v12;
    v183 = 2048;
    v184 = v100;
    v185 = 2048;
    v186 = v119;
    v187 = 2048;
    v188 = v8;
    v189 = 2048;
    v190 = v110;
    v191 = 1024;
    v192 = v105;
    v193 = 1024;
    v194 = v101;
    v195 = 1024;
    v196 = v72;
    v197 = 1024;
    v198 = v102;
    v199 = 1024;
    v200 = v59;
    v201 = 1024;
    v202 = v11;
    v203 = 2048;
    v204 = *(float *)&v108;
    v205 = 2048;
    v206 = v113;
    v207 = 2048;
    v208 = v112;
    v209 = 2048;
    v210 = v103;
    v211 = 2048;
    v212 = v65;
    v213 = 2048;
    v214 = v63;
    v215 = 2048;
    v216 = v44;
    v217 = 2048;
    v218 = v76;
    v219 = 1024;
    v220 = v116;
    v221 = 2048;
    v222 = v109;
    v223 = 2048;
    v224 = v16;
    v225 = 1024;
    v226 = HIDWORD(v107);
    v227 = 2048;
    v228 = v75;
    v229 = 2048;
    v230 = v77;
    v231 = 2048;
    v62 = v117;
    v232 = v78;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "CyclingStateDetector,state,%d,hasGPS,%d,hasStep,%d,hasElevation,%d,hasHR,%d,stepsRaw,%u,stepsQualified,%u,gpsSpeed,%f,rawGPSSpeed,%f,heartrate,%f,hrConf,%f,grade,%f,pedSpeed,%f,wrHrMetDiscordanceStatus,%d,hasTier1,%d,tier1Type,%d,hasStepsQual,%d,cycleState,%d,isArmConstrained,%d,tier1CyclingProbability,%f,accelXPowerSum,%f,grav90th_100Hz,%f,avgWRMets,%f,HRMets,%f,fhr,%f,isDriving,%f,roadNoise,%f,gpsDeltaDistanceState,%d,gpsDeltaDist,%f,verticalSpeed,%f,vehicularAccel,%d,speedBufferLen,%zu,tier1Smooth,%f,pedEnergyVertical,%f", (uint8_t *)&buf, 0x11Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    v106 = COERCE_DOUBLE(__PAIR64__(v11, v66));
    bzero(&buf, 0x65CuLL);
    v99 = v16;
    v98 = v10;
    v81 = v59;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102171270);
    v104 = qword_10229FE68;
    v82 = *(double *)(a3 + 328) > -1.0 && *(double *)(a3 + 288) != -1.79769313e308;
    v83 = *(double *)(a3 + 656) != -1.79769313e308;
    v85 = *(double *)(a3 + 168) != -1.79769313e308 && *(_DWORD *)(a3 + 184) != 0;
    v86 = *(double *)(a3 + 240) >= 0.8 && *(double *)(a3 + 264) != -1.79769313e308;
    v87 = *(_QWORD *)(a3 + 232);
    v88 = *(double *)(a3 + 8) != -1.79769313e308;
    v89 = HIBYTE(v121);
    v90 = v113;
    v114 = *(_QWORD *)(v120 + 32);
    v91 = log10f(*(float *)(a3 + 1368));
    v92 = *(unsigned __int16 *)(v120 + 50);
    v93 = (float)(v91 * 10.0);
    v94 = *(float *)(a3 + 1372);
    v95 = *(float *)(a3 + 1376);
    LODWORD(v122) = 67117568;
    HIDWORD(v122) = v81;
    LOWORD(v123) = 1024;
    *(_DWORD *)((char *)&v123 + 2) = v82;
    HIWORD(v123) = 1024;
    LODWORD(v124) = v83;
    WORD2(v124) = 1024;
    *(_DWORD *)((char *)&v124 + 6) = v85;
    WORD5(v124) = 1024;
    HIDWORD(v124) = v86;
    LOWORD(v125) = 1024;
    *(_DWORD *)((char *)&v125 + 2) = v111;
    HIWORD(v125) = 1024;
    *(double *)v126 = v6;
    *(_WORD *)&v126[8] = 2048;
    *(_WORD *)v127 = 2048;
    *(_QWORD *)&v127[2] = v87;
    *(_WORD *)&v127[10] = 2048;
    *(double *)&v127[12] = v119;
    *(_WORD *)&v127[20] = 2048;
    *(double *)&v127[22] = v8;
    *(_WORD *)&v127[30] = 2048;
    v128 = v110;
    v129 = 1024;
    v130 = LODWORD(v106);
    v131 = 1024;
    v132 = v88;
    v133 = 1024;
    v134 = v98;
    v135 = 1024;
    v136 = v89;
    v137 = 1024;
    v138 = v81;
    v139 = 1024;
    v140 = HIDWORD(v106);
    v141 = 2048;
    v142 = *(float *)&v108;
    v143 = 2048;
    v144 = v90;
    v145 = 2048;
    v146 = v112;
    v147 = 2048;
    v148 = v114;
    v149 = 2048;
    v150 = v65;
    v151 = 2048;
    v152 = v63;
    v153 = 2048;
    v154 = v44;
    v155 = 2048;
    v156 = v93;
    v157 = 1024;
    v158 = v116;
    v159 = 2048;
    v160 = v109;
    v161 = 2048;
    v162 = v99;
    v163 = 1024;
    v164 = HIDWORD(v107);
    v165 = 2048;
    v166 = v92;
    v167 = 2048;
    v168 = v94;
    v169 = 2048;
    v170 = v95;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v104, 0, "CyclingStateDetector,state,%d,hasGPS,%d,hasStep,%d,hasElevation,%d,hasHR,%d,stepsRaw,%u,stepsQualified,%u,gpsSpeed,%f,rawGPSSpeed,%f,heartrate,%f,hrConf,%f,grade,%f,pedSpeed,%f,wrHrMetDiscordanceStatus,%d,hasTier1,%d,tier1Type,%d,hasStepsQual,%d,cycleState,%d,isArmConstrained,%d,tier1CyclingProbability,%f,accelXPowerSum,%f,grav90th_100Hz,%f,avgWRMets,%f,HRMets,%f,fhr,%f,isDriving,%f,roadNoise,%f,gpsDeltaDistanceState,%d,gpsDeltaDist,%f,verticalSpeed,%f,vehicularAccel,%d,speedBufferLen,%zu,tier1Smooth,%f,pedEnergyVertical,%f", &v122, 282, v98, v99, v100, v101, v104,
      v106,
      v12,
      v107,
      v6,
      v108,
      v109,
      LODWORD(v8),
      LODWORD(v110),
      v111,
      v114,
      v115,
      v117,
      v119,
      *(double *)&v120,
      v121,
      v122,
      v123,
      *(double *)&v124,
      *((double *)&v124 + 1),
      v125,
      HIDWORD(v108),
      *(double *)&v126[2],
      v12,
      *(_DWORD *)v127,
      *(size_t *)&v127[8],
      *(double *)&v127[16],
      *(double *)&v127[24]);
    v97 = (char *)v96;
    sub_100512490("Generic", 1, 0, 2, "CLCyclingStateDetector_Type::CyclingResult CLCyclingStateDetector::determineCyclingState(const CLWorkoutPredictorInputs &, const CLWorkoutPredictorInputs::Items &)", "%s\n", v96);
    if (v97 != (char *)&buf)
      free(v97);
    return v118;
  }
  return v62;
}

uint64_t sub_100B14728(uint64_t a1, _BYTE *a2)
{
  double v2;
  BOOL v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  double v8;
  double v9;
  double v11;
  double v12;

  v2 = *(double *)(a1 + 328);
  v4 = *(double *)(a1 + 288) == -1.79769313e308 || v2 <= -1.0 || *(double *)(a1 + 656) == -1.79769313e308;
  if (v4
    || (v6 = *(_BYTE *)(a1 + 816) & 0xFE, v6 == 2)
    && (*(double *)(a1 + 168) != -1.79769313e308 ? (v7 = *(_DWORD *)(a1 + 184) == 0) : (v7 = 1), v7))
  {
    v5 = 0;
    *a2 = 0;
  }
  else
  {
    *a2 = 1;
    LODWORD(v5) = *(_DWORD *)(a1 + 872);
    v8 = *(double *)(a1 + 880);
    v9 = 0.0;
    if (v8 > 0.0)
      v9 = *(double *)(a1 + 912) / v8;
    if (v9 <= v2 * 0.7)
      v5 = 0;
    else
      v5 = v5;
    if (v6 == 2 && *(double *)(a1 + 168) != -1.79769313e308 && *(_DWORD *)(a1 + 184) != 0)
    {
      v11 = *(double *)(a1 + 320);
      v12 = 0.0;
      if (v11 > 0.0)
        v12 = *(double *)(a1 + 192) / v11;
      if (fabs(v12) > 0.03)
        return 0;
    }
  }
  return v5;
}

double sub_100B14820@<D0>(void **a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v7;
  double v8;
  double v9;
  double v10;
  float v11;
  float v12;
  double v13;
  float v14;
  __int128 v16;
  double v17;

  v7 = a2[40];
  v8 = a2[24];
  if (v7 <= 0.0)
    v9 = 0.0;
  else
    v9 = v8 / v7;
  v10 = fabs(v8);
  v11 = v8;
  if (v10 > v7 * 0.1)
    v11 = 0.0;
  v12 = v7;
  sub_100FC5600(v12, v11, *(float *)(a3 + 12));
  v13 = a2[1];
  *(double *)&v16 = v13;
  *((double *)&v16 + 1) = v14;
  v17 = v9;
  if (a2[36] != -1.79769313e308 && a2[41] > -1.0)
    sub_100B14B8C(a1, &v16);
  return sub_100B14CD8((uint64_t *)a1, a4, v13);
}

void sub_100B148EC(uint64_t a1, uint64_t a2)
{
  float v3;
  float v4;
  int v5;
  __int128 v6;
  int v7;
  int v8;
  _DWORD v9[4];

  v6 = xmmword_101C14DEC;
  v7 = -1056275379;
  v3 = *(double *)(a2 + 328);
  v4 = log10f(*(float *)(a2 + 1368));
  *(float *)v9 = v3;
  *(float *)&v9[1] = v4 * 10.0;
  v5 = *(_DWORD *)(a2 + 1372);
  v9[2] = *(_DWORD *)(a2 + 1356);
  v9[3] = v5;
  sub_1000F08C0((uint64_t)v9, (float *)&v8, (int *)&v6, 2, 4);
}

uint64_t sub_100B149A4(uint64_t a1, uint64_t a2, float *a3)
{
  float v4;
  float v5;
  double v6;
  double v7;

  v4 = fmin((a3[7] - *(double *)(a2 + 232)) / (a3[7] - a3[6]), 1.0);
  v5 = sub_10108B14C(v4, a3[5]) * a3[4];
  if (v5 <= 0.0)
    return 0;
  v6 = v5;
  v7 = *(double *)(a1 + 32);
  if (v7 > v6 + 15.0)
    return 1;
  if (v7 <= v6 + v6)
    return 0;
  else
    return 2;
}

unsigned __int16 *sub_100B14A3C(unsigned __int16 *result, uint64_t a2)
{
  _BOOL4 v3;
  double v4;
  double v5;

  if (*(double *)(a2 + 168) == -1.79769313e308 || *(_DWORD *)(a2 + 184) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = *(double *)(a2 + 288) != -1.79769313e308;
    if (*(double *)(a2 + 328) <= -1.0)
      v3 = 0;
  }
  v4 = *(double *)(a2 + 320);
  v5 = 0.0;
  if (v4 > 0.0)
    v5 = *(double *)(a2 + 192) / v4;
  if (fabs(v5) >= 0.03)
    v3 = 0;
  if (v3 && *(double *)(a2 + 328) > 0.44704)
    return sub_100B14E24(result + 24, (_QWORD *)(a2 + 328));
  *((_DWORD *)result + 12) = 0;
  return result;
}

BOOL sub_100B14AE0(uint64_t a1)
{
  unsigned __int16 *v1;
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;

  if (*(_WORD *)(a1 + 50) != 3)
    return 0;
  v1 = (unsigned __int16 *)(a1 + 48);
  v2 = *(double *)sub_1000E2B78((unsigned __int16 *)(a1 + 48), 0);
  v3 = 1;
  v4 = v2 - *(double *)sub_1000E2B78(v1, 1uLL);
  v5 = *(double *)sub_1000E2B78(v1, 1uLL);
  v6 = v5 - *(double *)sub_1000E2B78(v1, 2uLL);
  if (v4 < 3.0 || v6 < 3.0)
    return v6 <= -3.0 && v4 <= -3.0;
  return v3;
}

void sub_100B14B8C(void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;

  v4 = (char *)*a1;
  v5 = (char *)a1[1];
  v6 = v5 - (_BYTE *)*a1;
  if (v5 == *a1 || *(double *)a2 - *((double *)v5 - 3) > 0.0)
  {
    v7 = (uint64_t)(a1 + 2);
    v8 = (char *)a1[2];
    if (v5 >= v8)
    {
      v11 = v6 / 24;
      v12 = v6 / 24 + 1;
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      if (v14)
        v15 = (char *)sub_1002596A8(v7, v14);
      else
        v15 = 0;
      v16 = &v15[24 * v11];
      v17 = &v15[24 * v14];
      v18 = *a2;
      *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v16 = v18;
      v10 = v16 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *((_QWORD *)v16 - 1) = *((_QWORD *)v19 - 1);
          *(_OWORD *)(v16 - 24) = v21;
          v16 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v19)
        operator delete(v19);
    }
    else
    {
      v9 = *a2;
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v5 = v9;
      v10 = v5 + 24;
    }
    a1[1] = v10;
  }
}

double sub_100B14CD8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  double v8;
  __int128 *v9;
  __int128 *v10;
  __int128 v11;
  int v12;
  double v13;
  double v14;
  double result;

  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_101BAFC90;
  v6 = (__int128 *)*a1;
  v5 = (__int128 *)a1[1];
  v7 = v6;
  if (v6 == v5)
  {
LABEL_6:
    v5 = v7;
  }
  else
  {
    v8 = a3 + -30.0;
    v9 = v6;
    while (*(double *)v9 >= v8)
    {
      v9 = (__int128 *)((char *)v9 + 24);
      if (v9 == v5)
      {
        v7 = v5;
        goto LABEL_6;
      }
    }
    if (v9 != v5)
    {
      v10 = (__int128 *)((char *)v9 + 24);
      if ((__int128 *)((char *)v9 + 24) != v5)
      {
        do
        {
          if (*(double *)v10 >= v8)
          {
            v11 = *v10;
            *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
            *v9 = v11;
            v9 = (__int128 *)((char *)v9 + 24);
          }
          v10 = (__int128 *)((char *)v10 + 24);
        }
        while (v10 != v5);
        v6 = (__int128 *)*a1;
        v5 = (__int128 *)a1[1];
      }
    }
    if (v9 != v5)
    {
      v5 = v9;
      a1[1] = (uint64_t)v9;
    }
  }
  v12 = -1431655765 * ((unint64_t)((char *)v5 - (char *)v6) >> 3);
  *(_DWORD *)a2 = v12;
  if (v6 == v5)
  {
    v14 = 0.0;
    v13 = 0.0;
  }
  else
  {
    v13 = 0.0;
    v14 = 0.0;
    do
    {
      v13 = v13 + fmax(*((double *)v6 + 1), 0.0);
      v14 = v14 + *((double *)v6 + 2);
      v6 = (__int128 *)((char *)v6 + 24);
    }
    while (v6 != v5);
  }
  result = v14 / (double)v12;
  *(double *)(a2 + 8) = v13 / (double)v12;
  *(double *)(a2 + 16) = result;
  return result;
}

unsigned __int16 *sub_100B14E24(unsigned __int16 *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result[1];
  v3 = *((unsigned int *)result + 1);
  v4 = *result;
  if (v4 + v2 >= v3)
    v5 = *((unsigned int *)result + 1);
  else
    v5 = 0;
  *(_QWORD *)&result[4 * (v4 + v2 - v5) + 4] = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3)
      LOWORD(v3) = 0;
    *result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

void sub_100B14E78(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_100B14EA4()
{
  if (qword_102306B58 != -1)
    dispatch_once(&qword_102306B58, &stru_102171290);
  return qword_1023112E8;
}

void sub_100B14EE8()
{
  operator new();
}

void sub_100B14F48()
{
  operator delete();
}

_QWORD *sub_100B14F6C(_QWORD *a1)
{
  *a1 = off_1021712C0;
  sub_100B14FD8((uint64_t)a1, 0, 0);
  sub_100261F44((uint64_t)(a1 + 4));
  return sub_1009BAD18(a1);
}

void sub_100B14FB4(_QWORD *a1)
{
  sub_100B14F6C(a1);
  operator delete();
}

void sub_100B14FD8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  if (!a2)
  {
    v17 = v3;
    v18 = v4;
    v7 = (uint64_t *)(a1 + 32);
    if (!*(_QWORD *)(a1 + 32))
    {
      v8 = (uint64_t *)sub_100A07FA0();
      v14 = 0x80000FF00;
      v15 = 0;
      sub_1018E4078(v8, (uint64_t)&v14, (uint64_t *)&v16);
      sub_1002B7674((uint64_t)v7, &v16);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
      if (*((_QWORD *)&v16 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      sub_100A0A9A0(*v7, 14);
    }
    if (a3)
    {
      v12 = sub_100B150B0;
      v13 = a1;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    sub_100A0A4BC((uint64_t *)*v7, (uint64_t)v12, v13);
  }
}

uint64_t sub_100B150B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int IntegerValue;
  unint64_t TimeStamp;
  double v9;
  int v10;

  result = IOHIDEventGetType(a4);
  if ((_DWORD)result == 14)
  {
    IntegerValue = IOHIDEventGetIntegerValue(a4, 917504);
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    v9 = sub_100127828(TimeStamp);
    v10 = IntegerValue;
    return sub_10012AC18(a1, 0, (uint64_t)&v9, 16);
  }
  return result;
}

uint64_t sub_100B1512C(uint64_t a1)
{
  float *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)a1 = off_102171318;
  *(_DWORD *)(a1 + 8) = 1065353216;
  v2 = (float *)(a1 + 8);
  v3 = sub_100127B9C();
  sub_100081C10(v3, &v8);
  sub_100526804(v8, "StatCycleModelMetsScale", v2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_100B151C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100B151E0(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v6[232];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 48))(*(_QWORD *)(a3 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a3 + 48) + 24))(*(_QWORD *)(a3 + 48), v6, a1);
    if (v6[208])
    {
      sub_1004C5730(*(_QWORD *)(a3 + 8));
      return sub_1004C5730(*(_QWORD *)(a3 + 64));
    }
  }
  return result;
}

uint64_t sub_100B15280(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 8) + 48))(*(_QWORD *)(a3 + 8));
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a3 + 64) + 48))(*(_QWORD *)(a3 + 64), a1);
  return result;
}

void sub_100B152DC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int isTypeStatic;
  float v5;
  float v6;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  double v17;
  float v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  NSObject *v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  float v29;
  float v30;
  NSObject *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  const char *v36;
  uint8_t *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  const char *v43;
  uint8_t *v44;
  double v45;
  double v46;
  double v47;
  int v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  uint64_t v67;
  uint8_t buf[4];
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  uint64_t v87;

  isTypeStatic = CLMotionActivity::isTypeStatic(*(unsigned int *)(a1 + 288));
  *(_OWORD *)a2 = xmmword_101C14E20;
  *(_QWORD *)(a2 + 16) = 0x408CDDEA00000000;
  *(_DWORD *)(a2 + 24) = 3;
  v5 = 4.4021;
  if (isTypeStatic)
    v6 = 1.3;
  else
    v6 = 4.4021;
  *((float *)&v47 + 1) = v6;
  *(float *)(a2 + 28) = v6;
  *(_QWORD *)(a2 + 32) = 0x300000003;
  v7 = *(_DWORD *)(a1 + 1364);
  v8 = *(float *)(a1 + 1368);
  v9 = *(float *)(a1 + 1372);
  v10 = *(float *)(a1 + 1380);
  v11 = *(float *)(a1 + 1384);
  v12 = 0.0;
  if (sub_100219944(a1))
  {
    LODWORD(v47) = v7;
    v13 = 4.4021;
    if (*(double *)(a1 + 600) < *(double *)a1)
    {
      v14 = *(double *)(a1 + 560);
      v15 = v11;
      v16 = v10;
      v17 = v14;
      v46 = v16;
      v18 = (v16 - v14) / (v16 - v11);
      v19 = v8;
      v20 = v8 * sub_10108B14C(v18, v9);
      if ((float)(1.0 - v18) <= 0.2)
      {
        v5 = 2.1;
        if (v20 >= 2.1)
          v13 = v20;
        else
          v13 = 2.1;
        if (v20 >= 2.1)
          v21 = 1;
        else
          v21 = 3;
        if (isTypeStatic)
          v23 = 1.3;
        else
          v23 = 2.1;
        if (v20 >= v23)
          v22 = v20;
        else
          v22 = v23;
      }
      else
      {
        v5 = 4.4021;
        if (v20 >= 4.4021)
          v13 = v20;
        else
          v13 = 4.4021;
        if (v20 >= 4.4021)
          v21 = 1;
        else
          v21 = 3;
        v22 = v13;
      }
      *(float *)a2 = v20;
      *(_DWORD *)(a2 + 4) = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(float *)(a2 + 12) = v5;
      *(_DWORD *)(a2 + 16) = 0;
      *(float *)(a2 + 20) = v13;
      *(_DWORD *)(a2 + 24) = v21;
      *(float *)(a2 + 28) = v22;
      *(_DWORD *)(a2 + 32) = v21;
      *(_DWORD *)(a2 + 36) = 0;
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102171358);
      v24 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
      {
        v25 = *(double *)(a1 + 120);
        v26 = *(double *)(a1 + 128);
        v27 = *(_QWORD *)(a1 + 600);
        *(_DWORD *)buf = 134220288;
        v69 = v25;
        v70 = 2048;
        v71 = v26;
        v72 = 2048;
        v73 = v17;
        v74 = 2048;
        v75 = v46;
        v76 = 2048;
        v77 = v15;
        v78 = 2048;
        v79 = v19;
        v80 = 2048;
        v81 = v26 - v25;
        v82 = 2048;
        v83 = *(float *)&v47;
        v84 = 2048;
        v85 = v13;
        v86 = 2048;
        v87 = v27;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Stationary Cycle, Begin Time, %f, End Time, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f, HRstaleness, %f", buf, 0x66u);
      }
      *((float *)&v47 + 1) = v22;
      if (sub_1001BFF7C(115, 2))
      {
        v38 = v17;
        bzero(buf, 0x65CuLL);
        v39 = v15;
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102171358);
        v12 = v20;
        v40 = *(double *)(a1 + 120);
        v41 = *(double *)(a1 + 128);
        v42 = *(_QWORD *)(a1 + 600);
        v48 = 134220288;
        v49 = v40;
        v50 = 2048;
        v51 = v41;
        v52 = 2048;
        v53 = v38;
        v54 = 2048;
        v55 = v46;
        v56 = 2048;
        v57 = v39;
        v58 = 2048;
        v59 = v19;
        v60 = 2048;
        v61 = v41 - v40;
        v62 = 2048;
        v63 = *(float *)&v47;
        v64 = 2048;
        v65 = v13;
        v66 = 2048;
        v67 = v42;
        LODWORD(v45) = 102;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Stationary Cycle, Begin Time, %f, End Time, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f, HRstaleness, %f", COERCE_DOUBLE(&v48), v45, v46, v47);
        v44 = (uint8_t *)v43;
        sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieStationaryCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v43);
        if (v44 != buf)
          free(v44);
      }
      else
      {
        v12 = v20;
      }
    }
  }
  else
  {
    v13 = 4.4021;
  }
  v28 = 0.0;
  if (*(_BYTE *)(a1 + 352))
  {
    v29 = *((float *)&v47 + 1);
    if (*(double *)(a1 + 1040) > 0.0)
    {
      v30 = sub_101311068(*(double *)(a1 + 1152), *(float *)(a1 + 1364));
      *(float *)(a2 + 8) = v30;
      if (v13 < v30)
      {
        *(float *)(a2 + 20) = v30;
        *(_DWORD *)(a2 + 24) = 4;
        v13 = v30;
      }
      if (*((float *)&v47 + 1) < v30)
      {
        *(float *)(a2 + 28) = v30;
        *(_DWORD *)(a2 + 32) = 4;
        v29 = v30;
      }
      if (v5 <= v30)
        v5 = v30;
      *(float *)(a2 + 12) = v5;
      v28 = v30;
    }
  }
  else
  {
    v29 = *((float *)&v47 + 1);
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102171358);
  v31 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v32 = *(double *)(a1 + 112);
    v33 = *(double *)(a1 + 128) - *(double *)(a1 + 120);
    *(_DWORD *)buf = 134219520;
    v69 = v32;
    v70 = 2048;
    v71 = v12;
    v72 = 2048;
    v73 = v28;
    v74 = 2048;
    v75 = v13;
    v76 = 2048;
    v77 = v33;
    v78 = 2048;
    v79 = v29;
    v80 = 2048;
    v81 = v5;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Stationary Cycle, computeTime, %.3f, hrMets, %f, fmMets, %f, userMets, %f, Duration, %f, truthMets, %f, metsPE, %f", buf, 0x48u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102171358);
    v34 = *(double *)(a1 + 112);
    v35 = *(double *)(a1 + 128) - *(double *)(a1 + 120);
    v48 = 134219520;
    v49 = v34;
    v50 = 2048;
    v51 = v12;
    v52 = 2048;
    v53 = v28;
    v54 = 2048;
    v55 = v13;
    v56 = 2048;
    v57 = v35;
    v58 = 2048;
    v59 = v29;
    v60 = 2048;
    v61 = v5;
    LODWORD(v45) = 72;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Stationary Cycle, computeTime, %.3f, hrMets, %f, fmMets, %f, userMets, %f, Duration, %f, truthMets, %f, metsPE, %f", COERCE_DOUBLE(&v48), v45, v46, v47);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieStationaryCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
}

void sub_100B15950()
{
  operator delete();
}

void sub_100B15964(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

_QWORD *sub_100B15990(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

unint64_t sub_100B159B4(_QWORD *a1, void *a2, unsigned int a3)
{
  double Current;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  char *v19;
  id v20;
  _OWORD *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  CLPredictedWalkDistanceData *v29;
  char *v30;
  const char *v32;
  char *v33;
  double v34;
  double v35;
  char *v36;
  char *v37;
  uint64_t v38;
  id v39[2];
  int v40;
  double v41;
  __int16 v42;
  double v43;
  _BYTE buf[32];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  sub_100131938(v39, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  Current = CFAbsoluteTimeGetCurrent();
  v35 = 0.0;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  sub_1001FD98C(*(uint64_t *)buf, "PredictedWalkDistanceBoutRecordId", &v35);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v35 <= 0.0)
  {
    v17 = sub_1001FD94C();
    sub_1001FD98C(v17, "CMHealthColdStorageWatchServiceLastSyncTimestampPredictedWalkDistance", &v35);
  }
  else
  {
    v11 = sub_1001FD94C();
    sub_10018A4CC(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampPredictedWalkDistance", &v35);
    v12 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 944))(v12);
    v13 = sub_100127B9C();
    sub_100081C10(v13, buf);
    sub_100525484(*(uint64_t *)buf, "PredictedWalkDistanceBoutRecordId", 0xFFFFFFFFLL);
    v14 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if ((*(unsigned int (**)(_QWORD, char **, uint64_t, unint64_t, _QWORD, double, double))(*(_QWORD *)*a1 + 24))(*a1, &v36, 1, a3 / 0x78uLL, 0, v35, Current) != 100)
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102171378);
    v18 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v35;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = Current;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLPredictedWalkDistanceCompanionSyncManager: Failed to fetch bouts for time range, startTime : %f, endTime: %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102171378);
      v40 = 134218240;
      v41 = v35;
      v42 = 2048;
      v43 = Current;
      LODWORD(v34) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 16, "CLPredictedWalkDistanceCompanionSyncManager: Failed to fetch bouts for time range, startTime : %f, endTime: %f", COERCE_DOUBLE(&v40), v34);
      v33 = (char *)v32;
      sub_100512490("Generic", 1, 0, 0, "size_t CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords(NSMutableDictionary *, uint32_t)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  a1[2] = 0xBFF0000000000000;
  v19 = v36;
  if (v36 == v37)
  {
    v30 = v36;
    if (!v36)
      goto LABEL_24;
    goto LABEL_23;
  }
  a1[2] = *((_QWORD *)v37 - 13);
  v20 = +[NSMutableArray array](NSMutableArray, "array");
  v21 = v36;
  v22 = v37;
  if (v36 != v37)
  {
    do
    {
      v23 = *v21;
      v24 = v21[1];
      v25 = v21[3];
      v45 = v21[2];
      v46 = v25;
      *(_OWORD *)buf = v23;
      *(_OWORD *)&buf[16] = v24;
      v26 = v21[4];
      v27 = v21[5];
      v28 = v21[6];
      v50 = *((_QWORD *)v21 + 14);
      v48 = v27;
      v49 = v28;
      v47 = v26;
      v29 = -[CLPredictedWalkDistanceData initWithPredictedWalkDistanceBoutEntry:]([CLPredictedWalkDistanceData alloc], "initWithPredictedWalkDistanceBoutEntry:", buf);
      objc_msgSend(v20, "addObject:", v29);

      v21 = (_OWORD *)((char *)v21 + 120);
    }
    while (v21 != (_OWORD *)v22);
  }
  objc_msgSend(a2, "setObject:forKey:", v20, CFSTR("PredictedWalkDistanceBoutKey"));
  v30 = v36;
  v19 = v37;
  if (v36)
  {
LABEL_23:
    v37 = v30;
    operator delete(v30);
  }
LABEL_24:
  sub_100131740(v39);
  return 0xEEEEEEEEEEEEEEEFLL * ((v19 - v30) >> 3);
}

void sub_100B15DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  sub_100131740(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100B15E3C(uint64_t result)
{
  uint64_t *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  v1 = (uint64_t *)(result + 16);
  if (*(double *)(result + 16) > 0.0)
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102171378);
    v2 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
    {
      v3 = *v1;
      *(_DWORD *)buf = 134217984;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Saving last Cold Storage sync timestamp: %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102171378);
      v6 = *v1;
      v9 = 134217984;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Saving last Cold Storage sync timestamp: %f", COERCE_DOUBLE(&v9));
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceCompanionSyncManager::saveCurrentSyncProgress()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    v4 = sub_1001FD94C();
    sub_10018A4CC(v4, "CMHealthColdStorageWatchServiceLastSyncTimestampPredictedWalkDistance", v1);
    v5 = sub_1001FD94C();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 944))(v5);
  }
  return result;
}

void sub_100B1601C(id a1)
{
  qword_10229FEA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

BOOL sub_100B16048(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  _BOOL8 result;
  uint64_t v7;

  result = 0;
  if (a2 && a3 - a4 >= a6)
  {
    if (*(_BYTE *)(a2 + a4) == 64
      && (v7 = a4 + a2, *(unsigned __int8 *)(v7 + 1) <= 0x30u)
      && *(unsigned __int8 *)(v7 + 2) == a6)
    {
      return *(unsigned __int8 *)(a4 + a2 + 3) == a5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_100B160A4(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 35)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 19083328;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }
  return a3 > 34;
}

BOOL sub_100B1614C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 1, 35);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    v9 = a4 + 33;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B16230(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 35)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0#\a");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }
  return a3 > 34;
}

BOOL sub_100B162D8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 7, 35);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    v9 = a4 + 33;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B163BC(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 35)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0#\n");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }
  return a3 > 34;
}

BOOL sub_100B16464(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 10, 35);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    v9 = a4 + 33;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

std::string *sub_100B16548(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,AccelOscarEmu,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20lf", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

BOOL sub_100B165E0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  char v7;

  if (a3 >= 41)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = *(_BYTE *)(a1 + 49);
    if (*(_BYTE *)(a1 + 50))
      v7 |= 2u;
    *(_DWORD *)a2 = 36253760;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_BYTE *)(a2 + 37) = *(_BYTE *)(a1 + 48);
    *(_BYTE *)(a2 + 38) = v7;
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 39);
    *(_WORD *)(a2 + 39) = v6 | ((_WORD)v5 << 8);
    *a4 = 41;
  }
  return a3 > 40;
}

BOOL sub_100B166B0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;

  result = sub_100B16048(a1, a2, a3, a4, 2, 41);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_BYTE *)(a1 + 48) = v8[37];
    v9 = v8[38];
    v10 = a4 + 39;
    *(_BYTE *)(a1 + 49) = v9 & 1;
    *(_BYTE *)(a1 + 50) = (v9 & 2) != 0;
    if (a4 < -38)
    {
      v15 = 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = v10;
      do
      {
        v14 = *v8++;
        v12 = (v12 + v14) % 0xFF;
        v11 = (v12 + v11) % 0xFF;
        --v13;
      }
      while (v13);
      v15 = (unsigned __int16)v12 | ((unsigned __int16)v11 << 8);
    }
    v16 = *(unsigned __int16 *)(v10 + a2);
    *(_WORD *)(a1 + 16) = v16;
    return v16 == v15;
  }
  return result;
}

BOOL sub_100B167B8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 35)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0#\b");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }
  return a3 > 34;
}

BOOL sub_100B16860(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 8, 35);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    v9 = a4 + 33;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B16944(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 19)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 101920832;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 17);
    *(_WORD *)(a2 + 17) = v6 | ((_WORD)v5 << 8);
    *a4 = 19;
  }
  return a3 > 18;
}

BOOL sub_100B169D4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 6, 19);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    v9 = a4 + 17;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    if (a4 < -16)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B16AA0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 38)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 388378688;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_WORD *)(a2 + 33) = *(_WORD *)(a1 + 44);
    *(_BYTE *)(a2 + 35) = *(_BYTE *)(a1 + 46);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 36);
    *(_WORD *)(a2 + 36) = v6 | ((_WORD)v5 << 8);
    *a4 = 38;
  }
  return a3 > 37;
}

BOOL sub_100B16B58(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 23, 38);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    *(_WORD *)(a1 + 44) = *(_WORD *)(v8 + 33);
    v9 = a4 + 36;
    *(_BYTE *)(a1 + 46) = v8[35] == 1;
    if (a4 < -35)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

std::string *sub_100B16C54(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,GyroOscarEmu,x,%20.20f,y,%20.20f,z,%20.20f,sampleNum,%d,fsync,%d,timestamp,%20.20lf", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(unsigned __int16 *)(a1 + 44), *(unsigned __int8 *)(a1 + 46), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

BOOL sub_100B16CF8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 40)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 203960384;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(_BYTE *)(a2 + 37) = *(_BYTE *)(a1 + 44);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 38);
    *(_WORD *)(a2 + 38) = v6 | ((_WORD)v5 << 8);
    *a4 = 40;
  }
  return a3 > 39;
}

BOOL sub_100B16DB8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 12, 40);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 33);
    *(_BYTE *)(a1 + 44) = v8[37];
    v9 = a4 + 38;
    if (a4 < -37)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B16EB4(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 44)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 288108608;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 44);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 42);
    *(_WORD *)(a2 + 42) = v6 | ((_WORD)v5 << 8);
    *a4 = 44;
  }
  return a3 > 43;
}

BOOL sub_100B16F74(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 17, 44);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 37);
    v9 = a4 + 42;
    if (a4 < -41)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B17070(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 20)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 303312960;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 18);
    *(_WORD *)(a2 + 18) = v6 | ((_WORD)v5 << 8);
    *a4 = 20;
  }
  return a3 > 19;
}

BOOL sub_100B17100(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 18, 20);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    v9 = a4 + 18;
    if (a4 < -17)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B171CC(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 35)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 52637760;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }
  return a3 > 34;
}

BOOL sub_100B17274(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 3, 35);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    v9 = a4 + 33;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B17358(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 72)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 71839808;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 41) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 45) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 49) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 64);
    *(_BYTE *)(a2 + 57) = *(_BYTE *)(a1 + 68);
    *(_DWORD *)(a2 + 58) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 62) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 66) = *(_DWORD *)(a1 + 80);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 70);
    *(_WORD *)(a2 + 70) = v6 | ((_WORD)v5 << 8);
    *a4 = 72;
  }
  return a3 > 71;
}

BOOL sub_100B17450(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 4, 72);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(v8 + 37);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(v8 + 41);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 45);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(v8 + 49);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 53);
    *(_BYTE *)(a1 + 68) = v8[57];
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 + 58);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 62);
    v9 = a4 + 70;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v8 + 66);
    if (a4 < -69)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B17584(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 24)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 186134592;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 32);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 22);
    *(_WORD *)(a2 + 22) = v6 | ((_WORD)v5 << 8);
    *a4 = 24;
  }
  return a3 > 23;
}

BOOL sub_100B1761C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 11, 24);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_BYTE *)(a1 + 32) = v8[21];
    v9 = a4 + 22;
    if (a4 < -21)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B176F0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 102)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 90583104;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 41) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 45) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 49) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 57) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 61) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 65) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 69) = *(_DWORD *)(a1 + 80);
    *(_BYTE *)(a2 + 73) = *(_BYTE *)(a1 + 84);
    *(_DWORD *)(a2 + 74) = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 78) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a2 + 82) = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 86) = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a2 + 90) = *(_DWORD *)(a1 + 104);
    *(_DWORD *)(a2 + 94) = *(_DWORD *)(a1 + 108);
    *(_WORD *)(a2 + 98) = *(_WORD *)(a1 + 112);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 100);
    *(_WORD *)(a2 + 100) = v6 | ((_WORD)v5 << 8);
    *a4 = 102;
  }
  return a3 > 101;
}

BOOL sub_100B17828(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 5, 102);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(v8 + 37);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(v8 + 41);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 45);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(v8 + 49);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 53);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(v8 + 57);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 + 61);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 65);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v8 + 69);
    *(_BYTE *)(a1 + 84) = v8[73];
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(v8 + 74);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(v8 + 78);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 82);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(v8 + 86);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(v8 + 90);
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(v8 + 94);
    *(_WORD *)(a1 + 112) = *((_WORD *)v8 + 49);
    v9 = a4 + 100;
    if (a4 < -99)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1799C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 84)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 341061696;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_BYTE *)(a2 + 17) = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a2 + 18) = *(_BYTE *)(a1 + 25);
    *(_BYTE *)(a2 + 19) = *(_BYTE *)(a1 + 26);
    *(_BYTE *)(a2 + 20) = *(_BYTE *)(a1 + 27);
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a2 + 22) = *(_BYTE *)(a1 + 29);
    *(_BYTE *)(a2 + 23) = *(_BYTE *)(a1 + 30);
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 28) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 36) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a2 + 44) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 52) = *(_QWORD *)(a1 + 64);
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 72);
    *(_DWORD *)(a2 + 61) = *(_DWORD *)(a1 + 76);
    *(_BYTE *)(a2 + 65) = *(_BYTE *)(a1 + 80);
    *(_DWORD *)(a2 + 66) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a2 + 70) = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 74) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a2 + 78) = *(_DWORD *)(a1 + 96);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 82);
    *(_WORD *)(a2 + 82) = v6 | ((_WORD)v5 << 8);
    *a4 = 84;
  }
  return a3 > 83;
}

BOOL sub_100B17AC4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 20, 84);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_BYTE *)(a1 + 24) = v8[17];
    *(_BYTE *)(a1 + 25) = v8[18];
    *(_BYTE *)(a1 + 26) = v8[19];
    *(_BYTE *)(a1 + 27) = v8[20];
    *(_BYTE *)(a1 + 28) = v8[21];
    *(_BYTE *)(a1 + 29) = v8[22];
    *(_BYTE *)(a1 + 30) = v8[23];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)v8 + 6);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v8 + 28);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 + 36);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v8 + 44);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v8 + 52);
    *(_BYTE *)(a1 + 72) = v8[60];
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 61);
    *(_BYTE *)(a1 + 80) = v8[65];
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(v8 + 66);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(v8 + 70);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(v8 + 74);
    v9 = a4 + 82;
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 78);
    if (a4 < -81)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B17C28(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 31)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 220147776;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 29);
    *(_WORD *)(a2 + 29) = v6 | ((_WORD)v5 << 8);
    *a4 = 31;
  }
  return a3 > 30;
}

BOOL sub_100B17CC8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 13, 31);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    v9 = a4 + 29;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    if (a4 < -28)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B17DA4(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 27)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0\x1B5");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }
  return a3 > 26;
}

BOOL sub_100B17E3C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 53, 27);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    v9 = a4 + 25;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    if (a4 < -24)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B17F10(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 27)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 320548928;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }
  return a3 > 26;
}

BOOL sub_100B17FA8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 19, 27);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    v9 = a4 + 25;
    if (a4 < -24)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1807C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 24)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 421015616;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 32);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 22);
    *(_WORD *)(a2 + 22) = v6 | ((_WORD)v5 << 8);
    *a4 = 24;
  }
  return a3 > 23;
}

BOOL sub_100B18114(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 25, 24);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    v9 = a4 + 22;
    *(_BYTE *)(a1 + 32) = v8[21] == 1;
    if (a4 < -21)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B181F0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 76)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 374091840;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 41) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 45) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 49) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 57) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 61) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 65) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 69) = *(_DWORD *)(a1 + 80);
    *(_BYTE *)(a2 + 73) = *(_BYTE *)(a1 + 84);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 74);
    *(_WORD *)(a2 + 74) = v6 | ((_WORD)v5 << 8);
    *a4 = 76;
  }
  return a3 > 75;
}

BOOL sub_100B182F0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 22, 76);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(v8 + 37);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(v8 + 41);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 45);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(v8 + 49);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 53);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(v8 + 57);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 + 61);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 65);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v8 + 69);
    *(_BYTE *)(a1 + 84) = v8[73];
    v9 = a4 + 74;
    if (a4 < -73)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1842C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 32)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 404762688;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(a2 + 29) = *(_BYTE *)(a1 + 40);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 30);
    *(_WORD *)(a2 + 30) = v6 | ((_WORD)v5 << 8);
    *a4 = 32;
  }
  return a3 > 31;
}

BOOL sub_100B184CC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 24, 32);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 21);
    v9 = a4 + 30;
    *(_BYTE *)(a1 + 40) = v8[29] != 0;
    if (a4 < -29)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B185B0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 43)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0+%");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 48);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 41);
    *(_WORD *)(a2 + 41) = v6 | ((_WORD)v5 << 8);
    *a4 = 43;
  }
  return a3 > 42;
}

BOOL sub_100B18660(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 37, 43);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(v8 + 37);
    v9 = a4 + 41;
    if (a4 < -40)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1874C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 27)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0\x1B*");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }
  return a3 > 26;
}

BOOL sub_100B187E4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 42, 27);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    v9 = a4 + 25;
    if (a4 < -24)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B188B8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 27)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 437989440;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }
  return a3 > 26;
}

BOOL sub_100B18950(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 25)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 454635584;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a2 + 22) = *(_BYTE *)(a1 + 33);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 23);
    *(_WORD *)(a2 + 23) = v6 | ((_WORD)v5 << 8);
    *a4 = 25;
  }
  return a3 > 24;
}

BOOL sub_100B189F0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 26, 27);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    v9 = a4 + 25;
    if (a4 < -24)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B18AC4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 27, 25);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_BYTE *)(a1 + 32) = v8[21];
    *(_BYTE *)(a1 + 33) = v8[22];
    v9 = a4 + 23;
    if (a4 < -22)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B18BA0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 98)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 492974144;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 32);
    *(_QWORD *)(a2 + 22) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 30) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a2 + 38) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 46) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 54) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a2 + 62) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 70) = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a2 + 78) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a2 + 86) = *(_QWORD *)(a1 + 104);
    *(_BYTE *)(a2 + 94) = *(_BYTE *)(a1 + 112);
    *(_BYTE *)(a2 + 95) = *(_BYTE *)(a1 + 113);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 96);
    *(_WORD *)(a2 + 96) = v6 | ((_WORD)v5 << 8);
    *a4 = 98;
  }
  return a3 > 97;
}

BOOL sub_100B18C90(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 29, 98);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_BYTE *)(a1 + 32) = v8[21];
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v8 + 22);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 + 30);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v8 + 38);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v8 + 46);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v8 + 54);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(v8 + 62);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(v8 + 70);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(v8 + 78);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(v8 + 86);
    *(_BYTE *)(a1 + 112) = v8[94];
    *(_BYTE *)(a1 + 113) = v8[95];
    v9 = a4 + 96;
    if (a4 < -95)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B18DBC(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 95)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 509554752;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 29) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 37) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a2 + 45) = *(_QWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 57) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 61) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 65) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 69) = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a2 + 73) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a2 + 77) = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 81) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a2 + 85) = *(_DWORD *)(a1 + 96);
    *(_BYTE *)(a2 + 89) = *(_BYTE *)(a1 + 100);
    *(_BYTE *)(a2 + 90) = *(_BYTE *)(a1 + 101);
    *(_BYTE *)(a2 + 91) = *(_BYTE *)(a1 + 102);
    *(_BYTE *)(a2 + 92) = *(_BYTE *)(a1 + 103);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 93);
    *(_WORD *)(a2 + 93) = v6 | ((_WORD)v5 << 8);
    *a4 = 95;
  }
  return a3 > 94;
}

BOOL sub_100B18ED4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;

  result = sub_100B16048(a1, a2, a3, a4, 30, 95);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 21);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v8 + 29);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 + 37);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v8 + 45);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 53);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(v8 + 57);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 + 61);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 65);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v8 + 69);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(v8 + 73);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(v8 + 77);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(v8 + 81);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 85);
    v9 = v8[89];
    *(_BYTE *)(a1 + 101) = v8[90] != 0;
    *(_BYTE *)(a1 + 102) = v8[91] != 0;
    v10 = v8[92];
    v11 = a4 + 93;
    *(_BYTE *)(a1 + 100) = v9;
    *(_BYTE *)(a1 + 103) = v10;
    if (a4 < -92)
    {
      v16 = 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = v11;
      do
      {
        v15 = *v8++;
        v13 = (v13 + v15) % 0xFF;
        v12 = (v13 + v12) % 0xFF;
        --v14;
      }
      while (v14);
      v16 = (unsigned __int16)v13 | ((unsigned __int16)v12 << 8);
    }
    v17 = *(unsigned __int16 *)(v11 + a2);
    *(_WORD *)(a1 + 16) = v17;
    return v17 == v16;
  }
  return result;
}

BOOL sub_100B19038(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t i;
  uint64_t j;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  if (a3 >= 252)
  {
    v4 = 0;
    *(_DWORD *)a2 = 536621120;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    do
    {
      *(_DWORD *)(a2 + 13 + v4) = *(_DWORD *)(a1 + 20 + v4);
      v4 += 4;
    }
    while (v4 != 96);
    for (i = 0; i != 96; i += 4)
      *(_DWORD *)(a2 + 109 + i) = *(_DWORD *)(a1 + 116 + i);
    for (j = 0; j != 28; j += 4)
      *(_DWORD *)(a2 + 205 + j) = *(_DWORD *)(a1 + 212 + j);
    v7 = 0;
    *(_DWORD *)(a2 + 233) = *(_DWORD *)(a1 + 240);
    do
    {
      *(_BYTE *)(a2 + 237 + v7) = *(_BYTE *)(a1 + 244 + v7);
      ++v7;
    }
    while (v7 != 13);
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v10 = (v10 + *(unsigned __int8 *)(a2 + v8)) % 0xFF;
      v9 = (v10 + v9) % 0xFF;
      ++v8;
    }
    while (v8 != 250);
    *(_WORD *)(a2 + 250) = v10 | ((_WORD)v9 << 8);
    *a4 = 252;
  }
  return a3 > 251;
}

BOOL sub_100B19148(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v27;
  int v28;
  NSObject *v29;
  _BOOL4 v30;
  const char *v31;
  uint8_t *v32;
  _DWORD v33[2];
  __int16 v34;
  int v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  int v39;

  result = sub_100B16048(a1, a2, a3, a4, 31, 252);
  if (result)
  {
    v8 = 0;
    v9 = (unsigned __int8 *)(a2 + a4);
    v10 = a4 + 13;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v9 + 5);
    do
    {
      *(_DWORD *)(a1 + 20 + v8) = *(_DWORD *)(a2 + v10 + v8);
      v8 += 4;
    }
    while (v8 != 96);
    v11 = 0;
    v12 = -96;
    do
    {
      *(_DWORD *)(a1 + 116 + v11) = *(_DWORD *)(a2 + a4 + 109 + v11);
      v12 -= 4;
      v11 += 4;
    }
    while (v11 != 96);
    v13 = 0;
    v14 = (v10 - v12);
    v15 = a2 + (int)v14;
    v16 = v14 << 32;
    do
    {
      *(_DWORD *)(a1 + 212 + v13) = *(_DWORD *)(v15 + v13);
      v12 -= 4;
      v13 += 4;
      v16 += 0x400000000;
    }
    while (v13 != 28);
    v17 = 0;
    *(_DWORD *)(a1 + 240) = *(_DWORD *)((v16 >> 32) + a2);
    v18 = (a4 + 17 - v12);
    v19 = a2 + (int)v18;
    v20 = v18 << 32;
    v21 = 19 - v12;
    do
    {
      *(_BYTE *)(a1 + 244 + v17) = *(_BYTE *)(v19 + v17);
      LODWORD(v18) = v18 + 1;
      ++v21;
      ++v17;
      v20 += (uint64_t)&_mh_execute_header;
    }
    while (v17 != 13);
    if ((int)v18 - 1 < 0)
    {
      v27 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v24 = -(uint64_t)v18;
      do
      {
        v25 = *v9++;
        v23 = (v23 + v25) % 0xFF;
        v22 = (v23 + v22) % 0xFF;
      }
      while (!__CFADD__(v24++, 1));
      v27 = (unsigned __int16)v23 | ((unsigned __int16)v22 << 8);
    }
    v28 = *(unsigned __int16 *)((v20 >> 32) + a2);
    *(_WORD *)(a1 + 16) = v28;
    if (v21 == 252)
    {
      return v28 == v27;
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v29 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240448;
        v37 = v21;
        v38 = 1026;
        v39 = 252;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
      }
      v30 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v30)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102172628);
        v33[0] = 67240448;
        v33[1] = v21;
        v34 = 1026;
        v35 = 252;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", v33, 14);
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLBinaryLogTypes::NonlinearBiasFit::decode(const uint8_t *, const int, const int)", "%s\n", v31);
        if (v32 != buf)
          free(v32);
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_100B1949C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 59)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0;!");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 41) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 45) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 49) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 60);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 57);
    *(_WORD *)(a2 + 57) = v6 | ((_WORD)v5 << 8);
    *a4 = 59;
  }
  return a3 > 58;
}

BOOL sub_100B1957C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 33, 59);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 37);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(v8 + 41);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(v8 + 45);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 49);
    v9 = a4 + 57;
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(v8 + 53);
    if (a4 < -56)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B19698(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 31)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 572469312;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(a1 + 32);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 29);
    *(_WORD *)(a2 + 29) = v6 | ((_WORD)v5 << 8);
    *a4 = 31;
  }
  return a3 > 30;
}

BOOL sub_100B19738(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 34, 31);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    v9 = a4 + 29;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 21);
    if (a4 < -28)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B19814(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 68)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0D#");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 29) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a2 + 37) = *(_BYTE *)(a1 + 48);
    *(_QWORD *)(a2 + 38) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 46) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 54) = *(_QWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 62) = *(_DWORD *)(a1 + 80);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 66);
    *(_WORD *)(a2 + 66) = v6 | ((_WORD)v5 << 8);
    *a4 = 68;
  }
  return a3 > 67;
}

BOOL sub_100B198E4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 35, 68);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 21);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v8 + 29);
    *(_BYTE *)(a1 + 48) = v8[37] != 0;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v8 + 38);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v8 + 46);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v8 + 54);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v8 + 62);
    v9 = a4 + 66;
    if (a4 < -65)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B199F8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 68)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0D$");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 29) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a2 + 37) = *(_BYTE *)(a1 + 48);
    *(_QWORD *)(a2 + 38) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 46) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 54) = *(_QWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 62) = *(_DWORD *)(a1 + 80);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 66);
    *(_WORD *)(a2 + 66) = v6 | ((_WORD)v5 << 8);
    *a4 = 68;
  }
  return a3 > 67;
}

BOOL sub_100B19AC8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 36, 68);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 21);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v8 + 29);
    *(_BYTE *)(a1 + 48) = v8[37] != 0;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v8 + 38);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v8 + 46);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v8 + 54);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v8 + 62);
    v9 = a4 + 66;
    if (a4 < -65)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B19BDC(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 155)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 647704640;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 29) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 37) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a2 + 45) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 53) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 61) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a2 + 69) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 77) = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a2 + 85) = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 93) = *(_DWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 97) = *(_QWORD *)(a1 + 112);
    *(_DWORD *)(a2 + 105) = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a2 + 109) = *(_DWORD *)(a1 + 124);
    *(_DWORD *)(a2 + 113) = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a2 + 117) = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(a2 + 121) = *(_DWORD *)(a1 + 136);
    *(_QWORD *)(a2 + 125) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 133) = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a2 + 141) = *(_QWORD *)(a1 + 160);
    *(_DWORD *)(a2 + 149) = *(_DWORD *)(a1 + 168);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 153);
    *(_WORD *)(a2 + 153) = v6 | ((_WORD)v5 << 8);
    *a4 = 155;
  }
  return a3 > 154;
}

BOOL sub_100B19D0C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 38, 155);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 21);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v8 + 29);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 + 37);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v8 + 45);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v8 + 53);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v8 + 61);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(v8 + 69);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(v8 + 77);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(v8 + 85);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(v8 + 93);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 + 97);
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(v8 + 105);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(v8 + 109);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(v8 + 113);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(v8 + 117);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(v8 + 121);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(v8 + 125);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(v8 + 133);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(v8 + 141);
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(v8 + 149);
    v9 = a4 + 153;
    if (a4 < -152)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B19E78(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 155)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 664481856;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 29) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 37) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a2 + 45) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 53) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 61) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a2 + 69) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 77) = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a2 + 85) = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 93) = *(_DWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 97) = *(_QWORD *)(a1 + 112);
    *(_DWORD *)(a2 + 105) = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a2 + 109) = *(_DWORD *)(a1 + 124);
    *(_DWORD *)(a2 + 113) = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a2 + 117) = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(a2 + 121) = *(_DWORD *)(a1 + 136);
    *(_QWORD *)(a2 + 125) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 133) = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a2 + 141) = *(_QWORD *)(a1 + 160);
    *(_DWORD *)(a2 + 149) = *(_DWORD *)(a1 + 168);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 153);
    *(_WORD *)(a2 + 153) = v6 | ((_WORD)v5 << 8);
    *a4 = 155;
  }
  return a3 > 154;
}

BOOL sub_100B19FA8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 39, 155);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 21);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v8 + 29);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 + 37);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v8 + 45);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v8 + 53);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v8 + 61);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(v8 + 69);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(v8 + 77);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(v8 + 85);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(v8 + 93);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 + 97);
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(v8 + 105);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(v8 + 109);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(v8 + 113);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(v8 + 117);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(v8 + 121);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(v8 + 125);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(v8 + 133);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(v8 + 141);
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(v8 + 149);
    v9 = a4 + 153;
    if (a4 < -152)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1A114(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 47)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0/(");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_QWORD *)(a2 + 17) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 25) = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 37) = *(_QWORD *)(a1 + 48);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 45);
    *(_WORD *)(a2 + 45) = v6 | ((_WORD)v5 << 8);
    *a4 = 47;
  }
  return a3 > 46;
}

BOOL sub_100B1A1C4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 40, 47);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 17);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 33);
    v9 = a4 + 45;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 + 37);
    if (a4 < -44)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1A2B0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 16)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 688926784;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 18);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 14);
    *(_WORD *)(a2 + 14) = v6 | ((_WORD)v5 << 8);
    *a4 = 16;
  }
  return a3 > 15;
}

BOOL sub_100B1A340(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 41, 16);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    v9 = a4 + 14;
    *(_BYTE *)(a1 + 18) = v8[13] != 0;
    if (a4 < -13)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1A414(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 35)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0#,");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 36);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }
  return a3 > 34;
}

BOOL sub_100B1A4C4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 44, 35);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 25);
    v9 = a4 + 33;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1A5B0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 33)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0!;");
    *(_DWORD *)(a2 + 5) = *(_DWORD *)(a1 + 20);
    *(_BYTE *)(a2 + 9) = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a2 + 10) = *(_BYTE *)(a1 + 25);
    *(_BYTE *)(a2 + 11) = *(_BYTE *)(a1 + 26);
    *(_BYTE *)(a2 + 12) = *(_BYTE *)(a1 + 27);
    *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 29);
    *(_BYTE *)(a2 + 14) = *(_BYTE *)(a1 + 30);
    *(_BYTE *)(a2 + 15) = *(_BYTE *)(a1 + 31);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a2 + 25) = *(_BYTE *)(a1 + 41);
    *(_BYTE *)(a2 + 26) = *(_BYTE *)(a1 + 42);
    *(_BYTE *)(a2 + 27) = *(_BYTE *)(a1 + 43);
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a2 + 29) = *(_BYTE *)(a1 + 45);
    *(_BYTE *)(a2 + 30) = *(_BYTE *)(a1 + 28);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 31);
    *(_WORD *)(a2 + 31) = v6 | ((_WORD)v5 << 8);
    *a4 = 33;
  }
  return a3 > 32;
}

BOOL sub_100B1A6B0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 v8;
  _BOOL4 v9;
  _BOOL8 result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  NSObject *v25;
  _BOOL4 v26;
  const char *v27;
  NSObject *v28;
  _BOOL4 v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  int v36;

  v8 = sub_100B16048(a1, a2, a3, a4, 59, 32);
  v9 = v8;
  result = sub_100B16048(v8, a2, a3, a4, 59, 33);
  if (!v9 && !result)
    return result;
  v11 = a2 + a4;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(v11 + 5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(v11 + 9) != 0;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(v11 + 10) != 0;
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(v11 + 11) != 0;
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(v11 + 12) != 0;
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(v11 + 13) != 0;
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(v11 + 14) != 0;
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(v11 + 15) != 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v11 + 16);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(v11 + 24);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(v11 + 25) != 0;
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(v11 + 26);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(v11 + 27) != 0;
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(v11 + 28) != 0;
  v12 = *(unsigned __int8 *)(v11 + 29);
  v13 = a4 + 30;
  *(_BYTE *)(a1 + 45) = v12 != 0;
  if (result)
  {
    v14 = *(unsigned __int8 *)(a2 + v13);
    LODWORD(v13) = a4 + 31;
    *(_BYTE *)(a1 + 28) = v14 != 0;
  }
  if ((int)v13 < 1)
  {
    v20 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = (unsigned __int8 *)(a2 + a4);
    v18 = v13;
    do
    {
      v19 = *v17++;
      v16 = (v16 + v19) % 0xFF;
      v15 = (v16 + v15) % 0xFF;
      --v18;
    }
    while (v18);
    v20 = (unsigned __int16)v16 | ((unsigned __int16)v15 << 8);
  }
  v21 = *(unsigned __int16 *)(a2 + (int)v13);
  *(_WORD *)(a1 + 16) = v21;
  v22 = v13 + 2;
  if (v9)
  {
    v23 = v22 - a4;
    if (v22 - a4 != 32)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v25 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240448;
        v34 = v23;
        v35 = 1026;
        v36 = 32;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
      }
      v26 = sub_1001BFF7C(115, 0);
      result = 0;
      if (!v26)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      LODWORD(v31) = 67240448;
      HIDWORD(v31) = v23;
      LOWORD(v32) = 1026;
      *(_DWORD *)((char *)&v32 + 2) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v31, 14, v31, v32);
LABEL_32:
      v30 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLBinaryLogTypes::FallConfig::decode(const uint8_t *, const int, const int)", "%s\n", v27);
      if (v30 != buf)
        free(v30);
      return 0;
    }
  }
  if (!result)
    return v21 == v20;
  v24 = v22 - a4;
  if (v22 - a4 == 33)
    return v21 == v20;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102172628);
  v28 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240448;
    v34 = v24;
    v35 = 1026;
    v36 = 33;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
  }
  v29 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v29)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    LODWORD(v31) = 67240448;
    HIDWORD(v31) = v24;
    LOWORD(v32) = 1026;
    *(_DWORD *)((char *)&v32 + 2) = 33;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v31, 14, v31, v32);
    goto LABEL_32;
  }
  return result;
}

BOOL sub_100B1AB68(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 209)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 768684096;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 32);
    *(_WORD *)(a2 + 22) = *(_WORD *)(a1 + 34);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 104);
    *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 108);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 112);
    *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a2 + 108) = *(_DWORD *)(a1 + 124);
    *(_DWORD *)(a2 + 112) = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a2 + 116) = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(a2 + 120) = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a2 + 124) = *(_DWORD *)(a1 + 140);
    *(_DWORD *)(a2 + 128) = *(_DWORD *)(a1 + 144);
    *(_DWORD *)(a2 + 132) = *(_DWORD *)(a1 + 148);
    *(_BYTE *)(a2 + 136) = *(_BYTE *)(a1 + 152);
    *(_BYTE *)(a2 + 137) = *(_BYTE *)(a1 + 153);
    *(_BYTE *)(a2 + 138) = *(_BYTE *)(a1 + 154);
    *(_BYTE *)(a2 + 139) = *(_BYTE *)(a1 + 155);
    *(_BYTE *)(a2 + 140) = *(_BYTE *)(a1 + 156);
    *(_DWORD *)(a2 + 141) = *(_DWORD *)(a1 + 160);
    *(_DWORD *)(a2 + 145) = *(_DWORD *)(a1 + 164);
    *(_DWORD *)(a2 + 149) = *(_DWORD *)(a1 + 168);
    *(_DWORD *)(a2 + 153) = *(_DWORD *)(a1 + 172);
    *(_DWORD *)(a2 + 157) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a2 + 161) = *(_DWORD *)(a1 + 180);
    *(_DWORD *)(a2 + 165) = *(_DWORD *)(a1 + 184);
    *(_BYTE *)(a2 + 169) = *(_BYTE *)(a1 + 188);
    *(_DWORD *)(a2 + 170) = *(_DWORD *)(a1 + 192);
    *(_DWORD *)(a2 + 174) = *(_DWORD *)(a1 + 196);
    *(_DWORD *)(a2 + 178) = *(_DWORD *)(a1 + 200);
    *(_DWORD *)(a2 + 182) = *(_DWORD *)(a1 + 204);
    *(_DWORD *)(a2 + 186) = *(_DWORD *)(a1 + 208);
    *(_BYTE *)(a2 + 190) = *(_BYTE *)(a1 + 212);
    *(_DWORD *)(a2 + 191) = *(_DWORD *)(a1 + 216);
    *(_DWORD *)(a2 + 195) = *(_DWORD *)(a1 + 220);
    *(_DWORD *)(a2 + 199) = *(_DWORD *)(a1 + 224);
    *(_DWORD *)(a2 + 203) = *(_DWORD *)(a1 + 228);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 207);
    *(_WORD *)(a2 + 207) = v6 | ((_WORD)v5 << 8);
    *a4 = 209;
  }
  return a3 > 208;
}

BOOL sub_100B1AD88(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 v8;
  _BOOL8 v9;
  _BOOL8 v10;
  _BOOL8 v11;
  _BOOL8 v12;
  _BOOL4 v13;
  _BOOL8 v14;
  _BOOL4 v15;
  _BOOL8 v16;
  _BOOL8 v17;
  _BOOL8 v18;
  _BOOL8 v19;
  _BOOL8 result;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  _DWORD *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  NSObject *v49;
  _BOOL4 v50;
  const char *v51;
  NSObject *v52;
  _BOOL4 v53;
  NSObject *v54;
  _BOOL4 v55;
  NSObject *v56;
  _BOOL4 v57;
  NSObject *v58;
  _BOOL4 v59;
  NSObject *v60;
  _BOOL4 v61;
  NSObject *v62;
  _BOOL4 v63;
  NSObject *v64;
  _BOOL4 v65;
  NSObject *v66;
  _BOOL4 v67;
  NSObject *v68;
  _BOOL4 v69;
  NSObject *v70;
  _BOOL4 v71;
  uint8_t *v72;
  _BOOL4 v73;
  _BOOL4 v74;
  _BOOL4 v75;
  _BOOL4 v76;
  int v77;
  int v78;
  __int16 v79;
  int v80;
  uint8_t buf[4];
  int v82;
  __int16 v83;
  int v84;

  v8 = sub_100B16048(a1, a2, a3, a4, 45, 98);
  v76 = v8;
  v9 = sub_100B16048(v8, a2, a3, a4, 45, 143);
  v75 = v9;
  v10 = sub_100B16048(v9, a2, a3, a4, 45, 151);
  v74 = v10;
  v11 = sub_100B16048(v10, a2, a3, a4, 45, 159);
  v73 = v11;
  v12 = sub_100B16048(v11, a2, a3, a4, 45, 171);
  v13 = v12;
  v14 = sub_100B16048(v12, a2, a3, a4, 45, 172);
  v15 = v14;
  v16 = sub_100B16048(v14, a2, a3, a4, 45, 188);
  v17 = sub_100B16048(v16, a2, a3, a4, 45, 192);
  v18 = sub_100B16048(v17, a2, a3, a4, 45, 193);
  v19 = sub_100B16048(v18, a2, a3, a4, 45, 201);
  result = sub_100B16048(v19, a2, a3, a4, 45, 209);
  if (!v76 && !v75 && !v74 && !v73 && !v13 && !v15 && !v16 && !v17 && !v18 && !v19 && !result)
    return result;
  v21 = a2 + a4;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v21 + 5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v21 + 13);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(v21 + 21);
  *(_WORD *)(a1 + 34) = *(_WORD *)(v21 + 22);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v21 + 24);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v21 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(v21 + 40);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(v21 + 44);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v21 + 48);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(v21 + 52);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(v21 + 56);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(v21 + 60);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(v21 + 64);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(v21 + 68);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(v21 + 72);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(v21 + 76);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(v21 + 80);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(v21 + 84);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(v21 + 88);
  v22 = a4 + 96;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(v21 + 92);
  if (v75 || v74 || v73 || v13 || v15 || v16 || v17 || v18 || v19 || result)
  {
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v22 + a2);
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(v21 + 104);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(v21 + 108);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(v21 + 112);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(v21 + 116);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(v21 + 120);
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(v21 + 124);
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(v21 + 128);
    *(_DWORD *)(a1 + 148) = *(_DWORD *)(v21 + 132);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a4 + a2 + 136);
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a4 + a2 + 137);
    *(_BYTE *)(a1 + 154) = *(_BYTE *)(a4 + a2 + 138);
    *(_BYTE *)(a1 + 155) = *(_BYTE *)(a4 + a2 + 139);
    LODWORD(v22) = a4 + 141;
    *(_BYTE *)(a1 + 156) = *(_BYTE *)(a4 + a2 + 140);
  }
  if (v74 || v73 || v13 || v15 || v16 || v17 || v18 || v19 || result)
  {
    v23 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 160) = *v23;
    LODWORD(v22) = v22 + 8;
    *(_DWORD *)(a1 + 164) = v23[1];
  }
  if (v73 || v13 || v15 || v16 || v17 || v18 || v19 || result)
  {
    v24 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 168) = *v24;
    LODWORD(v22) = v22 + 8;
    *(_DWORD *)(a1 + 172) = v24[1];
  }
  if (v13 || v15 || v16 || v17 || v18 || v19 || result)
  {
    v25 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 176) = *v25;
    *(_DWORD *)(a1 + 180) = v25[1];
    LODWORD(v22) = v22 + 12;
    *(_DWORD *)(a1 + 184) = v25[2];
  }
  if (v15 || v16 || v17 || v18 || v19 || result)
  {
    *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + (int)v22);
    LODWORD(v22) = v22 + 1;
  }
  if (v16 || v17 || v18 || v19 || result)
  {
    v26 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 192) = *v26;
    *(_DWORD *)(a1 + 196) = v26[1];
    *(_DWORD *)(a1 + 200) = v26[2];
    LODWORD(v22) = v22 + 16;
    *(_DWORD *)(a1 + 204) = v26[3];
  }
  if (v17 || v18 || v19 || result)
  {
    v27 = *(_DWORD *)(a2 + (int)v22);
    LODWORD(v22) = v22 + 4;
    *(_DWORD *)(a1 + 208) = v27;
  }
  if (v18 || v19 || result)
  {
    *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + (int)v22);
    LODWORD(v22) = v22 + 1;
  }
  if (v19 || result)
  {
    v28 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 216) = *v28;
    LODWORD(v22) = v22 + 8;
    *(_DWORD *)(a1 + 220) = v28[1];
  }
  if (result)
  {
    v29 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 224) = *v29;
    LODWORD(v22) = v22 + 8;
    *(_DWORD *)(a1 + 228) = v29[1];
  }
  if ((int)v22 < 1)
  {
    v35 = 0;
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v32 = (unsigned __int8 *)(a2 + a4);
    v33 = v22;
    do
    {
      v34 = *v32++;
      v31 = (v31 + v34) % 0xFF;
      v30 = (v31 + v30) % 0xFF;
      --v33;
    }
    while (v33);
    v35 = (unsigned __int16)v31 | ((unsigned __int16)v30 << 8);
  }
  v36 = *(unsigned __int16 *)(a2 + (int)v22);
  *(_WORD *)(a1 + 16) = v36;
  v37 = v22 + 2;
  if (v76 && (v38 = v37 - a4, v37 - a4 != 98))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    v49 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v82 = v38;
      v83 = 1026;
      v84 = 98;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    v50 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v50)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v77 = 67240448;
      v78 = v38;
      v79 = 1026;
      v80 = 98;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v77, 14);
      goto LABEL_149;
    }
  }
  else if (v75 && (v39 = v37 - a4, v37 - a4 != 143))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    v52 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v82 = v39;
      v83 = 1026;
      v84 = 143;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    v53 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v53)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v77 = 67240448;
      v78 = v39;
      v79 = 1026;
      v80 = 143;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v77, 14);
      goto LABEL_149;
    }
  }
  else if (v74 && (v40 = v37 - a4, v37 - a4 != 151))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    v54 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v82 = v40;
      v83 = 1026;
      v84 = 151;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    v55 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v55)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v77 = 67240448;
      v78 = v40;
      v79 = 1026;
      v80 = 151;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v77, 14);
      goto LABEL_149;
    }
  }
  else if (v73 && (v41 = v37 - a4, v37 - a4 != 159))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    v56 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v82 = v41;
      v83 = 1026;
      v84 = 159;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    v57 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v57)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v77 = 67240448;
      v78 = v41;
      v79 = 1026;
      v80 = 159;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v77, 14);
      goto LABEL_149;
    }
  }
  else if (v13 && (v42 = v37 - a4, v37 - a4 != 171))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    v58 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v82 = v42;
      v83 = 1026;
      v84 = 171;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    v59 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v59)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v77 = 67240448;
      v78 = v42;
      v79 = 1026;
      v80 = 171;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v77, 14);
      goto LABEL_149;
    }
  }
  else if (v15 && (v43 = v37 - a4, v37 - a4 != 172))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    v60 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v82 = v43;
      v83 = 1026;
      v84 = 172;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    v61 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v61)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v77 = 67240448;
      v78 = v43;
      v79 = 1026;
      v80 = 172;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v77, 14);
      goto LABEL_149;
    }
  }
  else if (v16 && (v44 = v37 - a4, v37 - a4 != 188))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    v62 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v82 = v44;
      v83 = 1026;
      v84 = 188;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    v63 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v63)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v77 = 67240448;
      v78 = v44;
      v79 = 1026;
      v80 = 188;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v77, 14);
      goto LABEL_149;
    }
  }
  else if (v17 && (v45 = v37 - a4, v37 - a4 != 192))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    v64 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v82 = v45;
      v83 = 1026;
      v84 = 192;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    v65 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v65)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v77 = 67240448;
      v78 = v45;
      v79 = 1026;
      v80 = 192;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v77, 14);
      goto LABEL_149;
    }
  }
  else if (v18 && (v46 = v37 - a4, v37 - a4 != 193))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    v66 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v82 = v46;
      v83 = 1026;
      v84 = 193;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    v67 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v67)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v77 = 67240448;
      v78 = v46;
      v79 = 1026;
      v80 = 193;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v77, 14);
      goto LABEL_149;
    }
  }
  else if (v19 && (v47 = v37 - a4, v37 - a4 != 201))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    v68 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v82 = v47;
      v83 = 1026;
      v84 = 201;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    v69 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v69)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v77 = 67240448;
      v78 = v47;
      v79 = 1026;
      v80 = 201;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v77, 14);
      goto LABEL_149;
    }
  }
  else
  {
    if (!result)
      return v36 == v35;
    v48 = v37 - a4;
    if (v37 - a4 == 209)
      return v36 == v35;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    v70 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v82 = v48;
      v83 = 1026;
      v84 = 209;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    v71 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v71)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v77 = 67240448;
      v78 = v48;
      v79 = 1026;
      v80 = 209;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v77, 14);
LABEL_149:
      v72 = (uint8_t *)v51;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLBinaryLogTypes::FallStats::decode(const uint8_t *, const int, const int)", "%s\n", v51);
      if (v72 != buf)
        free(v72);
      return 0;
    }
  }
  return result;
}

BOOL sub_100B1BFB8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 53)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@056");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 29) = *(_QWORD *)(a1 + 48);
    *(_BYTE *)(a2 + 37) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a2 + 38) = *(_BYTE *)(a1 + 57);
    *(_BYTE *)(a2 + 39) = *(_BYTE *)(a1 + 58);
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 59);
    *(_QWORD *)(a2 + 41) = *(_QWORD *)(a1 + 64);
    *(_BYTE *)(a2 + 49) = *(_BYTE *)(a1 + 72);
    *(_BYTE *)(a2 + 50) = *(_BYTE *)(a1 + 73);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 51);
    *(_WORD *)(a2 + 51) = v6 | ((_WORD)v5 << 8);
    *a4 = 53;
  }
  return a3 > 52;
}

BOOL sub_100B1C090(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 v8;
  _BOOL4 v9;
  _BOOL8 v10;
  _BOOL4 v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  NSObject *v27;
  _BOOL4 v28;
  const char *v29;
  NSObject *v30;
  _BOOL4 v31;
  NSObject *v32;
  _BOOL4 v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  int v40;

  v8 = sub_100B16048(a1, a2, a3, a4, 54, 43);
  v9 = v8;
  v10 = sub_100B16048(v8, a2, a3, a4, 54, 52);
  v11 = v10;
  result = sub_100B16048(v10, a2, a3, a4, 54, 53);
  if (!v9 && !v11 && !result)
    return result;
  v13 = a2 + a4;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v13 + 5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v13 + 13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v13 + 21);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v13 + 29);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(v13 + 37);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(v13 + 38);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(v13 + 39);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(v13 + 40);
  v14 = a4 + 41;
  if (v11 || result)
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v14 + a2);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a4 + a2 + 49);
    LODWORD(v14) = a4 + 50;
  }
  if (result)
  {
    v15 = *(unsigned __int8 *)(a2 + (int)v14);
    LODWORD(v14) = v14 + 1;
    *(_BYTE *)(a1 + 73) = v15 != 0;
  }
  if ((int)v14 < 1)
  {
    v21 = 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = (unsigned __int8 *)(a2 + a4);
    v19 = v14;
    do
    {
      v20 = *v18++;
      v17 = (v17 + v20) % 0xFF;
      v16 = (v17 + v16) % 0xFF;
      --v19;
    }
    while (v19);
    v21 = (unsigned __int16)v17 | ((unsigned __int16)v16 << 8);
  }
  v22 = *(unsigned __int16 *)(a2 + (int)v14);
  *(_WORD *)(a1 + 16) = v22;
  v23 = v14 + 2;
  if (v9)
  {
    v24 = v23 - a4;
    if (v23 - a4 != 43)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v27 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240448;
        v38 = v24;
        v39 = 1026;
        v40 = 43;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
      }
      v28 = sub_1001BFF7C(115, 0);
      result = 0;
      if (!v28)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      LODWORD(v35) = 67240448;
      HIDWORD(v35) = v24;
      LOWORD(v36) = 1026;
      *(_DWORD *)((char *)&v36 + 2) = 43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v35, 14, v35, v36);
LABEL_45:
      v34 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLBinaryLogTypes::FallState::decode(const uint8_t *, const int, const int)", "%s\n", v29);
      if (v34 != buf)
        free(v34);
      return 0;
    }
  }
  if (v11)
  {
    v25 = v23 - a4;
    if (v23 - a4 != 52)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v30 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240448;
        v38 = v25;
        v39 = 1026;
        v40 = 52;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
      }
      v31 = sub_1001BFF7C(115, 0);
      result = 0;
      if (!v31)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      LODWORD(v35) = 67240448;
      HIDWORD(v35) = v25;
      LOWORD(v36) = 1026;
      *(_DWORD *)((char *)&v36 + 2) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v35, 14, v35, v36);
      goto LABEL_45;
    }
  }
  if (!result)
    return v22 == v21;
  v26 = v23 - a4;
  if (v23 - a4 == 53)
    return v22 == v21;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102172628);
  v32 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240448;
    v38 = v26;
    v39 = 1026;
    v40 = 53;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
  }
  v33 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v33)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    LODWORD(v35) = 67240448;
    HIDWORD(v35) = v26;
    LOWORD(v36) = 1026;
    *(_DWORD *)((char *)&v36 + 2) = 53;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v35, 14, v35, v36);
    goto LABEL_45;
  }
  return result;
}

BOOL sub_100B1C628(_QWORD *a1, uint64_t a2, int a3, _DWORD *a4)
{
  return sub_100B1C630(a1, a2, a3, a4, 58);
}

BOOL sub_100B1C630(_QWORD *a1, uint64_t a2, int a3, _DWORD *a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  if (a3 >= 43)
  {
    v5 = 0;
    *(_WORD *)a2 = 12352;
    *(_BYTE *)(a2 + 2) = 43;
    *(_BYTE *)(a2 + 3) = a5;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = a1[1];
    *(_QWORD *)(a2 + 13) = a1[3];
    *(_QWORD *)(a2 + 21) = a1[4];
    do
    {
      *(_DWORD *)(a2 + 29 + v5) = *(_DWORD *)((char *)a1 + v5 + 40);
      v5 += 4;
    }
    while (v5 != 12);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v8 = (v8 + *(unsigned __int8 *)(a2 + v6)) % 0xFF;
      v7 = (v8 + v7) % 0xFF;
      ++v6;
    }
    while (v6 != 41);
    *(_WORD *)(a2 + 41) = v8 | ((_WORD)v7 << 8);
    *a4 = 43;
  }
  return a3 > 42;
}

BOOL sub_100B1C6F0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_100B1C6F8(a1, a2, a3, a4, 58);
}

BOOL sub_100B1C6F8(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  _BOOL8 result;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  result = sub_100B16048(a1, a2, a3, a4, a5, 43);
  if (result)
  {
    v9 = 0;
    v10 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v10 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v10 + 13);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 + 21);
    v11 = (a4 + 29);
    v12 = a2 + (int)v11;
    v13 = v11 << 32;
    do
    {
      *(_DWORD *)(a1 + 40 + v9) = *(_DWORD *)(v12 + v9);
      v9 += 4;
      v13 += 0x400000000;
    }
    while (v9 != 12);
    if (a4 + 37 < -3)
    {
      v18 = 0;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = (a4 + 41);
      do
      {
        v17 = *v10++;
        v15 = (v15 + v17) % 0xFF;
        v14 = (v15 + v14) % 0xFF;
        --v16;
      }
      while (v16);
      v18 = (unsigned __int16)v15 | ((unsigned __int16)v14 << 8);
    }
    v19 = *(unsigned __int16 *)((v13 >> 32) + a2);
    *(_WORD *)(a1 + 16) = v19;
    return v19 == v18;
  }
  return result;
}

BOOL sub_100B1C9C8(_QWORD *a1, uint64_t a2, int a3, _DWORD *a4)
{
  return sub_100B1C630(a1, a2, a3, a4, 57);
}

BOOL sub_100B1C9D0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_100B1C6F8(a1, a2, a3, a4, 57);
}

BOOL sub_100B1C9D8(_QWORD *a1, uint64_t a2, int a3, _DWORD *a4)
{
  return sub_100B1C9E0(a1, a2, a3, a4, 60);
}

BOOL sub_100B1C9E0(_QWORD *a1, uint64_t a2, int a3, _DWORD *a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  if (a3 >= 47)
  {
    v5 = 0;
    *(_WORD *)a2 = 12352;
    *(_BYTE *)(a2 + 2) = 47;
    *(_BYTE *)(a2 + 3) = a5;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = a1[1];
    *(_QWORD *)(a2 + 13) = a1[3];
    *(_QWORD *)(a2 + 21) = a1[4];
    do
    {
      *(_DWORD *)(a2 + 29 + v5) = *(_DWORD *)((char *)a1 + v5 + 40);
      v5 += 4;
    }
    while (v5 != 16);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v8 = (v8 + *(unsigned __int8 *)(a2 + v6)) % 0xFF;
      v7 = (v8 + v7) % 0xFF;
      ++v6;
    }
    while (v6 != 45);
    *(_WORD *)(a2 + 45) = v8 | ((_WORD)v7 << 8);
    *a4 = 47;
  }
  return a3 > 46;
}

BOOL sub_100B1CAA0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_100B1CAA8(a1, a2, a3, a4, 60);
}

BOOL sub_100B1CAA8(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  _BOOL8 result;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  result = sub_100B16048(a1, a2, a3, a4, a5, 47);
  if (result)
  {
    v9 = 0;
    v10 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v10 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v10 + 13);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 + 21);
    v11 = (a4 + 29);
    v12 = a2 + (int)v11;
    v13 = v11 << 32;
    do
    {
      *(_DWORD *)(a1 + 40 + v9) = *(_DWORD *)(v12 + v9);
      v9 += 4;
      v13 += 0x400000000;
    }
    while (v9 != 16);
    if (a4 + 41 < -3)
    {
      v18 = 0;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = (a4 + 45);
      do
      {
        v17 = *v10++;
        v15 = (v15 + v17) % 0xFF;
        v14 = (v15 + v14) % 0xFF;
        --v16;
      }
      while (v16);
      v18 = (unsigned __int16)v15 | ((unsigned __int16)v14 << 8);
    }
    v19 = *(unsigned __int16 *)((v13 >> 32) + a2);
    *(_WORD *)(a1 + 16) = v19;
    return v19 == v18;
  }
  return result;
}

BOOL sub_100B1CD78(_QWORD *a1, uint64_t a2, int a3, _DWORD *a4)
{
  return sub_100B1C630(a1, a2, a3, a4, 123);
}

BOOL sub_100B1CD80(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_100B1C6F8(a1, a2, a3, a4, 123);
}

BOOL sub_100B1CD88(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 86)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0V>");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 29) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 37) = *(_QWORD *)(a1 + 48);
    *(_WORD *)(a2 + 45) = *(_WORD *)(a1 + 56);
    *(_DWORD *)(a2 + 47) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 51) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 55) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 59) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 63) = *(_DWORD *)(a1 + 76);
    *(_BYTE *)(a2 + 67) = *(_BYTE *)(a1 + 81);
    *(_QWORD *)(a2 + 68) = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a2 + 76) = *(_QWORD *)(a1 + 96);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 84);
    *(_WORD *)(a2 + 84) = v6 | ((_WORD)v5 << 8);
    *a4 = 86;
  }
  return a3 > 85;
}

BOOL sub_100B1CE78(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 v8;
  _BOOL4 v9;
  _BOOL8 v10;
  _BOOL4 v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  NSObject *v26;
  _BOOL4 v27;
  const char *v28;
  NSObject *v29;
  _BOOL4 v30;
  NSObject *v31;
  _BOOL4 v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  int v39;

  v8 = sub_100B16048(a1, a2, a3, a4, 62, 69);
  v9 = v8;
  v10 = sub_100B16048(v8, a2, a3, a4, 62, 70);
  v11 = v10;
  result = sub_100B16048(v10, a2, a3, a4, 62, 86);
  if (!v9 && !v11 && !result)
    return result;
  v13 = a2 + a4;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v13 + 5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v13 + 13);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 + 21);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v13 + 29);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v13 + 37);
  *(_WORD *)(a1 + 56) = *(_WORD *)(v13 + 45);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(v13 + 47);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v13 + 51);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(v13 + 55);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(v13 + 59);
  v14 = a4 + 67;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(v13 + 63);
  if (v9)
  {
    *(_BYTE *)(a1 + 80) = 1;
  }
  else if (v11)
  {
    *(_BYTE *)(a1 + 80) = 2;
    *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + v14);
    LODWORD(v14) = a4 + 68;
  }
  else if (result)
  {
    *(_BYTE *)(a1 + 80) = 3;
    *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + v14);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(v13 + 68);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(v13 + 76);
    LODWORD(v14) = a4 + 84;
  }
  if ((int)v14 < 1)
  {
    v20 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = (unsigned __int8 *)(a2 + a4);
    v18 = v14;
    do
    {
      v19 = *v17++;
      v16 = (v16 + v19) % 0xFF;
      v15 = (v16 + v15) % 0xFF;
      --v18;
    }
    while (v18);
    v20 = (unsigned __int16)v16 | ((unsigned __int16)v15 << 8);
  }
  v21 = *(unsigned __int16 *)(a2 + (int)v14);
  *(_WORD *)(a1 + 16) = v21;
  v22 = v14 + 2;
  if (v9)
  {
    v23 = v22 - a4;
    if (v22 - a4 != 69)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v26 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240448;
        v37 = v23;
        v38 = 1026;
        v39 = 69;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
      }
      v27 = sub_1001BFF7C(115, 0);
      result = 0;
      if (!v27)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      LODWORD(v34) = 67240448;
      HIDWORD(v34) = v23;
      LOWORD(v35) = 1026;
      *(_DWORD *)((char *)&v35 + 2) = 69;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v34, 14, v34, v35);
LABEL_47:
      v33 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLBinaryLogTypes::FallFalsePositiveSuppressionFeatures::decode(const uint8_t *, const int, const int)", "%s\n", v28);
      if (v33 != buf)
        free(v33);
      return 0;
    }
  }
  if (v11)
  {
    v24 = v22 - a4;
    if (v22 - a4 != 70)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      v29 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240448;
        v37 = v24;
        v38 = 1026;
        v39 = 70;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
      }
      v30 = sub_1001BFF7C(115, 0);
      result = 0;
      if (!v30)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102172628);
      LODWORD(v34) = 67240448;
      HIDWORD(v34) = v24;
      LOWORD(v35) = 1026;
      *(_DWORD *)((char *)&v35 + 2) = 70;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v34, 14, v34, v35);
      goto LABEL_47;
    }
  }
  if (!result)
    return v21 == v20;
  v25 = v22 - a4;
  if (v22 - a4 == 86)
    return v21 == v20;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102172628);
  v31 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240448;
    v37 = v25;
    v38 = 1026;
    v39 = 86;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
  }
  v32 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v32)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102172628);
    LODWORD(v34) = 67240448;
    HIDWORD(v34) = v25;
    LOWORD(v35) = 1026;
    *(_DWORD *)((char *)&v35 + 2) = 86;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "i-index(%{public}d)!=kSize(%{public}d)", &v34, 14, v34, v35);
    goto LABEL_47;
  }
  return result;
}

BOOL sub_100B1D440(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 27)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0\x1B.");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a2 + 22) = *(_BYTE *)(a1 + 33);
    *(_BYTE *)(a2 + 23) = *(_BYTE *)(a1 + 34);
    *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 35);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }
  return a3 > 26;
}

BOOL sub_100B1D4F0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  __int16 v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;

  result = sub_100B16048(a1, a2, a3, a4, 46, 27);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    v9 = *(_WORD *)(v8 + 21);
    *(_BYTE *)(a1 + 34) = v8[23];
    *(_BYTE *)(a1 + 35) = v8[24];
    v10 = a4 + 25;
    *(_WORD *)(a1 + 32) = v9;
    if (a4 < -24)
    {
      v15 = 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = v10;
      do
      {
        v14 = *v8++;
        v12 = (v12 + v14) % 0xFF;
        v11 = (v12 + v11) % 0xFF;
        --v13;
      }
      while (v13);
      v15 = (unsigned __int16)v12 | ((unsigned __int16)v11 << 8);
    }
    v16 = *(unsigned __int16 *)(v10 + a2);
    *(_WORD *)(a1 + 16) = v16;
    return v16 == v15;
  }
  return result;
}

BOOL sub_100B1D5D4(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 16)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 789590080;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 18);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 14);
    *(_WORD *)(a2 + 14) = v6 | ((_WORD)v5 << 8);
    *a4 = 16;
  }
  return a3 > 15;
}

BOOL sub_100B1D664(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 47, 16);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    v9 = a4 + 14;
    *(_BYTE *)(a1 + 18) = v8[13] == 1;
    if (a4 < -13)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1D738(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 47)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@0/0");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_QWORD *)(a2 + 17) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 25) = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 37) = *(_QWORD *)(a1 + 48);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 45);
    *(_WORD *)(a2 + 45) = v6 | ((_WORD)v5 << 8);
    *a4 = 47;
  }
  return a3 > 46;
}

BOOL sub_100B1D7E8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 48, 47);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 17);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 33);
    v9 = a4 + 45;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 + 37);
    if (a4 < -44)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1D8D4(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 17)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 823210048;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 18);
    *(_BYTE *)(a2 + 14) = *(_BYTE *)(a1 + 19);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 15);
    *(_WORD *)(a2 + 15) = v6 | ((_WORD)v5 << 8);
    *a4 = 17;
  }
  return a3 > 16;
}

BOOL sub_100B1D96C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 49, 17);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_BYTE *)(a1 + 18) = v8[13];
    *(_BYTE *)(a1 + 19) = v8[14];
    v9 = a4 + 15;
    if (a4 < -14)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1DA40(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 16)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 839921728;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 18);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 14);
    *(_WORD *)(a2 + 14) = v6 | ((_WORD)v5 << 8);
    *a4 = 16;
  }
  return a3 > 15;
}

BOOL sub_100B1DAD0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 50, 16);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    v9 = a4 + 14;
    *(_BYTE *)(a1 + 18) = v8[13] == 1;
    if (a4 < -13)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1DBA4(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 56)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    strcpy((char *)a2, "@083");
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 29) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 37) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a2 + 45) = *(_QWORD *)(a1 + 56);
    *(_BYTE *)(a2 + 53) = *(_BYTE *)(a1 + 64);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 54);
    *(_WORD *)(a2 + 54) = v6 | ((_WORD)v5 << 8);
    *a4 = 56;
  }
  return a3 > 55;
}

BOOL sub_100B1DC5C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 51, 56);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 21);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v8 + 29);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 + 37);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v8 + 45);
    *(_BYTE *)(a1 + 64) = v8[53];
    v9 = a4 + 54;
    if (a4 < -53)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1DD50(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 127)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 880750656;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 29) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 37) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a2 + 45) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 53) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 61) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a2 + 69) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 77) = *(_QWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 85) = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 89) = *(_DWORD *)(a1 + 100);
    *(_QWORD *)(a2 + 93) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 101) = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a2 + 109) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a2 + 117) = *(_QWORD *)(a1 + 128);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 125);
    *(_WORD *)(a2 + 125) = v6 | ((_WORD)v5 << 8);
    *a4 = 127;
  }
  return a3 > 126;
}

BOOL sub_100B1DE50(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 52, 127);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 21);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v8 + 29);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 + 37);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v8 + 45);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v8 + 53);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v8 + 61);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(v8 + 69);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(v8 + 77);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 85);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(v8 + 89);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(v8 + 93);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 + 101);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(v8 + 109);
    v9 = a4 + 125;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(v8 + 117);
    if (a4 < -124)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B1DF8C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 143)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_DWORD *)a2 = 1066348608;
    *(_BYTE *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 29) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 37) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a2 + 45) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 53) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 61) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a2 + 69) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 77) = *(_QWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 85) = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 89) = *(_DWORD *)(a1 + 100);
    *(_QWORD *)(a2 + 93) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 101) = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a2 + 109) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a2 + 117) = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 125) = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a2 + 133) = *(_QWORD *)(a1 + 144);
    do
    {
      v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 141);
    *(_WORD *)(a2 + 141) = v6 | ((_WORD)v5 << 8);
    *a4 = 143;
  }
  return a3 > 142;
}

BOOL sub_100B1E09C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = sub_100B16048(a1, a2, a3, a4, 63, 143);
  if (result)
  {
    v8 = (unsigned __int8 *)(a2 + a4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + 5);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + 13);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 21);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v8 + 29);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 + 37);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v8 + 45);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v8 + 53);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v8 + 61);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(v8 + 69);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(v8 + 77);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 85);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(v8 + 89);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(v8 + 93);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 + 101);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(v8 + 109);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(v8 + 117);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(v8 + 125);
    v9 = a4 + 141;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(v8 + 133);
    if (a4 < -140)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v9;
      do
      {
        v13 = *v8++;
        v11 = (v11 + v13) % 0xFF;
        v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

std::string *sub_100B1E1E8(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,Accelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20lf", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1E280(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "AccelGps,Time,%.4lf,timestamp,%.4f,x,%.12g,y,%.12g,z,%.12g", *(double *)(a1 + 8), *(double *)(a1 + 24), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1E318(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,Gyro,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,subType,%d,sampleNum%%3,%d,triggerEnabled,%d,triggerOn,%d", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(double *)(a1 + 24), *(_DWORD *)(a1 + 44), *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1E3C8(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "GyroGps,Time,%.4lf,timestamp,%.4f,x,%.12g,y,%.12g,z,%.12g", *(double *)(a1 + 8), *(double *)(a1 + 24), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1E460(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,GyroTemperature,temperature,%f", *(double *)(a1 + 8), *(float *)(a1 + 20));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1E4E0(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,GyroBias,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,variance.x,%20.20f,variance.y,%20.20f,variance.z,%20.20f,doingBiasEstimation,%d", *(double *)(a1 + 8), *(float *)(a1 + 20), *(float *)(a1 + 24), *(float *)(a1 + 28), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(char *)(a1 + 44));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1E590(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,GyroBiasFit,slope.x,%20.20f,slope.y,%20.20f,slope.z,%20.20f,intercept.x,%20.20f,intercept.y,%20.20f,intercept.z,%20.20f, lastMiniCal,%20.20f", *(double *)(a1 + 8), *(float *)(a1 + 20), *(float *)(a1 + 24), *(float *)(a1 + 28), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), fmaxf(*(float *)(a1 + 44), 0.0));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1E648(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,GyroDt,dt,%20.20f", *(double *)(a1 + 8), *(float *)(a1 + 20));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1E6C8(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,Magnetometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20lf", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1E760(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,Compass,magneticHeading,%20.20f,trueHeading,%20.20f,accuracy,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,level,%d,magnitude,%20.20f,inclination,%20.20f,horizontal,%20.20f,timestamp,%20.20f", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48), *(float *)(a1 + 52), *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64), *(char *)(a1 + 68), *(float *)(a1 + 72), *(float *)(a1 + 76), *(float *)(a1 + 80),
    *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1E848(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,CompassAlignment,compassJustAlignedToStableField,%d,timestamp,%20.20f", *(double *)(a1 + 8), *(char *)(a1 + 32), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1E8D0(uint64_t a1, std::string *a2)
{
  unsigned int v3;
  char __str[1024];

  v3 = *(unsigned __int16 *)(a1 + 112);
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,DeviceMotion,q.x,%20.20f,q.y,%20.20f,q.z,%20.20f,q.w,%20.20f,userAccel.x,%20.20f,userAccel.y,%20.20f,userAccel.z,%20.20f,rotationRate.x,%20.20f,rotationRate.y,%20.20f,rotationRate.z,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,magneticFieldCalibrationLevel,%d,heading,%.3f,trueheading,%.3f,accuracy,%.3f,variant,%d,mode,%d,clientID,%#02x,biasEstimation,%d,yawCorrection,%d,gravityCorrection,%d,courseCorrection,%d,visualLocalizationCorrection,%d,initialized,%d,accelSaturated,%d,gyroSaturated,%d,compassCalibration,%d,gyroCalibration,%d,course,%d,gmm,%d,north,%d,visualLocalization,%d,timestamp,%20.20f", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48), *(float *)(a1 + 52), *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64), *(float *)(a1 + 68),
    *(float *)(a1 + 72),
    *(float *)(a1 + 76),
    *(float *)(a1 + 80),
    *(char *)(a1 + 84),
    *(float *)(a1 + 88),
    *(float *)(a1 + 92),
    *(float *)(a1 + 96),
    *(_DWORD *)(a1 + 100),
    *(_DWORD *)(a1 + 104),
    *(_DWORD *)(a1 + 108),
    (v3 >> 4) & 1,
    (v3 >> 3) & 1,
    (v3 >> 2) & 1,
    (v3 >> 5) & 1,
    (v3 >> 6) & 1,
    (v3 >> 8) & 1,
    (v3 >> 1) & 1,
    v3 & 1,
    (v3 >> 10) & 1,
    (v3 >> 9) & 1,
    (v3 >> 11) & 1,
    (v3 >> 12) & 1,
    (v3 >> 13) & 1,
    (v3 >> 14) & 1,
    *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1EA44(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,MotionStateUpdate,motionStateUpdate:Motion,%d,conf,%d,Mounted,%d,MountedConf,%d,exitState,%d,turn,%d,isVehicular,%d,isMoving,%d,seq,%d,startTime,%f,timestamp,%f,startTimeUL,%llu,nowUL,%llu -- caltype,%d,vm,%f,standing,%d,machinefrequency,%f,strokefrequency,%f,strokeAmplitude,%f,strokepower,%f", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25), *(unsigned __int8 *)(a1 + 26), *(unsigned __int8 *)(a1 + 27), *(unsigned __int8 *)(a1 + 28), *(unsigned __int8 *)(a1 + 29), *(unsigned __int8 *)(a1 + 30), *(_DWORD *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64),
    *(unsigned __int8 *)(a1 + 72),
    *(float *)(a1 + 76),
    *(unsigned __int8 *)(a1 + 80),
    *(float *)(a1 + 84),
    *(float *)(a1 + 88),
    *(float *)(a1 + 92),
    *(float *)(a1 + 96));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1EB40(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,Pressure,pressure,%20.20f,temperature,%20.20f,timestamp,%20.20lf", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1EBCC(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,PressureFilteredNoTemperature,pressure,%20.20f,timestamp,%llu", *(double *)(a1 + 8), *(float *)(a1 + 32), *(_QWORD *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1EC54(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,Prox,DetectionMask,%d,timestamp,%20.20lf", *(double *)(a1 + 8), *(_DWORD *)(a1 + 32), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1ECDC(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,TouchOscarEmu,touchDetected,%d,timestamp,%20.20lf", *(double *)(a1 + 8), *(unsigned __int8 *)(a1 + 32), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1ED64(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,CompassCalibration,bias.x,%.8f,.y,%.8f,.z,%.8f,scale.x,%.8f,.y,%.8f,.z,%.8f,quality,%.8f,cost,%.8f,coverage,%.8f,earthDiffRatio,%.8f,pose.x,%.8f,.y,%.8f,.z,%.8f,level,%d,timestamp,%20.20f", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48), *(float *)(a1 + 52), *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64), *(float *)(a1 + 68), *(float *)(a1 + 72), *(float *)(a1 + 76), *(float *)(a1 + 80), *(char *)(a1 + 84),
    *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1EE54(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,BTConnection,startTime,%.3lf,endTime,%.3lf,connected,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1EEDC(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,SessionOverride,sessionType,%d,timestamp,%.3lf", *(double *)(a1 + 8), *(_DWORD *)(a1 + 32), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1EF64(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,LocationOscarEmu,locationType,%d,speed,%.3lf,speedAccuracy,%.3lf,latitude,%.7lf,longitude,%.7lf,horizontalAccuracy,%.3lf,altitude,%.3lf,verticalAccuracy,%.3lf,course,%.3lf,courseAccuracy,%.3lf,confidence,%d,locationLoggingEnabled,%d,timestamp,%.3lf", *(double *)(a1 + 8), *(unsigned __int8 *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(unsigned __int8 *)(a1 + 112), *(unsigned __int8 *)(a1 + 113), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1F018(uint64_t a1, std::string *a2)
{
  char __str[1024];

  switch(*(_BYTE *)(a1 + 32))
  {
    case 4:
      snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.lf,Type,MotionHint,event,%d,eventDescription,%s,value,%d,valueDescription,%s\n");
      break;
    default:
      snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.lf,Type,MotionHint,event,%d,eventDescription,%s,value,%d\n");
      break;
  }
  return std::string::assign(a2, __str);
}

std::string *sub_100B1F16C(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,CLDeviceMotion,q.x,%20.20f,q.y,%20.20f,q.z,%20.20f,q.w,%20.20f,userAccel.x,%20.20f,userAccel.y,%20.20f,userAccel.z,%20.20f,rotationRate.x,%20.20f,rotationRate.y,%20.20f,rotationRate.z,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,magneticFieldCalibrationLevel,%d,timestamp,%20.20f,doingBiasEstimation,%d,doingYawCorrection,%d,type,%d", *(double *)(a1 + 8), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(float *)(a1 + 64), *(float *)(a1 + 68), *(float *)(a1 + 72), *(float *)(a1 + 76), *(float *)(a1 + 80), *(float *)(a1 + 84), *(float *)(a1 + 88), *(float *)(a1 + 92),
    *(float *)(a1 + 96),
    *(char *)(a1 + 100),
    *(double *)(a1 + 24),
    *(unsigned __int8 *)(a1 + 101),
    *(unsigned __int8 *)(a1 + 102),
    *(unsigned __int8 *)(a1 + 103));
  return std::string::assign(a2, __str);
}

_QWORD *sub_100B1F260@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  float *v4;
  unint64_t v5;
  unint64_t v6;
  char __s[4096];

  strcpy(__s, "fits,");
  v4 = (float *)(a1 + 124);
  v5 = -3;
  v6 = 5;
  while (1)
  {
    v6 += snprintf(&__s[v6], 4096 - v6, "slope.x,%f,slope.y,%f,slope.z,%f,intercept.x,%f,intercept.y,%f,intercept.z,%f,", *(v4 - 26), *(v4 - 25), *(v4 - 24), *(v4 - 2), *(v4 - 1), *v4);
    if (v6 > 0xFFF)
      break;
    v5 += 3;
    v4 += 3;
    if (v5 > 0x14)
    {
      snprintf(&__s[v6], 4096 - v6, "temperatures,%f,%f,%f,%f,%f,%f,%f,overlap,%f,error,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d", *(float *)(a1 + 212), *(float *)(a1 + 216), *(float *)(a1 + 220), *(float *)(a1 + 224), *(float *)(a1 + 228), *(float *)(a1 + 232), *(float *)(a1 + 236), *(float *)(a1 + 240), *(unsigned __int8 *)(a1 + 244), *(unsigned __int8 *)(a1 + 245), *(unsigned __int8 *)(a1 + 246), *(unsigned __int8 *)(a1 + 247), *(unsigned __int8 *)(a1 + 248), *(unsigned __int8 *)(a1 + 249), *(unsigned __int8 *)(a1 + 250), *(unsigned __int8 *)(a1 + 251),
        *(unsigned __int8 *)(a1 + 252),
        *(unsigned __int8 *)(a1 + 253),
        *(unsigned __int8 *)(a1 + 254),
        *(unsigned __int8 *)(a1 + 255),
        *(unsigned __int8 *)(a1 + 256));
      return sub_1015A2E04(a2, __s);
    }
  }
  return sub_1015A2E04(a2, __s);
}

std::string *sub_100B1F434(uint64_t a1, std::string *a2)
{
  double v3;
  void **v4;
  void *__p[2];
  char v7;
  char __str[4096];

  v3 = *(double *)(a1 + 8);
  sub_100B1F260(a1, __p);
  if (v7 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  snprintf(__str, 0x1000uLL, "STATUS,SENSOR,Time,%.3lf,Type,CLNonlinearGyroBiasFit,fits,%s", v3, (const char *)v4);
  if (v7 < 0)
    operator delete(__p[0]);
  return std::string::assign(a2, __str);
}

std::string *sub_100B1F508(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,BodyMetrics,gender,%u,heightM,%f,weightKG,%f,vo2max,%f,age,%f,hrmin,%f,hrmax,%f,hronset,%f,pal,%f,condition,%u,runVo2max,%f", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(float *)(a1 + 24), *(float *)(a1 + 28), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48), *(float *)(a1 + 52), *(_DWORD *)(a1 + 56), *(float *)(a1 + 60));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1F5DC(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,WorkoutEvent,workoutType,%u,eventType,%u,eventTime,%.3lf", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(double *)(a1 + 32));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1F664(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,OnsetHeartRateData,dataSource,%u,interpolation,%u,HeartRate,%f,confidence,%f,error,%d,timestamp,%.3lf,startTime,%.3lf,sinceLastGood,%.3lf,mode,%u", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(_DWORD *)(a1 + 80));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1F70C(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,StreamingHeartRateData,dataSource,%u,interpolation,%u,HeartRate,%f,confidence,%f,error,%d,timestamp,%.3lf,startTime,%.3lf,sinceLastGood,%.3lf,mode,%u", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(_DWORD *)(a1 + 80));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1F7B4(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,ElevationChange,timestamp,%.3lf,startTime,%.3lf,elevationAscended,%u,elevationDescended,%d,source,%u", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1F844(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,CoarseElevationChange,startTime,%.3lf,elevationAscended,%u", *(double *)(a1 + 8), *(double *)(a1 + 24), *(_DWORD *)(a1 + 32));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1F8C8(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,MotionGPSLocation,timestamp,%.3lf,latitude,%+.10f,longitude,%+.10f,speed,%.3lf,speedAccuracy,%.3lf,horizontalAccuracy,%.3lf,course,%.3lf,courseAccuracy,%.3lf,altitude,%.3lf,verticalAccuracy,%.3lf,type,%d,timestampGPS,%.3lf,undulation,%.3lf,undulationModel,%d,horzUncSemiMaj,%.3lf,horzUncSemiMin,%.3lf,horzUncSemiMajAz,%.3lf,odometer,%.3lf,deltaDistance,%.3lf,deltaDistanceAccuracy,%.3lf,originDevice,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(_DWORD *)(a1 + 104), *(double *)(a1 + 112),
    *(float *)(a1 + 120),
    *(_DWORD *)(a1 + 124),
    *(float *)(a1 + 128),
    *(float *)(a1 + 132),
    *(float *)(a1 + 136),
    *(double *)(a1 + 144),
    *(double *)(a1 + 152),
    *(double *)(a1 + 160),
    *(_DWORD *)(a1 + 168));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1F9BC(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,MotionWifiLocation,timestamp,%.3lf,latitude,%+.10f,longitude,%+.10f,speed,%.3lf,speedAccuracy,%.3lf,horizontalAccuracy,%.3lf,course,%.3lf,courseAccuracy,%.3lf,altitude,%.3lf,verticalAccuracy,%.3lf,type,%d,timestampGPS,%.3lf,undulation,%.3lf,undulationModel,%d,horzUncSemiMaj,%.3lf,horzUncSemiMin,%.3lf,horzUncSemiMajAz,%.3lf,odometer,%.3lf,deltaDistance,%.3lf,deltaDistanceAccuracy,%.3lf,originDevice,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(_DWORD *)(a1 + 104), *(double *)(a1 + 112),
    *(float *)(a1 + 120),
    *(_DWORD *)(a1 + 124),
    *(float *)(a1 + 128),
    *(float *)(a1 + 132),
    *(float *)(a1 + 136),
    *(double *)(a1 + 144),
    *(double *)(a1 + 152),
    *(double *)(a1 + 160),
    *(_DWORD *)(a1 + 168));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1FAB0(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,StrideCalBin,bin,%d,begin,%.3lf,end,%.3lf,state,%d,kValue,%.3lf", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(double *)(a1 + 24), *(double *)(a1 + 32), *(_DWORD *)(a1 + 40), *(double *)(a1 + 48));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1FB48(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,CaloriemetryPauseEvent,pause,%d", *(double *)(a1 + 8), *(unsigned __int8 *)(a1 + 18));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1FBC8(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,MetsInfo,mets,%f,metsHR,%f,metsWR,%f,source,%u,metsDiff,%f", *(double *)(a1 + 8), *(float *)(a1 + 20), *(float *)(a1 + 24), *(float *)(a1 + 28), *(_DWORD *)(a1 + 32), *(float *)(a1 + 36));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1FC6C(uint64_t a1, std::string *this)
{
  int v3;
  int v4;
  char __str[1024];

  v3 = *(unsigned __int8 *)(a1 + 18);
  if (v3 == 2)
  {
    if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,systemHardware,%d,defaultsUserStudyFallStatsEnabled,%d,defaultsUserStudyPressureDataCollection,%d,defaultsIsSensorRecordingEnabled,%d,defaultsDetectorEnabled,%d,defaultsAnomalyMotionInternalTest,%d,spuConfigSensorTestModeEnabled,%d,spuConfigSensorRecordingEnabled,%d,spuConfigLastReplyAopTimestamp,%llu,spuConfigFallStatsMode,%d,spuConfigSensorRecordingActive,%d,spuConfigSimulateEvent,%d,spuConfigUserStudyPressureDataCollection,%d,spuConfigDetectorEnabled,%d,spuConfigSensorTestModeEnabled,%d,defaultsDetectorDuringWorkoutEnabled,%d", *(_DWORD *)(a1 + 20), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25), *(unsigned __int8 *)(a1 + 26), *(unsigned __int8 *)(a1 + 27), *(unsigned __int8 *)(a1 + 29), *(unsigned __int8 *)(a1 + 30), *(unsigned __int8 *)(a1 + 31), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41),
                         *(unsigned __int8 *)(a1 + 42),
                         *(unsigned __int8 *)(a1 + 43),
                         *(unsigned __int8 *)(a1 + 44),
                         *(unsigned __int8 *)(a1 + 45),
                         *(unsigned __int8 *)(a1 + 28)) >= 0x401)
    {
      v4 = 4710;
      goto LABEL_7;
    }
  }
  else if (v3 == 1
         && snprintf(__str, 0x400uLL, "STATUS,SENSOR,systemHardware,%d,defaultsUserStudyFallStatsEnabled,%d,defaultsUserStudyPressureDataCollection,%d,defaultsIsSensorRecordingEnabled,%d,defaultsDetectorEnabled,%d,defaultsAnomalyMotionInternalTest,%d,spuConfigSensorTestModeEnabled,%d,spuConfigSensorRecordingEnabled,%d,spuConfigLastReplyAopTimestamp,%llu,spuConfigFallStatsMode,%d,spuConfigSensorRecordingActive,%d,spuConfigSimulateEvent,%d,spuConfigUserStudyPressureDataCollection,%d,spuConfigDetectorEnabled,%d,spuConfigSensorTestModeEnabled,%d", *(_DWORD *)(a1 + 20), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25), *(unsigned __int8 *)(a1 + 26), *(unsigned __int8 *)(a1 + 27), *(unsigned __int8 *)(a1 + 29), *(unsigned __int8 *)(a1 + 30), *(unsigned __int8 *)(a1 + 31), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41),
                            *(unsigned __int8 *)(a1 + 42),
                            *(unsigned __int8 *)(a1 + 43),
                            *(unsigned __int8 *)(a1 + 44),
                            *(unsigned __int8 *)(a1 + 45)) > 0x400)
  {
    v4 = 4684;
LABEL_7:
    snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", v4);
  }
  return std::string::assign(this, __str);
}

std::string *sub_100B1FDF4(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "LOG,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,operatingMode,%d,aopTsNow,%llu,aopTsSensor,%llu,peakTimestamp,%llu,fallType,%hhd,isFall,%hhu,isNearFall,%d,simulated,%hhu,crown,%hhd,seq,%u,trialCount,%u", *(double *)(a1 + 8), *(double *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 212), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 112), *(char *)(a1 + 152), *(unsigned __int8 *)(a1 + 153), *(unsigned __int8 *)(a1 + 188), *(unsigned __int8 *)(a1 + 154), *(char *)(a1 + 156), *(unsigned __int16 *)(a1 + 34), *(unsigned __int8 *)(a1 + 155));
  return std::string::assign(a2, __str);
}

std::string *sub_100B1FEB4(uint64_t a1, std::string *a2)
{
  char __str[2048];

  snprintf(__str, 0x800uLL, "LOG,Time,%.3lf,Type,FallStatsFeatures,timestamp,%f,version,%d,operatingMode,%d,aopTsNow,%llu,aopTsSensor,%llu,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,maxAccelNorm,%f,accelPathLength,%f,minInertialZ,%f,minInertialZHighFreq,%f,crownVariance,%f,gravityVariance,%f,medianAbsGravityY,%f,abruptGravityChangeAngle,%f,jerkVectorMagMax,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDelaySpread,%f,accelPathLengthWithPeak,%f", *(double *)(a1 + 8), *(double *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 212), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(float *)(a1 + 60), *(float *)(a1 + 64), *(float *)(a1 + 68), *(float *)(a1 + 72), *(float *)(a1 + 76),
    *(float *)(a1 + 80),
    *(float *)(a1 + 164),
    *(float *)(a1 + 120),
    *(float *)(a1 + 124),
    *(float *)(a1 + 208),
    *(float *)(a1 + 220),
    *(float *)(a1 + 216),
    *(float *)(a1 + 224),
    *(float *)(a1 + 228),
    *(float *)(a1 + 96),
    *(float *)(a1 + 128),
    *(float *)(a1 + 132),
    *(float *)(a1 + 136),
    *(float *)(a1 + 140),
    *(float *)(a1 + 144),
    *(float *)(a1 + 148),
    *(float *)(a1 + 176),
    *(float *)(a1 + 180),
    *(float *)(a1 + 184),
    *(float *)(a1 + 192),
    *(float *)(a1 + 196),
    *(float *)(a1 + 200),
    *(float *)(a1 + 204));
  return std::string::assign(a2, __str);
}

std::string *sub_100B20044(uint64_t a1, std::string *a2)
{
  int v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  char __str[16384];

  switch(*(_BYTE *)(a1 + 32))
  {
    case 1:
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f", *(double *)(a1 + 8), *(double *)(a1 + 24), 1, *(unsigned __int16 *)(a1 + 34), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64), *(float *)(a1 + 68), *(float *)(a1 + 72), *(float *)(a1 + 76), *(float *)(a1 + 80), *(float *)(a1 + 84),
                           *(float *)(a1 + 88),
                           *(float *)(a1 + 92),
                           *(float *)(a1 + 96),
                           *(float *)(a1 + 100),
                           *(float *)(a1 + 104),
                           *(float *)(a1 + 108)) > 0x4000)
      {
        v3 = 4810;
        goto LABEL_24;
      }
      break;
    case 2:
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu", *(double *)(a1 + 8), *(double *)(a1 + 24), 2, *(unsigned __int16 *)(a1 + 34), *(unsigned __int8 *)(a1 + 155), *(char *)(a1 + 156), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64),
                           *(float *)(a1 + 68),
                           *(float *)(a1 + 72),
                           *(float *)(a1 + 76),
                           *(float *)(a1 + 80),
                           *(float *)(a1 + 84),
                           *(float *)(a1 + 88),
                           *(float *)(a1 + 92),
                           *(float *)(a1 + 96),
                           *(float *)(a1 + 100),
                           *(float *)(a1 + 104),
                           *(float *)(a1 + 108),
                           *(_QWORD *)(a1 + 112),
                           *(float *)(a1 + 120),
                           *(float *)(a1 + 124),
                           *(float *)(a1 + 128),
                           *(float *)(a1 + 132),
                           *(float *)(a1 + 136),
                           *(float *)(a1 + 140),
                           *(float *)(a1 + 144),
                           *(float *)(a1 + 148),
                           *(char *)(a1 + 152),
                           *(unsigned __int8 *)(a1 + 153),
                           *(unsigned __int8 *)(a1 + 154)) > 0x4000)
      {
        v3 = 4848;
        goto LABEL_24;
      }
      break;
    case 3:
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f", *(double *)(a1 + 8), *(double *)(a1 + 24), 3, *(unsigned __int16 *)(a1 + 34), *(unsigned __int8 *)(a1 + 155), *(char *)(a1 + 156), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64),
                           *(float *)(a1 + 68),
                           *(float *)(a1 + 72),
                           *(float *)(a1 + 76),
                           *(float *)(a1 + 80),
                           *(float *)(a1 + 84),
                           *(float *)(a1 + 88),
                           *(float *)(a1 + 92),
                           *(float *)(a1 + 96),
                           *(float *)(a1 + 100),
                           *(float *)(a1 + 104),
                           *(float *)(a1 + 108),
                           *(_QWORD *)(a1 + 112),
                           *(float *)(a1 + 120),
                           *(float *)(a1 + 124),
                           *(float *)(a1 + 128),
                           *(float *)(a1 + 132),
                           *(float *)(a1 + 136),
                           *(float *)(a1 + 140),
                           *(float *)(a1 + 144),
                           *(float *)(a1 + 148),
                           *(char *)(a1 + 152),
                           *(unsigned __int8 *)(a1 + 153),
                           *(unsigned __int8 *)(a1 + 154),
                           *(float *)(a1 + 160),
                           *(float *)(a1 + 164)) > 0x4000)
      {
        v3 = 4888;
        goto LABEL_24;
      }
      break;
    case 4:
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f", *(double *)(a1 + 8), *(double *)(a1 + 24), 4, *(unsigned __int16 *)(a1 + 34), *(unsigned __int8 *)(a1 + 155), *(char *)(a1 + 156), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(float *)(a1 + 56), *(float *)(a1 + 60),
                           *(float *)(a1 + 64),
                           *(float *)(a1 + 68),
                           *(float *)(a1 + 72),
                           *(float *)(a1 + 76),
                           *(float *)(a1 + 80),
                           *(float *)(a1 + 84),
                           *(float *)(a1 + 88),
                           *(float *)(a1 + 92),
                           *(float *)(a1 + 96),
                           *(float *)(a1 + 100),
                           *(float *)(a1 + 104),
                           *(float *)(a1 + 108),
                           *(_QWORD *)(a1 + 112),
                           *(float *)(a1 + 120),
                           *(float *)(a1 + 124),
                           *(float *)(a1 + 128),
                           *(float *)(a1 + 132),
                           *(float *)(a1 + 136),
                           *(float *)(a1 + 140),
                           *(float *)(a1 + 144),
                           *(float *)(a1 + 148),
                           *(char *)(a1 + 152),
                           *(unsigned __int8 *)(a1 + 153),
                           *(unsigned __int8 *)(a1 + 154),
                           *(float *)(a1 + 160),
                           *(float *)(a1 + 164),
                           *(float *)(a1 + 168),
                           *(float *)(a1 + 172)) > 0x4000)
      {
        v3 = 4930;
        goto LABEL_24;
      }
      break;
    case 5:
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f", *(double *)(a1 + 8), *(double *)(a1 + 24), 5, *(unsigned __int16 *)(a1 + 34), *(unsigned __int8 *)(a1 + 155), *(char *)(a1 + 156), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(float *)(a1 + 56), *(float *)(a1 + 60),
                           *(float *)(a1 + 64),
                           *(float *)(a1 + 68),
                           *(float *)(a1 + 72),
                           *(float *)(a1 + 76),
                           *(float *)(a1 + 80),
                           *(float *)(a1 + 84),
                           *(float *)(a1 + 88),
                           *(float *)(a1 + 92),
                           *(float *)(a1 + 96),
                           *(float *)(a1 + 100),
                           *(float *)(a1 + 104),
                           *(float *)(a1 + 108),
                           *(_QWORD *)(a1 + 112),
                           *(float *)(a1 + 120),
                           *(float *)(a1 + 124),
                           *(float *)(a1 + 128),
                           *(float *)(a1 + 132),
                           *(float *)(a1 + 136),
                           *(float *)(a1 + 140),
                           *(float *)(a1 + 144),
                           *(float *)(a1 + 148),
                           *(char *)(a1 + 152),
                           *(unsigned __int8 *)(a1 + 153),
                           *(unsigned __int8 *)(a1 + 154),
                           *(float *)(a1 + 160),
                           *(float *)(a1 + 164),
                           *(float *)(a1 + 168),
                           *(float *)(a1 + 172),
                           *(float *)(a1 + 176),
                           *(float *)(a1 + 180),
                           *(float *)(a1 + 184)) > 0x4000)
      {
        v3 = 4975;
        goto LABEL_24;
      }
      break;
    case 6:
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,isNearFall,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), 6, *(unsigned __int16 *)(a1 + 34), *(unsigned __int8 *)(a1 + 155), *(char *)(a1 + 156), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(float *)(a1 + 56),
                           *(float *)(a1 + 60),
                           *(float *)(a1 + 64),
                           *(float *)(a1 + 68),
                           *(float *)(a1 + 72),
                           *(float *)(a1 + 76),
                           *(float *)(a1 + 80),
                           *(float *)(a1 + 84),
                           *(float *)(a1 + 88),
                           *(float *)(a1 + 92),
                           *(float *)(a1 + 96),
                           *(float *)(a1 + 100),
                           *(float *)(a1 + 104),
                           *(float *)(a1 + 108),
                           *(_QWORD *)(a1 + 112),
                           *(float *)(a1 + 120),
                           *(float *)(a1 + 124),
                           *(float *)(a1 + 128),
                           *(float *)(a1 + 132),
                           *(float *)(a1 + 136),
                           *(float *)(a1 + 140),
                           *(float *)(a1 + 144),
                           *(float *)(a1 + 148),
                           *(char *)(a1 + 152),
                           *(unsigned __int8 *)(a1 + 153),
                           *(unsigned __int8 *)(a1 + 154),
                           *(float *)(a1 + 160),
                           *(float *)(a1 + 164),
                           *(float *)(a1 + 168),
                           *(float *)(a1 + 172),
                           *(float *)(a1 + 176),
                           *(float *)(a1 + 180),
                           *(float *)(a1 + 184),
                           *(unsigned __int8 *)(a1 + 188)) > 0x4000)
      {
        v3 = 5021;
        goto LABEL_24;
      }
      break;
    case 7:
      v4 = *(double *)(a1 + 8);
      v5 = *(double *)(a1 + 24);
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDelaySpread,%f,accelPathLengthWithPeak,%f", v4, v5, 7, *(unsigned __int16 *)(a1 + 34), *(unsigned __int8 *)(a1 + 155), *(char *)(a1 + 156), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48),
                           *(float *)(a1 + 56),
                           *(float *)(a1 + 60),
                           *(float *)(a1 + 64),
                           *(float *)(a1 + 68),
                           *(float *)(a1 + 72),
                           *(float *)(a1 + 76),
                           *(float *)(a1 + 80),
                           *(float *)(a1 + 84),
                           *(float *)(a1 + 88),
                           *(float *)(a1 + 92),
                           *(float *)(a1 + 96),
                           *(float *)(a1 + 100),
                           *(float *)(a1 + 104),
                           *(float *)(a1 + 108),
                           *(_QWORD *)(a1 + 112),
                           *(float *)(a1 + 120),
                           *(float *)(a1 + 124),
                           *(float *)(a1 + 128),
                           *(float *)(a1 + 132),
                           *(float *)(a1 + 136),
                           *(float *)(a1 + 140),
                           *(float *)(a1 + 144),
                           *(float *)(a1 + 148),
                           *(char *)(a1 + 152),
                           *(unsigned __int8 *)(a1 + 153),
                           *(unsigned __int8 *)(a1 + 154),
                           *(float *)(a1 + 160),
                           *(float *)(a1 + 164),
                           *(float *)(a1 + 168),
                           *(float *)(a1 + 172),
                           *(float *)(a1 + 176),
                           *(float *)(a1 + 180),
                           *(float *)(a1 + 184),
                           *(unsigned __int8 *)(a1 + 188),
                           *(float *)(a1 + 192),
                           *(float *)(a1 + 196),
                           *(float *)(a1 + 200),
                           *(float *)(a1 + 204)) > 0x4000)
      {
        v3 = 5071;
        goto LABEL_24;
      }
      break;
    case 8:
      v6 = *(double *)(a1 + 8);
      v7 = *(double *)(a1 + 24);
      v15 = *(float *)(a1 + 204);
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDelaySpread,%f,accelPathLengthWithPeak,%f,minInertialZHighFreq,%f", v6, v7, 8, *(unsigned __int16 *)(a1 + 34), *(unsigned __int8 *)(a1 + 155), *(char *)(a1 + 156), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48),
                           *(float *)(a1 + 56),
                           *(float *)(a1 + 60),
                           *(float *)(a1 + 64),
                           *(float *)(a1 + 68),
                           *(float *)(a1 + 72),
                           *(float *)(a1 + 76),
                           *(float *)(a1 + 80),
                           *(float *)(a1 + 84),
                           *(float *)(a1 + 88),
                           *(float *)(a1 + 92),
                           *(float *)(a1 + 96),
                           *(float *)(a1 + 100),
                           *(float *)(a1 + 104),
                           *(float *)(a1 + 108),
                           *(_QWORD *)(a1 + 112),
                           *(float *)(a1 + 120),
                           *(float *)(a1 + 124),
                           *(float *)(a1 + 128),
                           *(float *)(a1 + 132),
                           *(float *)(a1 + 136),
                           *(float *)(a1 + 140),
                           *(float *)(a1 + 144),
                           *(float *)(a1 + 148),
                           *(char *)(a1 + 152),
                           *(unsigned __int8 *)(a1 + 153),
                           *(unsigned __int8 *)(a1 + 154),
                           *(float *)(a1 + 160),
                           *(float *)(a1 + 164),
                           *(float *)(a1 + 168),
                           *(float *)(a1 + 172),
                           *(float *)(a1 + 176),
                           *(float *)(a1 + 180),
                           *(float *)(a1 + 184),
                           *(unsigned __int8 *)(a1 + 188),
                           *(float *)(a1 + 192),
                           *(float *)(a1 + 196),
                           *(float *)(a1 + 200),
                           v15,
                           *(float *)(a1 + 208)) > 0x4000)
      {
        v3 = 5122;
        goto LABEL_24;
      }
      break;
    case 9:
      v8 = *(double *)(a1 + 8);
      v9 = *(double *)(a1 + 24);
      v16 = *(float *)(a1 + 204);
      v19 = *(float *)(a1 + 208);
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDelaySpread,%f,accelPathLengthWithPeak,%f,minInertialZHighFreq,%f,operatingMode,%d", v8, v9, 9, *(unsigned __int16 *)(a1 + 34), *(unsigned __int8 *)(a1 + 155), *(char *)(a1 + 156), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48),
                           *(float *)(a1 + 56),
                           *(float *)(a1 + 60),
                           *(float *)(a1 + 64),
                           *(float *)(a1 + 68),
                           *(float *)(a1 + 72),
                           *(float *)(a1 + 76),
                           *(float *)(a1 + 80),
                           *(float *)(a1 + 84),
                           *(float *)(a1 + 88),
                           *(float *)(a1 + 92),
                           *(float *)(a1 + 96),
                           *(float *)(a1 + 100),
                           *(float *)(a1 + 104),
                           *(float *)(a1 + 108),
                           *(_QWORD *)(a1 + 112),
                           *(float *)(a1 + 120),
                           *(float *)(a1 + 124),
                           *(float *)(a1 + 128),
                           *(float *)(a1 + 132),
                           *(float *)(a1 + 136),
                           *(float *)(a1 + 140),
                           *(float *)(a1 + 144),
                           *(float *)(a1 + 148),
                           *(char *)(a1 + 152),
                           *(unsigned __int8 *)(a1 + 153),
                           *(unsigned __int8 *)(a1 + 154),
                           *(float *)(a1 + 160),
                           *(float *)(a1 + 164),
                           *(float *)(a1 + 168),
                           *(float *)(a1 + 172),
                           *(float *)(a1 + 176),
                           *(float *)(a1 + 180),
                           *(float *)(a1 + 184),
                           *(unsigned __int8 *)(a1 + 188),
                           *(float *)(a1 + 192),
                           *(float *)(a1 + 196),
                           *(float *)(a1 + 200),
                           v16,
                           v19,
                           *(unsigned __int8 *)(a1 + 212)) > 0x4000)
      {
        v3 = 5174;
        goto LABEL_24;
      }
      break;
    case 0xA:
      v10 = *(double *)(a1 + 8);
      v11 = *(double *)(a1 + 24);
      v22 = *(float *)(a1 + 216);
      v24 = *(float *)(a1 + 220);
      v17 = *(float *)(a1 + 204);
      v20 = *(float *)(a1 + 208);
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDelaySpread,%f,accelPathLengthWithPeak,%f,minInertialZHighFreq,%f,operatingMode,%d,gravityVariance,%f,crownVariance,%f", v10, v11, 10, *(unsigned __int16 *)(a1 + 34), *(unsigned __int8 *)(a1 + 155), *(char *)(a1 + 156), *(_QWORD *)(a1 + 40),
                           *(_QWORD *)(a1 + 48),
                           *(float *)(a1 + 56),
                           *(float *)(a1 + 60),
                           *(float *)(a1 + 64),
                           *(float *)(a1 + 68),
                           *(float *)(a1 + 72),
                           *(float *)(a1 + 76),
                           *(float *)(a1 + 80),
                           *(float *)(a1 + 84),
                           *(float *)(a1 + 88),
                           *(float *)(a1 + 92),
                           *(float *)(a1 + 96),
                           *(float *)(a1 + 100),
                           *(float *)(a1 + 104),
                           *(float *)(a1 + 108),
                           *(_QWORD *)(a1 + 112),
                           *(float *)(a1 + 120),
                           *(float *)(a1 + 124),
                           *(float *)(a1 + 128),
                           *(float *)(a1 + 132),
                           *(float *)(a1 + 136),
                           *(float *)(a1 + 140),
                           *(float *)(a1 + 144),
                           *(float *)(a1 + 148),
                           *(char *)(a1 + 152),
                           *(unsigned __int8 *)(a1 + 153),
                           *(unsigned __int8 *)(a1 + 154),
                           *(float *)(a1 + 160),
                           *(float *)(a1 + 164),
                           *(float *)(a1 + 168),
                           *(float *)(a1 + 172),
                           *(float *)(a1 + 176),
                           *(float *)(a1 + 180),
                           *(float *)(a1 + 184),
                           *(unsigned __int8 *)(a1 + 188),
                           *(float *)(a1 + 192),
                           *(float *)(a1 + 196),
                           *(float *)(a1 + 200),
                           v17,
                           v20,
                           *(unsigned __int8 *)(a1 + 212),
                           v22,
                           v24) > 0x4000)
      {
        v3 = 5228;
        goto LABEL_24;
      }
      break;
    case 0xB:
      v12 = *(double *)(a1 + 8);
      v13 = *(double *)(a1 + 24);
      v26 = *(float *)(a1 + 224);
      v27 = *(float *)(a1 + 228);
      v23 = *(float *)(a1 + 216);
      v25 = *(float *)(a1 + 220);
      v18 = *(float *)(a1 + 204);
      v21 = *(float *)(a1 + 208);
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDelaySpread,%f,accelPathLengthWithPeak,%f,minInertialZHighFreq,%f,operatingMode,%d,gravityVariance,%f,crownVariance,%f,medianAbsGravityY,%f,abruptGravityChangeAngle,%f", v12, v13, 11, *(unsigned __int16 *)(a1 + 34), *(unsigned __int8 *)(a1 + 155), *(char *)(a1 + 156), *(_QWORD *)(a1 + 40),
                           *(_QWORD *)(a1 + 48),
                           *(float *)(a1 + 56),
                           *(float *)(a1 + 60),
                           *(float *)(a1 + 64),
                           *(float *)(a1 + 68),
                           *(float *)(a1 + 72),
                           *(float *)(a1 + 76),
                           *(float *)(a1 + 80),
                           *(float *)(a1 + 84),
                           *(float *)(a1 + 88),
                           *(float *)(a1 + 92),
                           *(float *)(a1 + 96),
                           *(float *)(a1 + 100),
                           *(float *)(a1 + 104),
                           *(float *)(a1 + 108),
                           *(_QWORD *)(a1 + 112),
                           *(float *)(a1 + 120),
                           *(float *)(a1 + 124),
                           *(float *)(a1 + 128),
                           *(float *)(a1 + 132),
                           *(float *)(a1 + 136),
                           *(float *)(a1 + 140),
                           *(float *)(a1 + 144),
                           *(float *)(a1 + 148),
                           *(char *)(a1 + 152),
                           *(unsigned __int8 *)(a1 + 153),
                           *(unsigned __int8 *)(a1 + 154),
                           *(float *)(a1 + 160),
                           *(float *)(a1 + 164),
                           *(float *)(a1 + 168),
                           *(float *)(a1 + 172),
                           *(float *)(a1 + 176),
                           *(float *)(a1 + 180),
                           *(float *)(a1 + 184),
                           *(unsigned __int8 *)(a1 + 188),
                           *(float *)(a1 + 192),
                           *(float *)(a1 + 196),
                           *(float *)(a1 + 200),
                           v18,
                           v21,
                           *(unsigned __int8 *)(a1 + 212),
                           v23,
                           v25,
                           v26,
                           v27) > 0x4000)
      {
        v3 = 5284;
LABEL_24:
        snprintf(__str, 0x4000uLL, "buffer too short to host all data (line:%i)", v3);
      }
      break;
    default:
      return std::string::assign(a2, __str);
  }
  return std::string::assign(a2, __str);
}

std::string *sub_100B210C0(uint64_t a1, std::string *this)
{
  int v3;
  int v4;
  char __str[1024];

  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 == 3)
  {
    if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallState,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,isFall,%d,state,%d,response,%d,resolution,%d,sosCallTimestamp,%f,sosState,%d,fallAlertSentFromReferee,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(unsigned __int8 *)(a1 + 58), *(unsigned __int8 *)(a1 + 59), *(double *)(a1 + 64), *(unsigned __int8 *)(a1 + 72), *(unsigned __int8 *)(a1 + 73)) >= 0x401)
    {
      v4 = 5332;
      goto LABEL_10;
    }
  }
  else if (v3 == 2)
  {
    if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallState,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,isFall,%d,state,%d,response,%d,resolution,%d,sosCallTimestamp,%f,sosState,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(unsigned __int8 *)(a1 + 58), *(unsigned __int8 *)(a1 + 59), *(double *)(a1 + 64), *(unsigned __int8 *)(a1 + 72)) > 0x400)
    {
      v4 = 5317;
      goto LABEL_10;
    }
  }
  else if (v3 == 1
         && snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallState,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,isFall,%d,state,%d,response,%d,resolution,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(unsigned __int8 *)(a1 + 58), *(unsigned __int8 *)(a1 + 59)) > 0x400)
  {
    v4 = 5303;
LABEL_10:
    snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", v4);
  }
  return std::string::assign(this, __str);
}

void sub_100B21260(uint64_t a1, std::string *a2, int a3)
{
  const std::string::value_type *v6;
  const std::string::value_type *v7;
  std::string *v8;
  std::string *v9;
  std::string v10;
  std::string v11;
  char __str[1024];

  sub_1015A2E04(&v11, "unsupported");
  sub_1015A2E04(&v10, "unknown");
  if (a3 == 57)
  {
    std::string::assign(&v11, "FallDataGyro200");
    v7 = "aopTs";
  }
  else
  {
    if (a3 == 58)
    {
      v6 = "FallDataAccel800";
    }
    else
    {
      if (a3 != 123)
        goto LABEL_9;
      v6 = "FallDataHgal";
    }
    std::string::assign(&v11, v6);
    v7 = "approxAopTs";
  }
  std::string::assign(&v10, v7);
LABEL_9:
  v8 = &v11;
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  v9 = &v10;
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v10.__r_.__value_.__r.__words[0];
  if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,%s,timestamp,%f,%s,%llu,x,%f,y,%f,z,%f", *(double *)(a1 + 8), (const char *)v8, *(double *)(a1 + 24), (const char *)v9, *(_QWORD *)(a1 + 32), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48)) >= 0x401)snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", 5371);
  std::string::assign(a2, __str);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_100B21404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100B21440(uint64_t a1, std::string *a2, int a3)
{
  std::string *v6;
  std::string *v7;
  std::string v8;
  std::string v9;
  char __str[1024];

  sub_1015A2E04(&v9, "unsupported");
  sub_1015A2E04(&v8, "unknown");
  if (a3 == 60)
  {
    std::string::assign(&v9, "FallDataQuaternion6");
    std::string::assign(&v8, "aopTs");
  }
  v6 = &v9;
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v9.__r_.__value_.__r.__words[0];
  v7 = &v8;
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
  if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,%s,timestamp,%f,%s,%llu,qx,%f,qy,%f,qz,%f,qw,%f", *(double *)(a1 + 8), (const char *)v6, *(double *)(a1 + 24), (const char *)v7, *(_QWORD *)(a1 + 32), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48), *(float *)(a1 + 52)) >= 0x401)snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", 5404);
  std::string::assign(a2, __str);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_100B215B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100B215EC(uint64_t a1, std::string *a2)
{
  sub_100B21260(a1, a2, 58);
}

void sub_100B215F4(uint64_t a1, std::string *a2)
{
  sub_100B21260(a1, a2, 123);
}

void sub_100B215FC(uint64_t a1, std::string *a2)
{
  sub_100B21260(a1, a2, 57);
}

void sub_100B21604(uint64_t a1, std::string *a2)
{
  sub_100B21440(a1, a2, 60);
}

std::string *sub_100B2160C(uint64_t a1, std::string *a2)
{
  int v3;
  int v4;
  char __str[1024];

  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 == 2)
  {
    if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallFalsePositiveSuppressionFeatures,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,aopTsImpact,%llu,seq,%d,sumHighQPeaksInHighFreqFFT,%f,sumHighQPeaksInLowFreqFFT,%f,sumHighQPeaksInDecLowFreqFFT,%f,nPeaks,%i,normalizedIQR,%f,repetitiveMotion,%d,version=%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int16 *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64), *(float *)(a1 + 68), *(_DWORD *)(a1 + 72), *(float *)(a1 + 76), *(unsigned __int8 *)(a1 + 81), 2) > 0x400)
    {
      v4 = 5486;
      goto LABEL_9;
    }
  }
  else if (v3 == 3)
  {
    if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallFalsePositiveSuppressionFeatures,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,aopTsImpact,%llu,seq,%d,sumHighQPeaksInHighFreqFFT,%f,sumHighQPeaksInLowFreqFFT,%f,sumHighQPeaksInDecLowFreqFFT,%f,nPeaks,%i,normalizedIQR,%f,repetitiveMotion,%d,version=%d,repetitiveMotionStartTs,%llu,repetitiveMotionEndTs,%llu", *(double *)(a1 + 8), *(double *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int16 *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64), *(float *)(a1 + 68), *(_DWORD *)(a1 + 72), *(float *)(a1 + 76), *(unsigned __int8 *)(a1 + 81), 3,
                         *(_QWORD *)(a1 + 88),
                         *(_QWORD *)(a1 + 96)) > 0x400)
    {
      v4 = 5469;
LABEL_9:
      snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", v4);
    }
  }
  else if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallFalsePositiveSuppressionFeatures,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,aopTsImpact,%llu,seq,%d,sumHighQPeaksInHighFreqFFT,%f,sumHighQPeaksInLowFreqFFT,%f,sumHighQPeaksInDecLowFreqFFT,%f,nPeaks,%i,normalizedIQR,%f,version=%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int16 *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64), *(float *)(a1 + 68), *(_DWORD *)(a1 + 72), *(float *)(a1 + 76), *(unsigned __int8 *)(a1 + 80)) >= 0x401)
  {
    v4 = 5502;
    goto LABEL_9;
  }
  return std::string::assign(a2, __str);
}

std::string *sub_100B21810(uint64_t a1, std::string *a2)
{
  int v3;
  unint64_t v4;
  const char *v5;
  const char *v6;
  char __str[1024];

  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = *(char *)(a1 + 33);
  v5 = "Undefined";
  v6 = "Undefined";
  if (v4 <= 5)
    v6 = (&off_102172680)[v4];
  if (v3 == 16)
    v5 = "Above 30mph";
  if (v3 == 1)
    v5 = "Below 30mph";
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,BasebandSpeed,timestamp,%f,speedThreshold,0x%02hhx,speedRange,0x%02hhx,scaledValue,0x%02x,reserved,0x%02x,speedThresholdStr,%s,speedRangeStr,%s", *(double *)(a1 + 8), *(double *)(a1 + 24), v3, *(unsigned __int8 *)(a1 + 33), *(unsigned __int8 *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), v5, v6);
  return std::string::assign(a2, __str);
}

std::string *sub_100B218EC(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,VibrationEvent,isDeviceVibrating,%d", *(double *)(a1 + 8), *(unsigned __int8 *)(a1 + 18));
  return std::string::assign(a2, __str);
}

std::string *sub_100B2196C(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,StepCadenceToStrideLengthBin,bin,%d,begin,%.3lf,end,%.3lf,state,%d,strideLength,%.3lf", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(double *)(a1 + 24), *(double *)(a1 + 32), *(_DWORD *)(a1 + 40), *(double *)(a1 + 48));
  return std::string::assign(a2, __str);
}

std::string *sub_100B21A04(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,WatchOrientationSettings,wrist,%d,crown,%d", *(double *)(a1 + 8), *(unsigned __int8 *)(a1 + 18), *(unsigned __int8 *)(a1 + 19));
  return std::string::assign(a2, __str);
}

std::string *sub_100B21A88(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,MotionWifiAssociation,isWifiAssociated,%d", *(double *)(a1 + 8), *(unsigned __int8 *)(a1 + 18));
  return std::string::assign(a2, __str);
}

std::string *sub_100B21B08(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,MotionLoiData,longitude,%f,latitude,%f,departureDate,%.3lf,arrivalDate,%.3lf,horizontalAccuracy,%.3lf,confidence,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));
  return std::string::assign(a2, __str);
}

std::string *sub_100B21B9C(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,OdometerWithAltitude,startTime,%.3lf,accuracy,%.3lf,distance,%.3lf,gpsAltitude,%.3lf,speed,%.3lf,rawSpeed,%.3lf,odometer,%.3lf,gpsSpeedAccuracy,%.3lf,timestampGPS,%.3lf,origin,%d,quality,%d,groundAltitude,%.3lf,groundAltitudeUncertainty,%.3lf,smoothedGPSAltitude,%.3lf,smoothedGPSAltitudeUncertainty,%.3lf", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(_DWORD *)(a1 + 96), *(_DWORD *)(a1 + 100), *(double *)(a1 + 104), *(double *)(a1 + 112),
    *(double *)(a1 + 120),
    *(double *)(a1 + 128));
  return std::string::assign(a2, __str);
}

std::string *sub_100B21C50(uint64_t a1, std::string *a2)
{
  char __str[1024];

  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,OdometerWithAltitudeAndRadians,startTime,%.3lf,accuracy,%.3lf,distance,%.3lf,gpsAltitude,%.3lf,speed,%.3lf,rawSpeed,%.3lf,odometer,%.3lf,gpsSpeedAccuracy,%.3lf,timestampGPS,%.3lf,origin,%d,quality,%d,groundAltitude,%.3lf,groundAltitudeUncertainty,%.3lf,smoothedGPSAltitude,%.3lf,smoothedGPSAltitudeUncertainty,%.3lf,gpsCourseRadians,%.3lf,gpsCourseAccuracy,%.3lf", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(_DWORD *)(a1 + 96), *(_DWORD *)(a1 + 100), *(double *)(a1 + 104),
    *(double *)(a1 + 112),
    *(double *)(a1 + 120),
    *(double *)(a1 + 128),
    *(double *)(a1 + 136),
    *(double *)(a1 + 144));
  return std::string::assign(a2, __str);
}

void sub_100B21D08()
{
  operator delete();
}

uint64_t sub_100B21D1C()
{
  return 35;
}

void sub_100B21D24()
{
  operator delete();
}

uint64_t sub_100B21D38()
{
  return 41;
}

void sub_100B21D40()
{
  operator delete();
}

uint64_t sub_100B21D54()
{
  return 38;
}

void sub_100B21D5C()
{
  operator delete();
}

uint64_t sub_100B21D70()
{
  return 19;
}

void sub_100B21D78()
{
  operator delete();
}

uint64_t sub_100B21D8C()
{
  return 44;
}

uint64_t sub_100B21D94()
{
  return 20;
}

void sub_100B21D9C()
{
  operator delete();
}

uint64_t sub_100B21DB0()
{
  return 72;
}

void sub_100B21DB8()
{
  operator delete();
}

uint64_t sub_100B21DCC()
{
  return 76;
}

void sub_100B21DD4()
{
  operator delete();
}

uint64_t sub_100B21DE8()
{
  return 31;
}

void sub_100B21DF0()
{
  operator delete();
}

uint64_t sub_100B21E04()
{
  return 27;
}

void sub_100B21E0C()
{
  operator delete();
}

void sub_100B21E20()
{
  operator delete();
}

uint64_t sub_100B21E34()
{
  return 102;
}

void sub_100B21E3C()
{
  operator delete();
}

uint64_t sub_100B21E50()
{
  return 84;
}

void sub_100B21E58()
{
  operator delete();
}

uint64_t sub_100B21E6C()
{
  return 32;
}

void sub_100B21E74()
{
  operator delete();
}

uint64_t sub_100B21E88()
{
  return 98;
}

void sub_100B21E90()
{
  operator delete();
}

uint64_t sub_100B21EA4()
{
  return 95;
}

void sub_100B21EAC()
{
  operator delete();
}

uint64_t sub_100B21EC0()
{
  return 252;
}

void sub_100B21EC8()
{
  operator delete();
}

uint64_t sub_100B21EDC()
{
  return 59;
}

void sub_100B21EE4()
{
  operator delete();
}

void sub_100B21EF8()
{
  operator delete();
}

uint64_t sub_100B21F0C()
{
  return 68;
}

void sub_100B21F14()
{
  operator delete();
}

uint64_t sub_100B21F28()
{
  return 47;
}

void sub_100B21F30()
{
  operator delete();
}

uint64_t sub_100B21F44()
{
  return 16;
}

void sub_100B21F4C()
{
  operator delete();
}

void sub_100B21F60()
{
  operator delete();
}

uint64_t sub_100B21F74(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 32) - 1;
  if (v1 >= 0xB)
    sub_10191A240();
  return *(unsigned int *)&aB_4[4 * (char)v1];
}

void sub_100B21FA8()
{
  operator delete();
}

uint64_t sub_100B21FBC(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 18);
  if (v1 == 1)
    return 32;
  if (v1 != 2)
    sub_10191A268();
  return 33;
}

void sub_100B21FF0()
{
  operator delete();
}

uint64_t sub_100B22004(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 32) - 1;
  if (v1 >= 3)
    sub_10191A290();
  return dword_101C15898[(char)v1];
}

void sub_100B22038()
{
  operator delete();
}

uint64_t sub_100B2204C()
{
  return 43;
}

void sub_100B22054()
{
  operator delete();
}

void sub_100B22068()
{
  operator delete();
}

uint64_t sub_100B2207C(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 80) - 1;
  if (v1 >= 3)
    sub_10191A2B8();
  return dword_101C158A4[(char)v1];
}

uint64_t sub_100B220B0()
{
  return 17;
}

void sub_100B220B8()
{
  operator delete();
}

uint64_t sub_100B220CC()
{
  return 56;
}

void sub_100B220D4()
{
  operator delete();
}

uint64_t sub_100B220E8()
{
  return 127;
}

void sub_100B220F0()
{
  operator delete();
}

uint64_t sub_100B22104()
{
  return 143;
}

void sub_100B2210C()
{
  operator delete();
}

uint64_t sub_100B22120()
{
  return 40;
}

void sub_100B22128()
{
  operator delete();
}

uint64_t sub_100B2213C()
{
  return 25;
}

void sub_100B22144()
{
  operator delete();
}

uint64_t sub_100B22158()
{
  return 155;
}

void sub_100B22160(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100B22470(id *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  void *String;
  CLCKVO2MaxCalorimetryInput *v13;
  uint64_t result;
  _QWORD v15[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 2)
    {
      v13 = objc_alloc_init(CLCKVO2MaxCalorimetryInput);
      objc_msgSend(a1, "addInputs:", v13);

      v15[0] = 0;
      v15[1] = 0;
      if (!PBReaderPlaceMark(a2, v15) || (sub_100CEDD74((uint64_t)v13, a2) & 1) == 0)
        return 0;
      PBReaderRecallMark(a2, v15);
    }
    else if ((v6 >> 3) == 1)
    {
      String = (void *)PBReaderReadString(a2);

      a1[2] = String;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100B22B5C(uint64_t a1)
{
  sub_1015A2E04((_QWORD *)(a1 + 32), "UnknownHarvest");
  return a1;
}

std::string *sub_100B22B8C(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

uint64_t sub_100B22B94(uint64_t a1, unint64_t a2, unint64_t a3, _QWORD *a4, double a5)
{
  double v6;
  uint64_t result;
  unint64_t v8;

  *(_QWORD *)a1 = a2;
  if (a2)
    v6 = (double)a3 / (double)a2;
  else
    v6 = 0.0;
  *(double *)(a1 + 8) = v6;
  *(double *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = *a4;
  result = rand();
  HIDWORD(v8) = -1030792151 * result + 85899344;
  LODWORD(v8) = HIDWORD(v8);
  if ((v8 >> 2) <= 0x28F5C28)
    return sub_100B22C14((unsigned int *)a1);
  return result;
}

uint64_t sub_100B22C14(unsigned int *a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  double v12;
  double v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD v21[5];
  int v22;
  _QWORD *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint8_t buf[4];
  _QWORD *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;

  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_1021726B0);
  v2 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1 + 8;
    if (*((char *)a1 + 55) < 0)
      v3 = (_QWORD *)*v3;
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    v6 = *((_QWORD *)a1 + 2);
    v7 = *((_QWORD *)a1 + 3);
    *(_DWORD *)buf = 136447234;
    v33 = v3;
    v34 = 2050;
    v35 = v4;
    v36 = 2050;
    v37 = v5;
    v38 = 2050;
    v39 = v6;
    v40 = 2050;
    v41 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WifiAssociatedApHarvestDatabaseAnalytics, %{public}s, %{public}zu APs, average number of samples, %{public}.1f, current associated AP has oldest sample age of %{public}.1f hours, latest sample age of %{public}.1f seconds", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_1021726B0);
    v15 = a1 + 8;
    if (*((char *)a1 + 55) < 0)
      v15 = (_QWORD *)*v15;
    v16 = *(_QWORD *)a1;
    v17 = *((_QWORD *)a1 + 1);
    v18 = *((_QWORD *)a1 + 2);
    v19 = *((_QWORD *)a1 + 3);
    v22 = 136447234;
    v23 = v15;
    v24 = 2050;
    v25 = v16;
    v26 = 2050;
    v27 = v17;
    v28 = 2050;
    v29 = v18;
    v30 = 2050;
    v31 = v19;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "WifiAssociatedApHarvestDatabaseAnalytics, %{public}s, %{public}zu APs, average number of samples, %{public}.1f, current associated AP has oldest sample age of %{public}.1f hours, latest sample age of %{public}.1f seconds", &v22, 52);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiAssociatedApHarvestDatabaseAnalytics::sendCoreAnalyticsEvent()", "%s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
  v8 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v8, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *a1), CFSTR("numAssociatedAps"));
  LODWORD(v9) = llround(*((double *)a1 + 1));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9), CFSTR("averageNumSamples"));
  v10 = a1 + 8;
  if (*((char *)a1 + 55) < 0)
    v10 = (_QWORD *)*v10;
  objc_msgSend(v8, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10), CFSTR("harvestType"));
  v12 = *((double *)a1 + 2);
  if (v12 >= 0.0)
  {
    LODWORD(v11) = llround(v12);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11), CFSTR("oldestSampleAgeInHoursOfCurrentAssociatedAp"));
  }
  v13 = *((double *)a1 + 3);
  if (v13 >= 0.0)
  {
    LODWORD(v11) = llround(v13);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11), CFSTR("latestSampleAgeInSecondsOfCurrentAssociatedAp"));
  }
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100B22F58;
  v21[3] = &unk_10215F370;
  v21[4] = v8;
  return AnalyticsSendEventLazy(CFSTR("com.apple.wifiAssociatedApHarvestDatabase.analytics"), v21);
}

uint64_t sub_100B22F58(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_100B22F60(id a1)
{
  off_1022A0288 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_100B235B8(id a1)
{
  qword_10229FE98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_100B235E4@<X0>(double **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v36;
  _QWORD v37[10];
  char v38;
  uint64_t v39;

  sub_1004E5E40((uint64_t)&v36);
  *(_DWORD *)((char *)v37 + *(_QWORD *)(v36 - 24)) = *(_DWORD *)((_BYTE *)v37 + *(_QWORD *)(v36 - 24)) & 0xFFFFFEFB | 4;
  v4 = sub_100263F7C(&v36, (uint64_t)"Model2a,", 8);
  v5 = (_QWORD *)std::ostream::operator<<(v4, **a1);
  v6 = sub_100263F7C(v5, (uint64_t)",", 1);
  v7 = (_QWORD *)std::ostream::operator<<(v6, (*a1)[1]);
  v8 = sub_100263F7C(v7, (uint64_t)",", 1);
  v9 = sub_100263F7C(v8, (uint64_t)"Model2b,", 8);
  v10 = (_QWORD *)std::ostream::operator<<(v9, (*a1)[2]);
  v11 = sub_100263F7C(v10, (uint64_t)",", 1);
  v12 = (_QWORD *)std::ostream::operator<<(v11, (*a1)[3]);
  v13 = sub_100263F7C(v12, (uint64_t)",", 1);
  v14 = sub_100263F7C(v13, (uint64_t)"Model3a,", 8);
  v15 = (_QWORD *)std::ostream::operator<<(v14, (*a1)[4]);
  v16 = sub_100263F7C(v15, (uint64_t)",", 1);
  v17 = (_QWORD *)std::ostream::operator<<(v16, (*a1)[5]);
  v18 = sub_100263F7C(v17, (uint64_t)",", 1);
  v19 = (_QWORD *)std::ostream::operator<<(v18, (*a1)[6]);
  v20 = sub_100263F7C(v19, (uint64_t)",", 1);
  v21 = sub_100263F7C(v20, (uint64_t)"Model3b,", 8);
  v22 = (_QWORD *)std::ostream::operator<<(v21, (*a1)[7]);
  v23 = sub_100263F7C(v22, (uint64_t)",", 1);
  v24 = (_QWORD *)std::ostream::operator<<(v23, (*a1)[8]);
  v25 = sub_100263F7C(v24, (uint64_t)",", 1);
  v26 = (_QWORD *)std::ostream::operator<<(v25, (*a1)[9]);
  v27 = sub_100263F7C(v26, (uint64_t)",", 1);
  v28 = sub_100263F7C(v27, (uint64_t)"Model4,", 7);
  v29 = (_QWORD *)std::ostream::operator<<(v28, (*a1)[10]);
  v30 = sub_100263F7C(v29, (uint64_t)",", 1);
  v31 = (_QWORD *)std::ostream::operator<<(v30, (*a1)[11]);
  v32 = sub_100263F7C(v31, (uint64_t)",", 1);
  v33 = (_QWORD *)std::ostream::operator<<(v32, (*a1)[12]);
  v34 = sub_100263F7C(v33, (uint64_t)",", 1);
  std::ostream::operator<<(v34, (*a1)[13]);
  std::stringbuf::str(a2, v37);
  if (v38 < 0)
    operator delete((void *)v37[8]);
  std::streambuf::~streambuf(v37);
  return std::ios::~ios(&v39);
}

void sub_100B23878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E5F2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B2388C(uint64_t a1)
{
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  void **v14;
  void **v15;
  void **v16;
  char *v17;
  char *v18;
  void *v19[2];
  char v20;
  void *__p[2];
  char v22;
  _BYTE v23[12];
  __int16 v24;
  void **v25;
  __int16 v26;
  void **v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  _BYTE *v31;
  __int16 v32;
  void **v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t v36;
  char v37[8];
  __int128 v38;
  uint64_t v39;
  char v40[8];
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  __int128 v44;
  uint64_t v45;
  char v46[8];
  __int128 v47;
  uint64_t v48;
  char v49[8];
  __int128 v50;
  __int128 __src;
  char v52[16];

  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  v2 = (uint64_t *)(a1 + 8);
  sub_100407BF8((void **)a1, 0xEuLL);
  v50 = xmmword_101C15950;
  __src = xmmword_101C15940;
  v47 = xmmword_101C15980;
  v48 = 0x4031F9C39BCBA301;
  v45 = 0x3FF02C4F7EC3547ELL;
  v43[0] = xmmword_101C159B0;
  v43[1] = unk_101C159C0;
  v44 = xmmword_101C15998;
  sub_100B2641C(a1, *v2, (char *)&__src, v52, 2);
  sub_100B2641C(a1, *v2, (char *)&v50, (char *)&__src, 2);
  sub_100B2641C(a1, *v2, (char *)&v47, v49, 3);
  sub_100B2641C(a1, *v2, (char *)&v44, v46, 3);
  sub_100B2641C(a1, *v2, (char *)v43, (char *)&v44, 4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  sub_100407BF8((void **)(a1 + 24), 0xEuLL);
  v41 = xmmword_101C15970;
  v42 = xmmword_101C15960;
  v38 = xmmword_101C159D0;
  v39 = 0x4042258EB8950764;
  v35 = xmmword_101C159E8;
  v36 = 0x3FF0355FFE6D58C9;
  v34[0] = xmmword_101C15A00;
  v34[1] = unk_101C15A10;
  sub_100B2641C(a1 + 24, *(_QWORD *)(a1 + 32), (char *)&v42, (char *)v43, 2);
  sub_100B2641C(a1 + 24, *(_QWORD *)(a1 + 32), (char *)&v41, (char *)&v42, 2);
  sub_100B2641C(a1 + 24, *(_QWORD *)(a1 + 32), (char *)&v38, v40, 3);
  sub_100B2641C(a1 + 24, *(_QWORD *)(a1 + 32), (char *)&v35, v37, 3);
  sub_100B2641C(a1 + 24, *(_QWORD *)(a1 + 32), (char *)v34, (char *)&v35, 4);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021726F0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(void **)a1;
    v4 = *(_QWORD *)(a1 + 8);
    sub_100B235E4((double **)a1, v23);
    v6 = SHIBYTE(v26);
    v7 = *(_BYTE **)v23;
    sub_100B235E4((double **)(a1 + 24), __p);
    v8 = v23;
    if (v6 < 0)
      v8 = v7;
    *(_DWORD *)buf = 134349570;
    if (v22 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    v29 = (v4 - (uint64_t)v5) >> 3;
    v30 = 2082;
    v31 = v8;
    v32 = 2082;
    v33 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GPSODOM,MA-OTA,DistanceMultiplier,Default Model Coefficients,Size,%{public}lu,HikeWalk,%{public}s,Run,%{public}s", buf, 0x20u);
    if (v22 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26) < 0)
      operator delete(*(void **)v23);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021726F0);
    v10 = qword_1022A0078;
    v12 = *(void **)a1;
    v11 = *(_QWORD *)(a1 + 8);
    sub_100B235E4((double **)a1, __p);
    v13 = v22;
    v14 = (void **)__p[0];
    sub_100B235E4((double **)(a1 + 24), v19);
    v15 = __p;
    if (v13 < 0)
      v15 = v14;
    *(_DWORD *)v23 = 134349570;
    if (v20 >= 0)
      v16 = v19;
    else
      v16 = (void **)v19[0];
    *(_QWORD *)&v23[4] = (v11 - (uint64_t)v12) >> 3;
    v24 = 2082;
    v25 = v15;
    v26 = 2082;
    v27 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "GPSODOM,MA-OTA,DistanceMultiplier,Default Model Coefficients,Size,%{public}lu,HikeWalk,%{public}s,Run,%{public}s", v23, 32);
    v18 = v17;
    if (v20 < 0)
      operator delete(v19[0]);
    if (v22 < 0)
      operator delete(__p[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLDistanceMultiplierSettings::setDefaults()", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
}

void sub_100B23D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B23D84(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  uint64_t v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *__p[2];
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _BYTE v64[12];
  char v65;
  int v66;
  _BYTE *v67;
  uint8_t buf[8];
  char v69;

  sub_100119F3C(v63);
  if (sub_100006BB4(a2, "RhythmicDistanceMultiplierSettings", v63))
  {
    sub_100B2388C(a1);
    sub_100119F3C(v62);
    if (!sub_100006BB4((uint64_t)v63, "ModelCoefficients", v62) || *(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      goto LABEL_63;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021726F0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GPSODOM,MA-OTA,DistanceMultiplier,Read model coefficients from settings", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021726F0);
      LOWORD(v55) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM,MA-OTA,DistanceMultiplier,Read model coefficients from settings", &v55, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDistanceMultiplierSettings::readConfig(const CLNameValuePair &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v55 = 0u;
    sub_1015A2E04(__p, "DistanceMultiplierModel2a_1");
    *(_QWORD *)&v55 = sub_100B24908((uint64_t)v62, (const char *)__p, *(double *)&v55, -0.1, 20.0);
    if (v54 < 0)
      operator delete(__p[0]);
    sub_1015A2E04(v51, "DistanceMultiplierModel2a_2");
    *((_QWORD *)&v55 + 1) = sub_100B24908((uint64_t)v62, (const char *)v51, *((double *)&v55 + 1), -0.1, 20.0);
    if (v52 < 0)
      operator delete(v51[0]);
    sub_1015A2E04(v49, "DistanceMultiplierModel2b_1");
    *(_QWORD *)&v56 = sub_100B24908((uint64_t)v62, (const char *)v49, *(double *)&v56, -0.1, 20.0);
    if (v50 < 0)
      operator delete(v49[0]);
    sub_1015A2E04(v47, "DistanceMultiplierModel2b_2");
    *((_QWORD *)&v56 + 1) = sub_100B24908((uint64_t)v62, (const char *)v47, *((double *)&v56 + 1), -0.1, 20.0);
    if (v48 < 0)
      operator delete(v47[0]);
    sub_1015A2E04(v45, "DistanceMultiplierModel3a_1");
    *(_QWORD *)&v57 = sub_100B24908((uint64_t)v62, (const char *)v45, *(double *)&v57, -0.1, 20.0);
    if (v46 < 0)
      operator delete(v45[0]);
    sub_1015A2E04(v43, "DistanceMultiplierModel3a_2");
    *((_QWORD *)&v57 + 1) = sub_100B24908((uint64_t)v62, (const char *)v43, *((double *)&v57 + 1), -0.1, 20.0);
    if (v44 < 0)
      operator delete(v43[0]);
    sub_1015A2E04(v41, "DistanceMultiplierModel3a_3");
    *(_QWORD *)&v58 = sub_100B24908((uint64_t)v62, (const char *)v41, *(double *)&v58, -0.1, 20.0);
    if (v42 < 0)
      operator delete(v41[0]);
    sub_1015A2E04(v39, "DistanceMultiplierModel3b_1");
    *((_QWORD *)&v58 + 1) = sub_100B24908((uint64_t)v62, (const char *)v39, *((double *)&v58 + 1), -0.1, 20.0);
    if (v40 < 0)
      operator delete(v39[0]);
    sub_1015A2E04(v37, "DistanceMultiplierModel3b_2");
    *(_QWORD *)&v59 = sub_100B24908((uint64_t)v62, (const char *)v37, *(double *)&v59, -0.1, 20.0);
    if (v38 < 0)
      operator delete(v37[0]);
    sub_1015A2E04(v35, "DistanceMultiplierModel3b_3");
    *((_QWORD *)&v59 + 1) = sub_100B24908((uint64_t)v62, (const char *)v35, *((double *)&v59 + 1), -0.1, 20.0);
    if (v36 < 0)
      operator delete(v35[0]);
    sub_1015A2E04(v33, "DistanceMultiplierModel4_1");
    *(_QWORD *)&v60 = sub_100B24908((uint64_t)v62, (const char *)v33, *(double *)&v60, -0.1, 20.0);
    if (v34 < 0)
      operator delete(v33[0]);
    sub_1015A2E04(v31, "DistanceMultiplierModel4_2");
    *((_QWORD *)&v60 + 1) = sub_100B24908((uint64_t)v62, (const char *)v31, *((double *)&v60 + 1), -0.1, 20.0);
    if (v32 < 0)
      operator delete(v31[0]);
    sub_1015A2E04(v29, "DistanceMultiplierModel4_3");
    *(_QWORD *)&v61 = sub_100B24908((uint64_t)v62, (const char *)v29, *(double *)&v61, -0.1, 20.0);
    if (v30 < 0)
      operator delete(v29[0]);
    sub_1015A2E04(v27, "DistanceMultiplierModel4_4");
    *((_QWORD *)&v61 + 1) = sub_100B24908((uint64_t)v62, (const char *)v27, *((double *)&v61 + 1), -0.1, 20.0);
    if (v28 < 0)
      operator delete(v27[0]);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    sub_10025EA00(&v24, &v55, (uint64_t)v62, 0xEuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021726F0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      sub_100B235E4((double **)&v24, buf);
      v6 = v69 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v64 = 136446210;
      *(_QWORD *)&v64[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GPSODOM,MA-OTA,DistanceMultiplier,Model Coefficients from Mobile Asset,%{public}s", v64, 0xCu);
      if (v69 < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021726F0);
      v17 = qword_1022A0078;
      sub_100B235E4((double **)&v24, v64);
      if (v65 >= 0)
        v18 = v64;
      else
        v18 = *(_BYTE **)v64;
      v66 = 136446210;
      v67 = v18;
      LODWORD(v23) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 1, "GPSODOM,MA-OTA,DistanceMultiplier,Model Coefficients from Mobile Asset,%{public}s", &v66, v23);
      v20 = v19;
      if (v65 < 0)
        operator delete(*(void **)v64);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDistanceMultiplierSettings::readConfig(const CLNameValuePair &)", "%s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
    v7 = (v25 - (_BYTE *)v24) >> 3;
    v8 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
    if ((_DWORD)v7 == (_DWORD)v8)
    {
      if (&v24 != (void **)a1)
        sub_10034F2B0((char *)a1, (char *)v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 3);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021726F0);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "GPSODOM,MA-OTA,DistanceMultiplier,Model Coefficients Size Mismatch", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021726F0);
        *(_WORD *)v64 = 0;
        LODWORD(v23) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM,MA-OTA,DistanceMultiplier,Model Coefficients Size Mismatch", v64, v23);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLDistanceMultiplierSettings::readConfig(const CLNameValuePair &)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
    }
    if (v24)
    {
      v25 = v24;
      operator delete(v24);
    }
    if ((_DWORD)v7 == (_DWORD)v8)
LABEL_63:
      v10 = 1;
    else
      v10 = 0;
    sub_10011A5A8(v62);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021726F0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GPSODOM,MA-OTA,DistanceMultiplier,RhythmicDistanceMultiplierSettings settings not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021726F0);
      LOWORD(v55) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM,MA-OTA,DistanceMultiplier,RhythmicDistanceMultiplierSettings settings not available", &v55, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDistanceMultiplierSettings::readConfig(const CLNameValuePair &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v10 = 0;
  }
  sub_10011A5A8(v63);
  return v10;
}

void sub_100B24784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  if (__p)
    operator delete(__p);
  sub_10011A5A8(&a71);
  sub_10011A5A8(&STACK[0x200]);
  _Unwind_Resume(a1);
}

double sub_100B24908(uint64_t a1, const char *a2, double a3, double a4, double a5)
{
  double v7;
  uint64_t *v8;
  NSObject *v10;
  uint64_t *v11;
  const char *v13;
  uint8_t *v14;
  double v15;
  int v16;
  uint64_t *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  uint64_t *v21;
  __int16 v22;
  int v23;

  v7 = a3;
  v8 = (uint64_t *)a2;
  v15 = a3;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  if (sub_1001FD98C(a1, a2, &v15))
  {
    if (v15 >= a4 && v15 <= a5)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021726F0);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v11 = v8;
        if (*((char *)v8 + 23) < 0)
          v11 = (uint64_t *)*v8;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = (int)v15;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "GPSODOM,MA-OTA,CLGpsOdometryMobileAssetReader,read,%{public}s,value,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021726F0);
        if (*((char *)v8 + 23) < 0)
          v8 = (uint64_t *)*v8;
        v16 = 136446466;
        v17 = v8;
        v18 = 1026;
        v19 = (int)v15;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM,MA-OTA,CLGpsOdometryMobileAssetReader,read,%{public}s,value,%{public}d", &v16, 18);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "T getField(const CLNameValuePair &, const std::string, T, T, T) [T = double]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      return v15;
    }
  }
  return v7;
}

_QWORD *sub_100B24B48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_10025EA00(a2, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
}

_QWORD *sub_100B24B64@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_10025EA00(a2, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
}

void sub_100B24B80(double *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *__p[2];
  char v38;
  BOOL v39;
  int v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;

  v39 = *(_BYTE *)a1;
  if (sub_1001E4874(a2, "Enable", &v39))
  {
    *(_BYTE *)a1 = v39;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021726F0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)a1;
      *(_DWORD *)buf = 67240192;
      v55 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,MA-OTA,activity enabled,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021726F0);
      v23 = *(unsigned __int8 *)a1;
      v40 = 67240192;
      v41 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM-MM,MA-OTA,activity enabled,%{public}d", &v40, 8);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLMMOdometryActivitySettings::fillFromMobileAssets(const CLNameValuePair &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }
  sub_1015A2E04(__p, "RoadCachingRadiusMin");
  a1[1] = sub_100B24908(a2, (const char *)__p, a1[1], 50.0, 3000.0);
  if (v38 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(v35, "RoadCachingRadiusMax");
  a1[2] = sub_100B24908(a2, (const char *)v35, a1[2], 50.0, 3000.0);
  if (v36 < 0)
    operator delete(v35[0]);
  sub_1015A2E04(v33, "AStarSearchRadiusMin");
  a1[5] = sub_100B24908(a2, (const char *)v33, a1[5], 50.0, 3000.0);
  if (v34 < 0)
    operator delete(v33[0]);
  sub_1015A2E04(v31, "AStarSearchRadiusMax");
  a1[6] = sub_100B24908(a2, (const char *)v31, a1[6], 50.0, 3000.0);
  if (v32 < 0)
    operator delete(v31[0]);
  sub_1015A2E04(v29, "SnappingRadiusMin");
  a1[3] = sub_100B24908(a2, (const char *)v29, a1[3], 50.0, 3000.0);
  if (v30 < 0)
    operator delete(v29[0]);
  sub_1015A2E04(v27, "SnappingRadiusMax");
  a1[4] = sub_100B24908(a2, (const char *)v27, a1[4], 50.0, 3000.0);
  if (v28 < 0)
    operator delete(v27[0]);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021726F0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v7 = *(unsigned __int8 *)a1;
    v8 = *((_QWORD *)a1 + 1);
    v9 = *((_QWORD *)a1 + 2);
    v10 = *((_QWORD *)a1 + 3);
    v11 = *((_QWORD *)a1 + 4);
    v12 = *((_QWORD *)a1 + 5);
    v13 = *((_QWORD *)a1 + 6);
    *(_DWORD *)buf = 67241728;
    v55 = v7;
    v56 = 2050;
    v57 = v8;
    v58 = 2050;
    v59 = v9;
    v60 = 2050;
    v61 = v10;
    v62 = 2050;
    v63 = v11;
    v64 = 2050;
    v65 = v12;
    v66 = 2050;
    v67 = v13;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,settings,enable,%{public}d,roadCache,%{public}.2lf,%{public}.2lf,snapRadius,%{public}.2lf,%{public}.2lf,aSearch,%{public}.2lf,%{public}.2lf", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021726F0);
    v14 = *(unsigned __int8 *)a1;
    v15 = *((_QWORD *)a1 + 1);
    v16 = *((_QWORD *)a1 + 2);
    v17 = *((_QWORD *)a1 + 3);
    v18 = *((_QWORD *)a1 + 4);
    v19 = *((_QWORD *)a1 + 5);
    v20 = *((_QWORD *)a1 + 6);
    v40 = 67241728;
    v41 = v14;
    v42 = 2050;
    v43 = v15;
    v44 = 2050;
    v45 = v16;
    v46 = 2050;
    v47 = v17;
    v48 = 2050;
    v49 = v18;
    v50 = 2050;
    v51 = v19;
    v52 = 2050;
    v53 = v20;
    LODWORD(v26) = 68;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,MA-OTA,settings,enable,%{public}d,roadCache,%{public}.2lf,%{public}.2lf,snapRadius,%{public}.2lf,%{public}.2lf,aSearch,%{public}.2lf,%{public}.2lf", &v40, v26);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLMMOdometryActivitySettings::fillFromMobileAssets(const CLNameValuePair &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
}

void sub_100B250C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

double sub_100B25150(uint64_t a1)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t **v4;
  double result;
  int v6;
  int v7;
  int v8;
  int *v9;

  v8 = 0;
  v9 = &v8;
  v2 = sub_100B26628((uint64_t **)a1, &v8, (uint64_t)&unk_101B9EB60, &v9);
  v2[11] = 0;
  *(_OWORD *)(v2 + 9) = 0u;
  *(_OWORD *)(v2 + 7) = 0u;
  *(_OWORD *)(v2 + 5) = 0u;
  v8 = 0;
  v9 = &v8;
  *((_BYTE *)sub_100B26628((uint64_t **)a1, &v8, (uint64_t)&unk_101B9EB60, &v9) + 40) = 1;
  v8 = 0;
  v9 = &v8;
  *((_OWORD *)sub_100B26628((uint64_t **)a1, &v8, (uint64_t)&unk_101B9EB60, &v9) + 3) = xmmword_101C158C0;
  v7 = 0;
  v9 = &v7;
  *((_OWORD *)sub_100B26628((uint64_t **)a1, &v7, (uint64_t)&unk_101B9EB60, &v9) + 5) = xmmword_101C158D0;
  v6 = 0;
  v9 = &v6;
  *((_OWORD *)sub_100B26628((uint64_t **)a1, &v6, (uint64_t)&unk_101B9EB60, &v9) + 4) = xmmword_101C158E0;
  v8 = 1;
  v9 = &v8;
  v3 = sub_100B26628((uint64_t **)a1, &v8, (uint64_t)&unk_101B9EB60, &v9);
  v3[11] = 0;
  *(_OWORD *)(v3 + 9) = 0u;
  *(_OWORD *)(v3 + 7) = 0u;
  *(_OWORD *)(v3 + 5) = 0u;
  v8 = 1;
  v9 = &v8;
  *((_BYTE *)sub_100B26628((uint64_t **)a1, &v8, (uint64_t)&unk_101B9EB60, &v9) + 40) = 1;
  v8 = 1;
  v9 = &v8;
  *((_OWORD *)sub_100B26628((uint64_t **)a1, &v8, (uint64_t)&unk_101B9EB60, &v9) + 3) = xmmword_101C158F0;
  v7 = 1;
  v9 = &v7;
  *((_OWORD *)sub_100B26628((uint64_t **)a1, &v7, (uint64_t)&unk_101B9EB60, &v9) + 5) = xmmword_101C15900;
  v6 = 1;
  v9 = &v6;
  *((_OWORD *)sub_100B26628((uint64_t **)a1, &v6, (uint64_t)&unk_101B9EB60, &v9) + 4) = xmmword_101C158E0;
  v8 = 2;
  v9 = &v8;
  v4 = sub_100B26628((uint64_t **)a1, &v8, (uint64_t)&unk_101B9EB60, &v9);
  v4[11] = 0;
  *(_OWORD *)(v4 + 9) = 0u;
  *(_OWORD *)(v4 + 7) = 0u;
  *(_OWORD *)(v4 + 5) = 0u;
  v8 = 2;
  v9 = &v8;
  *((_BYTE *)sub_100B26628((uint64_t **)a1, &v8, (uint64_t)&unk_101B9EB60, &v9) + 40) = 0;
  v8 = 2;
  v9 = &v8;
  *((_OWORD *)sub_100B26628((uint64_t **)a1, &v8, (uint64_t)&unk_101B9EB60, &v9) + 3) = xmmword_101C15910;
  v7 = 2;
  v9 = &v7;
  *((_OWORD *)sub_100B26628((uint64_t **)a1, &v7, (uint64_t)&unk_101B9EB60, &v9) + 5) = xmmword_101C15920;
  v6 = 2;
  v9 = &v6;
  *((_OWORD *)sub_100B26628((uint64_t **)a1, &v6, (uint64_t)&unk_101B9EB60, &v9) + 4) = xmmword_101C158E0;
  result = 90.0;
  *(_OWORD *)(a1 + 24) = xmmword_101C15930;
  return result;
}

__n128 sub_100B25448@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *i;
  int v5;
  uint64_t **v6;
  __int128 v7;
  __n128 result;
  int v9;
  int *v10;

  v9 = a2;
  for (i = *(uint64_t **)(a1 + 8); i; i = (uint64_t *)*i)
  {
    v5 = *((_DWORD *)i + 8);
    if (v5 <= a2)
    {
      if (v5 >= a2)
      {
        v10 = &v9;
        v6 = sub_100B26628((uint64_t **)a1, &v9, (uint64_t)&unk_101B9EB60, &v10);
        v7 = *(_OWORD *)(v6 + 7);
        *(_OWORD *)a3 = *(_OWORD *)(v6 + 5);
        *(_OWORD *)(a3 + 16) = v7;
        result = *(__n128 *)(v6 + 9);
        *(__n128 *)(a3 + 32) = result;
        *(_QWORD *)(a3 + 48) = v6[11];
        return result;
      }
      ++i;
    }
  }
  *(_QWORD *)(a3 + 48) = 0;
  result.n128_u64[0] = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  return result;
}

BOOL sub_100B254E4(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t *i;
  int v6;
  NSObject *v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  uint64_t **v11;
  uint64_t *j;
  int v13;
  NSObject *v14;
  uint64_t **v15;
  uint64_t *v16;
  int v17;
  NSObject *v18;
  uint64_t **v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[2];
  int v44;
  uint64_t v45;
  uint8_t buf[1640];

  sub_100119F3C(v43);
  v4 = sub_100006BB4(a2, "RhythmicMMOdometerSettings", v43);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021726F0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,RhythmicMapMatchedOdometerSettings settings not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021726F0);
      LOWORD(v42[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,MA-OTA,RhythmicMapMatchedOdometerSettings settings not available", v42, 2);
      v9 = (char *)v8;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMMOdometrySettings::readConfig(const CLNameValuePair &)", "%s\n", v8);
      if (v9 != (char *)buf)
        free(v9);
    }
    goto LABEL_63;
  }
  sub_100B25150(a1);
  sub_100119F3C(v42);
  if (sub_100006BB4((uint64_t)v43, "Walking", v42))
  {
    for (i = *(uint64_t **)(a1 + 8); i; i = (uint64_t *)*i)
    {
      v6 = *((_DWORD *)i + 8);
      if (v6 <= 0)
      {
        if ((v6 & 0x80000000) == 0)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021726F0);
          v10 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,Read Walking activity settings", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021726F0);
            LOWORD(v41[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,MA-OTA,Read Walking activity settings", v41, 2);
            v36 = (char *)v35;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLMMOdometrySettings::readConfig(const CLNameValuePair &)", "%s\n", v35);
            if (v36 != (char *)buf)
              free(v36);
          }
          LODWORD(v41[0]) = 0;
          *(_QWORD *)buf = v41;
          v11 = sub_100B26628((uint64_t **)a1, (int *)v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
          sub_100B24B80((double *)v11 + 5, (uint64_t)v42);
          break;
        }
        ++i;
      }
    }
  }
  sub_100119F3C(v41);
  if (sub_100006BB4((uint64_t)v43, "Running", v41))
  {
    for (j = *(uint64_t **)(a1 + 8); j; j = (uint64_t *)*j)
    {
      v13 = *((_DWORD *)j + 8);
      if (v13 <= 1)
      {
        if (v13 == 1)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021726F0);
          v14 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,Read Running activity settings", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021726F0);
            LOWORD(v40[0]) = 0;
            LODWORD(v37) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,MA-OTA,Read Running activity settings", v40, v37);
            v32 = (char *)v31;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLMMOdometrySettings::readConfig(const CLNameValuePair &)", "%s\n", v31);
            if (v32 != (char *)buf)
              free(v32);
          }
          LODWORD(v40[0]) = 1;
          *(_QWORD *)buf = v40;
          v15 = sub_100B26628((uint64_t **)a1, (int *)v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
          sub_100B24B80((double *)v15 + 5, (uint64_t)v41);
          break;
        }
        ++j;
      }
    }
  }
  sub_100119F3C(v40);
  if (!sub_100006BB4((uint64_t)v43, "Cycling", v40))
    goto LABEL_50;
  v16 = *(uint64_t **)(a1 + 8);
  if (!v16)
    goto LABEL_50;
  while (1)
  {
    v17 = *((_DWORD *)v16 + 8);
    if (v17 <= 2)
      break;
LABEL_42:
    v16 = (uint64_t *)*v16;
    if (!v16)
      goto LABEL_50;
  }
  if (v17 != 2)
  {
    ++v16;
    goto LABEL_42;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021726F0);
  v18 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,Read Cycling activity settings", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021726F0);
    LOWORD(v44) = 0;
    LODWORD(v37) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,MA-OTA,Read Cycling activity settings", &v44, v37);
    v34 = (char *)v33;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMMOdometrySettings::readConfig(const CLNameValuePair &)", "%s\n", v33);
    if (v34 != (char *)buf)
      free(v34);
  }
  v44 = 2;
  *(_QWORD *)buf = &v44;
  v19 = sub_100B26628((uint64_t **)a1, &v44, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  sub_100B24B80((double *)v19 + 5, (uint64_t)v40);
LABEL_50:
  v39 = *(_QWORD *)(a1 + 24);
  if (sub_1001FD98C((uint64_t)v43, "MinTimeSeparationForMapDataRecache", &v39))
  {
    *(_QWORD *)(a1 + 24) = v39;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021726F0);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v21 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,Read Min time separation settings, %{public}.1lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021726F0);
      v25 = *(_QWORD *)(a1 + 24);
      v44 = 134349056;
      v45 = v25;
      LODWORD(v37) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,MA-OTA,Read Min time separation settings, %{public}.1lf", &v44, v37);
      v27 = (char *)v26;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMMOdometrySettings::readConfig(const CLNameValuePair &)", "%s\n", v26);
      if (v27 != (char *)buf)
        free(v27);
    }
  }
  v38 = *(_QWORD *)(a1 + 32);
  if (sub_1001FD98C((uint64_t)v43, "DistanceBufferForMapDataCache", &v38))
  {
    *(_QWORD *)(a1 + 32) = v38;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021726F0);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v23 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,Read distance buffer settings, %{public}.1lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021726F0);
      v28 = *(_QWORD *)(a1 + 32);
      v44 = 134349056;
      v45 = v28;
      LODWORD(v37) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,MA-OTA,Read distance buffer settings, %{public}.1lf", &v44, v37);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMMOdometrySettings::readConfig(const CLNameValuePair &)", "%s\n", v29);
      if (v30 != (char *)buf)
        free(v30);
    }
  }
  sub_10011A5A8(v40);
  sub_10011A5A8(v41);
  sub_10011A5A8(v42);
LABEL_63:
  sub_10011A5A8(v43);
  return v4;
}

void sub_100B25EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_10011A5A8((uint64_t *)va);
  sub_10011A5A8(va1);
  _Unwind_Resume(a1);
}

void sub_100B25F60(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  _WORD v11[8];
  uint8_t buf[1640];

  sub_100B26248(a1);
  if ((sub_100B23D84(a1, a2) & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021726F0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GPSODOM,MA-OTA,DistanceMultiplier,Distanace Multiplier config is not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021726F0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM,MA-OTA,DistanceMultiplier,Distanace Multiplier config is not available", v11, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  if (!sub_100B254E4(a1 + 48, a2))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021726F0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,RhythmicOdometerMM config not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021726F0);
      v11[0] = 0;
      LODWORD(v10) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM-MM,MA-OTA,RhythmicOdometerMM config not available", v11, v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_100B26248(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  sub_100B26370(__p);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 16) = v8;
  __p[1] = 0;
  v8 = 0;
  __p[0] = 0;
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
    v3 = __p[0];
  }
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  v10 = 0;
  v9 = 0uLL;
  if (v3)
  {
    __p[1] = v3;
    operator delete(v3);
  }
  sub_100B263C4((uint64_t)__p);
  v4 = a1 + 56;
  sub_100008848(a1 + 48, *(_QWORD **)(a1 + 56));
  v5 = __p[1];
  *(void **)(a1 + 48) = __p[0];
  *(_QWORD *)(a1 + 56) = v5;
  v6 = v8;
  *(_QWORD *)(a1 + 64) = v8;
  if (v6)
  {
    v5[2] = v4;
    __p[0] = &__p[1];
    __p[1] = 0;
    v8 = 0;
    v5 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v4;
  }
  *(_OWORD *)(a1 + 72) = v9;
  sub_100008848((uint64_t)__p, v5);
}

void sub_100B26344(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

_OWORD *sub_100B26370(_OWORD *a1)
{
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  sub_100B2388C((uint64_t)a1);
  return a1;
}

void sub_100B263A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  sub_1018FF474(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100B263C4(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_101C15930;
  sub_100B25150(a1);
  return a1;
}

void sub_100B26404(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_100B2641C(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      sub_100259694();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_10025E6A0(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = sub_100787574((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_100B265F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_100B26628(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x60uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((_QWORD *)v11 + 11) = 0;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_100B266F8(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v6[232];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 48))(*(_QWORD *)(a3 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a3 + 48) + 24))(*(_QWORD *)(a3 + 48), v6, a1);
    if (v6[208])
    {
      sub_1004C5730(*(_QWORD *)(a3 + 16));
      sub_1004C5730(*(_QWORD *)(a3 + 24));
      return sub_1004C5730(*(_QWORD *)(a3 + 40));
    }
  }
  return result;
}

uint64_t sub_100B267A0(double a1, uint64_t a2, _QWORD **a3)
{
  if ((*(unsigned int (**)(_QWORD *))(*a3[5] + 48))(a3[5])
    && (*(unsigned int (**)(_QWORD *, double))(*a3[2] + 48))(a3[2], a1))
  {
    return (*(uint64_t (**)(_QWORD *, double))(*a3[3] + 48))(a3[3], a1);
  }
  else
  {
    return 0;
  }
}

void sub_100B26818(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v13;
  float v14;
  BOOL v16;
  float v17;
  float v18;
  NSObject *v19;
  double v20;
  double v21;
  _BOOL4 v22;
  _BOOL4 v23;
  int v24;
  float v25;
  int v26;
  BOOL v27;
  double v28;
  double v29;
  _BOOL4 v30;
  _BOOL4 v31;
  const char *v32;
  uint8_t *v33;
  double v34;
  int v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  _BOOL4 v44;
  __int16 v45;
  _BOOL4 v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  int v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  uint8_t buf[4];
  double v60;
  __int16 v61;
  _BYTE v62[10];
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  _BOOL4 v67;
  __int16 v68;
  _BOOL4 v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  int v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;

  v4 = *(_DWORD *)(a1 + 832);
  v5 = *(double *)(a1 + 648);
  if (v5 <= 8.0)
    v7 = *(double *)(a1 + 648);
  else
    v7 = 8.0;
  v8 = 2.0;
  v6 = *(double *)(a1 + 840);
  if (v6 <= 2.0)
    v9 = *(double *)(a1 + 840);
  else
    v9 = 2.0;
  v10 = fmaxf(v7, 0.0);
  if (v9 >= -2.0)
    v11 = v9;
  else
    v11 = -2.0;
  if (v10 < 0.3 || v10 > 0.5)
  {
    v8 = 1.5;
    if (v10 >= 0.3)
      v8 = (float)(v10 * -0.94) + v10 * v10 * 0.699999988 + 2.29999995;
  }
  v13 = *(float *)(a1 + 300);
  sub_100AD5268(a1, (uint64_t)buf);
  v14 = *(float *)&v62[6];
  v16 = *(double *)(a1 + 616) <= 0.0 || *(_DWORD *)(a1 + 832) == 0 || v4 == 3;
  v17 = *(float *)&v62[6];
  if (!v16)
  {
    if (v4 == 1)
    {
      v27 = v11 <= 0.0 || v7 <= 0.0;
      v17 = (float)(v8 * 2.4) + (float)(v11 * 4.4);
      if (v27)
        v17 = v8;
      if (v17 < *(float *)&v62[6])
        v17 = *(float *)&v62[6];
    }
    else if (v8 >= *(float *)&v62[6])
    {
      v17 = v8;
    }
    else
    {
      v17 = *(float *)&v62[6];
    }
  }
  if (v17 >= 1.5)
    v18 = v17;
  else
    v18 = 1.5;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102172760);
  v19 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v20 = *(double *)(a1 + 120);
    v21 = *(double *)(a1 + 128);
    v22 = *(double *)(a1 + 616) > 0.0;
    v23 = *(_DWORD *)(a1 + 832) != 0;
    *(_DWORD *)buf = 134220800;
    v60 = v20;
    v61 = 2048;
    *(double *)v62 = v21;
    *(_WORD *)&v62[8] = 2048;
    v63 = v21 - v20;
    v64 = 2048;
    v65 = v10;
    v66 = 1024;
    v67 = v22;
    v68 = 1024;
    v69 = v23;
    v70 = 2048;
    v71 = v13;
    v72 = 2048;
    v73 = v11;
    v74 = 1024;
    v75 = v4;
    v76 = 2048;
    v77 = v8;
    v78 = 2048;
    v79 = v14;
    v80 = 2048;
    v81 = v18;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "OutdoorWheelchair, beginTime, %f, endTime, %f, duration(s), %f,gpsSpeed,%.2f, gpsAvail, %d, elevAvail, %d, pushVM,%.1f, verticalSpeed, %.3f, gradeType, %d, metsFromGps,%.1f, metsFromPushes, %.1f, mets, %.1f", buf, 0x6Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102172760);
    v28 = *(double *)(a1 + 120);
    v29 = *(double *)(a1 + 128);
    v30 = *(double *)(a1 + 616) > 0.0;
    v31 = *(_DWORD *)(a1 + 832) != 0;
    v35 = 134220800;
    v36 = v28;
    v37 = 2048;
    v38 = v29;
    v39 = 2048;
    v40 = v29 - v28;
    v41 = 2048;
    v42 = v10;
    v43 = 1024;
    v44 = v30;
    v45 = 1024;
    v46 = v31;
    v47 = 2048;
    v48 = v13;
    v49 = 2048;
    v50 = v11;
    v51 = 1024;
    v52 = v4;
    v53 = 2048;
    v54 = v8;
    v55 = 2048;
    v56 = v14;
    v57 = 2048;
    v58 = v18;
    LODWORD(v34) = 110;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "OutdoorWheelchair, beginTime, %f, endTime, %f, duration(s), %f,gpsSpeed,%.2f, gpsAvail, %d, elevAvail, %d, pushVM,%.1f, verticalSpeed, %.3f, gradeType, %d, metsFromGps,%.1f, metsFromPushes, %.1f, mets, %.1f", COERCE_DOUBLE(&v35), v34);
    v33 = (uint8_t *)v32;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieOutdoorWheelchairModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
  if (*(_QWORD *)(a1 + 344) == 21)
    v24 = 18;
  else
    v24 = 17;
  v25 = 16.0;
  if (v18 <= 16.0)
    v25 = v18;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 20) = v25;
  *(_DWORD *)(a2 + 24) = 0;
  *(float *)(a2 + 12) = v25;
  *(float *)(a2 + 28) = v25;
  if (v18 == 1.8)
    v26 = 3;
  else
    v26 = 0;
  *(_DWORD *)(a2 + 32) = v26;
  *(_DWORD *)(a2 + 36) = v24;
}

void sub_100B26C84(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100B26CB0(uint64_t a1)
{
  CLMotionActivity::getInit((CLMotionActivity *)a1);
  *(_QWORD *)(a1 + 144) = a1 + 144;
  *(_QWORD *)(a1 + 152) = a1 + 144;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)a1 = 0;
  return a1;
}

void sub_100B26CE8(uint64_t a1, int a2, unsigned __int8 *src)
{
  *(_DWORD *)a1 = a2;
  uuid_copy((unsigned __int8 *)(a1 + 168), src);
}

void sub_100B26CF4(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  uuid_clear((unsigned __int8 *)(a1 + 168));
}

double sub_100B26CFC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102172790;
  *(_QWORD *)(a1 + 8) = 0x1000000000;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 233) = 0;
  *(_BYTE *)(a1 + 244) = 1;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0x2000000000;
  *(_QWORD *)(a1 + 408) = 0;
  *(_WORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 420) = 973279855;
  *(int32x2_t *)(a1 + 424) = vdup_n_s32(0x3A03126Fu);
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 1;
  *(_DWORD *)(a1 + 480) = 32;
  *(_DWORD *)(a1 + 492) = 0;
  *(_QWORD *)(a1 + 484) = 0;
  *(_DWORD *)(a1 + 496) = 1065353216;
  *(_BYTE *)(a1 + 500) = 0;
  *(_QWORD *)(a1 + 504) = 0xA00000000;
  *(_DWORD *)(a1 + 672) = 1065353216;
  *(_QWORD *)(a1 + 680) = 0x500000000;
  *(_QWORD *)(a1 + 728) = 0x500000000;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 813) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_QWORD *)&result = 1003306496;
  *(_OWORD *)(a1 + 212) = xmmword_101C15A80;
  return result;
}

int32x2_t sub_100B26DCC(uint64_t a1)
{
  int32x2_t result;

  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 452) = 0;
  *(_QWORD *)(a1 + 444) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_BYTE *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 0;
  *(_DWORD *)(a1 + 420) = 973279855;
  result = vdup_n_s32(0x3A03126Fu);
  *(int32x2_t *)(a1 + 424) = result;
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 244) = 1;
  *(_QWORD *)(a1 + 484) = 0;
  *(_QWORD *)(a1 + 492) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 500) = 0;
  *(_DWORD *)(a1 + 672) = 1065353216;
  *(_DWORD *)(a1 + 680) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_BYTE *)(a1 + 820) = 0;
  return result;
}

void sub_100B26E68(_DWORD *a1, unsigned int a2)
{
  float v3;
  float v4;
  BOOL v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  double v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  double v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  a1[117] = a2;
  if (a2)
  {
    a1[118] = 1;
    a1[120] = 32;
    v3 = (float)a2;
    v4 = 5000.0 / (float)a2;
    v5 = v4 < 1.0;
    if (v4 < 1.0)
      v4 = v4 * 32.0;
    v6 = 118;
    if (v5)
      v6 = 120;
    a1[v6] = v4;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021727D8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = a1[118];
      v9 = a1[120];
      *(_DWORD *)buf = 134218496;
      v21 = (float)(1000000.0 / v3);
      v22 = 1024;
      v23 = v8;
      v24 = 1024;
      v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "GyroInterval, GyroFreq, %.1f, rotationDecimation, %u, numSamplesForPartialGyroStats, %u", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021727D8);
      v10 = a1[118];
      v11 = a1[120];
      v14 = 134218496;
      v15 = (float)(1000000.0 / v3);
      v16 = 1024;
      v17 = v10;
      v18 = 1024;
      v19 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "GyroInterval, GyroFreq, %.1f, rotationDecimation, %u, numSamplesForPartialGyroStats, %u", COERCE_DOUBLE(&v14), 24);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CMDeviceMotionInputs::updateGyroInterval(uint32_t)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

float sub_100B270C0(uint64_t a1, float32x2_t *a2, uint64_t a3)
{
  float result;

  sub_100687774((unsigned __int16 *)(a1 + 8), (uint64_t)a2);
  sub_100B27140((float32x2_t *)(a1 + 208), a2);
  *(_QWORD *)(a1 + 228) = *(_QWORD *)(a1 + 808);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a1 + 816);
  *(_BYTE *)(a1 + 240) = sub_100B271C8(a1, *(_QWORD *)(a1 + 800), a1 + 228);
  *(_QWORD *)(a1 + 800) = a3;
  *(_DWORD *)(a1 + 808) = a2->i32[0];
  *(_DWORD *)(a1 + 812) = a2->i32[1];
  result = a2[1].f32[0];
  *(float *)(a1 + 816) = result;
  return result;
}

float32x2_t *sub_100B27140(float32x2_t *result, float32x2_t *a2)
{
  int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v2 = result->i32[0];
  v3 = result->i32[0] + 1;
  result->i32[0] = v3;
  v4 = a2[1].f32[0];
  if (v2 > 2)
  {
    v7 = result->f32[1];
    v8 = result[2].f32[0];
    result[1] = vsub_f32(result[1], vmul_n_f32(vsub_f32(result[1], *a2), v7));
    v6 = v8 - (float)(v7 * (float)(v8 - v4));
  }
  else
  {
    v5 = 1.0 / (float)v3;
    v6 = v5 * (float)((float)(result[2].f32[0] * (float)v2) + v4);
    result[1] = vmul_n_f32(vadd_f32(vmul_n_f32(result[1], (float)v2), *a2), v5);
  }
  result[2].f32[0] = v6;
  return result;
}

uint64_t sub_100B271C8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  float32x2_t *v18;
  float v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t *v23;
  float32x2_t *v24;
  uint64_t v25;
  float v26;
  int v27;
  int v28;
  float v29;
  float32x2_t v30;
  float v31;
  float32x2_t v32;
  float v33;

  v3 = *(unsigned __int16 *)(a1 + 682);
  if (*(_DWORD *)(a1 + 684) != (_DWORD)v3)
    return 0;
  v4 = a2;
  v6 = *(unsigned __int16 *)(a1 + 680);
  if (*(_QWORD *)(a1 + 688 + 8 * v6) > a2)
    return 0;
  v7 = v3 + v6 - 1;
  v8 = v7 >= v3 ? *(unsigned __int16 *)(a1 + 682) : 0;
  v9 = *(_QWORD *)(a1 + 688 + 8 * (v7 - v8));
  if (v9 + 10000 < a2)
    return 0;
  v12 = v9 >= a2;
  v13 = v9 - a2;
  if (!v12)
  {
    v14 = 0;
    v15 = (float)v13 * 0.000001;
    v16 = *(unsigned __int16 *)(a1 + 728) + (unint64_t)*(unsigned __int16 *)(a1 + 730) - 1;
    v17 = *(unsigned int *)(a1 + 732);
    if (v16 < v17)
      v17 = 0;
    v18 = (float32x2_t *)(a1 + 728 + 12 * (v16 - v17));
    v19 = v15 * v18[2].f32[0];
    v32 = vmul_n_f32(v18[1], v15);
    v33 = v19;
    do
    {
      v32.f32[v14] = -v32.f32[v14];
      ++v14;
    }
    while (v14 != 3);
    v30 = v32;
    v31 = v33;
    sub_100B278EC((float *)&v30, (uint64_t)&v32);
    *(float *)a3 = sub_1005335A4((uint64_t)&v32, (float *)a3);
    *(_DWORD *)(a3 + 4) = v20;
    *(_DWORD *)(a3 + 8) = v21;
    return 1;
  }
  if ((_DWORD)v3 == 1)
    return 1;
  v22 = 0;
  do
  {
    v23 = (unint64_t *)sub_100B27E9C((unsigned __int16 *)(a1 + 680), v22++);
    if (v4 >= *v23 && v4 < *(_QWORD *)sub_100B27E9C((unsigned __int16 *)(a1 + 680), v22))
    {
      v29 = (float)(*(_QWORD *)sub_100B27E9C((unsigned __int16 *)(a1 + 680), v22) - v4) * 0.000001;
      v24 = (float32x2_t *)sub_100687A34((unsigned __int16 *)(a1 + 728), v22);
      v25 = 0;
      v26 = v29 * v24[1].f32[0];
      v32 = vmul_n_f32(*v24, v29);
      v33 = v26;
      do
      {
        v32.f32[v25] = -v32.f32[v25];
        ++v25;
      }
      while (v25 != 3);
      v30 = v32;
      v31 = v33;
      sub_100B278EC((float *)&v30, (uint64_t)&v32);
      *(float *)a3 = sub_1005335A4((uint64_t)&v32, (float *)a3);
      *(_DWORD *)(a3 + 4) = v27;
      *(_DWORD *)(a3 + 8) = v28;
      v4 = *(_QWORD *)sub_100B27E9C((unsigned __int16 *)(a1 + 680), v22);
    }
    result = 1;
  }
  while (v22 < (unint64_t)*(unsigned __int16 *)(a1 + 682) - 1);
  return result;
}

void sub_100B2742C(uint64_t a1, float32x2_t *a2, unint64_t a3)
{
  __int32 v6;
  float v7;
  float32x2_t v8;
  float32x2_t *v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  int v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  float v22;
  float32x4_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  float v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float v35;

  if (*(_BYTE *)(a1 + 416))
  {
    if (*(_BYTE *)(a1 + 820))
    {
      *(_QWORD *)(a1 + 256) = 0;
      *(_QWORD *)(a1 + 264) = 0;
      *(_DWORD *)(a1 + 272) = 0;
      *(_BYTE *)(a1 + 244) = 1;
      v8.i32[0] = a2->i32[0];
      *(_DWORD *)(a1 + 456) = a2->i32[0];
      v6 = a2->i32[1];
      *(_DWORD *)(a1 + 460) = v6;
      v7 = a2[1].f32[0];
      *(float *)(a1 + 464) = v7;
      *(_QWORD *)(a1 + 484) = 0;
      *(_QWORD *)(a1 + 492) = 0x3F80000000000000;
      *(_DWORD *)(a1 + 504) = 0;
      *(_BYTE *)(a1 + 500) = 0;
      *(_DWORD *)(a1 + 672) = 1065353216;
      *(_BYTE *)(a1 + 820) = 0;
      v8.i32[1] = v6;
    }
    else
    {
      v8 = *(float32x2_t *)(a1 + 456);
      v7 = *(float *)(a1 + 464);
    }
    v9 = (float32x2_t *)(a1 + 444);
    v10 = (float)((float)(v7 + a2[1].f32[0]) * 0.5) - *(float *)(a1 + 452);
    v34 = vsub_f32(vmul_f32(vadd_f32(v8, *a2), (float32x2_t)0x3F0000003F000000), *(float32x2_t *)(a1 + 444));
    v35 = v10;
    v11 = *(unsigned __int16 *)(a1 + 682);
    v12 = *(unsigned int *)(a1 + 684);
    v13 = *(unsigned __int16 *)(a1 + 680);
    if (v13 + v11 >= v12)
      v14 = *(unsigned int *)(a1 + 684);
    else
      v14 = 0;
    *(_QWORD *)(a1 + 680 + 8 * (v13 + v11 - v14) + 8) = a3;
    if (v12 <= v11)
    {
      if (v13 + 1 < v12)
        LOWORD(v12) = 0;
      *(_WORD *)(a1 + 680) = v13 + 1 - v12;
    }
    else
    {
      *(_WORD *)(a1 + 682) = v11 + 1;
    }
    sub_100687774((unsigned __int16 *)(a1 + 728), (uint64_t)&v34);
    v15 = a2[1].f32[0] - *(float *)(a1 + 452);
    *(float32x2_t *)(a1 + 432) = vsub_f32(*a2, *v9);
    *(float *)(a1 + 440) = v15;
    *(_DWORD *)(a1 + 456) = a2->i32[0];
    *(_DWORD *)(a1 + 460) = a2->i32[1];
    *(_DWORD *)(a1 + 464) = a2[1].i32[0];
    v16 = *(_DWORD *)(a1 + 476) + 1;
    *(_DWORD *)(a1 + 476) = v16;
    if (v16 == *(_DWORD *)(a1 + 472))
    {
      v17 = 0;
      v18 = 0.0;
      do
      {
        v18 = v18 + (float)(*(float *)(a1 + 432 + v17) * *(float *)(a1 + 432 + v17));
        v17 += 4;
      }
      while (v17 != 12);
      v33.i32[0] = sqrtf(v18);
      sub_100AFB84C(a1 + 244, v33.f32);
      *(_DWORD *)(a1 + 476) = 0;
    }
    v19 = *(_QWORD *)(a1 + 408);
    if (v19)
    {
      v20 = a3 >= v19;
      v21 = a3 - v19;
      if (v21 != 0 && v20)
      {
        v22 = (float)(*(float *)(a1 + 440) * (float)v21) * 0.000001;
        v30 = vmul_f32(vmul_n_f32(*(float32x2_t *)(a1 + 432), (float)v21), (float32x2_t)vdup_n_s32(0x358637BDu));
        v31 = v22;
        *(double *)v23.i64 = sub_100B61FD0(&v32, (float *)&v30);
        sub_100B61EC4((uint64_t)&v32, (float *)(a1 + 484), &v33, v23);
        if ((float32x4_t *)(a1 + 484) != &v33)
          *(float32x4_t *)(a1 + 484) = v33;
      }
    }
    v24 = *(_BYTE *)(a1 + 500) + 1;
    *(_BYTE *)(a1 + 500) = v24;
    if ((*(_DWORD *)(a1 + 468) * v24) >> 4 >= 0x753)
    {
      sub_1000E2A10((unsigned __int16 *)(a1 + 504), (_OWORD *)(a1 + 484));
      *(_BYTE *)(a1 + 500) = 0;
    }
    if (*(_DWORD *)(a1 + 508) == *(unsigned __int16 *)(a1 + 506))
    {
      v25 = 0;
      v26 = 1.0;
      do
      {
        v27 = sub_100B27A04((unsigned __int16 *)(a1 + 504), v25);
        *(double *)v29.i64 = sub_100B61F24((float32x2_t *)(a1 + 484), &v32, v28);
        sub_100B61EC4(v27, v32.f32, &v33, v29);
        if (v26 >= v33.f32[3])
          v26 = v33.f32[3];
        ++v25;
      }
      while (v25 != 10);
      *(float *)(a1 + 672) = v26;
    }
    *(_QWORD *)(a1 + 408) = a3;
  }
}

float sub_100B27718(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  float result;

  *(_BYTE *)(a1 + 416) = 1;
  *(_DWORD *)(a1 + 444) = *a2;
  *(_DWORD *)(a1 + 448) = a2[1];
  *(_DWORD *)(a1 + 452) = a2[2];
  *(_DWORD *)(a1 + 420) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a3 + 4);
  result = *(float *)(a3 + 8);
  *(float *)(a1 + 428) = result;
  return result;
}

BOOL sub_100B27754(uint64_t a1)
{
  unsigned __int16 *v2;
  float v3;
  uint64_t v4;
  int v5;
  int v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  int v11;
  int v12;
  float v13;
  float v15;
  int v16;
  int v17;

  v2 = (unsigned __int16 *)(a1 + 8);
  v3 = sub_1006877E0((unsigned __int16 *)(a1 + 8), 0, *(unsigned __int16 *)(a1 + 10));
  v4 = 0;
  v15 = v3;
  v16 = v5;
  v17 = v6;
  v7 = 0.0;
  do
  {
    v7 = v7 + (float)(*(float *)((char *)&v15 + v4) * *(float *)((char *)&v15 + v4));
    v4 += 4;
  }
  while (v4 != 12);
  v8 = sqrtf(v7) + -1.0;
  if (v8 <= 0.0)
    v8 = -v8;
  if (v8 >= 0.05)
    return 0;
  sub_100687C30(v2, 0, *(unsigned __int16 *)(a1 + 10));
  v9 = 0;
  v15 = v10;
  v16 = v11;
  v17 = v12;
  v13 = 0.0;
  do
  {
    v13 = v13 + (float)(*(float *)((char *)&v15 + v9) * *(float *)((char *)&v15 + v9));
    v9 += 4;
  }
  while (v9 != 12);
  return sqrtf(v13) < 0.01;
}

uint64_t sub_100B27838(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 417) = *(_QWORD *)(a2 + 64) != 0;
  return result;
}

float sub_100B2784C(uint64_t a1)
{
  return sub_100B27864(a1 + 244, 32 - *(_DWORD *)(a1 + 480), *(_DWORD *)(a1 + 480));
}

float sub_100B27864(uint64_t a1, int a2, int a3)
{
  unsigned __int16 *v4;
  unint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;

  if (a3 < 1)
  {
    v10 = 0.0;
  }
  else
  {
    v4 = (unsigned __int16 *)(a1 + 28);
    v5 = a2;
    v6 = 0.0;
    v7 = 0.0;
    v8 = a3;
    do
    {
      v9 = *(float *)sub_1004784C4(v4, v5) - v7;
      v10 = v6 + v9;
      v7 = (float)((float)(v6 + v9) - v6) - v9;
      ++v5;
      v6 = v6 + v9;
      --v8;
    }
    while (v8);
  }
  return v10 / (float)a3;
}

void sub_100B278EC(float *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  __float2 v8;
  float v9[3];

  v4 = 0;
  v5 = 0.0;
  do
  {
    v5 = v5 + (float)(a1[v4] * a1[v4]);
    ++v4;
  }
  while (v4 != 3);
  v6 = sqrtf(v5);
  v7 = -v6;
  if (v6 > 0.0)
    v7 = v6;
  if (v7 == 0.0)
  {
    *(_DWORD *)(a2 + 32) = 1065353216;
    *(_OWORD *)a2 = xmmword_101C15AB0;
    *(_OWORD *)(a2 + 16) = unk_101C15AC0;
  }
  else
  {
    v8 = __sincosf_stret(v6);
    v9[0] = 1.0;
    v9[1] = v8.__sinval / v6;
    v9[2] = (float)(1.0 - v8.__cosval) / (float)(v6 * v6);
    sub_100B27BFC(a1, v9, a2);
  }
}

_QWORD *sub_100B279A8(_QWORD *result)
{
  *result = off_102172790;
  return result;
}

void sub_100B279B8(_QWORD *a1)
{
  *a1 = off_102172790;
  operator delete();
}

void sub_100B279D8(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100B27A04(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021727D8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021727D8);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CMOQuaternion>::operator[](const size_t) const [T = CMOQuaternion]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

float sub_100B27BFC@<S0>(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  float v5;
  float v6;
  float result;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  unint64_t i;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;
  _OWORD v21[2];
  int v22;
  _BYTE v23[36];
  __int128 v24;
  __int128 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  int v29;
  _OWORD v30[2];
  int v31;
  __int128 v32;
  __int128 v33;
  int v34;

  v4 = 0;
  v5 = 0.0;
  do
  {
    v5 = v5 + (float)(a1[v4] * a1[v4]);
    ++v4;
  }
  while (v4 != 3);
  v6 = *a2;
  *(float *)a3 = *a2;
  *(_QWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 12) = 0;
  *(float *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 28) = 0;
  *(float *)(a3 + 32) = v6;
  result = sqrtf(v5);
  if (result <= 0.0)
    result = -result;
  if (result != 0.0)
  {
    v8 = 0;
    v10 = a1[1];
    v9 = a1[2];
    v11 = *a1;
    v12 = -*a1;
    LODWORD(v32) = 0;
    *((float *)&v32 + 1) = v9;
    *((float *)&v32 + 2) = -v10;
    *((float *)&v32 + 3) = -v9;
    LODWORD(v33) = 0;
    *(_QWORD *)((char *)&v33 + 4) = __PAIR64__(LODWORD(v10), LODWORD(v11));
    *((float *)&v33 + 3) = v12;
    v34 = 0;
    v13 = a2[1];
    v26 = 0;
    v24 = v32;
    v25 = v33;
    do
    {
      *(float *)((char *)&v24 + v8) = v13 * *(float *)((char *)&v24 + v8);
      v8 += 4;
    }
    while (v8 != 36);
    v14 = 0;
    v29 = v26;
    v27 = v24;
    v28 = v25;
    v15 = a2[2];
    v18 = v32;
    v19 = v33;
    v20 = v34;
    do
    {
      *(float *)((char *)&v18 + v14) = v15 * *(float *)((char *)&v18 + v14);
      v14 += 4;
    }
    while (v14 != 36);
    v21[0] = v18;
    v21[1] = v19;
    v22 = v20;
    sub_100B27DB0((uint64_t)v21, (uint64_t)&v32, (uint64_t)v23);
    for (i = 0; i != 9; ++i)
      *((float *)&v27 + i) = sub_100821C40((uint64_t)v23, i) + *((float *)&v27 + i);
    v17 = 0;
    v30[0] = v27;
    v30[1] = v28;
    v31 = v29;
    do
    {
      result = sub_100821C40((uint64_t)v30, v17) + *(float *)(a3 + 4 * v17);
      *(float *)(a3 + 4 * v17++) = result;
    }
    while (v17 != 9);
  }
  return result;
}

float *sub_100B27DB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t i;
  unint64_t j;
  float v8;
  float v9;
  unint64_t k;
  float v11;
  float v12;
  float *result;

  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 3; ++j)
    {
      v8 = sub_100534784(a1, i, 0);
      v9 = v8 * sub_100534784(a2, 0, j);
      *(float *)sub_100534AE0(a3, i, j) = v9;
      for (k = 1; k != 3; ++k)
      {
        v11 = sub_100534784(a1, i, k);
        v12 = sub_100534784(a2, k, j);
        result = (float *)sub_100534AE0(a3, i, j);
        *result = *result + (float)(v11 * v12);
      }
    }
  }
  return result;
}

uint64_t sub_100B27E9C(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021727D8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021727D8);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<unsigned long long>::operator[](const size_t) const [T = unsigned long long]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[4 * (v4 - v5) + 4];
}

uint64_t sub_100B28094(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 56) = -1082130432;
  *(_QWORD *)(a1 + 60) = -1;
  *(_DWORD *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  v2 = a1 + 72;
  *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 120) = -1;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021727F8);
  v3 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Starting up CLDeviceMotionAWDAggregator", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021727F8);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Starting up CLDeviceMotionAWDAggregator", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLDeviceMotionAWDAggregator::CLDeviceMotionAWDAggregator()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100B283CC(a1, (unsigned int *)a1);
  sub_100B285B8(a1, v2);
  if ((sub_1001B7910() & 0x10) != 0)
    operator new();
  return a1;
}

void sub_100B28370(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100B283CC(uint64_t a1, unsigned int *a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  void *v10;
  uint8_t buf[1640];

  v4 = objc_autoreleasePoolPush();
  v10 = 0;
  v5 = sub_1001FD94C();
  if (!sub_100219F40(v5, (uint64_t)CFSTR("CompassSaturations"), (CFTypeRef *)&v10))
    goto LABEL_8;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102172818);
  v6 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Loading daemon cache for Compass Saturations AWD metrics", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    v9 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Loading daemon cache for Compass Saturations AWD metrics", &v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::loadCache(CLDaemonStats_Type::CompassSaturations &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if ((sub_100B298E4(a1, (float *)a2, v10) & 1) == 0)
LABEL_8:
    sub_100B29290(a1, a2);
  objc_autoreleasePoolPop(v4);
}

void sub_100B285B8(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  __int16 v10;
  void *v11;
  uint8_t buf[1640];

  v4 = objc_autoreleasePoolPush();
  v11 = 0;
  v5 = sub_1001FD94C();
  if (!sub_100219F40(v5, (uint64_t)CFSTR("MotionGyroDaily"), (CFTypeRef *)&v11))
    goto LABEL_8;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102172818);
  v6 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Loading daemon cache for MotionGyroDaily AWD metrics", buf, 2u);
  }
  v7 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    v10 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Loading daemon cache for MotionGyroDaily AWD metrics", &v10, 2);
    v9 = (uint8_t *)v8;
    v7 = sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::loadCache(CLDaemonStats_Type::MotionGyroDaily &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if ((sub_100B2A030(v7, a2, v11) & 1) == 0)
LABEL_8:
    sub_100B29E60(a1, a2);
  objc_autoreleasePoolPop(v4);
}

void sub_100B287A0(unsigned __int8 *a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  v3 = *a1;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102172818);
  v4 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Keyboard attached,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    v7[0] = 67109120;
    v7[1] = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Keyboard attached,%d", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "static void CLDeviceMotionAWDAggregator::onKeyboardState(const BOOL *, void *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (v3)
    sub_100B2A3B8(a2);
}

void sub_100B28958(unsigned __int8 *a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  v3 = *a1;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102172818);
  v4 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Cover open,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    v7[0] = 67109120;
    v7[1] = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Cover open,%d", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "static void CLDeviceMotionAWDAggregator::onCoverState(const BOOL *, void *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (v3)
    sub_100B2A3B8(a2);
}

void sub_100B28B14(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  unsigned int v8;
  void **v9;
  __int128 v10;

  if (*(float *)(a1 + 56) > 0.0)
  {
    v4 = *(float *)(a1 + 172);
    if (v4 > 0.0)
    {
      v5 = *(float *)(a1 + 144) - *(float *)(a1 + 160);
      v6 = *(float *)(a1 + 148) - *(float *)(a1 + 164);
      v7 = *(float *)(a1 + 152) - *(float *)(a1 + 168);
      v8 = llroundf(*(float *)(a1 + 156) - v4);
      *(_DWORD *)(a1 + 60) = llroundf(sqrtf((float)((float)(v6 * v6) + (float)(v5 * v5)) + (float)(v7 * v7)));
      *(_DWORD *)(a1 + 64) = v8;
    }
  }
  *(_OWORD *)a2 = *(_OWORD *)a1;
  v9 = (void **)(a1 + 16);
  std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a1 + 16));
  v10 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = v10;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 56) = -1082130432;
  *(_QWORD *)(a1 + 60) = -1;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  sub_100B28C10(a1, (unsigned int *)a1);
}

void sub_100B28C10(uint64_t a1, unsigned int *a2)
{
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _WORD v14[8];
  CFTypeRef v15[2];
  uint8_t buf[1640];

  v4 = objc_autoreleasePoolPush();
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102172818);
  v5 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Saving daemon cache for CompassSaturations AWD metrics", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    LOWORD(v15[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Saving daemon cache for CompassSaturations AWD metrics", v15, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::storeCache(const CLDaemonStats_Type::CompassSaturations &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v15[0] = 0;
  v6 = sub_1001FD94C();
  if ((sub_100219F40(v6, (uint64_t)CFSTR("CompassSaturations"), v15) & 1) != 0)
  {
    sub_100B29470(a1, a2);
    v7 = sub_1001FD94C();
    sub_10023EC14(v7);
  }
  else
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    v8 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning daemon cache does not exist!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102172818);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "#Warning daemon cache does not exist!", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::storeCache(const CLDaemonStats_Type::CompassSaturations &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  objc_autoreleasePoolPop(v4);
}

void sub_100B28F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  int v6;

  v4 = a1 + 72;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 72);
  v5 = (void **)(a1 + 88);
  std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a1 + 88));
  v6 = *(_DWORD *)(a1 + 120);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 112);
  *(_DWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v5);
  *v5 = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 120) = -1;
  sub_10003060C(a1, v4);
}

void sub_100B28FBC(uint64_t a1, uint64_t a2)
{
  double Current;
  double v5;
  int v6;
  double v7;
  NSObject *v8;
  int v9;
  int v10;
  float v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  int v16;
  __int16 v17;
  double v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  double v24;
  __int16 v25;
  int v26;

  if (*(_BYTE *)(a2 + 2))
  {
    ++*(_DWORD *)(a1 + 40);
    Current = CFAbsoluteTimeGetCurrent();
    v5 = Current;
    v6 = *(_DWORD *)(a1 + 40);
    if (v6 >= 2)
    {
      v7 = *(double *)(a1 + 136) + Current - *(double *)(a1 + 128);
      *(double *)(a1 + 136) = v7;
      *(_DWORD *)(a1 + 44) = (int)(v7 / (double)(v6 - 1) * 1000.0);
    }
    *(double *)(a1 + 128) = v5;
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021727F8);
    v8 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_DWORD *)(a1 + 40);
      v10 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)buf = 67109632;
      v22 = v9;
      v23 = 2048;
      v24 = v5;
      v25 = 1024;
      v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Received compass saturation,%d,timestamp,%f,meanDeltaTimeSaturations,%d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021727F8);
      v12 = *(_DWORD *)(a1 + 44);
      v17 = 2048;
      v18 = v5;
      v19 = 1024;
      v20 = v12;
      LODWORD(v15) = 24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Received compass saturation,%d,timestamp,%f,meanDeltaTimeSaturations,%d", &v16, v15, 67109632);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::updateCalibrationStats(const CMMotionCoprocessorReply::CompassCalibration)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  if (*(unsigned __int8 *)(a2 + 1) - 4 >= 2)
  {
    if (!*(_BYTE *)(a2 + 1))
    {
      *(_DWORD *)(a1 + 56) = -1082130432;
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
    }
  }
  else
  {
    v11 = *(float *)(a2 + 53);
    if (v11 > *(float *)(a1 + 56))
    {
      *(float *)(a1 + 56) = v11;
      *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 5);
      *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 9);
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 13);
      *(float *)(a1 + 156) = 1.0 / *(float *)(a2 + 29);
    }
  }
  sub_100B28C10(a1, (unsigned int *)a1);
}

void sub_100B29270(unsigned int *a1, uint64_t a2, int a3)
{
  a1[12] = (int)*(float *)&a3;
  a1[13] = (int)*((float *)&a2 + 1);
  sub_100B28C10((uint64_t)a1, a1);
}

void sub_100B29290(uint64_t a1, unsigned int *a2)
{
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  v4 = objc_autoreleasePoolPush();
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102172818);
  v5 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Creating daemon cache for AWD CompassSaturations metric", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Creating daemon cache for AWD CompassSaturations metric", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::createCache(const CLDaemonStats_Type::CompassSaturations &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_100B29470(a1, a2);
  v6 = sub_1001FD94C();
  sub_10023EC14(v6);
  v7 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 944))(v7);
  objc_autoreleasePoolPop(v4);
}

id sub_100B29470(uint64_t a1, unsigned int *a2)
{
  id v4;
  double v5;
  id v6;
  double v7;
  uint64_t i;
  id v9;
  double v10;
  uint64_t j;
  NSObject *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  double v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  double v25;
  unsigned int v26;
  unsigned int v27;
  const char *v28;
  uint8_t *v29;
  int v30;
  int v31;
  _BYTE v32[12];
  int v33;
  __int16 v34;
  unsigned int v35;
  uint8_t buf[4];
  unsigned int v37;
  __int16 v38;
  unsigned int v39;
  __int16 v40;
  unsigned int v41;
  __int16 v42;
  unsigned int v43;
  __int16 v44;
  double v45;
  __int16 v46;
  unsigned int v47;
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  unsigned int v51;
  _QWORD v52[2];
  _QWORD v53[2];

  v4 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[10]), CFSTR("NumSaturations"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[11]), CFSTR("BetweenSaturations"));
  v53[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[12]);
  v53[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[13]);
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v53, 2), CFSTR("Intensities"));
  LODWORD(v5) = a2[14];
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v5), CFSTR("MaxQuality"));
  v52[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[15]);
  v52[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[16]);
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v52, 2), CFSTR("DeltaCalibrations"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[17]), CFSTR("NumCoverAttach"));
  v6 = +[NSMutableArray array](NSMutableArray, "array");
  for (i = 0; i != 4; ++i)
  {
    LODWORD(v7) = *(_DWORD *)(a1 + 160 + 4 * i);
    objc_msgSend(v6, "setObject:atIndexedSubscript:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v7), i);
  }
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("PreviousCalibration"));
  v9 = +[NSMutableArray array](NSMutableArray, "array");
  for (j = 0; j != 4; ++j)
  {
    LODWORD(v10) = *(_DWORD *)(a1 + 144 + 4 * j);
    objc_msgSend(v9, "setObject:atIndexedSubscript:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10), j);
  }
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, CFSTR("CurrentCalibration"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 128)), CFSTR("PreviousSaturationTime"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 136)), CFSTR("SumDeltaSaturations"));
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102172818);
  v12 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v13 = a2[10];
    v14 = a2[11];
    v15 = a2[12];
    v16 = a2[13];
    v17 = *((float *)a2 + 14);
    v18 = a2[15];
    v19 = a2[16];
    v20 = a2[17];
    *(_DWORD *)buf = 67110912;
    v37 = v13;
    v38 = 1024;
    v39 = v14;
    v40 = 1024;
    v41 = v15;
    v42 = 1024;
    v43 = v16;
    v44 = 2048;
    v45 = v17;
    v46 = 1024;
    v47 = v18;
    v48 = 1024;
    v49 = v19;
    v50 = 1024;
    v51 = v20;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "saturations,%d,meanTimeMsec,%d,intensity,[%d %d],maxQuality,%f,deltaBias,%d,deltaRadius,%d,attachments,%d", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    v22 = a2[11];
    v23 = a2[12];
    v24 = a2[13];
    v25 = *((float *)a2 + 14);
    v26 = a2[15];
    v27 = a2[17];
    LOWORD(v31) = 1024;
    HIWORD(v31) = v22;
    *(_DWORD *)v32 = v23;
    *(_WORD *)&v32[4] = 1024;
    *(_DWORD *)&v32[6] = v24;
    *(_WORD *)&v32[10] = 2048;
    LOWORD(v33) = HIWORD(v26);
    HIWORD(v33) = 1024;
    v34 = 1024;
    v35 = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "saturations,%d,meanTimeMsec,%d,intensity,[%d %d],maxQuality,%f,deltaBias,%d,deltaRadius,%d,attachments,%d", &v30, 54, 67110912, v31, *(double *)v32, *(_DWORD *)&v32[8], HIDWORD(v25), v33);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLDeviceMotionAWDAggregator::populateStatsToCache(const CLDaemonStats_Type::CompassSaturations &) const", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  return v4;
}

uint64_t sub_100B298E4(uint64_t a1, float *a2, void *a3)
{
  id v6;
  int v7;
  id v8;
  id v9;
  uint64_t i;
  int v11;
  id v12;
  uint64_t j;
  int v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  double v22;
  int v23;
  int v24;
  int v25;
  int v27;
  int v28;
  int v29;
  double v30;
  int v31;
  int v32;
  const char *v33;
  uint8_t *v34;
  int v35;
  int v36;
  _BYTE v37[12];
  int v38;
  __int16 v39;
  int v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  double v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;

  *((_DWORD *)a2 + 10) = objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("NumSaturations")), "integerValue");
  *((_DWORD *)a2 + 11) = objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("BetweenSaturations")), "integerValue");
  v6 = objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("Intensities"));
  *((_DWORD *)a2 + 12) = objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 0), "integerValue");
  *((_DWORD *)a2 + 13) = objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 1), "integerValue");
  objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("MaxQuality")), "floatValue");
  *((_DWORD *)a2 + 14) = v7;
  v8 = objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("DeltaCalibrations"));
  *((_DWORD *)a2 + 15) = objc_msgSend(objc_msgSend(v8, "objectAtIndexedSubscript:", 0), "integerValue");
  *((_DWORD *)a2 + 16) = objc_msgSend(objc_msgSend(v8, "objectAtIndexedSubscript:", 1), "integerValue");
  *((_DWORD *)a2 + 17) = objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("NumCoverAttach")), "unsignedIntegerValue");
  v9 = objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("PreviousCalibration"));
  for (i = 0; i != 4; ++i)
  {
    objc_msgSend(objc_msgSend(v9, "objectAtIndexedSubscript:", i), "floatValue");
    *(_DWORD *)(a1 + 160 + 4 * i) = v11;
  }
  v12 = objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("CurrentCalibration"));
  for (j = 0; j != 4; ++j)
  {
    objc_msgSend(objc_msgSend(v12, "objectAtIndexedSubscript:", j), "floatValue");
    *(_DWORD *)(a1 + 144 + 4 * j) = v14;
  }
  objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("PreviousSaturationTime")), "doubleValue");
  *(_QWORD *)(a1 + 128) = v15;
  objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("SumDeltaSaturations")), "doubleValue");
  *(_QWORD *)(a1 + 136) = v16;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102172818);
  v17 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v18 = *((_DWORD *)a2 + 10);
    v19 = *((_DWORD *)a2 + 11);
    v20 = *((_DWORD *)a2 + 12);
    v21 = *((_DWORD *)a2 + 13);
    v22 = a2[14];
    v23 = *((_DWORD *)a2 + 15);
    v24 = *((_DWORD *)a2 + 16);
    v25 = *((_DWORD *)a2 + 17);
    *(_DWORD *)buf = 67110912;
    v42 = v18;
    v43 = 1024;
    v44 = v19;
    v45 = 1024;
    v46 = v20;
    v47 = 1024;
    v48 = v21;
    v49 = 2048;
    v50 = v22;
    v51 = 1024;
    v52 = v23;
    v53 = 1024;
    v54 = v24;
    v55 = 1024;
    v56 = v25;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "saturations,%d,meanTimeMsec,%d,intensity,[%d %d],maxQuality,%f,deltaBias,%d,deltaRadius,%d,attachments,%d", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    v27 = *((_DWORD *)a2 + 11);
    v28 = *((_DWORD *)a2 + 12);
    v29 = *((_DWORD *)a2 + 13);
    v30 = a2[14];
    v31 = *((_DWORD *)a2 + 15);
    v32 = *((_DWORD *)a2 + 17);
    LOWORD(v36) = 1024;
    HIWORD(v36) = v27;
    *(_DWORD *)v37 = v28;
    *(_WORD *)&v37[4] = 1024;
    *(_DWORD *)&v37[6] = v29;
    *(_WORD *)&v37[10] = 2048;
    LOWORD(v38) = HIWORD(v31);
    HIWORD(v38) = 1024;
    v39 = 1024;
    v40 = v32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "saturations,%d,meanTimeMsec,%d,intensity,[%d %d],maxQuality,%f,deltaBias,%d,deltaRadius,%d,attachments,%d", &v35, 54, 67110912, v36, *(double *)v37, *(_DWORD *)&v37[8], HIDWORD(v30), v38);
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDeviceMotionAWDAggregator::loadCache(CLDaemonStats_Type::CompassSaturations &, NSDictionary *)", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
  return 1;
}

#error "100B29E1C: call analysis failed (funcsize=82)"

void sub_100B29E60(uint64_t a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  v3 = objc_autoreleasePoolPush();
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102172818);
  v4 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Creating daemon cache for AWD MotionGyroDaily metric", buf, 2u);
  }
  v5 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Creating daemon cache for AWD MotionGyroDaily metric", v10, 2);
    v9 = (uint8_t *)v8;
    v5 = sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::createCache(const CLDaemonStats_Type::MotionGyroDaily &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_100022408(v5, a2);
  v6 = sub_1001FD94C();
  sub_10023EC14(v6);
  v7 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 944))(v7);
  objc_autoreleasePoolPop(v3);
}

uint64_t sub_100B2A030(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  int v6;
  int v7;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  *(_DWORD *)(a2 + 44) = objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("GyroMagnitude")), "integerValue");
  *(_DWORD *)(a2 + 48) = objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("ActiveMins")), "integerValue");
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102172818);
  v5 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_DWORD *)(a2 + 44);
    v7 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)buf = 67109376;
    v17 = v6;
    v18 = 1024;
    v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "magnitude,%d,activeMins,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    v9 = *(_DWORD *)(a2 + 44);
    v10 = *(_DWORD *)(a2 + 48);
    v13[0] = 67109376;
    v13[1] = v9;
    v14 = 1024;
    v15 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "magnitude,%d,activeMins,%d", v13, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDeviceMotionAWDAggregator::loadCache(CLDaemonStats_Type::MotionGyroDaily &, NSDictionary *)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return 1;
}

#error "100B2A374: call analysis failed (funcsize=82)"

void sub_100B2A3B8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  ++*(_DWORD *)(a1 + 68);
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102172818);
  v2 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)buf = 67109120;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "New cover attachment,total,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    v4 = *(_DWORD *)(a1 + 68);
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "New cover attachment,total,%d", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::newCoverAttach()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_100B2A574(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100B2A5A0(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

uint64_t sub_100B2A5CC()
{
  uint64_t result;

  result = sub_1000A42B0();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_100B2A63C()
{
  operator delete();
}

uint64_t sub_100B2A660()
{
  if (qword_102306B60 != -1)
    dispatch_once(&qword_102306B60, &stru_102172838);
  return qword_1023112F0;
}

void sub_100B2A6A8(_QWORD *a1)
{
  sub_101221A60(a1);
  operator delete();
}

double sub_100B2A6CC(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v10;
  double v11;
  double v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  double v17;
  uint8_t buf[4];
  double v19;

  if (a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021728C0);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v19) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryMagnetometer] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021728C0);
      v16 = 67240192;
      LODWORD(v17) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryMagnetometer] Unrecognized update interval notification %{public}d", &v16, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryMagnetometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_101221BDC(a1);
    if (*a3 > 0.0)
      *(_BYTE *)(a1 + 30) = 0;
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021728C0);
    v10 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      v11 = *a3;
      *(_DWORD *)buf = 134349056;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccessoryMagnetometer] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021728C0);
      v13 = *a3;
      v16 = 134349056;
      v17 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[AccessoryMagnetometer] Setting update interval to %{public}f", &v16, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryMagnetometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_10006B4E0(*(_QWORD *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

double sub_100B2AA04(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v10;
  double v11;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  double v19;

  if (a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021728C0);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v19) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryMagnetometer] Unrecognized batch interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021728C0);
      v16 = 67240192;
      LODWORD(v17) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryMagnetometer] Unrecognized batch interval notification %{public}d", &v16, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryMagnetometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_101221BDC(a1);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021728C0);
    v10 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      v11 = *a3;
      *(_DWORD *)buf = 134349056;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccessoryMagnetometer] Setting batch interval to %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021728C0);
      v13 = *(_QWORD *)a3;
      v16 = 134349056;
      v17 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[AccessoryMagnetometer] Setting batch interval to %{public}f", &v16, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryMagnetometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_10006BC9C(*(_QWORD *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

void sub_100B2AD2C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  void **v5;
  NSObject *v6;
  void **v7;
  void **v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;
  int v18;
  _DWORD v19[2];
  __int16 v20;
  void **v21;
  __int16 v22;
  void **v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  void **v27;
  __int16 v28;
  void **v29;

  sub_10012AC18(a1, 0, a2, 40);
  if (!*(_BYTE *)(a1 + 30))
  {
    *(_BYTE *)(a1 + 30) = 1;
    v13 = 0;
    sub_1015A2E04(v14, "N/A");
    sub_1015A2E04(__p, "N/A");
    v18 = 0;
    if (sub_101221D6C(a1, &v13))
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021728C0);
      v3 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
      {
        if (v15 >= 0)
          v4 = v14;
        else
          v4 = (void **)v14[0];
        if (v17 >= 0)
          v5 = __p;
        else
          v5 = (void **)__p[0];
        *(_DWORD *)buf = 67240707;
        v25 = v13;
        v26 = 2081;
        v27 = v4;
        v28 = 2081;
        v29 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[AccessoryMagnetometer] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021728C0);
        if (v15 >= 0)
          v7 = v14;
        else
          v7 = (void **)v14[0];
        if (v17 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        v19[0] = 67240707;
        v19[1] = v13;
        v20 = 2081;
        v21 = v7;
        v22 = 2081;
        v23 = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[AccessoryMagnetometer] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s", v19, 28);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLAccessoryMagnetometer::onMagnetometerData(const Sample &)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      sub_10012AC18(a1, 1, (uint64_t)&v13, 64);
    }
    else
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021728C0);
      v6 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "[AccessoryMagnetometer] Service not found!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021728C0);
        LOWORD(v19[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryMagnetometer] Service not found!", v19, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 0, "void CLAccessoryMagnetometer::onMagnetometerData(const Sample &)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
    if (v17 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
  }
}

void sub_100B2B118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_1007217D0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_100B2B154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float FloatValue;
  float v7;
  float v8;
  unint64_t TimeStamp;
  double v10;
  unsigned __int16 IntegerValue;
  uint64_t v12;
  float v13;
  NSObject *v14;
  float v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  unsigned __int16 v23;
  float v24;
  _DWORD v25[2];
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  double v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  double v51;

  if (IOHIDEventGetType(a4) == 21)
  {
    FloatValue = IOHIDEventGetFloatValue(a4, 1376256);
    v19 = FloatValue;
    v7 = IOHIDEventGetFloatValue(a4, 1376257);
    v20 = v7;
    v8 = IOHIDEventGetFloatValue(a4, 1376258);
    v21 = v8;
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    v10 = sub_100127828(TimeStamp);
    v18 = v10;
    IntegerValue = IOHIDEventGetIntegerValue(a4, 1376261);
    v23 = IntegerValue;
    v12 = sub_1013B4A0C();
    v22 = v12;
    v13 = *(float *)(a1 + 100);
    v24 = v13;
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021728C0);
    v14 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67241728;
      v39 = IntegerValue;
      v40 = 2050;
      v41 = FloatValue;
      v42 = 2050;
      v43 = v7;
      v44 = 2050;
      v45 = v8;
      v46 = 2050;
      v47 = v13;
      v48 = 2050;
      v49 = v12;
      v50 = 2050;
      v51 = v10;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[AccessoryMagnetometer] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,temp,%{public}20.20f,sensorTime,%{public}llu,timestamp,%{public}20.20f", buf, 0x44u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021728C0);
      v25[0] = 67241728;
      v25[1] = IntegerValue;
      v26 = 2050;
      v27 = FloatValue;
      v28 = 2050;
      v29 = v7;
      v30 = 2050;
      v31 = v8;
      v32 = 2050;
      v33 = v13;
      v34 = 2050;
      v35 = v12;
      v36 = 2050;
      v37 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[AccessoryMagnetometer] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,temp,%{public}20.20f,sensorTime,%{public}llu,timestamp,%{public}20.20f", v25, 68);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLAccessoryMagnetometer::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    sub_100B2AD2C(a1, (uint64_t)&v18);
  }
  else if (IOHIDEventGetType(a4) == 15)
  {
    v15 = IOHIDEventGetFloatValue(a4, 983040);
    *(float *)(a1 + 100) = v15;
  }
}

void sub_100B2B480(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

BOOL sub_100B2B4AC(_QWORD *a1, char *a2, int a3)
{
  int v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  char v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  HIBYTE(v11) = 0;
  *a2 = 0;
  v3 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5;
  if (v3)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v4 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349312;
      v17 = 0;
      v18 = 2050;
      v19 = 1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#Warning eof,n,%{public}ld,requested,%{public}ld", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021728E0);
      v12 = 134349312;
      v13 = 0;
      v14 = 2050;
      v15 = 1;
      LODWORD(v11) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning eof,n,%{public}ld,requested,%{public}ld", &v12, v11);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLParseXtra::read_from_file(std::istream &, DataType &, Endian) [DataType = unsigned char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    sub_100B2EF40(a1, (_BYTE *)&v11 + 7);
    v9 = *a2;
    if (a3)
      v9 = 0;
    *a2 = HIBYTE(v11) | v9;
  }
  return v3 == 0;
}

BOOL sub_100B2B6C4(_QWORD *a1, _WORD *a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  char v8;
  char v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  v6 = 0;
  HIBYTE(v17) = 0;
  *a2 = 0;
  v7 = a1 + 4;
  v8 = 1;
  while (1)
  {
    v9 = v8;
    v10 = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*a1 - 24)) & 5;
    if (v10)
      break;
    sub_100B2EF40(a1, (_BYTE *)&v17 + 7);
    v11 = (unsigned __int16)*a2;
    if (a3)
      LOWORD(v12) = HIBYTE(v17) | (unsigned __int16)((_WORD)v11 << 8);
    else
      v12 = (HIBYTE(v17) << (8 * v6)) | v11;
    v8 = 0;
    *a2 = v12;
    v6 = 1;
    if ((v9 & 1) == 0)
      return v10 == 0;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021728E0);
  v13 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349312;
    v23 = v6;
    v24 = 2050;
    v25 = 2;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#Warning eof,n,%{public}ld,requested,%{public}ld", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v18 = 134349312;
    v19 = v6;
    v20 = 2050;
    v21 = 2;
    LODWORD(v17) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning eof,n,%{public}ld,requested,%{public}ld", &v18, v17);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLParseXtra::read_from_file(std::istream &, DataType &, Endian) [DataType = unsigned short]", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  return v10 == 0;
}

uint64_t sub_100B2B920(_QWORD *a1, int *a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  _BOOL8 v5;
  unint64_t v6;
  char v10;
  unint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint8_t buf[4];
  unint64_t v24;
  __int16 v25;
  uint64_t v26;

  *a2 = 0;
  v4 = a1 + 4;
  v3 = *a1;
  HIBYTE(v18) = 0;
  if ((*((_BYTE *)a1 + *(_QWORD *)(v3 - 24) + 32) & 5) != 0)
  {
    v5 = 0;
    v6 = 0;
LABEL_10:
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v14 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349312;
      v24 = v6;
      v25 = 2050;
      v26 = 4;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#Warning eof,n,%{public}ld,requested,%{public}ld", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021728E0);
      v19 = 134349312;
      v20 = v6;
      v21 = 2050;
      v22 = 4;
      LODWORD(v18) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning eof,n,%{public}ld,requested,%{public}ld", &v19, v18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLParseXtra::read_from_file(std::istream &, DataType &, Endian) [DataType = unsigned int]", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  else
  {
    v10 = 0;
    v11 = -1;
    while (1)
    {
      sub_100B2EF40(a1, (_BYTE *)&v18 + 7);
      v12 = *a2;
      v13 = a3 ? HIBYTE(v18) | (v12 << 8) : (HIBYTE(v18) << v10) | v12;
      *a2 = v13;
      if (v11 == 2)
        return 1;
      ++v11;
      v10 += 8;
      if ((*((_BYTE *)v4 + *(_QWORD *)(*a1 - 24)) & 5) != 0)
      {
        v5 = v11 > 2;
        v6 = v11 + 1;
        goto LABEL_10;
      }
    }
  }
  return v5;
}

uint64_t sub_100B2BB9C(_QWORD *a1)
{
  NSObject *v1;
  const char *v2;
  _BOOL4 v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  uint8_t *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  uint64_t v34;
  int v35;
  char v36[4];
  int v37;
  char v38;
  int v39;
  char v40;
  unsigned int v41;
  unsigned __int16 v42;
  char v43;
  int v44;
  const char *v45;
  uint8_t buf[4];
  const char *v47;

  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    v1 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "#ee,#Warning,can't open file\n", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    LOWORD(v44) = 0;
    LODWORD(v31) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#ee,#Warning,can't open file\n", &v44, v31);
    goto LABEL_199;
  }
  v43 = 0;
  sub_100B2EF40(a1, &v43);
  v4 = v43 != 0;
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#ee,#Warning,endian\n", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    LOWORD(v44) = 0;
    LODWORD(v31) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#ee,#Warning,endian\n", &v44, v31);
    goto LABEL_199;
  }
  v42 = 0;
  v41 = 0;
  v40 = 0;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  *(_WORD *)v36 = 0;
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v32 = 0;
  HIDWORD(v31) = 0;
  if (!sub_100B2B4AC(a1, &v40, v43 != 0))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "headerLen";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v44 = 136446210;
    v45 = "headerLen";
    LODWORD(v31) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
    goto LABEL_199;
  }
  if ((sub_100B2B920(a1, &v39, v4) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v8 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "warnVersion";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v44 = 136446210;
    v45 = "warnVersion";
    LODWORD(v31) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
    goto LABEL_199;
  }
  if (!sub_100B2B4AC(a1, &v38, v4))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v9 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "xtraVersion";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v44 = 136446210;
    v45 = "xtraVersion";
    LODWORD(v31) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
    goto LABEL_199;
  }
  if ((sub_100B2B920(a1, &v37, v4) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v10 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "cksum";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v44 = 136446210;
    v45 = "cksum";
    LODWORD(v31) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
    goto LABEL_199;
  }
  if (v38 != 3)
  {
    if (v38 != 2)
      return 0;
    if ((sub_100B2B920(a1, (int *)&v34, v4) & 1) != 0)
    {
      if (sub_100B2B6C4(a1, &v32, v4))
      {
        if ((sub_100B2B920(a1, (int *)&v31 + 1, v4) & 1) != 0)
        {
          if (sub_100B2B6C4(a1, &v42, v4))
          {
            if ((sub_100B2B920(a1, (int *)&v41, v4) & 1) != 0)
              goto LABEL_30;
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021728E0);
            v21 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446210;
              v47 = "dataGpsMsec";
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 2))
              return 0;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 == -1)
              goto LABEL_88;
LABEL_231:
            dispatch_once(&qword_1022A00D0, &stru_1021728E0);
LABEL_88:
            v44 = 136446210;
            v45 = "dataGpsMsec";
            LODWORD(v31) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
            goto LABEL_199;
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021728E0);
          v19 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446210;
            v47 = "dataGpsWeek";
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
          }
          if (!sub_1001BFF7C(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 == -1)
            goto LABEL_140;
LABEL_225:
          dispatch_once(&qword_1022A00D0, &stru_1021728E0);
LABEL_140:
          v44 = 136446210;
          v45 = "dataGpsWeek";
          LODWORD(v31) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
LABEL_199:
          v27 = (uint8_t *)v2;
          sub_100512490("Generic", 1, 0, 2, "static uint64_t CLParseXtra::getXtraHeaderGpsNs(std::istream &)", "%s\n", v2);
          if (v27 != buf)
            free(v27);
          return 0;
        }
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021728E0);
        v17 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "fileMsec";
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 == -1)
        {
LABEL_125:
          v44 = 136446210;
          v45 = "fileMsec";
          LODWORD(v31) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
          goto LABEL_199;
        }
LABEL_224:
        dispatch_once(&qword_1022A00D0, &stru_1021728E0);
        goto LABEL_125;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021728E0);
      v15 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "fileGpsWeek";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 == -1)
      {
LABEL_110:
        v44 = 136446210;
        v45 = "fileGpsWeek";
        LODWORD(v31) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
        goto LABEL_199;
      }
LABEL_223:
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
      goto LABEL_110;
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v13 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "fileSize";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 == -1)
    {
LABEL_95:
      v44 = 136446210;
      v45 = "fileSize";
      LODWORD(v31) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
      goto LABEL_199;
    }
LABEL_222:
    dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    goto LABEL_95;
  }
  if (!sub_100B2D720(a1, (char *)&v35, v4))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v14 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "x3_warnManagerID[0]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v44 = 136446210;
    v45 = "x3_warnManagerID[0]";
    LODWORD(v31) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
    goto LABEL_199;
  }
  if (!sub_100B2D720(a1, (char *)&v35 + 1, v4))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v16 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "x3_warnManagerID[1]";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v44 = 136446210;
    v45 = "x3_warnManagerID[1]";
    LODWORD(v31) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
    goto LABEL_199;
  }
  if (!sub_100B2D720(a1, (char *)&v35 + 2, v4))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v18 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "x3_warnManagerID[2]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v44 = 136446210;
    v45 = "x3_warnManagerID[2]";
    LODWORD(v31) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
    goto LABEL_199;
  }
  if (!sub_100B2D720(a1, (char *)&v35 + 3, v4))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v20 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "x3_warnManagerID[3]";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v44 = 136446210;
    v45 = "x3_warnManagerID[3]";
    LODWORD(v31) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
    goto LABEL_199;
  }
  if (!sub_100B2D720(a1, v36, v4))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v22 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "x3_warnManagerID[4]";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v44 = 136446210;
    v45 = "x3_warnManagerID[4]";
    LODWORD(v31) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
    goto LABEL_199;
  }
  if (!sub_100B2D720(a1, &v36[1], v4))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v23 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "x3_warnManagerID[5]";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v44 = 136446210;
    v45 = "x3_warnManagerID[5]";
    LODWORD(v31) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
    goto LABEL_199;
  }
  if ((sub_100B2B920(a1, (int *)&v34 + 1, v4) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v24 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "x3_fileSequencyNr";
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v44 = 136446210;
    v45 = "x3_fileSequencyNr";
    LODWORD(v31) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
    goto LABEL_199;
  }
  if ((sub_100B2B920(a1, (int *)&v34, v4) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "fileSize";
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 == -1)
      goto LABEL_95;
    goto LABEL_222;
  }
  if ((sub_100B2B920(a1, &v33, v4) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v26 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "x3_signatureRecordOffset";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v44 = 136446210;
    v45 = "x3_signatureRecordOffset";
    LODWORD(v31) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v44, v31);
    goto LABEL_199;
  }
  if (!sub_100B2B6C4(a1, &v32, v4))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v28 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "fileGpsWeek";
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 == -1)
      goto LABEL_110;
    goto LABEL_223;
  }
  if ((sub_100B2B920(a1, (int *)&v31 + 1, v4) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v29 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "fileMsec";
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 == -1)
      goto LABEL_125;
    goto LABEL_224;
  }
  if (!sub_100B2B6C4(a1, &v42, v4))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v30 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "dataGpsWeek";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 == -1)
      goto LABEL_140;
    goto LABEL_225;
  }
  if ((sub_100B2B920(a1, (int *)&v41, v4) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v12 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "dataGpsMsec";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 == -1)
      goto LABEL_88;
    goto LABEL_231;
  }
LABEL_30:
  if (v41 >= 0x240C8400)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v47) = v41;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#ee,#Warning,xtra,invalid,dataGpsMsec,%u\n", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    v44 = 67109120;
    LODWORD(v45) = v41;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#ee,#Warning,xtra,invalid,dataGpsMsec,%u\n", &v44);
    goto LABEL_199;
  }
  return 1000000 * (v41 + 604800000 * v42);
}

BOOL sub_100B2D720(_QWORD *a1, char *a2, int a3)
{
  int v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  char v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  HIBYTE(v11) = 0;
  *a2 = 0;
  v3 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5;
  if (v3)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v4 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349312;
      v17 = 0;
      v18 = 2050;
      v19 = 1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#Warning eof,n,%{public}ld,requested,%{public}ld", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021728E0);
      v12 = 134349312;
      v13 = 0;
      v14 = 2050;
      v15 = 1;
      LODWORD(v11) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning eof,n,%{public}ld,requested,%{public}ld", &v12, v11);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLParseXtra::read_from_file(std::istream &, DataType &, Endian) [DataType = unsigned char &]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    sub_100B2EF40(a1, (_BYTE *)&v11 + 7);
    v9 = *a2;
    if (a3)
      v9 = 0;
    *a2 = HIBYTE(v11) | v9;
  }
  return v3 == 0;
}

uint64_t sub_100B2D938(_QWORD *a1)
{
  NSObject *v1;
  uint8_t *v2;
  double v3;
  _BOOL4 v5;
  NSObject *v6;
  uint8_t *v7;
  NSObject *v8;
  uint8_t *v9;
  double v10;
  NSObject *v11;
  uint8_t *v12;
  double v13;
  NSObject *v14;
  double v15;
  uint8_t *v16;
  uint8_t *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int16 v38;
  char v39;
  int v40;
  const char *v41;
  uint8_t buf[4];
  const char *v43;

  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    v1 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#eph,can't open file", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    LOWORD(v40) = 0;
    LODWORD(v33) = 2;
    v3 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#eph,can't open file", &v40, v33);
    goto LABEL_19;
  }
  v39 = 0;
  sub_100B2EF40(a1, &v39);
  v5 = v39 != 0;
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#eph,invalid endianness", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    LOWORD(v40) = 0;
    LODWORD(v33) = 2;
    v3 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#eph,invalid endianness", &v40, v33);
LABEL_19:
    v7 = v2;
    sub_100512490("Generic", 1, 0, 0, "static uint64_t CLParseXtra::getXtraBroadcastEphemerisHeaderGpsNs(std::istream &)", "%s\n", v3);
    goto LABEL_20;
  }
  v38 = 0;
  v37 = 0;
  HIBYTE(v36) = 0;
  LODWORD(v36) = 0;
  HIBYTE(v35) = 0;
  WORD2(v35) = 0;
  LODWORD(v35) = 0;
  v34 = 0;
  HIDWORD(v33) = 0;
  if (!sub_100B2B4AC(a1, (char *)&v36 + 7, v39 != 0))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v11 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "headerLen";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "headerLen";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
LABEL_161:
    v17 = v12;
    sub_100512490("Generic", 1, 0, 2, "static uint64_t CLParseXtra::getXtraBroadcastEphemerisHeaderGpsNs(std::istream &)", "%s\n", v13);
LABEL_162:
    if (v17 != buf)
      free(v17);
    goto LABEL_76;
  }
  if (HIBYTE(v36) != 32)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v43) = HIBYTE(v36);
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#eph,invalid headerLen,%u", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    v40 = 67109120;
    LODWORD(v41) = HIBYTE(v36);
    v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#eph,invalid headerLen,%u", &v40);
    v17 = v16;
    sub_100512490("Generic", 1, 0, 0, "static uint64_t CLParseXtra::getXtraBroadcastEphemerisHeaderGpsNs(std::istream &)", "%s\n", v15);
    goto LABEL_162;
  }
  if ((sub_100B2B920(a1, (int *)&v36, v5) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v18 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "reservedOne";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "reservedOne";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
    goto LABEL_161;
  }
  if (!sub_100B2B4AC(a1, (char *)&v35 + 7, v5))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v19 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "xtraEphVersion";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "xtraEphVersion";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
    goto LABEL_161;
  }
  if (HIBYTE(v35) != 62)
  {
LABEL_76:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#eph,getXtraBroadcastEphemerisHeaderGpsNs,could not read file age", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    LOWORD(v40) = 0;
    v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#eph,getXtraBroadcastEphemerisHeaderGpsNs,could not read file age");
LABEL_125:
    v7 = v9;
    sub_100512490("Generic", 1, 0, 2, "static uint64_t CLParseXtra::getXtraBroadcastEphemerisHeaderGpsNs(std::istream &)", "%s\n", v10);
LABEL_20:
    if (v7 != buf)
      free(v7);
    return 0;
  }
  if (!sub_100B2D720(a1, (char *)&v35, v5))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v22 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "reservedTwo[0]";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "reservedTwo[0]";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
    goto LABEL_161;
  }
  if (!sub_100B2D720(a1, (char *)&v35 + 1, v5))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v23 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "reservedTwo[1]";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "reservedTwo[1]";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
    goto LABEL_161;
  }
  if (!sub_100B2D720(a1, (char *)&v35 + 2, v5))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v24 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "reservedTwo[2]";
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "reservedTwo[2]";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
    goto LABEL_161;
  }
  if (!sub_100B2D720(a1, (char *)&v35 + 3, v5))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "reservedTwo[3]";
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "reservedTwo[3]";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
    goto LABEL_161;
  }
  if (!sub_100B2D720(a1, (char *)&v35 + 4, v5))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v26 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "reservedTwo[4]";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "reservedTwo[4]";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
    goto LABEL_161;
  }
  if (!sub_100B2D720(a1, (char *)&v35 + 5, v5))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v27 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "reservedTwo[5]";
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "reservedTwo[5]";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
    goto LABEL_161;
  }
  if ((sub_100B2B920(a1, (int *)&v34 + 1, v5) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v28 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "fileSequencyNum";
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "fileSequencyNum";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
    goto LABEL_161;
  }
  if ((sub_100B2B920(a1, (int *)&v34, v5) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v29 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "fileSize";
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "fileSize";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
    goto LABEL_161;
  }
  if ((sub_100B2B920(a1, (int *)&v33 + 1, v5) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v30 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "reservedThree";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "reservedThree";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
    goto LABEL_161;
  }
  if (!sub_100B2B6C4(a1, &v38, v5))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v31 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "fileGpsWeek";
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "fileGpsWeek";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
    goto LABEL_161;
  }
  if ((sub_100B2B920(a1, (int *)&v37, v5) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v32 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "fileGpsMsec";
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021728E0);
    v40 = 136446210;
    v41 = "fileGpsMsec";
    LODWORD(v33) = 12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning failed to read [%{public}s]", &v40, v33, v34, v35, v36);
    goto LABEL_161;
  }
  if (v37 >= 0x240C8400)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v43) = v37;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#eph,getXtraBroadcastEphemerisHeaderGpsNs,invalid fileGpsMsec,%u", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102172900);
    v40 = 67109120;
    LODWORD(v41) = v37;
    v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#eph,getXtraBroadcastEphemerisHeaderGpsNs,invalid fileGpsMsec,%u", &v40);
    goto LABEL_125;
  }
  return 1000000 * (v37 + 604800000 * v38);
}

void sub_100B2EEE8(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100B2EF14(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

_QWORD *sub_100B2EF40(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  char v8;

  std::istream::sentry::sentry(&v8, a1, 0);
  if (v8)
  {
    v4 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
      if ((_DWORD)v4 == -1)
      {
        v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_100B2EFEC(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x100B2EFB8);
  }
  __cxa_rethrow();
}

void sub_100B2F02C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_100B2F040(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_102172930;
  a1[1] = a2;
  a1[2] = a3;
  a1[3] = 0;
  sub_100239888();
}

void sub_100B2F100(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10008ABA0(v1);
  _Unwind_Resume(a1);
}

void sub_100B2F130(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionActivityLiteClient::onMotionActivityNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 16), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102172970);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionActivityLiteClient::onMotionActivityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102172970);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionActivityLiteClient::onMotionActivityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100B30148(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100B2F2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100B2F308(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_100B2F394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B2F3AC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102172930;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_10008ABA0(a1);
}

void sub_100B2F3F0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102172930;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_10008ABA0(a1);
  operator delete();
}

void sub_100B2F448(uint64_t a1, CLConnectionMessage **a2)
{
  _QWORD *v4;
  int v5;
  NSObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  CLConnectionMessage *v9;
  CLConnectionMessage *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const char *v18;
  uint8_t *v19;
  CLConnectionMessage *v20[2];
  int v21;
  uint64_t *v22;
  uint8_t buf[4];
  uint64_t *v24;

  v4 = (_QWORD *)CLConnectionMessage::name(*a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 59)
    {
LABEL_7:
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102172990);
      v6 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
      {
        v7 = (uint64_t *)CLConnectionMessage::name(*a2);
        if (*((char *)v7 + 23) >= 0)
          v8 = v7;
        else
          v8 = (uint64_t *)*v7;
        *(_DWORD *)buf = 136446210;
        v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Got unhandled mesage of type %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_102172990);
        v15 = qword_10229FCB8;
        v16 = (uint64_t *)CLConnectionMessage::name(*a2);
        if (*((char *)v16 + 23) >= 0)
          v17 = v16;
        else
          v17 = (uint64_t *)*v16;
        v21 = 136446210;
        v22 = v17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 17, "Got unhandled mesage of type %{public}s", &v21, 12);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLMotionActivityLiteClient::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      return;
    }
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 59)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "MotionActivityLite/kCLConnectionMessageMotionActivityUpdate", 0x3BuLL))
    goto LABEL_7;
  v9 = *a2;
  v10 = a2[1];
  v20[0] = v9;
  v20[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)((char *)v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_100B2F710(a1, v20);
  if (v10)
  {
    v13 = (unint64_t *)((char *)v10 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v10 + 16))(v10);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v10);
    }
  }
}

void sub_100B2F6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B2F710(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  const __CFDictionary *Dictionary;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  CLConnectionMessage *v10;
  NSObject *v12;
  NSObject *v13;
  CLConnectionMessage *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  _WORD v20[14];
  unsigned int v21;
  _DWORD v22[4];
  uint64_t v23;
  _UNKNOWN **v24;
  uint64_t v25;
  NSNumber *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;

  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_102172990);
  v4 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Received MotionActivityUpdate request", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102172990);
    v20[0] = 0;
    LODWORD(v19) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "Received MotionActivityUpdate request", v20, v19);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionActivityLiteClient::handleMessageMotionActivityUpdate(std::shared_ptr<CLConnectionMessage>)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v21 = 0;
  if (sub_100B2FC30(a1, (int *)&v21))
  {
    Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
    sub_1001C1D6C((int)v20, Dictionary);
    HIBYTE(v19) = 0;
    if ((sub_1001E4874((uint64_t)v20, "kCLConnectionMessageSubscribeKey", (BOOL *)&v19 + 7) & 1) != 0)
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102172990);
      v6 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        v28 = HIBYTE(v19);
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Received MotionActivityUpdate subscription,%{public}u", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_102172990);
        v22[0] = 67240192;
        v22[1] = HIBYTE(v19);
        LODWORD(v19) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "Received MotionActivityUpdate subscription,%{public}u", v22, v19);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionActivityLiteClient::handleMessageMotionActivityUpdate(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      v7 = *(_QWORD *)(a1 + 24);
      v9 = *(_QWORD *)(v7 + 8);
      v8 = *(void **)(v7 + 16);
      if (HIBYTE(v19))
        objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 1, 0);
      else
        objc_msgSend(v8, "unregister:forNotification:", v9, 1);
    }
    else
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102172990);
      v12 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289026;
        v28 = 0;
        v29 = 2082;
        v30 = "";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_102172990);
      }
      v13 = qword_10229FCB8;
      if (os_signpost_enabled((os_log_t)qword_10229FCB8))
      {
        *(_DWORD *)buf = 68289026;
        v28 = 0;
        v29 = 2082;
        v30 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      }
      v14 = *a2;
      v23 = CMErrorMessage;
      v24 = &off_10221BC00;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1);
      CLConnectionMessage::sendReply(v14);
    }
    return sub_10011A5A8(v20);
  }
  else
  {
    v10 = *a2;
    v25 = CMErrorMessage;
    v26 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v21);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
    return CLConnectionMessage::sendReply(v10);
  }
}

void sub_100B2FC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

BOOL sub_100B2FC30(uint64_t a1, int *a2)
{
  uint64_t v4;
  char isEntitled;
  char v6;
  _BOOL8 result;
  int v8;
  NSObject *v9;
  int v10;
  _BYTE *v11;
  NSObject *v12;
  int RemotePid;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  void **v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  void **v22;
  char *v23;
  char *v24;
  const void *v25;
  void *v26[2];
  char v27;
  _BYTE __p[12];
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  _BYTE buf[12];
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;

  if ((sub_1005E8448() & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    sub_1015A2E04(buf, "com.apple.locationd.activity");
    isEntitled = CLConnection::isEntitled(v4, buf);
    v6 = isEntitled;
    if (SBYTE3(v37) < 0)
    {
      operator delete(*(void **)buf);
      if ((v6 & 1) != 0)
        goto LABEL_4;
    }
    else if ((isEntitled & 1) != 0)
    {
LABEL_4:
      result = 1;
      v8 = 100;
      goto LABEL_24;
    }
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102172990);
    v12 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      v14 = __p;
      *(_DWORD *)buf = 136315650;
      if ((v32 & 0x80000000) != 0)
        v14 = *(_BYTE **)__p;
      *(_QWORD *)&buf[4] = v14;
      v34 = 1024;
      v35 = RemotePid;
      v36 = 2048;
      v37 = a1;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "ActivityLite client failed entitlement check,connection,%s,pid,%d,this,%p", buf, 0x1Cu);
      if (SBYTE3(v32) < 0)
        operator delete(*(void **)__p);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102172990);
      v20 = qword_10229FCB8;
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      v21 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      v22 = v26;
      *(_DWORD *)__p = 136315650;
      if (v27 < 0)
        v22 = (void **)v26[0];
      *(_QWORD *)&__p[4] = v22;
      v29 = 1024;
      v30 = v21;
      v31 = 2048;
      v32 = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 0, "ActivityLite client failed entitlement check,connection,%s,pid,%d,this,%p", __p, 28, v25);
      v24 = v23;
      if (v27 < 0)
        operator delete(v26[0]);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionActivityLiteClient::isAuthorizedForMotionActivityLite(CMError &)", "%s\n", v24);
      if (v24 != buf)
        free(v24);
      result = 0;
    }
    v8 = 110;
  }
  else
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102172990);
    v9 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      v10 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      v11 = __p;
      *(_DWORD *)buf = 136315650;
      if ((v32 & 0x80000000) != 0)
        v11 = *(_BYTE **)__p;
      *(_QWORD *)&buf[4] = v11;
      v34 = 1024;
      v35 = v10;
      v36 = 2048;
      v37 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "ActivityLite not available unable to service request,connection,%s,pid,%d,this,%p", buf, 0x1Cu);
      if (SBYTE3(v32) < 0)
        operator delete(*(void **)__p);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102172990);
      v15 = qword_10229FCB8;
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      v16 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      v17 = v26;
      *(_DWORD *)__p = 136315650;
      if (v27 < 0)
        v17 = (void **)v26[0];
      *(_QWORD *)&__p[4] = v17;
      v29 = 1024;
      v30 = v16;
      v31 = 2048;
      v32 = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "ActivityLite not available unable to service request,connection,%s,pid,%d,this,%p", __p, 28, v25);
      v19 = v18;
      if (v27 < 0)
        operator delete(v26[0]);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionActivityLiteClient::isAuthorizedForMotionActivityLite(CMError &)", "%s\n", v19);
      if (v19 != buf)
        free(v19);
      result = 0;
    }
    v8 = 109;
  }
LABEL_24:
  *a2 = v8;
  return result;
}

void sub_100B300F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100B30148(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  NSDictionary *v23;
  _OWORD v24[8];
  uint64_t v25;
  uint64_t v26;
  id v27;

  if (*a3 == 1 && *(_QWORD *)(a1 + 8))
  {
    v6 = objc_alloc((Class)CMMotionActivity);
    v7 = *(_OWORD *)(a4 + 112);
    v24[6] = *(_OWORD *)(a4 + 96);
    v24[7] = v7;
    v25 = *(_QWORD *)(a4 + 128);
    v8 = *(_OWORD *)(a4 + 48);
    v24[2] = *(_OWORD *)(a4 + 32);
    v24[3] = v8;
    v9 = *(_OWORD *)(a4 + 80);
    v24[4] = *(_OWORD *)(a4 + 64);
    v24[5] = v9;
    v10 = *(_OWORD *)(a4 + 16);
    v24[0] = *(_OWORD *)a4;
    v24[1] = v10;
    v11 = objc_msgSend(v6, "initWithMotionActivity:", v24);
    v26 = CMMotionActivityData;
    v27 = v11;
    v23 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);

    sub_100B3035C("MotionActivityLite/kCLConnectionMessageMotionActivityUpdate", &v23, &v21);
    v12 = *(_QWORD *)(a1 + 8);
    v20 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    CLConnection::sendMessage(v12);
    if (v20)
    {
      v15 = (unint64_t *)&v20->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v17 = v22;
    if (v22)
    {
      v18 = (unint64_t *)&v22->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_100B302E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100B30304(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B30330(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

_QWORD *sub_100B3035C@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100B303A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100B303DC()
{
  if (qword_102306B68 != -1)
    dispatch_once(&qword_102306B68, &stru_1021729B0);
  return qword_1023112F8;
}

void sub_100B3041C(id a1)
{
  operator new();
}

void sub_100B305E0()
{
  operator delete();
}

double sub_100B30608(uint64_t a1, _DWORD *a2)
{
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  v3 = (_QWORD *)a1;
  if (!*(_BYTE *)(a1 + 24))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021729D0);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v5 = v3[1];
      v6 = v3[2];
      *(_DWORD *)buf = 134349312;
      v16 = v5;
      v17 = 2050;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "LocationController,#time,getTime,#Warning: current latched timestamp is invalid,mct_sec,%{public}.3f,cfat_sec,%{public}.3f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021729D0);
      v8 = v3[1];
      v9 = v3[2];
      v11 = 134349312;
      v12 = v8;
      v13 = 2050;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "LocationController,#time,getTime,#Warning: current latched timestamp is invalid,mct_sec,%{public}.3f,cfat_sec,%{public}.3f", &v11, 22);
      sub_100512490("Generic", 1, 0, 0, "CFTimeInterval CLLocationControllerLatchedTime::getTime(const Type &)", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  if (*a2 != 1)
  {
    if (*a2)
      return result;
    v3 += 2;
  }
  return *(double *)v3;
}

__n128 sub_100B307F4@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  NSObject *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  int v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  uint8_t buf[4];
  unint64_t v16;
  __int16 v17;
  unint64_t v18;

  if (!a1[1].n128_u8[8])
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021729D0);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v5 = a1->n128_u64[1];
      v6 = a1[1].n128_u64[0];
      *(_DWORD *)buf = 134349312;
      v16 = v5;
      v17 = 2050;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "LocationController,#time,getTimestamp,#Warning: current latched timestamp is invalid,mct_sec,%{public}.3f,cfat_sec,%{public}.3f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021729D0);
      v8 = a1->n128_u64[1];
      v9 = a1[1].n128_u64[0];
      v11 = 134349312;
      v12 = v8;
      v13 = 2050;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "LocationController,#time,getTimestamp,#Warning: current latched timestamp is invalid,mct_sec,%{public}.3f,cfat_sec,%{public}.3f", &v11, 22);
      sub_100512490("Generic", 1, 0, 0, "CLUtils::Timestamp CLLocationControllerLatchedTime::getTimestamp()", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[8] = a1[1].n128_u8[8];
  return result;
}

double sub_100B309E0(uint64_t a1)
{
  return (sub_1001FCBB4() - *(double *)(a1 + 32)) * 1000000.0;
}

void sub_100B30A14(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  double v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;

  if (!*(_BYTE *)(a1 + 24))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021729D0);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *a2;
      v6 = a2[2];
      v7 = *((unsigned __int8 *)a2 + 24);
      *(_DWORD *)buf = 134218496;
      v21 = v5;
      v22 = 2048;
      v23 = v6;
      v24 = 1024;
      v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "LocationController,#time,setTime,set for the first time,mct,%.3f,cfat,%.3f,isValid,%d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021729D0);
      v9 = *a2;
      v10 = a2[2];
      v11 = *((unsigned __int8 *)a2 + 24);
      v14 = 134218496;
      v15 = v9;
      v16 = 2048;
      v17 = v10;
      v18 = 1024;
      v19 = v11;
      LODWORD(v13) = 28;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "LocationController,#time,setTime,set for the first time,mct,%.3f,cfat,%.3f,isValid,%d", COERCE_DOUBLE(&v14), v13);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerLatchedTime::setTime(const CLUtils::Timestamp &)", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
  v8 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  *(_OWORD *)a1 = v8;
  *(double *)(a1 + 32) = sub_1001FCBB4();
}

void sub_100B30C28(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100B30C54()
{
  uint64_t result;

  if (qword_102311300)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311300 + 8))(qword_102311300);
  if (qword_102311308)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311308 + 8))(qword_102311308);
  if (qword_102311310)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311310 + 8))(qword_102311310);
  if (qword_102311318)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311318 + 8))(qword_102311318);
  if (qword_102311320)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311320 + 8))(qword_102311320);
  if (qword_102311328)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311328 + 8))(qword_102311328);
  if (qword_102311330)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311330 + 8))(qword_102311330);
  if (qword_102311338)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311338 + 8))(qword_102311338);
  if (qword_102311340)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311340 + 8))(qword_102311340);
  if (qword_102311348)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311348 + 8))(qword_102311348);
  if (qword_102311350)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311350 + 8))(qword_102311350);
  if (qword_102311358)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311358 + 8))(qword_102311358);
  if (qword_102311360)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311360 + 8))(qword_102311360);
  if (qword_102311368)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311368 + 8))(qword_102311368);
  if (qword_102311370)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311370 + 8))(qword_102311370);
  if (qword_102311378)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311378 + 8))(qword_102311378);
  if (qword_102311380)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311380 + 8))(qword_102311380);
  if (qword_102311388)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311388 + 8))(qword_102311388);
  if (qword_102311390)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311390 + 8))(qword_102311390);
  if (qword_102311398)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311398 + 8))(qword_102311398);
  result = qword_1023113A0;
  if (qword_1023113A0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1023113A0 + 8))(qword_1023113A0);
  return result;
}

void sub_100B30E60(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_102306B70 & 1) == 0)
  {
    byte_102306B70 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", a4);
    operator new();
  }
}

double sub_100B31470(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102172A00;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

_QWORD *sub_100B3148C(_QWORD *result)
{
  *result = &off_102172A78;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_100B314A0(_QWORD *result)
{
  *result = &off_102172AF0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100B314B4(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102172B68;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100B314D0(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102172BE0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

_QWORD *sub_100B314EC(_QWORD *result)
{
  *result = off_102172C58;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

double sub_100B31500(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102172CD0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  return result;
}

double sub_100B31524(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102172D48;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  return result;
}

double sub_100B31548(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 80) = 0xFFFFFFFFLL;
  *(_QWORD *)a1 = off_102172DC0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

double sub_100B3157C(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_102173090;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)&result = 0x8FFFFFFFFLL;
  *(_OWORD *)(a1 + 32) = xmmword_101C15B10;
  return result;
}

_QWORD *sub_100B315A0(_QWORD *result)
{
  *result = &off_102173108;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_100B315B4(_QWORD *result)
{
  *result = &off_102173180;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100B315C8(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1021731F8;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

double sub_100B315E4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102173270;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 168) = 0;
  return result;
}

_QWORD *sub_100B3163C(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_1021732E8;
  return result;
}

double sub_100B31650(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102173360;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_100B31674(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)result;
  v2 = qword_102311300;
  if (qword_102311300)
  {
    *(_QWORD *)(result + 8) = qword_102311300;
  }
  else
  {
    result = ((uint64_t (*)(void))sub_100B30E60)();
    v2 = qword_102311300;
    v1[1] = qword_102311300;
    if (!v2)
    {
      result = sub_100B30E60(result);
      v2 = qword_102311300;
    }
  }
  v1[2] = v2;
  v3 = qword_102311330;
  if (!qword_102311330)
  {
    result = sub_100B30E60(result);
    v3 = qword_102311330;
  }
  v1[3] = v3;
  v4 = qword_102311338;
  if (!qword_102311338)
  {
    result = sub_100B30E60(result);
    v4 = qword_102311338;
  }
  v1[5] = v4;
  v5 = qword_102311318;
  if (qword_102311318)
  {
    v1[7] = qword_102311318;
  }
  else
  {
    result = sub_100B30E60(result);
    v5 = qword_102311318;
    v1[7] = qword_102311318;
    if (!v5)
    {
      result = sub_100B30E60(result);
      v5 = qword_102311318;
    }
  }
  v1[8] = v5;
  v6 = qword_102311328;
  if (!qword_102311328)
  {
    result = sub_100B30E60(result);
    v6 = qword_102311328;
  }
  v1[9] = v6;
  return result;
}

uint64_t sub_100B31738(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)result;
  v2 = qword_102311300;
  if (!qword_102311300)
  {
    result = sub_100B30E60(result);
    v2 = qword_102311300;
  }
  v1[1] = v2;
  v3 = qword_102311320;
  if (qword_102311320)
  {
    v1[2] = qword_102311320;
  }
  else
  {
    result = sub_100B30E60(result);
    v3 = qword_102311320;
    v1[2] = qword_102311320;
    if (!v3)
    {
      result = sub_100B30E60(result);
      v3 = qword_102311320;
    }
  }
  v1[3] = v3;
  v4 = qword_102311310;
  if (!qword_102311310)
  {
    result = sub_100B30E60(result);
    v4 = qword_102311310;
  }
  v1[4] = v4;
  v5 = qword_102311350;
  if (!qword_102311350)
  {
    result = sub_100B30E60(result);
    v5 = qword_102311350;
  }
  v1[6] = v5;
  v6 = qword_102311368;
  if (!qword_102311368)
  {
    result = sub_100B30E60(result);
    v6 = qword_102311368;
  }
  v1[7] = v6;
  return result;
}

uint64_t sub_100B317E4(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)result;
  v2 = qword_102311300;
  if (!qword_102311300)
  {
    result = sub_100B30E60(result);
    v2 = qword_102311300;
  }
  v1[1] = v2;
  v3 = qword_102311378;
  if (!qword_102311378)
  {
    result = sub_100B30E60(result);
    v3 = qword_102311378;
  }
  v1[2] = v3;
  v4 = qword_102311320;
  if (!qword_102311320)
  {
    result = sub_100B30E60(result);
    v4 = qword_102311320;
  }
  v1[3] = v4;
  v5 = qword_102311388;
  if (!qword_102311388)
  {
    result = sub_100B30E60(result);
    v5 = qword_102311388;
  }
  v1[4] = v5;
  v6 = qword_102311398;
  if (!qword_102311398)
  {
    result = sub_100B30E60(result);
    v6 = qword_102311398;
  }
  v1[5] = v6;
  return result;
}

BOOL sub_100B31878(int a1)
{
  return (a1 + 1) < 6;
}

double sub_100B31888(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 375);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return result;
LABEL_7:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_100B31958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B31970(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172A00;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B31980(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172A00;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100B319B0()
{
  operator new();
}

uint64_t sub_100B319F0(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100B31A08(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t result;
  unint64_t v12;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v12;
        *(_DWORD *)(a1 + 36) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 < *((_QWORD *)this + 2) && *v9 == 17)
        {
          *((_QWORD *)this + 1) = v9 + 1;
LABEL_17:
          v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
            return 0;
          *(_QWORD *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 36) |= 2u;
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 25)
          {
            *((_QWORD *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_27;
      }
      v8 = TagFallback & 7;
      if (v8 == 1)
        break;
LABEL_27:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_21:
    v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_100B31BCC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
  return result;
}

uint64_t sub_100B31C44(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

double sub_100B31C7C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100B31888(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B31CC8()
{
  return 1;
}

_QWORD *sub_100B31CD0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.TimeStamp");
}

void sub_100B31CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 553);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    sub_1002A19E0(a1 + 8, *(_DWORD *)(a1 + 16) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 8) + 4 * *(int *)(a1 + 16)), *(const void **)(a2 + 8), 4 * *(int *)(a2 + 16));
    *(_DWORD *)(a1 + 16) += *(_DWORD *)(a2 + 16);
  }
}

void sub_100B31D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B31DA8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(_QWORD *)this = &off_102172A78;
  if (*((_QWORD *)this + 1))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B31DF4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B31DA8(a1);
  operator delete();
}

void sub_100B31E18()
{
  operator new();
}

uint64_t sub_100B31E50(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B31E5C(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  signed int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  char v23;
  unsigned int v24[12];

  v5 = a1 + 8;
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      v8 = TagFallback & 7;
      if ((TagFallback & 0xFFFFFFF8) != 8)
        break;
      if (v8 != 2)
      {
        if (v8 != 5)
          break;
        goto LABEL_15;
      }
      result = sub_100B320D4(this, v5);
      if (!(_DWORD)result)
        return result;
      while (1)
      {
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        v22 = (_BYTE *)*((_QWORD *)this + 2);
        if (v21 >= v22 || *v21 != 13)
          break;
        *((_QWORD *)this + 1) = v21 + 1;
LABEL_15:
        v24[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v24) & 1) == 0)
          return 0;
        v10 = v24[0];
        v11 = *(_DWORD *)(a1 + 16);
        if (v11 == *(_DWORD *)(a1 + 20))
        {
          sub_1002A19E0(v5, v11 + 1);
          v11 = *(_DWORD *)(a1 + 16);
        }
        v12 = *(_QWORD *)(a1 + 8);
        v13 = v11 + 1;
        *(_DWORD *)(a1 + 16) = v11 + 1;
        *(_DWORD *)(v12 + 4 * v11) = v10;
        v14 = *((_QWORD *)this + 1);
        v15 = *((_DWORD *)this + 4) - v14;
        if (v15 >= 1)
        {
          v16 = v15 / 5u;
          v17 = v16 >= *(_DWORD *)(a1 + 20) - v13 ? *(_DWORD *)(a1 + 20) - v13 : v16;
          if (v17 >= 1)
          {
            v18 = 0;
            while (*(_BYTE *)v14 == 13)
            {
              v19 = *(_DWORD *)(v14 + 1);
              if (v13 >= *(_DWORD *)(a1 + 20))
              {
                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v24, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                v20 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (size()) < (Capacity()): ");
                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v23, v20);
                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
                v13 = *(_DWORD *)(a1 + 16);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 16) = v13 + 1;
              *(_DWORD *)(v12 + 4 * v13) = v19;
              ++v18;
              v14 += 5;
              ++v13;
              if (v17 == v18)
              {
                v18 = v17;
                break;
              }
            }
            if (v18)
              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v18);
          }
        }
      }
      if (v21 == v22 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

void sub_100B320BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B320D4(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v11 = 0;
  v4 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v4 >= *((_QWORD *)this + 2) || *v4 < 0)
  {
    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v11);
    if (!(_DWORD)result)
      return result;
    v5 = v11;
  }
  else
  {
    v5 = *v4;
    v11 = v5;
    *((_QWORD *)this + 1) = v4 + 1;
  }
  v7 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) < 1)
  {
LABEL_11:
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v7);
    return 1;
  }
  else
  {
    while (1)
    {
      v12 = 0;
      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v12);
      if (!(_DWORD)result)
        break;
      v8 = v12;
      v9 = *(_DWORD *)(a2 + 8);
      if (v9 == *(_DWORD *)(a2 + 12))
      {
        sub_1002A19E0(a2, v9 + 1);
        v9 = *(_DWORD *)(a2 + 8);
      }
      v10 = *(_QWORD *)a2;
      *(_DWORD *)(a2 + 8) = v9 + 1;
      *(_DWORD *)(v10 + 4 * v9) = v8;
      if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) <= 0)
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_100B321CC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (*(int *)(result + 16) >= 1)
  {
    v4 = result;
    v5 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(float *)(*(_QWORD *)(v4 + 8) + 4 * v5++), a3);
    while (v5 < *(int *)(v4 + 16));
  }
  return result;
}

uint64_t sub_100B32228(uint64_t a1)
{
  uint64_t v1;

  v1 = (5 * *(_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

void sub_100B3223C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B31CE0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B32288()
{
  return 1;
}

_QWORD *sub_100B32290@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.simd_floatM");
}

void sub_100B322A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 719);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    sub_1002E60A0(a1 + 8, *(_DWORD *)(a1 + 16) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 8) + 8 * *(int *)(a1 + 16)), *(const void **)(a2 + 8), 8 * *(int *)(a2 + 16));
    *(_DWORD *)(a1 + 16) += *(_DWORD *)(a2 + 16);
  }
}

void sub_100B32350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B32368(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(_QWORD *)this = &off_102172AF0;
  if (*((_QWORD *)this + 1))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B323B4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B32368(a1);
  operator delete();
}

void sub_100B323D8()
{
  operator new();
}

uint64_t sub_100B32410(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B3241C(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  signed int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24[6];

  v5 = a1 + 8;
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    v8 = TagFallback & 7;
    if ((TagFallback & 0xFFFFFFF8) == 8)
    {
      if (v8 == 1)
      {
        while (1)
        {
          v24[0] = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v24) & 1) == 0)
            return 0;
          v10 = v24[0];
          v11 = *(_DWORD *)(a1 + 16);
          if (v11 == *(_DWORD *)(a1 + 20))
          {
            sub_1002E60A0(v5, v11 + 1);
            v11 = *(_DWORD *)(a1 + 16);
          }
          v12 = *(_QWORD *)(a1 + 8);
          v13 = v11 + 1;
          *(_DWORD *)(a1 + 16) = v11 + 1;
          *(_QWORD *)(v12 + 8 * v11) = v10;
          v14 = *((_QWORD *)this + 1);
          v15 = *((_DWORD *)this + 4) - v14;
          if (v15 >= 1)
          {
            v16 = v15 / 9u;
            v17 = v16 >= *(_DWORD *)(a1 + 20) - v13 ? *(_DWORD *)(a1 + 20) - v13 : v16;
            if (v17 >= 1)
            {
              v18 = 0;
              while (*(_BYTE *)v14 == 9)
              {
                v19 = *(_QWORD *)(v14 + 1);
                if (v13 >= *(_DWORD *)(a1 + 20))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v24, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                  v20 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v23, v20);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
                  v13 = *(_DWORD *)(a1 + 16);
                  v12 = *(_QWORD *)(a1 + 8);
                }
                *(_DWORD *)(a1 + 16) = v13 + 1;
                *(_QWORD *)(v12 + 8 * v13) = v19;
                ++v18;
                v14 += 9;
                ++v13;
                if (v17 == v18)
                {
                  v18 = v17;
                  break;
                }
              }
              if (v18)
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v18);
            }
          }
LABEL_31:
          v21 = (_BYTE *)*((_QWORD *)this + 1);
          v22 = (_BYTE *)*((_QWORD *)this + 2);
          if (v21 >= v22 || *v21 != 9)
          {
            if (v21 == v22 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
            goto LABEL_2;
          }
          *((_QWORD *)this + 1) = v21 + 1;
        }
      }
      if (v8 == 2)
        break;
    }
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  result = sub_1002C6D44(this, v5);
  if ((_DWORD)result)
    goto LABEL_31;
  return result;
}

void sub_100B3267C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B32694(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (*(int *)(result + 16) >= 1)
  {
    v4 = result;
    v5 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(*(_QWORD *)(v4 + 8) + 8 * v5++), a3);
    while (v5 < *(int *)(v4 + 16));
  }
  return result;
}

uint64_t sub_100B326F0(uint64_t a1)
{
  uint64_t v1;

  v1 = (9 * *(_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

void sub_100B32704(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B322A0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B32750()
{
  return 1;
}

_QWORD *sub_100B32758@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.simd_doubleM");
}

void sub_100B32768(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 879);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        operator new();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_100B31CE0(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
}

void sub_100B328B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B328C8(uint64_t *a1)
{
  *a1 = (uint64_t)off_102172B68;
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100B32900(uint64_t *a1)
{
  sub_100B328C8(a1);
  operator delete();
}

void sub_100B32924()
{
  operator new();
}

uint64_t sub_100B32964(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100B329BC(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = a1[5];
        v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            v8 = a1[5];
          }
          a1[5] = v8 + 1;
          operator new();
        }
        v10 = *((_QWORD *)a1 + 1);
        a1[4] = v9 + 1;
        v11 = *(_QWORD *)(v10 + 8 * v9);
        v23 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0;
        }
        else
        {
          v23 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v13 = *((_DWORD *)this + 14);
        v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_100B31E5C(v11, this, v16) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        v17 = *((_DWORD *)this + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)this + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)this + 1);
        v21 = (_BYTE *)*((_QWORD *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)this + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100B32BD0(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(result + 16) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_100B32C2C(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 1)
  {
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = 0;
    LODWORD(v5) = *(_DWORD *)(a1 + 16);
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4);
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(5 * *(_DWORD *)(v6 + 16));
      *(_DWORD *)(v6 + 24) = (_DWORD)v7;
      if (v7 >= 0x80)
      {
        v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        v3 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v8 = 1;
      }
      v5 = ((_DWORD)v7 + v5 + v8);
      ++v4;
    }
    while (v4 < v3);
  }
  *(_DWORD *)(a1 + 32) = v5;
  return v5;
}

void sub_100B32CB8(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B32768(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B32D04()
{
  return 1;
}

_QWORD *sub_100B32D0C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.simd_floatMxN");
}

void sub_100B32D1C(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 1039);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        operator new();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_100B322A0(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
}

void sub_100B32E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B32E7C(uint64_t *a1)
{
  *a1 = (uint64_t)off_102172BE0;
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100B32EB4(uint64_t *a1)
{
  sub_100B32E7C(a1);
  operator delete();
}

void sub_100B32ED8()
{
  operator new();
}

uint64_t sub_100B32F18(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100B32F70(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = a1[5];
        v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            v8 = a1[5];
          }
          a1[5] = v8 + 1;
          operator new();
        }
        v10 = *((_QWORD *)a1 + 1);
        a1[4] = v9 + 1;
        v11 = *(_QWORD *)(v10 + 8 * v9);
        v23 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0;
        }
        else
        {
          v23 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v13 = *((_DWORD *)this + 14);
        v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_100B3241C(v11, this, v16) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        v17 = *((_DWORD *)this + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)this + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)this + 1);
        v21 = (_BYTE *)*((_QWORD *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)this + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100B33184(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(result + 16) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_100B331E0(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 1)
  {
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = 0;
    LODWORD(v5) = *(_DWORD *)(a1 + 16);
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4);
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(9 * *(_DWORD *)(v6 + 16));
      *(_DWORD *)(v6 + 24) = (_DWORD)v7;
      if (v7 >= 0x80)
      {
        v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        v3 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v8 = 1;
      }
      v5 = ((_DWORD)v7 + v5 + v8);
      ++v4;
    }
    while (v4 < v3);
  }
  *(_DWORD *)(a1 + 32) = v5;
  return v5;
}

void sub_100B3326C(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B32D1C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B332B8()
{
  return 1;
}

_QWORD *sub_100B332C0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.simd_doubleMxN");
}

double sub_100B332D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 1229);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 2) != 0)
    {
      result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_100B33378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B33390(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172C58;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B333A0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172C58;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100B333D0()
{
  operator new();
}

uint64_t sub_100B33408(uint64_t result)
{
  if (*(_BYTE *)(result + 28))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B3341C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  uint64_t result;
  unint64_t v10;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_21;
        v10 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 28) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 < *((_QWORD *)this + 2) && *v8 == 17)
        {
          *((_QWORD *)this + 1) = v8 + 1;
          goto LABEL_15;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_21;
      }
      v7 = TagFallback & 7;
      if (v7 == 1)
        break;
LABEL_21:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_15:
    v10 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 28) |= 2u;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_100B33580(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 28);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 28);
  }
  if ((v5 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  return result;
}

uint64_t sub_100B335D8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(_BYTE *)(a1 + 28))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_100B33604(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100B332D0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B33650()
{
  return 1;
}

_QWORD *sub_100B33658@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.CGSize");
}

void sub_100B33668(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char v18;
  _BYTE v19[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v19, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 1745);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v18, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  v5 = *(_DWORD *)(a2 + 64);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 64) |= 1u;
    *(_QWORD *)(a1 + 8) = v8;
    v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_22;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 64) |= 2u;
  *(_DWORD *)(a1 + 16) = v9;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) |= 4u;
  *(_DWORD *)(a1 + 20) = v10;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 64) |= 8u;
  *(_DWORD *)(a1 + 24) = v11;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_25:
    v13 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v13;
    v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_24:
  v12 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 64) |= 0x10u;
  *(_DWORD *)(a1 + 28) = v12;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x20) != 0)
    goto LABEL_25;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_26:
  v14 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 64) |= 0x40u;
  *(_DWORD *)(a1 + 36) = v14;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 64) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v6;
    v5 = *(_DWORD *)(a2 + 64);
  }
LABEL_13:
  if ((v5 & 0xFF00) == 0)
    return;
  if ((v5 & 0x100) != 0)
  {
    v15 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 64) |= 0x100u;
    *(_DWORD *)(a1 + 44) = v15;
    v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0)
        goto LABEL_17;
      goto LABEL_30;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }
  v16 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) |= 0x200u;
  *(_DWORD *)(a1 + 48) = v16;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0)
      return;
    goto LABEL_18;
  }
LABEL_30:
  v17 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 64) |= 0x400u;
  *(_DWORD *)(a1 + 52) = v17;
  if ((*(_DWORD *)(a2 + 64) & 0x800) == 0)
    return;
LABEL_18:
  v7 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) |= 0x800u;
  *(_DWORD *)(a1 + 56) = v7;
}

void sub_100B33864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B3387C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172CD0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B3388C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172CD0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100B338BC()
{
  operator new();
}

uint64_t sub_100B33904(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 64);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(result + 52) = 0;
    *(_QWORD *)(result + 44) = 0;
  }
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_100B33938(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  char *v12;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned __int8 *v39;
  uint64_t result;
  unint64_t *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;

  v41 = (unint64_t *)(a1 + 8);
  v42 = (unsigned int *)(a1 + 16);
  v43 = (unsigned int *)(a1 + 20);
  v44 = (unsigned int *)(a1 + 24);
  v45 = (unsigned int *)(a1 + 28);
  v5 = (unsigned int *)(a1 + 32);
  v6 = (unsigned int *)(a1 + 36);
  v7 = (unsigned int *)(a1 + 40);
  v8 = (unsigned int *)(a1 + 44);
  v9 = (unsigned int *)(a1 + 48);
  v10 = (unsigned int *)(a1 + 52);
  v11 = (unsigned int *)(a1 + 56);
  while (2)
  {
    v12 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v12;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v12 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v16 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((unint64_t)v16 < v15 && (*v16 & 0x80000000) == 0)
        {
          *v41 = *v16;
          v17 = v16 + 1;
          *((_QWORD *)this + 1) = v17;
LABEL_40:
          *(_DWORD *)(a1 + 64) |= 1u;
          if ((unint64_t)v17 < v15 && *v17 == 16)
          {
            v18 = v17 + 1;
            *((_QWORD *)this + 1) = v18;
            goto LABEL_43;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v41);
        if ((_DWORD)result)
        {
          v17 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
          goto LABEL_40;
        }
        break;
      case 2u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v18 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
LABEL_43:
        if ((unint64_t)v18 >= v15 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v42);
          if (!(_DWORD)result)
            return result;
          v29 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v42 = *v18;
          v29 = v18 + 1;
          *((_QWORD *)this + 1) = v29;
        }
        *(_DWORD *)(a1 + 64) |= 2u;
        if ((unint64_t)v29 >= v15 || *v29 != 24)
          continue;
        v19 = v29 + 1;
        *((_QWORD *)this + 1) = v19;
LABEL_51:
        if ((unint64_t)v19 >= v15 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
          if (!(_DWORD)result)
            return result;
          v30 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v43 = *v19;
          v30 = v19 + 1;
          *((_QWORD *)this + 1) = v30;
        }
        *(_DWORD *)(a1 + 64) |= 4u;
        if ((unint64_t)v30 >= v15 || *v30 != 32)
          continue;
        v20 = v30 + 1;
        *((_QWORD *)this + 1) = v20;
LABEL_59:
        if ((unint64_t)v20 >= v15 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v44);
          if (!(_DWORD)result)
            return result;
          v31 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v44 = *v20;
          v31 = v20 + 1;
          *((_QWORD *)this + 1) = v31;
        }
        *(_DWORD *)(a1 + 64) |= 8u;
        if ((unint64_t)v31 >= v15 || *v31 != 40)
          continue;
        v21 = v31 + 1;
        *((_QWORD *)this + 1) = v21;
LABEL_67:
        if ((unint64_t)v21 >= v15 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
          if (!(_DWORD)result)
            return result;
          v32 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v45 = *v21;
          v32 = v21 + 1;
          *((_QWORD *)this + 1) = v32;
        }
        *(_DWORD *)(a1 + 64) |= 0x10u;
        if ((unint64_t)v32 >= v15 || *v32 != 48)
          continue;
        v22 = v32 + 1;
        *((_QWORD *)this + 1) = v22;
LABEL_75:
        if ((unint64_t)v22 >= v15 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v33 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v22;
          v33 = v22 + 1;
          *((_QWORD *)this + 1) = v33;
        }
        *(_DWORD *)(a1 + 64) |= 0x20u;
        if ((unint64_t)v33 >= v15 || *v33 != 56)
          continue;
        v23 = v33 + 1;
        *((_QWORD *)this + 1) = v23;
LABEL_83:
        if ((unint64_t)v23 >= v15 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v34 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v23;
          v34 = v23 + 1;
          *((_QWORD *)this + 1) = v34;
        }
        *(_DWORD *)(a1 + 64) |= 0x40u;
        if ((unint64_t)v34 >= v15 || *v34 != 64)
          continue;
        v24 = v34 + 1;
        *((_QWORD *)this + 1) = v24;
LABEL_91:
        if ((unint64_t)v24 >= v15 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v35 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v24;
          v35 = v24 + 1;
          *((_QWORD *)this + 1) = v35;
        }
        *(_DWORD *)(a1 + 64) |= 0x80u;
        if ((unint64_t)v35 >= v15 || *v35 != 72)
          continue;
        v25 = v35 + 1;
        *((_QWORD *)this + 1) = v25;
LABEL_99:
        if ((unint64_t)v25 >= v15 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!(_DWORD)result)
            return result;
          v36 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v8 = *v25;
          v36 = v25 + 1;
          *((_QWORD *)this + 1) = v36;
        }
        *(_DWORD *)(a1 + 64) |= 0x100u;
        if ((unint64_t)v36 >= v15 || *v36 != 80)
          continue;
        v26 = v36 + 1;
        *((_QWORD *)this + 1) = v26;
LABEL_107:
        if ((unint64_t)v26 >= v15 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
          if (!(_DWORD)result)
            return result;
          v37 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v9 = *v26;
          v37 = v26 + 1;
          *((_QWORD *)this + 1) = v37;
        }
        *(_DWORD *)(a1 + 64) |= 0x200u;
        if ((unint64_t)v37 >= v15 || *v37 != 88)
          continue;
        v27 = v37 + 1;
        *((_QWORD *)this + 1) = v27;
LABEL_115:
        if ((unint64_t)v27 >= v15 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
          if (!(_DWORD)result)
            return result;
          v38 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v10 = *v27;
          v38 = v27 + 1;
          *((_QWORD *)this + 1) = v38;
        }
        *(_DWORD *)(a1 + 64) |= 0x400u;
        if ((unint64_t)v38 >= v15 || *v38 != 96)
          continue;
        v28 = v38 + 1;
        *((_QWORD *)this + 1) = v28;
LABEL_123:
        if ((unint64_t)v28 >= v15 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v11);
          if (!(_DWORD)result)
            return result;
          v39 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v11 = *v28;
          v39 = (unsigned __int8 *)(v28 + 1);
          *((_QWORD *)this + 1) = v39;
        }
        *(_DWORD *)(a1 + 64) |= 0x800u;
        if (v39 != (unsigned __int8 *)v15 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v19 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_51;
      case 4u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v20 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_59;
      case 5u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v21 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_67;
      case 6u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v22 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_75;
      case 7u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v23 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_83;
      case 8u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v24 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_91;
      case 9u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v25 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_99;
      case 0xAu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v26 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_107;
      case 0xBu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v27 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_115;
      case 0xCu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v28 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_123;
      default:
        v14 = TagFallback & 7;
LABEL_34:
        if (v14 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100B33FB4(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  int *v5;
  int v6;

  v4 = a2;
  v5 = (int *)result;
  v6 = *(_DWORD *)(result + 64);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = v5[16];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], v4, a4);
  v6 = v5[16];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], v4, a4);
  v6 = v5[16];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[8], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[9], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[10], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v5[11], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v5[12], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v5[14], v4, a4);
  }
LABEL_24:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v5[13], v4, a4);
  if ((v5[16] & 0x800) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v5[14], v4, a4);
  return result;
}

uint64_t sub_100B34128(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;

  v3 = *(_DWORD *)(a1 + 64);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_42;
  }
  if ((v3 & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 64);
    if ((v3 & 2) == 0)
      goto LABEL_11;
  }
  else
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_11;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v6 = 1;
  }
  v4 = (v4 + v6 + 1);
LABEL_11:
  if ((v3 & 4) != 0)
  {
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      v8 = 1;
    }
    v4 = (v4 + v8 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_13:
      if ((v3 & 0x10) == 0)
        goto LABEL_14;
      goto LABEL_26;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_13;
  }
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v10 = 1;
  }
  v4 = (v4 + v10 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_14:
    if ((v3 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_26:
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v12 = 2;
  }
  v4 = (v12 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_15:
    if ((v3 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_30:
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v14 = 2;
  }
  v4 = (v14 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_16:
    if ((v3 & 0x80) == 0)
      goto LABEL_42;
    goto LABEL_38;
  }
LABEL_34:
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v16 = 2;
  }
  v4 = (v16 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_38:
    v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      v18 = 2;
    }
    v4 = (v18 + v4);
  }
LABEL_42:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_64;
  if ((v3 & 0x100) != 0)
  {
    v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if (v19 >= 0x80)
    {
      v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
      v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      v20 = 2;
    }
    v4 = (v20 + v4);
    if ((v3 & 0x200) == 0)
    {
LABEL_45:
      if ((v3 & 0x400) == 0)
        goto LABEL_46;
      goto LABEL_56;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_45;
  }
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if (v21 >= 0x80)
  {
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v22 = 2;
  }
  v4 = (v22 + v4);
  if ((v3 & 0x400) == 0)
  {
LABEL_46:
    if ((v3 & 0x800) == 0)
      goto LABEL_64;
    goto LABEL_60;
  }
LABEL_56:
  v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
  if (v23 >= 0x80)
  {
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 1;
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v24 = 2;
  }
  v4 = (v24 + v4);
  if ((v3 & 0x800) != 0)
  {
LABEL_60:
    v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
    if (v25 >= 0x80)
      v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 1;
    else
      v26 = 2;
    v4 = (v26 + v4);
  }
LABEL_64:
  *(_DWORD *)(a1 + 60) = v4;
  return v4;
}

void sub_100B34364(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B33668(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B343B0()
{
  return 1;
}

_QWORD *sub_100B343B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.VIOInertialStateInfo");
}

void sub_100B343C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char v18;
  _BYTE v19[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v19, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 2303);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v18, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  v5 = *(_DWORD *)(a2 + 64);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 64) |= 1u;
    *(_QWORD *)(a1 + 8) = v8;
    v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_22;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 64) |= 2u;
  *(_DWORD *)(a1 + 16) = v9;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) |= 4u;
  *(_DWORD *)(a1 + 20) = v10;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 64) |= 8u;
  *(_DWORD *)(a1 + 24) = v11;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_25:
    v13 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v13;
    v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_24:
  v12 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 64) |= 0x10u;
  *(_DWORD *)(a1 + 28) = v12;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x20) != 0)
    goto LABEL_25;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_26:
  v14 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 64) |= 0x40u;
  *(_DWORD *)(a1 + 36) = v14;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 64) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v6;
    v5 = *(_DWORD *)(a2 + 64);
  }
LABEL_13:
  if ((v5 & 0xFF00) == 0)
    return;
  if ((v5 & 0x100) != 0)
  {
    v15 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 64) |= 0x100u;
    *(_DWORD *)(a1 + 44) = v15;
    v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0)
        goto LABEL_17;
      goto LABEL_30;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }
  v16 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) |= 0x200u;
  *(_DWORD *)(a1 + 48) = v16;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0)
      return;
    goto LABEL_18;
  }
LABEL_30:
  v17 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 64) |= 0x400u;
  *(_DWORD *)(a1 + 52) = v17;
  if ((*(_DWORD *)(a2 + 64) & 0x800) == 0)
    return;
LABEL_18:
  v7 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) |= 0x800u;
  *(_DWORD *)(a1 + 56) = v7;
}

void sub_100B345C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B345DC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172D48;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B345EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172D48;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100B3461C()
{
  operator new();
}

uint64_t sub_100B34664(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 64);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(result + 52) = 0;
    *(_QWORD *)(result + 44) = 0;
  }
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_100B34698(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  char *v12;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned __int8 *v39;
  uint64_t result;
  unint64_t *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;

  v41 = (unint64_t *)(a1 + 8);
  v42 = (unsigned int *)(a1 + 16);
  v43 = (unsigned int *)(a1 + 20);
  v44 = (unsigned int *)(a1 + 24);
  v45 = (unsigned int *)(a1 + 28);
  v5 = (unsigned int *)(a1 + 32);
  v6 = (unsigned int *)(a1 + 36);
  v7 = (unsigned int *)(a1 + 40);
  v8 = (unsigned int *)(a1 + 44);
  v9 = (unsigned int *)(a1 + 48);
  v10 = (unsigned int *)(a1 + 52);
  v11 = (unsigned int *)(a1 + 56);
  while (2)
  {
    v12 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v12;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v12 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v16 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((unint64_t)v16 < v15 && (*v16 & 0x80000000) == 0)
        {
          *v41 = *v16;
          v17 = v16 + 1;
          *((_QWORD *)this + 1) = v17;
LABEL_40:
          *(_DWORD *)(a1 + 64) |= 1u;
          if ((unint64_t)v17 < v15 && *v17 == 16)
          {
            v18 = v17 + 1;
            *((_QWORD *)this + 1) = v18;
            goto LABEL_43;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v41);
        if ((_DWORD)result)
        {
          v17 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
          goto LABEL_40;
        }
        break;
      case 2u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v18 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
LABEL_43:
        if ((unint64_t)v18 >= v15 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v42);
          if (!(_DWORD)result)
            return result;
          v29 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v42 = *v18;
          v29 = v18 + 1;
          *((_QWORD *)this + 1) = v29;
        }
        *(_DWORD *)(a1 + 64) |= 2u;
        if ((unint64_t)v29 >= v15 || *v29 != 24)
          continue;
        v19 = v29 + 1;
        *((_QWORD *)this + 1) = v19;
LABEL_51:
        if ((unint64_t)v19 >= v15 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
          if (!(_DWORD)result)
            return result;
          v30 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v43 = *v19;
          v30 = v19 + 1;
          *((_QWORD *)this + 1) = v30;
        }
        *(_DWORD *)(a1 + 64) |= 4u;
        if ((unint64_t)v30 >= v15 || *v30 != 32)
          continue;
        v20 = v30 + 1;
        *((_QWORD *)this + 1) = v20;
LABEL_59:
        if ((unint64_t)v20 >= v15 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v44);
          if (!(_DWORD)result)
            return result;
          v31 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v44 = *v20;
          v31 = v20 + 1;
          *((_QWORD *)this + 1) = v31;
        }
        *(_DWORD *)(a1 + 64) |= 8u;
        if ((unint64_t)v31 >= v15 || *v31 != 40)
          continue;
        v21 = v31 + 1;
        *((_QWORD *)this + 1) = v21;
LABEL_67:
        if ((unint64_t)v21 >= v15 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
          if (!(_DWORD)result)
            return result;
          v32 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v45 = *v21;
          v32 = v21 + 1;
          *((_QWORD *)this + 1) = v32;
        }
        *(_DWORD *)(a1 + 64) |= 0x10u;
        if ((unint64_t)v32 >= v15 || *v32 != 48)
          continue;
        v22 = v32 + 1;
        *((_QWORD *)this + 1) = v22;
LABEL_75:
        if ((unint64_t)v22 >= v15 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v33 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v22;
          v33 = v22 + 1;
          *((_QWORD *)this + 1) = v33;
        }
        *(_DWORD *)(a1 + 64) |= 0x20u;
        if ((unint64_t)v33 >= v15 || *v33 != 56)
          continue;
        v23 = v33 + 1;
        *((_QWORD *)this + 1) = v23;
LABEL_83:
        if ((unint64_t)v23 >= v15 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v34 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v23;
          v34 = v23 + 1;
          *((_QWORD *)this + 1) = v34;
        }
        *(_DWORD *)(a1 + 64) |= 0x40u;
        if ((unint64_t)v34 >= v15 || *v34 != 64)
          continue;
        v24 = v34 + 1;
        *((_QWORD *)this + 1) = v24;
LABEL_91:
        if ((unint64_t)v24 >= v15 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v35 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v24;
          v35 = v24 + 1;
          *((_QWORD *)this + 1) = v35;
        }
        *(_DWORD *)(a1 + 64) |= 0x80u;
        if ((unint64_t)v35 >= v15 || *v35 != 72)
          continue;
        v25 = v35 + 1;
        *((_QWORD *)this + 1) = v25;
LABEL_99:
        if ((unint64_t)v25 >= v15 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!(_DWORD)result)
            return result;
          v36 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v8 = *v25;
          v36 = v25 + 1;
          *((_QWORD *)this + 1) = v36;
        }
        *(_DWORD *)(a1 + 64) |= 0x100u;
        if ((unint64_t)v36 >= v15 || *v36 != 80)
          continue;
        v26 = v36 + 1;
        *((_QWORD *)this + 1) = v26;
LABEL_107:
        if ((unint64_t)v26 >= v15 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
          if (!(_DWORD)result)
            return result;
          v37 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v9 = *v26;
          v37 = v26 + 1;
          *((_QWORD *)this + 1) = v37;
        }
        *(_DWORD *)(a1 + 64) |= 0x200u;
        if ((unint64_t)v37 >= v15 || *v37 != 88)
          continue;
        v27 = v37 + 1;
        *((_QWORD *)this + 1) = v27;
LABEL_115:
        if ((unint64_t)v27 >= v15 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
          if (!(_DWORD)result)
            return result;
          v38 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v10 = *v27;
          v38 = v27 + 1;
          *((_QWORD *)this + 1) = v38;
        }
        *(_DWORD *)(a1 + 64) |= 0x400u;
        if ((unint64_t)v38 >= v15 || *v38 != 96)
          continue;
        v28 = v38 + 1;
        *((_QWORD *)this + 1) = v28;
LABEL_123:
        if ((unint64_t)v28 >= v15 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v11);
          if (!(_DWORD)result)
            return result;
          v39 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v11 = *v28;
          v39 = (unsigned __int8 *)(v28 + 1);
          *((_QWORD *)this + 1) = v39;
        }
        *(_DWORD *)(a1 + 64) |= 0x800u;
        if (v39 != (unsigned __int8 *)v15 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v19 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_51;
      case 4u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v20 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_59;
      case 5u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v21 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_67;
      case 6u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v22 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_75;
      case 7u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v23 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_83;
      case 8u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v24 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_91;
      case 9u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v25 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_99;
      case 0xAu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v26 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_107;
      case 0xBu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v27 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_115;
      case 0xCu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v28 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_123;
      default:
        v14 = TagFallback & 7;
LABEL_34:
        if (v14 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100B34D14(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  int *v5;
  int v6;

  v4 = a2;
  v5 = (int *)result;
  v6 = *(_DWORD *)(result + 64);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = v5[16];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], v4, a4);
  v6 = v5[16];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], v4, a4);
  v6 = v5[16];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[8], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[9], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[10], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v5[11], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v5[12], v4, a4);
  v6 = v5[16];
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v5[14], v4, a4);
  }
LABEL_24:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v5[13], v4, a4);
  if ((v5[16] & 0x800) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v5[14], v4, a4);
  return result;
}

uint64_t sub_100B34E88(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;

  v3 = *(_DWORD *)(a1 + 64);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_42;
  }
  if ((v3 & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 64);
    if ((v3 & 2) == 0)
      goto LABEL_11;
  }
  else
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_11;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v6 = 1;
  }
  v4 = (v4 + v6 + 1);
LABEL_11:
  if ((v3 & 4) != 0)
  {
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      v8 = 1;
    }
    v4 = (v4 + v8 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_13:
      if ((v3 & 0x10) == 0)
        goto LABEL_14;
      goto LABEL_26;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_13;
  }
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v10 = 1;
  }
  v4 = (v4 + v10 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_14:
    if ((v3 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_26:
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v12 = 2;
  }
  v4 = (v12 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_15:
    if ((v3 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_30:
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v14 = 2;
  }
  v4 = (v14 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_16:
    if ((v3 & 0x80) == 0)
      goto LABEL_42;
    goto LABEL_38;
  }
LABEL_34:
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v16 = 2;
  }
  v4 = (v16 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_38:
    v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      v18 = 2;
    }
    v4 = (v18 + v4);
  }
LABEL_42:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_64;
  if ((v3 & 0x100) != 0)
  {
    v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if (v19 >= 0x80)
    {
      v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
      v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      v20 = 2;
    }
    v4 = (v20 + v4);
    if ((v3 & 0x200) == 0)
    {
LABEL_45:
      if ((v3 & 0x400) == 0)
        goto LABEL_46;
      goto LABEL_56;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_45;
  }
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if (v21 >= 0x80)
  {
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v22 = 2;
  }
  v4 = (v22 + v4);
  if ((v3 & 0x400) == 0)
  {
LABEL_46:
    if ((v3 & 0x800) == 0)
      goto LABEL_64;
    goto LABEL_60;
  }
LABEL_56:
  v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
  if (v23 >= 0x80)
  {
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 1;
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v24 = 2;
  }
  v4 = (v24 + v4);
  if ((v3 & 0x800) != 0)
  {
LABEL_60:
    v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
    if (v25 >= 0x80)
      v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 1;
    else
      v26 = 2;
    v4 = (v26 + v4);
  }
LABEL_64:
  *(_DWORD *)(a1 + 60) = v4;
  return v4;
}

void sub_100B350C4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B343C8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B35110()
{
  return 1;
}

_QWORD *sub_100B35118@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.VIOInertialCovarianceInfo");
}

double sub_100B35128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  const std::string *v18;
  std::string *v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BYTE v27[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v27, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 2870);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v26, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v27);
  }
  v6 = *(_DWORD *)(a2 + 88);
  if (!(_BYTE)v6)
    goto LABEL_47;
  if ((v6 & 1) != 0)
  {
    v7 = *(_DWORD *)(a2 + 80);
    if ((v7 + 1) >= 6)
      sub_10191A2E0();
    *(_DWORD *)(a1 + 88) |= 1u;
    *(_DWORD *)(a1 + 80) = v7;
    v6 = *(_DWORD *)(a2 + 88);
  }
  if ((v6 & 2) != 0)
  {
    *(_DWORD *)(a1 + 88) |= 2u;
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 8);
    if (!v9)
      v9 = *(_QWORD *)(qword_102311340 + 8);
    result = sub_100B31888(v8, v9);
    v6 = *(_DWORD *)(a2 + 88);
    if ((v6 & 4) == 0)
    {
LABEL_9:
      if ((v6 & 8) == 0)
        goto LABEL_26;
      goto LABEL_21;
    }
  }
  else if ((v6 & 4) == 0)
  {
    goto LABEL_9;
  }
  *(_DWORD *)(a1 + 88) |= 4u;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    operator new();
  v11 = *(_QWORD *)(a2 + 16);
  if (!v11)
    v11 = *(_QWORD *)(qword_102311340 + 16);
  result = sub_100B31888(v10, v11);
  v6 = *(_DWORD *)(a2 + 88);
  if ((v6 & 8) != 0)
  {
LABEL_21:
    *(_DWORD *)(a1 + 88) |= 8u;
    v12 = *(_QWORD *)(a1 + 24);
    if (!v12)
      operator new();
    v13 = *(_QWORD *)(a2 + 24);
    if (!v13)
      v13 = *(_QWORD *)(qword_102311340 + 24);
    sub_100B33668(v12, v13);
    v6 = *(_DWORD *)(a2 + 88);
  }
LABEL_26:
  if ((v6 & 0x10) == 0)
  {
    if ((v6 & 0x20) == 0)
      goto LABEL_28;
LABEL_34:
    *(_DWORD *)(a1 + 88) |= 0x20u;
    v16 = *(_QWORD *)(a1 + 40);
    if (!v16)
      operator new();
    v17 = *(_QWORD *)(a2 + 40);
    if (!v17)
      v17 = *(_QWORD *)(qword_102311340 + 40);
    sub_100B343C8(v16, v17);
    v6 = *(_DWORD *)(a2 + 88);
    if ((v6 & 0x40) == 0)
    {
LABEL_29:
      if ((v6 & 0x80) == 0)
        goto LABEL_47;
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v14 = *(const std::string **)(a2 + 32);
  *(_DWORD *)(a1 + 88) |= 0x10u;
  v15 = *(std::string **)(a1 + 32);
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v15, v14);
  v6 = *(_DWORD *)(a2 + 88);
  if ((v6 & 0x20) != 0)
    goto LABEL_34;
LABEL_28:
  if ((v6 & 0x40) == 0)
    goto LABEL_29;
LABEL_39:
  v18 = *(const std::string **)(a2 + 48);
  *(_DWORD *)(a1 + 88) |= 0x40u;
  v19 = *(std::string **)(a1 + 48);
  if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v19, v18);
  v6 = *(_DWORD *)(a2 + 88);
  if ((v6 & 0x80) != 0)
  {
LABEL_42:
    *(_DWORD *)(a1 + 88) |= 0x80u;
    v20 = *(_DWORD **)(a1 + 56);
    if (!v20)
      operator new();
    v21 = *(_QWORD *)(a2 + 56);
    if (!v21)
      v21 = *(_QWORD *)(qword_102311340 + 56);
    sub_100B32768(v20, v21);
    v6 = *(_DWORD *)(a2 + 88);
  }
LABEL_47:
  if ((v6 & 0xFF00) != 0)
  {
    if ((v6 & 0x100) != 0)
    {
      *(_DWORD *)(a1 + 88) |= 0x100u;
      v22 = *(_DWORD **)(a1 + 64);
      if (!v22)
        operator new();
      v23 = *(_QWORD *)(a2 + 64);
      if (!v23)
        v23 = *(_QWORD *)(qword_102311340 + 64);
      sub_100B32768(v22, v23);
      v6 = *(_DWORD *)(a2 + 88);
    }
    if ((v6 & 0x200) != 0)
    {
      *(_DWORD *)(a1 + 88) |= 0x200u;
      v24 = *(_QWORD *)(a1 + 72);
      if (!v24)
        operator new();
      v25 = *(_QWORD *)(a2 + 72);
      if (!v25)
        v25 = *(_QWORD *)(qword_102311340 + 72);
      return sub_100B332D0(v24, v25);
    }
  }
  return result;
}

void sub_100B3557C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B35594(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  v4 = result[6];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    operator delete();
  }
  if ((_QWORD *)qword_102311340 != result)
  {
    v6 = result[1];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[2];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[3];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[5];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v1[7];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v1[8];
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    result = (_QWORD *)v1[9];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100B356D8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172DC0;
  sub_100B35594(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B35708(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172DC0;
  sub_100B35594(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_100B3574C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102311340;
  if (!qword_102311340)
  {
    sub_100B30E60(0, a2, a3, a4);
    return qword_102311340;
  }
  return result;
}

void sub_100B35778()
{
  operator new();
}

uint64_t sub_100B357D0(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = result;
  v2 = *(_DWORD *)(result + 88);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 80) = -1;
    if ((v2 & 2) != 0)
    {
      v3 = *(_QWORD *)(result + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        v2 = *(_DWORD *)(result + 88);
      }
    }
    if ((v2 & 4) != 0)
    {
      v4 = *(_QWORD *)(result + 16);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 36))
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
          *(_QWORD *)(v4 + 24) = 0;
        }
        *(_DWORD *)(v4 + 36) = 0;
        v2 = *(_DWORD *)(result + 88);
      }
    }
    if ((v2 & 8) != 0)
    {
      v5 = *(_QWORD *)(result + 24);
      if (v5)
      {
        v6 = *(_DWORD *)(v5 + 64);
        if ((_BYTE)v6)
        {
          *(_DWORD *)(v5 + 40) = 0;
          *(_OWORD *)(v5 + 24) = 0u;
          *(_OWORD *)(v5 + 8) = 0u;
        }
        if ((v6 & 0xFF00) != 0)
        {
          *(_QWORD *)(v5 + 52) = 0;
          *(_QWORD *)(v5 + 44) = 0;
        }
        *(_DWORD *)(v5 + 64) = 0;
        v2 = *(_DWORD *)(result + 88);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      v7 = *(_QWORD *)(result + 32);
      if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    v8 = *(_DWORD *)(result + 88);
    if ((v8 & 0x20) != 0)
    {
      v9 = *(_QWORD *)(result + 40);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 + 64);
        if ((_BYTE)v10)
        {
          *(_DWORD *)(v9 + 40) = 0;
          *(_OWORD *)(v9 + 24) = 0u;
          *(_OWORD *)(v9 + 8) = 0u;
        }
        if ((v10 & 0xFF00) != 0)
        {
          *(_QWORD *)(v9 + 52) = 0;
          *(_QWORD *)(v9 + 44) = 0;
        }
        *(_DWORD *)(v9 + 64) = 0;
        v8 = *(_DWORD *)(result + 88);
      }
    }
    if ((v8 & 0x40) != 0)
    {
      v11 = *(_QWORD *)(result + 48);
      if ((_UNKNOWN *)v11 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(_BYTE **)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v11 = 0;
          *(_BYTE *)(v11 + 23) = 0;
        }
      }
    }
    v2 = *(_DWORD *)(result + 88);
    if ((v2 & 0x80) != 0)
    {
      v12 = *(_QWORD *)(result + 56);
      if (v12)
      {
        if (*(int *)(v12 + 16) >= 1)
        {
          v13 = 0;
          do
          {
            v14 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v13);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
            ++v13;
          }
          while (v13 < *(int *)(v12 + 16));
        }
        *(_DWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 88);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      v15 = *(_QWORD *)(v1 + 64);
      if (v15)
      {
        if (*(int *)(v15 + 16) >= 1)
        {
          v16 = 0;
          do
          {
            v17 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v16);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
            ++v16;
          }
          while (v16 < *(int *)(v15 + 16));
        }
        *(_DWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 88);
      }
    }
    if ((v2 & 0x200) != 0)
    {
      v18 = *(_QWORD *)(v1 + 72);
      if (v18)
      {
        if (*(_BYTE *)(v18 + 28))
        {
          *(_QWORD *)(v18 + 8) = 0;
          *(_QWORD *)(v18 + 16) = 0;
        }
        *(_DWORD *)(v18 + 28) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 88) = 0;
  return result;
}

uint64_t sub_100B35A00(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  _BYTE *v39;
  void *v40;
  _BYTE *v41;
  uint64_t v42;
  char *v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  _BYTE *v50;
  void *v51;
  _BYTE *v52;
  int *v53;
  char *v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  _BYTE *v61;
  int *v62;
  char *v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  _BYTE *v70;
  uint64_t v71;
  char *v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  unsigned int v79;

  while (1)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 < *((_QWORD *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v79 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v79);
          if (!(_DWORD)result)
            return result;
          v9 = v79;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 + 1 <= 5)
        {
          *(_DWORD *)(a1 + 88) |= 1u;
          *(_DWORD *)(a1 + 80) = v9;
        }
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 18)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_39;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_29;
LABEL_39:
        *(_DWORD *)(a1 + 88) |= 2u;
        v12 = *(_QWORD *)(a1 + 8);
        if (!v12)
          operator new();
        v79 = 0;
        v13 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v79))return 0;
        }
        else
        {
          v79 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        v14 = *((_DWORD *)this + 14);
        v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15)
          return 0;
        v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        if (!sub_100B31A08(v12, this, v17) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        v18 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v18, 1);
        v20 = v18 - 1;
        if (v20 < 0 == v19)
          *((_DWORD *)this + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 != 26)
          continue;
        *((_QWORD *)this + 1) = v21 + 1;
LABEL_53:
        *(_DWORD *)(a1 + 88) |= 4u;
        v22 = *(_QWORD *)(a1 + 16);
        if (!v22)
          operator new();
        v79 = 0;
        v23 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v79))return 0;
        }
        else
        {
          v79 = *v23;
          *((_QWORD *)this + 1) = v23 + 1;
        }
        v24 = *((_DWORD *)this + 14);
        v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 >= v25)
          return 0;
        v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        if (!sub_100B31A08(v22, this, v27) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
        v28 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v28, 1);
        v29 = v28 - 1;
        if (v29 < 0 == v19)
          *((_DWORD *)this + 14) = v29;
        v30 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 != 34)
          continue;
        *((_QWORD *)this + 1) = v30 + 1;
LABEL_67:
        *(_DWORD *)(a1 + 88) |= 8u;
        v31 = *(_QWORD *)(a1 + 24);
        if (!v31)
          operator new();
        v79 = 0;
        v32 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v79))return 0;
        }
        else
        {
          v79 = *v32;
          *((_QWORD *)this + 1) = v32 + 1;
        }
        v33 = *((_DWORD *)this + 14);
        v34 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v33 + 1;
        if (v33 >= v34)
          return 0;
        v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        if (!sub_100B33938(v31, this, v36) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v35);
        v37 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v37, 1);
        v38 = v37 - 1;
        if (v38 < 0 == v19)
          *((_DWORD *)this + 14) = v38;
        v39 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v39 >= *((_QWORD *)this + 2) || *v39 != 42)
          continue;
        *((_QWORD *)this + 1) = v39 + 1;
LABEL_81:
        *(_DWORD *)(a1 + 88) |= 0x10u;
        v40 = *(void **)(a1 + 32);
        if (v40 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v40);
        if (!(_DWORD)result)
          return result;
        v41 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v41 >= *((_QWORD *)this + 2) || *v41 != 50)
          continue;
        *((_QWORD *)this + 1) = v41 + 1;
LABEL_87:
        *(_DWORD *)(a1 + 88) |= 0x20u;
        v42 = *(_QWORD *)(a1 + 40);
        if (!v42)
          operator new();
        v79 = 0;
        v43 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v43 >= *((_QWORD *)this + 2) || *v43 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v79))return 0;
        }
        else
        {
          v79 = *v43;
          *((_QWORD *)this + 1) = v43 + 1;
        }
        v44 = *((_DWORD *)this + 14);
        v45 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v44 + 1;
        if (v44 >= v45)
          return 0;
        v46 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        if (!sub_100B34698(v42, this, v47) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v46);
        v48 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v48, 1);
        v49 = v48 - 1;
        if (v49 < 0 == v19)
          *((_DWORD *)this + 14) = v49;
        v50 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v50 >= *((_QWORD *)this + 2) || *v50 != 58)
          continue;
        *((_QWORD *)this + 1) = v50 + 1;
LABEL_101:
        *(_DWORD *)(a1 + 88) |= 0x40u;
        v51 = *(void **)(a1 + 48);
        if (v51 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v51);
        if (!(_DWORD)result)
          return result;
        v52 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v52 >= *((_QWORD *)this + 2) || *v52 != 66)
          continue;
        *((_QWORD *)this + 1) = v52 + 1;
LABEL_107:
        *(_DWORD *)(a1 + 88) |= 0x80u;
        v53 = *(int **)(a1 + 56);
        if (!v53)
          operator new();
        v79 = 0;
        v54 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v54 >= *((_QWORD *)this + 2) || *v54 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v79))return 0;
        }
        else
        {
          v79 = *v54;
          *((_QWORD *)this + 1) = v54 + 1;
        }
        v55 = *((_DWORD *)this + 14);
        v56 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v55 + 1;
        if (v55 >= v56)
          return 0;
        v57 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        if (!sub_100B329BC(v53, this, v58) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v57);
        v59 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v59, 1);
        v60 = v59 - 1;
        if (v60 < 0 == v19)
          *((_DWORD *)this + 14) = v60;
        v61 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v61 >= *((_QWORD *)this + 2) || *v61 != 74)
          continue;
        *((_QWORD *)this + 1) = v61 + 1;
LABEL_121:
        *(_DWORD *)(a1 + 88) |= 0x100u;
        v62 = *(int **)(a1 + 64);
        if (!v62)
          operator new();
        v79 = 0;
        v63 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v63 >= *((_QWORD *)this + 2) || *v63 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v79))return 0;
        }
        else
        {
          v79 = *v63;
          *((_QWORD *)this + 1) = v63 + 1;
        }
        v64 = *((_DWORD *)this + 14);
        v65 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v64 + 1;
        if (v64 >= v65)
          return 0;
        v66 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        if (!sub_100B329BC(v62, this, v67) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v66);
        v68 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v68, 1);
        v69 = v68 - 1;
        if (v69 < 0 == v19)
          *((_DWORD *)this + 14) = v69;
        v70 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v70 >= *((_QWORD *)this + 2) || *v70 != 82)
          continue;
        *((_QWORD *)this + 1) = v70 + 1;
LABEL_135:
        *(_DWORD *)(a1 + 88) |= 0x200u;
        v71 = *(_QWORD *)(a1 + 72);
        if (!v71)
          operator new();
        v79 = 0;
        v72 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v72 >= *((_QWORD *)this + 2) || *v72 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v79))return 0;
        }
        else
        {
          v79 = *v72;
          *((_QWORD *)this + 1) = v72 + 1;
        }
        v73 = *((_DWORD *)this + 14);
        v74 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v73 + 1;
        if (v73 >= v74)
          return 0;
        v75 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        if (!sub_100B3341C(v71, this, v76) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v75);
        v77 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v77, 1);
        v78 = v77 - 1;
        if (v78 < 0 == v19)
          *((_DWORD *)this + 14) = v78;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_53;
        goto LABEL_29;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_67;
        goto LABEL_29;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_81;
        goto LABEL_29;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_87;
        goto LABEL_29;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_101;
        goto LABEL_29;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_107;
        goto LABEL_29;
      case 9u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_121;
        goto LABEL_29;
      case 0xAu:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_29;
        goto LABEL_135;
      default:
        v7 = TagFallback & 7;
LABEL_29:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100B363D4(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  v6 = *(_DWORD *)(result + 88);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 80), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 88);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311340 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_16:
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311340 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_19:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311340 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5, *(_QWORD *)(v5 + 32), a2);
  v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_23:
  v10 = *(_QWORD *)(v5 + 40);
  if (!v10)
    v10 = *(_QWORD *)(qword_102311340 + 40);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(7, *(_QWORD *)(v5 + 48), a2);
  v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_27:
  v11 = *(_QWORD *)(v5 + 56);
  if (!v11)
    v11 = *(_QWORD *)(qword_102311340 + 56);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v11, a2, a4);
  v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      return result;
    goto LABEL_33;
  }
LABEL_30:
  v12 = *(_QWORD *)(v5 + 64);
  if (!v12)
    v12 = *(_QWORD *)(qword_102311340 + 64);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v12, a2, a4);
  if ((*(_DWORD *)(v5 + 88) & 0x200) != 0)
  {
LABEL_33:
    v13 = *(_QWORD *)(v5 + 72);
    if (!v13)
      v13 = *(_QWORD *)(qword_102311340 + 72);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v13, a2, a4);
  }
  return result;
}

uint64_t sub_100B36580(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  int v35;
  int v36;
  uint64_t v37;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;

  v3 = *(_DWORD *)(a1 + 88);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_73;
  }
  if ((v3 & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 80);
    if ((v5 & 0x80000000) != 0)
    {
      v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      v3 = *(_DWORD *)(a1 + 88);
    }
    else
    {
      v6 = 1;
    }
    v4 = (v6 + 1);
    if ((v3 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_21;
  }
  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311340 + 8);
  v8 = *(unsigned __int8 *)(v7 + 36);
  if (*(_BYTE *)(v7 + 36))
  {
    v9 = (v8 << 31 >> 31) & 9;
    if ((v8 & 2) != 0)
      v9 += 9;
    if ((v8 & 4) != 0)
      v8 = v9 + 9;
    else
      v8 = v9;
  }
  *(_DWORD *)(v7 + 32) = v8;
  v4 = (v4 + v8 + 2);
  v3 = *(_DWORD *)(a1 + 88);
LABEL_21:
  if ((v3 & 4) != 0)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (!v10)
      v10 = *(_QWORD *)(qword_102311340 + 16);
    v11 = *(unsigned __int8 *)(v10 + 36);
    if (*(_BYTE *)(v10 + 36))
    {
      v12 = (v11 << 31 >> 31) & 9;
      if ((v11 & 2) != 0)
        v12 += 9;
      if ((v11 & 4) != 0)
        v11 = v12 + 9;
      else
        v11 = v12;
    }
    *(_DWORD *)(v10 + 32) = v11;
    v4 = (v4 + v11 + 2);
    v3 = *(_DWORD *)(a1 + 88);
    if ((v3 & 8) == 0)
    {
LABEL_23:
      if ((v3 & 0x10) == 0)
        goto LABEL_24;
      goto LABEL_43;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_23;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311340 + 24);
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B34128(v13, a2);
  v15 = (int)v14;
  if (v14 >= 0x80)
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
  else
    v16 = 1;
  v4 = (v4 + v15 + v16 + 1);
  v3 = *(_DWORD *)(a1 + 88);
  if ((v3 & 0x10) == 0)
  {
LABEL_24:
    if ((v3 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_43:
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(unsigned __int8 *)(v17 + 23);
  v19 = v18;
  v20 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v21 = *(unsigned __int8 *)(v17 + 23);
  else
    v21 = v20;
  if (v21 >= 0x80)
  {
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v21, a2);
    v18 = *(unsigned __int8 *)(v17 + 23);
    v20 = *(_QWORD *)(v17 + 8);
    v3 = *(_DWORD *)(a1 + 88);
    v19 = *(_BYTE *)(v17 + 23);
  }
  else
  {
    v22 = 1;
  }
  if (v19 < 0)
    v18 = v20;
  v4 = (v4 + v22 + v18 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_25:
    if ((v3 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_52:
  v23 = *(_QWORD *)(a1 + 40);
  if (!v23)
    v23 = *(_QWORD *)(qword_102311340 + 40);
  v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B34E88(v23, a2);
  v25 = (int)v24;
  if (v24 >= 0x80)
    v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
  else
    v26 = 1;
  v4 = (v4 + v25 + v26 + 1);
  v3 = *(_DWORD *)(a1 + 88);
  if ((v3 & 0x40) == 0)
  {
LABEL_26:
    if ((v3 & 0x80) == 0)
      goto LABEL_73;
    goto LABEL_67;
  }
LABEL_58:
  v27 = *(_QWORD *)(a1 + 48);
  v28 = *(unsigned __int8 *)(v27 + 23);
  v29 = v28;
  v30 = *(_QWORD *)(v27 + 8);
  if ((v28 & 0x80u) == 0)
    v31 = *(unsigned __int8 *)(v27 + 23);
  else
    v31 = v30;
  if (v31 >= 0x80)
  {
    v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v31, a2);
    v28 = *(unsigned __int8 *)(v27 + 23);
    v30 = *(_QWORD *)(v27 + 8);
    v3 = *(_DWORD *)(a1 + 88);
    v29 = *(_BYTE *)(v27 + 23);
  }
  else
  {
    v32 = 1;
  }
  if (v29 < 0)
    v28 = v30;
  v4 = (v4 + v32 + v28 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_67:
    v33 = *(_QWORD *)(a1 + 56);
    if (!v33)
      v33 = *(_QWORD *)(qword_102311340 + 56);
    v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B32C2C(v33, a2);
    v35 = (int)v34;
    if (v34 >= 0x80)
      v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2);
    else
      v36 = 1;
    v4 = (v4 + v35 + v36 + 1);
    v3 = *(_DWORD *)(a1 + 88);
  }
LABEL_73:
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v37 = *(_QWORD *)(a1 + 64);
      if (!v37)
        v37 = *(_QWORD *)(qword_102311340 + 64);
      v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B32C2C(v37, a2);
      v40 = (int)v38;
      if (v38 >= 0x80)
        v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, v39);
      else
        v41 = 1;
      v4 = (v4 + v40 + v41 + 1);
      v3 = *(_DWORD *)(a1 + 88);
    }
    if ((v3 & 0x200) != 0)
    {
      v42 = *(_QWORD *)(a1 + 72);
      if (!v42)
        v42 = *(_QWORD *)(qword_102311340 + 72);
      v43 = *(unsigned __int8 *)(v42 + 28);
      v44 = (v43 << 31 >> 31) & 9;
      if ((v43 & 2) != 0)
        v44 += 9;
      if (*(_BYTE *)(v42 + 28))
        v45 = v44;
      else
        v45 = 0;
      *(_DWORD *)(v42 + 24) = v45;
      v4 = (v4 + v45 + 2);
    }
  }
  *(_DWORD *)(a1 + 84) = v4;
  return v4;
}

double sub_100B368DC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100B35128(a1, (uint64_t)lpsrc);
}

double sub_100B36928(uint64_t a1, uint64_t a2)
{
  double result;

  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    return sub_100B35128(a1, a2);
  }
  return result;
}

uint64_t sub_100B36968()
{
  return 1;
}

_QWORD *sub_100B36970@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.VIOEstimation");
}

double sub_100B36980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 3102);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 2) != 0)
    {
      result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_100B36A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B36A40(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172E38;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B36A50(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172E38;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100B36A80()
{
  operator new();
}

uint64_t sub_100B36AB8(uint64_t result)
{
  if (*(_BYTE *)(result + 28))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B36ACC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  uint64_t result;
  unint64_t v10;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_21;
        v10 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 28) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 < *((_QWORD *)this + 2) && *v8 == 17)
        {
          *((_QWORD *)this + 1) = v8 + 1;
          goto LABEL_15;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_21;
      }
      v7 = TagFallback & 7;
      if (v7 == 1)
        break;
LABEL_21:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_15:
    v10 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 28) |= 2u;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_100B36C30(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 28);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 28);
  }
  if ((v5 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  return result;
}

uint64_t sub_100B36C88(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(_BYTE *)(a1 + 28))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_100B36CB4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100B36980(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B36D00()
{
  return 1;
}

_QWORD *sub_100B36D08@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.LSLLocationCoordinate");
}

double sub_100B36D18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 3349);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311350 + 8);
      result = sub_100B36980(v7, v8);
      v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_14;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return result;
LABEL_14:
    *(_DWORD *)(a1 + 36) |= 4u;
    v9 = *(_QWORD *)(a1 + 24);
    if (!v9)
      operator new();
    v10 = *(_QWORD *)(a2 + 24);
    if (!v10)
      v10 = *(_QWORD *)(qword_102311350 + 24);
    return sub_100B31888(v9, v10);
  }
  return result;
}

void sub_100B36E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B36E90(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102311350 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[3];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100B36EEC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172EB0;
  sub_100B36E90(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B36F1C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172EB0;
  sub_100B36E90(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100B36F60()
{
  operator new();
}

uint64_t sub_100B36FA0(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  LOBYTE(v1) = *(_BYTE *)(result + 36);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(result + 36) & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 28))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_QWORD *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 28) = 0;
        v1 = *(_DWORD *)(result + 36);
      }
    }
    *(_QWORD *)(result + 16) = 0;
    if ((v1 & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 24);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100B36FF4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t result;
  unsigned int v30[2];

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_20;
        *(_DWORD *)(a1 + 36) |= 1u;
        v10 = *(_QWORD *)(a1 + 8);
        if (!v10)
          operator new();
        v30[0] = 0;
        v11 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v30))return 0;
        }
        else
        {
          v30[0] = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        v12 = *((_DWORD *)this + 14);
        v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13)
          return 0;
        v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30[0]);
        if (!sub_100B36ACC(v10, this, v15) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        v16 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v16, 1);
        v18 = v16 - 1;
        if (v18 < 0 == v17)
          *((_DWORD *)this + 14) = v18;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 < *((_QWORD *)this + 2) && *v19 == 17)
        {
          *((_QWORD *)this + 1) = v19 + 1;
          goto LABEL_32;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 1)
        goto LABEL_20;
LABEL_32:
      *(_QWORD *)v30 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)v30;
      v9 = *(_DWORD *)(a1 + 36) | 2;
      *(_DWORD *)(a1 + 36) = v9;
      v20 = (_BYTE *)*((_QWORD *)this + 1);
      if ((unint64_t)v20 < *((_QWORD *)this + 2) && *v20 == 26)
      {
        *((_QWORD *)this + 1) = v20 + 1;
LABEL_36:
        *(_DWORD *)(a1 + 36) = v9 | 4;
        v21 = *(_QWORD *)(a1 + 24);
        if (!v21)
          operator new();
        v30[0] = 0;
        v22 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v22 >= *((_QWORD *)this + 2) || *v22 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v30))return 0;
        }
        else
        {
          v30[0] = *v22;
          *((_QWORD *)this + 1) = v22 + 1;
        }
        v23 = *((_DWORD *)this + 14);
        v24 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v23 + 1;
        if (v23 >= v24)
          return 0;
        v25 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30[0]);
        if (!sub_100B31A08(v21, this, v26) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v25);
        v27 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v27, 1);
        v28 = v27 - 1;
        if (v28 < 0 == v17)
          *((_DWORD *)this + 14) = v28;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if (v8 == 2)
      {
        v9 = *(_DWORD *)(a1 + 36);
        goto LABEL_36;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_20:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100B37330(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_8:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
    if ((*(_DWORD *)(v5 + 36) & 4) == 0)
      return result;
    goto LABEL_9;
  }
  v7 = *(_QWORD *)(result + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311350 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 2) != 0)
    goto LABEL_8;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_9:
  v8 = *(_QWORD *)(v5 + 24);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311350 + 24);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
}

uint64_t sub_100B373C8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;

  LOBYTE(v1) = *(_BYTE *)(a1 + 36);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(a1 + 36) & 1) != 0)
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (!v2)
        v2 = *(_QWORD *)(qword_102311350 + 8);
      v3 = *(unsigned __int8 *)(v2 + 28);
      if (*(_BYTE *)(v2 + 28))
      {
        if ((v3 & 2) != 0)
          v3 = ((v3 << 31 >> 31) & 9) + 9;
        else
          v3 = (v3 << 31 >> 31) & 9;
      }
      *(_DWORD *)(v2 + 24) = v3;
      LODWORD(v2) = v3 + 2;
      v1 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      LODWORD(v2) = 0;
    }
    if ((v1 & 2) != 0)
      v2 = (v2 + 9);
    else
      v2 = v2;
    if ((v1 & 4) != 0)
    {
      v4 = *(_QWORD *)(a1 + 24);
      if (!v4)
        v4 = *(_QWORD *)(qword_102311350 + 24);
      v5 = *(unsigned __int8 *)(v4 + 36);
      if (*(_BYTE *)(v4 + 36))
      {
        v6 = (v5 << 31 >> 31) & 9;
        if ((v5 & 2) != 0)
          v6 += 9;
        if ((v5 & 4) != 0)
          v5 = v6 + 9;
        else
          v5 = v6;
      }
      *(_DWORD *)(v4 + 32) = v5;
      v2 = (v2 + v5 + 2);
    }
  }
  else
  {
    v2 = 0;
  }
  *(_DWORD *)(a1 + 32) = v2;
  return v2;
}

double sub_100B3748C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100B36D18(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B374D8()
{
  return 1;
}

_QWORD *sub_100B374E0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.LSLLocation");
}

void sub_100B374F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v21[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v21, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 3790);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v20, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 72);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    *(_DWORD *)(a1 + 72) |= 1u;
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311358 + 8);
    sub_100B31888(v6, v7);
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_23;
    }
  }
  else if ((*(_BYTE *)(a2 + 72) & 2) == 0)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 72) |= 2u;
  v8 = *(_DWORD **)(a1 + 16);
  if (!v8)
    operator new();
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311358 + 16);
  sub_100B32D1C(v8, v9);
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_23:
  *(_DWORD *)(a1 + 72) |= 4u;
  v10 = *(_DWORD **)(a1 + 24);
  if (!v10)
    operator new();
  v11 = *(_QWORD *)(a2 + 24);
  if (!v11)
    v11 = *(_QWORD *)(qword_102311358 + 24);
  sub_100B32D1C(v10, v11);
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_28:
  *(_DWORD *)(a1 + 72) |= 8u;
  v12 = *(_QWORD *)(a1 + 32);
  if (!v12)
    operator new();
  v13 = *(_QWORD *)(a2 + 32);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311358 + 32);
  sub_100B322A0(v12, v13);
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_34:
    v15 = *(_DWORD *)(a2 + 64);
    if ((v15 + 1) >= 4)
      sub_10191A308();
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(_DWORD *)(a1 + 64) = v15;
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        return;
      goto LABEL_41;
    }
    goto LABEL_36;
  }
LABEL_33:
  v14 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 72) |= 0x10u;
  *(_QWORD *)(a1 + 40) = v14;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x20) != 0)
    goto LABEL_34;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_36:
  *(_DWORD *)(a1 + 72) |= 0x40u;
  v16 = *(_QWORD *)(a1 + 48);
  if (!v16)
    operator new();
  v17 = *(_QWORD *)(a2 + 48);
  if (!v17)
    v17 = *(_QWORD *)(qword_102311358 + 48);
  sub_100B36D18(v16, v17);
  if ((*(_DWORD *)(a2 + 72) & 0x80) != 0)
  {
LABEL_41:
    *(_DWORD *)(a1 + 72) |= 0x80u;
    v18 = *(_QWORD *)(a1 + 56);
    if (!v18)
      operator new();
    v19 = *(_QWORD *)(a2 + 56);
    if (!v19)
      v19 = *(_QWORD *)(qword_102311358 + 56);
    sub_100B38740(v18, v19);
  }
}

void sub_100B37828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B37840(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((_QWORD *)qword_102311358 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[6];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    result = (_QWORD *)v1[7];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

