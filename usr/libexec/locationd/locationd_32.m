void sub_10141DC08(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

_QWORD *sub_10141DC34(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = off_1021B6130;
  result[1] = a2;
  result[2] = a3;
  result[3] = 0;
  return result;
}

id *sub_10141DC48(id *a1)
{
  NSObject *v2;
  void **v3;
  void *__p[2];
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void **v12;

  *a1 = off_1021B6130;
  if (a1[3])
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B6170);
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      (*((void (**)(void **__return_ptr, id *))*a1 + 3))(__p, a1);
      if (v6 >= 0)
        v3 = __p;
      else
        v3 = (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Stream #CLLIA Disablement assertion dropped\", \"me\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    objc_msgSend(a1[3], "invalidate");

    a1[3] = 0;
  }
  sub_10008ABA0(a1);
  return a1;
}

void sub_10141DD9C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10141DDAC(id *a1)
{
  sub_10141DC48(a1);
  operator delete();
}

void sub_10141DDD0(_QWORD *a1, CLConnectionMessage **a2)
{
  _QWORD *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  CLConnectionMessage *v11;
  CLConnectionMessage *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  CLConnectionMessage *v17[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  _QWORD *v26;

  v4 = (_QWORD *)CLConnectionMessage::name(*a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 50)
    {
LABEL_7:
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B6170);
      v6 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v7 = CLConnectionMessage::name(*a2);
        if (*(char *)(v7 + 23) >= 0)
          v8 = (const char *)v7;
        else
          v8 = *(const char **)v7;
        *(_DWORD *)buf = 68289282;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        v23 = 2082;
        v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning unrecognized message\", \"MessageName\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      return;
    }
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 50)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "LocationIndependenceAssertion/kCLConnectionMessage", 0x32uLL))
    goto LABEL_7;
  v9 = _os_activity_create((void *)&_mh_execute_header, "CL: LocationIndependenceAssertion/kCLConnectionMessage", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B6170);
  v10 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2082;
    v24 = "activity";
    v25 = 2050;
    v26 = a1;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocationIndependenceAssertion/kCLConnectionMessage\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  v11 = *a2;
  v12 = a2[1];
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)((char *)v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_10141E078(a1, v17);
  if (v12)
  {
    v15 = (unint64_t *)((char *)v12 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v12 + 16))(v12);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_10141E054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  sub_100261F44((uint64_t)&a9);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10141E078(_QWORD *a1, CLConnectionMessage **a2)
{
  NSObject *v3;
  void **v4;
  char v6;
  char v7;
  NSObject *v8;
  _BYTE *v9;
  NSObject *v10;
  _BYTE *v11;
  NSObject *v12;
  _BYTE *v13;
  NSObject *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  _BYTE buf[12];
  char v21;
  int v22;
  _BYTE *v23;
  void *__p;
  __int16 v25;
  const char *v26;
  __int16 v27;
  _BYTE *v28;

  if (a1[3])
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B6170);
    v3 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(&__p, a1);
      v4 = SBYTE3(v28) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#warning LocationIndependenceAssertion already taken by %{public}s", buf, 0xCu);
      if (SBYTE3(v28) < 0)
        operator delete(__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B6170);
      v16 = qword_1022A01C8;
      (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(buf, a1);
      if (v21 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v22 = 136446210;
      v23 = v17;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v16, 0, "#warning LocationIndependenceAssertion already taken by %{public}s", &v22, 12);
      v19 = v18;
      if (v21 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonLocationIndependenceAssertion::handleMessageLocationIndependenceAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
      if (v19 != (char *)&__p)
        free(v19);
    }
    return;
  }
  sub_1015A2E04(&__p, "com.apple.locationd.independence_declarer");
  v6 = sub_10141E648(a1, (uint64_t *)&__p);
  v7 = v6;
  if (SBYTE3(v28) < 0)
  {
    operator delete(__p);
    if ((v7 & 1) != 0)
    {
LABEL_14:
      if (objc_msgSend(objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePurposeKey")), "length"))
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021B6170);
        v8 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(buf, a1);
          v9 = v21 >= 0 ? buf : *(_BYTE **)buf;
          __p = (void *)68289282;
          v25 = 2082;
          v26 = "";
          v27 = 2082;
          v28 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Stream #CLLIA Taking a disablement assertion\", \"me\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
          if (v21 < 0)
            operator delete(*(void **)buf);
        }
        a1[3] = -[CLStreamedLocationProviderAssertion initInUniverse:]([CLStreamedLocationProviderDisablementAssertion alloc], "initInUniverse:", a1[2]);
        return;
      }
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B6170);
      v12 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(buf, a1);
        if (v21 >= 0)
          v13 = buf;
        else
          v13 = *(_BYTE **)buf;
        __p = (void *)68289282;
        v25 = 2082;
        v26 = "";
        v27 = 2082;
        v28 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Stream #CLLIA LocationIndependenceAssertion is malformed.  Needs a reason.\", \"client name\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
        if (v21 < 0)
          operator delete(*(void **)buf);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021B6170);
      }
      v14 = qword_1022A01C8;
      if (os_signpost_enabled((os_log_t)qword_1022A01C8))
      {
        (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(buf, a1);
        if (v21 >= 0)
          v15 = buf;
        else
          v15 = *(_BYTE **)buf;
        __p = (void *)68289282;
        v25 = 2082;
        v26 = "";
        v27 = 2082;
        v28 = v15;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Stream #CLLIA LocationIndependenceAssertion is malformed.  Needs a reason.", "{\"msg%{public}.0s\":\"#Stream #CLLIA LocationIndependenceAssertion is malformed.  Needs a reason.\", \"client name\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
        goto LABEL_47;
      }
      return;
    }
  }
  else if ((v6 & 1) != 0)
  {
    goto LABEL_14;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B6170);
  v10 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(buf, a1);
    if (v21 >= 0)
      v11 = buf;
    else
      v11 = *(_BYTE **)buf;
    __p = (void *)68289282;
    v25 = 2082;
    v26 = "";
    v27 = 2082;
    v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Stream #CLLIA #warning Not entitled as a streaming disabler... ignoring LocationIndependenceAssertion\", \"client name\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
LABEL_47:
    if (v21 < 0)
      operator delete(*(void **)buf);
  }
}

void sub_10141E624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10141E648(_QWORD *a1, uint64_t *a2)
{
  uint64_t isEntitled;
  NSObject *v5;
  _BYTE *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v10;
  void **v11;
  const char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  const char *v16;
  void *v17[2];
  char v18;
  _BYTE __p[12];
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t *v23;
  uint8_t buf[4];
  _BYTE *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;

  isEntitled = CLConnection::isEntitled(a1[1], a2);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B6170);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(__p, a1);
    v6 = *(_BYTE **)__p;
    v7 = "not entitled";
    if (v22 >= 0)
      v6 = __p;
    if ((_DWORD)isEntitled)
      v7 = "entitled";
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136315650;
    v25 = v6;
    v26 = 2080;
    v27 = v7;
    v28 = 2080;
    v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s is %s for %s", buf, 0x20u);
    if (SHIBYTE(v22) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B6170);
    v10 = qword_1022A01C8;
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(v17, a1);
    v11 = (void **)v17[0];
    v12 = "not entitled";
    if (v18 >= 0)
      v11 = v17;
    if ((_DWORD)isEntitled)
      v12 = "entitled";
    if (*((char *)a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = (uint64_t *)*a2;
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v11;
    v20 = 2080;
    v21 = v12;
    v22 = 2080;
    v23 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "%s is %s for %s", __p, 32, v16);
    v15 = v14;
    if (v18 < 0)
      operator delete(v17[0]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDaemonLocationIndependenceAssertion::isEntitled(const std::string &)", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
  }
  return isEntitled;
}

void sub_10141E8FC(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_10141E928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = off_1021B61A0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#clgda,daemon,CLDaemonGnssDisablementAssertion", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#clgda,daemon,CLDaemonGnssDisablementAssertion", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLDaemonGnssDisablementAssertion::CLDaemonGnssDisablementAssertion(CLConnection *, id<CLIntersiloUniverse>)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return a1;
}

void sub_10141EADC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  sub_10008ABA0((_QWORD *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10141EB20(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = off_1021B61A0;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#clgda,daemon,~CLDaemonGnssDisablementAssertion", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#clgda,daemon,~CLDaemonGnssDisablementAssertion", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual CLDaemonGnssDisablementAssertion::~CLDaemonGnssDisablementAssertion()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 38);
  *(_QWORD *)(a1 + 48) = 0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  sub_10008ABA0((_QWORD *)a1);
  return a1;
}

void sub_10141ECF0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10141ED00(uint64_t a1)
{
  sub_10141EB20(a1);
  operator delete();
}

void sub_10141ED24(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  const char *v15;
  int *v16;
  std::__shared_weak_count *v17;
  const __CFString *v18;
  NSNumber *v19;
  _BYTE v20[12];
  int buf;
  _BYTE buf_4[12];

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "Fail";
    if ((_DWORD)a2)
      v5 = "Success";
    buf = 136446210;
    *(_QWORD *)buf_4 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#clgda,daemon,sendAssertionRsp,BasebandCausesL1Interference,isAsserted,%{public}s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
    v14 = "Fail";
    if ((_DWORD)a2)
      v14 = "Success";
    *(_DWORD *)v20 = 136446210;
    *(_QWORD *)&v20[4] = v14;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#clgda,daemon,sendAssertionRsp,BasebandCausesL1Interference,isAsserted,%{public}s", v20, 12);
    v16 = (int *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonGnssDisablementAssertion::sendAssertionRsp(BOOL) const", "%s\n", v15);
    if (v16 != &buf)
      free(v16);
  }
  v18 = CFSTR("kCLGDA_AssertionCompleteStatusKey");
  v19 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2);
  *(_QWORD *)v20 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
  sub_1014203EC("kCLConnectionMessageGnssDisablementAssertRsp", v20, &buf);
  v6 = *(_QWORD *)(a1 + 8);
  v17 = *(std::__shared_weak_count **)&buf_4[4];
  if (*(_QWORD *)&buf_4[4])
  {
    v7 = (unint64_t *)(*(_QWORD *)&buf_4[4] + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  CLConnection::sendMessage(v6);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v11 = *(std::__shared_weak_count **)&buf_4[4];
  if (*(_QWORD *)&buf_4[4])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf_4[4] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_10141EFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10141F014(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  int v8;
  CLConnectionMessage *v9;
  CLConnectionMessage *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const char *v18;
  uint8_t *v19;
  CLConnectionMessage *v20[2];
  int v21;
  uint64_t *v22;
  uint8_t buf[4];
  uint64_t *v24;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (uint64_t *)CLConnectionMessage::name(*a2);
    if (*((char *)v5 + 23) >= 0)
      v6 = v5;
    else
      v6 = (uint64_t *)*v5;
    *(_DWORD *)buf = 136380675;
    v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#clgda,daemon,message,%{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
    v15 = qword_1022A01C8;
    v16 = (uint64_t *)CLConnectionMessage::name(*a2);
    if (*((char *)v16 + 23) >= 0)
      v17 = v16;
    else
      v17 = (uint64_t *)*v16;
    v21 = 136380675;
    v22 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#clgda,daemon,message,%{private}s", &v21, 12);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLDaemonGnssDisablementAssertion::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v7 = (_QWORD *)CLConnectionMessage::name(*a2);
  v8 = *((char *)v7 + 23);
  if (v8 < 0)
  {
    if (v7[1] != 44)
      return;
    v7 = (_QWORD *)*v7;
  }
  else if (v8 != 44)
  {
    return;
  }
  if (!memcmp(v7, "kCLConnectionMessageGnssDisablementAssertReq", 0x2CuLL))
  {
    v9 = *a2;
    v10 = a2[1];
    v20[0] = v9;
    v20[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)((char *)v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    sub_10141F2B4(a1, v20);
    if (v10)
    {
      v13 = (unint64_t *)((char *)v10 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v10 + 16))(v10);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v10);
      }
    }
  }
}

void sub_10141F298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10141F2B4(uint64_t a1, CLConnectionMessage **a2)
{
  char v4;
  char v5;
  void *Dictionary;
  id v7;
  id v8;
  id v9;
  void *v10;
  const std::string::value_type *v11;
  const char *v12;
  NSObject *v13;
  void **v14;
  NSObject *v15;
  void **v16;
  NSObject *v17;
  void **v18;
  NSObject *v19;
  void **v20;
  NSObject *v21;
  void **v22;
  NSObject *v23;
  void **v24;
  NSObject *v25;
  void **v26;
  void *__p[2];
  char v28;
  uint8_t buf[8];
  __int16 v30;
  const char *v31;
  __int16 v32;
  void **v33;
  __int16 v34;
  const char *v35;

  if (!sub_100762484())
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
    v13 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      v14 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2082;
      v33 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,unsupported platform,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_65;
  }
  sub_1015A2E04(buf, "com.apple.locationd.gnss-disablement");
  v4 = sub_10141FA30((_QWORD *)a1, (uint64_t *)buf);
  v5 = v4;
  if ((SBYTE3(v33) & 0x80000000) == 0)
  {
    if ((v4 & 1) != 0)
      goto LABEL_4;
LABEL_21:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
    v15 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      v16 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2082;
      v33 = v16;
      v34 = 2082;
      v35 = "com.apple.locationd.gnss-disablement";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,missing entitlement,request denied\", \"requested by\":%{public, location:escape_only}s, \"entitlement\":%{public, location:escape_only}s}", buf, 0x26u);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_65;
  }
  operator delete(*(void **)buf);
  if ((v5 & 1) == 0)
    goto LABEL_21;
LABEL_4:
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v7 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePurposeKey"));
  v8 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundleIdentifierKey"));
  v9 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundlePathKey"));
  if (!v8)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
    v17 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      v18 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2082;
      v33 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,missing bundleID,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_65;
  }
  v10 = v9;
  if (!v9)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
    v19 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      v20 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2082;
      v33 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,missing bundlePath,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_65;
  }
  if (!v7)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
    v21 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      v22 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2082;
      v33 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,missing reason,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_65;
  }
  if (!objc_msgSend(v7, "length"))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
    v23 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      v24 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2082;
      v33 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,empty reason,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v28 < 0)
        operator delete(__p[0]);
    }
LABEL_65:
    sub_10141ED24(a1, 0);
    return;
  }
  v11 = (const std::string::value_type *)objc_msgSend(v7, "UTF8String");
  v12 = (const char *)(a1 + 24);
  std::string::assign((std::string *)(a1 + 24), v11);
  if (objc_msgSend(v8, "length") || objc_msgSend(v10, "length"))
  {
    sub_10141FB94(a1);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
    v25 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      if (v28 >= 0)
        v26 = __p;
      else
        v26 = (void **)__p[0];
      if (*(char *)(a1 + 47) < 0)
        v12 = *(const char **)v12;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2082;
      v33 = v26;
      v34 = 2082;
      v35 = v12;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,no beneficiary,request denied\", \"requested by\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    sub_10141ED24(a1, 0);
    if (*(char *)(a1 + 47) < 0)
    {
      **(_BYTE **)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 47) = 0;
    }
  }
}

void sub_10141FA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10141FA30(_QWORD *a1, uint64_t *a2)
{
  uint64_t isEntitled;
  NSObject *v5;
  void **v6;
  uint64_t *v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  void **v16;
  __int16 v17;
  uint64_t *v18;
  __int16 v19;
  int v20;

  isEntitled = CLConnection::isEntitled(a1[1], a2);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(__p, a1);
    if (v10 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68289794;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = v6;
    v17 = 2082;
    v18 = v7;
    v19 = 1026;
    v20 = isEntitled;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,daemon,\", \"requested by\":%{public, location:escape_only}s, \"entitlement\":%{public, location:escape_only}s, \"entitled\":%{public}hhd}", buf, 0x2Cu);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  return isEntitled;
}

void sub_10141FB94(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  uint8_t v5[8];
  uint8_t buf[23];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6200);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#clgda,gnss,notifyClientEnteringInterferenceMode", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6200);
    *(_WORD *)v5 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#clgda,gnss,notifyClientEnteringInterferenceMode", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonGnssDisablementAssertion::notifyClientEnteringInterferenceMode()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  if (!*(_QWORD *)(a1 + 48) && sub_100762484())
    sub_100E087CC();
}

void sub_10141FF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  int v8;
  _BOOL8 v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a4 + 1440);
    v8 = *(_DWORD *)(a4 + 1444);
    *(_DWORD *)buf = 67240448;
    v18 = v7;
    v19 = 1026;
    v20 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#clgda,daemon,kNotificationBasebandCausesL1Interference,%{public}d,bandChangeStatus,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B61E0);
    v10 = *(_DWORD *)(a4 + 1440);
    v11 = *(_DWORD *)(a4 + 1444);
    v14[0] = 67240448;
    v14[1] = v10;
    v15 = 1026;
    v16 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#clgda,daemon,kNotificationBasebandCausesL1Interference,%{public}d,bandChangeStatus,%{public}d", v14, 14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonGnssDisablementAssertion::handleGnssDisablementNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v9 = !sub_100762484() || sub_1001936CC() || *(_DWORD *)(a4 + 1444) != 1;
  sub_10141ED24(a1, v9);
}

void sub_101420198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLDaemonGnssDisablementAssertion::handleGnssDisablementNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 16), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6220);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonGnssDisablementAssertion::handleGnssDisablementNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6220);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonGnssDisablementAssertion::handleGnssDisablementNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10141FF94(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101420348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101420368(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_101420394(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1014203C0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

_QWORD *sub_1014203EC@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_101420438(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_10142044C(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = sub_101424C28(a1);
  *(int64x2_t *)(v1 + 144) = vdupq_n_s64(0x3FEE666666666666uLL);
  *(_QWORD *)(v1 + 160) = 0;
  *(_DWORD *)(v1 + 168) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_QWORD *)(v1 + 208) = 0;
  *(_QWORD *)(v1 + 216) = 0x3FE0000000000000;
  *(_QWORD *)(v1 + 224) = 0;
  *(_BYTE *)(v1 + 232) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_BYTE *)(v1 + 240) = 0;
  *(_QWORD *)(v1 + 248) = 0;
  return result;
}

_QWORD *sub_10142049C(_QWORD *result)
{
  result[8] = off_102155D60;
  *result = off_1021B6250;
  result[1] = off_102155D60;
  return result;
}

uint64_t sub_1014204C0(uint64_t result)
{
  *(_BYTE *)(result + 240) = 0;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 64) = off_102155D60;
  *(_QWORD *)result = off_1021B6250;
  *(_QWORD *)(result + 8) = off_102155D60;
  return result;
}

uint64_t sub_1014204EC(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  if (sub_1014206C0(a1))
  {
    *(_BYTE *)(a1 + 240) = 1;
    *(double *)(a1 + 248) = a2;
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v4 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_QWORD *)(a1 + 248);
      *(_DWORD *)buf = 134217984;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_Initialize,EstimatorTimeCfaSec,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v7 = *(_QWORD *)(a1 + 248);
      v9 = 134217984;
      v10 = v7;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_Initialize,EstimatorTimeCfaSec,%f", COERCE_DOUBLE(&v9));
      sub_100512490("Generic", 1, 0, 2, "BOOL CLOutdoorEstimator::initialize(const CFAbsoluteTime)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  return *(unsigned __int8 *)(a1 + 240);
}

BOOL sub_1014206C0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  __int16 v8;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint8_t buf[1640];

  *(_QWORD *)(a1 + 128) = 0x3DDB7CDFD9D7BDBBLL;
  v11 = 0x100000002;
  v9 = off_1021B62A8;
  v10 = xmmword_101CA41B0;
  v12 = &v13;
  *(_QWORD *)sub_100206B6C((uint64_t)&v9, 0, 0) = 0x3FE0000000000000;
  *(_QWORD *)sub_100206B6C((uint64_t)&v9, 1, 0) = 0x3FE0000000000000;
  v3 = sub_1014209F8(a1, (uint64_t)&v9, v2);
  if (v3)
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v4 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLOutdoorEstimator,Initialize(),Estimator initialization failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v8 = 0;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 1, "CLOutdoorEstimator,Initialize(),Estimator initialization failed", &v8, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLOutdoorEstimator::initializeHiddenMarkovModel()", "%s\n", v5);
LABEL_19:
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v6 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,Initialize(),CN HMM is initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v8 = 0;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator,Initialize(),CN HMM is initialized", &v8, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLOutdoorEstimator::initializeHiddenMarkovModel()", "%s\n", v5);
      goto LABEL_19;
    }
  }
  return v3 == 0;
}

uint64_t sub_1014209F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  int v6;
  uint64_t v7;
  double v8;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  _DWORD v15[14];
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  double *v19;
  _BYTE v20[16];

  v5 = *(double *)(a1 + 128);
  v6 = *(_DWORD *)(a2 + 16);
  if (v6)
  {
    v7 = 0;
    do
    {
      v8 = sub_100079934(a2, v7, a3);
      if (v8 < 0.0 || v8 > 1.0)
        sub_1019532F4();
      v7 = (v7 + 1);
    }
    while (v6 != (_DWORD)v7);
  }
  v18 = 0x100000002;
  v16 = off_1021B62A8;
  v17 = xmmword_101CA41B0;
  v19 = (double *)v20;
  v10 = (cnprint::CNPrinter *)sub_10007996C(a2, 1, (uint64_t)&v16);
  if (DWORD2(v17) != 1)
    sub_1019532D0((uint64_t)v10, v11, v12);
  v13 = *v19;
  if (*v19 <= 0.0)
    sub_1019532A8();
  if (fabs(v13 + -1.0) > v5 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
  {
    LOWORD(v16) = 2;
    LOBYTE(v15[0]) = 1;
    cnprint::CNPrinter::Print(&v16, v15);
  }
  sub_100079304((uint64_t)v15, a2);
  sub_10021C208(v15, v6, 1);
  v18 = 0x100000002;
  v16 = off_1021B62A8;
  v17 = xmmword_101CA41B0;
  v19 = (double *)v20;
  sub_100078B9C((uint64_t)v15, (uint64_t)&v16, 1.0 / v13);
  sub_10007A0C8(a1 + 8, (uint64_t)&v16);
  sub_10007A0C8(a1 + 64, a1 + 8);
  *(_DWORD *)(a1 + 120) = 1;
  return 0;
}

void sub_101420B9C(uint64_t a1, double *a2)
{
  NSObject *v4;
  double v10;
  NSObject *v11;
  int v12;
  int v13;
  char *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  int v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  char *v24;
  int v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  double v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  double v39;
  unint64_t v40;
  __int128 v41;
  double v42;
  __int128 v43;
  double v44;
  uint64_t (**v45)();
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t (**v50)();
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  double v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  int v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint8_t buf[4];
  double v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  int v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_1021B6278);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,processEvidence(),Process GnssEvidence", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    LOWORD(v55) = 0;
    v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator,processEvidence(),Process GnssEvidence", &v55, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v52 = 0x100000002;
    v50 = off_1021B62F0;
    v51 = xmmword_101CA41B0;
    v53 = &v54;
    *(_QWORD *)sub_10021C1C8((uint64_t)&v50, 0, 0) = sub_1002064F8;
    *(_QWORD *)sub_10021C1C8((uint64_t)&v50, 1, 0) = sub_1002064F8;
    v47 = 0x100000002;
    v45 = off_1021B6378;
    v46 = xmmword_101CA41B0;
    v48 = &v49;
    __asm { FMOV            V0.2D, #-1.0 }
    v43 = _Q0;
    v41 = _Q0;
    v10 = a2[2];
    if (v10 < 0.0)
      v10 = 0.0;
    v44 = *a2;
    v42 = v44;
    v39 = -1.0;
    v40 = (unint64_t)v10;
    if (sub_101419474(a1 + 136, (uint64_t *)&v40, *(_DWORD *)(a1 + 160), &v39))
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v11 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
      {
        v12 = *(_DWORD *)(a1 + 160);
        *(_DWORD *)buf = 67174657;
        LODWORD(v72) = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenOutdoor failed for signal environment,%{private}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v13 = *(_DWORD *)(a1 + 160);
        v55 = 67174657;
        LODWORD(v56) = v13;
        LODWORD(v38) = 8;
        v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenOutdoor failed for signal environment,%{private}d", &v55, v38);
        sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
LABEL_111:
        if (v14 != (char *)buf)
          free(v14);
      }
    }
    else if (v39 < 0.0 || v39 > 1.0 || (*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v17 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenOutdoor returned invalid probability", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        LOWORD(v55) = 0;
        LODWORD(v38) = 2;
        v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenOutdoor returned invalid probability", &v55, v38);
        sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
        goto LABEL_111;
      }
    }
    else
    {
      *((double *)&v43 + 1) = v39;
      v39 = -1.0;
      if (sub_1014196D8(a1 + 136, (uint64_t *)&v40, &v39))
      {
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v16 = qword_1022A0198;
        if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,ProcessEvidence(),GnssEvidence,lookupCn0ProbabilityGivenIndoor failed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          LOWORD(v55) = 0;
          LODWORD(v38) = 2;
          v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,ProcessEvidence(),GnssEvidence,lookupCn0ProbabilityGivenIndoor failed", &v55, v38);
          sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
          goto LABEL_111;
        }
      }
      else if (v39 < 0.0 || v39 > 1.0 || (*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v21 = qword_1022A0198;
        if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenIndoor returned invalid probability", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          LOWORD(v55) = 0;
          LODWORD(v38) = 2;
          v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenIndoor returned invalid probability", &v55, v38);
          sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
          goto LABEL_111;
        }
      }
      else
      {
        *(double *)&v43 = v39;
        *(_QWORD *)sub_10021C1C8((uint64_t)&v45, 0, 0) = &v43;
        v40 = *((unsigned int *)a2 + 6);
        v39 = -1.0;
        if (sub_1014198C0(a1 + 136, (uint64_t *)&v40, *(_DWORD *)(a1 + 160), &v39))
        {
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          v18 = qword_1022A0198;
          if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
          {
            v19 = *(_DWORD *)(a1 + 160);
            *(_DWORD *)buf = 67174657;
            LODWORD(v72) = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenOutdoor failed for signal environment,%{private}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0190 != -1)
              dispatch_once(&qword_1022A0190, &stru_1021B6278);
            v20 = *(_DWORD *)(a1 + 160);
            v55 = 67174657;
            LODWORD(v56) = v20;
            LODWORD(v38) = 8;
            v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenOutdoor failed for signal environment,%{private}d", &v55, v38);
            sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
            goto LABEL_111;
          }
        }
        else if (v39 < 0.0 || v39 > 1.0 || (*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          v23 = qword_1022A0198;
          if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenOutdoor returned invalid probability", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0190 != -1)
              dispatch_once(&qword_1022A0190, &stru_1021B6278);
            LOWORD(v55) = 0;
            LODWORD(v38) = 2;
            v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenOutdoor returned invalid probability", &v55, v38);
            sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
            goto LABEL_111;
          }
        }
        else
        {
          *((double *)&v41 + 1) = v39;
          v39 = -1.0;
          if (sub_101419B24(a1 + 136, (uint64_t *)&v40, &v39))
          {
            if (qword_1022A0190 != -1)
              dispatch_once(&qword_1022A0190, &stru_1021B6278);
            v22 = qword_1022A0198;
            if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenIndoor failed", buf, 2u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0190 != -1)
                dispatch_once(&qword_1022A0190, &stru_1021B6278);
              LOWORD(v55) = 0;
              LODWORD(v38) = 2;
              v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenIndoor failed", &v55, v38);
              sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
              goto LABEL_111;
            }
          }
          else if (v39 < 0.0 || v39 > 1.0 || (*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (qword_1022A0190 != -1)
              dispatch_once(&qword_1022A0190, &stru_1021B6278);
            v27 = qword_1022A0198;
            if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenIndoor returned invalid probability", buf, 2u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0190 != -1)
                dispatch_once(&qword_1022A0190, &stru_1021B6278);
              LOWORD(v55) = 0;
              LODWORD(v38) = 2;
              v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenIndoor returned invalid probability", &v55, v38);
              sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
              goto LABEL_111;
            }
          }
          else
          {
            *(double *)&v41 = v39;
            *(_QWORD *)sub_10021C1C8((uint64_t)&v45, 1, 0) = &v41;
            sub_10007A04C(a1, (uint64_t)buf);
            v25 = sub_100078C58(a1, 2, (uint64_t)buf, 2, (uint64_t)&v50, (uint64_t)&v45);
            if (v25)
            {
              if (qword_1022A0190 != -1)
                dispatch_once(&qword_1022A0190, &stru_1021B6278);
              v26 = qword_1022A0198;
              if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                LODWORD(v72) = v25;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,HMM update failed,%d", buf, 8u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0190 != -1)
                  dispatch_once(&qword_1022A0190, &stru_1021B6278);
                v55 = 67109120;
                LODWORD(v56) = v25;
                v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssEvidence,HMM update failed,%d", &v55);
                sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
                goto LABEL_111;
              }
            }
            else
            {
              if (qword_1022A0190 != -1)
                dispatch_once(&qword_1022A0190, &stru_1021B6278);
              v28 = qword_1022A0198;
              if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
              {
                v29 = *a2;
                v30 = *((_QWORD *)a2 + 2);
                v31 = *((_DWORD *)a2 + 6);
                v32 = *(_QWORD *)(a1 + 248);
                *(_DWORD *)buf = 134219777;
                v72 = v29;
                v73 = 2049;
                v74 = v30;
                v75 = 1025;
                v76 = v31;
                v77 = 2048;
                v78 = v32;
                v79 = 2049;
                v80 = *((_QWORD *)&v43 + 1);
                v81 = 2049;
                v82 = v43;
                v83 = 2049;
                v84 = *((_QWORD *)&v41 + 1);
                v85 = 2049;
                v86 = v41;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_GnssEvidence,evidenceCfatSec,%f,cn0dBHz,%{private}f,numTrackedSatellitesAboveElevationMask,%{private}d,EstimatorTimeCfaSec,%f,cn0likelihoodObservationGivenOutdoor,%{private}f,cn0likelihoodObservationGivenIndoor,%{private}f,numSatlikelihoodObservationGivenOutdoor,%{private}f,numSatlikelihoodObservationGivenIndoor,%{private}f", buf, 0x4Eu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0190 != -1)
                  dispatch_once(&qword_1022A0190, &stru_1021B6278);
                v33 = *a2;
                v34 = *((_QWORD *)a2 + 2);
                v35 = *((_DWORD *)a2 + 6);
                v36 = *(_QWORD *)(a1 + 248);
                v55 = 134219777;
                v56 = v33;
                v57 = 2049;
                v58 = v34;
                v59 = 1025;
                v60 = v35;
                v61 = 2048;
                v62 = v36;
                v63 = 2049;
                v64 = *((_QWORD *)&v43 + 1);
                v65 = 2049;
                v66 = v43;
                v67 = 2049;
                v68 = *((_QWORD *)&v41 + 1);
                v69 = 2049;
                v70 = v41;
                LODWORD(v38) = 78;
                v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_GnssEvidence,evidenceCfatSec,%f,cn0dBHz,%{private}f,numTrackedSatellitesAboveElevationMask,%{private}d,EstimatorTimeCfaSec,%f,cn0likelihoodObservationGivenOutdoor,%{private}f,cn0likelihoodObservationGivenIndoor,%{private}f,numSatlikelihoodObservationGivenOutdoor,%{private}f,numSatlikelihoodObservationGivenIndoor,%{private}f", &v55, v38);
                sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v37);
                if (v37 != (char *)buf)
                  free(v37);
              }
              sub_100079B10(a1);
            }
          }
        }
      }
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v15 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,HMM Not initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      LOWORD(v55) = 0;
      LODWORD(v38) = 2;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssEvidence,HMM Not initialized", &v55, v38);
      sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
      goto LABEL_111;
    }
  }
}

_QWORD *sub_101421D04(_QWORD *result)
{
  *result = off_1021B63D0;
  return result;
}

_QWORD *sub_101421D18(_QWORD *result)
{
  *result = off_1021B6348;
  return result;
}

void sub_101421D2C(uint64_t a1, double *a2)
{
  NSObject *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _BYTE v37[56];
  double v38;
  __int128 v39;
  uint64_t v40;
  uint64_t (**v41)();
  __int128 v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t (**v46)();
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  uint8_t buf[4];
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  uint64_t v82;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_1021B6278);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,processEvidence(),Process AlsEvidence", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    LOWORD(v51) = 0;
    v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator,processEvidence(),Process AlsEvidence", &v51, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)", "%s\n", v28);
    if (v28 != (char *)buf)
      free(v28);
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v48 = 0x100000001;
    v46 = off_1021B6400;
    *(_QWORD *)&v5 = 0x100000001;
    *((_QWORD *)&v5 + 1) = 0x100000001;
    v47 = v5;
    v49 = &v50;
    *(_QWORD *)sub_10021C1C8((uint64_t)&v46, 0, 0) = sub_1002064F8;
    v43 = 0x100000001;
    v41 = off_1021B6448;
    *(_QWORD *)&v6 = 0x100000001;
    *((_QWORD *)&v6 + 1) = 0x100000001;
    v42 = v6;
    v44 = &v45;
    __asm { FMOV            V0.2D, #-1.0 }
    v12 = *(_QWORD *)a2;
    v39 = _Q0;
    v40 = v12;
    v38 = -1.0;
    if (sub_10141A0C4(a1 + 136, a2 + 2, a2 + 3, &v38))
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v13 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookuplookupAlsEvidenceProbabilityGivenOutdoorProbabilityGivenOutdoor failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        LOWORD(v51) = 0;
        LODWORD(v36) = 2;
        v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookuplookupAlsEvidenceProbabilityGivenOutdoorProbabilityGivenOutdoor failed", &v51, v36);
        sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)", "%s\n", v14);
LABEL_75:
        if (v14 != (char *)buf)
          free(v14);
      }
    }
    else if (v38 < 0.0 || v38 > 1.0 || (*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v17 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenOutdoor returned invalid probability", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        LOWORD(v51) = 0;
        LODWORD(v36) = 2;
        v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenOutdoor returned invalid probability", &v51, v36);
        sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)", "%s\n", v14);
        goto LABEL_75;
      }
    }
    else
    {
      *((double *)&v39 + 1) = v38;
      v38 = -1.0;
      if (sub_10141A27C(a1 + 136, a2 + 2, &v38))
      {
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v16 = qword_1022A0198;
        if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenIndoor failed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          LOWORD(v51) = 0;
          LODWORD(v36) = 2;
          v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenIndoor failed", &v51, v36);
          sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)", "%s\n", v14);
          goto LABEL_75;
        }
      }
      else if (v38 < 0.0 || v38 > 1.0 || (*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v20 = qword_1022A0198;
        if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenIndoor returned invalid probability", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          LOWORD(v51) = 0;
          LODWORD(v36) = 2;
          v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenIndoor returned invalid probability", &v51, v36);
          sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)", "%s\n", v14);
          goto LABEL_75;
        }
      }
      else
      {
        *(double *)&v39 = v38;
        *(_QWORD *)sub_10021C1C8((uint64_t)&v41, 0, 0) = &v39;
        sub_10007A04C(a1, (uint64_t)buf);
        sub_10021C08C((uint64_t)&v51, (uint64_t)&v46);
        sub_10021BF50((uint64_t)v37, (uint64_t)&v41);
        v18 = sub_100078C58(a1, 2, (uint64_t)buf, 1, (uint64_t)&v51, (uint64_t)v37);
        if (v18)
        {
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          v19 = qword_1022A0198;
          if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v68) = v18;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsEvidence,HMM update failed,%d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0190 != -1)
              dispatch_once(&qword_1022A0190, &stru_1021B6278);
            v51 = 67109120;
            LODWORD(v52) = v18;
            v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),AlsEvidence,HMM update failed,%d", &v51);
            sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)", "%s\n", v14);
            goto LABEL_75;
          }
        }
        else
        {
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          v21 = qword_1022A0198;
          if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
          {
            v22 = *(_QWORD *)a2;
            v23 = *((_QWORD *)a2 + 2);
            v24 = *((_QWORD *)a2 + 3);
            v25 = *((unsigned __int8 *)a2 + 32);
            v26 = *((_QWORD *)a2 + 5);
            v27 = *(_QWORD *)(a1 + 248);
            *(_DWORD *)buf = 134219777;
            v68 = v22;
            v69 = 2049;
            v70 = *((_QWORD *)&v39 + 1);
            v71 = 2049;
            v72 = v39;
            v73 = 2049;
            v74 = v23;
            v75 = 2049;
            v76 = v24;
            v77 = 1025;
            v78 = v25;
            v79 = 1025;
            v80 = v26;
            v81 = 2048;
            v82 = v27;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_AlsEvidence,evidenceCfatSec,%f,likelihoodObservationGivenOutdoor,%{private}f,likelihoodObservationGivenIndoor,%{private}f,alsTrustedLux,%{private}f,sunElevationAngleDegrees,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}d,EstimatorTimeCfaSec,%f", buf, 0x4Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0190 != -1)
              dispatch_once(&qword_1022A0190, &stru_1021B6278);
            v29 = *(_QWORD *)a2;
            v30 = *((_QWORD *)a2 + 2);
            v31 = *((_QWORD *)a2 + 3);
            v32 = *((unsigned __int8 *)a2 + 32);
            v33 = *((_QWORD *)a2 + 5);
            v34 = *(_QWORD *)(a1 + 248);
            v51 = 134219777;
            v52 = v29;
            v53 = 2049;
            v54 = *((_QWORD *)&v39 + 1);
            v55 = 2049;
            v56 = v39;
            v57 = 2049;
            v58 = v30;
            v59 = 2049;
            v60 = v31;
            v61 = 1025;
            v62 = v32;
            v63 = 1025;
            v64 = v33;
            v65 = 2048;
            v66 = v34;
            LODWORD(v36) = 74;
            v35 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_AlsEvidence,evidenceCfatSec,%f,likelihoodObservationGivenOutdoor,%{private}f,likelihoodObservationGivenIndoor,%{private}f,alsTrustedLux,%{private}f,sunElevationAngleDegrees,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}d,EstimatorTimeCfaSec,%f", &v51, v36);
            sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)", "%s\n", v35);
            if (v35 != (char *)buf)
              free(v35);
          }
          sub_100079B10(a1);
        }
      }
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v15 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsEvidence,HMM Not initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      LOWORD(v51) = 0;
      LODWORD(v36) = 2;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),AlsEvidence,HMM Not initialized", &v51, v36);
      sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)", "%s\n", v14);
      goto LABEL_75;
    }
  }
}

void sub_101422918(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  __int128 v5;
  __int128 v6;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _BYTE v30[56];
  double v31;
  __int128 v32;
  uint64_t v33;
  uint64_t (**v34)();
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint8_t buf[4];
  uint64_t v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_1021B6278);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,ProcessEvidence(),Process GnssAvailability", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    LOWORD(v44) = 0;
    v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator,ProcessEvidence(),Process GnssAvailability", &v44, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)", "%s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v41 = 0x100000001;
    v39 = off_1021B6400;
    *(_QWORD *)&v5 = 0x100000001;
    *((_QWORD *)&v5 + 1) = 0x100000001;
    v40 = v5;
    v42 = &v43;
    *(_QWORD *)sub_10021C1C8((uint64_t)&v39, 0, 0) = sub_1002064F8;
    v36 = 0x100000001;
    v34 = off_1021B6448;
    *(_QWORD *)&v6 = 0x100000001;
    *((_QWORD *)&v6 + 1) = 0x100000001;
    v35 = v6;
    v37 = &v38;
    __asm { FMOV            V0.2D, #-1.0 }
    v32 = _Q0;
    v33 = *a2;
    v31 = -1.0;
    if (sub_101419D0C(a1 + 136, *((_DWORD *)a2 + 6), &v31))
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v12 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenOutdoor failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        LOWORD(v44) = 0;
        LODWORD(v29) = 2;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenOutdoor failed", &v44, v29);
        sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)", "%s\n", v13);
LABEL_75:
        if (v13 != (char *)buf)
          free(v13);
      }
    }
    else if (v31 < 0.0 || v31 > 1.0 || (*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v16 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenOutdoor returned invalid probability", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        LOWORD(v44) = 0;
        LODWORD(v29) = 2;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenOutdoor returned invalid probability", &v44, v29);
        sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)", "%s\n", v13);
        goto LABEL_75;
      }
    }
    else
    {
      *((double *)&v32 + 1) = v31;
      v31 = -1.0;
      if (sub_101419EE8(a1 + 136, *((_DWORD *)a2 + 6), &v31))
      {
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v15 = qword_1022A0198;
        if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenIndoor failed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          LOWORD(v44) = 0;
          LODWORD(v29) = 2;
          v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenIndoor failed", &v44, v29);
          sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)", "%s\n", v13);
          goto LABEL_75;
        }
      }
      else if (v31 < 0.0 || v31 > 1.0 || (*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v19 = qword_1022A0198;
        if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenIndoor returned invalid probability", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          LOWORD(v44) = 0;
          LODWORD(v29) = 2;
          v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenIndoor returned invalid probability", &v44, v29);
          sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)", "%s\n", v13);
          goto LABEL_75;
        }
      }
      else
      {
        *(double *)&v32 = v31;
        *(_QWORD *)sub_10021C1C8((uint64_t)&v34, 0, 0) = &v32;
        sub_10007A04C(a1, (uint64_t)buf);
        sub_10021C08C((uint64_t)&v44, (uint64_t)&v39);
        sub_10021BF50((uint64_t)v30, (uint64_t)&v34);
        v17 = sub_100078C58(a1, 2, (uint64_t)buf, 1, (uint64_t)&v44, (uint64_t)v30);
        if (v17)
        {
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          v18 = qword_1022A0198;
          if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v55) = v17;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssAvailability,HMM update failed,%d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0190 != -1)
              dispatch_once(&qword_1022A0190, &stru_1021B6278);
            v44 = 67109120;
            LODWORD(v45) = v17;
            v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssAvailability,HMM update failed,%d", &v44);
            sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)", "%s\n", v13);
            goto LABEL_75;
          }
        }
        else
        {
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          v20 = qword_1022A0198;
          if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
          {
            v21 = *a2;
            v22 = *((_DWORD *)a2 + 6);
            v23 = *(_QWORD *)(a1 + 248);
            *(_DWORD *)buf = 134219009;
            v55 = v21;
            v56 = 1025;
            v57 = v22;
            v58 = 2048;
            v59 = v23;
            v60 = 2049;
            v61 = *((_QWORD *)&v32 + 1);
            v62 = 2049;
            v63 = v32;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_GnssAvailability,evidenceCfatSec,%f,GnssAvailability,%{private}d,EstimatorTimeCfaSec,%f,likelihoodObservationGivenOutdoor,%{private}f,likelihoodObservationGivenIndoor,%{private}f", buf, 0x30u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0190 != -1)
              dispatch_once(&qword_1022A0190, &stru_1021B6278);
            v25 = *a2;
            v26 = *((_DWORD *)a2 + 6);
            v27 = *(_QWORD *)(a1 + 248);
            v44 = 134219009;
            v45 = v25;
            v46 = 1025;
            v47 = v26;
            v48 = 2048;
            v49 = v27;
            v50 = 2049;
            v51 = *((_QWORD *)&v32 + 1);
            v52 = 2049;
            v53 = v32;
            LODWORD(v29) = 48;
            v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_GnssAvailability,evidenceCfatSec,%f,GnssAvailability,%{private}d,EstimatorTimeCfaSec,%f,likelihoodObservationGivenOutdoor,%{private}f,likelihoodObservationGivenIndoor,%{private}f", &v44, v29);
            sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)", "%s\n", v28);
            if (v28 != (char *)buf)
              free(v28);
          }
          sub_100079B10(a1);
        }
      }
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v14 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssAvailability,HMM Not initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      LOWORD(v44) = 0;
      LODWORD(v29) = 2;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GnssAvailability,HMM Not initialized", &v44, v29);
      sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)", "%s\n", v13);
      goto LABEL_75;
    }
  }
}

void sub_1014234BC(uint64_t a1, double *a2)
{
  NSObject *v4;
  __int128 v5;
  __int128 v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  NSObject *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _BYTE v25[56];
  _QWORD v26[3];
  uint64_t (**v27)();
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint8_t buf[4];
  double v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_1021B6278);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,ProcessEvidence(),Process GpsModelOutput", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    LOWORD(v37) = 0;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator,ProcessEvidence(),Process GpsModelOutput", &v37, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GpsModelOutputEvidence &)", "%s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v34 = 0x100000001;
    v32 = off_1021B6400;
    *(_QWORD *)&v5 = 0x100000001;
    *((_QWORD *)&v5 + 1) = 0x100000001;
    v33 = v5;
    v35 = &v36;
    *(_QWORD *)sub_10021C1C8((uint64_t)&v32, 0, 0) = sub_1002064F8;
    v29 = 0x100000001;
    v27 = off_1021B6448;
    *(_QWORD *)&v6 = 0x100000001;
    *((_QWORD *)&v6 + 1) = 0x100000001;
    v28 = v6;
    v30 = &v31;
    v7 = *a2;
    v8 = a2[3];
    v9 = 0.95;
    if (v8 <= 0.95)
      v9 = a2[3];
    if (v8 >= 0.001)
      v10 = v9;
    else
      v10 = 0.001;
    *(double *)&v26[1] = 1.0 - v10;
    *(double *)&v26[2] = v7;
    *(double *)v26 = v10;
    *(_QWORD *)sub_10021C1C8((uint64_t)&v27, 0, 0) = v26;
    sub_10007A04C(a1, (uint64_t)buf);
    sub_10021C08C((uint64_t)&v37, (uint64_t)&v32);
    sub_10021BF50((uint64_t)v25, (uint64_t)&v27);
    v11 = sub_100078C58(a1, 2, (uint64_t)buf, 1, (uint64_t)&v37, (uint64_t)v25);
    if (v11)
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v12 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v44) = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GpsModelOutput,HMM update failed,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v37 = 67109120;
        LODWORD(v38) = v11;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GpsModelOutput,HMM update failed,%d", &v37);
        sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GpsModelOutputEvidence &)", "%s\n", v13);
LABEL_29:
        if (v13 != (char *)buf)
          free(v13);
      }
    }
    else
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v15 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
      {
        v16 = *a2;
        v17 = *((_QWORD *)a2 + 3);
        v18 = *(_QWORD *)(a1 + 248);
        *(_DWORD *)buf = 134218497;
        v44 = v16;
        v45 = 2049;
        v46 = v17;
        v47 = 2048;
        v48 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_GpsModelOutput,evidenceCfatSec,%f,gpsModelOutput,%{private}f,EstimatorTimeCfaSec,%f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v20 = *a2;
        v21 = *((_QWORD *)a2 + 3);
        v22 = *(_QWORD *)(a1 + 248);
        v37 = 134218497;
        v38 = v20;
        v39 = 2049;
        v40 = v21;
        v41 = 2048;
        v42 = v22;
        LODWORD(v24) = 32;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_GpsModelOutput,evidenceCfatSec,%f,gpsModelOutput,%{private}f,EstimatorTimeCfaSec,%f", &v37, v24);
        sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GpsModelOutputEvidence &)", "%s\n", v23);
        if (v23 != (char *)buf)
          free(v23);
      }
      sub_100079B10(a1);
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v14 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GpsModelOutput,HMM Not initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      LOWORD(v37) = 0;
      LODWORD(v24) = 2;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),GpsModelOutput,HMM Not initialized", &v37, v24);
      sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GpsModelOutputEvidence &)", "%s\n", v13);
      goto LABEL_29;
    }
  }
}

void sub_101423B58(uint64_t a1, double *a2)
{
  NSObject *v4;
  __int128 v5;
  __int128 v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  NSObject *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _BYTE v25[56];
  _QWORD v26[3];
  uint64_t (**v27)();
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint8_t buf[4];
  double v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_1021B6278);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,ProcessEvidence(),Process WifiModelOutput", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    LOWORD(v37) = 0;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator,ProcessEvidence(),Process WifiModelOutput", &v37, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::WifiModelOutputEvidence &)", "%s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v34 = 0x100000001;
    v32 = off_1021B6400;
    *(_QWORD *)&v5 = 0x100000001;
    *((_QWORD *)&v5 + 1) = 0x100000001;
    v33 = v5;
    v35 = &v36;
    *(_QWORD *)sub_10021C1C8((uint64_t)&v32, 0, 0) = sub_1002064F8;
    v29 = 0x100000001;
    v27 = off_1021B6448;
    *(_QWORD *)&v6 = 0x100000001;
    *((_QWORD *)&v6 + 1) = 0x100000001;
    v28 = v6;
    v30 = &v31;
    v7 = *a2;
    v8 = a2[3];
    v9 = 0.95;
    if (v8 <= 0.95)
      v9 = a2[3];
    if (v8 >= 0.001)
      v10 = v9;
    else
      v10 = 0.001;
    *(double *)&v26[1] = 1.0 - v10;
    *(double *)&v26[2] = v7;
    *(double *)v26 = v10;
    *(_QWORD *)sub_10021C1C8((uint64_t)&v27, 0, 0) = v26;
    sub_10007A04C(a1, (uint64_t)buf);
    sub_10021C08C((uint64_t)&v37, (uint64_t)&v32);
    sub_10021BF50((uint64_t)v25, (uint64_t)&v27);
    v11 = sub_100078C58(a1, 2, (uint64_t)buf, 1, (uint64_t)&v37, (uint64_t)v25);
    if (v11)
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v12 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v44) = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),WifiModelOutput,HMM update failed,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v37 = 67109120;
        LODWORD(v38) = v11;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),WifiModelOutput,HMM update failed,%d", &v37);
        sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::WifiModelOutputEvidence &)", "%s\n", v13);
LABEL_29:
        if (v13 != (char *)buf)
          free(v13);
      }
    }
    else
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v15 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
      {
        v16 = *a2;
        v17 = *((_QWORD *)a2 + 3);
        v18 = *(_QWORD *)(a1 + 248);
        *(_DWORD *)buf = 134218497;
        v44 = v16;
        v45 = 2049;
        v46 = v17;
        v47 = 2048;
        v48 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_WifiModelOutput,evidenceCfatSec,%f,wifiIndoorProb,%{private}f,EstimatorTimeCfaSec,%f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v20 = *a2;
        v21 = *((_QWORD *)a2 + 3);
        v22 = *(_QWORD *)(a1 + 248);
        v37 = 134218497;
        v38 = v20;
        v39 = 2049;
        v40 = v21;
        v41 = 2048;
        v42 = v22;
        LODWORD(v24) = 32;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_WifiModelOutput,evidenceCfatSec,%f,wifiIndoorProb,%{private}f,EstimatorTimeCfaSec,%f", &v37, v24);
        sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::WifiModelOutputEvidence &)", "%s\n", v23);
        if (v23 != (char *)buf)
          free(v23);
      }
      sub_100079B10(a1);
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v14 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),WifiModelOutput,HMM Not initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      LOWORD(v37) = 0;
      LODWORD(v24) = 2;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),WifiModelOutput,HMM Not initialized", &v37, v24);
      sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::WifiModelOutputEvidence &)", "%s\n", v13);
      goto LABEL_29;
    }
  }
}

void sub_1014241F4(uint64_t a1, double *a2)
{
  NSObject *v4;
  __int128 v5;
  __int128 v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  NSObject *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _BYTE v25[56];
  double v26[3];
  uint64_t (**v27)();
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint8_t buf[4];
  double v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_1021B6278);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,ProcessEvidence(),Process AlsModelOutput", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    LOWORD(v37) = 0;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator,ProcessEvidence(),Process AlsModelOutput", &v37, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsModelOutputEvidence &)", "%s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v34 = 0x100000001;
    v32 = off_1021B6400;
    *(_QWORD *)&v5 = 0x100000001;
    *((_QWORD *)&v5 + 1) = 0x100000001;
    v33 = v5;
    v35 = &v36;
    *(_QWORD *)sub_10021C1C8((uint64_t)&v32, 0, 0) = sub_1002064F8;
    v29 = 0x100000001;
    v27 = off_1021B6448;
    *(_QWORD *)&v6 = 0x100000001;
    *((_QWORD *)&v6 + 1) = 0x100000001;
    v28 = v6;
    v30 = &v31;
    v7 = *a2;
    v8 = a2[3];
    v9 = 0.95;
    if (v8 <= 0.95)
      v9 = a2[3];
    if (v8 >= 0.001)
      v10 = v9;
    else
      v10 = 0.001;
    v26[1] = v10;
    v26[2] = v7;
    v26[0] = 1.0 - v10;
    *(_QWORD *)sub_10021C1C8((uint64_t)&v27, 0, 0) = v26;
    sub_10007A04C(a1, (uint64_t)buf);
    sub_10021C08C((uint64_t)&v37, (uint64_t)&v32);
    sub_10021BF50((uint64_t)v25, (uint64_t)&v27);
    v11 = sub_100078C58(a1, 2, (uint64_t)buf, 1, (uint64_t)&v37, (uint64_t)v25);
    if (v11)
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v12 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v44) = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsModelOutput,HMM update failed,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v37 = 67109120;
        LODWORD(v38) = v11;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),AlsModelOutput,HMM update failed,%d", &v37);
        sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsModelOutputEvidence &)", "%s\n", v13);
LABEL_29:
        if (v13 != (char *)buf)
          free(v13);
      }
    }
    else
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v15 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
      {
        v16 = *a2;
        v17 = *((_QWORD *)a2 + 3);
        v18 = *(_QWORD *)(a1 + 248);
        *(_DWORD *)buf = 134218497;
        v44 = v16;
        v45 = 2049;
        v46 = v17;
        v47 = 2048;
        v48 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_AlsModelOutput,evidenceCfatSec,%f,alsOutdoorProb,%{private}f,EstimatorTimeCfaSec,%f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v20 = *a2;
        v21 = *((_QWORD *)a2 + 3);
        v22 = *(_QWORD *)(a1 + 248);
        v37 = 134218497;
        v38 = v20;
        v39 = 2049;
        v40 = v21;
        v41 = 2048;
        v42 = v22;
        LODWORD(v24) = 32;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_AlsModelOutput,evidenceCfatSec,%f,alsOutdoorProb,%{private}f,EstimatorTimeCfaSec,%f", &v37, v24);
        sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsModelOutputEvidence &)", "%s\n", v23);
        if (v23 != (char *)buf)
          free(v23);
      }
      sub_100079B10(a1);
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v14 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsModelOutput,HMM Not initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      LOWORD(v37) = 0;
      LODWORD(v24) = 2;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),AlsModelOutput,HMM Not initialized", &v37, v24);
      sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsModelOutputEvidence &)", "%s\n", v13);
      goto LABEL_29;
    }
  }
}

void sub_101424890()
{
  NSObject *v0;
  char *v1;
  _WORD v2[8];
  uint8_t buf[1640];

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_1021B6278);
  v0 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,ProcessEvidence(),Process RouteHint", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v2[0] = 0;
    v1 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator,ProcessEvidence(),Process RouteHint", v2, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::RouteHintEvidence &)", "%s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

void sub_101424A14(uint64_t a1, int a2, int a3)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  *(_DWORD *)(a1 + 160) = a2;
  *(_DWORD *)(a1 + 164) = a3;
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_1021B6278);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)buf = 67174657;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_SignalEnvironmentInfo,signalEnvironmentType,%{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v6 = *(_DWORD *)(a1 + 160);
    v9[0] = 67174657;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_SignalEnvironmentInfo,signalEnvironmentType,%{private}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::setSignalEnvironmentInfo(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, CLSignalEnvironmentProvider_Type::SignalEnvironmentFidelityLevel)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_101424BC8(_QWORD *a1)
{
  a1[8] = off_102155D60;
  *a1 = off_1021B6250;
  a1[1] = off_102155D60;
  operator delete();
}

void sub_101424BFC(id a1)
{
  qword_1022A0198 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

uint64_t sub_101424C28(uint64_t a1)
{
  _DWORD *v2;

  *(_QWORD *)(a1 + 8) = off_1021B62A8;
  *(_QWORD *)a1 = off_1021B6250;
  *(_QWORD *)(a1 + 32) = 0x100000002;
  *(_OWORD *)(a1 + 16) = xmmword_101CA41B0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 64) = off_1021B62A8;
  v2 = (_DWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 88) = 0x100000002;
  *(_OWORD *)(a1 + 72) = xmmword_101CA41B0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 128) = 0x3DDB7CDFD9D7BDBBLL;
  sub_100079AC4((_DWORD *)(a1 + 8), 0, 0);
  sub_100079AC4(v2, 0, 0);
  *(_DWORD *)(a1 + 120) = 1;
  return a1;
}

void sub_101424CE8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *v2 = off_102155D60;
  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

void sub_101424D00(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

void sub_101424D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[2];

  sub_100A9DEA4(a1, v3, a3);
}

void sub_101424D44(_QWORD *a1)
{
  *a1 = off_1021B6348;
  operator delete();
}

void sub_101424D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[2];

  sub_101424D88(a1, v3, a3);
}

void sub_101424D88(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v5 = *(_DWORD *)(a1 + 12);
    if (v5 >= 2)
    {
      if (!a2)
        sub_101918504(a1, 0, a3);
      v7 = v5 + v3 - *(_DWORD *)(a1 + 20);
      if (v7 <= 0)
        sub_101918528(a1, (uint64_t)a2, a3);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v8 = *(_DWORD *)(a1 + 16);
      if (v8 >= 3)
      {
        v9 = (v8 - 1);
        v10 = 1;
        do
        {
          v11 = &a2[v10];
          if (!a2[v10])
          {
            v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10);
            v13 = v10;
            do
            {
              v13 = v13 * v7 % (int)v9;
              v14 = *(_QWORD *)(a1 + 32);
              v15 = *(_QWORD *)(v14 + 8 * v13);
              *(_QWORD *)(v14 + 8 * v13) = v12;
              *v11 = 1;
              v11 = &a2[v13];
              v12 = v15;
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
}

void sub_101424E5C(_QWORD *a1)
{
  *a1 = off_1021B63D0;
  operator delete();
}

void sub_101424E80(_QWORD *a1)
{
  *a1 = off_1021B6348;
  operator delete();
}

void sub_101424EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  sub_101424D88(a1, &v3, a3);
}

void sub_101424EC4(_QWORD *a1)
{
  *a1 = off_1021B63D0;
  operator delete();
}

void sub_101424EE8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 947, a4);
}

void sub_101424EF0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 946, a4);
}

void sub_101424EF8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 945, a4);
}

void sub_101424F00(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 784, a4);
}

void sub_101424F08(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 783, a4);
}

void sub_101424F10(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 782, a4);
}

void sub_101424F18(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 979, a4);
}

uint64_t sub_101424F28(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  _BYTE buf[12];
  char v10;
  int v11;
  _BYTE *v12;
  void *__p[2];
  char v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(__p, a1);
    v3 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered unexpected location notification while in %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v5 = qword_1022A0078;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(buf, a1);
    if (v10 >= 0)
      v6 = buf;
    else
      v6 = *(_BYTE **)buf;
    v11 = 136315138;
    v12 = v6;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v5, 0, "#Warning Pedometer Assistance: encountered unexpected location notification while in %s", (const char *)&v11);
    v8 = v7;
    if (v10 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::HandleLocationNotification(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v8);
    if (v8 != (char *)__p)
      free(v8);
  }
  return 1;
}

uint64_t sub_10142514C(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  _BYTE buf[12];
  char v10;
  int v11;
  _BYTE *v12;
  void *__p[2];
  char v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(__p, a1);
    v3 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered unexpected motion state notification while in %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v5 = qword_1022A0078;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(buf, a1);
    if (v10 >= 0)
      v6 = buf;
    else
      v6 = *(_BYTE **)buf;
    v11 = 136315138;
    v12 = v6;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v5, 0, "#Warning Pedometer Assistance: encountered unexpected motion state notification while in %s", (const char *)&v11);
    v8 = v7;
    if (v10 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::HandleMotionStateNotification(const CLMotionActivity &)", "%s\n", v8);
    if (v8 != (char *)__p)
      free(v8);
  }
  return 1;
}

uint64_t sub_101425370()
{
  return 1;
}

uint64_t sub_101425378(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  _BYTE buf[12];
  char v10;
  int v11;
  _BYTE *v12;
  void *__p[2];
  char v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(__p, a1);
    v3 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered unexpected step count notification while in %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v5 = qword_1022A0078;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(buf, a1);
    if (v10 >= 0)
      v6 = buf;
    else
      v6 = *(_BYTE **)buf;
    v11 = 136315138;
    v12 = v6;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v5, 0, "#Warning Pedometer Assistance: encountered unexpected step count notification while in %s", (const char *)&v11);
    v8 = v7;
    if (v10 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::HandleStepCountNotification(const CLStepCountEntry &)", "%s\n", v8);
    if (v8 != (char *)__p)
      free(v8);
  }
  return 1;
}

uint64_t sub_10142559C()
{
  return 1;
}

uint64_t sub_1014255A4()
{
  return 0;
}

uint64_t sub_1014255AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  char *v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  double v16;
  NSObject *v17;
  const char *v18;
  double v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  char *v37;
  double *v38;
  char *v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  double *v45;
  double *v46;
  uint64_t v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  NSObject *v54;
  const char *v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  double v59;
  unint64_t v60;
  _QWORD *v61;
  double *v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  char *v68;
  void *v69;
  char *v70;
  int64_t v71;
  unint64_t v72;
  int64_t v73;
  unint64_t v74;
  char *v75;
  double *v76;
  double *v77;
  double *v78;
  NSObject *v79;
  const char *v80;
  NSObject *v81;
  double *v82;
  NSObject *v83;
  const char *v84;
  char *v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  NSObject *v91;
  const char *v92;
  double *v93;
  double v94;
  double v95;
  double v96;
  NSObject *v97;
  const char *v98;
  NSObject *v99;
  const char *v100;
  double *v101;
  double v102;
  double v103;
  double v104;
  double v105;
  NSObject *v106;
  const char *v107;
  NSObject *v108;
  void *v109;
  const char *v110;
  const char *v111;
  const char *v112;
  double v113;
  uint64_t v114;
  _BYTE v115[12];
  __int16 v116;
  int64_t v117;
  void *v118[4];
  void *__p[4];
  _BYTE buf[1628];

  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 328) || (v3 = *(_QWORD *)(v2 + 376), v3 <= 4))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 376);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to pedometer data history length %lu", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v6 = *(void **)(*(_QWORD *)(a1 + 8) + 376);
    LODWORD(__p[0]) = 134217984;
    *(void **)((char *)__p + 4) = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: should not be active due to pedometer data history length %lu", __p);
    v8 = (char *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v7);
LABEL_180:
    if (v8 != buf)
      free(v8);
    return 0;
  }
  if (!*(_BYTE *)(v2 + 1232) || (v9 = *(_QWORD *)(v2 + 424), v9 <= 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 424);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to GNSS data history length %lu", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v109 = *(void **)(*(_QWORD *)(a1 + 8) + 424);
    LODWORD(__p[0]) = 134217984;
    *(void **)((char *)__p + 4) = v109;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: should not be active due to GNSS data history length %lu", __p);
    v8 = (char *)v110;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v110);
    goto LABEL_180;
  }
  v14 = *(_QWORD *)(v2 + 344);
  v15 = *(_QWORD *)(v2 + 368);
  v16 = *(double *)(*(_QWORD *)(v14 + 8 * (v15 / 0x17)) + 176 * (v15 % 0x17));
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(v2 + 392) + (((v9 + *(_QWORD *)(v2 + 416) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                 + 800 * (((_DWORD)v9 + *(_DWORD *)(v2 + 416) - 1) & 0xF)
                 + 192) < v16)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to old GNSS data", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: should not be active due to old GNSS data", __p, 2);
    v8 = (char *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v18);
    goto LABEL_180;
  }
  v19 = *(double *)(v2 + 224);
  if (v19 > 0.0001 && v19 < 3.6)
  {
    v20 = v15 + v3;
    v21 = (_QWORD *)(v14 + 8 * (v20 / 0x17));
    if (*(_QWORD *)(v2 + 352) == v14)
      v22 = 0;
    else
      v22 = *v21 + 176 * (v20 % 0x17);
    v23 = *(double *)(v2 + 192);
    *(_QWORD *)buf = v21;
    *(_QWORD *)&buf[8] = v22;
    v24 = 2.56 / v19;
    sub_10081F17C(buf, -1);
    v25 = *(_QWORD *)&buf[8];
    if (**(_QWORD **)buf == *(_QWORD *)&buf[8])
      v25 = *(_QWORD *)(*(_QWORD *)buf - 8) + 4048;
    v26 = v23 - *(double *)(v25 - 136);
    if (v24 > v26 * 3.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v79 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = v24;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v26;
        _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to discrepancy between pace distance %.3f and delta distance %.3f", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      LODWORD(__p[0]) = 134218240;
      *(void **)((char *)__p + 4) = *(void **)&v24;
      WORD2(__p[1]) = 2048;
      *(void **)((char *)&__p[1] + 6) = *(void **)&v26;
      LODWORD(v113) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: should not be active due to discrepancy between pace distance %.3f and delta distance %.3f", COERCE_DOUBLE(__p), v113);
      v8 = (char *)v80;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v80);
      goto LABEL_180;
    }
  }
  memset(__p, 0, 24);
  sub_101319EB4(__p, 5uLL);
  v27 = *(_QWORD **)(a1 + 8);
  v28 = v27[43];
  if (v27[44] != v28)
  {
    v29 = v27[46];
    v30 = *(_QWORD *)(v28 + 8 * (v29 / 0x17)) + 176 * (v29 % 0x17);
    v31 = *(_QWORD *)(v28 + 8 * ((v27[47] + v29) / 0x17)) + 176 * ((v27[47] + v29) % 0x17);
    if (v30 != v31)
    {
      v32 = (_QWORD *)(v28 + 8 * (v29 / 0x17));
      v33 = 0.0;
      v34 = 0.0;
      while (1)
      {
        *(_QWORD *)buf = 0;
        v118[0] = 0;
        v114 = 0;
        *(_QWORD *)v115 = 0;
        if ((sub_101426CD8(v30, (double *)buf, (double *)v118, (double *)v115, (double *)&v114) & 1) == 0)
          goto LABEL_114;
        v35 = *(double *)buf;
        v36 = *(double *)v118 * *(double *)v118;
        v37 = (char *)__p[1];
        if (__p[1] >= __p[2])
        {
          v39 = (char *)__p[0];
          v40 = ((char *)__p[1] - (char *)__p[0]) >> 4;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 60)
            sub_100259694();
          v42 = (char *)__p[2] - (char *)__p[0];
          if (((char *)__p[2] - (char *)__p[0]) >> 3 > v41)
            v41 = v42 >> 3;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
            v43 = 0xFFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)sub_10028E224((uint64_t)&__p[2], v43);
            v39 = (char *)__p[0];
            v37 = (char *)__p[1];
          }
          else
          {
            v44 = 0;
          }
          v45 = (double *)&v44[16 * v40];
          *v45 = v35;
          v45[1] = v36;
          v46 = v45;
          if (v37 != v39)
          {
            do
            {
              *((_OWORD *)v46 - 1) = *((_OWORD *)v37 - 1);
              v46 -= 2;
              v37 -= 16;
            }
            while (v37 != v39);
            v39 = (char *)__p[0];
          }
          v38 = v45 + 2;
          __p[0] = v46;
          __p[1] = v45 + 2;
          __p[2] = &v44[16 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)__p[1] = *(_QWORD *)buf;
          *((double *)v37 + 1) = v36;
          v38 = (double *)(v37 + 16);
        }
        __p[1] = v38;
        v30 += 176;
        if (v30 - *v32 == 4048)
        {
          v47 = v32[1];
          ++v32;
          v30 = v47;
        }
        v33 = v33 + 1.0 / v36;
        v34 = v34 + 1.0 / (v36 * v33) * (v35 - v34);
        if (v30 == v31)
          goto LABEL_62;
      }
    }
  }
  v33 = 0.0;
  v38 = (double *)__p[1];
  v34 = 0.0;
LABEL_62:
  v48 = (double *)__p[0];
  v49 = 1.0 / v33;
  if (__p[0] == v38)
  {
LABEL_75:
    memset(v118, 0, 24);
    sub_101319EB4(v118, 0xCuLL);
    v57 = *(_QWORD **)(a1 + 8);
    v58 = v57[49];
    v59 = 0.0;
    if (v57[50] == v58)
    {
      v64 = 0.0;
    }
    else
    {
      v60 = v57[52];
      v61 = (_QWORD *)(v58 + 8 * (v60 >> 4));
      v62 = (double *)(*v61 + 800 * (v60 & 0xF));
      v63 = *(_QWORD *)(v58 + (((v57[53] + v60) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 800 * ((*((_DWORD *)v57 + 106) + (_DWORD)v60) & 0xF);
      v64 = 0.0;
      while (v62 != (double *)v63)
      {
        if (v62[24] >= v16)
        {
          v65 = *(double *)((char *)v62 + 44);
          v66 = *(double *)((char *)v62 + 52);
          if (v66 < 0.25)
            v66 = 0.25;
          v67 = v66 * v66;
          v68 = (char *)v118[1];
          if (v118[1] >= v118[2])
          {
            v70 = (char *)v118[0];
            v71 = ((char *)v118[1] - (char *)v118[0]) >> 4;
            v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 60)
              sub_100259694();
            v73 = (char *)v118[2] - (char *)v118[0];
            if (((char *)v118[2] - (char *)v118[0]) >> 3 > v72)
              v72 = v73 >> 3;
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
              v74 = 0xFFFFFFFFFFFFFFFLL;
            else
              v74 = v72;
            if (v74)
            {
              v75 = (char *)sub_10028E224((uint64_t)&v118[2], v74);
              v70 = (char *)v118[0];
              v68 = (char *)v118[1];
            }
            else
            {
              v75 = 0;
            }
            v76 = (double *)&v75[16 * v71];
            *v76 = v65;
            v76[1] = v67;
            v77 = v76;
            if (v68 != v70)
            {
              do
              {
                *((_OWORD *)v77 - 1) = *((_OWORD *)v68 - 1);
                v77 -= 2;
                v68 -= 16;
              }
              while (v68 != v70);
              v70 = (char *)v118[0];
            }
            v69 = v76 + 2;
            v118[0] = v77;
            v118[1] = v76 + 2;
            v118[2] = &v75[16 * v74];
            if (v70)
              operator delete(v70);
          }
          else
          {
            *(double *)v118[1] = v65;
            *((double *)v68 + 1) = v67;
            v69 = v68 + 16;
          }
          v118[1] = v69;
          v64 = v64 + 1.0 / v67;
          v59 = v59 + 1.0 / (v67 * v64) * (v65 - v59);
        }
        v62 += 100;
        if ((double *)((char *)v62 - *v61) == (double *)12800)
        {
          v78 = (double *)v61[1];
          ++v61;
          v62 = v78;
        }
      }
    }
    v82 = (double *)v118[0];
    if ((void *)((char *)v118[1] - (char *)v118[0]) >= (void *)0x20)
    {
      v86 = 1.0 / v64;
      v87 = 0.0;
      if (v118[0] == v118[1])
      {
LABEL_128:
        if (v87 <= *(double *)((char *)&unk_101CA43D0 + (((char *)v118[1] - (char *)v118[0]) >> 1) - 16))
        {
          v93 = *(double **)(a1 + 8);
          v94 = v93[19];
          v95 = v93[78];
          if (vabdd_f64(v94, v95) <= 3.84)
          {
            v101 = (double *)((char *)v93 + 476);
            v102 = *v101;
            v103 = v101[1];
            if (v103 < 0.25)
              v103 = 0.25;
            v104 = v34 - v102;
            v105 = vabdd_f64(v34, v102) / sqrt(v49 + v103 * v103);
            if (v105 <= 2.5758293)
            {
              if (vabdd_f64(v34, v59) / sqrt(v49 + v86) <= 2.5758293)
              {
                v12 = 1;
                goto LABEL_173;
              }
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021B6718);
              v108 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134218240;
                *(double *)&buf[4] = v104;
                *(_WORD *)&buf[12] = 2048;
                *(double *)&buf[14] = v105;
                _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to equivalence of averaged speeds Observation,%.3lf,testStatistic,%.3lf", buf, 0x16u);
              }
              if (!sub_1001BFF7C(115, 2))
              {
LABEL_172:
                v12 = 0;
LABEL_173:
                if (v118[0])
                {
                  v118[1] = v118[0];
                  operator delete(v118[0]);
                }
                goto LABEL_175;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021B6718);
              *(_DWORD *)v115 = 134218240;
              *(double *)&v115[4] = v104;
              v116 = 2048;
              v117 = *(_QWORD *)&v105;
              LODWORD(v113) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: should not be active due to equivalence of averaged speeds Observation,%.3lf,testStatistic,%.3lf", COERCE_DOUBLE(v115), v113);
              v85 = (char *)v112;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v112);
            }
            else
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021B6718);
              v106 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134218240;
                *(double *)&buf[4] = v104;
                *(_WORD *)&buf[12] = 2048;
                *(double *)&buf[14] = v105;
                _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to equivalence Observation,%.3lf,testStatistic,%.3lf", buf, 0x16u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_172;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021B6718);
              *(_DWORD *)v115 = 134218240;
              *(double *)&v115[4] = v104;
              v116 = 2048;
              v117 = *(_QWORD *)&v105;
              LODWORD(v113) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: should not be active due to equivalence Observation,%.3lf,testStatistic,%.3lf", COERCE_DOUBLE(v115), v113);
              v85 = (char *)v107;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v107);
            }
          }
          else
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B6718);
            v96 = v94 - v95;
            v97 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134217984;
              *(double *)&buf[4] = v96;
              _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to old data age,%.3lf sec.", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_172;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B6718);
            *(_DWORD *)v115 = 134217984;
            *(double *)&v115[4] = v96;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: should not be active due to old data age,%.3lf sec.", COERCE_DOUBLE(v115));
            v85 = (char *)v98;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v98);
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B6718);
          v91 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134218240;
            *(double *)&buf[4] = v87;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = (((char *)v118[1] - (char *)v118[0]) >> 4) - 1;
            _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to GNSS outlier goodness-of-fit statistic %.3lf (%lu DOF)", buf, 0x16u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_172;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B6718);
          *(_DWORD *)v115 = 134218240;
          *(double *)&v115[4] = v87;
          v116 = 2048;
          v117 = (((char *)v118[1] - (char *)v118[0]) >> 4) - 1;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: should not be active due to GNSS outlier goodness-of-fit statistic %.3lf (%lu DOF)", COERCE_DOUBLE(v115), 22);
          v85 = (char *)v92;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v92);
        }
      }
      else
      {
        while (1)
        {
          v88 = v82[1];
          v89 = *v82 - v59;
          v90 = v89 * v89 / (v88 - v86);
          if (v90 > 6.59854421)
            break;
          v87 = v87 + v89 * v89 / v88;
          v82 += 2;
          if (v82 == v118[1])
            goto LABEL_128;
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B6718);
        v99 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = v89;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v90;
          _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to GNSS outlier innovation,%.3lf,statistic,%.3lf", buf, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_172;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B6718);
        *(_DWORD *)v115 = 134218240;
        *(double *)&v115[4] = v89;
        v116 = 2048;
        v117 = *(_QWORD *)&v90;
        LODWORD(v113) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: should not be active due to GNSS outlier innovation,%.3lf,statistic,%.3lf", COERCE_DOUBLE(v115), v113);
        v85 = (char *)v100;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v100);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v83 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = ((char *)v118[1] - (char *)v118[0]) >> 4;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to insufficient GNSS records with sufficiently recent time stamps (%lu records)", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_172;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      *(_DWORD *)v115 = 134217984;
      *(_QWORD *)&v115[4] = ((char *)v118[1] - (char *)v118[0]) >> 4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: should not be active due to insufficient GNSS records with sufficiently recent time stamps (%lu records)", v115);
      v85 = (char *)v84;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v84);
    }
    if (v85 != buf)
      free(v85);
    goto LABEL_172;
  }
  v50 = 0.0;
  while (1)
  {
    v51 = v48[1];
    v52 = *v48 - v34;
    v53 = v52 * v52 / (v51 - v49);
    if (v53 > 6.59854421)
      break;
    v50 = v50 + v52 * v52 / v51;
    v48 += 2;
    if (v48 == v38)
    {
      if (v50 <= 9.48772904)
        goto LABEL_75;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v54 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v50;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to pedometer outlier goodness-of-fit statistic %.3lf", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B6718);
        LODWORD(v118[0]) = 134217984;
        *(void **)((char *)v118 + 4) = *(void **)&v50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: should not be active due to pedometer outlier goodness-of-fit statistic %.3lf", COERCE_DOUBLE(v118));
        v56 = (char *)v55;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v55);
LABEL_185:
        if (v56 != buf)
          free(v56);
        goto LABEL_114;
      }
      goto LABEL_114;
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v81 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = v52;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v53;
    _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to pedometer outlier innovation,%.3lf,statistic,%.3lf", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    LODWORD(v118[0]) = 134218240;
    *(void **)((char *)v118 + 4) = *(void **)&v52;
    WORD2(v118[1]) = 2048;
    *(void **)((char *)&v118[1] + 6) = *(void **)&v53;
    LODWORD(v113) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: should not be active due to pedometer outlier innovation,%.3lf,statistic,%.3lf", COERCE_DOUBLE(v118), v113);
    v56 = (char *)v111;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v111);
    goto LABEL_185;
  }
LABEL_114:
  v12 = 0;
LABEL_175:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v12;
}

void sub_101426C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101426CD8(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  double v11;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  double v22;
  _BOOL4 v23;
  uint64_t result;
  uint64_t v25;
  const char *v26;
  NSObject *v27;
  double v28;
  _BOOL4 v29;
  double v30;
  uint8_t *v31;
  double v32;
  double v33;
  double v34;
  __int128 v35;
  uint8_t buf[4];
  double v37;

  if ((*(_QWORD *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(a1 + 8) <= 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v21 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v22 = *(double *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v37 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Pedometer Assistance: encountered invalid time stamp %{public}.3lf", buf, 0xCu);
    }
    v23 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v23)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v25 = *(_QWORD *)(a1 + 8);
      LODWORD(v35) = 134349056;
      *(_QWORD *)((char *)&v35 + 4) = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Pedometer Assistance: encountered invalid time stamp %{public}.3lf", &v35, 12, v35);
      goto LABEL_30;
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 120) & 0x7FFFFFFFFFFFFFFFLL;
    v8 = (unint64_t)(v7 - 0x10000000000000) >> 53;
    v9 = v7 - 1;
    v10 = v8 >= 0x3FF && v9 >= 0xFFFFFFFFFFFFFLL;
    v11 = 0.0;
    if (!v10)
      v11 = 1.0 / *(double *)(a1 + 120);
    *a2 = v11;
    if (v11 <= 11.4822547)
    {
      v15 = *(double *)(a1 + 128);
      v16 = *(double *)(a1 + 136);
      v17 = sub_10075B938();
      v18 = 0.25;
      if (!v17)
        v18 = 0.1;
      v19 = *a2;
      if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v16 == 0.0)
        v20 = v19 * 0.1;
      else
        v20 = fabs(v19 + -1.0 / v16);
      if (v20 < v18)
        v20 = v18;
      if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v15 == 0.0)
        v32 = v19 * 0.1;
      else
        v32 = vabdd_f64(1.0 / v15, v19);
      if (v32 >= v18)
        v18 = v32;
      *a3 = sqrt(v18 * (v18 * (v20 / (v20 + v18))) + v20 * (v18 / (v20 + v18)) * v20);
      v33 = *a2 + v20 * -3.0;
      if (v33 < 0.0)
        v33 = 0.0;
      *a4 = v33;
      v34 = *a2 + v18 * 3.0;
      if (v34 > 11.4822547)
        v34 = 11.4822547;
      *a5 = v34;
      return 1;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v27 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v28 = *a2;
      *(_DWORD *)buf = 134349056;
      v37 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "Pedometer Assistance: encountered impossible pedestrian speed %{public}.3lf", buf, 0xCu);
    }
    v29 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v29)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v30 = *a2;
      LODWORD(v35) = 134349056;
      *(double *)((char *)&v35 + 4) = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Pedometer Assistance: encountered impossible pedestrian speed %{public}.3lf", &v35, 12, v35);
LABEL_30:
      v31 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLGNSSPedometerAssistanceController::GetPedometerStatistics(const CLStepCountEntry &, double &, double &, double &, double &)", "%s\n", v26);
      if (v31 != buf)
        free(v31);
      return 0;
    }
  }
  return result;
}

uint64_t sub_101427108()
{
  return 1;
}

uint64_t sub_101427110(uint64_t a1, uint64_t a2, char *a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int v9;

  sub_100010F30(*(_QWORD *)(a1 + 8), a2, a3);
  sub_100172494(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136), a2);
  v9 = v5;
  v6 = sub_100214D00();
  v7 = *(_QWORD *)(a1 + 8);
  if (!v6 || v9 != 1 || *(_BYTE *)(v7 + 144) || *(_BYTE *)(v7 + 145))
    sub_10021FA34(v7, v7 + 80);
  return 1;
}

uint64_t sub_1014271A0(uint64_t a1, uint64_t a2, __n128 a3)
{
  int v4;
  int v5;
  uint64_t v6;
  int v8;

  sub_10002E0F4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136), a2, a3);
  v8 = v4;
  v5 = sub_100214D00();
  v6 = *(_QWORD *)(a1 + 8);
  if (!v5 || v8 != 1 || *(_BYTE *)(v6 + 144) || *(_BYTE *)(v6 + 145))
    sub_10021FA34(v6, v6 + 80);
  return 1;
}

uint64_t sub_101427210(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (*a2 == 2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: application processor going to sleep", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: application processor going to sleep", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceAwakeState::HandleStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_10021FA34(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) + 80);
  }
  return 1;
}

BOOL sub_1014273BC(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;

  v3 = sub_10021F1B4(*(_QWORD *)(a1 + 8), a2);
  if (v3 && sub_1014255AC(a1))
    sub_10021FA34(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) + 112);
  return v3;
}

_QWORD *sub_101427404@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "PedometerAssistanceAwakeState");
}

uint64_t sub_101427414(uint64_t a1, uint64_t a2, char *a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int v9;

  sub_100010F30(*(_QWORD *)(a1 + 8), a2, a3);
  sub_100172494(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136), a2);
  v9 = v5;
  v6 = sub_100214D00();
  v7 = *(_QWORD *)(a1 + 8);
  if (!v6 || v9 != 1 || *(_BYTE *)(v7 + 144) || *(_BYTE *)(v7 + 145))
    sub_10021FA34(v7, v7 + 80);
  return 1;
}

uint64_t sub_1014274A4(uint64_t a1, uint64_t a2, __n128 a3)
{
  int v4;
  int v5;
  uint64_t v6;
  int v8;

  sub_10002E0F4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136), a2, a3);
  v8 = v4;
  v5 = sub_100214D00();
  v6 = *(_QWORD *)(a1 + 8);
  if (!v5 || v8 != 1 || *(_BYTE *)(v6 + 144) || *(_BYTE *)(v6 + 145))
    sub_10021FA34(v6, v6 + 80);
  return 1;
}

uint64_t sub_101427514(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (*a2 == 2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: application processor going to sleep", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: application processor going to sleep", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceActiveState::HandleStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_10021FA34(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) + 80);
  }
  return 1;
}

BOOL sub_1014276C0(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;

  v3 = sub_10021F1B4(*(_QWORD *)(a1 + 8), a2);
  if (v3)
  {
    if ((sub_1014255AC(a1) & 1) != 0)
      (**(void (***)(uint64_t))a1)(a1);
    else
      sub_10021FA34(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) + 96);
  }
  return v3;
}

_QWORD *sub_10142771C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "PedometerAssistanceActiveState");
}

uint64_t sub_10142772C(void (***a1)(_QWORD))
{
  (**a1)(a1);
  return 1;
}

uint64_t sub_10142774C(uint64_t a1)
{
  _BYTE *v2;
  uint64_t result;
  double v4;
  uint64_t v5;
  double v6;
  CFAbsoluteTime Current;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  void (*v14)(void);
  NSObject *v15;
  _BOOL4 v16;
  const char *v17;
  uint8_t *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  _BYTE v31[24];
  double v32;
  __int16 v33;
  uint64_t v34;
  _BYTE v35[24];
  double v36;
  uint64_t v37;
  uint8_t buf[4];
  CFAbsoluteTime v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  double v43;
  __int16 v44;
  uint64_t v45;

  v2 = *(_BYTE **)(a1 + 8);
  if (!v2[56] && !v2[57] || !v2[328])
    return 0;
  v29 = 0.0;
  v30 = 0.0;
  v27 = 0.0;
  v28 = 0.0;
  result = sub_101426CD8((uint64_t)(v2 + 152), &v30, &v29, &v28, &v27);
  if ((_DWORD)result)
  {
    result = 0;
    v4 = v30;
    if (v30 >= 0.0 && v30 <= 4.4704)
    {
      v5 = *(_QWORD *)&v27;
      v6 = v28;
      if (v28 < v27)
      {
        Current = CFAbsoluteTimeGetCurrent();
        v8 = sub_1001FCBB4();
        v9 = *(_QWORD *)(a1 + 8);
        v10 = *(double *)(v9 + 484);
        if (v10 < 0.25)
          v10 = 0.25;
        if (*(_BYTE *)(v9 + 56))
        {
          v11 = v29;
          if (vabdd_f64(*(double *)(v9 + 476), v4) / sqrt(v11 * v11 + v10 * v10) <= 0.67448975)
          {
            *(CFAbsoluteTime *)v31 = Current;
            *(double *)&v31[8] = v8;
            *(double *)&v31[16] = v4;
            v32 = v29;
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B6718);
            v12 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134218496;
              v39 = Current;
              v40 = 2048;
              v41 = *(_QWORD *)&v4;
              v42 = 2048;
              v43 = v11;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: Type,Speed,CFAbsoluteTime,%.3lf,Speed,%.3lf,Uncertainty,%.3lf", buf, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021B6718);
              *(_DWORD *)v35 = 134218496;
              *(CFAbsoluteTime *)&v35[4] = Current;
              *(_WORD *)&v35[12] = 2048;
              *(double *)&v35[14] = v4;
              *(_WORD *)&v35[22] = 2048;
              v36 = v11;
              LODWORD(v26) = 32;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: Type,Speed,CFAbsoluteTime,%.3lf,Speed,%.3lf,Uncertainty,%.3lf", COERCE_DOUBLE(v35), v26, v27);
              v23 = (uint8_t *)v22;
              sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceActiveState::SendPedometerAssistanceCommand()", "%s\n", v22);
              if (v23 != buf)
                free(v23);
            }
            v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1280);
            if (v13)
            {
              v14 = *(void (**)(void))(*(_QWORD *)v13 + 48);
LABEL_36:
              v14();
              v21 = *(_QWORD *)(a1 + 8);
              *(CFAbsoluteTime *)(v21 + 1240) = Current;
              result = 1;
              *(_BYTE *)(v21 + 1248) = 1;
              return result;
            }
            goto LABEL_47;
          }
        }
        if (*(_BYTE *)(v9 + 57))
        {
          *(CFAbsoluteTime *)v35 = Current;
          *(double *)&v35[8] = v8;
          *(_QWORD *)&v35[16] = 0x400EB851EB851EB8;
          v36 = v6;
          v37 = v5;
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B6718);
          v19 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134218752;
            v39 = Current;
            v40 = 2048;
            v41 = 0x400EB851EB851EB8;
            v42 = 2048;
            v43 = v6;
            v44 = 2048;
            v45 = v5;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: Type,Constraint,CFAbsoluteTime,%.3lf,Duration,%.3lf,LowerBound,%.3lf,UpperBound,%.3lf", buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B6718);
            *(_DWORD *)v31 = 134218752;
            *(CFAbsoluteTime *)&v31[4] = Current;
            *(_WORD *)&v31[12] = 2048;
            *(_QWORD *)&v31[14] = 0x400EB851EB851EB8;
            *(_WORD *)&v31[22] = 2048;
            v32 = v6;
            v33 = 2048;
            v34 = v5;
            LODWORD(v26) = 42;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: Type,Constraint,CFAbsoluteTime,%.3lf,Duration,%.3lf,LowerBound,%.3lf,UpperBound,%.3lf", COERCE_DOUBLE(v31), v26, v27, v28);
            v25 = (uint8_t *)v24;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceActiveState::SendPedometerAssistanceCommand()", "%s\n", v24);
            if (v25 != buf)
              free(v25);
          }
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1312);
          if (v20)
          {
            v14 = *(void (**)(void))(*(_QWORD *)v20 + 48);
            goto LABEL_36;
          }
LABEL_47:
          sub_10025FD1C();
        }
        return 0;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134349312;
        v39 = v6;
        v40 = 2050;
        v41 = v5;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Pedometer Assistance: pedometerSpeedMinBound %{public}.3lf >= pedometerSpeedMaxBound %{public}.3lf", buf, 0x16u);
      }
      v16 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v16)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B6718);
        *(_DWORD *)v31 = 134349312;
        *(double *)&v31[4] = v6;
        *(_WORD *)&v31[12] = 2050;
        *(_QWORD *)&v31[14] = v5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Pedometer Assistance: pedometerSpeedMinBound %{public}.3lf >= pedometerSpeedMaxBound %{public}.3lf", v31, 22);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceActiveState::SendPedometerAssistanceCommand()", "%s\n", v17);
        if (v18 != buf)
          free(v18);
        return 0;
      }
    }
  }
  return result;
}

void sub_101427D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  int v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  const char *v25;
  uint8_t *v26;
  NSObject *v27;
  const char *v28;
  uint8_t *v29;
  int v30;
  const char *v31;
  uint8_t *v32;
  int v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  int v41;
  int v42;
  int v43;
  uint8_t buf[8];
  std::__shared_weak_count *v45;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_WORD *)(a1 + 56) = 257;
  *(_QWORD *)(a1 + 64) = off_1021B6538;
  *(_BYTE *)(a1 + 58) = 0;
  *(_QWORD *)(a1 + 72) = a1;
  *(_QWORD *)(a1 + 80) = off_1021B6598;
  *(_QWORD *)(a1 + 88) = a1;
  *(_QWORD *)(a1 + 96) = off_1021B65F8;
  *(_QWORD *)(a1 + 104) = a1;
  *(_QWORD *)(a1 + 112) = off_1021B6658;
  *(_QWORD *)(a1 + 120) = a1;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 1232) = 0;
  *(_BYTE *)(a1 + 1240) = 0;
  *(_BYTE *)(a1 + 1248) = 0;
  *(_QWORD *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_QWORD *)(a1 + 1312) = 0;
  *(_WORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_BYTE *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: constructing GNSSPedometerAssistanceController", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    LOWORD(v42) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: constructing GNSSPedometerAssistanceController", &v42, 2);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::CLGNSSPedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  if (*(_QWORD *)a1)
  {
    if (*(_QWORD *)(a3 + 24))
    {
      if (*(_QWORD *)(a4 + 24))
      {
        v41 = 0;
        sub_1001E4804(buf);
        v6 = sub_1001E4B84(*(uint64_t *)buf, "GpsEnablePedometerAssistanceCommands", &v41);
        v7 = v6;
        v8 = v45;
        if (!v45)
          goto LABEL_13;
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
          if (!v7)
            goto LABEL_19;
        }
        else
        {
LABEL_13:
          if (!v6)
            goto LABEL_19;
        }
        *(_BYTE *)(a1 + 56) = v41 == 1;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B6718);
        v11 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v12 = *(unsigned __int8 *)(a1 + 56);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: GpsEnablePedometerAssistanceCommands,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B6718);
          v30 = *(unsigned __int8 *)(a1 + 56);
          v42 = 67109120;
          v43 = v30;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: GpsEnablePedometerAssistanceCommands,%d", &v42);
          v32 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::CLGNSSPedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
LABEL_19:
        if (!*(_BYTE *)(a1 + 56))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B6718);
          v16 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: pedometer assistance commands disabled", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B6718);
            LOWORD(v42) = 0;
            LODWORD(v38) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: pedometer assistance commands disabled", &v42, v38);
            v15 = (uint8_t *)v36;
            sub_100512490("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::CLGNSSPedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v36);
            goto LABEL_81;
          }
LABEL_32:
          v41 = 0;
          sub_1001E4804(buf);
          v17 = sub_1001E4B84(*(uint64_t *)buf, "GpsEnablePedometerConstraintAssistanceCommands", &v41);
          v18 = v17;
          v19 = v45;
          if (!v45)
            goto LABEL_36;
          v20 = (unint64_t *)&v45->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
            if (!v18)
              goto LABEL_42;
          }
          else
          {
LABEL_36:
            if (!v17)
              goto LABEL_42;
          }
          *(_BYTE *)(a1 + 57) = v41 == 1;
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B6718);
          v22 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v23 = *(unsigned __int8 *)(a1 + 57);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: GpsEnablePedometerConstraintAssistanceCommands,%d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B6718);
            v33 = *(unsigned __int8 *)(a1 + 57);
            v42 = 67109120;
            v43 = v33;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: GpsEnablePedometerConstraintAssistanceCommands,%d", &v42);
            v35 = (uint8_t *)v34;
            sub_100512490("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::CLGNSSPedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v34);
            if (v35 != buf)
              free(v35);
          }
LABEL_42:
          if (*(_BYTE *)(a1 + 57))
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B6718);
            v24 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: pedometer constraint assistance commands enabled", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021B6718);
              LOWORD(v42) = 0;
              LODWORD(v38) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: pedometer constraint assistance commands enabled", &v42, v38);
              v26 = (uint8_t *)v25;
              sub_100512490("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::CLGNSSPedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v25);
LABEL_86:
              if (v26 != buf)
                free(v26);
            }
          }
          else
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B6718);
            v27 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: pedometer constraint assistance commands disabled", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021B6718);
              LOWORD(v42) = 0;
              LODWORD(v38) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: pedometer constraint assistance commands disabled", &v42, v38);
              v26 = (uint8_t *)v37;
              sub_100512490("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::CLGNSSPedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v37);
              goto LABEL_86;
            }
          }
          *(_BYTE *)(a1 + 58) = 0;
          sub_1006AA544();
        }
        if (qword_1022A0070 == -1)
        {
LABEL_21:
          v13 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: pedometer assistance commands enabled", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B6718);
            LOWORD(v42) = 0;
            LODWORD(v38) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: pedometer assistance commands enabled", &v42, v38);
            v15 = (uint8_t *)v14;
            sub_100512490("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::CLGNSSPedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v14);
LABEL_81:
            if (v15 != buf)
              free(v15);
            goto LABEL_32;
          }
          goto LABEL_32;
        }
LABEL_69:
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
        goto LABEL_21;
      }
      sub_101953B8C(buf);
    }
    else
    {
      sub_101953CD8(buf);
    }
  }
  else
  {
    sub_101953E24(buf);
  }
  abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/PedometerAssistance/CLGNSSPedometerAssistanceController.mm", *(_DWORD *)buf, "CLGNSSPedometerAssistanceController");
  __break(1u);
  goto LABEL_69;
}

void sub_101428C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  uint64_t v15;
  uint64_t **v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v22 = *(_QWORD **)(v15 + 1312);
  if (v22 == a15)
  {
    v23 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_6;
    v23 = 5;
    a15 = *(_QWORD **)(v15 + 1312);
  }
  (*(void (**)(void))(*a15 + 8 * v23))();
LABEL_6:
  v24 = *(_QWORD **)(v15 + 1280);
  if (v24 == v17)
  {
    v25 = 4;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v25 = 5;
    v17 = *(_QWORD **)(v15 + 1280);
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v25))(v17);
LABEL_11:
  if (*(_BYTE *)(v15 + 1232))
    sub_100261F44(v15 + 1112);
  sub_10142A5B4(v19);
  sub_1006CF50C(v20);
  sub_10142A578(v16, 0);
  *(_QWORD *)(v15 + 112) = &off_1021B64D8;
  *(_QWORD *)(v15 + 96) = &off_1021B64D8;
  *(_QWORD *)(v15 + 80) = &off_1021B64D8;
  *(_QWORD *)(v15 + 64) = &off_1021B64D8;
  v26 = *(_QWORD *)(v15 + 48);
  *(_QWORD *)(v15 + 48) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *(_QWORD *)(v15 + 40);
  *(_QWORD *)(v15 + 40) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(v15 + 32);
  *(_QWORD *)(v15 + 32) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v15 + 24) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v15 + 16) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *v18;
  *v18 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  _Unwind_Resume(a1);
}

void sub_101428E3C(uint64_t a1, _DWORD *a2, uint64_t *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGNSSPedometerAssistanceController::HandleMotionStateObserverNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6738);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSPedometerAssistanceController::HandleMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6738);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSPedometerAssistanceController::HandleMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10142A0A8((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101428FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101429014(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGNSSPedometerAssistanceController::HandleStatusNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6738);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSPedometerAssistanceController::HandleStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6738);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSPedometerAssistanceController::HandleStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10142A2E8((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1014291CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1014291EC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10142A6E0(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_101429284(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10142A854(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10142931C(_QWORD *result)
{
  *result = &off_1021B64D8;
  return result;
}

uint64_t sub_10142932C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  sub_10021FA34(a1, a1 + 64);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: destructing GNSSPedometerAssistanceController", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v16[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: destructing GNSSPedometerAssistanceController", v16, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::~CLGNSSPedometerAssistanceController()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v3 = *(_QWORD **)(a1 + 1312);
  if (v3 == (_QWORD *)(a1 + 1288))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 1288);
  }
  else
  {
    if (!v3)
      goto LABEL_11;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_11:
  v5 = *(_QWORD **)(a1 + 1280);
  if (v5 == (_QWORD *)(a1 + 1256))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 1256);
  }
  else
  {
    if (!v5)
      goto LABEL_16;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_16:
  if (*(_BYTE *)(a1 + 1232))
    sub_100261F44(a1 + 1112);
  sub_10142A5B4((_QWORD *)(a1 + 384));
  sub_1006CF50C((_QWORD *)(a1 + 336));
  sub_10142A578((uint64_t **)(a1 + 136), 0);
  *(_QWORD *)(a1 + 112) = &off_1021B64D8;
  *(_QWORD *)(a1 + 96) = &off_1021B64D8;
  *(_QWORD *)(a1 + 80) = &off_1021B64D8;
  *(_QWORD *)(a1 + 64) = &off_1021B64D8;
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

void sub_1014295FC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10142960C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  char *v8;
  _BYTE v9[12];
  char v10;
  int v11;
  _BYTE *v12;
  uint8_t buf[8];
  char v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: resetting GNSSPedometerAssistanceController", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    *(_WORD *)v9 = 0;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: resetting GNSSPedometerAssistanceController", v9, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::Reset()", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  *(_QWORD *)(a1 + 128) = a1 + 64;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 128) + 56))(buf);
    v4 = v14 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)&v9[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: entering %s", v9, 0xCu);
    if (v14 < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v6 = qword_1022A0078;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 128) + 56))(v9);
    if (v10 >= 0)
      v7 = v9;
    else
      v7 = *(_BYTE **)v9;
    v11 = 136315138;
    v12 = v7;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 2, "Pedometer Assistance: entering %s", (const char *)&v11);
    if (v10 < 0)
      operator delete(*(void **)v9);
    sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::Reset()", "%s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  sub_100239828();
}

void sub_101429A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1002397F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101429A28(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  _DWORD v19[4];
  uint8_t buf[8];
  std::__shared_weak_count *v21;

  v18 = a1;
  v17 = 0;
  sub_1001E4804(buf);
  v3 = sub_1001E4B84(*(uint64_t *)buf, "GpsEnablePedometerAssistance", &v17);
  v4 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!v3)
    goto LABEL_40;
  v7 = v17;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7 == 1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: GpsEnablePedometerAssistance,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v19[0] = 67109120;
    v19[1] = v7 == 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: GpsEnablePedometerAssistance,%d", v19);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "static std::unique_ptr<CLGNSSPedometerAssistanceController> CLGNSSPedometerAssistanceController::CreatePedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (v7 == 1)
  {
LABEL_40:
    if (sub_100241564())
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: feature enabled", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B6718);
        LOWORD(v19[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: feature enabled", v19, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "static std::unique_ptr<CLGNSSPedometerAssistanceController> CLGNSSPedometerAssistanceController::CreatePedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      sub_101429EFC();
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: feature disabled", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    LOWORD(v19[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: feature disabled", v19, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "static std::unique_ptr<CLGNSSPedometerAssistanceController> CLGNSSPedometerAssistanceController::CreatePedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  *a2 = 0;
}

void sub_101429EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101429EFC()
{
  operator new();
}

void sub_10142A018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == v17)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  operator delete();
}

void sub_10142A0A8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;

  if (!*a3)
  {
    v6 = *((unsigned int *)a4 + 2);
    if (!(_DWORD)v6 || (_DWORD)v6 == 71 || (*a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)a4 <= 0.0)
      *(_BYTE *)(a1 + 144) = 0;
    else
      *(_BYTE *)(a1 + 144) = CLMotionActivity::isTypePedestrian(v6) ^ 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v8 = *((_DWORD *)a4 + 2);
      v9 = *a4;
      v10 = *(unsigned __int8 *)(a1 + 144);
      *(_DWORD *)buf = 67109632;
      v22 = v8;
      v23 = 2048;
      v24 = v9;
      v25 = 1024;
      v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: fitnessSession,%d,startTime,%.3lf,nonPedestrianFitnessSession,%d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v11 = *a4;
      v12 = *(unsigned __int8 *)(a1 + 144);
      v17 = 2048;
      v18 = v11;
      v19 = 1024;
      v20 = v12;
      LODWORD(v15) = 24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: fitnessSession,%d,startTime,%.3lf,nonPedestrianFitnessSession,%d", &v16, v15, 67109632);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::HandleMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

uint64_t sub_10142A2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 128) + 40))(*(_QWORD *)(a1 + 128), a3, a4);
  if ((result & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: failed to handle status notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Pedometer Assistance: failed to handle status notification", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::HandleStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return sub_10021FA34(a1, a1 + 80);
  }
  return result;
}

uint64_t sub_10142A4A0(int64x2_t *a1)
{
  sub_100261F44(*(_QWORD *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 1) & 0x7FFFFFFFFFFFFFF8))+ 800 * (a1[2].i64[0] & 0xF)+ 680);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101B9DFC0);
  return sub_100A0FA18((uint64_t)a1, 1);
}

void sub_10142A500(_QWORD *a1)
{
  *a1 = &off_1021B64D8;
  operator delete();
}

void sub_10142A520(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10142A54C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t *sub_10142A578(uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1002397F4(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10142A5B4(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 4];
    v7 = (uint64_t)*v6 + 800 * (v5 & 0xF);
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 800 * ((*((_DWORD *)a1 + 10) + (int)v5) & 0xF);
    if (v7 != v8)
    {
      do
      {
        sub_100261F44(v7 + 680);
        v7 += 800;
        if (v7 - (_QWORD)*v6 == 12800)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 8;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 16;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

_QWORD *sub_10142A6E0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10142A848(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10142A854(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10142A9BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10142A9C8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x10;
  v4 = v2 - 16;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x3200uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x3200uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x3200uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10142AC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10142ACDC()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CA4398;
      v1[3] = unk_101CA43A8;
      v1[4] = xmmword_101CA43B8;
      v1[0] = xmmword_101CA4378;
      v1[1] = unk_101CA4388;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10142ADB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_10142ADC8()
{
  sub_1015A2E04(qword_10230F0D8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230F0D8, (void *)&_mh_execute_header);
}

std::string *sub_10142AE10@<X0>(std::string *a1@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  sub_1001B8590(a1, (uint64_t)a3);
  return std::string::operator=(a3 + 3, a2);
}

void sub_10142AE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100010174(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10142AE54(_QWORD **a1)
{
  char v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v12;
  char *v13;

  v1 = *((_BYTE *)a1 + 23);
  if (v1 >= 0)
    v2 = *((unsigned __int8 *)a1 + 23);
  else
    v2 = (uint64_t)a1[1];
  if (v1 >= 0)
    v3 = (char *)a1;
  else
    v3 = (char *)*a1;
  v4 = &v3[v2];
  if (v2 >= 31)
  {
    v5 = v2;
    v6 = v3;
    do
    {
      v7 = (char *)memchr(v6, 99, v5 - 30);
      if (!v7)
        break;
      if (*(_QWORD *)v7 == 0x6C7070612E6D6F63
        && *((_QWORD *)v7 + 1) == 0x697461636F6C2E65
        && *((_QWORD *)v7 + 2) == 0x636578652E646E6FLL
        && *(_QWORD *)(v7 + 23) == 0x2D656C6261747563)
      {
        if (v7 != v4 && v7 == v3)
          return 0;
        break;
      }
      v6 = v7 + 1;
      v5 = v4 - v6;
    }
    while (v4 - v6 >= 31);
  }
  if (v2 >= 27)
  {
    v12 = v3;
    do
    {
      v13 = (char *)memchr(v12, 99, v2 - 26);
      if (!v13)
        break;
      if (*(_QWORD *)v13 == 0x6C7070612E6D6F63
        && *((_QWORD *)v13 + 1) == 0x697461636F6C2E65
        && *((_QWORD *)v13 + 2) == 0x646E75622E646E6FLL
        && *(_QWORD *)(v13 + 19) == 0x2D656C646E75622ELL)
      {
        return v13 == v4 || v13 != v3;
      }
      v12 = v13 + 1;
      v2 = v4 - v12;
    }
    while (v4 - v12 > 26);
  }
  v13 = v4;
  return v13 == v4 || v13 != v3;
}

_QWORD *sub_10142AFE8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "root");
}

_QWORD *sub_10142AFF8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "none");
}

uint64_t sub_10142B008(int *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;

  v2 = 0;
  result = 0;
  v4 = *a1;
  while (dword_101CA458C[v2] != v4)
  {
    result = (result + 1);
    if (++v2 == 9)
      sub_1019543A4();
  }
  return result;
}

uint64_t sub_10142B050(unsigned int a1)
{
  if (a1 >= 9)
    sub_101954570();
  return dword_101CA458C[a1];
}

void sub_10142B078(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10142B890(_QWORD *a1, char a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint8_t *v12;
  uint8_t *v13;
  NSObject *v15;
  double v16;
  uint8_t *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  if ((a2 & 1) != 0)
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021B67E8);
    v4 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
    {
      v5 = a1[4];
      v6 = a1[5];
      v7 = a1[6];
      *(_DWORD *)buf = 138543875;
      v25 = v5;
      v26 = 2114;
      v27 = v6;
      v28 = 2049;
      v29 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HealthKitWriter: successfully pushed steadiness sample to HealthKit, startDate: %{public}@, endDate:%{public}@, walkingSteadiness: %{private}f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B67E8);
      v8 = a1[4];
      v9 = a1[5];
      v10 = a1[6];
      v18 = 138543875;
      v19 = v8;
      v20 = 2114;
      v21 = v9;
      v22 = 2049;
      v23 = v10;
      v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "HealthKitWriter: successfully pushed steadiness sample to HealthKit, startDate: %{public}@, endDate:%{public}@, walkingSteadiness: %{private}f", &v18, 32);
      v13 = v12;
      sub_100512490("Generic", 1, 0, 2, "-[CLMobilityHealthKitWriter writeToHealthKitAppleWalkingSteadiness:startDate:endDate:source:]_block_invoke", "%s\n", v11);
LABEL_19:
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021B67E8);
    v15 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "HealthKitWriter: failed to push steadiness sample to HealthKit, error, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B67E8);
      v18 = 138543362;
      v19 = a3;
      v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 16, "HealthKitWriter: failed to push steadiness sample to HealthKit, error, %{public}@", &v18, 12);
      v13 = v17;
      sub_100512490("Generic", 1, 0, 0, "-[CLMobilityHealthKitWriter writeToHealthKitAppleWalkingSteadiness:startDate:endDate:source:]_block_invoke", "%s\n", v16);
      goto LABEL_19;
    }
  }
}

void sub_10142C120(id a1, BOOL a2, NSError *a3)
{
  NSObject *v3;
  double v4;
  uint8_t *v5;
  uint8_t *v6;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  int v11;
  NSError *v12;
  uint8_t buf[4];
  NSError *v14;

  if (a2)
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021B67E8);
    v3 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Successfully pushed WalkingSteadinessEvent sample", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B67E8);
      LOWORD(v11) = 0;
      v4 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "Successfully pushed WalkingSteadinessEvent sample", &v11, 2);
      v6 = v5;
      sub_100512490("Generic", 1, 0, 2, "-[CLMobilityHealthKitWriter writeSteadinessEvent:startDate:endDate:source:]_block_invoke", "%s\n", v4);
LABEL_19:
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021B67E8);
    v8 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to insert WalkingSteadinessEvent sample: %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B67E8);
      v11 = 138543362;
      v12 = a3;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 16, "Failed to insert WalkingSteadinessEvent sample: %{public}@", &v11, 12);
      v6 = v10;
      sub_100512490("Generic", 1, 0, 0, "-[CLMobilityHealthKitWriter writeSteadinessEvent:startDate:endDate:source:]_block_invoke", "%s\n", v9);
      goto LABEL_19;
    }
  }
}

void sub_10142CBEC(uint64_t a1, int a2, std::string::size_type a3)
{
  NSObject *v4;
  std::string *v5;
  uint64_t v6;
  std::string *p_buf;
  std::string *v8;
  std::string *v9;
  NSObject *v11;
  std::string *v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  int v16;
  std::string *v17;
  __int16 v18;
  std::string::size_type v19;
  std::string buf;
  std::string __p[68];

  if (a2)
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021B67C8);
    v4 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEFAULT))
    {
      sub_101081C30(*(_DWORD *)(a1 + 32), __p);
      v5 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? __p
         : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HKDataCollector successfully pushed %s sample", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021B67C8);
      v6 = qword_10229FE98;
      sub_101081C30(*(_DWORD *)(a1 + 32), &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      v16 = 136315138;
      v17 = p_buf;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v6, 0, "HKDataCollector successfully pushed %s sample", (const char *)&v16);
      v9 = v8;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "-[CLMobilityHealthKitWriter _writeToHealthKitType:value:startDate:endDate:metadata:]_block_invoke", "%s\n", (const char *)v9);
LABEL_37:
      if (v9 != __p)
        free(v9);
    }
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021B67C8);
    v11 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
    {
      sub_101081C30(*(_DWORD *)(a1 + 32), __p);
      v12 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? __p
          : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2114;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "HKDataCollector failed to insert a %s sample, error, %{public}@", (uint8_t *)&buf, 0x16u);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021B67C8);
      v13 = qword_10229FE98;
      sub_101081C30(*(_DWORD *)(a1 + 32), &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &buf;
      else
        v14 = (std::string *)buf.__r_.__value_.__r.__words[0];
      v16 = 136315394;
      v17 = v14;
      v18 = 2114;
      v19 = a3;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v13, 16, "HKDataCollector failed to insert a %s sample, error, %{public}@", &v16, 22);
      v9 = v15;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 0, "-[CLMobilityHealthKitWriter _writeToHealthKitType:value:startDate:endDate:metadata:]_block_invoke", "%s\n", (const char *)v9);
      goto LABEL_37;
    }
  }
}

void sub_10142D734(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, 1, 0);
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021B67C8);
    v2 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HealthKitWriter: Data collection completion was nil", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021B67C8);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 1, "HealthKitWriter: Data collection completion was nil", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "-[CLMobilityHealthKitWriter dataCollectorDidRequestCollectionThroughDate:completion:]_block_invoke", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_10142D8F8(id a1)
{
  qword_10229FE98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_10142D924(id a1)
{
  qword_10229FC48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_10142DA24()
{
  uint64_t v0;
  void **v1;
  void *v2;

  v2 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v0 + 12320) = v2;
    operator delete(v2);
  }
  operator delete();
}

id sub_10142DA60(__int128 *a1, void *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  return objc_msgSend(a2, "onResultAvailable:", &v3);
}

uint64_t sub_10142DCC0(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  sub_10142DD0C(a1, a2);
  return a1;
}

void sub_10142DCF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10142DD0C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10142DD48((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 48 * a2;
  }
}

void sub_10142DD48(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      sub_100259694();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_100313718(v4, v11);
    else
      v12 = 0;
    v14 = &v12[48 * v8];
    v15 = &v12[48 * v11];
    v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 3);
        v21 = *((_OWORD *)v18 - 2);
        *(_OWORD *)(v14 - 20) = *(_OWORD *)(v18 - 20);
        *((_OWORD *)v14 - 3) = v20;
        *((_OWORD *)v14 - 2) = v21;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

uint64_t sub_10142DEC4(int *a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  int v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v1 = *a1;
  if (v1 < 0x1B)
    return dword_101CA45B0[v1];
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021B6820);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67109120;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#locctl,#rec,serviceTypeToSiloType,unhandled type,%d", buf, 8u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021B6820);
    v7 = *a1;
    v9[0] = 67109120;
    v9[1] = v7;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#locctl,#rec,serviceTypeToSiloType,unhandled type,%d", v9);
    sub_100512490("Generic", 1, 0, 0, "static CLLocationControllerRecorder_Types::SiloType CLLocationControllerRecorder_Types::Silo::serviceTypeToSiloType(const CLLocationControllerRecorder_Types::ServiceType &)", "%s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
    return 0;
  }
  return result;
}

_QWORD *sub_10142E09C@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  NSObject *v5;
  int v6;
  _QWORD *result;
  int v8;
  char *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  switch(*a1)
  {
    case 0:
      v3 = "Unknown";
      goto LABEL_13;
    case 1:
      v3 = "System";
      goto LABEL_13;
    case 2:
      v3 = "Register";
      goto LABEL_13;
    case 3:
      v3 = "Unregister";
      goto LABEL_13;
    case 4:
      v3 = "Notification";
LABEL_13:
      result = sub_1015A2E04(a2, v3);
      break;
    default:
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021B6820);
      v5 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        v6 = *a1;
        *(_DWORD *)buf = 67109120;
        v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#locctl,#rec,messageTypeToString,unhandled type,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021B6820);
        v8 = *a1;
        v10[0] = 67109120;
        v10[1] = v8;
        v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#locctl,#rec,messageTypeToString,unhandled type,%d", v10);
        sub_100512490("Generic", 1, 0, 0, "std::string CLLocationControllerRecorder_Types::messageTypeToString(const CLLocationControllerRecorder_Types::MessageType &)", "%s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
      result = sub_1015A2E04(a2, "<error>");
      break;
  }
  return result;
}

_QWORD *sub_10142E364@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  _QWORD *result;
  NSObject *v6;
  int v7;
  int v8;
  char *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  switch(*a1)
  {
    case 0:
      v3 = "Unknown";
      goto LABEL_29;
    case 1:
      v3 = "Client";
      goto LABEL_29;
    case 2:
      v3 = "DaemonStatus";
      goto LABEL_29;
    case 3:
      v3 = "ClientManager";
      goto LABEL_29;
    case 4:
      v3 = "WifiService";
      goto LABEL_29;
    case 5:
      v3 = "DataProtectionManager";
      goto LABEL_29;
    case 6:
      v3 = "BluetoothService";
      goto LABEL_29;
    case 7:
      v3 = "CompanionNotifier";
      goto LABEL_29;
    case 8:
      v3 = "MotionState";
      goto LABEL_29;
    case 9:
      v3 = "MotionStateObserver";
      goto LABEL_29;
    case 10:
      v3 = "SignalEnvironmentProvider";
      goto LABEL_29;
    case 11:
      v3 = "TelephonyService";
      goto LABEL_29;
    case 12:
      v3 = "AppMonitor";
      goto LABEL_29;
    case 13:
      v3 = "WifiLocationProvider";
      goto LABEL_29;
    case 14:
      v3 = "CellLocationProvider";
      goto LABEL_29;
    case 15:
      v3 = "GnssLocationProvider";
      goto LABEL_29;
    case 16:
      v3 = "PipelineLocationProvider";
      goto LABEL_29;
    case 17:
      v3 = "Wifi2LocationProvider";
      goto LABEL_29;
    case 18:
      v3 = "AccessoryLocationProvider";
      goto LABEL_29;
    case 19:
      v3 = "SimulatedLocationProvider";
      goto LABEL_29;
    case 20:
      v3 = "LoiLocationProvider";
      goto LABEL_29;
    case 21:
      v3 = "LocationController";
      goto LABEL_29;
    case 22:
      v3 = "OutdoorService";
      goto LABEL_29;
    case 23:
      v3 = "RoutineVisit";
      goto LABEL_29;
    case 24:
      v3 = "InertialOdometry";
      goto LABEL_29;
    case 25:
      v3 = "MotionStateMediator";
      goto LABEL_29;
    case 26:
      v3 = "MapRouteHintService";
LABEL_29:
      result = sub_1015A2E04(a2, v3);
      break;
    default:
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021B6820);
      v6 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        v7 = *a1;
        *(_DWORD *)buf = 67109120;
        v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#locctl,#rec,serviceTypeToString,unhandled type,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021B6820);
        v8 = *a1;
        v10[0] = 67109120;
        v10[1] = v8;
        v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#locctl,#rec,serviceTypeToString,unhandled type,%d", v10);
        sub_100512490("Generic", 1, 0, 0, "std::string CLLocationControllerRecorder_Types::serviceTypeToString(const CLLocationControllerRecorder_Types::ServiceType &)", "%s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
      result = sub_1015A2E04(a2, "<error>");
      break;
  }
  return result;
}

void sub_10142E99C(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_10142E9C8()
{
  operator new();
}

id sub_10142EA10(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus")), "syncgetReachability");
}

BOOL sub_10142EA34()
{
  sub_100197040();
  return (sub_1001B7910() & 0x6000000000000) != 0;
}

uint64_t sub_10142EA54()
{
  unint64_t v0;
  NSObject *v1;
  uint64_t v2;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  sub_100197040();
  v0 = sub_1001B7910();
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v1 = qword_10229FDA8;
  v2 = (v0 >> 49) & 1;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "CLKappaNotifier can detect %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v6[0] = 67240192;
    v6[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "CLKappaNotifier can detect %{public}d", v6, 8);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaNotifier_canDetect()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return v2;
}

uint64_t sub_10142EC0C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10142EC80;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230F0F0 != -1)
    dispatch_once(&qword_10230F0F0, block);
  return qword_102314048;
}

void sub_10142EC80()
{
  operator new();
}

void sub_10142ECC8()
{
  operator delete();
}

void sub_10142ECEC(uint64_t a1, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10142F7F8(a1, "CLKappaNotifier", a2);
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v3 = qword_10229FDA8;
  *(_QWORD *)(a1 + 112) = &off_1021ADC38;
  *(_QWORD *)(a1 + 120) = v3;
  *(_QWORD *)a1 = off_1021B68A0;
  sub_1012E9AB0(a1 + 128, (uint64_t)"idle", (uint64_t)&off_1021ADC38);
  *(_QWORD *)(a1 + 128) = off_1021B6AB8;
  *(_QWORD *)(a1 + 176) = a1;
  sub_1012E9AB0(a1 + 184, (uint64_t)"armed", (uint64_t)&off_1021ADC38);
  *(_QWORD *)(a1 + 184) = off_1021B6B18;
  *(_QWORD *)(a1 + 232) = a1;
  sub_101442D90(a1 + 240, a1);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 310) = 0;
  *(_QWORD *)(a1 + 320) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_WORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 330) = 0;
  *(_QWORD *)(a1 + 336) = off_102141E98;
  v4 = operator new(0x20uLL);
  v4[2] = 0;
  *v4 = off_102141ED0;
  v4[1] = 0;
  *((_DWORD *)v4 + 6) = 31337;
  *(_QWORD *)(a1 + 344) = v4 + 3;
  *(_QWORD *)(a1 + 352) = v4;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 392) = "com.apple.igneous.enableIgneous";
  *(_QWORD *)(a1 + 400) = "com.apple.igneous.disableIgneousWithDelay";
  *(_QWORD *)(a1 + 408) = "com.apple.igneous.enableIgneousWithDelay";
  *(_WORD *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 418) = 0;
  *(_QWORD *)(a1 + 420) = 0x5A000000000;
  sub_1004AD1D8((unsigned __int8 *)&v6, "IgneousMaxMotionTriggerCount", dword_101CA46E0, 0);
  *(_DWORD *)(a1 + 428) = HIDWORD(v6);
  *(_QWORD *)(a1 + 432) = 0x40A7700000000000;
  sub_1018BEA14((unsigned __int8 *)&v6, "IgneousScheduledEnableRenewPeriod", &qword_101CA46E8, 0);
  *(_QWORD *)(a1 + 440) = v7;
  sub_1018BEA14((unsigned __int8 *)&v6, "IgneousCheckSaewEnablementCadence", &qword_101CA46F0, 0);
  *(_QWORD *)(a1 + 448) = v7;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_BYTE *)(a1 + 504) = 14;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 505) = 0;
  *(_BYTE *)(a1 + 520) = 30;
  *(_QWORD *)(a1 + 521) = 0;
  *(_DWORD *)(a1 + 529) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 584) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  sub_1012E9C54((_QWORD *)(a1 + 112), (_QWORD *)(a1 + 128));
  sub_10142F894(a1);
  if (sub_1001FBB04(0))
    operator new();
  if (objc_opt_class(SOSUtilities, v5))
    operator new();
  sub_1005A7F94();
}

void sub_10142F580(_Unwind_Exception *a1)
{
  _QWORD *v1;
  id **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v7 = v1[76];
  v1[76] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *v5;
  *v5 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v1[72];
  v1[72] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v1[71];
  v1[71] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v1[70];
  v1[70] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v1[69];
  v1[69] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v1[68];
  v1[68] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *v4;
  *v4 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v1[62];
  v1[62] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *v3;
  *v3 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_101444CB0(v2, 0);
  sub_100090A0C(v1 + 42);
  v1[30] = off_1021ADC78;
  v17 = (void *)v1[32];
  if (v17)
  {
    v1[33] = v17;
    operator delete(v17);
  }
  v1[23] = off_1021ADC78;
  v18 = (void *)v1[25];
  if (v18)
  {
    v1[26] = v18;
    operator delete(v18);
  }
  v1[16] = off_1021ADC78;
  v19 = (void *)v1[18];
  if (v19)
  {
    v1[19] = v19;
    operator delete(v19);
  }
  sub_101430FA0((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10142F7F8(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021B6C78;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10142F878(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10142F894(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  double v21;
  int v22;
  int v23;
  double v24;
  int v25;
  uint64_t v26;
  _DWORD v27[2];
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  int v33;
  _BYTE v34[10];
  __int16 v35;
  int v36;

  sub_101442FC4(a1);
  sub_10144305C(a1, 0);
  if (qword_10229FFC0 != -1)
    dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
  v2 = qword_10229FFC8;
  if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "initialize Igneous arm status,0", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    LOWORD(v27[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 0, "initialize Igneous arm status,0", v27, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::initIgneousConfig()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v26 = 0;
  v3 = sub_1001FD94C();
  sub_10018A4CC(v3, "CLIgneousArmSessionStartTime", &v26);
  v4 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 944))(v4);
  v25 = -1;
  v5 = sub_1001FD94C();
  sub_1001E4B84(v5, "CLIgneousMaxArmMinutes", &v25);
  v6 = v25;
  if (v25 < 0)
    v6 = 1440;
  *(_DWORD *)(a1 + 424) = v6;
  sub_1004AD1D8(buf, "IgneousMaxArmMinutes", (_DWORD *)(a1 + 424), 0);
  *(_DWORD *)(a1 + 424) = v33;
  v24 = -1.0;
  v7 = sub_1001FD94C();
  sub_1001FD98C(v7, "CLIgneousMaxScheduledArmSec", &v24);
  v8 = v24;
  if (v24 <= -1.0)
    v8 = 3000.0;
  *(double *)(a1 + 432) = v8;
  sub_1018BEA14(buf, "IgneousMaxScheduledArmSec", (_QWORD *)(a1 + 432), 0);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)v34;
  v23 = -1;
  v9 = sub_1001FD94C();
  sub_1001E4B84(v9, "CLIgneousMotionTriggerCount", &v23);
  *(_DWORD *)(a1 + 420) = v23 & ~(v23 >> 31);
  if (qword_10229FFC0 != -1)
    dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
  v10 = qword_10229FFC8;
  if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_DWORD *)(a1 + 424);
    v12 = *(_QWORD *)(a1 + 432);
    v13 = *(_DWORD *)(a1 + 420);
    *(_DWORD *)buf = 67109632;
    v33 = v11;
    *(_WORD *)v34 = 2048;
    *(_QWORD *)&v34[2] = v12;
    v35 = 1024;
    v36 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "initialize Igneous maxArmMin,%d,maxScheduledArmSec,%f,motionTriggerCount,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v16 = *(_DWORD *)(a1 + 424);
    v17 = *(_QWORD *)(a1 + 432);
    v18 = *(_DWORD *)(a1 + 420);
    v27[0] = 67109632;
    v27[1] = v16;
    v28 = 2048;
    v29 = v17;
    v30 = 1024;
    v31 = v18;
    LODWORD(v21) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 0, "initialize Igneous maxArmMin,%d,maxScheduledArmSec,%f,motionTriggerCount,%d", v27, v21, v22);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::initIgneousConfig()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
}

void sub_10142FCBC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLKappaNotifier::onAOP");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6C48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onAOP", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onAOP\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1014343B8(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_10142FE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10142FE8C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLKappaNotifier::onLocation");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6C48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onLocation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onLocation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101434C98(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101430044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101430064(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLKappaNotifier::onPressureBias");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6C48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onPressureBias", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onPressureBias\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1014348A4((char *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10143021C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10143023C(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLKappaNotifier::onSignalEnvironmentNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6C48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101434AD8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1014303F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101430414(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLKappaNotifier::onUserInfoNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6C48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onUserInfoNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onUserInfoNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101435F20(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1014305CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1014305EC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLKappaNotifier::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6C48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101439E34(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1014307A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1014307C4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLKappaNotifier::onMotionStateObserverNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6C48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10143793C((_BYTE *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10143097C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10143099C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLKappaNotifier::onMotionStateUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6C48);
  v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onMotionStateUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v10 = qword_1022A0228;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onMotionStateUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_10143613C(v7, v8, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_101430B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101430B70(uint64_t a1)
{
  sub_101430B78(*(_BYTE **)(a1 + 32));
}

void sub_101430B78(_BYTE *a1)
{
  _BOOL4 v2;
  _BOOL4 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v2 = sub_10143675C(a1);
  v3 = sub_101436B7C(a1);
  v4 = sub_101437070((uint64_t)a1);
  v5 = 0x10000;
  if (!v4)
    v5 = 0;
  v6 = 256;
  if (!v3)
    v6 = 0;
  sub_10143755C((uint64_t)a1, v6 | v2 | v5);
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v7 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    v8 = a1[328];
    *(_DWORD *)buf = 67109120;
    v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "timeout fClientArmedRemotely %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v9 = a1[328];
    v12[0] = 67109120;
    v12[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "timeout fClientArmedRemotely %d", v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onSlowTimer()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (a1[328])
    sub_101437B8C((uint64_t)a1);
}

void sub_101430D80(uint64_t a1)
{
  sub_101438B60(*(_QWORD *)(a1 + 32));
}

void sub_101430D88(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("Self::onDaemonStatus");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6C48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: Self::onDaemonStatus", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Self::onDaemonStatus\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1014363A4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101430F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_101430F60(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021ADC78;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_101430FA0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B6C78;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_101431014(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  *(_QWORD *)a1 = off_1021B68A0;
  sub_1014311C8(a1);
  v2 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 608) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 568) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 536) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 496) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_101444CB0((id **)(a1 + 360), 0);
  sub_100090A0C((_QWORD *)(a1 + 336));
  *(_QWORD *)(a1 + 240) = off_1021ADC78;
  v12 = *(void **)(a1 + 256);
  if (v12)
  {
    *(_QWORD *)(a1 + 264) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(a1 + 184) = off_1021ADC78;
  v13 = *(void **)(a1 + 200);
  if (v13)
  {
    *(_QWORD *)(a1 + 208) = v13;
    operator delete(v13);
  }
  *(_QWORD *)(a1 + 128) = off_1021ADC78;
  v14 = *(void **)(a1 + 144);
  if (v14)
  {
    *(_QWORD *)(a1 + 152) = v14;
    operator delete(v14);
  }
  return sub_101430FA0(a1);
}

void sub_1014311A4(uint64_t a1)
{
  sub_101431014(a1);
  operator delete();
}

void sub_1014311C8(uint64_t a1)
{
  uint64_t v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 496) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8), 0);
  if (sub_1001FBB04(0))
  {
    v2 = sub_1001FBB04(0);
    sub_1000A4A6C(v2, 29, *(_QWORD *)(a1 + 488));
    *(_QWORD *)(a1 + 488) = 0;
  }
  *(_BYTE *)(a1 + 108) = 1;
}

_QWORD *sub_101431220@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_101431298()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  id v21;
  NSObject *v22;
  char v23;
  NSObject *v24;
  id v25;
  id v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  id v37;
  id v38;
  _WORD v39[8];
  _QWORD v40[2];
  __int128 v41;
  __int128 v42;
  _BYTE v43[28];
  uint8_t buf[1632];

  v41 = xmmword_101CA46F8;
  v42 = unk_101CA4708;
  *(_OWORD *)v43 = xmmword_101CA4718;
  *(_OWORD *)&v43[12] = *(__int128 *)((char *)&xmmword_101CA4718 + 12);
  sub_100119F3C(v40);
  v0 = sub_1001FD94C();
  if (sub_100006BB4(v0, "Kappa", v40))
  {
    v1 = (void *)sub_10011A5AC((uint64_t)v40);
    v2 = objc_msgSend(v1, "valueForKey:", CFSTR("coupled"));
    v3 = objc_msgSend(v1, "valueForKey:", CFSTR("uncoupled"));
    v4 = objc_msgSend(v1, "valueForKey:", CFSTR("skiLiftWindowSec"));
    v5 = objc_msgSend(v1, "valueForKey:", CFSTR("mPlanarMaxRMSThreshold"));
    v6 = objc_msgSend(v1, "valueForKey:", CFSTR("mPlanarEnergyThreshold"));
    v7 = objc_msgSend(v1, "valueForKey:", CFSTR("mPlanarChaosThreshold"));
    v8 = objc_msgSend(v1, "valueForKey:", CFSTR("mPlanarSaturationThreshold"));
    v9 = objc_msgSend(v1, "valueForKey:", CFSTR("mRolloverMaxRMSThreshold"));
    v10 = objc_msgSend(v1, "valueForKey:", CFSTR("mRolloverEnergyThreshold"));
    v38 = objc_msgSend(v1, "valueForKey:", CFSTR("mRolloverChaosThreshold"));
    v37 = objc_msgSend(v1, "valueForKey:", CFSTR("mRolloverSaturationThreshold"));
    if (v2)
    {
      objc_msgSend(v2, "floatValue");
      DWORD1(v41) = v11;
    }
    if (v3)
    {
      objc_msgSend(v3, "floatValue");
      DWORD2(v41) = v12;
    }
    if (v4)
      WORD6(v41) = (unsigned __int16)objc_msgSend(v4, "unsignedShortValue");
    if (v5)
    {
      objc_msgSend(v5, "floatValue");
      HIDWORD(v42) = v13;
    }
    if (v6)
    {
      objc_msgSend(v6, "floatValue");
      *(_DWORD *)v43 = v14;
    }
    if (v7)
    {
      objc_msgSend(v7, "floatValue");
      *(_DWORD *)&v43[4] = v15;
    }
    if (v8)
    {
      objc_msgSend(v8, "floatValue");
      *(_DWORD *)&v43[8] = v16;
    }
    if (v9)
    {
      objc_msgSend(v9, "floatValue");
      *(_DWORD *)&v43[12] = v17;
    }
    if (v10)
    {
      objc_msgSend(v10, "floatValue");
      *(_DWORD *)&v43[16] = v18;
    }
    if (v38)
    {
      objc_msgSend(v38, "floatValue");
      *(_DWORD *)&v43[20] = v19;
    }
    if (v37)
    {
      objc_msgSend(v37, "floatValue");
      *(_DWORD *)&v43[24] = v20;
    }
    v21 = objc_msgSend(v1, "valueForKey:", CFSTR("kill"));
    if (v21 && objc_msgSend(v21, "BOOLValue"))
    {
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v22 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "kill config", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v39[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 16, "kill config", v39, 2);
        v36 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 0, "void CLKappaNotifier::configureAOP() const", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      v23 = 0;
      LOBYTE(v41) = 0;
    }
    else
    {
      v23 = 1;
    }
    v25 = objc_msgSend(v1, "valueForKey:", CFSTR("martyImpactThreshold"));
    v26 = objc_msgSend(v1, "valueForKey:", CFSTR("martyRotationThreshold"));
    if (v25)
    {
      objc_msgSend(v25, "floatValue");
      LODWORD(v42) = v27;
    }
    if (v26)
    {
      objc_msgSend(v26, "floatValue");
      DWORD1(v42) = v28;
    }
  }
  else
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v24 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "using default config", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v39[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "using default config", v39, 2);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::configureAOP() const", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
    v23 = 1;
  }
  DWORD2(v42) = sub_101431868();
  v30 = objc_opt_class(SOSUtilities, v29);
  if (v30)
  {
    v30 = (uint64_t)+[SOSUtilities isKappaVisible](SOSUtilities, "isKappaVisible");
    v31 = v23 & v30;
  }
  else
  {
    v31 = 0;
  }
  LOBYTE(v41) = v31;
  sub_1001FBA94(v30, 0, &v41, 0x3CuLL);
  return sub_10011A5A8(v40);
}

void sub_101431808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

float sub_101431868()
{
  uint64_t v0;
  double v1;
  double v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  double v7;
  int v8;
  double v9;
  uint8_t buf[4];
  _BYTE v11[12];

  v7 = -1.0;
  v0 = sub_1001FD94C();
  sub_1001FD98C(v0, "CLIgneousMotionTriggerProbability", &v7);
  v1 = v7;
  if (v7 <= -1.0)
    v1 = 0.0;
  v7 = v1;
  sub_1018BEA14(buf, "IgneousMotionTriggerProbability", &v7, 0);
  v2 = *(double *)&v11[4];
  v7 = *(double *)&v11[4];
  if (*(double *)&v11[4] > 1.0 || *(double *)&v11[4] < 0.0)
  {
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v3 = qword_10229FFC8;
    if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "invalid motion trigger probability %f, ignoring", buf, 0xCu);
    }
    v2 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v8 = 134217984;
      v9 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 17, "invalid motion trigger probability %f, ignoring", COERCE_DOUBLE(&v8));
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "float CLKappaNotifier::retrieveIgneousMotionTriggerProbability() const", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  return v2;
}

void sub_101431A88(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  NSObject *v16;
  double v17;
  uint8_t *v18;
  uint8_t *v19;
  NSObject *v20;
  double v21;
  uint8_t *v22;
  NSObject *v23;
  __int16 v24;
  int v25;
  int v26;
  __int16 v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  uint8_t *v31;
  const void *v32;
  uint64_t v33;
  _BYTE v34[12];
  int v35;
  int v36;
  int v37;
  int v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  unsigned __int8 *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v3 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    v4 = a2[1];
    v5 = a2[2];
    v6 = a2[3];
    v7 = a2[4];
    v8 = a2[7];
    v9 = a2[5];
    v10 = a2[6];
    *(_DWORD *)buf = 67111168;
    v40 = 8;
    v41 = 2048;
    v42 = a2;
    v43 = 1024;
    v44 = v4;
    v45 = 1024;
    v46 = v5;
    v47 = 1024;
    v48 = v6;
    v49 = 1024;
    v50 = v7;
    v51 = 1024;
    v52 = v8;
    v53 = 1024;
    v54 = v9;
    v55 = 1024;
    v56 = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "kCompanionCollect %d %p %d %d %d %d/%d %d %d", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v24 = a2[2];
    v25 = a2[3];
    v26 = a2[4];
    v27 = a2[5];
    v28 = a2[6];
    *(_WORD *)v34 = 2048;
    *(_QWORD *)&v34[2] = a2;
    *(_WORD *)&v34[10] = 1024;
    LOWORD(v35) = 1024;
    HIWORD(v35) = v24;
    LOWORD(v36) = HIWORD(v26);
    HIWORD(v36) = 1024;
    LOWORD(v37) = 1024;
    HIWORD(v37) = v27;
    v38 = v28;
    LODWORD(v32) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "kCompanionCollect %d %p %d %d %d %d/%d %d %d", &v33, v32, 67111168, *(_DWORD *)v34, *(_DWORD *)&v34[8], v35, v25, v36, v37);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::armSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  if (a2[3])
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v11 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
    {
      v12 = a2[7];
      *(_DWORD *)buf = 67109120;
      v40 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "arming marty %d", buf, 8u);
    }
    v13 = sub_1001BFF7C(115, 2);
    if (!(_DWORD)v13)
      goto LABEL_21;
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "arming marty %d", &v33);
LABEL_58:
    v31 = (uint8_t *)v14;
    v13 = sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::armSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n", v14);
    if (v31 != buf)
      free(v31);
LABEL_21:
    sub_1001FBA94(v13, 2, a2, 8uLL);
    return;
  }
  if (a2[5])
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v15 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "arming igneous", buf, 2u);
    }
    v13 = sub_1001BFF7C(115, 2);
    if (!(_DWORD)v13)
      goto LABEL_21;
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    LOWORD(v33) = 0;
    LODWORD(v32) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "arming igneous", &v33, v32, v33);
    goto LABEL_58;
  }
  if (sub_10142EA54())
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v16 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "I can arm myself", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "I can arm myself", &v33, v32);
      v19 = v18;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::armSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n", v17);
LABEL_41:
      if (v19 != buf)
        free(v19);
    }
  }
  else
  {
    sub_100197040();
    if ((sub_1001B7910() & 0x4000000000000) != 0)
    {
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v23 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "arming kappa", buf, 2u);
      }
      v13 = sub_1001BFF7C(115, 2);
      if (!(_DWORD)v13)
        goto LABEL_21;
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "arming kappa", &v33, v32, v33);
      goto LABEL_58;
    }
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v20 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "kCompanionCollect unexpected", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 17, "kCompanionCollect unexpected", &v33, v32);
      v19 = v22;
      sub_100512490("Generic", 1, 0, 0, "void CLKappaNotifier::armSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n", v21);
      goto LABEL_41;
    }
  }
}

void sub_101432248(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  NSObject *v16;
  double v17;
  uint8_t *v18;
  uint8_t *v19;
  NSObject *v20;
  double v21;
  uint8_t *v22;
  NSObject *v23;
  __int16 v24;
  int v25;
  int v26;
  __int16 v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  uint8_t *v31;
  const void *v32;
  uint64_t v33;
  _BYTE v34[12];
  int v35;
  int v36;
  int v37;
  int v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  unsigned __int8 *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v3 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    v4 = a2[1];
    v5 = a2[2];
    v6 = a2[3];
    v7 = a2[4];
    v8 = a2[7];
    v9 = a2[5];
    v10 = a2[6];
    *(_DWORD *)buf = 67111168;
    v40 = 8;
    v41 = 2048;
    v42 = a2;
    v43 = 1024;
    v44 = v4;
    v45 = 1024;
    v46 = v5;
    v47 = 1024;
    v48 = v6;
    v49 = 1024;
    v50 = v7;
    v51 = 1024;
    v52 = v8;
    v53 = 1024;
    v54 = v9;
    v55 = 1024;
    v56 = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "kCompanionStop %d %p %d %d %d %d/%d %d %d", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v24 = a2[2];
    v25 = a2[3];
    v26 = a2[4];
    v27 = a2[5];
    v28 = a2[6];
    *(_WORD *)v34 = 2048;
    *(_QWORD *)&v34[2] = a2;
    *(_WORD *)&v34[10] = 1024;
    LOWORD(v35) = 1024;
    HIWORD(v35) = v24;
    LOWORD(v36) = HIWORD(v26);
    HIWORD(v36) = 1024;
    LOWORD(v37) = 1024;
    HIWORD(v37) = v27;
    v38 = v28;
    LODWORD(v32) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "kCompanionStop %d %p %d %d %d %d/%d %d %d", &v33, v32, 67111168, *(_DWORD *)v34, *(_DWORD *)&v34[8], v35, v25, v36, v37);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::disarmSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  if (a2[3])
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v11 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
    {
      v12 = a2[7];
      *(_DWORD *)buf = 67109120;
      v40 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "disarming marty %d", buf, 8u);
    }
    v13 = sub_1001BFF7C(115, 2);
    if (!(_DWORD)v13)
      goto LABEL_21;
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "disarming marty %d", &v33);
LABEL_58:
    v31 = (uint8_t *)v14;
    v13 = sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::disarmSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n", v14);
    if (v31 != buf)
      free(v31);
LABEL_21:
    sub_1001FBA94(v13, 2, a2, 8uLL);
    return;
  }
  if (a2[5])
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v15 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "disarming igneous", buf, 2u);
    }
    v13 = sub_1001BFF7C(115, 2);
    if (!(_DWORD)v13)
      goto LABEL_21;
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    LOWORD(v33) = 0;
    LODWORD(v32) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "disarming igneous", &v33, v32, v33);
    goto LABEL_58;
  }
  if (sub_10142EA54())
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v16 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "I can disarm myself", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "I can disarm myself", &v33, v32);
      v19 = v18;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::disarmSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n", v17);
LABEL_41:
      if (v19 != buf)
        free(v19);
    }
  }
  else
  {
    sub_100197040();
    if ((sub_1001B7910() & 0x4000000000000) != 0)
    {
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v23 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "disarming", buf, 2u);
      }
      v13 = sub_1001BFF7C(115, 2);
      if (!(_DWORD)v13)
        goto LABEL_21;
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "disarming", &v33, v32, v33);
      goto LABEL_58;
    }
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v20 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Unexpected message", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 17, "Unexpected message", &v33, v32);
      v19 = v22;
      sub_100512490("Generic", 1, 0, 0, "void CLKappaNotifier::disarmSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n", v21);
      goto LABEL_41;
    }
  }
}

void sub_101432A08(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  NSObject *v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v8;
  int v9;
  int v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  uint8_t *v19;
  _QWORD v20[4];
  int v21;
  char v22;
  int v23;
  int v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  int v30;

  v3 = *a2;
  switch(v3)
  {
    case 1:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v8 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        v28 = 1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "arming for client %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v23 = 67109120;
        v24 = 1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "arming for client %d", &v23);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
      v9 = 24;
      goto LABEL_26;
    case 2:
      v10 = a2[1];
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v11 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        v28 = 2;
        v29 = 1024;
        v30 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "arming for client %d %d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v23 = 67109376;
        v24 = 2;
        v25 = 1024;
        v26 = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "arming for client %d %d", &v23, 14);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      if (v10)
        v9 = 28;
      else
        v9 = 26;
LABEL_26:
      if (sub_10142EA54())
      {
        v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLCompanionNotifier"));
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_101432FF4;
        v20[3] = &unk_10217A960;
        v22 = v3;
        v21 = v9;
        objc_msgSend(v12, "doAsync:", v20);
      }
      return;
    case 4:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v4 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "not forwarding igneous arming", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        LOWORD(v23) = 0;
        v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "not forwarding igneous arming", &v23, 2);
        v7 = v6;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)", "%s\n", v5);
LABEL_45:
        if (v7 != buf)
          free(v7);
      }
      break;
    default:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v13 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "unexpected message", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        LOWORD(v23) = 0;
        v18 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 17, "unexpected message", &v23, 2);
        v7 = v19;
        sub_100512490("Generic", 1, 0, 0, "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)", "%s\n", v18);
        goto LABEL_45;
      }
      break;
  }
}

id sub_101432FF4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v4 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    v5 = *(unsigned __int8 *)(a1 + 36);
    v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)buf = 67109376;
    v16 = v5;
    v17 = 1024;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "tell the companion to collect for %d msgType %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v8 = *(unsigned __int8 *)(a1 + 36);
    v9 = *(_DWORD *)(a1 + 32);
    v12[0] = 67109376;
    v12[1] = v8;
    v13 = 1024;
    v14 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "tell the companion to collect for %d msgType %d", v12, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return sub_10061F764(120.0, a2, *(_DWORD *)(a1 + 32), 0, 300, 1, 0, 0, 0, 0);
}

void sub_1014331F8(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  NSObject *v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v8;
  int v9;
  int v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  uint8_t *v19;
  _QWORD v20[4];
  int v21;
  char v22;
  int v23;
  int v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  int v30;

  v3 = *a2;
  switch(v3)
  {
    case 1:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v8 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        v28 = 1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "disarming for client %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v23 = 67109120;
        v24 = 1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "disarming for client %d", &v23);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
      v9 = 25;
      goto LABEL_26;
    case 2:
      v10 = a2[1];
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v11 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        v28 = 2;
        v29 = 1024;
        v30 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "disarming for client %d %d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v23 = 67109376;
        v24 = 2;
        v25 = 1024;
        v26 = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "disarming for client %d %d", &v23, 14);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      if (v10)
        v9 = 29;
      else
        v9 = 27;
LABEL_26:
      if (sub_10142EA54())
      {
        v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLCompanionNotifier"));
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_1014337E4;
        v20[3] = &unk_10217A960;
        v22 = v3;
        v21 = v9;
        objc_msgSend(v12, "doAsync:", v20);
      }
      return;
    case 4:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v4 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "not forwarding igneous disarming", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        LOWORD(v23) = 0;
        v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "not forwarding igneous disarming", &v23, 2);
        v7 = v6;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)", "%s\n", v5);
LABEL_45:
        if (v7 != buf)
          free(v7);
      }
      break;
    default:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v13 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "unexpected message", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        LOWORD(v23) = 0;
        v18 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 17, "unexpected message", &v23, 2);
        v7 = v19;
        sub_100512490("Generic", 1, 0, 0, "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)", "%s\n", v18);
        goto LABEL_45;
      }
      break;
  }
}

id sub_1014337E4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v4 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    v5 = *(unsigned __int8 *)(a1 + 36);
    v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)buf = 67109376;
    v16 = v5;
    v17 = 1024;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "tell the companion to stop collecting for %d msgType %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v8 = *(unsigned __int8 *)(a1 + 36);
    v9 = *(_DWORD *)(a1 + 32);
    v12[0] = 67109376;
    v12[1] = v8;
    v13 = 1024;
    v14 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "tell the companion to stop collecting for %d msgType %d", v12, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return sub_10061F764(120.0, a2, *(_DWORD *)(a1 + 32), 0, 300, 1, 0, 0, 0, 0);
}

void sub_1014339E8(uint64_t a1, _BYTE *a2)
{
  int v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  BOOL v8;
  int v9;
  id v10;
  NSObject *v11;
  uint8_t *v12;
  _QWORD v13[5];
  int v14;
  _WORD v15[8];
  uint8_t buf[1640];

  if (*a2 != 2)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v6 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "unexpected client mode", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 17, "unexpected client mode", v15, 2);
      goto LABEL_38;
    }
    return;
  }
  v3 = a2[2];
  if (a2[1] == v3)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v4 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "invald mode switch", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 17, "invald mode switch", v15, 2);
LABEL_38:
      v12 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLKappaNotifier::tellCompanionToMartyModeSwitch(CMMotionCoprocessorReply::SafetyMartyModeSwitch *)", "%s\n", v5);
      if (v12 != buf)
        free(v12);
      return;
    }
    return;
  }
  if (a2[1])
    v8 = 1;
  else
    v8 = v3 == 0;
  if (!v8)
  {
    v9 = 28;
    goto LABEL_25;
  }
  if (a2[1] && !a2[2])
  {
    v9 = 26;
LABEL_25:
    if (sub_10142EA54())
    {
      v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLCompanionNotifier"));
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_101433DB4;
      v13[3] = &unk_102174CF8;
      v13[4] = a2;
      v14 = v9;
      objc_msgSend(v10, "doAsync:", v13);
    }
    return;
  }
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v11 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "invalid settings", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 17, "invalid settings", v15, 2);
    goto LABEL_38;
  }
}

id sub_101433DB4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v4 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    v5 = **(unsigned __int8 **)(a1 + 32);
    v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109376;
    v16 = v5;
    v17 = 1024;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "tell the companion to stop collecting for %d msgType %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v8 = **(unsigned __int8 **)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v12[0] = 67109376;
    v12[1] = v8;
    v13 = 1024;
    v14 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "tell the companion to stop collecting for %d msgType %d", v12, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToMartyModeSwitch(CMMotionCoprocessorReply::SafetyMartyModeSwitch *)_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return sub_10061F764(120.0, a2, *(_DWORD *)(a1 + 40), 0, 300, 1, 0, 0, 0, 0);
}

void sub_101433FC0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  void **v14;
  uint64_t v15;
  NSDictionary *(*v16)(uint64_t);
  void *v17;
  double v18;
  double v19;
  __int16 v20;
  BOOL v21;
  BOOL v22;
  double v23;
  int v24;
  double v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _BOOL4 v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  int v37;
  __int16 v38;
  _BOOL4 v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;

  if (*(_BYTE *)a2 == 4)
  {
    v2 = *(unsigned __int16 *)(a2 + 2);
    v23 = 0.0;
    v22 = 0;
    v3 = sub_1001FD94C();
    sub_1001FD98C(v3, "CLIgneousArmSessionStartTime", &v23);
    v4 = sub_1001FD94C();
    sub_1001E4874(v4, "CLIgneousArmSessionIsCharging", &v22);
    if (v23 != 0.0)
    {
      v5 = (v23 - floor(v23 / 86400.0) * 86400.0) / 60.0;
      v6 = (CFAbsoluteTimeGetCurrent() - v23) / 60.0;
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v7 = round(v5);
      v8 = round(v6);
      v9 = qword_10229FFC8;
      if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134219008;
        v35 = v23;
        v36 = 1024;
        v37 = (int)v7;
        v38 = 1024;
        v39 = v22;
        v40 = 1024;
        v41 = (int)v8;
        v42 = 1024;
        v43 = v2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "send Igneous analytics,startTime,%f,startTimeInMin,%d,isCharging,%d,sessionDurationInMin,%d,numMotionTrigger,%u", buf, 0x24u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFC0 != -1)
          dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
        v24 = 134219008;
        v25 = v23;
        v26 = 1024;
        v27 = (int)v7;
        v28 = 1024;
        v29 = v22;
        v30 = 1024;
        v31 = (int)v8;
        v32 = 1024;
        v33 = v2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 2, "send Igneous analytics,startTime,%f,startTimeInMin,%d,isCharging,%d,sessionDurationInMin,%d,numMotionTrigger,%u", COERCE_DOUBLE(&v24), 36, (_DWORD)v14, v15, (_DWORD)v16);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::sendAnalyticsEventIgneous(CMMotionCoprocessorReply::SafetyDisarmClient *)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      v14 = _NSConcreteStackBlock;
      v15 = 3221225472;
      v16 = sub_1014342D4;
      v17 = &unk_1021B6970;
      v21 = v22;
      v18 = v7;
      v19 = v8;
      v20 = v2;
      AnalyticsSendEventLazy(CFSTR("com.apple.Motion.IgneousArmSession"), &v14);
      v23 = 0.0;
      v10 = sub_1001FD94C();
      sub_10018A4CC(v10, "CLIgneousArmSessionStartTime", &v23);
      v11 = sub_1001FD94C();
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 944))(v11);
    }
  }
}

NSDictionary *sub_1014342D4(uint64_t a1)
{
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("startTime");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(a1 + 32));
  v3[1] = CFSTR("isCharging");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 50));
  v3[2] = CFSTR("sessionDuration");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(a1 + 40));
  v3[3] = CFSTR("numMotionTrigger");
  v4[3] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 48));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

void sub_1014343B8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  switch(*(_BYTE *)(a2 + 1))
  {
    case 0:
      sub_1012E9D50(a1 + 112, 1, a2 + 2);
      return;
    case 1:
      sub_1012E9D50(a1 + 112, 2, a2 + 2);
      return;
    case 2:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v4 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "received arm client from AOP", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v16[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "received arm client from AOP", v16, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onAOP(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      v5 = a1 + 112;
      v6 = a2 + 2;
      v7 = 11;
      goto LABEL_22;
    case 3:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v8 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "received disarm client from AOP", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v16[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "received disarm client from AOP", v16, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onAOP(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      v5 = a1 + 112;
      v6 = a2 + 2;
      v7 = 12;
      goto LABEL_22;
    case 4:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v9 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "received marty mode switch from AOP", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v16[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "received marty mode switch from AOP", v16, 2);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onAOP(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
      v5 = a1 + 112;
      v6 = a2 + 2;
      v7 = 13;
LABEL_22:
      sub_1012E9D50(v5, v7, v6);
      break;
    case 5:
      sub_1012E9D50(a1 + 112, 3, 0);
      break;
    default:
      return;
  }
}

char *sub_1014348A4(char *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  float *v6;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  int v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;

  if (!*a3)
  {
    v4 = result;
    *(_OWORD *)(result + 504) = *(_OWORD *)a4;
    v5 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(result + 525) = *(_QWORD *)(a4 + 21);
    *((_QWORD *)result + 65) = v5;
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v6 = (float *)(v4 + 521);
    v7 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
    {
      v8 = *v6;
      v9 = *(float *)(v4 + 525);
      v10 = *(float *)(v4 + 529);
      *(_DWORD *)buf = 134218496;
      v24 = v8;
      v25 = 2048;
      v26 = v9;
      v27 = 2048;
      v28 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "PressureInertialFit,x,%f,y,%f,z,%f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v11 = *v6;
      v12 = *(float *)(v4 + 525);
      v13 = *(float *)(v4 + 529);
      v17 = 134218496;
      v18 = v11;
      v19 = 2048;
      v20 = v12;
      v21 = 2048;
      v22 = v13;
      LODWORD(v16) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "PressureInertialFit,x,%f,y,%f,z,%f", COERCE_DOUBLE(&v17), v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    return (char *)objc_msgSend(*(id *)(*((_QWORD *)v4 + 62) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v4 + 62) + 8), 0);
  }
  return result;
}

void sub_101434AD8(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!*a3)
  {
    *(_DWORD *)(a1 + 592) = *a4;
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v5 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *a4;
      *(_DWORD *)buf = 67109120;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "signal environment %u", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v7 = *a4;
      v10[0] = 67109120;
      v10[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "signal environment %u", v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onSignalEnvironmentNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_101434C98(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  double Current;
  double v17;
  double v18;
  NSObject *v19;
  _BOOL4 v21;
  double v22;
  float v23;
  float64x2_t v24;
  float v25;
  float v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  NSObject *v40;
  int v41;
  int v42;
  const char *v43;
  char *v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id *v49;
  double v50;
  double v51;
  float v52;
  unint64_t *v53;
  unint64_t v54;
  double v55;
  NSObject *v56;
  uint64_t v57;
  double v58;
  NSObject *v59;
  const char *v60;
  _BOOL4 v62;
  double v63;
  const char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  const char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  char *v74;
  uint64_t v75;
  const char *v76;
  char *v77;
  double v78;
  double v79;
  void **v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t *, uint64_t);
  void *v83;
  double v84;
  double v85;
  std::__shared_weak_count *v86;
  _BYTE v87[20];
  float v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  float v92;
  int v93;
  float v94;
  int v95;
  _OWORD v96[8];
  _OWORD v97[2];
  int v98;
  _BYTE v99[20];
  _BYTE v100[14];
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  int v112;
  __int16 v113;
  double v114;
  __int16 v115;
  int v116;
  _BYTE buf[24];
  _BYTE v118[14];
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  int v130;
  __int16 v131;
  double v132;
  __int16 v133;
  int v134;

  if (*a3 != 5 && *a3 != 0)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v40 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_ERROR))
    {
      v41 = *a3;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v41;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Unhandled location notification %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v42 = *a3;
      v98 = 67240192;
      *(_DWORD *)v99 = v42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 16, "Unhandled location notification %{public}d", &v98, 8);
      v44 = (char *)v43;
      sub_100512490("Generic", 1, 0, 0, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v43);
LABEL_43:
      if (v44 != buf)
        free(v44);
      return;
    }
    return;
  }
  if (!sub_100182290(a4))
    return;
  v8 = *(_OWORD *)(a4 + 96);
  v9 = *(_OWORD *)(a4 + 128);
  v96[7] = *(_OWORD *)(a4 + 112);
  v97[0] = v9;
  *(_OWORD *)((char *)v97 + 12) = *(_OWORD *)(a4 + 140);
  v10 = *(_OWORD *)(a4 + 32);
  v11 = *(_OWORD *)(a4 + 64);
  v12 = *(_OWORD *)(a4 + 80);
  v96[3] = *(_OWORD *)(a4 + 48);
  v96[4] = v11;
  v96[5] = v12;
  v96[6] = v8;
  v13 = *(_OWORD *)(a4 + 16);
  v96[0] = *(_OWORD *)a4;
  v96[1] = v13;
  v96[2] = v10;
  v14 = sub_100162654((uint64_t)v96, *(double *)(a4 + 936));
  v15 = *(_DWORD *)(a4 + 96);
  Current = CFAbsoluteTimeGetCurrent();
  v17 = *(double *)(a4 + 76);
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v18 = Current - v17;
  v19 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    v21 = v14 == 1 || v15 == 3;
    v22 = *(double *)(a4 + 52);
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&buf[4] = v21;
    *(_WORD *)&buf[8] = 2048;
    *(double *)&buf[10] = v22;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v22 > 0.0;
    *(_WORD *)v118 = 1024;
    *(_DWORD *)&v118[2] = v22 <= 4.0;
    *(_WORD *)&v118[6] = 1024;
    *(_DWORD *)&v118[8] = v18 >= 0.0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "GPS filter %d %f %d %d %d", buf, 0x24u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v62 = v14 == 1 || v15 == 3;
    v63 = *(double *)(a4 + 52);
    v98 = 67110144;
    *(_DWORD *)v99 = v62;
    *(_WORD *)&v99[4] = 2048;
    *(double *)&v99[6] = v63;
    *(_WORD *)&v99[14] = 1024;
    *(_DWORD *)&v99[16] = v63 > 0.0;
    *(_WORD *)v100 = 1024;
    *(_DWORD *)&v100[2] = v63 <= 4.0;
    *(_WORD *)&v100[6] = 1024;
    *(_DWORD *)&v100[8] = v18 >= 0.0;
    LODWORD(v78) = 36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "GPS filter %d %f %d %d %d", &v98, v78, LODWORD(v79), (_DWORD)v80, v81);
    v65 = (char *)v64;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v64);
    if (v65 != buf)
      free(v65);
  }
  sub_1018BF25C(buf, "KappaFilterGPS", (unsigned __int8 *)&unk_101CA4981, 0);
  if (!buf[1]
    || v15 == 3 && v18 >= 0.0
    || v14 == 1 && (v58 = *(double *)(a4 + 52), v58 > 0.0) && v58 <= 4.0 && v18 >= 0.0)
  {
    v23 = *(double *)(a4 + 44);
    if (v23 > 31.293)
      v23 = 31.293;
    *(float *)v87 = v23;
    v24.f64[0] = *(float64_t *)(a4 + 68);
    v24.f64[1] = *(float64_t *)(a4 + 4);
    *(float32x4_t *)&v87[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a4 + 52)), v24);
    v25 = *(double *)(a4 + 12);
    v88 = v25;
    v89 = *(_QWORD *)(a4 + 248);
    v90 = *(_DWORD *)(a1 + 592);
    v91 = (unint64_t)(v18 * 1000000.0);
    v26 = *(double *)(a4 + 20);
    v92 = v26;
    v93 = *(_DWORD *)(a4 + 784);
    v94 = *(float *)(a4 + 788);
    v95 = *(_DWORD *)(a4 + 96);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v27 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      v28 = *(_QWORD *)(a4 + 76);
      v29 = *a3;
      *(_DWORD *)buf = 134220800;
      *(_QWORD *)&buf[4] = v28;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v91;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)v118 = v29;
      *(_WORD *)&v118[4] = 2048;
      *(double *)&v118[6] = *(float *)v87;
      v119 = 2048;
      v120 = *(float *)&v87[4];
      v121 = 2048;
      v122 = *(float *)&v87[8];
      v123 = 2048;
      v124 = *(float *)&v87[16];
      v125 = 2048;
      v126 = v88;
      v127 = 2048;
      v128 = v92;
      v129 = 1024;
      v130 = v93;
      v131 = 2048;
      v132 = v94;
      v133 = 1024;
      v134 = v95;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "GPS timestamp %.6f, delta %llu, notify(type) = %u, speed = %f accuracy = %f course = %f lat(tr) = %f long(tr) = %f horAcc = %f dem %d conf %f type %d", buf, 0x6Eu);
    }
    v30 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v30)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v66 = *(_QWORD *)(a4 + 76);
      v67 = *a3;
      v98 = 134220800;
      *(_QWORD *)v99 = v66;
      *(_WORD *)&v99[8] = 2048;
      *(_QWORD *)&v99[10] = v91;
      *(_WORD *)&v99[18] = 1024;
      *(_DWORD *)v100 = v67;
      *(_WORD *)&v100[4] = 2048;
      *(double *)&v100[6] = *(float *)v87;
      v101 = 2048;
      v102 = *(float *)&v87[4];
      v103 = 2048;
      v104 = *(float *)&v87[8];
      v105 = 2048;
      v106 = *(float *)&v87[16];
      v107 = 2048;
      v108 = v88;
      v109 = 2048;
      v110 = v92;
      v111 = 1024;
      v112 = v93;
      v113 = 2048;
      v114 = v94;
      v115 = 1024;
      v116 = v95;
      LODWORD(v78) = 110;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "GPS timestamp %.6f, delta %llu, notify(type) = %u, speed = %f accuracy = %f course = %f lat(tr) = %f long(tr) = %f horAcc = %f dem %d conf %f type %d", COERCE_DOUBLE(&v98), *(_QWORD *)&v78, LODWORD(v79), *(double *)&v80, *(double *)&v81, *(double *)&v82, *(double *)&v83, v84, v85, (_DWORD)v86,
        *(double *)v87,
        *(_DWORD *)&v87[8]);
      v69 = (char *)v68;
      v30 = sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v68);
      if (v69 != buf)
        free(v69);
    }
    sub_1001FBA94(v30, 4, v87, 0x40uLL);
  }
  if (!sub_1012E9C1C(a1 + 112, a1 + 240) || *(_QWORD *)(a1 + 384) || (*(_DWORD *)(a4 + 96) & 0xFFFFFFF7) == 1)
  {
    sub_100119F3C(v87);
    v31 = sub_1001FD94C();
    sub_100006BB4(v31, "Kappa", v87);
    v32 = (void *)sub_10011A5AC((uint64_t)v87);
    v33 = objc_msgSend(v32, "valueForKey:", CFSTR("roadHorizontalAccuracy"));
    v34 = objc_msgSend(v32, "valueForKey:", CFSTR("roadSearchRadius"));
    v35 = v34;
    if (v33)
    {
      objc_msgSend(v33, "floatValue");
      v37 = v36;
      if (v35)
      {
LABEL_34:
        objc_msgSend(v35, "floatValue");
        v39 = v38;
        goto LABEL_47;
      }
    }
    else
    {
      v37 = 50.0;
      if (v34)
        goto LABEL_34;
    }
    v39 = 100.0;
LABEL_47:
    if (sub_1012E9C1C(a1 + 112, a1 + 240) && !*(_QWORD *)(a1 + 384) && *(double *)(a4 + 20) < v37)
    {
      *(_QWORD *)(a1 + 384) = (unint64_t)(v18 * 1000000.0);
      *(_OWORD *)(a1 + 368) = *(_OWORD *)(a4 + 4);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v45 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        v46 = *(_QWORD *)(a1 + 368);
        v47 = *(_QWORD *)(a1 + 376);
        v48 = *(_QWORD *)(a4 + 20);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v46;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v47;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)v118 = v48;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "Querying distance from lat:%f long:%f, location uncertainty:%f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v70 = *(_QWORD *)(a1 + 368);
        v71 = *(_QWORD *)(a1 + 376);
        v72 = *(_QWORD *)(a4 + 20);
        v98 = 134218496;
        *(_QWORD *)v99 = v70;
        *(_WORD *)&v99[8] = 2048;
        *(_QWORD *)&v99[10] = v71;
        *(_WORD *)&v99[18] = 2048;
        *(_QWORD *)v100 = v72;
        LODWORD(v78) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "Querying distance from lat:%f long:%f, location uncertainty:%f", COERCE_DOUBLE(&v98), v78, v79);
        v74 = (char *)v73;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v73);
        if (v74 != buf)
          free(v74);
      }
      sub_10052D218(a1 + 336, buf);
      v80 = _NSConcreteStackBlock;
      v82 = sub_101435A6C;
      v83 = &unk_1021B6990;
      v84 = *(double *)&a1;
      v85 = *(double *)buf;
      v49 = *(id **)(a1 + 360);
      v50 = *(double *)(a1 + 368);
      v51 = *(double *)(a1 + 376);
      v52 = *(double *)(a4 + 20);
      v81 = 3321888768;
      v86 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v53 = (unint64_t *)(*(_QWORD *)&buf[8] + 16);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      sub_100DE29CC(v49, (uint64_t)&v80, v50, v51, v52, v39);
      if (v86)
        std::__shared_weak_count::__release_weak(v86);
      if (*(_QWORD *)&buf[8])
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
    if (sub_1012E9C1C(a1 + 112, a1 + 240) && !*(_QWORD *)(a1 + 384))
    {
      v55 = v37;
      if (*(double *)(a4 + 20) >= v55)
      {
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v56 = qword_10229FDA8;
        if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
        {
          v57 = *(_QWORD *)(a4 + 20);
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v57;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v55;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "Not querying roads because location uncertainty %f is greater or equal than %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDA0 != -1)
            dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
          v75 = *(_QWORD *)(a4 + 20);
          v98 = 134218240;
          *(_QWORD *)v99 = v75;
          *(_WORD *)&v99[8] = 2048;
          *(double *)&v99[10] = v55;
          LODWORD(v78) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "Not querying roads because location uncertainty %f is greater or equal than %f", COERCE_DOUBLE(&v98), v78);
          v77 = (char *)v76;
          sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v76);
          if (v77 != buf)
            free(v77);
        }
      }
    }
    sub_10011A5A8(v87);
    return;
  }
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v59 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "Not querying roads because location is not from GPS", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    LOWORD(v98) = 0;
    LODWORD(v78) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "Not querying roads because location is not from GPS", &v98, *(_QWORD *)&v78);
    v44 = (char *)v60;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v60);
    goto LABEL_43;
  }
}

void sub_101435A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62)
{
  sub_10011A5A8(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_101435A6C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[7];
  _QWORD v8[6];
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 32);
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x3812000000;
  v8[3] = sub_100207390;
  v8[4] = sub_100207E74;
  v4 = *a2;
  *a2 = 0;
  v8[5] = 0;
  v9 = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101435B78;
  v7[3] = &unk_10215A170;
  v7[5] = v8;
  v7[6] = v3;
  v7[4] = a3;
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 && *(_QWORD *)(v5 + 8) != -1)
    sub_101435B78((uint64_t)v7);
  _Block_object_dispose(v8, 8);
  result = v9;
  v9 = 0;
  if (result)
    operator delete();
  return result;
}

void sub_101435B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;

  _Block_object_dispose(&a16, 8);
  v23 = a22;
  a22 = 0;
  if (v23)
    operator delete();
  _Unwind_Resume(a1);
}

void sub_101435B78(uint64_t a1)
{
  unint64_t v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  if (!(*(_QWORD *)(a1 + 32) | v1))
    sub_1019548D8();
  sub_1001FBA94(a1, 11, (void *)v1, 0x60uLL);
  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v3 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error happened getting distance to closest road: %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v5 = *(_QWORD *)(a1 + 32);
      v8 = 138543362;
      v9 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 16, "Error happened getting distance to closest road: %{public}@", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_101435D54(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[7];
  char v10;
  uint8_t buf[1640];

  v3 = sub_100CD599C(a2);
  v10 = v3;
  if (*(unsigned __int8 *)(a1 + 312) != v3)
  {
    if (v3)
    {
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v4 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Notifying AOP of active emergency", buf, 2u);
      }
      v5 = sub_1001BFF7C(115, 2);
      if ((_DWORD)v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v9[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "Notifying AOP of active emergency", v9, 2);
        v8 = (uint8_t *)v7;
        v5 = sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onEmergencyStateChange(CLEmergencyState)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      sub_1001FBA94(v5, 7, &v10, 1uLL);
      v6 = v10;
    }
    else
    {
      v6 = 0;
    }
    *(_BYTE *)(a1 + 312) = v6;
  }
}

void sub_101435F20(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (*a3 == 2)
  {
    if (*(_BYTE *)(a4 + 56))
      v5 = (int)*(float *)(a4 + 20);
    else
      v5 = -1;
    *(_DWORD *)(a1 + 584) = v5;
    *(_DWORD *)(a1 + 588) = *(_DWORD *)(a4 + 4);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v6 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_DWORD *)(a1 + 584);
      v8 = *(_DWORD *)(a1 + 588);
      *(_DWORD *)buf = 67109376;
      v18 = v7;
      v19 = 1024;
      v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "age=%d biologicalSex=%d", buf, 0xEu);
    }
    v9 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v10 = *(_DWORD *)(a1 + 584);
      v11 = *(_DWORD *)(a1 + 588);
      v14[0] = 67109376;
      v14[1] = v10;
      v15 = 1024;
      v16 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "age=%d biologicalSex=%d", v14, 14);
      v13 = (uint8_t *)v12;
      v9 = sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onUserInfoNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    buf[0] = *(_DWORD *)(a1 + 584);
    buf[1] = *(_DWORD *)(a1 + 588);
    sub_1001FBA94(v9, 5, buf, 2uLL);
  }
}

double sub_10143613C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  int16x8_t v8;
  unsigned int v9;
  double result;
  unsigned int v11;
  const char *v12;
  char *v13;
  int v14;
  _BYTE v15[6];
  int v16;
  __int16 v17;
  int v18;
  uint64_t buf;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  if (*a3 == 1)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v5 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
    {
      v6 = *(unsigned __int8 *)(a4 + 96);
      LODWORD(buf) = 67110144;
      HIDWORD(buf) = v6 & 1;
      v20 = 1024;
      v21 = (v6 >> 1) & 1;
      v22 = 1024;
      v23 = (v6 >> 2) & 1;
      v24 = 1024;
      v25 = (v6 >> 3) & 1;
      v26 = 1024;
      v27 = (v6 >> 4) & 1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "(onMotionStateUpdate) EventActivity; hints %d %d %d %d %d",
        (uint8_t *)&buf,
        0x20u);
    }
    v7 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v7)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v11 = *(unsigned __int8 *)(a4 + 96);
      *(_WORD *)v15 = 1024;
      *(_DWORD *)&v15[2] = (v11 >> 1) & 1;
      v16 = (v11 >> 3) & 1;
      v17 = 1024;
      v18 = (v11 >> 4) & 1;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "(onMotionStateUpdate) EventActivity; hints %d %d %d %d %d",
        &v14,
        32,
        67110144,
        *(_DWORD *)v15,
        (v11 >> 2) & 1);
      v13 = (char *)v12;
      v7 = sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onMotionStateUpdate(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v12);
      if (v13 != (char *)&buf)
        free(v13);
    }
    v9 = *(unsigned __int8 *)(a4 + 96);
    LOBYTE(buf) = v9 & 1;
    v8.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v9) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
    *(_DWORD *)((char *)&buf + 1) = vmovn_s16(v8).u32[0];
    sub_1001FBA94(v7, 9, &buf, 5uLL);
  }
  return result;
}

void sub_1014363A4(uint64_t a1, uint64_t a2, _DWORD *a3, _BYTE *a4)
{
  NSObject *v5;
  void *v6;
  double v7;
  double v8;
  NSObject *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  _WORD v19[8];
  uint8_t buf[1640];

  switch(*a3)
  {
    case 2:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v5 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Turning off slow timer", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v19[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "Turning off slow timer", v19, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onDaemonStatus(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      v6 = *(void **)(a1 + 472);
      v7 = 1.79769313e308;
      v8 = 1.79769313e308;
      goto LABEL_14;
    case 3:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v9 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Scheduling slow timer", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v19[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "Scheduling slow timer", v19, 2);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onDaemonStatus(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      v6 = *(void **)(a1 + 472);
      v8 = 60.0;
      v7 = 1.0;
LABEL_14:
      objc_msgSend(v6, "setNextFireDelay:interval:", v7, v8);
      return;
    case 7:
      *(_BYTE *)(a1 + 314) = a4[9];
      goto LABEL_17;
    case 8:
      *(_BYTE *)(a1 + 313) = *a4;
LABEL_17:
      v10 = sub_10143675C((_BYTE *)a1);
      v11 = sub_101436B7C((_BYTE *)a1);
      v12 = sub_101437070(a1);
      v13 = 0x10000;
      if (!v12)
        v13 = 0;
      v14 = 256;
      if (!v11)
        v14 = 0;
      sub_10143755C(a1, v14 | v10 | v13);
      break;
    default:
      return;
  }
}

BOOL sub_10143675C(_BYTE *a1)
{
  unsigned int v2;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  _BOOL4 v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  _BOOL4 v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;

  v2 = +[SOSUtilities kappaTriggersEmergencySOS](SOSUtilities, "kappaTriggersEmergencySOS");
  if (+[SOSUtilities getKappaThirdPartyDisplayNameForApp](SOSUtilities, "getKappaThirdPartyDisplayNameForApp"))
  {
    v3 = 1;
  }
  else
  {
    v3 = v2;
  }
  if (!a1[316])
  {
    if (qword_10230F118 != -1)
      dispatch_once(&qword_10230F118, &stru_1021B6C08);
    if (qword_10230F120)
    {
      a1[316] = off_1022FFE28();
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v4 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        v5 = a1[316];
        *(_DWORD *)buf = 67109120;
        v33 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "uncached activated state %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v19 = a1[316];
        v22 = 67109120;
        v23 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "uncached activated state %d", &v22);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldEnableKappa()", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
    }
  }
  if (!v3 || a1[313] || a1[315])
    v6 = 0;
  else
    v6 = a1[316];
  LOBYTE(v22) = 0;
  sub_1018BF25C(buf, "KappaForceOn", (unsigned __int8 *)&v22, 0);
  v7 = buf[1];
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v8 = v6 | v7;
  v9 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    v10 = a1[313];
    v11 = a1[315];
    v12 = a1[316];
    *(_DWORD *)buf = 67241216;
    v33 = v8 != 0;
    v34 = 1026;
    v35 = v3;
    v36 = 1026;
    v37 = v10;
    v38 = 1026;
    v39 = v11;
    v40 = 1026;
    v41 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "shouldEnableKappa, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v14 = a1[313];
    v15 = a1[315];
    v16 = a1[316];
    v22 = 67241216;
    v23 = v8 != 0;
    v24 = 1026;
    v25 = v3;
    v26 = 1026;
    v27 = v14;
    v28 = 1026;
    v29 = v15;
    v30 = 1026;
    v31 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "shouldEnableKappa, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u", &v22, 32);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldEnableKappa()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  return v8 != 0;
}

BOOL sub_101436B7C(_BYTE *a1)
{
  _BOOL4 v2;
  uint64_t v3;
  void *v4;
  id v5;
  unsigned int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  int v17;
  int v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD v25[2];
  int v26;
  _BOOL4 v27;
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  uint8_t buf[4];
  _BOOL4 v37;
  __int16 v38;
  unsigned int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;

  v2 = (+[SOSUtilities kappaTriggersEmergencySOS](SOSUtilities, "kappaTriggersEmergencySOS") & 1) != 0
    || +[SOSUtilities getKappaThirdPartyDisplayNameForApp](SOSUtilities, "getKappaThirdPartyDisplayNameForApp") != 0;
  sub_100119F3C(v25);
  v3 = sub_1001FD94C();
  if (sub_100006BB4(v3, "Kappa", v25))
  {
    v4 = (void *)sub_10011A5AC((uint64_t)v25);
    v5 = objc_msgSend(v4, "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "martyShouldArm"));
    if (v5)
      v6 = 0;
    else
      v6 = v2;
    if (v5 && v2)
      v6 = objc_msgSend(objc_msgSend(v4, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "martyShouldArm")), "BOOLValue");
  }
  else
  {
    v6 = v2;
  }
  if (!a1[316])
  {
    if (qword_10230F118 != -1)
      dispatch_once(&qword_10230F118, &stru_1021B6C08);
    if (qword_10230F120)
    {
      a1[316] = off_1022FFE28();
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v7 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        v8 = a1[316];
        *(_DWORD *)buf = 67109120;
        v37 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "uncached activated state %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v22 = a1[316];
        v26 = 67109120;
        v27 = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "uncached activated state %d", &v26);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldEnableMarty()", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
    }
  }
  if (!v6 || a1[313] || a1[315])
    v9 = 0;
  else
    v9 = a1[316];
  LOBYTE(v26) = 0;
  sub_1018BF25C(buf, "MartyForceOn", (unsigned __int8 *)&v26, 0);
  v10 = buf[1];
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v11 = v9 | v10;
  v12 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    v13 = a1[313];
    v14 = a1[315];
    v15 = a1[316];
    *(_DWORD *)buf = 67241216;
    v37 = v11 != 0;
    v38 = 1026;
    v39 = v6;
    v40 = 1026;
    v41 = v13;
    v42 = 1026;
    v43 = v14;
    v44 = 1026;
    v45 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "shouldEnableMarty, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v17 = a1[313];
    v18 = a1[315];
    v19 = a1[316];
    v26 = 67241216;
    v27 = v11 != 0;
    v28 = 1026;
    v29 = v6;
    v30 = 1026;
    v31 = v17;
    v32 = 1026;
    v33 = v18;
    v34 = 1026;
    v35 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "shouldEnableMarty, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u", &v26, 32);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldEnableMarty()", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  sub_10011A5A8(v25);
  return v11 != 0;
}

void sub_101437040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_101437070(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  const char *v28;
  uint8_t *v29;
  int v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;

  if (!*(_BYTE *)(a1 + 316))
  {
    if (qword_10230F118 != -1)
      dispatch_once(&qword_10230F118, &stru_1021B6C08);
    if (qword_10230F120)
    {
      *(_BYTE *)(a1 + 316) = off_1022FFE28();
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v2 = qword_10229FFC8;
      if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEBUG))
      {
        v3 = *(unsigned __int8 *)(a1 + 316);
        *(_DWORD *)buf = 67109120;
        v49 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "uncached activated state %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFC0 != -1)
          dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
        v27 = *(unsigned __int8 *)(a1 + 316);
        v30 = 67109120;
        v31 = v27;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 2, "uncached activated state %d", &v30);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldEnableIgneous()", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
    }
  }
  *(_DWORD *)buf = 0;
  v4 = sub_1001FD94C();
  sub_1001E4B84(v4, "CLIgneousArmMinutes", buf);
  v5 = 0;
  v6 = *(_DWORD *)buf;
  if (!*(_BYTE *)(a1 + 313))
    v5 = *(_BYTE *)(a1 + 316) != 0;
  sub_101442FC4(a1);
  if (*(_BYTE *)(a1 + 317))
    v7 = v5;
  else
    v7 = 0;
  sub_1014437A0(a1);
  v8 = sub_101443F30(a1);
  LOBYTE(v30) = 0;
  sub_1018BF25C(buf, "IgneousForceInRandomArmSession", (unsigned __int8 *)&v30, 0);
  if (buf[1])
    v9 = 1;
  else
    v9 = v8;
  v10 = v6 > 0 && v7;
  if ((v9 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v11 = *(unsigned __int8 *)(a1 + 314);
    if (*(_BYTE *)(a1 + 314))
      v11 = *(_DWORD *)(a1 + 420) < *(_DWORD *)(a1 + 428) - 1;
  }
  LODWORD(v12) = v10 & v11;
  LOBYTE(v30) = 0;
  sub_1018BF25C(buf, "IgneousForceOn", (unsigned __int8 *)&v30, 0);
  if (buf[1])
    v12 = 1;
  else
    v12 = v12;
  if (qword_10229FFC0 != -1)
    dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
  v13 = qword_10229FFC8;
  if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_INFO))
  {
    v14 = *(unsigned __int8 *)(a1 + 313);
    v15 = *(unsigned __int8 *)(a1 + 316);
    v16 = *(unsigned __int8 *)(a1 + 314);
    v17 = *(unsigned __int8 *)(a1 + 317);
    v18 = *(_DWORD *)(a1 + 420);
    *(_DWORD *)buf = 67242240;
    v49 = v12;
    v50 = 1026;
    v51 = 1;
    v52 = 1026;
    v53 = v14;
    v54 = 1026;
    v55 = v15;
    v56 = 1026;
    v57 = v16;
    v58 = 1026;
    v59 = v9;
    v60 = 1026;
    v61 = v6;
    v62 = 1026;
    v63 = v17;
    v64 = 1026;
    v65 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "shouldEnableIgneous, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v20 = *(unsigned __int8 *)(a1 + 313);
    v21 = *(unsigned __int8 *)(a1 + 316);
    v22 = *(unsigned __int8 *)(a1 + 314);
    v23 = *(unsigned __int8 *)(a1 + 317);
    v24 = *(_DWORD *)(a1 + 420);
    v30 = 67242240;
    v31 = v12;
    v32 = 1026;
    v33 = 1;
    v34 = 1026;
    v35 = v20;
    v36 = 1026;
    v37 = v21;
    v38 = 1026;
    v39 = v22;
    v40 = 1026;
    v41 = v9;
    v42 = 1026;
    v43 = v6;
    v44 = 1026;
    v45 = v23;
    v46 = 1026;
    v47 = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 1, "shouldEnableIgneous, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u", &v30, 56);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldEnableIgneous()", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  return v12;
}

void sub_10143755C(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  NSObject *v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint8_t buf[8];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;

  v2 = a2;
  v4 = a2 >> 8;
  buf[0] = 0;
  v5 = sub_1001FD94C();
  sub_1001E4874(v5, "CLIgneousArmStatus", (BOOL *)buf);
  v6 = buf[0];
  if (buf[0])
    v7 = 1;
  else
    v7 = (*(_QWORD *)&v2 & 0xFF0000) == 0;
  if (!v7)
  {
    if (!*(_BYTE *)(a1 + 416))
    {
      v10 = *(const char **)(a1 + 392);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      v17 = 3221225472;
      *(_QWORD *)&v18 = sub_101443FA8;
      *((_QWORD *)&v18 + 1) = &unk_1021B6C28;
      v19 = a1;
      v20 = 0;
      v21 = v10;
      xpc_activity_register(v10, XPC_ACTIVITY_CHECK_IN, buf);
      *(_BYTE *)(a1 + 416) = 1;
    }
    sub_101444788(a1, (unsigned __int16)v2);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v11 = qword_10229FFC8;
    if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240960;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v17) = 1026;
      *(_DWORD *)((char *)&v17 + 2) = v2;
      HIWORD(v17) = 1026;
      LODWORD(v18) = v4;
      WORD2(v18) = 1026;
      *(_DWORD *)((char *)&v18 + 6) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "update AOP arm status,%{public}u, %{public}u, %{public}u, %{public}u", buf, 0x1Au);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    LOWORD(v14) = 1026;
    *(_DWORD *)((char *)&v14 + 2) = v2;
    HIWORD(v14) = 1026;
    LODWORD(v15) = v4;
    WORD2(v15) = 1026;
    *(_DWORD *)((char *)&v15 + 6) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 2, "update AOP arm status,%{public}u, %{public}u, %{public}u, %{public}u", &v13, 26, 67240960, v14, v15);
LABEL_25:
    v12 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::updateAOPArmStatus(CMMotionCoprocessorCommand::Kappa::EnableClient)", "%s\n", v9);
    if (v12 != buf)
      free(v12);
    return;
  }
  sub_101444788(a1, v2 & 0xFFFFFF);
  if (qword_10229FFC0 != -1)
    dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
  v8 = qword_10229FFC8;
  if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&buf[4] = v6;
    LOWORD(v17) = 1026;
    *(_DWORD *)((char *)&v17 + 2) = v2;
    HIWORD(v17) = 1026;
    LODWORD(v18) = v4;
    WORD2(v18) = 1026;
    *(_DWORD *)((char *)&v18 + 6) = BYTE2(v2);
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "update AOP arm status,%{public}u, %{public}u, %{public}u, %{public}u", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    LODWORD(v13) = 67240960;
    HIDWORD(v13) = v6;
    LOWORD(v14) = 1026;
    *(_DWORD *)((char *)&v14 + 2) = v2;
    HIWORD(v14) = 1026;
    LODWORD(v15) = v4;
    WORD2(v15) = 1026;
    *(_DWORD *)((char *)&v15 + 6) = BYTE2(v2);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 2, "update AOP arm status,%{public}u, %{public}u, %{public}u, %{public}u", &v13, 26, v13, v14, v15);
    goto LABEL_25;
  }
}

void sub_10143793C(_BYTE *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  _BOOL8 v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  _DWORD v19[2];
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;

  if (!*a3)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v6 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
    {
      v7 = *(_DWORD *)(a4 + 8);
      v8 = *(_DWORD *)(a4 + 16);
      *(_DWORD *)buf = 67240448;
      v23 = v7;
      v24 = 1026;
      v25 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "workout type %{public}u, %{public}u", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v15 = *(_DWORD *)(a4 + 8);
      v16 = *(_DWORD *)(a4 + 16);
      v19[0] = 67240448;
      v19[1] = v15;
      v20 = 1026;
      v21 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "workout type %{public}u, %{public}u", v19, 14);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v9 = (*(_DWORD *)(a4 + 8) | *(_DWORD *)(a4 + 16)) != 0;
    if (a1[315] == v9)
    {
      v10 = 0;
    }
    else
    {
      a1[315] = v9;
      v10 = sub_10143675C(a1);
    }
    v11 = sub_101436B7C(a1);
    v12 = sub_101437070((uint64_t)a1);
    v13 = 0x10000;
    if (!v12)
      v13 = 0;
    v14 = 256;
    if (!v11)
      v14 = 0;
    sub_10143755C((uint64_t)a1, v14 | v10 | v13);
  }
}

uint64_t sub_101437B8C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  char v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  id v13;
  double v14;
  NSObject *v15;
  int v16;
  id v17;
  double v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  unsigned __int8 v34[8];
  int v35;
  void *v36;
  _QWORD v37[2];
  uint8_t buf[4];
  void *v39;

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v2 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    v3 = *(unsigned __int8 *)(a1 + 328);
    *(_DWORD *)buf = 67109120;
    LODWORD(v39) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "checking remotely armed clients for timeout %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v24 = *(unsigned __int8 *)(a1 + 328);
    LODWORD(v37[0]) = 67109120;
    HIDWORD(v37[0]) = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "checking remotely armed clients for timeout %d", v37);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  v34[0] = 1;
  memset(&v34[1], 0, 7);
  v4 = sub_101439080();
  sub_100119F3C(v37);
  v5 = sub_1001FD94C();
  if (!sub_100006BB4(v5, "Kappa", v37))
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v10 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "cannot access timestamps, turning everything off", buf, 2u);
    }
    v6 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v35) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "cannot access timestamps, turning everything off", &v35, 2);
      v12 = (uint8_t *)v11;
      v6 = sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    goto LABEL_47;
  }
  v6 = (uint64_t)objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", sub_10011A5AC((uint64_t)v37));
  v7 = (void *)v6;
  if ((*(_BYTE *)(a1 + 328) & 1) != 0
    && ((v13 = objc_msgSend((id)v6, "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kappaHeartbeatTimestamp")), v6 = (uint64_t)objc_msgSend(v7, "objectForKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kappaHeartbeatTimestamp")), !v13)|| v6 && (objc_msgSend((id)v6, "doubleValue"), CFAbsoluteTimeGetCurrent() - v14 > (double)v4)))
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v15 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "kappa timed out", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v35) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "kappa timed out", &v35, 2);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v6 = (uint64_t)objc_msgSend(v7, "removeObjectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kappaHeartbeatTimestamp"));
    v9 = 0;
    v8 = 1;
    *(_WORD *)&v34[1] = 1;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  if ((*(_BYTE *)(a1 + 328) & 2) != 0
    && ((v17 = objc_msgSend(v7, "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "martyHeartbeatTimestamp")), v6 = (uint64_t)objc_msgSend(v7, "objectForKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "martyHeartbeatTimestamp")), !v17)|| v6 && (objc_msgSend((id)v6, "doubleValue"), CFAbsoluteTimeGetCurrent() - v18 > (double)v4)))
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v19 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "marty timed out", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v35) = 0;
      LODWORD(v33) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "marty timed out", &v35, v33);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    objc_msgSend(v7, "removeObjectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "martyHeartbeatTimestamp"));
    v16 = 1;
    *(_WORD *)&v34[3] = 1;
  }
  else
  {
    v16 = 0;
    if ((v9 & 1) != 0)
    {
      v8 = 0;
      goto LABEL_46;
    }
    v8 = 1;
  }
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v20 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v39 = v7;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "setting dictionary %@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v35 = 138412290;
    v36 = v7;
    LODWORD(v33) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "setting dictionary %@", &v35, v33);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  sub_10052AA44(v37, (CFDictionaryRef)v7);
  v21 = sub_1001FD94C();
  sub_1000CADE4(v21, "Kappa", (uint64_t)v37);
  v22 = sub_1001FD94C();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 944))(v22);
LABEL_46:
  if (v8 | v16)
LABEL_47:
    sub_101432248(v6, v34);
  return sub_10011A5A8(v37);
}

void sub_101438404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

id sub_101438444(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  id result;
  unsigned __int8 v10;
  NSObject *v11;
  double Current;
  uint64_t v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  int v28;
  id v29;
  int v30;
  id v31;
  uint8_t buf[4];
  id v33;

  v3 = objc_opt_class(NSString, a2);
  v5 = objc_opt_class(NSNumber, v4);
  v7 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v3, v5, objc_opt_class(NSDictionary, v6), 0), a2, 0);
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v8 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v33 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "receiving heartbeat %@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v30 = 138412290;
    v31 = v7;
    LODWORD(v27) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "receiving heartbeat %@", &v30, v27);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::companionHeartbeat(NSData *)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  result = objc_msgSend(v7, "objectForKey:", CFSTR("SafetyCompanionHeartbeat"));
  if (result)
  {
    v10 = objc_msgSend(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("SafetyCompanionHeartbeat")), "intValue");
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v11 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v33) = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "updating heartbeat timestamps %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v30 = 67109120;
      LODWORD(v31) = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "updating heartbeat timestamps %d", &v30);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::companionHeartbeat(NSData *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    Current = CFAbsoluteTimeGetCurrent();
    sub_100119F3C(&v30);
    v13 = sub_1001FD94C();
    if (sub_100006BB4(v13, "Kappa", &v30))
    {
      v14 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", sub_10011A5AC((uint64_t)&v30));
      if ((v10 & 1) != 0)
        objc_msgSend(v14, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kappaHeartbeatTimestamp"));
      if ((v10 & 2) != 0)
        objc_msgSend(v14, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "martyHeartbeatTimestamp"));
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v15 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v33 = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "setting dictionary %@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v28 = 138412290;
        v29 = v14;
        LODWORD(v27) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "setting dictionary %@", &v28, v27);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::companionHeartbeat(NSData *)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      sub_10052AA44(&v30, (CFDictionaryRef)v14);
      v16 = sub_1001FD94C();
      sub_1000CADE4(v16, "Kappa", (uint64_t)&v30);
      v17 = sub_1001FD94C();
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 944))(v17);
    }
    else
    {
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v18 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "failed to get dictionary", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        LOWORD(v28) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "failed to get dictionary", &v28, v27);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::companionHeartbeat(NSData *)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
    }
    return (id)sub_10011A5A8(&v30);
  }
  return result;
}

void sub_101438B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_101438B60(uint64_t a1)
{
  NSObject *v2;
  int v3;
  id v4;
  NSData *v5;
  id v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _QWORD v13[5];
  int v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v2 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 329);
    *(_DWORD *)buf = 67109120;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "sending heartbeat for %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v8 = *(unsigned __int8 *)(a1 + 329);
    v15[0] = 67109120;
    v15[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "sending heartbeat for %d", v15);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::locallyArmedClientHeartbeat()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (*(_BYTE *)(a1 + 329))
  {
    v4 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 329)), CFSTR("SafetyCompanionHeartbeat"));
    v5 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v4), 1, 0);
    if (sub_10142EA54())
    {
      v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLCompanionNotifier"));
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_101438F08;
      v13[3] = &unk_1021B69C8;
      v14 = 30;
      v13[4] = v5;
      objc_msgSend(v6, "doAsync:", v13);
    }
  }
  else
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v7 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "nothing to send, returning", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "nothing to send, returning", v15, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::locallyArmedClientHeartbeat()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

id sub_101438F08(uint64_t a1, uint64_t a2)
{
  return sub_10061F764(120.0, a2, *(_DWORD *)(a1 + 40), *(void **)(a1 + 32), 300, 1, 0, 0, 0, 0);
}

uint64_t sub_101438F54(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  *(_WORD *)(a1 + 328) = 0;
  objc_msgSend(*(id *)(a1 + 320), "setNextFireTime:", 1.79769313e308);
  sub_100119F3C(v6);
  v1 = sub_1001FD94C();
  if (sub_100006BB4(v1, "Kappa", v6))
  {
    v2 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", sub_10011A5AC((uint64_t)v6));
    objc_msgSend(v2, "removeObjectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kappaHeartbeatTimestamp"));
    objc_msgSend(v2, "removeObjectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "martyHeartbeatTimestamp"));
    objc_msgSend(v2, "removeObjectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "igneousHeartbeatTimestamp"));
    sub_10052AA44(v6, (CFDictionaryRef)v2);
    v3 = sub_1001FD94C();
    sub_1000CADE4(v3, "Kappa", (uint64_t)v6);
    v4 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 944))(v4);
  }
  return sub_10011A5A8(v6);
}

void sub_101439068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101439080()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _QWORD v6[2];
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  sub_100119F3C(v6);
  v0 = sub_1001FD94C();
  if (sub_100006BB4(v0, "Kappa", v6))
    v1 = (uint64_t)objc_msgSend(objc_msgSend((id)sub_10011A5AC((uint64_t)v6), "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "remotelyArmedClientTimeoutSeconds")), "integerValue");
  else
    v1 = 900;
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v2 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v9 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "timeout seconds %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v7[0] = 67109120;
    v7[1] = v1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "timeout seconds %d", v7);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "int CLKappaNotifier::getRemoteTimeoutSeconds()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10011A5A8(v6);
  return v1;
}

void sub_101439290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_1014392B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::string::size_type size;
  std::string *v5;
  unsigned __int8 *v6;
  char *v7;
  std::string *v8;
  NSObject *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  const char *v13;
  char *v14;
  std::string v15;
  int v16;
  std::string *v17;
  _DWORD buf[3];

  v3 = sub_100197040();
  sub_10075A11C(v3, &v15);
  size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v15;
  else
    v5 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v15.__r_.__value_.__l.__size_;
  LOBYTE(buf[0]) = 32;
  v6 = sub_1002A6994(v5, (unsigned __int8 *)v5 + size, (unsigned __int8 *)buf);
  v7 = (char *)&v15 + HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v8 = &v15;
  }
  else
  {
    v7 = (char *)(v15.__r_.__value_.__r.__words[0] + v15.__r_.__value_.__l.__size_);
    v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  std::string::erase(&v15, v6 - (unsigned __int8 *)v8, v7 - (char *)v6);
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v9 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    v10 = &v15;
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    buf[0] = 136315138;
    *(_QWORD *)&buf[1] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "buildString %s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v12 = &v15;
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
    v16 = 136315138;
    v17 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "buildString %s", (const char *)&v16);
    v14 = (char *)v13;
    sub_100512490("Generic", 1, 0, 2, "const std::unique_ptr<CLNameValuePair> CLKappaNotifier::lookupOTAConfig(const CLNameValuePair &)", "%s\n", v13);
    if (v14 != (char *)buf)
      free(v14);
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v11, 0x8000100u);
  sub_10011A5AC(a2);
  operator new();
}

void sub_101439D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char *a48)
{
  uint64_t v49;

  sub_10011A5A8(&a40);
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  a48 = &a44;
  sub_100259608((void ***)&a48);
  sub_10011A5A8(&a30);
  v49 = *a16;
  *a16 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

void sub_101439E34(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  CLOSTransaction *v5;
  NSObject *v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  int *v12;
  void **v13;
  const char *v14;
  int *v15;
  const char *v16;
  int *v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  int v21;
  void **v22;
  int buf;
  uint8_t buf_4[8];

  if (*a3 == 6)
  {
    v5 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLKappaNotifier.onMobileAssetNotification");
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v6 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "creating transaction", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "creating transaction", __p, 2);
      v12 = (int *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v11);
      if (v12 != &buf)
        free(v12);
    }
    __p[0] = 0;
    __p[1] = 0;
    v20 = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a4 + 800))(a4, __p);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v7 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = __p;
      if (v20 < 0)
        v8 = (void **)__p[0];
      buf = 136446210;
      *(_QWORD *)buf_4 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "received config %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v13 = __p;
      if (v20 < 0)
        v13 = (void **)__p[0];
      v21 = 136446210;
      v22 = v13;
      LODWORD(v18) = 12;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDA8, 0, "received config %{public}s", &v21, v18);
      v15 = (int *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v14);
      if (v15 != &buf)
        free(v15);
    }
    v9 = sub_10011A5AC(a4);
    if (v9)
      sub_1014392B8(v9, a4);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v10 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to convert config to dictionary", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v21) = 0;
      LODWORD(v18) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDA8, 16, "Failed to convert config to dictionary", &v21, v18);
      v17 = (int *)v16;
      sub_100512490("Generic", 1, 0, 0, "void CLKappaNotifier::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v16);
      if (v17 != &buf)
        free(v17);
    }

    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
  }
}

void sub_10143C4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46)
{
  sub_10011A5A8(&a46);
  if (a38)
    (*(void (**)(uint64_t))(*(_QWORD *)a38 + 8))(a38);
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10143C634(uint64_t a1, unint64_t *a2, char a3)
{
  char v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if ((a3 & 1) != 0)
    v5 = -1;
  else
    v5 = sub_10143C7F4(a1, *a2);
  *(_BYTE *)(a1 + 330) = v5;
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v6 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Firing companion stop event", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "Firing companion stop event", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::stopCompanionCollect(CMSPU::Safety::Command::OverrideClient &, BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_1012E9D50(a1 + 112, 6, (uint64_t)a2);
}

unint64_t sub_10143C7F4(uint64_t a1, unint64_t a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  int v7;
  _BYTE v8[6];
  int v9;
  int v10;
  uint8_t buf[4];
  unsigned int v12;
  __int16 v13;
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v3 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67110656;
    v12 = (a2 >> 8) & 1;
    v13 = 1024;
    v14 = WORD1(a2) & 1;
    v15 = 1024;
    v16 = BYTE3(a2) & 1;
    v17 = 1024;
    v18 = BYTE4(a2) & 1;
    v19 = 1024;
    v20 = HIBYTE(a2) & 1;
    v21 = 1024;
    v22 = (a2 >> 40) & 1;
    v23 = 1024;
    v24 = HIWORD(a2) & 1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "constructOverrideClientBitset %d %d %d %d %d %d %d", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    *(_WORD *)v8 = 1024;
    *(_DWORD *)&v8[2] = WORD1(a2) & 1;
    LOWORD(v9) = 1024;
    HIWORD(v9) = (HIDWORD(a2) >> 8) & 1;
    v10 = HIWORD(a2) & 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "constructOverrideClientBitset %d %d %d %d %d %d %d", &v7, 44, 67110656, *(_DWORD *)v8, BYTE3(a2) & 1, 0x4000000, v9);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "uint8_t CLKappaNotifier::constructOverrideClientBitset(CMSPU::Safety::Command::OverrideClient, BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return (a2 >> 23) & 2 | (a2 >> 8) & 1 | (a2 >> 38) & 4;
}

void sub_10143CA54(uint64_t a1, uint64_t a2, char a3)
{
  _BYTE *v5;
  int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  int v28;

  v5 = (_BYTE *)a1;
  if (*(unsigned __int8 *)(a2 + 3) | *(unsigned __int8 *)(a2 + 5))
  {
    a1 = sub_10142EA54();
    if ((a1 & 1) == 0)
    {
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v10 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "refusing to arm logging devices for marty/igneous", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v22) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "refusing to arm logging devices for marty/igneous", &v22, 2, v22);
LABEL_62:
      v20 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onCompanionCollect(CMSPU::Safety::Command::OverrideClient &, BOOL)", "%s\n", v11);
      if (v20 != buf)
        free(v20);
      return;
    }
  }
  if (*(_BYTE *)(a2 + 1))
  {
    a1 = sub_10143675C(v5);
    if ((a1 & 1) == 0)
    {
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v12 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "refusing to collect, kappa not allowed", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v22) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "refusing to collect, kappa not allowed", &v22, 2, v22);
      goto LABEL_62;
    }
  }
  if (*(_BYTE *)(a2 + 3))
  {
    a1 = sub_101436B7C(v5);
    if ((a1 & 1) == 0)
    {
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v13 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "refusing to collect, marty not allowed", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v22) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "refusing to collect, marty not allowed", &v22, 2, v22);
      goto LABEL_62;
    }
  }
  if (!*(_BYTE *)(a2 + 5) || (a1 = sub_101437070((uint64_t)v5), (a1 & 1) != 0))
  {
    if ((a3 & 1) == 0)
    {
      v6 = sub_10143C7F4(a1, *(_QWORD *)a2);
      v5[328] |= v6;
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v7 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        v8 = v5[328];
        *(_DWORD *)buf = 67109376;
        v26 = v6;
        v27 = 1024;
        v28 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "arm remote %d remote armed bitmap %d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v17 = v5[328];
        LODWORD(v22) = 67109376;
        HIDWORD(v22) = v6;
        v23 = 1024;
        v24 = v17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "arm remote %d remote armed bitmap %d", &v22, 14);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onCompanionCollect(CMSPU::Safety::Command::OverrideClient &, BOOL)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
    }
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v9 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Firing companion collect event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(v22) = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "Firing companion collect event", &v22, v21);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onCompanionCollect(CMSPU::Safety::Command::OverrideClient &, BOOL)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    sub_1012E9D50((uint64_t)(v5 + 112), 5, a2);
    return;
  }
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v14 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "refusing to collect, igneous not allowed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    LOWORD(v22) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "refusing to collect, igneous not allowed", &v22, 2, v22);
    goto LABEL_62;
  }
}

uint64_t sub_10143D190()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _QWORD v6[2];
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  sub_100119F3C(v6);
  v0 = sub_1001FD94C();
  if (sub_100006BB4(v0, "Kappa", v6))
    v1 = (uint64_t)objc_msgSend(objc_msgSend((id)sub_10011A5AC((uint64_t)v6), "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "locallyArmedClientHeartbeatSeconds")), "integerValue");
  else
    v1 = 300;
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v2 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v9 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "heartbeat timer configured to use %d seconds", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v7[0] = 67109120;
    v7[1] = v1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "heartbeat timer configured to use %d seconds", v7);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "int CLKappaNotifier::getLocalHeartbeatTimerSeconds()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10011A5A8(v6);
  return v1;
}

void sub_10143D3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

id sub_10143D3C8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v4 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "setting dem state = %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "setting dem state = %d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::requestDemFlatness(BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLDigitalElevationModel")), "updateComputeDemFlatnessMetric:", a2);
}

void sub_10143D640(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v3 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67109888;
    v20 = v4;
    v21 = 1024;
    v22 = v5;
    v23 = 1024;
    v24 = v6;
    v25 = 1024;
    v26 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "inject AOP trigger %d %d %d, delayUsec %d", buf, 0x1Au);
  }
  v8 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v8)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v9 = a2[1];
    v10 = a2[2];
    v11 = *((_DWORD *)a2 + 1);
    LOWORD(v15) = 1024;
    HIWORD(v15) = v9;
    v16 = v10;
    v17 = 1024;
    v18 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "inject AOP trigger %d %d %d, delayUsec %d", &v14, 26, 67109888, v15);
    v13 = (uint8_t *)v12;
    v8 = sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::injectTrigger(CMMotionCoprocessorCommand::Kappa::Trigger)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  sub_1001FBA94(v8, 3, a2, 0x18uLL);
}

uint64_t sub_10143E30C(uint64_t a1)
{
  const char *v1;

  v1 = *(const char **)(*(_QWORD *)(a1 + 112) + 40);
  if (!strcmp(v1, "triggered"))
    return 2;
  else
    return strcmp(v1, "armed") == 0;
}

BOOL sub_10143EA58()
{
  uint64_t v0;
  double v1;
  NSObject *v2;
  double v3;
  double v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  double v11;
  double v12;
  int v13;
  _QWORD v14[3];
  uint8_t buf[4];
  _QWORD v16[204];

  v12 = -1.0;
  v0 = sub_1001FD94C();
  sub_1001FD98C(v0, "CLIgneousTriggerProbability", &v12);
  v1 = v12;
  if (v12 <= -1.0)
    v1 = 1.0;
  v12 = v1;
  sub_1018BEA14(buf, "IgneousTriggerProbability", &v12, 0);
  v12 = *(double *)((char *)v16 + 4);
  if (*(double *)((char *)v16 + 4) > 1.0 || *(double *)((char *)v16 + 4) < 0.0)
  {
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v2 = qword_10229FFC8;
    if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "invalid trigger probability %f, ignoring", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v13 = 134217984;
      *(double *)v14 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 17, "invalid trigger probability %f, ignoring", COERCE_DOUBLE(&v13));
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKappaNotifier::shouldTriggerIgneous()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v12 = 0.0;
  }
  v3 = drand48();
  v4 = v12;
  if (qword_10229FFC0 != -1)
    dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
  v5 = qword_10229FFC8;
  if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    LODWORD(v16[0]) = v3 <= v4;
    WORD2(v16[0]) = 2048;
    *(double *)((char *)v16 + 6) = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "shouldTriggerIgneous,%d,TriggerProb,%f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v13 = 67109376;
    LODWORD(v14[0]) = v3 <= v4;
    WORD2(v14[0]) = 2048;
    *(double *)((char *)v14 + 6) = v12;
    LODWORD(v11) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 0, "shouldTriggerIgneous,%d,TriggerProb,%f", &v13, v11);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldTriggerIgneous()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return v3 <= v4;
}

void sub_10143EEA0(id a1)
{
  qword_10230F0F8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLKappaNotifierSilo"));
}

void sub_10143F080(id a1)
{
  sub_100197040();
  if ((sub_1001B7910() & 0x6000000000000) != 0)
    byte_10230F108 = 1;
}

void sub_10143F0C0()
{
  NSObject *v0;
  uint64_t v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v0 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Sending kSimulateTrustedCrashVerificaton to AOP", buf, 2u);
  }
  v1 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v1)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "Sending kSimulateTrustedCrashVerificaton to AOP", v4, 2);
    v3 = (uint8_t *)v2;
    v1 = sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::simulateTrustedCrashVerification()", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  sub_1001FBA94(v1, 12, 0, 0);
}

void sub_10143F268()
{
  NSObject *v0;
  uint64_t v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v0 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Sending kQueryTrustedCrashVerification to AOP", buf, 2u);
  }
  v1 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v1)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "Sending kQueryTrustedCrashVerification to AOP", v4, 2);
    v3 = (uint8_t *)v2;
    v1 = sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::queryTrustedCrashVerification()", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  sub_1001FBA94(v1, 13, 0, 0);
}

void sub_10143F3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B6C48);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021B6C48);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_10143F670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FFE30);
}

uint64_t sub_10143F684(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_QWORD *)buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_101444D18();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FFE31;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6C48);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_10143FAE0(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B6C48);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_10143FD60(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B6C48);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021B6C48);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1014400E8(uint64_t a1, int *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_1021B6D78;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  v6[3] = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_1014401BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1014401D0(uint64_t a1, signed __int32 *a2, _QWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_1021B6D78;
      v24[1] = 0;
      v24[3] = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_101445714();
    os_activity_scope_leave(&state);
  }
}

void sub_101440808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_101440854(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B6C48);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::listClients() [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B6C48);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::listClients() [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021B6C48);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B6C48);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::listClients() [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_101440DFC(id a1)
{
  qword_10229FDA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Kappa");
}

uint64_t sub_101440E28(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v8[8];
  uint8_t buf[1640];

  v3 = a1;
  switch(a2)
  {
    case 5:
      sub_101431A88(a1, a3);
      break;
    case 2:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v4 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "AOP is not armed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v8[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 16, "AOP is not armed", v8, 2);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 0, "virtual State *CLKappaNotifier::Idle::trigger(uint64_t, const void *)", "%s\n", v5);
        if (v6 != buf)
          free(v6);
      }
      break;
    case 1:
      if (*a3)
        return *(_QWORD *)(a1 + 48) + 184;
      break;
    default:
      return 0;
  }
  return v3;
}

uint64_t sub_101440FF8(uint64_t a1)
{
  sub_101431298();
  return sub_101438F54(*(_QWORD *)(a1 + 48));
}

void sub_101441020(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021ADC78;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_101441070(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result;
  int v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  NSObject *v22;
  uint64_t v23;
  unsigned __int8 v24;
  char v25;
  int v26;
  NSObject *v27;
  NSObject *v28;
  int v29;
  int v30;
  NSObject *v31;
  int v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  int v42;
  int v43;
  const char *v44;
  uint8_t *v45;
  int v46;
  int v47;
  const char *v48;
  uint8_t *v49;
  const char *v50;
  uint8_t *v51;
  const char *v52;
  uint8_t *v53;
  uint64_t v54;
  int v55;
  int v56;
  __int16 v57;
  int v58;
  uint8_t buf[4];
  int v60;
  __int16 v61;
  int v62;

  result = 0;
  switch(a2)
  {
    case 1:
      if (*a3)
        goto LABEL_62;
      return *(_QWORD *)(a1 + 48) + 128;
    case 2:
      v6 = *a3;
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v7 = qword_10229FFC8;
      if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v60 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "receive AOP trigger,igneousPath,%u", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFC0 != -1)
          dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
        v55 = 67109120;
        v56 = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 0, "receive AOP trigger,igneousPath,%u", &v55);
        v37 = (uint8_t *)v36;
        sub_100512490("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
      if ((v6 & 1) != 0)
      {
        v8 = *(_QWORD *)(a1 + 48);
        v9 = *(_DWORD *)(v8 + 420) + 1;
        *(_DWORD *)(v8 + 420) = v9;
        sub_101441D70(v8, v9);
      }
      return *(_QWORD *)(a1 + 48) + 240;
    case 5:
      sub_101431A88(0, a3);
      goto LABEL_62;
    case 6:
      sub_101432248(0, a3);
      goto LABEL_62;
    case 11:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v22 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "received kAOPArmClient", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        LOWORD(v55) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "received kAOPArmClient", &v55, 2);
        v41 = (uint8_t *)v40;
        sub_100512490("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v40);
        if (v41 != buf)
          free(v41);
      }
      v23 = *(_QWORD *)(a1 + 48);
      v24 = *a3;
      if ((*(_BYTE *)(v23 + 328) & *a3) == 0)
      {
        v25 = *(_BYTE *)(v23 + 329);
        if (!v25)
        {
          v26 = sub_10143D190();
          if (qword_10229FDA0 != -1)
            dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
          v27 = qword_10229FDA8;
          if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            v60 = v26;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "setting heartbeat to %d seconds", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FDA0 != -1)
              dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
            v55 = 67109120;
            v56 = v26;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "setting heartbeat to %d seconds", &v55);
            v51 = (uint8_t *)v50;
            sub_100512490("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v50);
            if (v51 != buf)
              free(v51);
          }
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 320), "setNextFireDelay:interval:", 1.0, (double)v26);
          v24 = *a3;
          v23 = *(_QWORD *)(a1 + 48);
          v25 = *(_BYTE *)(v23 + 329);
        }
        *(_BYTE *)(v23 + 329) = v25 | v24;
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v28 = qword_10229FDA8;
        if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
        {
          v29 = *a3;
          v30 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 329);
          *(_DWORD *)buf = 67109376;
          v60 = v29;
          v61 = 1024;
          v62 = v30;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "arm client %d locally armed bitmap %d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDA0 != -1)
            dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
          v42 = *a3;
          v43 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 329);
          v55 = 67109376;
          v56 = v42;
          v57 = 1024;
          v58 = v43;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "arm client %d locally armed bitmap %d", &v55, 14);
          v45 = (uint8_t *)v44;
          sub_100512490("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v44);
          if (v45 != buf)
            free(v45);
        }
        sub_101432A08(*(_QWORD *)(a1 + 48), a3);
      }
      goto LABEL_62;
    case 12:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v10 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "received kAOPDisarmClient", buf, 2u);
      }
      v11 = sub_1001BFF7C(115, 2);
      if ((_DWORD)v11)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        LOWORD(v55) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "received kAOPDisarmClient", &v55, 2);
        v39 = (uint8_t *)v38;
        v11 = sub_100512490("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
      sub_101433FC0(v11, (uint64_t)a3);
      v12 = *(unsigned __int8 **)(a1 + 48);
      v13 = *a3;
      v14 = v12[328];
      if ((v14 & v13) != 0)
      {
        v12[328] = v14 & ~v12[330];
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v15 = qword_10229FDA8;
        if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
        {
          v16 = *(_QWORD *)(a1 + 48);
          v17 = *(unsigned __int8 *)(v16 + 330);
          LODWORD(v16) = *(unsigned __int8 *)(v16 + 328);
          *(_DWORD *)buf = 67109376;
          v60 = v17;
          v61 = 1024;
          v62 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "disarm remote %d remote armed bitmap %d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDA0 != -1)
            dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
          v18 = *(_QWORD *)(a1 + 48);
          v19 = *(unsigned __int8 *)(v18 + 330);
          LODWORD(v18) = *(unsigned __int8 *)(v18 + 328);
          v55 = 67109376;
          v56 = v19;
          v57 = 1024;
          v58 = v18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "disarm remote %d remote armed bitmap %d", &v55, 14);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
      }
      else
      {
        v12[329] &= ~(_BYTE)v13;
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v31 = qword_10229FDA8;
        if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
        {
          v32 = *a3;
          v33 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 329);
          *(_DWORD *)buf = 67109376;
          v60 = v32;
          v61 = 1024;
          v62 = v33;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "disarm client %d locally armed bitmap %d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDA0 != -1)
            dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
          v46 = *a3;
          v47 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 329);
          v55 = 67109376;
          v56 = v46;
          v57 = 1024;
          v58 = v47;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "disarm client %d locally armed bitmap %d", &v55, 14);
          v49 = (uint8_t *)v48;
          sub_100512490("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v48);
          if (v49 != buf)
            free(v49);
        }
        v34 = *(_QWORD *)(a1 + 48);
        if (!*(_BYTE *)(v34 + 329))
        {
          if (qword_10229FDA0 != -1)
            dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
          v35 = qword_10229FDA8;
          if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "turning off heartbeat", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FDA0 != -1)
              dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
            LOWORD(v55) = 0;
            LODWORD(v54) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "turning off heartbeat", &v55, v54);
            v53 = (uint8_t *)v52;
            sub_100512490("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v52);
            if (v53 != buf)
              free(v53);
          }
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 320), "setNextFireDelay:interval:", 1.79769313e308, 1.79769313e308);
          v34 = *(_QWORD *)(a1 + 48);
        }
        sub_1014331F8(v34, a3);
      }
      goto LABEL_62;
    case 13:
      sub_1014339E8(*(_QWORD *)(a1 + 48), a3);
LABEL_62:
      result = a1;
      break;
    default:
      return result;
  }
  return result;
}

id sub_101441CC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_101441F3C(1u);
  sub_1001FBA94(v2, 1, 0, 0);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 560);
  if (v4)
  {
    objc_msgSend(*(id *)(v4 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v4 + 8), 5, 0);
    v3 = *(_QWORD *)(a1 + 48);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(v3 + 600) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(v3 + 600) + 8), 0, 0);
}

void sub_101441D24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 560);
  if (v2)
  {
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 5);
    v1 = *(_QWORD *)(a1 + 48);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(v1 + 600) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v1 + 600) + 8), 0);
  sub_101441F3C(0);
}

void sub_101441D70(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v7 = a2;
  v2 = sub_1001FD94C();
  sub_10011B4E4(v2, "CLIgneousMotionTriggerCount", &v7);
  v3 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 944))(v3);
  if (qword_10229FFC0 != -1)
    dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
  v4 = qword_10229FFC8;
  if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "save Igneous motion trigger count,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v8[0] = 67109120;
    v8[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 0, "save Igneous motion trigger count,%d", v8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::saveIgneousMotionTriggerCount(int)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_101441F3C(unsigned int a1)
{
  NSObject *v2;
  kern_return_t v3;
  NSObject *v4;
  CFDictionaryRef v5;
  const __CFDictionary *v6;
  io_service_t MatchingService;
  kern_return_t v8;
  NSObject *v9;
  NSObject *v10;
  kern_return_t v11;
  NSObject *v12;
  kern_return_t v13;
  NSObject *v14;
  kern_return_t v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  io_connect_t connect;
  mach_port_t connection[2];
  void *keys;
  uint32_t outputCnt;
  int v39;
  kern_return_t v40;
  uint64_t input[2];
  void *values[2];
  mach_port_t mainPort[2];
  unint64_t v44;
  uint8_t buf[8];
  char v46;

  mainPort[0] = 0;
  if (IOMainPort(bootstrap_port, mainPort))
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v2 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Failed to get IOMainPort.\n", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(values[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "Failed to get IOMainPort.\n", values, 2);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "BOOL deviceHasSecureAudioController()", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    outputCnt = 0;
    goto LABEL_8;
  }
  outputCnt = 0;
  if (!IORegistryEntryFromPath(mainPort[0], "IODeviceTree:/arm-io/iop-audio-controller"))
  {
LABEL_8:
    sub_1015A2E04(buf, "AppleAOPAudioController");
    sub_101442B88((io_service_t *)&keys, (uint64_t)buf);
    if (v46 < 0)
      operator delete(*(void **)buf);
    sub_101442C78(connection, (io_service_t *)&keys);
    *(_QWORD *)mainPort = 6;
    v44 = a1;
    v3 = IOConnectCallScalarMethod(connection[0], 5u, (const uint64_t *)mainPort, 2u, 0, &outputCnt);
    if (v3)
    {
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v4 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "IOConnectCallScalarMethod failed 0x%08x", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        LODWORD(values[0]) = 67109120;
        HIDWORD(values[0]) = v3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 17, "IOConnectCallScalarMethod failed 0x%08x", values);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 0, "void AOPAudio_toggle(BOOL)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
    }
    sub_101442D30(connection);
    sub_101442D60((io_object_t *)&keys);
    return;
  }
  *(_QWORD *)connection = CFSTR("lai ");
  keys = CFSTR("identifier");
  v5 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)connection, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_QWORD *)mainPort = CFSTR("IONameMatch");
  v44 = (unint64_t)CFSTR("IOPropertyMatch");
  values[0] = CFSTR("IOPAudioClientManagerDevice");
  values[1] = v5;
  v6 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)mainPort, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
  CFRelease(v5);
  connect = 0;
  v8 = IOServiceOpen(MatchingService, mach_task_self_, 2u, &connect);
  if (v8)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v9 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "IOServiceOpen failed 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LODWORD(input[0]) = 67109120;
      HIDWORD(input[0]) = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 17, "IOServiceOpen failed 0x%08x", input);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 0, "void AOPAudio_toggle(BOOL)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }
  if (!connect)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v10 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Failed to create ioconnect", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      LOWORD(input[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 17, "Failed to create ioconnect", input, 2);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 0, "void AOPAudio_toggle(BOOL)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  input[0] = 1;
  v11 = IOConnectCallScalarMethod(connect, a1 ^ 1, input, 1u, 0, 0);
  if (v11)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v12 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "IOConnectCallScalarMethod failed 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v39 = 67109120;
      v40 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 17, "IOConnectCallScalarMethod failed 0x%08x", &v39);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 0, "void AOPAudio_toggle(BOOL)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
  v13 = IOServiceClose(connect);
  if (v13)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v14 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "IOServiceClose failed 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v39 = 67109120;
      v40 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 17, "IOServiceClose failed 0x%08x", &v39);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 0, "void AOPAudio_toggle(BOOL)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
  }
  v15 = IOObjectRelease(MatchingService);
  if (v15)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    v16 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "IOConnectCallScalarMethod failed 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
      v39 = 67109120;
      v40 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 17, "IOConnectCallScalarMethod failed 0x%08x", &v39);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 0, "void AOPAudio_toggle(BOOL)", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v17 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "AOPAudio_toggle command success", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
    LOWORD(v39) = 0;
    LODWORD(v34) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "AOPAudio_toggle command success", &v39, v34);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void AOPAudio_toggle(BOOL)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
}

void sub_101442B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, io_connect_t a12, int a13, io_object_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_101442D30(&a12);
  sub_101442D60(&a14);
  _Unwind_Resume(a1);
}

io_service_t *sub_101442B88(io_service_t *a1, uint64_t a2)
{
  const char *v4;
  const __CFDictionary *v5;
  io_service_t MatchingService;
  std::runtime_error *exception;
  uint64_t v9;
  std::runtime_error *v10;
  std::string v11;

  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  v5 = IOServiceNameMatching(v4);
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v5);
  *a1 = MatchingService;
  if (!MatchingService)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = a2;
    v10 = exception;
    std::operator+<char>(&v11, "Could not create ioservice: ", v9);
    std::runtime_error::runtime_error(v10, &v11);
  }
  return a1;
}

void sub_101442C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

io_connect_t *sub_101442C78(io_connect_t *connect, io_service_t *a2)
{
  kern_return_t v3;
  mach_error_t v5;
  std::runtime_error *exception;
  char *v7;

  v3 = IOServiceOpen(*a2, mach_task_self_, 0, connect);
  if (v3)
  {
    v5 = v3;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v7 = mach_error_string(v5);
    std::runtime_error::runtime_error(exception, v7);
    goto LABEL_6;
  }
  if (!*connect)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not create ioconnect");
LABEL_6:
  }
  return connect;
}

void sub_101442D18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

io_connect_t *sub_101442D30(io_connect_t *a1)
{
  io_connect_t v2;

  v2 = *a1;
  if (v2)
    IOServiceClose(v2);
  return a1;
}

io_object_t *sub_101442D60(io_object_t *a1)
{
  io_object_t v2;

  v2 = *a1;
  if (v2)
    IOObjectRelease(v2);
  return a1;
}

uint64_t sub_101442D90(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  id v5;
  _QWORD v7[5];

  v4 = (_QWORD *)sub_1012E9AB0(a1, (uint64_t)"triggered", a2 + 184);
  *v4 = off_1021B6B78;
  v4[6] = a2;
  v5 = objc_msgSend(*(id *)(a2 + 40), "newTimer");
  *(_QWORD *)(a1 + 56) = v5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101442E50;
  v7[3] = &unk_10212ECA0;
  v7[4] = a1;
  objc_msgSend(v5, "setHandler:", v7);
  return a1;
}

void sub_101442E24(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1021ADC78;
  v3 = (void *)v1[2];
  if (v3)
  {
    v1[3] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_101442E50(uint64_t a1)
{
  sub_1012E9D50(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 112, 4, 0);
}

uint64_t sub_101442E68(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 3) < 2)
    return *(_QWORD *)(a1 + 48) + 184;
  if (a2 != 2)
    return 0;
  objc_msgSend(*(id *)(a1 + 56), "setNextFireDelay:interval:", 660.0, 1.79769313e308);
  return *(_QWORD *)(a1 + 48) + 240;
}

id sub_101442ECC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 560);
  if (v2)
  {
    objc_msgSend(*(id *)(v2 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v2 + 8), 0, 0);
    sub_10143D3C8(*(_QWORD *)(a1 + 48), 1);
  }
  return objc_msgSend(*(id *)(a1 + 56), "setNextFireDelay:interval:", 660.0, 1.79769313e308);
}

_QWORD *sub_101442F24(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 48);
  if (result[70])
  {
    sub_10143D3C8((uint64_t)result, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 560) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 560) + 8), 0);
    result = *(_QWORD **)(a1 + 48);
  }
  result[46] = 0;
  result[47] = 0;
  result[48] = 0;
  return result;
}

void sub_101442F74(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021ADC78;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_101442FC4(uint64_t a1)
{
  double Current;
  id v3;
  id v4;
  _QWORD v5[5];

  Current = CFAbsoluteTimeGetCurrent();
  if (Current - *(double *)(a1 + 456) > *(double *)(a1 + 448))
  {
    *(double *)(a1 + 456) = Current;
    v3 = +[SafetyAlerts sharedInterface](SafetyAlerts, "sharedInterface");
    v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "queue");
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_101443228;
    v5[3] = &unk_1021B6BC8;
    v5[4] = a1;
    objc_msgSend(v3, "fetchIsSaewEnabledOnQueue:withReply:", v4, v5);
  }
}

void sub_10144305C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  HIBYTE(v7) = a2;
  v2 = sub_1001FD94C();
  sub_10011B47C(v2, "CLIgneousArmStatus", (_BYTE *)&v7 + 7);
  v3 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 944))(v3);
  if (qword_10229FFC0 != -1)
    dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
  v4 = qword_10229FFC8;
  if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v10 = HIBYTE(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "saved Igneous arm status,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v8[0] = 67240192;
    v8[1] = HIBYTE(v7);
    LODWORD(v7) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 2, "saved Igneous arm status,%{public}d", v8, v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::saveIgneousArmStatus(BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_101443228(uint64_t a1, char a2, void *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  unsigned int v17;
  int v18;
  uint8_t *v19;
  uint64_t v20;
  uint8_t buf[4];
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  unsigned int v32;

  if (a3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("saEnablementStateInCountry")), "BOOLValue");
    v7 = objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("saEnablementStateInCoverageArea")), "BOOLValue");
    v8 = objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("saEnablementStateOptedIn")), "BOOLValue");
    v9 = objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("saEmergencyAlertSwitchEnabled")), "BOOLValue");
    if (objc_msgSend(a3, "objectForKey:", CFSTR("saMotionHarvestAllowed")))
    {
      v10 = objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("saMotionHarvestAllowed")), "BOOLValue");
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v11 = qword_10229FFC8;
      if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v22 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "received harvestAllowed,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFC0 != -1)
          dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
        LODWORD(v20) = 67109120;
        HIDWORD(v20) = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 0, "received harvestAllowed,%d", &v20);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::checkSaewEnablement()_block_invoke", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
    }
    else
    {
      v10 = 0;
    }
    *(_BYTE *)(v5 + 317) = a2 | v10;
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v16 = qword_10229FFC8;
    if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(unsigned __int8 *)(v5 + 317);
      *(_DWORD *)buf = 67110400;
      v22 = v17;
      v23 = 1024;
      v24 = v6;
      v25 = 1024;
      v26 = v7;
      v27 = 1024;
      v28 = v8;
      v29 = 1024;
      v30 = v9;
      v31 = 1024;
      v32 = v10;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "SAEW enabled,%d,country,%d,coverage,%d,optedIn,%d,emergency,%d,harvestAllowed,%d\n", buf, 0x26u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v18 = *(unsigned __int8 *)(v5 + 317);
    LODWORD(v20) = 67110400;
    HIDWORD(v20) = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 0, "SAEW enabled,%d,country,%d,coverage,%d,optedIn,%d,emergency,%d,harvestAllowed,%d\n", &v20, 38, v20);
LABEL_30:
    v19 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::checkSaewEnablement()_block_invoke", "%s\n", v15);
    if (v19 != buf)
      free(v19);
    return;
  }
  if (qword_10229FFC0 != -1)
    dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
  v14 = qword_10229FFC8;
  if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "isSaewEnabledAsync invalid context", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 0, "isSaewEnabledAsync invalid context");
    goto LABEL_30;
  }
}

void sub_1014436F8(id a1)
{
  qword_10229FFC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Igneous");
}

void sub_101443724(id a1)
{
  qword_10230F120 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileActivation.framework/MobileActivation", 2);
}

uint64_t sub_10144374C()
{
  if (qword_10230F118 != -1)
    dispatch_once(&qword_10230F118, &stru_1021B6C08);
  off_1022FFE28 = (uint64_t (*)())dlsym((void *)qword_10230F120, "MAGetActivationState");
  return off_1022FFE28();
}

void sub_1014437A0(uint64_t a1)
{
  double Current;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  unint64_t v20;
  double v21;
  const char *v22;
  char *v23;
  int v24;
  int v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  double v35;
  double v36;
  int v37;
  _BYTE v38[10];
  _BYTE v39[10];
  double v40;
  __int16 v41;
  double v42;
  _BYTE buf[24];
  double v44;
  __int128 v45;
  const char *v46;

  Current = CFAbsoluteTimeGetCurrent();
  v36 = Current;
  v35 = 0.0;
  v3 = sub_1001FD94C();
  sub_1001FD98C(v3, "CLIgneousScheduledEnableLastRenewTime", &v35);
  if (Current - v35 > *(double *)(a1 + 440))
  {
    v4 = drand48() * *(double *)(a1 + 440);
    v5 = sub_1001FD94C();
    sub_10018A4CC(v5, "CLIgneousScheduledEnableLastRenewTime", &v36);
    v6 = sub_1001FD94C();
    *(double *)buf = v4 + v36;
    sub_10018A4CC(v6, "CLIgneousScheduledEnableStartTime", buf);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v7 = qword_10229FFC8;
    if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = v4 + v36 + *(double *)(a1 + 432);
      *(_DWORD *)buf = 134349824;
      *(double *)&buf[4] = v36;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v4;
      *(_WORD *)&buf[22] = 2050;
      v44 = v4 + v36;
      LOWORD(v45) = 2050;
      *(double *)((char *)&v45 + 2) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "renewed Igneous random arm session,now,%{public}f,delay,%{public}f,startTime,%{public}f,endTime,%{public}f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v21 = v4 + v36 + *(double *)(a1 + 432);
      v37 = 134349824;
      *(double *)v38 = v36;
      *(_WORD *)&v38[8] = 2050;
      *(double *)v39 = v4;
      *(_WORD *)&v39[8] = 2050;
      v40 = v4 + v36;
      v41 = 2050;
      v42 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 0, "renewed Igneous random arm session,now,%{public}f,delay,%{public}f,startTime,%{public}f,endTime,%{public}f", &v37, 42);
      v23 = (char *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::scheduleRandomArmSessionIgneous()", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    v9 = sub_1001FD94C();
    sub_10011B4E4(v9, "CLIgneousArmMinutes", (const void *)(a1 + 424));
    v10 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 944))(v10);
    *(_DWORD *)(a1 + 420) = 0;
    sub_101441D70(a1, 0);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v11 = qword_10229FFC8;
    if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_DWORD *)(a1 + 424);
      v13 = *(_DWORD *)(a1 + 428);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v13;
      *(_WORD *)&buf[14] = 2050;
      *(double *)&buf[16] = v36;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "replenish Igneous arm minutes,%{public}d,max motion trigger count,%{public}d,timestamp,%{public}f", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v24 = *(_DWORD *)(a1 + 424);
      v25 = *(_DWORD *)(a1 + 428);
      v37 = 67240704;
      *(_DWORD *)v38 = v24;
      *(_WORD *)&v38[4] = 1026;
      *(_DWORD *)&v38[6] = v25;
      *(_WORD *)v39 = 2050;
      *(double *)&v39[2] = v36;
      LODWORD(v34) = 24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 0, "replenish Igneous arm minutes,%{public}d,max motion trigger count,%{public}d,timestamp,%{public}f", &v37, v34);
      v27 = (char *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::scheduleRandomArmSessionIgneous()", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    if (*(_BYTE *)(a1 + 418))
    {
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v14 = qword_10229FFC8;
      if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(_QWORD *)(a1 + 408);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "unregister on DAS,%s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFC0 != -1)
          dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
        v28 = *(_QWORD *)(a1 + 408);
        v37 = 136315138;
        *(_QWORD *)v38 = v28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 0, "unregister on DAS,%s", (const char *)&v37);
        v30 = (char *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::scheduleRandomArmSessionIgneous()", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      xpc_activity_unregister(*(const char **)(a1 + 408));
    }
    v16 = *(const char **)(a1 + 408);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_101443FA8;
    v44 = COERCE_DOUBLE(&unk_1021B6C28);
    *(_QWORD *)&v45 = a1;
    *((_QWORD *)&v45 + 1) = vcvtpd_s64_f64(v4);
    v46 = v16;
    xpc_activity_register(v16, XPC_ACTIVITY_CHECK_IN, buf);
    *(_BYTE *)(a1 + 418) = 1;
    if (*(_BYTE *)(a1 + 417))
    {
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v17 = qword_10229FFC8;
      if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *(_QWORD *)(a1 + 400);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "unregister on DAS,%s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFC0 != -1)
          dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
        v31 = *(_QWORD *)(a1 + 400);
        v37 = 136315138;
        *(_QWORD *)v38 = v31;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 0, "unregister on DAS,%s", (const char *)&v37);
        v33 = (char *)v32;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::scheduleRandomArmSessionIgneous()", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      xpc_activity_unregister(*(const char **)(a1 + 400));
    }
    v19 = *(const char **)(a1 + 400);
    v20 = vcvtpd_s64_f64(v4 + *(double *)(a1 + 432));
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_101443FA8;
    v44 = COERCE_DOUBLE(&unk_1021B6C28);
    *(_QWORD *)&v45 = a1;
    *((_QWORD *)&v45 + 1) = v20;
    v46 = v19;
    xpc_activity_register(v19, XPC_ACTIVITY_CHECK_IN, buf);
    *(_BYTE *)(a1 + 417) = 1;
  }
}

BOOL sub_101443F30(uint64_t a1)
{
  double Current;
  uint64_t v3;
  double v5;

  Current = CFAbsoluteTimeGetCurrent();
  v5 = 0.0;
  v3 = sub_1001FD94C();
  sub_1001FD98C(v3, "CLIgneousScheduledEnableStartTime", &v5);
  return Current > v5 && Current < v5 + *(double *)(a1 + 432);
}

void sub_101443FA8(_QWORD *a1, xpc_activity_t activity)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  CFAbsoluteTime Current;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  CFAbsoluteTime v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  CFAbsoluteTime v19;
  const char *v20;
  NSObject *v21;
  uint64_t v22;
  CFAbsoluteTime v23;
  uint64_t v24;
  uint64_t v25;
  CFAbsoluteTime v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  CFAbsoluteTime v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  CFAbsoluteTime v36;
  uint64_t v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  CFAbsoluteTime v42;
  const char *v43;
  uint8_t *v44;
  double v45;
  int v46;
  uint64_t v47;
  __int16 v48;
  CFAbsoluteTime v49;
  __int16 v50;
  uint64_t v51;
  uint8_t buf[4];
  uint64_t v53;
  __int16 v54;
  CFAbsoluteTime v55;
  __int16 v56;
  uint64_t v57;

  v4 = a1[4];
  if (!xpc_activity_get_state(activity))
  {
    sub_1014446B8(v4, activity, a1[5]);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v5 = qword_10229FFC8;
    if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[6];
      Current = CFAbsoluteTimeGetCurrent();
      v8 = a1[5];
      *(_DWORD *)buf = 136315650;
      v53 = v6;
      v54 = 2048;
      v55 = Current;
      v56 = 2048;
      v57 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "register on DAS,%s,now,%f,delay,%lld", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v34 = qword_10229FFC8;
      v35 = a1[6];
      v36 = CFAbsoluteTimeGetCurrent();
      v37 = a1[5];
      v46 = 136315650;
      v47 = v35;
      v48 = 2048;
      v49 = v36;
      v50 = 2048;
      v51 = v37;
      LODWORD(v45) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 0, "register on DAS,%s,now,%f,delay,%lld", (const char *)&v46, v45);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::scheduleXPCTaskIgneous(const char *, const int64_t)_block_invoke", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
  }
  if (xpc_activity_get_state(activity) == 2)
  {
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v9 = qword_10229FFC8;
    if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = a1[6];
      v11 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)buf = 136315394;
      v53 = v10;
      v54 = 2048;
      v55 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "get run time on DAS,%s,now,%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v29 = qword_10229FFC8;
      v30 = a1[6];
      v31 = CFAbsoluteTimeGetCurrent();
      v46 = 136315394;
      v47 = v30;
      v48 = 2048;
      v49 = v31;
      LODWORD(v45) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 0, "get run time on DAS,%s,now,%f", (const char *)&v46, v45);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::scheduleXPCTaskIgneous(const char *, const int64_t)_block_invoke", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    v12 = sub_10143675C((_BYTE *)v4);
    v13 = sub_101436B7C((_BYTE *)v4);
    v14 = sub_101437070(v4);
    v15 = 0x10000;
    if (!v14)
      v15 = 0;
    v16 = 256;
    if (!v13)
      v16 = 0;
    sub_101444788(v4, v16 | v12 | v15);
    if (xpc_activity_set_state(activity, 5))
    {
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v17 = qword_10229FFC8;
      if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
      {
        v18 = a1[6];
        v19 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)buf = 136315394;
        v53 = v18;
        v54 = 2048;
        v55 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "finish on DAS,%s,now,%f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFC0 != -1)
          dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
        v40 = qword_10229FFC8;
        v41 = a1[6];
        v42 = CFAbsoluteTimeGetCurrent();
        v46 = 136315394;
        v47 = v41;
        v48 = 2048;
        v49 = v42;
        LODWORD(v45) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 0, "finish on DAS,%s,now,%f", (const char *)&v46, v45);
        v44 = (uint8_t *)v43;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::scheduleXPCTaskIgneous(const char *, const int64_t)_block_invoke", "%s\n", v43);
        if (v44 != buf)
          free(v44);
      }
      v20 = (const char *)a1[6];
      if (!strcmp(v20, *(const char **)(v4 + 392)))
      {
        *(_BYTE *)(v4 + 416) = 0;
      }
      else if (!strcmp(v20, *(const char **)(v4 + 400)))
      {
        *(_BYTE *)(v4 + 417) = 0;
      }
      else if (!strcmp(v20, *(const char **)(v4 + 408)))
      {
        *(_BYTE *)(v4 + 418) = 0;
      }
    }
    else
    {
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v21 = qword_10229FFC8;
      if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
      {
        v22 = a1[6];
        v23 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)buf = 136315394;
        v53 = v22;
        v54 = 2048;
        v55 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "error on DAS,%s,now,%f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFC0 != -1)
          dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
        v24 = qword_10229FFC8;
        v25 = a1[6];
        v26 = CFAbsoluteTimeGetCurrent();
        v46 = 136315394;
        v47 = v25;
        v48 = 2048;
        v49 = v26;
        LODWORD(v45) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "error on DAS,%s,now,%f", (const char *)&v46, v45);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::scheduleXPCTaskIgneous(const char *, const int64_t)_block_invoke", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
    }
  }
}

void sub_1014446B8(uint64_t a1, _xpc_activity_s *a2, int64_t a3)
{
  xpc_object_t v5;

  v5 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_string(v5, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_int64(v5, XPC_ACTIVITY_DELAY, a3);
  xpc_dictionary_set_int64(v5, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_5_MIN);
  xpc_activity_set_criteria(a2, v5);
  xpc_release(v5);
}

void sub_101444788(uint64_t a1, int a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  char v6;
  double Current;
  double v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  __int16 v18;
  char v19;
  int v20;
  double v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  double v25;
  __int16 v26;
  int v27;

  v18 = a2;
  v19 = BYTE2(a2);
  sub_1001FBA94(a1, 10, &v18, 3uLL);
  buf[0] = 0;
  v3 = sub_1001FD94C();
  sub_1001E4874(v3, "CLIgneousArmStatus", (BOOL *)buf);
  if (buf[0])
    v4 = 1;
  else
    v4 = v19 == 0;
  if (!v4)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v8 = Current;
    v17 = Current;
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
    v9 = qword_10229FFC8;
    if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(unsigned __int8 *)(a1 + 314);
      *(_DWORD *)buf = 134218240;
      v25 = v8;
      v26 = 1024;
      v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "save Igneous arm session startTime,%f,isCharging,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v14 = *(unsigned __int8 *)(a1 + 314);
      v20 = 134218240;
      v21 = v8;
      v22 = 1024;
      v23 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 2, "save Igneous arm session startTime,%f,isCharging,%d", COERCE_DOUBLE(&v20), 18);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::_updateAOPArmStatus(CMMotionCoprocessorCommand::Kappa::EnableClient)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v11 = sub_1001FD94C();
    sub_10018A4CC(v11, "CLIgneousArmSessionStartTime", &v17);
    v12 = sub_1001FD94C();
    sub_10011B47C(v12, "CLIgneousArmSessionIsCharging", (_BYTE *)(a1 + 314));
    v13 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 944))(v13);
    *(CFAbsoluteTime *)(a1 + 464) = CFAbsoluteTimeGetCurrent();
    v5 = a1;
    v6 = 1;
    goto LABEL_15;
  }
  if (buf[0] && !v19)
  {
    *(_QWORD *)(a1 + 464) = 0;
    v5 = a1;
    v6 = 0;
LABEL_15:
    sub_10144305C(v5, v6);
  }
  sub_101444A1C(a1);
}

void sub_101444A1C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  double Current;
  double v7;
  double v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _DWORD v16[2];
  __int16 v17;
  double v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  double v22;

  *(_DWORD *)buf = 0;
  v2 = sub_1001FD94C();
  sub_1001E4B84(v2, "CLIgneousArmMinutes", buf);
  v3 = *(_DWORD *)buf;
  buf[0] = 0;
  v4 = sub_1001FD94C();
  sub_1001E4874(v4, "CLIgneousArmStatus", (BOOL *)buf);
  v5 = buf[0];
  Current = CFAbsoluteTimeGetCurrent();
  if (v5)
  {
    v7 = Current;
    v8 = *(double *)(a1 + 464);
    if (v8 > 0.0)
    {
      v9 = llround((v7 - v8) / 60.0);
      HIDWORD(v15) = (v3 - v9) & ~((int)(v3 - v9) >> 31);
      *(double *)(a1 + 464) = v7;
      v10 = sub_1001FD94C();
      sub_10011B4E4(v10, "CLIgneousArmMinutes", (char *)&v15 + 4);
      v11 = sub_1001FD94C();
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 944))(v11);
      if (qword_10229FFC0 != -1)
        dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
      v12 = qword_10229FFC8;
      if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240448;
        v20 = HIDWORD(v15);
        v21 = 2050;
        v22 = v7;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "saved Igneous arm minutes,%{public}d,now,%{public}f", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFC0 != -1)
          dispatch_once(&qword_10229FFC0, &stru_1021B6BE8);
        v16[0] = 67240448;
        v16[1] = HIDWORD(v15);
        v17 = 2050;
        v18 = v7;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFC8, 2, "saved Igneous arm minutes,%{public}d,now,%{public}f", v16, v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::saveIgneousArmMinutes()", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

void sub_101444C84(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

id *sub_101444CB0(id **a1, id *a2)
{
  id *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100DE29C8(result);
    operator delete();
  }
  return result;
}

void sub_101444CEC(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_101444D18()
{
  operator new();
}

_BYTE *sub_101444DA8(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  int *v15;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    sub_101444EA4(a4, a2);
    v10 = v9;
    v11 = *(_QWORD *)a3 + 80;
    v12 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v15 = (int *)(*(_QWORD *)a2 + 32);
    v13 = sub_1001AFE94(v12, v15, (uint64_t)&unk_101B9EB60, &v15);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v14);
  }
  return result;
}

uint64_t sub_101444E84(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_101444EA4(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
  {
    sub_101444F1C(a1);
  }
  else
  {
    v5 = objc_opt_class(CLCppContainer, v4);
    if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0)
      sub_1014452A4(a1);
  }
}

void sub_101444F1C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
  {
    sub_101445650((uint64_t)&v7 + 7, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B6D48);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101CA49E4 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021B6D48);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
LABEL_21:
      v6 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLKappaNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B6D48);
    v5 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101CA49E4 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021B6D48);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
      goto LABEL_21;
    }
  }
}

id sub_1014452A4(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B6D48);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101CA49E4 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B6D48);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B6D48);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101CA49E4 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B6D48);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLKappaNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_101445650(uint64_t a1, void *a2)
{
  std::__shared_weak_count *v3;

  if (objc_msgSend(a2, "cppObjectPtr")
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221DC88))
  {
    goto LABEL_5;
  }
  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)8)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    objc_msgSend(a2, "cppObjectPtr");
    return;
  }
  v3 = (std::__shared_weak_count *)sub_101954BC8();
  sub_1014456C4(v3);
}

void sub_1014456C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021B6D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1014456D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021B6D78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_101445714()
{
  operator new();
}

void sub_1014457A4(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        sub_101444EA4(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, uint64_t, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_101444DA8(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B6C48);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021B6C48);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

uint64_t sub_101445B78(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_101445B98()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CA46A8;
      v1[3] = unk_101CA46B8;
      v1[4] = xmmword_101CA46C8;
      v1[0] = xmmword_101CA4688;
      v1[1] = unk_101CA4698;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_101445C6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_101445F80(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 2)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      *(_BYTE *)(a1 + 16) |= 1u;
      while (1)
      {
        v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0)
          goto LABEL_40;
        v17 += 7;
        v9 = v18++ >= 9;
        if (v9)
        {
          LODWORD(v19) = 0;
          goto LABEL_42;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v19) = 0;
LABEL_42:
      *(_DWORD *)(a1 + 8) = v19;
    }
    else if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_36;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          v14 = 0;
          goto LABEL_38;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v14 = 0;
LABEL_38:
      *(_BYTE *)(a1 + 12) = v14 != 0;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10144648C(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;

  *(_QWORD *)a1 = off_102153490;
  *(_BYTE *)(a1 + 8) = 1;
  v3 = (_BYTE *)(a1 + 12820);
  *(_QWORD *)(a1 + 24) = 0x10000000000;
  *(_DWORD *)(a1 + 20) = 1031798784;
  *(_BYTE *)(a1 + 1056) = 1;
  *(_QWORD *)(a1 + 1072) = 0x10000000000;
  *(_DWORD *)(a1 + 1068) = 1031798784;
  *(_QWORD *)(a1 + 2104) = a2;
  *(_QWORD *)(a1 + 2112) = 0;
  *(_DWORD *)(a1 + 2120) = 50;
  *(_BYTE *)(a1 + 2124) = 1;
  *(_DWORD *)(a1 + 2144) = 256;
  *(_QWORD *)(a1 + 2136) = 1031798784;
  *(_BYTE *)(a1 + 3172) = 1;
  *(_DWORD *)(a1 + 3192) = 256;
  *(_QWORD *)(a1 + 3184) = 1031798784;
  *(_BYTE *)(a1 + 4220) = 1;
  *(_DWORD *)(a1 + 4240) = 256;
  *(_QWORD *)(a1 + 4232) = 1031798784;
  *(_QWORD *)(a1 + 5272) = 0;
  *(_DWORD *)(a1 + 5280) = 25;
  *(_BYTE *)(a1 + 5284) = 1;
  *(_DWORD *)(a1 + 5304) = 256;
  *(_QWORD *)(a1 + 5296) = 1031798784;
  *(_BYTE *)(a1 + 6332) = 1;
  *(_DWORD *)(a1 + 6352) = 256;
  *(_QWORD *)(a1 + 6344) = 1031798784;
  *(_BYTE *)(a1 + 7380) = 1;
  *(_DWORD *)(a1 + 7400) = 256;
  *(_QWORD *)(a1 + 7392) = 1031798784;
  sub_1014022D8(a1 + 8432);
  *(_BYTE *)(a1 + 10724) = 1;
  *(_OWORD *)(a1 + 10708) = 0u;
  *(_OWORD *)(a1 + 10680) = 0u;
  *(_OWORD *)(a1 + 10696) = 0u;
  *(_OWORD *)(a1 + 10648) = 0u;
  *(_OWORD *)(a1 + 10664) = 0u;
  *(_OWORD *)(a1 + 10632) = 0u;
  *(_DWORD *)(a1 + 10744) = 256;
  *(_QWORD *)(a1 + 10736) = 1031798784;
  *(_BYTE *)(a1 + 11772) = 1;
  *(_DWORD *)(a1 + 11792) = 256;
  *(_QWORD *)(a1 + 11784) = 1031798784;
  *v3 = 1;
  *(_DWORD *)(a1 + 12840) = 256;
  *(_QWORD *)(a1 + 12832) = 1031798784;
  v3[1048] = 0;
  *(_DWORD *)(a1 + 13872) = 0;
  *(_DWORD *)(a1 + 5300) = 0;
  *(_DWORD *)(a1 + 6348) = 0;
  *(_DWORD *)(a1 + 7396) = 0;
  *(_DWORD *)(a1 + 2140) = 0;
  *(_DWORD *)(a1 + 3188) = 0;
  *(_DWORD *)(a1 + 4236) = 0;
  *(_OWORD *)(a1 + 13880) = 0u;
  *(_QWORD *)(a1 + 13896) = 0;
  return a1;
}

float sub_1014465F4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6, int a7)
{
  uint64_t v13;
  uint64_t i;
  float result;

  if (a7)
  {
    (*(void (**)(uint64_t, unsigned __int16 *, _DWORD *))(*(_QWORD *)a1 + 24))(a1, a2 + 6, a3);
    (*(void (**)(uint64_t, unsigned __int16 *, _DWORD *))(*(_QWORD *)a1 + 24))(a1, a2 + 530, a4);
    (*(void (**)(uint64_t, unsigned __int16 *, _DWORD *))(*(_QWORD *)a1 + 24))(a1, a2 + 1054, a5);
  }
  else
  {
    v13 = a1 + 8432;
    sub_1014022DC(a1 + 8432, a3, a2 + 14);
    sub_1014022DC(v13, a4, a2 + 538);
    sub_1014022DC(v13, a5, a2 + 1062);
  }
  for (i = 0; i != 128; ++i)
  {
    result = (float)(*(float *)&a3[i] + *(float *)&a4[i]) + *(float *)&a5[i];
    *(float *)(a6 + i * 4) = result;
  }
  return result;
}

uint64_t sub_1014466E4(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  char v6;
  uint64_t v7;
  char v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  _QWORD *i;
  _QWORD *j;
  uint64_t v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[1640];
  _QWORD v19[3];
  _BYTE v20[512];
  _DWORD v21[128];
  _DWORD v22[128];
  _DWORD v23[128];

  v2 = atomic_load((unsigned __int8 *)&qword_10230F130);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10230F130))
  {
    byte_10230F128 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    __cxa_guard_release(&qword_10230F130);
  }
  v3 = 0;
  v19[0] = a1 + 659;
  v19[1] = a1 + 264;
  v19[2] = a1[263];
  do
  {
    v4 = (_QWORD *)sub_100D03FE4();
    if (v4)
    {
      v5 = 0;
      v6 = 0;
      v7 = v19[v3];
      do
      {
        v8 = (*(uint64_t (**)(_QWORD *, _QWORD))(*v4 + 16))(v4, *(unsigned int *)(v7 + 8));
        if (!byte_10230F128)
          goto LABEL_8;
        if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v4 + 32))(v4, *(unsigned int *)(v7 + 8)))
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021B6DF8);
          v9 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Assertion failed: !(ignoreHamming && node->requiresHammingWindow(samples[r]->sampleFreq)), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMAccelerometerProcessor.cpp, line 181,Hamming required but ignored..", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_1021B6DF8);
            v17[0] = 0;
            LODWORD(v15) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: !(ignoreHamming && node->requiresHammingWindow(samples[r]->sampleFreq)), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMAccelerometerProcessor.cpp, line 181,Hamming required but ignored..", v17, v15);
            v16 = (uint8_t *)v10;
            sub_100512490("Generic", 1, 0, 0, "BOOL CMAccelerometerProcessor::computeFrequencyFeatures()", "%s\n", v10);
            if (v16 != buf)
              free(v16);
          }
        }
        if (!byte_10230F128)
LABEL_8:
          v5 |= (*(uint64_t (**)(_QWORD *, _QWORD))(*v4 + 32))(v4, *(unsigned int *)(v7 + 8));
        v6 |= v8;
        v4 = (_QWORD *)v4[1];
      }
      while (v4);
      if ((v6 & 1) != 0)
      {
        v11 = v19[v3];
        if (((byte_10230F128 == 0) & v5) == 1)
        {
          sub_1014465F4((uint64_t)a1, (unsigned __int16 *)v19[v3], v23, v22, v21, (uint64_t)v20, 1);
          for (i = (_QWORD *)sub_100D03FE4(); i; i = (_QWORD *)i[1])
          {
            if ((*(unsigned int (**)(_QWORD *, _QWORD))(*i + 32))(i, *(unsigned int *)(v11 + 8)))
              (*(void (**)(_QWORD *, uint64_t, _DWORD *, _DWORD *, _DWORD *, _BYTE *))(*i + 24))(i, v11, v23, v22, v21, v20);
          }
        }
        sub_1014465F4((uint64_t)a1, (unsigned __int16 *)v11, v23, v22, v21, (uint64_t)v20, 0);
        for (j = (_QWORD *)sub_100D03FE4(); j; j = (_QWORD *)j[1])
        {
          if (byte_10230F128
            || ((*(uint64_t (**)(_QWORD *, _QWORD))(*j + 32))(j, *(unsigned int *)(v11 + 8)) & 1) == 0)
          {
            (*(void (**)(_QWORD *, uint64_t, _DWORD *, _DWORD *, _DWORD *, _BYTE *))(*j + 24))(j, v11, v23, v22, v21, v20);
          }
        }
      }
    }
    ++v3;
  }
  while (v3 != 3);
  return 1;
}

void sub_101446A90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230F130);
  _Unwind_Resume(a1);
}

void sub_101446AB0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101446ADC(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, signed int a10, _BYTE *a11, uint64_t a12)
{
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v17;
  const char *v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  NSObject *v23;
  std::string::size_type v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::string::size_type *v28;
  BOOL v29;
  NSObject *v30;
  std::string::size_type v31;
  _QWORD *v32;
  unint64_t v33;
  const char *v34;
  _QWORD *v35;
  unint64_t v36;
  const char *v37;
  const char *v38;
  std::string *v39;
  NSObject *v40;
  std::string *v41;
  uint64_t *v42;
  NSObject *v43;
  std::string *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  _BYTE *v48;
  std::string *v49;
  std::string *v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  std::string *v54;
  std::string *v55;
  uint64_t v56;
  NSObject *v57;
  std::string *v58;
  int v59;
  int v60;
  NSObject *v61;
  signed int v62;
  _QWORD **v63;
  std::string::size_type v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  NSObject *v72;
  std::string *v73;
  std::string::size_type v74;
  int v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD **v81;
  uint64_t v82;
  std::string *v83;
  std::string::size_type v84;
  int v85;
  _QWORD *v86;
  _QWORD *v87;
  std::string *v88;
  std::string *v89;
  _QWORD **v90;
  unint64_t v92;
  NSObject *v93;
  NSObject *v94;
  uint64_t v95;
  double *v96;
  unint64_t i;
  _QWORD *v98;
  NSObject *v99;
  std::string *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  std::string *v104;
  unint64_t v105;
  std::string *v106;
  std::string *v107;
  NSObject *v108;
  std::string::size_type v110;
  int v111;
  NSObject *v112;
  std::string *v113;
  std::string::size_type v114;
  int v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  NSObject *v120;
  int v121;
  std::string *p_buf;
  uint64_t v123;
  int v124;
  std::string *v125;
  std::string *v126;
  std::string *v127;
  _QWORD *v128;
  _QWORD **v129;
  uint64_t v130;
  std::string *v131;
  std::string::size_type v132;
  int v133;
  _QWORD *v134;
  _QWORD *v135;
  std::string *v136;
  std::string *v137;
  uint64_t v138;
  const char *v139;
  std::string *v140;
  const char *v141;
  std::string *v142;
  const char *v143;
  std::string *v144;
  uint64_t v145;
  std::string *v146;
  std::string *v147;
  std::string *v148;
  const char *v149;
  std::string *v150;
  uint64_t v151;
  const char *v152;
  std::string *v153;
  uint64_t v154;
  uint64_t **v156;
  __int128 v160;
  __int128 v161;
  char v162;
  __int128 v164;
  uint64_t v165;
  std::string::size_type v166;
  __int128 v167;
  uint64_t v168;
  char v169[8];
  void *__p;
  char v171;
  char v172;
  _QWORD **v173;
  _QWORD *v174[2];
  _QWORD **v175;
  _QWORD *v176[2];
  uint64_t v177;
  uint64_t *v178;
  std::string::size_type v179;
  double *v180;
  unint64_t v181;
  unint64_t v182;
  std::string v183;
  std::string v184;
  int v185;
  __int16 v186;
  _QWORD *v187;
  __int16 v188;
  _QWORD *v189;
  __int16 v190;
  int v191;
  std::string v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  __int128 v196;
  __int16 v197;
  int v198;
  char v199;
  uint64_t v200;
  _BYTE v201[22];
  __int16 v202;
  unint64_t v203;
  __int16 v204;
  _BYTE v205[10];
  char v206;
  std::string buf;
  _BYTE v208[24];
  __int16 v209;
  int v210;

  *a11 = 0;
  v15 = (_QWORD *)(a3 + 8);
  sub_100D743BC(a3, *(_QWORD **)(a3 + 8));
  *(_QWORD *)a3 = v15;
  v156 = (uint64_t **)a3;
  *(_QWORD *)(a3 + 16) = 0;
  *v15 = 0;
  sub_100279AE4(a7);
  v180 = 0;
  v181 = 0;
  v182 = 0;
  v177 = (uint64_t)&v177;
  v178 = &v177;
  v179 = 0;
  v16 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      if (v16[33] == v16[32])
      {
        sub_1009EE2A4(&v177, (uint64_t)(v16 + 4), *((_BYTE *)v16 + 280) == 0);
      }
      else
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021B6E18);
        v17 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Polygonal fence should not be added for wifi monitoring", (uint8_t *)&buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021B6E18);
          *(_WORD *)v201 = 0;
          LODWORD(v154) = 2;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Polygonal fence should not be added for wifi monitoring", v201, v154);
          v19 = (std::string *)v18;
          sub_100512490("Generic", 1, 0, 0, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", v18);
          if (v19 != &buf)
            free(v19);
        }
      }
      v20 = (_QWORD *)v16[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v16[2];
          _ZF = *v21 == (_QWORD)v16;
          v16 = v21;
        }
        while (!_ZF);
      }
      v16 = v21;
    }
    while (v21 != a2 + 1);
  }
  sub_1009EF480((uint64_t)&v177);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021B6E18);
  v23 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v24 = a2[2];
    LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v24;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v179;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Fence: combined fences, %{public}lu, fences to, %{public}lu, fences", (uint8_t *)&buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021B6E18);
    v138 = a2[2];
    *(_DWORD *)v201 = 134349312;
    *(_QWORD *)&v201[4] = v138;
    *(_WORD *)&v201[12] = 2050;
    *(_QWORD *)&v201[14] = v179;
    LODWORD(v154) = 22;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: combined fences, %{public}lu, fences to, %{public}lu, fences", v201, v154);
    v140 = (std::string *)v139;
    sub_100512490("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", v139);
    if (v140 != &buf)
      free(v140);
  }
  v25 = v178;
  if (v178 == &v177)
  {
    v162 = 0;
  }
  else
  {
    v162 = 0;
    do
    {
      v26 = v181;
      if (v181 >= v182)
      {
        v27 = sub_101448D08((uint64_t *)&v180);
      }
      else
      {
        sub_100C6A39C(v181, 0, -1);
        v27 = v26 + 504;
      }
      v181 = v27;
      if (*((_DWORD *)v25 + 50) == -1)
      {
        sub_101954D40();
        abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceMonitorWifiLogic.mm", 72, "calculateAPsForFences");
        __break(1u);
      }
      v28 = (std::string::size_type *)(v25 + 2);
      if ((sub_100C6AE44(v27 - 504, (uint64_t)a1, (uint64_t)(v25 + 2), *((unsigned __int8 *)v25 + 288), 0) & 1) != 0)
      {
        v29 = *((_BYTE *)v25 + 288) != 0;
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021B6E18);
        v30 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          v31 = (std::string::size_type)(v25 + 2);
          if (*((char *)v25 + 39) < 0)
            v31 = *v28;
          v32 = v25 + 5;
          if (*((char *)v25 + 63) < 0)
            v32 = (_QWORD *)*v32;
          v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v27 - 152) - *(_QWORD *)(v27 - 160)) >> 5);
          v34 = "exit";
          if (!*((_BYTE *)v25 + 288))
            v34 = "entry";
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446979;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v31;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v32;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          *(_QWORD *)v208 = v33;
          *(_WORD *)&v208[8] = 2081;
          *(_QWORD *)&v208[10] = v34;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Fence: Calculator for %{public}s/%{private}s returned %{public}ld desired APs for %{private}s", (uint8_t *)&buf, 0x2Au);
        }
        v162 |= v29;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021B6E18);
          if (*((char *)v25 + 39) < 0)
            v28 = (std::string::size_type *)*v28;
          v35 = v25 + 5;
          if (*((char *)v25 + 63) < 0)
            v35 = (_QWORD *)*v35;
          v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v27 - 152) - *(_QWORD *)(v27 - 160)) >> 5);
          v37 = "exit";
          if (!*((_BYTE *)v25 + 288))
            v37 = "entry";
          *(_DWORD *)v201 = 136446979;
          *(_QWORD *)&v201[4] = v28;
          *(_WORD *)&v201[12] = 2081;
          *(_QWORD *)&v201[14] = v35;
          v202 = 2050;
          v203 = v36;
          v204 = 2081;
          *(_QWORD *)v205 = v37;
          LODWORD(v154) = 42;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Calculator for %{public}s/%{private}s returned %{public}ld desired APs for %{private}s", v201, v154);
          v39 = (std::string *)v38;
          sub_100512490("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", v38);
          if (v39 != &buf)
            free(v39);
        }
      }
      else
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021B6E18);
        v40 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
        {
          sub_100C3B9BC((uint64_t)(v25 + 2), &buf);
          v41 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v201 = 136380675;
          *(_QWORD *)&v201[4] = v41;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Fence: Failed to calculate fence %{private}s", v201, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021B6E18);
          v52 = qword_1022A0068;
          sub_100C3B9BC((uint64_t)(v25 + 2), v201);
          v53 = v201;
          if (v202 < 0)
            v53 = *(_BYTE **)v201;
          LODWORD(v192.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 4) = (std::string::size_type)v53;
          LODWORD(v154) = 12;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v52, 16, "Fence: Failed to calculate fence %{private}s", &v192, v154);
          v55 = v54;
          if (SHIBYTE(v202) < 0)
            operator delete(*(void **)v201);
          sub_100512490("Generic", 1, 0, 0, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v55);
          if (v55 != &buf)
            free(v55);
        }
        v42 = (uint64_t *)v25[33];
        if (v42 != v25 + 34)
        {
          do
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021B6E18);
            v43 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
            {
              sub_100C3B9BC((uint64_t)(v42 + 4), &buf);
              v44 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &buf
                  : (std::string *)buf.__r_.__value_.__r.__words[0];
              *(_DWORD *)v201 = 136380675;
              *(_QWORD *)&v201[4] = v44;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#Warning Fence: combined fence, %{private}s", v201, 0xCu);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_1021B6E18);
              v47 = qword_1022A0068;
              sub_100C3B9BC((uint64_t)(v42 + 4), v201);
              v48 = v201;
              if (v202 < 0)
                v48 = *(_BYTE **)v201;
              LODWORD(v192.__r_.__value_.__l.__data_) = 136380675;
              *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
              LODWORD(v154) = 12;
              _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v47, 0, "#Warning Fence: combined fence, %{private}s", &v192, v154);
              v50 = v49;
              if (SHIBYTE(v202) < 0)
                operator delete(*(void **)v201);
              sub_100512490("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v50);
              if (v50 != &buf)
                free(v50);
            }
            v45 = (uint64_t *)v42[1];
            if (v45)
            {
              do
              {
                v46 = v45;
                v45 = (uint64_t *)*v45;
              }
              while (v45);
            }
            else
            {
              do
              {
                v46 = (uint64_t *)v42[2];
                _ZF = *v46 == (_QWORD)v42;
                v42 = v46;
              }
              while (!_ZF);
            }
            v42 = v46;
          }
          while (v46 != v25 + 34);
        }
        v51 = v181 - 504;
        (**(void (***)(uint64_t))(v181 - 504))(v181 - 504);
        v181 = v51;
      }
      v25 = (uint64_t *)v25[1];
    }
    while (v25 != &v177);
  }
  sub_101448A94((uint64_t)&v180);
  v176[0] = 0;
  v176[1] = 0;
  v174[1] = 0;
  v175 = v176;
  v173 = v174;
  v174[0] = 0;
  v201[0] = 0;
  v206 = 0;
  v56 = (uint64_t)a8;
  if (a4 && (v162 & 1) != 0)
  {
    sub_1005C7EDC((uint64_t)v201, a5);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021B6E18);
    v57 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v184.__r_.__value_.__r.__words[0] = *(_QWORD *)v201;
      sub_1000C2150(&v184, &buf);
      v58 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v192.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 4) = (std::string::size_type)v58;
      WORD2(v192.__r_.__value_.__r.__words[1]) = 1025;
      *(_DWORD *)((char *)&v192.__r_.__value_.__r.__words[1] + 6) = *(_DWORD *)&v205[6];
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "Fence: Using associated AP %{private}s, channel %{private}d for exit", (uint8_t *)&v192, 0x12u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021B6E18);
      v145 = qword_1022A0068;
      v183.__r_.__value_.__r.__words[0] = *(_QWORD *)v201;
      sub_1000C2150(&v183, &v192);
      if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v146 = &v192;
      else
        v146 = (std::string *)v192.__r_.__value_.__r.__words[0];
      LODWORD(v184.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v184.__r_.__value_.__r.__words + 4) = (std::string::size_type)v146;
      WORD2(v184.__r_.__value_.__r.__words[1]) = 1025;
      *(_DWORD *)((char *)&v184.__r_.__value_.__r.__words[1] + 6) = *(_DWORD *)&v205[6];
      LODWORD(v154) = 18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v145, 2, "Fence: Using associated AP %{private}s, channel %{private}d for exit", &v184, v154);
      v148 = v147;
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v192.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v148);
      if (v148 != &buf)
        free(v148);
    }
  }
  sub_100C723AC(a6, &v180);
  sub_10031F08C(v169, (uint64_t)v201);
  v59 = sub_100C6DE64(a1, (uint64_t *)&v180, a10, a9, (uint64_t)v169, v156, &v175, &v173, 0.97, a6);
  v60 = v59 ^ 1;
  *a11 = v59 ^ 1;
  if (v172 && v171 < 0)
  {
    operator delete(__p);
    v60 = *a11;
  }
  if (v60)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021B6E18);
    v61 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#Warning Fence: Continuous monitoring is needed in order to supported the monitored fences", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021B6E18);
      LOWORD(v192.__r_.__value_.__l.__data_) = 0;
      LODWORD(v154) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Fence: Continuous monitoring is needed in order to supported the monitored fences", &v192, v154);
      v144 = (std::string *)v143;
      sub_100512490("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", v143);
      if (v144 != &buf)
        free(v144);
    }
  }
  v62 = 0;
  v63 = v173;
  if (v173 != v174 && a10 >= 1)
  {
    v62 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v160 = _Q0;
    do
    {
      v68 = (std::string::size_type)v63[5];
      sub_1015A2E04(&v167, "");
      v69 = *((_DWORD *)v63 + 23);
      v192.__r_.__value_.__r.__words[0] = v68;
      *(_OWORD *)&v192.__r_.__value_.__r.__words[1] = v167;
      v193 = v168;
      v167 = 0uLL;
      v168 = 0;
      v194 = -1;
      v195 = v69;
      v196 = v160;
      v197 = 256;
      v198 = 0;
      v199 = 0;
      v200 = 0;
      v70 = sub_100129380((uint64_t)&v192);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021B6E18);
      v71 = v70 & 0x20000000000;
      v72 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v183.__r_.__value_.__r.__words[0] = (std::string::size_type)v63[5];
        sub_1000C2150(&v183, &v184);
        v73 = &v184;
        if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v73 = (std::string *)v184.__r_.__value_.__r.__words[0];
        v74 = (std::string::size_type)v63[9];
        v75 = *((_DWORD *)v63 + 23);
        v76 = v63[6];
        v77 = v63[7];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136381955;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v73;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v74;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1025;
        *(_DWORD *)v208 = v75;
        *(_WORD *)&v208[4] = 2049;
        *(_QWORD *)&v208[6] = v76;
        *(_WORD *)&v208[14] = 2049;
        *(_QWORD *)&v208[16] = v77;
        v209 = 1025;
        v210 = v71 >> 41;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "WifiFenceCalculator: Adding exit AP, mac, %{private}s, hAcc, %{private}.2lf, channel, %{private}d, location, %{private}12.8lf, %{private}12.8lf, isLocallyAdministered, %{private}d", (uint8_t *)&buf, 0x36u);
        if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v184.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021B6E18);
        v82 = qword_1022A0068;
        v166 = (std::string::size_type)v63[5];
        sub_1000C2150(&v166, &v183);
        v83 = &v183;
        if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v83 = (std::string *)v183.__r_.__value_.__r.__words[0];
        v84 = (std::string::size_type)v63[9];
        v85 = *((_DWORD *)v63 + 23);
        v86 = v63[6];
        v87 = v63[7];
        LODWORD(v184.__r_.__value_.__l.__data_) = 136381955;
        *(std::string::size_type *)((char *)v184.__r_.__value_.__r.__words + 4) = (std::string::size_type)v83;
        WORD2(v184.__r_.__value_.__r.__words[1]) = 2049;
        *(std::string::size_type *)((char *)&v184.__r_.__value_.__r.__words[1] + 6) = v84;
        HIWORD(v184.__r_.__value_.__r.__words[2]) = 1025;
        v185 = v85;
        v186 = 2049;
        v187 = v86;
        v188 = 2049;
        v189 = v87;
        v190 = 1025;
        v191 = v71 >> 41;
        LODWORD(v154) = 54;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v82, 2, "WifiFenceCalculator: Adding exit AP, mac, %{private}s, hAcc, %{private}.2lf, channel, %{private}d, location, %{private}12.8lf, %{private}12.8lf, isLocallyAdministered, %{private}d", &v184, v154);
        v89 = v88;
        if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v183.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v89);
        if (v89 != &buf)
          free(v89);
      }
      v78 = a8[1];
      if (v78 >= a8[2])
      {
        v79 = sub_100279DEC(a8, (uint64_t)&v192);
      }
      else
      {
        sub_100279D64((uint64_t)a8, (uint64_t)&v192);
        v79 = v78 + 88;
      }
      v56 = (uint64_t)a8;
      a8[1] = v79;
      if (SHIBYTE(v193) < 0)
        operator delete((void *)v192.__r_.__value_.__l.__size_);
      v80 = v63[1];
      if (v80)
      {
        do
        {
          v81 = (_QWORD **)v80;
          v80 = (_QWORD *)*v80;
        }
        while (v80);
      }
      else
      {
        do
        {
          v81 = (_QWORD **)v63[2];
          _ZF = *v81 == v63;
          v63 = v81;
        }
        while (!_ZF);
      }
      ++v62;
      if (v81 == v174)
        break;
      v63 = v81;
    }
    while (v62 < a10);
  }
  sub_101448B78(v56);
  v90 = v175;
  if (v175 != v176 && v62 < a10)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    v161 = _Q0;
    do
    {
      v110 = (std::string::size_type)v90[5];
      sub_1015A2E04(&v164, "");
      v111 = *((_DWORD *)v90 + 23);
      v192.__r_.__value_.__r.__words[0] = v110;
      *(_OWORD *)&v192.__r_.__value_.__r.__words[1] = v164;
      v193 = v165;
      v164 = 0uLL;
      v165 = 0;
      v194 = -1;
      v195 = v111;
      v196 = v161;
      v197 = 256;
      v198 = 0;
      v199 = 0;
      v200 = 0;
      if (sub_1000AFA5C(v111))
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021B6E18);
        v112 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          v183.__r_.__value_.__r.__words[0] = (std::string::size_type)v90[5];
          sub_1000C2150(&v183, &v184);
          v113 = &v184;
          if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v113 = (std::string *)v184.__r_.__value_.__r.__words[0];
          v114 = (std::string::size_type)v90[9];
          v115 = *((_DWORD *)v90 + 23);
          v116 = v90[6];
          v117 = v90[7];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136381699;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v113;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v114;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 1025;
          *(_DWORD *)v208 = v115;
          *(_WORD *)&v208[4] = 2049;
          *(_QWORD *)&v208[6] = v116;
          *(_WORD *)&v208[14] = 2049;
          *(_QWORD *)&v208[16] = v117;
          _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEBUG, "WifiFenceCalculator: Adding entry AP, mac, %{private}s, hAcc, %{private}.2lf, channel, %{private}d, location, %{private}12.8lf, %{private}12.8lf", (uint8_t *)&buf, 0x30u);
          if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v184.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021B6E18);
          v130 = qword_1022A0068;
          v166 = (std::string::size_type)v90[5];
          sub_1000C2150(&v166, &v183);
          v131 = &v183;
          if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v131 = (std::string *)v183.__r_.__value_.__r.__words[0];
          v132 = (std::string::size_type)v90[9];
          v133 = *((_DWORD *)v90 + 23);
          v134 = v90[6];
          v135 = v90[7];
          LODWORD(v184.__r_.__value_.__l.__data_) = 136381699;
          *(std::string::size_type *)((char *)v184.__r_.__value_.__r.__words + 4) = (std::string::size_type)v131;
          WORD2(v184.__r_.__value_.__r.__words[1]) = 2049;
          *(std::string::size_type *)((char *)&v184.__r_.__value_.__r.__words[1] + 6) = v132;
          HIWORD(v184.__r_.__value_.__r.__words[2]) = 1025;
          v185 = v133;
          v186 = 2049;
          v187 = v134;
          v188 = 2049;
          v189 = v135;
          LODWORD(v154) = 48;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v130, 2, "WifiFenceCalculator: Adding entry AP, mac, %{private}s, hAcc, %{private}.2lf, channel, %{private}d, location, %{private}12.8lf, %{private}12.8lf", &v184, v154);
          v137 = v136;
          if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v183.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v137);
          if (v137 != &buf)
            free(v137);
        }
        v118 = a7[1];
        if (v118 >= a7[2])
        {
          v119 = sub_100279DEC(a7, (uint64_t)&v192);
        }
        else
        {
          sub_100279D64((uint64_t)a7, (uint64_t)&v192);
          v119 = v118 + 88;
        }
        a7[1] = v119;
      }
      else
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021B6E18);
        v120 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          v121 = v195;
          v183.__r_.__value_.__r.__words[0] = v192.__r_.__value_.__r.__words[0];
          sub_1000C2150(&v183, &buf);
          p_buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v184.__r_.__value_.__l.__data_) = 67174915;
          HIDWORD(v184.__r_.__value_.__r.__words[0]) = v121;
          LOWORD(v184.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v184.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)p_buf;
          _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEBUG, "Fence: WifiFenceCalculator: Skipped non-2GHz AP, channel, %{private}d, mac, %{private}s", (uint8_t *)&v184, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021B6E18);
          v123 = qword_1022A0068;
          v124 = v195;
          v166 = v192.__r_.__value_.__r.__words[0];
          sub_1000C2150(&v166, &v184);
          v125 = &v184;
          if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v125 = (std::string *)v184.__r_.__value_.__r.__words[0];
          LODWORD(v183.__r_.__value_.__l.__data_) = 67174915;
          HIDWORD(v183.__r_.__value_.__r.__words[0]) = v124;
          LOWORD(v183.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v183.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v125;
          LODWORD(v154) = 18;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v123, 2, "Fence: WifiFenceCalculator: Skipped non-2GHz AP, channel, %{private}d, mac, %{private}s", &v183, v154);
          v127 = v126;
          if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v184.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v127);
          if (v127 != &buf)
            free(v127);
        }
      }
      if (SHIBYTE(v193) < 0)
        operator delete((void *)v192.__r_.__value_.__l.__size_);
      v128 = v90[1];
      if (v128)
      {
        do
        {
          v129 = (_QWORD **)v128;
          v128 = (_QWORD *)*v128;
        }
        while (v128);
      }
      else
      {
        do
        {
          v129 = (_QWORD **)v90[2];
          _ZF = *v129 == v90;
          v90 = v129;
        }
        while (!_ZF);
      }
      v90 = v129;
    }
    while (v129 != v176);
  }
  sub_101448B78((uint64_t)a7);
  v92 = 0x2E8BA2E8BA2E8BA3 * ((a7[1] - *a7) >> 3) + 0x2E8BA2E8BA2E8BA3 * ((a8[1] - *a8) >> 3);
  if (v92 > a10)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021B6E18);
    v93 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v92;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a10;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_FAULT, "Fence: Fence calculator returned more APs (%{public}zu) than maximum (%{public}d)", (uint8_t *)&buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021B6E18);
      LODWORD(v192.__r_.__value_.__l.__data_) = 134349312;
      *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 4) = v92;
      WORD2(v192.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v192.__r_.__value_.__r.__words[1] + 6) = a10;
      LODWORD(v154) = 18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: Fence calculator returned more APs (%{public}zu) than maximum (%{public}d)", &v192, v154);
      v150 = (std::string *)v149;
      sub_100512490("Generic", 1, 0, 0, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", v149);
      if (v150 != &buf)
        free(v150);
    }
  }
  if ((v162 & 1) != 0 && *a9 == a9[1])
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021B6E18);
    v94 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v95 = 0x2E8BA2E8BA2E8BA3 * ((a8[1] - *a8) >> 3);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v95;
      _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "#Warning Fence: no visible APs, exitAPs, %{public}lu", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021B6E18);
      v151 = 0x2E8BA2E8BA2E8BA3 * ((a8[1] - *a8) >> 3);
      LODWORD(v192.__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 4) = v151;
      LODWORD(v154) = 12;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Fence: no visible APs, exitAPs, %{public}lu", &v192, v154);
      v153 = (std::string *)v152;
      sub_100512490("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", v152);
      if (v153 != &buf)
        free(v153);
    }
  }
  v96 = v180;
  for (i = v181; v96 != (double *)i; v96 += 63)
  {
    if (*((_QWORD *)v96 + 44) != *((_QWORD *)v96 + 43))
    {
      v98 = (_QWORD *)*((_QWORD *)v96 + 46);
      if (*((_QWORD **)v96 + 47) != v98)
      {
        if (*v98)
          continue;
      }
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021B6E18);
    v99 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      sub_100C3B9BC((uint64_t)(v96 + 4), &buf);
      v100 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &buf
           : (std::string *)buf.__r_.__value_.__r.__words[0];
      v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v96 + 44) - *((_QWORD *)v96 + 43)) >> 5);
      LODWORD(v192.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 4) = (std::string::size_type)v100;
      WORD2(v192.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v192.__r_.__value_.__r.__words[1] + 6) = v101;
      _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "Fence: request a download for, %{private}s, fChosenAPs, %{public}lu", (uint8_t *)&v192, 0x16u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021B6E18);
      v103 = qword_1022A0068;
      sub_100C3B9BC((uint64_t)(v96 + 4), &v192);
      v104 = &v192;
      if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v104 = (std::string *)v192.__r_.__value_.__r.__words[0];
      v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v96 + 44) - *((_QWORD *)v96 + 43)) >> 5);
      LODWORD(v184.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v184.__r_.__value_.__r.__words + 4) = (std::string::size_type)v104;
      WORD2(v184.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v184.__r_.__value_.__r.__words[1] + 6) = v105;
      LODWORD(v154) = 22;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v103, 2, "Fence: request a download for, %{private}s, fChosenAPs, %{public}lu", &v184, v154);
      v107 = v106;
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v192.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v107);
      if (v107 != &buf)
        free(v107);
    }
    v102 = *(_QWORD *)(a12 + 24);
    if (!v102)
      sub_10025FD1C();
    (*(void (**)(uint64_t, double *))(*(_QWORD *)v102 + 48))(v102, v96 + 4);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021B6E18);
  v108 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "Fence: calculateAPsForFences end", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021B6E18);
    LOWORD(v192.__r_.__value_.__l.__data_) = 0;
    LODWORD(v154) = 2;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: calculateAPsForFences end", &v192, v154);
    v142 = (std::string *)v141;
    sub_100512490("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", v141);
    if (v142 != &buf)
      free(v142);
  }
  if (v206 && SHIBYTE(v203) < 0)
    operator delete(*(void **)&v201[8]);
  sub_100008848((uint64_t)&v173, v174[0]);
  sub_100008848((uint64_t)&v175, v176[0]);
  sub_100D33D04(&v177);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
  sub_101448C88((void ***)&buf);
}

void sub_101448954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,__int16 a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (LOBYTE(STACK[0x2B8]))
  {
    if (SLOBYTE(STACK[0x27F]) < 0)
      operator delete((void *)STACK[0x268]);
  }
  sub_100008848((uint64_t)&a49, (_QWORD *)a50);
  sub_100008848((uint64_t)&a52, (_QWORD *)a53);
  sub_100D33D04(&a55);
  STACK[0x2C0] = (unint64_t)&a58;
  sub_101448C88((void ***)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

uint64_t sub_101448A94(uint64_t result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v1 = *(_QWORD *)result;
  v2 = *(int64x2_t *)(result + 8);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)result)), 3uLL);
  v4 = 0xEFBEFBEFBEFBEFBFLL * v3.i64[0];
  v5 = v4;
  if (0xEFBEFBEFBEFBEFBFLL * v3.i64[1] > v4)
  {
    v6 = (uint64_t *)result;
    v7 = result + 16;
    v14 = v7;
    if (v2.i64[0] == v1)
    {
      v8 = 0;
      v9 = 0;
    }
    else
    {
      v8 = (char *)sub_101448E90(v7, v4);
    }
    v10 = v8;
    v11 = &v8[504 * v5];
    v12 = v11;
    v13 = &v8[504 * v9];
    sub_101448E1C(v6, &v10);
    return sub_101448F70((uint64_t)&v10);
  }
  return result;
}

void sub_101448B50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x101448B40);
}

uint64_t sub_101448B78(uint64_t result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v1 = *(_QWORD *)result;
  v2 = *(int64x2_t *)(result + 8);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)result)), 3uLL);
  v4 = 0x2E8BA2E8BA2E8BA3 * v3.i64[0];
  v5 = v4;
  if (0x2E8BA2E8BA2E8BA3 * v3.i64[1] > v4)
  {
    v6 = (uint64_t *)result;
    v7 = result + 16;
    v14 = v7;
    if (v2.i64[0] == v1)
    {
      v8 = 0;
      v9 = 0;
    }
    else
    {
      v8 = (char *)sub_100279B30(v7, v4);
    }
    v10 = v8;
    v11 = &v8[88 * v5];
    v12 = v11;
    v13 = &v8[88 * v9];
    sub_1000591E8(v6, &v10);
    return sub_10005925C((uint64_t)&v10);
  }
  return result;
}

void sub_101448C34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x101448C24);
}

void sub_101448C5C(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_101448C88(void ***a1)
{
  void **v1;
  void (***v2)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  BOOL v7;

  v1 = *a1;
  v2 = (void (***)(_QWORD))**a1;
  if (v2)
  {
    v4 = (void (***)(_QWORD))v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 63;
      do
      {
        (**v6)(v6);
        v7 = v6 == v2;
        v6 -= 63;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_101448D08(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v2 = *a1;
  v3 = 0xEFBEFBEFBEFBEFBFLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x82082082082082)
    sub_100259694();
  v5 = (uint64_t)(a1 + 2);
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((a1[2] - v2) >> 3);
  if (2 * v6 > v4)
    v4 = 2 * v6;
  if (v6 >= 0x41041041041041)
    v7 = 0x82082082082082;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_101448E90(v5, v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[504 * v3];
  v14 = &v8[504 * v7];
  sub_100C6A39C((uint64_t)v12, 0, -1);
  v13 = v12 + 504;
  sub_101448E1C(a1, &v11);
  v9 = a1[1];
  sub_101448F70((uint64_t)&v11);
  return v9;
}

void sub_101448E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_101448F70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101448E1C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_101448ED8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_101448E90(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x82082082082083)
    sub_10025955C();
  return operator new(504 * a2);
}

uint64_t sub_101448ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 504;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 504;
    sub_100C76708(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_101448F70(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 504;
    (**(void (***)(uint64_t))(i - 504))(i - 504);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double sub_101448FC4(uint64_t a1, _QWORD *a2, int *a3, char a4, double *a5)
{
  uint64_t v5;
  uint64_t v6;
  double result;

  *(_WORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_101CA4A70;
  *(_QWORD *)(a1 + 24) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 32) = *a2;
  v5 = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *a3;
  *(_QWORD *)(a1 + 56) = off_1021693F8;
  *(_QWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 136) = a4;
  *(_QWORD *)(a1 + 144) = off_10213D2B0;
  *(_DWORD *)(a1 + 152) = 3;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  result = *a5;
  *(double *)(a1 + 232) = *a5;
  return result;
}

void sub_101449054(uint64_t a1, double *a2, double *a3, _QWORD *a4, _QWORD *a5)
{
  *(double *)(a1 + 16) = *a2 - *a3;
  *(_QWORD *)(a1 + 8) = 0x4188B82000000000;
  *a5 = 0x40BC200000000000;
  *a4 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a1 + 1) = 1;
  *(double *)(a1 + 24) = *a2;
  if (*(_BYTE *)(a1 + 136))
    sub_10047F1D4((_QWORD *)(a1 + 144));
}

BOOL sub_1014490A8(uint64_t a1, double *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = a1 + 56;
  sub_100ADB200(a1 + 56, a2);
  v4 = *(unsigned int *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 <= v4)
    *(double *)(a1 + 40) = *(double *)(a1 + 232) * (sub_101449108(v3) * *(double *)(a1 + 232));
  return v5 <= v4;
}

double sub_101449108(uint64_t a1)
{
  unint64_t v1;
  double result;
  unint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;

  v1 = *(_QWORD *)(a1 + 72);
  result = 0.0;
  if (v1 >= 2)
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = 0.0;
    v5 = *(_QWORD *)(a1 + 72);
    v6 = 0.0;
    do
    {
      v7 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + ((v3 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v3 & 0x1FF))
         - *(double *)(a1 + 16) / (double)v1;
      v6 = v6 + v7 * v7;
      v4 = v4 + v7;
      ++v3;
      --v5;
    }
    while (v5);
    return (v6 - v4 * v4 / (double)v1) / (double)(v1 - 1);
  }
  return result;
}

uint64_t sub_101449180(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  double v10;
  double v11;
  uint64_t result;
  double v13;
  NSObject *v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  NSObject *v23;
  _BOOL4 v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  NSObject *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  const char *v43;
  char *v44;
  double v45;
  const char *v46;
  char *v47;
  double v48;
  const char *v49;
  char *v50;
  double v51;
  double v52;
  double v53;
  int v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  _BYTE buf[12];
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;

  v10 = *a2;
  v53 = *a2 - *a3;
  if (!*(_BYTE *)a1)
  {
    if (sub_1014490A8(a1, &v53))
    {
      v13 = *(double *)(a1 + 40);
      if (v13 > 0.0 && v13 < 0.25)
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B6E58);
        v27 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v28 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Estimated,time offset measurement variance(s^2),%.12g", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021B6E58);
          v48 = *(double *)(a1 + 40);
          v54 = 134217984;
          v55 = v48;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Estimated,time offset measurement variance(s^2),%.12g", COERCE_DOUBLE(&v54));
          v50 = (char *)v49;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLTimeOffsetFilter::update(const double &, const double &, double &, double &)", "%s\n", v49);
          if (v50 != buf)
            free(v50);
        }
        *(_BYTE *)a1 = 1;
        v10 = *a2;
        goto LABEL_2;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B6E58);
      v15 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning Unacceptable,time offset measurement variance(s^2),%.12g", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B6E58);
        v45 = *(double *)(a1 + 40);
        v54 = 134217984;
        v55 = v45;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Unacceptable,time offset measurement variance(s^2),%.12g", COERCE_DOUBLE(&v54));
        v47 = (char *)v46;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTimeOffsetFilter::update(const double &, const double &, double &, double &)", "%s\n", v46);
        if (v47 != buf)
          free(v47);
      }
      *(_BYTE *)a1 = 0;
    }
    result = 0;
    *a4 = v53;
    *a5 = 7200.0;
    *(double *)(a1 + 24) = *a2;
    return result;
  }
LABEL_2:
  if (!*(_BYTE *)(a1 + 1) || (v11 = v10 - *(double *)(a1 + 24), v11 > *(double *)(a1 + 32)))
  {
    sub_101449054(a1, a2, a3, a4, a5);
    return 0;
  }
  *(double *)(a1 + 24) = v10;
  if (*(_BYTE *)(a1 + 136))
  {
    sub_10009E858(a1 + 144, &v53);
    *(_QWORD *)buf = 0;
    if (*(_QWORD *)(a1 + 224) == *(_DWORD *)(a1 + 152))
    {
      if (sub_10009E784((_QWORD *)(a1 + 144), 2, buf))
        v53 = *(double *)buf;
    }
  }
  v17 = *(double *)(a1 + 40);
  v18 = *(double *)(a1 + 8);
  if (v17 + v18 <= 0.0)
  {
    *(_BYTE *)a1 = 0;
    sub_101449054(a1, a2, a3, a4, a5);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B6E58);
    v23 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Unexpected,state plus measurement covariance < 0.", buf, 2u);
    }
    v24 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v24)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B6E58);
      LOWORD(v54) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Unexpected,state plus measurement covariance < 0.", &v54, 2);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTimeOffsetFilter::update(const double &, const double &, double &, double &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
      return 0;
    }
  }
  else
  {
    v19 = *(double *)(a1 + 16);
    v20 = v53 - v19;
    v21 = v20 * v20 / (v17 + v18);
    if (v21 <= 20.25)
    {
      v22 = v11 * 0.00005625;
      if (v21 > 9.0)
        v17 = v17 + v17;
    }
    else if (v20 <= 7200.0)
    {
      v22 = v20 * v20;
    }
    else
    {
      v22 = 51840000.0;
    }
    v29 = v18 + v22;
    v30 = v29 / (v17 + v29);
    v31 = v29 * (1.0 - v30);
    *(double *)(a1 + 8) = v31;
    *(double *)(a1 + 16) = v19 + v30 * v20;
    v32 = sqrt(v31);
    if (v31 >= 0.00000225)
      v33 = v32;
    else
      v33 = 0.00000225;
    *a5 = v33;
    *a4 = *(double *)(a1 + 16);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B6E58);
    v34 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v35 = *a2;
      v36 = *a3;
      v37 = *a4;
      v38 = *a5;
      *(_DWORD *)buf = 134219776;
      *(double *)&buf[4] = v35;
      v71 = 2048;
      v72 = v36;
      v73 = 2048;
      v74 = v37;
      v75 = 2048;
      v76 = v38;
      v77 = 2048;
      v78 = v17;
      v79 = 2048;
      v80 = v22;
      v81 = 2048;
      v82 = v20;
      v83 = 2048;
      v84 = v21;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "internalTimeSecs,%.6lf,externalTimeSecs,%.6lf,filteredOffsetSecs,%.6lf,offsetUncertaintySecs,%.9g,R,%.9g,Q,%.9g,v,%.9g,vtest2,%.9g", buf, 0x52u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B6E58);
      v39 = *a2;
      v40 = *a3;
      v41 = *a4;
      v42 = *a5;
      v54 = 134219776;
      v55 = v39;
      v56 = 2048;
      v57 = v40;
      v58 = 2048;
      v59 = v41;
      v60 = 2048;
      v61 = v42;
      v62 = 2048;
      v63 = v17;
      v64 = 2048;
      v65 = v22;
      v66 = 2048;
      v67 = v20;
      v68 = 2048;
      v69 = v21;
      LODWORD(v51) = 82;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "internalTimeSecs,%.6lf,externalTimeSecs,%.6lf,filteredOffsetSecs,%.6lf,offsetUncertaintySecs,%.9g,R,%.9g,Q,%.9g,v,%.9g,vtest2,%.9g", COERCE_DOUBLE(&v54), v51, v52, v53);
      v44 = (char *)v43;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTimeOffsetFilter::update(const double &, const double &, double &, double &)", "%s\n", v43);
      if (v44 != buf)
        free(v44);
    }
    return 1;
  }
  return result;
}

void sub_101449984(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

NSString *sub_1014499B0()
{
  id v0;
  NSString *v1;

  v0 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithContentsOfFile:", CFSTR("/System/Library/CoreServices/SystemVersion.plist"));
  v1 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), objc_msgSend(v0, "objectForKey:", CFSTR("ProductVersion")), objc_msgSend(v0, "objectForKey:", CFSTR("ProductBuildVersion")));

  return v1;
}

NSString *sub_101449A34()
{
  NSArray *v0;
  id v1;
  id v2;
  id v3;

  v0 = +[NSLocale preferredLanguages](NSLocale, "preferredLanguages");
  if (!-[NSArray count](v0, "count"))
    return -[NSLocale localeIdentifier](+[NSLocale currentLocale](NSLocale, "currentLocale"), "localeIdentifier");
  v1 = -[NSArray objectAtIndex:](v0, "objectAtIndex:", 0);
  if (!v1)
    return -[NSLocale localeIdentifier](+[NSLocale currentLocale](NSLocale, "currentLocale"), "localeIdentifier");
  v2 = v1;
  v3 = -[NSLocale objectForKey:](+[NSLocale currentLocale](NSLocale, "currentLocale"), "objectForKey:", NSLocaleCountryCode);
  if (objc_msgSend(v3, "length"))
    return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@_%@"), v2, v3);
  else
    return (NSString *)v2;
}

id sub_101449ADC()
{
  NSString *v0;
  id v1;
  id v2;

  if (qword_10230F148 != -1)
    dispatch_once(&qword_10230F148, &stru_1021B6E78);
  v0 = sub_101449A34();
  v1 = objc_alloc_init((Class)PBDataWriter);
  objc_msgSend(v1, "writeBigEndianFixed16:", 1);
  objc_msgSend(v1, "writeBigEndianShortThenString:", v0);
  objc_msgSend(v1, "writeBigEndianShortThenString:", qword_10230F138);
  objc_msgSend(v1, "writeBigEndianShortThenString:", qword_10230F140);
  v2 = objc_msgSend(v1, "immutableData");

  return v2;
}

void sub_101449B84(id a1)
{
  qword_10230F138 = -[NSBundle bundleIdentifier](+[NSBundle mainBundle](NSBundle, "mainBundle"), "bundleIdentifier");
  qword_10230F140 = sub_1014499B0();
}

_QWORD *sub_101449BC0(_QWORD *result, uint64_t a2)
{
  *result = off_1021B6EA8;
  result[1] = a2;
  return result;
}

id sub_101449BD0(uint64_t a1, uint64_t a2)
{
  id v3;
  NSString *v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTilesManager"));
  v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "0");
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  v8 = *(_QWORD *)(a2 + 32);
  return objc_msgSend(v3, "requestTileDownloadByType:path:details:", 10, v4, v7);
}

id sub_101449C44(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  id v8;
  __int128 v9;
  _OWORD v11[2];
  uint64_t v12;

  if (a3)
    sub_101954F04();
  v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLWifiTilesManager"));
  v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  v12 = *(_QWORD *)(a2 + 32);
  return objc_msgSend(v8, "requestTileDownloadForLat:lon:details:", v11, a4, a5);
}

void sub_101449CB4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101449D44(uint64_t a1, void *a2, int a3)
{
  NSObject *v6;
  const char *v7;
  const char *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  __int128 v17;
  uint8_t buf[4];
  const char *v19;

  if (objc_msgSend(a2, "hasDepartureDate"))
  {
    sub_10144CF90(a1);
    *(_BYTE *)(a1 + 1208) = 0;
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v6 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = "low";
      if (a3 == 1)
        v7 = "high";
      *(_DWORD *)buf = 136315138;
      v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "VEHICULAR: visit, confidence, %s, exit", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: visit, confidence, %s, exit", &v17);
LABEL_26:
      v16 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::onVisit(CLVisit *, CLVehicleStateNotifier_Type::LoiVisitConfidence)", "%s\n", v8);
      if (v16 != buf)
        free(v16);
    }
  }
  else if (objc_msgSend(a2, "hasArrivalDate"))
  {
    if (a3 == 1)
    {
      *(_BYTE *)(a1 + 1208) = 0;
      objc_msgSend(a2, "coordinate");
      v10 = v9;
      v12 = v11;
      objc_msgSend(a2, "horizontalAccuracy");
      sub_10144D16C(a1, v10, v12, v13);
    }
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v14 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = "low";
      if (a3 == 1)
        v15 = "high";
      *(_DWORD *)buf = 136315138;
      v19 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "VEHICULAR: visit, confidence, %s, entry", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: visit, confidence, %s, entry", &v17);
      goto LABEL_26;
    }
  }
}

void sub_10144A208(id a1)
{
  qword_10230F150 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLVehicleStateNotifierSilo"));
}

uint64_t sub_10144A2BC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10144A71C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230F160 != -1)
    dispatch_once(&qword_10230F160, block);
  return qword_102314050;
}

void sub_10144A490(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  sub_10144CF90(a1);
  *(_BYTE *)(a1 + 1208) = 0;
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_1021B7120);
  v2 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "VEHICULAR: reset vehicular false positive mitigation states", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: reset vehicular false positive mitigation states", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::resetVehicularFalsePositiveSuppressionDnd()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_10144A71C()
{
  operator new();
}

void sub_10144A764()
{
  operator delete();
}

void sub_10144A788(uint64_t a1, void *a2)
{
  _QWORD *v3;
  CLMotionActivity *v9;
  _QWORD *v10;

  v3 = (_QWORD *)sub_10144B200(a1, "CLVehicleStateNotifier", a2);
  *v3 = off_1021B6F48;
  bzero(v3 + 14, 0x330uLL);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 144) = _Q0;
  *(_QWORD *)(a1 + 928) = 0xBFF0000000000000;
  CLMotionActivity::getInit(v9);
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_DWORD *)(a1 + 1103) = 0;
  v10 = operator new(0x20uLL);
  *v10 = off_1021B7230;
  v10[1] = sub_10144D5C8;
  v10[2] = 0;
  v10[3] = a1;
  operator new();
}

void sub_10144B000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13)
{
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v19 = *v17;
  *v17 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_100BCD638(v15);
  sub_100E3E6C8(a13);
  v20 = v13[162];
  v13[162] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *v16;
  *v16 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  sub_10042B248(a12, 0);
  v22 = v13[17];
  v13[17] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v13[16];
  v13[16] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v13[15];
  v13[15] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *v14;
  *v14 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  sub_10144BDC8((uint64_t)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_10144B200(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021B7150;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10144B280(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10144B29C(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLVehicleStateNotifier::onVehicleConnectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B70C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onVehicleConnectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onVehicleConnectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  memcpy((void *)(a4 + 144), a3, 0x318uLL);
  sub_100123B54(a4);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_10144B458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10144B478(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLVehicleStateNotifier::onTransitNavigationStateUpdateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B70C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onTransitNavigationStateUpdateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onTransitNavigationStateUpdateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10144D404(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10144B628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10144B648(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLVehicleStateNotifier::onDaemonStatus");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B70C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onDaemonStatus", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onDaemonStatus\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (*a2 == 8)
  {
    *(_BYTE *)(a4 + 1292) = *a3;
    sub_100123B54(a4);
  }
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_10144B80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10144B82C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLVehicleStateNotifier::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B70C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_10144D8F4(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_10144B9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10144B9FC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLVehicleStateNotifier::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B70C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (*a2 == 1)
    *(_BYTE *)(a4 + 1106) = *(_BYTE *)(a3 + 4);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_10144BBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10144BBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  void *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[8];
  _BYTE v11[32];

  CLProfilingIdentify("CLVehicleStateNotifier::onCarAutomaticDNDTriggeringPreferenceChanged");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B70C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onCarAutomaticDNDTriggeringPreferenceChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v11 = 2082;
      *(_QWORD *)&v11[2] = "";
      *(_WORD *)&v11[10] = 2082;
      *(_QWORD *)&v11[12] = "activity";
      *(_WORD *)&v11[20] = 2050;
      *(_QWORD *)&v11[22] = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onCarAutomaticDNDTriggeringPreferenceChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  v7 = *(void **)(a4 + 1128);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)v11 = 3221225472;
  *(_QWORD *)&v11[8] = sub_10144DB50;
  *(_QWORD *)&v11[16] = &unk_1021B7018;
  *(_QWORD *)&v11[24] = a4;
  objc_msgSend(v7, "fetchAutomaticDNDTriggerPreferenceWithReply:", buf);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_10144BDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10144BDC8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B7150;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10144BE3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_1021B6F48;

  *(_QWORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1072) = 0;

  *(_QWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1088) = 0;

  *(_QWORD *)(a1 + 1360) = 0;
  v2 = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1560) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);

  v3 = *(_QWORD *)(a1 + 1568);
  if (v3)
  {
    sub_100CB08F0(v3);
    operator delete();
  }
  v4 = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1560) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100BCD638(a1 + 1368);
  sub_100E3E6C8(a1 + 1304);
  v5 = *(_QWORD *)(a1 + 1296);
  *(_QWORD *)(a1 + 1296) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 1120);
  *(_QWORD *)(a1 + 1120) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_10042B248((uint64_t *)(a1 + 1112), 0);
  v7 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return sub_10144BDC8(a1);
}

void sub_10144BFB0(uint64_t a1)
{
  sub_10144BE3C(a1);
  operator delete();
}

uint64_t sub_10144BFD4(uint64_t a1)
{
  uint64_t result;

  if (*(int *)(a1 + 1312) >= 1)
    sub_100E3E6F0(a1 + 1304);
  result = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_BYTE *)(a1 + 108) = 1;
  return result;
}

uint64_t sub_10144C024(uint64_t a1, _DWORD *a2)
{
  if (!*a2)
    sub_10144C044(a1);
  return 1;
}

void sub_10144C044(uint64_t a1)
{
  int v2;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  void *__p[2];
  char v19;
  _DWORD v20[2];
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _BOOL4 v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  _BOOL4 v38;

  *(_DWORD *)buf = 0;
  v2 = sub_1001B7864(a1, (int *)buf, 1);
  v3 = v2;
  if (*(_BYTE *)(a1 + 1352))
  {
    if (*(_BYTE *)(a1 + 1104)
      || *(_BYTE *)(a1 + 1105)
      || *(_QWORD *)(a1 + 1152) == 2
      || !*(_BYTE *)(a1 + 1353)
      || v2 <= 0)
    {
      if (*(int *)(a1 + 1312) >= 1)
      {
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021B7120);
        v4 = qword_10229FCB8;
        if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
        {
          v5 = *(unsigned __int8 *)(a1 + 1104);
          v6 = *(unsigned __int8 *)(a1 + 1105);
          v7 = *(_QWORD *)(a1 + 1152);
          v8 = *(unsigned __int8 *)(a1 + 1353);
          *(_DWORD *)buf = 67175681;
          v30 = v5;
          v31 = 1025;
          v32 = v6;
          v33 = 2049;
          v34 = v7;
          v35 = 1025;
          v36 = v8;
          v37 = 1025;
          v38 = v3 > 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "VEHICULAR: Releasing power assertion and disabling proactive gps, loi, %{private}d, stationaryWifi, %{private}d, state, %{private}lu, auth, %{private}d, clients, %{private}d", buf, 0x24u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCB0 != -1)
            dispatch_once(&qword_10229FCB0, &stru_1021B7120);
          v10 = *(unsigned __int8 *)(a1 + 1104);
          v11 = *(unsigned __int8 *)(a1 + 1105);
          v12 = *(_QWORD *)(a1 + 1152);
          v13 = *(unsigned __int8 *)(a1 + 1353);
          v20[0] = 67175681;
          v20[1] = v10;
          v21 = 1025;
          v22 = v11;
          v23 = 2049;
          v24 = v12;
          v25 = 1025;
          v26 = v13;
          v27 = 1025;
          v28 = v3 > 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: Releasing power assertion and disabling proactive gps, loi, %{private}d, stationaryWifi, %{private}d, state, %{private}lu, auth, %{private}d, clients, %{private}d", v20, 36);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::checkAndToggleGPS()", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
        sub_100E3E6F0(a1 + 1304);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1560) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1560) + 8), 0);
      *(_BYTE *)(a1 + 1352) = 0;
    }
  }
  else if (!*(_BYTE *)(a1 + 1104) && !*(_BYTE *)(a1 + 1105) && *(_QWORD *)(a1 + 1152) != 2)
  {
    if (*(_BYTE *)(a1 + 1353))
    {
      if (v2 >= 1)
      {
        *(_BYTE *)(a1 + 1352) = 1;
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1560) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1560) + 8), 0, 0);
        if (*(int *)(a1 + 1312) <= 0)
        {
          if (qword_10229FCB0 != -1)
            dispatch_once(&qword_10229FCB0, &stru_1021B7120);
          v9 = qword_10229FCB8;
          if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "VEHICULAR: Taking power assertion and enabling proactive gps.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FCB0 != -1)
              dispatch_once(&qword_10229FCB0, &stru_1021B7120);
            LOWORD(v20[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: Taking power assertion and enabling proactive gps.", v20, 2);
            v17 = (uint8_t *)v16;
            sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::checkAndToggleGPS()", "%s\n", v16);
            if (v17 != buf)
              free(v17);
          }
          sub_1015A2E04(__p, "vehicular detection");
          sub_10002B684(a1 + 1304, (uint64_t *)__p);
          if (v19 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_10144C490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10144C4B4(uint64_t a1, _DWORD *a2)
{
  if (!*a2)
    sub_10144C044(a1);
  return 1;
}

void sub_10144C4D4(uint64_t a1, void *a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend(a2, "isAuthorizedForServiceTypeMask:", 16);
  *(_BYTE *)(v2 + 1353) = v3;
  if ((v3 & 1) == 0)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v4 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "VEHICULAR: Motion calibration system service is disabled.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: Motion calibration system service is disabled.", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateLocationAuthorization()_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

__n128 sub_10144C670(uint64_t a1, int *a2, const CLMotionActivity *a3)
{
  uint64_t v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 result;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint8_t *v46;
  double v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  _BYTE v53[6];
  _BYTE v54[6];
  int v55;
  int v56;
  int v57;
  _BYTE v58[6];
  int v59;
  int v60;
  _BYTE v61[24];
  uint8_t buf[4];
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  unsigned int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  double v109;
  __int16 v110;
  uint64_t v111;

  v5 = a1 + 936;
  if ((CLMotionActivity::isSimilar((CLMotionActivity *)(a1 + 936), (const CLMotionActivity *)a2, a3) & 1) == 0
    && ((CLMotionActivity::isInVehicle((CLMotionActivity *)v5) & 1) != 0
     || CLMotionActivity::isInVehicle((CLMotionActivity *)a2)))
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v6 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_DWORD *)(a1 + 936);
      v8 = *((_QWORD *)a2 + 10);
      v9 = *a2;
      v10 = a2[1];
      v11 = a2[16];
      v12 = a2[4];
      v13 = a2[5];
      v14 = *((unsigned __int8 *)a2 + 96);
      v15 = a2[3];
      v16 = a2[13];
      v17 = *((unsigned __int8 *)a2 + 48);
      v18 = a2[25];
      v19 = *((unsigned __int8 *)a2 + 68);
      v20 = *((unsigned __int8 *)a2 + 69);
      v21 = *((unsigned __int8 *)a2 + 70);
      v22 = *((unsigned __int16 *)a2 + 36);
      v47 = *(double *)(a1 + 1216);
      v48 = *(_QWORD *)(a1 + 1224);
      *(_DWORD *)buf = 67115264;
      v63 = v7;
      v64 = 1024;
      v65 = v9;
      v66 = 2048;
      v67 = v8;
      v68 = 1024;
      v69 = v10;
      v70 = 1024;
      v71 = v11;
      v72 = 1024;
      v73 = v13;
      v74 = 1024;
      v75 = v14 & 1;
      v76 = 1024;
      v77 = (v14 >> 1) & 1;
      v78 = 1024;
      v79 = (v14 >> 4) & 1;
      v80 = 1024;
      v81 = (v14 >> 3) & 1;
      v82 = 1024;
      v83 = (v14 >> 2) & 1;
      v84 = 1024;
      v85 = v15;
      v86 = 1024;
      v87 = v12;
      v88 = 1024;
      v89 = v16;
      v90 = 1024;
      v91 = v17;
      v92 = 1024;
      v93 = v18;
      v94 = 1024;
      v95 = v19 & 0xF;
      v96 = 1024;
      v97 = v19 >> 4;
      v98 = 1024;
      v99 = v20;
      v100 = 1024;
      v101 = v21 & 1;
      v102 = 1024;
      v103 = (v21 >> 1) & 1;
      v104 = 1024;
      v105 = v22;
      v106 = 1024;
      v107 = (v21 >> 2) & 1;
      v108 = 2048;
      v109 = v47;
      v110 = 2048;
      v111 = v48;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "VEHICULAR transition: from,%d,to,%d,time,%f,confidence,%d,vehicleType,%d,constrained,%d,motion,%d,gps,%d,bt,%d,wifi,%d,bb,%d,mountedState,%d,mountedConfidence,%d,exitState,%d,isVehicleConnected,%d,vehicularConfidence,%d,prevFsmState,%d,curFsmState,%d,fsmEvent,%u,vehToStatic,%d,pedToMove,%d,consecStatic,%u,noRecentLoi,%d,lastLoiEnter,%lf,lastLoiExit,%lf", buf, 0xA4u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      v30 = *((_QWORD *)a2 + 10);
      v31 = *a2;
      v32 = a2[1];
      v33 = a2[16];
      v34 = a2[4];
      v35 = a2[5];
      v36 = *((unsigned __int8 *)a2 + 96);
      v37 = a2[3];
      v38 = a2[13];
      v39 = a2[25];
      v40 = *((unsigned __int8 *)a2 + 68);
      v41 = *((unsigned __int8 *)a2 + 70);
      v42 = *((unsigned __int16 *)a2 + 36);
      v43 = *(_QWORD *)(a1 + 1216);
      v44 = *(_QWORD *)(a1 + 1224);
      LOWORD(v50) = 1024;
      HIWORD(v50) = v31;
      LOWORD(v51) = 1024;
      HIWORD(v51) = v32;
      LOWORD(v52) = HIWORD(v35);
      HIWORD(v52) = 1024;
      *(_WORD *)v53 = 1024;
      *(_DWORD *)&v53[2] = (v36 >> 1) & 1;
      *(_DWORD *)v54 = (v36 >> 3) & 1;
      *(_WORD *)&v54[4] = 1024;
      LOWORD(v55) = 1024;
      HIWORD(v55) = v37;
      LOWORD(v56) = HIWORD(v38);
      HIWORD(v56) = 1024;
      LOWORD(v57) = 1024;
      HIWORD(v57) = v39;
      *(_DWORD *)v58 = v40 >> 4;
      *(_WORD *)&v58[4] = 1024;
      LOWORD(v59) = 1024;
      HIWORD(v59) = v41 & 1;
      LOWORD(v60) = HIWORD(v42);
      HIWORD(v60) = 1024;
      *(_WORD *)v61 = 2048;
      *(_QWORD *)&v61[2] = v43;
      *(_WORD *)&v61[10] = 2048;
      *(_QWORD *)&v61[12] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR transition: from,%d,to,%d,time,%f,confidence,%d,vehicleType,%d,constrained,%d,motion,%d,gps,%d,bt,%d,wifi,%d,bb,%d,mountedState,%d,mountedConfidence,%d,exitState,%d,isVehicleConnected,%d,vehicularConfidence,%d,prevFsmState,%d,curFsmState,%d,fsmEvent,%u,vehToStatic,%d,pedToMove,%d,consecStatic,%u,noRecentLoi,%d,lastLoiEnter,%lf,lastLoiExit,%lf", &v49, 164, v47, qword_10229FCB8, 67115264, v50, v30, v51,
        v33,
        v52,
        *(_DWORD *)v53,
        (v36 >> 4) & 1,
        *(_DWORD *)&v54[2],
        v55,
        v34,
        v56,
        v57,
        v40 & 0xF,
        *(_DWORD *)&v58[2],
        v59,
        (v41 >> 1) & 1,
        v60,
        *(_DWORD *)v61,
        *(double *)&v61[8],
        *(double *)&v61[16]);
      v46 = (uint8_t *)v45;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::feedMotionActivity(const CLMotionActivity &)", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
  }
  *(_OWORD *)v5 = *(_OWORD *)a2;
  v23 = *((_OWORD *)a2 + 1);
  v24 = *((_OWORD *)a2 + 2);
  v25 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(v5 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v5 + 64) = v25;
  *(_OWORD *)(v5 + 16) = v23;
  *(_OWORD *)(v5 + 32) = v24;
  v26 = *((_OWORD *)a2 + 5);
  v27 = *((_OWORD *)a2 + 6);
  v28 = *((_OWORD *)a2 + 7);
  *(_QWORD *)(v5 + 128) = *((_QWORD *)a2 + 16);
  *(_OWORD *)(v5 + 96) = v27;
  *(_OWORD *)(v5 + 112) = v28;
  *(_OWORD *)(v5 + 80) = v26;
  sub_100123B54(a1);
  return result;
}

void sub_10144CB18(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  int v4;
  NSObject *v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  uint8_t buf[4];
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;

  v2 = sub_10012409C(a1);
  v4 = v2;
  if ((_DWORD)v2)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v5 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[MotionCues] suppressed vehicular", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      LOWORD(v31) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "[MotionCues] suppressed vehicular", &v31, 2);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateMotionCues()", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    v7 = 1;
  }
  else
  {
    v7 = sub_1001364C8(v3, v2, (_DWORD *)(a1 + 936), (double *)(a1 + 144));
  }
  if (CLMotionActivity::isTypeInVehicle(*(unsigned int *)(a1 + 936), v6))
    v8 = *(_BYTE *)(a1 + 1032) & 0x1F;
  else
    v8 = 0;
  if (*(double *)(a1 + 144) > 0.0 && *(double *)(a1 + 152) < 0.0)
    v9 = v8 | 0x10;
  else
    v9 = v8;
  v11 = *(_DWORD *)(a1 + 1272) == 1 || *(_QWORD *)(a1 + 1280) == 1;
  if (v7 != *(_QWORD *)(a1 + 1184) || v9 != *(_QWORD *)(a1 + 1192) || *(_QWORD *)(a1 + 1200) != v11)
  {
    if (*(_DWORD *)(a1 + 1136) == 3)
    {
      v12 = *(_QWORD *)(a1 + 1152);
      if (v7 != 2 || v12 == 2)
      {
        v15 = v7 == 2 || v12 != 2;
        if (v15 || *(double *)(a1 + 144) > 0.0 && *(double *)(a1 + 152) < 0.0)
          v13 = 0;
        else
          v13 = 2;
      }
      else
      {
        v13 = 1;
      }
    }
    else
    {
      v13 = 2;
    }
    sub_10144D398((id *)a1, v13);
    *(_QWORD *)(a1 + 1184) = v7;
    *(_QWORD *)(a1 + 1192) = v9;
    *(_QWORD *)(a1 + 1200) = v11;
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v16 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(unsigned __int8 *)(a1 + 1104);
      v18 = *(unsigned __int8 *)(a1 + 1208);
      v19 = sub_1001240F8(*(_QWORD *)(a1 + 1112));
      v20 = *(unsigned __int8 *)(a1 + 1140);
      *(_DWORD *)buf = 134350592;
      v46 = v7;
      v47 = 2050;
      v48 = v9;
      v49 = 1026;
      v50 = v4;
      v51 = 1026;
      v52 = v17;
      v53 = 1026;
      v54 = v18;
      v55 = 1026;
      v56 = v19;
      v57 = 1026;
      v58 = v20;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[MotionCues] VEHICULAR: motionCues, state, %{public}lu, hints, %{public}lu, fpSuppress, %{public}u, inDNDLOI, %{public}u, inFastSuppressionRange, %{public}u, wifiPowered, %{public}u, disableFpSuppressDnD, %{public}u", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      v21 = qword_10229FCB8;
      v22 = *(unsigned __int8 *)(a1 + 1104);
      v23 = *(unsigned __int8 *)(a1 + 1208);
      v24 = sub_1001240F8(*(_QWORD *)(a1 + 1112));
      v25 = *(unsigned __int8 *)(a1 + 1140);
      v31 = 134350592;
      v32 = v7;
      v33 = 2050;
      v34 = v9;
      v35 = 1026;
      v36 = v4;
      v37 = 1026;
      v38 = v22;
      v39 = 1026;
      v40 = v23;
      v41 = 1026;
      v42 = v24;
      v43 = 1026;
      v44 = v25;
      LODWORD(v30) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 0, "[MotionCues] VEHICULAR: motionCues, state, %{public}lu, hints, %{public}lu, fpSuppress, %{public}u, inDNDLOI, %{public}u, inFastSuppressionRange, %{public}u, wifiPowered, %{public}u, disableFpSuppressDnD, %{public}u", &v31, v30);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateMotionCues()", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    sub_10144E408(a1);
  }
}

uint64_t sub_10144CF90(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  *(_BYTE *)(a1 + 1104) = 0;
  *(CFAbsoluteTime *)(a1 + 1224) = CFAbsoluteTimeGetCurrent();
  *(_OWORD *)(a1 + 1232) = xmmword_101BAFEE0;
  *(_QWORD *)(a1 + 1248) = 0xBFF0000000000000;
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_1021B7120);
  v2 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "VEHICULAR: exiting DNDLOI", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: exiting DNDLOI", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::exitDndLoi()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10144C044(a1);
  sub_100123B54(a1);
  result = sub_1001FBB04(0);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 128) + 16))(result + 128, 1);
  return result;
}

uint64_t sub_10144D16C(uint64_t a1, double a2, double a3, double a4)
{
  double v8;
  NSObject *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;

  *(_BYTE *)(a1 + 1104) = 1;
  *(CFAbsoluteTime *)(a1 + 1216) = CFAbsoluteTimeGetCurrent();
  v8 = 0.0;
  if (a4 < 1000.0 && a4 > 0.0)
    v8 = a4;
  *(double *)(a1 + 1232) = v8;
  *(double *)(a1 + 1240) = a2;
  *(double *)(a1 + 1248) = a3;
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_1021B7120);
  v10 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(a1 + 1232);
    *(_DWORD *)buf = 134349056;
    v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "VEHICULAR: entering DNDLOI, range, %{public}f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v13 = *(_QWORD *)(a1 + 1232);
    v16 = 134349056;
    v17 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: entering DNDLOI, range, %{public}f", &v16, 12);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::enterDndLoi(CLLocationCoordinate2D, CLLocationAccuracy)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  sub_10144C044(a1);
  sub_100123B54(a1);
  result = sub_1001FBB04(0);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(result + 128) + 16))(result + 128, 0);
  return result;
}

id *sub_10144D398(id *result, int a2)
{
  id *v2;
  int v3;

  v2 = result;
  if (a2 == 2)
  {
    if (*((_DWORD *)result + 322) != 3)
      return result;
    result = (id *)objc_msgSend(result[137], "stopMonitoringTransitStateForClient:", result[136]);
    v3 = 4;
    goto LABEL_7;
  }
  if (a2 == 1 && *((_DWORD *)result + 322) != 3)
  {
    result = (id *)objc_msgSend(result[137], "startMonitoringTransitStateForClient:", result[136]);
    v3 = 3;
LABEL_7:
    *((_DWORD *)v2 + 322) = v3;
  }
  return result;
}

void sub_10144D404(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_1021B7120);
  v6 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *a4;
    *(_DWORD *)buf = 67240192;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "VEHICULAR: Received transit navigation state: %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v8 = *a4;
    v11[0] = 67240192;
    v11[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: Received transit navigation state: %{public}d", v11, 8);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::onTransitNavigationStateUpdateNotification(int, const CLCachedLocationController_Type::Notification &, const CLCachedLocationController_Type::NotificationData &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  *(_DWORD *)(a1 + 1272) = *a4;
  sub_100123B54(a1);
}

void sub_10144D5C8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  NSObject *v4;
  BOOL v5;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  if ((*a3 & 0xFFFFFFFE) == 6)
  {
    if (!sub_100219670(*(_QWORD *)(a1 + 1112)))
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      v4 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "VEHICULAR: WiFi dis-associated, update vehicular state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021B7120);
        LOWORD(v14[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "VEHICULAR: WiFi dis-associated, update vehicular state", v14, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      sub_100123B54(a1);
    }
    v5 = sub_100219670(*(_QWORD *)(a1 + 1112)) && !sub_1014801BC(*(_QWORD *)(a1 + 1112));
    *(_BYTE *)(a1 + 1105) = v5;
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v6 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
    {
      v7 = *(unsigned __int8 *)(a1 + 1105);
      *(_DWORD *)buf = 67174657;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "VEHICULAR: WiFi isStationary, %{private}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      v8 = *(unsigned __int8 *)(a1 + 1105);
      v14[0] = 67174657;
      v14[1] = v8;
      LODWORD(v13) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "VEHICULAR: WiFi isStationary, %{private}d", v14, v13);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_10144C044(a1);
  }
}

void sub_10144D8F4(uint64_t a1, uint64_t a2, int *a3)
{
  void *v4;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[8];
  uint64_t v13;
  void (*v14)(uint64_t, void *);
  void *v15;
  uint64_t v16;

  if (*a3 == 14)
  {
    v4 = *(void **)(a1 + 1360);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    v13 = 3221225472;
    v14 = sub_10144C4D4;
    v15 = &unk_10214D390;
    v16 = a1;
    objc_msgSend(v4, "getAuthorizationContextOfNonZonalClient:withReply:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle"), buf);
    sub_10144C044(a1);
  }
  else if (*a3)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B7100);
    v6 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v7 = *a3;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Warning VEHICULAR: Received unhandled location notification, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B7100);
      v8 = *a3;
      v11[0] = 67240192;
      v11[1] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "#Warning VEHICULAR: Received unhandled location notification, %{public}d", v11, 8);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLVehicleStateNotifier::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  else
  {
    sub_100BCF0A0(a1 + 1368);
  }
}

void sub_10144DB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  _WORD v8[8];
  _QWORD v9[6];
  uint8_t buf[1640];

  if (a3)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B7100);
    v3 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#error when retrieving Car Automatic DND Trigger Preference", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B7100);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#error when retrieving Car Automatic DND Trigger Preference", v8, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::retrieveCarAutomaticDNDTriggeringPreference()_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10144DD18;
    v9[3] = &unk_102143528;
    v9[4] = v6;
    v9[5] = a2;
    objc_msgSend(v7, "async:", v9);
  }
}

void sub_10144DD18(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 < 3)
    v3 = v2 + 1;
  else
    v3 = 0;
  *(_DWORD *)(v1 + 1136) = v3;
  sub_100123B54(v1);
}

id sub_10144DD30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v7[8];

  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(v3 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10144DD8C;
  v7[3] = &unk_10214A1B0;
  v7[4] = a3;
  v7[5] = a2;
  v7[6] = v4;
  v7[7] = v3;
  return objc_msgSend(v5, "async:", v7);
}

void sub_10144DD8C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  NSObject *v11;
  uint8_t *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  NSObject *v27;
  uint8_t *v28;
  uint64_t v29;
  double v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  int v39;
  uint64_t v40;
  uint8_t buf[4];
  uint64_t v42;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 32))
  {
    sub_10144A490(*(_QWORD *)(a1 + 56));
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v3 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      v42 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "VEHICULAR: Error retrieving LOIs. %{public}@", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v29 = *(_QWORD *)(a1 + 32);
    v39 = 138543362;
    v40 = v29;
    v30 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 16, "VEHICULAR: Error retrieving LOIs. %{public}@", &v39, 12);
    v28 = v31;
    sub_100512490("Generic", 1, 0, 0, "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)_block_invoke", "%s\n", v30);
LABEL_49:
    if (v28 != buf)
      free(v28);
    return;
  }
  if (!objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    *(_BYTE *)(v2 + 1209) = 1;
    if (!*(_BYTE *)(v2 + 1208))
      return;
    *(_BYTE *)(v2 + 1208) = 0;
    sub_100123B54(v2);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v11 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "VEHICULAR: No LOIs near fast suppression range", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    LOWORD(v39) = 0;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: No LOIs near fast suppression range", &v39, 2);
LABEL_45:
    v28 = v12;
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)_block_invoke", "%s\n", v13);
    goto LABEL_49;
  }
  if (!*(_BYTE *)(v2 + 1209))
  {
    *(_BYTE *)(v2 + 1209) = 1;
    objc_msgSend(*(id *)(a1 + 48), "coordinate");
    v23 = v22;
    v25 = v24;
    objc_msgSend(*(id *)(a1 + 48), "horizontalAccuracy");
    sub_10144D16C(v2, v23, v25, v26);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v27 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "VEHICULAR: recover visit, confidence, high, entry", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    LOWORD(v39) = 0;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: recover visit, confidence, high, entry", &v39, 2);
    goto LABEL_45;
  }
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v5 = *(void **)(a1 + 40);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v35;
    while (2)
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v35 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i);
        if (!objc_msgSend(v10, "type") || objc_msgSend(v10, "type") == (id)1)
        {
          if (!*(_BYTE *)(v2 + 1208))
          {
            objc_msgSend(objc_msgSend(v10, "location"), "latitude");
            v15 = v14;
            objc_msgSend(objc_msgSend(v10, "location"), "longitude");
            v17 = v16;
            objc_msgSend(*(id *)(a1 + 48), "coordinate");
            v19 = v18;
            objc_msgSend(*(id *)(a1 + 48), "coordinate");
            if (sub_100124100(v15, v17, v19, v20) < 60.0)
            {
              *(_BYTE *)(v2 + 1208) = 1;
              if (qword_10229FCB0 != -1)
                dispatch_once(&qword_10229FCB0, &stru_1021B7120);
              v21 = qword_10229FCB8;
              if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "VEHICULAR: fast suppression range detected", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FCB0 != -1)
                  dispatch_once(&qword_10229FCB0, &stru_1021B7120);
                LOWORD(v39) = 0;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: fast suppression range detected", &v39, 2);
                v33 = (uint8_t *)v32;
                sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)_block_invoke", "%s\n", v32);
                if (v33 != buf)
                  free(v33);
              }
              sub_100123B54(v2);
            }
          }
          return;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      if (v7)
        continue;
      break;
    }
  }
  *(_BYTE *)(v2 + 1208) = 0;
}

void sub_10144E408(uint64_t a1)
{
  id *v1;
  id v2;
  NSObject *v3;
  double v4;
  uint8_t *v5;
  uint8_t *v6;
  NSObject *v7;
  double v8;
  uint8_t *v9;
  int v10;
  id v11;
  uint8_t buf[4];
  id v13;

  v1 = (id *)&kCMMotionCuesEnterVehicularStateNotification;
  if (*(_QWORD *)(a1 + 1184) != 2)
    v1 = (id *)&kCMMotionCuesExitVehicularStateNotification;
  v2 = *v1;
  if (notify_post((const char *)objc_msgSend(*v1, "UTF8String")))
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v3 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[MotionCues] VEHICULAR: Could not post state associated with vehicular state changed notification.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      LOWORD(v10) = 0;
      v4 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 16, "[MotionCues] VEHICULAR: Could not post state associated with vehicular state changed notification.", &v10, 2);
      v6 = v5;
      sub_100512490("Generic", 1, 0, 0, "void CLVehicleStateNotifier::notifyMotionCues()", "%s\n", v4);
LABEL_21:
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v7 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v13 = v2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[MotionCues] VEHICULAR: successfully posted notification, %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      v10 = 138412290;
      v11 = v2;
      v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "[MotionCues] VEHICULAR: successfully posted notification, %@", &v10, 12);
      v6 = v9;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::notifyMotionCues()", "%s\n", v8);
      goto LABEL_21;
    }
  }
}

void sub_10144E6EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  __int128 *v7;
  double v8;
  __int128 *v9;
  NSObject *v10;
  NSObject *v11;
  double v12;
  __int128 *v13;
  _BYTE v14[12];
  __int128 buf;
  uint64_t v16;
  const __CFString *v17;
  NSNumber *v18;

  if ((sub_1001B7910() & 0x800000000) != 0)
  {
    v2 = a1[144];
    v3 = a1[145];
    v4 = a1[146];
    *(_DWORD *)v14 = 0;
    *(_QWORD *)&buf = v2;
    *((_QWORD *)&buf + 1) = v3;
    v16 = v4;
    (*(void (**)(_QWORD *, _BYTE *, __int128 *, uint64_t, uint64_t, _QWORD))(*a1 + 152))(a1, v14, &buf, 1, 0xFFFFFFFFLL, 0);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)&buf = v2;
    *((_QWORD *)&buf + 1) = v3;
    v16 = v4;
    (*(void (**)(_QWORD *, _BYTE *, __int128 *, uint64_t, uint64_t, _QWORD))(*a1 + 152))(a1, v14, &buf, 1, 0xFFFFFFFFLL, 0);
    if (sub_1001DFAE8())
    {
      v17 = CFSTR("Mode");
      v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 288));
      sub_10019E128((uint64_t)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1), (uint64_t)"VehicularDetection");
    }
    v5 = kCMVehicularStateChangedNotification;
    if (notify_post((const char *)objc_msgSend(kCMVehicularStateChangedNotification, "UTF8String")))
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      v6 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "VEHICULAR: Could not post state associated with vehicular state changed notification.", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021B7120);
        *(_WORD *)v14 = 0;
        v8 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCB8, 16, "VEHICULAR: Could not post state associated with vehicular state changed notification.", v14, 2, *(_QWORD *)v14);
LABEL_13:
        v9 = v7;
        sub_100512490("Generic", 1, 0, 0, "void CLVehicleStateNotifier::notifyVehicularDnd()", "%s\n", v8);
LABEL_33:
        if (v9 != &buf)
          free(v9);
      }
    }
    else if (a1[143] == 2
           && notify_post((const char *)objc_msgSend(kCMVehicularStateChangedToVehicularNotification, "UTF8String")))
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      v10 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "VEHICULAR: Could not post kCMVehicularStateChangedToVehicularNotification.", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021B7120);
        *(_WORD *)v14 = 0;
        v8 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCB8, 16, "VEHICULAR: Could not post kCMVehicularStateChangedToVehicularNotification.", v14, 2, *(_QWORD *)v14);
        goto LABEL_13;
      }
    }
    else
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      v11 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v5;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "VEHICULAR: successfully posted notification, %@", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021B7120);
        *(_DWORD *)v14 = 138412290;
        *(_QWORD *)&v14[4] = v5;
        v12 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: successfully posted notification, %@", v14, 12);
        v9 = v13;
        sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::notifyVehicularDnd()", "%s\n", v12);
        goto LABEL_33;
      }
    }
  }
}

uint64_t sub_10144EB88(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_1021B7338;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_10144EC5C()
{
  operator new();
}

void sub_10144ED08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_10144ED44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B70C0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021B70C0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_10144EFB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FFF00);
}

uint64_t sub_10144EFCC(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  uint8_t buf[1640];

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 24);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_101451858();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FFF01;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B70C0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_10144F42C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B70C0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_10144F6AC(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B70C0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021B70C0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10144FA34(uint64_t a1, int *a2, uint64_t a3)
{
  char *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = (char *)operator new(0x30uLL);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_1021B72C8;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v6 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)&v13 = v6 + 24;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101B9EB60, &v14);
  sub_1002B7674((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_10144FB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10144FB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[3];

  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_10144FB60(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x30uLL);
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_1021B72C8;
      *(_OWORD *)(v24 + 24) = *(_OWORD *)a3;
      *((_QWORD *)v24 + 5) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1014509F4();
    os_activity_scope_leave(&state);
  }
}

void sub_1014501A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1014501EC(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B70C0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::listClients() [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B70C0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::listClients() [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021B70C0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B70C0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::listClients() [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_101450798(uint64_t a1)
{
  sub_1014517F8(a1);
  operator delete();
}

id sub_1014507BC(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_101450FAC(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_101450808(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

Class sub_101450834()
{
  Class result;

  if (qword_10230F170 != -1)
    dispatch_once(&qword_10230F170, &stru_1021B70E0);
  result = objc_getClass("CARAutomaticDNDStatus");
  qword_10230F168 = (uint64_t)result;
  off_1022FFEF8 = sub_101450890;
  return result;
}

uint64_t sub_101450890()
{
  return qword_10230F168;
}

void sub_10145089C(id a1)
{
  qword_10230F178 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CarKit.framework/CarKit", 2);
}

void sub_1014508C4(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1014508F0(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

__n128 sub_10145091C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1021B7230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_101450960(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021B7230;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10145098C(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t sub_1014509AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1014509E8()
{
}

void sub_1014509F4()
{
  operator new();
}

void sub_101450A8C(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_101450FAC(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_101450E60(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B70C0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021B70C0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_101450E60(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_101450FAC(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_101450F3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021B72C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101450F50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021B72C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_101450F8C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_101450FAC(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_101451024(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_1014513AC(a1);
  else
    return 0;
}

id sub_101451024(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_101451758((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B7308);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101CA4E52 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B7308);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B7308);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101CA4E52 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B7308);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVehicleStateNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1014513AC(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B7308);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101CA4E52 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B7308);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B7308);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101CA4E52 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B7308);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVehicleStateNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_101451758(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221DCA0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)24)
      sub_101955258();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_1014517CC(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_1014517F8(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_1021B7338;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_101451858()
{
  operator new();
}

uint64_t sub_1014518F0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_101451910()
{
  operator new();
}

void sub_101451970()
{
  operator delete();
}

uint64_t sub_101451994()
{
  if (qword_10230F180 != -1)
    dispatch_once(&qword_10230F180, &stru_1021B7350);
  return qword_102314058;
}

_QWORD *sub_1014519D8(_QWORD *a1)
{
  *a1 = off_1021B7380;
  sub_100261F44((uint64_t)(a1 + 4));
  return sub_1009BAD18(a1);
}

void sub_101451A08(_QWORD *a1)
{
  *a1 = off_1021B7380;
  sub_100261F44((uint64_t)(a1 + 4));
  sub_1009BAD18(a1);
  operator delete();
}

void sub_101451A4C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  NSObject *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  char v15;
  _WORD v16[8];
  uint8_t buf[1640];

  if (!a2)
  {
    v6 = (uint64_t **)(a1 + 32);
    v5 = *(uint64_t **)(a1 + 32);
    if (v5)
      goto LABEL_14;
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021B73C8);
    v7 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Building AccessoryWake device", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021B73C8);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Building AccessoryWake device", v16, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPencilMotion::numberOfSpectatorsChanged(int, size_t)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v8 = (uint64_t *)sub_100A07FA0();
    v14 = 0x330000FF00;
    v15 = 0;
    sub_1018E4078(v8, (uint64_t)&v14, (uint64_t *)buf);
    sub_1002B7674((uint64_t)v6, (__int128 *)buf);
    v9 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v5 = *v6;
    if (*v6)
    {
LABEL_14:
      if (a3)
        sub_100A0A4BC(v5, (uint64_t)sub_101451C8C, a1);
      else
        sub_100A0A4BC(v5, 0, 0);
    }
  }
}

void sub_101451C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v6;
  NSObject *v7;
  double v8;
  uint8_t *v9;
  uint8_t *v10;
  unint64_t TimeStamp;
  NSObject *v12;
  double v13;
  uint8_t *v14;
  uint64_t v15;
  _OWORD *v16;
  _DWORD v17[4];
  uint8_t buf[16];

  if (IOHIDEventGetType(a4) != 1)
    return;
  v15 = 0;
  v16 = 0;
  IOHIDEventGetVendorDefinedData(a4, &v16, &v15);
  if (v16)
    v6 = v15 <= 0;
  else
    v6 = 1;
  if (v6)
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021B73C8);
    v7 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Empty payload, returning", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021B73C8);
    LOWORD(v17[0]) = 0;
    v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Empty payload, returning", v17, 2);
    v10 = v9;
    sub_100512490("Generic", 1, 0, 2, "static void CLPencilMotion::onIohidEventBounce(void *, void *, void *, IOHIDEventRef)", "%s\n", v8);
LABEL_26:
    if (v10 != buf)
      free(v10);
    return;
  }
  if (v15 == 16)
  {
    *(_OWORD *)buf = *v16;
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    sub_100127828(TimeStamp);
    sub_10145216C(a1, buf);
    return;
  }
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021B73C8);
  v12 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Bad AccessoryMotion report %{public}dB", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021B73C8);
    v17[0] = 67240192;
    v17[1] = v15;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 17, "Bad AccessoryMotion report %{public}dB", v17, 8);
    v10 = v14;
    sub_100512490("Generic", 1, 0, 0, "static void CLPencilMotion::onIohidEventBounce(void *, void *, void *, IOHIDEventRef)", "%s\n", v13);
    goto LABEL_26;
  }
}

double sub_101451FB4(uint64_t a1, int a2, double *a3)
{
  NSObject *v3;
  double v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  _WORD v10[8];
  uint8_t buf[1640];

  if (a2)
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021B73C8);
    v3 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", buf, 2u);
    }
    v4 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021B73C8);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 17, "Unrecognized notification", v10, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLPencilMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      sub_10006B4E0(v7, *a3);
      return *a3;
    }
    else
    {
      return 0.0;
    }
  }
  return v4;
}

uint64_t sub_10145216C(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  int v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021B73C8);
  v4 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "PencilMotion report %u", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021B73C8);
    v7 = *a2;
    v10[0] = 67109120;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "PencilMotion report %u", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLPencilMotion::onMotion(CFTimeInterval, CLPencilMotion::Report &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return sub_10012AC18(a1, 0, (uint64_t)a2, 16);
}

void sub_10145233C(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_1014527C0()
{
  operator delete();
}

id sub_1014527EC(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onMslp:", a1);
}

void sub_101453404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

void sub_101453E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10145433C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10145567C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014556A0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a2 >= 0xF)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a2;
      v20 = 2048;
      v21 = 15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
      v14 = 134218240;
      v15 = a2;
      v16 = 2048;
      v17 = 15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", (size_t)&v14, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "T &CMMatrix<double, 15>::operator()(size_t, size_t) [T = double, M = 15, N = 15]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a3 >= 0xF)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = 15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = 15;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", (size_t)&v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "T &CMMatrix<double, 15>::operator()(size_t, size_t) [T = double, M = 15, N = 15]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return a1 + 8 * (a2 - a3 + 16 * a3);
}

BOOL sub_1014559FC(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  unint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  unint64_t v23;
  uint8_t buf[4];
  unint64_t v25;

  result = sub_10145C290(a2);
  if (result)
  {
    v5 = 15;
    v6 = 14;
    while (1)
    {
      v7 = v6;
      v8 = sub_10145C370(a2, v6, v6);
      v9 = v5;
      if (v5 <= 0xE)
      {
        do
        {
          v10 = *(double *)sub_10145C6CC(a1 + 120, v7, v9);
          v11 = *(double *)sub_10145C6CC(a1 + 120, v7, v9);
          v8 = v8 + -(v10 * v11) * *(double *)sub_10145CA24(a1, v9++);
        }
        while (v9 != 15);
      }
      *(double *)sub_10145CA24(a1, v7) = v8;
      if (*(double *)sub_10145CA24(a1, v7) <= 0.0)
        break;
      if (v7)
      {
        v12 = v5 - 2;
        do
        {
          v13 = v12;
          v14 = sub_10145C370(a2, v12, v7);
          v15 = v5;
          if (v5 <= 0xE)
          {
            do
            {
              v16 = *(double *)sub_10145C6CC(a1 + 120, v13, v15);
              v17 = *(double *)sub_10145C6CC(a1 + 120, v7, v15);
              v14 = v14 + -(v16 * v17) * *(double *)sub_10145CA24(a1, v15++);
            }
            while (v15 != 15);
          }
          v18 = v14 / *(double *)sub_10145CA24(a1, v7);
          *(double *)sub_10145C6CC(a1 + 120, v13, v7) = v18;
          v12 = v13 - 1;
        }
        while (v13);
      }
      v6 = v7 - 1;
      v5 = v7;
      if (!v7)
        return 1;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
    v19 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "D(%zu) <= 0 non-positive definite matrix!", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
      v22 = 134217984;
      v23 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "D(%zu) <= 0 non-positive definite matrix!", (size_t)&v22);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<double, 15>::factor(const CMMatrix<T, N, N> &) [T = double, N = 15]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
      return 0;
    }
  }
  return result;
}

uint64_t sub_101455D30(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 0xF)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 15;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T &CMVector<double, 15>::operator[](const size_t) [T = double, N = 15]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return a1 + 8 * a2;
}

uint64_t sub_101455F08(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  NSObject *v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  double *v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  unint64_t v28;
  uint8_t buf[4];
  unint64_t v30;

  if (sub_10145CBFC(a1, 0) == 0.0)
  {
    v4 = 0;
    v5 = 0;
LABEL_7:
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "D[%zu] == 0, semidefinite matrix!", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
      v27 = 134217984;
      v28 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "D[%zu] == 0, semidefinite matrix!", (size_t)&v27);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<double, 15>::solve(CMVector<T, N> &) const [T = double, N = 15]", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
  }
  else
  {
    v6 = -1;
    while (v6 != 13)
    {
      v7 = sub_10145CBFC(a1, v6 + 2);
      ++v6;
      if (v7 == 0.0)
      {
        v4 = v6 > 0xD;
        v5 = v6 + 1;
        goto LABEL_7;
      }
    }
    v10 = a1 + 120;
    v11 = 14;
    v12 = 13;
    do
    {
      v13 = v11;
      v11 = v12;
      do
      {
        v14 = *(double *)sub_101455D30(a2, v13);
        v15 = sub_10145CDD4(a1 + 120, v11, v13);
        v16 = (double *)sub_101455D30(a2, v11);
        *v16 = *v16 - v14 * v15;
        ++v13;
      }
      while (v13 != 15);
      v12 = v11 - 1;
    }
    while (v11);
    do
    {
      v17 = sub_10145CBFC(a1, v11);
      v18 = (double *)sub_101455D30(a2, v11);
      *v18 = *v18 / v17;
      ++v11;
    }
    while (v11 != 15);
    v19 = 0;
    do
    {
      v20 = v19++;
      if (v20 <= 0xD)
      {
        v21 = v19;
        do
        {
          v22 = *(double *)sub_101455D30(a2, v20);
          v23 = sub_10145CDD4(v10, v20, v21);
          v24 = (double *)sub_101455D30(a2, v21);
          *v24 = *v24 - v22 * v23;
          ++v21;
        }
        while (v21 != 15);
      }
    }
    while (v19 != 15);
    return 1;
  }
  return v4;
}

void sub_1014564E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_1006F0FB8((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_101456B1C(uint64_t a1, void *a2)
{
  double Current;
  id v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  double v23;
  float v24;
  double v25;
  float v26;
  float v27;
  double v28;
  float v29;
  double v30;
  float v31;
  int v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  NSObject *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  double v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint8_t *v50;
  const char *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  const char *v58;
  uint8_t *v59;
  double v60;
  int v61;
  void *__p[2];
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  double v68;
  int v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  int v74;
  __int16 v75;
  uint64_t v76;
  uint8_t v77[128];
  uint8_t buf[4];
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  int v83;
  __int16 v84;
  uint64_t v85;

  if (objc_msgSend(a2, "count"))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v68 = 0.0;
    v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "latestAbsoluteAltitude");
    v6 = 0.0;
    if (v5)
    {
      v7 = v5;
      objc_msgSend(v5, "timestamp");
      v8 = 0.0;
      if (v9 != 1.79769313e308)
      {
        objc_msgSend(v7, "altitude");
        v8 = v10;
        objc_msgSend(v7, "accuracy");
        v6 = v11;
      }
    }
    else
    {
      v8 = 0.0;
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "removeAllObjects");
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v15 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v64, v77, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v65;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v65 != v16)
            objc_enumerationMutation(a2);
          v18 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v18, "meanSeaLevelPressure");
          if (v19 >= 80000.0 && v19 <= 115000.0)
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "addObject:", v18);
        }
        v15 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v64, v77, 16);
      }
      while (v15);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "removeAllObjects");
    objc_msgSend(*(id *)(a1 + 32), "clearRecentMeanSeaLevelPressureArrayInPlist");
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) = 0x7FEFFFFFFFFFFFFFLL;
    v20 = *(_QWORD **)(a1 + 32);
    v21 = v20[4];
    sub_1015A2E04(__p, "finish refreshing mean sea level pressure:");
    objc_msgSend(v20, "printMeanSeaLevelPressureArray:withPrePhrase:", v21, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    objc_msgSend(*(id *)(a1 + 32), "getAndSendCurrentEstimateMeanSeaLevelPressureFrom:", 0);
    v22 = objc_msgSend(*(id *)(a1 + 32), "getLastPressureSample:", &v68);
    if (v22)
    {
      v23 = v68;
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "meanSeaLevelPressure");
      v24 = v23;
      v26 = v25;
      v27 = sub_10024806C(v24, v26);
      v28 = v68;
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "meanSeaLevelPressure");
      v29 = v28;
      v31 = v30;
      sub_1013D36F0(v29, v31);
      LODWORD(v28) = v32;
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "uncertainty");
      v34 = v33 * *(float *)&v28;
      if (v8 == 0.0
        || (v35 = *(_QWORD *)(a1 + 32), v36 = *(double *)(v35 + 216), v36 == 1.79769313e308)
        || (v37 = *(double *)(v35 + 112), v37 == 1.79769313e308)
        || (*(_DWORD *)(v35 + 252) & 0x80000000) != 0
        || *(double *)(v35 + 312) == 1.79769313e308)
      {
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_1021B7438);
        v39 = qword_10229FE88;
        if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
        {
          v40 = *(_QWORD *)(a1 + 32);
          v41 = *(_QWORD *)(v40 + 216);
          v42 = *(_QWORD *)(v40 + 112);
          v43 = *(_DWORD *)(v40 + 252);
          v44 = *(_QWORD *)(v40 + 312);
          *(_DWORD *)buf = 134218752;
          v79 = v41;
          v80 = 2048;
          v81 = v42;
          v82 = 1024;
          v83 = v43;
          v84 = 2048;
          v85 = v44;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "fail to send mslp refresh event to CA,pressureAtRefresh,%f,lastSuccessfulRefreshTimestamp,%f,numberOfRebaseBtwRefresh,%d,maxPressure,%f", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE80 != -1)
            dispatch_once(&qword_10229FE80, &stru_1021B7438);
          v53 = *(_QWORD *)(a1 + 32);
          v54 = *(_QWORD *)(v53 + 216);
          v55 = *(_QWORD *)(v53 + 112);
          v56 = *(_DWORD *)(v53 + 252);
          v57 = *(_QWORD *)(v53 + 312);
          v69 = 134218752;
          v70 = v54;
          v71 = 2048;
          v72 = v55;
          v73 = 1024;
          v74 = v56;
          v75 = 2048;
          v76 = v57;
          LODWORD(v60) = 38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "fail to send mslp refresh event to CA,pressureAtRefresh,%f,lastSuccessfulRefreshTimestamp,%f,numberOfRebaseBtwRefresh,%d,maxPressure,%f", COERCE_DOUBLE(&v69), v60, v61, *(double *)__p);
          v59 = (uint8_t *)v58;
          sub_100512490("Generic", 1, 0, 2, "-[CLMeanSeaLevelPressureEstimator refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:]_block_invoke", "%s\n", v58);
          if (v59 != buf)
            free(v59);
        }
      }
      else
      {
        objc_msgSend((id)v35, "sentRefreshMslpAnalyticsWithAltitudeCorrection:uncertaintyBeforeCurrentRefresh:uncertaintyAfterCurrentRefresh:refreshDuration:xpcWaitingTime:timeDiffBtwRefresh:pressureDelta:", v27 - v8, v6, v34, (*(double *)(a1 + 40) - *(double *)(a1 + 48)) / 60.0, (Current - *(double *)(v35 + 264)) / 60.0, (Current - v37) / 60.0, vabdd_f64(v68, v36));
      }
    }
    else
    {
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021B7438);
      v38 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "current pressure is not available.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_1021B7438);
        LOWORD(v69) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "current pressure is not available.", &v69, 2);
        v52 = (uint8_t *)v51;
        sub_100512490("Generic", 1, 0, 2, "-[CLMeanSeaLevelPressureEstimator refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:]_block_invoke", "%s\n", v51);
        if (v52 != buf)
          free(v52);
      }
      v34 = 1.79769313e308;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 280);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 288);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 249) = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 252) = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 256) = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 224) = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 304) = 0x7FEFFFFFFFFFFFFFLL;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 312) = 0x7FEFFFFFFFFFFFFFLL;
    v45 = v68;
    if (!v22)
      v45 = 1.79769313e308;
    *(double *)(*(_QWORD *)(a1 + 32) + 216) = v45;
    *(double *)(*(_QWORD *)(a1 + 32) + 192) = v34;
    *(double *)(*(_QWORD *)(a1 + 32) + 112) = Current;
    *(double *)(*(_QWORD *)(a1 + 32) + 264) = Current;
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021B7438);
    v46 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      v47 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 264);
      *(_DWORD *)buf = 134217984;
      v79 = v47;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "last refresh timestamp update to,lastRefreshTimestamp,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021B7438);
      v48 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 264);
      v69 = 134217984;
      v70 = v48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "last refresh timestamp update to,lastRefreshTimestamp,%f", COERCE_DOUBLE(&v69));
      v50 = (uint8_t *)v49;
      sub_100512490("Generic", 1, 0, 2, "-[CLMeanSeaLevelPressureEstimator refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:]_block_invoke", "%s\n", v49);
      if (v50 != buf)
        free(v50);
    }
    objc_msgSend(*(id *)(a1 + 32), "writeInitialHistoricalMeanSeaLevelPressureToMslwithTimestamp:", Current);
    objc_msgSend(*(id *)(a1 + 32), "saveMeanSeaLevelPressureArrayToPlist");
  }
  else
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021B7438);
    v12 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "finish refreshing mean sea level pressure array with zero element.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021B7438);
      LOWORD(v69) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 2, "finish refreshing mean sea level pressure array with zero element.", &v69, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "-[CLMeanSeaLevelPressureEstimator refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:]_block_invoke", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

void sub_101457434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_101457B30(uint64_t a1)
{
  _QWORD v3[14];
  _QWORD v4[14];

  v3[0] = CFSTR("altitudeCorrection");
  v4[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  v3[1] = CFSTR("minMaxPressureDelta");
  v4[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 312) - *(double *)(*(_QWORD *)(a1 + 32) + 304));
  v3[2] = CFSTR("pressureDelta");
  v4[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  v3[3] = CFSTR("numberOfRebase");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 252));
  v3[4] = CFSTR("numberOfTrackEnded");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 256));
  v3[5] = CFSTR("numberOfWeatherUpdate");
  v4[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 224));
  v3[6] = CFSTR("refreshDuration");
  v4[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56));
  v3[7] = CFSTR("timeDiffBtwRefresh");
  v4[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 64));
  v3[8] = CFSTR("travelingDistance");
  v4[8] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 72));
  v3[9] = CFSTR("uncertaintyAfterFormerRefresh");
  v4[9] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 192));
  v3[10] = CFSTR("uncertaintyAfterLatterRefresh");
  v4[10] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 80));
  v3[11] = CFSTR("uncertaintyBeforeLatterRefresh");
  v4[11] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 88));
  v3[12] = CFSTR("xpcWaitingTime");
  v4[12] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 96));
  v3[13] = CFSTR("firstRefreshAfterVisit");
  v4[13] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 249));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 14);
}

void sub_1014581A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10145910C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_101459714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  sub_1015EE304((PB::Base *)&a22);
  _Unwind_Resume(a1);
}

void sub_10145A7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10145AA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10145BC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void sub_10145BD44(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_10145BD74(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

_QWORD *sub_10145BDA0(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_1021B74A8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_10145BED4;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10145BEE8;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_10145BEAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10145BED4(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_10145BEE8(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_10145BF04(uint64_t a1)
{
  sub_10145C1C8(a1);
  operator delete();
}

id sub_10145BF28(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  uint64_t v20;
  __int128 __dst;
  int v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int16 v36;
  int v37;

  if (a4 >= 0x10)
    v8 = 16;
  else
    v8 = a4;
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B7478);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v31 = 0x8000000101CA4F2FLL & 0x7FFFFFFFFFFFFFFFLL;
      v32 = 2048;
      v33 = 16;
      v34 = 2048;
      v35 = a4;
      v36 = 1024;
      v37 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B7478);
      v22 = 136315906;
      v23 = 0x8000000101CA4F2FLL & 0x7FFFFFFFFFFFFFFFLL;
      v24 = 2048;
      v25 = 16;
      v26 = 2048;
      v27 = a4;
      v28 = 1024;
      v29 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v22, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLBarometerCalibration_Types::CMMeanSeaLevelPressure>::dispatchData(int, const void *, size_t) [T = CLBarometerCalibration_Types::CMMeanSeaLevelPressure]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10145C220;
  v18[3] = &unk_10217BDB0;
  v18[4] = v12;
  v18[5] = v11;
  v19 = __dst;
  v20 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_10145C1C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B74A8;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_10145C220(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 64));
  return result;
}

void sub_10145C264(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_10145C290(uint64_t a1)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v2 = 0;
  v3 = 0;
LABEL_2:
  v4 = v3++;
  v5 = v3;
  while (1)
  {
    v6 = sub_10145C370(a1, v4, v5);
    v7 = v6 - sub_10145C370(a1, v5, v4);
    v8 = sub_10145C370(a1, v4, v5);
    v9 = v8 - sub_10145C370(a1, v5, v4);
    if (v7 < 0.0)
      v9 = -v9;
    if (v9 > 1.00000002e-16)
      return v2;
    if (++v5 == 15)
    {
      v2 = v4 > 0xC;
      if (v3 != 14)
        goto LABEL_2;
      return 1;
    }
  }
}

double sub_10145C370(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a2 >= 0xF)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a2;
      v20 = 2048;
      v21 = 15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
      v14 = 134218240;
      v15 = a2;
      v16 = 2048;
      v17 = 15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", (size_t)&v14, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "T CMMatrix<double, 15>::operator()(size_t, size_t) const [T = double, M = 15, N = 15]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a3 >= 0xF)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = 15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = 15;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", (size_t)&v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "T CMMatrix<double, 15>::operator()(size_t, size_t) const [T = double, M = 15, N = 15]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return *(double *)(a1 + 8 * (a2 - a3 + 16 * a3));
}

uint64_t sub_10145C6CC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a3 >= 0xF)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = 15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 237,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = 15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 237,invalid col %zu > %zu.", (size_t)&v14, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "T &CMFactoredMatrix<double, 15>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = double, N = 15]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a3 <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 238,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = a2;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 238,invalid element %zu <= %zu.", (size_t)&v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "T &CMFactoredMatrix<double, 15>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = double, N = 15]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return a1 + 8 * (a2 + (((a3 - 1) * a3) >> 1));
}

uint64_t sub_10145CA24(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 0xF)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 15;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 191,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 191,invalid row %zu > %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T &CMFactoredMatrix<double, 15>::DiagonalMatrix::operator()(size_t) [T = double, N = 15]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return a1 + 8 * a2;
}

double sub_10145CBFC(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 0xF)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 15;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 186,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 186,invalid row %zu > %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T CMFactoredMatrix<double, 15>::DiagonalMatrix::operator()(size_t) const [T = double, N = 15]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return *(double *)(a1 + 8 * a2);
}

double sub_10145CDD4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a3 >= 0xF)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = 15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 231,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = 15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 231,invalid col %zu > %zu.", (size_t)&v14, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "T CMFactoredMatrix<double, 15>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) const [T = double, N = 15]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a3 <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 232,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B74E8);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = a2;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 232,invalid element %zu <= %zu.", (size_t)&v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "T CMFactoredMatrix<double, 15>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) const [T = double, N = 15]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return *(double *)(a1 + 8 * (a2 + (((a3 - 1) * a3) >> 1)));
}

uint64_t sub_10145D12C()
{
  sub_1015A2E04(qword_10230F188, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230F188, (void *)&_mh_execute_header);
}

BOOL sub_10145D170(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) == 3 && *(_DWORD *)(a1 + 132) == 2;
}

BOOL sub_10145D188(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  double v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint8_t buf[4];
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B76A8);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 4);
    v6 = *(_QWORD *)(a1 + 12);
    v7 = *(_QWORD *)(a1 + 20);
    v8 = *(_DWORD *)(a1 + 96);
    v9 = *(_DWORD *)(a1 + 132);
    *(_DWORD *)buf = 134219008;
    v42 = v5;
    v43 = 2048;
    v44 = v6;
    v45 = 2048;
    v46 = v7;
    v47 = 1024;
    v48 = v8;
    v49 = 1024;
    v50 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ALTERED: original location: %.8f, %.8f, %.2f, %d, %d", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B76A8);
    v18 = *(_QWORD *)(a1 + 4);
    v19 = *(_QWORD *)(a1 + 12);
    v20 = *(_QWORD *)(a1 + 20);
    v21 = *(_DWORD *)(a1 + 96);
    v22 = *(_DWORD *)(a1 + 132);
    v31 = 134219008;
    v32 = v18;
    v33 = 2048;
    v34 = v19;
    v35 = 2048;
    v36 = v20;
    v37 = 1024;
    v38 = v21;
    v39 = 1024;
    v40 = v22;
    LODWORD(v30) = 44;
    v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "ALTERED: original location: %.8f, %.8f, %.2f, %d, %d", COERCE_DOUBLE(&v31), v30);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationProvider_Type::unalterAccessoryLocation(CLClientLocation &, const CLDaemonLocationPrivate &)", "%s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
  v10 = *(double *)(a2 + 336);
  if (v10 != -1.0)
  {
    *(_DWORD *)(a1 + 96) = 1;
    *(_DWORD *)(a1 + 132) = 1;
    *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 320);
    *(double *)(a1 + 20) = v10;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B76A8);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 4);
      v13 = *(_QWORD *)(a1 + 12);
      v14 = *(_QWORD *)(a1 + 20);
      v15 = *(_DWORD *)(a1 + 96);
      v16 = *(_DWORD *)(a1 + 132);
      *(_DWORD *)buf = 134219008;
      v42 = v12;
      v43 = 2048;
      v44 = v13;
      v45 = 2048;
      v46 = v14;
      v47 = 1024;
      v48 = v15;
      v49 = 1024;
      v50 = v16;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ALTERED:  unaltered location: %.8f, %.8f, %.2f, %d, %d", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B76A8);
      v24 = *(_QWORD *)(a1 + 4);
      v25 = *(_QWORD *)(a1 + 12);
      v26 = *(_QWORD *)(a1 + 20);
      v27 = *(_DWORD *)(a1 + 96);
      v28 = *(_DWORD *)(a1 + 132);
      v31 = 134219008;
      v32 = v24;
      v33 = 2048;
      v34 = v25;
      v35 = 2048;
      v36 = v26;
      v37 = 1024;
      v38 = v27;
      v39 = 1024;
      v40 = v28;
      LODWORD(v30) = 44;
      v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "ALTERED:  unaltered location: %.8f, %.8f, %.2f, %d, %d", COERCE_DOUBLE(&v31), v30);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationProvider_Type::unalterAccessoryLocation(CLClientLocation &, const CLDaemonLocationPrivate &)", "%s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
  }
  return v10 != -1.0;
}

void sub_10145D5A4(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_10145D5D0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10145E498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,id a24)
{
  id *v24;
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a24);
  _Unwind_Resume(a1);
}

void sub_10145E4EC(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSSet *v14;

  qword_10230F1A0 = +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___CLEEDHelperXpcInterface);
  v2 = objc_opt_class(CLEEDRequest, v1);
  v4 = objc_opt_class(CLEEDUploadRequest, v3);
  v6 = objc_opt_class(CLEEDStreamingRequest, v5);
  v8 = objc_opt_class(CLEEDMediaItem, v7);
  v10 = objc_opt_class(CLEEDMitigation, v9);
  v12 = objc_opt_class(NSSet, v11);
  v14 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v2, v4, v6, v8, v10, v12, objc_opt_class(NSArray, v13), 0);
  objc_msgSend((id)qword_10230F1A0, "setClasses:forSelector:argumentIndex:ofReply:", v14, "fetchAllPendingRequestsWithCompletion:", 0, 1);
  objc_msgSend((id)qword_10230F1A0, "setClasses:forSelector:argumentIndex:ofReply:", v14, "mediaUploadList:forRequestID:completion:", 0, 0);
  objc_msgSend((id)qword_10230F1A0, "setClasses:forSelector:argumentIndex:ofReply:", v14, "fetchMitigationsWithCompletion:", 0, 1);
  qword_10230F1A8 = +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___CLEEDRequestDelegate);
  objc_msgSend((id)qword_10230F1A8, "setClasses:forSelector:argumentIndex:ofReply:", v14, "notifyMitigationNeeded:", 0, 0);
}

void sub_10145E660(uint64_t a1)
{
  id *Weak;
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  id v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  id v21;

  Weak = (id *)objc_loadWeak((id *)(a1 + 32));
  v3 = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    v4 = v3;
    if (v3)
    {
      objc_msgSend(Weak[10], "removeObject:", v3);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B7800);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v6 = Weak[10];
        *(_DWORD *)buf = 136446722;
        v17 = "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke_2";
        v18 = 2114;
        v19 = v4;
        v20 = 2114;
        v21 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2FWK,%{public}s, Connection[%{public}@] invalidated, active connections:%{public}@", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B7800);
        v7 = Weak[10];
        v10 = 136446722;
        v11 = "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke";
        v12 = 2114;
        v13 = v4;
        v14 = 2114;
        v15 = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2FWK,%{public}s, Connection[%{public}@] invalidated, active connections:%{public}@", &v10, 32);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
    }
  }
}

id sub_10145E870(uint64_t a1)
{
  id Weak;
  NSObject *v2;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  const char *v8;
  __int16 v9;
  unsigned int v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  unsigned int v14;

  Weak = objc_loadWeak((id *)(a1 + 32));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B7800);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v12 = "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke_2";
    v13 = 1026;
    v14 = objc_msgSend(Weak, "processIdentifier");
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#EED2FWK,%{public}s, Connection to client[%{public}d] interrupted", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B7800);
    v4 = qword_1022A0088;
    v7 = 136446466;
    v8 = "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke";
    v9 = 1026;
    v10 = objc_msgSend(Weak, "processIdentifier");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 16, "#EED2FWK,%{public}s, Connection to client[%{public}d] interrupted", &v7, 18);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return objc_msgSend(Weak, "invalidate");
}

uint64_t sub_10145EF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B7800);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446722;
    v17 = "-[CLEEDHelperService fetchAllPendingRequestsWithCompletion:]_block_invoke";
    v18 = 2114;
    v19 = a2;
    v20 = 2114;
    v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received pending requests from EED, set:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B7800);
    v10 = 136446722;
    v11 = "-[CLEEDHelperService fetchAllPendingRequestsWithCompletion:]_block_invoke";
    v12 = 2114;
    v13 = a2;
    v14 = 2114;
    v15 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2FWK,%{public}s, received pending requests from EED, set:%{public}@, error:%{public}@", &v10, 32);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLEEDHelperService fetchAllPendingRequestsWithCompletion:]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo"), "queue"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_10145F3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B7800);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446723;
    v17 = "-[CLEEDHelperService fetchCurrentMediaUploadRequestWithCompletion:]_block_invoke";
    v18 = 2113;
    v19 = a2;
    v20 = 2114;
    v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received current mediaupload request from EED, request:%{private}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B7800);
    v10 = 136446723;
    v11 = "-[CLEEDHelperService fetchCurrentMediaUploadRequestWithCompletion:]_block_invoke";
    v12 = 2113;
    v13 = a2;
    v14 = 2114;
    v15 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2FWK,%{public}s, received current mediaupload request from EED, request:%{private}@, error:%{public}@", &v10, 32);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLEEDHelperService fetchCurrentMediaUploadRequestWithCompletion:]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo"), "queue"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_10145F8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B7800);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446722;
    v17 = "-[CLEEDHelperService fetchCurrentStreamingRequestWithCompletion:]_block_invoke";
    v18 = 2114;
    v19 = a2;
    v20 = 2114;
    v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received current streaming request from EED, request:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B7800);
    v10 = 136446722;
    v11 = "-[CLEEDHelperService fetchCurrentStreamingRequestWithCompletion:]_block_invoke";
    v12 = 2114;
    v13 = a2;
    v14 = 2114;
    v15 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2FWK,%{public}s, received current streaming request from EED, request:%{public}@, error:%{public}@", &v10, 32);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLEEDHelperService fetchCurrentStreamingRequestWithCompletion:]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo"), "queue"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_10145FD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B7800);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446722;
    v17 = "-[CLEEDHelperService fetchMitigationsWithCompletion:]_block_invoke";
    v18 = 2114;
    v19 = a2;
    v20 = 2114;
    v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received mitigations from EED, mitigation:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B7800);
    v10 = 136446722;
    v11 = "-[CLEEDHelperService fetchMitigationsWithCompletion:]_block_invoke";
    v12 = 2114;
    v13 = a2;
    v14 = 2114;
    v15 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2FWK,%{public}s, received mitigations from EED, mitigation:%{public}@, error:%{public}@", &v10, 32);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLEEDHelperService fetchMitigationsWithCompletion:]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo"), "queue"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1014603DC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  uint64_t v15;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B7800);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    v13 = "-[CLEEDHelperService mediaUploadList:forRequestID:completion:]_block_invoke";
    v14 = 2114;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received media upload reply from EED, error:%{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B7800);
    v8 = 136446466;
    v9 = "-[CLEEDHelperService mediaUploadList:forRequestID:completion:]_block_invoke";
    v10 = 2114;
    v11 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2FWK,%{public}s, received media upload reply from EED, error:%{public}@", &v8, 22);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "-[CLEEDHelperService mediaUploadList:forRequestID:completion:]_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo"), "queue"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_101460A00(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  uint64_t v15;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B7800);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    v13 = "-[CLEEDHelperService streamingSessionEndedForRequestID:completion:]_block_invoke";
    v14 = 2114;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received streaming session ended reply from EED, error:%{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B7800);
    v8 = 136446466;
    v9 = "-[CLEEDHelperService streamingSessionEndedForRequestID:completion:]_block_invoke";
    v10 = 2114;
    v11 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2FWK,%{public}s, received streaming session ended reply from EED, error:%{public}@", &v8, 22);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "-[CLEEDHelperService streamingSessionEndedForRequestID:completion:]_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo"), "queue"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_101461048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B7800);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446722;
    v17 = "-[CLEEDHelperService handleResponse:forRequest:completion:]_block_invoke";
    v18 = 2114;
    v19 = a2;
    v20 = 2114;
    v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received handleResponse reply from EED, updatedRequest:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B7800);
    v10 = 136446722;
    v11 = "-[CLEEDHelperService handleResponse:forRequest:completion:]_block_invoke";
    v12 = 2114;
    v13 = a2;
    v14 = 2114;
    v15 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2FWK,%{public}s, received handleResponse reply from EED, updatedRequest:%{public}@, error:%{public}@", &v10, 32);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLEEDHelperService handleResponse:forRequest:completion:]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo"), "queue"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_101461810(uint64_t a1, void *a2)
{
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  id v15;
  __int16 v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  unsigned int v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B7800);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "processIdentifier");
    *(_DWORD *)buf = 136446978;
    v19 = "-[CLEEDHelperService notifyNewRequestAvailable]_block_invoke";
    v20 = 1026;
    v21 = v5;
    v22 = 2114;
    v23 = objc_msgSend(a2, "localizedDescription");
    v24 = 2114;
    v25 = objc_msgSend(a2, "localizedFailureReason");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2FWK,%{public}s[%{public}d]: %{public}@ %{public}@\n", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B7800);
    v6 = qword_1022A0088;
    v7 = objc_msgSend(*(id *)(a1 + 32), "processIdentifier");
    v10 = 136446978;
    v11 = "-[CLEEDHelperService notifyNewRequestAvailable]_block_invoke";
    v12 = 1026;
    v13 = v7;
    v14 = 2114;
    v15 = objc_msgSend(a2, "localizedDescription");
    v16 = 2114;
    v17 = objc_msgSend(a2, "localizedFailureReason");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 16, "#EED2FWK,%{public}s[%{public}d]: %{public}@ %{public}@\n", &v10, 38);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "-[CLEEDHelperService notifyNewRequestAvailable]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_101462054(uint64_t a1, void *a2)
{
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  id v15;
  __int16 v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  unsigned int v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B7800);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "processIdentifier");
    *(_DWORD *)buf = 136446978;
    v19 = "-[CLEEDHelperService notifyMitigationNeeded:]_block_invoke";
    v20 = 1026;
    v21 = v5;
    v22 = 2114;
    v23 = objc_msgSend(a2, "localizedDescription");
    v24 = 2114;
    v25 = objc_msgSend(a2, "localizedFailureReason");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2FWK,%{public}s[%{public}d]: %{public}@ %{public}@\n", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B7800);
    v6 = qword_1022A0088;
    v7 = objc_msgSend(*(id *)(a1 + 32), "processIdentifier");
    v10 = 136446978;
    v11 = "-[CLEEDHelperService notifyMitigationNeeded:]_block_invoke";
    v12 = 1026;
    v13 = v7;
    v14 = 2114;
    v15 = objc_msgSend(a2, "localizedDescription");
    v16 = 2114;
    v17 = objc_msgSend(a2, "localizedFailureReason");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 16, "#EED2FWK,%{public}s[%{public}d]: %{public}@ %{public}@\n", &v10, 38);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "-[CLEEDHelperService notifyMitigationNeeded:]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_101462298(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_1014626D4(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;
  ALSLocation *v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD v37[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_59;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_61;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_59:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_61:
        v36 = 24;
        goto LABEL_78;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 40) |= 4u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_65:
        v36 = 28;
        goto LABEL_78;
      case 3u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              v9 = v23++ >= 9;
              if (v9)
              {
                v24 = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v24 = 0;
LABEL_69:
        *(_QWORD *)(a1 + 8) = v24;
        goto LABEL_79;
      case 4u:
        v27 = 0;
        v28 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 40) |= 0x10u;
        while (2)
        {
          v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v14 |= (unint64_t)(v30 & 0x7F) << v27;
            if (v30 < 0)
            {
              v27 += 7;
              v9 = v28++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_73:
        v36 = 36;
        goto LABEL_78;
      case 5u:
        v31 = objc_alloc_init(ALSLocation);

        *(_QWORD *)(a1 + 16) = v31;
        v37[0] = 0;
        v37[1] = 0;
        if (PBReaderPlaceMark(a2, v37) && (sub_100F02DFC((uint64_t)v31, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v37);
LABEL_79:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      case 6u:
        v32 = 0;
        v33 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 40) |= 8u;
        while (2)
        {
          v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
            v14 |= (unint64_t)(v35 & 0x7F) << v32;
            if (v35 < 0)
            {
              v32 += 7;
              v9 = v33++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_77:
        v36 = 32;
LABEL_78:
        *(_DWORD *)(a1 + v36) = v14;
        goto LABEL_79;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_79;
    }
  }
}

uint64_t sub_1014639A8(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unint64_t v14;
  int v15;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = OBJC_IVAR___PBDataReader__error;
    v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v12 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 48) |= 4u;
        v14 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFFBLL && v14 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v15 = 0;
        }
        v31 = 20;
        goto LABEL_69;
      case 2u:
        *(_BYTE *)(a1 + 48) |= 2u;
        v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFFBLL && v17 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v15 = 0;
        }
        v31 = 16;
        goto LABEL_69;
      case 3u:
        *(_BYTE *)(a1 + 48) |= 8u;
        v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 <= 0xFFFFFFFFFFFFFFFBLL && v18 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v15 = 0;
        }
        v31 = 24;
        goto LABEL_69;
      case 4u:
        *(_BYTE *)(a1 + 48) |= 0x80u;
        v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v15 = 0;
        }
        v31 = 44;
        goto LABEL_69;
      case 5u:
        *(_BYTE *)(a1 + 48) |= 0x40u;
        v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v15 = 0;
        }
        v31 = 40;
        goto LABEL_69;
      case 6u:
        v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v15 = 0;
        }
        v31 = 32;
        goto LABEL_69;
      case 7u:
        *(_BYTE *)(a1 + 48) |= 0x10u;
        v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v15 = 0;
        }
        v31 = 28;
LABEL_69:
        *(_DWORD *)(a1 + v31) = v15;
        continue;
      case 8u:
        *(_BYTE *)(a1 + 48) |= 1u;
        v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v24 = 0;
        }
        *(_QWORD *)(a1 + 8) = v24;
        continue;
      case 9u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 48) |= 0x20u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29;
      v27 |= (unint64_t)(v30 & 0x7F) << v25;
      if ((v30 & 0x80) == 0)
        goto LABEL_52;
      v25 += 7;
      v10 = v26++ >= 9;
      if (v10)
      {
        LODWORD(v27) = 0;
        goto LABEL_54;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v27) = 0;
LABEL_54:
    *(_DWORD *)(a1 + 36) = v27;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_101464ABC(unsigned int a1)
{
  if (a1 > 0xD)
    return 0;
  else
    return (uint64_t)*(&off_1021B7840 + (int)a1);
}

void sub_101464BE4(id a1)
{
  qword_10230F1B8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSmootherMonitorSilo"));
}

uint64_t *sub_101464C14(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t *sub_101464C4C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t *sub_101464C84(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_101464CBC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

id sub_101465B20(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  objc_msgSend(*(id *)(a1 + 32), "silo");
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
  v2 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "CLRS,Connection Interrupted", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 17, "CLRS,Connection Interrupted", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "-[CLSmootherMonitor listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(a1 + 32), "setUpdating:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setConnection:", 0);
}

id sub_101465CD0(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  objc_msgSend(*(id *)(a1 + 32), "silo");
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
  v2 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLRS,Connection Invalidated", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,Connection Invalidated", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(a1 + 32), "setUpdating:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setConnection:", 0);
}

void sub_101466394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101466F18(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x3E0]);
  __cxa_guard_abort(&qword_10230F1D0);
  _Unwind_Resume(a1);
}

id sub_10146704C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "smoothLocationsInternal:workoutActivity:shouldReconstructRoute:intervalEpochsVector:handler:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48, *(unsigned int *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), &qword_102314098, *(_QWORD *)(a1 + 40));
}

__n128 sub_101467074(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_101467098(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

NSObject *sub_1014670B0(uint64_t a1, int a2, id *a3, uint64_t *a4)
{
  NSObject *v8;
  uint64_t *v9;
  NSObject *result;
  NSObject *v11;
  uint64_t *v12;
  id v13;
  uint64_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD v20[4];
  __int128 v21;
  uint64_t v22;
  int v23;
  char v24;
  int v25;
  uint64_t *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  uint64_t *v30;
  __int16 v31;
  int v32;

  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
  v8 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a4;
    if (*((char *)a4 + 23) < 0)
      v9 = (uint64_t *)*a4;
    *(_DWORD *)buf = 136446466;
    v30 = v9;
    v31 = 1026;
    v32 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRS,handleStopCompletedTimer,type,%{public}s,ii,%{public}u", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v14 = a4;
    if (*((char *)a4 + 23) < 0)
      v14 = (uint64_t *)*a4;
    v25 = 136446466;
    v26 = v14;
    v27 = 1026;
    v28 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,handleStopCompletedTimer,type,%{public}s,ii,%{public}u", &v25, 18);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  result = *a3;
  if (*a3)
  {
    dispatch_source_cancel(result);

    *a3 = 0;
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v11 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
    {
      v12 = a4;
      if (*((char *)a4 + 23) < 0)
        v12 = (uint64_t *)*a4;
      *(_DWORD *)buf = 136446466;
      v30 = v12;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLRS,handleStopCompletedTimer,timer fired,could not retrieve %{public}s samples in time,ii,%{public}u", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
      if (*((char *)a4 + 23) < 0)
        a4 = (uint64_t *)*a4;
      v25 = 136446466;
      v26 = a4;
      v27 = 1026;
      v28 = a2;
      LODWORD(v19) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,handleStopCompletedTimer,timer fired,could not retrieve %{public}s samples in time,ii,%{public}u", &v25, v19);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v13 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_101467498;
    v20[3] = &unk_1021B78D8;
    v22 = *(_QWORD *)(a1 + 48);
    v23 = *(_DWORD *)(a1 + 56);
    v24 = *(_BYTE *)(a1 + 60);
    v21 = *(_OWORD *)(a1 + 32);
    return objc_msgSend(v13, "async:", v20);
  }
  return result;
}

id sub_101467498(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "smoothLocationsInternal:workoutActivity:shouldReconstructRoute:intervalEpochsVector:handler:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48, *(unsigned int *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), &qword_102314098, *(_QWORD *)(a1 + 40));
}

void sub_1014674C0(uint64_t a1, unsigned int a2, dispatch_object_t *a3, char *a4)
{
  dispatch_source_t v8;
  int64_t v9;
  char *v10;
  int v11;
  char *v12;
  int64_t v13;
  unsigned int v14;
  char *v15;
  int v16;
  void *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  NSObject *v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  dispatch_time_t v26;
  NSObject *v27;
  uint64_t v28;
  char *v29;
  const char *v30;
  uint8_t *v31;
  _QWORD handler[6];
  __int128 __p;
  uint64_t v34;
  unsigned int v35;
  int v36;
  char *v37;
  __int16 v38;
  unint64_t v39;
  __int16 v40;
  unsigned int v41;
  uint8_t buf[4];
  char *v43;
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  unsigned int v47;

  if (!*a3)
  {
    v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo"), "queue"));
    *a3 = v8;
    if (!v8)
      sub_1019553C8();
    if (a4[23] < 0)
    {
      v10 = *(char **)a4;
      v9 = *((_QWORD *)a4 + 1);
    }
    else
    {
      v9 = a4[23];
      v10 = a4;
    }
    v11 = *(char *)(a1 + 71);
    if (v11 >= 0)
      v12 = (char *)(a1 + 48);
    else
      v12 = *(char **)(a1 + 48);
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a1 + 71);
    else
      v13 = *(_QWORD *)(a1 + 56);
    if (v13)
    {
      if (v9 >= v13)
      {
        v15 = &v10[v9];
        v16 = *v12;
        v17 = v10;
        do
        {
          v18 = v9 - v13;
          if (v18 == -1)
            break;
          v19 = (char *)memchr(v17, v16, v18 + 1);
          if (!v19)
            break;
          v20 = v19;
          if (!memcmp(v19, v12, v13))
          {
            if (v20 == v15 || v20 - v10 == -1)
              break;
            goto LABEL_23;
          }
          v17 = v20 + 1;
          v9 = v15 - (v20 + 1);
        }
        while (v9 >= v13);
      }
      v14 = 0;
    }
    else
    {
LABEL_23:
      v14 = 3;
    }
    v21 = v14 * (unint64_t)a2 + 8;
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v22 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
    {
      v23 = a4;
      if (a4[23] < 0)
        v23 = *(char **)a4;
      *(_DWORD *)buf = 136446722;
      v43 = v23;
      v44 = 2050;
      v45 = v21;
      v46 = 1026;
      v47 = a2;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "CLRS,createStopCompletedTimer,type,%{public}s,kTimeoutDurationSeconds,%{public}llu,ii,%{public}u", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
      v29 = a4;
      if (a4[23] < 0)
        v29 = *(char **)a4;
      v36 = 136446722;
      v37 = v29;
      v38 = 2050;
      v39 = v21;
      v40 = 1026;
      v41 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,createStopCompletedTimer,type,%{public}s,kTimeoutDurationSeconds,%{public}llu,ii,%{public}u", &v36, 28);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    v24 = 1000000000 * v21;
    v25 = *a3;
    v26 = dispatch_walltime(0, v24);
    dispatch_source_set_timer(v25, v26, v24, 0xEE6B280uLL);
    v27 = *a3;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3321888768;
    handler[2] = sub_10146788C;
    handler[3] = &unk_1021B7928;
    v28 = *(_QWORD *)(a1 + 40);
    v35 = a2;
    handler[4] = v28;
    handler[5] = a3;
    if (a4[23] < 0)
    {
      sub_100115CE4(&__p, *(void **)a4, *((_QWORD *)a4 + 1));
    }
    else
    {
      __p = *(_OWORD *)a4;
      v34 = *((_QWORD *)a4 + 2);
    }
    dispatch_source_set_event_handler(v27, handler);
    dispatch_resume(*a3);
    if (SHIBYTE(v34) < 0)
      operator delete((void *)__p);
  }
}

void sub_10146788C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;

  v1 = *(unsigned int *)(a1 + 72);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (*(char *)(a1 + 71) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 64);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(v2 + 16))(v2, v1, v3, __p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_101467910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10146792C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(_QWORD *)(a2 + 64);
  *(_OWORD *)result = v3;
  return result;
}

void sub_10146795C(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_101467970(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  NSObject *v7;
  _BOOL4 v8;
  unint64_t v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  char *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  const char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  id v57;
  NSObject *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  const char *v68;
  char *v69;
  _BOOL4 v70;
  const char *v71;
  char *v72;
  const char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD v84[4];
  id v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char v92;
  void *__p[2];
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  int v99;
  _BYTE v100[10];
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  uint8_t v108[128];
  _BYTE buf[24];
  void (*v110)(uint64_t, uint64_t);
  _BYTE v111[20];

  if ((a3 & 1) == 0 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48) + 8 * a4))
    goto LABEL_8;
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
  v7 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48) + 8 * a4) == 0;
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = a3;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v8;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLRS,Cannot handle fetched inertial odometry samples,hadIOFetchError,%{public}d,fStopCompletedTimerVecInertialOdometry[ii]==nullptr,%{public}d,ii,%{public}u", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48) + 8 * a4) == 0;
    v99 = 67240704;
    *(_DWORD *)v100 = a3;
    *(_WORD *)&v100[4] = 1026;
    *(_DWORD *)&v100[6] = v70;
    LOWORD(v101) = 1026;
    *(_DWORD *)((char *)&v101 + 2) = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,Cannot handle fetched inertial odometry samples,hadIOFetchError,%{public}d,fStopCompletedTimerVecInertialOdometry[ii]==nullptr,%{public}d,ii,%{public}u", &v99, 20);
    v72 = (char *)v71;
    sub_100512490("Generic", 1, 0, 0, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v71);
    if (v72 != buf)
      free(v72);
    v9 = a4;
  }
  else
  {
LABEL_8:
    v9 = a4;
  }
  v82 = v9;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48) + 8 * v9))
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v10 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLRS,cancelStopCompletedTimer,ii,%{public}u", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
      v99 = 67240192;
      *(_DWORD *)v100 = a4;
      LODWORD(v81) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,cancelStopCompletedTimer,ii,%{public}u", &v99, v81);
      v74 = (char *)v73;
      sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v73);
      if (v74 != buf)
        free(v74);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48) + 8 * v82));

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48) + 8 * v82) = 0;
  }
  v11 = objc_msgSend(a2, "count");
  if (v11)
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v12 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(objc_msgSend(objc_msgSend(a2, "firstObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
      v14 = v13;
      objc_msgSend(objc_msgSend(objc_msgSend(a2, "lastObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
      *(_DWORD *)buf = 134349824;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v14;
      *(_WORD *)&buf[22] = 2050;
      v110 = v15;
      *(_WORD *)v111 = 1026;
      *(_DWORD *)&v111[2] = a4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLRS,fetch backgroundInertialOdometrySamples completion block,total backgroundInertialOdometrySamples,%{public}lu,first timestamp,%{public}f,last timestamp,%{public}f,ii,%{public}u", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
      v75 = qword_1022A00B8;
      objc_msgSend(objc_msgSend(objc_msgSend(a2, "firstObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
      v77 = v76;
      objc_msgSend(objc_msgSend(objc_msgSend(a2, "lastObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
      v99 = 134349824;
      *(_QWORD *)v100 = v11;
      *(_WORD *)&v100[8] = 2050;
      v101 = v77;
      v102 = 2050;
      v103 = v78;
      v104 = 1026;
      LODWORD(v105) = a4;
      LODWORD(v81) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v75, 0, "CLRS,fetch backgroundInertialOdometrySamples completion block,total backgroundInertialOdometrySamples,%{public}lu,first timestamp,%{public}f,last timestamp,%{public}f,ii,%{public}u", &v99, v81);
      v80 = (char *)v79;
      sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v79);
      if (v80 != buf)
        free(v80);
    }
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v16 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v95, v108, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v96;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v96 != v17)
            objc_enumerationMutation(a2);
          v19 = *(void **)(*((_QWORD *)&v95 + 1) + 8 * (_QWORD)v18);
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
          v20 = qword_1022A00B8;
          if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend(objc_msgSend(v19, "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
            v22 = v21;
            objc_msgSend(v19, "sampleInterval_s");
            v24 = v23;
            objc_msgSend(objc_msgSend(v19, "deltaPosition_m"), "X");
            v26 = v25;
            objc_msgSend(objc_msgSend(v19, "deltaPosition_m"), "Y");
            v28 = v27;
            objc_msgSend(objc_msgSend(v19, "deltaPosition_m"), "Z");
            *(_DWORD *)buf = 134284545;
            *(_QWORD *)&buf[4] = v22;
            *(_WORD *)&buf[12] = 2049;
            *(_QWORD *)&buf[14] = v24;
            *(_WORD *)&buf[22] = 2049;
            v110 = v26;
            *(_WORD *)v111 = 2049;
            *(_QWORD *)&v111[2] = v28;
            *(_WORD *)&v111[10] = 2049;
            *(_QWORD *)&v111[12] = v29;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLRS,enumerate IO samples fetched from DB,cfAbsTimestamp,%{private}.1lf,sampleInterval_s,%{private}.1lf,deltaPosition_m,%{private}.2lf,%{private}.2lf,,%{private}.2lf", buf, 0x34u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00B0 != -1)
              dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
            v30 = qword_1022A00B8;
            objc_msgSend(objc_msgSend(v19, "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
            v32 = v31;
            objc_msgSend(v19, "sampleInterval_s");
            v34 = v33;
            objc_msgSend(objc_msgSend(v19, "deltaPosition_m"), "X");
            v36 = v35;
            objc_msgSend(objc_msgSend(v19, "deltaPosition_m"), "Y");
            v38 = v37;
            objc_msgSend(objc_msgSend(v19, "deltaPosition_m"), "Z");
            v99 = 134284545;
            *(_QWORD *)v100 = v32;
            *(_WORD *)&v100[8] = 2049;
            v101 = v34;
            v102 = 2049;
            v103 = v36;
            v104 = 2049;
            v105 = v38;
            v106 = 2049;
            v107 = v39;
            LODWORD(v81) = 52;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "CLRS,enumerate IO samples fetched from DB,cfAbsTimestamp,%{private}.1lf,sampleInterval_s,%{private}.1lf,deltaPosition_m,%{private}.2lf,%{private}.2lf,,%{private}.2lf", &v99, v81);
            v41 = (char *)v40;
            sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v40);
            if (v41 != buf)
              free(v41);
          }
          v18 = (char *)v18 + 1;
        }
        while (v16 != v18);
        v42 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v95, v108, 16);
        v16 = v42;
      }
      while (v42);
    }
    v43 = qword_1023140A0;
    v44 = (qword_1023140A0 - qword_102314098) >> 4;
    if (v44 <= v82)
    {
      if (qword_1023140A0 >= (unint64_t)qword_1023140A8)
      {
        v49 = v44 + 1;
        if ((v44 + 1) >> 60)
          sub_100259694();
        v50 = qword_1023140A8 - qword_102314098;
        if ((qword_1023140A8 - qword_102314098) >> 3 > v49)
          v49 = v50 >> 3;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
          v51 = 0xFFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
          v52 = (char *)sub_10028E224((uint64_t)&qword_1023140A8, v51);
        else
          v52 = 0;
        v53 = &v52[16 * v44];
        v54 = (uint64_t)&v52[16 * v51];
        *(_QWORD *)v53 = 0;
        *((_QWORD *)v53 + 1) = 0;
        v45 = (uint64_t)(v53 + 16);
        v56 = qword_102314098;
        v55 = (char *)qword_1023140A0;
        if (qword_1023140A0 != qword_102314098)
        {
          do
          {
            *((_OWORD *)v53 - 1) = *((_OWORD *)v55 - 1);
            v53 -= 16;
            v55 -= 16;
          }
          while (v55 != (char *)v56);
          v55 = (char *)qword_102314098;
        }
        qword_102314098 = (uint64_t)v53;
        qword_1023140A0 = v45;
        qword_1023140A8 = v54;
        if (v55)
          operator delete(v55);
      }
      else
      {
        *(_QWORD *)qword_1023140A0 = 0;
        *(_QWORD *)(v43 + 8) = 0;
        v45 = v43 + 16;
      }
      qword_1023140A0 = v45;
    }
    v57 = a2;
    *(_QWORD *)(qword_102314098 + 16 * v82 + 8) = v57;
  }
  else
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v46 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "CLRS,warning,total background inertial odometry samples fetched,0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
      LOWORD(v99) = 0;
      LODWORD(v81) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,warning,total background inertial odometry samples fetched,0", &v99, v81);
      v48 = (char *)v47;
      sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v47);
      if (v48 != buf)
        free(v48);
    }
  }
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
  v58 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
  {
    v59 = *(_DWORD *)(a1 + 104);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v59;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "CLRS,fetchLocationsWithStartTime,intervalIndex,%{public}u", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v67 = *(_DWORD *)(a1 + 104);
    v99 = 67240192;
    *(_DWORD *)v100 = v67;
    LODWORD(v81) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,fetchLocationsWithStartTime,intervalIndex,%{public}u", &v99, v81);
    v69 = (char *)v68;
    sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v68);
    if (v69 != buf)
      free(v69);
  }
  v60 = *(_QWORD *)(a1 + 48);
  v61 = *(unsigned int *)(a1 + 104);
  v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48);
  sub_1015A2E04(__p, "location");
  (*(void (**)(uint64_t, uint64_t, unint64_t, void **))(v60 + 16))(v60, v61, v62 + 8 * v82, __p);
  if (v94 < 0)
    operator delete(__p[0]);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3052000000;
  v110 = sub_101468710;
  *(_QWORD *)v111 = sub_101468720;
  *(_QWORD *)&v111[8] = 0;
  *(_QWORD *)&v111[8] = objc_alloc_init((Class)NSMutableArray);
  v84[0] = _NSConcreteStackBlock;
  v84[2] = sub_10146872C;
  v84[3] = &unk_1021B7998;
  v63 = *(_QWORD *)(a1 + 80);
  v87 = *(_QWORD *)(a1 + 72);
  v88 = buf;
  v64 = *(_QWORD *)(a1 + 88);
  v89 = v63;
  v90 = v64;
  v91 = *(_DWORD *)(a1 + 108);
  v92 = *(_BYTE *)(a1 + 112);
  v65 = *(_QWORD *)(a1 + 56);
  v66 = *(void **)(a1 + 40);
  v85 = *(id *)(a1 + 32);
  v86 = v65;
  v84[1] = 3221225472;
  objc_msgSend(objc_msgSend(v66, "startDate"), "timeIntervalSinceReferenceDate");
  objc_msgSend(v85, "fetchLocationsWithStartTime:endTime:intervalIndex:locationArray:completionBlock:", *(unsigned int *)(a1 + 104), *(_QWORD *)(*(_QWORD *)&buf[8] + 40), v84);
  _Block_object_dispose(buf, 8);
}

void sub_1014686D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_101468710(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_101468720(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_10146872C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  unint64_t v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  double v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  const char *v67;
  uint8_t *v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  NSObject *v73;
  const char *v74;
  uint8_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  id v84;
  void *v85;
  id v86;
  uint64_t v87;
  void *i;
  id v89;
  _BOOL4 v90;
  const char *v91;
  uint8_t *v92;
  const char *v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint8_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[4];
  __int128 v110;
  uint64_t v111;
  int v112;
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  void *__p[3];
  _BYTE v123[128];
  int v124;
  _BYTE v125[34];
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  unsigned int v141;
  _BYTE v142[128];
  uint8_t buf[1640];

  v5 = a1;
  if ((a2 & 1) == 0 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48) + 8 * a3))
    goto LABEL_8;
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
  v6 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) + 48) + 8 * a3) == 0;
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v7;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLRS,Cannot handle fetched locations,hadLocationFetchError,%{public}d,fStopCompletedTimerVecLocations[jj]==nullptr,%{public}d,jj,%{public}u", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v90 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) + 48) + 8 * a3) == 0;
    v124 = 67240704;
    *(_DWORD *)v125 = a2;
    *(_WORD *)&v125[4] = 1026;
    *(_DWORD *)&v125[6] = v90;
    *(_WORD *)&v125[10] = 1026;
    *(_DWORD *)&v125[12] = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,Cannot handle fetched locations,hadLocationFetchError,%{public}d,fStopCompletedTimerVecLocations[jj]==nullptr,%{public}d,jj,%{public}u", &v124, 20);
    v92 = (uint8_t *)v91;
    sub_100512490("Generic", 1, 0, 0, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v91);
    v8 = a3;
    if (v92 != buf)
      free(v92);
  }
  else
  {
LABEL_8:
    v8 = a3;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) + 48) + 8 * v8))
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v9 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRS,cancelStopCompletedTimer,jj,%{public}u", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
      v124 = 67240192;
      *(_DWORD *)v125 = a3;
      LODWORD(v101) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,cancelStopCompletedTimer,jj,%{public}u", &v124, v101);
      v94 = (uint8_t *)v93;
      sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v93);
      if (v94 != buf)
        free(v94);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) + 48) + 8 * v8));

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) + 48) + 8 * v8) = 0;
  }
  v10 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8) + 40), "count");
  if (v10)
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v11 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8) + 40), "firstObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      v13 = v12;
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8) + 40), "lastObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      *(_DWORD *)buf = 134349824;
      *(_QWORD *)&buf[4] = v10;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v13;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = v14;
      *(_WORD *)&buf[32] = 1026;
      *(_DWORD *)&buf[34] = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLRS,fetch locations completion block,total locations,%{public}lu,first timestamp,%{public}f,last timestamp,%{public}f,jj,%{public}u", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
      v95 = qword_1022A00B8;
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8) + 40), "firstObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      v97 = v96;
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8) + 40), "lastObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      v124 = 134349824;
      *(_QWORD *)v125 = v10;
      *(_WORD *)&v125[8] = 2050;
      *(_QWORD *)&v125[10] = v97;
      *(_WORD *)&v125[18] = 2050;
      *(_QWORD *)&v125[20] = v98;
      *(_WORD *)&v125[28] = 1026;
      *(_DWORD *)&v125[30] = a3;
      LODWORD(v101) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v95, 0, "CLRS,fetch locations completion block,total locations,%{public}lu,first timestamp,%{public}f,last timestamp,%{public}f,jj,%{public}u", &v124, v101);
      v100 = (uint8_t *)v99;
      sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v99);
      if (v100 != buf)
        free(v100);
    }
    sub_10083AFE0(__p, (unint64_t)v10);
    v102 = v8;
    v103 = v5;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v15 = *(void **)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8) + 40);
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v118, v142, 16);
    if (v16)
    {
      v17 = 0;
      v18 = *(_QWORD *)v119;
      do
      {
        v19 = 0;
        v104 = v17;
        v20 = 112 * (_QWORD)v17;
        do
        {
          if (*(_QWORD *)v119 != v18)
            objc_enumerationMutation(v15);
          v21 = *(void **)(*((_QWORD *)&v118 + 1) + 8 * (_QWORD)v19);
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
          v22 = qword_1022A00B8;
          if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
          {
            v23 = objc_msgSend(v21, "type");
            objc_msgSend(objc_msgSend(v21, "timestamp"), "timeIntervalSinceReferenceDate");
            v25 = v24;
            objc_msgSend(v21, "horizontalAccuracy");
            v27 = v26;
            objc_msgSend(v21, "coordinate");
            v105 = v28;
            v107 = v27;
            objc_msgSend(v21, "coordinate");
            v30 = v29;
            objc_msgSend(v21, "speed");
            v32 = v31;
            objc_msgSend(v21, "course");
            v34 = v33;
            objc_msgSend(v21, "speedAccuracy");
            v36 = v35;
            objc_msgSend(v21, "courseAccuracy");
            v38 = v37;
            objc_msgSend(v21, "altitude");
            v40 = v39;
            objc_msgSend(v21, "verticalAccuracy");
            v42 = v41;
            v43 = objc_msgSend(v21, "signalEnvironmentType");
            *(_DWORD *)buf = 67177473;
            *(_DWORD *)&buf[4] = v23;
            *(_WORD *)&buf[8] = 2049;
            *(_QWORD *)&buf[10] = v25;
            *(_WORD *)&buf[18] = 2049;
            *(_QWORD *)&buf[20] = v107;
            *(_WORD *)&buf[28] = 2049;
            *(_QWORD *)&buf[30] = v105;
            *(_WORD *)&buf[38] = 2049;
            *(_QWORD *)&buf[40] = v30;
            *(_WORD *)&buf[48] = 2049;
            *(_QWORD *)&buf[50] = v32;
            *(_WORD *)&buf[58] = 2049;
            *(_QWORD *)&buf[60] = v34;
            *(_WORD *)&buf[68] = 2049;
            *(_QWORD *)&buf[70] = v36;
            *(_WORD *)&buf[78] = 2049;
            *(_QWORD *)&buf[80] = v38;
            *(_WORD *)&buf[88] = 2049;
            *(_QWORD *)&buf[90] = v40;
            *(_WORD *)&buf[98] = 2049;
            *(_QWORD *)&buf[100] = v42;
            *(_WORD *)&buf[108] = 1025;
            *(_DWORD *)&buf[110] = v43;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLRS,enumerate locations fetched from DB,type,%{private}d,timestamp,%{private}.1lf,horizontalAccuracy,%{private}.1lf,ll,%{private}.8lf,%{private}.8lf,speed,%{private}.2lf,course,%{private}.2lf,speedAccuracy,%{private}.2lf,courseAccuracy,%{private}.2lf,altitude,%{private}.2lf,vUnc,%{private}.2lf,signalEnv,%{private}d", buf, 0x72u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00B0 != -1)
              dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
            v45 = qword_1022A00B8;
            v46 = objc_msgSend(v21, "type");
            objc_msgSend(objc_msgSend(v21, "timestamp"), "timeIntervalSinceReferenceDate");
            v48 = v47;
            objc_msgSend(v21, "horizontalAccuracy");
            v106 = v49;
            v108 = v48;
            objc_msgSend(v21, "coordinate");
            v51 = v50;
            objc_msgSend(v21, "coordinate");
            v53 = v52;
            objc_msgSend(v21, "speed");
            v55 = v54;
            objc_msgSend(v21, "course");
            v57 = v56;
            objc_msgSend(v21, "speedAccuracy");
            v59 = v58;
            objc_msgSend(v21, "courseAccuracy");
            v61 = v60;
            objc_msgSend(v21, "altitude");
            v63 = v62;
            objc_msgSend(v21, "verticalAccuracy");
            v65 = v64;
            v66 = objc_msgSend(v21, "signalEnvironmentType");
            v124 = 67177473;
            *(_DWORD *)v125 = v46;
            *(_WORD *)&v125[4] = 2049;
            *(_QWORD *)&v125[6] = v108;
            *(_WORD *)&v125[14] = 2049;
            *(_QWORD *)&v125[16] = v106;
            *(_WORD *)&v125[24] = 2049;
            *(_QWORD *)&v125[26] = v51;
            v126 = 2049;
            v127 = v53;
            v128 = 2049;
            v129 = v55;
            v130 = 2049;
            v131 = v57;
            v132 = 2049;
            v133 = v59;
            v134 = 2049;
            v135 = v61;
            v136 = 2049;
            v137 = v63;
            v138 = 2049;
            v139 = v65;
            v140 = 1025;
            v141 = v66;
            LODWORD(v101) = 114;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 2, "CLRS,enumerate locations fetched from DB,type,%{private}d,timestamp,%{private}.1lf,horizontalAccuracy,%{private}.1lf,ll,%{private}.8lf,%{private}.8lf,speed,%{private}.2lf,course,%{private}.2lf,speedAccuracy,%{private}.2lf,courseAccuracy,%{private}.2lf,altitude,%{private}.2lf,vUnc,%{private}.2lf,signalEnv,%{private}d", &v124, v101);
            v68 = (uint8_t *)v67;
            sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v67);
            if (v68 != buf)
              free(v68);
          }
          if (v21)
            objc_msgSend(v21, "clientLocation");
          else
            memset(buf, 0, 156);
          v44 = sub_100835670((uint64_t)buf, (uint64_t)__p[0] + v20);
          v19 = (char *)v19 + 1;
          v20 += 112;
        }
        while (v16 != v19);
        v69 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v118, v142, 16, v44);
        v16 = v69;
        v17 = (char *)v19 + (_QWORD)v104;
      }
      while (v69);
    }
    v70 = qword_1023140A0;
    v71 = (qword_1023140A0 - qword_102314098) >> 4;
    v8 = v102;
    v5 = v103;
    if (v71 <= v102)
    {
      if (qword_1023140A0 >= (unint64_t)qword_1023140A8)
      {
        v76 = v71 + 1;
        if ((v71 + 1) >> 60)
          sub_100259694();
        v77 = qword_1023140A8 - qword_102314098;
        if ((qword_1023140A8 - qword_102314098) >> 3 > v76)
          v76 = v77 >> 3;
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
          v78 = 0xFFFFFFFFFFFFFFFLL;
        else
          v78 = v76;
        if (v78)
          v79 = (char *)sub_10028E224((uint64_t)&qword_1023140A8, v78);
        else
          v79 = 0;
        v80 = &v79[16 * v71];
        v81 = (uint64_t)&v79[16 * v78];
        *(_QWORD *)v80 = 0;
        *((_QWORD *)v80 + 1) = 0;
        v72 = (uint64_t)(v80 + 16);
        v83 = qword_102314098;
        v82 = (char *)qword_1023140A0;
        if (qword_1023140A0 != qword_102314098)
        {
          do
          {
            *((_OWORD *)v80 - 1) = *((_OWORD *)v82 - 1);
            v80 -= 16;
            v82 -= 16;
          }
          while (v82 != (char *)v83);
          v82 = (char *)qword_102314098;
        }
        qword_102314098 = (uint64_t)v80;
        qword_1023140A0 = v72;
        qword_1023140A8 = v81;
        if (v82)
          operator delete(v82);
      }
      else
      {
        *(_QWORD *)qword_1023140A0 = 0;
        *(_QWORD *)(v70 + 8) = 0;
        v72 = v70 + 16;
      }
      qword_1023140A0 = v72;
    }
    v84 = objc_alloc_init((Class)NSMutableArray);
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v85 = *(void **)(*(_QWORD *)(*(_QWORD *)(v103 + 56) + 8) + 40);
    v86 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v114, v123, 16);
    if (v86)
    {
      v87 = *(_QWORD *)v115;
      do
      {
        for (i = 0; i != v86; i = (char *)i + 1)
        {
          if (*(_QWORD *)v115 != v87)
            objc_enumerationMutation(v85);
          objc_msgSend(v84, "addObject:", *(_QWORD *)(*((_QWORD *)&v114 + 1) + 8 * (_QWORD)i));
        }
        v86 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v114, v123, 16);
      }
      while (v86);
    }
    *(_QWORD *)(qword_102314098 + 16 * v102) = v84;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v73 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "CLRS,warning,total locations fetched,0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
      LOWORD(v124) = 0;
      LODWORD(v101) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,warning,total locations fetched,0", &v124, v101);
      v75 = (uint8_t *)v74;
      sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v74);
      if (v75 != buf)
        free(v75);
    }
  }
  if (*(_QWORD *)(v5 + 72) - 1 == v8)
  {
    v89 = objc_msgSend(objc_msgSend(*(id *)(v5 + 32), "universe"), "silo");
    v109[0] = _NSConcreteStackBlock;
    v109[1] = 3221225472;
    v109[2] = sub_101469534;
    v109[3] = &unk_1021B78D8;
    v111 = *(_QWORD *)(v5 + 64);
    v112 = *(_DWORD *)(v5 + 80);
    v113 = *(_BYTE *)(v5 + 84);
    v110 = *(_OWORD *)(v5 + 32);
    objc_msgSend(v89, "async:", v109);
  }
}

void sub_1014694D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_101469534(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "smoothLocationsInternal:workoutActivity:shouldReconstructRoute:intervalEpochsVector:handler:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48, *(unsigned int *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), &qword_102314098, *(_QWORD *)(a1 + 40));
}

id sub_101469758(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[12];

  objc_msgSend(objc_msgSend(objc_msgSend(a4, "universe"), "silo"), "assertInside");
  v7 = *a2;
  v8 = a3[9];
  v15[8] = a3[8];
  v15[9] = v8;
  v9 = a3[11];
  v15[10] = a3[10];
  v15[11] = v9;
  v10 = a3[5];
  v15[4] = a3[4];
  v15[5] = v10;
  v11 = a3[7];
  v15[6] = a3[6];
  v15[7] = v11;
  v12 = a3[1];
  v15[0] = *a3;
  v15[1] = v12;
  v13 = a3[3];
  v15[2] = a3[2];
  v15[3] = v13;
  return objc_msgSend(a4, "onCompanionNotification:data:", v7, v15);
}

id sub_1014699D8(uint64_t a1, unsigned int *a2, __int128 *a3, void *a4)
{
  uint64_t v7;
  __int128 v9;
  uint64_t v10;

  objc_msgSend(objc_msgSend(objc_msgSend(a4, "universe"), "silo"), "assertInside");
  v7 = *a2;
  v9 = *a3;
  v10 = *((_QWORD *)a3 + 2);
  return objc_msgSend(a4, "onDaemonStatusNotification:data:", v7, &v9);
}

const void **sub_101469C5C(uint64_t a1, unsigned int *a2, const void **a3, void *a4)
{
  uint64_t v7;
  const void *v8;
  const void *v10;

  objc_msgSend(objc_msgSend(objc_msgSend(a4, "universe"), "silo"), "assertInside");
  v7 = *a2;
  v8 = *a3;
  v10 = v8;
  if (v8)
    CFRetain(v8);
  objc_msgSend(a4, "onTelephonyNotification:data:", v7, &v10);
  return sub_1001358BC(&v10);
}

void sub_101469CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001358BC((const void **)va);
  _Unwind_Resume(a1);
}

void sub_10146B058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100067AC4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10146B1B8(uint64_t a1, void *a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  uint64_t v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD v23[9];
  int v24;
  int v25;
  _BYTE v26[14];
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  _BOOL4 v34;
  uint8_t buf[4];
  _BYTE v36[14];
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  _BOOL4 v44;

  v6 = sub_1001FCBB4();
  v7 = *(double *)(a1 + 40);
  v8 = *(double *)(a1 + 48) - *(double *)(a1 + 56);
  v9 = 1.0;
  if (v8 > 0.0)
    v9 = (double)(unint64_t)objc_msgSend(a2, "count") / v8;
  v10 = v6 - v7;
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
  v11 = v10 * 1000.0;
  v12 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67241472;
    *(_DWORD *)v36 = v13;
    *(_WORD *)&v36[4] = 2050;
    *(_QWORD *)&v36[6] = objc_msgSend(a2, "count");
    v37 = 2050;
    v38 = v8;
    v39 = 2050;
    v40 = v9;
    v41 = 2050;
    v42 = v11;
    v43 = 1026;
    v44 = a3 != 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLRS,received stored background inertial odometry samples,intervalIndex,%{public}u,count,%{public}lu,fetchIntervalDurationSeconds,%{public}.1lf,fetchYield,%{public}.2lf,responseTime,%{public}.1lf,ms,hadError,%{public}d", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v16 = qword_1022A00B8;
    v17 = *(_DWORD *)(a1 + 64);
    v25 = 67241472;
    *(_DWORD *)v26 = v17;
    *(_WORD *)&v26[4] = 2050;
    *(_QWORD *)&v26[6] = objc_msgSend(a2, "count");
    v27 = 2050;
    v28 = v8;
    v29 = 2050;
    v30 = v9;
    v31 = 2050;
    v32 = v11;
    v33 = 1026;
    v34 = a3 != 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "CLRS,received stored background inertial odometry samples,intervalIndex,%{public}u,count,%{public}lu,fetchIntervalDurationSeconds,%{public}.1lf,fetchYield,%{public}.2lf,responseTime,%{public}.1lf,ms,hadError,%{public}d", &v25, 54);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor fetchBackgroundInertialOdometrySamplesWithStartTime:endTime:intervalIndex:completionBlock:]_block_invoke", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (a3)
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v14 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)v36 = a3;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLRS,error fetching stored background inertial odometry samples, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
      v25 = 138543362;
      *(_QWORD *)v26 = a3;
      LODWORD(v22) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,error fetching stored background inertial odometry samples, %{public}@", &v25, v22);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 0, "-[CLSmootherMonitor fetchBackgroundInertialOdometrySamplesWithStartTime:endTime:intervalIndex:completionBlock:]_block_invoke", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10146B60C;
  v23[3] = &unk_1021B79E8;
  *(double *)&v23[6] = v11;
  *(double *)&v23[7] = v8;
  *(double *)&v23[8] = v9;
  v24 = *(_DWORD *)(a1 + 64);
  v23[4] = a2;
  v23[5] = a3;
  AnalyticsSendEventLazy(CFSTR("com.apple.routesmoother.BackgroundIOFetchResults"), v23);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

NSDictionary *sub_10146B60C(uint64_t a1)
{
  NSNumber *v2;
  uint64_t v3;
  _QWORD v5[7];
  _QWORD v6[7];

  v5[0] = CFSTR("fetchTimeMsec");
  v6[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(a1 + 48));
  v5[1] = CFSTR("sampleCount");
  v6[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v5[2] = CFSTR("fetchIntervalDurationSeconds");
  v6[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56));
  v5[3] = CFSTR("yield");
  v6[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 64));
  v5[4] = CFSTR("intervalIndex");
  v6[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 72));
  v5[5] = CFSTR("didHaveError");
  v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_QWORD *)(a1 + 40) != 0);
  v5[6] = CFSTR("errorMessage");
  v3 = *(_QWORD *)(a1 + 40);
  v6[5] = v2;
  v6[6] = v3;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 7);
}

void sub_10146B8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10146B8D4(uint64_t a1, void *a2, void *a3, int a4)
{
  double v8;
  double v9;
  NSObject *v10;
  int v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  uint8_t *v22;
  id v23;
  NSObject *v24;
  double v25;
  double v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  _BOOL4 v48;
  const char *v49;
  uint8_t *v50;
  uint64_t v51;
  void *v52;
  _QWORD v53[9];
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  _BYTE v60[30];
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  _BOOL4 v67;
  uint8_t v68[128];
  uint8_t buf[4];
  _BYTE v70[30];
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  _BOOL4 v77;

  v8 = sub_1001FCBB4() - *(double *)(a1 + 72);
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
  v9 = v8 * 1000.0;
  v10 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)buf = 67241216;
    *(_DWORD *)v70 = v11;
    *(_WORD *)&v70[4] = 2050;
    *(_QWORD *)&v70[6] = objc_msgSend(a2, "count");
    *(_WORD *)&v70[14] = 2050;
    *(double *)&v70[16] = v8 * 1000.0;
    *(_WORD *)&v70[24] = 1026;
    *(_DWORD *)&v70[26] = a4;
    LOWORD(v71) = 1026;
    *(_DWORD *)((char *)&v71 + 2) = a3 != 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLRS,received partial stored locations,intervalIndex,%{public}u,count,%{public}lu,responseTime,%{public}.1lf,ms,enumerationComplete,%{public}d,error,%{public}d", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v36 = qword_1022A00B8;
    v37 = *(_DWORD *)(a1 + 96);
    v59 = 67241216;
    *(_DWORD *)v60 = v37;
    *(_WORD *)&v60[4] = 2050;
    *(_QWORD *)&v60[6] = objc_msgSend(a2, "count");
    *(_WORD *)&v60[14] = 2050;
    *(double *)&v60[16] = v8 * 1000.0;
    *(_WORD *)&v60[24] = 1026;
    *(_DWORD *)&v60[26] = a4;
    LOWORD(v61) = 1026;
    *(_DWORD *)((char *)&v61 + 2) = a3 != 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 0, "CLRS,received partial stored locations,intervalIndex,%{public}u,count,%{public}lu,responseTime,%{public}.1lf,ms,enumerationComplete,%{public}d,error,%{public}d", &v59, 40);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor fetchLocationsWithStartTime:endTime:intervalIndex:locationArray:completionBlock:]_block_invoke", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  v52 = a3;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v12 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v55, v68, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v56;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v56 != v14)
          objc_enumerationMutation(a2);
        v16 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * (_QWORD)v15);
        if ((objc_msgSend(*(id *)(a1 + 32), "isLocationUsefulForSmoothing:", objc_msgSend(v16, "type")) & 1) != 0)
        {
          objc_msgSend(*(id *)(a1 + 40), "addObject:", v16);
        }
        else
        {
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
          v17 = qword_1022A00B8;
          if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
          {
            v18 = objc_msgSend(v16, "type");
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)v70 = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CLRS,location type is not useful for smoothing,type,%{public}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00B0 != -1)
              dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
            v19 = qword_1022A00B8;
            v20 = objc_msgSend(v16, "type");
            v59 = 67240192;
            *(_DWORD *)v60 = v20;
            LODWORD(v51) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 0, "CLRS,location type is not useful for smoothing,type,%{public}d", &v59, v51);
            v22 = (uint8_t *)v21;
            sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor fetchLocationsWithStartTime:endTime:intervalIndex:locationArray:completionBlock:]_block_invoke", "%s\n", v21);
            if (v22 != buf)
              free(v22);
          }
        }
        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v23 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v55, v68, 16);
      v13 = v23;
    }
    while (v23);
  }
  if (v52)
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v24 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)v70 = v52;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "CLRS,error enumerating stored locations, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
      v59 = 138543362;
      *(_QWORD *)v60 = v52;
      LODWORD(v51) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,error enumerating stored locations, %{public}@", &v59, v51);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 0, "-[CLSmootherMonitor fetchLocationsWithStartTime:endTime:intervalIndex:locationArray:completionBlock:]_block_invoke", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40) = v52;
  }
  if (a4)
  {
    v25 = *(double *)(a1 + 80) - *(double *)(a1 + 88);
    v26 = 1.0;
    if (v25 > 0.0)
      v26 = (double)(unint64_t)objc_msgSend(*(id *)(a1 + 40), "count") / v25;
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    v27 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "dateInterval"), "startDate"), "timeIntervalSinceReferenceDate");
      v29 = v28;
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "dateInterval"), "endDate"), "timeIntervalSinceReferenceDate");
      v31 = v30;
      v32 = objc_msgSend(*(id *)(a1 + 40), "count");
      v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40) != 0;
      *(_DWORD *)buf = 134350592;
      *(_QWORD *)v70 = v29;
      *(_WORD *)&v70[8] = 2050;
      *(_QWORD *)&v70[10] = v31;
      *(_WORD *)&v70[18] = 2050;
      *(_QWORD *)&v70[20] = v32;
      *(_WORD *)&v70[28] = 2050;
      v71 = v25;
      v72 = 2050;
      v73 = v26;
      v74 = 2050;
      v75 = v9;
      v76 = 1026;
      v77 = v33;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "CLRS,received all stored locations,startDate,%{public}f,endDate,%{public}f,count,%{public}lu,fetchIntervalDurationSeconds,%{public}.1lf,fetchYield,%{public}.2lf,responseTime,%{public}.1lf,ms,hadError,%{public}d", buf, 0x44u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
      v42 = qword_1022A00B8;
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "dateInterval"), "startDate"), "timeIntervalSinceReferenceDate");
      v44 = v43;
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "dateInterval"), "endDate"), "timeIntervalSinceReferenceDate");
      v46 = v45;
      v47 = objc_msgSend(*(id *)(a1 + 40), "count");
      v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40) != 0;
      v59 = 134350592;
      *(_QWORD *)v60 = v44;
      *(_WORD *)&v60[8] = 2050;
      *(_QWORD *)&v60[10] = v46;
      *(_WORD *)&v60[18] = 2050;
      *(_QWORD *)&v60[20] = v47;
      *(_WORD *)&v60[28] = 2050;
      v61 = v25;
      v62 = 2050;
      v63 = v26;
      v64 = 2050;
      v65 = v9;
      v66 = 1026;
      v67 = v48;
      LODWORD(v51) = 68;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 0, "CLRS,received all stored locations,startDate,%{public}f,endDate,%{public}f,count,%{public}lu,fetchIntervalDurationSeconds,%{public}.1lf,fetchYield,%{public}.2lf,responseTime,%{public}.1lf,ms,hadError,%{public}d", &v59, v51);
      v50 = (uint8_t *)v49;
      sub_100512490("Generic", 1, 0, 2, "-[CLSmootherMonitor fetchLocationsWithStartTime:endTime:intervalIndex:locationArray:completionBlock:]_block_invoke", "%s\n", v49);
      if (v50 != buf)
        free(v50);
    }
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472;
    v53[2] = sub_10146C1C8;
    v53[3] = &unk_1021B7A38;
    v34 = *(_QWORD *)(a1 + 40);
    *(double *)&v53[6] = v9;
    *(double *)&v53[7] = v26;
    *(double *)&v53[8] = v25;
    v54 = *(_DWORD *)(a1 + 96);
    v35 = *(_QWORD *)(a1 + 64);
    v53[4] = v34;
    v53[5] = v35;
    AnalyticsSendEventLazy(CFSTR("com.apple.routesmoother.LocationFetchResults"), v53);
    (*(void (**)(_QWORD, BOOL, _QWORD))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40) != 0, *(unsigned int *)(a1 + 96));

  }
}

NSDictionary *sub_10146C1C8(uint64_t a1)
{
  _QWORD v3[7];
  _QWORD v4[7];

  v3[0] = CFSTR("fetchTimeMsec");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(a1 + 48));
  v3[1] = CFSTR("sampleCount");
  v4[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v3[2] = CFSTR("yield");
  v4[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56));
  v3[3] = CFSTR("fetchIntervalDurationSeconds");
  v4[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 64));
  v3[4] = CFSTR("intervalIndex");
  v4[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 72));
  v3[5] = CFSTR("didHaveError");
  v4[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) != 0);
  v3[6] = CFSTR("errorMessage");
  v4[6] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 7);
}

void sub_10146C42C(id a1)
{
  qword_1022A00B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "RouteSmoother");
}

_QWORD *sub_10146C458(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10025E660(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_10146C4B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10146C4CC()
{
  void *__p[2];
  char v2;

  __cxa_atexit((void (*)(void *))sub_101464C14, &qword_102314060, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))sub_101464C4C, &qword_102314068, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))sub_101464C84, &qword_102314070, (void *)&_mh_execute_header);
  sub_1015A2E04(__p, "CLSmootherMonitor");
  sub_100D82360(qword_102314078, __p);
  if (v2 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))sub_100D823D4, qword_102314078, (void *)&_mh_execute_header);
  qword_1023140A0 = 0;
  qword_1023140A8 = 0;
  qword_102314098 = 0;
  return __cxa_atexit((void (*)(void *))sub_101464CBC, &qword_102314098, (void *)&_mh_execute_header);
}

void sub_10146C5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10146C5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  char *v17;
  void **v18;
  _QWORD *v19;
  uint64_t *v20;
  char *v21;
  void **v22;
  _QWORD *v23;
  uint64_t *v24;
  char *v25;
  void **v26;
  _QWORD *v27;
  uint64_t *v28;
  char *v29;
  void **v30;
  _QWORD *v31;
  int v33;
  int **v34;
  std::string v35;
  char v36;
  std::string v37;
  char v38;
  _BYTE v39[16];
  char v40;
  _BYTE v41[16];
  char v42;
  _BYTE v43[16];
  char v44;
  int *v45;
  _BYTE v46[24];
  _BYTE *v47;
  _BYTE v48[24];
  _BYTE *v49;
  _BYTE v50[24];
  _BYTE *v51;

  sub_100270E34((uint64_t)v50, a3);
  sub_100270E34((uint64_t)v48, a4);
  sub_100270E34((uint64_t)v46, a5);
  sub_100D6C128(a1, a2, CFSTR("EmergencyLocation"), 1, 5, (uint64_t)v50, (uint64_t)v48, (uint64_t)v46);
  v9 = v47;
  if (v47 == v46)
  {
    v10 = 4;
    v9 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v49;
  if (v49 == v48)
  {
    v12 = 4;
    v11 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v51;
  if (v51 == v50)
  {
    v14 = 4;
    v13 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_16;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_16:
  *(_QWORD *)a1 = off_1021B7AB0;
  v15 = sub_1001DC538();
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 136) = v15;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  sub_100119F3C(a1 + 184);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  sub_100119F3C(a1 + 320);
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  sub_1012384C4((_QWORD *)(a1 + 416));
  sub_1005A93C8((uint64_t)&v34, 0);
  v33 = 0;
  v45 = &v33;
  v16 = sub_100F8ED88(a1 + 144, &v33, (uint64_t)&unk_101B9EB60, &v45);
  *((_DWORD *)v16 + 6) = (_DWORD)v34;
  std::string::operator=((std::string *)(v16 + 4), &v35);
  *((_BYTE *)v16 + 56) = v36;
  std::string::operator=((std::string *)(v16 + 8), &v37);
  *((_BYTE *)v16 + 88) = v38;
  sub_10052502C((uint64_t)(v16 + 12), (uint64_t)v39);
  *((_BYTE *)v16 + 112) = v40;
  sub_10052502C((uint64_t)(v16 + 15), (uint64_t)v41);
  *((_BYTE *)v16 + 136) = v42;
  sub_10052502C((uint64_t)(v16 + 18), (uint64_t)v43);
  *((_BYTE *)v16 + 160) = v44;
  sub_1005A94C0((uint64_t)&v34);
  LODWORD(v45) = 0;
  v34 = &v45;
  v17 = sub_1001E1254(a1 + 240, (int *)&v45, (uint64_t)&unk_101B9EB60, (_DWORD **)&v34);
  v18 = (void **)(v17 + 24);
  if (v17[47] < 0)
    operator delete(*v18);
  *v18 = 0;
  *((_QWORD *)v17 + 4) = 0;
  *((_QWORD *)v17 + 5) = 0;
  *((_QWORD *)v17 + 6) = -1;
  *((_QWORD *)v17 + 7) = -1;
  v17[64] = 0;
  LODWORD(v45) = 0;
  v34 = &v45;
  v19 = sub_1001F97E8(a1 + 280, (int *)&v45, (uint64_t)&unk_101B9EB60, (_DWORD **)&v34);
  *(_QWORD *)((char *)v19 + 20) = -1;
  *((_BYTE *)v19 + 28) = 0;
  sub_1005A93C8((uint64_t)&v34, 1);
  v33 = 1;
  v45 = &v33;
  v20 = sub_100F8ED88(a1 + 144, &v33, (uint64_t)&unk_101B9EB60, &v45);
  *((_DWORD *)v20 + 6) = (_DWORD)v34;
  std::string::operator=((std::string *)(v20 + 4), &v35);
  *((_BYTE *)v20 + 56) = v36;
  std::string::operator=((std::string *)(v20 + 8), &v37);
  *((_BYTE *)v20 + 88) = v38;
  sub_10052502C((uint64_t)(v20 + 12), (uint64_t)v39);
  *((_BYTE *)v20 + 112) = v40;
  sub_10052502C((uint64_t)(v20 + 15), (uint64_t)v41);
  *((_BYTE *)v20 + 136) = v42;
  sub_10052502C((uint64_t)(v20 + 18), (uint64_t)v43);
  *((_BYTE *)v20 + 160) = v44;
  sub_1005A94C0((uint64_t)&v34);
  LODWORD(v45) = 1;
  v34 = &v45;
  v21 = sub_1001E1254(a1 + 240, (int *)&v45, (uint64_t)&unk_101B9EB60, (_DWORD **)&v34);
  v22 = (void **)(v21 + 24);
  if (v21[47] < 0)
    operator delete(*v22);
  *v22 = 0;
  *((_QWORD *)v21 + 4) = 0;
  *((_QWORD *)v21 + 5) = 0;
  *((_QWORD *)v21 + 6) = -1;
  *((_QWORD *)v21 + 7) = -1;
  v21[64] = 0;
  LODWORD(v45) = 1;
  v34 = &v45;
  v23 = sub_1001F97E8(a1 + 280, (int *)&v45, (uint64_t)&unk_101B9EB60, (_DWORD **)&v34);
  *(_QWORD *)((char *)v23 + 20) = -1;
  *((_BYTE *)v23 + 28) = 0;
  if (*(_BYTE *)(a1 + 136))
  {
    sub_1005A93C8((uint64_t)&v34, 2);
    v33 = 2;
    v45 = &v33;
    v24 = sub_100F8ED88(a1 + 144, &v33, (uint64_t)&unk_101B9EB60, &v45);
    *((_DWORD *)v24 + 6) = (_DWORD)v34;
    std::string::operator=((std::string *)(v24 + 4), &v35);
    *((_BYTE *)v24 + 56) = v36;
    std::string::operator=((std::string *)(v24 + 8), &v37);
    *((_BYTE *)v24 + 88) = v38;
    sub_10052502C((uint64_t)(v24 + 12), (uint64_t)v39);
    *((_BYTE *)v24 + 112) = v40;
    sub_10052502C((uint64_t)(v24 + 15), (uint64_t)v41);
    *((_BYTE *)v24 + 136) = v42;
    sub_10052502C((uint64_t)(v24 + 18), (uint64_t)v43);
    *((_BYTE *)v24 + 160) = v44;
    sub_1005A94C0((uint64_t)&v34);
    LODWORD(v45) = 2;
    v34 = &v45;
    v25 = sub_1001E1254(a1 + 240, (int *)&v45, (uint64_t)&unk_101B9EB60, (_DWORD **)&v34);
    v26 = (void **)(v25 + 24);
    if (v25[47] < 0)
      operator delete(*v26);
    *v26 = 0;
    *((_QWORD *)v25 + 4) = 0;
    *((_QWORD *)v25 + 5) = 0;
    *((_QWORD *)v25 + 6) = -1;
    *((_QWORD *)v25 + 7) = -1;
    v25[64] = 0;
    LODWORD(v45) = 2;
    v34 = &v45;
    v27 = sub_1001F97E8(a1 + 280, (int *)&v45, (uint64_t)&unk_101B9EB60, (_DWORD **)&v34);
    *(_QWORD *)((char *)v27 + 20) = -1;
    *((_BYTE *)v27 + 28) = 0;
    sub_1005A93C8((uint64_t)&v34, 3);
    v33 = 3;
    v45 = &v33;
    v28 = sub_100F8ED88(a1 + 144, &v33, (uint64_t)&unk_101B9EB60, &v45);
    *((_DWORD *)v28 + 6) = (_DWORD)v34;
    std::string::operator=((std::string *)(v28 + 4), &v35);
    *((_BYTE *)v28 + 56) = v36;
    std::string::operator=((std::string *)(v28 + 8), &v37);
    *((_BYTE *)v28 + 88) = v38;
    sub_10052502C((uint64_t)(v28 + 12), (uint64_t)v39);
    *((_BYTE *)v28 + 112) = v40;
    sub_10052502C((uint64_t)(v28 + 15), (uint64_t)v41);
    *((_BYTE *)v28 + 136) = v42;
    sub_10052502C((uint64_t)(v28 + 18), (uint64_t)v43);
    *((_BYTE *)v28 + 160) = v44;
    sub_1005A94C0((uint64_t)&v34);
    LODWORD(v45) = 3;
    v34 = &v45;
    v29 = sub_1001E1254(a1 + 240, (int *)&v45, (uint64_t)&unk_101B9EB60, (_DWORD **)&v34);
    v30 = (void **)(v29 + 24);
    if (v29[47] < 0)
      operator delete(*v30);
    *v30 = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 5) = 0;
    *((_QWORD *)v29 + 6) = -1;
    *((_QWORD *)v29 + 7) = -1;
    v29[64] = 0;
    LODWORD(v45) = 3;
    v34 = &v45;
    v31 = sub_1001F97E8(a1 + 280, (int *)&v45, (uint64_t)&unk_101B9EB60, (_DWORD **)&v34);
    *(_QWORD *)((char *)v31 + 20) = -1;
    *((_BYTE *)v31 + 28) = 0;
  }
  return a1;
}

void sub_10146CCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_101238678(v17);
  sub_1014716F8(v16);
  sub_1014716F8(v11 + 336);
  sub_10011A5A8(a10);
  sub_100067AC4(v15);
  sub_100127554(v14);
  sub_100F8ECD8(v13);
  sub_10011A5A8(a11);
  sub_100F8ECD8(v12);
  sub_100D6C25C(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_10146CE64(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1021B7AB0;
  v2 = (uint64_t)(a1 + 18);
  v3 = (uint64_t)(a1 + 52);
  sub_100E87984((uint64_t)(a1 + 56));
  sub_100261F44((uint64_t)(a1 + 54));
  sub_100261F44(v3);
  sub_1014716F8((uint64_t)(a1 + 47));
  sub_1014716F8((uint64_t)(a1 + 42));
  sub_10011A5A8(a1 + 40);
  sub_100067AC4((uint64_t)(a1 + 35));
  sub_100127554((uint64_t)(a1 + 30));
  sub_100F8ECD8((uint64_t)(a1 + 25));
  sub_10011A5A8(a1 + 23);
  sub_100F8ECD8(v2);
  return sub_100D6C25C((uint64_t)a1);
}

void sub_10146CEFC(_QWORD *a1)
{
  sub_10146CE64(a1);
  operator delete();
}

uint64_t sub_10146CF20(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t result;
  _QWORD *i;
  _QWORD *j;
  uint64_t v7;
  id v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  id v12;
  uint8_t buf[4];
  id v14;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v7 = qword_1022A02A8;
    v8 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v11 = 136446210;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "#CLConfig,%{public}s,clearOutAssetData", &v11, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLEmergencyLocationConfigAsset::clearOutAssetData()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_100119F3C(buf);
  sub_10052502C(a1 + 320, (uint64_t)buf);
  result = sub_10011A5A8(buf);
  for (i = *(_QWORD **)(a1 + 352); i; i = (_QWORD *)*i)
  {
    sub_100119F3C(buf);
    sub_10052502C((uint64_t)(i + 3), (uint64_t)buf);
    result = sub_10011A5A8(buf);
  }
  for (j = *(_QWORD **)(a1 + 392); j; j = (_QWORD *)*j)
  {
    sub_100119F3C(buf);
    sub_10052502C((uint64_t)(j + 3), (uint64_t)buf);
    result = sub_10011A5A8(buf);
  }
  return result;
}

void sub_10146D150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10146D174(std::string::size_type a1)
{
  sub_10146D198(a1);
  return sub_10146D56C(a1);
}

void sub_10146D198(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v4;
  int v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *v11;
  unint64_t size;
  int v13;
  void *v14;
  uint64_t v15;
  id v16;
  int v17;
  int v18;
  const char *v19;
  std::string *v20;
  __int128 __dst;
  _BYTE v22[7];
  char v23;
  void *__p[2];
  unsigned __int8 v25;
  _DWORD v26[2];
  std::string v27;
  std::string buf[68];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v4 = sub_1007FA8FC(*(void **)(a1 + 128));
    v5 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v4;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationEmergencyGeneralSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v15 = qword_1022A02A8;
    v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v17 = sub_1007FA8FC(*(void **)(a1 + 128));
    v18 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(v27.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(v27.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v27.__r_.__value_.__r.__words[1] + 6) = v17;
    WORD1(v27.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v27.__r_.__value_.__r.__words[2]) = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#CLConfig,%{public}s,sending kNotificationEmergencyGeneralSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", &v27, 24);
    v20 = (std::string *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendGeneralSettingsNotification()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  sub_1015A2E04(&v27, "#CLConfig,");
  v6 = std::string::append(&v27, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 16), "UTF8String"));
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(__p, ",kNotificationEmergencyGeneralSettings,");
  if ((v25 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v25 & 0x80u) == 0)
    v9 = v25;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(buf, (const std::string::value_type *)v8, v9);
  v11 = (void *)v10->__r_.__value_.__r.__words[0];
  size = v10->__r_.__value_.__l.__size_;
  v26[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v25 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_18:
    *(_QWORD *)&__dst = v11;
    *((_QWORD *)&__dst + 1) = size;
    *(_DWORD *)v22 = v26[0];
    *(_DWORD *)&v22[3] = *(_DWORD *)((char *)v26 + 3);
    v23 = v13;
    goto LABEL_21;
  }
  sub_100115CE4(&__dst, v11, size);
LABEL_21:
  v14 = (void *)sub_10011A5AC(a1 + 320);
  sub_1007FA930(&__dst, v14);
  if (v23 < 0)
    operator delete((void *)__dst);
  sub_100D6EF24(a1, 0, a1 + 320);
  if (v13 < 0)
    operator delete(v11);
}

void sub_10146D4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10146D56C(std::string::size_type a1)
{
  id v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  NSObject *v8;
  id v9;
  int v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  int v17;
  std::string *v18;
  __int128 v19;
  std::string::size_type v20;
  std::string *p_p;
  std::string::size_type size;
  std::string *v23;
  void *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  id v32;
  int v33;
  std::string *v34;
  uint64_t v35;
  id v36;
  int v37;
  std::string *v38;
  id v39;
  _QWORD *i;
  id v41;
  _QWORD *j;
  id v43;
  _QWORD *k;
  id v45;
  NSObject *v46;
  id v47;
  NSObject *v48;
  id v49;
  NSObject *v50;
  id v51;
  NSObject *v52;
  id v53;
  std::string *v54;
  __int128 v55;
  void **v56;
  std::string::size_type v57;
  std::string *v58;
  void *v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v64;
  id v65;
  std::string *v66;
  uint64_t v67;
  id v68;
  std::string *v69;
  uint64_t v70;
  id v71;
  std::string *v72;
  uint64_t v73;
  id v74;
  std::string *v75;
  uint64_t v76;
  uint64_t v77;
  CFPropertyListRef propertyList;
  _BYTE v79[16];
  std::string::size_type v80;
  __int128 v81;
  _BYTE v82[7];
  char v83;
  void *v84[2];
  unsigned __int8 v85;
  _DWORD v86[2];
  __int128 __dst;
  _BYTE v88[7];
  char v89;
  __int128 v90;
  __int128 v91;
  int v92;
  std::string __p;
  std::string v94;
  std::string buf;
  void *v96;
  id v97;
  std::string v98;
  char v99;
  _BYTE v100[24];
  _BYTE v101[24];
  _BYTE v102[1520];

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v3 = (uint64_t *)(a1 + 416);
  v4 = sub_10011A5AC(a1 + 320);
  propertyList = v2;
  sub_100E85E9C((uint64_t *)(a1 + 416), v4, (uint64_t)v2);
  v90 = 0u;
  v91 = 0u;
  v92 = 1065353216;
  v5 = *(uint64_t **)(a1 + 392);
  if (v5)
  {
    v77 = a1 + 336;
    v6 = a1 + 144;
    do
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v7 = (unsigned int *)(v5 + 2);
      v8 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v10 = *v7;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,overlaying asset settings for desc,%{public}d", (uint8_t *)&buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
        v31 = qword_1022A02A8;
        v32 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v33 = *v7;
        LODWORD(v94.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
        WORD2(v94.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&v94.__r_.__value_.__r.__words[1] + 6) = v33;
        LODWORD(v76) = 18;
        v34 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v31, 0, "#CLConfig,%{public}s,overlaying asset settings for desc,%{public}d", &v94, v76);
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendCarrierSettingsNotification()", "%s\n", (const char *)v34);
        if (v34 != &buf)
          free(v34);
      }
      v11 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, propertyList, 1uLL);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 2);
      v12 = sub_10147176C(v77, (int *)v5 + 4, (uint64_t)&unk_101B9EB60, &buf);
      v13 = sub_10011A5AC((uint64_t)(v12 + 24));
      sub_100E85E9C(v3, v13, (uint64_t)v11);
      v14 = sub_10011A5AC((uint64_t)(v5 + 3));
      sub_100E85E9C(v3, v14, (uint64_t)v11);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v15 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v17 = *v7;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,finished asset settings overlay for desc,%{public}d", (uint8_t *)&buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
        v35 = qword_1022A02A8;
        v36 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v37 = *v7;
        LODWORD(v94.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        WORD2(v94.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&v94.__r_.__value_.__r.__words[1] + 6) = v37;
        LODWORD(v76) = 18;
        v38 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v35, 0, "#CLConfig,%{public}s,finished asset settings overlay for desc,%{public}d", &v94, v76);
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendCarrierSettingsNotification()", "%s\n", (const char *)v38);
        if (v38 != &buf)
          free(v38);
      }
      sub_1015A2E04(&v94, "#CLConfig,");
      v18 = std::string::append(&v94, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 16), "UTF8String"));
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      sub_1015A2E04(&__p, ",asset settings overlay,");
      v20 = a1;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v23 = std::string::append(&buf, (const std::string::value_type *)p_p, size);
      v24 = (void *)v23->__r_.__value_.__r.__words[0];
      v25 = v23->__r_.__value_.__l.__size_;
      LODWORD(v84[0]) = v23->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v84 + 3) = *(_DWORD *)((char *)&v23->__r_.__value_.__r.__words[2] + 3);
      v26 = SHIBYTE(v23->__r_.__value_.__r.__words[2]);
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v94.__r_.__value_.__l.__data_);
        if (v26 < 0)
        {
LABEL_27:
          sub_100115CE4(&__dst, v24, v25);
          goto LABEL_28;
        }
      }
      else if (v26 < 0)
      {
        goto LABEL_27;
      }
      *(_QWORD *)&__dst = v24;
      *((_QWORD *)&__dst + 1) = v25;
      *(_DWORD *)v88 = v84[0];
      *(_DWORD *)&v88[3] = *(_DWORD *)((char *)v84 + 3);
      v89 = v26;
LABEL_28:
      sub_1007FA930(&__dst, v11);
      if (v89 < 0)
        operator delete((void *)__dst);
      sub_100524E10(&v94, v11);
      v27 = *v7;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 2);
      v28 = sub_100F8ED88(v6, (int *)v5 + 4, (uint64_t)&unk_101B9EB60, &__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 2);
      v29 = sub_100F8ED88(v6, (int *)v5 + 4, (uint64_t)&unk_101B9EB60, &__p);
      sub_10059A0F8(&buf, v27, v28 + 4, v29 + 8, &v94);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 2);
      v30 = sub_100F8ED88((uint64_t)&v90, (int *)v5 + 4, (uint64_t)&unk_101B9EB60, &__p);
      *((_DWORD *)v30 + 6) = buf.__r_.__value_.__l.__data_;
      std::string::operator=((std::string *)(v30 + 4), (const std::string *)&buf.__r_.__value_.__r.__words[1]);
      *((_BYTE *)v30 + 56) = (_BYTE)v97;
      std::string::operator=((std::string *)(v30 + 8), &v98);
      *((_BYTE *)v30 + 88) = v99;
      sub_10052502C((uint64_t)(v30 + 12), (uint64_t)v100);
      *((_BYTE *)v30 + 112) = v100[16];
      sub_10052502C((uint64_t)(v30 + 15), (uint64_t)v101);
      *((_BYTE *)v30 + 136) = v101[16];
      sub_10052502C((uint64_t)(v30 + 18), (uint64_t)v102);
      *((_BYTE *)v30 + 160) = v102[16];
      sub_1005A94C0((uint64_t)&buf);
      sub_10011A5A8(&v94);
      a1 = v20;
      if (v26 < 0)
        operator delete(v24);
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  v39 = objc_alloc_init((Class)NSMutableDictionary);
  for (i = (_QWORD *)(a1 + 216); ; sub_10059A910((uint64_t)(i + 3), v39))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
  }
  v41 = objc_alloc_init((Class)NSMutableDictionary);
  for (j = (_QWORD *)(a1 + 160); ; sub_10059A910((uint64_t)(j + 3), v41))
  {
    j = (_QWORD *)*j;
    if (!j)
      break;
  }
  v43 = objc_alloc_init((Class)NSMutableDictionary);
  for (k = (_QWORD *)v91; k; k = (_QWORD *)*k)
    sub_10059A910((uint64_t)(k + 3), v43);
  v45 = objc_alloc_init((Class)NSMutableDictionary);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
  v46 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v47 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,creating mutable copy of settings from default bundle", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v64 = qword_1022A02A8;
    v65 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(v94.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v65;
    LODWORD(v76) = 12;
    v66 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v64, 0, "#CLConfig,%{public}s,creating mutable copy of settings from default bundle", &v94, v76);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendCarrierSettingsNotification()", "%s\n", (const char *)v66);
    if (v66 != &buf)
      free(v66);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
  buf.__r_.__value_.__l.__size_ = 3221225472;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_10147156C;
  v96 = &unk_1021A5080;
  v97 = v45;
  v98.__r_.__value_.__r.__words[0] = a1;
  objc_msgSend(v39, "enumerateKeysAndObjectsUsingBlock:", &buf);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
  v48 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v49 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,overlaying settings from CBs/OBs", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v67 = qword_1022A02A8;
    v68 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(v94.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v68;
    LODWORD(v76) = 12;
    v69 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v67, 0, "#CLConfig,%{public}s,overlaying settings from CBs/OBs", &v94, v76);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendCarrierSettingsNotification()", "%s\n", (const char *)v69);
    if (v69 != &buf)
      free(v69);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
  buf.__r_.__value_.__l.__size_ = 3221225472;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_10147156C;
  v96 = &unk_1021A5080;
  v97 = v45;
  v98.__r_.__value_.__r.__words[0] = a1;
  objc_msgSend(v41, "enumerateKeysAndObjectsUsingBlock:", &buf);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
  v50 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v51 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,overlaying asset settings onto settings from bundles", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v70 = qword_1022A02A8;
    v71 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(v94.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v71;
    LODWORD(v76) = 12;
    v72 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v70, 0, "#CLConfig,%{public}s,overlaying asset settings onto settings from bundles", &v94, v76);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendCarrierSettingsNotification()", "%s\n", (const char *)v72);
    if (v72 != &buf)
      free(v72);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
  buf.__r_.__value_.__l.__size_ = 3221225472;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_10147156C;
  v96 = &unk_1021A5080;
  v97 = v45;
  v98.__r_.__value_.__r.__words[0] = a1;
  objc_msgSend(v43, "enumerateKeysAndObjectsUsingBlock:", &buf);
  sub_100119F3C(&v94);
  v94.__r_.__value_.__r.__words[2] = -1;
  sub_100524E10(&buf, v45);
  sub_10052502C((uint64_t)&v94, (uint64_t)&buf);
  sub_10011A5A8(&buf);
  LODWORD(v94.__r_.__value_.__r.__words[2]) = sub_1007FA8C8(*(void **)(a1 + 128));
  HIDWORD(v94.__r_.__value_.__r.__words[2]) = sub_1007FA8FC(*(void **)(a1 + 128));
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
  v52 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v53 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v53;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = HIDWORD(v94.__r_.__value_.__r.__words[2]);
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v94.__r_.__value_.__r.__words[2];
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationEmergencyCarrierSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)&buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v73 = qword_1022A02A8;
    v74 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(__p.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = HIDWORD(v94.__r_.__value_.__r.__words[2]);
    WORD1(__p.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v94.__r_.__value_.__r.__words[2];
    LODWORD(v76) = 24;
    v75 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v73, 0, "#CLConfig,%{public}s,sending kNotificationEmergencyCarrierSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", &__p, v76);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendCarrierSettingsNotification()", "%s\n", (const char *)v75);
    if (v75 != &buf)
      free(v75);
  }
  sub_1015A2E04(&__p, "#CLConfig,");
  v54 = std::string::append(&__p, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 16), "UTF8String"));
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(v84, ",kNotificationEmergencyCarrierSettings,");
  if ((v85 & 0x80u) == 0)
    v56 = v84;
  else
    v56 = (void **)v84[0];
  if ((v85 & 0x80u) == 0)
    v57 = v85;
  else
    v57 = (std::string::size_type)v84[1];
  v58 = std::string::append(&buf, (const std::string::value_type *)v56, v57);
  v59 = (void *)v58->__r_.__value_.__r.__words[0];
  v60 = v58->__r_.__value_.__l.__size_;
  v86[0] = v58->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v86 + 3) = *(_DWORD *)((char *)&v58->__r_.__value_.__r.__words[2] + 3);
  v61 = SHIBYTE(v58->__r_.__value_.__r.__words[2]);
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  if ((char)v85 < 0)
    operator delete(v84[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v61 & 0x80000000) == 0)
      goto LABEL_82;
  }
  else if ((v61 & 0x80000000) == 0)
  {
LABEL_82:
    *(_QWORD *)&v81 = v59;
    *((_QWORD *)&v81 + 1) = v60;
    *(_DWORD *)v82 = v86[0];
    *(_DWORD *)&v82[3] = *(_DWORD *)((char *)v86 + 3);
    v83 = v61;
    goto LABEL_85;
  }
  sub_100115CE4(&v81, v59, v60);
LABEL_85:
  sub_1007FA930(&v81, v45);
  if (v83 < 0)
    operator delete((void *)v81);
  sub_100525028(v79);
  v80 = v94.__r_.__value_.__r.__words[2];
  LODWORD(buf.__r_.__value_.__l.__data_) = 1;
  v62 = *(_QWORD *)(a1 + 56);
  if (!v62)
    sub_10025FD1C();
  (*(void (**)(uint64_t, std::string *, _BYTE *))(*(_QWORD *)v62 + 48))(v62, &buf, v79);
  sub_10011A5A8(v79);
  if (v61 < 0)
    operator delete(v59);
  sub_10011A5A8(&v94);
  return sub_100F8ECD8((uint64_t)&v90);
}

void sub_10146E4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  sub_10011A5A8(&a45);
  sub_100F8ECD8((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_10146E688(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char *v6;
  char v7;
  char *v8;
  char v9;
  char *v10;
  char v11;
  char *v12;
  char v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  id v17;
  const char *v18;
  char *v19;
  int v20;
  id v21;
  uint8_t buf[1640];

  *(_DWORD *)(a2 + 48) = sub_100D67A14(*(void **)(a1 + 16));
  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(_DWORD *)(a2 + 52) = sub_1007FA8C8(v4);
    *(_DWORD *)(a2 + 56) = sub_1007FA8FC(*(void **)(a1 + 128));
    *(_BYTE *)(a2 + 85) = sub_100D67A00(*(_QWORD *)(a1 + 128));
    v5 = a1 + 240;
    v20 = 0;
    *(_QWORD *)buf = &v20;
    v6 = sub_1001E1254(a1 + 240, &v20, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    std::string::operator=((std::string *)(a2 + 88), (const std::string *)v6 + 1);
    v7 = v6[64];
    *(_OWORD *)(a2 + 112) = *((_OWORD *)v6 + 3);
    *(_BYTE *)(a2 + 128) = v7;
    v20 = 1;
    *(_QWORD *)buf = &v20;
    v8 = sub_1001E1254(a1 + 240, &v20, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    std::string::operator=((std::string *)(a2 + 136), (const std::string *)v8 + 1);
    v9 = v8[64];
    *(_OWORD *)(a2 + 160) = *((_OWORD *)v8 + 3);
    *(_BYTE *)(a2 + 176) = v9;
    if (*(_BYTE *)(a1 + 136))
    {
      v20 = 2;
      *(_QWORD *)buf = &v20;
      v10 = sub_1001E1254(v5, &v20, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      std::string::operator=((std::string *)(a2 + 184), (const std::string *)v10 + 1);
      v11 = v10[64];
      *(_OWORD *)(a2 + 208) = *((_OWORD *)v10 + 3);
      *(_BYTE *)(a2 + 224) = v11;
      v20 = 3;
      *(_QWORD *)buf = &v20;
      v12 = sub_1001E1254(v5, &v20, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      std::string::operator=((std::string *)(a2 + 232), (const std::string *)v12 + 1);
      v13 = v12[64];
      *(_OWORD *)(a2 + 256) = *((_OWORD *)v12 + 3);
      *(_BYTE *)(a2 + 272) = v13;
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v14 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning #CLConfig,%{public}s,getVersionInfoForAwd,no asset available to report for component", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v16 = qword_1022A02A8;
      v17 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v20 = 136446210;
      v21 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#Warning #CLConfig,%{public}s,getVersionInfoForAwd,no asset available to report for component", &v20, 12);
      v19 = (char *)v18;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLEmergencyLocationConfigAsset::getVersionInfoForAwd(CLDaemonStats_Type::LocationMobileAssetStatistics &)", "%s\n", v18);
      if (v19 != (char *)buf)
        free(v19);
    }
  }
}

uint64_t sub_10146E9B4(std::string::size_type a1, void *a2)
{
  _QWORD *i;
  NSObject *v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  id v13;
  uint8_t buf[4];
  id v15;

  for (i = *(_QWORD **)(a1 + 160); i; i = (_QWORD *)*i)
    sub_10059AC3C((uint64_t)(i + 3), a2);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
  v5 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,handleBundleChange,CB/OB changed", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v8 = qword_1022A02A8;
    v9 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v12 = 136446210;
    v13 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "#CLConfig,%{public}s,handleBundleChange,CB/OB changed", &v12, 12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLEmergencyLocationConfigAsset::handleBundleChange(NSDictionary *)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  result = sub_100D6C5CC(a1);
  if ((_DWORD)result)
  {
    sub_10146EBAC(a1);
    return sub_10146D56C(a1);
  }
  return result;
}

void sub_10146EBAC(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  _BOOL4 v5;
  _BOOL4 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  id v11;
  std::string *p_p;
  uint64_t i;
  std::string *v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  id v18;
  const char *v19;
  char *v20;
  uint64_t j;
  std::string *v22;
  uint64_t v23;
  id v24;
  id v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  id v29;
  std::string *v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  id v35;
  __int16 v36;
  std::string *v37;
  std::string __p;
  _BYTE buf[1628];

  if (*(_QWORD *)(a1 + 128))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v4 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl"), "absoluteString"), "UTF8String");
      *(_DWORD *)buf = 136446467;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,reading carrier settings under %{private}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v23 = qword_1022A02A8;
      v24 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v25 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl"), "absoluteString"), "UTF8String");
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446467;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 0, "#CLConfig,%{public}s,reading carrier settings under %{private}s", &__p, 22);
      v27 = (char *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCarrierSettings()", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    memset(&__p, 0, sizeof(__p));
    sub_1001E4804(buf);
    v5 = sub_1000BCB64(*(uint64_t *)buf, "CLConfigBundleIdOverride", &__p);
    v6 = v5;
    v7 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_11;
    v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v6)
        goto LABEL_12;
    }
    else
    {
LABEL_11:
      if (v5)
      {
LABEL_12:
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
        v10 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
        {
          v11 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446467;
          *(_QWORD *)&buf[4] = v11;
          *(_WORD *)&buf[12] = 2081;
          *(_QWORD *)&buf[14] = p_p;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning #CLConfig,%{public}s,overriding bundle IDs to %{private}s", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
          v28 = qword_1022A02A8;
          v29 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
          v30 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v34 = 136446467;
          v35 = v29;
          v36 = 2081;
          v37 = v30;
          LODWORD(v33) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 0, "#Warning #CLConfig,%{public}s,overriding bundle IDs to %{private}s", &v34, v33);
          v32 = (char *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCarrierSettings()", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
        for (i = a1 + 160; ; sub_1014711A0(a1, (int *)(i + 16), &__p, v14 + 1))
        {
          i = *(_QWORD *)i;
          if (!i)
            break;
          *(_QWORD *)buf = i + 16;
          v14 = (std::string *)sub_1001E1254(a1 + 240, (int *)(i + 16), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        }
        goto LABEL_35;
      }
    }
    for (j = a1 + 160; ; sub_1014711A0(a1, (int *)(j + 16), (std::string *)(j + 32), v22 + 1))
    {
      j = *(_QWORD *)j;
      if (!j)
        break;
      *(_QWORD *)buf = j + 16;
      v22 = (std::string *)sub_1001E1254(a1 + 240, (int *)(j + 16), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    }
LABEL_35:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
  v15 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCarrierSettings,asset unavailable,ignoring", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v17 = qword_1022A02A8;
    v18 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "#CLConfig,%{public}s,readCarrierSettings,asset unavailable,ignoring", &__p, 12);
    v20 = (char *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCarrierSettings()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
}

void sub_10146F1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10146F1F8(std::string::size_type a1, const void *a2)
{
  CFPropertyListRef v3;
  _QWORD v5[2];

  v3 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, a2, 1uLL);
  sub_100524E10(v5, v3);
  sub_10052502C(a1 + 184, (uint64_t)v5);
  sub_10011A5A8(v5);
  sub_10146F278(a1);
  return sub_10146D56C(a1);
}

void sub_10146F264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

void sub_10146F278(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  uint64_t *i;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  uint64_t *j;
  NSObject *v11;
  id v12;
  uint64_t *k;
  uint64_t v14;
  id v15;
  char *v16;
  uint64_t v17;
  id v18;
  char *v19;
  uint64_t v20;
  id v21;
  char *v22;
  int v23;
  id v24;
  uint8_t buf[4];
  _QWORD v26[3];
  char v27;
  std::string v28;
  char v29;
  _BYTE v30[16];
  char v31;
  _BYTE v32[16];
  char v33;
  _BYTE v34[16];
  char v35;

  v2 = a1 + 184;
  if (sub_10052A950(a1 + 184))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v3 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v26[0] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readDefaultBundleSettings,no default bundle settings,ignoring", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v14 = qword_1022A02A8;
      v15 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v23 = 136446210;
      v24 = v15;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 0, "#CLConfig,%{public}s,readDefaultBundleSettings,no default bundle settings,ignoring", &v23, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readDefaultBundleSettings()", "%s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
    for (i = *(uint64_t **)(a1 + 216); i; i = (uint64_t *)*i)
    {
      sub_1005A93C8((uint64_t)buf, *((_DWORD *)i + 4));
      *((_DWORD *)i + 6) = *(_DWORD *)buf;
      std::string::operator=((std::string *)(i + 4), (const std::string *)((char *)v26 + 4));
      *((_BYTE *)i + 56) = v27;
      std::string::operator=((std::string *)(i + 8), &v28);
      *((_BYTE *)i + 88) = v29;
      sub_10052502C((uint64_t)(i + 12), (uint64_t)v30);
      *((_BYTE *)i + 112) = v31;
      sub_10052502C((uint64_t)(i + 15), (uint64_t)v32);
      *((_BYTE *)i + 136) = v33;
      sub_10052502C((uint64_t)(i + 18), (uint64_t)v34);
      *((_BYTE *)i + 160) = v35;
      sub_1005A94C0((uint64_t)buf);
    }
  }
  else
  {
    v6 = objc_msgSend((id)sub_10011A5AC(v2), "valueForKey:", CFSTR("LocationByCountry"));
    if (v6)
    {
      v7 = v6;
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v8 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)buf = 136446210;
        v26[0] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readDefaultBundleSettings", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
        v17 = qword_1022A02A8;
        v18 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v23 = 136446210;
        v24 = v18;
        v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "#CLConfig,%{public}s,readDefaultBundleSettings", &v23, 12);
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readDefaultBundleSettings()", "%s\n", v19);
        if (v19 != (char *)buf)
          free(v19);
      }
      for (j = *(uint64_t **)(a1 + 296); j; j = (uint64_t *)*j)
        sub_10146FE1C(a1, *((_DWORD *)j + 4), v7, *((unsigned int *)j + 5), *((unsigned int *)j + 6), *((unsigned __int8 *)j + 28));
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v11 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v12 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)buf = 136446210;
        v26[0] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readDefaultBundleSettings,no location by country array", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
        v20 = qword_1022A02A8;
        v21 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v23 = 136446210;
        v24 = v21;
        v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 16, "#CLConfig,%{public}s,readDefaultBundleSettings,no location by country array", &v23, 12);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyLocationConfigAsset::readDefaultBundleSettings()", "%s\n", v22);
        if (v22 != (char *)buf)
          free(v22);
      }
      for (k = *(uint64_t **)(a1 + 216); k; k = (uint64_t *)*k)
      {
        sub_1005A93C8((uint64_t)buf, *((_DWORD *)k + 4));
        *((_DWORD *)k + 6) = *(_DWORD *)buf;
        std::string::operator=((std::string *)(k + 4), (const std::string *)((char *)v26 + 4));
        *((_BYTE *)k + 56) = v27;
        std::string::operator=((std::string *)(k + 8), &v28);
        *((_BYTE *)k + 88) = v29;
        sub_10052502C((uint64_t)(k + 12), (uint64_t)v30);
        *((_BYTE *)k + 112) = v31;
        sub_10052502C((uint64_t)(k + 15), (uint64_t)v32);
        *((_BYTE *)k + 136) = v33;
        sub_10052502C((uint64_t)(k + 18), (uint64_t)v34);
        *((_BYTE *)k + 160) = v35;
        sub_1005A94C0((uint64_t)buf);
      }
    }
  }
}

void sub_10146F89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1005A94C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10146F8BC(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  uint64_t i;
  NSObject *v6;
  id v7;
  uint64_t v8;
  id v9;
  char *v10;
  NSObject *v11;
  id v12;
  _QWORD *j;
  uint64_t v14;
  id v15;
  id v16;
  char *v17;
  uint64_t v18;
  id v19;
  char *v20;
  uint64_t v21;
  int v22;
  id v23;
  int v24;
  id v25;
  __int16 v26;
  id v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  id v31;

  if (*(_QWORD *)(a1 + 128))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v4 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl"), "absoluteString"), "UTF8String");
      *(_DWORD *)buf = 136446467;
      v29 = v3;
      v30 = 2081;
      v31 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,reading country settings under %{private}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v14 = qword_1022A02A8;
      v15 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl"), "absoluteString"), "UTF8String");
      v24 = 136446467;
      v25 = v15;
      v26 = 2081;
      v27 = v16;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 0, "#CLConfig,%{public}s,readCountrySettings,reading country settings under %{private}s", &v24, 22);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCountrySettings()", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
    sub_100119F3C(&v24);
    if (sub_100D6D640(a1, CFSTR("countryInfoMap.plist"), (uint64_t)&v24))
    {
      for (i = a1 + 296;
            ;
            sub_101470770(a1, *(_DWORD *)(i + 16), (uint64_t)&v24, *(unsigned int *)(i + 20), *(unsigned int *)(i + 24), *(unsigned __int8 *)(i + 28)))
      {
        i = *(_QWORD *)i;
        if (!i)
          break;
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v11 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v12 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)buf = 136446210;
        v29 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,failed to load country info map file", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
        v18 = qword_1022A02A8;
        v19 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v22 = 136446210;
        v23 = v19;
        LODWORD(v21) = 12;
        v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "#CLConfig,%{public}s,readCountrySettings,failed to load country info map file", &v22, v21);
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCountrySettings()", "%s\n", v20);
        if (v20 != (char *)buf)
          free(v20);
      }
      for (j = *(_QWORD **)(a1 + 352); j; j = (_QWORD *)*j)
      {
        sub_100119F3C(buf);
        sub_10052502C((uint64_t)(j + 3), (uint64_t)buf);
        sub_10011A5A8(buf);
      }
    }
    sub_10011A5A8(&v24);
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v6 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v29 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,asset unavailable,ignoring", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v8 = qword_1022A02A8;
      v9 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v24 = 136446210;
      v25 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "#CLConfig,%{public}s,readCountrySettings,asset unavailable,ignoring", &v24, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCountrySettings()", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
}

void sub_10146FDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10146FE1C(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t *v11;
  id v12;
  const __CFDictionary *v13;
  uint64_t *v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  id v18;
  char *v19;
  NSObject *v20;
  id v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  id v25;
  uint64_t v27;
  id v28;
  _BYTE v29[20];
  int v30;
  _BYTE v31[12];
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  _BYTE buf[12];
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  std::string v49;
  char v50;
  _BYTE v51[24];
  _BYTE v52[24];
  _BYTE v53[1520];

  v30 = a2;
  sub_1005A93C8((uint64_t)buf, a2);
  *(_QWORD *)v31 = &v30;
  v11 = sub_100F8ED88(a1 + 200, &v30, (uint64_t)&unk_101B9EB60, (_DWORD **)v31);
  *((_DWORD *)v11 + 6) = *(_DWORD *)buf;
  std::string::operator=((std::string *)(v11 + 4), (const std::string *)&buf[8]);
  *((_BYTE *)v11 + 56) = v48;
  std::string::operator=((std::string *)(v11 + 8), &v49);
  *((_BYTE *)v11 + 88) = v50;
  sub_10052502C((uint64_t)(v11 + 12), (uint64_t)v51);
  *((_BYTE *)v11 + 112) = v51[16];
  sub_10052502C((uint64_t)(v11 + 15), (uint64_t)v52);
  *((_BYTE *)v11 + 136) = v52[16];
  sub_10052502C((uint64_t)(v11 + 18), (uint64_t)v53);
  *((_BYTE *)v11 + 160) = v53[16];
  sub_1005A94C0((uint64_t)buf);
  sub_100119F3C(v29);
  if ((sub_100D6E1B8(a1, a3, a4, a5, a6, (uint64_t)v29) & 1) != 0)
  {
    v12 = objc_msgSend((id)sub_10011A5AC((uint64_t)v29), "valueForKey:", CFSTR("Location"));
    if (v12)
    {
      v13 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v12, 1uLL);
      *(_QWORD *)buf = &v30;
      v14 = sub_100F8ED88(a1 + 200, &v30, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      sub_10059A7FC((uint64_t)(v14 + 3), v13);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v15 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = v16;
        v41 = 1026;
        v42 = v30;
        v43 = 1026;
        v44 = a4;
        v45 = 1026;
        v46 = a5;
        v47 = 1026;
        v48 = a6;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readDefaultBundleSettings,loaded country settings for descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x24u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
        v17 = qword_1022A02A8;
        v18 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)v31 = 136447234;
        *(_QWORD *)&v31[4] = v18;
        v32 = 1026;
        v33 = v30;
        v34 = 1026;
        v35 = a4;
        v36 = 1026;
        v37 = a5;
        v38 = 1026;
        v39 = a6;
        v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "#CLConfig,%{public}s,readDefaultBundleSettings,loaded country settings for descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", v31, 36);
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readDefaultBundleSettings(BundleDescriptor, NSArray *, int32_t, int32_t, BOOL)", "%s\n", v19);
LABEL_28:
        if (v19 != buf)
          free(v19);
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v24 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v25 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = v25;
        v41 = 1026;
        v42 = v30;
        v43 = 1026;
        v44 = a4;
        v45 = 1026;
        v46 = a5;
        v47 = 1026;
        v48 = a6;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readDefaultBundleSettings,location dict not present,descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x24u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
        v27 = qword_1022A02A8;
        v28 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)v31 = 136447234;
        *(_QWORD *)&v31[4] = v28;
        v32 = 1026;
        v33 = v30;
        v34 = 1026;
        v35 = a4;
        v36 = 1026;
        v37 = a5;
        v38 = 1026;
        v39 = a6;
        v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 16, "#CLConfig,%{public}s,readDefaultBundleSettings,location dict not present,descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", v31, 36);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyLocationConfigAsset::readDefaultBundleSettings(BundleDescriptor, NSArray *, int32_t, int32_t, BOOL)", "%s\n", v19);
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v20 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v21 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = v21;
      v41 = 1026;
      v42 = v30;
      v43 = 1026;
      v44 = a4;
      v45 = 1026;
      v46 = a5;
      v47 = 1026;
      v48 = a6;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readDefaultBundleSettings,no country settings found,descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x24u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v22 = qword_1022A02A8;
      v23 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)v31 = 136447234;
      *(_QWORD *)&v31[4] = v23;
      v32 = 1026;
      v33 = v30;
      v34 = 1026;
      v35 = a4;
      v36 = 1026;
      v37 = a5;
      v38 = 1026;
      v39 = a6;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "#CLConfig,%{public}s,readDefaultBundleSettings,no country settings found,descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", v31, 36);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readDefaultBundleSettings(BundleDescriptor, NSArray *, int32_t, int32_t, BOOL)", "%s\n", v19);
      goto LABEL_28;
    }
  }
  return sub_10011A5A8(v29);
}

void sub_1014704D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_101470530(uint64_t a1)
{
  sub_10147056C(a1);
  sub_10146F8BC(a1);
  sub_10146EBAC(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

void sub_10147056C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  id v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  id v9;
  uint8_t buf[4];
  id v11;

  if (*(_QWORD *)(a1 + 128))
  {
    sub_100D6D640(a1, CFSTR("general.plist"), a1 + 320);
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readGeneralSettings,asset unavailable,ignoring", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v4 = qword_1022A02A8;
      v5 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v8 = 136446210;
      v9 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 0, "#CLConfig,%{public}s,readGeneralSettings,asset unavailable,ignoring", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readGeneralSettings()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_101470770(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char *v11;
  std::string *p_p;
  NSString *v13;
  char *v14;
  NSObject *v15;
  id v16;
  std::string *v17;
  uint64_t v18;
  id v19;
  std::string *v20;
  char *v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  id v25;
  char *v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  id v30;
  char *v31;
  NSObject *v32;
  id v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  id v37;
  std::string *v38;
  uint64_t v39;
  id v40;
  std::string *v41;
  std::string __p;
  _BYTE v43[20];
  int v44;
  _BYTE v45[12];
  __int16 v46;
  __int128 v47;
  _BYTE v48[6];
  int v49;
  __int16 v50;
  int v51;
  _BYTE buf[12];
  __int16 v53;
  __int128 v54;
  _BYTE v55[6];
  int v56;
  __int16 v57;
  int v58;

  v44 = a2;
  if (*(_QWORD *)(a1 + 128))
  {
    sub_100119F3C(buf);
    *(_QWORD *)v45 = &v44;
    v11 = sub_10147176C(a1 + 336, &v44, (uint64_t)&unk_101B9EB60, (_DWORD **)v45);
    sub_10052502C((uint64_t)(v11 + 24), (uint64_t)buf);
    sub_10011A5A8(buf);
    sub_100119F3C(v43);
    if ((sub_100D6DE14(a1, a3, a4, a5, a6, (uint64_t)v43) & 1) == 0)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v27 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v28 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = v28;
        v53 = 1026;
        LODWORD(v54) = v44;
        WORD2(v54) = 1026;
        *(_DWORD *)((char *)&v54 + 6) = a4;
        WORD5(v54) = 1026;
        HIDWORD(v54) = a5;
        *(_WORD *)v55 = 1026;
        *(_DWORD *)&v55[2] = a6;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,no country info found,descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x24u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
        v29 = qword_1022A02A8;
        v30 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)v45 = 136447234;
        *(_QWORD *)&v45[4] = v30;
        v46 = 1026;
        LODWORD(v47) = v44;
        WORD2(v47) = 1026;
        *(_DWORD *)((char *)&v47 + 6) = a4;
        WORD5(v47) = 1026;
        HIDWORD(v47) = a5;
        *(_WORD *)v48 = 1026;
        *(_DWORD *)&v48[2] = a6;
        v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 0, "#CLConfig,%{public}s,readCountrySettings,no country info found,descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", v45, 36);
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCountrySettings(BundleDescriptor, CLNameValuePair &, int32_t, int32_t, BOOL)", "%s\n", v31);
        if (v31 != buf)
          free(v31);
      }
      goto LABEL_57;
    }
    memset(&__p, 0, sizeof(__p));
    if (sub_1000BD5F0((uint64_t)v43, (uint64_t)CFSTR("SettingsFile"), &__p))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
      *(_QWORD *)buf = &v44;
      v14 = sub_10147176C(a1 + 336, &v44, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      if (!sub_100D6D640(a1, v13, (uint64_t)(v14 + 24)))
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
        v36 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
        {
          v37 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
          v38 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446723;
          *(_QWORD *)&buf[4] = v37;
          v53 = 2081;
          *(_QWORD *)&v54 = v38;
          WORD4(v54) = 1026;
          *(_DWORD *)((char *)&v54 + 10) = v44;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readCountrySettings,failed to load settings file,%{private}s,descriptor,%{public}d", buf, 0x1Cu);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_55;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
        v39 = qword_1022A02A8;
        v40 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v41 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)v45 = 136446723;
        *(_QWORD *)&v45[4] = v40;
        v46 = 2081;
        *(_QWORD *)&v47 = v41;
        WORD4(v47) = 1026;
        *(_DWORD *)((char *)&v47 + 10) = v44;
        v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 16, "#CLConfig,%{public}s,readCountrySettings,failed to load settings file,%{private}s,descriptor,%{public}d", v45, 28);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyLocationConfigAsset::readCountrySettings(BundleDescriptor, CLNameValuePair &, int32_t, int32_t, BOOL)", "%s\n", v21);
        if (v21 == buf)
          goto LABEL_55;
        goto LABEL_64;
      }
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v15 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v17 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136447491;
        *(_QWORD *)&buf[4] = v16;
        v53 = 1026;
        LODWORD(v54) = v44;
        WORD2(v54) = 2081;
        *(_QWORD *)((char *)&v54 + 6) = v17;
        HIWORD(v54) = 1026;
        *(_DWORD *)v55 = a4;
        *(_WORD *)&v55[4] = 1026;
        v56 = a5;
        v57 = 1026;
        v58 = a6;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,loaded settings for descriptor,%{public}d,filename,%{private}s,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x2Eu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_55;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v18 = qword_1022A02A8;
      v19 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v20 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)v45 = 136447491;
      *(_QWORD *)&v45[4] = v19;
      v46 = 1026;
      LODWORD(v47) = v44;
      WORD2(v47) = 2081;
      *(_QWORD *)((char *)&v47 + 6) = v20;
      HIWORD(v47) = 1026;
      *(_DWORD *)v48 = a4;
      *(_WORD *)&v48[4] = 1026;
      v49 = a5;
      v50 = 1026;
      v51 = a6;
      v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "#CLConfig,%{public}s,readCountrySettings,loaded settings for descriptor,%{public}d,filename,%{private}s,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", v45, 46);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCountrySettings(BundleDescriptor, CLNameValuePair &, int32_t, int32_t, BOOL)", "%s\n", v21);
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v32 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v33 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = v33;
        v53 = 1026;
        LODWORD(v54) = v44;
        WORD2(v54) = 1026;
        *(_DWORD *)((char *)&v54 + 6) = a4;
        WORD5(v54) = 1026;
        HIDWORD(v54) = a5;
        *(_WORD *)v55 = 1026;
        *(_DWORD *)&v55[2] = a6;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readCountrySettings,missing settings filename,descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x24u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_55;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v34 = qword_1022A02A8;
      v35 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)v45 = 136447234;
      *(_QWORD *)&v45[4] = v35;
      v46 = 1026;
      LODWORD(v47) = v44;
      WORD2(v47) = 1026;
      *(_DWORD *)((char *)&v47 + 6) = a4;
      WORD5(v47) = 1026;
      HIDWORD(v47) = a5;
      *(_WORD *)v48 = 1026;
      *(_DWORD *)&v48[2] = a6;
      v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 16, "#CLConfig,%{public}s,readCountrySettings,missing settings filename,descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", v45, 36);
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyLocationConfigAsset::readCountrySettings(BundleDescriptor, CLNameValuePair &, int32_t, int32_t, BOOL)", "%s\n", v21);
    }
    if (v21 == buf)
    {
LABEL_55:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_57:
      sub_10011A5A8(v43);
      return;
    }
LABEL_64:
    free(v21);
    goto LABEL_55;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
  v22 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v23 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,asset unavailable,ignoring", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v24 = qword_1022A02A8;
    v25 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)v45 = 136446210;
    *(_QWORD *)&v45[4] = v25;
    v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "#CLConfig,%{public}s,readCountrySettings,asset unavailable,ignoring", v45, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCountrySettings(BundleDescriptor, CLNameValuePair &, int32_t, int32_t, BOOL)", "%s\n", v26);
    if (v26 != buf)
      free(v26);
  }
}

void sub_101471130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a16 < 0)
    operator delete(__p);
  sub_10011A5A8(&a17);
  _Unwind_Resume(a1);
}

void sub_1014711A0(uint64_t a1, int *a2, std::string *__str, std::string *this)
{
  const char *v8;
  size_t v9;
  size_t v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type size;
  _BYTE *v14;
  std::string *v15;
  _BYTE *v16;
  NSString *v17;
  char *v18;
  NSObject *v19;
  id v20;
  int v21;
  char *v22;
  uint64_t v23;
  id v24;
  int v25;
  const char *v26;
  char *v27;
  _BYTE v28[12];
  __int16 v29;
  int v30;
  _BYTE __p[12];
  __int16 v32;
  int v33;
  char v34;

  std::string::operator=(this, __str);
  v8 = (const char *)objc_msgSend(CFSTR("kBundleIDUnavailable"), "UTF8String");
  v9 = strlen(v8);
  v10 = v9;
  v11 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v9 == __str->__r_.__value_.__l.__size_)
    {
      if (v9 == -1)
        goto LABEL_35;
      v12 = (std::string *)__str->__r_.__value_.__r.__words[0];
      goto LABEL_8;
    }
LABEL_9:
    if ((v11 & 0x80u) == 0)
      size = v11;
    else
      size = __str->__r_.__value_.__l.__size_;
    v14 = __p;
    sub_100259584((uint64_t)__p, size + 6);
    if (v34 < 0)
      v14 = *(_BYTE **)__p;
    if (size)
    {
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = __str;
      else
        v15 = (std::string *)__str->__r_.__value_.__r.__words[0];
      memmove(v14, v15, size);
    }
    strcpy(&v14[size], ".plist");
    if (v34 >= 0)
      v16 = __p;
    else
      v16 = *(_BYTE **)__p;
    v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16);
    *(_QWORD *)v28 = a2;
    v18 = sub_10147176C(a1 + 376, a2, (uint64_t)&unk_101B9EB60, (_DWORD **)v28);
    this[1].__r_.__value_.__s.__data_[16] = sub_100D6D640(a1, v17, (uint64_t)(v18 + 24));
    if (v34 < 0)
      operator delete(*(void **)__p);
    return;
  }
  if (v9 != v11)
    goto LABEL_9;
  v12 = __str;
  if (v10 == -1)
LABEL_35:
    sub_10035AD9C();
LABEL_8:
  if (memcmp(v12, v8, v10))
    goto LABEL_9;
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
  v19 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v20 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v21 = *a2;
    *(_DWORD *)__p = 136446466;
    *(_QWORD *)&__p[4] = v20;
    v32 = 1026;
    v33 = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,bundle ID unavailable for descriptor,%{public}d", __p, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v23 = qword_1022A02A8;
    v24 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v25 = *a2;
    *(_DWORD *)v28 = 136446466;
    *(_QWORD *)&v28[4] = v24;
    v29 = 1026;
    v30 = v25;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v23, 0, "#CLConfig,%{public}s,bundle ID unavailable for descriptor,%{public}d", v28, 18);
    v27 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCarrierSettings(const BundleDescriptor &, const std::string &, CLDaemonStats_Type::CarrierSettingsStatus &)", "%s\n", v26);
    if (v27 != __p)
      free(v27);
  }
  sub_100119F3C(__p);
  *(_QWORD *)v28 = a2;
  v22 = sub_10147176C(a1 + 376, a2, (uint64_t)&unk_101B9EB60, (_DWORD **)v28);
  sub_10052502C((uint64_t)(v22 + 24), (uint64_t)__p);
  sub_10011A5A8(__p);
  this[1].__r_.__value_.__s.__data_[16] = 0;
}

void sub_101471528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10011A5A8(&__p);
  _Unwind_Resume(a1);
}

id sub_10147156C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  _QWORD v18[6];

  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_opt_class(NSDictionary, a2);
  if ((objc_opt_isKindOfClass(a3, v7) & 1) != 0)
  {
    v9 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2);
    if (!v9
      || (v11 = v9, v12 = objc_opt_class(NSDictionary, v10), (objc_opt_isKindOfClass(v11, v12) & 1) == 0))
    {
      v11 = objc_alloc_init((Class)NSMutableDictionary);
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v11, a2);
    }
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10147156C;
    v18[3] = &unk_1021A5080;
    v18[4] = v11;
    v18[5] = v6;
    return objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v18);
  }
  else
  {
    v14 = objc_opt_class(NSArray, v8);
    if ((objc_opt_isKindOfClass(a3, v14) & 1) != 0)
    {
      v15 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, a3, 2uLL);
      v16 = *(void **)(a1 + 32);
    }
    else
    {
      v17 = *(void **)(a1 + 32);
      v15 = objc_msgSend(a3, "copy");
      v16 = v17;
    }
    return objc_msgSend(v16, "setObject:forKey:", v15, a2);
  }
}

void sub_1014716CC(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_1014716F8(uint64_t a1)
{
  void *v2;

  sub_101471730(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_101471730(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_10011A5A8(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

char *sub_10147176C(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  char **v9;
  char *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  char *v21[3];

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 <= v6)
        v4 = v6 % v7;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
    v9 = *(char ***)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      for (i = *v9; i; i = *(char **)i)
      {
        v11 = *((_QWORD *)i + 1);
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v4)
            break;
        }
      }
    }
  }
  sub_1014719B0(a1, *a2, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_10012E444(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(char **)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(char **)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  i = v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_101471A28(v21, 0);
  return i;
}

void sub_101471998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_101471A28((char **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1014719B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = **a3;
  result = sub_100119F3C(v8 + 3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_101471A10(_Unwind_Exception *a1)
{
  char **v1;

  sub_101471A28(v1, 0);
  _Unwind_Resume(a1);
}

void sub_101471A28(char **a1, char *a2)
{
  char *v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      sub_10011A5A8(v2 + 24);
    operator delete(v2);
  }
}

uint64_t sub_101471A6C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v7;

  v7 = a2;
  v5 = sub_10080E4E4(a1, &v7, a3, a4);
  *(_QWORD *)v5 = &off_1021B7C88;
  *(_QWORD *)(v5 + 376) = 0;
  *(_QWORD *)(v5 + 384) = 0;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_QWORD *)(v5 + 360) = 0;
  *(_QWORD *)(v5 + 368) = v5 + 376;
  sub_100197040();
  *(_BYTE *)(a1 + 392) = sub_10075D288();
  return a1;
}

void sub_101471AE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  sub_100008848(v2, *(_QWORD **)(v1 + 376));
  v4 = *(void **)(v1 + 344);
  if (v4)
  {
    *(_QWORD *)(v1 + 352) = v4;
    operator delete(v4);
  }
  sub_100FA05F0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101471B10(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)sub_101471A6C(a1, a2, qword_10230F1D8, a3);
  *result = off_1021B7B80;
  return result;
}

void sub_101471B44(uint64_t a1)
{
  sub_10147519C(a1);
  operator delete();
}

uint64_t sub_101471B68()
{
  return 310;
}

uint64_t sub_101471B70(uint64_t a1, std::string::value_type *a2)
{
  double Current;
  NSObject *v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  clock_t v10;
  int v11;
  clock_t v12;
  clock_t v13;
  int v14;
  clock_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  char *v30;
  char *v31;
  NSObject *v32;
  int v34;
  const char *v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  __int128 v41;
  _QWORD **v42;
  void *v43[2];
  char v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50[12];
  _QWORD **v51;
  _QWORD *v52;
  uint64_t v53;
  _BYTE __p[28];
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  void **v60;
  uint8_t buf[4];
  _BYTE v62[24];
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  _BYTE *v68;

  Current = CFAbsoluteTimeGetCurrent();
  sub_100FA29E4(a1, a2);
  sub_100FA5198((uint64_t *)a1, "", a2, *(_DWORD *)(a1 + 48), 0, Current);
  sub_1014751E8((uint64_t)&v51, a1 + 368);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)v62 = v53;
    *(_WORD *)&v62[8] = 2080;
    *(_QWORD *)&v62[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    *(_DWORD *)__p = 134218242;
    *(_QWORD *)&__p[4] = v53;
    *(_WORD *)&__p[12] = 2080;
    *(_QWORD *)&__p[14] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s", __p, 22);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  v6 = a1 + 376;
  sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  v8 = v51;
  v42 = &v52;
  if (v51 != &v52)
  {
    v9 = 0;
    *(_QWORD *)&v7 = 134219266;
    v41 = v7;
    while (1)
    {
      *(_OWORD *)v50 = *(_OWORD *)((char *)v8 + 25);
      v48 = 0;
      v49 = 0;
      v47[0] = 0;
      v47[1] = 0;
      v45 = 0;
      v46 = 0;
      sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
      *(_QWORD *)(a1 + 376) = 0;
      *(_QWORD *)(a1 + 384) = 0;
      *(_QWORD *)(a1 + 368) = v6;
      v10 = clock();
      v11 = (*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t *))(*(_QWORD *)a1 + 192))(a1, v50, &v48);
      v12 = clock();
      sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
      *(_QWORD *)(a1 + 376) = 0;
      *(_QWORD *)(a1 + 384) = 0;
      *(_QWORD *)(a1 + 368) = v6;
      v13 = clock();
      v14 = (*(uint64_t (**)(uint64_t, unsigned __int16 *, _QWORD *))(*(_QWORD *)a1 + 184))(a1, v50, v47);
      v15 = clock();
      printf("tilestool: mmap, %lu, file, %lu\n", v15 - v13, v12 - v10);
      if (v11 != v14)
        break;
      v16 = (*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t *))(*(_QWORD *)a1 + 176))(a1, v50, &v48);
      if (v16)
        sub_100FA6940(a1, (unsigned __int16)v49, WORD1(v49), (double *)&v46, (double *)&v45);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
      v17 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v18 = v53;
        v19 = v45;
        v20 = v46;
        sub_100F9F224(v50, __p);
        v21 = __p;
        if (__p[23] < 0)
          v21 = *(_BYTE **)__p;
        *(_DWORD *)buf = v41;
        *(_QWORD *)v62 = v9;
        *(_WORD *)&v62[8] = 2048;
        *(_QWORD *)&v62[10] = v18;
        *(_WORD *)&v62[18] = 1024;
        *(_DWORD *)&v62[20] = v16;
        v63 = 2048;
        v64 = v20;
        v65 = 2048;
        v66 = v19;
        v67 = 2080;
        v68 = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s", buf, 0x3Au);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
        v25 = qword_1022A02D8;
        v26 = v53;
        v27 = v45;
        v28 = v46;
        sub_100F9F224(v50, v43);
        v29 = v43;
        if (v44 < 0)
          v29 = (void **)v43[0];
        *(_DWORD *)__p = v41;
        *(_QWORD *)&__p[4] = v9;
        *(_WORD *)&__p[12] = 2048;
        *(_QWORD *)&__p[14] = v26;
        *(_WORD *)&__p[22] = 1024;
        *(_DWORD *)&__p[24] = v16;
        v55 = 2048;
        v56 = v28;
        v57 = 2048;
        v58 = v27;
        v59 = 2080;
        v60 = v29;
        LODWORD(v40) = 58;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s", __p, v40, (_DWORD)v41, *((double *)&v41 + 1), *(double *)&v42, (const char *)v43[0]);
        v31 = v30;
        if (v44 < 0)
          operator delete(v43[0]);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v31);
        if (v31 != (char *)buf)
          free(v31);
      }
      if (!v16)
      {
        v34 = 759;
        v35 = "isFound";
LABEL_44:
        __assert_rtn("TEST_testBinarySearch", "CLKeyLatLonTileTemplate.h", v34, v35);
      }
      v22 = (_QWORD *)v8[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v8[2];
          v24 = *v23 == (_QWORD)v8;
          v8 = v23;
        }
        while (!v24);
      }
      ++v9;
      v8 = v23;
      if (v23 == v42)
        goto LABEL_36;
    }
    v34 = 742;
    v35 = "isFound == isFoundMmap";
    goto LABEL_44;
  }
  v9 = 0;
LABEL_36:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
  v32 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)v62 = 1;
    *(_WORD *)&v62[4] = 2048;
    *(_QWORD *)&v62[6] = v9;
    *(_WORD *)&v62[14] = 2048;
    *(_QWORD *)&v62[16] = v53;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: pass, %d, tests, %lu, %lu", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    *(_QWORD *)__p = 0x104000300;
    *(_WORD *)&__p[8] = 2048;
    *(_QWORD *)&__p[10] = v9;
    *(_WORD *)&__p[18] = 2048;
    *(_QWORD *)&__p[20] = v53;
    LODWORD(v40) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: result: tilestool: pass, %d, tests, %lu, %lu", __p, v40, (_QWORD)v41);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  sub_100008848((uint64_t)&v51, v52);
  return 1;
}

void sub_101472320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27)
{
  sub_100008848((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

void sub_101472374(uint64_t a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  void **v35;
  char *v36;
  char *v37;
  uint64_t **v38;
  _BOOL4 v39;
  int v40;
  int v41;
  unsigned int v42;
  NSObject *v43;
  unsigned int v44;
  const char *v45;
  __int128 v46;
  unint64_t v47;
  NSObject *v48;
  int v49;
  uint64_t v50;
  uint64_t **v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  int v67;
  int v68;
  char *v69;
  char *v70;
  _BOOL4 v71;
  NSObject *v72;
  _BYTE *v73;
  NSObject *v74;
  int v75;
  uint64_t v76;
  _BYTE *v77;
  char *v78;
  char *v79;
  const char *v80;
  uint8_t *v81;
  const char *v82;
  uint8_t *v83;
  uint64_t v84;
  const char *v85;
  uint64_t **v86;
  const char *v87;
  __int128 v88;
  double v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  void *v94[2];
  char v95;
  uint64_t v96;
  _BYTE v97[40];
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  _BYTE __p[20];
  void **v110;
  uint64_t v111;
  uint64_t v112;
  uint8_t buf[4];
  _BYTE v114[10];
  _BYTE v115[14];
  __int16 v116;
  _BYTE *v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  double v123;
  __int16 v124;
  double v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;

  v9 = a1;
  sub_100810AD4(a1, (uint64_t)a2, a3);
  v96 = 0;
  v10 = *(unsigned __int16 *)(a3 + 2);
  if (v10 != 7)
  {
    if (v10 == 6)
    {
      *(_QWORD *)v97 = 0x200006ABBALL;
      memset(&v97[8], 0, 32);
      LODWORD(v98) = 0;
      sub_100F9FC20(a4, (uint64_t)v97);
      v11 = (_QWORD *)(v9 + 344);
      *(_QWORD *)(v9 + 352) = *(_QWORD *)(v9 + 344);
      sub_101231100((char **)(v9 + 344), *(unsigned int *)&v97[12]);
      v12 = (char *)sub_100812460(v9, a2, a3, 0, *(int *)&v97[12], *(int *)&v97[16]);
      if (v12)
      {
        DWORD2(v93) = 0;
        *(_QWORD *)&v93 = 0;
        if (*(_DWORD *)&v97[12])
        {
          v13 = 0;
          do
          {
            sub_100F9F378((unsigned __int16 *)&v12[v13 * *(unsigned int *)&v97[16]], (uint64_t)&v93);
            v15 = *(_QWORD *)(v9 + 352);
            v14 = *(_QWORD *)(v9 + 360);
            if (v15 >= v14)
            {
              v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *v11) >> 2);
              v19 = v18 + 1;
              if (v18 + 1 > 0x1555555555555555)
                sub_100259694();
              v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v11) >> 2);
              if (2 * v20 > v19)
                v19 = 2 * v20;
              if (v20 >= 0xAAAAAAAAAAAAAAALL)
                v21 = 0x1555555555555555;
              else
                v21 = v19;
              if (v21)
                v22 = (char *)sub_100821B78(v9 + 360, v21);
              else
                v22 = 0;
              v23 = &v22[12 * v18];
              v24 = v93;
              *((_DWORD *)v23 + 2) = DWORD2(v93);
              *(_QWORD *)v23 = v24;
              v26 = *(_DWORD **)(v9 + 344);
              v25 = *(_DWORD **)(v9 + 352);
              v27 = v23;
              if (v25 != v26)
              {
                do
                {
                  v28 = *(_QWORD *)(v25 - 3);
                  v25 -= 3;
                  v29 = v25[2];
                  *(_QWORD *)(v27 - 12) = v28;
                  v27 -= 12;
                  *((_DWORD *)v27 + 2) = v29;
                }
                while (v25 != v26);
                v25 = (_DWORD *)*v11;
              }
              v17 = v23 + 12;
              *(_QWORD *)(v9 + 344) = v27;
              *(_QWORD *)(v9 + 352) = v23 + 12;
              *(_QWORD *)(v9 + 360) = &v22[12 * v21];
              if (v25)
                operator delete(v25);
            }
            else
            {
              v16 = v93;
              *(_DWORD *)(v15 + 8) = DWORD2(v93);
              *(_QWORD *)v15 = v16;
              v17 = (char *)(v15 + 12);
            }
            *(_QWORD *)(v9 + 352) = v17;
            if (!*(_BYTE *)(a5 + 9))
            {
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
              v30 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                v31 = *(_DWORD *)&v97[12];
                sub_100F9F3A8((unsigned __int16 *)&v93, __p);
                v32 = __p;
                if (SBYTE3(v110) < 0)
                  v32 = *(_BYTE **)__p;
                *(_DWORD *)buf = 134218498;
                *(_QWORD *)v114 = v13;
                *(_WORD *)&v114[8] = 1024;
                *(_DWORD *)v115 = v31;
                *(_WORD *)&v115[4] = 2080;
                *(_QWORD *)&v115[6] = v32;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TILE: index entry, %3lu, %3u, %s", buf, 0x1Cu);
                if (SBYTE3(v110) < 0)
                  operator delete(*(void **)__p);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
                v33 = qword_1022A02D8;
                v34 = *(_DWORD *)&v97[12];
                sub_100F9F3A8((unsigned __int16 *)&v93, v94);
                v35 = v94;
                if (v95 < 0)
                  v35 = (void **)v94[0];
                *(_DWORD *)__p = 134218498;
                *(_QWORD *)&__p[4] = v13;
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = v34;
                *(_WORD *)&__p[18] = 2080;
                v110 = v35;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "TILE: index entry, %3lu, %3u, %s", __p, 28, v85);
                v37 = v36;
                if (v95 < 0)
                  operator delete(v94[0]);
                sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v37);
                if (v37 != (char *)buf)
                  free(v37);
              }
            }
            ++v13;
          }
          while (v13 < *(unsigned int *)&v97[12]);
        }
      }
      goto LABEL_82;
    }
    v44 = 0;
    goto LABEL_57;
  }
  *(_DWORD *)__p = 502714;
  *(_OWORD *)&__p[4] = xmmword_101C47CA0;
  v110 = 0;
  v112 = 0;
  v111 = 0;
  sub_100F9FC20(a4, (uint64_t)__p);
  v38 = (uint64_t **)(v9 + 368);
  sub_100008848(v9 + 368, *(_QWORD **)(v9 + 376));
  *(_QWORD *)(v9 + 376) = 0;
  *(_QWORD *)(v9 + 384) = 0;
  *(_QWORD *)(v9 + 368) = v9 + 376;
  v90 = *(double *)&v9;
  if (!*(_BYTE *)(a5 + 9))
  {
    v93 = 0uLL;
    v45 = (const char *)sub_100812460(v9, a2, a3, 0, *(int *)&__p[12], *(int *)&__p[16]);
    v12 = (char *)v45;
    if (!v45)
    {
LABEL_82:
      v44 = 0;
      goto LABEL_83;
    }
    if (*(_DWORD *)&__p[12])
    {
      v47 = 0;
      *(_QWORD *)&v46 = 134220290;
      v88 = v46;
      v87 = v45;
      do
      {
        sub_100F9F1CC((unsigned __int16 *)&v12[v47 * *(unsigned int *)&__p[16]], (uint64_t)&v93);
        sub_101475EDC(v38, (unsigned __int16 *)&v93, &v93);
        v91 = 0;
        v92 = 0;
        sub_100FA6940(v9, WORD4(v93), WORD5(v93), (double *)&v92, (double *)&v91);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
        v48 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v49 = *(_DWORD *)&__p[12];
          v50 = *(_QWORD *)(v9 + 384);
          sub_100F9F224((unsigned __int16 *)&v93, v97);
          v51 = v38;
          if (v97[23] >= 0)
            v52 = v97;
          else
            v52 = *(_BYTE **)v97;
          v53 = v91;
          v54 = v92;
          v55 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
          v56 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
          v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
          v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          *(_DWORD *)buf = v88;
          *(_QWORD *)v114 = v47;
          *(_WORD *)&v114[8] = 1024;
          *(_DWORD *)v115 = v49;
          *(_WORD *)&v115[4] = 2048;
          *(_QWORD *)&v115[6] = v50;
          v116 = 2080;
          v117 = v52;
          v118 = 2048;
          v119 = v54;
          v120 = 2048;
          v121 = v53;
          v122 = 2048;
          v123 = v55;
          v124 = 2048;
          v125 = v56;
          v126 = 1024;
          v127 = v57;
          v128 = 1024;
          v129 = v58;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u", buf, 0x5Au);
          if ((v97[23] & 0x80000000) != 0)
            operator delete(*(void **)v97);
          v38 = v51;
          v12 = (char *)v87;
          *(double *)&v9 = v90;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
          v59 = qword_1022A02D8;
          v60 = *(_DWORD *)&__p[12];
          v61 = *(_QWORD *)(v9 + 384);
          sub_100F9F224((unsigned __int16 *)&v93, v94);
          v86 = v38;
          if (v95 >= 0)
            v62 = v94;
          else
            v62 = (void **)v94[0];
          v63 = v91;
          v64 = v92;
          v65 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
          v66 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
          v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
          v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          *(_DWORD *)v97 = v88;
          *(_QWORD *)&v97[4] = v47;
          *(_WORD *)&v97[12] = 1024;
          *(_DWORD *)&v97[14] = v60;
          *(_WORD *)&v97[18] = 2048;
          *(_QWORD *)&v97[20] = v61;
          *(_WORD *)&v97[28] = 2080;
          *(_QWORD *)&v97[30] = v62;
          *(_WORD *)&v97[38] = 2048;
          v98 = v64;
          v99 = 2048;
          v100 = v63;
          v101 = 2048;
          v102 = v65;
          v103 = 2048;
          v104 = v66;
          v105 = 1024;
          v106 = v67;
          v107 = 1024;
          v108 = v68;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, 2, "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u", v97, 90, v86, v87, *(double *)&v88, *((double *)&v88 + 1), v89, v90, v91, v92);
          v70 = v69;
          if (v95 < 0)
            operator delete(v94[0]);
          sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v70);
          v38 = (uint64_t **)v85;
          if (v70 != (char *)buf)
            free(v70);
        }
        ++v47;
      }
      while (v47 < *(unsigned int *)&__p[12]);
    }
LABEL_101:
    v44 = 0;
    v75 = 1;
    goto LABEL_102;
  }
  v39 = sub_1014755A0(v9, (unsigned __int16 **)(v9 + 344), (_DWORD *)&v96 + 1, &v96);
  v41 = v96;
  v40 = HIDWORD(v96);
  v42 = v96 - HIDWORD(v96) + 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
  v43 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v114 = v42;
    *(_WORD *)&v114[4] = 1024;
    *(_DWORD *)&v114[6] = v40;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "TILE: searched, numOfEntries, %u, offsetEntries, %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    *(_DWORD *)v97 = 67109376;
    *(_DWORD *)&v97[4] = v42;
    *(_WORD *)&v97[8] = 1024;
    *(_DWORD *)&v97[10] = v40;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: searched, numOfEntries, %u, offsetEntries, %d", v97, 14);
    v81 = (uint8_t *)v80;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v80);
    if (v81 != buf)
      free(v81);
  }
  if ((v41 + 1) >= *(_DWORD *)&__p[12])
    v44 = *(_DWORD *)&__p[12] - v40;
  else
    v44 = v42;
  if (!v44)
  {
LABEL_57:
    v12 = 0;
    goto LABEL_83;
  }
  if (v44 + v40 > *(_DWORD *)&__p[12])
    sub_10195559C();
  v12 = (char *)sub_100812460(v9, a2, a3, v40, v44, *(int *)&__p[16]);
  if (!v12)
    goto LABEL_82;
  *(_QWORD *)v97 = 0;
  *(_QWORD *)&v97[8] = 0;
  if (!v39)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    v74 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "TILE: avoid data search", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
      LOWORD(v94[0]) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: avoid data search", v94, v84);
      v83 = (uint8_t *)v82;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v82);
      if (v83 != buf)
        free(v83);
      v44 = 0;
      v75 = 1;
      goto LABEL_102;
    }
    goto LABEL_101;
  }
  if ((sub_101475BE0(v9, (uint64_t)v12, v44, *(int *)&__p[16], (unsigned __int16 *)(v9 + 328), v97) & 1) != 0)
  {
    sub_101475EDC(v38, (unsigned __int16 *)v97, v97);
LABEL_83:
    v71 = 1;
    goto LABEL_84;
  }
  v75 = 0;
LABEL_102:
  v71 = v75 != 0;
LABEL_84:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
  v72 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F224((unsigned __int16 *)(v9 + 328), v97);
    v73 = v97[23] >= 0 ? v97 : *(_BYTE **)v97;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)v114 = v71;
    *(_WORD *)&v114[4] = 1024;
    *(_DWORD *)&v114[6] = v44;
    *(_WORD *)v115 = 2080;
    *(_QWORD *)&v115[2] = v73;
    _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s", buf, 0x18u);
    if ((v97[23] & 0x80000000) != 0)
      operator delete(*(void **)v97);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    v76 = qword_1022A02D8;
    sub_100F9F224((unsigned __int16 *)(v9 + 328), __p);
    if (SBYTE3(v110) >= 0)
      v77 = __p;
    else
      v77 = *(_BYTE **)__p;
    *(_DWORD *)v97 = 67109634;
    *(_DWORD *)&v97[4] = v71;
    *(_WORD *)&v97[8] = 1024;
    *(_DWORD *)&v97[10] = v44;
    *(_WORD *)&v97[14] = 2080;
    *(_QWORD *)&v97[16] = v77;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v76, 2, "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s", v97, 24, v85);
    v79 = v78;
    if (SBYTE3(v110) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v79);
    if (v79 != (char *)buf)
      free(v79);
  }
  if (v12)
    free(v12);
}

void sub_10147316C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014731A4(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t **v6;
  uint64_t v7;
  _QWORD **v8;
  _BOOL8 v9;
  NSObject *v10;
  _BYTE *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  NSObject *v16;
  NSObject *v17;
  _BYTE *v18;
  int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  void **v23;
  _BYTE *v24;
  int v25;
  void **v26;
  unsigned int v27;
  unsigned int v28;
  void **v29;
  void **v30;
  char *v31;
  char *v32;
  NSObject *v33;
  const char *v34;
  _BYTE *v35;
  uint64_t v36;
  const char *v37;
  _BYTE *v38;
  char *v39;
  NSObject *v40;
  int v41;
  int v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  int v47;
  _BYTE *v48;
  _BYTE *v49;
  void **v50;
  char *v51;
  NSObject *v52;
  int v53;
  int v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  int v59;
  _BYTE *v60;
  _BYTE *v61;
  void **v62;
  char *v63;
  NSObject *v64;
  const char *v65;
  _BYTE *v66;
  uint64_t v67;
  const char *v68;
  _BYTE *v69;
  char *v70;
  NSObject *v71;
  _BYTE *v72;
  const char *v73;
  _BYTE *v74;
  uint64_t v75;
  _QWORD **v76;
  NSObject *v77;
  int v78;
  _BYTE *v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v83;
  _BYTE *v84;
  char *v85;
  char *v86;
  const char *v87;
  char *v88;
  _BOOL4 v89;
  uint64_t v90;
  int v91;
  _BYTE *v92;
  _BYTE *v93;
  void **v94;
  char *v95;
  char *v96;
  unsigned int v97;
  _BYTE *v98;
  const char *v99;
  void **v100;
  char *v101;
  uint64_t v102;
  unsigned int v103;
  const char *v104;
  const char *v105;
  unsigned int v106;
  void *v107[2];
  char v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  void *v113[2];
  char v114;
  int v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  int v123;
  int v124;
  uint64_t v125;
  void *v126[2];
  char v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[14];
  _BYTE v133[36];
  _BYTE v134[10];
  _BYTE v135[12];
  __int16 v136;
  _BYTE *v137;
  char v138;
  _BYTE buf[12];
  int v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  _BYTE __p[14];
  _BYTE v147[36];
  _QWORD v148[198];

  v6 = (uint64_t **)(a1 + 368);
  v7 = sub_1014760E8(a1 + 368, a2);
  v8 = (_QWORD **)v7;
  if (a1 + 376 != v7)
  {
    *(_OWORD *)a3 = *(_OWORD *)(v7 + 25);
    return 1;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F224(a2, __p);
    v11 = v147[9] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE:  getLocationByKey_mmap, key, %s", buf, 0xCu);
    if ((v147[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    v83 = qword_1022A02D8;
    sub_100F9F224(a2, buf);
    if ((SBYTE7(v141) & 0x80u) == 0)
      v84 = buf;
    else
      v84 = *(_BYTE **)buf;
    *(_DWORD *)v132 = 136315138;
    *(_QWORD *)&v132[4] = v84;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v83, 2, "TILE:  getLocationByKey_mmap, key, %s", v132);
    v86 = v85;
    if (SBYTE7(v141) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v86);
    if (v86 != __p)
      free(v86);
  }
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 344);
  sub_1015A2E04(v126, "");
  v128 = 0;
  v129 = -1;
  v130 = 0;
  v131 = 0;
  if ((sub_10080F1CC(a1, (uint64_t)v126) & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    v16 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe", __p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
      *(_WORD *)buf = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 16, "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe", buf, 2);
      v88 = (char *)v87;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v87);
      if (v88 != __p)
        free(v88);
    }
    v9 = 0;
    goto LABEL_179;
  }
  v106 = 0;
  v12 = 0;
  v125 = 0;
  v123 = 0;
  v124 = 43962;
  v120 = 0x200006ABBALL;
  v121 = 0u;
  v122 = 0u;
  *(_QWORD *)&buf[4] = 184;
  *(_DWORD *)buf = 371642;
  v140 = 381;
  v141 = 0u;
  v142 = 0u;
  v144 = 0;
  v143 = 0;
  v145 = 0;
  v115 = 502714;
  v116 = xmmword_101C47CA0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  while (1)
  {
    while (1)
    {
      v13 = v131;
      if (!sub_10080F354(a1, v126, &v124))
        goto LABEL_162;
      if (HIWORD(v124) == 7)
        break;
      if (HIWORD(v124) == 6)
      {
        sub_100F9FC20(v130 + v13, (uint64_t)&v120);
        v12 = (unsigned __int16 *)(v13 + v130 + v125 + 12);
        if ((unint64_t)v12 + (DWORD2(v121) * DWORD1(v121)) > v128 + v130)
        {
          if (!*(_BYTE *)(a1 + 392))
            goto LABEL_162;
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
          v52 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
          {
            v53 = DWORD1(v121);
            v104 = sub_1001CC818(*(_DWORD *)(a1 + 48));
            LODWORD(v105) = v53;
            sub_101231B40((uint64_t)buf, v132);
            v54 = v133[9];
            v55 = *(_BYTE **)v132;
            sub_100F9F224(a2, v135);
            v56 = v132;
            if (v54 < 0)
              v56 = v55;
            v57 = v135;
            if (v138 < 0)
              v57 = *(_BYTE **)v135;
            *(_DWORD *)__p = 134284803;
            *(_QWORD *)&__p[4] = v12;
            *(_WORD *)&__p[12] = 1025;
            *(_DWORD *)v147 = (_DWORD)v105;
            *(_WORD *)&v147[4] = 2049;
            *(_QWORD *)&v147[6] = v13;
            *(_WORD *)&v147[14] = 2081;
            *(_QWORD *)&v147[16] = v104;
            *(_WORD *)&v147[24] = 2081;
            *(_QWORD *)&v147[26] = v56;
            *(_WORD *)&v147[34] = 2081;
            v148[0] = v57;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{private}s, %{private}s", __p, 0x3Au);
            if (v138 < 0)
              operator delete(*(void **)v135);
            if ((v133[9] & 0x80000000) != 0)
              operator delete(*(void **)v132);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_162;
          bzero(__p, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
          v58 = qword_1022A02D8;
          LODWORD(v105) = DWORD1(v121);
          v104 = sub_1001CC818(*(_DWORD *)(a1 + 48));
          sub_101231B40((uint64_t)buf, v135);
          v59 = v138;
          v60 = *(_BYTE **)v135;
          sub_100F9F224(a2, v113);
          v61 = v135;
          if (v59 < 0)
            v61 = v60;
          v62 = v113;
          if (v114 < 0)
            v62 = (void **)v113[0];
          *(_DWORD *)v132 = 134284803;
          *(_QWORD *)&v132[4] = v12;
          *(_WORD *)&v132[12] = 1025;
          *(_DWORD *)v133 = (_DWORD)v105;
          *(_WORD *)&v133[4] = 2049;
          *(_QWORD *)&v133[6] = v13;
          *(_WORD *)&v133[14] = 2081;
          *(_QWORD *)&v133[16] = v104;
          *(_WORD *)&v133[24] = 2081;
          *(_QWORD *)&v133[26] = v61;
          *(_WORD *)&v133[34] = 2081;
          *(_QWORD *)v134 = v62;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v58, 17, "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{private}s, %{private}s", v132, 58);
          v32 = v63;
          if (v114 < 0)
            operator delete(v113[0]);
          if (v138 < 0)
            operator delete(*(void **)v135);
          goto LABEL_147;
        }
      }
      else
      {
        if (HIWORD(v124) != 5)
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
          v33 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
          {
            v34 = sub_1001CC818(*(_DWORD *)(a1 + 48));
            sub_101231B40((uint64_t)buf, v132);
            v35 = v133[9] >= 0 ? v132 : *(_BYTE **)v132;
            *(_DWORD *)__p = 134218498;
            *(_QWORD *)&__p[4] = v13;
            *(_WORD *)&__p[12] = 2080;
            *(_QWORD *)v147 = v34;
            *(_WORD *)&v147[8] = 2080;
            *(_QWORD *)&v147[10] = v35;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "TILE: unregconized sectionId, %lld, %s, %s", __p, 0x20u);
            if ((v133[9] & 0x80000000) != 0)
              operator delete(*(void **)v132);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_162;
          bzero(__p, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
          v36 = qword_1022A02D8;
          v37 = sub_1001CC818(*(_DWORD *)(a1 + 48));
          sub_101231B40((uint64_t)buf, v135);
          if (v138 >= 0)
            v38 = v135;
          else
            v38 = *(_BYTE **)v135;
          *(_DWORD *)v132 = 134218498;
          *(_QWORD *)&v132[4] = v13;
          *(_WORD *)&v132[12] = 2080;
          *(_QWORD *)v133 = v37;
          *(_WORD *)&v133[8] = 2080;
          *(_QWORD *)&v133[10] = v38;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v36, 16, "TILE: unregconized sectionId, %lld, %s, %s", v132, 32, v104);
          v32 = v39;
          if (v138 < 0)
            operator delete(*(void **)v135);
LABEL_147:
          sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v32);
          goto LABEL_221;
        }
        sub_100F9F120(v130 + v13, (uint64_t)buf);
      }
    }
    sub_100F9FC20(v130 + v13, (uint64_t)&v115);
    v14 = v13 + v130 + v125 + 12;
    if (v14 + (unint64_t)(HIDWORD(v116) * DWORD2(v116)) > v128 + v130)
    {
      if (!*(_BYTE *)(a1 + 392))
        goto LABEL_162;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
      v40 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v41 = DWORD2(v116);
        v104 = sub_1001CC818(*(_DWORD *)(a1 + 48));
        LODWORD(v105) = v41;
        sub_101231B40((uint64_t)buf, v132);
        v42 = v133[9];
        v43 = *(_BYTE **)v132;
        sub_100F9F224(a2, v135);
        v44 = v132;
        if (v42 < 0)
          v44 = v43;
        v45 = v135;
        if (v138 < 0)
          v45 = *(_BYTE **)v135;
        *(_DWORD *)__p = 134284803;
        *(_QWORD *)&__p[4] = v14;
        *(_WORD *)&__p[12] = 1025;
        *(_DWORD *)v147 = (_DWORD)v105;
        *(_WORD *)&v147[4] = 2049;
        *(_QWORD *)&v147[6] = v13;
        *(_WORD *)&v147[14] = 2081;
        *(_QWORD *)&v147[16] = v104;
        *(_WORD *)&v147[24] = 2080;
        *(_QWORD *)&v147[26] = v44;
        *(_WORD *)&v147[34] = 2081;
        v148[0] = v45;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{privat}s, %{private}s", __p, 0x3Au);
        if (v138 < 0)
          operator delete(*(void **)v135);
        if ((v133[9] & 0x80000000) != 0)
          operator delete(*(void **)v132);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_162;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
      v46 = qword_1022A02D8;
      LODWORD(v105) = DWORD2(v116);
      v104 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v135);
      v47 = v138;
      v48 = *(_BYTE **)v135;
      sub_100F9F224(a2, v113);
      v49 = v135;
      if (v47 < 0)
        v49 = v48;
      v50 = v113;
      if (v114 < 0)
        v50 = (void **)v113[0];
      *(_DWORD *)v132 = 134284803;
      *(_QWORD *)&v132[4] = v14;
      *(_WORD *)&v132[12] = 1025;
      *(_DWORD *)v133 = (_DWORD)v105;
      *(_WORD *)&v133[4] = 2049;
      *(_QWORD *)&v133[6] = v13;
      *(_WORD *)&v133[14] = 2081;
      *(_QWORD *)&v133[16] = v104;
      *(_WORD *)&v133[24] = 2080;
      *(_QWORD *)&v133[26] = v49;
      *(_WORD *)&v133[34] = 2081;
      *(_QWORD *)v134 = v50;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v46, 17, "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{privat}s, %{private}s", v132, 58);
      v32 = v51;
      if (v114 < 0)
        operator delete(v113[0]);
      if (v138 < 0)
        operator delete(*(void **)v135);
      goto LABEL_147;
    }
    sub_100008848((uint64_t)v6, *v8);
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 368) = v8;
    *v8 = 0;
    v112 = 0;
    v111 = 0;
    sub_100F9F4CC(&v111, a2);
    v109 = DWORD2(v116);
    v110 = 0;
    if (!v12)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
      v64 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
      {
        v65 = sub_1001CC818(*(_DWORD *)(a1 + 48));
        sub_101231B40((uint64_t)buf, __p);
        v66 = v147[9] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)v132 = 136380931;
        *(_QWORD *)&v132[4] = v65;
        *(_WORD *)&v132[12] = 2081;
        *(_QWORD *)v133 = v66;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "TILE: no index section before entries section, %{private}s, %{private}s", v132, 0x16u);
        if ((v147[9] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_162;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
      v67 = qword_1022A02D8;
      v68 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v132);
      if (v133[9] >= 0)
        v69 = v132;
      else
        v69 = *(_BYTE **)v132;
      *(_DWORD *)v135 = 136380931;
      *(_QWORD *)&v135[4] = v68;
      v136 = 2081;
      v137 = v69;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v67, 16, "TILE: no index section before entries section, %{private}s, %{private}s", v135, 22);
      v32 = v70;
      if ((v133[9] & 0x80000000) != 0)
        operator delete(*(void **)v132);
      goto LABEL_147;
    }
    v15 = sub_101475F5C(a1, v12, DWORD1(v121), SDWORD2(v121), (unsigned __int16 *)&v111, &v110, &v109);
    if (v110 >= DWORD2(v116) || v109 >= DWORD2(v116))
      break;
    if (!v15)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
      v71 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v104) = v110;
        LODWORD(v105) = v109;
        sub_100F9F3A8((unsigned __int16 *)&v111, v132);
        if (v133[9] >= 0)
          v72 = v132;
        else
          v72 = *(_BYTE **)v132;
        v73 = sub_1001CC818(*(_DWORD *)(a1 + 48));
        sub_101231B40((uint64_t)buf, v135);
        if (v138 >= 0)
          v74 = v135;
        else
          v74 = *(_BYTE **)v135;
        *(_DWORD *)__p = 67175683;
        *(_DWORD *)&__p[4] = (_DWORD)v104;
        *(_WORD *)&__p[8] = 1025;
        *(_DWORD *)&__p[10] = (_DWORD)v105;
        *(_WORD *)v147 = 2081;
        *(_QWORD *)&v147[2] = v72;
        *(_WORD *)&v147[10] = 2081;
        *(_QWORD *)&v147[12] = v73;
        *(_WORD *)&v147[20] = 2081;
        *(_QWORD *)&v147[22] = v74;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s", __p, 0x2Cu);
        if (v138 < 0)
          operator delete(*(void **)v135);
        if ((v133[9] & 0x80000000) != 0)
          operator delete(*(void **)v132);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_162;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
      v105 = (const char *)qword_1022A02D8;
      v97 = v110;
      LODWORD(v104) = v109;
      sub_100F9F3A8((unsigned __int16 *)&v111, v135);
      if (v138 >= 0)
        v98 = v135;
      else
        v98 = *(_BYTE **)v135;
      v99 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v113);
      if (v114 >= 0)
        v100 = v113;
      else
        v100 = (void **)v113[0];
      *(_DWORD *)v132 = 67175683;
      *(_DWORD *)&v132[4] = v97;
      *(_WORD *)&v132[8] = 1025;
      *(_DWORD *)&v132[10] = (_DWORD)v104;
      *(_WORD *)v133 = 2081;
      *(_QWORD *)&v133[2] = v98;
      *(_WORD *)&v133[10] = 2081;
      *(_QWORD *)&v133[12] = v99;
      *(_WORD *)&v133[20] = 2081;
      *(_QWORD *)&v133[22] = v100;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v105, 2, "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s", v132, 44);
      v32 = v101;
      if (v114 < 0)
        operator delete(v113[0]);
      if (v138 < 0)
        operator delete(*(void **)v135);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v32);
LABEL_221:
      if (v32 != __p)
        free(v32);
      goto LABEL_162;
    }
    v106 = v109 - v110 + 1;
    if (!sub_101475BE0(a1, v14 + HIDWORD(v116) * v110, v106, SHIDWORD(v116), a2, a3))
      goto LABEL_162;
    sub_101475EDC(v6, a3, a3);
  }
  if (*(_BYTE *)(a1 + 392))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    v17 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v18 = v132;
      sub_100F9F3A8((unsigned __int16 *)&v111, v132);
      if (v133[9] < 0)
        v18 = *(_BYTE **)v132;
      v105 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v135);
      v19 = v138;
      v20 = *(_BYTE **)v135;
      v21 = v110;
      v103 = v109;
      LODWORD(v104) = DWORD2(v116);
      sub_100F9F224(a2, v113);
      v22 = v135;
      if (v19 < 0)
        v22 = v20;
      v23 = v113;
      if (v114 < 0)
        v23 = (void **)v113[0];
      *(_DWORD *)__p = 136382211;
      *(_QWORD *)&__p[4] = v18;
      *(_WORD *)&__p[12] = 2081;
      *(_QWORD *)v147 = v105;
      *(_WORD *)&v147[8] = 2081;
      *(_QWORD *)&v147[10] = v22;
      *(_WORD *)&v147[18] = 1025;
      *(_DWORD *)&v147[20] = v21;
      *(_WORD *)&v147[24] = 1025;
      *(_DWORD *)&v147[26] = v103;
      *(_WORD *)&v147[30] = 1025;
      *(_DWORD *)&v147[32] = (_DWORD)v104;
      LOWORD(v148[0]) = 2081;
      *(_QWORD *)((char *)v148 + 2) = v23;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s", __p, 0x3Cu);
      if (v114 < 0)
        operator delete(v113[0]);
      if (v138 < 0)
        operator delete(*(void **)v135);
      if ((v133[9] & 0x80000000) != 0)
        operator delete(*(void **)v132);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
      v105 = (const char *)qword_1022A02D8;
      v24 = v135;
      sub_100F9F3A8((unsigned __int16 *)&v111, v135);
      if (v138 < 0)
        v24 = *(_BYTE **)v135;
      v104 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v113);
      v25 = v114;
      v26 = (void **)v113[0];
      v27 = v109;
      v28 = v110;
      HIDWORD(v102) = DWORD2(v116);
      sub_100F9F224(a2, v107);
      v29 = v113;
      if (v25 < 0)
        v29 = v26;
      v30 = v107;
      if (v108 < 0)
        v30 = (void **)v107[0];
      *(_DWORD *)v132 = 136382211;
      *(_QWORD *)&v132[4] = v24;
      *(_WORD *)&v132[12] = 2081;
      *(_QWORD *)v133 = v104;
      *(_WORD *)&v133[8] = 2081;
      *(_QWORD *)&v133[10] = v29;
      *(_WORD *)&v133[18] = 1025;
      *(_DWORD *)&v133[20] = v28;
      *(_WORD *)&v133[24] = 1025;
      *(_DWORD *)&v133[26] = v27;
      *(_WORD *)&v133[30] = 1025;
      *(_DWORD *)&v133[32] = HIDWORD(v102);
      *(_WORD *)v134 = 2081;
      *(_QWORD *)&v134[2] = v30;
      LODWORD(v102) = 60;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v105, 17, "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s", v132, v102);
      v32 = v31;
      if (v108 < 0)
        operator delete(v107[0]);
      if (v114 < 0)
        operator delete(v113[0]);
      if (v138 < 0)
        operator delete(*(void **)v135);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v32);
      goto LABEL_221;
    }
  }
LABEL_162:
  v75 = sub_1014760E8((uint64_t)v6, a2);
  v76 = (_QWORD **)v75;
  v9 = v8 != (_QWORD **)v75;
  if (v8 != (_QWORD **)v75)
    *(_OWORD *)a3 = *(_OWORD *)(v75 + 25);
  if (v130)
    sub_10080F2AC(a1, (uint64_t)v126);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
  v77 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F224(a2, v132);
    v78 = v133[9];
    v79 = *(_BYTE **)v132;
    sub_100F9F224(a3, v135);
    v80 = v132;
    if (v78 < 0)
      v80 = v79;
    if (v138 >= 0)
      v81 = v135;
    else
      v81 = *(_BYTE **)v135;
    *(_DWORD *)__p = 67109890;
    *(_DWORD *)&__p[4] = v8 != v76;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v106;
    *(_WORD *)v147 = 2080;
    *(_QWORD *)&v147[2] = v80;
    *(_WORD *)&v147[10] = 2080;
    *(_QWORD *)&v147[12] = v81;
    _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "TILE: isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v138 < 0)
      operator delete(*(void **)v135);
    if ((v133[9] & 0x80000000) != 0)
      operator delete(*(void **)v132);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    v89 = v8 != v76;
    v90 = qword_1022A02D8;
    sub_100F9F224(a2, v135);
    v91 = v138;
    v92 = *(_BYTE **)v135;
    sub_100F9F224(a3, v113);
    v93 = v135;
    if (v91 < 0)
      v93 = v92;
    if (v114 >= 0)
      v94 = v113;
    else
      v94 = (void **)v113[0];
    *(_DWORD *)v132 = 67109890;
    *(_DWORD *)&v132[4] = v89;
    *(_WORD *)&v132[8] = 1024;
    *(_DWORD *)&v132[10] = v106;
    *(_WORD *)v133 = 2080;
    *(_QWORD *)&v133[2] = v93;
    *(_WORD *)&v133[10] = 2080;
    *(_QWORD *)&v133[12] = v94;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v90, 2, "TILE: isFound, %d, searchedArea, %u, key, %s, entry, %s", v132, 34, v104, v105);
    v96 = v95;
    if (v114 < 0)
      operator delete(v113[0]);
    if (v138 < 0)
      operator delete(*(void **)v135);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v96);
    if (v96 != __p)
      free(v96);
  }
LABEL_179:
  if (v127 < 0)
    operator delete(v126[0]);
  return v9;
}

void sub_101474944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_101474A8C(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  NSObject *v6;
  _BYTE *v7;
  const char **v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  void **v19;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  void **v27;
  void **v28;
  void **v29;
  char *v30;
  char *v31;
  const char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  const char *v40;
  char v41;
  char v42;
  uint64_t v43;
  _BYTE buf[14];
  __int16 v45;
  void **v46;
  __int16 v47;
  void **v48;
  std::string v49;
  _BYTE __p[14];
  __int16 v51;
  _BYTE *v52;
  __int16 v53;
  void **v54;

  *(_OWORD *)(a1 + 328) = *(_OWORD *)a2;
  v41 = 0;
  v43 = nullsub_34(0);
  v40 = "search";
  v42 = 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F224(a2, __p);
    v7 = SHIBYTE(v52) >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, key, %s", buf, 0xCu);
    if (SHIBYTE(v52) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    v21 = qword_1022A02D8;
    sub_100F9F224(a2, buf);
    if (SHIBYTE(v46) >= 0)
      v22 = buf;
    else
      v22 = *(_BYTE **)buf;
    LODWORD(v49.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v21, 2, "TILE: getLocationByKey_traverse, key, %s", (const char *)&v49);
    v24 = v23;
    if (SHIBYTE(v46) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v24);
    if (v24 != __p)
      free(v24);
  }
  sub_100FA2C30(a1, &v49);
  v8 = (const char **)(a1 + 8);
  v9 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v9 = *v8;
  if (sub_1000B78B0(v9))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v11 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = *v8;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
      v32 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v32 = *v8;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v32;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s", buf);
      v34 = (char *)v33;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v33);
      if (v34 != __p)
        free(v34);
    }
    std::string::operator=(&v49, (const std::string *)(a1 + 8));
  }
  sub_100FA43A0((_QWORD *)a1, (uint64_t)&v49, (uint64_t)&v40);
  v12 = sub_1014760E8(a1 + 368, a2);
  v13 = v12;
  v14 = a1 + 376;
  if (a1 + 376 != v12)
    *(_OWORD *)a3 = *(_OWORD *)(v12 + 25);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
  v15 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F224(a2, buf);
    v16 = SHIBYTE(v46);
    v17 = *(_BYTE **)buf;
    sub_100F9F224(a3, v38);
    v18 = buf;
    if (v16 < 0)
      v18 = v17;
    if (v39 >= 0)
      v19 = v38;
    else
      v19 = (void **)v38[0];
    *(_DWORD *)__p = 67109890;
    *(_DWORD *)&__p[4] = v14 != v13;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = 0;
    v51 = 2080;
    v52 = v18;
    v53 = 2080;
    v54 = v19;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v39 < 0)
      operator delete(v38[0]);
    if (SHIBYTE(v46) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    v25 = qword_1022A02D8;
    sub_100F9F224(a2, v38);
    v26 = v39;
    v27 = (void **)v38[0];
    sub_100F9F224(a3, v36);
    v28 = v38;
    if (v26 < 0)
      v28 = v27;
    if (v37 >= 0)
      v29 = v36;
    else
      v29 = (void **)v36[0];
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v14 != v13;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = 0;
    v45 = 2080;
    v46 = v28;
    v47 = 2080;
    v48 = v29;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v25, 2, "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s", buf, 34, v35, (const char *)v36[0]);
    v31 = v30;
    if (v37 < 0)
      operator delete(v36[0]);
    if (v39 < 0)
      operator delete(v38[0]);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v31);
    if (v31 != __p)
      free(v31);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  return v14 != v13;
}

void sub_101475134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10147519C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1021B7C88;
  sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  return sub_100FA05F0(a1);
}

uint64_t sub_1014751E8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_10147523C((char *)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_101475224(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_10147523C(char *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)(result + 8);
    do
    {
      result = sub_1014752C0(v5, v6, (unsigned __int16 *)((char *)v4 + 25), (_QWORD *)((char *)v4 + 25));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

char *sub_1014752C0(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _OWORD *a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t *v10;
  uint64_t *v11;

  v6 = sub_101475344(a1, a2, &v11, &v10, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 25) = *a4;
    sub_1000145B0(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_101475344(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned __int16 *a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;

  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_14;
  v5 = *a5;
  v6 = *(unsigned __int16 *)((char *)a2 + 25);
  if (v5 == v6)
  {
    v7 = a5[1];
    v8 = *(unsigned __int16 *)((char *)a2 + 27);
    if (v7 == v8)
    {
      v9 = *((_DWORD *)a5 + 1);
      v10 = *(_DWORD *)((char *)a2 + 29);
      if (v9 >= v10)
      {
        if (v10 >= v9)
          goto LABEL_31;
LABEL_9:
        v11 = a2[1];
        if (v11)
        {
          v12 = (uint64_t *)a2[1];
          do
          {
            a4 = (uint64_t **)v12;
            v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          v23 = a2;
          do
          {
            a4 = (uint64_t **)v23[2];
            v17 = *a4 == v23;
            v23 = (uint64_t *)a4;
          }
          while (!v17);
        }
        if (a4 != a1 + 1)
        {
          v24 = *(unsigned __int16 *)((char *)a4 + 25);
          v25 = v5 >= v24;
          if (v5 == v24 && (v26 = a5[1], v27 = *(unsigned __int16 *)((char *)a4 + 27), v25 = v26 >= v27, v26 == v27))
          {
            if (*((_DWORD *)a5 + 1) >= *(_DWORD *)((char *)a4 + 29))
              return sub_1014754E4((uint64_t)a1, a3, a5);
          }
          else if (v25)
          {
            return sub_1014754E4((uint64_t)a1, a3, a5);
          }
        }
        if (v11)
        {
          *a3 = (uint64_t *)a4;
        }
        else
        {
          *a3 = a2;
          return a2 + 1;
        }
        return (uint64_t *)a4;
      }
LABEL_14:
      v13 = (uint64_t *)*a2;
      if (*a1 == a2)
      {
        v15 = a2;
      }
      else
      {
        if (v13)
        {
          v14 = (uint64_t *)*a2;
          do
          {
            v15 = v14;
            v14 = (uint64_t *)v14[1];
          }
          while (v14);
        }
        else
        {
          v16 = a2;
          do
          {
            v15 = (uint64_t *)v16[2];
            v17 = *v15 == (_QWORD)v16;
            v16 = v15;
          }
          while (v17);
        }
        v18 = *(unsigned __int16 *)((char *)v15 + 25);
        v19 = *a5;
        v20 = v18 >= v19;
        if (v18 == v19 && (v21 = *(unsigned __int16 *)((char *)v15 + 27), v22 = a5[1], v20 = v21 >= v22, v21 == v22))
        {
          if (*(_DWORD *)((char *)v15 + 29) >= *((_DWORD *)a5 + 1))
            return sub_1014754E4((uint64_t)a1, a3, a5);
        }
        else if (v20)
        {
          return sub_1014754E4((uint64_t)a1, a3, a5);
        }
      }
      if (v13)
      {
        *a3 = v15;
        return v15 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7 < v8)
      goto LABEL_14;
    if (v8 < v7)
      goto LABEL_9;
  }
  else
  {
    if (v5 < v6)
      goto LABEL_14;
    if (v6 < v5)
      goto LABEL_9;
  }
LABEL_31:
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t *sub_1014754E4(uint64_t a1, _QWORD *a2, unsigned __int16 *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    v8 = *((_DWORD *)a3 + 1);
    while (1)
    {
      while (1)
      {
        v9 = v4;
        v10 = *(unsigned __int16 *)((char *)v4 + 25);
        if (v6 == v10)
          break;
        if (v6 >= v10)
        {
          if (v10 >= v6)
            goto LABEL_18;
          goto LABEL_15;
        }
LABEL_12:
        v4 = (uint64_t *)*v9;
        result = v9;
        if (!*v9)
          goto LABEL_18;
      }
      v11 = *(unsigned __int16 *)((char *)v9 + 27);
      if (v7 != v11)
      {
        if (v7 >= v11)
        {
          if (v11 >= v7)
            goto LABEL_18;
          goto LABEL_15;
        }
        goto LABEL_12;
      }
      v12 = *(_DWORD *)((char *)v9 + 29);
      if (v8 < v12)
        goto LABEL_12;
      if (v12 >= v8)
        goto LABEL_18;
LABEL_15:
      result = v9 + 1;
      v4 = (uint64_t *)v9[1];
      if (!v4)
        goto LABEL_18;
    }
  }
  v9 = result;
LABEL_18:
  *a2 = v9;
  return result;
}

void sub_101475574(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_1014755A0(uint64_t a1, unsigned __int16 **a2, _DWORD *a3, _DWORD *a4)
{
  NSObject *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  _BYTE *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  NSObject *v20;
  _BYTE *v21;
  _BOOL8 result;
  NSObject *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  _BYTE *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _BYTE *v36;
  char *v37;
  char *v38;
  const char *v39;
  char *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  _BYTE v44[12];
  char v45;
  _BYTE __p[12];
  __int16 v47;
  _BYTE *v48;
  __int16 v49;
  int v50;
  _BYTE buf[12];
  __int16 v52;
  _BYTE *v53;
  __int16 v54;
  int v55;

  v43 = 0;
  v42 = 0;
  sub_100F9F4CC(&v42, (_DWORD *)(a1 + 328));
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a2;
    v8 = a2[1];
    sub_100F9F3A8((unsigned __int16 *)&v42, __p);
    if (v49 >= 0)
      v10 = __p;
    else
      v10 = *(_BYTE **)__p;
    v11 = *a2;
    v12 = **a2;
    v13 = (unsigned __int16)v42 >= v12;
    if ((unsigned __int16)v42 == v12)
    {
      v14 = v11[1];
      v13 = WORD1(v42) >= v14;
      if (WORD1(v42) == v14)
        v13 = HIDWORD(v42) >= *((_DWORD *)v11 + 1);
    }
    v15 = !v13;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v9) >> 2);
    v52 = 2080;
    v53 = v10;
    v54 = 1024;
    v55 = v15;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d", buf, 0x1Cu);
    if (SHIBYTE(v49) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    v24 = qword_1022A02D8;
    v26 = *a2;
    v25 = a2[1];
    sub_100F9F3A8((unsigned __int16 *)&v42, v44);
    if (v45 >= 0)
      v27 = v44;
    else
      v27 = *(_BYTE **)v44;
    v28 = *a2;
    v29 = **a2;
    v30 = (unsigned __int16)v42 >= v29;
    if ((unsigned __int16)v42 == v29)
    {
      v31 = v28[1];
      v30 = WORD1(v42) >= v31;
      if (WORD1(v42) == v31)
        v30 = HIDWORD(v42) >= *((_DWORD *)v28 + 1);
    }
    v32 = !v30;
    *(_DWORD *)__p = 134218498;
    *(_QWORD *)&__p[4] = 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v26) >> 2);
    v47 = 2080;
    v48 = v27;
    v49 = 1024;
    v50 = v32;
    LODWORD(v41) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 2, "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d", __p, v41, v42);
    v34 = v33;
    if (v45 < 0)
      operator delete(*(void **)v44);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v34);
    if (v34 != buf)
      free(v34);
  }
  *a4 = 0;
  *a3 = 0;
  v16 = *a2;
  v17 = a2[1];
  __p[0] = 0;
  v18 = sub_101475E68(v16, v17, (unsigned __int16 *)&v42);
  v19 = v18;
  if (*a2 == v18)
  {
    *a3 = *((_DWORD *)v18 + 2);
    *a4 = *((_DWORD *)v18 + 2) + 1;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    v20 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      sub_100F9F3A8(v19, buf);
      v21 = v54 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: index search, match, %s", __p, 0xCu);
      if (SHIBYTE(v54) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
      v35 = qword_1022A02D8;
      sub_100F9F3A8(v19, __p);
      if (v49 >= 0)
        v36 = __p;
      else
        v36 = *(_BYTE **)__p;
      *(_DWORD *)v44 = 136315138;
      *(_QWORD *)&v44[4] = v36;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 2, "TILE: index search, match, %s", v44);
      v38 = v37;
      if (SHIBYTE(v49) < 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v38);
      if (v38 != buf)
        free(v38);
    }
    return 1;
  }
  if (a2[1] != v18)
  {
    *a3 = *((_DWORD *)v18 - 1);
    *a4 = *((_DWORD *)v18 + 2);
    return 1;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
  v23 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "TILE: index search, not found", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    *(_WORD *)__p = 0;
    LODWORD(v41) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: index search, not found", __p, v41);
    v40 = (char *)v39;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v39);
    if (v40 != buf)
      free(v40);
    return 0;
  }
  return result;
}

uint64_t sub_101475BE0(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned __int16 *a5, _OWORD *a6)
{
  unsigned int v9;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  _BOOL4 v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  const char *v24;
  uint8_t *v25;
  _DWORD v26[2];
  __int16 v27;
  int v28;
  uint8_t buf[16];

  if (!a3)
  {
    v21 = 0;
    v13 = 0;
    goto LABEL_20;
  }
  v9 = a3;
  v11 = 0;
  v12 = 1;
  while (1)
  {
    v13 = v12;
    memset(buf, 0, sizeof(buf));
    sub_100F9F1CC((unsigned __int16 *)((v11 + (v9 >> 1)) * a4 + a2), (uint64_t)buf);
    v14 = *a5;
    v15 = *(unsigned __int16 *)buf >= v14;
    if (*(unsigned __int16 *)buf == v14)
    {
      v16 = a5[1];
      v15 = *(unsigned __int16 *)&buf[2] >= v16;
      if (*(unsigned __int16 *)&buf[2] == v16)
        break;
    }
    v18 = !v15;
LABEL_10:
    v19 = !v18;
    if (v18)
      v20 = (v9 >> 1) + 1;
    else
      v20 = 0;
    v11 += v20;
    if (v19)
      v9 >>= 1;
    else
      v9 -= (v9 >> 1) + 1;
    v12 = v13 + 1;
    if (!v9)
    {
      v21 = 0;
      goto LABEL_20;
    }
  }
  v17 = *((_DWORD *)a5 + 1);
  if (*(_DWORD *)&buf[4] != v17)
  {
    v18 = *(_DWORD *)&buf[4] < v17;
    goto LABEL_10;
  }
  *a6 = *(_OWORD *)buf;
  v21 = 1;
LABEL_20:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
  v22 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v21;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7D50);
    v26[0] = 67109376;
    v26[1] = v21;
    v27 = 1024;
    v28 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u", v26, 14);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  return v21;
}

unsigned __int16 *sub_101475E68(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;

  if (a2 != result)
  {
    v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)result) >> 2);
    v4 = *a3;
    v5 = a3[1];
    do
    {
      v6 = v3 >> 1;
      v7 = &result[6 * (v3 >> 1)];
      v8 = *v7;
      v9 = v8 >= v4;
      if (v8 == v4)
      {
        v10 = result[6 * v6 + 1];
        v9 = v10 >= v5;
        if (v10 == v5)
          v9 = *(_DWORD *)&result[6 * v6 + 2] >= *((_DWORD *)a3 + 1);
      }
      if (!v9)
      {
        result = v7 + 6;
        v6 = v3 + ~v6;
      }
      v3 = v6;
    }
    while (v6);
  }
  return result;
}

char *sub_101475EDC(uint64_t **a1, unsigned __int16 *a2, _OWORD *a3)
{
  uint64_t *v5;
  char *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = sub_1014754E4((uint64_t)a1, &v9, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 25) = *a3;
    sub_1000145B0(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

BOOL sub_101475F5C(uint64_t a1, unsigned __int16 *a2, unsigned int a3, int a4, unsigned __int16 *a5, _DWORD *a6, _DWORD *a7)
{
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  BOOL v22;
  int v23;
  uint64_t v25;
  int v26;

  v26 = 0;
  v25 = 0;
  if (!a3)
    goto LABEL_22;
  v13 = 0;
  v14 = a3;
  do
  {
    sub_100F9F378((unsigned __int16 *)((char *)a2 + (v13 + (v14 >> 1)) * a4), (uint64_t)&v25);
    v15 = *a5;
    v16 = (unsigned __int16)v25 >= v15;
    if ((unsigned __int16)v25 == v15)
    {
      v17 = a5[1];
      v16 = WORD1(v25) >= v17;
      if (WORD1(v25) == v17)
        v16 = HIDWORD(v25) >= *((_DWORD *)a5 + 1);
    }
    v18 = !v16;
    v19 = v14 >> 1;
    if (v18)
      v14 -= (v14 >> 1) + 1;
    else
      v14 >>= 1;
    if (v18)
      v20 = v19 + 1;
    else
      v20 = 0;
    v13 += v20;
  }
  while (v14);
  if (v13)
    v21 = v13 >= a3;
  else
    v21 = 1;
  if (!v21)
  {
    sub_100F9F378((unsigned __int16 *)((char *)a2 + v13 * a4), (uint64_t)&v25);
    *a7 = v26;
    sub_100F9F378((unsigned __int16 *)((char *)a2 + (v13 - 1) * a4), (uint64_t)&v25);
    v22 = 1;
    v23 = v26;
    goto LABEL_29;
  }
  if (v13)
  {
LABEL_22:
    v23 = 0;
    v22 = 0;
    *a7 = 0;
    goto LABEL_29;
  }
  sub_100F9F378(a2, (uint64_t)&v25);
  if (__PAIR64__(WORD1(v25), (unsigned __int16)v25) == __PAIR64__(a5[1], *a5))
  {
    v22 = HIDWORD(v25) == *((_DWORD *)a5 + 1);
    if (HIDWORD(v25) == *((_DWORD *)a5 + 1))
      v23 = v26;
    else
      v23 = 0;
  }
  else
  {
    v22 = 0;
    v23 = 0;
  }
  *a7 = v23;
LABEL_29:
  *a6 = v23;
  return v22;
}

uint64_t sub_1014760E8(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;

  v3 = a1 + 8;
  result = sub_101476158(a1, a2, *(_QWORD *)(a1 + 8), a1 + 8);
  if (v3 == result)
    return v3;
  v5 = *a2;
  v6 = *(unsigned __int16 *)(result + 25);
  v7 = v5 >= v6;
  if (v5 != v6 || (v8 = a2[1], v9 = *(unsigned __int16 *)(result + 27), v7 = v8 >= v9, v8 != v9))
  {
    if (v7)
      return result;
    return v3;
  }
  if (*((_DWORD *)a2 + 1) < *(_DWORD *)(result + 29))
    return v3;
  return result;
}

uint64_t sub_101476158(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  _BOOL4 v10;
  BOOL v11;
  uint64_t *v12;

  result = a4;
  if (a3)
  {
    v5 = *a2;
    v6 = a2[1];
    do
    {
      v7 = *(unsigned __int16 *)(a3 + 25);
      v8 = v7 >= v5;
      if (v7 == v5 && (v9 = *(unsigned __int16 *)(a3 + 27), v8 = v9 >= v6, v9 == v6))
        v10 = *(_DWORD *)(a3 + 29) < *((_DWORD *)a2 + 1);
      else
        v10 = !v8;
      v11 = !v10;
      if (v10)
        v12 = (uint64_t *)(a3 + 8);
      else
        v12 = (uint64_t *)a3;
      if (v11)
        result = a3;
      a3 = *v12;
    }
    while (*v12);
  }
  return result;
}

void sub_1014761B4()
{
  operator new();
}

void sub_101476204()
{
  operator delete();
}

double sub_101476228(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  double result;

  v2 = sub_1007AE840(a1, a2);
  *v2 = off_1021B7D80;
  *(_QWORD *)&result = 0x1500000029;
  v2[1738] = 0x1500000029;
  v2[1739] = &unk_101CA5038;
  return result;
}

void sub_101476260(uint64_t a1, int a2, int a3)
{
  int v4;
  uint64_t v5;
  int64_t v6;
  int v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2 - 2 * a3;
  v5 = *(_QWORD *)(a1 + 2104);
  if (v4 < *(unsigned __int16 *)(v5 + 30))
  {
    v6 = v4;
    v7 = a2 - 2 * a3 - 40;
    do
    {
      v8 = *(float *)sub_1004784C4((unsigned __int16 *)(v5 + 28), v6);
      v9 = *(float *)sub_1004784C4((unsigned __int16 *)(*(_QWORD *)(a1 + 2104) + 1076), v6);
      v10 = (float *)sub_1004784C4((unsigned __int16 *)(*(_QWORD *)(a1 + 2104) + 2124), v6);
      if (v6 < 40)
      {
        v11 = *v10;
        if ((v6 & 1) == 0)
        {
LABEL_7:
          v12 = *(unsigned __int16 *)(a1 + 2142);
          v13 = *(unsigned int *)(a1 + 2144);
          v14 = *(unsigned __int16 *)(a1 + 2140);
          if (v14 + v12 >= v13)
            v15 = *(unsigned int *)(a1 + 2144);
          else
            v15 = 0;
          *(float *)(a1 + 2148 + 4 * (v14 + v12 - v15)) = v8;
          if (v13 <= v12)
          {
            if (v14 + 1 < v13)
              LOWORD(v13) = 0;
            *(_WORD *)(a1 + 2140) = v14 + 1 - v13;
          }
          else
          {
            *(_WORD *)(a1 + 2142) = v12 + 1;
          }
          *(_BYTE *)(a1 + 2124) = 1;
          v16 = *(unsigned __int16 *)(a1 + 3190);
          v17 = *(unsigned int *)(a1 + 3192);
          v18 = *(unsigned __int16 *)(a1 + 3188);
          if (v18 + v16 >= v17)
            v19 = *(unsigned int *)(a1 + 3192);
          else
            v19 = 0;
          *(float *)(a1 + 3196 + 4 * (v18 + v16 - v19)) = v9;
          if (v17 <= v16)
          {
            if (v18 + 1 < v17)
              LOWORD(v17) = 0;
            *(_WORD *)(a1 + 3188) = v18 + 1 - v17;
          }
          else
          {
            *(_WORD *)(a1 + 3190) = v16 + 1;
          }
          *(_BYTE *)(a1 + 3172) = 1;
          v20 = *(unsigned __int16 *)(a1 + 4238);
          v21 = *(unsigned int *)(a1 + 4240);
          v22 = *(unsigned __int16 *)(a1 + 4236);
          if (v22 + v20 >= v21)
            v23 = *(unsigned int *)(a1 + 4240);
          else
            v23 = 0;
          *(float *)(a1 + 4244 + 4 * (v22 + v20 - v23)) = v11;
          if (v21 <= v20)
          {
            if (v22 + 1 < v21)
              LOWORD(v21) = 0;
            *(_WORD *)(a1 + 4236) = v22 + 1 - v21;
          }
          else
          {
            *(_WORD *)(a1 + 4238) = v20 + 1;
          }
          *(_BYTE *)(a1 + 4220) = 1;
        }
      }
      else
      {
        v8 = sub_101476480(a1 + 13904, (unsigned __int16 *)(*(_QWORD *)(a1 + 2104) + 28), v7);
        v9 = sub_101476480(a1 + 13904, (unsigned __int16 *)(*(_QWORD *)(a1 + 2104) + 1076), v7);
        v11 = sub_101476480(a1 + 13904, (unsigned __int16 *)(*(_QWORD *)(a1 + 2104) + 2124), v7);
        if ((v6 & 1) == 0)
          goto LABEL_7;
      }
      ++v6;
      v5 = *(_QWORD *)(a1 + 2104);
      ++v7;
    }
    while (v6 < *(unsigned __int16 *)(v5 + 30));
  }
  *(_QWORD *)(a1 + 2112) = *(_QWORD *)v5;
}

float sub_101476480(uint64_t a1, unsigned __int16 *a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  float v9;
  int v10;
  float v11;
  float *v12;
  int v13;
  int v14;
  int v15;
  NSObject *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  size_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;

  if (a3 < 0 || a2[1] <= (unint64_t)(a3 + *(_DWORD *)a1 - 1))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7DF8);
    v17 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v18 = *(_DWORD *)a1;
      v19 = a2[1];
      *(_DWORD *)buf = 67109632;
      v30 = a3;
      v31 = 1024;
      v32 = v18;
      v33 = 2048;
      v34 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Assertion failed: (offset >= 0) && (offset + fFullTapCount - 1 < samples.size()), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMSymmetricFirFilter.h, line 37,offset,%d,fullTapCount,%d,samplesSize,%zu.", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7DF8);
      v20 = *(_DWORD *)a1;
      v21 = a2[1];
      LODWORD(v24) = 67109632;
      HIDWORD(v24) = a3;
      v25 = 1024;
      v26 = v20;
      v27 = 2048;
      v28 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: (offset >= 0) && (offset + fFullTapCount - 1 < samples.size()), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMSymmetricFirFilter.h, line 37,offset,%d,fullTapCount,%d,samplesSize,%zu.", &v24, 24, v24);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "SampleType CMSymmetricFirFilter<float>::batchFilter(const CMQueue<SampleType> &, int) const [T = float, SampleType = float]", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  v6 = *(_DWORD *)a1;
  if (*(int *)a1 >= 0)
    v7 = *(_DWORD *)a1;
  else
    v7 = v6 + 1;
  if (v6 < 2)
  {
    v15 = v7 >> 1;
    v9 = 0.0;
    if ((v6 & 1) == 0)
      return v9;
    return v9 + (float)(*(float *)sub_1004784C4(a2, v15 + a3) * **(float **)(a1 + 8));
  }
  v8 = 0;
  v9 = 0.0;
  v10 = -1;
  do
  {
    v11 = *(float *)sub_1004784C4(a2, a3 + v8);
    v12 = (float *)sub_1004784C4(a2, a3 + v10 + *(_DWORD *)a1);
    v13 = *(_DWORD *)a1;
    v9 = v9 + (float)((float)(v11 + *v12) * *(float *)(*(_QWORD *)(a1 + 8) + 4 * (v10 + *(_DWORD *)(a1 + 4))));
    ++v8;
    if (*(int *)a1 >= 0)
      v14 = *(_DWORD *)a1;
    else
      v14 = v13 + 1;
    v15 = v14 >> 1;
    --v10;
  }
  while (v8 < v15);
  if ((v13 & 1) != 0)
    return v9 + (float)(*(float *)sub_1004784C4(a2, v15 + a3) * **(float **)(a1 + 8));
  return v9;
}

void sub_101476758(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned __int16 v5[516];

  *(_QWORD *)v5 = 0x10000000000;
  sub_1014767EC((uint64_t)v5, a2 + 16);
  sub_10055E700(v5);
  sub_1014022DC(a1 + 8432, a3, v5);
}

void sub_1014767EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _DWORD *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  *(_DWORD *)a1 = 0;
  if (*(_DWORD *)(a2 + 4) != *(_DWORD *)(a1 + 4))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7DF8);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v7 = *(unsigned int *)(a1 + 4);
      v8 = *(unsigned int *)(a2 + 4);
      *(_DWORD *)buf = 134218240;
      v18 = v7;
      v19 = 2048;
      v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Assertion failed: rhs.capacity() == capacity(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 70,capacity,%zu,%zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7DF8);
      v9 = *(unsigned int *)(a1 + 4);
      v10 = *(unsigned int *)(a2 + 4);
      v13 = 134218240;
      v14 = v9;
      v15 = 2048;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: rhs.capacity() == capacity(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 70,capacity,%zu,%zu.", (size_t)&v13, 22);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CMQueue<float>::deepCopy(const CMQueue<T> &) [T = float]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  if (*(_WORD *)(a2 + 2))
  {
    v4 = 0;
    do
    {
      v5 = (_DWORD *)sub_1004784C4((unsigned __int16 *)a2, v4);
      sub_10087DBE8((unsigned __int16 *)a1, v5);
      ++v4;
    }
    while (v4 < *(unsigned __int16 *)(a2 + 2));
  }
}

void sub_101476A08(_QWORD *a1)
{
  *a1 = off_102153490;
  operator delete();
}

void sub_101476A2C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

_QWORD *sub_101476A58(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = off_102184AD0;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

_QWORD *sub_101476A8C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  int v3;

  v3 = 9;
  result = (_QWORD *)sub_10080E4E4(a1, &v3, qword_10230F1E0, a2);
  result[41] = result + 41;
  result[42] = result + 41;
  result[43] = 0;
  result[44] = result + 44;
  result[45] = result + 44;
  result[46] = 0;
  *result = off_1021B7E28;
  return result;
}

void sub_101476AE8(_QWORD *a1)
{
  sub_10147ACF4(a1);
  operator delete();
}

uint64_t sub_101476B0C()
{
  return 380;
}

double sub_101476B14()
{
  return 0.5;
}

uint64_t sub_101476B1C()
{
  return 1000;
}

uint64_t sub_101476B24(uint64_t a1, std::string::value_type *a2)
{
  double Current;
  int v5;
  NSObject *v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  double v15;
  void **v16;
  double v17;
  double v18;
  uint64_t *i;
  double v20;
  double v21;
  NSObject *v22;
  _QWORD **v23;
  int v24;
  double v25;
  double v26;
  NSObject *v27;
  _BYTE *v28;
  _QWORD *v29;
  _QWORD **v30;
  BOOL v31;
  uint64_t v32;
  void **v33;
  char *v34;
  char *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  char *v46;
  const char *v47;
  uint8_t *v48;
  double v49;
  const char *v50;
  double v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56[2];
  char v57;
  _QWORD **v58;
  _QWORD *v59;
  uint64_t v60;
  _BYTE v61[8];
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  void *v71;
  void **v72;
  uint64_t v73;
  uint64_t v74[2];
  uint64_t v75;
  _BYTE __p[14];
  _BYTE v77[28];
  uint8_t buf[4];
  _BYTE v79[10];
  _BYTE v80[28];

  Current = CFAbsoluteTimeGetCurrent();
  v74[0] = (uint64_t)v74;
  v74[1] = (uint64_t)v74;
  v75 = 0;
  sub_100FA29E4(a1, a2);
  v5 = sub_100FA5198((uint64_t *)a1, "", a2, *(_DWORD *)(a1 + 48), 0, Current);
  if (v74 != (uint64_t *)(a1 + 328))
    sub_10147AD34(v74, *(_QWORD *)(a1 + 336), a1 + 328);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = v75;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    v8 = v77[9] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)v79 = v7;
    *(_WORD *)&v79[8] = 2080;
    *(_QWORD *)v80 = a2;
    *(_WORD *)&v80[8] = 2080;
    *(_QWORD *)&v80[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s, id, %s", buf, 0x20u);
    if ((v77[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
    v42 = qword_1022A02D8;
    v43 = v75;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v71, a1);
    if (v73 >= 0)
      v44 = &v71;
    else
      v44 = v71;
    *(_DWORD *)__p = 134218498;
    *(_QWORD *)&__p[4] = v43;
    *(_WORD *)&__p[12] = 2080;
    *(_QWORD *)v77 = a2;
    *(_WORD *)&v77[8] = 2080;
    *(_QWORD *)&v77[10] = v44;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 2, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s, id, %s", __p, 32, v50);
    v46 = v45;
    if (SHIBYTE(v73) < 0)
      operator delete(v71);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v46);
    if (v46 != (char *)buf)
      free(v46);
  }
  sub_1000F34E0((_QWORD *)(a1 + 328));
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v69 = 0.0;
  v70 = 0.0;
  v9 = 0;
  if (v5)
  {
    v10 = 0;
    while (2)
    {
      v11 = 0;
      v12 = v9;
      v13 = (double)v10;
      LODWORD(v51) = v10;
      HIDWORD(v51) = v9 + 20;
      do
      {
        v68 = 0.0;
        v68 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) / 20.0 + 0.0;
        v67 = 0.0;
        v67 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) / 20.0 + 0.0;
        v71 = &v71;
        v72 = &v71;
        v73 = 0;
        v64 = (uint64_t)&v64;
        v65 = &v64;
        v66 = 0;
        v14 = sub_1001C087C(a1 + 48);
        v70 = v14 + v68 * v13;
        v15 = sub_1001C0858(a1 + 48);
        v69 = v15 + v67 * (double)v11;
        (*(void (**)(uint64_t, double *, double *, double *, double *, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)a1 + 176))(a1, &v70, &v69, &v68, &v67, 0, 0, &v64);
        (*(void (**)(uint64_t, double *, double *, double *, double *, uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 176))(a1, &v70, &v69, &v68, &v67, 1, 0, &v71);
        v52 = v11;
        v16 = v72;
        v54 = v73;
        v55 = v66;
        while (v16 != &v71)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
          v17 = sub_1001C087C(a1 + 48);
          (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, v17);
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
          v18 = sub_1001C0858(a1 + 48);
          (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 64))(a1, v18);
          v16 = (void **)v16[1];
        }
        for (i = v65; i != &v64; i = (uint64_t *)i[1])
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
          v20 = sub_1001C087C(a1 + 48);
          (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, v20);
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
          v21 = sub_1001C0858(a1 + 48);
          (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 64))(a1, v21);
        }
        sub_10147AECC((uint64_t)v61, (uint64_t)v72, (uint64_t)&v71);
        sub_10147AECC((uint64_t)&v58, (uint64_t)v65, (uint64_t)&v64);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
        v22 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218752;
          *(double *)v79 = v70;
          *(_WORD *)&v79[8] = 2048;
          *(double *)v80 = v69;
          *(_WORD *)&v80[8] = 2048;
          *(_QWORD *)&v80[10] = v60;
          *(_WORD *)&v80[18] = 2048;
          *(_QWORD *)&v80[20] = v63;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: searched for, location, %.10lf, %.10lf, setLinear, %lu, setIndex, %lu", buf, 0x2Au);
        }
        v53 = v12;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
          *(_DWORD *)__p = 134218752;
          *(double *)&__p[4] = v70;
          *(_WORD *)&__p[12] = 2048;
          *(double *)v77 = v69;
          *(_WORD *)&v77[8] = 2048;
          *(_QWORD *)&v77[10] = v60;
          *(_WORD *)&v77[18] = 2048;
          *(_QWORD *)&v77[20] = v63;
          LODWORD(v49) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: searched for, location, %.10lf, %.10lf, setLinear, %lu, setIndex, %lu", COERCE_DOUBLE(__p), v49, v50, *(_QWORD *)&v51);
          v37 = (uint8_t *)v36;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v36);
          if (v37 != buf)
            free(v37);
        }
        v23 = v58;
        if (v58 != &v59)
        {
          v24 = 0;
          do
          {
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
            v25 = sub_1001C087C(a1 + 48);
            (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, v25);
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
            v26 = sub_1001C0858(a1 + 48);
            (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 64))(a1, v26);
            if (&v62 == (_QWORD **)sub_10147B1DC((uint64_t)v61, (unsigned __int16 *)&v66))
            {
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
              ++v24;
              v27 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                sub_100FBF2D0((unsigned __int16 *)&v66, __p);
                v28 = __p;
                if (v77[9] < 0)
                  v28 = *(_BYTE **)__p;
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)v79 = v28;
                *(_WORD *)&v79[8] = 1024;
                *(_DWORD *)v80 = v24;
                *(_WORD *)&v80[4] = 2048;
                *(double *)&v80[6] = v70;
                *(_WORD *)&v80[14] = 2048;
                *(double *)&v80[16] = v69;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "TILE: not in index, %s, count, %3u, locationd, %.10lf, %.10lf", buf, 0x26u);
                if ((v77[9] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
                v32 = qword_1022A02D8;
                sub_100FBF2D0((unsigned __int16 *)&v66, v56);
                v33 = v56;
                if (v57 < 0)
                  v33 = (void **)v56[0];
                *(_DWORD *)__p = 136315906;
                *(_QWORD *)&__p[4] = v33;
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)v77 = v24;
                *(_WORD *)&v77[4] = 2048;
                *(double *)&v77[6] = v70;
                *(_WORD *)&v77[14] = 2048;
                *(double *)&v77[16] = v69;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 2, "TILE: not in index, %s, count, %3u, locationd, %.10lf, %.10lf", __p, 38, *(double *)&v50, v51);
                v35 = v34;
                if (v57 < 0)
                  operator delete(v56[0]);
                sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v35);
                if (v35 != (char *)buf)
                  free(v35);
              }
            }
            v29 = v23[1];
            if (v29)
            {
              do
              {
                v30 = (_QWORD **)v29;
                v29 = (_QWORD *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                v30 = (_QWORD **)v23[2];
                v31 = *v30 == v23;
                v23 = v30;
              }
              while (!v31);
            }
            v23 = v30;
          }
          while (v30 != &v59);
        }
        v12 = v53 + 1;
        sub_100008848((uint64_t)&v58, v59);
        sub_100008848((uint64_t)v61, v62);
        sub_1000F34E0(&v64);
        sub_1000F34E0(&v71);
        if (v54 != v55)
        {
          v38 = 0;
          v9 = v53 + 1;
          goto LABEL_63;
        }
        v11 = v52 + 1;
      }
      while (v52 != 19);
      v10 = LODWORD(v51) + 1;
      v38 = 1;
      v9 = HIDWORD(v51);
      if (LODWORD(v51) < 0x13)
        continue;
      break;
    }
  }
  else
  {
    v38 = 0;
  }
LABEL_63:
  v39 = v9;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
  v40 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)v79 = v38;
    *(_WORD *)&v79[4] = 1024;
    *(_DWORD *)&v79[6] = v39;
    *(_WORD *)v80 = 1024;
    *(_DWORD *)&v80[2] = 400;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: pass, %d, tests, %u, %d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
    *(_DWORD *)__p = 67109632;
    *(_DWORD *)&__p[4] = v38;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v39;
    *(_WORD *)v77 = 1024;
    *(_DWORD *)&v77[2] = 400;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: result: tilestool: pass, %d, tests, %u, %d", __p, 20, (_DWORD)v50);
    v48 = (uint8_t *)v47;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v47);
    if (v48 != buf)
      free(v48);
  }
  sub_1000F34E0(v74);
  return v38;
}

void sub_1014776EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  sub_1000F34E0(&a40);
  _Unwind_Resume(a1);
}

_QWORD *sub_101477788(uint64_t a1)
{
  sub_100FA0654(a1);
  sub_1000F34E0((_QWORD *)(a1 + 328));
  return sub_1000F34E0((_QWORD *)(a1 + 352));
}

void sub_1014777B4(_QWORD *a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  int v21;
  _BYTE *v22;
  int v23;
  void **v24;
  char *v25;
  char *v26;
  int v27;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  NSObject *v33;
  NSObject *v34;
  const char *v35;
  uint8_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void **v48;
  char *v49;
  char *v50;
  __int128 v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  double v58;
  double v59;
  unsigned int v60;
  unsigned int v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  NSObject *v67;
  int v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  void **v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unsigned int v78;
  const char *v79;
  const char *v80;
  uint8_t *v81;
  const char *v82;
  uint8_t *v83;
  const char *v84;
  uint8_t *v85;
  const char *v86;
  uint8_t *v87;
  const char *v88;
  uint64_t v89;
  const char *v90;
  const char *v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  void *v95[2];
  char v96;
  int v97;
  __int128 v98;
  int v99;
  __int128 v100;
  uint64_t v101;
  int v102;
  __int128 v103;
  unsigned int v104;
  _BYTE __p[18];
  __int16 v106;
  _BYTE v107[18];
  __int16 v108;
  double v109;
  __int16 v110;
  double v111;
  uint8_t buf[4];
  _BYTE v113[14];
  __int16 v114;
  _BYTE v115[18];
  __int16 v116;
  double v117;
  __int16 v118;
  double v119;

  sub_100810AD4((uint64_t)a1, (uint64_t)a2, a3);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(unsigned __int16 *)(a3 + 2);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v113 = v11;
    *(_WORD *)&v113[4] = 2080;
    *(_QWORD *)&v113[6] = sub_100F9F0FC(v11);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: CLSpatialDataTileTemplate, parsing, sectionId, %d, %s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
    v77 = qword_1022A02D8;
    v78 = *(unsigned __int16 *)(a3 + 2);
    v79 = sub_100F9F0FC(v78);
    *(_DWORD *)__p = 67109378;
    *(_DWORD *)&__p[4] = v78;
    *(_WORD *)&__p[8] = 2080;
    *(_QWORD *)&__p[10] = v79;
    LODWORD(v88) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, 2, "TILE: CLSpatialDataTileTemplate, parsing, sectionId, %d, %s", __p, v88);
    v81 = (uint8_t *)v80;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v80);
    if (v81 != buf)
      free(v81);
  }
  v102 = 568250;
  v103 = xmmword_101CA50B0;
  v104 = 4;
  v99 = 633786;
  v100 = xmmword_101CA50C0;
  v101 = 0xA000600000000;
  v97 = 699322;
  v98 = xmmword_101CA50D0;
  v12 = *(unsigned __int16 *)(a3 + 2);
  if (v12 != 10)
  {
    if (v12 != 9)
    {
      if (v12 == 8)
      {
        sub_100F9FD04(a4, (uint64_t)&v102);
        v13 = DWORD2(v103);
        v14 = HIDWORD(v103);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
        v15 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v113 = DWORD2(v103);
          *(_WORD *)&v113[4] = 1024;
          *(_DWORD *)&v113[6] = HIDWORD(v103);
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: CLSpatialDataTileTemplate, index, height, %u, width, %u", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
          *(_DWORD *)__p = 67109376;
          *(_DWORD *)&__p[4] = DWORD2(v103);
          *(_WORD *)&__p[8] = 1024;
          *(_DWORD *)&__p[10] = HIDWORD(v103);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: CLSpatialDataTileTemplate, index, height, %u, width, %u", __p, 14);
          v83 = (uint8_t *)v82;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v82);
          if (v83 != buf)
            free(v83);
        }
        v16 = (v14 * v13);
        v17 = (uint8_t *)sub_100812460((uint64_t)a1, a2, a3, 0, v14 * v13, v104);
        if (v17)
        {
          LODWORD(v93) = 0;
          if ((_DWORD)v16)
          {
            v18 = 0;
            v19 = 0;
            do
            {
              sub_100F9FCF4((unsigned int *)&v17[v18 * v104], &v93);
              if (!*(_BYTE *)(a5 + 9))
              {
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
                v20 = qword_1022A02D8;
                if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
                {
                  v21 = v93;
                  sub_10147B25C((unsigned int *)&v93, __p);
                  v22 = __p;
                  if (v107[3] < 0)
                    v22 = *(_BYTE **)__p;
                  *(_DWORD *)buf = 134218754;
                  *(_QWORD *)v113 = v18;
                  *(_WORD *)&v113[8] = 1024;
                  *(_DWORD *)&v113[10] = v16;
                  v114 = 1024;
                  *(_DWORD *)v115 = v21 - v19;
                  *(_WORD *)&v115[4] = 2080;
                  *(_QWORD *)&v115[6] = v22;
                  _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: index entry, %3lu, %3u, step, %04d, %s", buf, 0x22u);
                  if ((v107[3] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A02D0 != -1)
                    dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
                  v91 = (const char *)qword_1022A02D8;
                  v23 = v93;
                  sub_10147B25C((unsigned int *)&v93, v95);
                  v24 = v95;
                  if (v96 < 0)
                    v24 = (void **)v95[0];
                  *(_DWORD *)__p = 134218754;
                  *(_QWORD *)&__p[4] = v18;
                  *(_WORD *)&__p[12] = 1024;
                  *(_DWORD *)&__p[14] = v16;
                  v106 = 1024;
                  *(_DWORD *)v107 = v23 - v19;
                  *(_WORD *)&v107[4] = 2080;
                  *(_QWORD *)&v107[6] = v24;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v91, 2, "TILE: index entry, %3lu, %3u, step, %04d, %s", __p, 34, v89, v91);
                  v26 = v25;
                  if (v96 < 0)
                    operator delete(v95[0]);
                  sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v26);
                  if (v26 != (char *)buf)
                    free(v26);
                }
              }
              v19 = v93;
              ++v18;
            }
            while (v16 != v18);
          }
LABEL_110:
          v36 = v17;
LABEL_111:
          free(v36);
          return;
        }
      }
      return;
    }
    sub_100F9FD40(a4, (uint64_t)&v99);
    sub_1000F34E0(a1 + 41);
    v32 = DWORD2(v100);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
    v33 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v113 = DWORD2(v100);
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "TILE: CLSpatialDataTileTemplate, entries, numOfEntries, %u", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
      *(_DWORD *)__p = 67109120;
      *(_DWORD *)&__p[4] = DWORD2(v100);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: CLSpatialDataTileTemplate, entries, numOfEntries, %u", __p);
      v87 = (uint8_t *)v86;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v86);
      if (v87 != buf)
        free(v87);
    }
    if (!*(_BYTE *)(a5 + 8))
    {
      v17 = (uint8_t *)sub_100812460((uint64_t)a1, a2, a3, 0, v32, SHIDWORD(v100));
      if (!v17)
        return;
      if (DWORD2(v100))
      {
        v52 = 0;
        *(_QWORD *)&v51 = 134219266;
        v92 = v51;
        do
        {
          v94 = 0;
          v93 = 0;
          sub_100F9FC50((unsigned __int16 *)&v17[v52 * HIDWORD(v100)], (uint64_t)&v93);
          v53 = operator new(0x20uLL);
          v54 = v93;
          v53[1] = a1 + 41;
          v53[2] = v54;
          *((_DWORD *)v53 + 6) = v94;
          v55 = a1[41];
          *v53 = v55;
          *(_QWORD *)(v55 + 8) = v53;
          a1[41] = v53;
          ++a1[43];
          v56 = (unsigned __int16)v93;
          v57 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
          v58 = sub_1001C087C((uint64_t)(a1 + 6));
          v59 = (*(double (**)(_QWORD *))(*a1 + 56))(a1);
          v60 = WORD1(v93);
          v61 = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
          v62 = sub_1001C0858((uint64_t)(a1 + 6));
          (*(void (**)(_QWORD *))(*a1 + 64))(a1);
          if (!*(_BYTE *)(a5 + 9))
          {
            v64 = v63;
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
            v65 = v58 + (double)v56 / (double)v57 * v59 + v59 / (double)v57 * 0.5;
            v66 = v62 + (double)v60 / (double)v61 * v64 + v64 / (double)v61 * 0.5;
            v67 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
            {
              v68 = DWORD2(v100);
              v69 = a1[43];
              sub_100FBF2D0((unsigned __int16 *)&v93, __p);
              v70 = __p;
              if (v107[3] < 0)
                v70 = *(_BYTE **)__p;
              *(_DWORD *)buf = v92;
              *(_QWORD *)v113 = v52;
              *(_WORD *)&v113[8] = 1024;
              *(_DWORD *)&v113[10] = v68;
              v114 = 2048;
              *(_QWORD *)v115 = v69;
              *(_WORD *)&v115[8] = 2080;
              *(_QWORD *)&v115[10] = v70;
              v116 = 2048;
              v117 = v65;
              v118 = 2048;
              v119 = v66;
              _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "TILE: entry, %3lu, %3u, %3lu, %s, swLoc, %.8lf, %.8lf", buf, 0x3Au);
              if ((v107[3] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
              v71 = qword_1022A02D8;
              v72 = DWORD2(v100);
              v73 = a1[43];
              sub_100FBF2D0((unsigned __int16 *)&v93, v95);
              v74 = v95;
              if (v96 < 0)
                v74 = (void **)v95[0];
              *(_DWORD *)__p = v92;
              *(_QWORD *)&__p[4] = v52;
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = v72;
              v106 = 2048;
              *(_QWORD *)v107 = v73;
              *(_WORD *)&v107[8] = 2080;
              *(_QWORD *)&v107[10] = v74;
              v108 = 2048;
              v109 = v65;
              v110 = 2048;
              v111 = v66;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v71, 2, "TILE: entry, %3lu, %3u, %3lu, %s, swLoc, %.8lf, %.8lf", __p, 58, v89, v90, *(double *)&v92, *((double *)&v92 + 1));
              v76 = v75;
              if (v96 < 0)
                operator delete(v95[0]);
              sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v76);
              if (v76 != (char *)buf)
                free(v76);
            }
          }
          ++v52;
        }
        while (v52 < DWORD2(v100));
      }
      goto LABEL_110;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
    v34 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "TILE: CLSpatialDataTileTemplate, headers only, give up", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
    *(_WORD *)__p = 0;
    LODWORD(v88) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: CLSpatialDataTileTemplate, headers only, give up", __p, v88);
    v31 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v35);
LABEL_64:
    if (v31 == buf)
      return;
    v36 = v31;
    goto LABEL_111;
  }
  sub_100F9FC20(a4, (uint64_t)&v97);
  sub_1000F34E0(a1 + 44);
  v27 = DWORD2(v98);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
  v28 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v113 = DWORD2(v98);
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "TILE: CLSpatialDataTileTemplate, regionalEntries, numOfEntries, %u", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = DWORD2(v98);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: CLSpatialDataTileTemplate, regionalEntries, numOfEntries, %u", __p);
    v85 = (uint8_t *)v84;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v84);
    if (v85 != buf)
      free(v85);
  }
  if (!*(_BYTE *)(a5 + 8))
  {
    v17 = (uint8_t *)sub_100812460((uint64_t)a1, a2, a3, 0, v27, SHIDWORD(v98));
    if (!v17)
      return;
    if (DWORD2(v98))
    {
      v37 = 0;
      do
      {
        v94 = 0;
        v93 = 0;
        sub_100F9FC50((unsigned __int16 *)&v17[v37 * HIDWORD(v98)], (uint64_t)&v93);
        v38 = operator new(0x20uLL);
        v39 = v93;
        v38[1] = a1 + 44;
        v38[2] = v39;
        *((_DWORD *)v38 + 6) = v94;
        v40 = a1[44];
        *v38 = v40;
        *(_QWORD *)(v40 + 8) = v38;
        a1[44] = v38;
        ++a1[46];
        if (!*(_BYTE *)(a5 + 9))
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
          v41 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            v42 = DWORD2(v100);
            v43 = a1[46];
            sub_100FBF2D0((unsigned __int16 *)&v93, __p);
            v44 = __p;
            if (v107[3] < 0)
              v44 = *(_BYTE **)__p;
            *(_DWORD *)buf = 134218754;
            *(_QWORD *)v113 = v37;
            *(_WORD *)&v113[8] = 1024;
            *(_DWORD *)&v113[10] = v42;
            v114 = 2048;
            *(_QWORD *)v115 = v43;
            *(_WORD *)&v115[8] = 2080;
            *(_QWORD *)&v115[10] = v44;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "TILE: entry, %3lu, %3u, %3lu, %s", buf, 0x26u);
            if ((v107[3] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
            v45 = qword_1022A02D8;
            v46 = DWORD2(v100);
            v47 = a1[46];
            sub_100FBF2D0((unsigned __int16 *)&v93, v95);
            v48 = v95;
            if (v96 < 0)
              v48 = (void **)v95[0];
            *(_DWORD *)__p = 134218754;
            *(_QWORD *)&__p[4] = v37;
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = v46;
            v106 = 2048;
            *(_QWORD *)v107 = v47;
            *(_WORD *)&v107[8] = 2080;
            *(_QWORD *)&v107[10] = v48;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 2, "TILE: entry, %3lu, %3u, %3lu, %s", __p, 38, v89, v90);
            v50 = v49;
            if (v96 < 0)
              operator delete(v95[0]);
            sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v50);
            if (v50 != (char *)buf)
              free(v50);
          }
        }
        ++v37;
      }
      while (v37 < DWORD2(v98));
    }
    goto LABEL_110;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
  v29 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "TILE: CLSpatialDataTileTemplate, headers only, give up", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
    *(_WORD *)__p = 0;
    LODWORD(v88) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: CLSpatialDataTileTemplate, headers only, give up", __p, v88);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v30);
    goto LABEL_64;
  }
}

void sub_1014789F4(uint64_t a1, double *a2, double *a3, double *a4, double *a5, int a6, int a7, uint64_t *a8)
{
  NSObject *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  _BOOL4 v25;
  double v26;
  _BOOL4 v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  _BOOL4 v34;
  size_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  unint64_t v38;
  NSObject *v39;
  int v40;
  int v41;
  int v42;
  float v43;
  float v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  CFAbsoluteTime Current;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  float v53;
  float v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  CFAbsoluteTime v58;
  const char *v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  const char *v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  NSObject *v67;
  const char *v68;
  const char *v69;
  char *v70;
  NSObject *v71;
  const char *v72;
  char *v73;
  NSObject *v74;
  NSObject *v75;
  NSObject *v76;
  unsigned int v77;
  signed int v78;
  NSObject *v79;
  float v80;
  float v81;
  uint64_t v82;
  unsigned int v83;
  float v84;
  float v85;
  unsigned int v86;
  float v87;
  float v88;
  unsigned int v89;
  float v90;
  float v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  int v101;
  unsigned int v102;
  unint64_t v103;
  int v104;
  int v105;
  int v107;
  NSObject *v108;
  int v109;
  unsigned int v110;
  _QWORD *v111;
  _QWORD **v112;
  _QWORD *v113;
  _QWORD **v114;
  unsigned int v115;
  _QWORD *v116;
  _BOOL4 v117;
  _BOOL4 v119;
  int v121;
  NSObject *v122;
  unsigned int v123;
  _BYTE *v124;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  _BYTE *v130;
  char *v131;
  char *v132;
  const char *v133;
  char *v134;
  uint64_t v135;
  double *v136;
  double *v137;
  const char *v138;
  int v139;
  int v140;
  _BOOL4 v142;
  int v144;
  _BOOL4 v146;
  int v148;
  _DWORD *v149;
  uint64_t v150;
  uint64_t v151;
  NSObject *v152;
  _BYTE *v153;
  double v154;
  double v155;
  double v156;
  double v157;
  uint64_t v158;
  const char *v159;
  char *v160;
  const char *v161;
  char *v162;
  const char *v163;
  char *v164;
  const char *v165;
  char *v166;
  const char *v167;
  char *v168;
  uint64_t v169;
  _BYTE *v170;
  char *v171;
  char *v172;
  unint64_t v173;
  double v174;
  double v175;
  float v176;
  float v177;
  double v178;
  double v179;
  float v180;
  float v181;
  _DWORD *v182;
  uint64_t v183;
  uint64_t v184;
  clock_t v185;
  NSObject *v186;
  uint64_t v187;
  uint64_t v188;
  const char *v189;
  char *v190;
  double v191;
  double v192;
  double v193;
  const char *v194;
  int v195;
  double v196;
  double v197;
  double *v198;
  double v199;
  int v200;
  double v201;
  int v202;
  int v203;
  int v204;
  char *v205;
  int v206;
  int v207;
  uint64_t v210;
  double v211;
  int v212;
  int v213[2];
  double v214;
  double v215;
  unsigned int v216;
  int v217;
  double v218;
  unsigned int v219;
  uint64_t v221;
  unsigned int v222;
  uint64_t *v223;
  _QWORD *v224[2];
  int v225;
  uint64_t v226;
  int v227;
  int v228;
  __int128 v229;
  int v230;
  __int128 v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  int v235;
  __int128 v236;
  unsigned int v237;
  size_t v238;
  int v239;
  _BYTE v240[12];
  char v241;
  _BYTE v242[40];
  _BYTE v243[10];
  __int16 v244;
  double v245;
  __int16 v246;
  double v247;
  __int16 v248;
  int v249;
  __int16 v250;
  CFAbsoluteTime v251;
  int v252;
  uint64_t v253;
  _BYTE v254[20];
  __int128 v255;
  __int16 v256;
  int v257;
  __int16 v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  _BYTE buf[50];
  _BYTE v263[20];
  __int16 v264;
  int v265;
  __int16 v266;
  CFAbsoluteTime v267;

  HIDWORD(v197) = a7;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
  *(_QWORD *)v213 = a1;
  v12 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v13 = *a2;
    v14 = *a3;
    v15 = *a4;
    v16 = *a5;
    v17 = a8[2];
    *(_DWORD *)buf = 134219520;
    *(double *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v14;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v15;
    *(_WORD *)&buf[32] = 2048;
    *(double *)&buf[34] = v16;
    *(_WORD *)&buf[42] = 1024;
    *(_DWORD *)&buf[44] = a6;
    *(_WORD *)&buf[48] = 1024;
    *(_DWORD *)v263 = HIDWORD(v197);
    *(_WORD *)&v263[4] = 2048;
    *(_QWORD *)&v263[6] = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, input, swLatitude, %.8lf, swLongitude, %.8lf, search, %.8lf, %.8lf, isUseIndex, %d, includeRegionalEntries, %d, entries, %lu", buf, 0x40u);
  }
  v198 = a5;
  v199 = *(double *)&a4;
  LODWORD(v197) = a6;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
    v154 = *a2;
    v155 = *a3;
    v156 = *a4;
    v157 = *a5;
    v158 = a8[2];
    v252 = 134219520;
    v253 = *(_QWORD *)&v154;
    *(_WORD *)v254 = 2048;
    *(double *)&v254[2] = v155;
    *(_WORD *)&v254[10] = 2048;
    *(double *)&v254[12] = v156;
    LOWORD(v255) = 2048;
    *(double *)((char *)&v255 + 2) = v157;
    WORD5(v255) = 1024;
    HIDWORD(v255) = a6;
    v256 = 1024;
    v257 = HIDWORD(v197);
    v258 = 2048;
    v259 = v158;
    LODWORD(v191) = 64;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getEntriesForArea, input, swLatitude, %.8lf, swLongitude, %.8lf, search, %.8lf, %.8lf, isUseIndex, %d, includeRegionalEntries, %d, entries, %lu", COERCE_DOUBLE(&v252), v191, v192, v193, v195, a6, a5);
    v160 = (char *)v159;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v159);
    if (v160 != buf)
      free(v160);
  }
  v196 = COERCE_DOUBLE(clock());
  v239 = 0;
  v238 = 0;
  v253 = 176;
  v252 = 306106;
  *(_DWORD *)v254 = 381;
  v260 = 0;
  v261 = 0;
  *(_OWORD *)&v254[4] = 0u;
  v255 = 0u;
  v235 = 568250;
  v236 = xmmword_101CA50B0;
  v237 = 4;
  v234 = 0;
  v233 = 43962;
  v230 = 633786;
  v231 = xmmword_101CA50C0;
  v232 = 0xA000600000000;
  v228 = 699322;
  v229 = xmmword_101CA50D0;
  v18 = sub_1001C087C(a1 + 48);
  v19 = sub_1001C0858(a1 + 48);
  v20 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v22 = *a2;
  v23 = *a3;
  v24 = *a4;
  if (*a2 > v18 || v22 + v24 < v18)
  {
    v25 = v18 <= v22;
    if (v18 + v20 < v22)
      v25 = 0;
  }
  else
  {
    v25 = 1;
  }
  v26 = *v198;
  if (v23 > v19 || v23 + v26 < v19)
  {
    v27 = v19 <= v23;
    if (v19 + v21 < v23)
      v27 = 0;
  }
  else
  {
    v27 = 1;
  }
  if (v25 && v27)
  {
    if (v22 > v18)
      v28 = *a2;
    else
      v28 = v18;
    if (v23 > v19)
      v29 = *a3;
    else
      v29 = v19;
    if (v28 + v24 >= v18 + v20)
      v30 = v18 + v20 - v28;
    else
      v30 = *a4;
    v31 = v19 + v21;
    if (v29 + v26 >= v31)
      v32 = v31 - v29;
    else
      v32 = *v198;
    v214 = v30;
    v215 = v32;
    v205 = (char *)sub_10080E544(a1, &v238, &v239);
    v33 = 0;
    v34 = v205 != 0;
    if (v205)
    {
      v221 = 0;
      v210 = 0;
      if (v238)
      {
        v210 = 0;
        v221 = 0;
        v33 = 0;
        v35 = 0;
        while (1)
        {
          v36 = v33;
          v37 = (unsigned __int16 *)&v205[v35];
          sub_100CD5A8C((unsigned __int16 *)&v205[v35], (uint64_t)&v233);
          if ((unsigned __int16)v233 != 43962)
          {
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
            v74 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = (unsigned __int16)v233;
              _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "TILE: invalid section, signature, 0x%x, stopping", buf, 8u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
              *(_DWORD *)v242 = 67109120;
              *(_DWORD *)&v242[4] = (unsigned __int16)v233;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: invalid section, signature, 0x%x, stopping", v242);
              v164 = (char *)v163;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v163);
              if (v164 != buf)
                free(v164);
            }
LABEL_88:
            v34 = 1;
            if (v210 && (LOBYTE(v197) & 1) == 0)
            {
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
              v75 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, asked not to use index", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
                *(_WORD *)v242 = 0;
                LODWORD(v191) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getEntriesForArea, asked not to use index", v242, *(_QWORD *)&v191);
                v166 = (char *)v165;
                sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v165);
                if (v166 != buf)
                  free(v166);
                v210 = 0;
                v34 = 1;
              }
              else
              {
                v210 = 0;
              }
            }
            goto LABEL_102;
          }
          v38 = v234 + (unint64_t)HIDWORD(v234) + 12;
          if (v38 > 0x640000B)
            break;
          v33 = v36;
          switch(HIWORD(v233))
          {
            case 4:
              sub_101191418(v37, (uint64_t)&v252);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
              v39 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                v40 = *(_DWORD *)v254;
                v41 = *(_DWORD *)&v254[4];
                v42 = *(_DWORD *)&v254[8];
                v43 = *(float *)&v254[12];
                v44 = *(float *)&v254[16];
                v45 = *((_QWORD *)&v255 + 1);
                v46 = v255;
                v47 = v260;
                Current = CFAbsoluteTimeGetCurrent();
                *(_DWORD *)buf = 67111424;
                *(_DWORD *)&buf[4] = v40;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v41;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = v42;
                *(_WORD *)&buf[20] = 2048;
                *(double *)&buf[22] = v43;
                *(_WORD *)&buf[30] = 2048;
                *(double *)&buf[32] = v44;
                *(_WORD *)&buf[40] = 2048;
                *(double *)&buf[42] = *(float *)&v46;
                *(_WORD *)v263 = 2048;
                *(double *)&v263[2] = *((float *)&v46 + 1);
                *(_WORD *)&v263[10] = 2048;
                *(double *)&v263[12] = (double)v45 - kCFAbsoluteTimeIntervalSince1970;
                v264 = 1024;
                v265 = v47;
                v266 = 2048;
                v267 = Current - ((double)*((unint64_t *)&v255 + 1) - kCFAbsoluteTimeIntervalSince1970);
                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, genTime, %.2lf, expAge, %d, age, %.2lf", buf, 0x56u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_56;
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
              v49 = qword_1022A02D8;
              v50 = *(_DWORD *)v254;
              v51 = *(_DWORD *)&v254[4];
              v52 = *(_DWORD *)&v254[8];
              v53 = *(float *)&v254[12];
              v54 = *(float *)&v254[16];
              v55 = *((_QWORD *)&v255 + 1);
              v56 = v255;
              v57 = v260;
              v58 = CFAbsoluteTimeGetCurrent();
              *(_DWORD *)v242 = 67111424;
              *(_DWORD *)&v242[4] = v50;
              *(_WORD *)&v242[8] = 1024;
              *(_DWORD *)&v242[10] = v51;
              *(_WORD *)&v242[14] = 1024;
              *(_DWORD *)&v242[16] = v52;
              *(_WORD *)&v242[20] = 2048;
              *(double *)&v242[22] = v53;
              *(_WORD *)&v242[30] = 2048;
              *(double *)&v242[32] = v54;
              *(_WORD *)v243 = 2048;
              *(double *)&v243[2] = *(float *)&v56;
              v244 = 2048;
              v245 = *((float *)&v56 + 1);
              v246 = 2048;
              v247 = (double)v55 - kCFAbsoluteTimeIntervalSince1970;
              v248 = 1024;
              v249 = v57;
              v250 = 2048;
              v251 = v58 - ((double)*((unint64_t *)&v255 + 1) - kCFAbsoluteTimeIntervalSince1970);
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 2, "TILE: getEntriesForArea, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, genTime, %.2lf, expAge, %d, age, %.2lf", v242, 86, LODWORD(v192), v193, v196, v197, *(double *)&v198, v199, v200, v201);
              v60 = (char *)v59;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v59);
              break;
            case 8:
              sub_100F9FD04((uint64_t)v37, (uint64_t)&v235);
              v64 = v236;
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
              v65 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&buf[4] = DWORD2(v236);
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = HIDWORD(v236);
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = v237;
                _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, numEntriesHeight, %d, numEntriesWidth, %d, entrySizeInBytes, %d", buf, 0x14u);
              }
              v210 = (uint64_t)v37 + v64 + 12;
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_56;
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
              *(_DWORD *)v242 = 67109632;
              *(_DWORD *)&v242[4] = DWORD2(v236);
              *(_WORD *)&v242[8] = 1024;
              *(_DWORD *)&v242[10] = HIDWORD(v236);
              *(_WORD *)&v242[14] = 1024;
              *(_DWORD *)&v242[16] = v237;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getEntriesForArea, numEntriesHeight, %d, numEntriesWidth, %d, entrySizeInBytes, %d", v242, 20, LODWORD(v192));
              v60 = (char *)v68;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v68);
              break;
            case 9:
              sub_100F9FD40((uint64_t)v37, (uint64_t)&v230);
              v61 = v231;
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
              v62 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&buf[4] = DWORD2(v231);
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = HIDWORD(v231);
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = v232;
                _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, numOfEntries, %d, entrySizeInBytes, %d, numOfLargeEntries, %d", buf, 0x14u);
              }
              v221 = (uint64_t)v37 + v61 + 12;
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_56;
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
              *(_DWORD *)v242 = 67109632;
              *(_DWORD *)&v242[4] = DWORD2(v231);
              *(_WORD *)&v242[8] = 1024;
              *(_DWORD *)&v242[10] = HIDWORD(v231);
              *(_WORD *)&v242[14] = 1024;
              *(_DWORD *)&v242[16] = v232;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getEntriesForArea, numOfEntries, %d, entrySizeInBytes, %d, numOfLargeEntries, %d", v242, 20, LODWORD(v192));
              v60 = (char *)v63;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v63);
              break;
            case 0xA:
              sub_100F9FC20((uint64_t)v37, (uint64_t)&v228);
              v66 = v229;
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
              v67 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = DWORD2(v229);
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = HIDWORD(v229);
                _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, numOfRegionalEntries, %d, entrySizeInBytes, %d", buf, 0xEu);
              }
              v33 = (uint64_t)v37 + v66 + 12;
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
                *(_DWORD *)v242 = 67109376;
                *(_DWORD *)&v242[4] = DWORD2(v229);
                *(_WORD *)&v242[8] = 1024;
                *(_DWORD *)&v242[10] = HIDWORD(v229);
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getEntriesForArea, numOfRegionalEntries, %d, entrySizeInBytes, %d", v242, 14);
                v70 = (char *)v69;
                sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v69);
                if (v70 != buf)
                  free(v70);
              }
              goto LABEL_62;
            default:
              goto LABEL_62;
          }
          if (v60 != buf)
            free(v60);
LABEL_56:
          v33 = v36;
LABEL_62:
          v35 += v234 + (unint64_t)HIDWORD(v234) + 12;
          if (v35 >= v238)
            goto LABEL_88;
        }
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
        v76 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v38;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = 104857612;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_FAULT, "TILE: getEntriesForArea, invalid tile file, bad allocation size, totalBytesInSection, %lu, maxSectionSize, %lu", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
          *(_DWORD *)v242 = 134218240;
          *(_QWORD *)&v242[4] = v38;
          *(_WORD *)&v242[12] = 2048;
          *(_QWORD *)&v242[14] = 104857612;
          LODWORD(v191) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "TILE: getEntriesForArea, invalid tile file, bad allocation size, totalBytesInSection, %lu, maxSectionSize, %lu", v242, *(_QWORD *)&v191);
          v168 = (char *)v167;
          sub_100512490("Generic", 1, 0, 0, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v167);
          if (v168 != buf)
            free(v168);
        }
        v34 = 0;
        v33 = v36;
      }
    }
    else
    {
      v221 = 0;
      v210 = 0;
    }
LABEL_102:
    v77 = WORD2(v232);
    v78 = HIWORD(v232);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
    v194 = (const char *)v33;
    v79 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v210;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v221;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, pIndexEntries, 0x%lx, pEntries, 0x%lx", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
      *(_DWORD *)v242 = 134218240;
      *(_QWORD *)&v242[4] = v210;
      *(_WORD *)&v242[12] = 2048;
      *(_QWORD *)&v242[14] = v221;
      LODWORD(v191) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getEntriesForArea, pIndexEntries, 0x%lx, pEntries, 0x%lx", v242, *(_QWORD *)&v191);
      v162 = (char *)v161;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v161);
      if (v162 != buf)
        free(v162);
    }
    if (!v34)
    {
      LODWORD(v103) = 0;
LABEL_274:
      v185 = clock();
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
      v186 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v187 = a8[2];
        *(_DWORD *)buf = 67110400;
        *(_DWORD *)&buf[4] = v103;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = v187;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = LODWORD(v197);
        *(_WORD *)&buf[24] = 2048;
        *(_QWORD *)&buf[26] = v185 - *(_QWORD *)&v196;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v77;
        *(_WORD *)&buf[40] = 1024;
        *(_DWORD *)&buf[42] = v78;
        _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, examinedEntries, %5u, foundEntries, %5lu, isUseIndex, %d, clocks, %10lu, extra, %3d, %3d", buf, 0x2Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
        v188 = a8[2];
        *(_DWORD *)v242 = 67110400;
        *(_DWORD *)&v242[4] = v103;
        *(_WORD *)&v242[8] = 2048;
        *(_QWORD *)&v242[10] = v188;
        *(_WORD *)&v242[18] = 1024;
        *(_DWORD *)&v242[20] = LODWORD(v197);
        *(_WORD *)&v242[24] = 2048;
        *(_QWORD *)&v242[26] = v185 - *(_QWORD *)&v196;
        *(_WORD *)&v242[34] = 1024;
        *(_DWORD *)&v242[36] = v77;
        *(_WORD *)v243 = 1024;
        *(_DWORD *)&v243[2] = v78;
        LODWORD(v191) = 46;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getEntriesForArea, examinedEntries, %5u, foundEntries, %5lu, isUseIndex, %d, clocks, %10lu, extra, %3d, %3d", v242, *(_QWORD *)&v191, LODWORD(v192), v194, LODWORD(v196), LODWORD(v197));
        v190 = (char *)v189;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v189);
        if (v190 != buf)
          free(v190);
      }
      if (v205)
        sub_10080F188(v213[0], v205, v238, v239);
      return;
    }
    v211 = v28;
    v218 = v29;
    v227 = 0;
    v226 = 0;
    v225 = 0;
    v224[0] = 0;
    v224[1] = 0;
    v223 = (uint64_t *)v224;
    v80 = *(float *)&v254[12];
    v81 = *(float *)&v255;
    v82 = *(_QWORD *)v213;
    v83 = (*(uint64_t (**)(int *))(**(_QWORD **)v213 + 80))(*(int **)v213);
    v84 = *(float *)&v254[16];
    v85 = *((float *)&v255 + 1);
    v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 72))(v82);
    v87 = *(float *)&v254[12];
    v88 = *(float *)&v255;
    v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 80))(v82);
    v90 = *(float *)&v254[16];
    v91 = *((float *)&v255 + 1);
    v92 = (int)((v211 - v80) / (v81 / (double)v83));
    v93 = (int)((v218 - v84) / (v85 / (double)v86));
    v94 = (int)((v211 + v214 - v87) / (v88 / (double)v89));
    v95 = (int)((v218 + v215 - v90)
              / (v91
               / (double)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v82 + 72))(v82)));
    if (v94 - v92 <= 1)
      v96 = 1;
    else
      v96 = v94 - v92;
    if (v95 - v93 <= 1)
      v97 = 1;
    else
      v97 = v95 - v93;
    if (v210)
    {
      v192 = COERCE_DOUBLE(__PAIR64__(v77, v78));
      v219 = (*(uint64_t (**)(int *))(**(_QWORD **)v213 + 80))(*(int **)v213);
      v216 = DWORD2(v236);
      v98 = (*(uint64_t (**)(int *))(**(_QWORD **)v213 + 72))(*(int **)v213);
      v99 = HIDWORD(v236);
      if (v92 >= SHIDWORD(v192))
        v100 = v92 - HIDWORD(v192);
      else
        v100 = 0;
      v101 = v93 - v78;
      if (v93 < v78)
        v101 = 0;
      v203 = v101;
      v204 = v100;
      v212 = v94 + HIDWORD(v192);
      if (v94 + HIDWORD(v192) >= (*(unsigned int (**)(int *))(**(_QWORD **)v213 + 80))(*(int **)v213))
        v212 = (*(uint64_t (**)(int *))(**(_QWORD **)v213 + 80))(*(int **)v213);
      v202 = v95 + v78;
      if (v95 + v78 >= (*(unsigned int (**)(int *))(**(_QWORD **)v213 + 72))(*(int **)v213))
        v202 = (*(uint64_t (**)(int *))(**(_QWORD **)v213 + 72))(*(int **)v213);
      v102 = 0;
      LODWORD(v103) = 0;
      v207 = v219 / v216;
      v104 = v98 / v99;
      v217 = v96 + v92;
      v105 = v204;
      v206 = v203 / v104;
      while (v105 < (*(unsigned int (**)(int *))(**(_QWORD **)v213 + 80))(*(int **)v213) && v105 < v212)
      {
        if (v206)
          v107 = v206 - 1;
        else
          v107 = 0;
        sub_100F9FCF4((unsigned int *)(v210 + v237 * (unint64_t)(v107 + HIDWORD(v236) * (v105 / v207))), &v225);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
        v108 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67110912;
          *(_DWORD *)&buf[4] = v105;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v204;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&buf[16] = v212;
          *(_WORD *)&buf[20] = 1024;
          *(_DWORD *)&buf[22] = v203;
          *(_WORD *)&buf[26] = 1024;
          *(_DWORD *)&buf[28] = v202;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v105 / v207;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v107;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v225;
          _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, line, %d, searched_min_y, %d, %d, searched_min_x, %d, %d, index_y, %d, index_x, %d, entriesOffset, %d", buf, 0x32u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
          *(_DWORD *)v242 = 67110912;
          *(_DWORD *)&v242[4] = v105;
          *(_WORD *)&v242[8] = 1024;
          *(_DWORD *)&v242[10] = v204;
          *(_WORD *)&v242[14] = 1024;
          *(_DWORD *)&v242[16] = v212;
          *(_WORD *)&v242[20] = 1024;
          *(_DWORD *)&v242[22] = v203;
          *(_WORD *)&v242[26] = 1024;
          *(_DWORD *)&v242[28] = v202;
          *(_WORD *)&v242[32] = 1024;
          *(_DWORD *)&v242[34] = v105 / v207;
          *(_WORD *)&v242[38] = 1024;
          *(_DWORD *)v243 = v107;
          *(_WORD *)&v243[4] = 1024;
          *(_DWORD *)&v243[6] = v225;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getEntriesForArea, line, %d, searched_min_y, %d, %d, searched_min_x, %d, %d, index_y, %d, index_x, %d, entriesOffset, %d", v242, 50, LODWORD(v192), (_DWORD)v194, LODWORD(v196), LODWORD(v197), (_DWORD)v198, LODWORD(v199));
          v134 = (char *)v133;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v133);
          if (v134 != buf)
            free(v134);
        }
        v109 = 0;
        do
        {
          v110 = v225 + v109;
          v222 = v225 + v109;
          if ((v225 + v109) >= DWORD2(v231))
            break;
          if (!v102 || v110 > v102)
          {
            v111 = v224[0];
            if (!v224[0])
              goto LABEL_151;
            v112 = v224;
            do
            {
              v113 = v111;
              v114 = v112;
              v115 = *((_DWORD *)v111 + 7);
              v116 = v111 + 1;
              if (v115 >= v110)
              {
                v116 = v113;
                v112 = (_QWORD **)v113;
              }
              v111 = (_QWORD *)*v116;
            }
            while (v111);
            if (v112 == v224)
              goto LABEL_151;
            if (v115 < v110)
              v113 = v114;
            if (v110 < *((_DWORD *)v113 + 7))
            {
LABEL_151:
              sub_100F9FC50((unsigned __int16 *)(v221 + HIDWORD(v231) * (unint64_t)v110), (uint64_t)&v226);
              v117 = (unsigned __int16)v226 <= v92 && (unsigned __int16)v226 + 1 >= v92
                  || v92 <= (unsigned __int16)v226 && v217 >= (unsigned __int16)v226;
              v119 = WORD1(v226) <= v93 && WORD1(v226) + 1 >= v93 || v93 <= WORD1(v226) && v97 + v93 >= WORD1(v226);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
              v121 = v117 && v119;
              LODWORD(v103) = v103 + 1;
              v122 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                v123 = v222;
                sub_100FBF2D0((unsigned __int16 *)&v226, v242);
                v124 = v242;
                if (v242[23] < 0)
                  v124 = *(_BYTE **)v242;
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&buf[4] = v123;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v121;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = v103;
                *(_WORD *)&buf[20] = 2080;
                *(_QWORD *)&buf[22] = v124;
                _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, entryId, %d, isIntersect, %d, examinedEntries, %d, entry, %s", buf, 0x1Eu);
                if ((v242[23] & 0x80000000) != 0)
                  operator delete(*(void **)v242);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
                v128 = qword_1022A02D8;
                v129 = v222;
                sub_100FBF2D0((unsigned __int16 *)&v226, v240);
                v130 = v240;
                if (v241 < 0)
                  v130 = *(_BYTE **)v240;
                *(_DWORD *)v242 = 67109890;
                *(_DWORD *)&v242[4] = v129;
                *(_WORD *)&v242[8] = 1024;
                *(_DWORD *)&v242[10] = v121;
                *(_WORD *)&v242[14] = 1024;
                *(_DWORD *)&v242[16] = v103;
                *(_WORD *)&v242[20] = 2080;
                *(_QWORD *)&v242[22] = v130;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v128, 2, "TILE: getEntriesForArea, entryId, %d, isIntersect, %d, examinedEntries, %d, entry, %s", v242, 30, LODWORD(v192), v194);
                v132 = v131;
                if (v241 < 0)
                  operator delete(*(void **)v240);
                sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v132);
                if (v132 != buf)
                  free(v132);
              }
              if (v121)
              {
                v125 = operator new(0x20uLL);
                v126 = v226;
                v125[6] = v227;
                v127 = *a8;
                *((_QWORD *)v125 + 1) = a8;
                *((_QWORD *)v125 + 2) = v126;
                *(_QWORD *)v125 = v127;
                *(_QWORD *)(v127 + 8) = v125;
                *a8 = (uint64_t)v125;
                ++a8[2];
                sub_1010B775C(&v223, &v222, &v222);
              }
              v102 = v222;
            }
          }
          ++v109;
        }
        while (v105 >= (unsigned __int16)v226);
        ++v105;
      }
      v135 = *(_QWORD *)v213;
      v136 = v198;
      v137 = *(double **)&v199;
      v138 = v194;
      v78 = LODWORD(v192);
      v77 = HIDWORD(v192);
      goto LABEL_269;
    }
    if (v221)
    {
      if (DWORD2(v231))
      {
        v103 = 0;
        v139 = v96 + v92;
        v140 = v97 + v93;
        v135 = *(_QWORD *)v213;
        v137 = *(double **)&v199;
        do
        {
          sub_100F9FC50((unsigned __int16 *)(v221 + v103 * HIDWORD(v231)), (uint64_t)&v226);
          v142 = v92 <= (unsigned __int16)v226 && v139 >= (unsigned __int16)v226;
          v144 = (unsigned __int16)v226 <= v92 && (unsigned __int16)v226 + 1 >= v92 || v142;
          v146 = v93 <= WORD1(v226) && v140 >= WORD1(v226);
          v148 = WORD1(v226) <= v93 && WORD1(v226) + 1 >= v93 || v146;
          if ((v144 & v148) == 1)
          {
            v149 = operator new(0x20uLL);
            v150 = v226;
            v149[6] = v227;
            v151 = *a8;
            *((_QWORD *)v149 + 1) = a8;
            *((_QWORD *)v149 + 2) = v150;
            *(_QWORD *)v149 = v151;
            *(_QWORD *)(v151 + 8) = v149;
            *a8 = (uint64_t)v149;
            ++a8[2];
          }
          ++v103;
        }
        while (v103 < DWORD2(v231));
        v136 = v198;
        goto LABEL_268;
      }
    }
    else
    {
      v136 = v198;
      v138 = v194;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
      v135 = *(_QWORD *)v213;
      v137 = *(double **)&v199;
      v152 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, int *))(**(_QWORD **)v213 + 16))(buf, *(int **)v213);
        v153 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v242 = 136315138;
        *(_QWORD *)&v242[4] = v153;
        _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, nothing to search, %s", v242, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 2))
      {
        LODWORD(v103) = 0;
        goto LABEL_269;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
      v169 = qword_1022A02D8;
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)v213 + 16))(v242);
      if (v242[23] >= 0)
        v170 = v242;
      else
        v170 = *(_BYTE **)v242;
      *(_DWORD *)v240 = 136315138;
      *(_QWORD *)&v240[4] = v170;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v169, 2, "TILE: getEntriesForArea, nothing to search, %s", v240);
      v172 = v171;
      if ((v242[23] & 0x80000000) != 0)
        operator delete(*(void **)v242);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v172);
      if (v172 != buf)
        free(v172);
    }
    LODWORD(v103) = 0;
    v135 = *(_QWORD *)v213;
    v136 = v198;
    v137 = *(double **)&v199;
LABEL_268:
    v138 = v194;
LABEL_269:
    if (HIDWORD(v197) && DWORD2(v229))
    {
      v173 = 0;
      do
      {
        sub_100F9FC50((unsigned __int16 *)&v138[v173 * HIDWORD(v229)], (uint64_t)&v226);
        v174 = *a2;
        v175 = *v137;
        v176 = *(float *)&v254[12];
        v177 = *(float *)&v255;
        LOWORD(v226) = (int)((v174 + v175 * 0.5 - v176)
                           / (v177
                            / (double)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v135 + 80))(v135)));
        v178 = *a3;
        v179 = *v136;
        v180 = *(float *)&v254[16];
        v181 = *((float *)&v255 + 1);
        WORD1(v226) = (int)((v178 + v179 * 0.5 - v180)
                          / (v181
                           / (double)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v135 + 72))(v135)));
        v182 = operator new(0x20uLL);
        v183 = v226;
        v182[6] = v227;
        v184 = *a8;
        *((_QWORD *)v182 + 1) = a8;
        *((_QWORD *)v182 + 2) = v183;
        *(_QWORD *)v182 = v184;
        *(_QWORD *)(v184 + 8) = v182;
        *a8 = (uint64_t)v182;
        ++a8[2];
        ++v173;
      }
      while (v173 < DWORD2(v229));
    }
    sub_100008848((uint64_t)&v223, v224[0]);
    goto LABEL_274;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
  v71 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "TILE: doesIntersectWithTile, %d, no intersection with the tile", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B7FD8);
    *(_DWORD *)v242 = 67109120;
    *(_DWORD *)&v242[4] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: doesIntersectWithTile, %d, no intersection with the tile", v242);
    v73 = (char *)v72;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v72);
    if (v73 != buf)
      free(v73);
  }
}

void sub_10147AC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,_QWORD *a42)
{
  sub_100008848((uint64_t)&a41, a42);
  _Unwind_Resume(a1);
}

uint64_t sub_10147ACF4(_QWORD *a1)
{
  *a1 = off_1021B7F20;
  sub_1000F34E0(a1 + 44);
  sub_1000F34E0(a1 + 41);
  return sub_100FA05F0((uint64_t)a1);
}

uint64_t *sub_10147AD34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;
  uint64_t v6;

  for (i = (uint64_t *)a1[1]; a2 != a3 && i != a1; i = (uint64_t *)i[1])
  {
    v6 = *(_QWORD *)(a2 + 16);
    *((_DWORD *)i + 6) = *(_DWORD *)(a2 + 24);
    i[2] = v6;
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (i == a1)
    return sub_10147AD8C((uint64_t)a1, a1, a2, a3);
  else
    return sub_1005E98AC((uint64_t)a1, i, a1);
}

uint64_t *sub_10147AD8C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 != a4)
  {
    v8 = operator new(0x20uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v10 = *(_QWORD *)(a3 + 16);
    *((_DWORD *)v8 + 6) = *(_DWORD *)(a3 + 24);
    v8[2] = v10;
    v11 = *(_QWORD *)(a3 + 8);
    v12 = 1;
    if (v11 != a4)
    {
      v13 = v8;
      do
      {
        v8 = operator new(0x20uLL);
        *v8 = v13;
        v8[1] = 0;
        v14 = *(_QWORD *)(v11 + 16);
        *((_DWORD *)v8 + 6) = *(_DWORD *)(v11 + 24);
        v8[2] = v14;
        v13[1] = v8;
        ++v12;
        v11 = *(_QWORD *)(v11 + 8);
        v13 = v8;
      }
      while (v11 != a4);
    }
    v15 = *a2;
    *(_QWORD *)(v15 + 8) = v9;
    *v9 = v15;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v12;
    return v9;
  }
  return a2;
}

void sub_10147AE6C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_10147AE8C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10147AEA0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10147AECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_10147AF4C((uint64_t **)a1, v4, (unsigned __int16 *)(v6 + 16), v6 + 16);
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_10147AF34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_10147AF4C(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t *v10;
  uint64_t *v11;

  v6 = sub_10147AFD8(a1, a2, &v11, &v10, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v7 + 25) = *(_QWORD *)a4;
    *(_DWORD *)(v7 + 33) = *(_DWORD *)(a4 + 8);
    sub_1000145B0(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_10147AFD8(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned __int16 *a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL4 v21;
  uint64_t *v22;
  unsigned int v23;
  _BOOL4 v24;
  _BOOL4 v25;

  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_5;
  v5 = *a5;
  v6 = *(unsigned __int16 *)((char *)a2 + 25);
  v7 = a5[1];
  v8 = *(unsigned __int16 *)((char *)a2 + 27);
  v9 = v7 < v8;
  if (v5 != v6)
    v9 = v5 < v6;
  if (v9)
  {
LABEL_5:
    v10 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v12 = a2;
LABEL_24:
      if (v10)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v10)
    {
      v11 = (uint64_t *)*a2;
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      v17 = a2;
      do
      {
        v12 = (uint64_t *)v17[2];
        v18 = *v12 == (_QWORD)v17;
        v17 = v12;
      }
      while (v18);
    }
    v19 = *(unsigned __int16 *)((char *)v12 + 25);
    v20 = *a5;
    v18 = v19 == v20;
    v21 = v19 < v20;
    if (v18)
      v21 = *(unsigned __int16 *)((char *)v12 + 27) < a5[1];
    if (v21)
      goto LABEL_24;
    return sub_10147B158((uint64_t)a1, a3, a5);
  }
  v13 = v8 < v7;
  if (v5 == v6)
    v14 = v13;
  else
    v14 = v6 < v5;
  if (v14)
  {
    v15 = a2[1];
    if (v15)
    {
      v16 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v16;
        v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      v22 = a2;
      do
      {
        a4 = (uint64_t **)v22[2];
        v18 = *a4 == v22;
        v22 = (uint64_t *)a4;
      }
      while (!v18);
    }
    if (a4 == a1 + 1)
      goto LABEL_35;
    v23 = *(unsigned __int16 *)((char *)a4 + 25);
    v24 = v7 < *(unsigned __int16 *)((char *)a4 + 27);
    v18 = v5 == v23;
    v25 = v5 < v23;
    if (v18)
      v25 = v24;
    if (v25)
    {
LABEL_35:
      if (v15)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    return sub_10147B158((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t *sub_10147B158(uint64_t a1, _QWORD *a2, unsigned __int16 *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = *(unsigned __int16 *)((char *)v4 + 25);
        v10 = *(unsigned __int16 *)((char *)v8 + 27);
        v11 = v7 < v10;
        if (v6 != v9)
          v11 = v6 < v9;
        if (!v11)
          break;
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_15;
      }
      v12 = v10 < v7;
      if (v6 == v9)
        v13 = v12;
      else
        v13 = v9 < v6;
      if (!v13)
        break;
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

uint64_t sub_10147B1DC(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t *v11;
  unsigned int v12;
  _BOOL4 v13;
  _BOOL4 v14;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = v2;
  do
  {
    v8 = *(unsigned __int16 *)(v3 + 25);
    v10 = v8 == v5;
    v9 = v8 < v5;
    if (v10)
      v9 = *(unsigned __int16 *)(v3 + 27) < v6;
    v10 = !v9;
    if (v9)
      v11 = (uint64_t *)(v3 + 8);
    else
      v11 = (uint64_t *)v3;
    if (v10)
      v7 = v3;
    v3 = *v11;
  }
  while (*v11);
  if (v7 == v2)
    return v2;
  v12 = *(unsigned __int16 *)(v7 + 25);
  v13 = v6 < *(unsigned __int16 *)(v7 + 27);
  v10 = v5 == v12;
  v14 = v5 < v12;
  if (v10)
    v14 = v13;
  if (v14)
    return v2;
  return v7;
}

uint64_t sub_10147B25C@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;
  _QWORD v9[10];
  char v10;
  uint64_t v11;

  sub_100263E50((uint64_t)v7);
  v4 = sub_100263F7C(&v8, (uint64_t)"entriesOffset, ", 15);
  std::ostream::operator<<(v4, *a1);
  std::stringbuf::str(a2, v9);
  *(_QWORD *)((char *)v7
  v8 = v5;
  if (v10 < 0)
    operator delete((void *)v9[8]);
  std::streambuf::~streambuf(v9);
  return std::ios::~ios(&v11);
}

void sub_10147B324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10147B338()
{
  operator new();
}

void sub_10147B388()
{
  operator delete();
}

_QWORD *sub_10147B3AC(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  uint8_t buf[1640];

  *a1 = *a2;
  v5 = a2[1];
  a1[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a1[2] = *a3;
  v8 = a3[1];
  a1[3] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  a1[4] = *a4;
  v11 = a4[1];
  a1[5] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
  v14 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[Phone side] Setting up CMMobilityCalibrationManager", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
    v18[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "[Phone side] Setting up CMMobilityCalibrationManager", v18, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "CMMobilityCal::CMMobilityCalibrationManager::CMMobilityCalibrationManager(std::shared_ptr<CLMobility::BoutMetricsDelegate>, std::shared_ptr<CLMobility::GaitMetricsDelegate>, std::shared_ptr<CLMobility::PedometerDelegate>)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return a1;
}

void sub_10147B5B8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  v3 = (std::__shared_weak_count *)v1[5];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)v1[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v5 = (std::__shared_weak_count *)v1[1];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

NSData *sub_10147B5F0(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSData *v4;
  NSObject *v5;
  NSData *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  unsigned int v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
  v3 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v23) = objc_msgSend(a2, "count");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CMMobilityCalibrationManager: Attempt to serialize array of %d entries.", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
    v10 = qword_10229FCD8;
    v20 = 67109120;
    LODWORD(v21) = objc_msgSend(a2, "count");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "CMMobilityCalibrationManager: Attempt to serialize array of %d entries.", &v20);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "NSData *CMMobilityCal::CMMobilityCalibrationManager::serializeMessage(NSMutableArray *) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v19 = 0;
  v4 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", a2, 1, &v19);
  if (v19)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
    v5 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v23 = v19;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CMMobilityCalibrationManager: Error serializing the message: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
      v20 = 138412290;
      v21 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "CMMobilityCalibrationManager: Error serializing the message: %@", &v20, 12);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "NSData *CMMobilityCal::CMMobilityCalibrationManager::serializeMessage(NSMutableArray *) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    return 0;
  }
  else
  {
    v6 = v4;
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
    v7 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = -[NSData length](v6, "length");
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CMMobilityCalibrationManager: Serialization complete, message size: %d bytes.", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
      v15 = qword_10229FCD8;
      v16 = -[NSData length](v6, "length");
      v20 = 67109120;
      LODWORD(v21) = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "CMMobilityCalibrationManager: Serialization complete, message size: %d bytes.", &v20);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "NSData *CMMobilityCal::CMMobilityCalibrationManager::serializeMessage(NSMutableArray *) const", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  return v6;
}

NSData *sub_10147BA78(uint64_t *a1, double a2, double a3)
{
  id v6;
  id v7;

  v6 = +[NSMutableArray array](NSMutableArray, "array");
  if (sub_10147BAF4(a1, v6, a2, a3) == 100 && (v7 = objc_msgSend(v6, "count")) != 0)
    return sub_10147B5F0((uint64_t)v7, v6);
  else
    return 0;
}

uint64_t sub_10147BAF4(uint64_t *a1, void *a2, double a3, double a4)
{
  id v8;
  void *v9;
  unint64_t v10;
  CLMobilityCalBoutMetrics *v11;
  CLMobilityCalBoutMetrics *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  void *context;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p;
  void *v23;
  uint64_t v24;
  void **v25;
  _QWORD v26[2];
  _QWORD v27[2];

  context = objc_autoreleasePoolPush();
  v19 = 0;
  __p = 0;
  v23 = 0;
  v24 = 0;
  v20 = 0;
  v21 = 0;
  v17 = sub_10147BD28(a1, &__p, &v19, a3, a4);
  if (v17 == 100)
  {
    v8 = +[NSMutableArray array](NSMutableArray, "array");
    if (v20 != v19)
    {
      v9 = v8;
      v10 = 0;
      do
      {
        objc_msgSend(v9, "removeAllObjects");
        v11 = [CLMobilityCalBoutMetrics alloc];
        v12 = -[CLMobilityCalBoutMetrics initWithBoutMetrics:](v11, "initWithBoutMetrics:", (char *)__p + 224 * v10);
        v13 = (uint64_t *)(v19 + 24 * v10);
        v15 = *v13;
        v14 = v13[1];
        while (v15 != v14)
        {
          objc_msgSend(v9, "addObject:", -[CLMobilityCalGaitMetrics initWithGaitMetrics:]([CLMobilityCalGaitMetrics alloc], "initWithGaitMetrics:", v15));
          v15 += 96;
        }
        v26[1] = CFSTR("GaitMetrics");
        v27[0] = v12;
        v26[0] = CFSTR("BoutMetrics");
        v27[1] = +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v9);
        objc_msgSend(a2, "addObject:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 2));
        ++v10;
      }
      while (v10 < 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3));
    }
  }
  v25 = (void **)&v19;
  sub_10025E1F0(&v25);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  objc_autoreleasePoolPop(context);
  return v17;
}

void sub_10147BCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char *a17)
{
  a17 = &a11;
  sub_10025E1F0((void ***)&a17);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10147BD28(uint64_t *a1, void **a2, uint64_t *a3, double a4, double a5)
{
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  __n128 v14;
  __n128 v15;
  __n128 *v16;
  __n128 *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  unint64_t v25;
  __n128 *v26;
  unint64_t v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  __n128 *v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  char *v51;
  char *v52;
  __n128 *v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  const char *v62;
  void **v63;
  NSObject *v64;
  const char *v65;
  void **v66;
  NSObject *v67;
  uint64_t v68;
  NSObject *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  NSObject *v75;
  const char *v76;
  void **v77;
  NSObject *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  NSObject *v83;
  int v84;
  int v85;
  NSObject *v86;
  const char *v87;
  const char *v88;
  void **v89;
  int v90;
  int v91;
  const char *v92;
  void **v93;
  const char *v94;
  void **v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  void *v101;
  __n128 *v102;
  uint64_t v103;
  _DWORD v104[2];
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  void *__p;
  void *v110;
  uint64_t v111;

  v101 = 0;
  v102 = 0;
  v103 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10 || v10->__shared_owners_ < 0)
  {
    v11 = 0;
    v100 = 0;
  }
  else
  {
    v100 = std::__shared_weak_count::lock(v10);
    if (v100)
      v11 = *a1;
    else
      v11 = 0;
  }
  v12 = (std::__shared_weak_count *)a1[3];
  if (!v12 || v12->__shared_owners_ < 0)
  {
    v13 = 0;
    v99 = 0;
    if (v11)
      goto LABEL_12;
    goto LABEL_73;
  }
  v99 = std::__shared_weak_count::lock(v12);
  if (!v99)
  {
    v13 = 0;
    if (v11)
      goto LABEL_12;
LABEL_73:
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
    v69 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "CMMobilityCalibrationManager: Unable to reference bout metrics DB. Abort query.", (uint8_t *)&__p, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_78;
    bzero(&__p, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
    LOWORD(v104[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FCD8, 16, "CMMobilityCalibrationManager: Unable to reference bout metrics DB. Abort query.", v104, 2);
    v66 = (void **)v87;
    sub_100512490("Generic", 1, 0, 0, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v87);
LABEL_127:
    if (v66 != &__p)
      free(v66);
LABEL_78:
    v68 = 112;
    goto LABEL_79;
  }
  v13 = a1[2];
  if (!v11)
    goto LABEL_73;
LABEL_12:
  if (!v13)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
    v64 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "CMMobilityCalibrationManager: Unable to reference gait metrics DB. Abort query.", (uint8_t *)&__p, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_78;
    bzero(&__p, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
    LOWORD(v104[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FCD8, 16, "CMMobilityCalibrationManager: Unable to reference gait metrics DB. Abort query.", v104, 2);
    v66 = (void **)v65;
    sub_100512490("Generic", 1, 0, 0, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v65);
    goto LABEL_127;
  }
  if (((*(uint64_t (**)(uint64_t, _QWORD, void **, double, double))(*(_QWORD *)v11 + 24))(v11, 0, &v101, a4, a5) & 1) != 0)
  {
    a2[1] = *a2;
    sub_10025E230(a3);
    sub_10147CCBC(a2, 0x1EuLL);
    sub_10147CDBC(a3, 0x1EuLL);
    v16 = (__n128 *)v101;
    v17 = v102;
    if (v101 == v102)
    {
      v18 = 0;
      goto LABEL_106;
    }
    v18 = 0;
    v98 = (uint64_t)(a2 + 2);
    while ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5)) < 0x1E)
    {
      if (v18 >= 0x5DC)
      {
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
        v78 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "CMMobilityCalibrationManager: Max allowed number of gait metrics collected - terminate collection.", (uint8_t *)&__p, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_106;
        bzero(&__p, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
        LOWORD(v104[0]) = 0;
        LODWORD(v97) = 2;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FCD8, 2, "CMMobilityCalibrationManager: Max allowed number of gait metrics collected - terminate collection.", v104, v97);
        v77 = (void **)v96;
        sub_100512490("Generic", 1, 0, 2, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v96);
LABEL_144:
        if (v77 != &__p)
          free(v77);
        goto LABEL_106;
      }
      v14.n128_u64[0] = v16->n128_u64[1];
      v15.n128_u64[0] = v16[1].n128_u64[0];
      if (v15.n128_f64[0] - v14.n128_f64[0] >= 20.0 && v15.n128_f64[0] - v14.n128_f64[0] <= 360.0)
      {
        v19 = a3[1];
        if (v19 == *a3 || *(_QWORD *)(v19 - 16) != *(_QWORD *)(v19 - 24))
        {
          __p = 0;
          v110 = 0;
          v111 = 0;
          sub_10147CE6C(a3, (uint64_t)&__p);
          if (__p)
          {
            v110 = __p;
            operator delete(__p);
          }
          v14.n128_u64[0] = v16->n128_u64[1];
          v15.n128_u64[0] = v16[1].n128_u64[0];
          v19 = a3[1];
        }
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(*(_QWORD *)v13 + 24))(v13, v19 - 24, v14, v15);
        if (v20 == 100)
        {
          v22 = a3[1];
          v23 = *(_QWORD *)(v22 - 24);
          v24 = *(_OWORD **)(v22 - 16);
          if (v24 != (_OWORD *)v23)
          {
            v25 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - v23) >> 5);
            sub_10147D11C(v23, v24, 126 - 2 * __clz(v25), 1);
            v26 = (__n128 *)a2[1];
            v27 = (unint64_t)a2[2];
            if ((unint64_t)v26 >= v27)
            {
              v37 = 0x6DB6DB6DB6DB6DB7 * (((char *)v26 - (_BYTE *)*a2) >> 5);
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) > 0x124924924924924)
                sub_100259694();
              v39 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v27 - (_QWORD)*a2) >> 5);
              if (2 * v39 > v38)
                v38 = 2 * v39;
              if (v39 >= 0x92492492492492)
                v40 = 0x124924924924924;
              else
                v40 = v38;
              if (v40)
                v41 = (char *)sub_100272188(v98, v40);
              else
                v41 = 0;
              v42 = (__n128 *)&v41[224 * v37];
              v43 = v16[1];
              *v42 = *v16;
              v42[1] = v43;
              v44 = v16[2];
              v45 = v16[3];
              v46 = v16[5];
              v42[4] = v16[4];
              v42[5] = v46;
              v42[2] = v44;
              v42[3] = v45;
              v47 = v16[6];
              v48 = v16[7];
              v49 = v16[9];
              v42[8] = v16[8];
              v42[9] = v49;
              v42[6] = v47;
              v42[7] = v48;
              v14 = v16[10];
              v15 = v16[11];
              v50 = v16[13];
              v42[12] = v16[12];
              v42[13] = v50;
              v42[10] = v14;
              v42[11] = v15;
              v52 = (char *)*a2;
              v51 = (char *)a2[1];
              v53 = v42;
              if (v51 != *a2)
              {
                do
                {
                  v54 = *((__n128 *)v51 - 13);
                  v53[-14] = *((__n128 *)v51 - 14);
                  v53[-13] = v54;
                  v55 = *((__n128 *)v51 - 12);
                  v56 = *((__n128 *)v51 - 11);
                  v57 = *((__n128 *)v51 - 9);
                  v53[-10] = *((__n128 *)v51 - 10);
                  v53[-9] = v57;
                  v53[-12] = v55;
                  v53[-11] = v56;
                  v58 = *((__n128 *)v51 - 8);
                  v59 = *((__n128 *)v51 - 7);
                  v60 = *((__n128 *)v51 - 5);
                  v53[-6] = *((__n128 *)v51 - 6);
                  v53[-5] = v60;
                  v53[-8] = v58;
                  v53[-7] = v59;
                  v14 = *((__n128 *)v51 - 4);
                  v15 = *((__n128 *)v51 - 3);
                  v61 = *((__n128 *)v51 - 2);
                  *(__n128 *)((char *)v53 - 19) = *(__n128 *)(v51 - 19);
                  v53[-3] = v15;
                  v53[-2] = v61;
                  v53[-4] = v14;
                  v53 -= 14;
                  v51 -= 224;
                }
                while (v51 != v52);
                v51 = (char *)*a2;
              }
              v36 = v42 + 14;
              *a2 = v53;
              a2[1] = &v42[14];
              a2[2] = &v41[224 * v40];
              if (v51)
                operator delete(v51);
            }
            else
            {
              v28 = v16[1];
              *v26 = *v16;
              v26[1] = v28;
              v29 = v16[2];
              v30 = v16[3];
              v31 = v16[5];
              v26[4] = v16[4];
              v26[5] = v31;
              v26[2] = v29;
              v26[3] = v30;
              v32 = v16[6];
              v33 = v16[7];
              v34 = v16[9];
              v26[8] = v16[8];
              v26[9] = v34;
              v26[6] = v32;
              v26[7] = v33;
              v14 = v16[10];
              v15 = v16[11];
              v35 = v16[13];
              v26[12] = v16[12];
              v26[13] = v35;
              v26[10] = v14;
              v26[11] = v15;
              v36 = v26 + 14;
            }
            v18 += v25;
            a2[1] = v36;
          }
        }
        else
        {
          if (v20 == 109)
          {
            if (qword_10229FCD0 != -1)
              dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
            v21 = qword_10229FCD8;
            if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(__p) = 0;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CMMobilityCalibrationManager: Defering bout processing. Gait Metrics unavailable, likely because device is locked.", (uint8_t *)&__p, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&__p, 0x65CuLL);
              if (qword_10229FCD0 != -1)
                dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
              LOWORD(v104[0]) = 0;
              LODWORD(v97) = 2;
              _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FCD8, 2, "CMMobilityCalibrationManager: Defering bout processing. Gait Metrics unavailable, likely because device is locked.", v104, v97);
              v63 = (void **)v62;
              sub_100512490("Generic", 1, 0, 2, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v62);
              if (v63 != &__p)
                free(v63);
            }
          }
          *(_QWORD *)(a3[1] - 16) = *(_QWORD *)(a3[1] - 24);
        }
      }
      v16 += 14;
      if (v16 == v17)
        goto LABEL_106;
    }
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
    v75 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "CMMobilityCalibrationManager: Max allowed number of bouts collected - terminate collection.", (uint8_t *)&__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
      LOWORD(v104[0]) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FCD8, 2, "CMMobilityCalibrationManager: Max allowed number of bouts collected - terminate collection.", v104, v97);
      v77 = (void **)v76;
      sub_100512490("Generic", 1, 0, 2, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v76);
      goto LABEL_144;
    }
LABEL_106:
    v79 = a3[1];
    if (v79 != *a3)
    {
      v81 = *(void **)(v79 - 24);
      v80 = *(void **)(v79 - 16);
      v82 = v79 - 24;
      if (v80 == v81)
      {
        if (v80)
          operator delete(v80);
        a3[1] = v82;
      }
    }
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
    v83 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      v84 = -1227133513 * ((unint64_t)((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5);
      v85 = 1227133513 * ((unint64_t)((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5);
      LODWORD(__p) = 67109632;
      HIDWORD(__p) = v18;
      LOWORD(v110) = 1024;
      *(_DWORD *)((char *)&v110 + 2) = v84;
      HIWORD(v110) = 1024;
      LODWORD(v111) = v85 - 1227133513 * ((unint64_t)((char *)v102 - (_BYTE *)v101) >> 5);
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "CMMobilityCalibrationManager: Queried %d gait metrics within %d walk bouts. %d bouts dropped.", (uint8_t *)&__p, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
      v90 = -1227133513 * ((unint64_t)((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5);
      v91 = 1227133513 * ((unint64_t)((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5);
      v104[0] = 67109632;
      v104[1] = v18;
      v105 = 1024;
      v106 = v90;
      v107 = 1024;
      v108 = v91 - 1227133513 * ((unint64_t)((char *)v102 - (_BYTE *)v101) >> 5);
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FCD8, 0, "CMMobilityCalibrationManager: Queried %d gait metrics within %d walk bouts. %d bouts dropped.", v104, 20, v98);
      v93 = (void **)v92;
      sub_100512490("Generic", 1, 0, 2, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v92);
      if (v93 != &__p)
        free(v93);
    }
    if (0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5) == 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3))
    {
      v68 = 100;
    }
    else
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
      v86 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "CMMobilityCalibrationManager: Expect number of gait vectors == number of bouts. Something went wrong unexpectedly.", (uint8_t *)&__p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
        LOWORD(v104[0]) = 0;
        LODWORD(v97) = 2;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FCD8, 16, "CMMobilityCalibrationManager: Expect number of gait vectors == number of bouts. Something went wrong unexpectedly.", v104, v97);
        v95 = (void **)v94;
        sub_100512490("Generic", 1, 0, 0, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v94);
        if (v95 != &__p)
          free(v95);
      }
      v68 = 103;
    }
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
    v67 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "CMMobilityCalibrationManager: Error querying bout metrics.", (uint8_t *)&__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B7FF8);
      LOWORD(v104[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FCD8, 16, "CMMobilityCalibrationManager: Error querying bout metrics.", v104, 2);
      v89 = (void **)v88;
      sub_100512490("Generic", 1, 0, 0, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v88);
      if (v89 != &__p)
        free(v89);
    }
    v68 = 108;
  }
LABEL_79:
  if (v99)
  {
    p_shared_owners = (unint64_t *)&v99->__shared_owners_;
    do
      v71 = __ldaxr(p_shared_owners);
    while (__stlxr(v71 - 1, p_shared_owners));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (v100)
  {
    v72 = (unint64_t *)&v100->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (v101)
  {
    v102 = (__n128 *)v101;
    operator delete(v101);
  }
  return v68;
}

void sub_10147CC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  sub_100261F44((uint64_t)&a12);
  sub_100261F44((uint64_t)&a14);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10147CCBC(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (_BYTE *)*a1) >> 5) < a2)
  {
    if (a2 >= 0x124924924924925)
      sub_100259694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_100272188(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[224 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 13);
        *((_OWORD *)v12 - 14) = *((_OWORD *)v10 - 14);
        *((_OWORD *)v12 - 13) = v13;
        v14 = *((_OWORD *)v10 - 12);
        v15 = *((_OWORD *)v10 - 11);
        v16 = *((_OWORD *)v10 - 9);
        *((_OWORD *)v12 - 10) = *((_OWORD *)v10 - 10);
        *((_OWORD *)v12 - 9) = v16;
        *((_OWORD *)v12 - 12) = v14;
        *((_OWORD *)v12 - 11) = v15;
        v17 = *((_OWORD *)v10 - 8);
        v18 = *((_OWORD *)v10 - 7);
        v19 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v19;
        *((_OWORD *)v12 - 8) = v17;
        *((_OWORD *)v12 - 7) = v18;
        v20 = *((_OWORD *)v10 - 4);
        v21 = *((_OWORD *)v10 - 3);
        v22 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 19) = *(_OWORD *)(v10 - 19);
        *((_OWORD *)v12 - 3) = v21;
        *((_OWORD *)v12 - 2) = v22;
        *((_OWORD *)v12 - 4) = v20;
        v12 -= 224;
        v10 -= 224;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_10147CDBC(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_100259694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1002596A8(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_10147CFD4(a1, v7);
    return sub_10025E974((uint64_t)v7);
  }
  return result;
}

void sub_10147CE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10025E974((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10147CE6C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_1002596A8(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_10147CFD4(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = sub_10025E974((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_10147CF94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10025E974((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10147CFA8(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_10147CFD4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10147D048((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10147D048(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_10147D0E8((uint64_t)v11);
  return v9;
}

uint64_t sub_10147D0E8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10025E930(a1);
  return a1;
}

void sub_10147D11C(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  double *v25;
  double *v26;
  double v27;
  double *v28;
  double v29;
  double *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double v35;
  double v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  unint64_t v45;
  double v46;
  double *v47;
  double *v48;
  double v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  double v54;
  double v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 *v64;
  __int128 *v65;
  __int128 *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  BOOL v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD *v79;
  BOOL v81;
  uint64_t v82;
  unint64_t v83;
  _OWORD *v84;
  double v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  int64_t v94;
  int64_t v95;
  int64_t v96;
  uint64_t v97;
  unint64_t v98;
  double v99;
  unint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  uint64_t v110;
  unint64_t v111;
  _OWORD *v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  unint64_t v125;
  double v126;
  uint64_t v127;
  _OWORD *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v138;
  double v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  double v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  _BYTE v153[32];
  _BYTE v154[32];
  _BYTE v155[32];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _BYTE v199[32];
  _BYTE v200[32];
  __int128 v201;
  _BYTE v202[32];
  _BYTE v203[32];
  _BYTE v204[32];
  _BYTE v205[32];
  _BYTE v206[32];
  _BYTE v207[32];
  _BYTE v208[32];
  _BYTE v209[32];
  _BYTE v210[32];
  _BYTE v211[32];

BOOL sub_10147DCF4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  BOOL v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[32];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[32];
  _BYTE v60[32];
  _BYTE v61[32];
  _BYTE v62[32];
  _BYTE v63[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 88) < *(double *)(a1 + 8))
      {
        v47 = *(_OWORD *)(a1 + 32);
        v53 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)v59 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v59[16] = *(_OWORD *)(a1 + 80);
        v35 = *(_OWORD *)a1;
        v41 = *(_OWORD *)(a1 + 16);
        v6 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v6;
        v8 = *(_OWORD *)(a2 - 48);
        v7 = *(_OWORD *)(a2 - 32);
        v9 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 - 20);
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a1 + 64) = v7;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 64) = v47;
        *(_OWORD *)(a2 - 48) = v53;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v59;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v59[12];
        *(_OWORD *)(a2 - 96) = v35;
        *(_OWORD *)(a2 - 80) = v41;
      }
      return result;
    case 3uLL:
      sub_100C32654(a1, a1 + 96, a2 - 96);
      return 1;
    case 4uLL:
      sub_100C32C1C(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1;
    case 5uLL:
      v21 = (__int128 *)(a1 + 96);
      v22 = (__int128 *)(a1 + 192);
      v23 = (__int128 *)(a1 + 288);
      sub_100C32C1C(a1, a1 + 96, a1 + 192, a1 + 288);
      if (*(double *)(a2 - 88) >= *(double *)(a1 + 296))
        return 1;
      v49 = *(_OWORD *)(a1 + 320);
      v55 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)v60 = *(_OWORD *)(a1 + 352);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 368);
      v37 = *v23;
      v43 = *(_OWORD *)(a1 + 304);
      v24 = *(_OWORD *)(a2 - 80);
      *v23 = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 304) = v24;
      v26 = *(_OWORD *)(a2 - 48);
      v25 = *(_OWORD *)(a2 - 32);
      v27 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 364) = *(_OWORD *)(a2 - 20);
      *(_OWORD *)(a1 + 336) = v26;
      *(_OWORD *)(a1 + 352) = v25;
      *(_OWORD *)(a1 + 320) = v27;
      *(_OWORD *)(a2 - 64) = v49;
      *(_OWORD *)(a2 - 48) = v55;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v60;
      *(_OWORD *)(a2 - 20) = *(_OWORD *)&v60[12];
      *(_OWORD *)(a2 - 96) = v37;
      *(_OWORD *)(a2 - 80) = v43;
      if (*(double *)(a1 + 296) >= *(double *)(a1 + 200))
        return 1;
      v50 = *(_OWORD *)(a1 + 224);
      v56 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)v61 = *(_OWORD *)(a1 + 256);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a1 + 272);
      v38 = *v22;
      v44 = *(_OWORD *)(a1 + 208);
      v28 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 240) = v28;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 268) = *(_OWORD *)(a1 + 364);
      v29 = *(_OWORD *)(a1 + 304);
      *v22 = *v23;
      *(_OWORD *)(a1 + 208) = v29;
      *v23 = v38;
      *(_OWORD *)(a1 + 304) = v44;
      *(_OWORD *)(a1 + 364) = *(_OWORD *)&v61[12];
      v30 = *(double *)(a1 + 200) < *(double *)(a1 + 104);
      *(_OWORD *)(a1 + 336) = v56;
      *(_OWORD *)(a1 + 352) = *(_OWORD *)v61;
      *(_OWORD *)(a1 + 320) = v50;
      if (!v30)
        return 1;
      v51 = *(_OWORD *)(a1 + 128);
      v57 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)v62 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 176);
      v39 = *v21;
      v45 = *(_OWORD *)(a1 + 112);
      v31 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 144) = v31;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 172) = *(_OWORD *)(a1 + 268);
      v32 = *(_OWORD *)(a1 + 208);
      *v21 = *v22;
      *(_OWORD *)(a1 + 112) = v32;
      *v22 = v39;
      *(_OWORD *)(a1 + 208) = v45;
      *(_OWORD *)(a1 + 268) = *(_OWORD *)&v62[12];
      v30 = *(double *)(a1 + 104) < *(double *)(a1 + 8);
      *(_OWORD *)(a1 + 240) = v57;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)v62;
      *(_OWORD *)(a1 + 224) = v51;
      if (!v30)
        return 1;
      v52 = *(_OWORD *)(a1 + 32);
      v58 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)v63 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v63[16] = *(_OWORD *)(a1 + 80);
      v40 = *(_OWORD *)a1;
      v46 = *(_OWORD *)(a1 + 16);
      v33 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 48) = v33;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 172);
      v34 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v34;
      *v21 = v40;
      *(_OWORD *)(a1 + 112) = v46;
      *(_OWORD *)(a1 + 172) = *(_OWORD *)&v63[12];
      result = 1;
      *(_OWORD *)(a1 + 144) = v58;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)v63;
      *(_OWORD *)(a1 + 128) = v52;
      return result;
    default:
      v10 = a1 + 192;
      sub_100C32654(a1, a1 + 96, a1 + 192);
      v11 = a1 + 288;
      if (a1 + 288 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(double *)(v11 + 8);
    if (v14 < *(double *)(v10 + 8))
    {
      v15 = *(_QWORD *)v11;
      v48 = *(_OWORD *)(v11 + 48);
      *(_OWORD *)v54 = *(_OWORD *)(v11 + 64);
      *(_OWORD *)&v54[16] = *(_OWORD *)(v11 + 80);
      v16 = v12;
      v36 = *(_OWORD *)(v11 + 16);
      v42 = *(_OWORD *)(v11 + 32);
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_OWORD *)(a1 + v16 + 240);
        *(_OWORD *)(v17 + 320) = *(_OWORD *)(a1 + v16 + 224);
        *(_OWORD *)(v17 + 336) = v18;
        *(_OWORD *)(v17 + 352) = *(_OWORD *)(a1 + v16 + 256);
        v19 = *(_OWORD *)(a1 + v16 + 208);
        *(_OWORD *)(v17 + 288) = *(_OWORD *)(a1 + v16 + 192);
        *(_OWORD *)(v17 + 304) = v19;
        *(_OWORD *)(a1 + v16 + 364) = *(_OWORD *)(a1 + v16 + 268);
        if (v16 == -192)
          break;
        v16 -= 96;
        if (v14 >= *(double *)(v17 + 104))
        {
          v20 = a1 + v16 + 288;
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *(_QWORD *)v20 = v15;
      *(double *)(v20 + 8) = v14;
      *(_OWORD *)(v20 + 48) = v48;
      *(_OWORD *)(v20 + 64) = *(_OWORD *)v54;
      *(_OWORD *)(v20 + 76) = *(_OWORD *)&v54[12];
      ++v13;
      *(_OWORD *)(v20 + 16) = v36;
      *(_OWORD *)(v20 + 32) = v42;
      if (v13 == 8)
        return v11 + 96 == a2;
    }
    v10 = v11;
    v12 += 96;
    v11 += 96;
    if (v11 == a2)
      return 1;
  }
}

uint64_t sub_10147E0CC(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  v7 = sub_101105B78(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v7 = off_1021B8028;
  *(_QWORD *)(v7 + 176) = 0;
  *(_BYTE *)(v7 + 184) = 0;
  v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonBackgroundActivitySession(ctor) #clbas", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v8, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
  v9 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 68289794;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2082;
    v20 = "activity";
    v21 = 2114;
    v22 = v10;
    v23 = 2050;
    v24 = a1;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDaemonBackgroundActivitySession(ctor) #clbas\", \"event\":%{public, location:escape_only}s, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x30u);
  }
  v11 = *(_QWORD *)(a1 + 24);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10147E29C;
  v13[3] = &unk_10214A578;
  v13[4] = a1;
  sub_1007C9E5C(v11, (uint64_t)v13);
  sub_10147E4F0(a1);
  os_activity_scope_leave(&state);
  return a1;
}

void sub_10147E274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  uint64_t v15;
  uint64_t *v16;

  os_activity_scope_leave(&state);
  sub_10147F46C(v16, 0);
  sub_10110619C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_10147E29C(uint64_t a1, const void *a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 32);
  if ((*(unsigned int (**)(const void *))(*(_QWORD *)a2 + 24))(a2) != 3)
    return 0;
  result = (uint64_t)objc_msgSend(*(id *)(v3 + 16), "isEqual:", sub_100026CC8((uint64_t)a2));
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(v3 + 176);
    *(_QWORD *)(v3 + 176) = v5[22];
    v5[22] = v6;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021B80D0);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 24))(a2);
      v9 = *(_QWORD *)(v3 + 16);
      v13 = 68289794;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v8;
      v19 = 2114;
      v20 = v9;
      v21 = 2050;
      v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x2Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021B80D0);
    }
    v10 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v11 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 24))(a2);
      v12 = *(_QWORD *)(v3 + 16);
      v13 = 68289794;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v11;
      v19 = 2114;
      v20 = v12;
      v21 = 2050;
      v22 = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas consumeMatchingButterfly", "{\"msg%{public}.0s\":\"#clbas consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x2Cu);
    }
    return 1;
  }
  return result;
}

void sub_10147E4F0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  _DWORD v33[4];

  if (sub_1011085C4(a1))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2114;
      v29 = v3;
      v30 = 2050;
      v31 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas trying WIU #AutoPrompt-ing\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
    }
    v4 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v5 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2114;
      v29 = v5;
      v30 = 2050;
      v31 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas trying WIU #AutoPrompt-ing", "{\"msg%{public}.0s\":\"#clbas trying WIU #AutoPrompt-ing\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
    sub_101108720(a1);
  }
  sub_101108804((id *)a1);
  v6 = *(unsigned __int8 *)(a1 + 184);
  if (objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceTypeMask:", 786448)
    && objc_msgSend(*(id *)(a1 + 40), "inUseLevelIsAtLeast:", 4))
  {
    v7 = *(_QWORD *)(a1 + 176);
    *(_BYTE *)(a1 + 184) = 1;
    *(_BYTE *)(a1 + 48) = 0;
    if (!v7)
    {
      objc_msgSend(*(id *)(a1 + 40), "transientAwareRegistrationResult");
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "queue");
      operator new();
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
    v8 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2114;
      v29 = v9;
      v30 = 2050;
      v31 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas skip BlueBar assertions, already active\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
    }
    v10 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v11 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2114;
      v29 = v11;
      v30 = 2050;
      v31 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas skip BlueBar assertions, already active", "{\"msg%{public}.0s\":\"#clbas skip BlueBar assertions, already active\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    sub_10147F46C((uint64_t *)(a1 + 176), 0);
    sub_10147F46C((uint64_t *)(a1 + 176), 0);
    *(_BYTE *)(a1 + 184) = 0;
    *(_BYTE *)(a1 + 48) = 1;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
    v12 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2114;
      v29 = v13;
      v30 = 2050;
      v31 = a1;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas BlueBar assertions released. Session marked inactive\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
    }
    v14 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v15 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2114;
      v29 = v15;
      v30 = 2050;
      v31 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas BlueBar assertions released. Session marked inactive", "{\"msg%{public}.0s\":\"#clbas BlueBar assertions released. Session marked inactive\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
    v16 = *(unsigned __int8 *)(a1 + 184);
    if (v6 != v16)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
      v17 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&buf[4] = 0;
        v26 = 2082;
        v27 = "";
        v28 = 2114;
        v29 = v18;
        v30 = 2050;
        v31 = a1;
        v32 = 1026;
        v33[0] = v6;
        LOWORD(v33[1]) = 1026;
        *(_DWORD *)((char *)&v33[1] + 2) = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas active state changed. persist for #dic rehydration\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"wasActive\":%{public}hhd, \"isActive\":%{public}hhd}", buf, 0x32u);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
      }
      v19 = qword_1022A01C8;
      if (os_signpost_enabled((os_log_t)qword_1022A01C8))
      {
        v20 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&buf[4] = 0;
        v26 = 2082;
        v27 = "";
        v28 = 2114;
        v29 = v20;
        v30 = 2050;
        v31 = a1;
        v32 = 1026;
        v33[0] = v6;
        LOWORD(v33[1]) = 1026;
        *(_DWORD *)((char *)&v33[1] + 2) = v16;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas active state changed. persist for #dic rehydration", "{\"msg%{public}.0s\":\"#clbas active state changed. persist for #dic rehydration\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"wasActive\":%{public}hhd, \"isActive\":%{public}hhd}", buf, 0x32u);
      }
      sub_1015A2E04(buf, (char *)-[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%p"), a1), "UTF8String"));
      v22 = *(_QWORD *)(a1 + 16);
      v21 = *(_QWORD *)(a1 + 24);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v24 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      sub_1007BBF94(v21, v22, (uint64_t *)buf, v23, v24, 1);
      if (SBYTE3(v29) < 0)
        operator delete(*(void **)buf);
    }
    sub_10110883C((_QWORD *)a1);
  }
}

void sub_10147EDB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  operator delete();
}

uint64_t sub_10147EDF8(_QWORD *a1)
{
  *a1 = off_1021B8028;
  sub_1011078A4((uint64_t)a1, 3);
  sub_10147F46C(a1 + 22, 0);
  return sub_10110619C((uint64_t)a1);
}

void sub_10147EE40(_QWORD *a1)
{
  sub_10147EDF8(a1);
  operator delete();
}

void sub_10147EE64(uint64_t a1, CLConnectionMessage **a2)
{
  _QWORD *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t *v25;

  v4 = (_QWORD *)CLConnectionMessage::name(*a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44)
    {
LABEL_7:
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
      v6 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = CLConnectionMessage::name(*a2);
        v9 = *(char *)(v8 + 23) >= 0 ? (uint64_t *)v8 : *(uint64_t **)v8;
        v16 = 68289794;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v20 = 2114;
        v21 = v7;
        v22 = 2050;
        v23 = a1;
        v24 = 2082;
        v25 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #clbas received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x30u);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
      }
      v10 = qword_1022A01C8;
      if (os_signpost_enabled((os_log_t)qword_1022A01C8))
      {
        v11 = *(_QWORD *)(a1 + 16);
        v12 = (uint64_t *)CLConnectionMessage::name(*a2);
        if (*((char *)v12 + 23) >= 0)
          v13 = v12;
        else
          v13 = (uint64_t *)*v12;
        v16 = 68289794;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v20 = 2114;
        v21 = v11;
        v22 = 2050;
        v23 = a1;
        v24 = 2082;
        v25 = v13;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning #clbas received unhandled message", "{\"msg%{public}.0s\":\"#Warning #clbas received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x30u);
      }
      return;
    }
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 44)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "kCLConnectionMessageDestroyUponDisconnection", 0x2CuLL))
    goto LABEL_7;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
  v14 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(a1 + 16);
    v16 = 68289538;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2114;
    v21 = v15;
    v22 = 2050;
    v23 = a1;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas setting destroyUponDisconnection as True\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v16, 0x26u);
  }
  *(_BYTE *)(a1 + 48) = 1;
}

uint64_t sub_10147F14C()
{
  return 3;
}

uint64_t sub_10147F154()
{
  return 12311;
}

void sub_10147F15C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v6 = 68289538;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = v3;
    v12 = 2050;
    v13 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas authContext has changed\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v6, 0x26u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
  }
  v4 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = 68289538;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = v5;
    v12 = 2050;
    v13 = a1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas authContext has changed", "{\"msg%{public}.0s\":\"#clbas authContext has changed\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v6, 0x26u);
  }
  sub_10147E4F0(a1);
}

uint64_t sub_10147F308(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

NSDictionary *sub_10147F310(uint64_t a1)
{
  NSNumber *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("SessionActive");
  v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 184));
  v4[1] = CFSTR("SDKAtLeast2024");
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

uint64_t sub_10147F3B0(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3;

  if (*(_BYTE *)(a1 + 184))
    return 0;
  v3 = objc_msgSend(*(id *)(a1 + 40), "diagnosticMask");
  if ((int)objc_msgSend(*(id *)(a1 + 40), "inUseLevel") >= 4)
    v1 = v3 & 3;
  else
    v1 = v3 & 3 | 0x10;
  if (objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceTypeMask:", 16)
    && objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceTypeMask:", 0x40000)
    && objc_msgSend(*(id *)(a1 + 40), "inUseLevelIsAtLeast:", 4))
  {
    v1 |= 0x1000uLL;
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceTypeMask:", 0x100000) & 1) == 0
    && objc_msgSend(*(id *)(a1 + 40), "transientAwareRegistrationResult") == 4)
  {
    return v1 | 0x1000;
  }
  return v1;
}

uint64_t sub_10147F46C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10147FD58(result);
    operator delete();
  }
  return result;
}

void sub_10147F4A8(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_10147F4D4(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10147F500(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;
  id v9;
  std::string __p;
  std::string v11[3];

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  *a1 = sub_1007F4EFC(a5);
  v8 = objc_msgSend(objc_alloc((Class)STActivityAttribution), "initWithAttributedEntity:", objc_msgSend(objc_alloc((Class)STAttributedEntity), "initWithExecutableIdentity:", objc_msgSend(objc_alloc((Class)STExecutableIdentity), "initWithApplicationBundleIdentifier:", objc_msgSend(a2, "bundleId"))));
  v9 = objc_alloc((Class)STBackgroundActivitiesStatusDomainBackgroundActivityAttribution);
  a1[1] = (uint64_t)objc_msgSend(v9, "initWithBackgroundActivityIdentifier:activityAttribution:showsWhenForeground:", STBackgroundActivityIdentifierBackgroundLocation, v8, 0);
  sub_10147F6D0((uint64_t)a1, 1);
  sub_1015A2E04(&__p, "DaemonBackgroundActivitySession");
  sub_1007C0D0C(a5, (uint64_t)a2, &__p, 4, v11);
  operator new();
}

void sub_10147F660(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  operator delete();
}

id sub_10147F6D0(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  _QWORD v9[5];
  _QWORD v10[5];
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;

  v4 = *(_QWORD *)(a1 + 8);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2050;
    v17 = v4;
    v18 = 1026;
    v19 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas publishAttribution\", \"ActivityAttribution\":\"%{public}p\", \"publish\":%{public}hhd}", buf, 0x22u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
  }
  v6 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    *(_DWORD *)buf = 68289538;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2050;
    v17 = v4;
    v18 = 1026;
    v19 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas publishAttribution", "{\"msg%{public}.0s\":\"#clbas publishAttribution\", \"ActivityAttribution\":\"%{public}p\", \"publish\":%{public}hhd}", buf, 0x22u);
  }
  v7 = *(void **)a1;
  v9[4] = v4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10147F8DC;
  v10[3] = &unk_1021B80F8;
  v11 = a2;
  v10[4] = v4;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10147FBC4;
  v9[3] = &unk_10212BB58;
  return objc_msgSend(v7, "updateVolatileData:completion:", v10, v9);
}

id sub_10147F8DC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  id v9;
  const char *v10;
  const char *v11;
  NSObject *v12;
  id v13;
  id v14;
  uint64_t v16;
  _BYTE v17[24];

  v5 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 40))
  {
    objc_msgSend(a2, "addAttribution:", v5);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "debugDescription"), "UTF8String");
      v16 = 68289282;
      *(_WORD *)v17 = 2082;
      *(_QWORD *)&v17[2] = "";
      *(_WORD *)&v17[10] = 2082;
      *(_QWORD *)&v17[12] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas BackgroundActivityAttribution added\", \"ActivityAttribution\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
    }
    v8 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v9 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "debugDescription"), "UTF8String");
      v16 = 68289282;
      *(_WORD *)v17 = 2082;
      *(_QWORD *)&v17[2] = "";
      *(_WORD *)&v17[10] = 2082;
      *(_QWORD *)&v17[12] = v9;
      v10 = "#clbas BackgroundActivityAttribution added";
      v11 = "{\"msg%{public}.0s\":\"#clbas BackgroundActivityAttribution added\", \"ActivityAttribution\":%{public, locat"
            "ion:escape_only}s}";
LABEL_16:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v10, v11, (uint8_t *)&v16, 0x1Cu);
    }
  }
  else
  {
    objc_msgSend(a2, "removeAttribution:", v5);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
    v12 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "debugDescription"), "UTF8String");
      v16 = 68289282;
      *(_WORD *)v17 = 2082;
      *(_QWORD *)&v17[2] = "";
      *(_WORD *)&v17[10] = 2082;
      *(_QWORD *)&v17[12] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas BackgroundActivityAttribution removed\", \"ActivityAttribution\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
    }
    v8 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "debugDescription"), "UTF8String");
      v16 = 68289282;
      *(_WORD *)v17 = 2082;
      *(_QWORD *)&v17[2] = "";
      *(_WORD *)&v17[10] = 2082;
      *(_QWORD *)&v17[12] = v14;
      v10 = "#clbas BackgroundActivityAttribution removed";
      v11 = "{\"msg%{public}.0s\":\"#clbas BackgroundActivityAttribution removed\", \"ActivityAttribution\":%{public, loc"
            "ation:escape_only}s}";
      goto LABEL_16;
    }
  }
  return objc_msgSend(a3, "setUserInitiated:", 1, v16, *(_OWORD *)v17, *(_QWORD *)&v17[16]);
}

void sub_10147FBC4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  NSObject *v4;
  id v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "debugDescription"), "UTF8String");
    v6 = 68289282;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas BackgroundActivityAttribution completed\", \"ActivityAttribution\":%{public, location:escape_only}s}", (uint8_t *)&v6, 0x1Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B80B0);
  }
  v4 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "debugDescription"), "UTF8String");
    v6 = 68289282;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas BackgroundActivityAttribution completed", "{\"msg%{public}.0s\":\"#clbas BackgroundActivityAttribution completed\", \"ActivityAttribution\":%{public, location:escape_only}s}", (uint8_t *)&v6, 0x1Cu);
  }
}

uint64_t sub_10147FD58(uint64_t a1)
{
  sub_10147F6D0(a1, 0);

  *(_QWORD *)(a1 + 8) = 0;
  sub_1007F9198((uint64_t *)(a1 + 16), 0);
  sub_1007F9198((uint64_t *)(a1 + 16), 0);
  sub_1007F9198((uint64_t *)(a1 + 16), 0);
  return a1;
}

_QWORD *sub_10147FDB8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t sub_10147FE04@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  if (result)
  {
    *a2 = off_1021B8188;
    a2[1] = result;
    a2[3] = a2;
  }
  else
  {
    v2 = sub_1019555C4();
    return sub_10147FE2C(v2);
  }
  return result;
}

void sub_10147FE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2;
  sub_100270E34(a1 + 8, a3);
  *(_QWORD *)(a1 + 40) = 0;
  sub_10031F08C((_BYTE *)(a1 + 48), (uint64_t)&byte_102311440);
  *(_BYTE *)(a1 + 144) = 0;
  sub_1001B7DEC();
}

void sub_10147FF14(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_BYTE *)(v2 + 136) && *(char *)(v2 + 79) < 0)
    operator delete(*(void **)(v2 + 56));
  v4 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD **)(v2 + 32);
  if (v5 == v1)
  {
    v6 = 4;
    v5 = v1;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_10147FF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[3];

  sub_10147FE04(a3, v5);
  sub_10147FE2C(a1, a2, (uint64_t)v5);
}

void sub_10148003C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101480080(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), 1);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), 6);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), 7);
  if (*(_BYTE *)(a1 + 136) && *(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == (_QWORD *)(a1 + 8))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 8);
    goto LABEL_10;
  }
  if (v3)
  {
    v4 = 5;
LABEL_10:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

id sub_101480138(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *a2;
  if ((_DWORD)v2 == 1)
  {
    a1 = sub_10195572C();
    goto LABEL_6;
  }
  if ((_DWORD)v2 == 6)
  {
LABEL_6:
    a1 = sub_10195588C(a1);
    goto LABEL_7;
  }
  if ((_DWORD)v2 != 7)
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v2, 0);
LABEL_7:
  v4 = sub_1019559EC(a1);
  return (id)sub_10148017C(v4);
}

id sub_10148017C(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v4;

  v2 = *a2;
  if (*a2 == 1)
  {
    a1 = sub_101955B4C();
    goto LABEL_6;
  }
  if (v2 == 6)
  {
LABEL_6:
    a1 = sub_101955CAC(a1);
    goto LABEL_7;
  }
  if (v2 != 7)
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
LABEL_7:
  v4 = sub_101955E0C(a1);
  return (id)sub_1014801BC(v4);
}

uint64_t sub_1014801BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 113);
}

_BYTE *sub_1014801C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *result;
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  if (*(_BYTE *)(a1 + 136) && *(int *)(a1 + 88) > 0)
  {
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 48);
    result = (_BYTE *)(a2 + 8);
    if (*(char *)(a1 + 79) < 0)
    {
      result = sub_100115CE4(result, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
    }
    else
    {
      *(_OWORD *)result = *(_OWORD *)(a1 + 56);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 72);
    }
    v7 = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a2 + 48) = v7;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 112);
    v6 = *(_QWORD *)(a1 + 128);
  }
  else
  {
    *(_QWORD *)a2 = qword_1023114A0;
    result = (_BYTE *)(a2 + 8);
    if (byte_1023114A8[23] < 0)
    {
      result = sub_100115CE4(result, *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
    }
    else
    {
      *(_OWORD *)result = *(_OWORD *)byte_1023114A8;
      *(_QWORD *)(a2 + 24) = *(_QWORD *)&byte_1023114A8[16];
    }
    v5 = xmmword_1023114D0;
    *(_OWORD *)(a2 + 32) = xmmword_1023114C0;
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = xmmword_1023114E0;
    v6 = qword_1023114F0;
  }
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

void sub_101480294(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_1014802C0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1014802EC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10148031C()
{
  operator delete();
}

_QWORD *sub_101480330(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B8188;
  result[1] = v3;
  return result;
}

uint64_t sub_101480364(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B8188;
  a2[1] = v2;
  return result;
}

uint64_t sub_101480380(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1014803BC()
{
}

uint64_t sub_1014803C8()
{
  qword_1023140D0 = 0;
  return __cxa_atexit((void (*)(void *))sub_10147FDB8, &unk_1023140B8, (void *)&_mh_execute_header);
}

uint64_t sub_1014803E8(uint64_t a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_101480564(a1, "CLStepCountRecorderDb", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_1021B82A8;
  *(_QWORD *)(a1 + 72) = off_1021B8370;
  *(_QWORD *)(a1 + 480) = off_1021B83C0;
  sub_100E81598((_QWORD *)(a1 + 488), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 504), 0, 0);
  *(_WORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_QWORD *)(a1 + 544) = -1;
  *(_DWORD *)(a1 + 552) = -1;
  *(_QWORD *)(a1 + 560) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 596) = xmmword_101CA5290;
  *(_QWORD *)(a1 + 612) = 0;
  LODWORD(__p[0]) = 8500;
  sub_1018C1A0C((unsigned __int8 *)(a1 + 620), "StepCounterAnalyticsEpochTrigger", __p, 0);
  *(_WORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 716) = 0;
  *(_OWORD *)(a1 + 684) = 0u;
  *(_OWORD *)(a1 + 700) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  return a1;
}

void sub_101480534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_1014809B8(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_101480564(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_1021B84B0;
  *(_QWORD *)(a1 + 72) = off_1021B8558;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021B84B0;
  *(_QWORD *)(a1 + 72) = off_1021B8558;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 400) = 12000;
  *(_QWORD *)(a1 + 408) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 416));
  *(_QWORD *)(a1 + 416) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_10148090C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[51] = off_10213DEB0;
  sub_100427950(v27);
  sub_1006CF50C(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_1014809B0()
{
  JUMPOUT(0x101480990);
}

_QWORD *sub_1014809B8(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021B8558;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021B84B0;
  a1[51] = off_10213DEB0;
  sub_100427950(a1 + 52);
  sub_1006CF50C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_101480A34(_QWORD *a1)
{
  *a1 = off_1021B82A8;
  a1[9] = off_1021B8370;
  a1[60] = off_1021B83C0;
  sub_101480A80((uint64_t)a1, 0, 0);
  return sub_1014809B8(a1);
}

void sub_101480A80(uint64_t a1, void *a2, const void *a3)
{
  const void *v6;
  uint64_t v7;

  if ((a2 != 0) == (a3 != 0))
  {

    *(_QWORD *)(a1 + 536) = a2;
    v6 = *(const void **)(a1 + 528);
    if (v6)
      _Block_release(v6);
    if (a3)
      *(_QWORD *)(a1 + 528) = _Block_copy(a3);
  }
  else
  {
    v7 = sub_101955F6C();
    sub_101480AF4(v7);
  }
}

_QWORD *sub_101480AF8(uint64_t a1)
{
  return sub_101480A34((_QWORD *)(a1 - 72));
}

_QWORD *sub_101480B00(uint64_t a1)
{
  return sub_101480A34((_QWORD *)(a1 - 480));
}

void sub_101480B08(_QWORD *a1)
{
  sub_101480A34(a1);
  operator delete();
}

void sub_101480B2C(uint64_t a1)
{
  sub_101480A34((_QWORD *)(a1 - 72));
  operator delete();
}

void sub_101480B54(uint64_t a1)
{
  sub_101480A34((_QWORD *)(a1 - 480));
  operator delete();
}

void sub_101480B7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(*(_QWORD *)(a1 + 80)))
  {
    sub_101480D8C(a1);
    sub_100634364(*(_QWORD *)(a1 + 80), "StepCountHistory", (const char **)&qword_10230F1E8, (const std::string::value_type **)&qword_10230F5A8, 0);
    *(_QWORD *)(a1 + 488) = sub_10063D314(*(_QWORD *)(a1 + 80), "INSERT INTO StepCountHistory (startTime, timestamp, count, distance, rawdistance, floorsAscended, floorsDescended, pace, activeTime, firstStepTime, pushCount, workoutType, elevationAscended, elevationDescended, distanceSource, currentCadence, distanceMobility, pedometerArmConstrainedState) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(_QWORD *)(a1 + 496) = v2;
    if (!sub_100E815A0((_QWORD *)(a1 + 488)))
      sub_1006372E8(*(_QWORD *)(a1 + 80));
    *(_QWORD *)(a1 + 504) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM StepCountHistory ORDER BY startTime DESC LIMIT 1");
    *(_QWORD *)(a1 + 512) = v3;
    *(_DWORD *)(a1 + 132) = sub_1014813A8(a1);
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v4 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Device is locked and we are unable to open the database", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLStepCountRecorderDb::prepareSQLStatements()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_101480D8C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  void *__p;
  const char *v6;
  int v7;
  __int16 v8;
  char v9;
  char v10;
  uint8_t buf[16];

  if (sub_100635B3C(*(_QWORD *)(a1 + 80), "StepCountHistory"))
  {
    v6 = "distance";
    v7 = 5;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "StepCountHistory", (uint64_t)"distance", (uint64_t)&v6);
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021B8480);
  v2 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "StepCountHistory table doesn't even exist", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    LOWORD(__p) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "StepCountHistory table doesn't even exist", &__p, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLStepCountRecorderDb::alterTableIfNecessary()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_101481308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;

  if (a22 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a24);
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  sub_1018B38B4((uint64_t)&a66);
  _Unwind_Resume(a1);
}

uint64_t sub_1014813A8(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM StepCountHistory");
  return 0xFFFFFFFFLL;
}

void sub_101481448(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10148146C(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B8598);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B8598);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLStepCountEntry>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_101482604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_101482924(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  __int128 v11;
  uint64_t v12;
  __int16 v13;
  uint8_t buf[8];

  objc_msgSend(+[CMPedometerData maxPedometerEntries](CMPedometerData, "maxPedometerEntries"), "intValue");
  v2 = *(_QWORD *)(a1 + 112);
  v12 = a1 + 112;
  (*(void (**)(void))(v2 + 16))();
  v13 = 256;
  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    if (sub_100219C4C(*(_QWORD *)(a1 + 80)))
      sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM StepCountHistory WHERE id >= ? ORDER BY id ASC LIMIT ?");
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v5 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning DB UUID un-initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      LOWORD(v11) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "#Warning DB UUID un-initialized", &v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "CMError CLStepCountRecorderDb::queryStepCountSince(const CLStepCountEntry &, std::vector<CLStepCountEntry> &) const", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v4 = 103;
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v3 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "StepCountHistory not accessible", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      LOWORD(v11) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "StepCountHistory not accessible", &v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "CMError CLStepCountRecorderDb::queryStepCountSince(const CLStepCountEntry &, std::vector<CLStepCountEntry> &) const", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    v4 = 109;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 24))(a1 + 112);
  return v4;
}

void sub_10148374C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  sub_10187E514((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t sub_1014837B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD v10[3];
  __int16 v11;
  uint8_t buf[8];

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v10[1] = v2;
  v9 = v2;
  (*(void (**)(void))(v3 + 16))();
  v11 = 256;
  if ((sub_10008950C(v4) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM StepCountHistory WHERE startTime BETWEEN ? and ? ORDER BY startTime ASC");
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021B8480);
  v5 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "StepCountHistory not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    LOWORD(v10[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "StepCountHistory not accessible", v10, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual CMError CLStepCountRecorderDb::queryStepCountInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLStepCountEntry> &) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  return 109;
}

void sub_101483C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101483C8C(uint64_t a1)
{
  return sub_1014837B0(a1 - 480);
}

double sub_101483C94(unsigned __int8 *a1, int a2)
{
  int v3;
  uint64_t v4;
  NSObject *v5;
  double result;
  const char *v7;
  uint8_t *v8;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  a1[680] = 1;
  v3 = a1[592];
  v4 = qword_10229FCD0;
  a1[681] = v3 != a2;
  if (v3 == a2)
  {
    if (v4 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v5 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "setPushCounting, fEnablePushCounting already set to %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v15 = 67109120;
      v16 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "setPushCounting, fEnablePushCounting already set to %d", &v15);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountRecorderDb::setPushCounting(BOOL)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (v4 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v10 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = a1[592];
      *(_DWORD *)buf = 67109376;
      v20 = v11;
      v21 = 1024;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "setPushCounting, fEnablePushCounting changing from %d to %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v12 = a1[592];
      v15 = 67109376;
      v16 = v12;
      v17 = 1024;
      v18 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "setPushCounting, fEnablePushCounting changing from %d to %d", &v15, 14);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountRecorderDb::setPushCounting(BOOL)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    a1[592] = a2;
    return sub_101483FC8((uint64_t)a1);
  }
  return result;
}

double sub_101483FC8(uint64_t a1)
{
  NSObject *v2;
  double result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021B8480);
  v2 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLStepCountRecorderDb::resetCurrentCount called", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "CLStepCountRecorderDb::resetCurrentCount called", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLStepCountRecorderDb::resetCurrentCount()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  result = NAN;
  *(_QWORD *)(a1 + 544) = -1;
  *(_DWORD *)(a1 + 552) = -1;
  *(_QWORD *)(a1 + 560) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 600) = -1;
  return result;
}

uint64_t sub_10148417C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 596) = a2;
  return result;
}

uint64_t sub_101484184(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM StepCountHistory");
  return result;
}

void sub_10148421C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10148423C(uint64_t a1)
{
  return sub_101484184(a1 - 72);
}

uint64_t sub_101484244(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_1000CDA68(a1[10], "DELETE FROM StepCountHistory WHERE startTime > ?");
  }
  return result;
}

void sub_101484474(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014844A0(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE StepCountHistory SET startTime = startTime + ?");
  return result;
}

void sub_1014846A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1014846D4(uint64_t a1, __int128 *a2, int a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  NSObject *v17;
  NSObject *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  sqlite3_stmt *v25;
  sqlite3_stmt *v26;
  double v27;
  sqlite3_stmt *v28;
  sqlite3_stmt *v29;
  sqlite3_stmt *v30;
  sqlite3_stmt *v31;
  sqlite3_stmt *v32;
  sqlite3_stmt *v33;
  sqlite3_stmt *v34;
  sqlite3_stmt *v35;
  sqlite3_stmt *v36;
  sqlite3_stmt *v37;
  uint64_t v38;
  sqlite3_stmt *v39;
  void *v40;
  NSObject *v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  uint8_t *v47;
  uint64_t v48;
  double v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[11];
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  unsigned int v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  unsigned int v83;
  __int16 v84;
  double v85;
  uint8_t buf[8];
  __int16 v87;
  double v88;

  if (sub_10008950C(a1 + 72))
  {
    v6 = a2[9];
    v79 = a2[8];
    v80 = v6;
    v81 = a2[10];
    v7 = a2[5];
    v75 = a2[4];
    v76 = v7;
    v8 = a2[7];
    v77 = a2[6];
    v78 = v8;
    v9 = a2[1];
    v71 = *a2;
    v72 = v9;
    v10 = a2[3];
    v73 = a2[2];
    v74 = v10;
    v70 = 0;
    v69 = 0.0;
    v68 = 0;
    v67 = 0;
    v66 = 0;
    v65 = 0;
    v64 = 0;
    v63 = 0;
    if (!a3)
    {
LABEL_16:
      if (*(_BYTE *)(a1 + 592))
        *(_QWORD *)&v76 = 0;
      sub_1014851F4(a1, (uint64_t)&v71);
      sub_100087AF4((_QWORD *)(a1 + 488), buf);
      v19 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
      if (sub_1000890C4(v19, 1, *((double *)&v71 + 1)))
      {
        v20 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
        if (sub_1000890C4(v20, 2, *(double *)&v71))
        {
          v21 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
          if (sub_1000CD75C(v21, 3, SDWORD2(v72)))
          {
            v22 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
            if (sub_1000890C4(v22, 4, *(double *)&v73))
            {
              v23 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
              if (sub_1000890C4(v23, 5, *((double *)&v73 + 1)))
              {
                v24 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                if (sub_10023C77C(v24, 6, v75))
                {
                  v25 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                  if (sub_10023C77C(v25, 7, SDWORD1(v75)))
                  {
                    v26 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                    v27 = *((double *)&v75 + 1);
                    if (*(_BYTE *)(a1 + 592))
                      v27 = 0.0;
                    if (sub_1000890C4(v26, 8, v27))
                    {
                      v28 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                      if (sub_1000890C4(v28, 9, *((double *)&v76 + 1)))
                      {
                        v29 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                        if (sub_1000890C4(v29, 10, *(double *)&v72))
                        {
                          v30 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                          if (sub_10023C77C(v30, 11, v80))
                          {
                            v31 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                            if (sub_10023C77C(v31, 12, *(_DWORD *)(a1 + 596)))
                            {
                              v32 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                              if (sub_10023C77C(v32, 13, SHIDWORD(v80)))
                              {
                                v33 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                                if (sub_10023C77C(v33, 14, v81))
                                {
                                  v34 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                                  if (sub_1000CD75C(v34, 15, BYTE6(v81)))
                                  {
                                    v35 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                                    if (sub_1000890C4(v35, 16, *(double *)&v76))
                                    {
                                      v36 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                                      if (sub_1000890C4(v36, 17, *(double *)&v74))
                                      {
                                        v37 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                                        if (sub_1000CD75C(v37, 18, BYTE8(v80)))
                                        {
                                          v38 = *(_QWORD *)(a1 + 80);
                                          v39 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                                          sub_10023C9B0(v38, v39);
                                          ++*(_DWORD *)(a1 + 132);
                                          if (a3)
                                          {
                                            if (*(_QWORD *)(a1 + 528))
                                            {
                                              LODWORD(v77) = sub_10063E99C(*(_QWORD *)(a1 + 80));
                                              *((_QWORD *)&v77 + 1) = sub_100219C4C(*(_QWORD *)(a1 + 80));
                                              DWORD1(v80) = *(_DWORD *)(a1 + 596);
                                              v40 = *(void **)(a1 + 536);
                                              if (v40)
                                              {
                                                v50[1] = 3221225472;
                                                v58 = v78;
                                                v59 = v79;
                                                v60 = v80;
                                                v61 = v81;
                                                v54 = v74;
                                                v55 = v75;
                                                v56 = v76;
                                                v57 = v77;
                                                v51 = v71;
                                                v52 = v72;
                                                v50[0] = _NSConcreteStackBlock;
                                                v50[2] = sub_101485600;
                                                v50[3] = &unk_1021B83E0;
                                                v50[4] = a1;
                                                v53 = v73;
                                                objc_msgSend(v40, "async:", v50);
                                              }
                                              else
                                              {
                                                (*(void (**)(void))(*(_QWORD *)(a1 + 528) + 16))();
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v48 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      return;
    }
    v11 = a2[9];
    v62[8] = a2[8];
    v62[9] = v11;
    v62[10] = a2[10];
    v12 = a2[5];
    v62[4] = a2[4];
    v62[5] = v12;
    v13 = a2[7];
    v62[6] = a2[6];
    v62[7] = v13;
    v14 = a2[1];
    v62[0] = *a2;
    v62[1] = v14;
    v15 = a2[3];
    v62[2] = a2[2];
    v62[3] = v15;
    v16 = sub_101484F98(a1, (uint64_t)v62, &v70, &v69, (double *)&v68, (double *)&v67, (_DWORD *)&v66 + 1, (int *)&v66, (double *)&v65, (_DWORD *)&v64 + 1, &v64, &v63);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v17 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v70;
      v87 = 2048;
      v88 = v69;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "CLStepCountRecorderDb::insertRecordUL,toAbsoluteEntry,absoluteCount,%d,absoluteCalibratedDistance,%lf", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v82 = 67109376;
      v83 = v70;
      v84 = 2048;
      v85 = v69;
      LODWORD(v49) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "CLStepCountRecorderDb::insertRecordUL,toAbsoluteEntry,absoluteCount,%d,absoluteCalibratedDistance,%lf", &v82, v49);
      v45 = (uint8_t *)v44;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLStepCountRecorderDb::insertRecordUL(const CLStepCountEntry &, BOOL)", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
    if (!v16)
      goto LABEL_15;
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v18 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning toAbsoluteEntry returned %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v82 = 67109120;
      v83 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "#Warning toAbsoluteEntry returned %d", &v82);
      v47 = (uint8_t *)v46;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLStepCountRecorderDb::insertRecordUL(const CLStepCountEntry &, BOOL)", "%s\n", v46);
      if (v47 != buf)
        free(v47);
    }
    if (v16 != 2)
    {
LABEL_15:
      DWORD2(v72) = v70;
      *(double *)&v73 = v69;
      *((_QWORD *)&v73 + 1) = v68;
      *(_QWORD *)&v74 = v67;
      *(_QWORD *)&v75 = __PAIR64__(v66, HIDWORD(v66));
      *((_QWORD *)&v76 + 1) = v65;
      LODWORD(v80) = HIDWORD(v64);
      HIDWORD(v80) = v64;
      LODWORD(v81) = v63;
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v41 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Database inaccessible for insertRecordUL", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      LOWORD(v71) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "Database inaccessible for insertRecordUL", &v71, 2);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLStepCountRecorderDb::insertRecordUL(const CLStepCountEntry &, BOOL)", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
  }
}

void sub_101484F6C(_Unwind_Exception *a1)
{
  unint64_t v2;

  v2 = STACK[0x370];
  STACK[0x370] = 0;
  if (v2)
    (*(void (**)(unint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_101484F98(uint64_t a1, uint64_t a2, unsigned int *a3, double *a4, double *a5, double *a6, _DWORD *a7, int *a8, double *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t result;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  double v30;
  double v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  double v38;
  _OWORD v39[11];
  _OWORD v40[11];
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  v41 = 0;
  result = sub_101486B30(a1, *(_DWORD *)(a2 + 24), &v41, &v42);
  if ((_DWORD)result == 2)
    return result;
  v21 = v41 + *(_DWORD *)(a2 + 24);
  v22 = *(unsigned __int8 *)(a1 + 592);
  v23 = DWORD2(v43);
  v24 = v51;
  v25 = v21 - v51;
  v26 = v21 - DWORD2(v43);
  if (*(_BYTE *)(a1 + 592))
    v25 = DWORD2(v43);
  *a3 = v25;
  if (!v22)
    v26 = v24;
  *a10 = v26;
  v27 = *a3;
  if (!(*a3 | v26))
  {
    *a4 = 0.0;
    *a5 = 0.0;
    *a6 = 0.0;
    *a7 = 0;
    *(_DWORD *)(a1 + 548) = 0;
    *a8 = 0;
    *(_DWORD *)(a1 + 552) = 0;
    *a9 = 0.0;
    *(_QWORD *)(a1 + 560) = 0;
    *a11 = 0;
    *(_DWORD *)(a1 + 600) = 0;
    *a12 = 0;
    *(_DWORD *)(a1 + 604) = 0;
    return result;
  }
  if (v22)
  {
    v28 = a12;
    v29 = v45;
    *a5 = *((double *)&v44 + 1);
  }
  else
  {
    v30 = *((double *)&v44 + 1);
    if (v27 > v23)
      v30 = *((double *)&v44 + 1) + *(double *)(a2 + 40);
    *a5 = v30;
    v29 = v45;
    v28 = a12;
    if (v27 >= v23)
    {
      *a6 = *(double *)&v45 + *(double *)(a2 + 48);
      v31 = *(double *)&v44 + *(double *)(a2 + 32);
      goto LABEL_14;
    }
  }
  *(_QWORD *)a6 = v29;
  v31 = *(double *)&v44;
LABEL_14:
  *a4 = v31;
  v32 = *(_OWORD *)(a2 + 144);
  v40[8] = *(_OWORD *)(a2 + 128);
  v40[9] = v32;
  v40[10] = *(_OWORD *)(a2 + 160);
  v33 = *(_OWORD *)(a2 + 80);
  v40[4] = *(_OWORD *)(a2 + 64);
  v40[5] = v33;
  v34 = *(_OWORD *)(a2 + 112);
  v40[6] = *(_OWORD *)(a2 + 96);
  v40[7] = v34;
  v35 = *(_OWORD *)(a2 + 16);
  v40[0] = *(_OWORD *)a2;
  v40[1] = v35;
  v36 = *(_OWORD *)(a2 + 48);
  v40[2] = *(_OWORD *)(a2 + 32);
  v40[3] = v36;
  v39[8] = v50;
  v39[9] = v51;
  v39[10] = v52;
  v39[4] = v46;
  v39[5] = v47;
  v39[6] = v48;
  v39[7] = v49;
  v39[0] = v42;
  v39[1] = v43;
  v39[2] = v44;
  v39[3] = v45;
  sub_101487484(a1, (uint64_t)v40, (uint64_t)v39);
  if (*(_BYTE *)(a1 + 592))
  {
    v37 = DWORD1(v46);
    *a7 = v46;
    v38 = *((double *)&v47 + 1);
  }
  else
  {
    *a7 = *(_DWORD *)(a1 + 572) + *(_DWORD *)(a2 + 64);
    v37 = *(_DWORD *)(a1 + 576) + *(_DWORD *)(a2 + 68);
    v38 = *(double *)(a2 + 88) + *(double *)(a1 + 584);
  }
  result = 0;
  *a8 = v37;
  *a9 = v38;
  *a11 = *(_DWORD *)(a1 + 608) + *(_DWORD *)(a2 + 156);
  *v28 = *(_DWORD *)(a1 + 612) + *(_DWORD *)(a2 + 160);
  return result;
}

double sub_1014851F4(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  _BOOL4 v16;
  double v19;
  double v20;
  double v21;
  double result;
  unint64_t v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  const char *v33;
  uint8_t *v34;
  int v35;
  int v36;
  int v37;
  __int16 v38;
  int v39;
  uint8_t buf[4];
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;

  v3 = *(_DWORD *)(a1 + 684);
  v4 = *(_DWORD *)(a2 + 24);
  if (v3 >= 1 && v4 >= v3)
  {
    v6 = v4 - v3;
    v7 = *(double *)(a2 + 32) - *(double *)(a1 + 688);
    v8 = *(double *)(a1 + 712);
    v9 = *(double *)(a2 + 88);
    v10 = *(double *)(a1 + 696);
    v12 = *(double *)(a2 + 8);
    v11 = *(double *)(a2 + 16);
    v13 = *(double *)(a1 + 704);
    v14 = *(unsigned __int8 *)(a2 + 152);
    *(_DWORD *)(a1 + 632) += v4 - v3;
    if (*(_BYTE *)(a1 + 680) && !*(_BYTE *)(a1 + 681))
    {
      ++*(_DWORD *)(a1 + 636);
      *(_DWORD *)(a1 + 640) += v6;
    }
    *(_WORD *)(a1 + 680) = 0;
    v16 = v7 > 0.0 && v4 == v3;
    if (v16 && v14 == 1)
    {
      ++*(_DWORD *)(a1 + 644);
    }
    else if (v16 && v14 != 1)
    {
      ++*(_DWORD *)(a1 + 648);
    }
    v19 = v9 - v10;
    if (v4 == v3 && v19 > 0.0)
      ++*(_DWORD *)(a1 + 652);
    v20 = (double)v6;
    if (v6 >= 1)
    {
      v21 = v7 / v20;
      if (v21 < 0.01)
        ++*(_DWORD *)(a1 + 656);
      if (v21 > 2.0)
        ++*(_DWORD *)(a1 + 660);
    }
    if (v20 / v19 > 20.0)
      ++*(_DWORD *)(a1 + 664);
    if (v6 >= 21 && v12 - v8 < 3.0)
      ++*(_DWORD *)(a1 + 668);
    if (v6 >= 1 && v11 == 0.0)
      ++*(_DWORD *)(a1 + 672);
    if (v4 == v3 && v11 - v13 > 0.0)
    {
      ++*(_DWORD *)(a1 + 676);
      v4 = v3;
    }
  }
  *(_DWORD *)(a1 + 684) = v4;
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 712) = result;
  HIDWORD(v23) = -1030792151 * *(_DWORD *)(a1 + 616);
  LODWORD(v23) = HIDWORD(v23);
  if ((v23 >> 1) <= 0x51EB851)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v24 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(_DWORD *)(a1 + 616);
      v26 = *(_DWORD *)(a1 + 632);
      v27 = *(_DWORD *)(a1 + 636);
      v28 = *(_DWORD *)(a1 + 640);
      *(_DWORD *)buf = 67109888;
      v41 = v25;
      v42 = 1024;
      v43 = v26;
      v44 = 1024;
      v45 = v27;
      v46 = 1024;
      v47 = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "fCA_runningNumEpochs: %d, countStepCountFailures log, fCA_numSteps: %d, fCA_droppedStepsOccurence: %d, fCA_recNumSteps: %d.", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v30 = *(_DWORD *)(a1 + 632);
      v31 = *(_DWORD *)(a1 + 636);
      v32 = *(_DWORD *)(a1 + 640);
      LOWORD(v36) = 1024;
      HIWORD(v36) = v30;
      v37 = v31;
      v38 = 1024;
      v39 = v32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "fCA_runningNumEpochs: %d, countStepCountFailures log, fCA_numSteps: %d, fCA_droppedStepsOccurence: %d, fCA_recNumSteps: %d.", &v35, 26, 67109888, v36);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountRecorderDb::countStepCountFailures(const CLStepCountEntry &)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  v29 = *(_DWORD *)(a1 + 616) + 1;
  *(_DWORD *)(a1 + 616) = v29;
  if (v29 > *(_DWORD *)(a1 + 624))
  {
    sub_10148802C((_DWORD *)a1);
    result = 0.0;
    *(_OWORD *)(a1 + 648) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_OWORD *)(a1 + 632) = 0u;
    *(_DWORD *)(a1 + 616) = 0;
  }
  return result;
}

uint64_t sub_101485600(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[11];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 528);
  v2 = *(_OWORD *)(a1 + 152);
  v3 = *(_OWORD *)(a1 + 184);
  v8[8] = *(_OWORD *)(a1 + 168);
  v8[9] = v3;
  v8[10] = *(_OWORD *)(a1 + 200);
  v4 = *(_OWORD *)(a1 + 88);
  v5 = *(_OWORD *)(a1 + 120);
  v8[4] = *(_OWORD *)(a1 + 104);
  v8[5] = v5;
  v8[6] = *(_OWORD *)(a1 + 136);
  v8[7] = v2;
  v6 = *(_OWORD *)(a1 + 56);
  v8[2] = *(_OWORD *)(a1 + 72);
  v8[3] = v4;
  v8[0] = *(_OWORD *)(a1 + 40);
  v8[1] = v6;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v8);
}

uint64_t sub_101485674(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int8x16_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 504), &v25);
  v4 = sub_1000CC9A8(&v25, (uint64_t)&v11);
  if (!(_DWORD)v4)
  {
    *(int8x16_t *)a2 = vextq_s8(v12, v12, 8uLL);
    v5 = v20;
    *(_QWORD *)(a2 + 16) = v19;
    *(_OWORD *)(a2 + 32) = v14;
    v6 = v16;
    *(_QWORD *)(a2 + 48) = v15;
    v7 = v17;
    v8 = v18;
    *(_QWORD *)(a2 + 64) = v6;
    *(_QWORD *)(a2 + 72) = v7;
    *(_DWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 24) = v13;
    *(_QWORD *)(a2 + 144) = v5;
    *(_QWORD *)(a2 + 156) = v21;
    *(_BYTE *)(a2 + 152) = v22;
    *(_BYTE *)(a2 + 166) = v23;
    *(_QWORD *)(a2 + 80) = v24;
    *(_QWORD *)(a2 + 88) = v8;
  }
  v9 = v25;
  v25 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return v4;
}

void sub_10148574C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  *(_QWORD *)(v1 - 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101485770(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(double *)(a3 + 8) - *(double *)(a2 + 8) > 1.0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 120))(result, a3, 1);
  return result;
}

uint64_t sub_1014857A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  int v10;
  uint8_t buf[1640];

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v9 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_10008950C(v4))
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v5 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "StepCountRecorderDb: running aggregateRecords", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "StepCountRecorderDb: running aggregateRecords", &v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "virtual long CLStepCountRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM StepCountHistory ORDER BY startTime ASC");
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  return -1;
}

void sub_101486500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,char a50)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (__p)
    operator delete(__p);
  sub_10187E514((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_1014865B4(char **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v13 = *a1;
    v14 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 3);
    v15 = v14 + 1;
    if (v14 + 1 > 0x222222222222222)
      sub_100259694();
    v16 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v4 - (_QWORD)v13) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x111111111111111)
      v17 = 0x222222222222222;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 > 0x222222222222222)
        sub_10025955C();
      v18 = (char *)operator new(120 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = a2[5];
    v20 = &v18[120 * v14];
    *((_OWORD *)v20 + 4) = a2[4];
    *((_OWORD *)v20 + 5) = v19;
    *((_OWORD *)v20 + 6) = a2[6];
    *((_QWORD *)v20 + 14) = *((_QWORD *)a2 + 14);
    v21 = a2[1];
    *(_OWORD *)v20 = *a2;
    *((_OWORD *)v20 + 1) = v21;
    v22 = a2[2];
    v23 = a2[3];
    v12 = v20 + 120;
    *((_OWORD *)v20 + 2) = v22;
    *((_OWORD *)v20 + 3) = v23;
    if (v5 != v13)
    {
      do
      {
        v24 = *(_OWORD *)(v5 - 120);
        v25 = *(_OWORD *)(v5 - 104);
        v26 = *(_OWORD *)(v5 - 88);
        *(_OWORD *)(v20 - 72) = *(_OWORD *)(v5 - 72);
        *(_OWORD *)(v20 - 88) = v26;
        *(_OWORD *)(v20 - 104) = v25;
        *(_OWORD *)(v20 - 120) = v24;
        v27 = *(_OWORD *)(v5 - 56);
        v28 = *(_OWORD *)(v5 - 40);
        v29 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v20 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v20 - 24) = v29;
        *(_OWORD *)(v20 - 40) = v28;
        *(_OWORD *)(v20 - 56) = v27;
        v20 -= 120;
        v5 -= 120;
      }
      while (v5 != v13);
      v5 = *a1;
    }
    *a1 = v20;
    a1[1] = v12;
    a1[2] = &v18[120 * v17];
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[3];
    *((_OWORD *)v5 + 2) = a2[2];
    *((_OWORD *)v5 + 3) = v8;
    *(_OWORD *)v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    v9 = a2[4];
    v10 = a2[5];
    v11 = a2[6];
    *((_QWORD *)v5 + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)v5 + 5) = v10;
    *((_OWORD *)v5 + 6) = v11;
    *((_OWORD *)v5 + 4) = v9;
    v12 = v5 + 120;
  }
  a1[1] = v12;
}

uint64_t sub_10148674C(uint64_t a1)
{
  return sub_1014857A0(a1 - 72);
}

uint64_t sub_101486754(uint64_t a1, double a2, double a3)
{
  _OWORD v4[3];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  sub_100087DE0(a1, 0, (uint64_t)v4, a2, a3);
  return LODWORD(v4[0]);
}

uint64_t sub_10148678C(uint64_t a1, double a2, double a3)
{
  _OWORD v4[3];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  sub_100087DE0(a1 - 480, 0, (uint64_t)v4, a2, a3);
  return LODWORD(v4[0]);
}

uint64_t sub_1014867C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v6 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_10008950C(v4))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM StepCountHistory ORDER BY startTime ASC");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_101486AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_10187E514((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_101486AE8(uint64_t a1)
{
  _WORD *v1;

  v1 = (_WORD *)(a1 + 112);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  v1[204] = 257;
  return (*(uint64_t (**)(_WORD *))(*(_QWORD *)v1 + 24))(v1);
}

uint64_t sub_101486B30(uint64_t a1, unsigned int a2, _DWORD *a3, _OWORD *a4)
{
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  unsigned int v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint8_t *v21;
  double v22;
  NSObject *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint8_t *v28;
  BOOL v29;
  unsigned int v30;
  NSObject *v31;
  int v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  const char *v40;
  uint8_t *v41;
  int v42;
  int v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  uint8_t *v47;
  int v48;
  int v49;
  double v50;
  uint8_t *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  int v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  int v69;
  uint8_t buf[4];
  int v71;
  __int16 v72;
  unsigned int v73;
  __int16 v74;
  int v75;

  if (a2 == -1)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v8 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "currentCount passed to getCountOffset is invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      LOWORD(v53) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "currentCount passed to getCountOffset is invalid", &v53, 2);
      v47 = (uint8_t *)v46;
      sub_100512490("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)", "%s\n", v46);
      if (v47 != buf)
        free(v47);
    }
  }
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v53 = 0u;
  v9 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 104))(a1, &v53);
  if ((_DWORD)v9)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v10 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v71 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Call to getMostRecentRecordUL failed, returning %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v64 = 67109120;
      v65 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "Call to getMostRecentRecordUL failed, returning %d", &v64);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
    v11 = 0;
  }
  else
  {
    v11 = v62 + DWORD2(v54);
  }
  if (*(_BYTE *)(a1 + 520))
  {
    *(_DWORD *)(a1 + 568) = -a2;
    *(_BYTE *)(a1 + 520) = 0;
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v12 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_DWORD *)(a1 + 544);
      v14 = *(_DWORD *)(a1 + 568);
      *(_DWORD *)buf = 67109632;
      v71 = v13;
      v72 = 1024;
      v73 = a2;
      v74 = 1024;
      v75 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Reset requested.  Counts (prev: %d cur:%d). New fOffset (%d).", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v42 = *(_DWORD *)(a1 + 544);
      v43 = *(_DWORD *)(a1 + 568);
      v64 = 67109632;
      v65 = v42;
      v66 = 1024;
      v67 = a2;
      v68 = 1024;
      v69 = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "Reset requested.  Counts (prev: %d cur:%d). New fOffset (%d).", &v64, 20, (_DWORD)v53);
      v45 = (uint8_t *)v44;
      sub_100512490("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
  }
  if ((_DWORD)v9 != 2)
  {
    v15 = *(_DWORD *)(a1 + 544);
    if (v15 == -1)
    {
      *(_DWORD *)(a1 + 568) = v11 - a2;
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v23 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
      {
        v24 = *(_DWORD *)(a1 + 544);
        v25 = *(_DWORD *)(a1 + 568);
        *(_DWORD *)buf = 67109632;
        v71 = v24;
        v72 = 1024;
        v73 = a2;
        v74 = 1024;
        v75 = v25;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Reset current step count.  Counts (prev: %d cur:%d). New fOffset (%d).", buf, 0x14u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8480);
        v26 = *(_DWORD *)(a1 + 544);
        v27 = *(_DWORD *)(a1 + 568);
        v64 = 67109632;
        v65 = v26;
        v66 = 1024;
        v67 = a2;
        v68 = 1024;
        v69 = v27;
        LODWORD(v52) = 20;
        v22 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "Reset current step count.  Counts (prev: %d cur:%d). New fOffset (%d).", &v64, v52);
        goto LABEL_41;
      }
    }
    else if (a2 > 0x63 || a2 >= v15)
    {
      v29 = a2 >= v15;
      v30 = a2 - v15;
      if (!v29 || v30 >= 0x65)
      {
        *(_DWORD *)(a1 + 568) = v11 - a2;
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8480);
        v31 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
        {
          v32 = *(_DWORD *)(a1 + 544);
          v33 = *(_DWORD *)(a1 + 568);
          *(_DWORD *)buf = 67240704;
          v71 = v32;
          v72 = 1026;
          v73 = a2;
          v74 = 1026;
          v75 = v33;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "An error in step counts is highly likely.  Treating current count as new 0.  Count (prev: %{public}d cur:%{public}d). New fOffset (%{public}d).", buf, 0x14u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_1021B8480);
          v48 = *(_DWORD *)(a1 + 544);
          v49 = *(_DWORD *)(a1 + 568);
          v64 = 67240704;
          v65 = v48;
          v66 = 1026;
          v67 = a2;
          v68 = 1026;
          v69 = v49;
          LODWORD(v52) = 20;
          v50 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "An error in step counts is highly likely.  Treating current count as new 0.  Count (prev: %{public}d cur:%{public}d). New fOffset (%{public}d).", &v64, v52);
          v28 = v51;
          sub_100512490("Generic", 1, 0, 0, "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)", "%s\n", v50);
          goto LABEL_42;
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 568) = v11 - a2;
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v16 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_DWORD *)(a1 + 544);
        v18 = *(_DWORD *)(a1 + 568);
        *(_DWORD *)buf = 67109632;
        v71 = v17;
        v72 = 1024;
        v73 = a2;
        v74 = 1024;
        v75 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Oscar restart detected.  Count (prev: %d cur:%d). New fOffset (%d).", buf, 0x14u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8480);
        v19 = *(_DWORD *)(a1 + 544);
        v20 = *(_DWORD *)(a1 + 568);
        v64 = 67109632;
        v65 = v19;
        v66 = 1024;
        v67 = a2;
        v68 = 1024;
        v69 = v20;
        LODWORD(v52) = 20;
        v22 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "Oscar restart detected.  Count (prev: %d cur:%d). New fOffset (%d).", &v64, v52);
LABEL_41:
        v28 = v21;
        sub_100512490("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)", "%s\n", v22);
LABEL_42:
        if (v28 != buf)
          free(v28);
      }
    }
  }
  *a3 = *(_DWORD *)(a1 + 568);
  *(_DWORD *)(a1 + 544) = a2;
  v34 = v62;
  a4[8] = v61;
  a4[9] = v34;
  a4[10] = v63;
  v35 = v58;
  a4[4] = v57;
  a4[5] = v35;
  v36 = v60;
  a4[6] = v59;
  a4[7] = v36;
  v37 = v54;
  *a4 = v53;
  a4[1] = v37;
  v38 = v56;
  a4[2] = v55;
  a4[3] = v38;
  return v9;
}

uint64_t sub_101487484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x2_t *v6;
  NSObject *v7;
  int v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned __int32 v15;
  double v16;
  NSObject *v17;
  int v18;
  int v19;
  uint64_t v20;
  NSObject *v21;
  int v22;
  int v23;
  int32x2_t v25;
  BOOL v26;
  BOOL v27;
  double v28;
  NSObject *v29;
  int v30;
  int v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  int v35;
  uint8_t *v36;
  double v37;
  unsigned int v38;
  unsigned int v39;
  NSObject *v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  double v47;
  uint8_t *v48;
  uint8_t *v49;
  int v50;
  int v51;
  uint64_t v52;
  const char *v53;
  uint8_t *v54;
  int v55;
  int v56;
  uint64_t v57;
  const char *v58;
  uint8_t *v59;
  int v60;
  int v61;
  const char *v62;
  uint8_t *v63;
  int v64;
  int v65;
  uint64_t v66;
  const char *v67;
  uint8_t *v68;
  uint64_t v69;
  double v70;
  __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  uint8_t buf[4];
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  uint64_t v80;

  v6 = (int32x2_t *)(a1 + 548);
  if (*(_BYTE *)(a1 + 521))
  {
    *(int32x2_t *)(a1 + 572) = vneg_s32(*(int32x2_t *)(a2 + 64));
    *(double *)(a1 + 584) = -*(double *)(a2 + 88);
    *(_BYTE *)(a1 + 521) = 0;
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v7 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_DWORD *)(a1 + 572);
      v9 = *(_DWORD *)(a1 + 576);
      v10 = *(_QWORD *)(a1 + 584);
      *(_DWORD *)buf = 67109632;
      v76 = v8;
      v77 = 1024;
      v78 = v9;
      v79 = 2048;
      v80 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Reset requested.  New offset (%d, %d, %f).", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v55 = *(_DWORD *)(a1 + 572);
      v56 = *(_DWORD *)(a1 + 576);
      v57 = *(_QWORD *)(a1 + 584);
      LODWORD(v70) = 67109632;
      HIDWORD(v70) = v55;
      v71 = 1024;
      v72 = v56;
      v73 = 2048;
      v74 = v57;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Reset requested.  New offset (%d, %d, %f).", &v70, 24, v70);
      v59 = (uint8_t *)v58;
      sub_100512490("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)", "%s\n", v58);
      if (v59 != buf)
        free(v59);
    }
    *(int32x2_t *)(a1 + 608) = vneg_s32(*(int32x2_t *)(a2 + 156));
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v11 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_DWORD *)(a1 + 608);
      v13 = *(_DWORD *)(a1 + 612);
      *(_DWORD *)buf = 67109376;
      v76 = v12;
      v77 = 1024;
      v78 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Reset requested.  New elevation offset (%d, %d).", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v60 = *(_DWORD *)(a1 + 608);
      v61 = *(_DWORD *)(a1 + 612);
      LODWORD(v70) = 67109376;
      HIDWORD(v70) = v60;
      v71 = 1024;
      v72 = v61;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Reset requested.  New elevation offset (%d, %d).", &v70, 14);
      v63 = (uint8_t *)v62;
      sub_100512490("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)", "%s\n", v62);
      if (v63 != buf)
        free(v63);
    }
  }
  v14 = v6->i32[0];
  if (v6->i32[0] == -1
    || (v15 = *(_DWORD *)(a1 + 552), v15 == -1)
    || (v16 = *(double *)(a1 + 560), v16 == 1.79769313e308))
  {
    v6[3] = vsub_s32(*(int32x2_t *)(a3 + 64), *(int32x2_t *)(a2 + 64));
    *(double *)(a1 + 584) = *(double *)(a3 + 88) - *(double *)(a2 + 88);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v17 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_DWORD *)(a1 + 572);
      v19 = *(_DWORD *)(a1 + 576);
      v20 = *(_QWORD *)(a1 + 584);
      *(_DWORD *)buf = 67109632;
      v76 = v18;
      v77 = 1024;
      v78 = v19;
      v79 = 2048;
      v80 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Locationd restart detected.  New offset (%d, %d, %f).", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v50 = *(_DWORD *)(a1 + 572);
      v51 = *(_DWORD *)(a1 + 576);
      v52 = *(_QWORD *)(a1 + 584);
      LODWORD(v70) = 67109632;
      HIDWORD(v70) = v50;
      v71 = 1024;
      v72 = v51;
      v73 = 2048;
      v74 = v52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Locationd restart detected.  New offset (%d, %d, %f).", &v70, 24, v70);
      v54 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)", "%s\n", v53);
      if (v54 != buf)
        free(v54);
    }
    *(int32x2_t *)(a1 + 608) = vsub_s32(*(int32x2_t *)(a3 + 156), *(int32x2_t *)(a2 + 156));
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v21 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      v22 = *(_DWORD *)(a1 + 608);
      v23 = *(_DWORD *)(a1 + 612);
      *(_DWORD *)buf = 67109376;
      v76 = v22;
      v77 = 1024;
      v78 = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Locationd restart detected.  New elevation offset (%d, %d).", buf, 0xEu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v37 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Locationd restart detected.  New elevation offset (%d, %d).", &v70);
    goto LABEL_71;
  }
  v25 = *(int32x2_t *)(a2 + 64);
  v26 = v25.i32[0] >= v14 || v25.i32[0] >= 0x14u;
  if (v26
    && (v25.i32[1] < v15 ? (v27 = v25.i32[1] >= 0x14u) : (v27 = 1), v27 && (v28 = *(double *)(a2 + 88), v28 >= v16)))
  {
    v26 = v25.i32[0] >= v14;
    v38 = v25.i32[0] - v14;
    if (!v26 || v38 > 0x14 || (v26 = v25.i32[1] >= v15, v39 = v25.i32[1] - v15, !v26) || v39 >= 0x15)
    {
      v6[3] = vsub_s32(*(int32x2_t *)(a3 + 64), v25);
      *(double *)(a1 + 584) = *(double *)(a3 + 88) - v28;
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v40 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
      {
        v41 = *(_DWORD *)(a1 + 572);
        v42 = *(_DWORD *)(a1 + 576);
        v43 = *(_QWORD *)(a1 + 584);
        *(_DWORD *)buf = 67240704;
        v76 = v41;
        v77 = 1026;
        v78 = v42;
        v79 = 2050;
        v80 = v43;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "An error in floor counts is highly likely.  Treating current count as new 0.  New offset (%{public}d, %{public}d, %{public}f).", buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8480);
        v44 = *(_DWORD *)(a1 + 572);
        v45 = *(_DWORD *)(a1 + 576);
        v46 = *(_QWORD *)(a1 + 584);
        LODWORD(v70) = 67240704;
        HIDWORD(v70) = v44;
        v71 = 1026;
        v72 = v45;
        v73 = 2050;
        v74 = v46;
        LODWORD(v69) = 24;
        v47 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "An error in floor counts is highly likely.  Treating current count as new 0.  New offset (%{public}d, %{public}d, %{public}f).", &v70, v69);
        v49 = v48;
        sub_100512490("Generic", 1, 0, 0, "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)", "%s\n", v47);
        goto LABEL_72;
      }
    }
  }
  else
  {
    v6[3] = vsub_s32(*(int32x2_t *)(a3 + 64), v25);
    *(double *)(a1 + 584) = *(double *)(a3 + 88) - *(double *)(a2 + 88);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v29 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      v30 = *(_DWORD *)(a1 + 572);
      v31 = *(_DWORD *)(a1 + 576);
      v32 = *(_QWORD *)(a1 + 584);
      *(_DWORD *)buf = 67109632;
      v76 = v30;
      v77 = 1024;
      v78 = v31;
      v79 = 2048;
      v80 = v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Oscar restart detected.  New offset (%d, %d, %f).", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v64 = *(_DWORD *)(a1 + 572);
      v65 = *(_DWORD *)(a1 + 576);
      v66 = *(_QWORD *)(a1 + 584);
      LODWORD(v70) = 67109632;
      HIDWORD(v70) = v64;
      v71 = 1024;
      v72 = v65;
      v73 = 2048;
      v74 = v66;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Oscar restart detected.  New offset (%d, %d, %f).", &v70, 24, v70);
      v68 = (uint8_t *)v67;
      sub_100512490("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)", "%s\n", v67);
      if (v68 != buf)
        free(v68);
    }
    *(int32x2_t *)(a1 + 608) = vsub_s32(*(int32x2_t *)(a3 + 156), *(int32x2_t *)(a2 + 156));
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v33 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      v34 = *(_DWORD *)(a1 + 608);
      v35 = *(_DWORD *)(a1 + 612);
      *(_DWORD *)buf = 67109376;
      v76 = v34;
      v77 = 1024;
      v78 = v35;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "Oscar restart detected.  New elevation offset (%d, %d).", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      v37 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Oscar restart detected.  New elevation offset (%d, %d).", &v70);
LABEL_71:
      v49 = v36;
      sub_100512490("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)", "%s\n", v37);
LABEL_72:
      if (v49 != buf)
        free(v49);
    }
  }
LABEL_25:
  *v6 = *(int32x2_t *)(a2 + 64);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 156);
  return 0;
}

void sub_10148802C(_DWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  int v35;
  void **v36;
  uint64_t v37;
  NSDictionary *(*v38)(uint64_t);
  void *v39;
  _DWORD *v40;
  int v41;
  int v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  uint8_t buf[4];
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021B8480);
  v2 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Attempt to send core anaytics from StepCountRecorderDb", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    LOWORD(v41) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "Attempt to send core anaytics from StepCountRecorderDb", &v41, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLStepCountRecorderDb::sendAnalytics()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021B8480);
  v3 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    v4 = a1[158];
    v5 = a1[166];
    v6 = a1[168];
    v7 = a1[169];
    v8 = a1[163];
    v9 = a1[162];
    v10 = a1[161];
    v11 = a1[167];
    v12 = a1[165];
    v13 = a1[164];
    v14 = a1[159];
    v15 = a1[160];
    *(_DWORD *)buf = 67111936;
    v59 = v4;
    v60 = 1024;
    v61 = v5;
    v62 = 1024;
    v63 = v6;
    v64 = 1024;
    v65 = v7;
    v66 = 1024;
    v67 = v8;
    v68 = 1024;
    v69 = v9;
    v70 = 1024;
    v71 = v10;
    v72 = 1024;
    v73 = v11;
    v74 = 1024;
    v75 = v12;
    v76 = 1024;
    v77 = v13;
    v78 = 1024;
    v79 = v14;
    v80 = 1024;
    v81 = v15;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Step Counter Core Analytics: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", buf, 0x4Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v20 = a1[166];
    v21 = a1[168];
    v22 = a1[169];
    v23 = a1[162];
    v24 = a1[161];
    v25 = a1[167];
    v26 = a1[165];
    v27 = a1[164];
    v28 = a1[159];
    v29 = a1[160];
    LOWORD(v42) = 1024;
    HIWORD(v42) = v20;
    LOWORD(v43) = HIWORD(v22);
    HIWORD(v43) = 1024;
    v44 = 1024;
    v45 = v23;
    v46 = 1024;
    v47 = v24;
    v48 = 1024;
    v49 = v25;
    v50 = 1024;
    v51 = v26;
    v52 = 1024;
    v53 = v27;
    v54 = 1024;
    v55 = v28;
    v56 = 1024;
    v57 = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Step Counter Core Analytics: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", &v41, 74, v35, (_DWORD)v36, v37, (_DWORD)v38, (_DWORD)v39, (_DWORD)v40, 67111936, v42, v21,
      v43);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLStepCountRecorderDb::sendAnalytics()", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  if (objc_opt_class(MCProfileConnection, v16)
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    v36 = _NSConcreteStackBlock;
    v37 = 3221225472;
    v38 = sub_1014885A4;
    v39 = &unk_102131FE8;
    v40 = a1;
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.Pedometer.DroppedStepsEval"), &v36);
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    v17 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "StepCountRecorderDb: Not authorized to submit analytics without IHA", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8480);
      LOWORD(v41) = 0;
      LODWORD(v34) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "StepCountRecorderDb: Not authorized to submit analytics without IHA", &v41, v34);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountRecorderDb::sendAnalytics()", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
}

NSDictionary *sub_1014885A4(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[12];
  _QWORD v4[12];

  v1 = *(_QWORD *)(a1 + 32);
  v3[0] = CFSTR("binNumSteps");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)(round((double)*(int *)(v1 + 632) / 1000.0) * 1000.0));
  v3[1] = CFSTR("countCadenceEstimateHigh");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 664));
  v3[2] = CFSTR("countFirstStepTimeNotUpdated");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 672));
  v3[3] = CFSTR("countFirstStepTimeUpdatedUnexpectedly");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 676));
  v3[4] = CFSTR("countNonZeroActiveTimeWithZeroCounts");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 652));
  v3[5] = CFSTR("countNonZeroDistWithZeroCountsNoStroller");
  v4[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 648));
  v3[6] = CFSTR("countNonZeroDistWithZeroCountsStroller");
  v4[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 644));
  v3[7] = CFSTR("countStepCountJumpsUnexpectedly");
  v4[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 668));
  v3[8] = CFSTR("countStepEstimateHigh");
  v4[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 660));
  v3[9] = CFSTR("countStepEstimateLow");
  v4[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 656));
  v3[10] = CFSTR("droppedStepsOccurence");
  v4[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 636));
  v3[11] = CFSTR("recNumSteps");
  v4[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 640));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 12);
}

uint64_t sub_10148877C(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_1019560F4(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_101488B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_101488BC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B8598);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B8598);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B8598);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLStepCountEntry>::setDatabaseAccessible() [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1014891C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014891F4(uint64_t a1)
{
  return sub_101488BC4(a1 - 72);
}

void sub_1014891FC(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_101489228(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_101956260(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1014895C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  sub_1018B38B4((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_10148962C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_1019563CC(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_10148988C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101956538(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_101489AC4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1019566A4(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_101489CEC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101489D18()
{
  qword_10230F1E8 = (uint64_t)"id";
  dword_10230F1F0 = 1;
  word_10230F1F4 = 257;
  byte_10230F1F8 = 0;
  byte_10230F210 = 0;
  qword_10230F218 = (uint64_t)"startTime";
  dword_10230F220 = 2;
  word_10230F224 = 0;
  byte_10230F228 = 0;
  byte_10230F240 = 0;
  qword_10230F248 = (uint64_t)"timestamp";
  dword_10230F250 = 2;
  word_10230F254 = 0;
  byte_10230F258 = 0;
  byte_10230F270 = 0;
  qword_10230F278 = (uint64_t)"count";
  dword_10230F280 = 1;
  word_10230F284 = 0;
  byte_10230F288 = 0;
  byte_10230F2A0 = 0;
  qword_10230F2A8 = (uint64_t)"distance";
  dword_10230F2B0 = 2;
  word_10230F2B4 = 0;
  byte_10230F2B8 = 0;
  byte_10230F2D0 = 0;
  qword_10230F2D8 = (uint64_t)"rawdistance";
  dword_10230F2E0 = 2;
  word_10230F2E4 = 0;
  byte_10230F2E8 = 0;
  byte_10230F300 = 0;
  qword_10230F308 = (uint64_t)"floorsAscended";
  dword_10230F310 = 1;
  word_10230F314 = 0;
  byte_10230F318 = 0;
  byte_10230F330 = 0;
  qword_10230F338 = (uint64_t)"floorsDescended";
  dword_10230F340 = 1;
  word_10230F344 = 0;
  byte_10230F348 = 0;
  byte_10230F360 = 0;
  qword_10230F368 = (uint64_t)"pace";
  dword_10230F370 = 2;
  word_10230F374 = 0;
  byte_10230F378 = 0;
  byte_10230F390 = 0;
  qword_10230F398 = (uint64_t)"activeTime";
  dword_10230F3A0 = 2;
  word_10230F3A4 = 0;
  byte_10230F3A8 = 0;
  byte_10230F3C0 = 0;
  qword_10230F3C8 = (uint64_t)"firstStepTime";
  dword_10230F3D0 = 2;
  word_10230F3D4 = 0;
  byte_10230F3D8 = 0;
  byte_10230F3F0 = 0;
  qword_10230F3F8 = (uint64_t)"pushCount";
  dword_10230F400 = 1;
  word_10230F404 = 0;
  byte_10230F408 = 0;
  byte_10230F420 = 0;
  qword_10230F428 = (uint64_t)"workoutType";
  dword_10230F430 = 1;
  word_10230F434 = 0;
  byte_10230F438 = 0;
  byte_10230F450 = 0;
  qword_10230F458 = (uint64_t)"elevationAscended";
  dword_10230F460 = 1;
  word_10230F464 = 0;
  byte_10230F468 = 0;
  byte_10230F480 = 0;
  qword_10230F488 = (uint64_t)"elevationDescended";
  dword_10230F490 = 1;
  word_10230F494 = 0;
  byte_10230F498 = 0;
  byte_10230F4B0 = 0;
  qword_10230F4B8 = (uint64_t)"distanceSource";
  dword_10230F4C0 = 1;
  word_10230F4C4 = 0;
  byte_10230F4C8 = 0;
  byte_10230F4E0 = 0;
  qword_10230F4E8 = (uint64_t)"currentCadence";
  dword_10230F4F0 = 2;
  word_10230F4F4 = 0;
  byte_10230F4F8 = 0;
  byte_10230F510 = 0;
  qword_10230F518 = (uint64_t)"distanceMobility";
  dword_10230F520 = 2;
  word_10230F524 = 0;
  byte_10230F528 = 0;
  byte_10230F540 = 0;
  qword_10230F548 = (uint64_t)"pedometerArmConstrainedState";
  dword_10230F550 = 1;
  word_10230F554 = 0;
  byte_10230F558 = 0;
  byte_10230F570 = 0;
  qword_10230F578 = 0;
  dword_10230F580 = 5;
  word_10230F584 = 0;
  byte_10230F588 = 0;
  byte_10230F5A0 = 0;
  qword_10230F5A8 = (uint64_t)"startTime";
  unk_10230F5B0 = 0;
}

void sub_101489FF0(id a1)
{
  qword_10230F610 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLStepCountNotifierSilo"));
}

uint64_t sub_10148A0A4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10148AA68;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230F630 != -1)
    dispatch_once(&qword_10230F630, block);
  return qword_1023140D8;
}

uint64_t sub_10148A220(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_1021B8960);
  v4 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLStepCountNotifier::receiveWorkoutDistanceAnalyticsMessage: Data received", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021B8960);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 1, "CLStepCountNotifier::receiveWorkoutDistanceAnalyticsMessage: Data received", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLStepCountNotifier::receiveWorkoutDistanceAnalyticsMessage(NSData *)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_100DE92C4(*(std::mutex **)(a1 + 760), a2);
}

uint64_t sub_10148A3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];
  _QWORD v9[5];

  v4 = sub_1001FBB04(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 32) + 16))(v4 + 32, a2);
  if ((_DWORD)a2)
  {
    v6 = sub_1001FBB04(0);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10148E2B4;
    v9[3] = &unk_10212ECA0;
    v9[4] = a1;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v6 + 32) + 48))(v6 + 32, v9);
    v7 = sub_1001FBB04(0);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10020E80C;
    v8[3] = &unk_1021B87E8;
    v8[4] = a1;
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(v7 + 32) + 40))(v7 + 32, v8);
  }
  return result;
}

id sub_10148A940(uint64_t a1)
{
  id v2;
  _QWORD v4[5];

  v2 = objc_msgSend(*(id *)(a1 + 32), "silo");
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10148A9A8;
  v4[3] = &unk_10212BB58;
  v4[4] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(v2, "async:", v4);
}

id sub_10148A9A8(uint64_t a1)
{
  objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier")), "resume");
  return objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "vendor"), "proxyForService:", CFSTR("CLOutdoorService")), "resume");
}

void sub_10148AA38(id a1)
{
  sub_100197040();
  if (sub_1000C4240())
  {
    if (sub_100C1DCF8())
      byte_10230F620 = 1;
  }
}

void sub_10148AA68()
{
  operator new();
}

void sub_10148AAB0()
{
  operator delete();
}

void sub_10148AAD4(uint64_t a1, void *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)sub_10148BAB0(a1, "CLStepCountNotifier", a2);
  v2[14] = off_1021B8718;
  v2[15] = off_1021B8760;
  *v2 = off_1021B8608;
  operator new();
}

void sub_10148B8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v20 = v14 + 838;
  v21 = v14[839];
  v14[839] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *v20;
  *v20 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v14[834];
  v14[834] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v14[833];
  v14[833] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v14[832];
  v14[832] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *v15;
  *v15 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  sub_1010480A0(v18);
  sub_100CDD8F0(v17);
  sub_100261F44(a11);
  sub_1011DC234(v16);
  sub_1011DC1CC(a12);
  sub_10041D328(a13);
  sub_100261F44(a14);
  sub_10148CBCC((uint64_t)v14);
  _Unwind_Resume(a1);
}

uint64_t sub_10148BAB0(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021B8990;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10148BB30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10148BB4C(uint64_t a1, int a2, double a3)
{
  void **v5;

  v5 = (void **)(a1 + 144);
  sub_10148D020(a1 + 144, a3 * 129600.0, a3 * 60.0);
  sub_10148D020((uint64_t)v5, a3 * 259200.0, a3 * 300.0);
  if (a2)
    sub_10148D330(v5, a3 * 604800.0);
}

void sub_10148BBDC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  char v9;
  NSObject *v10;
  _QWORD handler[5];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  int v15;

  v15 = 86400;
  v2 = sub_100127B9C();
  sub_100081C10(v2, &v13);
  v3 = sub_1001E4B84(v13, "StepCountingAggregateTimerInterval", &v15);
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v3)
    v7 = 1000000000 * v15;
  else
    v7 = 86400000000000;
  v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)objc_msgSend(*(id *)(a1 + 40), "queue"));
  *(_QWORD *)(a1 + 6240) = v8;
  dispatch_source_set_timer(v8, 0, v7, 0xDF8475800uLL);
  v9 = *(_BYTE *)(a1 + 6232);
  v10 = *(NSObject **)(a1 + 6240);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10148D5E4;
  handler[3] = &unk_1021468D0;
  handler[4] = a1;
  v12 = v9;
  dispatch_source_set_event_handler(v10, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 6240));
}

void sub_10148BD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10148BD34(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLStepCountNotifier::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B88E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10148E57C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10148BEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10148BF0C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLStepCountNotifier::onMotionStateObserverNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B88E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10148EE68(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10148C0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10148C0E4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLStepCountNotifier::onUserInfoUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B88E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onUserInfoUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onUserInfoUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10148EEB0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10148C29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10148C2BC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLStepCountNotifier::onActivePedStateCoprocessorData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B88E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onActivePedStateCoprocessorData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onActivePedStateCoprocessorData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_10148C454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10148C470(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLStepCountNotifier::onActivePedStateCoprocessorDataSpectator");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B88E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onActivePedStateCoprocessorDataSpectator", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onActivePedStateCoprocessorDataSpectator\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_10148F174((_DWORD *)a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_10148C620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10148C640(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLStepCountNotifier::onPedometerPathStraightnessUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B88E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onPedometerPathStraightnessUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onPedometerPathStraightnessUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_10148F234(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_10148C7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10148C810(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLStepCountNotifier::onWatchOrientationSettingsNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B88E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10148F530(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10148C9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10148C9E8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLStepCountNotifier::onFitnessTrackingNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B88E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onFitnessTrackingNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onFitnessTrackingNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10148F780(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10148CBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10148CBC0(uint64_t a1, uint64_t a2)
{
  return sub_101049AF0(*(_QWORD *)(a1 + 32) + 2928, a2);
}

uint64_t sub_10148CBCC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B8990;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_10148CC40(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  *a1 = off_1021B8608;
  a1[14] = off_1021B8718;
  a1[15] = off_1021B8760;
  sub_10148CF54((uint64_t)a1);
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021B8900);
  v2 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLStepCountNotifier is shutting down", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8900);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "CLStepCountNotifier is shutting down", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "virtual CLStepCountNotifier::~CLStepCountNotifier()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v3 = a1[839];
  a1[839] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[838];
  a1[838] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[834];
  a1[834] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[833];
  a1[833] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[832];
  a1[832] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[831];
  a1[831] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_1010480A0(a1 + 366);
  sub_100CDD8F0((uint64_t)(a1 + 97));
  sub_100261F44((uint64_t)(a1 + 95));
  sub_1011DC234((uint64_t)(a1 + 45));
  sub_1011DC1CC((uint64_t)(a1 + 27));
  sub_10041D328((uint64_t)(a1 + 18));
  sub_100261F44((uint64_t)(a1 + 16));
  sub_10148CBCC((uint64_t)a1);
  return a1;
}

void sub_10148CEC0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10148CED0(uint64_t a1)
{
  return sub_10148CC40((_QWORD *)(a1 - 112));
}

_QWORD *sub_10148CED8(uint64_t a1)
{
  return sub_10148CC40((_QWORD *)(a1 - 120));
}

void sub_10148CEE0(_QWORD *a1)
{
  sub_10148CC40(a1);
  operator delete();
}

void sub_10148CF04(uint64_t a1)
{
  sub_10148CC40((_QWORD *)(a1 - 112));
  operator delete();
}

void sub_10148CF2C(uint64_t a1)
{
  sub_10148CC40((_QWORD *)(a1 - 120));
  operator delete();
}

void sub_10148CF54(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(a1 + 108) = 1;

  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;

  *(_QWORD *)(a1 + 6720) = 0;
  v2 = *(NSObject **)(a1 + 6240);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 6240));
    *(_QWORD *)(a1 + 6240) = 0;
  }
  v3 = *(_QWORD *)(a1 + 6648);
  *(_QWORD *)(a1 + 6648) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 6656);
  *(_QWORD *)(a1 + 6656) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 6664);
  *(_QWORD *)(a1 + 6664) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = sub_1001FBB04(0);
  sub_1000A4A6C(v6, 7, *(_QWORD *)(a1 + 6680));
  v7 = sub_1001FBB04(0);
  sub_1000A4A6C(v7, 9, *(_QWORD *)(a1 + 6688));
}

void sub_10148D020(uint64_t a1, double a2, double a3)
{
  double *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  double *v19;
  char *v20;
  double *v21;
  double *v22;
  __int128 v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  uint8_t buf[4];
  double v29;
  __int16 v30;
  double v31;

  if (a2 < 0.0 || a3 < 0.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B8AD8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      v29 = a2;
      v30 = 2050;
      v31 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Programmer error, this rule is not valid (age: %{public}f, interval:%{public}f).", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B8AD8);
      v24 = 134349312;
      v25 = a2;
      v26 = 2050;
      v27 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this rule is not valid (age: %{public}f, interval:%{public}f).", &v24, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLStepCountEntry>::addAggregationRule(CFTimeInterval, CFTimeInterval) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    v6 = *(double **)a1;
    if (a2 == 0.0 && *v6 == 0.0)
    {
      v6[1] = a3;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 8);
      if (*(double *)(v10 - 24) >= a2)
        sub_101956984();
      if (*(double *)(v10 - 16) >= a3)
        sub_1019569AC();
      v11 = a1 + 16;
      v12 = *(_QWORD *)(a1 + 16);
      if (v10 >= v12)
      {
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v6) >> 3);
        v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v6) >> 3);
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)sub_1002596A8(v11, v17);
        else
          v18 = 0;
        v19 = (double *)&v18[24 * v14];
        v20 = &v18[24 * v17];
        *v19 = a2;
        v19[1] = a3;
        *((_BYTE *)v19 + 16) = 0;
        v13 = (char *)(v19 + 3);
        v22 = *(double **)a1;
        v21 = *(double **)(a1 + 8);
        if (v21 != *(double **)a1)
        {
          do
          {
            v23 = *(_OWORD *)(v21 - 3);
            *((_BYTE *)v19 - 8) = *((_BYTE *)v21 - 8);
            *(_OWORD *)(v19 - 3) = v23;
            v19 -= 3;
            v21 -= 3;
          }
          while (v21 != v22);
          v21 = *(double **)a1;
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v13;
        *(_QWORD *)(a1 + 16) = v20;
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(double *)v10 = a2;
        *(double *)(v10 + 8) = a3;
        v13 = (char *)(v10 + 24);
        *(_BYTE *)(v10 + 16) = 0;
      }
      *(_QWORD *)(a1 + 8) = v13;
    }
  }
}

void sub_10148D330(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B8AD8);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B8AD8);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLStepCountEntry>::setExpirationRule(CFTimeInterval) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_10148D5E4(uint64_t a1)
{
  uint64_t v2;
  CLOSTransaction *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLStepCountNotifier.aggregation_timer");
  if (*(_BYTE *)(a1 + 40))
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8900);
    v4 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Aggregating records due to timer!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8900);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "Aggregating records due to timer!", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountNotifier::setUpAggregateOnTimer()_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  sub_10148D7A8(v2 + 144);

}

uint64_t sub_10148D7A8(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B8AD8);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B8AD8);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLStepCountEntry>::aggregateRecords() [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021B8AD8);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B8AD8);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLStepCountEntry>::aggregateRecords() [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_101490FE8(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B8AD8);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_101490FE8(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B8AD8);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_101490FE8(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLStepCountEntry>::aggregateRecords() [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

void sub_10148DD1C(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  ALActivityLog *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  _OWORD __src[20];
  int v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  uint8_t buf[4];
  uint64_t v44;
  __int16 v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;

  v3 = *(_BYTE **)(a1 + 32);
  v4 = *(_OWORD *)(a2 + 144);
  __src[8] = *(_OWORD *)(a2 + 128);
  __src[9] = v4;
  __src[10] = *(_OWORD *)(a2 + 160);
  v5 = *(_OWORD *)(a2 + 80);
  __src[4] = *(_OWORD *)(a2 + 64);
  __src[5] = v5;
  v6 = *(_OWORD *)(a2 + 112);
  __src[6] = *(_OWORD *)(a2 + 96);
  __src[7] = v6;
  v7 = *(_OWORD *)(a2 + 16);
  __src[0] = *(_OWORD *)a2;
  __src[1] = v7;
  v8 = *(_OWORD *)(a2 + 48);
  __src[2] = *(_OWORD *)(a2 + 32);
  __src[3] = v8;
  if (v3[6232])
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8900);
    v9 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(_DWORD *)(a2 + 24);
      v12 = *(_QWORD *)(a2 + 32);
      v13 = *(_DWORD *)(a2 + 64);
      v14 = *(_DWORD *)(a2 + 68);
      v15 = *(_DWORD *)(a2 + 96);
      v16 = *(_DWORD *)(a2 + 144);
      *(_DWORD *)buf = 134219520;
      v44 = v10;
      v45 = 1024;
      v46 = v11;
      v47 = 2048;
      v48 = v12;
      v49 = 1024;
      v50 = v13;
      v51 = 1024;
      v52 = v14;
      v53 = 1024;
      v54 = v15;
      v55 = 1024;
      v56 = v16;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "StepCount, %f, %d, %f, %d, %d, %d, %d", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8900);
      v19 = *(_QWORD *)(a2 + 8);
      v20 = *(_DWORD *)(a2 + 24);
      v21 = *(_QWORD *)(a2 + 32);
      v22 = *(_DWORD *)(a2 + 64);
      v23 = *(_DWORD *)(a2 + 68);
      v24 = *(_DWORD *)(a2 + 96);
      v25 = *(_DWORD *)(a2 + 144);
      v29 = 134219520;
      v30 = v19;
      v31 = 1024;
      v32 = v20;
      v33 = 2048;
      v34 = v21;
      v35 = 1024;
      v36 = v22;
      v37 = 1024;
      v38 = v23;
      v39 = 1024;
      v40 = v24;
      v41 = 1024;
      v42 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "StepCount, %f, %d, %f, %d, %d, %d, %d", COERCE_DOUBLE(&v29), 52, *(double *)__src, DWORD2(__src[0]), LODWORD(__src[1]), DWORD2(__src[1]), LODWORD(__src[2]));
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountNotifier::setUpdateFinishedHandler()_block_invoke", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
  *(_DWORD *)buf = 0;
  (*(void (**)(_BYTE *, uint8_t *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 152))(v3, buf, __src, 1, 0xFFFFFFFFLL, 0);
  memcpy(v3 + 6248, __src, 0x140uLL);
  sub_101048BD8((uint64_t)(v3 + 2928), a2);
  v17 = objc_autoreleasePoolPush();
  v18 = objc_alloc_init(ALActivityLog);
  -[ALActivityLog setTimestamp:](v18, "setTimestamp:", *(double *)(a2 + 8));
  -[ALActivityLog setStepCountData:](v18, "setStepCountData:", objc_alloc_init(ALCLStepCountEntry));
  -[ALCLStepCountEntry setCount:](-[ALActivityLog stepCountData](v18, "stepCountData"), "setCount:", *(unsigned int *)(a2 + 24));
  -[ALCLStepCountEntry setDistance:](-[ALActivityLog stepCountData](v18, "stepCountData"), "setDistance:", *(double *)(a2 + 32));
  -[ALCLStepCountEntry setFloorsAscended:](-[ALActivityLog stepCountData](v18, "stepCountData"), "setFloorsAscended:", *(unsigned int *)(a2 + 64));
  -[ALCLStepCountEntry setFloorsDescended:](-[ALActivityLog stepCountData](v18, "stepCountData"), "setFloorsDescended:", *(unsigned int *)(a2 + 68));
  -[ALCLStepCountEntry setPace:](-[ALActivityLog stepCountData](v18, "stepCountData"), "setPace:", *(double *)(a2 + 72));
  objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v18);
  objc_autoreleasePoolPop(v17);
}

_QWORD *sub_10148E0CC@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_10148E144(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v7;

  v3 = *a2;
  if (*a2 == 4)
  {
    v4 = sub_1001FBB04(0);
    sub_1000A4FD8(v4, 35, *(_QWORD *)(a1 + 6696), -1.0);
  }
  else if (v3 == 2)
  {
    if (!*(_BYTE *)(a1 + 6636))
    {
      v5 = sub_1001FBB04(0);
      sub_1000A4FD8(v5, 7, *(_QWORD *)(a1 + 6680), -1.0);
      *(_BYTE *)(a1 + 6636) = 1;
      *(_DWORD *)(a1 + 6640) = 2;
    }
  }
  else if (!v3 && *(double *)(a1 + 6248) > 0.0)
  {
    v7 = 0;
    (*(void (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v7, a1 + 6248, 1, 0xFFFFFFFFLL, 0);
  }
  return 1;
}

uint64_t sub_10148E214(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  if (*a2 == 4)
  {
    v4 = sub_1001FBB04(0);
    sub_1000A4A6C(v4, 35, *(_QWORD *)(a1 + 6696));
  }
  else if (*a2 == 2)
  {
    if (*(_BYTE *)(a1 + 6636))
    {
      v6 = 2;
      if (!sub_1001B7864(a1, &v6, 1))
      {
        v3 = sub_1001FBB04(0);
        sub_1000A4A6C(v3, 7, *(_QWORD *)(a1 + 6680));
        *(_BYTE *)(a1 + 6636) = 0;
        *(_DWORD *)(a1 + 6640) = 2;
      }
    }
  }
  return 1;
}

id sub_10148E2B4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10148E30C;
  v4[3] = &unk_10212ECA0;
  v4[4] = v1;
  return objc_msgSend(v2, "async:", v4);
}

double sub_10148E30C(uint64_t a1)
{
  return sub_101483FC8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 128));
}

void sub_10148E318(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double v4;
  double v5;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2 != 19)
  {
    if (v2 == 1)
    {
      v3 = (double *)(a1 + 216);
      goto LABEL_8;
    }
    if (v2)
      return;
  }
  v3 = (double *)(a1 + 216);
  if (*(_QWORD *)(a2 + 224) != 1)
  {
LABEL_8:
    v4 = 5.0;
    v5 = 5.0;
    goto LABEL_6;
  }
  v4 = 150.0;
  v5 = 150.0;
LABEL_6:
  sub_10148E364(v3, v4, v5);
}

void sub_10148E364(double *a1, double a2, double a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  double v35;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021B8920);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((_QWORD *)a1 + 12);
    v8 = *((_QWORD *)a1 + 1);
    v9 = *((_QWORD *)a1 + 2);
    *(_DWORD *)buf = 136316162;
    v27 = v8;
    v28 = 2048;
    v29 = v7;
    v30 = 2048;
    v31 = a2;
    v32 = 2048;
    v33 = v9;
    v34 = 2048;
    v35 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, %s, changing behavior timeout(before), %.3f, timeout(after), %.3f, threshold(before), %.3f, threshold(after), %.3f", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B8920);
    v10 = *((_QWORD *)a1 + 12);
    v11 = *((_QWORD *)a1 + 1);
    v12 = *((_QWORD *)a1 + 2);
    v16 = 136316162;
    v17 = v11;
    v18 = 2048;
    v19 = v10;
    v20 = 2048;
    v21 = a2;
    v22 = 2048;
    v23 = v12;
    v24 = 2048;
    v25 = a3;
    LODWORD(v15) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, %s, changing behavior timeout(before), %.3f, timeout(after), %.3f, threshold(before), %.3f, threshold(after), %.3f", (const char *)&v16, v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalieInput<CLOdometerEntry>::modifyTimeouts(CFTimeInterval, CFTimeInterval) [Data_T = CLOdometerEntry]", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  a1[12] = a2;
  a1[2] = a3;
}

void sub_10148E57C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  int v28;
  uint64_t v29;
  _OWORD buf[102];

  switch(*a3)
  {
    case 0:
      sub_1000D79F0((_QWORD *)(a1 + 1464), (__int128 *)a4);
      break;
    case 1:
      v12 = *(_QWORD *)(a1 + 6568);
      if (v12 != *(_QWORD *)(a4 + 144))
      {
        v13 = *(_DWORD *)(a1 + 6616);
        sub_100197040();
        v14 = sub_100195F08();
        v15 = sub_1009289E0(*(_QWORD *)(a4 + 144));
        v16 = (0x304001u >> v15) & 1;
        if (v15 > 0x15)
          v16 = 0;
        if (!v13)
          v16 = 0;
        if (v14)
          v17 = v16;
        else
          v17 = 0;
        sub_101483C94(*(unsigned __int8 **)(a1 + 128), v17);
        sub_10148417C(*(_QWORD *)(a1 + 128), *(_QWORD *)(a4 + 144));
        v12 = *(_QWORD *)(a4 + 144);
      }
      *(_QWORD *)(a1 + 6568) = v12;
      sub_100CE0D54(a1 + 776, (int *)a4);
      sub_100197040();
      if (sub_100195F08())
        sub_10148EB48(a1);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8900);
      v18 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
      {
        v19 = *(_QWORD *)(a1 + 6568);
        LODWORD(buf[0]) = 134217984;
        *(_QWORD *)((char *)buf + 4) = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "step counting overrideActivityType,%lu,", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8900);
        v20 = *(_QWORD *)(a1 + 6568);
        v28 = 134217984;
        v29 = v20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "step counting overrideActivityType,%lu,", &v28);
        v11 = (char *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLStepCountNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v21);
        goto LABEL_30;
      }
      break;
    case 2:
      sub_1010480E0(a1 + 2928, a4);
      if (*(_QWORD *)(a4 + 224) == 1 && *(_QWORD *)(a4 + 16) == 1)
      {
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8900);
        v23 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
        {
          v24 = *(_QWORD *)(a4 + 112);
          LODWORD(buf[0]) = 134217984;
          *(_QWORD *)((char *)buf + 4) = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Flushing buffered step distance on workout end, workout type, %lu", (uint8_t *)buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_1021B8900);
          v25 = *(_QWORD *)(a4 + 112);
          v28 = 134217984;
          v29 = v25;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "Flushing buffered step distance on workout end, workout type, %lu", &v28);
          v27 = (char *)v26;
          sub_100512490("Generic", 1, 0, 2, "void CLStepCountNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v26);
          if (v27 != (char *)buf)
            free(v27);
        }
        sub_100CE0C5C(a1 + 776, (uint64_t)buf);
        sub_10004D854((_BYTE *)a1, (uint64_t *)buf);
        if (*(_QWORD *)&buf[0])
        {
          *((_QWORD *)&buf[0] + 1) = *(_QWORD *)&buf[0];
          operator delete(*(void **)&buf[0]);
        }
      }
      sub_100CE0F98(a1 + 776, a4);
      sub_10148E318(a1, a4);
      break;
    case 3:
    case 4:
    case 5:
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8900);
      v7 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
      {
        v8 = *a3;
        LODWORD(buf[0]) = 67240192;
        DWORD1(buf[0]) = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unexpected CLMotionStateMediator_Type: %{public}d", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8900);
        v9 = *a3;
        v28 = 67240192;
        LODWORD(v29) = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "Unexpected CLMotionStateMediator_Type: %{public}d", &v28, 8);
        v11 = (char *)v10;
        sub_100512490("Generic", 1, 0, 0, "void CLStepCountNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v10);
LABEL_30:
        if (v11 != (char *)buf)
          free(v11);
      }
      break;
    default:
      return;
  }
}

void sub_10148EB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10148EB48(uint64_t a1)
{
  NSObject *v2;
  NSData *v3;
  NSData *v4;
  id v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD v12[5];
  _WORD v13[8];
  uint8_t buf[1640];

  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_1021B8960);
  v2 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021B8960);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics()", v13, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v3 = sub_100DE69F0(*(_QWORD *)(a1 + 760));
  if (v3 && (v4 = v3, -[NSData length](v3, "length")))
  {
    v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLCompanionNotifier"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1014902F8;
    v12[3] = &unk_102155328;
    v12[4] = v4;
    objc_msgSend(v5, "doAsync:", v12);
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021B8960);
    v6 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics: No data to send", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021B8960);
      v13[0] = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 0, "CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics: No data to send", v13, v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_10148EE68(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!*a3)
  {
    sub_100197040();
    if (sub_10019DF90())
      sub_100DE64CC(*(std::mutex **)(a1 + 760), a4);
  }
}

void sub_10148EEB0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v5;
  int v6;
  __int128 *v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  __int128 v19;
  int v20;
  CMPedometerTableStepCadenceToStrideLength *v21;
  double v22;
  void *v23;
  __int128 v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  _OWORD v28[2];
  _OWORD v29[2];
  _OWORD v30[2];
  _OWORD v31[2];
  _DWORD v32[4];
  uint8_t buf[4];
  int v34;

  if (*a3 <= 5)
  {
    if (*a3 == 2)
    {
      v9 = (__int128 *)(a1 + 6576);
      v10 = *(_DWORD *)(a4 + 40);
      if (*(_DWORD *)(a1 + 6616) != v10)
      {
        sub_100197040();
        v11 = sub_100195F08();
        v12 = sub_1009289E0(*(_QWORD *)(a1 + 6568));
        v13 = (0x304001u >> v12) & 1;
        if (v12 > 0x15)
          v13 = 0;
        if (!v11)
          v13 = 0;
        if (v10)
          v14 = v13;
        else
          v14 = 0;
        sub_101483C94(*(unsigned __int8 **)(a1 + 128), v14);
      }
      v15 = *(_OWORD *)a4;
      v16 = *(_OWORD *)(a4 + 16);
      v17 = *(_OWORD *)(a4 + 32);
      *(__int128 *)((char *)v9 + 44) = *(_OWORD *)(a4 + 44);
      v9[1] = v16;
      v9[2] = v17;
      *v9 = v15;
      v18 = *(void **)(a1 + 200);
      v19 = *(_OWORD *)(a4 + 16);
      v30[0] = *(_OWORD *)a4;
      v30[1] = v19;
      v31[0] = *(_OWORD *)(a4 + 32);
      *(_OWORD *)((char *)v31 + 12) = *(_OWORD *)(a4 + 44);
      objc_msgSend(v18, "feedBodyMetrics:", v30);
      v20 = *(_DWORD *)(a4 + 8);
      v21 = +[CMPedometerTableStepCadenceToStrideLength sharedInstance](CMPedometerTableStepCadenceToStrideLength, "sharedInstance");
      LODWORD(v22) = v20;
      -[CMPedometerTableStepCadenceToStrideLength setUserHeight:](v21, "setUserHeight:", v22);
      sub_100CE10E0(a1 + 776, v9);
      sub_101048B70(a1 + 2928, v9);
      v23 = *(void **)(a1 + 208);
      v24 = v9[1];
      v28[0] = *v9;
      v28[1] = v24;
      v29[0] = v9[2];
      *(_OWORD *)((char *)v29 + 12) = *(__int128 *)((char *)v9 + 44);
      objc_msgSend(v23, "feedBodyMetrics:", v28);
    }
    else
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8900);
      v5 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *a3;
        *(_DWORD *)buf = 67109120;
        v34 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification type, %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8900);
        v25 = *a3;
        v32[0] = 67109120;
        v32[1] = v25;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "#Warning Unhandled notification type, %d", v32);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 2, "void CLStepCountNotifier::onUserInfoUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
    }
  }
}

_DWORD *sub_10148F174(_DWORD *result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 >= 2)
  {
    v3 = v2 != 2;
    if (result[1660] != v3)
    {
      v4 = *(_QWORD *)(a2 + 8);
      result[1660] = v3;
      v26 = 2;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      v25 = 0;
      v21 = 0u;
      v20 = 0u;
      v19 = 0u;
      v18 = 0u;
      v17 = 0u;
      v16 = 0u;
      v15 = 0u;
      v14 = 0u;
      v12 = 0u;
      v13 = 0u;
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      v6 = 0u;
      v7 = 0u;
      v5 = v4;
      LODWORD(v6) = v3;
      return (_DWORD *)(*(uint64_t (**)(_DWORD *, int *, uint64_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 152))(result, &v26, &v5, 1, 0xFFFFFFFFLL, 0);
    }
  }
  return result;
}

uint64_t sub_10148F234(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  double v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  _BYTE buf[64];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  *(_DWORD *)buf = 4;
  result = sub_1001B7864(a1, (int *)buf, 1);
  if ((_DWORD)result)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8900);
    v5 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *a2;
      v7 = a2[1];
      v8 = a2[2];
      v9 = a2[3];
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v7;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v8;
      *(_WORD *)&buf[32] = 2048;
      *(_QWORD *)&buf[34] = v9;
      *(_WORD *)&buf[42] = 2048;
      *(_QWORD *)&buf[44] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "PathStraightnessMetric,timestamp,%.3f, straightness,%.3f,confidence,%.3f,startTime,%.3f,stopTime,%.3f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8900);
      v11 = *a2;
      v12 = a2[1];
      v13 = a2[2];
      v14 = a2[3];
      v18 = 134219008;
      v19 = v11;
      v20 = 2048;
      v21 = v12;
      v22 = 2048;
      v23 = v13;
      v24 = 2048;
      v25 = v14;
      v26 = 2048;
      v27 = v11;
      LODWORD(v17) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "PathStraightnessMetric,timestamp,%.3f, straightness,%.3f,confidence,%.3f,startTime,%.3f,stopTime,%.3f", COERCE_DOUBLE(&v18), v17);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountNotifier::onPedometerPathStraightnessUpdate(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v18 = 4;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    memset(&buf[32], 0, 32);
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_OWORD *)&buf[16] = v10;
    return (*(uint64_t (**)(uint64_t, int *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v18, buf, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_10148F4AC(uint64_t a1, uint64_t *a2)
{
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  CFAbsoluteTime Current;
  int8x16_t v12;

  v4 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 1)), *(float64x2_t *)(a2 + 3));
  v12 = vextq_s8(v4, v4, 4uLL);
  v7 = *(float32x4_t *)(a2 + 5);
  v5 = a2[7];
  sub_10012C97C((float32x4_t *)&v12, v7);
  v8[0] = v12;
  v8[1] = v7;
  v6 = *a2;
  v9 = v5;
  v10 = v6;
  Current = CFAbsoluteTimeGetCurrent();
  sub_101049630(a1 + 2928, (uint64_t)v8);
}

uint64_t sub_10148F530(uint64_t result, uint64_t a2, _DWORD *a3, int *a4)
{
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  if (!*a3)
  {
    v5 = result;
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_1021B8940);
    v6 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
    {
      v8 = *a4;
      v7 = a4[1];
      *(_DWORD *)buf = 67240448;
      v17 = v7;
      v18 = 1026;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Watch orientation settings updated, crown, %{public}d, wrist, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_1021B8940);
      v10 = *a4;
      v9 = a4[1];
      v13[0] = 67240448;
      v13[1] = v9;
      v14 = 1026;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "Watch orientation settings updated, crown, %{public}d, wrist, %{public}d", v13, 14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountNotifier::onWatchOrientationSettingsNotification(int, const CLWatchOrientationSettingsNotifier_Type::Notification &, const CLWatchOrientationSettingsNotifier_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    return sub_101049AE8(v5 + 2928, a4);
  }
  return result;
}

void sub_10148F710(uint64_t a1, uint64_t a2)
{
  sub_100CE0FA0(a1 + 776, (uint64_t *)a2);
  sub_101049E88(a1 + 2928, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *(_BYTE *)(a2 + 17));
}

void sub_10148F748(uint64_t a1, uint64_t a2)
{
  sub_100CE0FA0(a1 + 656, (uint64_t *)a2);
  sub_101049E88(a1 + 2808, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *(_BYTE *)(a2 + 17));
}

void sub_10148F780(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v4;
  NSObject *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  v4 = *a3;
  if (*a3 <= 8)
  {
    if (((1 << v4) & 0x1EE) != 0)
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8900);
      v6 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
      {
        v7 = *a3;
        *(_DWORD *)buf = 67240192;
        v15 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Fitness Tracking: Invalid notification type %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8900);
        v10 = *a3;
        v13[0] = 67240192;
        v13[1] = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "Fitness Tracking: Invalid notification type %{public}d", v13, 8);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 0, "void CLStepCountNotifier::onFitnessTrackingNotification(int, const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
    else if (v4)
    {
      sub_10104A0B0(a1 + 2928, *(_DWORD *)a4);
    }
    else
    {
      v8 = (_QWORD *)(a1 + 216);
      v9 = (_QWORD *)(a1 + 360);
      if (*(_BYTE *)(a4 + 3))
      {
        sub_100653E1C(v9);
        sub_100653C5C(v8);
      }
      else
      {
        sub_100653A54(v9);
        sub_100653874(v8);
      }
    }
  }
}

BOOL sub_10148FA10(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  CLDeviceMotionProperties *v4;
  NSObject *v5;
  uint64_t v6;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  v2 = sub_1002433D4();
  if (v2)
  {
    if (!*(_QWORD *)(a1 + 6704))
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8900);
      v3 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Initializing Device Motion dispatcher", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8900);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "Initializing Device Motion dispatcher", v12, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLStepCountNotifier::enableDeviceMotion()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      v4 = -[CLDeviceMotionProperties initWithMode:]([CLDeviceMotionProperties alloc], "initWithMode:", 3);
      operator new();
    }
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8900);
    v5 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Subscribing for DeviceMotion from pedometer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8900);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "Subscribing for DeviceMotion from pedometer", v12, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLStepCountNotifier::enableDeviceMotion()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v6 = sub_1002433D4();
    sub_1011932BC(v6, *(_QWORD *)(a1 + 6704), 0.01);
  }
  return v2 != 0;
}

void sub_10148FD6C()
{
  operator delete();
}

void sub_10148FD98(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLStepCountNotifier::onDeviceMotionData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B88E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onDeviceMotionData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onDeviceMotionData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_10148F4AC(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_10148FF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

BOOL sub_10148FF68(uint64_t a1)
{
  return sub_10148FA10(a1 - 112);
}

BOOL sub_10148FF70(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v2 = sub_1002433D4();
  if (v2)
  {
    if (*(_QWORD *)(a1 + 6704))
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8900);
      v3 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Unregistering device motion for pedometer", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8900);
        v11[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "Unregistering device motion for pedometer", v11, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLStepCountNotifier::disableDeviceMotion()", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      v4 = sub_1002433D4();
      sub_101193558(v4, *(_QWORD *)(a1 + 6704));
    }
    else
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021B8900);
      v5 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "stopActive: Device motion dispatcher not initialized, nothing to do", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8900);
        v11[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "stopActive: Device motion dispatcher not initialized, nothing to do", v11, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLStepCountNotifier::disableDeviceMotion()", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
  }
  return v2 != 0;
}

BOOL sub_101490250(uint64_t a1)
{
  return sub_10148FF70(a1 - 112);
}

BOOL sub_101490258(uint64_t a1)
{
  sub_1004C5730(a1 + 216);
  return sub_1004C5730(a1 + 360);
}

BOOL sub_101490280(uint64_t a1)
{
  sub_1004C5730(a1 + 104);
  return sub_1004C5730(a1 + 248);
}

id sub_1014902A8(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a1 + 200);
  if (result)
    return _objc_msgSend(result, "onRunningFormMetrics:", a2);
  return result;
}

id sub_1014902BC(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a1 + 88);
  if (result)
    return _objc_msgSend(result, "onRunningFormMetrics:", a2);
  return result;
}

id sub_1014902D0(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a1 + 200);
  if (result)
    return _objc_msgSend(result, "queryStrideLengthTracks:", a2);
  return result;
}

id sub_1014902E4(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a1 + 88);
  if (result)
    return _objc_msgSend(result, "queryStrideLengthTracks:", a2);
  return result;
}

id sub_1014902F8(uint64_t a1, uint64_t a2)
{
  return sub_10061F764(300.0, a2, 37, *(void **)(a1 + 32), 300, 0, 1, 1, 0, 0);
}

BOOL sub_101490340(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B88E0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1014905C0(uint64_t a1, int *a2, const void *a3)
{
  _QWORD *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = operator new(0x158uLL);
  v6[2] = 0;
  *v6 = off_1021B8B78;
  v6[1] = 0;
  memcpy(v6 + 3, a3, 0x140uLL);
  *(_QWORD *)&v13 = v6 + 3;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101B9EB60, &v14);
  sub_1002B7674((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_1014906A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014906BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[20];

  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_101490724(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B88E0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::listClients() [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B88E0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::listClients() [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021B88E0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B88E0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::listClients() [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_101490CD0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101490CFC(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_101490D28(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_101490D54(id a1)
{
  qword_10229FF38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "RunningForm");
}

void sub_101490D80(id a1)
{
  qword_10229FE98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_101490DAC(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_101490E04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101490E24(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_101490E3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_101490E7C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

_QWORD *sub_101490EA8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x168uLL);
  result = sub_101490EF0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_101490EDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101490EF0(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_1021B8B08;
  a1[1] = 0;
  sub_100DE5D70(a1 + 3);
  return a1;
}

void sub_101490F28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_101490F3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021B8B08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101490F50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021B8B08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_101490F84(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 24);
  sub_1000F34E0((_QWORD *)(a1 + 336));
  std::mutex::~mutex((std::mutex *)(a1 + 88));
  std::mutex::~mutex(v2);
}

void sub_101490FBC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101490FE8(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B8B48);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B8B48);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLStepCountEntry>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

void sub_1014911E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021B8B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1014911F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021B8B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10149122C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
  {
    sub_1014915B4((uint64_t)&v7 + 7, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B8BB8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101CA5803 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021B8BB8);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
LABEL_21:
      v6 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLStepCountNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B8BB8);
    v5 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101CA5803 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021B8BB8);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
      goto LABEL_21;
    }
  }
}

void sub_1014915B4(uint64_t a1, void *a2)
{
  void *v3;

  if (objc_msgSend(a2, "cppObjectPtr")
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221DCB8))
  {
    goto LABEL_5;
  }
  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)320)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    objc_msgSend(a2, "cppObjectPtr");
    return;
  }
  v3 = (void *)sub_101956B48();
  sub_101491628(v3);
}

void sub_101491628(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_101491654()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CA5390;
      v1[3] = unk_101CA53A0;
      v1[4] = xmmword_101CA53B0;
      v1[0] = xmmword_101CA5370;
      v1[1] = unk_101CA5380;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_101491728(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_101491740()
{
  sub_1015A2E04(qword_10230F5B8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230F5B8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230F5D0, "Acc800Fp");
  dword_10230F5E8 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_10230F5D0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230F5F0, "DmFp");
  dword_10230F608 = 200;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_10230F5F0, (void *)&_mh_execute_header);
}

void sub_1014918C4()
{
  operator delete();
}

void sub_1014919DC(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

_QWORD *sub_101491A08(_QWORD *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v6;
  _QWORD *v7;

  v6 = (_QWORD *)sub_1001B5A2C((uint64_t)a1, a2, a3, a4, a5);
  *v6 = off_1021B8C30;
  v6[6] = off_102141E98;
  v7 = operator new(0x20uLL);
  v7[2] = 0;
  *v7 = off_102141ED0;
  v7[1] = 0;
  *((_DWORD *)v7 + 6) = 31337;
  a1[7] = v7 + 3;
  a1[8] = v7;
  a1[11] = 0;
  a1[10] = 0;
  a1[9] = a1 + 10;
  return a1;
}

void sub_101491A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101491A9C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  *(_QWORD *)a1 = off_1021B8C30;
  v2 = (_QWORD *)(a1 + 80);
  v3 = a1 + 72;
  v4 = *(_QWORD **)(a1 + 72);
  if (v4 != (_QWORD *)(a1 + 80))
  {
    do
    {
      objc_msgSend((id)v4[5], "invalidate");

      v4[5] = 0;
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != v2);
  }
  sub_100008848(v3, *(_QWORD **)(a1 + 80));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = v2;
  sub_100008848(v3, 0);
  sub_100090A0C((_QWORD *)(a1 + 48));
  return sub_10002FA68(a1);
}

void sub_101491B60(uint64_t a1)
{
  sub_101491A9C(a1);
  operator delete();
}

_QWORD *sub_101491B84@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[32];

  v11[0] = off_1021B8CE0;
  v11[1] = sub_101491DF8;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v13, "kCLConnectionMessageActivityAlarmStart");
  sub_100BBBE90((uint64_t)&v14, (uint64_t)v11);
  v9[0] = off_1021B8D90;
  v9[1] = sub_1014925D0;
  v9[2] = 0;
  v10 = v9;
  sub_1015A2E04(v15, "kCLConnectionMessageActivityAlarmAvailable");
  sub_100BBBE90((uint64_t)v16, (uint64_t)v9);
  sub_101493280(a1, (unsigned __int8 *)v13, 2);
  for (i = 0; i != -14; i -= 7)
  {
    v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      v3 = &v16[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0)
      operator delete((void *)v15[i]);
  }
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v10)
  {
    v6 = 5;
    goto LABEL_14;
  }
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  else if (v12)
  {
    v8 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  return result;
}

void sub_101491D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t i;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  for (i = 56; i != -56; i -= 56)
    sub_1004E21A4(v17 + i);
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_8:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

void sub_101491DF8(uint64_t a1, int a2, uint64_t a3)
{
  id v6;
  NSObject *v7;
  id v8;
  CMActivityAlarmLocal *v9;
  uint64_t v10;
  double v11;
  id v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  int v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  int v35;
  double v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  _BYTE v40[10];
  __int16 v41;
  int v42;
  uint8_t buf[32];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v6 = objc_alloc_init((Class)NSAutoreleasePool);
  v37 = 0;
  v38 = 0;
  v36 = 0.0;
  if (+[CMActivityAlarmLocal activityAlarmAvailable](CMActivityAlarmLocal, "activityAlarmAvailable"))
  {
    if (sub_100D03EB8(&v38, &v37, &v36, a3))
    {
      if (a2)
      {
        if (qword_10229FCC0 != -1)
          dispatch_once(&qword_10229FCC0, &stru_1021B8CB0);
        v7 = qword_10229FCC8;
        if (os_log_type_enabled((os_log_t)qword_10229FCC8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = v37;
          *(_WORD *)&buf[8] = 2048;
          *(double *)&buf[10] = v36;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v38;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Primed for activity alarm %d with duration %f (internal id %d)", buf, 0x18u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCC0 != -1)
            dispatch_once(&qword_10229FCC0, &stru_1021B8CB0);
          LODWORD(v39) = 67109632;
          HIDWORD(v39) = v37;
          *(_WORD *)v40 = 2048;
          *(double *)&v40[2] = v36;
          v41 = 1024;
          v42 = v38;
          LODWORD(v31) = 24;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCC8, 1, "Primed for activity alarm %d with duration %f (internal id %d)", &v39, v31, v32);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityAlarmSubscription::handleRequestActivityAlarm(BOOL, const CLNameValuePair &)", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        v8 = objc_msgSend(*(id *)(a1 + 8), "silo");
        sub_10052D218(a1 + 48, &v39);
        v9 = [CMActivityAlarmLocal alloc];
        v10 = v37;
        v11 = v36;
        v12 = objc_msgSend(v8, "queue");
        v13 = *(void **)(a1 + 24);
        if (v13)
        {
          objc_msgSend(v13, "clientName");
        }
        else
        {
          v53 = 0;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v44 = 0u;
          memset(buf, 0, sizeof(buf));
        }
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3321888768;
        v33[2] = sub_101492B54;
        v33[3] = &unk_1021B8C50;
        v33[4] = a1;
        v33[5] = v39;
        v34 = *(std::__shared_weak_count **)v40;
        if (*(_QWORD *)v40)
        {
          v22 = (unint64_t *)(*(_QWORD *)v40 + 16);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v35 = v38;
        v24 = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:forClient:withHandler:](v9, "initWithTrigger:duration:onQueue:forClient:withHandler:", v10, v12, buf, v33, v11);
        if (SHIBYTE(v52) < 0)
          operator delete(*((void **)&v51 + 1));
        if (SBYTE7(v51) < 0)
          operator delete((void *)v50);
        if (SHIBYTE(v49) < 0)
          operator delete(*((void **)&v48 + 1));
        if (SHIBYTE(v47) < 0)
          operator delete(*((void **)&v46 + 1));
        if (SBYTE7(v46) < 0)
          operator delete((void *)v45);
        if (SHIBYTE(v44) < 0)
          operator delete(*(void **)&buf[24]);
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        if (!*(_QWORD *)(a1 + 88))
          sub_1001A638C(a1);
        *(_QWORD *)buf = &v38;
        sub_100041CE0((uint64_t **)(a1 + 72), &v38, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v24;
        if (v34)
          std::__shared_weak_count::__release_weak(v34);
        if (*(_QWORD *)v40)
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v40);
      }
      else
      {
        v15 = *(_QWORD *)(a1 + 80);
        if (v15)
        {
          v16 = a1 + 80;
          do
          {
            v17 = *(_DWORD *)(v15 + 32);
            v18 = v17 < v38;
            if (v17 >= v38)
              v19 = (uint64_t *)v15;
            else
              v19 = (uint64_t *)(v15 + 8);
            if (!v18)
              v16 = v15;
            v15 = *v19;
          }
          while (*v19);
          if (v16 != a1 + 80 && v38 >= *(_DWORD *)(v16 + 32))
          {
            if (qword_10229FCC0 != -1)
              dispatch_once(&qword_10229FCC0, &stru_1021B8CB0);
            v20 = qword_10229FCC8;
            if (os_log_type_enabled((os_log_t)qword_10229FCC8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&buf[4] = v37;
              *(_WORD *)&buf[8] = 2048;
              *(double *)&buf[10] = v36;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v38;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Invalidated activity alarm %d with duration %f (internal id %d)", buf, 0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FCC0 != -1)
                dispatch_once(&qword_10229FCC0, &stru_1021B8CB0);
              LODWORD(v39) = 67109632;
              HIDWORD(v39) = v37;
              *(_WORD *)v40 = 2048;
              *(double *)&v40[2] = v36;
              v41 = 1024;
              v42 = v38;
              LODWORD(v31) = 24;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCC8, 1, "Invalidated activity alarm %d with duration %f (internal id %d)", &v39, v31, v32);
              v30 = (uint8_t *)v29;
              sub_100512490("Generic", 1, 0, 2, "void CLActivityAlarmSubscription::handleRequestActivityAlarm(BOOL, const CLNameValuePair &)", "%s\n", v29);
              if (v30 != buf)
                free(v30);
            }
            v21 = *(void **)(v16 + 40);
            objc_msgSend(v21, "invalidate");
            sub_10008A9F0((uint64_t **)(a1 + 72), (uint64_t *)v16);
            operator delete((void *)v16);

            if (!*(_QWORD *)(a1 + 88))
              sub_1001A638C(a1);
          }
        }
      }
    }
  }
  else
  {
    if (qword_10229FCC0 != -1)
      dispatch_once(&qword_10229FCC0, &stru_1021B8CB0);
    v14 = qword_10229FCC8;
    if (os_log_type_enabled((os_log_t)qword_10229FCC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Activity alarms not available.  Requested alarm will not be listened for.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCC0 != -1)
        dispatch_once(&qword_10229FCC0, &stru_1021B8CB0);
      LOWORD(v39) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCC8, 0, "#Warning Activity alarms not available.  Requested alarm will not be listened for.", &v39, 2);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLActivityAlarmSubscription::handleRequestActivityAlarm(BOOL, const CLNameValuePair &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
  }

}

void sub_101492544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1014925D0(uint64_t a1, _QWORD *a2)
{
  id v3;
  uint64_t v4;
  NSNumber *v5;

  v3 = objc_alloc_init((Class)NSAutoreleasePool);
  v4 = CMAvailable;
  v5 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[CMActivityAlarmLocal activityAlarmAvailable](CMActivityAlarmLocal, "activityAlarmAvailable"));
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  CLConnectionMessage::sendReply(*a2);

}

void sub_101492694(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_1014926BC(uint64_t a1, int a2, void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  unsigned int v18;
  int v19;
  _QWORD v20[2];
  uint8_t buf[4];
  int v22;

  v19 = a2;
  if (qword_10229FCC0 != -1)
    dispatch_once(&qword_10229FCC0, &stru_1021B8CB0);
  v6 = qword_10229FCC8;
  if (os_log_type_enabled((os_log_t)qword_10229FCC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v22 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "activity alarm triggered. (internal id %d)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCC0 != -1)
      dispatch_once(&qword_10229FCC0, &stru_1021B8CB0);
    LODWORD(v20[0]) = 67109120;
    HIDWORD(v20[0]) = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCC8, 2, "activity alarm triggered. (internal id %d)", v20);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLActivityAlarmSubscription::onActivityAlarm(int, CMActivityAlarm *, NSError *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v7 = *(_QWORD *)(a1 + 80);
  if (!v7)
    goto LABEL_16;
  v8 = a1 + 80;
  do
  {
    v9 = *(_DWORD *)(v7 + 32);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v7;
    else
      v11 = (uint64_t *)(v7 + 8);
    if (!v10)
      v8 = v7;
    v7 = *v11;
  }
  while (*v11);
  if (v8 != a1 + 80 && *(_DWORD *)(v8 + 32) <= a2)
  {
    sub_100119F3C(buf);
    v18 = objc_msgSend(a3, "trigger");
    objc_msgSend(a3, "duration");
    v20[0] = v13;
    sub_100D03E54(&v19, &v18, v20, (uint64_t)buf);
    v20[0] = sub_10011A5AC((uint64_t)buf);
    sub_101492AAC(a1, v20);
    sub_1000B072C(a1 + 72, &v19);

    if (!*(_QWORD *)(a1 + 88))
      sub_1001A638C(a1);
    sub_10011A5A8(buf);
  }
  else
  {
LABEL_16:
    if (qword_10229FCC0 != -1)
      dispatch_once(&qword_10229FCC0, &stru_1021B8CB0);
    v12 = qword_10229FCC8;
    if (os_log_type_enabled((os_log_t)qword_10229FCC8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "activity alarm triggered, but invalidated.  ignoring.  (internal id %d)", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCC0 != -1)
        dispatch_once(&qword_10229FCC0, &stru_1021B8CB0);
      LODWORD(v20[0]) = 67109120;
      HIDWORD(v20[0]) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCC8, 1, "activity alarm triggered, but invalidated.  ignoring.  (internal id %d)", v20);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLActivityAlarmSubscription::onActivityAlarm(int, CMActivityAlarm *, NSError *)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

void sub_101492A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_101492AAC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_1021B8E00, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_101492B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101492B54(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint8_t buf[1640];

  v3 = *(_QWORD *)(a1 + 32);
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v4 = *(_QWORD *)(a1 + 48);
  if (!v4 || *(_QWORD *)(v4 + 8) == -1)
  {
    if (qword_10229FCC0 != -1)
      dispatch_once(&qword_10229FCC0, &stru_1021B8CB0);
    v5 = qword_10229FCC8;
    if (os_log_type_enabled((os_log_t)qword_10229FCC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning CLDaemonClient got activity alarm callback after destruction... ignoring", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCC0 != -1)
        dispatch_once(&qword_10229FCC0, &stru_1021B8CB0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCC8, 0, "#Warning CLDaemonClient got activity alarm callback after destruction... ignoring", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLActivityAlarmSubscription::handleRequestActivityAlarm(BOOL, const CLNameValuePair &)_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_1014926BC(v3, *(_DWORD *)(a1 + 56), a2);
    *((_BYTE *)v10 + 24) = 1;
  }
  _Block_object_dispose(&v9, 8);
}

void sub_101492D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_101492D50(id a1)
{
  qword_10229FCC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ActivityAlarm");
}

__n128 sub_101492D7C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021B8CE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101492DB8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021B8CE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101492DDC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_101492E2C(a1 + 8, a2, a3);
}

uint64_t sub_101492DE4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101492E20()
{
}

void sub_101492E2C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_101492EB0(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_101492E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101492EB0(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B8D50);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B8D50);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_101493098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_1014930B4(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_1014930E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021B8D90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10149311C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021B8D90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101493140(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_101493190(a1 + 8, a2, a3);
}

uint64_t sub_101493148(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101493184()
{
}

void sub_101493190(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_101493264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101493280(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_1014932F8(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1014932E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1014932F8(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_101493578(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_101493560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_101493578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_1014935EC(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1014935D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1014935EC(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_101493644(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101493660(uint64_t a1, unint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  sub_1014936DC((void **)(a1 + 40), a2);
  return a1;
}

void sub_1014936B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 48) = v13;
    operator delete(v13);
  }
  a10 = (void **)v10;
  sub_100F6A9E4(&a10);
  _Unwind_Resume(a1);
}

void sub_1014936DC(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      sub_100259694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_10029D26C(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[72 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v10 - 72);
        v13 = *(_OWORD *)(v10 - 56);
        v14 = *(_OWORD *)(v10 - 40);
        v15 = *(_OWORD *)(v10 - 24);
        *((_WORD *)v12 - 4) = *((_WORD *)v10 - 4);
        *(_OWORD *)(v12 - 24) = v15;
        *(_OWORD *)(v12 - 40) = v14;
        *(_OWORD *)(v12 - 56) = v13;
        v12 -= 72;
        v10 -= 72;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_1014937C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *result;
  uint64_t v17;
  _QWORD v18[7];

  v9 = a1[5];
  v10 = a1[6];
  v8 = (uint64_t)(a1 + 5);
  v11 = *(_QWORD *)(v8 - 16);
  if (0x8E38E38E38E38E39 * ((v10 - v9) >> 3) != v11)
    sub_101493980(v8, v11);
  memset(&v18[3], 0, 32);
  sub_1014939C4(v18, a2);
  v18[4] = a3;
  v18[5] = a4;
  v18[6] = a1[4];
  v12 = a1[1];
  if (v12 >= a1[2])
  {
    v14 = sub_101494110(a1, (uint64_t)v18);
    goto LABEL_11;
  }
  v13 = v18[3];
  if (v18[3])
  {
    if ((_QWORD *)v18[3] == v18)
    {
      *(_QWORD *)(v12 + 24) = v12;
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v18[3] + 24))(v18[3], v12);
      goto LABEL_10;
    }
    v13 = (*(uint64_t (**)(void))(*(_QWORD *)v18[3] + 16))();
  }
  *(_QWORD *)(v12 + 24) = v13;
LABEL_10:
  v15 = *(_OWORD *)&v18[4];
  *(_QWORD *)(v12 + 48) = v18[6];
  *(_OWORD *)(v12 + 32) = v15;
  v14 = v12 + 56;
  a1[1] = v12 + 56;
LABEL_11:
  a1[1] = v14;
  result = (_QWORD *)v18[3];
  if ((_QWORD *)v18[3] == v18)
  {
    v17 = 4;
    result = v18;
  }
  else
  {
    if (!v18[3])
      return result;
    v17 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
}

void sub_101493938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;

  *(_QWORD *)(v12 + 8) = v13;
  v15 = a12;
  if (a12 == &a9)
  {
    v16 = 4;
    v15 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_101493980(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_101493DF4((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 72 * a2;
  }
}

_QWORD *sub_1014939C4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_101493F9C(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_101493A5C(_QWORD *a1, int a2)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v36;
  void *__p;
  _OWORD *v38;
  char *v39;

  v2 = (_QWORD *)*a1;
  v34 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v34)
  {
    do
    {
      v4 = a1[4];
      v5 = v2[6];
      if (v4 < v5)
        v4 -= 0x71C71C71C71C71C7 * ((uint64_t)(a1[6] - a1[5]) >> 3);
      v6 = v4 - v5;
      v7 = 5;
      if (a2)
        v7 = 4;
      v8 = v2[v7];
      v36 = v8;
      while (v6 >= v8)
      {
        if (v2[5] >= v6)
          v9 = v6;
        else
          v9 = v2[5];
        __p = 0;
        v38 = 0;
        v39 = 0;
        if (v9)
        {
          v10 = 0;
          v11 = 0;
          v12 = 0;
          v13 = v2[6];
          v14 = a1[5];
          do
          {
            v15 = v14 + 72 * v13;
            if (v12 >= (_OWORD *)v39)
            {
              v19 = v11 + 1;
              if (v11 + 1 > 0x38E38E38E38E38ELL)
                sub_100259694();
              if (0x1C71C71C71C71C72 * ((v39 - v10) >> 3) > v19)
                v19 = 0x1C71C71C71C71C72 * ((v39 - v10) >> 3);
              if (0x8E38E38E38E38E39 * ((v39 - v10) >> 3) >= 0x1C71C71C71C71C7)
                v20 = 0x38E38E38E38E38ELL;
              else
                v20 = v19;
              if (v20)
              {
                v21 = (char *)sub_10029D26C((uint64_t)&v39, v20);
                v10 = __p;
                v12 = v38;
              }
              else
              {
                v21 = 0;
              }
              v22 = &v21[72 * v11];
              *(_OWORD *)v22 = *(_OWORD *)v15;
              v23 = *(_OWORD *)(v15 + 16);
              v24 = *(_OWORD *)(v15 + 32);
              v25 = *(_OWORD *)(v15 + 48);
              *((_QWORD *)v22 + 8) = *(_QWORD *)(v15 + 64);
              *((_OWORD *)v22 + 2) = v24;
              *((_OWORD *)v22 + 3) = v25;
              *((_OWORD *)v22 + 1) = v23;
              if (v12 == (_OWORD *)v10)
              {
                v30 = &v21[72 * v11];
              }
              else
              {
                v26 = &v21[72 * v11];
                do
                {
                  *(_OWORD *)(v26 - 72) = *(_OWORD *)((char *)v12 - 72);
                  v27 = *(_OWORD *)((char *)v12 - 56);
                  v28 = *(_OWORD *)((char *)v12 - 40);
                  v29 = *(_OWORD *)((char *)v12 - 24);
                  v30 = v26 - 72;
                  *((_WORD *)v26 - 4) = *((_WORD *)v12 - 4);
                  *(_OWORD *)(v26 - 24) = v29;
                  *(_OWORD *)(v26 - 40) = v28;
                  *(_OWORD *)(v26 - 56) = v27;
                  v12 = (_OWORD *)((char *)v12 - 72);
                  v26 -= 72;
                }
                while (v12 != (_OWORD *)v10);
              }
              v12 = v22 + 72;
              __p = v30;
              v38 = v22 + 72;
              v39 = &v21[72 * v20];
              if (v10)
              {
                operator delete(v10);
                v10 = __p;
              }
              else
              {
                v10 = v30;
              }
            }
            else
            {
              *v12 = *(_OWORD *)v15;
              v16 = *(_OWORD *)(v15 + 16);
              v17 = *(_OWORD *)(v15 + 32);
              v18 = *(_OWORD *)(v15 + 48);
              *((_QWORD *)v12 + 8) = *(_QWORD *)(v15 + 64);
              v12[2] = v17;
              v12[3] = v18;
              v12[1] = v16;
              v12 = (_OWORD *)((char *)v12 + 72);
            }
            v38 = v12;
            v14 = a1[5];
            v13 = (v2[6] + 1) % (0x8E38E38E38E38E39 * ((a1[6] - v14) >> 3));
            v2[6] = v13;
            v11 = 0x8E38E38E38E38E39 * (((char *)v12 - v10) >> 3);
          }
          while (v11 < v9);
        }
        v31 = v2[3];
        if (!v31)
          sub_10025FD1C();
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v31 + 48))(v31, &__p);
        v32 = a1[4];
        v33 = v2[6];
        if (v32 < v33)
          v32 -= 0x71C71C71C71C71C7 * ((uint64_t)(a1[6] - a1[5]) >> 3);
        if (__p)
        {
          v38 = __p;
          operator delete(__p);
        }
        v6 = v32 - v33;
        v8 = v36;
      }
      v2 += 7;
    }
    while (v2 != v34);
  }
}

void sub_101493D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101493D58(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = a1[5] + 72 * a1[4];
  v5 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(v3 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 48) = v4;
  *(_OWORD *)(v3 + 16) = v6;
  *(_OWORD *)v3 = *(_OWORD *)a2;
  v7 = 0x8E38E38E38E38E39 * ((a1[6] - a1[5]) >> 3);
  v8 = (a1[4] + 1) % v7;
  a1[4] = v8;
  v9 = *a1;
  v10 = a1[1];
  if (*a1 != v10)
  {
    if (v8 + 1 == v7)
      v11 = 0;
    else
      v11 = v8 + 1;
    do
    {
      if (*(_QWORD *)(v9 + 48) == v8)
        *(_QWORD *)(v9 + 48) = v11;
      v9 += 56;
    }
    while (v9 != v10);
  }
  sub_101493A5C(a1, a3);
}

void sub_101493DF4(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[9 * a2];
      do
      {
        v7[8] = 0;
        *((_OWORD *)v7 + 2) = 0uLL;
        *((_OWORD *)v7 + 3) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *((_OWORD *)v7 + 1) = 0uLL;
        *((_WORD *)v7 + 30) = 257;
        v7 += 9;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x8E38E38E38E38E39 * (((char *)v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL)
      sub_100259694();
    v10 = 0x8E38E38E38E38E39 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_10029D26C(v4, v11);
    else
      v12 = 0;
    v14 = &v12[72 * v8];
    v15 = &v14[72 * a2];
    v16 = v14;
    do
    {
      *((_QWORD *)v16 + 8) = 0;
      *((_OWORD *)v16 + 2) = 0uLL;
      *((_OWORD *)v16 + 3) = 0uLL;
      *(_OWORD *)v16 = 0uLL;
      *((_OWORD *)v16 + 1) = 0uLL;
      *((_WORD *)v16 + 30) = 257;
      v16 += 72;
    }
    while (v16 != v15);
    v17 = &v12[72 * v11];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        v20 = *(_OWORD *)(v18 - 56);
        v21 = *(_OWORD *)(v18 - 40);
        v22 = *(_OWORD *)(v18 - 24);
        *((_WORD *)v14 - 4) = *((_WORD *)v18 - 4);
        *(_OWORD *)(v14 - 24) = v22;
        *(_OWORD *)(v14 - 40) = v21;
        *(_OWORD *)(v14 - 56) = v20;
        v14 -= 72;
        v18 -= 72;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
}

_QWORD *sub_101493F9C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101494104(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_101494110(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)sub_10025B800(v7, v9);
  else
    v10 = 0;
  v15 = v10;
  v16 = &v10[56 * v4];
  v17 = (uint64_t)v16;
  v18 = &v10[56 * v9];
  sub_100270E34((uint64_t)v16, a2);
  v11 = (uint64_t)v16;
  v12 = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v16 + 6) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 32) = v12;
  v17 += 56;
  sub_101494244(a1, &v15);
  v13 = a1[1];
  sub_101494468(&v15);
  return v13;
}

void sub_101494230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_101494468((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101494244(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1014942B8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1014942B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      sub_101494370(v7 - 56, v9 - 56);
      v10 = *(_QWORD *)(v9 - 8);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v9 - 24);
      *(_QWORD *)(v7 - 8) = v10;
      v7 = *((_QWORD *)&v16 + 1) - 56;
      *((_QWORD *)&v16 + 1) -= 56;
      v9 -= 56;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_1014943D4((uint64_t)v13);
  return v11;
}

uint64_t sub_101494370(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t sub_1014943D4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_101494408((_QWORD *)a1);
  return a1;
}

_QWORD *sub_101494408(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(result[2] + 8);
  v2 = *(_QWORD **)(result[1] + 8);
  while (v1 != v2)
  {
    result = (_QWORD *)v1[3];
    if (v1 == result)
    {
      result = v1;
      v3 = 4;
    }
    else
    {
      if (!result)
        goto LABEL_8;
      v3 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
LABEL_8:
    v1 += 7;
  }
  return result;
}

void **sub_101494468(void **a1)
{
  sub_101494498(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *sub_101494498(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_QWORD *)result[2];
  if (v1 != v2)
  {
    v3 = result;
    while (1)
    {
      result = v1 - 7;
      v3[2] = v1 - 7;
      v4 = (_QWORD *)*(v1 - 4);
      if (v4 == result)
        break;
      if (v4)
      {
        result = v4;
        v5 = 5;
LABEL_7:
        (*(void (**)(void))(*result + 8 * v5))();
        result = (_QWORD *)v3[2];
      }
      v1 = result;
      if (result == v2)
        return result;
    }
    v5 = 4;
    goto LABEL_7;
  }
  return result;
}

void sub_1014945A8(id a1)
{
  qword_10230F798 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSwimNotifierSilo"));
}

uint64_t sub_10149465C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10149646C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230F7B8 != -1)
    dispatch_once(&qword_10230F7B8, block);
  return qword_1023140E0;
}

void sub_1014947FC(id a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100197040();
  if (sub_1000C4240())
  {
    v1 = sub_100128CC8();
    if (sub_1006BCE08(v1))
    {
      v2 = sub_100128CC8();
      if (sub_1011C589C(v2))
      {
        sub_100197040();
        if (sub_100195F08())
        {
          if ((sub_1001B7910() & 0x40000000) != 0)
            byte_10230F7A8 = 1;
        }
      }
    }
  }
}

void sub_101494990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014949B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_10047C7AC(a1 + 168, a2, (uint64_t)a3);
  v5 = *a3;
  v6 = a3[1];
  while (v5 != v6)
  {
    *(_DWORD *)(v5 + 104) -= *(_DWORD *)(v5 + 144);
    v5 += 152;
  }
  return result;
}

uint64_t sub_101494C40(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  unsigned int v8;
  void *__p[3];
  _OWORD v10[5];
  uint64_t v11;

  sub_10047C7F8(a1 + 168, a2, (uint64_t)&v8);
  v4 = v8;
  if (v8 == 100)
  {
    sub_100AD4A70((uint64_t *)__p, (unsigned __int8 *)v10);
    v5 = v10[3];
    *(_OWORD *)(a3 + 32) = v10[2];
    *(_OWORD *)(a3 + 48) = v5;
    *(_OWORD *)(a3 + 64) = v10[4];
    *(_QWORD *)(a3 + 80) = v11;
    v6 = v10[1];
    *(_OWORD *)a3 = v10[0];
    *(_OWORD *)(a3 + 16) = v6;
    v4 = v8;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_101494CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101494D88(uint64_t a1, void *a2)
{
  uint64_t v3;

  v3 = sub_101495978(a1, "CLSwimNotifier", a2);
  *(_QWORD *)v3 = off_1021B8E58;
  *(_QWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_QWORD *)(v3 + 160) = 0;
  sub_100479FDC(v3 + 168);
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_QWORD *)(a1 + 2392) = 0;
  *(_QWORD *)(a1 + 2408) = 0;
  *(_QWORD *)(a1 + 2400) = 0;
  *(_QWORD *)(a1 + 2413) = 0;
  *(_QWORD *)(a1 + 2424) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 2432) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:forClient:", CFSTR("CLMotionStateMediator"), CFSTR("CLSwimNotifier"));
  sub_1006CB5B4();
}

void sub_1014957D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = v1[301];
  v1[301] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v1[300];
  v1[300] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v1 + 294;
  v9 = *v4;
  *v4 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *v8;
  *v8 = 0;
  if (v10)
  {
    *(_QWORD *)(v10 + 560) = off_10214AE70;
    operator delete();
  }
  sub_10047A060(v2);
  v11 = v1[20];
  v1[20] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v1[17];
  v1[17] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *v3;
  *v3 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v1[14];
  v1[14] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  sub_1014963F8((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101495978(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021B9240;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1014959F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_101495A14(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSwimNotifier::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSwimNotifier::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSwimNotifier::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101498D10(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101495BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101495BEC(uint64_t a1, _DWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSwimNotifier::onWatchOrientationSettingsNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSwimNotifier::onWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSwimNotifier::onWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101499100(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101495DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101495DC4(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLSwimNotifier::onNataliemetryUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSwimNotifier::onNataliemetryUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSwimNotifier::onNataliemetryUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  if (*a2 == 2)
  {
    v9 = *(_QWORD *)(a4 + 160);
    if (v9)
    {
      v10 = (_OWORD *)(v9 + 165992);
      v11 = *a3;
      v12 = a3[1];
      v13 = a3[2];
      *(_OWORD *)((char *)v10 + 44) = *(__int128 *)((char *)a3 + 44);
      v10[1] = v12;
      v10[2] = v13;
      *v10 = v11;
    }
  }
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_101495FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101495FBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *__p;
  void *v5;
  char *v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = operator new(0x18uLL);
  v5 = v3 + 3;
  v6 = (char *)(v3 + 3);
  *v3 = v2;
  v3[1] = 0x7FEFFFFFFFFFFFFFLL;
  *((_BYTE *)v3 + 16) = 0;
  __p = v3;
  sub_10047D948(v1 + 168, &__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_10149602C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101496048(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSwimNotifier::onOdometerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSwimNotifier::onOdometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSwimNotifier::onOdometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10149915C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101496200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101496220(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSwimNotifier::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSwimNotifier::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSwimNotifier::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101499490(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1014963D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014963F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B9240;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_10149646C()
{
  operator new();
}

void sub_1014964B4()
{
  operator delete();
}

uint64_t sub_1014964D8(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10149654C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230F7C8 != -1)
    dispatch_once(&qword_10230F7C8, block);
  return byte_10230F7C0;
}

id sub_10149654C(uint64_t a1)
{
  id result;

  result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", CFSTR("CLSwimNotifier"));
  byte_10230F7C0 = (char)result;
  return result;
}

uint64_t sub_101496578(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1021B8E58;

  *(_QWORD *)(a1 + 2424) = 0;
  objc_msgSend(*(id *)(a1 + 2432), "removeClient:prepareSessionEndForSessionType:", CLISP_ME_TOKEN, 19);

  *(_QWORD *)(a1 + 2432) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v2 = *(_QWORD *)(a1 + 2408);
  *(_QWORD *)(a1 + 2408) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 2400);
  *(_QWORD *)(a1 + 2400) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 2392);
  *(_QWORD *)(a1 + 2392) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 2352);
  *(_QWORD *)(a1 + 2352) = 0;
  if (v5)
  {
    *(_QWORD *)(v5 + 560) = off_10214AE70;
    operator delete();
  }
  sub_10047A060(a1 + 168);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return sub_1014963F8(a1);
}

void sub_1014966CC(uint64_t a1)
{
  sub_101496578(a1);
  operator delete();
}

void sub_1014966F0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
  v2 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLSwimNotifier is shutting down.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "CLSwimNotifier is shutting down.", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSwimNotifier::shutdown()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_101496920(a1);
  v3 = *(_QWORD *)(a1 + 2392);
  *(_QWORD *)(a1 + 2392) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 2400);
  *(_QWORD *)(a1 + 2400) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 2408);
  *(_QWORD *)(a1 + 2408) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 108) = 1;
}

void sub_101496920(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _WORD v14[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 2392);
  if (v2)
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 5);
  if (*(_BYTE *)(a1 + 2420))
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v3 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[SwimOdom] Unregistering for odometer updates", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "[SwimOdom] Unregistering for odometer updates", v14, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLSwimNotifier::turnOffSwimTrackingIfNecessary()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 112) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8), 2);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 112) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8), 4);
    *(_BYTE *)(a1 + 2420) = 0;
  }
  if (*(_QWORD *)(a1 + 136))
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v4 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[LOI] Unregistering for location updates", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "[LOI] Unregistering for location updates", v14, v13);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLSwimNotifier::turnOffSwimTrackingIfNecessary()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 0);
  }
  if (*(_QWORD *)(a1 + 160))
  {
    sub_1014981A8((_QWORD *)a1);
    v5 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v6 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Swim Controller released", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "Swim Controller released", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLSwimNotifier::turnOffSwimTrackingIfNecessary()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

_QWORD *sub_101496D80@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_101496DF8(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  int v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
  v4 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
  {
    v14[0] = *a2;
    v5 = v14[0];
    v6 = sub_1001B7864(a1, v14, 1);
    *(_DWORD *)buf = 67109376;
    v18 = v5;
    v19 = 1024;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Added client for %d, count %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v8 = qword_10229FCA8;
    v9 = *a2;
    v13 = v9;
    v10 = sub_1001B7864(a1, &v13, 1);
    v14[0] = 67109376;
    v14[1] = v9;
    v15 = 1024;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 1, "Added client for %d, count %d", v14, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSwimNotifier::registerForNotificationInternal(const CLSwimNotifier_Type::Notification &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return 1;
}

id sub_101496FFC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[5];
  _WORD v10[8];
  uint8_t buf[1640];

  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
  v4 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[LOI] Calling fetchLocationsOfInterestWithinDistance", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "[LOI] Calling fetchLocationsOfInterestWithinDistance", v10, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLSwimNotifier::getLOIsForLocation(CLLocation *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v5 = *(void **)(a1 + 144);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1014971D8;
  v9[3] = &unk_10214C458;
  v9[4] = a1;
  return objc_msgSend(v5, "fetchLocationsOfInterestWithinDistance:ofLocation:withReply:", a2, v9, 200.0);
}

id sub_1014971D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  _QWORD v6[7];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_101497234;
  v6[3] = &unk_102161180;
  v6[5] = a2;
  v6[6] = v3;
  v6[4] = a3;
  return objc_msgSend(v4, "async:", v6);
}

void sub_101497234(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  NSObject *v15;
  double v16;
  uint8_t *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  int v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;

  if (a1[4])
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v2 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_ERROR))
    {
      v3 = a1[4];
      *(_DWORD *)buf = 138412290;
      v26 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Error retrieving the RT LOIs. %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
      v4 = a1[4];
      v23 = 138412290;
      v24 = v4;
      v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 16, "Error retrieving the RT LOIs. %@", &v23, 12);
      v7 = v6;
      sub_100512490("Generic", 1, 0, 0, "void CLSwimNotifier::getLOIsForLocation(CLLocation *)_block_invoke", "%s\n", v5);
LABEL_10:
      if (v7 != buf)
        free(v7);
    }
  }
  else if (a1[5])
  {
    v8 = a1[6];
    v9 = +[NSMutableArray array](NSMutableArray, "array");
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v10 = (void *)a1[5];
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v13)
            objc_enumerationMutation(v10);
          objc_msgSend(v9, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i), "identifier"));
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v12);
    }
    sub_10047BAA0(v8 + 168, v9);
  }
  else
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v15 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[LOI] Found nil locationsOfInterest", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
      LOWORD(v23) = 0;
      v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 0, "[LOI] Found nil locationsOfInterest", &v23, 2);
      v7 = v17;
      sub_100512490("Generic", 1, 0, 2, "void CLSwimNotifier::getLOIsForLocation(CLLocation *)_block_invoke", "%s\n", v16);
      goto LABEL_10;
    }
  }
}

_BYTE *sub_1014975D0(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (result[120])
  {
    v1 = result;
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v2 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[LOI] Registering for location updates", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "[LOI] Registering for location updates", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLSwimNotifier::requestLocation()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    return objc_msgSend(*(id *)(*((_QWORD *)v1 + 17) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v1 + 17) + 8), 0, 0);
  }
  return result;
}

_BYTE *sub_10149777C(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v3 = result;
  if (!*((_QWORD *)result + 20))
  {
    if (result[2416])
      operator new();
    if (result[2417])
    {
      if (a2 != 1)
        operator new();
      operator new();
    }
    operator new();
  }
  v4 = *((_QWORD *)result + 299);
  if (v4)
    result = objc_msgSend(*(id *)(v4 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v4 + 8), 5, 0);
  if (a2 != 1 || v3[2420])
  {
    if (!a2)
      return sub_1014975D0(v3);
  }
  else
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v5 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[SwimOdom] Registering for odometer updates", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "[SwimOdom] Registering for odometer updates", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLSwimNotifier::turnOnSwimTrackingIfNecessary(CMSwimWorkoutLocation)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    objc_msgSend(*(id *)(*((_QWORD *)v3 + 14) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v3 + 14) + 8), 2, 0);
    result = objc_msgSend(*(id *)(*((_QWORD *)v3 + 14) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v3 + 14) + 8), 4, 0);
    v3[2420] = 1;
  }
  return result;
}

void sub_101497BE0()
{
  operator delete();
}

void sub_101497C48(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v2 = a1[294];
  if (!v2)
    operator new();
  sub_1014983F4((uint64_t)a1, (uint64_t)buf);
  sub_1012217F0(v2, (uint64_t)buf);
  if (!a1[295])
    operator new();
  if (!a1[296])
    operator new();
  if (!a1[297])
    operator new();
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
  v3 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "swim fusion setup", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "swim fusion setup", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLSwimNotifier::setupSensorFusion()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

void sub_101497F54()
{
  operator delete();
}

uint64_t sub_101497FA4(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  int v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
  v4 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
  {
    v14[0] = *a2;
    v5 = v14[0];
    v6 = sub_1001B7864(a1, v14, 1);
    *(_DWORD *)buf = 67109376;
    v18 = v5;
    v19 = 1024;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Removed client for %d, count %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v8 = qword_10229FCA8;
    v9 = *a2;
    v13 = v9;
    v10 = sub_1001B7864(a1, &v13, 1);
    v14[0] = 67109376;
    v14[1] = v9;
    v15 = 1024;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 1, "Removed client for %d, count %d", v14, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSwimNotifier::unregisterForNotificationInternal(const CLSwimNotifier_Type::Notification &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return 1;
}

void sub_1014981A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (a1[295])
  {
    v2 = sub_10021C350();
    sub_1000A4A6C(v2, 0, a1[295]);
    v3 = a1[295];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    a1[295] = 0;
  }
  if (a1[296])
  {
    v4 = sub_10024095C();
    sub_1000A4A6C(v4, 0, a1[296]);
    v5 = a1[296];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    a1[296] = 0;
  }
  if (a1[297])
  {
    v6 = sub_10021C350();
    sub_1000A4A6C(v6, 1, a1[297]);
    v7 = a1[297];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    a1[297] = 0;
  }
  v8 = a1[294];
  a1[294] = 0;
  if (v8)
  {
    *(_QWORD *)(v8 + 560) = off_10214AE70;
    operator delete();
  }
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
  v9 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "swim fusion teardown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "swim fusion teardown", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLSwimNotifier::teardownSensorFusion()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
}

void sub_1014983F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v3;
  int v4;
  int v5;
  double v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLGyroCalibrationDatabase")), "syncgetBiasFit:", &v5))v3 = v5 == 1;
  else
    v3 = 0;
  if (v3)
  {
    if ((CFAbsoluteTimeGetCurrent() - v6) / 3600.0 > 0.0 && (CFAbsoluteTimeGetCurrent() - v6) / 3600.0 >= 255.0)
    {
      LOBYTE(v4) = -1;
    }
    else if ((CFAbsoluteTimeGetCurrent() - v6) / 3600.0 <= 0.0)
    {
      LOBYTE(v4) = 0;
    }
    else
    {
      v4 = (int)((CFAbsoluteTimeGetCurrent() - v6) / 3600.0);
    }
    *(_OWORD *)a2 = v7;
    *(_QWORD *)(a2 + 16) = v8;
    *(_BYTE *)(a2 + 24) = v4;
  }
}

uint64_t sub_101498514(uint64_t a1, uint64_t a2)
{
  return sub_101498650(a2, a1);
}

float32x2_t *sub_101498524(uint64_t a1, uint64_t a2)
{
  return sub_101498B50(a2, a1);
}

_QWORD *sub_101498534(uint64_t a1, uint64_t a2)
{
  return sub_101498CF0(a2, a1);
}

uint64_t sub_101498544(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[3];
  uint64_t v13;
  _OWORD v14[6];
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  v3 = a1[20];
  if (!v3)
    sub_101956E30();
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  result = sub_10095A354(v3, a2, (uint64_t)&v6);
  if ((result & 1) != 0)
  {
    v14[4] = v10;
    v14[5] = v11;
    v15 = *(_QWORD *)&v12[0];
    v14[0] = v6;
    v14[1] = v7;
    v14[2] = v8;
    v14[3] = v9;
    v18 = *(_OWORD *)((char *)&v12[1] + 12);
    v17 = *(_OWORD *)((char *)v12 + 12);
    v20 = v13;
    v19 = HIDWORD(v12[2]);
    v16 = DWORD2(v12[0]) - v13;
    v5 = 0;
    return (*(uint64_t (**)(_QWORD *, int *, _OWORD *, _QWORD, uint64_t, _QWORD))(*a1 + 152))(a1, &v5, v14, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_101498650(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  float v20;
  int v21;
  int v22;
  __int128 v23;
  double v24;
  CFAbsoluteTime Current;

  v3 = *(_QWORD *)(a1 + 2352);
  if (v3)
  {
    result = sub_1012215D8(v3, (float32x2_t *)(a2 + 8), (double *)a2);
    if ((_DWORD)result)
    {
      v6 = *(_QWORD *)(a1 + 2352);
      v7 = *(_DWORD *)(v6 + 100);
      v15 = *(_QWORD *)(v6 + 92);
      v16 = v7;
      sub_100C9BAA0(v6);
      v17 = v8;
      v18 = v9;
      v19 = v10;
      v20 = sub_10012C7A4((float *)(*(_QWORD *)(a1 + 2352) + 16));
      v21 = v11;
      v22 = v12;
      v23 = *(_OWORD *)(*(_QWORD *)(a1 + 2352) + 16);
      v24 = *(double *)a2;
      Current = CFAbsoluteTimeGetCurrent();
      if (*(_BYTE *)(a1 + 2418))
        v13 = sub_101498710((uint64_t *)a2);
      if (*(_BYTE *)(a1 + 2419))
        sub_101498890(v13, (uint64_t)&v15);
      return sub_101498544((_QWORD *)a1, (uint64_t)&v15);
    }
  }
  else
  {
    v14 = (uint64_t *)sub_101956FA4();
    return sub_101498710(v14);
  }
  return result;
}

uint64_t sub_101498710(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD v13[157];
  uint64_t v14;
  char v15;
  uint64_t (**v16)();
  CFAbsoluteTime Current;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  char v22;

  v16 = off_102171468;
  v20 = *((_DWORD *)a1 + 4);
  v2 = a1[1];
  v18 = *a1;
  v19 = v2;
  Current = CFAbsoluteTimeGetCurrent();
  v21 = *((_WORD *)a1 + 10);
  v22 = *((_BYTE *)a1 + 22);
  v3 = sub_1011B78D4();
  sub_1011B8DB0(v3, (uint64_t)&v16);
  sub_1015EB864(v13);
  sub_101604B78((uint64_t)v13);
  v15 |= 1u;
  *(CFAbsoluteTime *)&v13[77] = Current;
  v4 = v14;
  v5 = *a1;
  *(_BYTE *)(v14 + 36) |= 1u;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = v14;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v14 + 36) |= 4u;
  *(_DWORD *)(v6 + 20) = v5;
  v7 = v14;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(_BYTE *)(v14 + 36) |= 8u;
  *(_DWORD *)(v7 + 24) = v5;
  v8 = v14;
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(_BYTE *)(v14 + 36) |= 0x10u;
  *(_DWORD *)(v8 + 28) = v5;
  v9 = v14;
  v10 = *((unsigned __int16 *)a1 + 10);
  *(_BYTE *)(v14 + 36) |= 2u;
  *(_DWORD *)(v9 + 16) = v10;
  v11 = v14;
  LOBYTE(v10) = *((_BYTE *)a1 + 22);
  *(_BYTE *)(v14 + 36) |= 0x20u;
  *(_BYTE *)(v11 + 32) = v10;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021B8FF0);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v13);
  return sub_1015EE304((PB::Base *)v13);
}

void sub_101498878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101498890(uint64_t a1, uint64_t a2)
{
  float64x2_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[110];
  uint64_t v31;
  char v32;
  uint64_t (**v33)();
  CFAbsoluteTime Current;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  int v38;
  __int128 v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;

  v33 = off_102171A98;
  v35 = *(_QWORD *)(a2 + 56);
  v3 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 44));
  v36 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 36));
  v37 = v3;
  v4 = *(_OWORD *)(a2 + 16);
  *((_QWORD *)&v4 + 1) = *(_QWORD *)a2;
  v39 = v4;
  LODWORD(v3.f64[0]) = *(_DWORD *)(a2 + 8);
  v38 = *(_DWORD *)(a2 + 12);
  v40 = LODWORD(v3.f64[0]);
  v42 = 0;
  v41 = 0;
  v43 = -16776961;
  Current = CFAbsoluteTimeGetCurrent();
  v5 = sub_1011B78D4();
  sub_1011B8DB0(v5, (uint64_t)&v33);
  sub_1015EB864(v30);
  sub_10160521C((uint64_t)v30);
  v32 |= 1u;
  *(CFAbsoluteTime *)&v30[77] = Current;
  v6 = v31;
  v7 = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v31 + 96) |= 0x10u;
  *(_QWORD *)(v6 + 40) = v7;
  v8 = v31;
  v9 = *(float *)(a2 + 36);
  *(_DWORD *)(v31 + 96) |= 2u;
  *(double *)(v8 + 16) = v9;
  v10 = v31;
  v11 = *(float *)(a2 + 40);
  *(_DWORD *)(v31 + 96) |= 4u;
  *(double *)(v10 + 24) = v11;
  v12 = v31;
  v13 = *(float *)(a2 + 44);
  *(_DWORD *)(v31 + 96) |= 8u;
  *(double *)(v12 + 32) = v13;
  v14 = v31;
  v15 = *(float *)(a2 + 48);
  *(_DWORD *)(v31 + 96) |= 1u;
  *(double *)(v14 + 8) = v15;
  v16 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v31 + 96) |= 0x1000u;
  *(_DWORD *)(v16 + 76) = LODWORD(v15);
  v17 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v31 + 96) |= 0x2000u;
  *(_DWORD *)(v17 + 80) = LODWORD(v15);
  v18 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(v31 + 96) |= 0x4000u;
  *(_DWORD *)(v18 + 84) = LODWORD(v15);
  v19 = v31;
  LODWORD(v15) = *(_DWORD *)a2;
  *(_DWORD *)(v31 + 96) |= 0x200u;
  *(_DWORD *)(v19 + 64) = LODWORD(v15);
  v20 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v31 + 96) |= 0x400u;
  *(_DWORD *)(v20 + 68) = LODWORD(v15);
  v21 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v31 + 96) |= 0x800u;
  *(_DWORD *)(v21 + 72) = LODWORD(v15);
  v22 = v31;
  *(_DWORD *)(v31 + 96) |= 0x40u;
  *(_DWORD *)(v22 + 52) = 0;
  v23 = v31;
  *(_DWORD *)(v31 + 96) |= 0x80u;
  *(_DWORD *)(v23 + 56) = 0;
  v24 = v31;
  *(_DWORD *)(v31 + 96) |= 0x100u;
  *(_DWORD *)(v24 + 60) = 0;
  v25 = v31;
  *(_DWORD *)(v31 + 96) |= 0x20u;
  *(_DWORD *)(v25 + 48) = 255;
  v26 = v31;
  *(_DWORD *)(v31 + 96) |= 0x10000u;
  *(_BYTE *)(v26 + 92) = 0;
  v27 = v31;
  *(_DWORD *)(v31 + 96) |= 0x20000u;
  *(_BYTE *)(v27 + 93) = 0;
  v28 = v31;
  *(_DWORD *)(v31 + 96) |= 0x8000u;
  *(_DWORD *)(v28 + 88) = 255;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021B8FF0);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v30);
  return sub_1015EE304((PB::Base *)v30);
}

void sub_101498B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  _Unwind_Resume(a1);
}

float32x2_t *sub_101498B50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v6;

  v3 = *(_QWORD *)(a1 + 2352);
  if (v3)
  {
    if (*(_BYTE *)(a1 + 2418))
    {
      sub_101498B98((uint64_t *)a2);
      v3 = *(_QWORD *)(a1 + 2352);
    }
    return sub_10122170C(v3, (float32x2_t *)(a2 + 8), (double *)a2);
  }
  else
  {
    v6 = (uint64_t *)sub_101957118();
    return (float32x2_t *)sub_101498B98(v6);
  }
}

uint64_t sub_101498B98(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[8];
  uint64_t v11;
  CFAbsoluteTime v12;
  char v13;
  uint64_t (**v14)();
  CFAbsoluteTime Current;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v14 = off_102172320;
  v18 = *((_DWORD *)a1 + 4);
  v2 = a1[1];
  v16 = *a1;
  v17 = v2;
  Current = CFAbsoluteTimeGetCurrent();
  v3 = sub_1011B78D4();
  sub_1011B8DB0(v3, (uint64_t)&v14);
  sub_1015EB864(v10);
  sub_101604AB0((uint64_t)v10);
  v13 |= 1u;
  v12 = Current;
  sub_1015A5F74(v11);
  v4 = *(_QWORD *)(v11 + 8);
  v5 = *a1;
  *(_BYTE *)(v4 + 32) |= 1u;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(_QWORD *)(v11 + 8);
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v6 + 32) |= 4u;
  *(_DWORD *)(v6 + 20) = v5;
  v7 = *(_QWORD *)(v11 + 8);
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(_BYTE *)(v7 + 32) |= 8u;
  *(_DWORD *)(v7 + 24) = v5;
  v8 = *(_QWORD *)(v11 + 8);
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(_BYTE *)(v8 + 32) |= 0x10u;
  *(_DWORD *)(v8 + 28) = v5;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021B8FF0);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v10);
  return sub_1015EE304((PB::Base *)v10);
}

void sub_101498CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_101498CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 2352);
  if (v2)
    return sub_1012217BC(v2, *(float *)(a2 + 8));
  v4 = sub_10195728C();
  return (_QWORD *)sub_101498D10(v4);
}

void sub_101498D10(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  double Current;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  uint8_t buf[16];
  unsigned int v20;
  _BYTE v21[28];

  if (*a3 == 5)
  {
    v12 = *(_QWORD *)(a1 + 160);
    if (v12)
      sub_10095A130(v12, a4);
  }
  else if (*a3 == 2)
  {
    v6 = *(_QWORD *)(a4 + 112);
    if (v6 == 19 && *(_QWORD *)(a4 + 16) == 1)
    {
      sub_101498FD0(a1, *(double *)(a4 + 8));
      v6 = *(_QWORD *)(a4 + 112);
    }
    if (v6 == 19)
      sub_10149777C((_BYTE *)a1, *(_QWORD *)(a4 + 128));
    v8 = *(_QWORD *)(a1 + 160);
    if (v8)
    {
      Current = CFAbsoluteTimeGetCurrent();
      if (sub_10095C1C0(v8, a4, (uint64_t)buf, Current))
      {
        v10 = *(_QWORD *)(a1 + 2352);
        v20 = vcvtas_u32_f32(*(float *)(v10 + 552));
        v11 = sub_100C9B20C((uint64_t)v21);
        *(_OWORD *)(v10 + 528) = *(_OWORD *)v21;
        *(_OWORD *)(v10 + 540) = *(_OWORD *)&v21[12];
        *(_QWORD *)v21 = off_102183890;
        sub_100D7CAF8(v11, (uint64_t *)buf);
      }
    }
    if (!sub_10047D950(a1 + 168))
      sub_101496920(a1);
  }
  else
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v14 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_FAULT))
    {
      v15 = *a3;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Unexpected CLMotionStateMediator notification type %d received in CLSwimNotifier", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
      v16 = *a3;
      *(_DWORD *)v21 = 67109120;
      *(_DWORD *)&v21[4] = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 17, "Unexpected CLMotionStateMediator notification type %d received in CLSwimNotifier", v21);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLSwimNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

uint64_t sub_101498FD0(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v4;
  double Current;
  int v6;
  _OWORD v7[6];
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  _OWORD v14[6];
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  v2 = *(_QWORD *)(result + 160);
  if (v2)
  {
    v4 = result;
    Current = CFAbsoluteTimeGetCurrent();
    sub_10095C2CC((uint64_t *)v2, 1, *(double *)(v2 + 712), Current, a2);
    result = sub_10095B3D4(v2, (uint64_t)v7);
    if ((_DWORD)result)
    {
      v14[3] = v7[3];
      v14[4] = v7[4];
      v14[5] = v7[5];
      v14[0] = v7[0];
      v15 = v8;
      v14[1] = v7[1];
      v14[2] = v7[2];
      v18 = v11;
      v17 = v10;
      v20 = v13;
      v19 = v12;
      v16 = v9 - v13;
      v6 = 0;
      return (*(uint64_t (**)(uint64_t, int *, _OWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v4 + 152))(v4, &v6, v14, 0, 0xFFFFFFFFLL, 0);
    }
  }
  return result;
}

void sub_101499100(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v6;

  if (*a3)
  {
    if ((*a3 - 1) < 2)
      sub_101957400();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 160);
    if (v6)
      sub_101159D38(v6 + 114712, a4);
    *(_QWORD *)(a1 + 2384) = *a4;
  }
}

void sub_10149915C(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  NSObject *v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  int v20;
  uint8_t buf[4];
  int v22;

  if (*a3 == 4 || *a3 == 2)
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v8 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
    {
      v9 = *a3;
      *(_DWORD *)buf = 67109120;
      v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[SwimOdom] Received an odometer update of type: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
      v13 = *a3;
      v19 = 67109120;
      v20 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "[SwimOdom] Received an odometer update of type: %d", &v19);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLSwimNotifier::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v10 = *(_QWORD *)(a1 + 160);
    if (v10)
      sub_10095B434(v10, a4);
  }
  else
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v11 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
    {
      v12 = *a3;
      *(_DWORD *)buf = 67109120;
      v22 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[SwimOdom] Received unhandled notification, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
      v16 = *a3;
      v19 = 67109120;
      v20 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "[SwimOdom] Received unhandled notification, %d", &v19);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLSwimNotifier::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

void sub_101499490(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v5;
  int v6;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  _OWORD v31[8];
  _OWORD v32[2];
  int v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint8_t buf[4];
  _BYTE v44[20];
  _BYTE v45[10];
  uint64_t v46;
  __int16 v47;
  uint64_t v48;

  if (*a3)
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v5 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
    {
      v6 = *a3;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v44 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received unhandled notification, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
      v21 = *a3;
      v33 = 67109120;
      LODWORD(v34) = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "Received unhandled notification, %d", &v33);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLSwimNotifier::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  else if (*(_BYTE *)(a1 + 120))
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    v9 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(_QWORD *)&v44[6] = "";
      *(_WORD *)&v44[14] = 1040;
      *(_DWORD *)&v44[16] = 156;
      *(_WORD *)v45 = 2097;
      *(_QWORD *)&v45[2] = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[LOI] Received a location\", \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x22u);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
    }
    v10 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(a4 + 4);
      v12 = *(_QWORD *)(a4 + 12);
      v13 = *(_QWORD *)(a4 + 20);
      v14 = *(_QWORD *)(a4 + 88);
      v15 = *(_QWORD *)(a4 + 76);
      *(_DWORD *)buf = 134284545;
      *(_QWORD *)v44 = v11;
      *(_WORD *)&v44[8] = 2049;
      *(_QWORD *)&v44[10] = v12;
      *(_WORD *)&v44[18] = 2048;
      *(_QWORD *)v45 = v13;
      *(_WORD *)&v45[8] = 2048;
      v46 = v14;
      v47 = 2048;
      v48 = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[LOI] Received a location,lat: %{private}lf, long: %{private}lf, accuracy: %lf, lifespan: %lf, timestamp: %lf", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B8FD0);
      v24 = *(_QWORD *)(a4 + 4);
      v25 = *(_QWORD *)(a4 + 12);
      v26 = *(_QWORD *)(a4 + 20);
      v27 = *(_QWORD *)(a4 + 88);
      v28 = *(_QWORD *)(a4 + 76);
      v33 = 134284545;
      v34 = v24;
      v35 = 2049;
      v36 = v25;
      v37 = 2048;
      v38 = v26;
      v39 = 2048;
      v40 = v27;
      v41 = 2048;
      v42 = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "[LOI] Received a location,lat: %{private}lf, long: %{private}lf, accuracy: %lf, lifespan: %lf, timestamp: %lf", &v33, 52);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLSwimNotifier::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    if (CFAbsoluteTimeGetCurrent() < *(double *)(a4 + 76) + 60.0)
    {
      v16 = objc_alloc((Class)CLLocation);
      v17 = *(_OWORD *)(a4 + 112);
      v31[6] = *(_OWORD *)(a4 + 96);
      v31[7] = v17;
      v32[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v32 + 12) = *(_OWORD *)(a4 + 140);
      v18 = *(_OWORD *)(a4 + 48);
      v31[2] = *(_OWORD *)(a4 + 32);
      v31[3] = v18;
      v19 = *(_OWORD *)(a4 + 80);
      v31[4] = *(_OWORD *)(a4 + 64);
      v31[5] = v19;
      v20 = *(_OWORD *)(a4 + 16);
      v31[0] = *(_OWORD *)a4;
      v31[1] = v20;
      sub_101496FFC(a1, (uint64_t)objc_msgSend(v16, "initWithClientLocation:", v31));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 0);
    }
  }
}

void sub_101499948()
{
  operator new();
}

void sub_1014999F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_101499A30(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_1021B93E0;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_101499B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_101499D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1023002D0);
}

uint64_t sub_101499D8C(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _OWORD buf[9];
  uint64_t v46;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        v46 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10149CA4C();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1023002D1;
        HIDWORD(v39) = v17;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != (char *)buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_10149A204(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_10149A484(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10149A80C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v11)
    return 0;
  v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v11;
  *(_OWORD *)(a3 + 16) = v12;
  v13 = *(_OWORD *)(v11 + 32);
  v14 = *(_OWORD *)(v11 + 48);
  v15 = *(_OWORD *)(v11 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v11 + 64);
  *(_OWORD *)(a3 + 80) = v15;
  *(_OWORD *)(a3 + 32) = v13;
  *(_OWORD *)(a3 + 48) = v14;
  v16 = *(_OWORD *)(v11 + 96);
  v17 = *(_OWORD *)(v11 + 112);
  v18 = *(_OWORD *)(v11 + 128);
  *(_QWORD *)(a3 + 144) = *(_QWORD *)(v11 + 144);
  *(_OWORD *)(a3 + 112) = v17;
  *(_OWORD *)(a3 + 128) = v18;
  *(_OWORD *)(a3 + 96) = v16;
  return 1;
}

uint64_t sub_10149A894(uint64_t a1, int *a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v16;
  __int128 v17;
  int *v18;

  v6 = (char *)operator new(0xB0uLL);
  v7 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v6 + 120) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 136) = v7;
  *(_OWORD *)(v6 + 152) = *(_OWORD *)(a3 + 128);
  v8 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 72) = v8;
  v9 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 88) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 104) = v9;
  v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_1021B9370;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 21) = *(_QWORD *)(a3 + 144);
  *(_OWORD *)(v6 + 40) = v10;
  *(_QWORD *)&v17 = v6 + 24;
  *((_QWORD *)&v17 + 1) = v6;
  v16 = *a2;
  v18 = &v16;
  v11 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v16, (uint64_t)&unk_101B9EB60, &v18);
  sub_1002B7674((uint64_t)(v11 + 8), &v17);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return 1;
}

void sub_10149A9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10149A9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[9];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_10149AA30(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v34[20];
  __int16 v35;
  _QWORD *v36;
  __int16 v37;
  std::__shared_weak_count *v38;
  _QWORD **v39;
  _QWORD *v40[3];
  std::__shared_weak_count *v41;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v34 = 2082;
      *(_QWORD *)&v34[2] = "";
      *(_WORD *)&v34[10] = 2082;
      *(_QWORD *)&v34[12] = "activity";
      v35 = 2082;
      v36 = v10;
      v37 = 2050;
      v38 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v39 = v40;
      memset(v40, 0, sizeof(v40));
      v41 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v39);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v38;
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v34, *(_QWORD **)&v34[8]);
      v21 = v41;
      if (v41)
      {
        v22 = (unint64_t *)&v41->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v39, v40[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0xB0uLL);
      v25 = *(_OWORD *)(a3 + 112);
      *(_OWORD *)(v24 + 120) = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(v24 + 136) = v25;
      *(_OWORD *)(v24 + 152) = *(_OWORD *)(a3 + 128);
      v26 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v24 + 56) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v24 + 72) = v26;
      v27 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(v24 + 88) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v24 + 104) = v27;
      v28 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v24 + 24) = *(_OWORD *)a3;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_1021B9370;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 21) = *(_QWORD *)(a3 + 144);
      *(_OWORD *)(v24 + 40) = v28;
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v34 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v29 = *(std::__shared_weak_count **)v34;
      if (*(_QWORD *)v34)
      {
        v30 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10149BF70();
    os_activity_scope_leave(&state);
  }
}

void sub_10149B0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10149B0F0(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::listClients() [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::listClients() [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::listClients() [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_10149B69C(uint64_t a1)
{
  sub_10149C9EC(a1);
  operator delete();
}

void sub_10149B6C0(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  uint64_t v5;
  int v6;

  v3 = a2;
  sub_10149C548(a3, a2);
  if (v5)
  {
    v6 = v3;
    (*(void (**)(_QWORD, int *, uint64_t, _QWORD))(a1 + 24))(0, &v6, v5, *(_QWORD *)(a1 + 32));
  }
}

void sub_10149B70C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10149B738(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void sub_10149B768(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10149B798()
{
  operator delete();
}

_QWORD *sub_10149B7AC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B9040;
  return result;
}

void sub_10149B7D0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B9040;
}

double sub_10149B7E8(uint64_t a1, double **a2)
{
  double *v2;
  double result;
  double v4;

  v2 = *a2;
  result = **a2;
  v4 = 0.0;
  while (v2 != a2[1])
  {
    v4 = v4 + v2[2];
    v2 += 3;
  }
  return result;
}

uint64_t sub_10149B814(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10149B850()
{
}

void sub_10149B860()
{
  operator delete();
}

_QWORD *sub_10149B874()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B90C0;
  return result;
}

void sub_10149B898(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B90C0;
}

double sub_10149B8B0(uint64_t a1, double **a2)
{
  double *v2;
  double result;
  double v4;
  double *v5;

  v2 = a2[1];
  result = **a2;
  v4 = 0.0;
  if (*a2 != v2)
  {
    v5 = *a2;
    do
    {
      v4 = v4 + v5[2];
      v5 += 3;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_10149B900(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10149B93C()
{
}

void sub_10149B94C()
{
  operator delete();
}

_QWORD *sub_10149B960()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B9140;
  return result;
}

void sub_10149B984(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B9140;
}

BOOL sub_10149B99C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) >= 0.0;
}

uint64_t sub_10149B9AC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10149B9E8()
{
}

void sub_10149B9F8()
{
  operator delete();
}

_QWORD *sub_10149BA0C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B91C0;
  return result;
}

void sub_10149BA30(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B91C0;
}

BOOL sub_10149BA48(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > 2.22044605e-16;
}

uint64_t sub_10149BA60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10149BA9C()
{
}

_QWORD *sub_10149BAA8(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_1021B9320;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_10149BBDC;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10149BBF0;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_10149BBB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10149BBDC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_10149BBF0(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_10149BC0C(uint64_t a1)
{
  sub_10149BED4(a1);
  operator delete();
}

id sub_10149BC30(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 __dst;
  uint64_t v23;
  int v24;
  unint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  unint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  int v39;

  if (a4 >= 0x18)
    v8 = 24;
  else
    v8 = a4;
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x19)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B9010);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v33 = 0x8000000101CA6062 & 0x7FFFFFFFFFFFFFFFLL;
      v34 = 2048;
      v35 = 24;
      v36 = 2048;
      v37 = a4;
      v38 = 1024;
      v39 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B9010);
      v24 = 136315906;
      v25 = 0x8000000101CA6062 & 0x7FFFFFFFFFFFFFFFLL;
      v26 = 2048;
      v27 = 24;
      v28 = 2048;
      v29 = a4;
      v30 = 1024;
      v31 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v24, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLGyro::Sample>::dispatchData(int, const void *, size_t) [T = CLGyro::Sample]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10149BF2C;
  v18[3] = &unk_102179570;
  v18[4] = v12;
  v18[5] = v11;
  v19 = __dst;
  v20 = v23;
  v21 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_10149BED4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B9320;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_10149BF2C(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 72));
  return result;
}

void sub_10149BF70()
{
  operator new();
}

void sub_10149C028(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        sub_10149C548(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, uint64_t, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_10149C3FC(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021B8FB0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_10149C3FC(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  int *v15;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    sub_10149C548(a4, a2);
    v10 = v9;
    v11 = *(_QWORD *)a3 + 80;
    v12 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v15 = (int *)(*(_QWORD *)a2 + 32);
    v13 = sub_1001AFE94(v12, v15, (uint64_t)&unk_101B9EB60, &v15);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v14);
  }
  return result;
}

void sub_10149C4D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021B9370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10149C4EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021B9370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10149C528(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_10149C548(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
  {
    sub_10149C5C0(a1);
  }
  else
  {
    v5 = objc_opt_class(CLCppContainer, v4);
    if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0)
      sub_10149C778(a1);
  }
}

void sub_10149C5C0(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  char v7;
  uint8_t buf[4];
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
  {
    sub_10149C94C((uint64_t)&v7, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B93B0);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v9 = v2;
      v10 = 2048;
      v11 = 0;
      v12 = 2080;
      v13 = 0x8000000101CA60D0 & 0x7FFFFFFFFFFFFFFFLL;
      v4 = v3;
      v5 = OS_LOG_TYPE_ERROR;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B93B0);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v9 = v2;
      v10 = 2048;
      v11 = 0;
      v12 = 2080;
      v13 = 0x8000000101CA60D0 & 0x7FFFFFFFFFFFFFFFLL;
      v4 = v6;
      v5 = OS_LOG_TYPE_FAULT;
      goto LABEL_12;
    }
  }
}

id sub_10149C778(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B93B0);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101CA60D0 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B93B0);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101CA60D0 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
  return 0;
}

void sub_10149C94C(uint64_t a1, void *a2)
{
  void *v3;

  if (objc_msgSend(a2, "cppObjectPtr")
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221DCD0))
  {
    goto LABEL_5;
  }
  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)152)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    objc_msgSend(a2, "cppObjectPtr");
    return;
  }
  v3 = (void *)sub_1019575DC();
  sub_10149C9C0(v3);
}

void sub_10149C9C0(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_10149C9EC(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_1021B93E0;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_10149CA4C()
{
  operator new();
}

uint64_t sub_10149CB04(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_10149CB24()
{
  xmmword_10230F640 = xmmword_101CA1DF0;
  *(_OWORD *)algn_10230F650 = xmmword_101CA1E00;
  xmmword_10230F660 = xmmword_101CA1E10;
  unk_10230F670 = xmmword_101CA1E20;
  xmmword_10230F680 = xmmword_101CA1E30;
  unk_10230F690 = xmmword_101CA1E40;
  xmmword_10230F6A0 = xmmword_101CA1E50;
  *(_OWORD *)algn_10230F6B0 = xmmword_101CA1E60;
  xmmword_10230F6C0 = xmmword_101CA1E70;
  unk_10230F6D0 = xmmword_101CA1E80;
  xmmword_10230F6E0 = xmmword_101CA1E90;
  unk_10230F6F0 = xmmword_101CA1EA0;
  qword_10230F700 = (uint64_t)off_1021B9040;
  qword_10230F718 = (uint64_t)&qword_10230F700;
  __cxa_atexit((void (*)(void *))sub_1004F90EC, &qword_10230F700, (void *)&_mh_execute_header);
  qword_10230F720 = (uint64_t)off_1021B90C0;
  qword_10230F738 = (uint64_t)&qword_10230F720;
  __cxa_atexit((void (*)(void *))sub_1004F90EC, &qword_10230F720, (void *)&_mh_execute_header);
  qword_10230F740 = (uint64_t)off_1021B9140;
  qword_10230F758 = (uint64_t)&qword_10230F740;
  __cxa_atexit((void (*)(void *))sub_1004F9138, &qword_10230F740, (void *)&_mh_execute_header);
  qword_10230F760 = (uint64_t)off_1021B91C0;
  qword_10230F778 = (uint64_t)&qword_10230F760;
  __cxa_atexit((void (*)(void *))sub_1004F9138, &qword_10230F760, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230F780, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230F780, (void *)&_mh_execute_header);
}

void sub_10149CC94(double *a1, uint64_t a2)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  v2 = a1;
  sub_1010FE1A4(a1 + 1, a2);
  v3 = v2[2];
  v4 = v2[3];
  v2 += 2;
  v5 = v3 * v3;
  v6 = v2[2];
  v7 = v2[3];
  v8 = v3 * v4;
  v9 = v3 * v6;
  v10 = v3 * v7;
  v11 = v4 * v4;
  v12 = v4 * v6;
  v13 = v4 * v7;
  v14 = v6 * v6;
  v15 = v6 * v7;
  v16 = v7 * v7;
  v17 = v8 + v8;
  v2[6] = v5 - v11 - v14 + v16;
  v2[7] = v17 - v15 - v15;
  v18 = v9 + v9;
  v2[8] = v13 + v18 + v13;
  v2[9] = v15 + v17 + v15;
  v2[10] = v11 - v5 - v14 + v16;
  v2[11] = v12 + v12 - v10 - v10;
  v2[12] = v18 - v13 - v13;
  v2[13] = v10 + v12 + v12 + v10;
  v2[14] = v16 + v14 - v5 - v11;
  sub_1011001A0(v2, v2 + 17);
}

double *sub_10149CD64(double *result)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  v2 = result[1];
  v1 = result[2];
  v3 = result[3];
  v4 = result[4];
  v5 = sqrt(v1 * v1 + v2 * v2 + v3 * v3 + v4 * v4);
  if (v5 == 0.0)
  {
    result[1] = 0.0;
    result[2] = 0.0;
    v6 = 1.0;
    result[3] = 0.0;
  }
  else
  {
    if (v5 == 1.0)
      return result;
    result[1] = v2 / v5;
    result[2] = v1 / v5;
    result[3] = v3 / v5;
    v6 = v4 / v5;
  }
  result[4] = v6;
  return result;
}

void sub_10149CDCC(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v3 = *(_OWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  sub_10149CD64((double *)(a1 + 8));
  v5 = *(double *)(a1 + 16);
  v6 = *(double *)(a1 + 24);
  v7 = v5 * v5;
  v8 = v5 * v6;
  v9 = *(double *)(a1 + 32);
  v10 = *(double *)(a1 + 40);
  v11 = v5 * v9;
  v12 = v5 * v10;
  v13 = v6 * v6;
  v14 = v6 * v9;
  v15 = v6 * v10;
  v16 = v9 * v9;
  v17 = v9 * v10;
  v18 = v10 * v10;
  v19 = v8 + v8;
  *(double *)(a1 + 64) = v7 - v13 - v16 + v18;
  *(double *)(a1 + 72) = v19 - v17 - v17;
  v20 = v11 + v11;
  *(double *)(a1 + 80) = v15 + v20 + v15;
  *(double *)(a1 + 88) = v17 + v19 + v17;
  *(double *)(a1 + 96) = v13 - v7 - v16 + v18;
  *(double *)(a1 + 104) = v14 + v14 - v12 - v12;
  *(double *)(a1 + 112) = v20 - v15 - v15;
  *(double *)(a1 + 120) = v12 + v14 + v14 + v12;
  *(double *)(a1 + 128) = v18 + v16 - v7 - v13;
  sub_1011001A0((double *)(a1 + 16), (double *)(a1 + 152));
}

void sub_10149CEB4(uint64_t a1, uint64_t a2, int8x16_t a3, double a4, int8x16_t a5)
{
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v5 = (double *)a1;
  sub_10149CF84((_QWORD *)(a1 + 8), a2, a3, a4, a5);
  v6 = v5[2];
  v7 = v5[3];
  v5 += 2;
  v8 = v6 * v6;
  v9 = v5[2];
  v10 = v5[3];
  v11 = v6 * v7;
  v12 = v6 * v9;
  v13 = v6 * v10;
  v14 = v7 * v7;
  v15 = v7 * v9;
  v16 = v7 * v10;
  v17 = v9 * v9;
  v18 = v9 * v10;
  v19 = v10 * v10;
  v20 = v11 + v11;
  v5[6] = v8 - v14 - v17 + v19;
  v5[7] = v20 - v18 - v18;
  v21 = v12 + v12;
  v5[8] = v16 + v21 + v16;
  v5[9] = v18 + v20 + v18;
  v5[10] = v14 - v8 - v17 + v19;
  v5[11] = v15 + v15 - v13 - v13;
  v5[12] = v21 - v16 - v16;
  v5[13] = v13 + v15 + v15 + v13;
  v5[14] = v19 + v17 - v8 - v14;
  sub_1011001A0(v5, v5 + 17);
}

void sub_10149CF84(_QWORD *a1, uint64_t a2, int8x16_t a3, double a4, int8x16_t a5)
{
  float64x2_t v7;
  double v8;
  _QWORD *v9;
  double v10;
  double v11;
  double cosval;
  double v13;
  double v14;
  __double2 v15;
  double v16;
  double v17;
  double v18;
  int8x16_t v19;
  int8x16_t v20;

  a3.i64[0] = *(_QWORD *)(a2 + 32);
  if (*(double *)a3.i64 <= -3.14159265 || *(double *)a3.i64 > 3.14159265)
  {
    a5.i64[0] = 0x400921FB54442D18;
    v7.f64[0] = NAN;
    v7.f64[1] = NAN;
    v19 = a5;
    v20 = (int8x16_t)vnegq_f64(v7);
    v18 = *(double *)vbslq_s8(v20, a5, a3).i64;
    *(double *)a3.i64 = fmod(*(double *)a3.i64 + v18, 6.28318531);
    *(_QWORD *)&v8 = vbslq_s8(v20, v19, a3).u64[0];
    if (*(double *)a3.i64 == 0.0)
      *(double *)a3.i64 = v8;
    else
      *(double *)a3.i64 = *(double *)a3.i64 - v18;
  }
  v9 = a1 + 1;
  v10 = *(double *)a3.i64 * 0.5;
  if (v10 == 0.0)
  {
    *v9 = 0;
    a1[2] = 0;
    a1[3] = 0;
    a1[4] = 0x3FF0000000000000;
    v11 = 0.0;
    cosval = 1.0;
    v13 = 0.0;
    v14 = 0.0;
  }
  else
  {
    if (fabs(v10) >= 2.22044605e-16)
    {
      v15 = __sincos_stret(v10);
      cosval = v15.__cosval;
      v14 = -(*(double *)(a2 + 8) * v15.__sinval);
      *((double *)a1 + 1) = v14;
      v13 = -(*(double *)(a2 + 16) * v15.__sinval);
      *((double *)a1 + 2) = v13;
      v11 = -(*(double *)(a2 + 24) * v15.__sinval);
    }
    else
    {
      v14 = -(*(double *)(a2 + 8) * v10);
      *((double *)a1 + 1) = v14;
      v13 = -(*(double *)(a2 + 16) * v10);
      *((double *)a1 + 2) = v13;
      v11 = -(*(double *)(a2 + 24) * v10);
      cosval = sqrt(1.0 - (v13 * v13 + v14 * v14 + v11 * v11));
    }
    *((double *)a1 + 3) = v11;
    *((double *)a1 + 4) = cosval;
  }
  v16 = sqrt(v13 * v13 + v14 * v14 + v11 * v11 + cosval * cosval);
  if (v16 == 0.0)
  {
    *v9 = 0;
    a1[2] = 0;
    v17 = 1.0;
    a1[3] = 0;
  }
  else
  {
    if (v16 == 1.0)
      return;
    *((double *)a1 + 1) = v14 / v16;
    *((double *)a1 + 2) = v13 / v16;
    *((double *)a1 + 3) = v11 / v16;
    v17 = cosval / v16;
  }
  *((double *)a1 + 4) = v17;
}

BOOL sub_10149D11C(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  double v7;
  BOOL v8;

  v1 = 152;
  while ((*(_QWORD *)&a1[v1] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v1 += 8;
    if (v1 == 184)
    {
      v2 = 200;
      while ((*(_QWORD *)&a1[v2] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        v2 += 8;
        if (v2 == 224)
        {
          if (*a1)
            return 1;
          v4 = 0;
          v5 = a1 + 240;
          while ((*(_QWORD *)&v5[v4] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            v4 += 8;
            if (v4 == 288)
            {
              v6 = 0;
              do
              {
                v7 = *(double *)&v5[v6];
                result = v7 >= 0.0;
                if (v7 < 0.0)
                  break;
                v8 = v6 == 280;
                v6 += 56;
              }
              while (!v8);
              return result;
            }
          }
          return 0;
        }
      }
      return 0;
    }
  }
  return 0;
}

double sub_10149D1CC(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 96) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  return result;
}

void sub_10149D234(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int8x16_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[37];
  uint64_t v37;
  int64x2_t v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t (**v42)();
  _BYTE v43[288];
  uint64_t v44;
  uint64_t (**v45)();
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (**v57)();
  __int128 v58;
  __int128 v59;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD *)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    v3 = *(_QWORD *)(a1 + 88);
    v46 = *(_QWORD *)(a1 + 64);
    v47 = v3;
    v5 = *(_QWORD *)(a1 + 120);
    v48 = *(_QWORD *)(a1 + 112);
    v49 = v2;
    v6 = *(_QWORD *)(a1 + 104);
    v50 = *(_QWORD *)(a1 + 96);
    v51 = v5;
    v45 = off_1021A0F28;
    v55 = 0;
    v52 = v4;
    v53 = v6;
    v54 = *(_QWORD *)(a1 + 128);
    sub_10149CC94((double *)a1, (uint64_t)&v45);
    v7 = *(double *)(a1 + 200);
    v8 = *(double *)(a1 + 208);
    v9 = *(double *)(a1 + 88) * v8 + *(double *)(a1 + 64) * v7;
    v10 = *(double *)(a1 + 216);
    v11 = v8 * *(double *)(a1 + 96) + *(double *)(a1 + 72) * v7;
    v12 = *(double *)(a1 + 112);
    v13 = *(double *)(a1 + 120);
    v14 = v8 * *(double *)(a1 + 104) + *(double *)(a1 + 80) * v7;
    v15 = *(double *)(a1 + 128);
    *(_QWORD *)(a1 + 224) = 0;
    *(double *)(a1 + 200) = -(v9 + v12 * v10);
    *(double *)(a1 + 208) = -(v11 + v13 * v10);
    *(double *)(a1 + 216) = -(v14 + v15 * v10);
  }
  else
  {
    v58 = *(_OWORD *)(a1 + 200);
    v59 = *(_OWORD *)(a1 + 216);
    v16 = *(_QWORD *)(a1 + 72);
    v18 = *(_QWORD *)(a1 + 80);
    v17 = *(_QWORD *)(a1 + 88);
    v46 = *(_QWORD *)(a1 + 64);
    v47 = v17;
    v19 = *(_QWORD *)(a1 + 120);
    v48 = *(_QWORD *)(a1 + 112);
    v49 = v16;
    v20 = *(_QWORD *)(a1 + 104);
    v50 = *(_QWORD *)(a1 + 96);
    v51 = v19;
    v57 = off_1021A1298;
    v45 = off_1021A0F28;
    v55 = 0;
    v52 = v18;
    v53 = v20;
    v54 = *(_QWORD *)(a1 + 128);
    sub_10149CC94((double *)a1, (uint64_t)&v45);
    v21 = *(double *)(a1 + 200);
    v22 = *(double *)(a1 + 208);
    v23 = *(double *)(a1 + 88) * v22 + *(double *)(a1 + 64) * v21;
    v24 = *(double *)(a1 + 216);
    v25 = v22 * *(double *)(a1 + 96) + *(double *)(a1 + 72) * v21;
    v26 = *(double *)(a1 + 112);
    v27 = *(double *)(a1 + 120);
    v28 = v22 * *(double *)(a1 + 104) + *(double *)(a1 + 80) * v21;
    v29 = *(double *)(a1 + 128);
    *(_QWORD *)(a1 + 224) = 0;
    *(double *)v30.i64 = -(v23 + v26 * v24);
    *(_QWORD *)(a1 + 200) = v30.i64[0];
    *(double *)(a1 + 208) = -(v25 + v27 * v24);
    *(double *)(a1 + 216) = -(v28 + v29 * v24);
    sub_10149D4D4(a1 + 56, a1 + 144, (double *)&v57, (uint64_t)&v45, v30);
    LOBYTE(v37) = 1;
    v38 = vdupq_n_s64(6uLL);
    v39 = xmmword_101C40190;
    v40 = &v46;
    v41 = &v56;
    sub_1010FABDC(a1 + 232, &v37, &v35);
    memset(v43, 0, sizeof(v43));
    v31 = v43;
    v42 = off_1021A10E0;
    v44 = 0;
    v32 = (uint64_t *)v36[2];
    v33 = (uint64_t *)v36[3];
    while (v32 != v33)
    {
      v34 = *v32++;
      *v31++ = v34;
    }
    sub_1010FE154(&v35);
    sub_1010FACB0((uint64_t)&v45, (uint64_t)&v42, (uint64_t)&v35);
    memcpy((void *)(a1 + 240), v36, 0x128uLL);
    sub_10149D5F0(a1);
  }
}

double sub_10149D4D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>, int8x16_t a5@<Q2>)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  double result;
  _BYTE v11[8];
  __int128 v12;
  _BYTE v13[32];
  __int128 v14;
  __int128 v15;

  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_QWORD *)(a4 + 120) = 0xBFF0000000000000;
  *(_QWORD *)(a4 + 64) = 0xBFF0000000000000;
  *(_QWORD *)a4 = off_1021A10E0;
  *(_QWORD *)(a4 + 8) = 0xBFF0000000000000;
  sub_10149E0BC((double *)a1, a2, a3, (uint64_t)v11, (int8x16_t)0, a5);
  *(_OWORD *)(a4 + 32) = v12;
  *(_QWORD *)(a4 + 48) = *(_QWORD *)v13;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)&v13[8];
  *(_QWORD *)(a4 + 96) = *(_QWORD *)&v13[24];
  *(_OWORD *)(a4 + 128) = v14;
  *(_QWORD *)(a4 + 144) = v15;
  v7 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)v13 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v13[16] = v7;
  v8 = *(_OWORD *)(a1 + 72);
  v14 = *(_OWORD *)(a1 + 56);
  v15 = v8;
  v9 = 8;
  v12 = *(_OWORD *)(a1 + 8);
  do
  {
    *(double *)&v11[v9] = -*(double *)&v11[v9];
    v9 += 8;
  }
  while (v9 != 80);
  *(_OWORD *)(a4 + 176) = v12;
  *(_QWORD *)(a4 + 192) = *(_QWORD *)v13;
  *(_OWORD *)(a4 + 224) = *(_OWORD *)&v13[8];
  *(_QWORD *)(a4 + 240) = *(_QWORD *)&v13[24];
  *(_OWORD *)(a4 + 272) = v14;
  result = *(double *)&v15;
  *(_QWORD *)(a4 + 288) = v15;
  return result;
}

void sub_10149D5F0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  int64x2_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t __B;
  _BYTE v9[296];

  v1 = a1 + 232;
  v2 = (void *)(a1 + 240);
  LOBYTE(v3) = 1;
  v4 = vdupq_n_s64(6uLL);
  v5 = xmmword_101C40190;
  v6 = a1 + 240;
  v7 = a1 + 528;
  __B = (uint64_t)off_1021A10E0;
  memcpy(v9, (const void *)(a1 + 240), sizeof(v9));
  sub_1014A0904((uint64_t)&__B, &v3);
  memcpy(v2, v9, 0x128uLL);
  __B = 0x3FE0000000000000;
  sub_1014A09F0(v1, (const double *)&__B);
}

void sub_10149D69C(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v5;
  uint64_t v6;
  float64x2_t v7;
  __int128 v8;
  uint64_t v9;
  float64x2_t *v10;
  __int128 v11;
  _OWORD *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t *v23;
  __int128 *p_B;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  __int128 v50;
  double v51;
  uint64_t v52;
  int64x2_t v53;
  __int128 v54;
  float64x2_t *v55;
  uint64_t *v56;
  uint64_t v57[3];
  uint64_t *v58;
  uint64_t *v59;
  uint64_t (**v60)();
  __int128 __B;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t (**v80)();
  float64x2_t v81;
  __int128 v82;
  uint64_t v83;
  _BYTE v84[112];
  _QWORD v85[6];
  uint64_t (**v86)();
  double v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t (**v91)();
  float64x2_t v92;
  _BYTE v93[32];
  float64x2_t v94;
  __int128 v95;
  uint64_t (**v96)();
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t (**v100)();
  _OWORD v101[2];
  uint64_t (**v102)();
  _BYTE v103[296];

  if (a3)
  {
    LOBYTE(v86) = *(_BYTE *)a1;
    v5 = *(_OWORD *)(a1 + 32);
    v88 = *(_OWORD *)(a1 + 16);
    v89 = v5;
    v6 = *(_QWORD *)(a1 + 48);
    v87 = COERCE_DOUBLE(off_1021A0EF0);
    v90 = v6;
    v91 = off_1021A0F28;
    v7 = *(float64x2_t *)(a1 + 112);
    *(_OWORD *)&v93[16] = *(_OWORD *)(a1 + 96);
    v94 = v7;
    v95 = *(_OWORD *)(a1 + 128);
    v8 = *(_OWORD *)(a1 + 80);
    v92 = *(float64x2_t *)(a1 + 64);
    *(_OWORD *)v93 = v8;
    v97 = *(_OWORD *)(a1 + 152);
    v98 = *(_OWORD *)(a1 + 168);
    v9 = *(_QWORD *)(a1 + 184);
    v96 = off_1021A0D18;
    v99 = v9;
    v10 = (float64x2_t *)(a1 + 200);
    v101[0] = *(_OWORD *)(a1 + 200);
    v11 = *(_OWORD *)(a1 + 216);
    v100 = off_1021A1298;
    v102 = off_1021A10E0;
    v12 = (_OWORD *)(a1 + 240);
    v101[1] = v11;
    memcpy(v103, (const void *)(a1 + 240), sizeof(v103));
    v85[5] = 0;
    v85[0] = off_1021A0EF0;
    v14 = *(double *)(a2 + 32);
    v13 = *(double *)(a2 + 40);
    v15 = *(double *)(a2 + 16);
    v16 = *(double *)(a2 + 24);
    *(double *)&v85[1] = *(double *)&v88 * v13
                       + *((double *)&v89 + 1) * v15
                       - *((double *)&v88 + 1) * v14
                       + *(double *)&v89 * v16;
    *(double *)&v85[2] = v13 * *((double *)&v88 + 1)
                       + *((double *)&v89 + 1) * v16
                       - *(double *)&v89 * v15
                       + *(double *)&v88 * v14;
    *(double *)&v85[3] = v13 * *(double *)&v89
                       + *((double *)&v89 + 1) * v14
                       - *(double *)&v88 * v16
                       + *((double *)&v88 + 1) * v15;
    *(double *)&v85[4] = *((double *)&v89 + 1) * v13
                       - *(double *)&v88 * v15
                       - *((double *)&v88 + 1) * v16
                       - *(double *)&v89 * v14;
    sub_10149CDCC(a1, (uint64_t)v85);
    v17 = 0;
    v80 = off_1021A1298;
    *((_QWORD *)&v82 + 1) = 0;
    v18 = *(double *)(a2 + 200);
    v19 = *(double *)(a2 + 208);
    v20 = *(double *)(a2 + 216);
    v81 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v93[8], v19), v92, v18), v94, v20);
    *(double *)&v82 = v19 * *(double *)&v93[24] + *(double *)v93 * v18 + *(double *)&v95 * v20;
    do
    {
      *(double *)&(&v80)[v17 + 1] = *(double *)&(&v80)[v17 + 1] + *(double *)((char *)v101 + v17 * 8);
      ++v17;
    }
    while (v17 != 3);
    v21 = v82;
    *v10 = v81;
    *(_OWORD *)(a1 + 216) = v21;
    sub_10149DC98((double *)(a1 + 144), a1 + 8, (uint64_t)v84);
    *(_BYTE *)a1 = 0;
    *v12 = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    if (!(_BYTE)v86)
    {
      sub_10149DDEC((uint64_t)&v86, a2, (uint64_t)v84, (uint64_t)&v80);
      LOBYTE(v52) = 0;
      v53 = vdupq_n_s64(6uLL);
      v54 = xmmword_101C40190;
      v55 = &v81;
      v56 = &v83;
      sub_1010FABDC((uint64_t)&v102, &v52, v57);
      v77 = 0u;
      v78 = 0u;
      __B = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0u;
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      v75 = 0u;
      v76 = 0u;
      v60 = off_1021A10E0;
      v79 = 0;
      v22 = v58;
      v23 = v59;
      if (v58 != v59)
      {
        p_B = &__B;
        do
        {
          v25 = *v22++;
          *(_QWORD *)p_B = v25;
          p_B = (__int128 *)((char *)p_B + 8);
        }
        while (v22 != v23);
      }
      sub_1010FE154(v57);
      cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 6, 6, 6, 1.0, v81.f64, 6, (const double *)&__B, 6, 1.0, (double *)(a1 + 240), 6);
    }
    if (!*(_BYTE *)a2)
    {
      sub_10149DF68((uint64_t)&v86, a2, (uint64_t)v84, (uint64_t)&v80);
      LOBYTE(v52) = 0;
      v53 = vdupq_n_s64(6uLL);
      v54 = xmmword_101C40190;
      v55 = &v81;
      v56 = &v83;
      sub_1010FABDC(a2 + 232, &v52, v57);
      v77 = 0u;
      v78 = 0u;
      __B = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0u;
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      v75 = 0u;
      v76 = 0u;
      v60 = off_1021A10E0;
      v79 = 0;
      v26 = v58;
      v27 = v59;
      if (v58 != v59)
      {
        v28 = &__B;
        do
        {
          v29 = *v26++;
          *(_QWORD *)v28 = v29;
          v28 = (__int128 *)((char *)v28 + 8);
        }
        while (v26 != v27);
      }
      sub_1010FE154(v57);
      cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 6, 6, 6, 1.0, v81.f64, 6, (const double *)&__B, 6, 1.0, (double *)(a1 + 240), 6);
    }
    sub_10149D5F0(a1);
  }
  else
  {
    v30 = *(double *)(a1 + 64);
    v31 = *(double *)(a1 + 72);
    v32 = *(double *)(a1 + 88);
    v51 = *(double *)(a1 + 80);
    v33 = *(double *)(a1 + 96);
    v34 = *(double *)(a1 + 104);
    v35 = *(double *)(a1 + 112);
    v36 = *(double *)(a1 + 120);
    v37 = *(double *)(a1 + 128);
    v86 = off_1021A0EF0;
    v38 = *(double *)(a1 + 16);
    v39 = *(double *)(a1 + 24);
    v41 = *(double *)(a2 + 32);
    v40 = *(double *)(a2 + 40);
    v43 = *(double *)(a1 + 32);
    v42 = *(double *)(a1 + 40);
    v44 = *(double *)(a2 + 16);
    v45 = *(double *)(a2 + 24);
    v87 = v38 * v40 + v42 * v44 - v39 * v41 + v43 * v45;
    *(double *)&v88 = v40 * v39 + v42 * v45 - v43 * v44 + v38 * v41;
    *((double *)&v88 + 1) = v40 * v43 + v42 * v41 - v38 * v45 + v39 * v44;
    v89 = COERCE_UNSIGNED_INT64(v42 * v40 - v38 * v44 - v39 * v45 - v43 * v41);
    sub_10149CDCC(a1, (uint64_t)&v86);
    v46 = 0;
    *((_QWORD *)&v82 + 1) = 0;
    v47 = *(double *)(a2 + 200);
    v48 = *(double *)(a2 + 208);
    v49 = *(double *)(a2 + 216);
    v81.f64[0] = v32 * v48 + v30 * v47 + v35 * v49;
    v81.f64[1] = v33 * v48 + v31 * v47 + v36 * v49;
    *(double *)&v82 = v34 * v48 + v51 * v47 + v37 * v49;
    do
    {
      *(double *)&(&v80)[v46 + 1] = *(double *)&(&v80)[v46 + 1] + *(double *)(a1 + v46 * 8 + 200);
      ++v46;
    }
    while (v46 != 3);
    v50 = v82;
    *(float64x2_t *)(a1 + 200) = v81;
    *(_OWORD *)(a1 + 216) = v50;
    *(_BYTE *)a1 = 1;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
  }
}

void sub_10149DC98(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double v6;
  double v8;
  double v9;
  __double2 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t i;

  *(_QWORD *)a3 = off_1021B9408;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_QWORD *)(a3 + 104) = 0;
  v5 = a1[4];
  v6 = v5 * 0.5;
  if (v5 * 0.5 == 0.0)
  {
    *(_QWORD *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0uLL;
    *(_OWORD *)(a3 + 80) = 0uLL;
    *(_OWORD *)(a3 + 32) = 0uLL;
    *(_OWORD *)(a3 + 48) = 0uLL;
    *(_OWORD *)(a3 + 16) = 0uLL;
    *(_QWORD *)(a3 + 72) = 0xC000000000000000;
    *(_QWORD *)(a3 + 40) = 0xC000000000000000;
    *(_QWORD *)(a3 + 8) = 0xC000000000000000;
  }
  else
  {
    if (fabs(v6) >= 2.22044605e-16)
    {
      v10 = __sincos_stret(v6);
      v9 = v5 / v10.__sinval;
      v8 = -(v5 / v10.__sinval - v10.__cosval * 2.0);
      v5 = v10.__sinval + v10.__sinval;
    }
    else
    {
      v8 = -(v6 * v6);
      v9 = 2.0;
    }
    v11 = a1[1];
    v12 = a1[2];
    v13 = v8 * -(v12 * v11);
    *(double *)(a3 + 8) = -(v9 - -(v11 * v11) * v8);
    *(double *)(a3 + 16) = v13;
    v14 = a1[3];
    v15 = v8 * -(v14 * v11);
    *(double *)(a3 + 24) = v15;
    *(double *)(a3 + 32) = v13;
    v16 = v8 * -(v14 * v12);
    *(double *)(a3 + 40) = -(v9 - -(v12 * v12) * v8);
    *(double *)(a3 + 48) = v16;
    *(double *)(a3 + 56) = v15;
    *(double *)(a3 + 64) = v16;
    *(double *)(a3 + 72) = -(v9 - -(v14 * v14) * v8);
    *(double *)(a3 + 80) = -(v11 * v5);
    *(double *)(a3 + 88) = -(v12 * v5);
    *(double *)(a3 + 96) = -(v14 * v5);
  }
  if (*(double *)(a2 + 32) < 0.0)
  {
    for (i = 8; i != 104; i += 16)
      *(float64x2_t *)(a3 + i) = vnegq_f64(*(float64x2_t *)(a3 + i));
  }
}

double sub_10149DDEC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  int8x16_t v12;
  int8x16_t v13;
  double result;
  _BYTE v15[8];
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  double v21;
  _BYTE v22[8];
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _BYTE v29[112];
  _QWORD v30[18];

  v9 = *(double *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v11 = *(double *)(a2 + 16);
  v10 = *(double *)(a2 + 24);
  v30[0] = off_1021B95C0;
  v30[1] = v8;
  *(double *)&v30[2] = v9;
  *(double *)&v30[3] = -v10;
  *(double *)&v30[4] = -v11;
  *(double *)&v30[5] = -v9;
  v30[6] = v8;
  *(double *)&v30[7] = v11;
  *(double *)&v30[8] = -v10;
  *(double *)&v30[9] = v10;
  *(double *)&v30[10] = -v11;
  v30[11] = v8;
  *(double *)&v30[12] = -v9;
  *(double *)&v30[13] = v11;
  *(double *)&v30[14] = v10;
  *(double *)&v30[15] = v9;
  v30[16] = v8;
  v30[17] = 0;
  sub_10149E8EC(a1 + 8, (double *)(a1 + 144), (uint64_t)v29);
  *(_QWORD *)a4 = off_1021A10E0;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_OWORD *)(a4 + 232) = 0u;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_OWORD *)(a4 + 264) = 0u;
  *(_OWORD *)(a4 + 280) = 0u;
  *(_QWORD *)(a4 + 296) = 0;
  sub_10149EAD4(a3, (uint64_t)v30, (uint64_t)v15);
  sub_10149EA48((uint64_t)v15, (uint64_t)v29, (uint64_t)v22);
  *(_OWORD *)(a4 + 8) = v23;
  *(_QWORD *)(a4 + 24) = v24;
  *(_OWORD *)(a4 + 56) = v25;
  *(_QWORD *)(a4 + 72) = v26;
  v12.i64[1] = *((_QWORD *)&v27 + 1);
  *(_OWORD *)(a4 + 104) = v27;
  v12.i64[0] = v28;
  *(_QWORD *)(a4 + 120) = v28;
  sub_10149E0BC((double *)(a1 + 56), a1 + 144, (double *)(a2 + 192), (uint64_t)v15, v12, v13);
  *(_OWORD *)(a4 + 32) = v16;
  *(_QWORD *)(a4 + 48) = v17;
  *(_OWORD *)(a4 + 80) = v18;
  *(_QWORD *)(a4 + 96) = v19;
  *(_OWORD *)(a4 + 128) = v20;
  result = v21;
  *(double *)(a4 + 144) = v21;
  *(_QWORD *)(a4 + 288) = 0x3FF0000000000000;
  *(_QWORD *)(a4 + 232) = 0x3FF0000000000000;
  *(_QWORD *)(a4 + 176) = 0x3FF0000000000000;
  return result;
}

double sub_10149DF68@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v12;
  int64x2_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[8];
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[112];
  _QWORD v25[18];

  v8 = *(double *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v10 = *(double *)(a1 + 16);
  v9 = *(double *)(a1 + 24);
  v25[0] = off_1021B95C0;
  v25[1] = v7;
  *(double *)&v25[2] = -v8;
  *(double *)&v25[3] = v9;
  *(double *)&v25[4] = -v10;
  *(double *)&v25[5] = v8;
  v25[6] = v7;
  *(double *)&v25[7] = -v10;
  *(double *)&v25[8] = -v9;
  *(double *)&v25[9] = -v9;
  *(double *)&v25[10] = v10;
  v25[11] = v7;
  *(double *)&v25[12] = -v8;
  *(double *)&v25[13] = v10;
  *(double *)&v25[14] = v9;
  *(double *)&v25[15] = v8;
  v25[16] = v7;
  v25[17] = 0;
  sub_10149E8EC(a2 + 8, (double *)(a2 + 144), (uint64_t)v24);
  *(_QWORD *)a4 = off_1021A10E0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  sub_10149EAD4(a3, (uint64_t)v25, (uint64_t)&v12);
  sub_10149EA48((uint64_t)&v12, (uint64_t)v24, (uint64_t)v17);
  *(_OWORD *)(a4 + 8) = v18;
  *(_QWORD *)(a4 + 24) = v19;
  *(_OWORD *)(a4 + 56) = v20;
  *(_QWORD *)(a4 + 72) = v21;
  *(_OWORD *)(a4 + 104) = v22;
  *(_QWORD *)(a4 + 120) = v23;
  LOBYTE(v12) = 1;
  v13 = vdupq_n_s64(3uLL);
  v14 = xmmword_101B9B430;
  v15 = a4 + 176;
  v16 = a4 + 296;
  return sub_10149EB68(&v12, a1 + 56);
}

void sub_10149E0BC(double *a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>, int8x16_t a5@<Q0>, int8x16_t a6@<Q2>)
{
  uint64_t v9;
  float64x2_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 *v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t i;
  double v34;
  double v35;
  double v36;
  int8x16_t v37;
  double v38;
  int8x16_t v39;
  double v40;
  _BYTE v41[72];
  double v42[3];
  uint64_t v43;
  __int128 v44;
  int64x2_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (**v48)();
  __int128 v49;
  __int128 v50;
  uint64_t (**v51)();
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  double __B;

  v9 = a2 + 32;
  a5.i64[0] = *(_QWORD *)(a2 + 32);
  if (*(double *)a5.i64 <= -3.14159265 || *(double *)a5.i64 > 3.14159265)
  {
    a6.i64[0] = 0x400921FB54442D18;
    v10.f64[0] = NAN;
    v10.f64[1] = NAN;
    v37 = a6;
    v39 = (int8x16_t)vnegq_f64(v10);
    v35 = *(double *)vbslq_s8(v39, a6, a5).i64;
    *(double *)a5.i64 = fmod(*(double *)a5.i64 + v35, 6.28318531);
    *(_QWORD *)&v11 = vbslq_s8(v39, v37, a5).u64[0];
    if (*(double *)a5.i64 == 0.0)
      *(double *)a5.i64 = v11;
    else
      *(double *)a5.i64 = *(double *)a5.i64 - v35;
  }
  __B = *(double *)a5.i64;
  v51 = off_1021A0F28;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v13 = a3[2];
  v12 = a3[3];
  v14 = a3[1];
  *((double *)&v52 + 1) = -v12;
  *(double *)&v53 = v13;
  *((double *)&v53 + 1) = v12;
  *((double *)&v54 + 1) = -v14;
  *(double *)&v55 = -v13;
  *((double *)&v55 + 1) = v14;
  if (fabs(*(double *)a5.i64 * 0.5) >= 2.22044605e-16)
  {
    LOBYTE(v43) = 0;
    v44 = xmmword_101C40170;
    v45 = vdupq_n_s64(1uLL);
    v46 = v9 - 24;
    v47 = v9;
    memset(v41, 0, sizeof(v41));
    sub_1010FE440((uint64_t *)v41, &v43);
    sub_1010FFB08((uint64_t)v41, &__B);
    v48 = off_1021A1298;
    v49 = 0u;
    v50 = 0u;
    v17 = *(uint64_t **)&v41[24];
    v18 = *(uint64_t **)&v41[32];
    if (*(_QWORD *)&v41[24] == *(_QWORD *)&v41[32])
    {
      v23 = 0.0;
      v21 = 0.0;
      v22 = 0.0;
    }
    else
    {
      v19 = &v49;
      do
      {
        v20 = *v17++;
        *(_QWORD *)v19 = v20;
        v19 = (__int128 *)((char *)v19 + 8);
      }
      while (v17 != v18);
      v21 = *((double *)&v49 + 1);
      v22 = *(double *)&v50;
      v23 = *(double *)&v49;
    }
    sub_1010FE154(v41);
    v24 = a1[2];
    v25 = a1[6];
    v40 = a1[7];
    v26 = a1[9];
    v38 = a1[8];
    v27 = a1[3];
    v28 = a1[4];
    v34 = a1[5];
    v36 = a1[1];
    *(_QWORD *)v41 = off_1021A0F28;
    memset(&v41[8], 0, 64);
    *(_OWORD *)v42 = 0u;
    cblas_dsyr(CblasColMajor, CblasLower, 3, 1.0, (const double *)&v49, 1, (double *)&v41[8], 3);
    v29 = *(double *)&v41[16];
    *(double *)&v41[8] = v24 * v22 + (v36 + -1.0) * 0.0 - v27 * v21 + *(double *)&v41[8];
    *(double *)&v41[16] = (v34 + -1.0) * v22 + v28 * 0.0 - v25 * v21 + *(double *)&v41[16];
    v30 = *(double *)&v41[24];
    *(double *)&v41[24] = v38 * v22 + v40 * 0.0 - (v26 + -1.0) * v21 + *(double *)&v41[24];
    *(double *)&v41[32] = v24 * 0.0 - (v36 + -1.0) * v22 + v27 * v23 + v29;
    v31 = *(double *)&v41[48];
    *(double *)&v41[40] = (v34 + -1.0) * 0.0 - v28 * v22 + v25 * v23 + *(double *)&v41[40];
    *(double *)&v41[48] = v38 * 0.0 - v40 * v22 + (v26 + -1.0) * v23 + *(double *)&v41[48];
    *(double *)&v41[56] = (v36 + -1.0) * v21 - v23 * v24 + v27 * 0.0 + v30;
    *(double *)&v41[64] = v28 * v21 - v23 * (v34 + -1.0) + v25 * 0.0 + v31;
    v42[0] = v40 * v21 - v23 * v38 + (v26 + -1.0) * 0.0 + v42[0];
    v32 = __B * __B;
    for (i = 8; i != 80; i += 8)
      *(double *)&v41[i] = *(double *)&v41[i] / v32;
    sub_1010FD10C(a1, (double *)&v51, a4);
    sub_1014A0A20((double *)a4, (double *)v41);
  }
  else
  {
    *(_QWORD *)a4 = off_1021A0F28;
    v15 = v52;
    *(_OWORD *)(a4 + 24) = v53;
    v16 = v55;
    *(_OWORD *)(a4 + 40) = v54;
    *(_OWORD *)(a4 + 56) = v16;
    *(_OWORD *)(a4 + 72) = v56;
    *(_OWORD *)(a4 + 8) = v15;
  }
}

void sub_10149E450(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int64x2_t v14;
  __int128 v15;
  int8x16_t v16;
  int8x16_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  __int128 v26;
  int64x2_t v27;
  __int128 v28;
  __int128 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  int64x2_t v37;
  __int128 v38;
  int64x2_t *v39;
  char *v40;
  uint64_t v41;
  int64x2_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[3];
  _BYTE *v47;
  _BYTE *v48;
  __int128 __dst;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  double v53[3];
  uint64_t v54;
  int64x2_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  v6 = a1 + 64;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = v8 * *(double *)(a1 + 104) + *(double *)(a1 + 80) * v7 + *(double *)(a1 + 128) * v9;
  *(float64x2_t *)(a4 + 8) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 88), v8), *(float64x2_t *)(a1 + 64), v7), *(float64x2_t *)(a1 + 112), v9);
  *(double *)(a4 + 24) = v10;
  *(_QWORD *)(a4 + 32) = 0;
  if (a6)
  {
    sub_1010FD10C((double *)(a1 + 56), a3, (uint64_t)&v54);
    v14 = v55;
    *(_OWORD *)(a5 + 24) = v56;
    v15 = v58;
    *(_OWORD *)(a5 + 40) = v57;
    *(_OWORD *)(a5 + 56) = v15;
    *(_OWORD *)(a5 + 72) = v59;
    *(int64x2_t *)(a5 + 8) = v14;
    LOBYTE(v54) = 1;
    v55 = vdupq_n_s64(3uLL);
    v56 = xmmword_101C40170;
    *(_QWORD *)&v57 = v6;
    *((_QWORD *)&v57 + 1) = a1 + 136;
    *(double *)v16.i64 = sub_1010FFD80((double *)a5, &v54);
    if (!*(_BYTE *)a1)
    {
      sub_10149E0BC((double *)(v6 - 8), a1 + 144, a2, (uint64_t)&v54, v16, v17);
      LOBYTE(v41) = 1;
      v42 = vdupq_n_s64(3uLL);
      v43 = xmmword_101B9B430;
      v44 = a1 + 240;
      v45 = a1 + 360;
      LOBYTE(v36) = 0;
      v37 = v42;
      v38 = xmmword_101C40170;
      v39 = &v55;
      v40 = (char *)&v59 + 8;
      sub_1010FCE68(&v41, &v36, v46);
      v52 = 0u;
      *(_OWORD *)v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      __dst = 0u;
      if (v47 == v48)
      {
        v35 = 0.0;
        v25 = 0.0;
        v24 = 0.0;
        v22 = 0.0;
        v23 = 0.0;
        v20 = 0.0;
        v21 = 0.0;
        v18 = 0.0;
        v19 = 0.0;
      }
      else
      {
        memcpy(&__dst, v47, ((v48 - v47 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
        v18 = *((double *)&__dst + 1);
        v19 = *(double *)&__dst;
        v20 = *((double *)&v50 + 1);
        v21 = *(double *)&v50;
        v22 = *((double *)&v51 + 1);
        v23 = *(double *)&v51;
        v25 = *((double *)&v52 + 1);
        v24 = *(double *)&v52;
        v35 = v53[0];
      }
      sub_1010FE154(v46);
      v26 = v56;
      v27 = v55;
      v28 = v58;
      v29 = v57;
      v30 = *(double *)(a5 + 16) + v18 * *(double *)&v57 + *(double *)&v55.i64[1] * v19 + *((double *)&v58 + 1) * v21;
      *(double *)(a5 + 8) = *((double *)&v56 + 1) * v18
                          + *(double *)v55.i64 * v19
                          + *(double *)&v58 * v21
                          + *(double *)(a5 + 8);
      *(double *)(a5 + 16) = v30;
      v31 = *(double *)&v59;
      v32 = *(double *)(a5 + 32) + *((double *)&v26 + 1) * v23 + *(double *)v27.i64 * v20 + *(double *)&v28 * v22;
      *(double *)(a5 + 24) = *(double *)(a5 + 24)
                           + v18 * *((double *)&v29 + 1)
                           + *(double *)&v26 * v19
                           + *(double *)&v59 * v21;
      *(double *)(a5 + 32) = v32;
      v33 = *(double *)(a5 + 48);
      *(double *)(a5 + 40) = *(double *)&v29 * v23
                           + *(double *)&v27.i64[1] * v20
                           + *((double *)&v28 + 1) * v22
                           + *(double *)(a5 + 40);
      *(double *)(a5 + 48) = *((double *)&v29 + 1) * v23 + *(double *)&v26 * v20 + v31 * v22 + v33;
      v34 = *(double *)&v29 * v25 + *(double *)&v27.i64[1] * v24 + *((double *)&v28 + 1) * v35 + *(double *)(a5 + 64);
      *(double *)(a5 + 56) = *(double *)(a5 + 56)
                           + *((double *)&v26 + 1) * v25
                           + *(double *)v27.i64 * v24
                           + *(double *)&v28 * v35;
      *(double *)(a5 + 64) = v34;
      *(double *)(a5 + 72) = *((double *)&v29 + 1) * v25 + *(double *)&v26 * v24 + v31 * v35 + *(double *)(a5 + 72);
    }
  }
}

void sub_10149E72C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_BYTE *)a2 = *(_BYTE *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 8) = off_1021A0EF0;
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = off_1021A0F28;
  v5 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v5;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v6;
  *(_QWORD *)(a2 + 144) = off_1021A0D18;
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 168);
  *(_QWORD *)(a2 + 184) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 192) = off_1021A1298;
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 200);
  v7 = *(_OWORD *)(a1 + 216);
  *(_QWORD *)(a2 + 232) = off_1021A10E0;
  *(_OWORD *)(a2 + 216) = v7;
  memcpy((void *)(a2 + 240), (const void *)(a1 + 240), 0x128uLL);
  sub_10149D234(a2);
}

void sub_10149E800(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)a4 = *(_BYTE *)a1;
  v7 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a4 + 32) = v7;
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a4 + 8) = off_1021A0EF0;
  *(_QWORD *)(a4 + 48) = v8;
  *(_QWORD *)(a4 + 56) = off_1021A0F28;
  v9 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a4 + 112) = v9;
  *(_OWORD *)(a4 + 128) = *(_OWORD *)(a1 + 128);
  v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a4 + 80) = v10;
  *(_QWORD *)(a4 + 144) = off_1021A0D18;
  *(_OWORD *)(a4 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a4 + 168) = *(_OWORD *)(a1 + 168);
  *(_QWORD *)(a4 + 184) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a4 + 192) = off_1021A1298;
  *(_OWORD *)(a4 + 200) = *(_OWORD *)(a1 + 200);
  v11 = *(_OWORD *)(a1 + 216);
  *(_QWORD *)(a4 + 232) = off_1021A10E0;
  *(_OWORD *)(a4 + 216) = v11;
  memcpy((void *)(a4 + 240), (const void *)(a1 + 240), 0x128uLL);
  sub_10149D69C(a4, a2, a3);
}

void sub_10149E8EC(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double v6;
  double v8;
  double v9;
  double v10;
  __double2 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t i;

  *(_QWORD *)a3 = off_1021B9778;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_QWORD *)(a3 + 104) = 0;
  v5 = a2[4];
  v6 = v5 * 0.5;
  if (v5 * 0.5 == 0.0)
  {
    *(_OWORD *)(a3 + 64) = 0uLL;
    *(_OWORD *)(a3 + 80) = 0uLL;
    *(_OWORD *)(a3 + 32) = 0uLL;
    *(_OWORD *)(a3 + 48) = 0uLL;
    *(_OWORD *)(a3 + 16) = 0uLL;
    *(_QWORD *)(a3 + 88) = 0xBFE0000000000000;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 48) = 0xBFE0000000000000;
    *(_QWORD *)(a3 + 8) = 0xBFE0000000000000;
  }
  else
  {
    if (fabs(v6) >= 2.22044605e-16)
    {
      v11 = __sincos_stret(v6);
      v10 = v11.__sinval / v5;
      v9 = v11.__sinval / v5 + v11.__cosval * -0.5;
      v8 = v11.__sinval * 0.5;
    }
    else
    {
      v8 = v5 * 0.25;
      v9 = v8 * v8;
      v10 = 0.5;
    }
    v12 = a2[1];
    v13 = a2[2];
    v14 = v9 * (v12 * v13);
    *(double *)(a3 + 8) = -(v10 - v12 * v12 * v9);
    *(double *)(a3 + 16) = v14;
    v15 = a2[3];
    v16 = v9 * (v12 * v15);
    *(double *)(a3 + 24) = v16;
    *(double *)(a3 + 32) = -(v12 * v8);
    *(double *)(a3 + 40) = v14;
    *(double *)(a3 + 48) = -(v10 - v13 * v13 * v9);
    v17 = v9 * (v13 * v15);
    *(double *)(a3 + 56) = v17;
    *(double *)(a3 + 64) = -(v13 * v8);
    *(double *)(a3 + 72) = v16;
    *(double *)(a3 + 80) = v17;
    *(double *)(a3 + 88) = -(v10 - v15 * v15 * v9);
    *(double *)(a3 + 96) = -(v15 * v8);
  }
  if (*(double *)(a1 + 32) < 0.0)
  {
    for (i = 8; i != 104; i += 16)
      *(float64x2_t *)(a3 + i) = vnegq_f64(*(float64x2_t *)(a3 + i));
  }
}

void sub_10149EA48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = off_1021A0F28;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 3, 3, 4, 1.0, (const double *)(a1 + 8), 3, (const double *)(a2 + 8), 4, 0.0, (double *)(a3 + 8), 3);
}

void sub_10149EAD4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = off_1021B9408;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_QWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 3, 4, 4, 1.0, (const double *)(a1 + 8), 3, (const double *)(a2 + 8), 4, 0.0, (double *)(a3 + 8), 3);
}

double sub_10149EB68(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  double result;

  v2 = a1[3];
  v3 = a1[4];
  v4 = (_QWORD *)a1[5];
  *v4 = *(_QWORD *)(a2 + 8);
  v4[v2] = *(_QWORD *)(a2 + 16);
  v4[2 * v2] = *(_QWORD *)(a2 + 24);
  v4[v3] = *(_QWORD *)(a2 + 32);
  v4[v3 + v2] = *(_QWORD *)(a2 + 40);
  v4[2 * v2 + v3] = *(_QWORD *)(a2 + 48);
  v4[2 * v3] = *(_QWORD *)(a2 + 56);
  v4[2 * v3 + v2] = *(_QWORD *)(a2 + 64);
  result = *(double *)(a2 + 72);
  *(double *)&v4[2 * v3 + 2 * v2] = result;
  return result;
}

void sub_10149EBD8(void *a1@<X0>, _BYTE *a2@<X1>, char *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int64x2_t v27;
  uint64_t v28;
  int64x2_t v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  double __B;
  uint64_t v34;
  int64x2_t v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;
  _OWORD v39[3];
  double v40[3];
  double v41;
  uint64_t v42;
  double v43[2];
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t (**v47)();
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t (**v53)();
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t (**v57)();
  __int128 v58;
  __int128 v59;
  uint64_t (**v60)();
  _QWORD v61[37];
  unsigned __int8 v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;

  *a2 = 1;
  if (a1
    && objc_msgSend(a1, "inertialState")
    && objc_msgSend(a1, "inertialCovariance")
    && (objc_msgSend(a1, "inertialStateInfo"),
        objc_msgSend(a1, "inertialCovarianceInfo"),
        v6 = (unint64_t)objc_msgSend(objc_msgSend(a1, "inertialState"), "length"),
        v7 = (unint64_t)objc_msgSend(objc_msgSend(a1, "inertialCovariance"), "length"),
        v69 == 21)
    && (v6 & 0xFFFFFFFFFFFFFFF8) == 0xA8
    && v71 == 9
    && !v70
    && v75 == 3
    && v74 == 18
    && v73 == 3
    && v72 == 12
    && v62 == 225
    && (v7 & 0xFFFFFFFFFFFFFFF8) == 0x708
    && v64 == 3
    && !v63
    && v68 == 3
    && v67 == 12
    && v66 == 3
    && v65 == 6)
  {
    objc_msgSend(a1, "cameraPose");
    v23 = v8;
    v24 = v9;
    v25 = v10;
    v26 = v11;
    v12 = (char *)objc_msgSend(objc_msgSend(a1, "inertialState"), "bytes");
    v13 = objc_msgSend(objc_msgSend(a1, "inertialCovariance"), "bytes");
    sub_1010FD830((uint64_t)a3);
    *(_DWORD *)a3 = objc_msgSend(a1, "trackingState");
    objc_msgSend(a1, "originTimestamp");
    *((_QWORD *)a3 + 2) = v14;
    objc_msgSend(a1, "timestamp");
    *((_QWORD *)a3 + 5) = v15;
    v45 = 0u;
    v44 = 0u;
    *(_QWORD *)&v43[1] = off_1021A0EF0;
    v46 = 0;
    v47 = off_1021A0F28;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v54 = 0u;
    v55 = 0u;
    v53 = off_1021A0D18;
    v56 = 0;
    v58 = 0u;
    v59 = 0u;
    v57 = off_1021A1298;
    v60 = off_1021A10E0;
    memset(v61, 0, sizeof(v61));
    LOBYTE(v43[0]) = 0;
    *(_QWORD *)&v39[0] = off_1021A0F28;
    v42 = 0;
    *((_QWORD *)&v39[0] + 1) = *(_QWORD *)v12;
    v39[1] = *(_OWORD *)(v12 + 8);
    v39[2] = *(_OWORD *)(v12 + 24);
    v40[0] = *((double *)v12 + 5);
    v40[1] = *((double *)v12 + 6);
    v40[2] = *((double *)v12 + 7);
    v41 = *((double *)v12 + 8);
    sub_10149CC94(v43, (uint64_t)v39);
    v58 = *((_OWORD *)v12 + 9);
    *(_QWORD *)&v59 = *((_QWORD *)v12 + 20);
    LOBYTE(v39[0]) = 0;
    v27 = vdupq_n_s64(3uLL);
    *(int64x2_t *)((char *)v39 + 8) = v27;
    *(_OWORD *)((char *)&v39[1] + 8) = xmmword_101CA6100;
    *((_QWORD *)&v39[2] + 1) = v13;
    *(_QWORD *)&v40[0] = v13 + 33;
    LOBYTE(v34) = 1;
    v35 = v27;
    v36 = xmmword_101B9B430;
    v37 = v61;
    v38 = &v61[15];
    sub_1014A0B10((char *)&v34, v39);
    __B = -1.0;
    LOBYTE(v34) = 0;
    v35 = v27;
    v36 = xmmword_101CA6100;
    v37 = v13 + 12;
    v38 = v13 + 45;
    memset(v39, 0, sizeof(v39));
    memset(v40, 0, sizeof(v40));
    sub_1010FE440((uint64_t *)v39, &v34);
    sub_1010FFB08((uint64_t)v39, &__B);
    LOBYTE(v28) = 1;
    v29 = v27;
    v30 = xmmword_101B9B430;
    v31 = &v61[18];
    v32 = &v61[33];
    sub_1010FFB3C(&v28, (uint64_t *)v39);
    sub_1010FE154(v39);
    __B = -1.0;
    LOBYTE(v34) = 0;
    v35 = v27;
    v36 = xmmword_101CA6100;
    v37 = v13 + 180;
    v38 = v13 + 213;
    memset(v39, 0, sizeof(v39));
    memset(v40, 0, sizeof(v40));
    sub_1010FE440((uint64_t *)v39, &v34);
    sub_1010FFB08((uint64_t)v39, &__B);
    LOBYTE(v28) = 1;
    v29 = v27;
    v30 = xmmword_101B9B430;
    v31 = &v61[3];
    v32 = &v61[18];
    sub_1010FFB3C(&v28, (uint64_t *)v39);
    sub_1010FE154(v39);
    LOBYTE(v39[0]) = 0;
    *(int64x2_t *)((char *)v39 + 8) = v27;
    *(_OWORD *)((char *)&v39[1] + 8) = xmmword_101CA6100;
    *((_QWORD *)&v39[2] + 1) = v13 + 192;
    *(_QWORD *)&v40[0] = v13 + 225;
    LOBYTE(v34) = 1;
    v35 = v27;
    v36 = xmmword_101B9B430;
    v37 = &v61[21];
    v38 = &v61[36];
    sub_1014A0B10((char *)&v34, v39);
    v16 = (uint64_t)(a3 + 592);
    *(_QWORD *)&v39[0] = off_1021A0F28;
    *(float64x2_t *)((char *)v39 + 8) = vcvtq_f64_f32(*(float32x2_t *)&v23);
    v39[2] = vcvtq_f64_f32(*(float32x2_t *)&v24);
    *((double *)&v39[1] + 1) = *((float *)&v23 + 2);
    v40[0] = *((float *)&v24 + 2);
    *(float64x2_t *)&v40[1] = vcvtq_f64_f32(*(float32x2_t *)&v25);
    v41 = *((float *)&v25 + 2);
    v42 = 0;
    sub_10149CC94((double *)a3 + 74, (uint64_t)v39);
    *(float64x2_t *)(a3 + 792) = vcvtq_f64_f32(*(float32x2_t *)&v26);
    *((double *)a3 + 101) = *((float *)&v26 + 2);
    *((_QWORD *)a3 + 102) = 0;
    sub_10149D69C((uint64_t)(a3 + 592), (uint64_t)v43, 0);
    sub_10149D234((uint64_t)(a3 + 592));
    a3[56] = LOBYTE(v43[0]);
    v17 = (uint64_t)(a3 + 56);
    v18 = v45;
    *(_OWORD *)(v17 + 16) = v44;
    *(_OWORD *)(v17 + 32) = v18;
    *(_QWORD *)(v17 + 48) = v46;
    v19 = v51;
    *(_OWORD *)(v17 + 96) = v50;
    *(_OWORD *)(v17 + 112) = v19;
    *(_OWORD *)(v17 + 128) = v52;
    v20 = v49;
    *(_OWORD *)(v17 + 64) = v48;
    *(_OWORD *)(v17 + 80) = v20;
    v21 = v54;
    v22 = v55;
    *(_QWORD *)(v17 + 184) = v56;
    *(_OWORD *)(v17 + 168) = v22;
    *(_OWORD *)(v17 + 152) = v21;
    *(_OWORD *)(v17 + 216) = v59;
    *(_OWORD *)(v17 + 200) = v58;
    memcpy((void *)(v17 + 240), v61, 0x128uLL);
    sub_10149D69C(v17, v16, 1);
    *(_QWORD *)(v17 + 1080) = *((_QWORD *)v12 + 12);
    *(_QWORD *)(v17 + 1088) = *((_QWORD *)v12 + 13);
    *(_QWORD *)(v17 + 1096) = *((_QWORD *)v12 + 14);
    LOBYTE(v39[0]) = 0;
    *(int64x2_t *)((char *)v39 + 8) = v27;
    *(_OWORD *)((char *)&v39[1] + 8) = xmmword_101CA6100;
    *((_QWORD *)&v39[2] + 1) = v13 + 96;
    *(_QWORD *)&v40[0] = v13 + 129;
    sub_1010FD380(v17 + 1112, v39);
    *(_BYTE *)(v17 + 1200) = 0;
    *(_BYTE *)(v17 + 1344) = 0;
    *(_BYTE *)(v17 + 1368) = 0;
    *a2 = 0;
  }
  else
  {
    bzero(a3, 0x598uLL);
    sub_1010FD830((uint64_t)a3);
  }
}

BOOL sub_10149F2B4(uint64_t a1, uint64_t a2)
{
  __int128 *v3;
  _BOOL8 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t i;
  __int128 v21;
  _BYTE v23[8];
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t (**v28)();
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void (**v42)(void);
  char v43;
  uint64_t (**v44)();
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD v48[10];
  __int128 v49;
  __int128 v50;

  *(_BYTE *)(a1 + 1144) = 0;
  v48[9] = off_1021A1298;
  v49 = 0u;
  v50 = 0u;
  v43 = 0;
  v46 = 0x300000003;
  v44 = off_102167280;
  v45 = xmmword_101C05640;
  v47 = v48;
  v3 = (__int128 *)(a2 + 8);
  if (cnnavigation::ECEFToENU(a1 + 760, 1, 1, a2 + 8, 0, &v49, &v42))
  {
    v4 = 0;
  }
  else
  {
    v39 = 0x300000003;
    v37 = off_102167280;
    v38 = xmmword_101C05640;
    v40 = &v41;
    v4 = v43 != 0;
    if (v43)
    {
      sub_10007A0C8((uint64_t)&v37, (uint64_t)&v44);
      *(_BYTE *)(a1 + 1144) = 1;
      v5 = *v3;
      *(_OWORD *)(a1 + 1176) = v3[1];
      *(_OWORD *)(a1 + 1160) = v5;
      *(_BYTE *)(a1 + 1192) = 1;
      *(_QWORD *)(a1 + 1208) = 0;
      *(_QWORD *)(a1 + 1224) = 0;
      *(_QWORD *)(a1 + 1216) = 0;
      *(_QWORD *)(a1 + 1232) = 0x3FF0000000000000;
      *(_OWORD *)(a1 + 1280) = 0u;
      *(_OWORD *)(a1 + 1264) = 0u;
      *(_OWORD *)(a1 + 1296) = 0u;
      *(_QWORD *)(a1 + 1312) = 0;
      *(_QWORD *)(a1 + 1320) = 0x3FF0000000000000;
      *(_QWORD *)(a1 + 1288) = 0x3FF0000000000000;
      *(_QWORD *)(a1 + 1256) = 0x3FF0000000000000;
      *(_OWORD *)(a1 + 1344) = 0u;
      *(_OWORD *)(a1 + 1360) = 0u;
      *(_QWORD *)(a1 + 1408) = 0;
      *(_QWORD *)(a1 + 1392) = 0;
      *(_QWORD *)(a1 + 1400) = 0;
      *(_OWORD *)(a1 + 1688) = 0u;
      *(_OWORD *)(a1 + 1704) = 0u;
      *(_OWORD *)(a1 + 1656) = 0u;
      *(_OWORD *)(a1 + 1672) = 0u;
      *(_OWORD *)(a1 + 1624) = 0u;
      *(_OWORD *)(a1 + 1640) = 0u;
      *(_OWORD *)(a1 + 1592) = 0u;
      *(_OWORD *)(a1 + 1608) = 0u;
      *(_OWORD *)(a1 + 1560) = 0u;
      *(_OWORD *)(a1 + 1576) = 0u;
      *(_OWORD *)(a1 + 1528) = 0u;
      *(_OWORD *)(a1 + 1544) = 0u;
      *(_OWORD *)(a1 + 1496) = 0u;
      *(_OWORD *)(a1 + 1512) = 0u;
      *(_OWORD *)(a1 + 1464) = 0u;
      *(_OWORD *)(a1 + 1480) = 0u;
      *(_OWORD *)(a1 + 1432) = 0u;
      *(_OWORD *)(a1 + 1448) = 0u;
      v6 = *(_QWORD *)sub_100206B6C((uint64_t)&v37, 0, 0);
      v7 = *(_QWORD *)sub_100206B6C((uint64_t)&v37, 1, 0);
      v8 = *(_QWORD *)sub_100206B6C((uint64_t)&v37, 2, 0);
      v9 = *(_QWORD *)sub_100206B6C((uint64_t)&v37, 0, 1);
      v10 = *(_QWORD *)sub_100206B6C((uint64_t)&v37, 1, 1);
      v11 = *(_QWORD *)sub_100206B6C((uint64_t)&v37, 2, 1);
      v12 = *(_QWORD *)sub_100206B6C((uint64_t)&v37, 0, 2);
      v13 = *(_QWORD *)sub_100206B6C((uint64_t)&v37, 1, 2);
      v14 = *(_QWORD *)sub_100206B6C((uint64_t)&v37, 2, 2);
      v28 = off_1021A0F28;
      *(_QWORD *)&v29 = v6;
      *((_QWORD *)&v29 + 1) = v7;
      *(_QWORD *)&v30 = v8;
      *((_QWORD *)&v30 + 1) = v9;
      v31 = v10;
      v32 = v11;
      v33 = v12;
      v34 = v13;
      v35 = v14;
      v36 = 0;
      sub_10149CC94((double *)(a1 + 1192), (uint64_t)&v28);
      v15 = *(double *)(a1 + 760);
      v16 = *(double *)(a1 + 768);
      v17 = *(double *)(a1 + 776);
      v18 = *(double *)(a1 + 1280) * v16 + *(double *)(a1 + 1256) * v15 + *(double *)(a1 + 1304) * v17;
      v19 = v16 * *(double *)(a1 + 1288) + *(double *)(a1 + 1264) * v15 + *(double *)(a1 + 1312) * v17;
      v27 = 0;
      v24 = v18;
      v25 = v19;
      v26 = v16 * *(double *)(a1 + 1296) + *(double *)(a1 + 1272) * v15 + *(double *)(a1 + 1320) * v17;
      v30 = v50;
      v29 = v49;
      for (i = 1; i != 4; ++i)
        *(double *)&(&v28)[i] = *(double *)&(&v28)[i] - *(double *)&v23[i * 8];
      v21 = v30;
      *(_OWORD *)(a1 + 1392) = v29;
      *(_OWORD *)(a1 + 1408) = v21;
      sub_10149D69C(a1 + 1192, a1 + 560, 1);
    }
  }
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&v42);
  return v4;
}

void sub_10149F630(void *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (***v15)();
  float *v16;
  float *v17;
  uint64_t i;
  float v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  float v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int64x2_t v30;
  _OWORD v31[2];
  _OWORD v32[2];
  uint64_t (**v33)();
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t (**v45)();
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (**v54)();
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t (**v58)();
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (**v63)();
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t (**v83)();
  _OWORD v84[9];
  _OWORD v85[9];
  _QWORD v86[2];
  __int128 v87;
  __int128 v88;
  uint64_t (**v89)();
  __int128 v90;
  __int128 v91;
  uint64_t (**v92)();
  _BYTE v93[80];
  _BYTE v94[240];
  __int128 v95;
  __int128 v96;

  *a2 = 1;
  if (a1)
  {
    objc_msgSend(a1, "transform");
    objc_msgSend(a1, "covariance");
    v6 = 0;
    v92 = off_1021A0F28;
    v7 = v93;
    memset(v93, 0, sizeof(v93));
    v89 = off_1021A1298;
    v90 = 0u;
    v91 = 0u;
    v9 = v95;
    v8 = v96;
    do
    {
      v10 = 0;
      v11 = (__int128 *)&v94[32 * v6 + 144];
      v13 = *v11;
      v12 = v11[1];
      do
      {
        v32[0] = v13;
        v32[1] = v12;
        *(_QWORD *)&v7[8 * v10] = *((_QWORD *)v32 + (v10 & 3));
        ++v10;
      }
      while (v10 != 3);
      v31[0] = v9;
      v31[1] = v8;
      *((_QWORD *)&v90 + v6) = *((_QWORD *)v31 + (v6 & 3));
      ++v6;
      v7 += 24;
    }
    while (v6 != 3);
    v86[1] = off_1021A1298;
    v87 = 0u;
    v88 = 0u;
    if (cnnavigation::ECEFToLLA(&v90, 1, &v87))
    {
      bzero((void *)a3, 0x6C0uLL);
      sub_1010FDA10(a3);
    }
    else
    {
      v14 = 0;
      v15 = &v83;
      memset(v84, 0, sizeof(v84));
      memset(v85, 0, sizeof(v85));
      v16 = (float *)v94;
      v83 = off_1021A10E0;
      v86[0] = 0;
      do
      {
        v17 = v16;
        for (i = 1; i != 7; ++i)
        {
          v19 = *v17;
          v17 += 6;
          *(double *)&v15[i] = v19;
        }
        ++v14;
        ++v16;
        v15 += 6;
      }
      while (v14 != 6);
      objc_msgSend(a1, "timestamp", sub_1010FDA10(a3));
      *(_BYTE *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = v20;
      sub_10149CC94((double *)(a3 + 24), (uint64_t)&v92);
      v21 = v91;
      *(_OWORD *)(a3 + 224) = v90;
      *(_OWORD *)(a3 + 240) = v21;
      LOBYTE(v40) = 1;
      v30 = vdupq_n_s64(3uLL);
      v41 = v30;
      v42 = xmmword_101B9B430;
      v43 = (uint64_t)&v85[1] + 8;
      v44 = (char *)v86;
      LOBYTE(v33) = 1;
      v34 = (__int128)v30;
      v35 = xmmword_101B9B430;
      *(_QWORD *)&v36 = a3 + 264;
      *((_QWORD *)&v36 + 1) = a3 + 384;
      sub_1014A0B10((char *)&v33, &v40);
      LOBYTE(v40) = 1;
      v41 = v30;
      v42 = xmmword_101B9B430;
      v43 = (uint64_t)&v84[1] + 8;
      v44 = (char *)v85;
      LOBYTE(v33) = 1;
      v34 = (__int128)v30;
      v35 = xmmword_101B9B430;
      *(_QWORD *)&v36 = a3 + 408;
      *((_QWORD *)&v36 + 1) = a3 + 528;
      sub_1014A0B10((char *)&v33, &v40);
      LOBYTE(v40) = 1;
      v41 = v30;
      v42 = xmmword_101B9B430;
      v43 = (uint64_t)v85;
      v44 = (char *)&v85[7] + 8;
      LOBYTE(v33) = 1;
      v34 = (__int128)v30;
      v35 = xmmword_101B9B430;
      *(_QWORD *)&v36 = a3 + 288;
      *((_QWORD *)&v36 + 1) = a3 + 408;
      sub_1014A0B10((char *)&v33, &v40);
      LOBYTE(v40) = 1;
      v41 = v30;
      v42 = xmmword_101B9B430;
      v43 = (uint64_t)v84;
      v44 = (char *)&v84[7] + 8;
      LOBYTE(v33) = 1;
      v34 = (__int128)v30;
      v35 = xmmword_101B9B430;
      *(_QWORD *)&v36 = a3 + 432;
      *((_QWORD *)&v36 + 1) = a3 + 552;
      sub_1014A0B10((char *)&v33, &v40);
      v22 = v88;
      *(_OWORD *)(a3 + 1104) = v87;
      *(_OWORD *)(a3 + 1120) = v22;
      objc_msgSend(a1, "confidence");
      *(double *)(a3 + 1136) = v23;
      v47 = 0u;
      v48 = 0;
      v50 = 0u;
      v56 = 0u;
      v55 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v80 = 0u;
      v81 = 0u;
      v34 = xmmword_101CA6110;
      v35 = unk_101CA6120;
      v36 = xmmword_101CA6130;
      *(_BYTE *)(a3 + 1144) = 0;
      v54 = off_1021A0D18;
      v57 = 0;
      v62 = 0;
      v63 = off_1021A10E0;
      v82 = 0;
      LOBYTE(v40) = 1;
      v41.i64[0] = (uint64_t)off_1021A0EF0;
      v41.i64[1] = 0;
      v42 = 0uLL;
      v43 = 0x3FF0000000000000;
      v44 = 0;
      v52 = 0x3FF0000000000000;
      v53 = 0;
      v51 = 0;
      v49 = 0x3FF0000000000000;
      v45 = off_1021A0F28;
      v46 = 0x3FF0000000000000;
      v58 = off_1021A1298;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v33 = off_1021A0F28;
      v38 = 0;
      v39 = 0;
      v37 = unk_101CA6140;
      sub_10149CC94((double *)&v40, (uint64_t)&v33);
      *(_BYTE *)(a3 + 560) = *(_BYTE *)(a3 + 24);
      v24 = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(a3 + 576) = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(a3 + 592) = v24;
      *(_QWORD *)(a3 + 608) = *(_QWORD *)(a3 + 72);
      v25 = *(_OWORD *)(a3 + 104);
      v26 = *(_OWORD *)(a3 + 136);
      *(_OWORD *)(a3 + 656) = *(_OWORD *)(a3 + 120);
      *(_OWORD *)(a3 + 672) = v26;
      *(_OWORD *)(a3 + 688) = *(_OWORD *)(a3 + 152);
      *(_OWORD *)(a3 + 624) = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a3 + 640) = v25;
      v27 = *(_OWORD *)(a3 + 176);
      v28 = *(_OWORD *)(a3 + 192);
      *(_QWORD *)(a3 + 744) = *(_QWORD *)(a3 + 208);
      *(_OWORD *)(a3 + 728) = v28;
      *(_OWORD *)(a3 + 712) = v27;
      v29 = *(_OWORD *)(a3 + 240);
      *(_OWORD *)(a3 + 760) = *(_OWORD *)(a3 + 224);
      *(_OWORD *)(a3 + 776) = v29;
      memcpy((void *)(a3 + 800), (const void *)(a3 + 264), 0x128uLL);
      sub_10149D69C(a3 + 560, (uint64_t)&v40, 1);
      *a2 = 0;
    }
  }
  else
  {
    bzero((void *)a3, 0x6C0uLL);
    sub_1010FDA10(a3);
  }
}

void sub_10149FB38(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12;
  float64x2_t *v13;
  _BOOL4 v14;
  int8x16_t v15;
  int8x16_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __int128 v21;
  float64x2_t v22;
  double v23;
  double v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  double v38;
  int8x16_t v39;
  int8x16_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t (**v45)();
  float64x2_t v46;
  __int128 v47;
  uint64_t (**v48)();
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  uint64_t (**v55)();
  __int128 v56;
  __int128 v57;
  uint64_t (**v58)();
  __int128 v59;
  __int128 v60;
  uint64_t (**v61)();
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;

  *a3 = 1;
  v45 = off_1021A1298;
  v46 = 0u;
  v47 = 0u;
  v48 = off_1021A1298;
  v49 = 0u;
  v50 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  v51 = _Q1;
  v52 = _Q1;
  v53 = _Q1;
  v41 = _Q1;
  v54 = 0;
  v56 = 0u;
  v57 = 0u;
  v55 = off_1021A1298;
  v58 = off_1021A1298;
  v59 = 0u;
  v60 = 0u;
  v61 = off_1021A0F28;
  LOBYTE(v67) = 0;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  *((_QWORD *)&v67 + 1) = 0xBFF0000000000000;
  v68 = 0xBFF0000000000000;
  LODWORD(v43) = *(_DWORD *)(a1 + 96);
  *(_QWORD *)&_Q1 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 344);
  *((_QWORD *)&v43 + 1) = *(_QWORD *)(a1 + 76);
  *(_QWORD *)&v44 = _Q1;
  *((_QWORD *)&v44 + 1) = v12;
  v42 = 0;
  v13 = (float64x2_t *)(a1 + 4);
  v14 = sub_10149FE80(*(_DWORD *)(a2 + 312), (double *)(a1 + 4), (double *)&v42, *(double *)(a1 + 28), *(double *)(a1 + 36), *(float *)(a2 + 316));
  v16.i64[0] = v42;
  v17 = *(double *)(a1 + 36);
  if (!v14)
  {
    *(double *)v16.i64 = 0.0;
    v17 = -1.0;
  }
  *(_QWORD *)&v47 = v16.i64[0];
  *((double *)&v51 + 1) = v17;
  v18 = *(double *)(a1 + 20);
  if (v18 >= 0.0)
  {
    v46 = vmulq_f64(*v13, (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    *(double *)&v51 = v18;
    if (cnnavigation::LLAToECEF(&v46, 1, &v49))
    {
      *(_QWORD *)(a4 + 352) = 0;
      *(_OWORD *)(a4 + 320) = 0u;
      *(_OWORD *)(a4 + 336) = 0u;
      *(_OWORD *)(a4 + 288) = 0u;
      *(_OWORD *)(a4 + 304) = 0u;
      *(_OWORD *)(a4 + 256) = 0u;
      *(_OWORD *)(a4 + 272) = 0u;
      *(_OWORD *)(a4 + 224) = 0u;
      *(_OWORD *)(a4 + 240) = 0u;
      *(_OWORD *)(a4 + 192) = 0u;
      *(_OWORD *)(a4 + 208) = 0u;
      *(_OWORD *)(a4 + 160) = 0u;
      *(_OWORD *)(a4 + 176) = 0u;
      *(_OWORD *)(a4 + 128) = 0u;
      *(_OWORD *)(a4 + 144) = 0u;
      *(_OWORD *)(a4 + 96) = 0u;
      *(_OWORD *)(a4 + 112) = 0u;
      *(_OWORD *)(a4 + 64) = 0u;
      *(_OWORD *)(a4 + 80) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      sub_1010FDBD0(a4);
      return;
    }
  }
  else
  {
    v46 = 0uLL;
    *(_QWORD *)&v51 = 0xBFF0000000000000;
  }
  v19 = *(double *)(a1 + 68);
  if (v19 >= 0.0 && (v20 = *(double *)(a1 + 60), v20 >= 0.0))
  {
    *(double *)v16.i64 = v20 * -0.0174532925 + 1.57079633;
    if (*(double *)v16.i64 <= -3.14159265 || *(double *)v16.i64 > 3.14159265)
    {
      v15.i64[0] = 0x400921FB54442D18;
      v22.f64[0] = NAN;
      v22.f64[1] = NAN;
      v39 = v15;
      v40 = (int8x16_t)vnegq_f64(v22);
      v38 = *(double *)vbslq_s8(v40, v15, v16).i64;
      *(double *)v16.i64 = fmod(*(double *)v16.i64 + v38, 6.28318531);
      *(_QWORD *)&v23 = vbslq_s8(v40, v39, v16).u64[0];
      if (*(double *)v16.i64 == 0.0)
        *(double *)v16.i64 = v23;
      else
        *(double *)v16.i64 = *(double *)v16.i64 - v38;
    }
    *(_QWORD *)&v52 = v16.i64[0];
    *((double *)&v52 + 1) = v19 * 0.0174532925;
    v21 = v41;
  }
  else
  {
    v21 = v41;
    v52 = v41;
  }
  v24 = *(double *)(a1 + 52);
  if (v24 >= 0.0 && *(double *)(a1 + 44) >= 0.0)
  {
    *(_QWORD *)&v53 = *(_QWORD *)(a1 + 44);
    *((double *)&v53 + 1) = v24;
  }
  else
  {
    v53 = v21;
  }
  v54 = 0;
  LOBYTE(v67) = 0;
  *a3 = 0;
  v25 = v44;
  *(_OWORD *)a4 = v43;
  *(_OWORD *)(a4 + 16) = v25;
  *(_QWORD *)(a4 + 32) = off_1021A1298;
  v26 = v47;
  *(float64x2_t *)(a4 + 40) = v46;
  *(_OWORD *)(a4 + 56) = v26;
  *(_QWORD *)(a4 + 72) = off_1021A1298;
  v27 = v50;
  *(_OWORD *)(a4 + 80) = v49;
  *(_OWORD *)(a4 + 96) = v27;
  v28 = v51;
  v29 = v52;
  v30 = v53;
  *(_BYTE *)(a4 + 160) = v54;
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v30;
  *(_OWORD *)(a4 + 112) = v28;
  *(_QWORD *)(a4 + 168) = off_1021A1298;
  v31 = v57;
  *(_OWORD *)(a4 + 176) = v56;
  *(_OWORD *)(a4 + 192) = v31;
  *(_QWORD *)(a4 + 208) = off_1021A1298;
  v32 = v60;
  *(_OWORD *)(a4 + 216) = v59;
  *(_OWORD *)(a4 + 232) = v32;
  *(_QWORD *)(a4 + 248) = off_1021A0F28;
  v33 = v62;
  v34 = v63;
  v35 = v65;
  v36 = v66;
  *(_OWORD *)(a4 + 288) = v64;
  *(_OWORD *)(a4 + 304) = v35;
  *(_OWORD *)(a4 + 256) = v33;
  *(_OWORD *)(a4 + 272) = v34;
  v37 = v67;
  *(_QWORD *)(a4 + 352) = v68;
  *(_OWORD *)(a4 + 320) = v36;
  *(_OWORD *)(a4 + 336) = v37;
}

BOOL sub_10149FE80(int a1, double *a2, double *a3, double a4, double a5, float a6)
{
  NSObject *v8;
  _BOOL8 result;
  char *v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  uint64_t v14;
  int v15;
  double v16;
  uint8_t buf[4];
  double v18;

  *a3 = a4;
  if (a5 > 0.0)
  {
    if (a1 != -1)
    {
      *a3 = a6 + a4;
      return 1;
    }
    HIDWORD(v14) = 0;
    if (sub_100208AC8((float *)&v14 + 1, *a2, a2[1]))
    {
      *a3 = *((float *)&v14 + 1) + a4;
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021B9920);
      v11 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134283521;
        v18 = *((float *)&v14 + 1);
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLVLFT,convertAltitudeMslToWgs84,DEM unavailable,using DMA und,%{private}f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021B9920);
        v15 = 134283521;
        v16 = *((float *)&v14 + 1);
        LODWORD(v14) = 12;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLFT,convertAltitudeMslToWgs84,DEM unavailable,using DMA und,%{private}f", &v15, v14);
        sub_100512490("Generic", 1, 0, 2, "static BOOL clv::fusion::LocData::convertAltitudeMslToWgs84(const double, const double, const CLUndulationModelType, const float, const CLClientLocationCoordinate &, double &)", "%s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
      return 1;
    }
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021B9920);
    v12 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLVLFT,convertAltitudeMslToWgs84,DMA unavailable,Failed to convert altitude", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021B9920);
    LOWORD(v15) = 0;
    LODWORD(v14) = 2;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLFT,convertAltitudeMslToWgs84,DMA unavailable,Failed to convert altitude", &v15, v14);
    sub_100512490("Generic", 1, 0, 2, "static BOOL clv::fusion::LocData::convertAltitudeMslToWgs84(const double, const double, const CLUndulationModelType, const float, const CLClientLocationCoordinate &, double &)", "%s\n", v10);
LABEL_12:
    if (v10 != (char *)buf)
      free(v10);
    return 0;
  }
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021B9920);
  v8 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLVLFT,convertAltitudeMslToWgs84,altitudeMsl unavailable", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021B9920);
    LOWORD(v15) = 0;
    LODWORD(v14) = 2;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLFT,convertAltitudeMslToWgs84,altitudeMsl unavailable", &v15, v14);
    sub_100512490("Generic", 1, 0, 2, "static BOOL clv::fusion::LocData::convertAltitudeMslToWgs84(const double, const double, const CLUndulationModelType, const float, const CLClientLocationCoordinate &, double &)", "%s\n", v10);
    goto LABEL_12;
  }
  return result;
}

void sub_1014A02E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1014A02EC(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  double v7;
  double v8;
  double v9;
  __int128 v10;
  uint64_t v16;
  int64x2_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  *a2 = 1;
  sub_1010FDBD0(a3);
  *(_DWORD *)a3 = 1;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 1104);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a1 + 1120);
  v6 = *(_OWORD *)(a1 + 776);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(a1 + 760);
  *(_OWORD *)(a3 + 96) = v6;
  if (*(_BYTE *)(a1 + 1144))
  {
    LOBYTE(v16) = 0;
    v17 = vdupq_n_s64(3uLL);
    v18 = xmmword_101B9B430;
    v19 = a1 + 1600;
    v20 = a1 + 1720;
    v7 = *(double *)(a1 + 1600);
    if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || v7 < 0.0
      || (v8 = *(double *)(a1 + 1656), (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      || v8 < 0.0
      || (v9 = *(double *)(a1 + 1712), (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      || v9 < 0.0)
    {
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a3 + 112) = _Q0;
      *(_BYTE *)(a3 + 160) = 0;
    }
    else
    {
      *(double *)(a3 + 112) = sqrt(v7 + v8);
      *(double *)(a3 + 120) = sqrt(v9);
      *(_BYTE *)(a3 + 160) = 1;
      v10 = *(_OWORD *)(a1 + 1176);
      *(_OWORD *)(a3 + 176) = *(_OWORD *)(a1 + 1160);
      *(_OWORD *)(a3 + 192) = v10;
      *(_OWORD *)(a3 + 216) = *(_OWORD *)(a1 + 1392);
      *(_OWORD *)(a3 + 232) = *(_OWORD *)(a1 + 1408);
      sub_1010FD380(a3 + 248, &v16);
    }
  }
  *(_BYTE *)(a3 + 336) = 0;
  *a2 = 0;
}

BOOL sub_1014A0444(int a1, double *a2, double *a3, double a4, double a5, float a6)
{
  NSObject *v8;
  _BOOL8 result;
  char *v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  uint64_t v14;
  int v15;
  double v16;
  uint8_t buf[4];
  double v18;

  *a3 = a4;
  if (a5 > 0.0)
  {
    if (a1 != -1)
    {
      *a3 = a4 - a6;
      return 1;
    }
    HIDWORD(v14) = 0;
    if (sub_100208AC8((float *)&v14 + 1, *a2, a2[1]))
    {
      *a3 = a4 - *((float *)&v14 + 1);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_1021B9920);
      v11 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134283521;
        v18 = *((float *)&v14 + 1);
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLVLFT,convertAltitudeWgs84ToMsl,DEM unavailable,using DMA und,%{private}f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_1021B9920);
        v15 = 134283521;
        v16 = *((float *)&v14 + 1);
        LODWORD(v14) = 12;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLFT,convertAltitudeWgs84ToMsl,DEM unavailable,using DMA und,%{private}f", &v15, v14);
        sub_100512490("Generic", 1, 0, 2, "static BOOL clv::fusion::LocData::convertAltitudeWgs84ToMsl(const double, const double, const CLUndulationModelType, const float, const CLClientLocationCoordinate &, double &)", "%s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
      return 1;
    }
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021B9920);
    v12 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLVLFT,convertAltitudeWgs84ToMsl,DMA unavailable,Failed to convert altitude", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021B9920);
    LOWORD(v15) = 0;
    LODWORD(v14) = 2;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLFT,convertAltitudeWgs84ToMsl,DMA unavailable,Failed to convert altitude", &v15, v14);
    sub_100512490("Generic", 1, 0, 2, "static BOOL clv::fusion::LocData::convertAltitudeWgs84ToMsl(const double, const double, const CLUndulationModelType, const float, const CLClientLocationCoordinate &, double &)", "%s\n", v10);
LABEL_12:
    if (v10 != (char *)buf)
      free(v10);
    return 0;
  }
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021B9920);
  v8 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLVLFT,convertAltitudeWgs84ToMsl,altitudeWgs84 unavailable", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021B9920);
    LOWORD(v15) = 0;
    LODWORD(v14) = 2;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVLFT,convertAltitudeWgs84ToMsl,altitudeWgs84 unavailable", &v15, v14);
    sub_100512490("Generic", 1, 0, 2, "static BOOL clv::fusion::LocData::convertAltitudeWgs84ToMsl(const double, const double, const CLUndulationModelType, const float, const CLClientLocationCoordinate &, double &)", "%s\n", v10);
    goto LABEL_12;
  }
  return result;
}

void sub_1014A08A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1014A08B0()
{
  operator delete();
}

void sub_1014A08C4()
{
  operator delete();
}

void sub_1014A08D8(id a1)
{
  qword_1022A00C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Vision");
}

void sub_1014A0904(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  const double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t j;

  v2 = a1;
  v3 = a2[4];
  v4 = (const double *)a2[5];
  if (v3 == 6)
  {
    vDSP_vaddD((const double *)(a1 + 8), 1, v4, 1, (double *)(a1 + 8), 1, 0x24uLL);
  }
  else
  {
    v5 = a2[3];
    if (v5 == 1)
    {
      v6 = 8 * v3;
      for (i = 8; i != 296; i += 48)
      {
        vDSP_vaddD((const double *)(v2 + i), 1, v4, 1, (double *)(v2 + i), 1, 6uLL);
        v4 = (const double *)((char *)v4 + v6);
      }
    }
    else
    {
      v8 = 0;
      v9 = 8 * v3;
      v10 = 8 * v5;
      do
      {
        v11 = (double *)v4;
        for (j = 8; j != 56; j += 8)
        {
          *(double *)(v2 + j) = *(double *)(v2 + j) + *v11;
          v11 = (double *)((char *)v11 + v10);
        }
        ++v8;
        v4 = (const double *)((char *)v4 + v9);
        v2 += 48;
      }
      while (v8 != 6);
    }
  }
}

void sub_1014A09F0(uint64_t a1, const double *__B)
{
  vDSP_vsmulD((const double *)(a1 + 8), 1, __B, (double *)(a1 + 8), 1, 0x24uLL);
}

double sub_1014A0A20(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v9 = a1[8];
  v10 = a1[9];
  a1[1] = v5 * a2[2] + v2 * a2[1] + v8 * a2[3];
  a1[2] = v6 * a2[2] + v3 * a2[1] + v9 * a2[3];
  a1[3] = v7 * a2[2] + v4 * a2[1] + v10 * a2[3];
  a1[4] = v5 * a2[5] + v2 * a2[4] + v8 * a2[6];
  a1[5] = v6 * a2[5] + v3 * a2[4] + v9 * a2[6];
  a1[6] = v7 * a2[5] + v4 * a2[4] + v10 * a2[6];
  a1[7] = v5 * a2[8] + v2 * a2[7] + v8 * a2[9];
  a1[8] = v6 * a2[8] + v3 * a2[7] + v9 * a2[9];
  result = v7 * a2[8] + v4 * a2[7] + v10 * a2[9];
  a1[9] = result;
  return result;
}

char *sub_1014A0B10(char *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;

  v3 = result;
  v5 = *((_QWORD *)result + 3);
  v4 = *((_QWORD *)result + 4);
  v7 = *((_QWORD *)result + 1);
  v6 = *((_QWORD *)result + 2);
  v8 = a2[2];
  v9 = a2[3];
  if (v4 == v7)
  {
    v11 = v5 != v6 || v9 != v8;
    if (a2[4] != a2[1] && v11)
      goto LABEL_10;
  }
  else if (v5 != v6 || v9 != v8)
  {
LABEL_10:
    if (v5 == 1 && v9 == 1)
    {
      if (v6)
      {
        v25 = 0;
        v26 = a2[1];
        do
        {
          if (v26)
          {
            result = (char *)memmove((void *)(v3[5] + 8 * v3[4] * v25), (const void *)(a2[5] + 8 * a2[4] * v25), 8 * v26);
            v6 = v3[2];
          }
          ++v25;
        }
        while (v25 < v6);
      }
    }
    else if (v6)
    {
      v13 = 0;
      v14 = 0;
      v15 = 8 * v4;
      v16 = 8 * v5;
      v17 = (char *)a2[5];
      v18 = 8 * a2[4];
      v19 = 8 * v9;
      do
      {
        if (v7)
        {
          v20 = (_QWORD *)(v3[5] + v13);
          result = v17;
          v21 = v7;
          do
          {
            *v20 = *(_QWORD *)result;
            v20 = (_QWORD *)((char *)v20 + v16);
            result += v19;
            --v21;
          }
          while (v21);
        }
        ++v14;
        v13 += v15;
        v17 += v18;
      }
      while (v14 != v6);
    }
    return result;
  }
  v23 = (_BYTE *)a2[5];
  v24 = (_BYTE *)a2[6];
  if (v24 != v23)
    return (char *)memmove(*((void **)result + 5), v23, v24 - v23);
  return result;
}

uint64_t sub_1014A0C58()
{
  sub_1015A2E04(qword_10230F7D0, "[");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230F7D0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230F7E8, "]");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230F7E8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230F800, " ");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230F800, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230F818, ";");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230F818, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230F830, ", ");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230F830, (void *)&_mh_execute_header);
}

uint64_t sub_1014A0D4C(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_1006DE784(a1, &v10);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)a1 = off_1021B9950;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  return a1;
}

void sub_1014A0DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1014A0E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v7[40];

  if (*(_BYTE *)(a1 + 80))
    *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a1 + 96))
    *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(double *)(a1 + 136) = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  sub_1006DFA98(v7, a3);
  result = sub_1006DF4C8(a1, a2, (uint64_t)v7);
  if (v7[32])
    return sub_1001FF18C((uint64_t)v7);
  return result;
}

void sub_1014A0EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
    sub_1001FF18C((uint64_t)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014A0EC0(uint64_t result)
{
  double v1;

  v1 = *(double *)(result + 112);
  if (v1 > *(double *)(result + 120))
    *(double *)(result + 120) = v1;
  if (*(_BYTE *)(result + 104) && v1 > *(double *)(result + 128))
    *(double *)(result + 128) = v1;
  if (*(_BYTE *)(result + 80))
    *(_BYTE *)(result + 80) = 0;
  if (*(_BYTE *)(result + 96))
    *(_BYTE *)(result + 96) = 0;
  *(_BYTE *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  return result;
}

_QWORD *sub_1014A0F0C(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _QWORD *v11;
  double v13;
  _DWORD *v14;
  unsigned int v15;
  _DWORD *v16[14];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = objc_msgSend(a3, "type");
  if (v6 == 9)
  {
    *(_BYTE *)(a1 + 104) = 1;
LABEL_12:
    v15 = objc_msgSend(a3, "type");
    v16[0] = &v15;
    v11 = sub_10006A62C(a2 + 16, (int *)&v15, (uint64_t)&unk_101B9EB60, v16);
    ++*((_DWORD *)v11 + 5);
    return sub_1006DE7C8(a1, a2, a3);
  }
  if (v6 == 8)
  {
    sub_1006DEB70(a3);
    v8 = v7;
    objc_msgSend(objc_msgSend(objc_msgSend(a3, "vioEstimation"), "originTimestamp"), "cfAbsoluteTimeS");
    if (*(_BYTE *)(a1 + 80))
    {
      v10 = *(double *)(a1 + 72);
    }
    else
    {
      *(double *)(a1 + 72) = v9;
      *(_BYTE *)(a1 + 80) = 1;
      v10 = v9;
    }
    if (v10 != v9
      || *(_BYTE *)(a1 + 96)
      && (v13 = v8 - *(double *)(a1 + 88),
          (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)(a1 + 56) + 128))(v16),
          v14 = v16[12],
          sub_100067AC4((uint64_t)&v19),
          sub_100067AC4((uint64_t)&v18),
          sub_100067AC4((uint64_t)&v17),
          v13 >= *(double *)&v14))
    {
      sub_1014A0EC0(a1);
    }
    if (*(_BYTE *)(a1 + 96))
      *(double *)(a1 + 112) = *(double *)(a1 + 112) + v8 - *(double *)(a1 + 88);
    *(double *)(a1 + 88) = v8;
    *(_BYTE *)(a1 + 96) = 1;
    goto LABEL_12;
  }
  return sub_1006DE7C8(a1, a2, a3);
}

float sub_1014A1090(uint64_t a1)
{
  float v1;
  double v4;
  float v5;
  float v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = 0.0;
  if (!*(_BYTE *)(a1 + 48) && *(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 16) && *(double *)(a1 + 136) > 0.0)
  {
    sub_1014A0EC0(a1);
    v4 = *(double *)(a1 + 128);
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 56) + 128))(&v9);
    v5 = v4 * v14;
    v6 = *(double *)(a1 + 120);
    *(float *)&v4 = fmaxf(v5, v6);
    sub_100067AC4((uint64_t)&v17);
    sub_100067AC4((uint64_t)&v16);
    sub_100067AC4((uint64_t)&v15);
    v7 = sub_1006DEEA8(a1) / *(double *)(a1 + 136) + *(float *)&v4;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B9998);
    v1 = v7;
    v8 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v9 = 68289283;
      v10 = 2082;
      v11 = "";
      v12 = 2049;
      v13 = v1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Vision enabled trace score\", \"score\":\"%{private}f\"}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  return v1;
}

void sub_1014A1228(_QWORD *a1)
{
  void **v1;
  void **v2;

  *a1 = off_10214F110;
  v1 = (void **)(a1 + 1);
  sub_100261F44((uint64_t)(a1 + 7));
  v2 = v1;
  sub_1006DFAF4(&v2);
  operator delete();
}

void sub_1014A128C(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

double sub_1014A12B8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  double result;

  v2 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_BYTE *)(a1 + 21) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_101CA737C;
  *(_OWORD *)(a1 + 40) = unk_101CA738C;
  *(_OWORD *)(a1 + 56) = xmmword_101CA739C;
  *(_QWORD *)&result = 1092616192;
  *(_OWORD *)(a1 + 68) = *(__int128 *)((char *)&xmmword_101CA739C + 12);
  return result;
}

__n128 sub_1014A1304(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  const char *v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;

  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_1021B99D8);
  v4 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a1 + 21))
      v5 = "update";
    else
      v5 = "init";
    *(_DWORD *)buf = 136446210;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "SteadinessClassifier: Received user info (%{public}s)", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021B99D8);
    if (*(_BYTE *)(a1 + 21))
      v9 = "update";
    else
      v9 = "init";
    v12 = 136446210;
    v13 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "SteadinessClassifier: Received user info (%{public}s)", &v12, 12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLMobility::WalkingSteadinessClassifier::handleUserInfoUpdate(const CLBodyMetrics &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  *(__n128 *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 21) = 1;
  return result;
}

void sub_1014A150C(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, double **a5@<X4>, double **a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  void *v13;
  int64x2_t v14;
  double *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double v20;
  NSObject *v21;
  double v22;
  double v23;
  _QWORD *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  NSObject *v32;
  double v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const char *v48;
  uint8_t *v49;
  const char *v50;
  uint8_t *v51;
  double v52;
  const char *v53;
  uint8_t *v54;
  const char *v55;
  uint8_t *v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  const char *v67;
  uint8_t *v68;
  const char *v69;
  uint8_t *v70;
  const char *v71;
  uint8_t *v72;
  uint64_t v73;
  _OWORD v74[3];
  void *v75;
  void *v76;
  uint64_t v77;
  double v78;
  void *__p;
  void *v80;
  uint64_t v81;
  void *v82;
  __int128 *v83;
  uint64_t v84;
  void *v85;
  __int128 *v86;
  uint64_t v87;
  int v88;
  double v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  int v107;
  uint8_t buf[1640];

  *(_OWORD *)a7 = xmmword_101CA737C;
  *(_OWORD *)(a7 + 16) = unk_101CA738C;
  *(_OWORD *)(a7 + 32) = xmmword_101CA739C;
  *(_OWORD *)(a7 + 44) = *(__int128 *)((char *)&xmmword_101CA739C + 12);
  *(_WORD *)(a7 + 60) = 0;
  *(_BYTE *)(a7 + 62) = 0;
  *(_OWORD *)(a7 + 144) = 0u;
  v13 = (void *)(a7 + 144);
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_WORD *)(a7 + 128) = 0;
  *(_QWORD *)(a7 + 132) = 0;
  *(_BYTE *)(a7 + 140) = 0;
  v14 = vdupq_n_s64(0xFFF0000000000000);
  *(int64x2_t *)(a7 + 160) = v14;
  *(int64x2_t *)(a7 + 176) = v14;
  *(_OWORD *)(a7 + 192) = 0u;
  *(_OWORD *)(a7 + 208) = 0u;
  *(_OWORD *)(a7 + 224) = 0u;
  *(_DWORD *)(a7 + 240) = 0;
  *(int64x2_t *)(a7 + 248) = v14;
  v15 = (double *)(a7 + 248);
  *(_QWORD *)(a7 + 264) = 0xFFF0000000000000;
  *(int64x2_t *)(a7 + 272) = v14;
  *(int64x2_t *)(a7 + 288) = v14;
  *(int64x2_t *)(a7 + 304) = v14;
  *(int64x2_t *)(a7 + 320) = v14;
  *(int64x2_t *)(a7 + 336) = v14;
  *(int64x2_t *)(a7 + 352) = v14;
  *(int64x2_t *)(a7 + 368) = v14;
  *(int64x2_t *)(a7 + 384) = v14;
  *(_OWORD *)(a7 + 400) = 0u;
  *(_OWORD *)(a7 + 416) = 0u;
  *(_OWORD *)(a7 + 432) = 0u;
  *(_DWORD *)(a7 + 448) = 0;
  *(_QWORD *)(a7 + 456) = 0xFFF0000000000000;
  *(int64x2_t *)(a7 + 464) = v14;
  *(int64x2_t *)(a7 + 480) = v14;
  *(int64x2_t *)(a7 + 496) = v14;
  *(int64x2_t *)(a7 + 512) = v14;
  *(_QWORD *)(a7 + 528) = 0xFFF0000000000000;
  *(_OWORD *)(a7 + 536) = 0u;
  *(_OWORD *)(a7 + 552) = 0u;
  *(_OWORD *)(a7 + 568) = 0u;
  *(_DWORD *)(a7 + 584) = 0;
  *(int64x2_t *)(a7 + 592) = v14;
  *(int64x2_t *)(a7 + 608) = v14;
  *(_OWORD *)(a7 + 624) = 0u;
  *(_OWORD *)(a7 + 640) = 0u;
  *(_OWORD *)(a7 + 656) = 0u;
  *(_DWORD *)(a7 + 672) = 0;
  *(_QWORD *)(a7 + 680) = 0xFFF0000000000000;
  *(int64x2_t *)(a7 + 688) = v14;
  *(int64x2_t *)(a7 + 704) = v14;
  *(int64x2_t *)(a7 + 720) = v14;
  *(int64x2_t *)(a7 + 736) = v14;
  *(int64x2_t *)(a7 + 752) = v14;
  *(int64x2_t *)(a7 + 768) = v14;
  *(int64x2_t *)(a7 + 784) = v14;
  *(int64x2_t *)(a7 + 800) = v14;
  *(int64x2_t *)(a7 + 816) = v14;
  *(int64x2_t *)(a7 + 832) = v14;
  *(int64x2_t *)(a7 + 848) = v14;
  *(int64x2_t *)(a7 + 864) = v14;
  *(int64x2_t *)(a7 + 880) = v14;
  *(int64x2_t *)(a7 + 896) = v14;
  *(_QWORD *)(a7 + 912) = 0xFFF0000000000000;
  *(_BYTE *)(a7 + 920) = 0;
  *(int64x2_t *)(a7 + 928) = v14;
  *(int64x2_t *)(a7 + 944) = v14;
  *(int64x2_t *)(a7 + 960) = v14;
  *(int64x2_t *)(a7 + 976) = v14;
  *(_QWORD *)(a7 + 992) = 0xFFF0000000000000;
  v16 = a7 + 1000;
  *(_WORD *)(a7 + 1000) = 0;
  *(_BYTE *)(a7 + 1002) = 0;
  *(_DWORD *)(a7 + 1056) = 0;
  *(_OWORD *)(a7 + 1040) = 0u;
  *(_DWORD *)(v16 + 31) = 0;
  *(_QWORD *)(a7 + 1024) = 0;
  *(_OWORD *)(a7 + 1008) = 0u;
  *(_QWORD *)(a7 + 1112) = 0;
  *(_OWORD *)(a7 + 1096) = 0u;
  *(_QWORD *)(v16 + 85) = 0;
  *(_QWORD *)(a7 + 1072) = 0;
  *(_QWORD *)(a7 + 1064) = 0;
  *(_QWORD *)(a7 + 1080) = 0;
  *(double *)(a7 + 72) = a8;
  *(double *)(a7 + 96) = a8;
  *(_BYTE *)(a7 + 129) = a3;
  *(_DWORD *)(a7 + 1088) = a4;
  v17 = *(_OWORD *)(a1 + 3);
  v18 = *(_OWORD *)(a1 + 5);
  v19 = *(_OWORD *)(a1 + 7);
  *(_OWORD *)(a7 + 44) = *(_OWORD *)((char *)a1 + 68);
  *(_OWORD *)(a7 + 16) = v18;
  *(_OWORD *)(a7 + 32) = v19;
  *(_OWORD *)a7 = v17;
  v20 = sub_101081D78(a8);
  *(double *)(a7 + 80) = v20 + -604800.0;
  *(double *)(a7 + 88) = v20;
  if (*((_BYTE *)a1 + 21))
  {
    if (*((_BYTE *)a1 + 80) && *((float *)a1 + 11) < 18.0)
    {
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B99D8);
      v21 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_ERROR))
      {
        v22 = *((float *)a1 + 11);
        *(_DWORD *)buf = 134283521;
        *(double *)&buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#warning: Attempted a classification despite invalid user age: %{private}.1f. Exiting.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021B99D8);
        v52 = *((float *)a1 + 11);
        v88 = 134283521;
        v89 = v52;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 16, "#warning: Attempted a classification despite invalid user age: %{private}.1f. Exiting.", &v88, 12);
        v54 = (uint8_t *)v53;
        sub_100512490("Generic", 1, 0, 0, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
      *(_DWORD *)(a7 + 136) |= 8u;
      *(_QWORD *)(a7 + 96) = 0;
    }
    else
    {
      v85 = 0;
      v86 = 0;
      v87 = 0;
      if (((*(uint64_t (**)(_QWORD, _QWORD, void **, double, double))(*(_QWORD *)*a1 + 24))(*a1, 0, &v85, v20 + -2592000.0, v20) & 1) != 0)
      {
        *(_BYTE *)(a7 + 1092) |= sub_1014A24C8((uint64_t)a1, &v85);
        if (v86 != v85)
          sub_1014A46F0((uint64_t)v85, v86, 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v86 - (_BYTE *)v85) >> 5)), 1);
        v82 = 0;
        v83 = 0;
        v84 = 0;
        if (((*(uint64_t (**)(_QWORD, uint64_t, void **, double, double))(*(_QWORD *)*a1 + 24))(*a1, 1, &v82, v20 + -2592000.0, v20) & 1) != 0)
        {
          if (v83 != v82)
            sub_1014A6548((uint64_t)v82, v83, 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v83 - (_BYTE *)v82) >> 5)), 1);
          *(_BYTE *)(a7 + 1092) |= sub_1014A24C8((uint64_t)a1, &v82);
          v23 = *(double *)(a7 + 88);
          v80 = 0;
          v81 = 0;
          __p = 0;
          v24 = sub_1014A7D4C(&__p, v82, (uint64_t)v83, 0x6DB6DB6DB6DB6DB7 * (((char *)v83 - (_BYTE *)v82) >> 5));
          sub_1014A2A74(v23, (uint64_t)v24, a7, (uint64_t *)&__p);
          if (__p)
          {
            v80 = __p;
            operator delete(__p);
          }
          sub_100721DAC((uint64_t)(a1 + 2), (uint64_t *)&v82, (uint64_t)(a1 + 3), (uint64_t *)buf, *(double *)(a7 + 88));
          memcpy(v13, buf, 0x309uLL);
          *(_OWORD *)(a7 + 104) = *(_OWORD *)(a7 + 144);
          v25 = *(double *)(a7 + 88);
          if (!*(_BYTE *)(a7 + 920))
          {
            *(double *)(a7 + 96) = v25 + 86400.0;
            *(_DWORD *)(a7 + 132) |= 1u;
          }
          *(double *)(a7 + 976) = sub_1013B43D0(a5, a6, v15, v25);
          *(_QWORD *)(a7 + 984) = v26;
          *(_QWORD *)(a7 + 992) = v27;
          *(double *)(a7 + 120) = sub_1009FFF30((double *)(a7 + 976), *(double *)(a7 + 112));
          if (!*((_BYTE *)a1 + 81))
          {
            if (qword_10229FC40 != -1)
              dispatch_once(&qword_10229FC40, &stru_1021B99D8);
            v28 = qword_10229FC48;
            if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "No height set, setting nextClassificationTime to the past for historical compute", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FC40 != -1)
                dispatch_once(&qword_10229FC40, &stru_1021B99D8);
              LOWORD(v88) = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "No height set, setting nextClassificationTime to the past for historical compute", &v88, 2);
              v72 = (uint8_t *)v71;
              sub_100512490("Generic", 1, 0, 2, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v71);
              if (v72 != buf)
                free(v72);
            }
            *(_QWORD *)(a7 + 96) = 0;
            *(_DWORD *)(a7 + 132) |= 0x20u;
          }
          v78 = 0.0;
          if (sub_1014A2BA4(a1, &v78, *(double *)(a7 + 72)))
          {
            *(double *)(a7 + 96) = fmax(*(double *)(a7 + 96), v78);
            *(_DWORD *)(a7 + 132) |= 0x80u;
          }
          v75 = 0;
          v76 = 0;
          v77 = 0;
          v29 = sub_1002782D0(&v75, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
          sub_1014A2E2C((uint64_t)v29, a7, (uint64_t *)&v75);
          if (v75)
          {
            v76 = v75;
            operator delete(v75);
          }
          sub_100EFF924(a5, a6, (uint64_t *)v15, (int *)(a7 + 1096), (uint64_t)buf, *(double *)(a7 + 88), *(double *)(a7 + 120));
          v30 = *(_OWORD *)&buf[16];
          *(_OWORD *)(a7 + 928) = *(_OWORD *)buf;
          *(_OWORD *)(a7 + 944) = v30;
          *(_OWORD *)(a7 + 960) = *(_OWORD *)&buf[32];
          v31 = *(_OWORD *)(a7 + 944);
          v74[0] = *(_OWORD *)(a7 + 928);
          v74[1] = v31;
          v74[2] = *(_OWORD *)(a7 + 960);
          if (sub_1009FFDFC((uint64_t)v74))
          {
            *(_DWORD *)(a7 + 132) |= 0x40u;
            *(double *)(a7 + 96) = *(double *)(a7 + 88) + 604800.0;
            if (qword_10229FC40 != -1)
              dispatch_once(&qword_10229FC40, &stru_1021B99D8);
            v32 = qword_10229FC48;
            if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "SteadinessClassifier: score suppressed.", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FC40 != -1)
                dispatch_once(&qword_10229FC40, &stru_1021B99D8);
              LOWORD(v88) = 0;
              LODWORD(v73) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "SteadinessClassifier: score suppressed.", &v88, v73);
              v70 = (uint8_t *)v69;
              sub_100512490("Generic", 1, 0, 2, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v69);
              if (v70 != buf)
                free(v70);
            }
          }
          if (*(_QWORD *)(a7 + 132))
          {
            v33 = *(double *)(a7 + 96);
          }
          else
          {
            *(_BYTE *)(a7 + 128) = 1;
            v33 = *(double *)(a7 + 88) + 604800.0;
            *(double *)(a7 + 96) = v33;
          }
          if (v33 > *(double *)(a7 + 72))
            *(double *)(a7 + 96) = v33 + 1800.0;
          if (qword_10229FC40 != -1)
            dispatch_once(&qword_10229FC40, &stru_1021B99D8);
          v37 = qword_10229FC48;
          if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
          {
            v38 = *(_QWORD *)(a7 + 80);
            v39 = *(_QWORD *)(a7 + 88);
            v40 = *(_QWORD *)(a7 + 112);
            v41 = *(_QWORD *)(a7 + 120);
            v42 = *(unsigned __int8 *)(a7 + 128);
            v44 = *(_DWORD *)(a7 + 132);
            v43 = *(_DWORD *)(a7 + 136);
            v46 = *(_QWORD *)(a7 + 96);
            v45 = *(_QWORD *)(a7 + 104);
            v47 = *(unsigned __int8 *)(a7 + 140);
            *(_DWORD *)buf = 134351361;
            *(_QWORD *)&buf[4] = v38;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v39;
            *(_WORD *)&buf[22] = 2049;
            *(_QWORD *)&buf[24] = v45;
            *(_WORD *)&buf[32] = 2049;
            *(_QWORD *)&buf[34] = v40;
            *(_WORD *)&buf[42] = 2049;
            *(_QWORD *)&buf[44] = v41;
            *(_WORD *)&buf[52] = 1026;
            *(_DWORD *)&buf[54] = v42;
            *(_WORD *)&buf[58] = 1026;
            *(_DWORD *)&buf[60] = v43;
            *(_WORD *)&buf[64] = 1026;
            *(_DWORD *)&buf[66] = v44;
            *(_WORD *)&buf[70] = 2050;
            *(_QWORD *)&buf[72] = v46;
            *(_WORD *)&buf[80] = 1026;
            *(_DWORD *)&buf[82] = v47;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessResult,hkStartTime,%{public}.2f,hkEndTime,%{public}.2f,rawSteadinessScore,%{private}.2f, unadjustedScore,%{private}.2f,walkingSteadiness,%{private}.2f,writeToHealthKit,%{public}d,errorStatus,%{public}d,rejectionStatus,%{public}d,nextClassificationTime,%{public}.2f,dataSourcesUnavailable,%{public}d", buf, 0x56u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC40 != -1)
              dispatch_once(&qword_10229FC40, &stru_1021B99D8);
            v57 = *(double *)(a7 + 80);
            v58 = *(_QWORD *)(a7 + 88);
            v59 = *(_QWORD *)(a7 + 112);
            v60 = *(_QWORD *)(a7 + 120);
            v61 = *(unsigned __int8 *)(a7 + 128);
            v63 = *(_DWORD *)(a7 + 132);
            v62 = *(_DWORD *)(a7 + 136);
            v65 = *(_QWORD *)(a7 + 96);
            v64 = *(_QWORD *)(a7 + 104);
            v66 = *(unsigned __int8 *)(a7 + 140);
            v88 = 134351361;
            v89 = v57;
            v90 = 2050;
            v91 = v58;
            v92 = 2049;
            v93 = v64;
            v94 = 2049;
            v95 = v59;
            v96 = 2049;
            v97 = v60;
            v98 = 1026;
            v99 = v61;
            v100 = 1026;
            v101 = v62;
            v102 = 1026;
            v103 = v63;
            v104 = 2050;
            v105 = v65;
            v106 = 1026;
            v107 = v66;
            LODWORD(v73) = 86;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "CLMobility::SteadinessResult,hkStartTime,%{public}.2f,hkEndTime,%{public}.2f,rawSteadinessScore,%{private}.2f, unadjustedScore,%{private}.2f,walkingSteadiness,%{private}.2f,writeToHealthKit,%{public}d,errorStatus,%{public}d,rejectionStatus,%{public}d,nextClassificationTime,%{public}.2f,dataSourcesUnavailable,%{public}d", &v88, v73);
            v68 = (uint8_t *)v67;
            sub_100512490("Generic", 1, 0, 2, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v67);
            if (v68 != buf)
              free(v68);
          }
        }
        else
        {
          if (qword_10229FC40 != -1)
            dispatch_once(&qword_10229FC40, &stru_1021B99D8);
          v36 = qword_10229FC48;
          if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#warning: SteadinessClassifier unable to classify, BoutMetricsDb unavailable", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC40 != -1)
              dispatch_once(&qword_10229FC40, &stru_1021B99D8);
            LOWORD(v88) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "#warning: SteadinessClassifier unable to classify, BoutMetricsDb unavailable", &v88, 2);
            v56 = (uint8_t *)v55;
            sub_100512490("Generic", 1, 0, 2, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v55);
            if (v56 != buf)
              free(v56);
          }
          *(_BYTE *)(a7 + 140) = 1;
          *(_DWORD *)(a7 + 136) |= 2u;
        }
        if (v82)
        {
          v83 = (__int128 *)v82;
          operator delete(v82);
        }
      }
      else
      {
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021B99D8);
        v35 = qword_10229FC48;
        if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#warning: SteadinessClassifier unable to classify, BoutMetricsDb unavailable", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC40 != -1)
            dispatch_once(&qword_10229FC40, &stru_1021B99D8);
          LOWORD(v88) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "#warning: SteadinessClassifier unable to classify, BoutMetricsDb unavailable", &v88, 2);
          v51 = (uint8_t *)v50;
          sub_100512490("Generic", 1, 0, 2, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v50);
          if (v51 != buf)
            free(v51);
        }
        *(_BYTE *)(a7 + 140) = 1;
        *(_DWORD *)(a7 + 136) |= 2u;
      }
      if (v85)
      {
        v86 = (__int128 *)v85;
        operator delete(v85);
      }
    }
  }
  else
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021B99D8);
    v34 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "SteadinessClassifier unable to classify because UserInfo not set", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B99D8);
      LOWORD(v88) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 16, "SteadinessClassifier unable to classify because UserInfo not set", &v88, 2);
      v49 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 0, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
    *(_BYTE *)(a7 + 140) = 1;
    *(_DWORD *)(a7 + 136) |= 1u;
  }
}

void sub_1014A2438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014A24C8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v4;
  _OWORD *v5;
  double v6;
  uint64_t v7;
  BOOL v8;
  double v9;
  double v10;
  int v11;
  int v12;
  int v13;
  int v14;
  double v16;
  __int128 v17;
  int v18;
  int v19;
  int v20;
  double v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v28;
  uint64_t v32;
  int v36;
  int v37;
  double v38;
  double v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  BOOL v46;
  uint64_t v47;
  NSObject *v48;
  const char *v50;
  uint8_t *v51;
  int v52;
  uint64_t v53;
  _OWORD v54[2];
  _BYTE v55[28];
  _OWORD v56[2];
  _OWORD v57[2];
  _OWORD v58[2];
  _OWORD v59[2];
  _DWORD v60[2];
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  uint8_t buf[4];
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;

  v2 = a2[1];
  if (*a2 == v2)
  {
    v53 = 0;
    v52 = 0;
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v53 = 0;
    v52 = 0;
    v5 = (_OWORD *)(a1 + 24);
    v6 = sqrt(*(float *)(a1 + 32) / 1.70000005);
    v7 = *a2 + 112;
    do
    {
      if (*(_BYTE *)(a1 + 81))
        v8 = *(_BYTE *)(v7 + 100) == 0;
      else
        v8 = 0;
      if (v8)
      {
        v9 = *(double *)v7;
        v10 = *(double *)(v7 + 16);
        v11 = *(_DWORD *)(v7 + 80);
        v12 = *(_DWORD *)(v7 - 60);
        if (v12)
          v13 = 42;
        else
          v13 = -1;
        v14 = v13 & v11;
        if (v11 == 32 || v14 == 0)
        {
          v16 = (v9 + -0.109999999) * v6 + 0.109999999;
          *(double *)v7 = v16;
          v17 = v5[1];
          v58[0] = *v5;
          v58[1] = v17;
          v59[0] = v5[2];
          *(_OWORD *)((char *)v59 + 12) = *(_OWORD *)((char *)v5 + 44);
          if (sub_1010820F4((uint64_t)v58, 0, v16))
            v18 = 0;
          else
            v18 = 32;
          *(_DWORD *)(v7 + 80) = *(_DWORD *)(v7 + 80) & 0xFFFFFFDF | v18;
          ++v4;
          v12 = *(_DWORD *)(v7 - 60);
        }
        v19 = *(_DWORD *)(v7 + 88);
        if (v12)
          v20 = 42;
        else
          v20 = -1;
        if (v19 == 32 || (v20 & v19) == 0)
        {
          v21 = (1.0 - v6) * (0.109999999 / (v9 / v10)) + v6 * v10;
          *(double *)(v7 + 16) = v21;
          v22 = v5[1];
          v56[0] = *v5;
          v56[1] = v22;
          v57[0] = v5[2];
          *(_OWORD *)((char *)v57 + 12) = *(_OWORD *)((char *)v5 + 44);
          if (sub_1010820F4((uint64_t)v56, 2u, v21))
            v23 = 0;
          else
            v23 = 32;
          *(_DWORD *)(v7 + 88) = *(_DWORD *)(v7 + 88) & 0xFFFFFFDF | v23;
          LODWORD(v53) = v53 + 1;
        }
        v24 = *(_QWORD *)(v7 - 40);
        if (((v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v24 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v24 == 0x7FF0000000000000
          || (v24 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          sub_1014A3068(a1, (double *)(v7 - 40), 0.0101029578, 0.989080385, -0.016843409);
        }
        v28 = *(_QWORD *)(v7 - 32);
        if (((v28 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v28 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v28 == 0x7FF0000000000000
          || (v28 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          sub_1014A3068(a1, (double *)(v7 - 32), 0.0156722755, 0.991972931, -0.026228411);
        }
        v32 = *(_QWORD *)(v7 - 48);
        if (((v32 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v32 == 0x7FF0000000000000
          || (v32 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          sub_1014A3068(a1, (double *)(v7 - 48), 0.0612694881, 0.983050659, -0.0937741748);
          ++HIDWORD(v53);
        }
      }
      if (*(_BYTE *)(a1 + 82) && *(_BYTE *)(a1 + 81) && (!*(_BYTE *)(v7 + 108) || !*(_BYTE *)(v7 + 100)))
      {
        v36 = *(_DWORD *)(v7 + 84);
        v37 = *(_DWORD *)(v7 - 60) ? 42 : -1;
        if (v36 == 32 || (v37 & v36) == 0)
        {
          v38 = *(double *)(v7 + 8);
          v39 = v38 + sub_1014A3214(*(float *)(a1 + 36), *(float *)(a1 + 32));
          *(double *)(v7 + 8) = v39;
          *(_OWORD *)&v55[12] = *(_OWORD *)((char *)v5 + 44);
          v40 = v5[2];
          v41 = *v5;
          v54[1] = v5[1];
          *(_OWORD *)v55 = v40;
          v54[0] = v41;
          if (sub_1010820F4((uint64_t)v54, 1u, v39))
            v42 = 0;
          else
            v42 = 32;
          *(_DWORD *)(v7 + 84) = *(_DWORD *)(v7 + 84) & 0xFFFFFFDF | v42;
          ++v52;
        }
      }
      v43 = v7 + 112;
      v7 += 224;
    }
    while (v43 != v2);
  }
  v46 = v4 <= 0 && (int)v53 <= 0 && v52 <= 0 && SHIDWORD(v53) <= 0;
  v47 = !v46;
  if (!v46)
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021B99D8);
    v48 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240960;
      v68 = v4;
      v69 = 1026;
      v70 = v53;
      v71 = 1026;
      v72 = v52;
      v73 = 1026;
      v74 = HIDWORD(v53);
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "Applied bout metrics correction (speeds=%{public}d, stepLengths=%{public}d, doubleSupportPercentages=%{public}d, entropyModelStepLengthFeatures=%{public}d)", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B99D8);
      v60[0] = 67240960;
      v60[1] = v4;
      v61 = 1026;
      v62 = v53;
      v63 = 1026;
      v64 = v52;
      v65 = 1026;
      v66 = HIDWORD(v53);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "Applied bout metrics correction (speeds=%{public}d, stepLengths=%{public}d, doubleSupportPercentages=%{public}d, entropyModelStepLengthFeatures=%{public}d)", v60, 26);
      v51 = (uint8_t *)v50;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMobility::WalkingSteadinessClassifier::correctBoutMetrics(std::vector<BoutMetrics> &) const", "%s\n", v50);
      if (v51 != buf)
        free(v51);
    }
  }
  return v47;
}

void sub_1014A2A74(double a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 *v5;
  double v8;
  uint64_t v9;
  double v10;
  int v11;
  int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  int v19;

  *(_QWORD *)(a3 + 64) = 0;
  v5 = (__int128 *)a4[1];
  if (v5 != (__int128 *)*a4)
  {
    sub_1014A8934(*a4, v5, 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - *a4) >> 5)), 1);
    v8 = sub_101081D78(*(double *)(*a4 + 8));
    v9 = a4[1];
    v10 = *(double *)(v9 - 216);
    if (v8 < v10)
    {
      v11 = *(_DWORD *)(a3 + 64);
      v12 = *(_DWORD *)(a3 + 68);
      v13 = *a4;
      do
      {
        v14 = v8;
        v8 = v8 + 86400.0;
        if (v13 != v9)
        {
          v15 = 0;
          v16 = v13;
          do
          {
            v17 = *(double *)(v16 + 8);
            if (v17 >= v14 && v17 < v8)
            {
              v19 = *(_DWORD *)(v16 + 52) ? 42 : -1;
              if ((v19 & *(_DWORD *)(v16 + 192)) == 0)
                ++v15;
            }
            v16 += 224;
          }
          while (v16 != v9);
          if (v15 >= 4)
          {
            if (v8 > a1 + -2419200.0)
              *(_DWORD *)(a3 + 68) = ++v12;
            if (v8 > a1 + -604800.0)
              *(_DWORD *)(a3 + 64) = ++v11;
          }
        }
      }
      while (v8 < v10);
    }
  }
}

uint64_t sub_1014A2BA4(_QWORD *a1, double *a2, double a3)
{
  int v5;
  uint64_t result;
  double v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  __int128 v12;
  _BYTE v13[25];
  int v14;
  __int128 v15;
  int64x2_t v16;
  int64x2_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  char v26;
  int v27;
  char v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  double v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  double v36;

  v11 = 0;
  v14 = 0;
  v12 = 0u;
  memset(v13, 0, sizeof(v13));
  v15 = xmmword_101C158B0;
  v16 = vdupq_n_s64(0xFFF0000000000000);
  v17 = v16;
  v18 = 0xFFF0000000000000;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v25 = 1071225242;
  v26 = 0;
  v27 = 1116213084;
  v28 = 0;
  v5 = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)*a1 + 32))(*a1, &v11);
  result = 0;
  if (v5)
  {
    v7 = sub_101081D78(*(double *)&v12) + 604800.0;
    if (v7 > a3)
    {
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B99D8);
      v8 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349312;
        v34 = v12;
        v35 = 2050;
        v36 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Insufficient time since first bout (%{public}.2f). Retrying on %{public}.2f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021B99D8);
        v29 = 134349312;
        v30 = v12;
        v31 = 2050;
        v32 = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "Insufficient time since first bout (%{public}.2f). Retrying on %{public}.2f", &v29, 22);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLMobility::WalkingSteadinessClassifier::isInsufficientTimeSinceFirstBout(CFAbsoluteTime, CFAbsoluteTime &) const", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      *a2 = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1014A2E2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4;
  double v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  double v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  double v19;

  v4 = a3[1];
  if (v4 != *a3)
  {
    sub_1014A7E18(*a3, v4, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a3) >> 3)), 1);
    v6 = *(double *)(a3[1] - 16);
    if (*(double *)(a2 + 72) < v6 + 604800.0)
    {
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B99D8);
      v7 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_ERROR))
      {
        v8 = *(_QWORD *)(a2 + 72);
        *(_DWORD *)buf = 134349312;
        v17 = v8;
        v18 = 2050;
        v19 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "SteadinessClassifier unable to classify, insufficient time since previous steadiness endTime, classificationTime=%{public}.2f, previousSteadinessEndTime=%{public}.2f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021B99D8);
        v9 = *(_QWORD *)(a2 + 72);
        v12 = 134349312;
        v13 = v9;
        v14 = 2050;
        v15 = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 16, "SteadinessClassifier unable to classify, insufficient time since previous steadiness endTime, classificationTime=%{public}.2f, previousSteadinessEndTime=%{public}.2f", &v12, 22);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "void CLMobility::WalkingSteadinessClassifier::checkInsufficientTimeSinceSteadinessSample(WalkingSteadinessClassifier::Result &, std::vector<HealthKitQuantitySample>) const", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      *(_DWORD *)(a2 + 132) |= 2u;
      *(double *)(a2 + 96) = fmax(*(double *)(a2 + 96), v6 + 604800.0);
    }
  }
}

void sub_1014A3068(uint64_t a1, double *a2, double a3, double a4, double a5)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 81))
  {
    *a2 = *a2 * a4 + *(float *)(a1 + 32) * a3 + a5;
  }
  else
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021B99D8);
    v5 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Attempted to correct entropy model feature without height being set", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B99D8);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 16, "Attempted to correct entropy model feature without height being set", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLMobility::WalkingSteadinessClassifier::entropyModelFeatureHeightCorrection(double &, double, double, double) const", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

double sub_1014A3214(double a1, double a2)
{
  double v2;
  double v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v7;
  _BYTE v9[24];
  uint8_t buf[4];
  double v11;
  __int16 v12;
  uint64_t v13;

  v2 = a1 / (a2 * a2);
  v3 = 45.0;
  if (v2 <= 45.0)
  {
    if (v2 >= 15.0)
    {
      v3 = a1 / (a2 * a2);
      return v3 * 0.265899333 + -7.14436752;
    }
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021B99D8);
    v6 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134283777;
      v11 = v2;
      v12 = 2049;
      v13 = 0x402E000000000000;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BMI below min threshold, %{private}.2f, setting it to Min threshold, %{private}.2f", buf, 0x16u);
    }
    v3 = 15.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B99D8);
      *(_DWORD *)v9 = 134283777;
      *(double *)&v9[4] = v2;
      *(_WORD *)&v9[12] = 2049;
      *(_QWORD *)&v9[14] = 0x402E000000000000;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "BMI below min threshold, %{private}.2f, setting it to Min threshold, %{private}.2f", v9, 22, *(_OWORD *)v9, *(_QWORD *)&v9[16]);
      goto LABEL_19;
    }
  }
  else
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021B99D8);
    v4 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134283777;
      v11 = v2;
      v12 = 2049;
      v13 = 0x4046800000000000;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BMI above max threshold, %{private}.2f, setting it to Max threshold, %{private}.2f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B99D8);
      *(_DWORD *)v9 = 134283777;
      *(double *)&v9[4] = v2;
      *(_WORD *)&v9[12] = 2049;
      *(_QWORD *)&v9[14] = 0x4046800000000000;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "BMI above max threshold, %{private}.2f, setting it to Max threshold, %{private}.2f", v9, 22, *(_OWORD *)v9, *(_QWORD *)&v9[16]);
LABEL_19:
      v7 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "static double CLMobility::WalkingSteadinessClassifier::doubleSupportBMIBiasCorrection(double, double)", "%s\n", v5);
      if (v7 != buf)
        free(v7);
    }
  }
  return v3 * 0.265899333 + -7.14436752;
}

void sub_1014A352C(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>)
{
  NSObject *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  _BOOL4 v27;
  _BOOL4 v28;
  double v29;
  _BOOL4 v30;
  _BOOL4 v31;
  int v32;
  int v34;
  NSObject *v35;
  const char *v36;
  char *v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  double v48;
  NSObject *v49;
  unsigned int v50;
  int v51;
  double v52;
  NSObject *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  char *v67;
  uint64_t v68;
  const char *v69;
  char *v70;
  const char *v71;
  char *v72;
  const char *v73;
  char *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  void *__p;
  void *v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  int v86;
  void *v87;
  void *v88;
  uint64_t v89;
  int v90;
  _BYTE v91[38];
  __int16 v92;
  _BOOL4 v93;
  __int16 v94;
  _BOOL4 v95;
  __int16 v96;
  _BOOL4 v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  double v109;
  _BYTE buf[42];
  __int16 v111;
  _BOOL4 v112;
  __int16 v113;
  _BOOL4 v114;
  __int16 v115;
  _BOOL4 v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  double v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;

  *(_WORD *)a5 = 0;
  *(_BYTE *)(a5 + 2) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 31) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = 0;
  *(_DWORD *)(a5 + 56) = 0;
  *(_QWORD *)(a5 + 72) = 0;
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 64) = 0;
  if (*a1 != a1[1])
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021B99D8);
    v12 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
    {
      v13 = a1[1];
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a1) >> 3);
      v15 = *(_QWORD *)*a1;
      v16 = *(_QWORD *)(v13 - 16);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v15;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[SteadinessEvent] Evaluating %ld sample(s) from (%.2f->%.2f)", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B99D8);
      v62 = a1[1];
      v63 = 0xAAAAAAAAAAAAAAABLL * ((v62 - *a1) >> 3);
      v64 = *(_QWORD *)*a1;
      v65 = *(_QWORD *)(v62 - 16);
      v90 = 134218496;
      *(_QWORD *)v91 = v63;
      *(_WORD *)&v91[8] = 2048;
      *(_QWORD *)&v91[10] = v64;
      *(_WORD *)&v91[18] = 2048;
      *(_QWORD *)&v91[20] = v65;
      LODWORD(v75) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "[SteadinessEvent] Evaluating %ld sample(s) from (%.2f->%.2f)", &v90, v75, v77);
      v67 = (char *)v66;
      sub_100512490("Generic", 1, 0, 2, "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, const HealthKitPregnancyState) const", "%s\n", v66);
      if (v67 != buf)
        free(v67);
    }
    v17 = a1[1];
    v18 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a1) >> 3));
    if (v17 == *a1)
      v19 = 0;
    else
      v19 = v18;
    sub_1014AA138(*a1, v17, v19, 1);
    v20 = *a1;
    v21 = a1[1];
    v22 = *(double *)(v21 - 16);
    v87 = 0;
    v88 = 0;
    v89 = 0;
    for (*(_QWORD *)buf = &v87; v20 != v21; v20 += 24)
    {
      if (*(double *)(v20 + 8) >= v22 + -3628800.0 + 0.0001)
        sub_1014AAC54((void ***)buf, (__int128 *)v20);
    }
    sub_1014A430C((double **)&v87, (uint64_t)&v83);
    v25 = sub_1014A43F0(v23, a2);
    v26 = v24;
    if (v24 <= 0.0 || v22 >= v24 + 7862400.0 + -0.0001)
      v27 = v22 < v25 + 2419200.0 + -0.0001 && v25 > 0.0;
    else
      v27 = 1;
    *(_BYTE *)(a5 + 33) = v27;
    v28 = v22 < v25 + 7862400.0 + -0.0001 && v25 > 0.0;
    *(_BYTE *)(a5 + 32) = v28;
    v29 = vabdd_f64(a6, v22);
    *(_BYTE *)(a5 + 34) = v29 < 1209600.0;
    v30 = *(_BYTE *)a4 && v22 - *(double *)(a4 + 8) > 16934400.0 && v84 + v85 >= 604800.0;
    v31 = 0;
    v32 = !v27;
    if (v29 < 1209600.0 && !v28 && v32 != 0)
    {
      v34 = v84 + v85 >= 2419200.0 || v30;
      v31 = v34 == 1 && v86 == 2;
    }
    if (v29 >= 1209600.0)
      v32 = 0;
    if (v32 == 1 && (v85 >= 2419200.0 ? (v38 = 1) : (v38 = v30), v38 == 1))
    {
      HIDWORD(v76) = 0;
      v39 = v86 == 3;
      if (v24 > 0.0 && v86 == 3)
      {
        __p = 0;
        v81 = 0;
        v82 = 0;
        v40 = *a1;
        v41 = a1[1];
        *(_QWORD *)buf = &__p;
        while (v40 != v41)
        {
          if (*(double *)(v40 + 8) >= v26)
            sub_1014AAC54((void ***)buf, (__int128 *)v40);
          v40 += 24;
        }
        sub_1014A430C((double **)&__p, (uint64_t)&v77);
        v52 = v77;
        HIDWORD(v76) = v77 < 4838400.0;
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021B99D8);
        v53 = qword_10229FC48;
        if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)&buf[4] = v52 < 4838400.0;
          *(_WORD *)&buf[8] = 2048;
          *(double *)&buf[10] = v52;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v79;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v78;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "[SteadinessEvent] EvaluateRepeatVeryLow: isRepeatVeryLow,%d,durationOK,%.2f,durationVeryLow,%.2f,durationLow,%.2f", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC40 != -1)
            dispatch_once(&qword_10229FC40, &stru_1021B99D8);
          v90 = 67109888;
          *(_DWORD *)v91 = v52 < 4838400.0;
          *(_WORD *)&v91[4] = 2048;
          *(double *)&v91[6] = v52;
          *(_WORD *)&v91[14] = 2048;
          *(_QWORD *)&v91[16] = v79;
          *(_WORD *)&v91[24] = 2048;
          *(double *)&v91[26] = v78;
          LODWORD(v76) = 38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "[SteadinessEvent] EvaluateRepeatVeryLow: isRepeatVeryLow,%d,durationOK,%.2f,durationVeryLow,%.2f,durationLow,%.2f", &v90, v76, v77, v78);
          v74 = (char *)v73;
          sub_100512490("Generic", 1, 0, 2, "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, const HealthKitPregnancyState) const", "%s\n", v73);
          if (v74 != buf)
            free(v74);
        }
        if (__p)
        {
          v81 = __p;
          operator delete(__p);
        }
        v39 = 1;
      }
    }
    else
    {
      v39 = 0;
      HIDWORD(v76) = 0;
    }
    if (v25 > 0.0 && v31)
    {
      __p = 0;
      v81 = 0;
      v82 = 0;
      v44 = *a1;
      v43 = a1[1];
      *(_QWORD *)buf = &__p;
      while (v44 != v43)
      {
        if (*(double *)(v44 + 8) >= v25)
          sub_1014AAC54((void ***)buf, (__int128 *)v44);
        v44 += 24;
      }
      sub_1014A430C((double **)&__p, (uint64_t)&v77);
      v48 = v77;
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B99D8);
      v49 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = v48 < 4838400.0;
        *(_WORD *)&buf[8] = 2048;
        *(double *)&buf[10] = v48;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v79;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v78;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "[SteadinessEvent] EvaluateRepeatLow: isRepeatLow,%d,durationOK,%.2f,durationVeryLow,%.2f,durationLow,%.2f", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021B99D8);
        v90 = 67109888;
        *(_DWORD *)v91 = v48 < 4838400.0;
        *(_WORD *)&v91[4] = 2048;
        *(double *)&v91[6] = v48;
        *(_WORD *)&v91[14] = 2048;
        *(_QWORD *)&v91[16] = v79;
        *(_WORD *)&v91[24] = 2048;
        *(double *)&v91[26] = v78;
        LODWORD(v76) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "[SteadinessEvent] EvaluateRepeatLow: isRepeatLow,%d,durationOK,%.2f,durationVeryLow,%.2f,durationLow,%.2f", &v90, v76, v77, v78);
        v72 = (char *)v71;
        sub_100512490("Generic", 1, 0, 2, "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, const HealthKitPregnancyState) const", "%s\n", v71);
        if (v72 != buf)
          free(v72);
      }
      if (__p)
      {
        v81 = __p;
        operator delete(__p);
      }
      if (v48 < 4838400.0)
      {
        if (v30)
          v50 = 7;
        else
          v50 = 3;
        *(double *)(a5 + 40) = v22;
        *(double *)(a5 + 48) = v22;
        v45 = 1;
        goto LABEL_104;
      }
    }
    else if (!v31)
    {
      if (!v39)
      {
        v50 = 0;
        v51 = 0;
        v45 = 0;
        goto LABEL_105;
      }
      *(double *)(a5 + 40) = v22;
      *(double *)(a5 + 48) = v22;
      v45 = 0;
      if (HIDWORD(v76))
      {
        v46 = 4;
        v47 = 8;
      }
      else
      {
        v46 = 2;
        v47 = 6;
      }
      if (v30)
        v50 = v47;
      else
        v50 = v46;
LABEL_104:
      *(_DWORD *)(a5 + 56) = v50;
      v51 = 1;
      *(_BYTE *)a5 = 1;
LABEL_105:
      v54 = v83;
      v55 = v84;
      v56 = v84 / 3628800.0 * 100.0;
      *(double *)(a5 + 8) = v83 / 3628800.0 * 100.0;
      *(double *)(a5 + 16) = v56;
      v57 = v85;
      v58 = v85 / 3628800.0 * 100.0;
      *(double *)(a5 + 24) = v58;
      v59 = v54 + v55 + v57;
      *(double *)(a5 + 64) = v59;
      *(_BYTE *)(a5 + 1) = a3;
      if (v51 && (a3 & 1) != 0)
      {
        *(_BYTE *)(a5 + 2) = 1;
        *(double *)(a5 + 72) = v25;
        *(double *)(a5 + 80) = v26;
        if (v39)
        {
          *(double *)(a5 + 80) = v22;
          v26 = v22;
        }
        else if (v31)
        {
          *(double *)(a5 + 72) = v22;
          v25 = v22;
        }
      }
      else
      {
        *(double *)(a5 + 72) = v25;
        *(double *)(a5 + 80) = v26;
      }
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_1021B99D8);
      v60 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
      {
        v61 = v50;
        *(_DWORD *)buf = 134548737;
        if (!v51)
          v61 = 0;
        *(_QWORD *)&buf[4] = v61;
        *(_WORD *)&buf[12] = 2049;
        *(double *)&buf[14] = v56;
        *(_WORD *)&buf[22] = 2049;
        *(double *)&buf[24] = v58;
        *(_WORD *)&buf[32] = 2049;
        *(_QWORD *)&buf[34] = v86;
        v111 = 1025;
        v112 = v28;
        v113 = 1025;
        v114 = v27;
        v115 = 1026;
        v116 = v29 < 1209600.0;
        v117 = 1025;
        v118 = a3;
        v119 = 1025;
        v120 = HIDWORD(v76);
        v121 = 1025;
        v122 = v45;
        v123 = 2049;
        v124 = v59;
        v125 = 2049;
        v126 = v25;
        v127 = 2049;
        v128 = v26;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "[SteadinessEvent] steadinessEvent, %{sensitive}ld, percentLow, %{private}.2f, percentVeryLow, %{private}.2f, mostRecentClassification, %{private}ld, isBlockoutPeriodLow, %{private}d, isBlockoutPeriodVeryLow, %{private}d, isSampleRecent, %{public}d, userOnboardedNotifications, %{private}d, isRepeatVeryLow, %{private}d, isRepeatLow, %{private}d, totalValidDuration, %{private}.2f, mostRecentLowNotificationTime, %{private}.2f, mostRecentVeryLowNotificationTime, %{private}.2f", buf, 0x6Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021B99D8);
        v68 = v50;
        if (!v51)
          v68 = 0;
        v90 = 134548737;
        *(_QWORD *)v91 = v68;
        *(_WORD *)&v91[8] = 2049;
        *(double *)&v91[10] = v56;
        *(_WORD *)&v91[18] = 2049;
        *(double *)&v91[20] = v58;
        *(_WORD *)&v91[28] = 2049;
        *(_QWORD *)&v91[30] = v86;
        v92 = 1025;
        v93 = v28;
        v94 = 1025;
        v95 = v27;
        v96 = 1026;
        v97 = v29 < 1209600.0;
        v98 = 1025;
        v99 = a3;
        v100 = 1025;
        v101 = HIDWORD(v76);
        v102 = 1025;
        v103 = v45;
        v104 = 2049;
        v105 = v59;
        v106 = 2049;
        v107 = v25;
        v108 = 2049;
        v109 = v26;
        LODWORD(v76) = 108;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "[SteadinessEvent] steadinessEvent, %{sensitive}ld, percentLow, %{private}.2f, percentVeryLow, %{private}.2f, mostRecentClassification, %{private}ld, isBlockoutPeriodLow, %{private}d, isBlockoutPeriodVeryLow, %{private}d, isSampleRecent, %{public}d, userOnboardedNotifications, %{private}d, isRepeatVeryLow, %{private}d, isRepeatLow, %{private}d, totalValidDuration, %{private}.2f, mostRecentLowNotificationTime, %{private}.2f, mostRecentVeryLowNotificationTime, %{private}.2f", &v90, *(_QWORD *)&v76);
        v70 = (char *)v69;
        sub_100512490("Generic", 1, 0, 2, "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, const HealthKitPregnancyState) const", "%s\n", v69);
        if (v70 != buf)
          free(v70);
      }
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      return;
    }
    v45 = 0;
    if (v30)
      v50 = 5;
    else
      v50 = 1;
    *(double *)(a5 + 40) = v22;
    *(double *)(a5 + 48) = v22;
    goto LABEL_104;
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_1021B99D8);
  v35 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "[SteadinessEvent] No steadiness samples, no event detected", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021B99D8);
    LOWORD(v90) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "[SteadinessEvent] No steadiness samples, no event detected", &v90, 2);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 2, "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, const HealthKitPregnancyState) const", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
}

void sub_1014A42AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_1014A430C(double **a1@<X1>, uint64_t a2@<X8>)
{
  double *v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  uint64_t v13;
  int v14;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 1;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = 0.0;
    v6 = 0.0;
    v7 = 0.0;
    v8 = 0.0;
    do
    {
      if (sub_1010623A8((uint64_t)&v13, v3[2] * 100.0))
      {
        v10 = *v3;
        v9 = v3[1];
        if (*v3 < v7)
          v10 = v7;
        v11 = v9 - v10;
        v12 = v14;
        switch(v14)
        {
          case 1:
            v8 = v11 + v8;
            *(double *)a2 = v8;
            break;
          case 3:
            v6 = v11 + v6;
            *(double *)(a2 + 16) = v6;
            break;
          case 2:
            v5 = v11 + v5;
            *(double *)(a2 + 8) = v5;
            break;
        }
        *(_DWORD *)(a2 + 24) = v12;
        v7 = v9;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
}

double sub_1014A43F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  v3 = *a2;
  v2 = a2[1];
  if (*a2 == v2)
    return 0.0;
  v4 = 0.0;
  v5 = 0.0;
  do
  {
    switch(*(_DWORD *)(v3 + 16))
    {
      case 1:
      case 3:
        if (*(double *)(v3 + 8) > v4)
          v4 = *(double *)(v3 + 8);
        break;
      case 2:
      case 4:
        if (*(double *)(v3 + 8) > v5)
          v5 = *(double *)(v3 + 8);
        break;
      default:
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_1021B99D8);
        v6 = qword_10229FC48;
        if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_FAULT))
        {
          v7 = *(_QWORD *)(v3 + 16);
          *(_DWORD *)buf = 134545665;
          v16 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Unexpected event type value: %{sensitive}ld", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC40 != -1)
            dispatch_once(&qword_10229FC40, &stru_1021B99D8);
          v8 = *(_QWORD *)(v3 + 16);
          v13 = 134545665;
          v14 = v8;
          LODWORD(v12) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 17, "Unexpected event type value: %{sensitive}ld", &v13, v12);
          v10 = (uint8_t *)v9;
          sub_100512490("Generic", 1, 0, 0, "std::pair<CFAbsoluteTime, CFAbsoluteTime> CLMobility::WalkingSteadinessClassifier::mostRecentLowAndVeryLowEventTimes(const std::vector<HealthKitCategorySample> &) const", "%s\n", v9);
          if (v10 != buf)
            free(v10);
        }
        break;
    }
    v3 += 24;
  }
  while (v3 != v2);
  return v4;
}

double sub_1014A4650@<D0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  double v6;
  double v7;
  double v8;
  double result;

  v6 = sub_101081D78(a3);
  v7 = sub_101081D78(a2);
  v8 = v7 + -31536000.0;
  *a1 = v7 + -31536000.0;
  a1[1] = a3;
  a1[2] = v7 + -31536000.0;
  a1[3] = v6;
  result = v7 + -2592000.0;
  a1[4] = result;
  a1[5] = v6;
  a1[6] = result;
  a1[7] = v6;
  a1[8] = v8;
  a1[9] = a3;
  return result;
}

void sub_1014A46C4(id a1)
{
  qword_10229FC48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_1014A46F0(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  unint64_t v30;
  __int128 *v31;
  __int128 *v32;
  double v33;
  __int128 *v34;
  double v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  double v47;
  double v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  unint64_t v63;
  double v64;
  __int128 *v65;
  __int128 *v66;
  double v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  double v78;
  double v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 *v100;
  __int128 *v101;
  __int128 *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  BOOL v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 *v133;
  BOOL v135;
  uint64_t v136;
  unint64_t v137;
  __int128 *v138;
  double v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  double *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  int64_t v152;
  int64_t v153;
  int64_t v154;
  uint64_t v155;
  unint64_t v156;
  double v157;
  unint64_t v158;
  uint64_t v159;
  _OWORD *v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _OWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  unint64_t v201;
  double v202;
  uint64_t v203;
  _OWORD *v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 *v220;
  double v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  _BYTE v264[32];
  _BYTE v265[32];
  _BYTE v266[32];
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  _BYTE v406[32];
  _BYTE v407[32];
  __int128 v408;
  _BYTE v409[32];
  _BYTE v410[32];
  _BYTE v411[32];
  _BYTE v412[32];
  _BYTE v413[32];
  _BYTE v414[32];
  _BYTE v415[32];
  _BYTE v416[32];
  _BYTE v417[32];
  _BYTE v418[32];

double sub_1014A58C8(__int128 *a1, __int128 *a2, __int128 *a3)
{
  double result;
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[32];
  _BYTE v104[32];
  _BYTE v105[32];
  _BYTE v106[32];

  result = *((double *)a2 + 1);
  v4 = *((double *)a3 + 1);
  if (result >= *((double *)a1 + 1))
  {
    if (v4 < result)
    {
      v96 = a2[10];
      v100 = a2[11];
      *(_OWORD *)v104 = a2[12];
      *(_OWORD *)&v104[16] = a2[13];
      v80 = a2[6];
      v84 = a2[7];
      v88 = a2[8];
      v92 = a2[9];
      v64 = a2[2];
      v68 = a2[3];
      v72 = a2[4];
      v76 = a2[5];
      v56 = *a2;
      v60 = a2[1];
      v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      v16 = a3[2];
      v17 = a3[3];
      v18 = a3[5];
      a2[4] = a3[4];
      a2[5] = v18;
      a2[2] = v16;
      a2[3] = v17;
      v19 = a3[6];
      v20 = a3[7];
      v21 = a3[9];
      a2[8] = a3[8];
      a2[9] = v21;
      a2[6] = v19;
      a2[7] = v20;
      v22 = a3[10];
      v23 = a3[11];
      v24 = a3[12];
      *(__int128 *)((char *)a2 + 205) = *(__int128 *)((char *)a3 + 205);
      a2[11] = v23;
      a2[12] = v24;
      a2[10] = v22;
      a3[10] = v96;
      a3[11] = v100;
      a3[12] = *(_OWORD *)v104;
      *(__int128 *)((char *)a3 + 205) = *(_OWORD *)&v104[13];
      a3[6] = v80;
      a3[7] = v84;
      a3[8] = v88;
      a3[9] = v92;
      a3[2] = v64;
      a3[3] = v68;
      a3[4] = v72;
      a3[5] = v76;
      *a3 = v56;
      a3[1] = v60;
      result = *((double *)a2 + 1);
      if (result < *((double *)a1 + 1))
      {
        v97 = a1[10];
        v101 = a1[11];
        *(_OWORD *)v105 = a1[12];
        *(_OWORD *)&v105[16] = a1[13];
        v81 = a1[6];
        v85 = a1[7];
        v89 = a1[8];
        v93 = a1[9];
        v65 = a1[2];
        v69 = a1[3];
        v73 = a1[4];
        v77 = a1[5];
        v57 = *a1;
        v61 = a1[1];
        v25 = a2[1];
        *a1 = *a2;
        a1[1] = v25;
        v26 = a2[2];
        v27 = a2[3];
        v28 = a2[5];
        a1[4] = a2[4];
        a1[5] = v28;
        a1[2] = v26;
        a1[3] = v27;
        v29 = a2[6];
        v30 = a2[7];
        v31 = a2[9];
        a1[8] = a2[8];
        a1[9] = v31;
        a1[6] = v29;
        a1[7] = v30;
        v32 = a2[10];
        v33 = a2[11];
        v34 = a2[12];
        *(__int128 *)((char *)a1 + 205) = *(__int128 *)((char *)a2 + 205);
        a1[11] = v33;
        a1[12] = v34;
        a1[10] = v32;
        a2[10] = v97;
        a2[11] = v101;
        a2[12] = *(_OWORD *)v105;
        *(__int128 *)((char *)a2 + 205) = *(_OWORD *)&v105[13];
        a2[6] = v81;
        a2[7] = v85;
        a2[8] = v89;
        a2[9] = v93;
        a2[2] = v65;
        a2[3] = v69;
        a2[4] = v73;
        a2[5] = v77;
        result = *(double *)&v57;
        *a2 = v57;
        a2[1] = v61;
      }
    }
  }
  else
  {
    if (v4 >= result)
    {
      v98 = a1[10];
      v102 = a1[11];
      *(_OWORD *)v106 = a1[12];
      *(_OWORD *)&v106[16] = a1[13];
      v82 = a1[6];
      v86 = a1[7];
      v90 = a1[8];
      v94 = a1[9];
      v66 = a1[2];
      v70 = a1[3];
      v74 = a1[4];
      v78 = a1[5];
      v58 = *a1;
      v62 = a1[1];
      v35 = a2[1];
      *a1 = *a2;
      a1[1] = v35;
      v36 = a2[2];
      v37 = a2[3];
      v38 = a2[5];
      a1[4] = a2[4];
      a1[5] = v38;
      a1[2] = v36;
      a1[3] = v37;
      v39 = a2[6];
      v40 = a2[7];
      v41 = a2[9];
      a1[8] = a2[8];
      a1[9] = v41;
      a1[6] = v39;
      a1[7] = v40;
      v42 = a2[10];
      v43 = a2[11];
      v44 = a2[12];
      *(__int128 *)((char *)a1 + 205) = *(__int128 *)((char *)a2 + 205);
      a1[11] = v43;
      a1[12] = v44;
      a1[10] = v42;
      a2[10] = v98;
      a2[11] = v102;
      a2[12] = *(_OWORD *)v106;
      *(__int128 *)((char *)a2 + 205) = *(_OWORD *)&v106[13];
      a2[6] = v82;
      a2[7] = v86;
      a2[8] = v90;
      a2[9] = v94;
      a2[2] = v66;
      a2[3] = v70;
      a2[4] = v74;
      a2[5] = v78;
      *a2 = v58;
      a2[1] = v62;
      result = *((double *)a3 + 1);
      if (result >= *((double *)a2 + 1))
        return result;
      v95 = a2[10];
      v99 = a2[11];
      *(_OWORD *)v103 = a2[12];
      *(_OWORD *)&v103[16] = a2[13];
      v79 = a2[6];
      v83 = a2[7];
      v87 = a2[8];
      v91 = a2[9];
      v63 = a2[2];
      v67 = a2[3];
      v71 = a2[4];
      v75 = a2[5];
      v55 = *a2;
      v59 = a2[1];
      v45 = a3[1];
      *a2 = *a3;
      a2[1] = v45;
      v46 = a3[2];
      v47 = a3[3];
      v48 = a3[5];
      a2[4] = a3[4];
      a2[5] = v48;
      a2[2] = v46;
      a2[3] = v47;
      v49 = a3[6];
      v50 = a3[7];
      v51 = a3[9];
      a2[8] = a3[8];
      a2[9] = v51;
      a2[6] = v49;
      a2[7] = v50;
      v52 = a3[10];
      v53 = a3[11];
      v54 = a3[12];
      *(__int128 *)((char *)a2 + 205) = *(__int128 *)((char *)a3 + 205);
      a2[11] = v53;
      a2[12] = v54;
      a2[10] = v52;
    }
    else
    {
      v95 = a1[10];
      v99 = a1[11];
      *(_OWORD *)v103 = a1[12];
      *(_OWORD *)&v103[16] = a1[13];
      v79 = a1[6];
      v83 = a1[7];
      v87 = a1[8];
      v91 = a1[9];
      v63 = a1[2];
      v67 = a1[3];
      v71 = a1[4];
      v75 = a1[5];
      v55 = *a1;
      v59 = a1[1];
      v5 = a3[1];
      *a1 = *a3;
      a1[1] = v5;
      v6 = a3[2];
      v7 = a3[3];
      v8 = a3[5];
      a1[4] = a3[4];
      a1[5] = v8;
      a1[2] = v6;
      a1[3] = v7;
      v9 = a3[6];
      v10 = a3[7];
      v11 = a3[9];
      a1[8] = a3[8];
      a1[9] = v11;
      a1[6] = v9;
      a1[7] = v10;
      v12 = a3[10];
      v13 = a3[11];
      v14 = a3[12];
      *(__int128 *)((char *)a1 + 205) = *(__int128 *)((char *)a3 + 205);
      a1[11] = v13;
      a1[12] = v14;
      a1[10] = v12;
    }
    a3[10] = v95;
    a3[11] = v99;
    a3[12] = *(_OWORD *)v103;
    *(__int128 *)((char *)a3 + 205) = *(_OWORD *)&v103[13];
    a3[6] = v79;
    a3[7] = v83;
    a3[8] = v87;
    a3[9] = v91;
    a3[2] = v63;
    a3[3] = v67;
    a3[4] = v71;
    a3[5] = v75;
    result = *(double *)&v55;
    *a3 = v55;
    a3[1] = v59;
  }
  return result;
}

BOOL sub_1014A5C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 *v31;
  __int128 *v32;
  __int128 *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  BOOL v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _BYTE v130[32];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _BYTE v135[32];
  _BYTE v136[32];
  _BYTE v137[32];
  _BYTE v138[32];
  _BYTE v139[32];

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 216) < *(double *)(a1 + 8))
      {
        v123 = *(_OWORD *)(a1 + 160);
        v129 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)v135 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v135[16] = *(_OWORD *)(a1 + 208);
        v99 = *(_OWORD *)(a1 + 96);
        v105 = *(_OWORD *)(a1 + 112);
        v111 = *(_OWORD *)(a1 + 128);
        v117 = *(_OWORD *)(a1 + 144);
        v75 = *(_OWORD *)(a1 + 32);
        v81 = *(_OWORD *)(a1 + 48);
        v87 = *(_OWORD *)(a1 + 64);
        v93 = *(_OWORD *)(a1 + 80);
        v63 = *(_OWORD *)a1;
        v69 = *(_OWORD *)(a1 + 16);
        v6 = *(_OWORD *)(a2 - 208);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 224);
        *(_OWORD *)(a1 + 16) = v6;
        v7 = *(_OWORD *)(a2 - 192);
        v8 = *(_OWORD *)(a2 - 176);
        v9 = *(_OWORD *)(a2 - 144);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 160);
        *(_OWORD *)(a1 + 80) = v9;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 48) = v8;
        v10 = *(_OWORD *)(a2 - 128);
        v11 = *(_OWORD *)(a2 - 112);
        v12 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 144) = v12;
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a1 + 112) = v11;
        v13 = *(_OWORD *)(a2 - 64);
        v14 = *(_OWORD *)(a2 - 48);
        v15 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(a1 + 176) = v14;
        *(_OWORD *)(a1 + 192) = v15;
        *(_OWORD *)(a1 + 160) = v13;
        *(_OWORD *)(a2 - 64) = v123;
        *(_OWORD *)(a2 - 48) = v129;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v135;
        *(_OWORD *)(a2 - 19) = *(_OWORD *)&v135[13];
        *(_OWORD *)(a2 - 128) = v99;
        *(_OWORD *)(a2 - 112) = v105;
        *(_OWORD *)(a2 - 96) = v111;
        *(_OWORD *)(a2 - 80) = v117;
        *(_OWORD *)(a2 - 192) = v75;
        *(_OWORD *)(a2 - 176) = v81;
        *(_OWORD *)(a2 - 160) = v87;
        *(_OWORD *)(a2 - 144) = v93;
        *(_OWORD *)(a2 - 224) = v63;
        *(_OWORD *)(a2 - 208) = v69;
      }
      return result;
    case 3:
      sub_1014A58C8((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a2 - 224));
      return 1;
    case 4:
      sub_1014A62A8(a1, a1 + 224, a1 + 448, a2 - 224);
      return 1;
    case 5:
      v31 = (__int128 *)(a1 + 224);
      v32 = (__int128 *)(a1 + 448);
      v33 = (__int128 *)(a1 + 672);
      sub_1014A62A8(a1, a1 + 224, a1 + 448, a1 + 672);
      if (*(double *)(a2 - 216) >= *(double *)(a1 + 680))
        return 1;
      v125 = *(_OWORD *)(a1 + 832);
      v131 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)v136 = *(_OWORD *)(a1 + 864);
      *(_OWORD *)&v136[16] = *(_OWORD *)(a1 + 880);
      v101 = *(_OWORD *)(a1 + 768);
      v107 = *(_OWORD *)(a1 + 784);
      v113 = *(_OWORD *)(a1 + 800);
      v119 = *(_OWORD *)(a1 + 816);
      v77 = *(_OWORD *)(a1 + 704);
      v83 = *(_OWORD *)(a1 + 720);
      v89 = *(_OWORD *)(a1 + 736);
      v95 = *(_OWORD *)(a1 + 752);
      v65 = *v33;
      v71 = *(_OWORD *)(a1 + 688);
      v34 = *(_OWORD *)(a2 - 208);
      *v33 = *(_OWORD *)(a2 - 224);
      *(_OWORD *)(a1 + 688) = v34;
      v35 = *(_OWORD *)(a2 - 192);
      v36 = *(_OWORD *)(a2 - 176);
      v37 = *(_OWORD *)(a2 - 144);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 - 160);
      *(_OWORD *)(a1 + 752) = v37;
      *(_OWORD *)(a1 + 704) = v35;
      *(_OWORD *)(a1 + 720) = v36;
      v38 = *(_OWORD *)(a2 - 128);
      v39 = *(_OWORD *)(a2 - 112);
      v40 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 816) = v40;
      *(_OWORD *)(a1 + 768) = v38;
      *(_OWORD *)(a1 + 784) = v39;
      v41 = *(_OWORD *)(a2 - 64);
      v42 = *(_OWORD *)(a2 - 48);
      v43 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 877) = *(_OWORD *)(a2 - 19);
      *(_OWORD *)(a1 + 848) = v42;
      *(_OWORD *)(a1 + 864) = v43;
      *(_OWORD *)(a1 + 832) = v41;
      *(_OWORD *)(a2 - 64) = v125;
      *(_OWORD *)(a2 - 48) = v131;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v136;
      *(_OWORD *)(a2 - 19) = *(_OWORD *)&v136[13];
      *(_OWORD *)(a2 - 128) = v101;
      *(_OWORD *)(a2 - 112) = v107;
      *(_OWORD *)(a2 - 96) = v113;
      *(_OWORD *)(a2 - 80) = v119;
      *(_OWORD *)(a2 - 192) = v77;
      *(_OWORD *)(a2 - 176) = v83;
      *(_OWORD *)(a2 - 160) = v89;
      *(_OWORD *)(a2 - 144) = v95;
      *(_OWORD *)(a2 - 224) = v65;
      *(_OWORD *)(a2 - 208) = v71;
      if (*(double *)(a1 + 680) >= *(double *)(a1 + 456))
        return 1;
      v126 = *(_OWORD *)(a1 + 608);
      v132 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)v137 = *(_OWORD *)(a1 + 640);
      *(_OWORD *)&v137[16] = *(_OWORD *)(a1 + 656);
      v102 = *(_OWORD *)(a1 + 544);
      v108 = *(_OWORD *)(a1 + 560);
      v114 = *(_OWORD *)(a1 + 576);
      v120 = *(_OWORD *)(a1 + 592);
      v78 = *(_OWORD *)(a1 + 480);
      v84 = *(_OWORD *)(a1 + 496);
      v90 = *(_OWORD *)(a1 + 512);
      v96 = *(_OWORD *)(a1 + 528);
      v66 = *v32;
      v72 = *(_OWORD *)(a1 + 464);
      v44 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a1 + 832);
      *(_OWORD *)(a1 + 624) = v44;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 864);
      *(_OWORD *)(a1 + 653) = *(_OWORD *)(a1 + 877);
      v45 = *(_OWORD *)(a1 + 784);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 768);
      *(_OWORD *)(a1 + 560) = v45;
      v46 = *(_OWORD *)(a1 + 816);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 800);
      *(_OWORD *)(a1 + 592) = v46;
      v47 = *(_OWORD *)(a1 + 720);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a1 + 496) = v47;
      v48 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 736);
      *(_OWORD *)(a1 + 528) = v48;
      v49 = *(_OWORD *)(a1 + 688);
      *v32 = *v33;
      *(_OWORD *)(a1 + 464) = v49;
      *(_OWORD *)(a1 + 832) = v126;
      *(_OWORD *)(a1 + 848) = v132;
      *(_OWORD *)(a1 + 864) = *(_OWORD *)v137;
      *(_OWORD *)(a1 + 877) = *(_OWORD *)&v137[13];
      *(_OWORD *)(a1 + 768) = v102;
      *(_OWORD *)(a1 + 784) = v108;
      *(_OWORD *)(a1 + 800) = v114;
      *(_OWORD *)(a1 + 816) = v120;
      *(_OWORD *)(a1 + 704) = v78;
      *(_OWORD *)(a1 + 720) = v84;
      *(_OWORD *)(a1 + 736) = v90;
      *(_OWORD *)(a1 + 752) = v96;
      v50 = *(double *)(a1 + 456) < *(double *)(a1 + 232);
      *v33 = v66;
      *(_OWORD *)(a1 + 688) = v72;
      if (!v50)
        return 1;
      v127 = *(_OWORD *)(a1 + 384);
      v133 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)v138 = *(_OWORD *)(a1 + 416);
      *(_OWORD *)&v138[16] = *(_OWORD *)(a1 + 432);
      v103 = *(_OWORD *)(a1 + 320);
      v109 = *(_OWORD *)(a1 + 336);
      v115 = *(_OWORD *)(a1 + 352);
      v121 = *(_OWORD *)(a1 + 368);
      v79 = *(_OWORD *)(a1 + 256);
      v85 = *(_OWORD *)(a1 + 272);
      v91 = *(_OWORD *)(a1 + 288);
      v97 = *(_OWORD *)(a1 + 304);
      v67 = *v31;
      v73 = *(_OWORD *)(a1 + 240);
      v51 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 608);
      *(_OWORD *)(a1 + 400) = v51;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 429) = *(_OWORD *)(a1 + 653);
      v52 = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 336) = v52;
      v53 = *(_OWORD *)(a1 + 592);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 576);
      *(_OWORD *)(a1 + 368) = v53;
      v54 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 272) = v54;
      v55 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 304) = v55;
      v56 = *(_OWORD *)(a1 + 464);
      *v31 = *v32;
      *(_OWORD *)(a1 + 240) = v56;
      *(_OWORD *)(a1 + 608) = v127;
      *(_OWORD *)(a1 + 624) = v133;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)v138;
      *(_OWORD *)(a1 + 653) = *(_OWORD *)&v138[13];
      *(_OWORD *)(a1 + 544) = v103;
      *(_OWORD *)(a1 + 560) = v109;
      *(_OWORD *)(a1 + 576) = v115;
      *(_OWORD *)(a1 + 592) = v121;
      *(_OWORD *)(a1 + 480) = v79;
      *(_OWORD *)(a1 + 496) = v85;
      *(_OWORD *)(a1 + 512) = v91;
      *(_OWORD *)(a1 + 528) = v97;
      v50 = *(double *)(a1 + 232) < *(double *)(a1 + 8);
      *v32 = v67;
      *(_OWORD *)(a1 + 464) = v73;
      if (!v50)
        return 1;
      v128 = *(_OWORD *)(a1 + 160);
      v134 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)v139 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)&v139[16] = *(_OWORD *)(a1 + 208);
      v104 = *(_OWORD *)(a1 + 96);
      v110 = *(_OWORD *)(a1 + 112);
      v116 = *(_OWORD *)(a1 + 128);
      v122 = *(_OWORD *)(a1 + 144);
      v80 = *(_OWORD *)(a1 + 32);
      v86 = *(_OWORD *)(a1 + 48);
      v92 = *(_OWORD *)(a1 + 64);
      v98 = *(_OWORD *)(a1 + 80);
      v68 = *(_OWORD *)a1;
      v74 = *(_OWORD *)(a1 + 16);
      v57 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 176) = v57;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 205) = *(_OWORD *)(a1 + 429);
      v58 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 112) = v58;
      v59 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 144) = v59;
      v60 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 48) = v60;
      v61 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 80) = v61;
      v62 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)a1 = *v31;
      *(_OWORD *)(a1 + 16) = v62;
      *(_OWORD *)(a1 + 384) = v128;
      *(_OWORD *)(a1 + 400) = v134;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)v139;
      *(_OWORD *)(a1 + 429) = *(_OWORD *)&v139[13];
      *(_OWORD *)(a1 + 320) = v104;
      *(_OWORD *)(a1 + 336) = v110;
      *(_OWORD *)(a1 + 352) = v116;
      *(_OWORD *)(a1 + 368) = v122;
      *(_OWORD *)(a1 + 256) = v80;
      *(_OWORD *)(a1 + 272) = v86;
      *(_OWORD *)(a1 + 288) = v92;
      *(_OWORD *)(a1 + 304) = v98;
      result = 1;
      *v31 = v68;
      *(_OWORD *)(a1 + 240) = v74;
      return result;
    default:
      v16 = a1 + 448;
      sub_1014A58C8((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448));
      v17 = a1 + 672;
      if (a1 + 672 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    v20 = *(double *)(v17 + 8);
    if (v20 < *(double *)(v16 + 8))
    {
      v21 = *(_QWORD *)v17;
      v124 = *(_OWORD *)(v17 + 176);
      *(_OWORD *)v130 = *(_OWORD *)(v17 + 192);
      *(_OWORD *)&v130[16] = *(_OWORD *)(v17 + 208);
      v100 = *(_OWORD *)(v17 + 112);
      v106 = *(_OWORD *)(v17 + 128);
      v112 = *(_OWORD *)(v17 + 144);
      v118 = *(_OWORD *)(v17 + 160);
      v76 = *(_OWORD *)(v17 + 48);
      v82 = *(_OWORD *)(v17 + 64);
      v88 = *(_OWORD *)(v17 + 80);
      v94 = *(_OWORD *)(v17 + 96);
      v22 = v18;
      v64 = *(_OWORD *)(v17 + 16);
      v70 = *(_OWORD *)(v17 + 32);
      while (1)
      {
        v23 = a1 + v22;
        v24 = *(_OWORD *)(a1 + v22 + 624);
        *(_OWORD *)(v23 + 832) = *(_OWORD *)(a1 + v22 + 608);
        *(_OWORD *)(v23 + 848) = v24;
        *(_OWORD *)(v23 + 864) = *(_OWORD *)(a1 + v22 + 640);
        v25 = *(_OWORD *)(a1 + v22 + 560);
        *(_OWORD *)(v23 + 768) = *(_OWORD *)(a1 + v22 + 544);
        *(_OWORD *)(v23 + 784) = v25;
        v26 = *(_OWORD *)(a1 + v22 + 592);
        *(_OWORD *)(v23 + 800) = *(_OWORD *)(a1 + v22 + 576);
        *(_OWORD *)(v23 + 816) = v26;
        v27 = *(_OWORD *)(a1 + v22 + 496);
        *(_OWORD *)(v23 + 704) = *(_OWORD *)(a1 + v22 + 480);
        *(_OWORD *)(v23 + 720) = v27;
        v28 = *(_OWORD *)(a1 + v22 + 528);
        *(_OWORD *)(v23 + 736) = *(_OWORD *)(a1 + v22 + 512);
        *(_OWORD *)(v23 + 752) = v28;
        v29 = *(_OWORD *)(a1 + v22 + 464);
        *(_OWORD *)(v23 + 672) = *(_OWORD *)(a1 + v22 + 448);
        *(_OWORD *)(v23 + 688) = v29;
        *(_OWORD *)(a1 + v22 + 877) = *(_OWORD *)(a1 + v22 + 653);
        if (v22 == -448)
          break;
        v22 -= 224;
        if (v20 >= *(double *)(v23 + 232))
        {
          v30 = a1 + v22 + 672;
          goto LABEL_13;
        }
      }
      v30 = a1;
LABEL_13:
      *(_QWORD *)v30 = v21;
      *(double *)(v30 + 8) = v20;
      *(_OWORD *)(v30 + 176) = v124;
      *(_OWORD *)(v30 + 192) = *(_OWORD *)v130;
      *(_OWORD *)(v30 + 205) = *(_OWORD *)&v130[13];
      *(_OWORD *)(v30 + 112) = v100;
      *(_OWORD *)(v30 + 128) = v106;
      *(_OWORD *)(v30 + 144) = v112;
      *(_OWORD *)(v30 + 160) = v118;
      *(_OWORD *)(v30 + 48) = v76;
      *(_OWORD *)(v30 + 64) = v82;
      *(_OWORD *)(v30 + 80) = v88;
      *(_OWORD *)(v30 + 96) = v94;
      ++v19;
      *(_OWORD *)(v30 + 16) = v64;
      *(_OWORD *)(v30 + 32) = v70;
      if (v19 == 8)
        return v17 + 224 == a2;
    }
    v16 = v17;
    v18 += 224;
    v17 += 224;
    if (v17 == a2)
      return 1;
  }
}

double sub_1014A62A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[32];
  _BYTE v76[32];
  _BYTE v77[32];

  sub_1014A58C8((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  result = *(double *)(a4 + 8);
  if (result < *(double *)(a3 + 8))
  {
    v69 = *(_OWORD *)(a3 + 160);
    v72 = *(_OWORD *)(a3 + 176);
    *(_OWORD *)v75 = *(_OWORD *)(a3 + 192);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a3 + 208);
    v57 = *(_OWORD *)(a3 + 96);
    v60 = *(_OWORD *)(a3 + 112);
    v63 = *(_OWORD *)(a3 + 128);
    v66 = *(_OWORD *)(a3 + 144);
    v45 = *(_OWORD *)(a3 + 32);
    v48 = *(_OWORD *)(a3 + 48);
    v51 = *(_OWORD *)(a3 + 64);
    v54 = *(_OWORD *)(a3 + 80);
    v39 = *(_OWORD *)a3;
    v42 = *(_OWORD *)(a3 + 16);
    v9 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v9;
    v10 = *(_OWORD *)(a4 + 32);
    v11 = *(_OWORD *)(a4 + 48);
    v12 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 80) = v12;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a3 + 48) = v11;
    v13 = *(_OWORD *)(a4 + 96);
    v14 = *(_OWORD *)(a4 + 112);
    v15 = *(_OWORD *)(a4 + 144);
    *(_OWORD *)(a3 + 128) = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 144) = v15;
    *(_OWORD *)(a3 + 96) = v13;
    *(_OWORD *)(a3 + 112) = v14;
    v16 = *(_OWORD *)(a4 + 160);
    v17 = *(_OWORD *)(a4 + 176);
    v18 = *(_OWORD *)(a4 + 192);
    *(_OWORD *)(a3 + 205) = *(_OWORD *)(a4 + 205);
    *(_OWORD *)(a3 + 176) = v17;
    *(_OWORD *)(a3 + 192) = v18;
    *(_OWORD *)(a3 + 160) = v16;
    *(_OWORD *)(a4 + 160) = v69;
    *(_OWORD *)(a4 + 176) = v72;
    *(_OWORD *)(a4 + 192) = *(_OWORD *)v75;
    *(_OWORD *)(a4 + 205) = *(_OWORD *)&v75[13];
    *(_OWORD *)(a4 + 96) = v57;
    *(_OWORD *)(a4 + 112) = v60;
    *(_OWORD *)(a4 + 128) = v63;
    *(_OWORD *)(a4 + 144) = v66;
    *(_OWORD *)(a4 + 32) = v45;
    *(_OWORD *)(a4 + 48) = v48;
    *(_OWORD *)(a4 + 64) = v51;
    *(_OWORD *)(a4 + 80) = v54;
    *(_OWORD *)a4 = v39;
    *(_OWORD *)(a4 + 16) = v42;
    result = *(double *)(a3 + 8);
    if (result < *(double *)(a2 + 8))
    {
      v70 = *(_OWORD *)(a2 + 160);
      v73 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)v76 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)&v76[16] = *(_OWORD *)(a2 + 208);
      v58 = *(_OWORD *)(a2 + 96);
      v61 = *(_OWORD *)(a2 + 112);
      v64 = *(_OWORD *)(a2 + 128);
      v67 = *(_OWORD *)(a2 + 144);
      v46 = *(_OWORD *)(a2 + 32);
      v49 = *(_OWORD *)(a2 + 48);
      v52 = *(_OWORD *)(a2 + 64);
      v55 = *(_OWORD *)(a2 + 80);
      v40 = *(_OWORD *)a2;
      v43 = *(_OWORD *)(a2 + 16);
      v19 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v19;
      v20 = *(_OWORD *)(a3 + 32);
      v21 = *(_OWORD *)(a3 + 48);
      v22 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 80) = v22;
      *(_OWORD *)(a2 + 32) = v20;
      *(_OWORD *)(a2 + 48) = v21;
      v23 = *(_OWORD *)(a3 + 96);
      v24 = *(_OWORD *)(a3 + 112);
      v25 = *(_OWORD *)(a3 + 144);
      *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
      *(_OWORD *)(a2 + 144) = v25;
      *(_OWORD *)(a2 + 96) = v23;
      *(_OWORD *)(a2 + 112) = v24;
      v26 = *(_OWORD *)(a3 + 160);
      v27 = *(_OWORD *)(a3 + 176);
      v28 = *(_OWORD *)(a3 + 192);
      *(_OWORD *)(a2 + 205) = *(_OWORD *)(a3 + 205);
      *(_OWORD *)(a2 + 176) = v27;
      *(_OWORD *)(a2 + 192) = v28;
      *(_OWORD *)(a2 + 160) = v26;
      *(_OWORD *)(a3 + 160) = v70;
      *(_OWORD *)(a3 + 176) = v73;
      *(_OWORD *)(a3 + 192) = *(_OWORD *)v76;
      *(_OWORD *)(a3 + 205) = *(_OWORD *)&v76[13];
      *(_OWORD *)(a3 + 96) = v58;
      *(_OWORD *)(a3 + 112) = v61;
      *(_OWORD *)(a3 + 128) = v64;
      *(_OWORD *)(a3 + 144) = v67;
      *(_OWORD *)(a3 + 32) = v46;
      *(_OWORD *)(a3 + 48) = v49;
      *(_OWORD *)(a3 + 64) = v52;
      *(_OWORD *)(a3 + 80) = v55;
      *(_OWORD *)a3 = v40;
      *(_OWORD *)(a3 + 16) = v43;
      result = *(double *)(a2 + 8);
      if (result < *(double *)(a1 + 8))
      {
        v71 = *(_OWORD *)(a1 + 160);
        v74 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)v77 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v77[16] = *(_OWORD *)(a1 + 208);
        v59 = *(_OWORD *)(a1 + 96);
        v62 = *(_OWORD *)(a1 + 112);
        v65 = *(_OWORD *)(a1 + 128);
        v68 = *(_OWORD *)(a1 + 144);
        v47 = *(_OWORD *)(a1 + 32);
        v50 = *(_OWORD *)(a1 + 48);
        v53 = *(_OWORD *)(a1 + 64);
        v56 = *(_OWORD *)(a1 + 80);
        v41 = *(_OWORD *)a1;
        v44 = *(_OWORD *)(a1 + 16);
        v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v29;
        v30 = *(_OWORD *)(a2 + 32);
        v31 = *(_OWORD *)(a2 + 48);
        v32 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v32;
        *(_OWORD *)(a1 + 32) = v30;
        *(_OWORD *)(a1 + 48) = v31;
        v33 = *(_OWORD *)(a2 + 96);
        v34 = *(_OWORD *)(a2 + 112);
        v35 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v35;
        *(_OWORD *)(a1 + 96) = v33;
        *(_OWORD *)(a1 + 112) = v34;
        v36 = *(_OWORD *)(a2 + 160);
        v37 = *(_OWORD *)(a2 + 176);
        v38 = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 + 205);
        *(_OWORD *)(a1 + 176) = v37;
        *(_OWORD *)(a1 + 192) = v38;
        *(_OWORD *)(a1 + 160) = v36;
        *(_OWORD *)(a2 + 160) = v71;
        *(_OWORD *)(a2 + 176) = v74;
        *(_OWORD *)(a2 + 192) = *(_OWORD *)v77;
        *(_OWORD *)(a2 + 205) = *(_OWORD *)&v77[13];
        *(_OWORD *)(a2 + 96) = v59;
        *(_OWORD *)(a2 + 112) = v62;
        *(_OWORD *)(a2 + 128) = v65;
        *(_OWORD *)(a2 + 144) = v68;
        *(_OWORD *)(a2 + 32) = v47;
        *(_OWORD *)(a2 + 48) = v50;
        *(_OWORD *)(a2 + 64) = v53;
        *(_OWORD *)(a2 + 80) = v56;
        result = *(double *)&v41;
        *(_OWORD *)a2 = v41;
        *(_OWORD *)(a2 + 16) = v44;
      }
    }
  }
  return result;
}

void sub_1014A6548(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  unint64_t v30;
  __int128 *v31;
  __int128 *v32;
  double v33;
  __int128 *v34;
  double v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  double v47;
  double v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  unint64_t v63;
  double v64;
  __int128 *v65;
  __int128 *v66;
  double v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  double v78;
  double v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 *v100;
  __int128 *v101;
  __int128 *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  BOOL v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 *v133;
  BOOL v135;
  uint64_t v136;
  unint64_t v137;
  __int128 *v138;
  double v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  double *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  int64_t v152;
  int64_t v153;
  int64_t v154;
  uint64_t v155;
  unint64_t v156;
  double v157;
  unint64_t v158;
  uint64_t v159;
  _OWORD *v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _OWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  unint64_t v201;
  double v202;
  uint64_t v203;
  _OWORD *v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 *v220;
  double v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  _BYTE v264[32];
  _BYTE v265[32];
  _BYTE v266[32];
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  _BYTE v406[32];
  _BYTE v407[32];
  __int128 v408;
  _BYTE v409[32];
  _BYTE v410[32];
  _BYTE v411[32];
  _BYTE v412[32];
  _BYTE v413[32];
  _BYTE v414[32];
  _BYTE v415[32];
  _BYTE v416[32];
  _BYTE v417[32];
  _BYTE v418[32];

BOOL sub_1014A7720(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 *v31;
  __int128 *v32;
  __int128 *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  BOOL v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _BYTE v130[32];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _BYTE v135[32];
  _BYTE v136[32];
  _BYTE v137[32];
  _BYTE v138[32];
  _BYTE v139[32];

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 216) < *(double *)(a1 + 8))
      {
        v123 = *(_OWORD *)(a1 + 160);
        v129 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)v135 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v135[16] = *(_OWORD *)(a1 + 208);
        v99 = *(_OWORD *)(a1 + 96);
        v105 = *(_OWORD *)(a1 + 112);
        v111 = *(_OWORD *)(a1 + 128);
        v117 = *(_OWORD *)(a1 + 144);
        v75 = *(_OWORD *)(a1 + 32);
        v81 = *(_OWORD *)(a1 + 48);
        v87 = *(_OWORD *)(a1 + 64);
        v93 = *(_OWORD *)(a1 + 80);
        v63 = *(_OWORD *)a1;
        v69 = *(_OWORD *)(a1 + 16);
        v6 = *(_OWORD *)(a2 - 208);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 224);
        *(_OWORD *)(a1 + 16) = v6;
        v7 = *(_OWORD *)(a2 - 192);
        v8 = *(_OWORD *)(a2 - 176);
        v9 = *(_OWORD *)(a2 - 144);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 160);
        *(_OWORD *)(a1 + 80) = v9;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 48) = v8;
        v10 = *(_OWORD *)(a2 - 128);
        v11 = *(_OWORD *)(a2 - 112);
        v12 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 144) = v12;
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a1 + 112) = v11;
        v13 = *(_OWORD *)(a2 - 64);
        v14 = *(_OWORD *)(a2 - 48);
        v15 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(a1 + 176) = v14;
        *(_OWORD *)(a1 + 192) = v15;
        *(_OWORD *)(a1 + 160) = v13;
        *(_OWORD *)(a2 - 64) = v123;
        *(_OWORD *)(a2 - 48) = v129;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v135;
        *(_OWORD *)(a2 - 19) = *(_OWORD *)&v135[13];
        *(_OWORD *)(a2 - 128) = v99;
        *(_OWORD *)(a2 - 112) = v105;
        *(_OWORD *)(a2 - 96) = v111;
        *(_OWORD *)(a2 - 80) = v117;
        *(_OWORD *)(a2 - 192) = v75;
        *(_OWORD *)(a2 - 176) = v81;
        *(_OWORD *)(a2 - 160) = v87;
        *(_OWORD *)(a2 - 144) = v93;
        *(_OWORD *)(a2 - 224) = v63;
        *(_OWORD *)(a2 - 208) = v69;
      }
      return result;
    case 3:
      sub_1014A58C8((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a2 - 224));
      return 1;
    case 4:
      sub_1014A62A8(a1, a1 + 224, a1 + 448, a2 - 224);
      return 1;
    case 5:
      v31 = (__int128 *)(a1 + 224);
      v32 = (__int128 *)(a1 + 448);
      v33 = (__int128 *)(a1 + 672);
      sub_1014A62A8(a1, a1 + 224, a1 + 448, a1 + 672);
      if (*(double *)(a2 - 216) >= *(double *)(a1 + 680))
        return 1;
      v125 = *(_OWORD *)(a1 + 832);
      v131 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)v136 = *(_OWORD *)(a1 + 864);
      *(_OWORD *)&v136[16] = *(_OWORD *)(a1 + 880);
      v101 = *(_OWORD *)(a1 + 768);
      v107 = *(_OWORD *)(a1 + 784);
      v113 = *(_OWORD *)(a1 + 800);
      v119 = *(_OWORD *)(a1 + 816);
      v77 = *(_OWORD *)(a1 + 704);
      v83 = *(_OWORD *)(a1 + 720);
      v89 = *(_OWORD *)(a1 + 736);
      v95 = *(_OWORD *)(a1 + 752);
      v65 = *v33;
      v71 = *(_OWORD *)(a1 + 688);
      v34 = *(_OWORD *)(a2 - 208);
      *v33 = *(_OWORD *)(a2 - 224);
      *(_OWORD *)(a1 + 688) = v34;
      v35 = *(_OWORD *)(a2 - 192);
      v36 = *(_OWORD *)(a2 - 176);
      v37 = *(_OWORD *)(a2 - 144);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 - 160);
      *(_OWORD *)(a1 + 752) = v37;
      *(_OWORD *)(a1 + 704) = v35;
      *(_OWORD *)(a1 + 720) = v36;
      v38 = *(_OWORD *)(a2 - 128);
      v39 = *(_OWORD *)(a2 - 112);
      v40 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 816) = v40;
      *(_OWORD *)(a1 + 768) = v38;
      *(_OWORD *)(a1 + 784) = v39;
      v41 = *(_OWORD *)(a2 - 64);
      v42 = *(_OWORD *)(a2 - 48);
      v43 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 877) = *(_OWORD *)(a2 - 19);
      *(_OWORD *)(a1 + 848) = v42;
      *(_OWORD *)(a1 + 864) = v43;
      *(_OWORD *)(a1 + 832) = v41;
      *(_OWORD *)(a2 - 64) = v125;
      *(_OWORD *)(a2 - 48) = v131;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v136;
      *(_OWORD *)(a2 - 19) = *(_OWORD *)&v136[13];
      *(_OWORD *)(a2 - 128) = v101;
      *(_OWORD *)(a2 - 112) = v107;
      *(_OWORD *)(a2 - 96) = v113;
      *(_OWORD *)(a2 - 80) = v119;
      *(_OWORD *)(a2 - 192) = v77;
      *(_OWORD *)(a2 - 176) = v83;
      *(_OWORD *)(a2 - 160) = v89;
      *(_OWORD *)(a2 - 144) = v95;
      *(_OWORD *)(a2 - 224) = v65;
      *(_OWORD *)(a2 - 208) = v71;
      if (*(double *)(a1 + 680) >= *(double *)(a1 + 456))
        return 1;
      v126 = *(_OWORD *)(a1 + 608);
      v132 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)v137 = *(_OWORD *)(a1 + 640);
      *(_OWORD *)&v137[16] = *(_OWORD *)(a1 + 656);
      v102 = *(_OWORD *)(a1 + 544);
      v108 = *(_OWORD *)(a1 + 560);
      v114 = *(_OWORD *)(a1 + 576);
      v120 = *(_OWORD *)(a1 + 592);
      v78 = *(_OWORD *)(a1 + 480);
      v84 = *(_OWORD *)(a1 + 496);
      v90 = *(_OWORD *)(a1 + 512);
      v96 = *(_OWORD *)(a1 + 528);
      v66 = *v32;
      v72 = *(_OWORD *)(a1 + 464);
      v44 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a1 + 832);
      *(_OWORD *)(a1 + 624) = v44;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 864);
      *(_OWORD *)(a1 + 653) = *(_OWORD *)(a1 + 877);
      v45 = *(_OWORD *)(a1 + 784);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 768);
      *(_OWORD *)(a1 + 560) = v45;
      v46 = *(_OWORD *)(a1 + 816);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 800);
      *(_OWORD *)(a1 + 592) = v46;
      v47 = *(_OWORD *)(a1 + 720);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a1 + 496) = v47;
      v48 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 736);
      *(_OWORD *)(a1 + 528) = v48;
      v49 = *(_OWORD *)(a1 + 688);
      *v32 = *v33;
      *(_OWORD *)(a1 + 464) = v49;
      *(_OWORD *)(a1 + 832) = v126;
      *(_OWORD *)(a1 + 848) = v132;
      *(_OWORD *)(a1 + 864) = *(_OWORD *)v137;
      *(_OWORD *)(a1 + 877) = *(_OWORD *)&v137[13];
      *(_OWORD *)(a1 + 768) = v102;
      *(_OWORD *)(a1 + 784) = v108;
      *(_OWORD *)(a1 + 800) = v114;
      *(_OWORD *)(a1 + 816) = v120;
      *(_OWORD *)(a1 + 704) = v78;
      *(_OWORD *)(a1 + 720) = v84;
      *(_OWORD *)(a1 + 736) = v90;
      *(_OWORD *)(a1 + 752) = v96;
      v50 = *(double *)(a1 + 456) < *(double *)(a1 + 232);
      *v33 = v66;
      *(_OWORD *)(a1 + 688) = v72;
      if (!v50)
        return 1;
      v127 = *(_OWORD *)(a1 + 384);
      v133 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)v138 = *(_OWORD *)(a1 + 416);
      *(_OWORD *)&v138[16] = *(_OWORD *)(a1 + 432);
      v103 = *(_OWORD *)(a1 + 320);
      v109 = *(_OWORD *)(a1 + 336);
      v115 = *(_OWORD *)(a1 + 352);
      v121 = *(_OWORD *)(a1 + 368);
      v79 = *(_OWORD *)(a1 + 256);
      v85 = *(_OWORD *)(a1 + 272);
      v91 = *(_OWORD *)(a1 + 288);
      v97 = *(_OWORD *)(a1 + 304);
      v67 = *v31;
      v73 = *(_OWORD *)(a1 + 240);
      v51 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 608);
      *(_OWORD *)(a1 + 400) = v51;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 429) = *(_OWORD *)(a1 + 653);
      v52 = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 336) = v52;
      v53 = *(_OWORD *)(a1 + 592);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 576);
      *(_OWORD *)(a1 + 368) = v53;
      v54 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 272) = v54;
      v55 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 304) = v55;
      v56 = *(_OWORD *)(a1 + 464);
      *v31 = *v32;
      *(_OWORD *)(a1 + 240) = v56;
      *(_OWORD *)(a1 + 608) = v127;
      *(_OWORD *)(a1 + 624) = v133;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)v138;
      *(_OWORD *)(a1 + 653) = *(_OWORD *)&v138[13];
      *(_OWORD *)(a1 + 544) = v103;
      *(_OWORD *)(a1 + 560) = v109;
      *(_OWORD *)(a1 + 576) = v115;
      *(_OWORD *)(a1 + 592) = v121;
      *(_OWORD *)(a1 + 480) = v79;
      *(_OWORD *)(a1 + 496) = v85;
      *(_OWORD *)(a1 + 512) = v91;
      *(_OWORD *)(a1 + 528) = v97;
      v50 = *(double *)(a1 + 232) < *(double *)(a1 + 8);
      *v32 = v67;
      *(_OWORD *)(a1 + 464) = v73;
      if (!v50)
        return 1;
      v128 = *(_OWORD *)(a1 + 160);
      v134 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)v139 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)&v139[16] = *(_OWORD *)(a1 + 208);
      v104 = *(_OWORD *)(a1 + 96);
      v110 = *(_OWORD *)(a1 + 112);
      v116 = *(_OWORD *)(a1 + 128);
      v122 = *(_OWORD *)(a1 + 144);
      v80 = *(_OWORD *)(a1 + 32);
      v86 = *(_OWORD *)(a1 + 48);
      v92 = *(_OWORD *)(a1 + 64);
      v98 = *(_OWORD *)(a1 + 80);
      v68 = *(_OWORD *)a1;
      v74 = *(_OWORD *)(a1 + 16);
      v57 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 176) = v57;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 205) = *(_OWORD *)(a1 + 429);
      v58 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 112) = v58;
      v59 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 144) = v59;
      v60 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 48) = v60;
      v61 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 80) = v61;
      v62 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)a1 = *v31;
      *(_OWORD *)(a1 + 16) = v62;
      *(_OWORD *)(a1 + 384) = v128;
      *(_OWORD *)(a1 + 400) = v134;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)v139;
      *(_OWORD *)(a1 + 429) = *(_OWORD *)&v139[13];
      *(_OWORD *)(a1 + 320) = v104;
      *(_OWORD *)(a1 + 336) = v110;
      *(_OWORD *)(a1 + 352) = v116;
      *(_OWORD *)(a1 + 368) = v122;
      *(_OWORD *)(a1 + 256) = v80;
      *(_OWORD *)(a1 + 272) = v86;
      *(_OWORD *)(a1 + 288) = v92;
      *(_OWORD *)(a1 + 304) = v98;
      result = 1;
      *v31 = v68;
      *(_OWORD *)(a1 + 240) = v74;
      return result;
    default:
      v16 = a1 + 448;
      sub_1014A58C8((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448));
      v17 = a1 + 672;
      if (a1 + 672 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    v20 = *(double *)(v17 + 8);
    if (v20 < *(double *)(v16 + 8))
    {
      v21 = *(_QWORD *)v17;
      v124 = *(_OWORD *)(v17 + 176);
      *(_OWORD *)v130 = *(_OWORD *)(v17 + 192);
      *(_OWORD *)&v130[16] = *(_OWORD *)(v17 + 208);
      v100 = *(_OWORD *)(v17 + 112);
      v106 = *(_OWORD *)(v17 + 128);
      v112 = *(_OWORD *)(v17 + 144);
      v118 = *(_OWORD *)(v17 + 160);
      v76 = *(_OWORD *)(v17 + 48);
      v82 = *(_OWORD *)(v17 + 64);
      v88 = *(_OWORD *)(v17 + 80);
      v94 = *(_OWORD *)(v17 + 96);
      v22 = v18;
      v64 = *(_OWORD *)(v17 + 16);
      v70 = *(_OWORD *)(v17 + 32);
      while (1)
      {
        v23 = a1 + v22;
        v24 = *(_OWORD *)(a1 + v22 + 624);
        *(_OWORD *)(v23 + 832) = *(_OWORD *)(a1 + v22 + 608);
        *(_OWORD *)(v23 + 848) = v24;
        *(_OWORD *)(v23 + 864) = *(_OWORD *)(a1 + v22 + 640);
        v25 = *(_OWORD *)(a1 + v22 + 560);
        *(_OWORD *)(v23 + 768) = *(_OWORD *)(a1 + v22 + 544);
        *(_OWORD *)(v23 + 784) = v25;
        v26 = *(_OWORD *)(a1 + v22 + 592);
        *(_OWORD *)(v23 + 800) = *(_OWORD *)(a1 + v22 + 576);
        *(_OWORD *)(v23 + 816) = v26;
        v27 = *(_OWORD *)(a1 + v22 + 496);
        *(_OWORD *)(v23 + 704) = *(_OWORD *)(a1 + v22 + 480);
        *(_OWORD *)(v23 + 720) = v27;
        v28 = *(_OWORD *)(a1 + v22 + 528);
        *(_OWORD *)(v23 + 736) = *(_OWORD *)(a1 + v22 + 512);
        *(_OWORD *)(v23 + 752) = v28;
        v29 = *(_OWORD *)(a1 + v22 + 464);
        *(_OWORD *)(v23 + 672) = *(_OWORD *)(a1 + v22 + 448);
        *(_OWORD *)(v23 + 688) = v29;
        *(_OWORD *)(a1 + v22 + 877) = *(_OWORD *)(a1 + v22 + 653);
        if (v22 == -448)
          break;
        v22 -= 224;
        if (v20 >= *(double *)(v23 + 232))
        {
          v30 = a1 + v22 + 672;
          goto LABEL_13;
        }
      }
      v30 = a1;
LABEL_13:
      *(_QWORD *)v30 = v21;
      *(double *)(v30 + 8) = v20;
      *(_OWORD *)(v30 + 176) = v124;
      *(_OWORD *)(v30 + 192) = *(_OWORD *)v130;
      *(_OWORD *)(v30 + 205) = *(_OWORD *)&v130[13];
      *(_OWORD *)(v30 + 112) = v100;
      *(_OWORD *)(v30 + 128) = v106;
      *(_OWORD *)(v30 + 144) = v112;
      *(_OWORD *)(v30 + 160) = v118;
      *(_OWORD *)(v30 + 48) = v76;
      *(_OWORD *)(v30 + 64) = v82;
      *(_OWORD *)(v30 + 80) = v88;
      *(_OWORD *)(v30 + 96) = v94;
      ++v19;
      *(_OWORD *)(v30 + 16) = v64;
      *(_OWORD *)(v30 + 32) = v70;
      if (v19 == 8)
        return v17 + 224 == a2;
    }
    v16 = v17;
    v18 += 224;
    v17 += 224;
    if (v17 == a2)
      return 1;
  }
}

_QWORD *sub_1014A7D4C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1014A7DC4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 3);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1014A7DA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1014A7DC4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x124924924924925)
    sub_100259694();
  result = (char *)sub_100272188((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[224 * v4];
  return result;
}

void sub_1014A7E18(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  double v30;
  double v31;
  __int128 v32;
  BOOL v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  double v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  __int128 v43;
  double v44;
  double v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  __int128 *v49;
  __int128 *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  _QWORD *v58;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  double v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  _QWORD *v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  double *v104;
  double v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

BOOL sub_1014A86C0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      sub_1010E4420((__int128 *)a1, (double *)(a1 + 24), (double *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1010E4784(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      v19 = (__int128 *)(a1 + 24);
      v20 = (__int128 *)(a1 + 48);
      v21 = (__int128 *)(a1 + 72);
      sub_1010E4784(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(double *)(a2 - 16) < *(double *)(a1 + 80))
      {
        v22 = *(_QWORD *)(a1 + 88);
        v23 = *v21;
        v24 = *(_QWORD *)(a2 - 8);
        *v21 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 88) = v24;
        *(_OWORD *)(a2 - 24) = v23;
        *(_QWORD *)(a2 - 8) = v22;
        if (*(double *)(a1 + 80) < *(double *)(a1 + 56))
        {
          v25 = *(_QWORD *)(a1 + 64);
          v26 = *v20;
          *v20 = *v21;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v21 = v26;
          *(_QWORD *)(a1 + 88) = v25;
          if (*(double *)(a1 + 56) < *(double *)(a1 + 32))
          {
            v27 = *(_QWORD *)(a1 + 40);
            v28 = *v19;
            *v19 = *v20;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v20 = v28;
            *(_QWORD *)(a1 + 64) = v27;
            if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
            {
              v29 = *(_QWORD *)(a1 + 16);
              v30 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v19 = v30;
              *(_QWORD *)(a1 + 40) = v29;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 48;
      sub_1010E4420((__int128 *)a1, (double *)(a1 + 24), (double *)(a1 + 48));
      v10 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      v15 = *(_QWORD *)(v10 + 16);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (v13 >= *(double *)(v17 + 32))
        {
          v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_QWORD *)(v18 + 16) = v15;
      if (++v12 == 8)
        return v10 + 24 == a2;
    }
    v9 = v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2)
      return 1;
  }
}

void sub_1014A8934(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  unint64_t v30;
  __int128 *v31;
  __int128 *v32;
  double v33;
  __int128 *v34;
  double v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  double v47;
  double v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  unint64_t v63;
  double v64;
  __int128 *v65;
  __int128 *v66;
  double v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  double v78;
  double v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 *v100;
  __int128 *v101;
  __int128 *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  BOOL v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 *v133;
  BOOL v135;
  uint64_t v136;
  unint64_t v137;
  __int128 *v138;
  double v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  double *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  int64_t v152;
  int64_t v153;
  int64_t v154;
  uint64_t v155;
  unint64_t v156;
  double v157;
  unint64_t v158;
  uint64_t v159;
  _OWORD *v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _OWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  unint64_t v201;
  double v202;
  uint64_t v203;
  _OWORD *v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 *v220;
  double v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  _BYTE v264[32];
  _BYTE v265[32];
  _BYTE v266[32];
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  _BYTE v406[32];
  _BYTE v407[32];
  __int128 v408;
  _BYTE v409[32];
  _BYTE v410[32];
  _BYTE v411[32];
  _BYTE v412[32];
  _BYTE v413[32];
  _BYTE v414[32];
  _BYTE v415[32];
  _BYTE v416[32];
  _BYTE v417[32];
  _BYTE v418[32];

BOOL sub_1014A9B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 *v31;
  __int128 *v32;
  __int128 *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  BOOL v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _BYTE v130[32];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _BYTE v135[32];
  _BYTE v136[32];
  _BYTE v137[32];
  _BYTE v138[32];
  _BYTE v139[32];

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 216) < *(double *)(a1 + 8))
      {
        v123 = *(_OWORD *)(a1 + 160);
        v129 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)v135 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v135[16] = *(_OWORD *)(a1 + 208);
        v99 = *(_OWORD *)(a1 + 96);
        v105 = *(_OWORD *)(a1 + 112);
        v111 = *(_OWORD *)(a1 + 128);
        v117 = *(_OWORD *)(a1 + 144);
        v75 = *(_OWORD *)(a1 + 32);
        v81 = *(_OWORD *)(a1 + 48);
        v87 = *(_OWORD *)(a1 + 64);
        v93 = *(_OWORD *)(a1 + 80);
        v63 = *(_OWORD *)a1;
        v69 = *(_OWORD *)(a1 + 16);
        v6 = *(_OWORD *)(a2 - 208);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 224);
        *(_OWORD *)(a1 + 16) = v6;
        v7 = *(_OWORD *)(a2 - 192);
        v8 = *(_OWORD *)(a2 - 176);
        v9 = *(_OWORD *)(a2 - 144);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 160);
        *(_OWORD *)(a1 + 80) = v9;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 48) = v8;
        v10 = *(_OWORD *)(a2 - 128);
        v11 = *(_OWORD *)(a2 - 112);
        v12 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 144) = v12;
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a1 + 112) = v11;
        v13 = *(_OWORD *)(a2 - 64);
        v14 = *(_OWORD *)(a2 - 48);
        v15 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(a1 + 176) = v14;
        *(_OWORD *)(a1 + 192) = v15;
        *(_OWORD *)(a1 + 160) = v13;
        *(_OWORD *)(a2 - 64) = v123;
        *(_OWORD *)(a2 - 48) = v129;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v135;
        *(_OWORD *)(a2 - 19) = *(_OWORD *)&v135[13];
        *(_OWORD *)(a2 - 128) = v99;
        *(_OWORD *)(a2 - 112) = v105;
        *(_OWORD *)(a2 - 96) = v111;
        *(_OWORD *)(a2 - 80) = v117;
        *(_OWORD *)(a2 - 192) = v75;
        *(_OWORD *)(a2 - 176) = v81;
        *(_OWORD *)(a2 - 160) = v87;
        *(_OWORD *)(a2 - 144) = v93;
        *(_OWORD *)(a2 - 224) = v63;
        *(_OWORD *)(a2 - 208) = v69;
      }
      return result;
    case 3:
      sub_1014A58C8((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a2 - 224));
      return 1;
    case 4:
      sub_1014A62A8(a1, a1 + 224, a1 + 448, a2 - 224);
      return 1;
    case 5:
      v31 = (__int128 *)(a1 + 224);
      v32 = (__int128 *)(a1 + 448);
      v33 = (__int128 *)(a1 + 672);
      sub_1014A62A8(a1, a1 + 224, a1 + 448, a1 + 672);
      if (*(double *)(a2 - 216) >= *(double *)(a1 + 680))
        return 1;
      v125 = *(_OWORD *)(a1 + 832);
      v131 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)v136 = *(_OWORD *)(a1 + 864);
      *(_OWORD *)&v136[16] = *(_OWORD *)(a1 + 880);
      v101 = *(_OWORD *)(a1 + 768);
      v107 = *(_OWORD *)(a1 + 784);
      v113 = *(_OWORD *)(a1 + 800);
      v119 = *(_OWORD *)(a1 + 816);
      v77 = *(_OWORD *)(a1 + 704);
      v83 = *(_OWORD *)(a1 + 720);
      v89 = *(_OWORD *)(a1 + 736);
      v95 = *(_OWORD *)(a1 + 752);
      v65 = *v33;
      v71 = *(_OWORD *)(a1 + 688);
      v34 = *(_OWORD *)(a2 - 208);
      *v33 = *(_OWORD *)(a2 - 224);
      *(_OWORD *)(a1 + 688) = v34;
      v35 = *(_OWORD *)(a2 - 192);
      v36 = *(_OWORD *)(a2 - 176);
      v37 = *(_OWORD *)(a2 - 144);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 - 160);
      *(_OWORD *)(a1 + 752) = v37;
      *(_OWORD *)(a1 + 704) = v35;
      *(_OWORD *)(a1 + 720) = v36;
      v38 = *(_OWORD *)(a2 - 128);
      v39 = *(_OWORD *)(a2 - 112);
      v40 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 816) = v40;
      *(_OWORD *)(a1 + 768) = v38;
      *(_OWORD *)(a1 + 784) = v39;
      v41 = *(_OWORD *)(a2 - 64);
      v42 = *(_OWORD *)(a2 - 48);
      v43 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 877) = *(_OWORD *)(a2 - 19);
      *(_OWORD *)(a1 + 848) = v42;
      *(_OWORD *)(a1 + 864) = v43;
      *(_OWORD *)(a1 + 832) = v41;
      *(_OWORD *)(a2 - 64) = v125;
      *(_OWORD *)(a2 - 48) = v131;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v136;
      *(_OWORD *)(a2 - 19) = *(_OWORD *)&v136[13];
      *(_OWORD *)(a2 - 128) = v101;
      *(_OWORD *)(a2 - 112) = v107;
      *(_OWORD *)(a2 - 96) = v113;
      *(_OWORD *)(a2 - 80) = v119;
      *(_OWORD *)(a2 - 192) = v77;
      *(_OWORD *)(a2 - 176) = v83;
      *(_OWORD *)(a2 - 160) = v89;
      *(_OWORD *)(a2 - 144) = v95;
      *(_OWORD *)(a2 - 224) = v65;
      *(_OWORD *)(a2 - 208) = v71;
      if (*(double *)(a1 + 680) >= *(double *)(a1 + 456))
        return 1;
      v126 = *(_OWORD *)(a1 + 608);
      v132 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)v137 = *(_OWORD *)(a1 + 640);
      *(_OWORD *)&v137[16] = *(_OWORD *)(a1 + 656);
      v102 = *(_OWORD *)(a1 + 544);
      v108 = *(_OWORD *)(a1 + 560);
      v114 = *(_OWORD *)(a1 + 576);
      v120 = *(_OWORD *)(a1 + 592);
      v78 = *(_OWORD *)(a1 + 480);
      v84 = *(_OWORD *)(a1 + 496);
      v90 = *(_OWORD *)(a1 + 512);
      v96 = *(_OWORD *)(a1 + 528);
      v66 = *v32;
      v72 = *(_OWORD *)(a1 + 464);
      v44 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a1 + 832);
      *(_OWORD *)(a1 + 624) = v44;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 864);
      *(_OWORD *)(a1 + 653) = *(_OWORD *)(a1 + 877);
      v45 = *(_OWORD *)(a1 + 784);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 768);
      *(_OWORD *)(a1 + 560) = v45;
      v46 = *(_OWORD *)(a1 + 816);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 800);
      *(_OWORD *)(a1 + 592) = v46;
      v47 = *(_OWORD *)(a1 + 720);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a1 + 496) = v47;
      v48 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 736);
      *(_OWORD *)(a1 + 528) = v48;
      v49 = *(_OWORD *)(a1 + 688);
      *v32 = *v33;
      *(_OWORD *)(a1 + 464) = v49;
      *(_OWORD *)(a1 + 832) = v126;
      *(_OWORD *)(a1 + 848) = v132;
      *(_OWORD *)(a1 + 864) = *(_OWORD *)v137;
      *(_OWORD *)(a1 + 877) = *(_OWORD *)&v137[13];
      *(_OWORD *)(a1 + 768) = v102;
      *(_OWORD *)(a1 + 784) = v108;
      *(_OWORD *)(a1 + 800) = v114;
      *(_OWORD *)(a1 + 816) = v120;
      *(_OWORD *)(a1 + 704) = v78;
      *(_OWORD *)(a1 + 720) = v84;
      *(_OWORD *)(a1 + 736) = v90;
      *(_OWORD *)(a1 + 752) = v96;
      v50 = *(double *)(a1 + 456) < *(double *)(a1 + 232);
      *v33 = v66;
      *(_OWORD *)(a1 + 688) = v72;
      if (!v50)
        return 1;
      v127 = *(_OWORD *)(a1 + 384);
      v133 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)v138 = *(_OWORD *)(a1 + 416);
      *(_OWORD *)&v138[16] = *(_OWORD *)(a1 + 432);
      v103 = *(_OWORD *)(a1 + 320);
      v109 = *(_OWORD *)(a1 + 336);
      v115 = *(_OWORD *)(a1 + 352);
      v121 = *(_OWORD *)(a1 + 368);
      v79 = *(_OWORD *)(a1 + 256);
      v85 = *(_OWORD *)(a1 + 272);
      v91 = *(_OWORD *)(a1 + 288);
      v97 = *(_OWORD *)(a1 + 304);
      v67 = *v31;
      v73 = *(_OWORD *)(a1 + 240);
      v51 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 608);
      *(_OWORD *)(a1 + 400) = v51;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 429) = *(_OWORD *)(a1 + 653);
      v52 = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 336) = v52;
      v53 = *(_OWORD *)(a1 + 592);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 576);
      *(_OWORD *)(a1 + 368) = v53;
      v54 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 272) = v54;
      v55 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 304) = v55;
      v56 = *(_OWORD *)(a1 + 464);
      *v31 = *v32;
      *(_OWORD *)(a1 + 240) = v56;
      *(_OWORD *)(a1 + 608) = v127;
      *(_OWORD *)(a1 + 624) = v133;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)v138;
      *(_OWORD *)(a1 + 653) = *(_OWORD *)&v138[13];
      *(_OWORD *)(a1 + 544) = v103;
      *(_OWORD *)(a1 + 560) = v109;
      *(_OWORD *)(a1 + 576) = v115;
      *(_OWORD *)(a1 + 592) = v121;
      *(_OWORD *)(a1 + 480) = v79;
      *(_OWORD *)(a1 + 496) = v85;
      *(_OWORD *)(a1 + 512) = v91;
      *(_OWORD *)(a1 + 528) = v97;
      v50 = *(double *)(a1 + 232) < *(double *)(a1 + 8);
      *v32 = v67;
      *(_OWORD *)(a1 + 464) = v73;
      if (!v50)
        return 1;
      v128 = *(_OWORD *)(a1 + 160);
      v134 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)v139 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)&v139[16] = *(_OWORD *)(a1 + 208);
      v104 = *(_OWORD *)(a1 + 96);
      v110 = *(_OWORD *)(a1 + 112);
      v116 = *(_OWORD *)(a1 + 128);
      v122 = *(_OWORD *)(a1 + 144);
      v80 = *(_OWORD *)(a1 + 32);
      v86 = *(_OWORD *)(a1 + 48);
      v92 = *(_OWORD *)(a1 + 64);
      v98 = *(_OWORD *)(a1 + 80);
      v68 = *(_OWORD *)a1;
      v74 = *(_OWORD *)(a1 + 16);
      v57 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 176) = v57;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 205) = *(_OWORD *)(a1 + 429);
      v58 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 112) = v58;
      v59 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 144) = v59;
      v60 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 48) = v60;
      v61 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 80) = v61;
      v62 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)a1 = *v31;
      *(_OWORD *)(a1 + 16) = v62;
      *(_OWORD *)(a1 + 384) = v128;
      *(_OWORD *)(a1 + 400) = v134;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)v139;
      *(_OWORD *)(a1 + 429) = *(_OWORD *)&v139[13];
      *(_OWORD *)(a1 + 320) = v104;
      *(_OWORD *)(a1 + 336) = v110;
      *(_OWORD *)(a1 + 352) = v116;
      *(_OWORD *)(a1 + 368) = v122;
      *(_OWORD *)(a1 + 256) = v80;
      *(_OWORD *)(a1 + 272) = v86;
      *(_OWORD *)(a1 + 288) = v92;
      *(_OWORD *)(a1 + 304) = v98;
      result = 1;
      *v31 = v68;
      *(_OWORD *)(a1 + 240) = v74;
      return result;
    default:
      v16 = a1 + 448;
      sub_1014A58C8((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448));
      v17 = a1 + 672;
      if (a1 + 672 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    v20 = *(double *)(v17 + 8);
    if (v20 < *(double *)(v16 + 8))
    {
      v21 = *(_QWORD *)v17;
      v124 = *(_OWORD *)(v17 + 176);
      *(_OWORD *)v130 = *(_OWORD *)(v17 + 192);
      *(_OWORD *)&v130[16] = *(_OWORD *)(v17 + 208);
      v100 = *(_OWORD *)(v17 + 112);
      v106 = *(_OWORD *)(v17 + 128);
      v112 = *(_OWORD *)(v17 + 144);
      v118 = *(_OWORD *)(v17 + 160);
      v76 = *(_OWORD *)(v17 + 48);
      v82 = *(_OWORD *)(v17 + 64);
      v88 = *(_OWORD *)(v17 + 80);
      v94 = *(_OWORD *)(v17 + 96);
      v22 = v18;
      v64 = *(_OWORD *)(v17 + 16);
      v70 = *(_OWORD *)(v17 + 32);
      while (1)
      {
        v23 = a1 + v22;
        v24 = *(_OWORD *)(a1 + v22 + 624);
        *(_OWORD *)(v23 + 832) = *(_OWORD *)(a1 + v22 + 608);
        *(_OWORD *)(v23 + 848) = v24;
        *(_OWORD *)(v23 + 864) = *(_OWORD *)(a1 + v22 + 640);
        v25 = *(_OWORD *)(a1 + v22 + 560);
        *(_OWORD *)(v23 + 768) = *(_OWORD *)(a1 + v22 + 544);
        *(_OWORD *)(v23 + 784) = v25;
        v26 = *(_OWORD *)(a1 + v22 + 592);
        *(_OWORD *)(v23 + 800) = *(_OWORD *)(a1 + v22 + 576);
        *(_OWORD *)(v23 + 816) = v26;
        v27 = *(_OWORD *)(a1 + v22 + 496);
        *(_OWORD *)(v23 + 704) = *(_OWORD *)(a1 + v22 + 480);
        *(_OWORD *)(v23 + 720) = v27;
        v28 = *(_OWORD *)(a1 + v22 + 528);
        *(_OWORD *)(v23 + 736) = *(_OWORD *)(a1 + v22 + 512);
        *(_OWORD *)(v23 + 752) = v28;
        v29 = *(_OWORD *)(a1 + v22 + 464);
        *(_OWORD *)(v23 + 672) = *(_OWORD *)(a1 + v22 + 448);
        *(_OWORD *)(v23 + 688) = v29;
        *(_OWORD *)(a1 + v22 + 877) = *(_OWORD *)(a1 + v22 + 653);
        if (v22 == -448)
          break;
        v22 -= 224;
        if (v20 >= *(double *)(v23 + 232))
        {
          v30 = a1 + v22 + 672;
          goto LABEL_13;
        }
      }
      v30 = a1;
LABEL_13:
      *(_QWORD *)v30 = v21;
      *(double *)(v30 + 8) = v20;
      *(_OWORD *)(v30 + 176) = v124;
      *(_OWORD *)(v30 + 192) = *(_OWORD *)v130;
      *(_OWORD *)(v30 + 205) = *(_OWORD *)&v130[13];
      *(_OWORD *)(v30 + 112) = v100;
      *(_OWORD *)(v30 + 128) = v106;
      *(_OWORD *)(v30 + 144) = v112;
      *(_OWORD *)(v30 + 160) = v118;
      *(_OWORD *)(v30 + 48) = v76;
      *(_OWORD *)(v30 + 64) = v82;
      *(_OWORD *)(v30 + 80) = v88;
      *(_OWORD *)(v30 + 96) = v94;
      ++v19;
      *(_OWORD *)(v30 + 16) = v64;
      *(_OWORD *)(v30 + 32) = v70;
      if (v19 == 8)
        return v17 + 224 == a2;
    }
    v16 = v17;
    v18 += 224;
    v17 += 224;
    if (v17 == a2)
      return 1;
  }
}

void sub_1014AA138(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  double v30;
  double v31;
  __int128 v32;
  BOOL v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  double v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  __int128 v43;
  double v44;
  double v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  __int128 *v49;
  __int128 *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  _QWORD *v58;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  double v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  _QWORD *v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  double *v104;
  double v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

BOOL sub_1014AA9E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      sub_1010E4420((__int128 *)a1, (double *)(a1 + 24), (double *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1010E4784(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      v19 = (__int128 *)(a1 + 24);
      v20 = (__int128 *)(a1 + 48);
      v21 = (__int128 *)(a1 + 72);
      sub_1010E4784(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(double *)(a2 - 16) < *(double *)(a1 + 80))
      {
        v22 = *(_QWORD *)(a1 + 88);
        v23 = *v21;
        v24 = *(_QWORD *)(a2 - 8);
        *v21 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 88) = v24;
        *(_OWORD *)(a2 - 24) = v23;
        *(_QWORD *)(a2 - 8) = v22;
        if (*(double *)(a1 + 80) < *(double *)(a1 + 56))
        {
          v25 = *(_QWORD *)(a1 + 64);
          v26 = *v20;
          *v20 = *v21;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v21 = v26;
          *(_QWORD *)(a1 + 88) = v25;
          if (*(double *)(a1 + 56) < *(double *)(a1 + 32))
          {
            v27 = *(_QWORD *)(a1 + 40);
            v28 = *v19;
            *v19 = *v20;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v20 = v28;
            *(_QWORD *)(a1 + 64) = v27;
            if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
            {
              v29 = *(_QWORD *)(a1 + 16);
              v30 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v19 = v30;
              *(_QWORD *)(a1 + 40) = v29;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 48;
      sub_1010E4420((__int128 *)a1, (double *)(a1 + 24), (double *)(a1 + 48));
      v10 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      v15 = *(_QWORD *)(v10 + 16);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (v13 >= *(double *)(v17 + 32))
        {
          v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_QWORD *)(v18 + 16) = v15;
      if (++v12 == 8)
        return v10 + 24 == a2;
    }
    v9 = v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2)
      return 1;
  }
}

void ***sub_1014AAC54(void ***a1, __int128 *a2)
{
  void **v4;
  char *v5;
  void **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;

  v4 = *a1;
  v5 = (char *)(*a1)[1];
  v6 = *a1;
  v9 = (char *)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if (v5 >= v9)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*v4) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*v4) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)sub_1002596A8(v7, v15);
    else
      v16 = 0;
    v17 = &v16[24 * v12];
    v18 = &v16[24 * v15];
    v19 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v19;
    v11 = v17 + 24;
    v21 = (char *)*v4;
    v20 = (char *)v4[1];
    if (v20 != *v4)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v17 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)*v4;
    }
    *v4 = v17;
    v4[1] = v11;
    v4[2] = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v10 = *a2;
    *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v10;
    v11 = v5 + 24;
  }
  v4[1] = v11;
  return a1;
}

void sub_1014AAD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD v21[5];
  _QWORD v22[5];
  _WORD v23[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = a2;
  sub_100270E34(a1 + 8, a3);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 120) = 0xFFFF;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 156) = _Q0;
  *(_OWORD *)(a1 + 172) = _Q0;
  *(_OWORD *)(a1 + 188) = _Q0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 208) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 236) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 244) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  sub_10012A33C(a1 + 280);
  *(_WORD *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_DWORD *)(a1 + 944) = 1;
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 960) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  sub_100585DD0(a1 + 984, *(_QWORD *)a1, "assist_cache", 1, 0, 0);
  *(_WORD *)(a1 + 1112) = 0;
  *(_DWORD *)(a1 + 1140) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_BYTE *)(a1 + 1136) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,initializing CLGnssRefPosMaintenance feature", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v23[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssRefPosMaintenance,initializing CLGnssRefPosMaintenance feature", v23, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "CLGnssRefPosMaintenance::CLGnssRefPosMaintenance(id<CLIntersiloUniverse>, GnssRefPosMaintenanceCallback)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (!*(_QWORD *)(a1 + 96))
  {
    *(_QWORD *)(a1 + 96) = objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "newTimer");
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,fMaintenanceTriggerTimer timer created", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v23[0] = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,fMaintenanceTriggerTimer timer created", v23, v20);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "CLGnssRefPosMaintenance::CLGnssRefPosMaintenance(id<CLIntersiloUniverse>, GnssRefPosMaintenanceCallback)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    v11 = *(void **)(a1 + 96);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10020DF14;
    v22[3] = &unk_10212ECA0;
    v22[4] = a1;
    objc_msgSend(v11, "setHandler:", v22);
  }
  if (!*(_QWORD *)(a1 + 104))
  {
    *(_QWORD *)(a1 + 104) = objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "newTimer");
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,fActiveSessionTimer timer created", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v23[0] = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,fActiveSessionTimer timer created", v23, v20);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "CLGnssRefPosMaintenance::CLGnssRefPosMaintenance(id<CLIntersiloUniverse>, GnssRefPosMaintenanceCallback)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    v13 = *(void **)(a1 + 104);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1014AB6D8;
    v21[3] = &unk_10212ECA0;
    v21[4] = a1;
    objc_msgSend(v13, "setHandler:", v21);
  }
  sub_1006AA544();
}

void sub_1014AB5A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  sub_100585E5C(v3);
  sub_100261F44((uint64_t)(v1 + 100));
  v6 = v1[11];
  v1[11] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v1[10];
  v1[10] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v1[9];
  v1[9] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v1[8];
  v1[8] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v1[7];
  v1[7] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v1[6];
  v1[6] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *v4;
  *v4 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (_QWORD *)v1[4];
  if (v13 == v2)
  {
    v14 = 4;
    v13 = v2;
  }
  else
  {
    if (!v13)
      goto LABEL_20;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_20:
  _Unwind_Resume(a1);
}

void sub_1014AB6D8(uint64_t a1)
{
  sub_1014AB6E0(*(_QWORD *)(a1 + 32));
}

void sub_1014AB6E0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  uint8_t *v8;
  double v9;
  uint8_t *v10;
  double v11;
  _BOOL4 v12;
  NSObject *v13;
  NSObject *v14;
  uint8_t *v15;
  double v16;
  double v17;
  double v18;
  int v19;
  NSObject *v20;
  double v21;
  int v22;
  BOOL v24;
  void *v25;
  int v26;
  NSObject *v27;
  double v28;
  int v29;
  _BOOL4 v31;
  void *v32;
  NSObject *v33;
  int v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  double v38;
  int v39;
  _BOOL4 v41;
  const char *v42;
  uint8_t *v43;
  uint64_t v44;
  __int128 v45;
  uint8_t buf[4];
  _QWORD v47[204];

  v2 = *(void **)(a1 + 104);
  if (v2)
    objc_msgSend(v2, "setNextFireDelay:", 1.79769313e308);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 1140);
    *(_DWORD *)buf = 67240192;
    LODWORD(v47[0]) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,onActiveSessionTimeout,state,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v34 = *(_DWORD *)(a1 + 1140);
    LODWORD(v45) = 67240192;
    DWORD1(v45) = v34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssRefPosMaintenance,onActiveSessionTimeout,state,%{public}d", &v45, 8);
    v36 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onActiveSessionTimeout()", "%s\n", v35);
    if (v36 != buf)
      free(v36);
  }
  switch(*(_DWORD *)(a1 + 1140))
  {
    case 0:
    case 1:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v6 = *(_DWORD *)(a1 + 1140);
        *(_DWORD *)buf = 67240192;
        LODWORD(v47[0]) = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,Invalid state,%{public}d", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_81;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v7 = *(_DWORD *)(a1 + 1140);
      LODWORD(v45) = 67240192;
      DWORD1(v45) = v7;
      LODWORD(v44) = 8;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssRefPosMaintenance,Invalid state,%{public}d", &v45, v44, (_QWORD)v45);
      goto LABEL_17;
    case 2:
      v11 = *(double *)(a1 + 936);
      if (v11 == 0.0)
      {
        if (sub_1014AFBE8(a1))
        {
          v12 = 1;
          goto LABEL_57;
        }
LABEL_65:
        sub_1014AFE3C(a1);
        v25 = *(void **)(a1 + 104);
        if (v25)
          objc_msgSend(v25, "setNextFireDelay:", 10.0);
        v26 = 3;
        goto LABEL_82;
      }
      if (v11 <= 0.0)
      {
        v12 = 0;
        if (!sub_1014AFBE8(a1))
          goto LABEL_68;
        goto LABEL_57;
      }
      v17 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 936));
      v12 = v17 > 1800.0;
      if (!sub_1014AFBE8(a1))
      {
        if (v17 <= 1800.0)
        {
          v12 = 0;
          goto LABEL_68;
        }
        goto LABEL_65;
      }
LABEL_57:
      v21 = sub_1001FC7BC(a1 + 120, a1 + 280);
      v22 = *(_DWORD *)(a1 + 216);
      v24 = (v22 == 11 || v22 == 4) && v21 < 900.0;
      if (!v24 && v12)
        goto LABEL_65;
LABEL_68:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v27 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v28 = sub_1001FC7BC(a1 + 120, a1 + 280);
        v29 = *(_DWORD *)(a1 + 216);
        v31 = v29 == 4 || v29 == 11;
        if (v28 >= 900.0)
          v31 = 0;
        *(_DWORD *)buf = 67240448;
        LODWORD(v47[0]) = v12;
        WORD2(v47[0]) = 1026;
        *(_DWORD *)((char *)v47 + 6) = v31;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,WiFi/Cell location not requested,requestWiFiCellLocation,%{public}d,isRecentWifi,%{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        v37 = qword_1022A0078;
        v38 = sub_1001FC7BC(a1 + 120, a1 + 280);
        v39 = *(_DWORD *)(a1 + 216);
        v41 = v39 == 4 || v39 == 11;
        if (v38 >= 900.0)
          v41 = 0;
        LODWORD(v45) = 67240448;
        DWORD1(v45) = v12;
        WORD4(v45) = 1026;
        *(_DWORD *)((char *)&v45 + 10) = v41;
        LODWORD(v44) = 14;
        v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 2, "#GnssRefPosMaintenance,WiFi/Cell location not requested,requestWiFiCellLocation,%{public}d,isRecentWifi,%{public}d", &v45, v44, v45);
LABEL_110:
        v10 = v15;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onActiveSessionTimeout()", "%s\n", v16);
LABEL_111:
        if (v10 != buf)
          free(v10);
      }
LABEL_81:
      sub_1014ACDD8(a1);
      v26 = 1;
LABEL_82:
      *(_DWORD *)(a1 + 1140) = v26;
      return;
    case 3:
      if (!*(_BYTE *)(a1 + 920))
        goto LABEL_81;
      sub_1014B0284(a1);
      if (sub_1014AFBE8(a1))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        v14 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,kRefPosMaintenanceStateWiFiCellRequest,Ref position warm", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B9A18);
          LOWORD(v45) = 0;
          LODWORD(v44) = 2;
          v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefPosMaintenance,kRefPosMaintenanceStateWiFiCellRequest,Ref position warm", &v45, v44, v45);
          goto LABEL_110;
        }
      }
      else
      {
        v18 = 0.0;
        if (*(double *)(a1 + 928) > 0.0)
          v18 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 928));
        v19 = *(_DWORD *)(a1 + 948);
        if (sub_100241694() && (*(double *)(a1 + 928) == 0.0 || v18 > dbl_101CA73C0[v19 == 1]))
        {
          if (sub_1014B06B4(a1))
          {
            *(double *)(a1 + 928) = sub_1001FCBB4();
            v32 = *(void **)(a1 + 104);
            if (v32)
              objc_msgSend(v32, "setNextFireDelay:", 24.0);
            v26 = 4;
            goto LABEL_82;
          }
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B9A18);
          v33 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,onActiveRefPosMaintenanceTimeout,Error starting Gnss", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B9A18);
            LOWORD(v45) = 0;
            LODWORD(v44) = 2;
            v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssRefPosMaintenance,onActiveRefPosMaintenanceTimeout,Error starting Gnss", &v45, v44, (_QWORD)v45);
LABEL_17:
            v10 = v8;
            sub_100512490("Generic", 1, 0, 0, "void CLGnssRefPosMaintenance::onActiveSessionTimeout()", "%s\n", v9);
            goto LABEL_111;
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B9A18);
          v20 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)v47 = v18;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,onActiveRefPosMaintenanceTimeout,GNSS not requested,ageLastGnss,%{public}.1lf", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B9A18);
            LODWORD(v45) = 134349056;
            *(double *)((char *)&v45 + 4) = v18;
            LODWORD(v44) = 12;
            v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,onActiveRefPosMaintenanceTimeout,GNSS not requested,ageLastGnss,%{public}.1lf", &v45, v44, v45);
            goto LABEL_110;
          }
        }
      }
      goto LABEL_81;
    case 4:
      if (*(_BYTE *)(a1 + 921))
      {
        if (sub_1014AFBE8(a1))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B9A18);
          v13 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,kRefPosMaintenanceStateGnssRequest,Ref position warm", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B9A18);
            LOWORD(v45) = 0;
            LODWORD(v44) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefPosMaintenance,kRefPosMaintenanceStateGnssRequest,Ref position warm", &v45, v44);
            v43 = (uint8_t *)v42;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onActiveSessionTimeout()", "%s\n", v42);
            if (v43 != buf)
              free(v43);
          }
        }
        sub_1014B0C2C(a1);
      }
      goto LABEL_81;
    default:
      goto LABEL_81;
  }
}

void sub_1014AC11C(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssRefPosMaintenance::onLocationNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B9A38);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B9A38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1014AD7CC((uint64_t)a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1014AC2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1014AC2EC(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  id *v20;

  CLProfilingIdentify("CLGnssRefPosMaintenance::onGnssNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B9A38);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onGnssNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B9A38);
    v10 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onGnssNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_1014AD6A4(v6, v7, v8, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_1014AC498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1014AC4B8(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  id *v20;

  CLProfilingIdentify("CLGnssRefPosMaintenance::onWifiLocationProviderNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B9A38);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onWifiLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B9A38);
    v10 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onWifiLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_1014AD45C(v6, v7, v8, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_1014AC664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1014AC684(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  id *v20;

  CLProfilingIdentify("CLGnssRefPosMaintenance::onCellLocationProviderNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B9A38);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onCellLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B9A38);
    v10 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onCellLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_1014AD588(v6, v7, v8, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_1014AC830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1014AC850(uint64_t a1, _DWORD *a2, CLMotionActivity *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssRefPosMaintenance::onMotionActivityNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B9A38);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onMotionActivityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B9A38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onMotionActivityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1014AEDC4((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1014ACA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1014ACA28(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssRefPosMaintenance::onClientManagerNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B9A38);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B9A38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1014AEFE4((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1014ACBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1014ACC00(uint64_t a1, int *a2, int *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssRefPosMaintenance::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B9A38);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B9A38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1014ADE44((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1014ACDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1014ACDD8(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v2 = *(void **)(a1 + 96);
  if (v2 && *(_DWORD *)(a1 + 944))
  {
    objc_msgSend(v2, "setNextFireDelay:", 900.0);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,periodic maintenance timer,on", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,periodic maintenance timer,on", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::startPeriodicMaintenanceTimer()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

uint64_t sub_1014ACF80(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v18;
  uint8_t *v19;
  _WORD v20[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,CLGnssRefPosMaintenance destructor", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v20[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefPosMaintenance,CLGnssRefPosMaintenance destructor", v20, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "CLGnssRefPosMaintenance::~CLGnssRefPosMaintenance()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");

    *(_QWORD *)(a1 + 96) = 0;
  }
  v4 = *(void **)(a1 + 104);
  if (v4)
  {
    objc_msgSend(v4, "invalidate");

    *(_QWORD *)(a1 + 104) = 0;
  }
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
    objc_msgSend(*(id *)(v5 + 16), "unregister:forNotification:", *(_QWORD *)(v5 + 8), 1);
  v6 = *(_QWORD *)(a1 + 80);
  if (v6)
    objc_msgSend(*(id *)(v6 + 16), "unregister:forNotification:", *(_QWORD *)(v6 + 8), 4);
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
    objc_msgSend(*(id *)(v7 + 16), "unregister:forNotification:", *(_QWORD *)(v7 + 8), 0);
  sub_100585E5C(a1 + 984);
  sub_100261F44(a1 + 800);
  v8 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *(_QWORD **)(a1 + 32);
  if (v15 == (_QWORD *)(a1 + 8))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 8);
    goto LABEL_34;
  }
  if (v15)
  {
    v16 = 5;
LABEL_34:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  return a1;
}

void sub_1014AD268(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_1014AD278(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  if (result[5])
  {
    v1 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Registering for kNotificationLocationPrefiltered\"}", (uint8_t *)v3, 0x12u);
    }
    return objc_msgSend(*(id *)(v1[5] + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v1[5] + 8), 33, 0);
  }
  return result;
}

_QWORD *sub_1014AD36C(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  if (result[5])
  {
    v1 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Unregistering for kNotificationLocationPrefiltered\"}", (uint8_t *)v3, 0x12u);
    }
    return objc_msgSend(*(id *)(v1[5] + 16), "unregister:forNotification:", *(_QWORD *)(v1[5] + 8), 33);
  }
  return result;
}

void sub_1014AD45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a4 + 4);
    v7 = *(_QWORD *)(a4 + 12);
    v8 = *(_QWORD *)(a4 + 20);
    v9 = *(_QWORD *)(a4 + 28);
    v10 = *(_QWORD *)(a4 + 36);
    v11 = *(_DWORD *)(a4 + 84);
    v12[0] = 68290563;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2049;
    v16 = v6;
    v17 = 2049;
    v18 = v7;
    v19 = 2050;
    v20 = v8;
    v21 = 2050;
    v22 = v9;
    v23 = 2050;
    v24 = v10;
    v25 = 1026;
    v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,WiFi location notification received\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\", \"alt\":\"%{public}.2f\", \"vunc\":\"%{public}.1f\", \"conf\":%{public}d}", (uint8_t *)v12, 0x4Au);
  }
}

void sub_1014AD588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a4 + 4);
    v7 = *(_QWORD *)(a4 + 12);
    v8 = *(_QWORD *)(a4 + 20);
    v9 = *(_QWORD *)(a4 + 28);
    v10 = *(_QWORD *)(a4 + 36);
    v11[0] = 68290307;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2049;
    v15 = v6;
    v16 = 2049;
    v17 = v7;
    v18 = 2050;
    v19 = v8;
    v20 = 2050;
    v21 = v9;
    v22 = 2050;
    v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Cell location notification received\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\", \"alt\":\"%{public}.2f\", \"vunc\":\"%{public}.1f\"}", (uint8_t *)v11, 0x44u);
  }
}

void sub_1014AD6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a4 + 4);
    v7 = *(_QWORD *)(a4 + 12);
    v8 = *(_QWORD *)(a4 + 20);
    v9 = *(_QWORD *)(a4 + 28);
    v10 = *(_QWORD *)(a4 + 36);
    v11 = *(_QWORD *)(a4 + 44);
    v12[0] = 68290563;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2049;
    v16 = v6;
    v17 = 2049;
    v18 = v7;
    v19 = 2050;
    v20 = v8;
    v21 = 2050;
    v22 = v9;
    v23 = 2050;
    v24 = v10;
    v25 = 2049;
    v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,GNSS location notification received\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\", \"alt\":\"%{public}.2f\", \"vunc\":\"%{public}.1f\", \"speed\":\"%{private}.1f\"}", (uint8_t *)v12, 0x4Eu);
  }
}

void sub_1014AD7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  _BYTE v29[96];
  __int128 v30;
  __int128 v31;
  _BYTE v32[28];
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)(a4 + 96);
    v8 = *(_QWORD *)(a4 + 4);
    v9 = *(_QWORD *)(a4 + 12);
    v10 = *(_QWORD *)(a4 + 20);
    v11 = *(_QWORD *)(a4 + 28);
    v12 = *(_QWORD *)(a4 + 36);
    *(_QWORD *)v29 = 68290563;
    *(_WORD *)&v29[8] = 2082;
    *(_QWORD *)&v29[10] = "";
    *(_WORD *)&v29[18] = 1026;
    *(_DWORD *)&v29[20] = v7;
    *(_WORD *)&v29[24] = 2049;
    *(_QWORD *)&v29[26] = v8;
    *(_WORD *)&v29[34] = 2049;
    *(_QWORD *)&v29[36] = v9;
    *(_WORD *)&v29[44] = 2050;
    *(_QWORD *)&v29[46] = v10;
    *(_WORD *)&v29[54] = 2050;
    *(_QWORD *)&v29[56] = v11;
    *(_WORD *)&v29[64] = 2050;
    *(_QWORD *)&v29[66] = v12;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Location notification received\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\", \"alt\":\"%{public}.2f\", \"vunc\":\"%{public}.1f\"}", v29, 0x4Au);
  }
  *(_DWORD *)v29 = 0xFFFF;
  *(_OWORD *)&v29[4] = 0uLL;
  *(_OWORD *)&v29[20] = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v29[36] = _Q0;
  *(_OWORD *)&v29[52] = _Q0;
  *(_OWORD *)&v29[68] = _Q0;
  *(_DWORD *)&v29[84] = 0;
  v30 = 0uLL;
  *(_QWORD *)&v29[88] = 0xBFF0000000000000;
  LODWORD(v31) = 0;
  *(_QWORD *)((char *)&v31 + 4) = 0xBFF0000000000000;
  HIDWORD(v31) = 0x7FFFFFFF;
  memset(v32, 0, 25);
  sub_10012A33C(&v33);
  v18 = *(_OWORD *)(a4 + 112);
  v30 = *(_OWORD *)(a4 + 96);
  v31 = v18;
  *(_OWORD *)v32 = *(_OWORD *)(a4 + 128);
  *(_OWORD *)&v32[12] = *(_OWORD *)(a4 + 140);
  v19 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)&v29[32] = *(_OWORD *)(a4 + 32);
  *(_OWORD *)&v29[48] = v19;
  v20 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)&v29[64] = *(_OWORD *)(a4 + 64);
  *(_OWORD *)&v29[80] = v20;
  v21 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v29 = *(_OWORD *)a4;
  *(_OWORD *)&v29[16] = v21;
  memcpy(v22, (const void *)(a4 + 160), 0x201uLL);
  sub_100349198(&v34, (uint64_t *)(a4 + 680));
  v23 = *(_OWORD *)(a4 + 776);
  v40 = *(_OWORD *)(a4 + 760);
  v41 = v23;
  v24 = *(_OWORD *)(a4 + 712);
  v36 = *(_OWORD *)(a4 + 696);
  v37 = v24;
  v25 = *(_OWORD *)(a4 + 744);
  v38 = *(_OWORD *)(a4 + 728);
  v39 = v25;
  v42 = *(_BYTE *)(a4 + 792);
  sub_1014ADA3C(a1, (uint64_t)v29);
  v26 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1014ADA28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_1014ADA3C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  NSObject *v23;
  int v24;
  int v25;
  const char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  _BYTE v36[513];
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  int v46;
  int v47;
  uint8_t buf[4];
  int v49;

  if (sub_1014AE938(a1, a2))
  {
    v4 = *(_OWORD *)(a2 + 112);
    v33 = *(_OWORD *)(a2 + 96);
    v34 = v4;
    v35[0] = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)v35 + 12) = *(_OWORD *)(a2 + 140);
    v5 = *(_OWORD *)(a2 + 48);
    v29 = *(_OWORD *)(a2 + 32);
    v30 = v5;
    v6 = *(_OWORD *)(a2 + 80);
    v31 = *(_OWORD *)(a2 + 64);
    v32 = v6;
    v7 = *(_OWORD *)(a2 + 16);
    v27 = *(_OWORD *)a2;
    v28 = v7;
    memcpy(v36, (const void *)(a2 + 160), sizeof(v36));
    v37 = *(_QWORD *)(a2 + 680);
    v8 = *(std::__shared_weak_count **)(a2 + 688);
    v38 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v11 = *(_OWORD *)(a2 + 776);
    v43 = *(_OWORD *)(a2 + 760);
    v44 = v11;
    v12 = *(_OWORD *)(a2 + 712);
    v39 = *(_OWORD *)(a2 + 696);
    v40 = v12;
    v13 = *(_OWORD *)(a2 + 744);
    v41 = *(_OWORD *)(a2 + 728);
    v42 = v13;
    v45 = *(_BYTE *)(a2 + 792);
    v14 = *(_QWORD *)(a1 + 32);
    if (!v14)
      sub_10025FD1C();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 48))(v14, &v27);
    v15 = v38;
    if (v38)
    {
      v16 = (unint64_t *)&v38->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v19 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)buf = 67240192;
      v49 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,sendLocationToPositionAssistance,type %{public}d ", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v20 = *(_DWORD *)(a2 + 96);
      v46 = 67240192;
      v47 = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefPosMaintenance,sendLocationToPositionAssistance,type %{public}d ", &v46, 8, v27, v28, v29, v30, v31, v32, v33, v34, v35[0],
        v35[1]);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::sendLocationToPositionAssistance(const GNSS::DaemonLocation &)", "%s\n", v21);
LABEL_28:
      if (v22 != buf)
        free(v22);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v23 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v24 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)buf = 67240192;
      v49 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,sendLocationToPositionAssistance,Invalid location,%{public}d ", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v25 = *(_DWORD *)(a2 + 96);
      v46 = 67240192;
      v47 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefPosMaintenance,sendLocationToPositionAssistance,Invalid location,%{public}d ", &v46, 8);
      v22 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::sendLocationToPositionAssistance(const GNSS::DaemonLocation &)", "%s\n", v26);
      goto LABEL_28;
    }
  }
}

void sub_1014ADE28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_1014ADE44(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    v9 = *a4;
    *(_DWORD *)buf = 67109376;
    v18 = v8;
    v19 = 1024;
    v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,Data protection notification received,type,%d,data availability,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v10 = *a3;
    v11 = *a4;
    v14[0] = 67109376;
    v14[1] = v10;
    v15 = 1024;
    v16 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,Data protection notification received,type,%d,data availability,%d", v14, 14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (!*a3)
  {
    if (*a4 == 1)
    {
      if (!*(_BYTE *)(a1 + 1112))
      {
        *(_BYTE *)(a1 + 1112) = 1;
        sub_1014AE058(a1);
      }
    }
    else
    {
      *(_BYTE *)(a1 + 1112) = 0;
    }
  }
}

void sub_1014AE058(uint64_t a1)
{
  NSObject *v2;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _DWORD v37[2];
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  int v41;
  __int16 v42;
  uint64_t v43;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,device unlocked", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    LOWORD(v17) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,device unlocked", &v17, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::handlePersistentStorageOnDeviceUnlock()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (*(_DWORD *)(a1 + 944))
  {
    if (!*(_BYTE *)(a1 + 1136))
    {
      v17 = 0xFFFF;
      v19 = 0;
      v18 = 0;
      v20 = xmmword_101BAFC90;
      __asm { FMOV            V0.2D, #-1.0 }
      v21 = _Q0;
      v22 = _Q0;
      v23 = _Q0;
      v24 = 0;
      v26 = 0;
      v27 = 0;
      v25 = 0xBFF0000000000000;
      v28 = 0;
      v29 = 0xBFF0000000000000;
      v30 = 0x7FFFFFFF;
      v32 = 0;
      v33 = 0;
      v31 = 0;
      v34 = 0;
      sub_10012A33C(&v35);
      if (sub_10022D584(a1, (uint64_t)&v17))
      {
        if (!sub_100182290(a1 + 120) || *((double *)&v23 + 1) > *(double *)(a1 + 196))
        {
          sub_1014ADA3C(a1, (uint64_t)&v17);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B9A18);
          v8 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67240448;
            v41 = v26;
            v42 = 2050;
            v43 = *((_QWORD *)&v23 + 1);
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,onDeviceUnlock,send stored reference location,type %{public}d,timestamp,%{public}.1lf ", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B9A18);
            v37[0] = 67240448;
            v37[1] = v26;
            v38 = 2050;
            v39 = *((_QWORD *)&v23 + 1);
            LODWORD(v16) = 18;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefPosMaintenance,onDeviceUnlock,send stored reference location,type %{public}d,timestamp,%{public}.1lf ", v37, v16);
            v15 = (uint8_t *)v14;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::handlePersistentStorageOnDeviceUnlock()", "%s\n", v14);
            if (v15 != buf)
              free(v15);
          }
        }
        *(double *)(a1 + 1128) = sub_1001FCBB4();
        *(_BYTE *)(a1 + 1136) = 1;
        if (sub_100182290(a1 + 120))
          sub_1014AE4B4(a1);
      }
      v9 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    sub_100031C94(a1);
  }
  else if (*(_BYTE *)(a1 + 1113) && sub_1014AE4B4(a1))
  {
    *(_BYTE *)(a1 + 1113) = 0;
  }
}

void sub_1014AE490(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

BOOL sub_1014AE4B4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _BOOL8 result;
  NSObject *v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v8;
  _BOOL4 v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  if (!*(_BYTE *)(a1 + 1112))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,deleteReferencePositionFromDisk, cannot access as device is locked", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v14[0] = 0;
    v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,deleteReferencePositionFromDisk, cannot access as device is locked", v14, 2);
    v7 = v6;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssRefPosMaintenance::deleteReferencePositionFromDisk()", "%s\n", v5);
LABEL_30:
    if (v7 != buf)
      free(v7);
    return 0;
  }
  v1 = a1 + 984;
  sub_10003CA9C(a1 + 984);
  sub_100525484(v1, "CLGnssRefPosMaintenance_Latitude", 0xFFFFFFFFLL);
  sub_100525484(v1, "CLGnssRefPosMaintenance_Longitude", 0xFFFFFFFFLL);
  sub_100525484(v1, "CLGnssRefPosMaintenance_HorizontalAcc", 0xFFFFFFFFLL);
  sub_100525484(v1, "CLGnssRefPosMaintenance_Altitude", 0xFFFFFFFFLL);
  sub_100525484(v1, "CLGnssRefPosMaintenance_VerticalAcc", 0xFFFFFFFFLL);
  sub_100525484(v1, "CLGnssRefPosMaintenance_Timestamp", 0xFFFFFFFFLL);
  sub_100525484(v1, "CLGnssRefPosMaintenance_Confidence", 0xFFFFFFFFLL);
  if ((sub_10023C0E0(v1) & 1) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,deleteReferencePositionFromDisk,deleted", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,deleteReferencePositionFromDisk,deleted", v14, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssRefPosMaintenance::deleteReferencePositionFromDisk()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return 1;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,deleteReferencePositionFromDisk,not deleted", buf, 2u);
  }
  v9 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v9)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v14[0] = 0;
    v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssRefPosMaintenance,deleteReferencePositionFromDisk,not deleted", v14, 2);
    v7 = v13;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGnssRefPosMaintenance::deleteReferencePositionFromDisk()", "%s\n", v12);
    goto LABEL_30;
  }
  return result;
}

BOOL sub_1014AE938(uint64_t a1, uint64_t a2)
{
  double v3;
  _BOOL8 v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  double v13;
  NSObject *v14;
  uint64_t v15;
  double v16;
  NSObject *v17;
  uint64_t v18;
  int v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v3 = *(double *)(a2 + 20);
  v4 = v3 > 0.0;
  if (v3 <= 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a2 + 20);
      v20 = 68289282;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2050;
      v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Warning invalid assistance location\", \"horizontal accuracy\":\"%{public}f\"}", (uint8_t *)&v20, 0x1Cu);
    }
    v3 = *(double *)(a2 + 20);
  }
  if (v3 > 200000.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a2 + 20);
      v20 = 68289538;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2050;
      v25 = v8;
      v26 = 2050;
      v27 = 0x41086A0000000000;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Warning invalid assistance location\", \"horizontalAccuracy\":\"%{public}f\", \"maximumAccuracy\":\"%{public}f\"}", (uint8_t *)&v20, 0x26u);
    }
    v4 = 0;
  }
  if (sub_10011CE64(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v20 = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Warning invalid assistance location,null island\"}", (uint8_t *)&v20, 0x12u);
    }
    v4 = 0;
  }
  v10 = *(double *)(a2 + 4);
  if (v10 < -90.0 || v10 > 90.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a2 + 4);
      v20 = 68289283;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2049;
      v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Warning invalid assistance location\", \"latitude\":\"%{private}.7f\"}", (uint8_t *)&v20, 0x1Cu);
    }
    v4 = 0;
  }
  v13 = *(double *)(a2 + 12);
  if (v13 < -180.0 || v13 > 180.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_QWORD *)(a2 + 12);
      v20 = 68289283;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2049;
      v25 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Warning invalid assistance location\", \"longitude\":\"%{private}.7f\"}", (uint8_t *)&v20, 0x1Cu);
    }
    v4 = 0;
  }
  if (*(double *)(a2 + 36) > 0.0)
  {
    v16 = *(double *)(a2 + 28);
    if (v16 < -450.0 || v16 > 8850.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v17 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v18 = *(_QWORD *)(a2 + 28);
        v20 = 68289283;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        v24 = 2049;
        v25 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Warning invalid assistance location\", \"altitude\":\"%{private}.2f\"}", (uint8_t *)&v20, 0x1Cu);
      }
      return 0;
    }
  }
  return v4;
}

void sub_1014AEDC4(uint64_t a1, uint64_t a2, _DWORD *a3, CLMotionActivity *a4)
{
  NSObject *v6;
  int type;
  int v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  if (*a3 == 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      type = a4->type;
      *(_DWORD *)buf = 67240448;
      v17 = type;
      v18 = 1026;
      v19 = CLMotionActivity::isInVehicle(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,motionActivity,Type,%{public}u,isInVehicle,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v9 = qword_1022A0078;
      v10 = a4->type;
      v13[0] = 67240448;
      v13[1] = v10;
      v14 = 1026;
      v15 = CLMotionActivity::isInVehicle(a4);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#GnssRefPosMaintenance,motionActivity,Type,%{public}u,isInVehicle,%{public}d", v13, 14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onMotionActivityNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    if (a4->type)
    {
      if (CLMotionActivity::isInVehicle(a4))
        v8 = 1;
      else
        v8 = 2;
      *(_DWORD *)(a1 + 948) = v8;
    }
    else
    {
      *(_DWORD *)(a1 + 948) = 0;
    }
  }
}

void sub_1014AEFE4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  const char *v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD v23[2];
  uint8_t buf[4];
  int v25;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67240192;
    v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,LS Notification,type,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v15 = *a3;
    LODWORD(v23[0]) = 67240192;
    HIDWORD(v23[0]) = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,LS Notification,type,%{public}d", v23, 8);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if (*a3 == 4)
  {
    v9 = *(_DWORD *)(a4 + 188);
    if (*(_DWORD *)(a1 + 944) == v9)
      return;
    *(_DWORD *)(a1 + 944) = v9;
    if (v9)
    {
      if (v9 == 1)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        v10 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,LS,location service enabled,starting periodic maintenance timer", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B9A18);
          LOWORD(v23[0]) = 0;
          LODWORD(v22) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefPosMaintenance,LS,location service enabled,starting periodic maintenance timer", v23, v22);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
        *(_DWORD *)(a1 + 1140) = 1;
        sub_1014ACDD8(a1);
      }
      return;
    }
    sub_1014AF554(a1);
    if (!sub_1014AE4B4(a1))
      *(_BYTE *)(a1 + 1113) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,LS,location service disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      LOWORD(v23[0]) = 0;
      LODWORD(v22) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefPosMaintenance,LS,location service disabled", v23, v22, v23[0]);
LABEL_39:
      v19 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v14);
      if (v19 != buf)
        free(v19);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v12 = *a3;
      *(_DWORD *)buf = 67240192;
      v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,#Warning,unhandled LS notification,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v18 = *a3;
      LODWORD(v23[0]) = 67240192;
      HIDWORD(v23[0]) = v18;
      LODWORD(v22) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,#Warning,unhandled LS notification,%{public}d", v23, v22, v23[0]);
      goto LABEL_39;
    }
  }
}

double sub_1014AF554(uint64_t a1)
{
  NSObject *v2;
  double result;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Clearing cached refLoc and drive info\"}", (uint8_t *)v4, 0x12u);
  }
  sub_10021CBD4(a1 + 120);
  *(_BYTE *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 968) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 952) = 0u;
  return result;
}

void sub_1014AF648(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double v10;
  BOOL v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v18;
  double v19;
  NSObject *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  unsigned int v25;
  double v26;
  double v27;
  double v29;
  NSObject *v30;
  double v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  int v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  double v42;
  __int16 v43;
  int v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  double v52;
  __int16 v53;
  int v54;

  v4 = *(_OWORD *)(a1 + 216);
  v5 = a1 + 120;
  v6 = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(a2 + 96) = v4;
  *(_OWORD *)(a2 + 112) = v6;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 248);
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(v5 + 140);
  v7 = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 48) = v7;
  v8 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 80) = v8;
  v9 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 16) = v9;
  v10 = sub_1001FC7BC(v5, a1 + 280);
  v11 = v10 > 1.0 && (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  v12 = v10 + 0.0;
  if (!v11)
    v12 = 0.0;
  if (v10 > 0.0)
    v13 = v12;
  else
    v13 = 0.0;
  if (*(_BYTE *)(a1 + 976))
  {
    v14 = *(double *)(a1 + 952);
    v15 = v10 * 0.5;
    if (v14 <= v10 * 0.5)
    {
      if (*(double *)(a1 + 968) <= v15)
      {
        if (v14 >= v15 || v14 <= 0.0)
          v16 = 8.94075;
        else
          v16 = 17.8815;
      }
      else
      {
        v16 = 17.8815;
      }
    }
    else
    {
      v16 = 35.763;
    }
  }
  else
  {
    v16 = dbl_101CA73D0[*(_DWORD *)(a1 + 948) < 2u];
  }
  v18 = *(double *)(a2 + 20);
  if (v18 <= 0.0)
  {
    v19 = *(double *)(a2 + 20);
  }
  else
  {
    v19 = sqrt(v16 * (v13 * v13 * v16) + v18 * v18);
    *(double *)(a2 + 20) = v19;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(unsigned __int8 *)(a1 + 976);
      *(_DWORD *)buf = 134350080;
      v46 = v18;
      v47 = 2050;
      v48 = v19;
      v49 = 2050;
      v50 = *(_QWORD *)&v13;
      v51 = 2050;
      v52 = v16;
      v53 = 1026;
      v54 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,Age Propagation,Unc,%{public}.1lf,PropUnc,%{public}.1lf,PropDur,%{public}.1lf,SpeedSigma,%{public}.1lf,driveHistoryUpd,%{public}d", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v22 = *(unsigned __int8 *)(a1 + 976);
      v35 = 134350080;
      v36 = v18;
      v37 = 2050;
      v38 = v19;
      v39 = 2050;
      v40 = *(_QWORD *)&v13;
      v41 = 2050;
      v42 = v16;
      v43 = 1026;
      v44 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,Age Propagation,Unc,%{public}.1lf,PropUnc,%{public}.1lf,PropDur,%{public}.1lf,SpeedSigma,%{public}.1lf,driveHistoryUpd,%{public}d", &v35, 48);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "CLDaemonLocation CLGnssRefPosMaintenance::propagateLocationToStartOfNextMaintenancePeriod()", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  v25 = *(_DWORD *)(a1 + 948);
  if (v25 >= 2)
  {
    v26 = 17.8815;
    if (*(_BYTE *)(a1 + 976))
    {
      if (*(double *)(a1 + 960) <= 0.0)
      {
        v27 = 0.0;
      }
      else
      {
        v27 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 960);
        v25 = *(_DWORD *)(a1 + 948);
      }
      if (v25 == 2)
      {
        if (v27 > 1800.0 || *(double *)(a1 + 952) == 0.0)
          v26 = 8.94075;
        else
          v26 = 17.8815;
      }
    }
  }
  else
  {
    v26 = 35.763;
  }
  if (v19 > 0.0)
  {
    v29 = sqrt(v26 * (v26 * 810000.0) + v19 * v19);
    *(double *)(a2 + 20) = v29;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v30 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349824;
      v46 = v19;
      v47 = 2050;
      v48 = v29;
      v49 = 2050;
      v50 = 0x408C200000000000;
      v51 = 2050;
      v52 = v26;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,Maintenance period Propagation,Unc,%{public}.1lf,PropUnc,%{public}.1lf,PropDur,%{public}.1lf,SpeedSigma,%{public}.1lf", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v35 = 134349824;
      v36 = v19;
      v37 = 2050;
      v38 = v29;
      v39 = 2050;
      v40 = 0x408C200000000000;
      v41 = 2050;
      v42 = v26;
      LODWORD(v34) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,Maintenance period Propagation,Unc,%{public}.1lf,PropUnc,%{public}.1lf,PropDur,%{public}.1lf,SpeedSigma,%{public}.1lf", &v35, v34);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "CLDaemonLocation CLGnssRefPosMaintenance::propagateLocationToStartOfNextMaintenancePeriod()", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  v31 = *(double *)(a2 + 36);
  if (v31 > 0.0)
    *(double *)(a2 + 36) = sqrt((v10 + 900.0) * (v10 + 900.0) + v31 * v31);
  *(double *)(a2 + 76) = v10 + *(double *)(a2 + 76) + 900.0;
}

BOOL sub_1014AFBE8(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  _BOOL8 v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  char v10[20];
  double v11;
  uint64_t v12;
  int v13;
  double v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  double v18;
  __int16 v19;
  _BOOL4 v20;
  uint8_t buf[4];
  double v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  double v26;
  __int16 v27;
  _BOOL4 v28;

  v2 = a1 + 120;
  if (!sub_100182290(a1 + 120))
    return 0;
  v3 = sub_1001FC7BC(v2, a1 + 280);
  sub_1014AF648(a1, (uint64_t)v10);
  v4 = v11;
  v5 = v11 < 67500.0 && v3 < 7200.0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349824;
    v22 = v4;
    v23 = 2050;
    v24 = v12;
    v25 = 2050;
    v26 = v3;
    v27 = 1026;
    v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,isValidWarmPos,Propagated horizontal Unc,%{public}.1lf,Propagated vert Unc,%{public}.1lf,age,%{public}.1lf,isWarm,%{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v13 = 134349824;
    v14 = v4;
    v15 = 2050;
    v16 = v12;
    v17 = 2050;
    v18 = v3;
    v19 = 1026;
    v20 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,isValidWarmPos,Propagated horizontal Unc,%{public}.1lf,Propagated vert Unc,%{public}.1lf,age,%{public}.1lf,isWarm,%{public}d", &v13, 38);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssRefPosMaintenance::isCachedRefLocationWarm()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return v5;
}

void sub_1014AFE3C(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 920))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v1 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,startWiFiCellLocationRequest,already started", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,startWiFiCellLocationRequest,already started", v12, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::startWiFiCellLocationRequest()", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
  }
  else
  {
    if (*(_QWORD *)(a1 + 48))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,Enabling WiFi location notification", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefPosMaintenance,Enabling WiFi location notification", v12, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::startWiFiCellLocationRequest()", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), 0, 0);
    }
    if (*(_QWORD *)(a1 + 56))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,Enabling Cell location notification", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        v12[0] = 0;
        LODWORD(v11) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefPosMaintenance,Enabling Cell location notification", v12, v11);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::startWiFiCellLocationRequest()", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, 0);
    }
    *(double *)(a1 + 936) = sub_1001FCBB4();
    *(_BYTE *)(a1 + 920) = 1;
    sub_1014AD278((_QWORD *)a1);
  }
}

void sub_1014B0284(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 920))
  {
    if (*(_QWORD *)(a1 + 48))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v2 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,Disabling WiFi location notification", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefPosMaintenance,Disabling WiFi location notification", v12, 2);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::stopWiFiCellLocationRequest()", "%s\n", v5);
        if (v6 != buf)
          free(v6);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), 0);
    }
    if (*(_QWORD *)(a1 + 56))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v3 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,Disabling Cell location notification", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        v12[0] = 0;
        LODWORD(v11) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefPosMaintenance,Disabling Cell location notification", v12, v11);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::stopWiFiCellLocationRequest()", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0);
    }
    *(_BYTE *)(a1 + 920) = 0;
    sub_1014AD36C((_QWORD *)a1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,stopWiFiCellLocationRequest,already stopped", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,stopWiFiCellLocationRequest,already stopped", v12, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::stopWiFiCellLocationRequest()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

BOOL sub_1014B06B4(uint64_t a1)
{
  NSObject *v1;
  _BOOL8 result;
  double v3;
  uint8_t *v4;
  uint8_t *v5;
  NSObject *v12;
  _BOOL4 v13;
  double v14;
  uint8_t *v15;
  __int128 v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 921))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v1 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,startGnssOnDemand,already started", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      LOWORD(v16) = 0;
      v3 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,startGnssOnDemand,already started", &v16, 2);
      v5 = v4;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssRefPosMaintenance::startGnssOnDemand()", "%s\n", v3);
LABEL_22:
      if (v5 != buf)
        free(v5);
      return 0;
    }
  }
  else
  {
    if (+[CLGnssProviderAdapter isSupported](CLGnssProviderAdapter, "isSupported")
      && *(_QWORD *)(a1 + 64))
    {
      __asm { FMOV            V0.2D, #-1.0 }
      v16 = _Q0;
      v17 = 0;
      v18 = 11;
      sub_1001B3AF0();
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,failed to start Gnss", buf, 2u);
    }
    v13 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v13)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      LOWORD(v16) = 0;
      v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssRefPosMaintenance,failed to start Gnss", &v16, 2);
      v5 = v15;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGnssRefPosMaintenance::startGnssOnDemand()", "%s\n", v14);
      goto LABEL_22;
    }
  }
  return result;
}

void sub_1014B0C2C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD v11[2];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 921))
  {
    if (+[CLGnssProviderAdapter isSupported](CLGnssProviderAdapter, "isSupported"))
    {
      v2 = *(_QWORD *)(a1 + 64);
      if (v2)
      {
        objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 0);
        *(_BYTE *)(a1 + 921) = 0;
        sub_1014AD36C((_QWORD *)a1);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        v3 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#wigo,off,CLGnssRefPosMaintenance", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B9A18);
          LOWORD(v11[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,off,CLGnssRefPosMaintenance", v11, 2);
          v9 = (uint8_t *)v8;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::stopGnssOnDemand()", "%s\n", v8);
          if (v9 != buf)
            free(v9);
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        v4 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,stopGnssOnDemand,stopped Gnss", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B9A18);
          LOWORD(v11[0]) = 0;
          LODWORD(v10) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,stopGnssOnDemand,stopped Gnss", v11, v10, v11[0]);
LABEL_26:
          v7 = (uint8_t *)v5;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::stopGnssOnDemand()", "%s\n", v5);
          if (v7 != buf)
            free(v7);
        }
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,stopGnssOnDemand,already stopped Gnss session", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,stopGnssOnDemand,already stopped Gnss session", v11, 2, v11[0]);
      goto LABEL_26;
    }
  }
}

void sub_1014B0FF0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  _QWORD v34[2];
  uint8_t buf[4];
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;

  if (sub_1014AE938(a1, a2))
  {
    if (sub_10013E570(a2, a1 + 120))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,feedCachedReferenceLocation,repeated cached position ", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        LOWORD(v34[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,feedCachedReferenceLocation,repeated cached position ", v34, 2, v34[0]);
LABEL_19:
        v7 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::feedCachedReferenceLocation(const GNSS::DaemonLocation)", "%s\n", v5);
        if (v7 != buf)
          free(v7);
      }
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 136) = v8;
      v9 = *(_OWORD *)(a2 + 32);
      v10 = *(_OWORD *)(a2 + 48);
      v11 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 200) = v11;
      *(_OWORD *)(a1 + 152) = v9;
      *(_OWORD *)(a1 + 168) = v10;
      v12 = *(_OWORD *)(a2 + 96);
      v13 = *(_OWORD *)(a2 + 112);
      v14 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 260) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 232) = v13;
      *(_OWORD *)(a1 + 248) = v14;
      *(_OWORD *)(a1 + 216) = v12;
      memcpy((void *)(a1 + 280), (const void *)(a2 + 160), 0x201uLL);
      sub_100349198((_QWORD *)(a1 + 800), (uint64_t *)(a2 + 680));
      v16 = *(_OWORD *)(a2 + 712);
      v15 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a1 + 832) = v16;
      *(_OWORD *)(a1 + 848) = v15;
      v18 = *(_OWORD *)(a2 + 760);
      v17 = *(_OWORD *)(a2 + 776);
      v19 = *(_OWORD *)(a2 + 744);
      *(_BYTE *)(a1 + 912) = *(_BYTE *)(a2 + 792);
      *(_OWORD *)(a1 + 880) = v18;
      *(_OWORD *)(a1 + 896) = v17;
      *(_OWORD *)(a1 + 864) = v19;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v20 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v21 = *(_DWORD *)(a1 + 216);
        v22 = *(_QWORD *)(a1 + 124);
        v23 = *(_QWORD *)(a1 + 132);
        v24 = *(_QWORD *)(a1 + 148);
        v25 = *(_QWORD *)(a1 + 140);
        v26 = *(_QWORD *)(a1 + 156);
        *(_DWORD *)buf = 68290563;
        v36 = 0;
        v37 = 2082;
        v38 = "";
        v39 = 1026;
        v40 = v21;
        v41 = 2049;
        v42 = v22;
        v43 = 2049;
        v44 = v23;
        v45 = 2050;
        v46 = v24;
        v47 = 2050;
        v48 = v25;
        v49 = 2050;
        v50 = v26;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,feedCachedReferenceLocation\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x4Au);
      }
      if ((*(_DWORD *)(a1 + 1140) - 3) <= 1 && sub_1014AFBE8(a1))
      {
        if (*(_BYTE *)(a1 + 920))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B9A18);
          v27 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,feedCachedReferenceLocation,Disabling WiFi/Cell location notification", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B9A18);
            LOWORD(v34[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,feedCachedReferenceLocation,Disabling WiFi/Cell location notification", v34, 2);
            v30 = (uint8_t *)v29;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::feedCachedReferenceLocation(const GNSS::DaemonLocation)", "%s\n", v29);
            if (v30 != buf)
              free(v30);
          }
          sub_1014B0284(a1);
        }
        if (*(_BYTE *)(a1 + 921))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B9A18);
          v28 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,feedCachedReferenceLocation,Disabling Gnss location notification", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B9A18);
            LOWORD(v34[0]) = 0;
            LODWORD(v33) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,feedCachedReferenceLocation,Disabling Gnss location notification", v34, v33);
            v32 = (uint8_t *)v31;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::feedCachedReferenceLocation(const GNSS::DaemonLocation)", "%s\n", v31);
            if (v32 != buf)
              free(v32);
          }
          sub_1014B0C2C(a1);
        }
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,feedCachedReferenceLocation,Invalid reference location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      LOWORD(v34[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssRefPosMaintenance,feedCachedReferenceLocation,Invalid reference location", v34, 2, v34[0]);
      goto LABEL_19;
    }
  }
}

void sub_1014B166C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1014B1698(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1014B16C4()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CA7430;
      v1[3] = unk_101CA7440;
      v1[4] = xmmword_101CA7450;
      v1[0] = xmmword_101CA7410;
      v1[1] = unk_101CA7420;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1014B1798(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1014B17B0()
{
  sub_1015A2E04(qword_10230F848, "t");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230F848, (void *)&_mh_execute_header);
}

uint64_t sub_1014B17F4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;
  NSObject *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  const char *v21;
  uint8_t *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  NSObject *v40;
  int v41;
  uint64_t result;
  double v43;
  uint8_t *v44;
  uint64_t v45;
  int v46;
  double v47;
  __int16 v48;
  double v49;
  uint8_t buf[4];
  double v51;
  __int16 v52;
  double v53;

  v7 = a3[1];
  if (*a3 == v7 || (v8 = *a4, v9 = a4[1], *a4 == v9))
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_1021B9A58);
    v23 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
    {
      v24 = (a3[1] - *a3) >> 5;
      v25 = 0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 3);
      *(_DWORD *)buf = 134349312;
      v51 = *(double *)&v24;
      v52 = 2050;
      v53 = *(double *)&v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "HRSteadyStateEstimator: Insufficient samples for HRSS estimation (numHR:%{public}lu, numWR:%{public}lu)", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_55;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_1021B9A58);
    v26 = (a3[1] - *a3) >> 5;
    v27 = 0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 3);
    v46 = 134349312;
    v47 = *(double *)&v26;
    v48 = 2050;
    v49 = *(double *)&v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "HRSteadyStateEstimator: Insufficient samples for HRSS estimation (numHR:%{public}lu, numWR:%{public}lu)", &v46, 22);
    goto LABEL_65;
  }
  v10 = *(double *)(v7 - 24);
  if (v10 < *(double *)(v9 - 48))
    v10 = *(double *)(v9 - 48);
  v11 = *(double *)(a2 + 56);
  if (v11 + 180.0 >= v10)
    v12 = v10;
  else
    v12 = v11 + 180.0;
  if (v11 >= v12 + -30.0)
    v13 = *(double *)(a2 + 56);
  else
    v13 = v12 + -30.0;
  do
  {
    v14 = *(double *)(v8 + 8);
    v15 = v14 > v13 && v14 < v12;
    if (v15 && *(double *)(v8 + 16) > 5.0)
    {
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_1021B9A58);
      v16 = qword_10229FF68;
      if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(double *)(v8 + 8);
        v18 = *(double *)(v8 + 16);
        *(_DWORD *)buf = 134349312;
        v51 = v17;
        v52 = 2050;
        v53 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "HRSteadyStateEstimator: Found METs above threshold during steady state period (startTime:%{public}f, METs:%{public}f)", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_1021B9A58);
        v19 = *(double *)(v8 + 8);
        v20 = *(double *)(v8 + 16);
        v46 = 134349312;
        v47 = v19;
        v48 = 2050;
        v49 = v20;
        LODWORD(v45) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "HRSteadyStateEstimator: Found METs above threshold during steady state period (startTime:%{public}f, METs:%{public}f)", &v46, v45);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLHRSteadyStateEstimator::getEstimate(HRRecoveryResult &, const std::vector<HRRecoveryInputHR> &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
    }
    v8 += 56;
  }
  while (v8 != v9);
  v29 = *(double *)(a2 + 56);
  v30 = v29 + 120.0;
  if (v29 + 120.0 >= v12)
    v30 = v12;
  if (v29 < v30 + -30.0)
    v29 = v30 + -30.0;
  v31 = *a3;
  v32 = a3[1];
  if (*a3 == v32)
    goto LABEL_50;
  v33 = 0.0;
  v34 = 0.0;
  v35 = 0.0;
  v36 = 0.0;
  do
  {
    v37 = *(double *)(v31 + 8);
    if (v37 > v13 && v37 < v12)
    {
      v36 = v36 + 1.0;
      v38 = *(double *)(v31 + 16);
    }
    else
    {
      v38 = -0.0;
    }
    v35 = v35 + v38;
    if (v37 > v29 && v37 < v30)
    {
      v34 = v34 + 1.0;
      v39 = *(double *)(v31 + 16);
    }
    else
    {
      v39 = -0.0;
    }
    v33 = v33 + v39;
    v31 += 32;
  }
  while (v31 != v32);
  if (v36 == 0.0)
  {
LABEL_50:
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_1021B9A58);
    v40 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349312;
      v51 = v13;
      v52 = 2050;
      v53 = v12;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "HRSteadyStateEstimator: No HRSS estimate due to no HR samples in steady state period (start:%{public}f, end:%{public}f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_55;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_1021B9A58);
    v46 = 134349312;
    v47 = v13;
    v48 = 2050;
    v49 = v12;
    LODWORD(v45) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "HRSteadyStateEstimator: No HRSS estimate due to no HR samples in steady state period (start:%{public}f, end:%{public}f", &v46, v45);
LABEL_65:
    v44 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHRSteadyStateEstimator::getEstimate(HRRecoveryResult &, const std::vector<HRRecoveryInputHR> &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v28);
    if (v44 != buf)
      free(v44);
LABEL_55:
    v41 = 7;
LABEL_56:
    result = 0;
    *(_DWORD *)a2 = v41;
    return result;
  }
  v43 = v35 / v36;
  if (v33 / v34 < v35 / v36)
    v43 = v33 / v34;
  *(double *)(a2 + 72) = v43;
  if (v43 > *(double *)(a2 + 64))
  {
    v41 = 8;
    goto LABEL_56;
  }
  return 1;
}

void sub_1014B1E00(id a1)
{
  qword_10229FF68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

float sub_1014B1E2C(float a1, float a2)
{
  return fmax((a1 * 3.5 + -7.0) / 10.8 * a2, 0.0);
}

float sub_1014B1E60(uint64_t a1)
{
  float result;

  result = *(float *)(a1 + 44);
  if (result <= 7.0)
    return *(float *)(a1 + 16);
  return result;
}

BOOL sub_1014B1E78(float a1)
{
  return a1 <= 10.0 && a1 >= 1.0;
}

BOOL sub_1014B1E94(unint64_t a1)
{
  return sub_1014B1EB0(a1) != 66;
}

uint64_t sub_1014B1EB0(unint64_t a1)
{
  if (a1 > 0x42)
    return 4;
  else
    return qword_101CA7468[a1];
}

float sub_1014B1ED0(_QWORD *a1, __n128 *a2)
{
  uint64_t i;
  unint64_t v5;

  sub_1014B1F60(a1, a2);
  for (i = a1[5]; i; i = a1[5])
  {
    v5 = a1[4];
    if (vabdd_f64(*(double *)(*(_QWORD *)(a1[1] + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v5), a2->n128_f64[0]) <= 60.0)break;
    a1[4] = v5 + 1;
    a1[5] = i - 1;
    sub_1004A57E8((uint64_t)a1, 1);
  }
  return sub_1014B1FE8(a1);
}

__n128 sub_1014B1F60(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1014B2094(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

float sub_1014B1FE8(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1[1];
  if (a1[2] == v1)
  {
    v2 = a1[5];
  }
  else
  {
    v3 = a1[4];
    v2 = a1[5];
    v4 = (uint64_t *)(v1 + 8 * (v3 >> 8));
    v5 = *v4;
    v6 = *v4 + 16 * v3;
    v7 = *(_QWORD *)(v1 + (((v2 + v3) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (v2 + v3);
    if (v6 != v7)
    {
      v8 = 0.0;
      do
      {
        v9 = v6 + 16;
        if (v6 + 16 - v5 == 4096)
        {
          v10 = v4[1];
          ++v4;
          v5 = v10;
          v9 = v10;
        }
        v8 = v8 + *(float *)(v6 + 8);
        v6 = v9;
      }
      while (v9 != v7);
      if (v2)
        return v8 / (float)v2;
      return 0.0;
    }
  }
  v8 = 0.0;
  if (v2)
    return v8 / (float)v2;
  return 0.0;
}

float sub_1014B2078(uint64_t a1)
{
  return (double)*(unint64_t *)(a1 + 40) / 23.4375;
}

void sub_1014B2094(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1014B235C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float sub_1014B23A8(uint64_t a1, uint64_t a2)
{
  float v2;
  int v3;
  int v4;
  uint64_t v5;
  float v6;
  _QWORD v8[3];
  char v9;
  _UNKNOWN **v10;
  int v11;
  uint64_t v12;
  float v13;
  int v14;
  int32x2_t v15;
  int v16;
  __int128 v17;
  int32x4_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  float v23;
  __int128 v24;
  __int128 v25;

  v12 = *(_QWORD *)(a2 + 4);
  v2 = *(double *)(a2 + 104);
  v3 = *(_DWORD *)(a2 + 12);
  v13 = v2;
  v14 = v3;
  v15 = vrev64_s32(*(int32x2_t *)(a2 + 20));
  v16 = *(_DWORD *)(a2 + 28);
  v17 = *(_OWORD *)(a2 + 40);
  v18 = vuzp2q_s32(*(int32x4_t *)(a2 + 56), vrev64q_s32(*(int32x4_t *)(a2 + 56)));
  v19 = *(_DWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v4 = *(_DWORD *)(a2 + 160);
  v21 = *(_DWORD *)(a2 + 136);
  v22 = v4;
  v24 = 0u;
  v25 = 0u;
  v5 = sub_1014B1EB0(*(_QWORD *)(a2 + 88));
  v6 = 0.0;
  if (v5 == 17)
    v6 = 1.0;
  v8[2] = 27;
  v9 = 1;
  v10 = &off_1021B9C28;
  v23 = v6;
  v8[0] = off_1021B9E38;
  v8[1] = &off_1021B9A78;
  v11 = 1056964608;
  return sub_1014B2494((uint64_t)v8, (uint64_t)&v12);
}

float sub_1014B2494(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  float v5;
  unint64_t v6;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_11;
  v4 = 0;
  v5 = 0.0;
  do
  {
    v5 = v5 + sub_1014B266C((_QWORD *)a1, a2, v4++);
    v6 = *(_QWORD *)(a1 + 16);
  }
  while (v4 < v6);
  if (!v6)
  {
LABEL_11:
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_101957750();
    __assert_rtn("evaluateForest", "CMRandomForestXGBoostedRegression.h", 49, "false");
  }
  return v5 + *(float *)(a1 + 40);
}

uint64_t sub_1014B253C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  float *v6;
  float v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  float v10;
  BOOL v11;
  unsigned __int16 *v12;
  int v13;

  if (*(_QWORD *)(a1 + 16) <= a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1019578AC();
    __assert_rtn("findLeaf", "CMRandomForest.h", 56, "false");
  }
  v3 = 0;
  v4 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * a3);
  do
  {
    if (v3 >= v4[1])
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_101957838();
      __assert_rtn("findLeaf", "CMRandomForest.h", 91, "false");
    }
    v5 = *(unsigned __int16 *)(*v4 + 10 * v3 + 4);
    if (v5 >= 0x1D)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_1019577C4();
      __assert_rtn("findLeaf", "CMRandomForest.h", 65, "false");
    }
    v6 = (float *)(*v4 + 10 * v3);
    v7 = *(float *)(a2 + 4 * v5);
    v8 = (unsigned __int16 *)v6 + 3;
    v10 = *v6;
    v9 = (unsigned __int16 *)(v6 + 2);
    v11 = v7 > v10;
    if (v7 >= v10)
      v12 = v9;
    else
      v12 = v8;
    if (!v11)
      v9 = v8;
    if (*(_BYTE *)(a1 + 24))
      v9 = v12;
    v13 = (__int16)*v9;
    v3 = *v9;
  }
  while ((v13 & 0x80000000) == 0);
  return (__int16)~(_WORD)v3;
}

float sub_1014B266C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;

  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  if (v5 == -1)
    return 0.0;
  v6 = a1[4];
  if (*(_QWORD *)(v6 + 16 * a3 + 8) <= (unint64_t)(unsigned __int16)v5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_101957920();
    __assert_rtn("evaluateTree", "CMRandomForestRegression.h", 58, "false");
  }
  return *(float *)(*(_QWORD *)(v6 + 16 * a3) + 4 * (unsigned __int16)v5);
}

void sub_1014B2704(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

double sub_1014B2728@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
  return CFAbsoluteTimeGetCurrent();
}

uint64_t sub_1014B2738(uint64_t a1, void *a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_1021B9EA0;
  *(_QWORD *)(a1 + 8) = objc_msgSend(a2, "newTimer");
  v4 = 0x40D5180000000000;
  sub_1018BEA14((unsigned __int8 *)(a1 + 16), "WorkoutEffortAnalyticsTimerSnoozeIntervalSeconds", &v4, 0);
  v4 = 0x40AC200000000000;
  sub_1018BEA14((unsigned __int8 *)(a1 + 40), "WorkoutEffortAnalyticsTimerFireDelay", &v4, 0);
  objc_msgSend(*(id *)(a1 + 8), "setNextFireDelay:interval:", *(double *)(a1 + 48), *(double *)(a1 + 24));
  return a1;
}

uint64_t sub_1014B27D4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B9EA0;
  objc_msgSend(*(id *)(a1 + 8), "invalidate");

  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void sub_1014B281C(uint64_t a1)
{
  sub_1014B27D4(a1);
  operator delete();
}

void sub_1014B2840(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  _QWORD v9[4];
  _BYTE v10[24];
  _BYTE *v11;
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 8))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3321888768;
    v9[2] = sub_1014B2A8C;
    v9[3] = &unk_1021B9EB8;
    v3 = v10;
    sub_100270E34((uint64_t)v10, a2);
    objc_msgSend(*(id *)(a1 + 8), "setHandler:", v9);
    if (v11 == v10)
    {
      v4 = 4;
    }
    else
    {
      if (!v11)
        return;
      v4 = 5;
      v3 = v11;
    }
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  else
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
    v5 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "AnalyticsLogger, timer unexpectedly nil when setting handler function", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 17, "AnalyticsLogger, timer unexpectedly nil when setting handler function", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLWorkoutEffortAnalyticsLogger::Timer::setHandler(OnTimerFireHandler)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_1014B2A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  _QWORD *v20;
  uint64_t v22;

  if (a20 == v20)
  {
    v22 = 4;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v22 = 5;
    v20 = a20;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v22))(v20);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014B2A8C(uint64_t a1)
{
  uint64_t v2;
  CFAbsoluteTime Current;

  Current = CFAbsoluteTimeGetCurrent();
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, CFAbsoluteTime *))(*(_QWORD *)v2 + 48))(v2, &Current);
}

uint64_t sub_1014B2AD4(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_1014B2AE0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1014B2B14(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void (***v11)(_QWORD, _QWORD *);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;

  *(_QWORD *)a1 = off_1021B9EF8;
  *(_QWORD *)(a1 + 8) = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v15 = 0x402C000000000000;
  sub_1018BEA14((unsigned __int8 *)(a1 + 24), "WorkoutEffortAnalyticsDaysToDelayAnalyticsLogging", &v15, 0);
  *(_QWORD *)(a1 + 56) = *a3;
  *(_QWORD *)(a1 + 48) = 0xBFF0000000000000;
  v8 = a3[1];
  *(_QWORD *)(a1 + 64) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 3;
  *(_QWORD *)(a1 + 128) = 0;
  v11 = *(void (****)(_QWORD, _QWORD *))(a1 + 8);
  if (v11)
  {
    v16[0] = off_1021B9F80;
    v16[1] = a1;
    v17 = v16;
    (**v11)(v11, v16);
    v12 = v17;
    if (v17 == v16)
    {
      v13 = 4;
      v12 = v16;
      goto LABEL_12;
    }
    if (v17)
    {
      v13 = 5;
LABEL_12:
      (*(void (**)(void))(*v12 + 8 * v13))();
    }
  }
  return a1;
}

void sub_1014B2C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == v16)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  sub_1014B6A24(v15);
  sub_100261F44(v14);
  sub_100261F44(v13);
  _Unwind_Resume(a1);
}

_QWORD *sub_1014B2CD8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1021B9EF8;
  v2 = (uint64_t)(a1 + 1);
  sub_1014B6A24(a1 + 9);
  sub_100261F44((uint64_t)(a1 + 7));
  sub_100261F44(v2);
  return a1;
}

void sub_1014B2D24(_QWORD *a1)
{
  sub_1014B2CD8(a1);
  operator delete();
}

void sub_1014B2D48(uint64_t a1, double a2)
{
  NSObject *v4;
  double v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint8_t *v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  double v20;
  int v21;
  double v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  if (*(_DWORD *)(a1 + 120) != 3 || *(_QWORD *)(a1 + 112))
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
    v4 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "AnalyticsLogger, update, metrics aggregation triggered while existing query was running, progress will be lost", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      LOWORD(v21) = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 17, "AnalyticsLogger, update, metrics aggregation triggered while existing query was running, progress will be lost", &v21, *(_QWORD *)&v20);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "void CLWorkoutEffortAnalyticsLogger::update(CFAbsoluteTime)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  sub_1014B3380(a1);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) != 0)
  {
    v5 = sub_1014B352C(a1, a2);
    *(double *)(a1 + 48) = v5;
    v6 = vcvtmd_s64_f64(v5 / 86400.0);
    HIDWORD(v20) = 0x7FFFFFFF;
    v7 = sub_1001FD94C();
    if (sub_1001E4B84(v7, (const char *)objc_msgSend(CFSTR("WorkoutEffortAnalyticsDayLastEventSent"), "UTF8String"), (_DWORD *)&v20 + 1)&& SHIDWORD(v20) >= v6)
    {
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v8 = qword_10229FFD8;
      if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 134218752;
        v30 = a2;
        v31 = 2048;
        v32 = v9;
        v33 = 1024;
        v34 = v6;
        v35 = 1024;
        v36 = HIDWORD(v20);
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AnalyticsLogger, update, already logged metrics, updateTime, %.2f, dayOfInterestStartTime, %.2f, dayOfInterest, %d, dayLastEventSent, %d", buf, 0x22u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFD0 != -1)
          dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 0, "AnalyticsLogger, update, already logged metrics, updateTime, %.2f, dayOfInterestStartTime, %.2f, dayOfInterest, %d, dayLastEventSent, %d", &v21);
LABEL_27:
        v12 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::update(CFAbsoluteTime)", "%s\n", v10);
        if (v12 != buf)
          free(v12);
      }
    }
    else
    {
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v13 = qword_10229FFD8;
      if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 134218752;
        v30 = a2;
        v31 = 2048;
        v32 = v14;
        v33 = 1024;
        v34 = v6;
        v35 = 1024;
        v36 = HIDWORD(v20);
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "AnalyticsLogger, update, attempting to log metrics for new day, updateTime, %.2f, dayOfInterestStartTime, %.2f, dayOfInterest, %d, dayLastEventSent, %d", buf, 0x22u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFD0 != -1)
          dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
        v17 = *(_QWORD *)(a1 + 48);
        v21 = 134218752;
        v22 = a2;
        v23 = 2048;
        v24 = v17;
        v25 = 1024;
        v26 = v6;
        v27 = 1024;
        v28 = HIDWORD(v20);
        LODWORD(v20) = 34;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 0, "AnalyticsLogger, update, attempting to log metrics for new day, updateTime, %.2f, dayOfInterestStartTime, %.2f, dayOfInterest, %d, dayLastEventSent, %d", COERCE_DOUBLE(&v21), v20);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::update(CFAbsoluteTime)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      *(_DWORD *)(a1 + 120) = 0;
      sub_1014B35B4(a1);
    }
  }
  else
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
    v11 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "AnalyticsLogger, update, IHA disabled, no work needed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "AnalyticsLogger, update, IHA disabled, no work needed");
      goto LABEL_27;
    }
  }
}

_QWORD *sub_1014B3380(uint64_t a1)
{
  NSObject *v2;
  _QWORD *result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
  v2 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "AnalyticsLogger, resetting query state", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 1, "AnalyticsLogger, resetting query state", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::resetQueryState()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_DWORD *)(a1 + 120) = 3;
  result = sub_1014B6C5C((_QWORD *)(a1 + 72), 0, 0);
  *(_QWORD *)(a1 + 128) = 0;
  return result;
}

double sub_1014B352C(uint64_t a1, double a2)
{
  uint64_t v4;

  v4 = -[NSTimeZone secondsFromGMTForDate:](+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"), "secondsFromGMTForDate:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"));
  return (double)(86400 * (int)((double)(int)vcvtmd_s64_f64(((double)v4 + a2) / 86400.0) - *(double *)(a1 + 32)))
       - (double)v4;
}

void sub_1014B35B4(uint64_t a1)
{
  NSObject *v2;
  std::string *v3;
  unint64_t v4;
  unsigned int v5;
  std::string *p_p;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t i;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t *v17;
  double v18;
  NSDictionary *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  std::string *v23;
  std::string::size_type v24;
  const char *v25;
  uint8_t *v26;
  NSObject *v27;
  uint64_t v28;
  std::string *v29;
  std::string::size_type v30;
  unsigned int v31;
  std::string *v32;
  char *v33;
  char *v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  std::string v38;
  std::string __p;
  std::string v40;
  std::string *v41;
  uint8_t buf[4];
  std::string *v43;
  __int16 v44;
  _BYTE v45[18];
  __int128 v46;
  uint64_t v47;

  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
  v2 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
  {
    sub_1014B3DA4(*(_DWORD *)(a1 + 120), &v40);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v3 = &v40;
    else
      v3 = (std::string *)v40.__r_.__value_.__r.__words[0];
    v4 = *(_QWORD *)(a1 + 112);
    if (v4 < 2)
      v5 = 3;
    else
      v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * (*(_QWORD *)(a1 + 104) / 0x24uLL))
                     + 112 * (*(_QWORD *)(a1 + 104) % 0x24uLL)
                     + 80);
    sub_1014B3DA4(v5, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    v43 = v3;
    v44 = 2048;
    *(_QWORD *)v45 = v4;
    *(_WORD *)&v45[8] = 2080;
    *(_QWORD *)&v45[10] = p_p;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "AnalyticsLogger, runNextPendingQuery, workoutsQueryState, %s, eventDataQueueSize, %zu, nextEventDataQueryState, %s", buf, 0x20u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
    v28 = qword_10229FFD8;
    sub_1014B3DA4(*(_DWORD *)(a1 + 120), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &__p;
    else
      v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v30 = *(_QWORD *)(a1 + 112);
    if (v30 < 2)
      v31 = 3;
    else
      v31 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * (*(_QWORD *)(a1 + 104) / 0x24uLL))
                      + 112 * (*(_QWORD *)(a1 + 104) % 0x24uLL)
                      + 80);
    sub_1014B3DA4(v31, &v38);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v38;
    else
      v32 = (std::string *)v38.__r_.__value_.__r.__words[0];
    LODWORD(v40.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
    WORD2(v40.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 6) = v30;
    HIWORD(v40.__r_.__value_.__r.__words[2]) = 2080;
    v41 = v32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 1, "AnalyticsLogger, runNextPendingQuery, workoutsQueryState, %s, eventDataQueueSize, %zu, nextEventDataQueryState, %s", (const char *)&v40, 32, v38.__r_.__value_.__l.__data_);
    v34 = v33;
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::runNextPendingQuery()", "%s\n", v34);
    if (v34 != (char *)buf)
      free(v34);
  }
  if (*(_DWORD *)(a1 + 120) == 2)
  {
    if (*(_QWORD *)(a1 + 112))
    {
      v7 = *(_QWORD *)(a1 + 104);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * (v7 / 0x24));
      v9 = v7 % 0x24;
      if (*(_DWORD *)(v8 + 112 * v9 + 80) == 2)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) != 0)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * (*(_QWORD *)(a1 + 104) / 0x24uLL))
              + 112 * (*(_QWORD *)(a1 + 104) % 0x24uLL);
          v11 = *(_QWORD *)(v10 + 56);
          for (i = *(_QWORD *)(v10 + 64); v11 != i; v11 += 56)
          {
            sub_100F72A08(buf, (const unsigned __int8 *)v11);
            v13 = *(_OWORD *)(v11 + 16);
            v14 = *(_OWORD *)(v11 + 32);
            v47 = *(_QWORD *)(v11 + 48);
            *(_OWORD *)&v45[2] = v13;
            v46 = v14;
            v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * (*(_QWORD *)(a1 + 104) / 0x24uLL))
                + 112 * (*(_QWORD *)(a1 + 104) % 0x24uLL);
            v16 = *(_BYTE *)(v15 + 48) != 0;
            v40.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
            v17 = sub_1014B8038((uint64_t **)(v15 + 88), buf, (uint64_t)&unk_101B9EB60, (const unsigned __int8 **)&v40);
            v19 = sub_1014B4614(v18, (uint64_t)v17, v16, (uint64_t)buf, (uint64_t)(v17 + 6));
            (*(void (**)(uint64_t, NSDictionary *))(*(_QWORD *)a1 + 16))(a1, v19);
          }
          ++*(_QWORD *)(a1 + 128);
          sub_1014B47C8((int64x2_t *)(a1 + 72));
          sub_1014B35B4(a1);
        }
        else
        {
          if (qword_10229FFD0 != -1)
            dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
          v27 = qword_10229FFD8;
          if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "AnalyticsLogger, IHA disabled, aborting sending aggregated metrics", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FFD0 != -1)
              dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
            LOWORD(v40.__r_.__value_.__l.__data_) = 0;
            LODWORD(v37) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 1, "AnalyticsLogger, IHA disabled, aborting sending aggregated metrics", &v40, v37);
            v36 = (uint8_t *)v35;
            sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::runNextPendingQuery()", "%s\n", v35);
            if (v36 != buf)
              free(v36);
          }
          sub_1014B3380(a1);
        }
      }
      else
      {
        sub_1014B421C(a1, v8 + 112 * v9);
      }
    }
    else
    {
      sub_1014B3380(a1);
      LODWORD(__p.__r_.__value_.__l.__data_) = vcvtmd_s64_f64(*(double *)(a1 + 48) / 86400.0);
      v20 = sub_1001FD94C();
      sub_10011B4E4(v20, (const char *)objc_msgSend(CFSTR("WorkoutEffortAnalyticsDayLastEventSent"), "UTF8String"), &__p);
      v21 = sub_1001FD94C();
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 944))(v21);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v22 = qword_10229FFD8;
      if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(std::string **)(a1 + 48);
        *(_DWORD *)buf = 134218240;
        v43 = v23;
        v44 = 1024;
        *(_DWORD *)v45 = __p.__r_.__value_.__l.__data_;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "AnalyticsLogger, successfully completed logging events for day of interest, startTime, %.2f, wholeDay, %d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFD0 != -1)
          dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
        v24 = *(_QWORD *)(a1 + 48);
        LODWORD(v40.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = v24;
        WORD2(v40.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v40.__r_.__value_.__r.__words[1] + 6) = __p.__r_.__value_.__l.__data_;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 0, "AnalyticsLogger, successfully completed logging events for day of interest, startTime, %.2f, wholeDay, %d", COERCE_DOUBLE(&v40), 18);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::runNextPendingQuery()", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
    }
  }
  else
  {
    sub_1014B3E18(a1);
  }
}

void sub_1014B3D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_1014B3DA4@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;

  sub_1015A2E04(a2, "");
  if (a1 >= 4)
    v4 = "Unhandled query state";
  else
    v4 = off_1021BA110[a1];
  return std::string::assign(a2, v4);
}

void sub_1014B3DFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1014B3E18(uint64_t a1)
{
  NSObject *v2;
  std::string *v3;
  uint64_t v4;
  std::string *p_buf;
  std::string *v6;
  std::string *v7;
  uint64_t v8;
  double v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  std::string *v14;
  _QWORD v15[3];
  _QWORD *v16;
  std::string buf;
  int v18;
  std::string *v19;
  std::string __p[68];

  if (*(_DWORD *)(a1 + 120))
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
    v2 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_FAULT))
    {
      sub_1014B3DA4(*(_DWORD *)(a1 + 120), __p);
      v3 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? __p
         : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "AnalyticsLogger, queryWorkouts, called in unexpected state, %s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v4 = qword_10229FFD8;
      sub_1014B3DA4(*(_DWORD *)(a1 + 120), &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      v18 = 136315138;
      v19 = p_buf;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v4, 17, "AnalyticsLogger, queryWorkouts, called in unexpected state, %s", (const char *)&v18);
      v7 = v6;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 0, "void CLWorkoutEffortAnalyticsLogger::queryWorkouts()", "%s\n", (const char *)v7);
      if (v7 != __p)
        free(v7);
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 56);
    if (v8)
    {
      *(_DWORD *)(a1 + 120) = 1;
      v9 = *(double *)(a1 + 48);
      v15[0] = off_1021BA000;
      v15[1] = a1;
      v16 = v15;
      (*(void (**)(uint64_t, uint64_t, _QWORD *, double, double))(*(_QWORD *)v8 + 24))(v8, 10, v15, v9, v9 + 86399.0);
      v10 = v16;
      if (v16 == v15)
      {
        v11 = 4;
        v10 = v15;
      }
      else
      {
        if (!v16)
          return;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
    }
    else
    {
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v12 = qword_10229FFD8;
      if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "AnalyticsLogger, queryWorkouts, hk query wrapper object unexpectedly nil", (uint8_t *)__p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_10229FFD0 != -1)
          dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFD8, 17, "AnalyticsLogger, queryWorkouts, hk query wrapper object unexpectedly nil", &buf, 2);
        v14 = (std::string *)v13;
        sub_100512490("Generic", 1, 0, 0, "void CLWorkoutEffortAnalyticsLogger::queryWorkouts()", "%s\n", v13);
        if (v14 != __p)
          free(v14);
      }
      sub_1014B3380(a1);
    }
  }
}

void sub_1014B41DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1014B421C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  std::string *v4;
  uint64_t v5;
  std::string *p_buf;
  std::string *v7;
  std::string *v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  std::string *v15;
  _QWORD v16[3];
  _QWORD *v17;
  std::string buf;
  int v19;
  std::string *v20;
  std::string __p[68];

  if (*(_DWORD *)(a2 + 80))
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
    v3 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_FAULT))
    {
      sub_1014B3DA4(*(_DWORD *)(a2 + 80), __p);
      v4 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? __p
         : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "AnalyticsLogger, queryWorkoutEffort, called in unexpected state, %s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v5 = qword_10229FFD8;
      sub_1014B3DA4(*(_DWORD *)(a2 + 80), &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      v19 = 136315138;
      v20 = p_buf;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v5, 17, "AnalyticsLogger, queryWorkoutEffort, called in unexpected state, %s", (const char *)&v19);
      v8 = v7;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 0, "void CLWorkoutEffortAnalyticsLogger::queryWorkoutEffort(EventData &)", "%s\n", (const char *)v8);
      if (v8 != __p)
        free(v8);
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 56);
    if (v10)
    {
      *(_DWORD *)(a2 + 80) = 1;
      v16[0] = off_1021BA090;
      v16[1] = a1;
      v17 = v16;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v10 + 32))(v10, a2, v16);
      v11 = v17;
      if (v17 == v16)
      {
        v12 = 4;
        v11 = v16;
      }
      else
      {
        if (!v17)
          return;
        v12 = 5;
      }
      (*(void (**)(void))(*v11 + 8 * v12))();
    }
    else
    {
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v13 = qword_10229FFD8;
      if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "AnalyticsLogger, queryWorkoutEffort, hk query wrapper object unexpectedly nil", (uint8_t *)__p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_10229FFD0 != -1)
          dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFD8, 17, "AnalyticsLogger, queryWorkoutEffort, hk query wrapper object unexpectedly nil", &buf, 2);
        v15 = (std::string *)v14;
        sub_100512490("Generic", 1, 0, 0, "void CLWorkoutEffortAnalyticsLogger::queryWorkoutEffort(EventData &)", "%s\n", v14);
        if (v15 != __p)
          free(v15);
      }
      sub_1014B3380(a1);
    }
  }
}

void sub_1014B45D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_1014B4614(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v8;
  double v9;
  _QWORD v11[9];
  _QWORD v12[9];

  if (*(float *)(a5 + 56) == -1.0)
  {
    v8 = -1.0;
  }
  else
  {
    a1 = *(double *)(a5 + 48) - *(double *)(a4 + 24);
    v8 = a1 / 3600.0;
  }
  v11[0] = CFSTR("estimatedEffort");
  LODWORD(a1) = *(_DWORD *)(a5 + 88);
  v12[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", a1);
  v12[1] = &off_10221DCE8;
  v11[1] = CFSTR("estimatedEffortPreBiasCorrection");
  v11[2] = CFSTR("userEnteredEffort");
  LODWORD(v9) = *(_DWORD *)(a5 + 56);
  v12[2] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v9);
  v11[3] = CFSTR("isMultisport");
  v12[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a3);
  v11[4] = CFSTR("swimWorkoutLocation");
  v12[4] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a4 + 48));
  v11[5] = CFSTR("workoutLocation");
  v12[5] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a4 + 40));
  v11[6] = CFSTR("workoutType");
  v12[6] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a4 + 32));
  v11[7] = CFSTR("totalDuration");
  v12[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (*(double *)(a4 + 24) - *(double *)(a4 + 16)) / 60.0);
  v11[8] = CFSTR("timeFromWorkoutEndToUserEntry");
  v12[8] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v8);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 9);
}

uint64_t sub_1014B47C8(int64x2_t *a1)
{
  sub_1014B6B60((uint64_t)&a1[2].i64[1], *(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x24uLL)) + 112 * (a1[2].i64[0] % 0x24uLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101B9DFC0);
  return sub_101109E6C((uint64_t)a1, 1);
}

void sub_1014B483C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  NSObject *v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  NSObject *v11;
  std::string *p_p;
  uint64_t v13;
  _BYTE *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  std::string *p_buf;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE v24[12];
  char v25;
  int v26;
  _BYTE *v27;
  std::string buf;
  __int128 v29;
  char v30;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  std::string __p;
  __int128 v35;
  char v36;
  void *v37;
  void *v38;
  uint64_t v39;
  int v40;
  _QWORD **v41;
  _QWORD *v42[192];

  v3 = a1;
  if (a2 == 100)
  {
    if (*(_DWORD *)(a1 + 120) != 1)
    {
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v6 = qword_10229FFD8;
      if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
      {
        sub_1014B3DA4(*(_DWORD *)(v3 + 120), &__p);
        v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "AnalyticsLogger, queryWorkouts, #warning returned to unexpected query state, %s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v3 = a1;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_10229FFD0 != -1)
          dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
        v17 = qword_10229FFD8;
        sub_1014B3DA4(*(_DWORD *)(a1 + 120), &buf);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        *(_DWORD *)v24 = 136315138;
        *(_QWORD *)&v24[4] = p_buf;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v17, 1, "AnalyticsLogger, queryWorkouts, #warning returned to unexpected query state, %s", v24);
        v20 = v19;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::handleWorkoutQueryResults(CMError, const std::vector<CLWorkoutEffortHealthKitQueryInterface::WorkoutSessionSample> &)", "%s\n", (const char *)v20);
        if (v20 != &__p)
          free(v20);
        v3 = a1;
      }
    }
    v22 = v3;
    *(_DWORD *)(v3 + 120) = 2;
    v8 = *a3;
    v9 = a3[1];
    if (*a3 != v9)
    {
      v23 = (_QWORD *)(v3 + 72);
      do
      {
        sub_100F72A08((unsigned __int8 *)&buf, (const unsigned __int8 *)v8);
        sub_100F72A08((unsigned __int8 *)&buf.__r_.__value_.__s.__data_[16], (const unsigned __int8 *)(v8 + 16));
        v10 = *(_OWORD *)(v8 + 32);
        v30 = *(_BYTE *)(v8 + 48);
        v29 = v10;
        v32 = 0;
        v33 = 0;
        v31 = 0;
        sub_1014B66F0((unsigned __int8 *)&v31, *(_QWORD *)(v8 + 56), *(_QWORD *)(v8 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56)) >> 3));
        if (qword_10229FFD0 != -1)
          dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
        v11 = qword_10229FFD8;
        if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
        {
          sub_1014B4E30((uint64_t)&buf, &__p);
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)v24 = 136315138;
          *(_QWORD *)&v24[4] = p_p;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "AnalyticsLogger, queryWorkouts, appending queue with workoutSessionSample, %s", v24, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_10229FFD0 != -1)
            dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
          v13 = qword_10229FFD8;
          sub_1014B4E30((uint64_t)&buf, v24);
          v14 = v24;
          if (v25 < 0)
            v14 = *(_BYTE **)v24;
          v26 = 136315138;
          v27 = v14;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v13, 1, "AnalyticsLogger, queryWorkouts, appending queue with workoutSessionSample, %s", (const char *)&v26);
          if (v25 < 0)
          {
            v16 = v15;
            operator delete(*(void **)v24);
            v15 = v16;
          }
          v21 = (std::string *)v15;
          sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::handleWorkoutQueryResults(CMError, const std::vector<CLWorkoutEffortHealthKitQueryInterface::WorkoutSessionSample> &)", "%s\n", v15);
          if (v21 != &__p)
            free(v21);
        }
        sub_100F72A08((unsigned __int8 *)&__p, (const unsigned __int8 *)&buf);
        sub_100F72A08((unsigned __int8 *)&__p.__r_.__value_.__s.__data_[16], (const unsigned __int8 *)&buf.__r_.__value_.__s.__data_[16]);
        v35 = v29;
        v36 = v30;
        v38 = 0;
        v39 = 0;
        v37 = 0;
        sub_1014B66F0((unsigned __int8 *)&v37, (uint64_t)v31, (uint64_t)v32, 0x6DB6DB6DB6DB6DB7 * ((v32 - (_BYTE *)v31) >> 3));
        v40 = 0;
        v42[0] = 0;
        v42[1] = 0;
        v41 = v42;
        sub_1014B51BC(v23, (uint64_t)&__p);
        sub_100008848((uint64_t)&v41, v42[0]);
        if (v37)
        {
          v38 = v37;
          operator delete(v37);
        }
        if (v31)
        {
          v32 = v31;
          operator delete(v31);
        }
        v8 += 80;
      }
      while (v8 != v9);
    }
    sub_1014B35B4(v22);
  }
  else
  {
    sub_1014B3380(a1);
  }
}

void sub_1014B4DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014B4E30@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  void *p_p;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  void *__p;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  _QWORD v31[10];
  char v32;
  uint64_t v33;

  sub_1004E5E40((uint64_t)&v30);
  v4 = v30;
  *(_DWORD *)((char *)v31 + *(_QWORD *)(v30 - 24)) = *(_DWORD *)((_BYTE *)v31 + *(_QWORD *)(v30 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v31[1] + *(_QWORD *)(v4 - 24)) = 2;
  v5 = sub_100263F7C(&v30, (uint64_t)"hkBuilderId, ", 13);
  sub_100F72AA8((const unsigned __int8 *)a1, &__p);
  if ((v29 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v29 & 0x80u) == 0)
    v7 = v29;
  else
    v7 = v28;
  v8 = sub_100263F7C(v5, (uint64_t)p_p, v7);
  sub_100263F7C(v8, (uint64_t)", ", 2);
  if ((char)v29 < 0)
    operator delete(__p);
  v9 = sub_100263F7C(&v30, (uint64_t)"overviewId, ", 12);
  sub_100F72AA8((const unsigned __int8 *)(a1 + 16), &__p);
  if ((v29 & 0x80u) == 0)
    v10 = &__p;
  else
    v10 = __p;
  if ((v29 & 0x80u) == 0)
    v11 = v29;
  else
    v11 = v28;
  v12 = sub_100263F7C(v9, (uint64_t)v10, v11);
  sub_100263F7C(v12, (uint64_t)", ", 2);
  if ((char)v29 < 0)
    operator delete(__p);
  v13 = sub_100263F7C(&v30, (uint64_t)"startTime, ", 11);
  v14 = (_QWORD *)std::ostream::operator<<(v13, *(double *)(a1 + 32));
  sub_100263F7C(v14, (uint64_t)", ", 2);
  v15 = sub_100263F7C(&v30, (uint64_t)"endTime, ", 9);
  v16 = (_QWORD *)std::ostream::operator<<(v15, *(double *)(a1 + 40));
  sub_100263F7C(v16, (uint64_t)", ", 2);
  v17 = sub_100263F7C(&v30, (uint64_t)"isMultisport, ", 14);
  v18 = (_QWORD *)std::ostream::operator<<(v17, *(unsigned __int8 *)(a1 + 48));
  sub_100263F7C(v18, (uint64_t)", ", 2);
  v19 = sub_100263F7C(&v30, (uint64_t)"totalWorkoutCount, ", 19);
  std::ostream::operator<<(v19, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3));
  if (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56))
  {
    v20 = 0;
    v21 = 0;
    do
    {
      sub_100263F7C(&v30, (uint64_t)", ", 2);
      v22 = sub_100263F7C(&v30, (uint64_t)"workoutIdx, ", 12);
      v23 = (_QWORD *)std::ostream::operator<<(v22, v21);
      sub_100263F7C(v23, (uint64_t)", ", 2);
      sub_1014B67E0(*(_QWORD *)(a1 + 56) + v20, &__p);
      if ((v29 & 0x80u) == 0)
        v24 = &__p;
      else
        v24 = __p;
      if ((v29 & 0x80u) == 0)
        v25 = v29;
      else
        v25 = v28;
      sub_100263F7C(&v30, (uint64_t)v24, v25);
      if ((char)v29 < 0)
        operator delete(__p);
      ++v21;
      v20 += 56;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3) > v21);
  }
  std::stringbuf::str(a2, v31);
  if (v32 < 0)
    operator delete((void *)v31[8]);
  std::streambuf::~streambuf(v31);
  return std::ios::~ios(&v33);
}

void sub_1014B5178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1004E5F2C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1014B51BC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *result;

  v4 = a1 + 5;
  v5 = a1[1];
  v6 = a1[2];
  v7 = 36 * ((v6 - v5) >> 3) - 1;
  if (v6 == v5)
    v7 = 0;
  if (v7 == a1[5] + a1[4])
  {
    sub_1014B8354(a1);
    v5 = a1[1];
    v6 = a1[2];
  }
  if (v6 == v5)
  {
    v9 = 0;
  }
  else
  {
    v8 = a1[5] + a1[4];
    v9 = *(_QWORD *)(v5 + 8 * (v8 / 0x24)) + 112 * (v8 % 0x24);
  }
  result = sub_1014B8668((uint64_t)v4, v9, a2);
  ++*v4;
  return result;
}

uint64_t sub_1014B5284(uint64_t a1)
{
  void *v2;

  sub_100008848(a1 + 88, *(_QWORD **)(a1 + 96));
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1014B52C0(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v10;
  NSObject *v11;
  std::string::size_type v12;
  unsigned int v13;
  std::string *v14;
  unint64_t v15;
  NSObject *v16;
  std::string::size_type v17;
  uint64_t v18;
  char v19;
  NSObject *v20;
  unint64_t v21;
  NSObject *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  std::string *p_buf;
  std::string *v27;
  std::string *v28;
  std::string::size_type v29;
  uint64_t v30;
  const char *v31;
  std::string *v32;
  const char *v33;
  std::string *v34;
  const char *v35;
  std::string *v36;
  std::string buf;
  __int16 v38;
  uint64_t v39;
  _BYTE v40[24];
  std::string __p;
  __int16 v42;
  uint64_t v43;

  if (*(_QWORD *)(a1 + 112))
  {
    v4 = *(_QWORD *)(a1 + 80);
    v5 = *(_QWORD *)(a1 + 104);
    v6 = v5 / 0x24;
    v7 = *(_QWORD *)(v4 + 8 * (v5 / 0x24));
    v8 = v5 % 0x24;
    if (*(_DWORD *)(v7 + 112 * v8 + 80) == 1)
    {
      *(_QWORD *)&v40[8] = 0;
      *(_QWORD *)&v40[16] = 0;
      *(_QWORD *)v40 = &v40[8];
      if (a2 == 100)
        v10 = sub_1014B5AF0(a1, (uint64_t)v40, *(_QWORD *)(v4 + 8 * v6) + 112 * v8, a3);
      else
        v10 = 0;
      v15 = *(_QWORD *)(a1 + 128);
      if ((v10 & 1) != 0 || v15 < 2)
      {
        if (v15 > 1)
          v19 = 1;
        else
          v19 = v10;
        if ((v19 & 1) == 0)
        {
          if (qword_10229FFD0 != -1)
            dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
          v22 = qword_10229FFD8;
          if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
          {
            __p.__r_.__value_.__r.__words[0] = 67109376;
            LOWORD(__p.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = a2;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "AnalyticsLogger, queryWorkoutEffort, failed but no events were sent yet so try again later, matchSuccess, %d, error, %d", (uint8_t *)&__p, 0xEu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_10229FFD0 != -1)
              dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
            buf.__r_.__value_.__r.__words[0] = 67109376;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = a2;
            _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FFD8, 1, "AnalyticsLogger, queryWorkoutEffort, failed but no events were sent yet so try again later, matchSuccess, %d, error, %d", &buf, 14);
            v36 = (std::string *)v35;
            sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::handleWorkoutEffortQueryResults(CMError, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &)", "%s\n", v35);
            if (v36 != &__p)
              free(v36);
          }
          sub_1014B3380(a1);
          goto LABEL_45;
        }
        if (qword_10229FFD0 != -1)
          dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
        v20 = qword_10229FFD8;
        if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
        {
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "AnalyticsLogger, queryWorkoutEffort, succeeded adding matched scores to front of queue", (uint8_t *)&__p, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_10229FFD0 != -1)
            dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FFD8, 1, "AnalyticsLogger, queryWorkoutEffort, succeeded adding matched scores to front of queue", &buf, 2);
          v34 = (std::string *)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::handleWorkoutEffortQueryResults(CMError, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &)", "%s\n", v33);
          if (v34 != &__p)
            free(v34);
        }
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * (*(_QWORD *)(a1 + 104) / 0x24uLL))
            + 112 * (*(_QWORD *)(a1 + 104) % 0x24uLL);
        *(_DWORD *)(v21 + 80) = 2;
        if ((_BYTE *)(v21 + 88) != v40)
          sub_1014B8840((uint64_t **)(v21 + 88), *(_QWORD **)v40, &v40[8]);
      }
      else
      {
        if (qword_10229FFD0 != -1)
          dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
        v16 = qword_10229FFD8;
        if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
        {
          v17 = *(_QWORD *)(a1 + 128);
          v18 = *(_QWORD *)(a1 + 112);
          __p.__r_.__value_.__r.__words[0] = 67109888;
          LOWORD(__p.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = a2;
          HIWORD(__p.__r_.__value_.__r.__words[1]) = 2048;
          __p.__r_.__value_.__r.__words[2] = v17;
          v42 = 2048;
          v43 = v18;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "AnalyticsLogger, queryWorkoutEffort, failed trying to log remaining workouts, matchSuccess, %d, error, %d, countSent, %zu, countRemaining, %zu", (uint8_t *)&__p, 0x22u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_10229FFD0 != -1)
            dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
          v29 = *(_QWORD *)(a1 + 128);
          v30 = *(_QWORD *)(a1 + 112);
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = a2;
          HIWORD(buf.__r_.__value_.__r.__words[1]) = 2048;
          buf.__r_.__value_.__r.__words[2] = v29;
          v38 = 2048;
          v39 = v30;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FFD8, 1, "AnalyticsLogger, queryWorkoutEffort, failed trying to log remaining workouts, matchSuccess, %d, error, %d, countSent, %zu, countRemaining, %zu", &buf, 34, 0x4000400uLL, buf.__r_.__value_.__l.__size_);
          v32 = (std::string *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::handleWorkoutEffortQueryResults(CMError, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &)", "%s\n", v31);
          if (v32 != &__p)
            free(v32);
        }
        sub_1014B47C8((int64x2_t *)(a1 + 72));
      }
      sub_1014B35B4(a1);
LABEL_45:
      sub_100008848((uint64_t)v40, *(_QWORD **)&v40[8]);
      return;
    }
  }
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
  v11 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_FAULT))
  {
    v12 = *(_QWORD *)(a1 + 112);
    v13 = v12 < 2
        ? 3
        : *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * (*(_QWORD *)(a1 + 104) / 0x24uLL))
                    + 112 * (*(_QWORD *)(a1 + 104) % 0x24uLL)
                    + 80);
    sub_1014B3DA4(v13, &__p);
    v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218242;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v12;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "AnalyticsLogger, queryWorkoutEffort, returned to unexpected event data queue state, size, %zu, nextEventQueryState, %s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
    v23 = *(_QWORD *)(a1 + 112);
    if (v23 < 2)
      v24 = 3;
    else
      v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * (*(_QWORD *)(a1 + 104) / 0x24uLL))
                      + 112 * (*(_QWORD *)(a1 + 104) % 0x24uLL)
                      + 80);
    v25 = qword_10229FFD8;
    sub_1014B3DA4(v24, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)v40 = 134218242;
    *(_QWORD *)&v40[4] = v23;
    *(_WORD *)&v40[12] = 2080;
    *(_QWORD *)&v40[14] = p_buf;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v25, 17, "AnalyticsLogger, queryWorkoutEffort, returned to unexpected event data queue state, size, %zu, nextEventQueryState, %s", (size_t)v40, 22);
    v28 = v27;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 0, "void CLWorkoutEffortAnalyticsLogger::handleWorkoutEffortQueryResults(CMError, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &)", "%s\n", (const char *)v28);
    if (v28 != &__p)
      free(v28);
  }
  sub_1014B3380(a1);
}

void sub_1014B5AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18)
{
  sub_100008848((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1014B5AF0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  NSObject *v33;
  void **v34;
  uint64_t *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint8_t *v41;
  char *v42;
  char *v43;
  NSObject *v44;
  int v45;
  void **v46;
  void **v47;
  uint8_t *v48;
  void *v49;
  _OWORD *v50;
  uint64_t *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  NSObject *v57;
  const char *v58;
  char *v59;
  NSObject *v60;
  const char *v61;
  uint64_t v62;
  int v63;
  uint8_t *v64;
  uint8_t *v65;
  _BYTE *v66;
  char *v67;
  const char *v68;
  __int128 v70;
  _BYTE v71[22];
  char v72;
  int v73;
  uint8_t *v74;
  __int16 v75;
  _BYTE *v76;
  void *__p[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint8_t buf[8];
  __int16 v84;
  void **v85;
  char v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _BYTE v91[32];

  v6 = (_QWORD *)(a2 + 8);
  sub_100008848(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = 0;
  *v6 = 0;
  v7 = *(_QWORD *)(a3 + 56);
  v8 = *(_QWORD *)(a3 + 64);
  if (v7 != v8)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    v70 = _Q0;
    do
    {
      sub_100F72A08((unsigned __int8 *)&v87, (const unsigned __int8 *)v7);
      v14 = *(_OWORD *)(v7 + 16);
      v15 = *(_OWORD *)(v7 + 32);
      *(_QWORD *)&v90 = *(_QWORD *)(v7 + 48);
      v88 = v14;
      v89 = v15;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      *(_OWORD *)__p = 0u;
      v78 = 0u;
      sub_100F729E4((unsigned __int8 *)__p);
      sub_100F729E4((unsigned __int8 *)&v78);
      v79 = v70;
      *(_QWORD *)&v80 = 0xBFF0000000000000;
      DWORD2(v80) = -1082130432;
      v81 = v70;
      *(_QWORD *)&v82 = 0xBFF0000000000000;
      DWORD2(v82) = -1082130432;
      *(_QWORD *)buf = &v87;
      v16 = sub_1014B8038((uint64_t **)a2, (const unsigned __int8 *)&v87, (uint64_t)&unk_101B9EB60, (const unsigned __int8 **)buf);
      v17 = v80;
      v19 = v81;
      v18 = v82;
      *((_OWORD *)v16 + 5) = v79;
      *((_OWORD *)v16 + 6) = v17;
      *((_OWORD *)v16 + 7) = v19;
      *((_OWORD *)v16 + 8) = v18;
      v20 = v78;
      v7 += 56;
      *((_OWORD *)v16 + 3) = *(_OWORD *)__p;
      *((_OWORD *)v16 + 4) = v20;
    }
    while (v7 != v8);
  }
  v21 = (_OWORD *)*a4;
  v22 = (_OWORD *)a4[1];
  if (v22 == (_OWORD *)*a4)
    goto LABEL_47;
  do
  {
    sub_100F72A08((unsigned __int8 *)&v87, (const unsigned __int8 *)v21);
    sub_100F72A08((unsigned __int8 *)&v88, (const unsigned __int8 *)v21 + 16);
    v23 = v21[2];
    v24 = v21[3];
    v25 = v21[4];
    *(_OWORD *)&v91[12] = *(_OWORD *)((char *)v21 + 76);
    v90 = v24;
    *(_OWORD *)v91 = v25;
    v89 = v23;
    if (sub_100F72A8C((const unsigned __int8 *)&v87, (const unsigned __int8 *)a3))
    {
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v44 = qword_10229FFD8;
      if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_ERROR))
      {
        sub_100F72AA8((const unsigned __int8 *)a3, __p);
        v45 = SBYTE7(v78);
        v46 = (void **)__p[0];
        sub_100F72AA8((const unsigned __int8 *)&v87, buf);
        v47 = __p;
        if (v45 < 0)
          v47 = v46;
        if (v86 >= 0)
          v48 = buf;
        else
          v48 = *(uint8_t **)buf;
        *(_DWORD *)v71 = 136315394;
        *(_QWORD *)&v71[4] = v47;
        *(_WORD *)&v71[12] = 2080;
        *(_QWORD *)&v71[14] = v48;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "AnalyticsLogger, at least one effort set returned did not match expectedHkBuilderId, %s, foundHkBuilderId, %s", v71, 0x16u);
        if (v86 < 0)
          operator delete(*(void **)buf);
        if (SBYTE7(v78) < 0)
          operator delete(__p[0]);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_43;
      bzero(__p, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v62 = qword_10229FFD8;
      sub_100F72AA8((const unsigned __int8 *)a3, buf);
      v63 = v86;
      v64 = *(uint8_t **)buf;
      sub_100F72AA8((const unsigned __int8 *)&v87, v71);
      v65 = buf;
      if (v63 < 0)
        v65 = v64;
      if (v72 >= 0)
        v66 = v71;
      else
        v66 = *(_BYTE **)v71;
      v73 = 136315394;
      v74 = v65;
      v75 = 2080;
      v76 = v66;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v62, 16, "AnalyticsLogger, at least one effort set returned did not match expectedHkBuilderId, %s, foundHkBuilderId, %s", (const char *)&v73, 22);
      v59 = v67;
      if (v72 < 0)
        operator delete(*(void **)v71);
      if (v86 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWorkoutEffortAnalyticsLogger::createMatchedWorkoutEffortMapForWorkoutSession(WorkoutEffortMap &, const CLWorkoutEffortHealthKitQueryInterface::WorkoutSessionSample &, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &) const", "%s\n", v59);
      if (v59 == (char *)__p)
        goto LABEL_43;
      goto LABEL_79;
    }
    v21 += 6;
  }
  while (v21 != v22);
  v26 = (_OWORD *)*a4;
  if (!*(_BYTE *)(a3 + 48))
  {
    sub_100F72A2C((unsigned __int8 *)__p, "00000000-0000-0000-0000-000000000000");
    if (sub_100F72A70((const unsigned __int8 *)v26 + 16, (const unsigned __int8 *)__p))
    {
      v49 = *(void **)(a3 + 56);
      if (*(void **)(a3 + 64) != v49)
      {
        v50 = (_OWORD *)*a4;
        __p[0] = v49;
        v51 = sub_1014B8038((uint64_t **)a2, (const unsigned __int8 *)v49, (uint64_t)&unk_101B9EB60, (const unsigned __int8 **)__p);
        v52 = v50[1];
        *((_OWORD *)v51 + 3) = *v50;
        *((_OWORD *)v51 + 4) = v52;
        v53 = v50[2];
        v54 = v50[3];
        v55 = v50[5];
        *((_OWORD *)v51 + 7) = v50[4];
        *((_OWORD *)v51 + 8) = v55;
        *((_OWORD *)v51 + 5) = v53;
        *((_OWORD *)v51 + 6) = v54;
LABEL_47:
        v28 = 1;
        return v28 & 1;
      }
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v60 = qword_10229FFD8;
      if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "AnalyticsLogger, non-multisport workout did not have an associated workout activity as expected", (uint8_t *)__p, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
      {
LABEL_43:
        v28 = 0;
        return v28 & 1;
      }
      bzero(__p, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      LOWORD(v87) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFD8, 16, "AnalyticsLogger, non-multisport workout did not have an associated workout activity as expected", &v87, 2);
      v59 = (char *)v61;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWorkoutEffortAnalyticsLogger::createMatchedWorkoutEffortMapForWorkoutSession(WorkoutEffortMap &, const CLWorkoutEffortHealthKitQueryInterface::WorkoutSessionSample &, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &) const", "%s\n", v61);
    }
    else
    {
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v57 = qword_10229FFD8;
      if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "AnalyticsLogger, non-multisport workout did not associate effort as expected", (uint8_t *)__p, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_43;
      bzero(__p, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      LOWORD(v87) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFD8, 16, "AnalyticsLogger, non-multisport workout did not associate effort as expected", &v87, 2);
      v59 = (char *)v58;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWorkoutEffortAnalyticsLogger::createMatchedWorkoutEffortMapForWorkoutSession(WorkoutEffortMap &, const CLWorkoutEffortHealthKitQueryInterface::WorkoutSessionSample &, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &) const", "%s\n", v58);
    }
    if (v59 == (char *)__p)
      goto LABEL_43;
LABEL_79:
    free(v59);
    goto LABEL_43;
  }
  v27 = (_OWORD *)a4[1];
  if (v26 == v27)
    goto LABEL_47;
  v28 = 1;
  do
  {
    sub_100F72A08((unsigned __int8 *)&v87, (const unsigned __int8 *)v26);
    sub_100F72A08((unsigned __int8 *)&v88, (const unsigned __int8 *)v26 + 16);
    v29 = v26[2];
    v30 = v26[3];
    v31 = v26[4];
    *(_OWORD *)&v91[12] = *(_OWORD *)((char *)v26 + 76);
    v90 = v30;
    *(_OWORD *)v91 = v31;
    v89 = v29;
    sub_100F72A2C((unsigned __int8 *)__p, "00000000-0000-0000-0000-000000000000");
    if (!sub_100F72A70((const unsigned __int8 *)&v88, (const unsigned __int8 *)__p))
    {
      v32 = sub_1014B8AEC(a2, (const unsigned __int8 *)&v88);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
      v33 = qword_10229FFD8;
      if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
      {
        sub_100F72AA8((const unsigned __int8 *)&v88, __p);
        v34 = __p;
        if (SBYTE7(v78) < 0)
          v34 = (void **)__p[0];
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v32 != 0;
        v84 = 2080;
        v85 = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "AnalyticsLogger, checking for effort score associated sessionId match in workout activities, isMatch, %d, effortScoreSessionId, %s", buf, 0x12u);
        if (SBYTE7(v78) < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_10229FFD0 != -1)
          dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
        v40 = qword_10229FFD8;
        sub_100F72AA8((const unsigned __int8 *)&v88, buf);
        v41 = buf;
        if (v86 < 0)
          v41 = *(uint8_t **)buf;
        *(_DWORD *)v71 = 67109378;
        *(_DWORD *)&v71[4] = v32 != 0;
        *(_WORD *)&v71[8] = 2080;
        *(_QWORD *)&v71[10] = v41;
        LODWORD(v68) = 18;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v40, 2, "AnalyticsLogger, checking for effort score associated sessionId match in workout activities, isMatch, %d, effortScoreSessionId, %s", v71, v68);
        v43 = v42;
        if (v86 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutEffortAnalyticsLogger::createMatchedWorkoutEffortMapForWorkoutSession(WorkoutEffortMap &, const CLWorkoutEffortHealthKitQueryInterface::WorkoutSessionSample &, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &) const", "%s\n", v43);
        if (v43 != (char *)__p)
          free(v43);
      }
      __p[0] = &v88;
      v35 = sub_1014B8038((uint64_t **)a2, (const unsigned __int8 *)&v88, (uint64_t)&unk_101B9EB60, (const unsigned __int8 **)__p);
      v28 &= v32 != 0;
      v36 = v90;
      v38 = *(_OWORD *)v91;
      v37 = *(_OWORD *)&v91[16];
      *((_OWORD *)v35 + 5) = v89;
      *((_OWORD *)v35 + 6) = v36;
      *((_OWORD *)v35 + 7) = v38;
      *((_OWORD *)v35 + 8) = v37;
      v39 = v88;
      *((_OWORD *)v35 + 3) = v87;
      *((_OWORD *)v35 + 4) = v39;
    }
    v26 += 6;
  }
  while (v26 != v27);
  return v28 & 1;
}

void sub_1014B6460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 201) < 0)
    operator delete(*(void **)(v28 - 224));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014B6498(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _QWORD v7[5];
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
  v3 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "AnalyticsLogger, sending analytics, %@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021B9F50);
    v8 = 138412290;
    v9 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 1, "AnalyticsLogger, sending analytics, %@", &v8, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLWorkoutEffortAnalyticsLogger::sendAnalytics(NSDictionary * _Nonnull) const", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1014B6680;
  v7[3] = &unk_102132010;
  v7[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.Fitness.WorkoutEffort"), v7);
}

uint64_t sub_1014B6680(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

id sub_1014B6688(uint64_t a1, uint64_t a2)
{
  id result;

  result = (id)objc_opt_class(MCProfileConnection, a2);
  if (result)
    return objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed");
  return result;
}

void sub_1014B66C4(id a1)
{
  qword_10229FFD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

unsigned __int8 *sub_1014B66F0(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned __int8 *v6;

  if (a4)
  {
    v6 = result;
    sub_100365B18(result, a4);
    return sub_1014B675C(v6, a2, a3);
  }
  return result;
}

void sub_1014B6740(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_1014B675C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = sub_100F72A08((unsigned __int8 *)(v4 + v7), (const unsigned __int8 *)(a2 + v7));
      v8 = *(_OWORD *)(a2 + v7 + 16);
      v9 = *(_OWORD *)(a2 + v7 + 32);
      *((_QWORD *)result + 6) = *(_QWORD *)(a2 + v7 + 48);
      *((_OWORD *)result + 1) = v8;
      *((_OWORD *)result + 2) = v9;
      v7 += 56;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((_QWORD *)v3 + 1) = v4;
  return result;
}

void sub_1014B67D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1014B67E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *__p[2];
  unsigned __int8 v20;
  uint64_t v21;
  _QWORD v22[10];
  char v23;
  uint64_t v24;

  sub_1004E5E40((uint64_t)&v21);
  v4 = v21;
  *(_DWORD *)((char *)v22 + *(_QWORD *)(v21 - 24)) = *(_DWORD *)((_BYTE *)v22 + *(_QWORD *)(v21 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v22[1] + *(_QWORD *)(v4 - 24)) = 2;
  v5 = sub_100263F7C(&v21, (uint64_t)"sessionId, ", 11);
  sub_100F72AA8((const unsigned __int8 *)a1, __p);
  if ((v20 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v7 = v20;
  else
    v7 = (uint64_t)__p[1];
  v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
  sub_100263F7C(v8, (uint64_t)", ", 2);
  if ((char)v20 < 0)
    operator delete(__p[0]);
  v9 = sub_100263F7C(&v21, (uint64_t)"startTime, ", 11);
  v10 = (_QWORD *)std::ostream::operator<<(v9, *(double *)(a1 + 16));
  sub_100263F7C(v10, (uint64_t)", ", 2);
  v11 = sub_100263F7C(&v21, (uint64_t)"endTime, ", 9);
  v12 = (_QWORD *)std::ostream::operator<<(v11, *(double *)(a1 + 24));
  sub_100263F7C(v12, (uint64_t)", ", 2);
  v13 = sub_100263F7C(&v21, (uint64_t)"workoutType, ", 13);
  v14 = (_QWORD *)std::ostream::operator<<(v13, *(_QWORD *)(a1 + 32));
  sub_100263F7C(v14, (uint64_t)", ", 2);
  v15 = sub_100263F7C(&v21, (uint64_t)"workoutLocationType, ", 21);
  v16 = (_QWORD *)std::ostream::operator<<(v15, *(_QWORD *)(a1 + 40));
  sub_100263F7C(v16, (uint64_t)", ", 2);
  v17 = sub_100263F7C(&v21, (uint64_t)"swimWorkoutLocation, ", 21);
  std::ostream::operator<<(v17, *(_QWORD *)(a1 + 48));
  std::stringbuf::str(a2, v22);
  if (v23 < 0)
    operator delete((void *)v22[8]);
  std::streambuf::~streambuf(v22);
  return std::ios::~ios(&v24);
}

void sub_1014B69F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1004E5F2C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1014B6A24(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x24];
    v7 = (uint64_t)*v6 + 112 * (v5 % 0x24);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x24] + 112 * ((a1[5] + v5) % 0x24);
    if (v7 != v8)
    {
      do
      {
        sub_1014B6B60((uint64_t)v2, v7);
        v7 += 112;
        if (v7 - (_QWORD)*v6 == 4032)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 18;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 36;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_1014B6B60(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_100008848(a2 + 88, *(_QWORD **)(a2 + 96));
  v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(_QWORD *)(a2 + 64) = v3;
    operator delete(v3);
  }
}

void sub_1014B6BA4()
{
  operator delete();
}

_QWORD *sub_1014B6BB8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B9F80;
  result[1] = v3;
  return result;
}

uint64_t sub_1014B6BEC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B9F80;
  a2[1] = v2;
  return result;
}

void sub_1014B6C08(uint64_t a1, double *a2)
{
  sub_1014B2D48(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_1014B6C14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1014B6C50()
{
}

_QWORD *sub_1014B6C5C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16[3];

  v5 = a1[5];
  if (v5 >= a3)
  {
    v11 = a1[4];
    v12 = a1[1];
    v13 = (uint64_t *)(v12 + 8 * (v11 / 0x24));
    if (a1[2] == v12)
      v14 = 0;
    else
      v14 = *v13 + 112 * (v11 % 0x24);
    sub_1014B70FC(a2, a2 + 112 * a3, v13, v14, v16);
    return (_QWORD *)sub_1014B6F1C((uint64_t)a1, (_QWORD *)v16[1], v16[2]);
  }
  else
  {
    v6 = a2 + 112 * v5;
    v7 = a1[4];
    v8 = a1[1];
    v9 = (uint64_t *)(v8 + 8 * (v7 / 0x24));
    if (a1[2] == v8)
      v10 = 0;
    else
      v10 = *v9 + 112 * (v7 % 0x24);
    sub_1014B70FC(a2, v6, v9, v10, v16);
    return sub_1014B6D78(a1, v6, a3 - a1[5]);
  }
}

_QWORD *sub_1014B6D78(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *result;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v5 = a1 + 5;
  v6 = a1[1];
  v7 = a1[2];
  v8 = 36 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6)
    v8 = 0;
  v9 = a1[5] + a1[4];
  v10 = v8 - v9;
  if (a3 > v10)
  {
    sub_1014B7478(a1, a3 - v10);
    v6 = a1[1];
    v7 = a1[2];
    v9 = a1[4] + a1[5];
  }
  v12 = (_QWORD *)(v6 + 8 * (v9 / 0x24));
  if (v7 == v6)
    v13 = 0;
  else
    v13 = *v12 + 112 * (v9 % 0x24);
  v20 = (_QWORD *)(v6 + 8 * (v9 / 0x24));
  v21 = v13;
  result = sub_1014B7A2C(&v20, a3);
  v15 = v21;
  if (v13 != v21)
  {
    v16 = v20;
    do
    {
      if (v12 == v16)
        v17 = v15;
      else
        v17 = *v12 + 4032;
      if (v13 == v17)
      {
        v17 = v13;
      }
      else
      {
        v18 = 0;
        do
        {
          result = sub_1014B7AE0((uint64_t)v5, v13 + v18, a2 + v18);
          v18 += 112;
        }
        while (v13 + v18 != v17);
        a2 += v18;
      }
      *v5 += 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v17 - v13) >> 4);
      if (v12 == v16)
        break;
      v19 = v12[1];
      ++v12;
      v13 = v19;
    }
    while (v19 != v15);
  }
  return result;
}

void sub_1014B6EF8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 += 0x6DB6DB6DB6DB6DB7 * (v2 >> 4);
  _Unwind_Resume(a1);
}

uint64_t sub_1014B6F1C(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v3 = (_QWORD *)result;
  v4 = (_QWORD *)(result + 40);
  v5 = *(_QWORD *)(result + 32);
  v6 = v5 + *(_QWORD *)(result + 40);
  v7 = *(_QWORD *)(result + 8);
  v8 = *(_QWORD *)(result + 16);
  v9 = (_QWORD *)(v7 + 8 * (v6 / 0x24));
  if (v8 == v7)
    v10 = 0;
  else
    v10 = *v9 + 112 * (v6 % 0x24);
  if (v10 != a3)
  {
    v11 = (a3 - *a2) >> 4;
    v12 = 36 * (v9 - a2) + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - *v9) >> 4) - 0x6DB6DB6DB6DB6DB7 * v11;
    if (v12 >= 1)
    {
      v13 = (_QWORD *)(v7 + 8 * (v5 / 0x24));
      if (v8 == v7)
        v14 = 0;
      else
        v14 = *v13 + 112 * (v5 % 0x24);
      if (a3 == v14)
        v15 = 0;
      else
        v15 = 36 * (a2 - v13) + 0x6DB6DB6DB6DB6DB7 * v11 - 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v14 - *v13) >> 4);
      v19 = v13;
      v20 = v14;
      sub_1014B7A2C(&v19, v15);
      v16 = v20;
      if (v20 != v10)
      {
        v17 = v19;
        do
        {
          sub_1014B6B60((uint64_t)v4, v16);
          v16 += 112;
          if (v16 - *v17 == 4032)
          {
            v18 = v17[1];
            ++v17;
            v16 = v18;
          }
        }
        while (v16 != v10);
      }
      *v4 -= v12;
      do
        result = sub_1014B7FC4(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

void sub_1014B70FC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v5 = a3;
  v6 = a1;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v5 = a3 + 1;
    v9 = *a3;
    while (1)
    {
      v10 = 0x6DB6DB6DB6DB6DB7 * ((v9 - a4 + 4032) >> 4);
      if (0x6DB6DB6DB6DB6DB7 * ((v8 - v6) >> 4) < v10)
        v10 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v6) >> 4);
      v11 = sub_1014B71E0((uint64_t)&v14, v6, v6 + 112 * v10, a4);
      if (v11 == v8)
        break;
      v6 = v11;
      v13 = *v5++;
      v9 = v13;
      a4 = v13;
    }
    a4 = v12;
    if (*(v5 - 1) + 4032 == v12)
      a4 = *v5;
    else
      --v5;
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
}

uint64_t sub_1014B71E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    v9 = a2 + v7;
    v10 = *(_OWORD *)(a2 + v7);
    v11 = *(_OWORD *)(a2 + v7 + 16);
    v12 = *(_OWORD *)(a2 + v7 + 32);
    *(_BYTE *)(v8 + 48) = *(_BYTE *)(a2 + v7 + 48);
    *(_OWORD *)(v8 + 16) = v11;
    *(_OWORD *)(v8 + 32) = v12;
    *(_OWORD *)v8 = v10;
    if (a2 != a4)
    {
      sub_1014B72B8((unsigned __int8 **)(v8 + 56), *(_QWORD *)(v9 + 56), *(_QWORD *)(v9 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56)) >> 3));
      *(_DWORD *)(v8 + 80) = *(_DWORD *)(v9 + 80);
      sub_1014B8840((uint64_t **)(v8 + 88), *(_QWORD **)(v9 + 88), (_QWORD *)(a2 + 96 + v7));
    }
    v7 += 112;
  }
  while (a2 + v7 != v6);
  return v6;
}

unsigned __int8 *sub_1014B72B8(unsigned __int8 **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unsigned __int8 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v5 = a3;
  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)result) >> 3) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x492492492492492)
      sub_100259694();
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x249249249249249)
      v12 = 0x492492492492492;
    else
      v12 = v11;
    sub_100365B18(a1, v12);
    v13 = (unsigned __int8 *)a1;
    v14 = v6;
    a3 = v5;
    return sub_1014B675C(v13, v14, a3);
  }
  v15 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - result) >> 3) < a4)
  {
    v14 = a2 + 8 * ((v15 - result) >> 3);
    if (v15 != result)
    {
      v16 = 8 * ((v15 - result) >> 3);
      do
      {
        v17 = *(_OWORD *)v6;
        v18 = *(_OWORD *)(v6 + 16);
        v19 = *(_OWORD *)(v6 + 32);
        *((_QWORD *)result + 6) = *(_QWORD *)(v6 + 48);
        *((_OWORD *)result + 1) = v18;
        *((_OWORD *)result + 2) = v19;
        *(_OWORD *)result = v17;
        result += 56;
        v6 += 56;
        v16 -= 56;
      }
      while (v16);
    }
    v13 = (unsigned __int8 *)a1;
    return sub_1014B675C(v13, v14, a3);
  }
  if (a2 == a3)
  {
    v20 = result;
  }
  else
  {
    v20 = result;
    do
    {
      v21 = *(_OWORD *)v6;
      v22 = *(_OWORD *)(v6 + 16);
      v23 = *(_OWORD *)(v6 + 32);
      *((_QWORD *)result + 6) = *(_QWORD *)(v6 + 48);
      *((_OWORD *)result + 1) = v22;
      *((_OWORD *)result + 2) = v23;
      *(_OWORD *)result = v21;
      result += 56;
      v6 += 56;
      v20 += 56;
    }
    while (v6 != a3);
  }
  a1[1] = v20;
  return result;
}

void sub_1014B7478(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0x24)
    v6 = v5 / 0x24 + 1;
  else
    v6 = v5 / 0x24;
  v7 = a1[4];
  if (v6 >= v7 / 0x24)
    v8 = v7 / 0x24;
  else
    v8 = v6;
  if (v6 <= v7 / 0x24)
  {
    for (a1[4] = v7 - 36 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFC0uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFC0uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 35;
          else
            v64 = 36;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 36 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -36 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xFC0uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1014B79B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1014B7A2C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      v5 = 35 - v3;
      v6 = &v2[-(v5 / 0x24)];
      *result = v6;
      v4 = *v6 + 112 * (36 * (v5 / 0x24) - v5) + 3920;
    }
    else
    {
      *result = &v2[v3 / 0x24];
      v4 = v2[v3 / 0x24] + 112 * (v3 % 0x24);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t *sub_1014B7AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  char v6;

  sub_100F72A08((unsigned __int8 *)a2, (const unsigned __int8 *)a3);
  sub_100F72A08((unsigned __int8 *)(a2 + 16), (const unsigned __int8 *)(a3 + 16));
  v5 = *(_OWORD *)(a3 + 32);
  v6 = *(_BYTE *)(a3 + 48);
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  sub_1014B66F0((unsigned __int8 *)(a2 + 56), *(_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 3));
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
  return sub_1014B7B94((uint64_t *)(a2 + 88), (const unsigned __int8 **)(a3 + 88));
}

void sub_1014B7B78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1014B7B94(uint64_t *a1, const unsigned __int8 **a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1014B7BE8(a1, *a2, a2 + 1);
  return a1;
}

void sub_1014B7BD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1014B7BE8(uint64_t *result, const unsigned __int8 *a2, const unsigned __int8 **a3)
{
  const unsigned __int8 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  const unsigned __int8 **v8;
  BOOL v9;

  if (a2 != (const unsigned __int8 *)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1014B7C6C(v5, v6, v4 + 32, (uint64_t)(v4 + 32));
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = (const unsigned __int8 **)v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const unsigned __int8 **)*((_QWORD *)v4 + 2);
          v9 = *v8 == v4;
          v4 = (const unsigned __int8 *)v8;
        }
        while (!v9);
      }
      v4 = (const unsigned __int8 *)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1014B7C6C(uint64_t **a1, uint64_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const unsigned __int8 *v10;

  v6 = (uint64_t **)sub_1014B7CEC(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1014B7E70((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const unsigned __int8 *sub_1014B7CEC(_QWORD *a1, uint64_t *a2, const unsigned __int8 **a3, uint64_t *a4, const unsigned __int8 *a5)
{
  const unsigned __int8 *v9;
  const unsigned __int8 *v11;
  const unsigned __int8 *v12;
  uint64_t v13;
  const unsigned __int8 *v14;
  const unsigned __int8 *v15;
  uint64_t *v16;
  BOOL v17;
  const unsigned __int8 *v18;

  v9 = (const unsigned __int8 *)(a1 + 1);
  if (a1 + 1 == a2 || sub_100F72A58(a5, (const unsigned __int8 *)a2 + 32))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const unsigned __int8 *)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 8;
      }
      else
      {
        *a3 = (const unsigned __int8 *)a2;
        return (const unsigned __int8 *)a2;
      }
    }
    v11 = (const unsigned __int8 *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const unsigned __int8 *)*((_QWORD *)v11 + 1);
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const unsigned __int8 *)v16[2];
        v17 = *(_QWORD *)v12 == (_QWORD)v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (sub_100F72A58(v12 + 32, a5))
      goto LABEL_16;
    return (const unsigned __int8 *)sub_1014B7EDC((uint64_t)a1, a3, a5);
  }
  if (sub_100F72A58((const unsigned __int8 *)a2 + 32, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const unsigned __int8 *)a2[1];
      do
      {
        v15 = v14;
        v14 = *(const unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const unsigned __int8 *)a2;
      do
      {
        v15 = (const unsigned __int8 *)*((_QWORD *)v18 + 2);
        v17 = *(_QWORD *)v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_100F72A58(a5, v15 + 32))
        return (const unsigned __int8 *)sub_1014B7EDC((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const unsigned __int8 *)a2;
    }
    return (const unsigned __int8 *)a4;
  }
  *a3 = (const unsigned __int8 *)a2;
  *a4 = (uint64_t)a2;
  return (const unsigned __int8 *)a4;
}

uint64_t sub_1014B7E70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x90uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1014B7F6C((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1014B7EC4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1014B7EDC(uint64_t a1, _QWORD *a2, const unsigned __int8 *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  const unsigned __int8 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (const unsigned __int8 *)(v4 + 32);
        if (!sub_100F72A58(a3, (const unsigned __int8 *)(v4 + 32)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_100F72A58(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_1014B7F6C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = sub_100F72A08((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  sub_100F72A08(v4 + 16, (const unsigned __int8 *)(a2 + 16));
  sub_100F72A08((unsigned __int8 *)(a1 + 32), (const unsigned __int8 *)(a2 + 32));
  v5 = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  return a1;
}

uint64_t sub_1014B7FC4(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 36 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x24)
    a2 = 1;
  if (v5 < 0x48)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t *sub_1014B8038(uint64_t **a1, const unsigned __int8 *a2, uint64_t a3, const unsigned __int8 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_1014B7EDC((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_1014B80CC((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_1014B80CC@<X0>(uint64_t a1@<X0>, const unsigned __int8 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x90uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1014B8138((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1014B8120(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1014B8138(uint64_t a1, const unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  v3 = sub_100F72A08((unsigned __int8 *)a1, a2);
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  v4 = v3 + 32;
  *((_OWORD *)v3 + 1) = 0u;
  sub_100F729E4(v3 + 16);
  sub_100F729E4(v4);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 48) = _Q0;
  *(_QWORD *)(a1 + 64) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_OWORD *)(a1 + 80) = _Q0;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 104) = -1082130432;
  return a1;
}

void sub_1014B81A8()
{
  operator delete();
}

_QWORD *sub_1014B81BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021BA000;
  result[1] = v3;
  return result;
}

uint64_t sub_1014B81F0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021BA000;
  a2[1] = v2;
  return result;
}

void sub_1014B820C(uint64_t a1, int *a2, __int128 *a3)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  void **v6;

  v3 = *a2;
  v4 = *a3;
  v5 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  sub_1014B483C(*(_QWORD *)(a1 + 8), v3, (uint64_t *)&v4);
  v6 = (void **)&v4;
  sub_1014B82C8(&v6);
}

void sub_1014B8264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1014B82C8(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1014B8280(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1014B82BC()
{
}

void sub_1014B82C8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1014B8308((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1014B8308(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 80)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void sub_1014B8354(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x24;
  v4 = v2 - 36;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1014B861C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1014B8668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *result;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_100F72A08((unsigned __int8 *)a2, (const unsigned __int8 *)a3);
  result = sub_100F72A08((unsigned __int8 *)(a2 + 16), (const unsigned __int8 *)(a3 + 16));
  v6 = *(_OWORD *)(a3 + 32);
  *(_BYTE *)(a2 + 48) = *(_BYTE *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
  v7 = (_QWORD *)(a3 + 96);
  v8 = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a2 + 96) = v8;
  v9 = a2 + 96;
  v10 = *(_QWORD *)(a3 + 104);
  *(_QWORD *)(a2 + 104) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(a3 + 88) = v7;
    *v7 = 0;
    *(_QWORD *)(a3 + 104) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 88) = v9;
  }
  return result;
}

void sub_1014B8714()
{
  operator delete();
}

_QWORD *sub_1014B8728(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021BA090;
  result[1] = v3;
  return result;
}

uint64_t sub_1014B875C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021BA090;
  a2[1] = v2;
  return result;
}

void sub_1014B8778(uint64_t a1, int *a2, __int128 *a3)
{
  int v3;
  void *v4;
  __int128 v5;
  uint64_t v6;

  v3 = *a2;
  v5 = *a3;
  v4 = (void *)v5;
  v6 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  sub_1014B52C0(*(_QWORD *)(a1 + 8), v3, &v5);
  if (v4)
    operator delete(v4);
}

void sub_1014B87DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if ((_QWORD)a9)
    operator delete((void *)a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014B87F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1014B8834()
{
}

uint64_t **sub_1014B8840(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v18 = result;
    v19 = v8;
    v20 = v8;
    if (v8)
    {
      v19 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
          v10 = *((_OWORD *)v9 + 8);
          v12 = *((_OWORD *)v9 + 5);
          v11 = *((_OWORD *)v9 + 6);
          *((_OWORD *)v8 + 7) = *((_OWORD *)v9 + 7);
          *((_OWORD *)v8 + 8) = v10;
          *((_OWORD *)v8 + 5) = v12;
          *((_OWORD *)v8 + 6) = v11;
          v13 = *((_OWORD *)v9 + 4);
          *((_OWORD *)v8 + 3) = *((_OWORD *)v9 + 3);
          *((_OWORD *)v8 + 4) = v13;
          sub_1014B89B8(v5, (uint64_t)v8);
          v8 = v19;
          v20 = v19;
          if (v19)
            v19 = sub_10036C1BC((uint64_t)v19);
          v14 = (_QWORD *)v9[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v15 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v15);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_10036C210((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_1014B8A3C((uint64_t)v5, (uint64_t)(a2 + 4));
      v16 = (_QWORD *)a2[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)a2[2];
          v15 = *v17 == (_QWORD)a2;
          a2 = v17;
        }
        while (!v15);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void sub_1014B89A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10036C210((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014B89B8(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (uint64_t **)v4;
        if (!sub_100F72A58((const unsigned __int8 *)(a2 + 32), (const unsigned __int8 *)v4 + 32))
          break;
        v4 = *v5;
        v6 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    v6 = v5 + 1;
  }
  else
  {
    v6 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v5, v6, (uint64_t *)a2);
  return a2;
}

uint64_t *sub_1014B8A3C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t **v4;
  const unsigned __int8 *v5;
  uint64_t **v6;
  uint64_t *v8;

  sub_1014B7E70(a1, a2, (uint64_t)&v8);
  v4 = (uint64_t **)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    v5 = (const unsigned __int8 *)(v8 + 4);
    do
    {
      while (1)
      {
        v4 = (uint64_t **)v3;
        if (!sub_100F72A58(v5, (const unsigned __int8 *)v3 + 32))
          break;
        v3 = *v4;
        v6 = v4;
        if (!*v4)
          goto LABEL_9;
      }
      v3 = v4[1];
    }
    while (v3);
    v6 = v4 + 1;
  }
  else
  {
    v6 = (uint64_t **)(a1 + 8);
  }
LABEL_9:
  sub_1000145B0((uint64_t **)a1, (uint64_t)v4, v6, v8);
  return v8;
}

void sub_1014B8AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014B8AEC(uint64_t a1, const unsigned __int8 *a2)
{
  const unsigned __int8 *v2;
  uint64_t v4;

  v2 = *(const unsigned __int8 **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if ((sub_100F72A58(a2, v2 + 32) & 1) == 0)
      {
        if (!sub_100F72A58(v2 + 32, a2))
          return v4;
        v2 += 8;
      }
      v2 = *(const unsigned __int8 **)v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_1014B8B54(uint64_t a1, char a2, int a3)
{
  char *v6;
  uint64_t v7;
  void **v8;
  NSObject *v9;
  NSObject *v10;
  char *v11;
  const char *v13;
  void **v14;
  const char *v15;
  void **v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  void *__p[2];
  uint64_t v21;

  if (byte_10230F877 >= 0)
    v6 = (char *)&qword_10230F860;
  else
    v6 = (char *)qword_10230F860;
  sub_1015A2E04(__p, "");
  sub_1014B904C(a1, v6, a3, (uint64_t)__p, 1, 30.0);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_1021BA140;
  *(_QWORD *)(a1 + 72) = off_1021BA1F8;
  sub_100E81598((_QWORD *)(a1 + 408), 0, 0);
  *(_BYTE *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  v7 = *(_QWORD *)(a1 + 112);
  v8 = (void **)(a1 + 456);
  v18 = a1 + 112;
  (*(void (**)(uint64_t))(v7 + 16))(a1 + 112);
  v19 = 256;
  sub_1015A2E04(__p, "ExertionRatingSessionSummary");
  sub_1014B94CC(a1, (char *)__p);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if ((a2 & 1) != 0)
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    v9 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, bias corrector enabled, initializing new DB", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BA288);
      v17 = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFD8, 2, "CLWorkoutEffortSessionSummary, bias corrector enabled, initializing new DB", &v17, 2);
      v14 = (void **)v13;
      sub_100512490("Generic", 1, 0, 2, "CLWorkoutEffortSessionSummaryDb::CLWorkoutEffortSessionSummaryDb(BOOL, BOOL)", "%s\n", v13);
      if (v14 != __p)
        free(v14);
    }
    std::string::operator=((std::string *)(a1 + 432), (const std::string *)&qword_10230F860);
    *(_BYTE *)(a1 + 424) = 1;
    sub_1014B991C(a1, (std::string::size_type *)__p);
    if (*(char *)(a1 + 479) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 472) = v21;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  }
  else
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    v10 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortSessionSummary, bias corrector disabled, will purge db if exists", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BA288);
      v17 = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFD8, 0, "CLWorkoutEffortSessionSummary, bias corrector disabled, will purge db if exists", &v17, 2);
      v16 = (void **)v15;
      sub_100512490("Generic", 1, 0, 2, "CLWorkoutEffortSessionSummaryDb::CLWorkoutEffortSessionSummaryDb(BOOL, BOOL)", "%s\n", v15);
      if (v16 != __p)
        free(v16);
    }
    if (byte_10230F877 >= 0)
      v11 = (char *)&qword_10230F860;
    else
      v11 = (char *)qword_10230F860;
    sub_1015A2E04(__p, v11);
    sub_1014B94CC(a1, (char *)__p);
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 424) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1014B8FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void **v21;
  void **v22;

  sub_10187E514((uint64_t)&a12);
  if (*(char *)(v20 + 479) < 0)
    operator delete(*v22);
  if (*(char *)(v20 + 455) < 0)
    operator delete(*v21);
  sub_1014B9C68((_QWORD *)v20);
  _Unwind_Resume(a1);
}

uint64_t sub_1014B904C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v18;
  void *__p[2];
  uint64_t v21;
  uint64_t v22;
  __int16 v23;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_1021BA528;
  *(_QWORD *)(a1 + 72) = off_1021BA5D0;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021BA528;
  *(_QWORD *)(a1 + 72) = off_1021BA5D0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 272) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 280) = 66;
  *(_OWORD *)(a1 + 288) = xmmword_101CAC580;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 312) = _D0;
  *(_DWORD *)(a1 + 320) = -1082130432;
  *(_DWORD *)(a1 + 328) = 12000;
  *(_QWORD *)(a1 + 336) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 344));
  *(_QWORD *)(a1 + 344) = &off_102138DD8;
  v18 = *(_QWORD *)(a1 + 112);
  v22 = a1 + 112;
  (*(void (**)(void))(v18 + 16))();
  v23 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v21 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
  return a1;
}

void sub_1014B9420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[42] = off_102138DA8;
  sub_100427950(v27);
  sub_1014C05E8(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_1014B94C4()
{
  JUMPOUT(0x1014B94A4);
}

void sub_1014B94CC(uint64_t a1, char *a2)
{
  const char *v4;
  NSObject *v5;
  char *v6;
  char *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  const char *v13;
  uint8_t *v14;
  uint8_t *v15;
  int v16;
  char *v17;
  uint8_t buf[4];
  char *v19;

  if ((sub_10008950C(a1 + 72) & 1) == 0)
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    v8 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, DB not accessible", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "CLWorkoutEffortSessionSummary, DB not accessible");
LABEL_45:
    v15 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortSessionSummaryDb::deleteTableIfPresent(const std::string &)", "%s\n", v9);
    if (v15 != buf)
      free(v15);
    return;
  }
  if (a2[23] >= 0)
    v4 = a2;
  else
    v4 = *(const char **)a2;
  if (sub_100635B3C(*(_QWORD *)(a1 + 80), v4))
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    v5 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
    {
      if (a2[23] >= 0)
        v6 = a2;
      else
        v6 = *(char **)a2;
      *(_DWORD *)buf = 136315138;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortSessionSummaryDb, Dropping the old table - %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BA288);
      if (a2[23] >= 0)
        v12 = a2;
      else
        v12 = *(char **)a2;
      v16 = 136315138;
      v17 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 0, "CLWorkoutEffortSessionSummaryDb, Dropping the old table - %s", (const char *)&v16);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortSessionSummaryDb::deleteTableIfPresent(const std::string &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (a2[23] >= 0)
      v7 = a2;
    else
      v7 = *(char **)a2;
    sub_10063E3BC(*(_QWORD *)(a1 + 80), v7);
    sub_10001E99C(*(_QWORD *)(a1 + 80));
    return;
  }
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BA288);
  v10 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
  {
    if (a2[23] >= 0)
      v11 = a2;
    else
      v11 = *(char **)a2;
    *(_DWORD *)buf = 136315138;
    v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummaryDb, %s table not present", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "CLWorkoutEffortSessionSummaryDb, %s table not present", &v16);
    goto LABEL_45;
  }
}

void sub_1014B991C(uint64_t a1@<X0>, std::string::size_type *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  size_t v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  char *v10;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  size_t v18;
  std::string *v19;
  const void *v20;
  const std::string::value_type *v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  std::string v26;
  _BYTE __p[15];
  char v28;
  _QWORD v29[2];

  sub_1015A2E04(a2, "SELECT ");
  v3 = 0;
  v4 = a2 + 1;
  do
  {
    v5 = (&off_1021BA2A8)[v3];
    if (v5)
    {
      if (*((char *)a2 + 23) >= 0)
        v6 = *((unsigned __int8 *)a2 + 23);
      else
        v6 = a2[1];
      v7 = strlen((&off_1021BA2A8)[v3]);
      sub_100259584((uint64_t)&v26, v6 + v7);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v26;
      else
        v8 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if (v6)
      {
        if (*((char *)a2 + 23) >= 0)
          v9 = a2;
        else
          v9 = (const void *)*a2;
        memmove(v8, v9, v6);
      }
      v10 = (char *)v8 + v6;
      if (v7)
        memmove(v10, v5, v7);
      v10[v7] = 0;
      v11 = std::string::append(&v26, ", ");
      v12 = v11->__r_.__value_.__r.__words[0];
      *(_QWORD *)__p = v11->__r_.__value_.__l.__size_;
      *(_QWORD *)&__p[7] = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
      v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)a2 + 23) < 0)
        operator delete((void *)*a2);
      *a2 = v12;
      *v4 = *(_QWORD *)__p;
      *(std::string::size_type *)((char *)a2 + 15) = *(_QWORD *)&__p[7];
      *((_BYTE *)a2 + 23) = v13;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
    }
    v3 += 6;
  }
  while (v3 != 78);
  if (*((char *)a2 + 23) < 0)
  {
    v15 = (uint64_t *)*a2;
    v14 = a2[1] - 1;
    a2[1] = v14;
  }
  else
  {
    v14 = *((unsigned __int8 *)a2 + 23) - 1;
    *((_BYTE *)a2 + 23) = v14 & 0x7F;
    v15 = (uint64_t *)a2;
  }
  *((_BYTE *)v15 + v14) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    v17 = (uint64_t *)*a2;
    v16 = a2[1] - 1;
    a2[1] = v16;
  }
  else
  {
    v16 = *((unsigned __int8 *)a2 + 23) - 1;
    *((_BYTE *)a2 + 23) = v16 & 0x7F;
    v17 = (uint64_t *)a2;
  }
  *((_BYTE *)v17 + v16) = 0;
  if (*((char *)a2 + 23) >= 0)
    v18 = *((unsigned __int8 *)a2 + 23);
  else
    v18 = a2[1];
  sub_100259584((uint64_t)&v26, v18 + 6);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v26;
  else
    v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if (v18)
  {
    if (*((char *)a2 + 23) >= 0)
      v20 = a2;
    else
      v20 = (const void *)*a2;
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, " from ");
  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)a1 + 64))(__p);
  if (v28 >= 0)
    v21 = __p;
  else
    v21 = *(const std::string::value_type **)__p;
  v22 = std::string::append(&v26, v21);
  v23 = v22->__r_.__value_.__r.__words[0];
  v29[0] = v22->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v29 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)a2 + 23) < 0)
    operator delete((void *)*a2);
  *a2 = v23;
  *v4 = v29[0];
  *(std::string::size_type *)((char *)a2 + 15) = *(_QWORD *)((char *)v29 + 7);
  *((_BYTE *)a2 + 23) = v24;
  if (v28 < 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_1014B9C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1014B9C68(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021BA5D0;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021BA528;
  a1[42] = off_102138DA8;
  sub_100427950(a1 + 43);
  sub_1014C05E8(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_1014B9CE4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021BA140;
  *(_QWORD *)(a1 + 72) = off_1021BA1F8;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  if (*(char *)(a1 + 455) < 0)
    operator delete(*(void **)(a1 + 432));
  return sub_1014B9C68((_QWORD *)a1);
}

_QWORD *sub_1014B9D3C(uint64_t a1)
{
  return sub_1014B9CE4(a1 - 72);
}

void sub_1014B9D44(uint64_t a1)
{
  sub_1014B9CE4(a1);
  operator delete();
}

void sub_1014B9D68(uint64_t a1)
{
  sub_1014B9CE4(a1 - 72);
  operator delete();
}

uint64_t sub_1014B9D90(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt *v8;
  uint64_t v9;
  sqlite3_stmt *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v17;
  uint8_t *v18;
  uint64_t v19[2];
  uint8_t buf[16];
  __int16 v21;

  if (*(_BYTE *)(a1 + 424))
  {
    v7 = a1 + 112;
    v6 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)buf = a1 + 112;
    (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
    v21 = 256;
    if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
    {
      sub_10001E638(*(_QWORD *)(a1 + 80));
      sub_100087AF4((_QWORD *)(a1 + 408), v19);
      if (sub_100026CC8(v19[0])
        && (v8 = (sqlite3_stmt *)sub_100026CC8(v19[0]),
            sub_1000890C4(v8, 1, a3 - *(double *)(*(_QWORD *)(a2 + 8) - 24))))
      {
        v9 = *(_QWORD *)(a1 + 80);
        v10 = (sqlite3_stmt *)sub_100026CC8(v19[0]);
        sub_10023C9B0(v9, v10);
        v11 = (*(int (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
      }
      else
      {
        v11 = -1;
      }
      sub_10001E99C(*(_QWORD *)(a1 + 80));
      v13 = *(_QWORD *)(a1 + 80);
      if (*(uint64_t *)(v13 + 88) <= 0)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = *(_QWORD *)(v13 + 88);
      sub_100053048(v13, v14);
      v15 = v19[0];
      v19[0] = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    else
    {
      v11 = -1;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  }
  else
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    v12 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BA288);
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled", v19, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "long CLWorkoutEffortSessionSummaryDb::aggregateRecords(const CLAggregationRules &, CFAbsoluteTime)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    return -1;
  }
  return v11;
}

void sub_1014BA044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014BA094(uint64_t a1, uint64_t a2)
{
  double Current;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 424))
  {
    Current = CFAbsoluteTimeGetCurrent();
    return sub_1014B9D90(a1, a2, Current);
  }
  else
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    v6 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BA288);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "virtual long CLWorkoutEffortSessionSummaryDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return -1;
  }
}

uint64_t sub_1014BA264(uint64_t a1, uint64_t a2)
{
  return sub_1014BA094(a1 - 72, a2);
}

uint64_t sub_1014BA26C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  void *__p[2];
  unsigned __int8 v15;
  uint64_t v16;
  __int16 v17;
  uint8_t buf[16];
  uint64_t v19;
  _QWORD v20[8];

  if (*(_BYTE *)(a1 + 424))
  {
    v3 = a1 + 112;
    v2 = *(_QWORD *)(a1 + 112);
    v4 = a1 + 72;
    v16 = a1 + 112;
    (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
    v17 = 256;
    if (sub_10008950C(v4))
    {
      sub_100263E50((uint64_t)buf);
      v5 = sub_100263F7C(&v19, (uint64_t)"SELECT COUNT(*) FROM ", 21);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 64))(__p, a1);
      if ((v15 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v15 & 0x80u) == 0)
        v7 = v15;
      else
        v7 = (uint64_t)__p[1];
      sub_100263F7C(v5, (uint64_t)v6, v7);
      if ((char)v15 < 0)
        operator delete(__p[0]);
      v8 = *(_QWORD *)(a1 + 80);
      std::stringbuf::str(__p, v20);
      if ((v15 & 0x80u) == 0)
        v9 = (char *)__p;
      else
        v9 = (char *)__p[0];
      sub_1000CDA68(v8, v9);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  else
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    v10 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BA288);
      LOWORD(v16) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled", &v16, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual int CLWorkoutEffortSessionSummaryDb::getNumberOfRecords() const", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_1014BA5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  sub_1018B38B4((uint64_t)&a22);
  sub_10187E514((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1014BA654(uint64_t a1)
{
  return sub_1014BA26C(a1 - 72);
}

void sub_1014BA65C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 424))
  {
    sub_1014BA814(a1, a2);
  }
  else
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    v2 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BA288);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortSessionSummaryDb::insertRecord(const CLWorkoutEffortSessionSummaryDbRow &)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

uint64_t sub_1014BA814(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  double v19[3];
  __int16 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _QWORD *v28;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  *(_QWORD *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v20 = 256;
  v19[0] = *(double *)(a2 + 40);
  if (sub_100013184(v6, v19))
  {
    if (sub_10008950C(v6))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 216);
      if (v13 > *(int *)(a1 + 328))
      {
        ++*(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 216) = v13 - 1;
        sub_1014C0750(a1 + 176, 1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021BA610);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021BA610);
          v18[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Maximum number of entries exceeded, throwing out oldest entry.", v18, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v7 = sub_1014C067C(v12, (__int128 *)a2);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021BA610);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021BA610);
    }
    v10 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v11 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 24))(v5, v7);
}

void sub_1014BABDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014BAC04(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  const unsigned __int8 *v10;
  sqlite3_stmt *v11;
  const unsigned __int8 *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  float v18;
  sqlite3_stmt *v19;
  float v20;
  sqlite3_stmt *v21;
  double v22;
  uint64_t result;
  NSObject *v24;
  _BOOL4 v25;
  const char *v26;
  uint8_t *v27;
  _WORD v28[8];
  uint8_t buf[1640];

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  if (sub_100026CC8(*a1))
  {
    v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
    *(_QWORD *)a2 = sqlite3_column_int64(v6, 0);
    v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
    *(double *)(a2 + 40) = sqlite3_column_double(v7, 1);
    v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
    *(double *)(a2 + 48) = sqlite3_column_double(v8, 2);
    v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
    v10 = sqlite3_column_text(v9, 3);
    uuid_parse((const char *)v10, (unsigned __int8 *)(a2 + 8));
    v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
    v12 = sqlite3_column_text(v11, 4);
    uuid_parse((const char *)v12, (unsigned __int8 *)(a2 + 24));
    v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
    *(_QWORD *)(a2 + 56) = sqlite3_column_int(v13, 5);
    v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
    *(_QWORD *)(a2 + 64) = sqlite3_column_int(v14, 6);
    v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
    *(_QWORD *)(a2 + 72) = sqlite3_column_int(v15, 7);
    v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
    *(double *)(a2 + 80) = sqlite3_column_double(v16, 8);
    v17 = (sqlite3_stmt *)sub_100026CC8(*a1);
    v18 = sqlite3_column_double(v17, 9);
    *(float *)(a2 + 88) = v18;
    v19 = (sqlite3_stmt *)sub_100026CC8(*a1);
    v20 = sqlite3_column_double(v19, 10);
    *(float *)(a2 + 92) = v20;
    v21 = (sqlite3_stmt *)sub_100026CC8(*a1);
    v22 = sqlite3_column_double(v21, 11);
    result = 0;
    *(float *)&v22 = v22;
    *(_DWORD *)(a2 + 96) = LODWORD(v22);
  }
  else
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    v24 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Null statement passed", buf, 2u);
    }
    v25 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v25)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BA288);
      v28[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 16, "Null statement passed", v28, 2);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 0, "void formatFromStatement(const CLSqliteScopedStatement &, CLWorkoutEffortSessionSummaryDbRow &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1014BAEEC(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void **v8;
  const void *v9;
  char *v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  __int16 v14;

  if (*(_BYTE *)(result + 424))
  {
    v3 = result;
    v5 = result + 112;
    v4 = *(_QWORD *)(result + 112);
    v6 = result + 72;
    v13 = result + 112;
    (*(void (**)(uint64_t))(v4 + 16))(result + 112);
    v14 = 256;
    if (sub_10008950C(v6))
    {
      a2[1] = *a2;
      if (*(char *)(v3 + 479) >= 0)
        v7 = *(unsigned __int8 *)(v3 + 479);
      else
        v7 = *(_QWORD *)(v3 + 464);
      v8 = __p;
      sub_100259584((uint64_t)__p, v7 + 24);
      if (v12 < 0)
        v8 = (void **)__p[0];
      if (v7)
      {
        if (*(char *)(v3 + 479) >= 0)
          v9 = (const void *)(v3 + 456);
        else
          v9 = *(const void **)(v3 + 456);
        memmove(v8, v9, v7);
      }
      strcpy((char *)v8 + v7, " ORDER BY start_time ASC");
      if (v12 >= 0)
        v10 = (char *)__p;
      else
        v10 = (char *)__p[0];
      sub_1000CDA68(*(_QWORD *)(v3 + 80), v10);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  return result;
}

void sub_1014BB254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a17 < 0)
    operator delete(__p);
  sub_10187E514((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1014BB2BC(uint64_t a1, __int128 **a2, uint64_t a3)
{
  __int128 *v3;
  __int128 *v4;
  _QWORD *v5;
  _QWORD *v6;
  _BOOL4 v7;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = *(_QWORD **)(a3 + 16);
    while (1)
    {
      if (*(_QWORD **)(a3 + 8) == v5)
      {
        v7 = 1;
      }
      else
      {
        v6 = *(_QWORD **)(a3 + 8);
        while (*v6 != *((_QWORD *)v4 + 7))
        {
          if (++v6 == v5)
          {
            v6 = *(_QWORD **)(a3 + 16);
            break;
          }
        }
        v7 = v6 != v5;
      }
      if (*((double *)v4 + 6) - *((double *)v4 + 5) < *(double *)a3 || !v7)
        break;
      v4 = (__int128 *)((char *)v4 + 104);
      if (v4 == v3)
        return;
    }
    if (v4 != v3)
    {
      v9 = (__int128 *)((char *)v4 + 104);
      if ((__int128 *)((char *)v4 + 104) == v3)
      {
        v10 = v4;
      }
      else
      {
        v10 = v4;
        do
        {
          v11 = v9;
          v13 = *(_QWORD **)(a3 + 8);
          v12 = *(_QWORD **)(a3 + 16);
          if (v13 == v12)
          {
            v14 = 1;
          }
          else
          {
            while (*v13 != *((_QWORD *)v4 + 20))
            {
              if (++v13 == v12)
              {
                v13 = *(_QWORD **)(a3 + 16);
                break;
              }
            }
            v14 = v13 != v12;
          }
          if (*((double *)v4 + 19) - *((double *)v4 + 18) >= *(double *)a3 && v14)
          {
            v16 = *v11;
            v17 = v11[2];
            v10[1] = v11[1];
            v10[2] = v17;
            *v10 = v16;
            v18 = v11[3];
            v19 = v11[4];
            v20 = v11[5];
            *((_DWORD *)v10 + 24) = *((_DWORD *)v11 + 24);
            v10[4] = v19;
            v10[5] = v20;
            v10[3] = v18;
            v10 = (__int128 *)((char *)v10 + 104);
          }
          v9 = (__int128 *)((char *)v11 + 104);
          v4 = v11;
        }
        while ((__int128 *)((char *)v11 + 104) != v3);
        v3 = a2[1];
      }
      if (v10 != v3)
        a2[1] = v10;
    }
  }
}

uint64_t sub_1014BB438(_BYTE *a1, unsigned int a2, uint64_t a3, char **a4)
{
  uint64_t v8;
  int v9;
  const unsigned __int8 *v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  BOOL v49;
  NSObject *v51;
  const char *v52;
  char *v53;
  void *__p[2];
  char v55;
  char **v56;
  char *v57[2];
  void *v58;
  const unsigned __int8 *v59;
  uint64_t v60;
  _OWORD out[3];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  if (a1[424] && (sub_10008950C(a1 + 72) & 1) != 0)
  {
    a4[1] = *a4;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v8 = (*(uint64_t (**)(_BYTE *, void **))(*(_QWORD *)a1 + 40))(a1, &v58);
    sub_1014BB2BC(v8, (__int128 **)&v58, a3);
    v9 = 0;
    v10 = v59;
    v57[0] = 0;
    v57[1] = 0;
    v56 = v57;
    while (1)
    {
      if (v10 == v58)
      {
LABEL_30:
        v39 = *a4;
        v40 = a4[1];
        v41 = (unint64_t)(v40 - 104);
        if (*a4 != v40 && v41 > (unint64_t)v39)
        {
          v43 = (unint64_t)(v39 + 104);
          do
          {
            v62 = *(_OWORD *)(v43 - 56);
            v63 = *(_OWORD *)(v43 - 40);
            v64 = *(_OWORD *)(v43 - 24);
            v65 = *(_QWORD *)(v43 - 8);
            out[0] = *(_OWORD *)(v43 - 104);
            out[1] = *(_OWORD *)(v43 - 88);
            out[2] = *(_OWORD *)(v43 - 72);
            v45 = *(_OWORD *)(v41 + 16);
            v44 = *(_OWORD *)(v41 + 32);
            *(_OWORD *)(v43 - 104) = *(_OWORD *)v41;
            *(_OWORD *)(v43 - 88) = v45;
            *(_OWORD *)(v43 - 72) = v44;
            v47 = *(_OWORD *)(v41 + 64);
            v46 = *(_OWORD *)(v41 + 80);
            v48 = *(_DWORD *)(v41 + 96);
            *(_OWORD *)(v43 - 56) = *(_OWORD *)(v41 + 48);
            *(_DWORD *)(v43 - 8) = v48;
            *(_OWORD *)(v43 - 24) = v46;
            *(_OWORD *)(v43 - 40) = v47;
            *(_OWORD *)(v41 + 32) = out[2];
            *(_OWORD *)(v41 + 16) = out[1];
            *(_OWORD *)v41 = out[0];
            *(_DWORD *)(v41 + 96) = v65;
            *(_OWORD *)(v41 + 80) = v64;
            *(_OWORD *)(v41 + 64) = v63;
            *(_OWORD *)(v41 + 48) = v62;
            v41 -= 104;
            v49 = v43 >= v41;
            v43 += 104;
          }
          while (!v49);
        }
        sub_100090AE4((uint64_t)&v56, v57[0]);
        if (v58)
        {
          v59 = (const unsigned __int8 *)v58;
          operator delete(v58);
        }
        return 100;
      }
      memset(out, 0, 37);
      uuid_unparse(v10 - 96, (char *)out);
      sub_1015A2E04(__p, (char *)out);
      if (sub_1001876D0((uint64_t)&v56, (const void **)__p))
        goto LABEL_9;
      if (++v9 <= a2)
        break;
      v11 = 0;
LABEL_26:
      if (v55 < 0)
      {
        operator delete(__p[0]);
        if ((v11 & 1) == 0)
          goto LABEL_30;
      }
      else if ((v11 & 1) == 0)
      {
        goto LABEL_30;
      }
    }
    sub_10019C3A8((uint64_t **)&v56, (const void **)__p, (uint64_t)__p);
LABEL_9:
    v10 -= 104;
    v12 = (unint64_t)a4[1];
    v13 = (unint64_t)a4[2];
    if (v12 >= v13)
    {
      v20 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v12 - (_QWORD)*a4) >> 3);
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) > 0x276276276276276)
        sub_100259694();
      v22 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v13 - (_QWORD)*a4) >> 3);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0x13B13B13B13B13BLL)
        v23 = 0x276276276276276;
      else
        v23 = v21;
      if (v23)
        v24 = (char *)sub_100673A14((uint64_t)(a4 + 2), v23);
      else
        v24 = 0;
      v25 = &v24[104 * v20];
      v26 = *(_OWORD *)v10;
      v27 = *((_OWORD *)v10 + 2);
      *((_OWORD *)v25 + 1) = *((_OWORD *)v10 + 1);
      *((_OWORD *)v25 + 2) = v27;
      *(_OWORD *)v25 = v26;
      v28 = *((_OWORD *)v10 + 3);
      v29 = *((_OWORD *)v10 + 4);
      v30 = *((_OWORD *)v10 + 5);
      *((_QWORD *)v25 + 12) = *((_QWORD *)v10 + 12);
      *((_OWORD *)v25 + 4) = v29;
      *((_OWORD *)v25 + 5) = v30;
      *((_OWORD *)v25 + 3) = v28;
      v32 = *a4;
      v31 = a4[1];
      v33 = v25;
      if (v31 != *a4)
      {
        do
        {
          v34 = *(_OWORD *)(v31 - 104);
          v35 = *(_OWORD *)(v31 - 88);
          *(_OWORD *)(v33 - 72) = *(_OWORD *)(v31 - 72);
          *(_OWORD *)(v33 - 88) = v35;
          *(_OWORD *)(v33 - 104) = v34;
          v36 = *(_OWORD *)(v31 - 56);
          v37 = *(_OWORD *)(v31 - 40);
          v38 = *(_OWORD *)(v31 - 24);
          *((_DWORD *)v33 - 2) = *((_DWORD *)v31 - 2);
          *(_OWORD *)(v33 - 24) = v38;
          *(_OWORD *)(v33 - 40) = v37;
          *(_OWORD *)(v33 - 56) = v36;
          v33 -= 104;
          v31 -= 104;
        }
        while (v31 != v32);
        v31 = *a4;
      }
      v19 = v25 + 104;
      *a4 = v33;
      a4[1] = v25 + 104;
      a4[2] = &v24[104 * v23];
      if (v31)
        operator delete(v31);
    }
    else
    {
      v14 = *(_OWORD *)v10;
      v15 = *((_OWORD *)v10 + 2);
      *(_OWORD *)(v12 + 16) = *((_OWORD *)v10 + 1);
      *(_OWORD *)(v12 + 32) = v15;
      *(_OWORD *)v12 = v14;
      v16 = *((_OWORD *)v10 + 3);
      v17 = *((_OWORD *)v10 + 4);
      v18 = *((_OWORD *)v10 + 5);
      *(_QWORD *)(v12 + 96) = *((_QWORD *)v10 + 12);
      *(_OWORD *)(v12 + 64) = v17;
      *(_OWORD *)(v12 + 80) = v18;
      *(_OWORD *)(v12 + 48) = v16;
      v19 = (char *)(v12 + 104);
    }
    a4[1] = v19;
    v11 = 1;
    goto LABEL_26;
  }
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BA288);
  v51 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(out[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, DB not enabled or accessible", (uint8_t *)out, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(out, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    LOWORD(v58) = 0;
    _os_log_send_and_compose_impl(2, 0, out, 1628, &_mh_execute_header, qword_10229FFD8, 2, "CLWorkoutEffortSessionSummary, DB not enabled or accessible", &v58, 2);
    v53 = (char *)v52;
    sub_100512490("Generic", 1, 0, 2, "CMError CLWorkoutEffortSessionSummaryDb::getLastNSessions(unsigned int, const CLWorkoutEffortSessionSummaryDb::QueryRules &, std::vector<CLWorkoutEffortSessionSummaryDbRow> &) const", "%s\n", v52);
    if (v53 != (char *)out)
      free(v53);
  }
  return 109;
}

void sub_1014BB938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014BB990(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  _QWORD *v4;
  void **v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  char v13;
  void *__p[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  if (*(_BYTE *)(result + 424))
  {
    v1 = (_QWORD *)result;
    result = sub_1000CC4F4(*(_QWORD *)(result + 80));
    if ((_DWORD)result)
    {
      sub_1014BBBB0((uint64_t)v1);
      v2 = v1[10];
      (*(void (**)(void **__return_ptr, _QWORD *))(*v1 + 64))(__p, v1);
      if (v15 >= 0)
        v3 = (char *)__p;
      else
        v3 = (char *)__p[0];
      sub_100634364(v2, v3, (const char **)&off_1021BA2A8, (const std::string::value_type **)&off_1023002D8, 0);
      if (SHIBYTE(v15) < 0)
        operator delete(__p[0]);
      sub_100263E50((uint64_t)__p);
      v4 = sub_100263F7C(&v15, (uint64_t)"DELETE FROM ", 12);
      v5 = v12;
      (*(void (**)(void **__return_ptr, _QWORD *))(*v1 + 64))(v12, v1);
      if (v13 < 0)
        v5 = (void **)v12[0];
      v6 = strlen((const char *)v5);
      v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
      sub_100263F7C(v7, (uint64_t)" WHERE start_time < ?", 21);
      if (v13 < 0)
        operator delete(v12[0]);
      v8 = v1[10];
      std::stringbuf::str(v12, v16);
      if (v13 >= 0)
        v9 = (char *)v12;
      else
        v9 = (char *)v12[0];
      v1[51] = sub_10063D314(v8, v9);
      v1[52] = v10;
      if (v13 < 0)
        operator delete(v12[0]);
      *(void **)((char *)__p
      v15 = v11;
      if (v17 < 0)
        operator delete((void *)v16[8]);
      std::streambuf::~streambuf(v16);
      return std::ios::~ios(&v18);
    }
  }
  return result;
}

void sub_1014BBB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1014BBBB0(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  _BOOL4 v4;
  _BOOL4 v5;
  uint64_t v6;
  void **v7;
  void *__p[2];
  char v9;
  const char *v10;
  int v11;
  __int16 v12;
  char v13;
  char v14;

  if (*(_BYTE *)(a1 + 424))
  {
    v2 = *(_QWORD *)(a1 + 80);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 64))(__p);
    if (v9 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    v4 = sub_100635B3C(v2, (const char *)v3);
    v5 = v4;
    if (v9 < 0)
    {
      operator delete(__p[0]);
      if (!v5)
        return;
    }
    else if (!v4)
    {
      return;
    }
    v10 = "workout_type";
    v11 = 5;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v6 = *(_QWORD *)(a1 + 80);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 64))(__p, a1);
    if (v9 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    sub_10063A8D4(v6, (const char *)v7, (uint64_t)"workout_type", (uint64_t)&v10);
  }
}

void sub_1014BC120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1014BC1EC(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void **v6;
  size_t v7;
  uint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14[34];
  __int16 v15;

  if (*(_BYTE *)(result + 424))
  {
    v1 = (_QWORD *)result;
    v3 = result + 112;
    v2 = *(_QWORD *)(result + 112);
    v4 = result + 72;
    v14[32] = (void *)(result + 112);
    (*(void (**)(uint64_t))(v2 + 16))(result + 112);
    v15 = 256;
    if (sub_10008950C(v4))
    {
      sub_100263E50((uint64_t)&v12);
      v5 = sub_100263F7C(&v13, (uint64_t)"DELETE FROM ", 12);
      v6 = __p;
      (*(void (**)(void **__return_ptr, _QWORD *))(*v1 + 64))(__p, v1);
      if (v11 < 0)
        v6 = (void **)__p[0];
      v7 = strlen((const char *)v6);
      sub_100263F7C(v5, (uint64_t)v6, v7);
      if (v11 < 0)
        operator delete(__p[0]);
      v8 = v1[10];
      std::stringbuf::str(__p, v14);
      if (v11 >= 0)
        v9 = (char *)__p;
      else
        v9 = (char *)__p[0];
      sub_1000CDA68(v8, v9);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  return result;
}

void sub_1014BC3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a16);
  sub_10187E514(v16 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_1014BC444(uint64_t a1)
{
  return sub_1014BC1EC(a1 - 72);
}

void sub_1014BC454(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  const char *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  _DWORD v19[3];
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  char *v23;
  char __s[48];
  char out[48];
  _BYTE __p[12];
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  char *v30;

  if (*(_BYTE *)(a1 + 424))
  {
    memset(out, 0, 37);
    uuid_unparse((const unsigned __int8 *)(a2 + 8), out);
    if ((sub_10008950C(a1 + 72) & 1) != 0)
    {
      memset(__s, 0, 37);
      uuid_unparse((const unsigned __int8 *)(a2 + 24), __s);
      sub_100263E50((uint64_t)v19);
      v4 = sub_100263F7C((uint64_t *)((char *)&v21 + 2), (uint64_t)"INSERT INTO ", 12);
      v5 = __p;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 64))(__p, a1);
      if (v29 < 0)
        v5 = *(const char **)__p;
      v6 = strlen(v5);
      v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
      sub_100263F7C(v7, (uint64_t)"(start_time, end_time, session_id, overview_id, workout_type, workout_location, swim_location, hr_max, estimated_workout_effort, estimated_workout_effort_pre_bias_correction, user_effort_response) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 237);
      if (SHIBYTE(v29) < 0)
        operator delete(*(void **)__p);
      v8 = *(_QWORD *)(a1 + 80);
      std::stringbuf::str(__p, &v23);
      if (v29 >= 0)
        v9 = __p;
      else
        v9 = *(char **)__p;
      sub_1000CDA68(v8, v9);
    }
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    v13 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a2 + 40);
      v15 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)__p = 134349570;
      *(_QWORD *)&__p[4] = v14;
      v27 = 2050;
      v28 = v15;
      v29 = 2082;
      v30 = out;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLWorkoutEffortSessionSummary, database isn't available for entry with startTime, %{public}f, endTime, %{public}f, sessionId, %{public}s", __p, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(__p, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    v16 = *(_QWORD *)(a2 + 40);
    v17 = *(_QWORD *)(a2 + 48);
    v19[0] = 134349570;
    *(_QWORD *)&v19[1] = v16;
    v20 = 2050;
    v21 = v17;
    v22 = 2082;
    v23 = out;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFD8, 16, "CLWorkoutEffortSessionSummary, database isn't available for entry with startTime, %{public}f, endTime, %{public}f, sessionId, %{public}s", v19, 32);
    v12 = (char *)v18;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLWorkoutEffortSessionSummaryDb::insertRecordUL(const CLWorkoutEffortSessionSummaryDbRow &, BOOL)", "%s\n", v18);
LABEL_28:
    if (v12 != __p)
      free(v12);
    return;
  }
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BA288);
  v10 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled", __p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    LOWORD(v19[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFD8, 0, "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled", v19, 2);
    v12 = (char *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLWorkoutEffortSessionSummaryDb::insertRecordUL(const CLWorkoutEffortSessionSummaryDbRow &, BOOL)", "%s\n", v11);
    goto LABEL_28;
  }
}

void sub_1014BCB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014BCBBC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_1014BCBCC()
{
  return 0;
}

uint64_t sub_1014BCBD4(uint64_t a1)
{
  size_t v2;
  void **v3;
  const void *v4;
  char *v5;
  NSObject *v6;
  const char *v8;
  void **v9;
  uint64_t v10;
  void *__p[2];
  char v12;

  if (*(_BYTE *)(a1 + 424))
  {
    if (sub_10008950C(a1 + 72))
    {
      if (*(char *)(a1 + 479) >= 0)
        v2 = *(unsigned __int8 *)(a1 + 479);
      else
        v2 = *(_QWORD *)(a1 + 464);
      v3 = __p;
      sub_100259584((uint64_t)__p, v2 + 25);
      if (v12 < 0)
        v3 = (void **)__p[0];
      if (v2)
      {
        if (*(char *)(a1 + 479) >= 0)
          v4 = (const void *)(a1 + 456);
        else
          v4 = *(const void **)(a1 + 456);
        memmove(v3, v4, v2);
      }
      strcpy((char *)v3 + v2, " ORDER BY id DESC LIMIT 1");
      if (v12 >= 0)
        v5 = (char *)__p;
      else
        v5 = (char *)__p[0];
      sub_1000CDA68(*(_QWORD *)(a1 + 80), v5);
    }
  }
  else
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    v6 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BA288);
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFD8, 2, "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled", &v10, 2);
      v9 = (void **)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual CLActivityDB::ActivityCode CLWorkoutEffortSessionSummaryDb::getMostRecentRecordUL(CLWorkoutEffortSessionSummaryDbRow &) const", "%s\n", v8);
      if (v9 != __p)
        free(v9);
    }
  }
  return 2;
}

void sub_1014BCE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014BCEA0(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021BA610);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021BA610);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_1014BE038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_1014BE358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  const char *v15;
  uint8_t *v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  __int16 v20;
  char out[48];
  uint8_t buf[16];
  uint64_t v23;
  _QWORD v24[8];

  if (*(_BYTE *)(a1 + 424))
  {
    v5 = a1 + 112;
    v4 = *(_QWORD *)(a1 + 112);
    v6 = a1 + 72;
    v19 = a1 + 112;
    (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
    v20 = 256;
    if (sub_10008950C(v6))
    {
      memset(out, 0, 37);
      uuid_unparse((const unsigned __int8 *)(a2 + 8), out);
      sub_100263E50((uint64_t)buf);
      v7 = sub_100263F7C(&v23, (uint64_t)"UPDATE ", 7);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 64))(__p, a1);
      if ((v18 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v9 = v18;
      else
        v9 = (uint64_t)__p[1];
      v10 = sub_100263F7C(v7, (uint64_t)v8, v9);
      sub_100263F7C(v10, (uint64_t)" SET user_effort_response = ? where session_id = ?;", 51);
      if ((char)v18 < 0)
        operator delete(__p[0]);
      v11 = *(_QWORD *)(a1 + 80);
      std::stringbuf::str(__p, v24);
      if ((v18 & 0x80u) == 0)
        v12 = (char *)__p;
      else
        v12 = (char *)__p[0];
      sub_1000CDA68(v11, v12);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  else
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BA288);
    v13 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BA288);
      *(_WORD *)out = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 0, "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled", out, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutEffortSessionSummaryDb::updateUserEnteredWorkoutEffort(const CLWorkoutEffortSessionSummaryDbRow)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  return 0;
}

void sub_1014BE720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a18 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a28);
  sub_10187E514((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1014BE7A4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *v14[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_101957994(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v14, a1);
    if ((v15 & 0x80u) == 0)
      v4 = v14;
    else
      v4 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)v14[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    v7 = a1[10];
    std::stringbuf::str(v14, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)v14;
    else
      v8 = (char *)v14[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1014BEBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v3 - 193) < 0)
    operator delete(*(void **)(v3 - 216));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014BEC24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021BA610);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021BA610);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021BA610);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1014BF224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1014BF254@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[455] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 54), *((_QWORD *)result + 55));
  *(_OWORD *)a2 = *((_OWORD *)result + 27);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 56);
  return result;
}

__n128 sub_1014BF280(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v3 = *a3;
  v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  result = (__n128)a3[3];
  v6 = a3[4];
  v7 = a3[5];
  *(_DWORD *)(a2 + 96) = *((_DWORD *)a3 + 24);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t sub_1014BF2AC(uint64_t a1)
{
  return sub_1014BEC24(a1 - 72);
}

char *sub_1014BF2B4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[383] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 45), *((_QWORD *)result + 46));
  *(_OWORD *)a2 = *(_OWORD *)(result + 360);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 47);
  return result;
}

void sub_1014BF2E0(id a1)
{
  qword_10229FFD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

uint64_t sub_1014BF30C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *v16[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_101957B00(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v16, a1);
    if ((v17 & 0x80u) == 0)
      v7 = v16;
    else
      v7 = (void **)v16[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)v16[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(v16[0]);
    v10 = a1[10];
    std::stringbuf::str(v16, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)v16;
    else
      v11 = (char *)v16[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1014BF6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_1014BF744(uint64_t a1, __int128 *a2, char a3)
{
  int v11;
  double v12;
  double v13;
  double v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  double v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  double v23;
  double v24;
  NSObject *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  double v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  double v40;
  id v41[2];
  int v42;
  double v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  double v47;
  __int16 v48;
  uint64_t v49;
  _BYTE v50[40];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;

  v41[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v41[1] = 0;
  if (*(double *)(a1 + 264) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v41);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  __asm { FMOV            V0.2D, #-1.0 }
  v51 = _Q0;
  v52 = xmmword_101CAC590;
  v53 = 2;
  __asm { FMOV            V0.2S, #-1.0 }
  v54 = _Q0;
  v55 = -1082130432;
  v11 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v50);
  if (v11 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v11)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021BA610);
      v19 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021BA610);
        LOWORD(v42) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v42, 2);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      goto LABEL_43;
    }
    v12 = *((double *)a2 + 5);
    v13 = *(double *)&v51;
    v14 = v12 - *(double *)&v51;
    if (v12 - *(double *)&v51 < 0.0)
      v14 = -(v12 - *(double *)&v51);
    if (v14 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021BA610);
      v15 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *((_QWORD *)a2 + 5);
        *(_DWORD *)buf = 134349312;
        v47 = *(double *)&v51;
        v48 = 2050;
        v49 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021BA610);
        v32 = *((_QWORD *)a2 + 5);
        v42 = 134349312;
        v43 = *(double *)&v51;
        v44 = 2050;
        v45 = v32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v42, 22);
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v12 = *((double *)a2 + 5);
      v13 = *(double *)&v51;
    }
    if (v12 < v13)
    {
      if (v13 - v12 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021BA610);
        v17 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v18 = *((double *)a2 + 5);
          *(_DWORD *)buf = 134217984;
          v47 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021BA610);
          v35 = *((double *)a2 + 5);
          v42 = 134217984;
          v43 = v35;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v42));
          v37 = (uint8_t *)v36;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v36);
          if (v37 != buf)
            free(v37);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v22 = v12 - v13;
      v23 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v40 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021BA610);
        v23 = v40;
      }
      v24 = v22 - v23;
      v25 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v47 = v24;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021BA610);
        v42 = 134217984;
        v43 = v24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v42));
        v39 = (uint8_t *)v38;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v24);
    }
    (*(void (**)(uint64_t, _BYTE *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, v50, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v26 = *a2;
  v27 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v27;
  *(_OWORD *)(a1 + 224) = v26;
  v28 = a2[3];
  v29 = a2[4];
  v30 = a2[5];
  *(_DWORD *)(a1 + 320) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 288) = v29;
  *(_OWORD *)(a1 + 304) = v30;
  *(_OWORD *)(a1 + 272) = v28;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v41);
}

void sub_1014BFED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014BFEFC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_101957C6C(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1014C015C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101957DD8(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1014C0394(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101957F44(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1014C05BC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1014C05E8(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 19;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 39;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

__n128 sub_1014C067C(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 39 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1014C07AC(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x27)) + 104 * (v7 % 0x27);
  v9 = *a2;
  v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)v8 = v9;
  result = (__n128)a2[3];
  v12 = a2[4];
  v13 = a2[5];
  *(_QWORD *)(v8 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(v8 + 64) = v12;
  *(_OWORD *)(v8 + 80) = v13;
  *(__n128 *)(v8 + 48) = result;
  ++a1[5];
  return result;
}

uint64_t sub_1014C0750(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x27)
    a2 = 1;
  if (v2 < 0x4E)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 39;
  }
  return v4 ^ 1u;
}

void sub_1014C07AC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x27;
  v4 = v2 - 39;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFD8uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFD8uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFD8uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1014C0A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1014C0AC0()
{
  sub_1015A2E04(&qword_10230F860, "WorkoutEffortSessionSummary");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230F860, (void *)&_mh_execute_header);
}

float sub_1014C0B04(uint64_t a1, uint64_t a2)
{
  float v3;
  int v4;
  int v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  __int128 v16;
  __int128 v17;
  float v18;
  float v20;
  float v21;
  _QWORD v22[3];
  char v23;
  _UNKNOWN **v24;
  int v25;
  uint64_t v26;
  float v27;
  int v28;
  int32x2_t v29;
  int v30;
  __int128 v31;
  int32x4_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;

  v26 = *(_QWORD *)(a2 + 4);
  v3 = *(double *)(a2 + 104);
  v4 = *(_DWORD *)(a2 + 12);
  v27 = v3;
  v28 = v4;
  v29 = vrev64_s32(*(int32x2_t *)(a2 + 20));
  v30 = *(_DWORD *)(a2 + 28);
  v31 = *(_OWORD *)(a2 + 40);
  v32 = vuzp2q_s32(*(int32x4_t *)(a2 + 56), vrev64q_s32(*(int32x4_t *)(a2 + 56)));
  v33 = *(_DWORD *)(a2 + 120);
  v34 = *(_QWORD *)(a2 + 128);
  v5 = *(_DWORD *)(a2 + 160);
  v35 = *(_DWORD *)(a2 + 136);
  v36 = v5;
  v6 = 0.0;
  if (sub_1014B1EB0(*(_QWORD *)(a2 + 88)) == 5)
    v7 = 1.0;
  else
    v7 = 0.0;
  v21 = v7;
  if (sub_1014B1EB0(*(_QWORD *)(a2 + 88)) == 7)
    v8 = 1.0;
  else
    v8 = 0.0;
  v20 = v8;
  if (sub_1014B1EB0(*(_QWORD *)(a2 + 88)) == 9)
    v9 = 1.0;
  else
    v9 = 0.0;
  if (sub_1014B1EB0(*(_QWORD *)(a2 + 88)) == 11)
    v10 = 1.0;
  else
    v10 = 0.0;
  if (sub_1014B1EB0(*(_QWORD *)(a2 + 88)) == 12)
    v11 = 1.0;
  else
    v11 = 0.0;
  if (sub_1014B1EB0(*(_QWORD *)(a2 + 88)) == 18)
    v12 = 1.0;
  else
    v12 = 0.0;
  if (sub_1014B1EB0(*(_QWORD *)(a2 + 88)) == 19)
    v13 = 1.0;
  else
    v13 = 0.0;
  if (sub_1014B1EB0(*(_QWORD *)(a2 + 88)) == 14)
    v14 = 1.0;
  else
    v14 = 0.0;
  if (sub_1014B1EB0(*(_QWORD *)(a2 + 88)) == 22)
    v6 = 1.0;
  v15 = (float *)operator new(0x24uLL);
  *v15 = v21;
  v15[1] = v20;
  v15[2] = v9;
  v15[3] = v10;
  v15[4] = v11;
  v15[5] = v12;
  v15[6] = v13;
  v15[7] = v14;
  v15[8] = v6;
  v16 = *(_OWORD *)v15;
  v17 = *((_OWORD *)v15 + 1);
  v39 = *((_DWORD *)v15 + 8);
  v22[2] = 29;
  v23 = 1;
  v24 = &off_1021BA800;
  v37 = v16;
  v38 = v17;
  v22[0] = off_1021B9E38;
  v22[1] = &off_1021BA630;
  v25 = 1056964608;
  v18 = sub_1014B2494((uint64_t)v22, (uint64_t)&v26);
  operator delete(v15);
  return v18;
}

void sub_1014C0CE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1014C0CF8(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  _BOOL4 v18;
  _BOOL4 v19;
  float v21;
  float v22;
  NSObject *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  const char *v28;
  uint8_t *v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  double v39;
  __int16 v40;
  unint64_t v41;
  uint8_t buf[4];
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  double v51;
  __int16 v52;
  unint64_t v53;

  v11 = *a3;
  v10 = a3[1];
  if (*a3 == v10)
  {
    v13 = 0;
    v14 = 0.0;
  }
  else
  {
    v13 = 0;
    v14 = 0.0;
    do
    {
      v15 = a1 - *(double *)(v11 + 40);
      if (v15 >= 2592000.0)
        break;
      if (*(_QWORD *)(v11 + 56) == a4)
      {
        v16 = *(float *)(v11 + 96);
        if (a4 != 19 || *(_QWORD *)(v11 + 72) == a6)
        {
          if (*(float *)(v11 + 92) == -1.0)
            v17 = *(float *)(v11 + 88);
          else
            v17 = *(float *)(v11 + 92);
          v18 = sub_1014B1E78(v17);
          v19 = sub_1014B1E78(v16);
          if (v18 && v19)
          {
            if ((float)(v16 - v17) <= 2.0)
              v21 = v16 - v17;
            else
              v21 = 2.0;
            if ((float)(v16 - v17) >= -2.0)
              v22 = v21;
            else
              v22 = -2.0;
            v14 = v14 + v22;
            ++v13;
          }
          if (v13 > 9)
            break;
          v10 = a3[1];
        }
      }
      v11 += 104;
    }
    while (v11 != v10);
  }
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BAA10);
  v23 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
  {
    v24 = 0x4EC4EC4EC4EC4EC5 * ((a3[1] - *a3) >> 3);
    if (v13)
      v25 = (float)(v14 / (float)v13);
    else
      v25 = 0.0;
    *(_DWORD *)buf = 134219264;
    v43 = v24;
    v44 = 1024;
    v45 = a4;
    v46 = 1024;
    v47 = a5;
    v48 = 1024;
    v49 = a6;
    v50 = 2048;
    v51 = v25;
    v52 = 2048;
    v53 = v13;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "BiasCorrector, numHistoricalData, %zu, workoutType, %d, workoutLocation, %d, swimLocation, %d avgDelta, %f, countMatch, %zu", buf, 0x32u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BAA10);
    v26 = 0x4EC4EC4EC4EC4EC5 * ((a3[1] - *a3) >> 3);
    if (v13)
      v27 = (float)(v14 / (float)v13);
    else
      v27 = 0.0;
    v30 = 134219264;
    v31 = v26;
    v32 = 1024;
    v33 = a4;
    v34 = 1024;
    v35 = a5;
    v36 = 1024;
    v37 = a6;
    v38 = 2048;
    v39 = v27;
    v40 = 2048;
    v41 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 0, "BiasCorrector, numHistoricalData, %zu, workoutType, %d, workoutLocation, %d, swimLocation, %d avgDelta, %f, countMatch, %zu", (size_t)&v30, 50);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "float CLWorkoutEffortBiasCorrector::computeAvgUserBiasForWorkoutTypeCorrection(const CFAbsoluteTime, const std::vector<CLWorkoutEffort::SessionSummary> &, const CMWorkoutType, const CMWorkoutLocationType, const CMSwimWorkoutLocation) const", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
}

uint64_t sub_1014C1090(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  int v7;

  *(_QWORD *)a1 = a2;
  *(double *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  sub_1014C0CF8(a6, a1, a2, a3, a4, a5);
  *(_DWORD *)(a1 + 40) = v7;
  return a1;
}

void sub_1014C10C8(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  float v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  float v13;
  NSObject *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  const char *v19;
  uint8_t *v20;
  double v21;
  int v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  uint8_t buf[4];
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;

  v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v4;
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a3 + 16);
  if (**(_QWORD **)a1 != *(_QWORD *)(*(_QWORD *)a1 + 8))
  {
    v7 = sub_1014C1348((uint64_t)a1, (uint64_t)a2, (uint64_t)a2);
    v9 = a1[10];
    v8 = a1 + 10;
    v10 = v9;
    v11 = -2.0;
    if (v9 >= -2.0)
    {
      v12 = (float *)&unk_101CB25BC;
      if (v10 <= 2.0)
        v12 = v8;
      v11 = *v12;
    }
    v13 = v11 + a2[4];
    *(float *)(a3 + 16) = v13;
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BAA10);
    v14 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
    {
      v15 = a2[4];
      v16 = *v8;
      *(_DWORD *)buf = 134218752;
      v31 = v15;
      v32 = 2048;
      v33 = v13;
      v34 = 2048;
      v35 = v16;
      v36 = 2048;
      v37 = v7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BiasCorrector, rawScore, %f, correctedScore, %f, avgUserBias, %f, recentHighEffortBonus, %f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BAA10);
      v17 = a2[4];
      v18 = *v8;
      v22 = 134218752;
      v23 = v17;
      v24 = 2048;
      v25 = v13;
      v26 = 2048;
      v27 = v18;
      v28 = 2048;
      v29 = v7;
      LODWORD(v21) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "BiasCorrector, rawScore, %f, correctedScore, %f, avgUserBias, %f, recentHighEffortBonus, %f", COERCE_DOUBLE(&v22), v21);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "CLWorkoutEffort::Result CLWorkoutEffortBiasCorrector::correctBias(const CLWorkoutEffort::Result &) const", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
}

float sub_1014C1348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double v5;
  float v6;
  float v7;
  double v8;
  float v9;
  float v10;
  float v11;
  float v12;
  NSObject *v13;
  double v14;
  double v15;
  const char *v16;
  uint8_t *v17;
  double v19;
  int v20;
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  uint8_t buf[4];
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (**(_QWORD **)a1 == v3)
    return 0.0;
  v5 = *(double *)(v3 - 56);
  v6 = *(float *)(v3 - 12);
  v7 = *(float *)(a3 + 16);
  v8 = v5 - *(double *)a3;
  if (v8 < 0.0)
    v8 = 0.0;
  v9 = 0.0;
  if (v8 < 14400.0)
  {
    v10 = v8 / -14400.0 + 1.0;
    v11 = (float)(v6 - v7) * v10;
    v12 = 2.0;
    if (v11 <= 2.0)
      v12 = v11;
    if (v11 >= 0.0)
      v9 = v12;
    else
      v9 = 0.0;
  }
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BAA10);
  v13 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(double *)a3;
    *(_DWORD *)buf = 134219008;
    v31 = v9;
    v32 = 2048;
    v33 = v6;
    v34 = 2048;
    v35 = v7;
    v36 = 2048;
    v37 = v5;
    v38 = 2048;
    v39 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "BiasCorrector, recentHighEffortBonus, %f, lastScore, %f, currentScore, %f, lastEndTime, %f, currentStartTime, %f", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BAA10);
    v15 = *(double *)a3;
    v20 = 134219008;
    v21 = v9;
    v22 = 2048;
    v23 = v6;
    v24 = 2048;
    v25 = v7;
    v26 = 2048;
    v27 = v5;
    v28 = 2048;
    v29 = v15;
    LODWORD(v19) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "BiasCorrector, recentHighEffortBonus, %f, lastScore, %f, currentScore, %f, lastEndTime, %f, currentStartTime, %f", COERCE_DOUBLE(&v20), v19);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "float CLWorkoutEffortBiasCorrector::computeRecentHighEffortBiasCorrection(const std::vector<CLWorkoutEffort::SessionSummary> &, const CLWorkoutEffort::Result &) const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return v9;
}

void sub_1014C15EC(id a1)
{
  qword_10229FFD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

float sub_1014C1618(uint64_t a1, uint64_t a2)
{
  float v2;
  int v3;
  int v4;
  uint64_t v5;
  float v6;
  _QWORD v8[3];
  char v9;
  _UNKNOWN **v10;
  int v11;
  uint64_t v12;
  float v13;
  int v14;
  int32x2_t v15;
  int v16;
  __int128 v17;
  int32x4_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  float v23;
  __int128 v24;
  __int128 v25;

  v12 = *(_QWORD *)(a2 + 4);
  v2 = *(double *)(a2 + 104);
  v3 = *(_DWORD *)(a2 + 12);
  v13 = v2;
  v14 = v3;
  v15 = vrev64_s32(*(int32x2_t *)(a2 + 20));
  v16 = *(_DWORD *)(a2 + 28);
  v17 = *(_OWORD *)(a2 + 40);
  v18 = vuzp2q_s32(*(int32x4_t *)(a2 + 56), vrev64q_s32(*(int32x4_t *)(a2 + 56)));
  v19 = *(_DWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v4 = *(_DWORD *)(a2 + 160);
  v21 = *(_DWORD *)(a2 + 136);
  v22 = v4;
  v24 = 0u;
  v25 = 0u;
  v5 = sub_1014B1EB0(*(_QWORD *)(a2 + 88));
  v6 = 0.0;
  if (v5 == 4)
    v6 = 1.0;
  v8[2] = 50;
  v9 = 1;
  v10 = &off_1021BAD50;
  v23 = v6;
  v8[0] = off_1021B9E38;
  v8[1] = &off_1021BAA30;
  v11 = 1056964608;
  return sub_1014B2494((uint64_t)v8, (uint64_t)&v12);
}

void *sub_1014C1704(uint64_t a1, const void *a2)
{
  void *result;

  result = memcpy((void *)(a1 + 64), a2, 0x590uLL);
  *(_BYTE *)(a1 + 1489) = 1;
  return result;
}

__n128 sub_1014C1734(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  *(_BYTE *)(a1 + 1488) = 1;
  return result;
}

__n128 sub_1014C1758@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  __int128 v5;
  __n128 result;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (!*(_BYTE *)(a1 + 1488))
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB0B0);
    v4 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "WorkoutEffortInputCollector, no valid body metrics detected", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB0B0);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 16, "WorkoutEffortInputCollector, no valid body metrics detected", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "const CLBodyMetrics CLWorkoutEffortInputCollector::getBodyMetrics()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  result = *(__n128 *)(a1 + 44);
  *(__n128 *)(a2 + 44) = result;
  return result;
}

BOOL sub_1014C190C(_BYTE *a1)
{
  return a1[1488] && a1[56] && a1[57] && a1[58] != 0;
}

double sub_1014C193C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float32x2_t v2;
  __int128 v3;
  __int128 v4;

  if (*(_BYTE *)(a1 + 1489)
    && *(_BYTE *)(a1 + 1488)
    && *(_BYTE *)(a1 + 56)
    && *(_BYTE *)(a1 + 57)
    && *(_BYTE *)(a1 + 58))
  {
    v2 = vcvt_f32_f64(*(float64x2_t *)(a1 + 1448));
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 80);
    *(float32x2_t *)(a2 + 8) = v2;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 1440);
    v3 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 40) = v3;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 32);
    v4 = *(_OWORD *)(a1 + 44);
    *(_OWORD *)(a2 + 68) = v4;
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 424);
  }
  else
  {
    *(_QWORD *)&v4 = 0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_QWORD *)a2 = 0xBFF0000000000000;
    *(_QWORD *)(a2 + 16) = 0xBFF0000000000000;
  }
  return *(double *)&v4;
}

void sub_1014C19D0(id a1)
{
  qword_10229FFD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

float sub_1014C19FC(uint64_t a1, uint64_t a2)
{
  float v3;
  int v4;
  int v5;
  float v6;
  float v7;
  float v8;
  float *v9;
  float v10;
  _QWORD v12[3];
  char v13;
  _UNKNOWN **v14;
  int v15;
  uint64_t v16;
  float v17;
  int v18;
  int32x2_t v19;
  int v20;
  __int128 v21;
  int32x4_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v16 = *(_QWORD *)(a2 + 4);
  v3 = *(double *)(a2 + 104);
  v4 = *(_DWORD *)(a2 + 12);
  v17 = v3;
  v18 = v4;
  v19 = vrev64_s32(*(int32x2_t *)(a2 + 20));
  v20 = *(_DWORD *)(a2 + 28);
  v21 = *(_OWORD *)(a2 + 40);
  v22 = vuzp2q_s32(*(int32x4_t *)(a2 + 56), vrev64q_s32(*(int32x4_t *)(a2 + 56)));
  v23 = *(_DWORD *)(a2 + 120);
  v24 = *(_QWORD *)(a2 + 128);
  v5 = *(_DWORD *)(a2 + 160);
  v25 = *(_DWORD *)(a2 + 136);
  v26 = v5;
  v6 = 0.0;
  if (sub_1014B1EB0(*(_QWORD *)(a2 + 88)) == 15)
    v7 = 1.0;
  else
    v7 = 0.0;
  if (sub_1014B1EB0(*(_QWORD *)(a2 + 88)) == 16)
    v8 = 1.0;
  else
    v8 = 0.0;
  if (sub_1014B1EB0(*(_QWORD *)(a2 + 88)) == 24)
    v6 = 1.0;
  v9 = (float *)operator new(0xCuLL);
  *v9 = v7;
  v9[1] = v8;
  v9[2] = v6;
  v29 = 0;
  v31 = 0;
  v30 = 0;
  v27 = *(_QWORD *)v9;
  v28 = *((_DWORD *)v9 + 2);
  v12[2] = 50;
  v13 = 1;
  v14 = &off_1021BB3F0;
  v12[0] = off_1021B9E38;
  v12[1] = &off_1021BB0D0;
  v15 = 1056964608;
  v10 = sub_1014B2494((uint64_t)v12, (uint64_t)&v16);
  operator delete(v9);
  return v10;
}

void sub_1014C1B54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1014C1B70(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a1 + 16) != 1
      || uuid_compare((const unsigned __int8 *)(a1 + 120), (const unsigned __int8 *)(a2 + 64)) != 0;
}

BOOL sub_1014C1BA8(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a1 + 16) != 1
      || uuid_compare((const unsigned __int8 *)(a1 + 120), (const unsigned __int8 *)(a2 + 64)) != 0;
}

BOOL sub_1014C1BE4(_QWORD *a1, _QWORD *a2)
{
  return a2[14] != a1[21] || a2[15] != a1[22] || a2[16] != a1[23];
}

uint64_t sub_1014C1C34(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1021BB750;
  *(_QWORD *)(a1 + 8) = 9;
  *(_WORD *)(a1 + 16) = 512;
  sub_100270E34(a1 + 24, a2);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 273) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  return a1;
}

uint64_t sub_1014C1CB8(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  switch(*((_QWORD *)a2 + 2))
  {
    case 8:
      v2 = a2[13];
      v71 = a2[12];
      v72 = v2;
      v73 = *((_QWORD *)a2 + 28);
      v3 = a2[9];
      v67 = a2[8];
      v68 = v3;
      v4 = a2[11];
      v69 = a2[10];
      v70 = v4;
      v5 = a2[5];
      v63 = a2[4];
      v64 = v5;
      v6 = a2[7];
      v65 = a2[6];
      v66 = v6;
      v7 = a2[1];
      v59 = *a2;
      v60 = v7;
      v8 = a2[3];
      v61 = a2[2];
      v62 = v8;
      v9 = 6;
      goto LABEL_10;
    case 9:
      v10 = a2[13];
      v71 = a2[12];
      v72 = v10;
      v73 = *((_QWORD *)a2 + 28);
      v11 = a2[9];
      v67 = a2[8];
      v68 = v11;
      v12 = a2[11];
      v69 = a2[10];
      v70 = v12;
      v13 = a2[5];
      v63 = a2[4];
      v64 = v13;
      v14 = a2[7];
      v65 = a2[6];
      v66 = v14;
      v15 = a2[1];
      v59 = *a2;
      v60 = v15;
      v16 = a2[3];
      v61 = a2[2];
      v62 = v16;
      v9 = 7;
      goto LABEL_10;
    case 0xALL:
      v17 = a2[13];
      v71 = a2[12];
      v72 = v17;
      v73 = *((_QWORD *)a2 + 28);
      v18 = a2[9];
      v67 = a2[8];
      v68 = v18;
      v19 = a2[11];
      v69 = a2[10];
      v70 = v19;
      v20 = a2[5];
      v63 = a2[4];
      v64 = v20;
      v21 = a2[7];
      v65 = a2[6];
      v66 = v21;
      v22 = a2[1];
      v59 = *a2;
      v60 = v22;
      v23 = a2[3];
      v61 = a2[2];
      v62 = v23;
      v9 = 8;
      goto LABEL_10;
    case 0xDLL:
      v24 = a2[13];
      v71 = a2[12];
      v72 = v24;
      v73 = *((_QWORD *)a2 + 28);
      v25 = a2[9];
      v67 = a2[8];
      v68 = v25;
      v26 = a2[11];
      v69 = a2[10];
      v70 = v26;
      v27 = a2[5];
      v63 = a2[4];
      v64 = v27;
      v28 = a2[7];
      v65 = a2[6];
      v66 = v28;
      v29 = a2[1];
      v59 = *a2;
      v60 = v29;
      v30 = a2[3];
      v61 = a2[2];
      v62 = v30;
      v9 = 1;
      goto LABEL_10;
    case 0xELL:
      v31 = a2[13];
      v71 = a2[12];
      v72 = v31;
      v73 = *((_QWORD *)a2 + 28);
      v32 = a2[9];
      v67 = a2[8];
      v68 = v32;
      v33 = a2[11];
      v69 = a2[10];
      v70 = v33;
      v34 = a2[5];
      v63 = a2[4];
      v64 = v34;
      v35 = a2[7];
      v65 = a2[6];
      v66 = v35;
      v36 = a2[1];
      v59 = *a2;
      v60 = v36;
      v37 = a2[3];
      v61 = a2[2];
      v62 = v37;
      v9 = 5;
      goto LABEL_10;
    case 0xFLL:
      v38 = a2[13];
      v71 = a2[12];
      v72 = v38;
      v73 = *((_QWORD *)a2 + 28);
      v39 = a2[9];
      v67 = a2[8];
      v68 = v39;
      v40 = a2[11];
      v69 = a2[10];
      v70 = v40;
      v41 = a2[5];
      v63 = a2[4];
      v64 = v41;
      v42 = a2[7];
      v65 = a2[6];
      v66 = v42;
      v43 = a2[1];
      v59 = *a2;
      v60 = v43;
      v44 = a2[3];
      v61 = a2[2];
      v62 = v44;
      v9 = 2;
      goto LABEL_10;
    case 0x10:
      v45 = a2[13];
      v71 = a2[12];
      v72 = v45;
      v73 = *((_QWORD *)a2 + 28);
      v46 = a2[9];
      v67 = a2[8];
      v68 = v46;
      v47 = a2[11];
      v69 = a2[10];
      v70 = v47;
      v48 = a2[5];
      v63 = a2[4];
      v64 = v48;
      v49 = a2[7];
      v65 = a2[6];
      v66 = v49;
      v50 = a2[1];
      v59 = *a2;
      v60 = v50;
      v51 = a2[3];
      v61 = a2[2];
      v62 = v51;
      v9 = 3;
      goto LABEL_10;
    case 0x11:
      v52 = a2[13];
      v71 = a2[12];
      v72 = v52;
      v73 = *((_QWORD *)a2 + 28);
      v53 = a2[9];
      v67 = a2[8];
      v68 = v53;
      v54 = a2[11];
      v69 = a2[10];
      v70 = v54;
      v55 = a2[5];
      v63 = a2[4];
      v64 = v55;
      v56 = a2[7];
      v65 = a2[6];
      v66 = v56;
      v57 = a2[1];
      v59 = *a2;
      v60 = v57;
      v58 = a2[3];
      v61 = a2[2];
      v62 = v58;
      v9 = 4;
LABEL_10:
      result = sub_10023195C(result, v9, (uint64_t)&v59);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1014C1F8C(uint64_t a1, int a2, double a3)
{
  NSObject *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  uint8_t buf[8];
  double v22;
  uint64_t v23;
  double v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BB828);
  v6 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 168);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v7;
    LOWORD(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortWorkoutStateTracker, #Warning, prepareSessionEnd type mismatch, trackingWorkoutType, %d, prepareSessionEndWorkoutType, %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB828);
    v15 = *(_QWORD *)(a1 + 168);
    v18[0] = 67109376;
    v18[1] = v15;
    v19 = 1024;
    v20 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 0, "CLWorkoutEffortWorkoutStateTracker, #Warning, prepareSessionEnd type mismatch, trackingWorkoutType, %d, prepareSessionEndWorkoutType, %d", v18, 14);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortWorkoutStateTracker::prepareSessionEnd(CMWorkoutType, CFAbsoluteTime)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  *(_QWORD *)buf = *(_QWORD *)(a1 + 56);
  v22 = a3;
  v23 = 15;
  v24 = a3;
  v8 = *(_OWORD *)(a1 + 232);
  v9 = *(_OWORD *)(a1 + 264);
  v35 = *(_OWORD *)(a1 + 248);
  v36 = v9;
  v37 = *(_QWORD *)(a1 + 280);
  v10 = *(_OWORD *)(a1 + 168);
  v11 = *(_OWORD *)(a1 + 200);
  v31 = *(_OWORD *)(a1 + 184);
  v32 = v11;
  v33 = *(_OWORD *)(a1 + 216);
  v34 = v8;
  v12 = *(_OWORD *)(a1 + 104);
  v13 = *(_OWORD *)(a1 + 136);
  v27 = *(_OWORD *)(a1 + 120);
  v28 = v13;
  v29 = *(_OWORD *)(a1 + 152);
  v30 = v10;
  v25 = *(_OWORD *)(a1 + 88);
  v26 = v12;
  return sub_10023195C(a1, 2, (uint64_t)buf);
}

BOOL sub_1014C21DC(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  int v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  char *v15;
  __int16 v16;
  char *v17;
  uint8_t buf[4];
  char *v19;
  __int16 v20;
  char *v21;
  char out[48];
  _BYTE v23[37];
  uuid_t uu;

  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  v3 = sub_1001FD94C();
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 936))(v3);
  if (!sub_1014C257C(v4, uu) || uuid_is_null(uu))
    return 0;
  memset(v23, 0, sizeof(v23));
  memset(out, 0, 37);
  uuid_unparse(uu, out);
  uuid_unparse(a2, out);
  v7 = uuid_compare(a2, uu);
  v5 = v7 == 0;
  if (v7)
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB828);
    v8 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315394;
      v19 = v23;
      v20 = 2080;
      v21 = out;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "CLWorkoutEffortWorkoutStateTracker, different sessionId found in cache, clearing value, cachedSessionId, %s, currentSessionId, %s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB828);
      v14 = 136315394;
      v15 = v23;
      v16 = 2080;
      v17 = out;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 17, "CLWorkoutEffortWorkoutStateTracker, different sessionId found in cache, clearing value, cachedSessionId, %s, currentSessionId, %s", (const char *)&v14, 22);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWorkoutEffortWorkoutStateTracker::evaluateDidRecoverFromCrash(unsigned char *) const", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    sub_1014C27D4();
  }
  else
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB828);
    v9 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v19 = out;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortWorkoutStateTracker, inferring crash recovery, saved session id found, %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB828);
      v14 = 136315138;
      v15 = out;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 0, "CLWorkoutEffortWorkoutStateTracker, inferring crash recovery, saved session id found, %s", (const char *)&v14);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutEffortWorkoutStateTracker::evaluateDidRecoverFromCrash(unsigned char *) const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  return v5;
}

BOOL sub_1014C257C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  NSObject *v4;
  std::string *p_p;
  std::string *v6;
  _BOOL8 v7;
  std::string *v9;
  const char *v10;
  uint8_t *v11;
  std::string __p;
  int v13;
  std::string *v14;
  uint8_t buf[4];
  std::string *v16;

  memset(&__p, 0, sizeof(__p));
  v3 = sub_1001FD94C();
  if (sub_1000BCB64(v3, "WorkoutEffortSessionId", &__p))
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB828);
    v4 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v16 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortWorkoutStateTracker, retrieving session id, %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB828);
      v9 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v13 = 136315138;
      v14 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 0, "CLWorkoutEffortWorkoutStateTracker, retrieving session id, %s", (const char *)&v13);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutEffortWorkoutStateTracker::getSessionIdFromCache(uuid_t &) const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &__p;
    else
      v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v7 = uuid_parse((const char *)v6, a2) == 0;
  }
  else
  {
    v7 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1014C27B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1014C27D4()
{
  NSObject *v0;
  uint64_t v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BB828);
  v0 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortWorkoutStateTracker, clearing session id from daemon cache.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB828);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 0, "CLWorkoutEffortWorkoutStateTracker, clearing session id from daemon cache.", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortWorkoutStateTracker::clearSessionIdInCache() const", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  v1 = sub_1001FD94C();
  sub_100525484(v1, "WorkoutEffortSessionId", 0xFFFFFFFFLL);
}

uint64_t sub_1014C296C(int a1, unsigned __int8 *uu)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  uint8_t *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  char *v11;
  char out[40];

  memset(out, 0, 37);
  uuid_unparse(uu, out);
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BB828);
  v2 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v11 = out;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortWorkoutStateTracker, saving session id to daemon cache, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB828);
    v8 = 136315138;
    v9 = out;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 0, "CLWorkoutEffortWorkoutStateTracker, saving session id to daemon cache, %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortWorkoutStateTracker::saveSessionIdInCache(const uuid_t &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v3 = sub_1001FD94C();
  sub_1005285B4(v3, "WorkoutEffortSessionId", out);
  v4 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 944))(v4);
}

void sub_1014C2B4C(id a1)
{
  qword_10229FFD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

uint64_t sub_1014C2B78(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _BOOL4 v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v3 = a2[13];
  v33 = a2[12];
  v34 = v3;
  v4 = *((_QWORD *)a2 + 28);
  v5 = a2[9];
  v29 = a2[8];
  v30 = v5;
  v6 = a2[11];
  v31 = a2[10];
  v32 = v6;
  v7 = a2[5];
  v25 = a2[4];
  v26 = v7;
  v8 = a2[7];
  v27 = a2[6];
  v28 = v8;
  v9 = a2[1];
  v21 = *a2;
  v22 = v9;
  v10 = a2[3];
  v23 = a2[2];
  v24 = v10;
  v11 = v31;
  *(_OWORD *)(a1 + 232) = v32;
  v12 = v34;
  *(_OWORD *)(a1 + 248) = v33;
  *(_OWORD *)(a1 + 264) = v12;
  v13 = v27;
  *(_OWORD *)(a1 + 168) = v28;
  v14 = v30;
  *(_OWORD *)(a1 + 184) = v29;
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 216) = v11;
  v15 = v23;
  *(_OWORD *)(a1 + 104) = v24;
  v16 = v26;
  *(_OWORD *)(a1 + 120) = v25;
  *(_QWORD *)&v22 = 0;
  *(_OWORD *)(a1 + 136) = v16;
  *(_OWORD *)(a1 + 152) = v13;
  v17 = v22;
  *(_OWORD *)(a1 + 56) = v21;
  *(_OWORD *)(a1 + 88) = v15;
  v35 = v4;
  *(_QWORD *)(a1 + 280) = v4;
  *(_OWORD *)(a1 + 72) = v17;
  v18 = *(_QWORD *)(a1 + 48);
  if (!v18)
    sub_10025FD1C();
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v18 + 48))(v18, &v21);
  v19 = sub_1014C21DC(a1, (const unsigned __int8 *)&v25);
  *(_BYTE *)(a1 + 288) = v19;
  return sub_1014C296C(v19, (unsigned __int8 *)&v25);
}

uint64_t sub_1014C2CAC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _BOOL4 v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v3 = *(_OWORD *)(a1 + 232);
  v4 = a1 + 56;
  v5 = *(_OWORD *)(a1 + 264);
  v63 = *(_OWORD *)(a1 + 248);
  v64 = v5;
  v6 = *(_OWORD *)(a1 + 168);
  v7 = *(_OWORD *)(a1 + 200);
  v59 = *(_OWORD *)(a1 + 184);
  v60 = v7;
  v61 = *(_OWORD *)(a1 + 216);
  v62 = v3;
  v8 = *(_OWORD *)(a1 + 104);
  v9 = *(_OWORD *)(a1 + 136);
  v55 = *(_OWORD *)(a1 + 120);
  v56 = v9;
  v57 = *(_OWORD *)(a1 + 152);
  v58 = v6;
  v10 = *(_OWORD *)(a1 + 72);
  v51 = *(_OWORD *)(a1 + 56);
  v52 = v10;
  v53 = *(_OWORD *)(a1 + 88);
  v54 = v8;
  *((_QWORD *)&v52 + 1) = *((_QWORD *)a2 + 3);
  *((_QWORD *)&v51 + 1) = *((_QWORD *)&v52 + 1);
  *(_OWORD *)(a1 + 88) = v53;
  v11 = v58;
  *(_OWORD *)(a1 + 152) = v57;
  v12 = v55;
  *(_OWORD *)(a1 + 136) = v56;
  *(_OWORD *)(a1 + 120) = v12;
  *(_OWORD *)(a1 + 104) = v8;
  v13 = v62;
  *(_OWORD *)(a1 + 216) = v61;
  v14 = v59;
  *(_OWORD *)(a1 + 200) = v60;
  *(_OWORD *)(a1 + 184) = v14;
  *(_OWORD *)(a1 + 168) = v11;
  v15 = v63;
  *(_OWORD *)(a1 + 264) = v64;
  *(_QWORD *)&v52 = 1;
  *(_OWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v13;
  v16 = v51;
  *(_OWORD *)(a1 + 72) = v52;
  v65 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v65;
  *(_OWORD *)(a1 + 56) = v16;
  v17 = *(_QWORD *)(a1 + 48);
  if (!v17)
    goto LABEL_4;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 48))(v17, &v51);
  v19 = a2[13];
  v48 = a2[12];
  v49 = v19;
  v50 = *((_QWORD *)a2 + 28);
  v20 = a2[9];
  v44 = a2[8];
  v45 = v20;
  v21 = a2[11];
  v46 = a2[10];
  v47 = v21;
  v22 = a2[5];
  v40 = a2[4];
  v41 = v22;
  v23 = a2[7];
  v42 = a2[6];
  v43 = v23;
  v24 = a2[1];
  v36 = *a2;
  v37 = v24;
  v25 = a2[3];
  v38 = a2[2];
  v39 = v25;
  *(_QWORD *)&v37 = 0;
  v26 = v49;
  *(_OWORD *)(v4 + 192) = v48;
  *(_OWORD *)(v4 + 208) = v26;
  *(_QWORD *)(v4 + 224) = v50;
  v27 = v45;
  *(_OWORD *)(v4 + 128) = v44;
  *(_OWORD *)(v4 + 144) = v27;
  v28 = v47;
  *(_OWORD *)(v4 + 160) = v46;
  *(_OWORD *)(v4 + 176) = v28;
  v29 = v41;
  *(_OWORD *)(v4 + 64) = v40;
  *(_OWORD *)(v4 + 80) = v29;
  v30 = v43;
  *(_OWORD *)(v4 + 96) = v42;
  *(_OWORD *)(v4 + 112) = v30;
  v31 = v39;
  *(_OWORD *)(v4 + 32) = v38;
  *(_OWORD *)(v4 + 48) = v31;
  v32 = v37;
  *(_OWORD *)v4 = v36;
  *(_OWORD *)(v4 + 16) = v32;
  v33 = *(_QWORD *)(a1 + 48);
  if (!v33)
LABEL_4:
    sub_10025FD1C();
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v33 + 48))(v33, &v36);
  v34 = sub_1014C21DC(a1, (const unsigned __int8 *)&v40);
  *(_BYTE *)(a1 + 288) = v34;
  return sub_1014C296C(v34, (unsigned __int8 *)&v40);
}

uint64_t sub_1014C2EAC(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v15;

  v2 = *a2;
  v3 = a2[1];
  *(_OWORD *)(a1 + 88) = a2[2];
  *(_OWORD *)(a1 + 72) = v3;
  *(_OWORD *)(a1 + 56) = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 152) = a2[6];
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_OWORD *)(a1 + 216) = a2[10];
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 184) = v8;
  *(_OWORD *)(a1 + 168) = v7;
  v10 = a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 264) = v12;
  *(_OWORD *)(a1 + 248) = v11;
  *(_OWORD *)(a1 + 232) = v10;
  v13 = *(_QWORD *)(a1 + 48);
  if (!v13)
    sub_10025FD1C();
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
  return sub_1014C296C(v15, (unsigned __int8 *)a2 + 64);
}

uint64_t sub_1014C2F48(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v2 = a2[13];
  v31 = a2[12];
  v32 = v2;
  v3 = *((_QWORD *)a2 + 28);
  v4 = a2[9];
  v27 = a2[8];
  v28 = v4;
  v5 = a2[11];
  v29 = a2[10];
  v30 = v5;
  v6 = a2[5];
  v23 = a2[4];
  v24 = v6;
  v7 = a2[7];
  v25 = a2[6];
  v26 = v7;
  v8 = a2[1];
  v19 = *a2;
  v20 = v8;
  v9 = a2[3];
  v21 = a2[2];
  v22 = v9;
  v10 = v29;
  *(_OWORD *)(a1 + 232) = v30;
  v11 = v32;
  *(_OWORD *)(a1 + 248) = v31;
  *(_OWORD *)(a1 + 264) = v11;
  v12 = v25;
  *(_OWORD *)(a1 + 168) = v26;
  v13 = v28;
  *(_OWORD *)(a1 + 184) = v27;
  *(_OWORD *)(a1 + 200) = v13;
  *(_OWORD *)(a1 + 216) = v10;
  v14 = v21;
  *(_OWORD *)(a1 + 104) = v22;
  v15 = v24;
  *(_OWORD *)(a1 + 120) = v23;
  *(_QWORD *)&v20 = 16;
  *(_OWORD *)(a1 + 136) = v15;
  *(_OWORD *)(a1 + 152) = v12;
  v16 = v20;
  *(_OWORD *)(a1 + 56) = v19;
  *(_OWORD *)(a1 + 88) = v14;
  v33 = v3;
  *(_QWORD *)(a1 + 280) = v3;
  *(_OWORD *)(a1 + 72) = v16;
  v17 = *(_QWORD *)(a1 + 48);
  if (!v17)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 48))(v17, &v19);
}

uint64_t sub_1014C3054(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v2 = a2[13];
  v31 = a2[12];
  v32 = v2;
  v3 = *((_QWORD *)a2 + 28);
  v4 = a2[9];
  v27 = a2[8];
  v28 = v4;
  v5 = a2[11];
  v29 = a2[10];
  v30 = v5;
  v6 = a2[5];
  v23 = a2[4];
  v24 = v6;
  v7 = a2[7];
  v25 = a2[6];
  v26 = v7;
  v8 = a2[1];
  v19 = *a2;
  v20 = v8;
  v9 = a2[3];
  v21 = a2[2];
  v22 = v9;
  v10 = v29;
  *(_OWORD *)(a1 + 232) = v30;
  v11 = v32;
  *(_OWORD *)(a1 + 248) = v31;
  *(_OWORD *)(a1 + 264) = v11;
  v12 = v25;
  *(_OWORD *)(a1 + 168) = v26;
  v13 = v28;
  *(_OWORD *)(a1 + 184) = v27;
  *(_OWORD *)(a1 + 200) = v13;
  *(_OWORD *)(a1 + 216) = v10;
  v14 = v21;
  *(_OWORD *)(a1 + 104) = v22;
  v15 = v24;
  *(_OWORD *)(a1 + 120) = v23;
  *(_QWORD *)&v20 = 17;
  *(_OWORD *)(a1 + 136) = v15;
  *(_OWORD *)(a1 + 152) = v12;
  v16 = v20;
  *(_OWORD *)(a1 + 56) = v19;
  *(_OWORD *)(a1 + 88) = v14;
  v33 = v3;
  *(_QWORD *)(a1 + 280) = v3;
  *(_OWORD *)(a1 + 72) = v16;
  v17 = *(_QWORD *)(a1 + 48);
  if (!v17)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 48))(v17, &v19);
}

void sub_1014C3160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a1 + 232);
  v5 = *(_OWORD *)(a1 + 264);
  v31 = *(_OWORD *)(a1 + 248);
  v32 = v5;
  v6 = *(_OWORD *)(a1 + 168);
  v7 = *(_OWORD *)(a1 + 200);
  v27 = *(_OWORD *)(a1 + 184);
  v28 = v7;
  v29 = *(_OWORD *)(a1 + 216);
  v30 = v4;
  v8 = *(_OWORD *)(a1 + 104);
  v9 = *(_OWORD *)(a1 + 136);
  v23 = *(_OWORD *)(a1 + 120);
  v24 = v9;
  v25 = *(_OWORD *)(a1 + 152);
  v26 = v6;
  v10 = *(_OWORD *)(a1 + 72);
  v19 = *(_OWORD *)(a1 + 56);
  v20 = v10;
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v8;
  *((_QWORD *)&v20 + 1) = v2;
  *((_QWORD *)&v19 + 1) = v3;
  v11 = v29;
  *(_OWORD *)(a1 + 232) = v30;
  v12 = v32;
  *(_OWORD *)(a1 + 248) = v31;
  *(_OWORD *)(a1 + 264) = v12;
  v13 = v25;
  *(_OWORD *)(a1 + 168) = v26;
  v14 = v28;
  *(_OWORD *)(a1 + 184) = v27;
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 216) = v11;
  v15 = v21;
  *(_OWORD *)(a1 + 104) = v22;
  v16 = v24;
  *(_OWORD *)(a1 + 120) = v23;
  v33 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)&v20 = 10;
  *(_QWORD *)(a1 + 280) = v33;
  *(_OWORD *)(a1 + 136) = v16;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 88) = v15;
  v17 = v20;
  *(_OWORD *)(a1 + 56) = v19;
  *(_OWORD *)(a1 + 72) = v17;
  v18 = *(_QWORD *)(a1 + 48);
  if (!v18)
    sub_10025FD1C();
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v18 + 48))(v18, &v19);
  sub_1014C27D4();
}

void sub_1014C32A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a1 + 232);
  v5 = *(_OWORD *)(a1 + 264);
  v31 = *(_OWORD *)(a1 + 248);
  v32 = v5;
  v6 = *(_OWORD *)(a1 + 168);
  v7 = *(_OWORD *)(a1 + 200);
  v27 = *(_OWORD *)(a1 + 184);
  v28 = v7;
  v29 = *(_OWORD *)(a1 + 216);
  v30 = v4;
  v8 = *(_OWORD *)(a1 + 104);
  v9 = *(_OWORD *)(a1 + 136);
  v23 = *(_OWORD *)(a1 + 120);
  v24 = v9;
  v25 = *(_OWORD *)(a1 + 152);
  v26 = v6;
  v10 = *(_OWORD *)(a1 + 72);
  v19 = *(_OWORD *)(a1 + 56);
  v20 = v10;
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v8;
  *((_QWORD *)&v20 + 1) = v2;
  *((_QWORD *)&v19 + 1) = v3;
  v11 = v29;
  *(_OWORD *)(a1 + 232) = v30;
  v12 = v32;
  *(_OWORD *)(a1 + 248) = v31;
  *(_OWORD *)(a1 + 264) = v12;
  v13 = v25;
  *(_OWORD *)(a1 + 168) = v26;
  v14 = v28;
  *(_OWORD *)(a1 + 184) = v27;
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 216) = v11;
  v15 = v21;
  *(_OWORD *)(a1 + 104) = v22;
  v16 = v24;
  *(_OWORD *)(a1 + 120) = v23;
  v33 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)&v20 = 1;
  *(_QWORD *)(a1 + 280) = v33;
  *(_OWORD *)(a1 + 136) = v16;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 88) = v15;
  v17 = v20;
  *(_OWORD *)(a1 + 56) = v19;
  *(_OWORD *)(a1 + 72) = v17;
  v18 = *(_QWORD *)(a1 + 48);
  if (!v18)
    sub_10025FD1C();
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v18 + 48))(v18, &v19);
  sub_1014C27D4();
}

void sub_1014C33E0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 v10[24];
  uint64_t v11;

  v11 = a2;
  v3 = sub_1018BEA14((unsigned __int8 *)a1, "WorkoutEffortDurationThresholdForEstimateSave", &qword_101CC5798, 0);
  v10[0] = 1;
  sub_1018BF25C(v3 + 24, "ShouldWriteWorkoutEffortToHealthKit", v10, 0);
  *(_BYTE *)(a1 + 27) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_101CC57A0;
  *(_OWORD *)(a1 + 48) = unk_101CC57B0;
  *(_OWORD *)(a1 + 64) = xmmword_101CC57C0;
  *(_OWORD *)(a1 + 76) = *(__int128 *)((char *)&xmmword_101CC57C0 + 12);
  bzero((void *)(a1 + 96), 0x592uLL);
  *(_QWORD *)(a1 + 1528) = 0;
  *(_DWORD *)(a1 + 1536) = 4;
  *(_QWORD *)(a1 + 1544) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1552) = _Q0;
  __asm { FMOV            V8.2S, #-1.0 }
  *(_QWORD *)(a1 + 1568) = _D8;
  *(_WORD *)(a1 + 1576) = 1;
  operator new();
}

void sub_1014C3644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  sub_100261F44(v5);
  sub_100261F44(v4);
  v7 = (void *)v3[270];
  if (v7)
  {
    v3[271] = (uint64_t)v7;
    operator delete(v7);
  }
  v8 = v3[236];
  v3[236] = 0;
  if (v8)
    operator delete();
  v9 = (uint64_t *)v3[205];
  if (v9 == v3 + 202)
  {
    v10 = 4;
    v9 = v3 + 202;
  }
  else
  {
    if (!v9)
      goto LABEL_10;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_10:
  v11 = v3[198];
  v3[198] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v3[193];
  v3[193] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  sub_1012AA58C(v3 + 191, 0);
  _Unwind_Resume(a1);
}

void sub_1014C3774()
{
  JUMPOUT(0x1014C376CLL);
}

void sub_1014C377C()
{
  operator new();
}

void sub_1014C387C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  operator delete();
}

uint64_t sub_1014C38B4(uint64_t result)
{
  *(_BYTE *)(result + 27) = 1;
  return result;
}

uint64_t sub_1014C38C0(uint64_t result)
{
  *(_BYTE *)(result + 27) = 0;
  return result;
}

void sub_1014C38C8(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __int128 v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  _BYTE v15[96];
  _BYTE v16[192];

  if (*(_BYTE *)(a1 + 1608) == 1)
  {
    v4 = a1 + 1904;
    v5 = a1 + 32;
    v6.n128_f64[0] = sub_1014C193C(a1 + 32, (uint64_t)v16);
    sub_1014C7E84((__n128 *)v4, (unint64_t *)v16, (__n128 *)v15, v6);
    v7 = *(_QWORD *)(a1 + 1528);
    if (v7)
    {
      sub_1014C193C(v5, (uint64_t)v15);
      sub_1014CA074(v7, (unint64_t *)v15, (uint64_t)v16);
      sub_1014C894C((int *)(a1 + 1536), (uint64_t)v16, v15);
    }
    v8 = *(_OWORD *)(a1 + 1568);
    *(_OWORD *)v16 = *(_OWORD *)(a1 + 1552);
    *(_OWORD *)&v16[16] = v8;
    if (*(_BYTE *)(a1 + 1897))
    {
      v9 = *(float **)(a1 + 1888);
      if (v9)
      {
        sub_1014C10C8(v9, (float *)v16, (uint64_t)v15);
        *(_OWORD *)v16 = *(_OWORD *)v15;
        *(_OWORD *)&v16[10] = *(_OWORD *)&v15[10];
      }
    }
    *(double *)&v16[8] = a2;
    v16[24] = 1;
    v10 = sub_1014C39F4(a1, (uint64_t)v16);
    v11 = *(_QWORD *)(a1 + 1528);
    if (v11)
    {
      v12 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)v15 = *(_OWORD *)v4;
      *(_OWORD *)&v15[16] = v12;
      v13 = *(_OWORD *)(a1 + 1568);
      v14[0] = *(_OWORD *)(a1 + 1552);
      v14[1] = v13;
      sub_1014C4308(v10, (uint64_t)v15, (const char *)v14, (uint64_t)v16, v11 + 424, 0);
    }
  }
}

uint64_t sub_1014C39F4(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  const unsigned __int8 *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  BOOL v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  _BOOL4 v17;
  int v18;
  NSObject *v19;
  double v20;
  int v21;
  uint64_t v22;
  double v23;
  NSObject *v24;
  double v25;
  int v26;
  uint64_t v27;
  double v28;
  _BOOL4 v29;
  int v30;
  int v31;
  _BOOL4 v32;
  double v33;
  int v34;
  double v35;
  uint64_t v36;
  int v37;
  _BOOL4 v38;
  int v39;
  int v40;
  _BOOL4 v42;
  double v43;
  int v44;
  double v45;
  uint64_t v46;
  int v47;
  _BOOL4 v48;
  int v49;
  int v50;
  const char *v51;
  _BOOL4 v52;
  int v53;
  int v54;
  uint8_t *v55;
  unsigned int v56;
  int v57;
  int v58;
  _BOOL4 v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v63;
  _BOOL4 v64;
  _BOOL4 v65;
  _BOOL4 v66;
  const unsigned __int8 *v67;
  uint64_t v68;
  int v69;
  int v70;
  __int16 v71;
  double v72;
  __int16 v73;
  int v74;
  __int16 v75;
  double v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  char *v80;
  __int16 v81;
  char *v82;
  __int16 v83;
  _BOOL4 v84;
  __int16 v85;
  _BOOL4 v86;
  __int16 v87;
  int v88;
  __int16 v89;
  _BOOL4 v90;
  __int16 v91;
  _BOOL4 v92;
  __int16 v93;
  _BOOL4 v94;
  __int16 v95;
  int v96;
  __int16 v97;
  _BOOL4 v98;
  __int16 v99;
  int v100;
  char v101[48];
  char out[48];
  uint8_t buf[4];
  int v104;
  __int16 v105;
  double v106;
  __int16 v107;
  int v108;
  __int16 v109;
  double v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  char *v114;
  __int16 v115;
  char *v116;
  __int16 v117;
  _BOOL4 v118;
  __int16 v119;
  _BOOL4 v120;
  __int16 v121;
  int v122;
  __int16 v123;
  _BOOL4 v124;
  __int16 v125;
  _BOOL4 v126;
  __int16 v127;
  _BOOL4 v128;
  __int16 v129;
  int v130;
  __int16 v131;
  _BOOL4 v132;
  __int16 v133;
  int v134;

  if (*(_QWORD *)(a1 + 1584))
  {
    v4 = *(double *)a2;
    v5 = *(double *)(a2 + 8);
    v6 = v5 - *(double *)a2;
    v7 = *(double *)(a1 + 8);
    v8 = (const unsigned __int8 *)(a1 + 1712);
    v68 = *(_QWORD *)(a1 + 1872);
    if (*(_BYTE *)(a1 + 25) && *(_BYTE *)(a1 + 27))
    {
      v9 = sub_1014C190C((_BYTE *)(a1 + 32));
      if (v68)
        v10 = 0;
      else
        v10 = v9;
      v11 = v4 <= v5 && v10;
    }
    else
    {
      v11 = 0;
    }
    if (*(_BYTE *)(a2 + 25))
      v12 = v6 < v7;
    else
      v12 = 1;
    v17 = !v12 && *(_BYTE *)(a1 + 1880) == 0;
    if (*(_BYTE *)(a2 + 24))
      v18 = 1;
    else
      v18 = v17;
    v14 = v11 & v18;
    memset(out, 0, 37);
    memset(v101, 0, 37);
    uuid_unparse((const unsigned __int8 *)(a1 + 1728), out);
    uuid_unparse(v8, v101);
    if (*(_BYTE *)(a2 + 24))
    {
      if (!v17)
        *(_DWORD *)(a2 + 16) = 0;
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB870);
      v19 = qword_10229FFD8;
      if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
      {
        v63 = v17;
        v59 = v11;
        v20 = *(float *)(a2 + 16);
        v21 = *(unsigned __int8 *)(a2 + 24);
        v23 = *(double *)a2;
        v22 = *(_QWORD *)(a2 + 8);
        if (*(_BYTE *)(a1 + 25))
          v57 = *(unsigned __int8 *)(a1 + 27);
        else
          v57 = 0;
        v29 = sub_1014C190C((_BYTE *)(a1 + 32));
        v30 = *(unsigned __int8 *)(a2 + 25);
        v31 = *(unsigned __int8 *)(a1 + 1880);
        *(_DWORD *)buf = 67112962;
        v104 = v14;
        v105 = 2048;
        v106 = v20;
        v107 = 1024;
        v108 = v21;
        v109 = 2048;
        v110 = v23;
        v111 = 2048;
        v112 = v22;
        v113 = 2080;
        v114 = v101;
        v115 = 2080;
        v116 = out;
        v117 = 1024;
        v11 = v59;
        v118 = v59;
        v119 = 1024;
        v17 = v63;
        v120 = v63;
        v121 = 1024;
        v122 = v57;
        v123 = 1024;
        v124 = v29;
        v125 = 1024;
        v126 = v68 == 0;
        v127 = 1024;
        v128 = v4 <= v5;
        v129 = 1024;
        v130 = v30;
        v131 = 1024;
        v132 = v6 >= v7;
        v133 = 1024;
        v134 = v31;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "WorkoutEffortManager, attemptWriteToHealthKit, didWrite, %d, score, %.2f, isTransient, %d, startTime, %.2f, endTime, %.2f, sessionId, %s, overviewId, %s, meetsTransientReqs, %d, meetsSaveReqs, %d, hkWriteAllowed, %d, bmSet, %d, isNormalMode, %d, isNonNegDuration, %d, isValidEstimate, %d, isSufficientDuration, %d, didRecoverFromCrash, %d", buf, 0x76u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        v65 = v17;
        v32 = v11;
        if (qword_10229FFD0 != -1)
          dispatch_once(&qword_10229FFD0, &stru_1021BB870);
        v61 = qword_10229FFD8;
        v33 = *(float *)(a2 + 16);
        v34 = *(unsigned __int8 *)(a2 + 24);
        v35 = *(double *)a2;
        v36 = *(_QWORD *)(a2 + 8);
        v67 = v8;
        v56 = v14;
        if (*(_BYTE *)(a1 + 25))
          v37 = *(unsigned __int8 *)(a1 + 27);
        else
          v37 = 0;
        v48 = sub_1014C190C((_BYTE *)(a1 + 32));
        v49 = *(unsigned __int8 *)(a2 + 25);
        v50 = *(unsigned __int8 *)(a1 + 1880);
        v69 = 67112962;
        v70 = v14;
        v71 = 2048;
        v72 = v33;
        v73 = 1024;
        v74 = v34;
        v75 = 2048;
        v76 = v35;
        v77 = 2048;
        v78 = v36;
        v79 = 2080;
        v80 = v101;
        v81 = 2080;
        v82 = out;
        v83 = 1024;
        v84 = v32;
        v85 = 1024;
        v86 = v65;
        v87 = 1024;
        v88 = v37;
        v89 = 1024;
        v90 = v48;
        v91 = 1024;
        v92 = v68 == 0;
        v93 = 1024;
        v94 = v4 <= v5;
        v95 = 1024;
        v96 = v49;
        v97 = 1024;
        v98 = v6 >= v7;
        v99 = 1024;
        v100 = v50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v61, 1, "WorkoutEffortManager, attemptWriteToHealthKit, didWrite, %d, score, %.2f, isTransient, %d, startTime, %.2f, endTime, %.2f, sessionId, %s, overviewId, %s, meetsTransientReqs, %d, meetsSaveReqs, %d, hkWriteAllowed, %d, bmSet, %d, isNormalMode, %d, isNonNegDuration, %d, isValidEstimate, %d, isSufficientDuration, %d, didRecoverFromCrash, %d", &v69, 118);
        goto LABEL_64;
      }
    }
    else
    {
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB870);
      v24 = qword_10229FFD8;
      if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
      {
        v64 = v17;
        v60 = v11;
        v25 = *(float *)(a2 + 16);
        v26 = *(unsigned __int8 *)(a2 + 24);
        v28 = *(double *)a2;
        v27 = *(_QWORD *)(a2 + 8);
        if (*(_BYTE *)(a1 + 25))
          v58 = *(unsigned __int8 *)(a1 + 27);
        else
          v58 = 0;
        v38 = sub_1014C190C((_BYTE *)(a1 + 32));
        v39 = *(unsigned __int8 *)(a2 + 25);
        v40 = *(unsigned __int8 *)(a1 + 1880);
        *(_DWORD *)buf = 67112962;
        v104 = v14;
        v105 = 2048;
        v106 = v25;
        v107 = 1024;
        v108 = v26;
        v109 = 2048;
        v110 = v28;
        v111 = 2048;
        v112 = v27;
        v113 = 2080;
        v114 = v101;
        v115 = 2080;
        v116 = out;
        v117 = 1024;
        v11 = v60;
        v118 = v60;
        v119 = 1024;
        v17 = v64;
        v120 = v64;
        v121 = 1024;
        v122 = v58;
        v123 = 1024;
        v124 = v38;
        v125 = 1024;
        v126 = v68 == 0;
        v127 = 1024;
        v128 = v4 <= v5;
        v129 = 1024;
        v130 = v39;
        v131 = 1024;
        v132 = v6 >= v7;
        v133 = 1024;
        v134 = v40;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "WorkoutEffortManager, attemptWriteToHealthKit, didWrite, %d, score, %.2f, isTransient, %d, startTime, %.2f, endTime, %.2f, sessionId, %s, overviewId, %s, meetsTransientReqs, %d, meetsSaveReqs, %d, hkWriteAllowed, %d, bmSet, %d, isNormalMode, %d, isNonNegDuration, %d, isValidEstimate, %d, isSufficientDuration, %d, didRecoverFromCrash, %d", buf, 0x76u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        v66 = v17;
        v42 = v11;
        v56 = v14;
        v67 = v8;
        bzero(buf, 0x65CuLL);
        if (qword_10229FFD0 != -1)
          dispatch_once(&qword_10229FFD0, &stru_1021BB870);
        v62 = qword_10229FFD8;
        v43 = *(float *)(a2 + 16);
        v44 = *(unsigned __int8 *)(a2 + 24);
        v45 = *(double *)a2;
        v46 = *(_QWORD *)(a2 + 8);
        if (*(_BYTE *)(a1 + 25))
          v47 = *(unsigned __int8 *)(a1 + 27);
        else
          v47 = 0;
        v52 = sub_1014C190C((_BYTE *)(a1 + 32));
        v53 = *(unsigned __int8 *)(a2 + 25);
        v54 = *(unsigned __int8 *)(a1 + 1880);
        v69 = 67112962;
        v70 = v14;
        v71 = 2048;
        v72 = v43;
        v73 = 1024;
        v74 = v44;
        v75 = 2048;
        v76 = v45;
        v77 = 2048;
        v78 = v46;
        v79 = 2080;
        v80 = v101;
        v81 = 2080;
        v82 = out;
        v83 = 1024;
        v84 = v42;
        v85 = 1024;
        v86 = v66;
        v87 = 1024;
        v88 = v47;
        v89 = 1024;
        v90 = v52;
        v91 = 1024;
        v92 = v68 == 0;
        v93 = 1024;
        v94 = v4 <= v5;
        v95 = 1024;
        v96 = v53;
        v97 = 1024;
        v98 = v6 >= v7;
        v99 = 1024;
        v100 = v54;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, 0, "WorkoutEffortManager, attemptWriteToHealthKit, didWrite, %d, score, %.2f, isTransient, %d, startTime, %.2f, endTime, %.2f, sessionId, %s, overviewId, %s, meetsTransientReqs, %d, meetsSaveReqs, %d, hkWriteAllowed, %d, bmSet, %d, isNormalMode, %d, isNonNegDuration, %d, isValidEstimate, %d, isSufficientDuration, %d, didRecoverFromCrash, %d", &v69, 118);
LABEL_64:
        v55 = (uint8_t *)v51;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutEffortManager::attemptWriteToHealthKit(CLWorkoutEffort::Result &) const", "%s\n", v51);
        if (v55 != buf)
          free(v55);
        v8 = v67;
        v14 = v56;
        if (!v56)
          return v14;
LABEL_54:
        (*(void (**)(_QWORD, uint64_t, const unsigned __int8 *))(**(_QWORD **)(a1 + 1584) + 16))(*(_QWORD *)(a1 + 1584), a2, v8);
        return v14;
      }
    }
    if (!(_DWORD)v14)
      return v14;
    goto LABEL_54;
  }
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BB870);
  v13 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "WorkoutEffortManager, attemptWriteToHealthKit, fHealthKitWriter unexpectedly nil", buf, 2u);
  }
  v14 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    LOWORD(v69) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 16, "WorkoutEffortManager, attemptWriteToHealthKit, fHealthKitWriter unexpectedly nil", &v69, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLWorkoutEffortManager::attemptWriteToHealthKit(CLWorkoutEffort::Result &) const", "%s\n", v15);
    if (v16 != buf)
      free(v16);
    return 0;
  }
  return v14;
}

void sub_1014C4308(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, int a6)
{
  NSObject *v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  void **v15;
  NSObject *v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  NSObject *v28;
  _BYTE *v29;
  _BYTE *v30;
  int v31;
  _BYTE *v32;
  _BYTE *v33;
  void **v34;
  NSObject *v35;
  int v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  void **v46;
  void **v47;
  void **v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  void **v57;
  void **v58;
  void **v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  char *v67;
  const char *v68;
  const char *v69;
  void *v71[2];
  char v72;
  void *v73[2];
  char v74;
  void *v75[2];
  char v76;
  void *v77[2];
  char v78;
  void *v79[2];
  char v80;
  void *v81[2];
  char v82;
  void *v83[2];
  char v84;
  void *v85[2];
  char v86;
  void *v87[2];
  char v88;
  void *v89[2];
  char v90;
  void *__p[2];
  char v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97[2];
  char v98;
  _BYTE v99[12];
  __int16 v100;
  _BYTE *v101;
  __int16 v102;
  void **v103;
  __int16 v104;
  void **v105;
  _BYTE buf[12];
  __int16 v107;
  _BYTE *v108;
  __int16 v109;
  _BYTE *v110;
  __int16 v111;
  void **v112;
  _BYTE v113[12];
  __int16 v114;
  _BYTE *v115;
  char v116;
  _BYTE v117[12];
  __int16 v118;
  _BYTE *v119;
  char v120;

  if (a6)
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v9 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1015A2E04(v97, "baseResult");
      sub_1014C5E14(a2, (uint64_t)v97, v99);
      if (v102 >= 0)
        v10 = v99;
      else
        v10 = *(_BYTE **)v99;
      sub_1015A2E04(v95, "xgbResult");
      v11 = v117;
      sub_1014C5E14((uint64_t)a3, (uint64_t)v95, v117);
      if (v120 < 0)
        v11 = *(_BYTE **)v117;
      sub_1015A2E04(v93, "finalBiasCorrectedResult");
      sub_1014C5E14(a4, (uint64_t)v93, v113);
      v12 = v116;
      v13 = *(_BYTE **)v113;
      sub_1014C6134(a5 + 72, __p);
      v14 = v113;
      if (v12 < 0)
        v14 = v13;
      if (v92 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v10;
      v107 = 2080;
      v108 = v11;
      v109 = 2080;
      v110 = v14;
      v111 = 2080;
      v112 = v15;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "WorkoutEffort ML features at session end, %s, %s, %s, %s", buf, 0x2Au);
      if (v92 < 0)
        operator delete(__p[0]);
      if (v116 < 0)
        operator delete(*(void **)v113);
      if (v94 < 0)
        operator delete(v93[0]);
      if (v120 < 0)
        operator delete(*(void **)v117);
      if (v96 < 0)
        operator delete(v95[0]);
      if (SHIBYTE(v102) < 0)
        operator delete(*(void **)v99);
      if (v98 < 0)
        operator delete(v97[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB870);
      v40 = qword_10229FFD8;
      sub_1015A2E04(v89, "baseResult");
      sub_1014C5E14(a2, (uint64_t)v89, v117);
      if (v120 >= 0)
        v41 = v117;
      else
        v41 = *(_BYTE **)v117;
      sub_1015A2E04(v87, "xgbResult");
      sub_1014C5E14((uint64_t)a3, (uint64_t)v87, v113);
      v42 = a4;
      if (v116 >= 0)
        v43 = v113;
      else
        v43 = *(_BYTE **)v113;
      sub_1015A2E04(v85, "finalBiasCorrectedResult");
      v44 = a5;
      sub_1014C5E14(v42, (uint64_t)v85, __p);
      v45 = v92;
      v46 = (void **)__p[0];
      sub_1014C6134(v44 + 72, v83);
      v47 = __p;
      if (v45 < 0)
        v47 = v46;
      if (v84 >= 0)
        v48 = v83;
      else
        v48 = (void **)v83[0];
      *(_DWORD *)v99 = 136315906;
      *(_QWORD *)&v99[4] = v41;
      v100 = 2080;
      v101 = v43;
      v102 = 2080;
      v103 = v47;
      v104 = 2080;
      v105 = v48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 0, "WorkoutEffort ML features at session end, %s, %s, %s, %s", v99, 42, v69, a3);
      v50 = v49;
      if (v84 < 0)
        operator delete(v83[0]);
      a5 = v44;
      if (v92 < 0)
        operator delete(__p[0]);
      if (v86 < 0)
        operator delete(v85[0]);
      if (v116 < 0)
        operator delete(*(void **)v113);
      if (v88 < 0)
        operator delete(v87[0]);
      if (v120 < 0)
        operator delete(*(void **)v117);
      if (v90 < 0)
        operator delete(v89[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::logFeaturesAndResults(const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::MLFeatures &, BOOL) const", "%s\n", v50);
      if (v50 != buf)
        free(v50);
    }
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v16 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1014C62EC((float *)(a5 + 12), buf);
      v17 = SHIBYTE(v109);
      v18 = *(_BYTE **)buf;
      sub_1014C664C((float *)(a5 + 120), v99);
      v19 = buf;
      if (v17 < 0)
        v19 = v18;
      if (v102 >= 0)
        v20 = v99;
      else
        v20 = *(_BYTE **)v99;
      *(_DWORD *)v117 = 136315394;
      *(_QWORD *)&v117[4] = v19;
      v118 = 2080;
      v119 = v20;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "WorkoutEffort ML features at session end, %s, %s", v117, 0x16u);
      if (SHIBYTE(v102) < 0)
        operator delete(*(void **)v99);
      if (SHIBYTE(v109) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB870);
      v21 = qword_10229FFD8;
      sub_1014C62EC((float *)(a5 + 12), v99);
      v22 = SHIBYTE(v102);
      v23 = *(_BYTE **)v99;
      sub_1014C664C((float *)(a5 + 120), v117);
      v24 = v99;
      if (v22 < 0)
        v24 = v23;
      if (v120 >= 0)
        v25 = v117;
      else
        v25 = *(_BYTE **)v117;
      *(_DWORD *)v113 = 136315394;
      *(_QWORD *)&v113[4] = v24;
      v114 = 2080;
      v115 = v25;
      LODWORD(v68) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 0, "WorkoutEffort ML features at session end, %s, %s", v113, v68);
      v27 = v26;
      if (v120 < 0)
        operator delete(*(void **)v117);
      if (SHIBYTE(v102) < 0)
        operator delete(*(void **)v99);
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::logFeaturesAndResults(const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::MLFeatures &, BOOL) const", "%s\n", v27);
LABEL_167:
      if (v27 != buf)
        free(v27);
    }
  }
  else
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v28 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
    {
      sub_1015A2E04(v81, "baseResult");
      sub_1014C5E14(a2, (uint64_t)v81, v99);
      if (v102 >= 0)
        v29 = v99;
      else
        v29 = *(_BYTE **)v99;
      sub_1015A2E04(v79, "xgbResult");
      v30 = v117;
      sub_1014C5E14((uint64_t)a3, (uint64_t)v79, v117);
      if (v120 < 0)
        v30 = *(_BYTE **)v117;
      sub_1015A2E04(v77, "finalBiasCorrectedResult");
      sub_1014C5E14(a4, (uint64_t)v77, v113);
      v31 = v116;
      v32 = *(_BYTE **)v113;
      sub_1014C6134(a5 + 72, __p);
      v33 = v113;
      if (v31 < 0)
        v33 = v32;
      if (v92 >= 0)
        v34 = __p;
      else
        v34 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v29;
      v107 = 2080;
      v108 = v30;
      v109 = 2080;
      v110 = v33;
      v111 = 2080;
      v112 = v34;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "WorkoutEffort ML features update, %s, %s, %s, %s", buf, 0x2Au);
      if (v92 < 0)
        operator delete(__p[0]);
      if (v116 < 0)
        operator delete(*(void **)v113);
      if (v78 < 0)
        operator delete(v77[0]);
      if (v120 < 0)
        operator delete(*(void **)v117);
      if (v80 < 0)
        operator delete(v79[0]);
      if (SHIBYTE(v102) < 0)
        operator delete(*(void **)v99);
      if (v82 < 0)
        operator delete(v81[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB870);
      v51 = qword_10229FFD8;
      sub_1015A2E04(v75, "baseResult");
      sub_1014C5E14(a2, (uint64_t)v75, v117);
      if (v120 >= 0)
        v52 = v117;
      else
        v52 = *(_BYTE **)v117;
      sub_1015A2E04(v73, "xgbResult");
      sub_1014C5E14((uint64_t)a3, (uint64_t)v73, v113);
      v53 = a4;
      if (v116 >= 0)
        v54 = v113;
      else
        v54 = *(_BYTE **)v113;
      sub_1015A2E04(v71, "finalBiasCorrectedResult");
      v55 = a5;
      sub_1014C5E14(v53, (uint64_t)v71, __p);
      v56 = v92;
      v57 = (void **)__p[0];
      sub_1014C6134(v55 + 72, v83);
      v58 = __p;
      if (v56 < 0)
        v58 = v57;
      if (v84 >= 0)
        v59 = v83;
      else
        v59 = (void **)v83[0];
      *(_DWORD *)v99 = 136315906;
      *(_QWORD *)&v99[4] = v52;
      v100 = 2080;
      v101 = v54;
      v102 = 2080;
      v103 = v58;
      v104 = 2080;
      v105 = v59;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 1, "WorkoutEffort ML features update, %s, %s, %s, %s", v99, 42, v69, a3);
      v61 = v60;
      if (v84 < 0)
        operator delete(v83[0]);
      a5 = v55;
      if (v92 < 0)
        operator delete(__p[0]);
      if (v72 < 0)
        operator delete(v71[0]);
      if (v116 < 0)
        operator delete(*(void **)v113);
      if (v74 < 0)
        operator delete(v73[0]);
      if (v120 < 0)
        operator delete(*(void **)v117);
      if (v76 < 0)
        operator delete(v75[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::logFeaturesAndResults(const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::MLFeatures &, BOOL) const", "%s\n", v61);
      if (v61 != buf)
        free(v61);
    }
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v35 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
    {
      sub_1014C62EC((float *)(a5 + 12), buf);
      v36 = SHIBYTE(v109);
      v37 = *(_BYTE **)buf;
      sub_1014C664C((float *)(a5 + 120), v99);
      v38 = buf;
      if (v36 < 0)
        v38 = v37;
      if (v102 >= 0)
        v39 = v99;
      else
        v39 = *(_BYTE **)v99;
      *(_DWORD *)v117 = 136315394;
      *(_QWORD *)&v117[4] = v38;
      v118 = 2080;
      v119 = v39;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "WorkoutEffort ML features update, %s, %s", v117, 0x16u);
      if (SHIBYTE(v102) < 0)
        operator delete(*(void **)v99);
      if (SHIBYTE(v109) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB870);
      v62 = qword_10229FFD8;
      sub_1014C62EC((float *)(a5 + 12), v99);
      v63 = SHIBYTE(v102);
      v64 = *(_BYTE **)v99;
      sub_1014C664C((float *)(a5 + 120), v117);
      v65 = v99;
      if (v63 < 0)
        v65 = v64;
      if (v120 >= 0)
        v66 = v117;
      else
        v66 = *(_BYTE **)v117;
      *(_DWORD *)v113 = 136315394;
      *(_QWORD *)&v113[4] = v65;
      v114 = 2080;
      v115 = v66;
      LODWORD(v68) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, 1, "WorkoutEffort ML features update, %s, %s", v113, v68);
      v27 = v67;
      if (v120 < 0)
        operator delete(*(void **)v117);
      if (SHIBYTE(v102) < 0)
        operator delete(*(void **)v99);
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::logFeaturesAndResults(const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::MLFeatures &, BOOL) const", "%s\n", v27);
      goto LABEL_167;
    }
  }
}

void sub_1014C4FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  if (a57 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (*(char *)(v57 - 137) < 0)
    operator delete(*(void **)(v57 - 160));
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v57 - 105) < 0)
    operator delete(*(void **)(v57 - 128));
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

void sub_1014C5228(uint64_t a1, double *a2)
{
  sub_1014C1704(a1 + 32, a2);
  sub_1014C38C8(a1, a2[2]);
}

double sub_1014C5258(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double result;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BB870);
  v4 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Feeding Body metrics, estimating HR max,min and vo2Max", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "Feeding Body metrics, estimating HR max,min and vo2Max", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_QWORD *)&result = sub_1014C1734(a1 + 32, a2).n128_u64[0];
  return result;
}

uint64_t sub_1014C53F8(uint64_t a1, __int128 *a2)
{
  return sub_1014C1CB8(a1 + 1592, a2);
}

void sub_1014C5400(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  double v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  double v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;

  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BB870);
  v4 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)a2;
    v6 = *(double *)(a2 + 8);
    if (v6 == 1.79769313e308)
      v6 = -1.0;
    v8 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    v9 = *(_QWORD *)(a2 + 112);
    v10 = *(_QWORD *)(a2 + 120);
    v11 = *(_QWORD *)(a2 + 128);
    *(_DWORD *)buf = 134219520;
    v41 = v7;
    v42 = 2048;
    v43 = v5;
    v44 = 2048;
    v45 = v6;
    v46 = 1024;
    v47 = v8;
    v48 = 1024;
    v49 = v9;
    v50 = 1024;
    v51 = v10;
    v52 = 1024;
    v53 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WorkoutEffortManager, respondToWorkoutEvent, eventTime, %f, startTime, %f, endTime, %f, eventType, %d, workoutType, %d, locationType, %d, genericWorkoutLabel ,%d", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v16 = *(_QWORD *)a2;
    v17 = *(double *)(a2 + 8);
    if (v17 == 1.79769313e308)
      v17 = -1.0;
    v19 = *(_QWORD *)(a2 + 16);
    v18 = *(_QWORD *)(a2 + 24);
    v20 = *(_QWORD *)(a2 + 112);
    v21 = *(_QWORD *)(a2 + 120);
    v22 = *(_QWORD *)(a2 + 128);
    v26 = 134219520;
    v27 = v18;
    v28 = 2048;
    v29 = v16;
    v30 = 2048;
    v31 = v17;
    v32 = 1024;
    v33 = v19;
    v34 = 1024;
    v35 = v20;
    v36 = 1024;
    v37 = v21;
    v38 = 1024;
    v39 = v22;
    LODWORD(v25) = 56;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "WorkoutEffortManager, respondToWorkoutEvent, eventTime, %f, startTime, %f, endTime, %f, eventType, %d, workoutType, %d, locationType, %d, genericWorkoutLabel ,%d", COERCE_DOUBLE(&v26), v25);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::respondToWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  v12 = *(_QWORD *)(a2 + 16);
  switch(v12)
  {
    case 9:
      v13 = *(_QWORD *)(a1 + 1528);
      if (v13)
        sub_1014C9BDC(v13, (uint64_t *)a2);
      break;
    case 10:
      sub_1014C5D4C(a1, *(double *)(a2 + 24));
      break;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return;
    case 16:
      v14 = *(double **)(a1 + 1528);
      if (v14)
        sub_1014C9BE4(v14, *(double *)(a2 + 24));
      break;
    case 17:
      v15 = *(double **)(a1 + 1528);
      if (v15)
        sub_1014C9C00(v15, *(double *)(a2 + 24));
      break;
    default:
      if (v12 == 1)
      {
        sub_1014C5AA8(a1, *(double *)(a2 + 8));
      }
      else if (!v12)
      {
        sub_1014C5734(a1, *(double *)a2);
      }
      return;
  }
}

void sub_1014C5734(uint64_t a1, double a2)
{
  void *__p;

  sub_1014C8D74(a1 + 1536, a2);
  sub_1014C1758(a1 + 32, (uint64_t)&__p);
  operator new();
}

void sub_1014C5A60()
{
  operator delete();
}

void sub_1014C5AA8(uint64_t a1, double a2)
{
  uint64_t v4;
  __int128 v5;
  float *v6;
  uint64_t v7;
  NSObject *v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  const char *v14;
  char *v15;
  _OWORD v16[2];
  _BYTE v17[32];
  _BYTE buf[1632];

  v4 = *(_QWORD *)(a1 + 1528);
  if (v4)
    sub_1014C894C((int *)(a1 + 1536), v4 + 424, buf);
  v5 = *(_OWORD *)(a1 + 1568);
  *(_OWORD *)v17 = *(_OWORD *)(a1 + 1552);
  *(_OWORD *)&v17[16] = v5;
  if (*(_BYTE *)(a1 + 1897))
  {
    v6 = *(float **)(a1 + 1888);
    if (v6)
    {
      sub_1014C10C8(v6, (float *)v17, (uint64_t)buf);
      *(_OWORD *)v17 = *(_OWORD *)buf;
      *(_OWORD *)&v17[10] = *(_OWORD *)&buf[10];
    }
  }
  *(double *)&v17[8] = a2;
  v17[24] = 0;
  v7 = sub_1014C39F4(a1, (uint64_t)v17);
  if (*(_QWORD *)(a1 + 2152))
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v8 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortManager, onWorkoutStop, sending score to clients", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB870);
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "CLWorkoutEffortManager, onWorkoutStop, sending score to clients", v16, 2);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::onWorkoutStop(CFAbsoluteTime)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v7 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 2152) + 16))(*(_QWORD *)(a1 + 2152), v17);
  }
  v9 = (_OWORD *)(a1 + 1552);
  v10 = *(_QWORD *)(a1 + 1528);
  if (v10)
  {
    v11 = *(_OWORD *)(a1 + 1920);
    *(_OWORD *)buf = *(_OWORD *)(a1 + 1904);
    *(_OWORD *)&buf[16] = v11;
    v12 = *(_OWORD *)(a1 + 1568);
    v16[0] = *v9;
    v16[1] = v12;
    sub_1014C4308(v7, (uint64_t)buf, (const char *)v16, (uint64_t)v17, v10 + 424, 1);
    if (!*(_BYTE *)(a1 + 1897))
      goto LABEL_18;
    sub_1014C6E00(a1, *(_QWORD *)(a1 + 1528) + 424);
  }
  if (*(_BYTE *)(a1 + 1897))
  {
    v13 = *(_OWORD *)(a1 + 1568);
    *(_OWORD *)buf = *v9;
    *(_OWORD *)&buf[16] = v13;
    sub_1014C6FBC(a1, (uint64_t)buf);
    sub_1014C71BC(a1);
    sub_1014C7358((_QWORD *)a1);
  }
LABEL_18:
  sub_1014C5D4C(a1, a2);
}

double sub_1014C5D4C(uint64_t a1, double a2)
{
  uint64_t v4;
  double result;

  sub_1012AA58C((uint64_t *)(a1 + 1528), 0);
  sub_1014C8D74(a1 + 1536, a2);
  sub_1014C8388(a1 + 1904, a2);
  v4 = *(_QWORD *)(a1 + 1888);
  *(_QWORD *)(a1 + 1888) = 0;
  if (v4)
    operator delete();
  *(_QWORD *)(a1 + 2216) = 0;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 2224) = _Q0;
  *(_OWORD *)(a1 + 2240) = xmmword_101CAC590;
  *(_QWORD *)(a1 + 2256) = 2;
  *(_QWORD *)(a1 + 2264) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(double *)(a1 + 2272) = result;
  *(_DWORD *)(a1 + 2280) = -1082130432;
  return result;
}

uint64_t sub_1014C5DF8(uint64_t a1, int a2, double a3)
{
  sub_1014C1F8C(a1 + 1592, a2, a3);
  return 1;
}

uint64_t sub_1014C5E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  __int128 v46;
  std::string::size_type v47;
  uint64_t v48;
  _QWORD v49[10];
  char v50;
  uint64_t v51;

  sub_1004E5E40((uint64_t)&v48);
  v6 = v48;
  *(_DWORD *)((char *)v49 + *(_QWORD *)(v48 - 24)) = *(_DWORD *)((_BYTE *)v49 + *(_QWORD *)(v48 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v49[1] + *(_QWORD *)(v6 - 24)) = 2;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 23))
      goto LABEL_3;
LABEL_6:
    sub_1015A2E04(&v46, "");
    goto LABEL_8;
  }
  if (!*(_QWORD *)(a2 + 8))
    goto LABEL_6;
LABEL_3:
  v7 = std::string::append((std::string *)a2, "_");
  if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_100115CE4(&v46, v7->__r_.__value_.__l.__data_, v7->__r_.__value_.__l.__size_);
  }
  else
  {
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v47 = v7->__r_.__value_.__r.__words[2];
    v46 = v8;
  }
LABEL_8:
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v46;
  v9 = v47;
  *(_QWORD *)(a2 + 16) = v47;
  v10 = HIBYTE(v9);
  if ((v10 & 0x80u) == 0)
    v11 = a2;
  else
    v11 = *(_QWORD *)a2;
  if ((v10 & 0x80u) == 0)
    v12 = v10;
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = sub_100263F7C(&v48, v11, v12);
  v14 = sub_100263F7C(v13, (uint64_t)"isValid, ", 9);
  v15 = (_QWORD *)std::ostream::operator<<(v14, *(unsigned __int8 *)(a1 + 25));
  sub_100263F7C(v15, (uint64_t)", ", 2);
  v16 = *(char *)(a2 + 23);
  if (v16 >= 0)
    v17 = a2;
  else
    v17 = *(_QWORD *)a2;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a2 + 23);
  else
    v18 = *(_QWORD *)(a2 + 8);
  v19 = sub_100263F7C(&v48, v17, v18);
  v20 = sub_100263F7C(v19, (uint64_t)"startTime, ", 11);
  v21 = (_QWORD *)std::ostream::operator<<(v20, *(double *)a1);
  sub_100263F7C(v21, (uint64_t)", ", 2);
  v22 = *(char *)(a2 + 23);
  if (v22 >= 0)
    v23 = a2;
  else
    v23 = *(_QWORD *)a2;
  if (v22 >= 0)
    v24 = *(unsigned __int8 *)(a2 + 23);
  else
    v24 = *(_QWORD *)(a2 + 8);
  v25 = sub_100263F7C(&v48, v23, v24);
  v26 = sub_100263F7C(v25, (uint64_t)"endTime, ", 9);
  v27 = (_QWORD *)std::ostream::operator<<(v26, *(double *)(a1 + 8));
  sub_100263F7C(v27, (uint64_t)", ", 2);
  v28 = *(char *)(a2 + 23);
  if (v28 >= 0)
    v29 = a2;
  else
    v29 = *(_QWORD *)a2;
  if (v28 >= 0)
    v30 = *(unsigned __int8 *)(a2 + 23);
  else
    v30 = *(_QWORD *)(a2 + 8);
  v31 = sub_100263F7C(&v48, v29, v30);
  v32 = sub_100263F7C(v31, (uint64_t)"score, ", 7);
  v33 = (_QWORD *)std::ostream::operator<<(v32, *(float *)(a1 + 16));
  sub_100263F7C(v33, (uint64_t)", ", 2);
  v34 = *(char *)(a2 + 23);
  if (v34 >= 0)
    v35 = a2;
  else
    v35 = *(_QWORD *)a2;
  if (v34 >= 0)
    v36 = *(unsigned __int8 *)(a2 + 23);
  else
    v36 = *(_QWORD *)(a2 + 8);
  v37 = sub_100263F7C(&v48, v35, v36);
  v38 = sub_100263F7C(v37, (uint64_t)"scorePreBiasCorrection, ", 24);
  v39 = (_QWORD *)std::ostream::operator<<(v38, *(float *)(a1 + 20));
  sub_100263F7C(v39, (uint64_t)", ", 2);
  v40 = *(char *)(a2 + 23);
  if (v40 >= 0)
    v41 = a2;
  else
    v41 = *(_QWORD *)a2;
  if (v40 >= 0)
    v42 = *(unsigned __int8 *)(a2 + 23);
  else
    v42 = *(_QWORD *)(a2 + 8);
  v43 = sub_100263F7C(&v48, v41, v42);
  v44 = sub_100263F7C(v43, (uint64_t)"isTransient, ", 13);
  std::ostream::operator<<(v44, *(unsigned __int8 *)(a1 + 24));
  std::stringbuf::str(a3, v49);
  if (v50 < 0)
    operator delete((void *)v49[8]);
  std::streambuf::~streambuf(v49);
  return std::ios::~ios(&v51);
}

void sub_1014C611C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1004E5F2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014C6134@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  sub_1004E5E40((uint64_t)&v15);
  v4 = v15;
  *(_DWORD *)((char *)v16 + *(_QWORD *)(v15 - 24)) = *(_DWORD *)((_BYTE *)v16 + *(_QWORD *)(v15 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v16[1] + *(_QWORD *)(v4 - 24)) = 2;
  v5 = sub_100263F7C(&v15, (uint64_t)"startTime, ", 11);
  v6 = (_QWORD *)std::ostream::operator<<(v5, *(double *)a1);
  sub_100263F7C(v6, (uint64_t)", ", 2);
  v7 = sub_100263F7C(&v15, (uint64_t)"endTime, ", 9);
  v8 = (_QWORD *)std::ostream::operator<<(v7, *(double *)(a1 + 8));
  sub_100263F7C(v8, (uint64_t)", ", 2);
  v9 = sub_100263F7C(&v15, (uint64_t)"workoutType, ", 13);
  v10 = (_QWORD *)std::ostream::operator<<(v9, *(_QWORD *)(a1 + 16));
  sub_100263F7C(v10, (uint64_t)", ", 2);
  v11 = sub_100263F7C(&v15, (uint64_t)"sessionDurationActiveMinutes, ", 30);
  v12 = (_QWORD *)std::ostream::operator<<(v11, *(double *)(a1 + 40));
  sub_100263F7C(v12, (uint64_t)", ", 2);
  v13 = sub_100263F7C(&v15, (uint64_t)"sessionDurationTotalMinutes, ", 29);
  std::ostream::operator<<(v13, *(double *)(a1 + 32));
  std::stringbuf::str(a2, v16);
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf(v16);
  return std::ios::~ios(&v18);
}

void sub_1014C62D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E5F2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014C62EC@<X0>(float *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v34;
  _QWORD v35[10];
  char v36;
  uint64_t v37;

  sub_1004E5E40((uint64_t)&v34);
  *(_DWORD *)((char *)v35 + *(_QWORD *)(v34 - 24)) = *(_DWORD *)((_BYTE *)v35 + *(_QWORD *)(v34 - 24)) & 0xFFFFFEFB | 4;
  v4 = sub_100263F7C(&v34, (uint64_t)"hrByHrMaxMax, ", 14);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  sub_100263F7C(v5, (uint64_t)", ", 2);
  v6 = sub_100263F7C(&v34, (uint64_t)"hrByHrMaxMin, ", 14);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  sub_100263F7C(v7, (uint64_t)", ", 2);
  v8 = sub_100263F7C(&v34, (uint64_t)"hrByHrMaxStd, ", 14);
  v9 = (_QWORD *)std::ostream::operator<<(v8, a1[2]);
  sub_100263F7C(v9, (uint64_t)", ", 2);
  v10 = sub_100263F7C(&v34, (uint64_t)"hrByHrMaxAvg, ", 14);
  v11 = (_QWORD *)std::ostream::operator<<(v10, a1[3]);
  sub_100263F7C(v11, (uint64_t)", ", 2);
  v12 = sub_100263F7C(&v34, (uint64_t)"hrByHrMaxRange, ", 16);
  v13 = (_QWORD *)std::ostream::operator<<(v12, a1[4]);
  sub_100263F7C(v13, (uint64_t)", ", 2);
  v14 = sub_100263F7C(&v34, (uint64_t)"fractionSessionWithHrAvailable, ", 32);
  v15 = (_QWORD *)std::ostream::operator<<(v14, a1[5]);
  sub_100263F7C(v15, (uint64_t)", ", 2);
  v16 = sub_100263F7C(&v34, (uint64_t)"observedHrMax, ", 15);
  v17 = (_QWORD *)std::ostream::operator<<(v16, a1[6]);
  sub_100263F7C(v17, (uint64_t)", ", 2);
  v18 = sub_100263F7C(&v34, (uint64_t)"hrAbove90Time, ", 15);
  v19 = (_QWORD *)std::ostream::operator<<(v18, a1[11]);
  sub_100263F7C(v19, (uint64_t)", ", 2);
  v20 = sub_100263F7C(&v34, (uint64_t)"hrAbove83Time, ", 15);
  v21 = (_QWORD *)std::ostream::operator<<(v20, a1[12]);
  sub_100263F7C(v21, (uint64_t)", ", 2);
  v22 = sub_100263F7C(&v34, (uint64_t)"hrAbove90Ratio, ", 16);
  v23 = (_QWORD *)std::ostream::operator<<(v22, a1[13]);
  sub_100263F7C(v23, (uint64_t)", ", 2);
  v24 = sub_100263F7C(&v34, (uint64_t)"hrAbove83Ratio, ", 16);
  v25 = (_QWORD *)std::ostream::operator<<(v24, a1[14]);
  sub_100263F7C(v25, (uint64_t)", ", 2);
  v26 = sub_100263F7C(&v34, (uint64_t)"activityWalkingRatio, ", 22);
  v27 = (_QWORD *)std::ostream::operator<<(v26, a1[7]);
  sub_100263F7C(v27, (uint64_t)", ", 2);
  v28 = sub_100263F7C(&v34, (uint64_t)"activityRunningRatio, ", 22);
  v29 = (_QWORD *)std::ostream::operator<<(v28, a1[8]);
  sub_100263F7C(v29, (uint64_t)", ", 2);
  v30 = sub_100263F7C(&v34, (uint64_t)"activityCyclingRatio, ", 22);
  v31 = (_QWORD *)std::ostream::operator<<(v30, a1[9]);
  sub_100263F7C(v31, (uint64_t)", ", 2);
  v32 = sub_100263F7C(&v34, (uint64_t)"activityOtherRatio, ", 20);
  std::ostream::operator<<(v32, a1[10]);
  std::stringbuf::str(a2, v35);
  if (v36 < 0)
    operator delete((void *)v35[8]);
  std::streambuf::~streambuf(v35);
  return std::ios::~ios(&v37);
}

void sub_1014C6638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E5F2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014C664C@<X0>(float *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v13;
  _QWORD v14[10];
  char v15;
  uint64_t v16;

  sub_1004E5E40((uint64_t)&v13);
  *(_DWORD *)((char *)v14 + *(_QWORD *)(v13 - 24)) = *(_DWORD *)((_BYTE *)v14 + *(_QWORD *)(v13 - 24)) & 0xFFFFFEFB | 4;
  v4 = sub_100263F7C(&v13, (uint64_t)"estimatedEffortBLHRMax, ", 24);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  sub_100263F7C(v5, (uint64_t)", ", 2);
  v6 = sub_100263F7C(&v13, (uint64_t)"estimatedEffortBLHRMin, ", 24);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  sub_100263F7C(v7, (uint64_t)", ", 2);
  v8 = sub_100263F7C(&v13, (uint64_t)"estimatedEffortBLHRAvg, ", 24);
  v9 = (_QWORD *)std::ostream::operator<<(v8, a1[2]);
  sub_100263F7C(v9, (uint64_t)", ", 2);
  v10 = sub_100263F7C(&v13, (uint64_t)"estimatedEffortBLHRStd, ", 24);
  v11 = (_QWORD *)std::ostream::operator<<(v10, a1[3]);
  sub_100263F7C(v11, (uint64_t)", ", 2);
  std::stringbuf::str(a2, v14);
  if (v15 < 0)
    operator delete((void *)v14[8]);
  std::streambuf::~streambuf(v14);
  return std::ios::~ios(&v16);
}

void sub_1014C67C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E5F2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014C67D8@<X0>(float *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  _QWORD v9[10];
  char v10;
  uint64_t v11;

  sub_1004E5E40((uint64_t)&v8);
  *(_DWORD *)((char *)v9 + *(_QWORD *)(v8 - 24)) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(v8 - 24)) & 0xFFFFFEFB | 4;
  v4 = sub_100263F7C(&v8, (uint64_t)"vo2Max, ", 8);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  sub_100263F7C(v5, (uint64_t)", ", 2);
  v6 = sub_100263F7C(&v8, (uint64_t)"hrMax, ", 7);
  std::ostream::operator<<(v6, a1[1]);
  std::stringbuf::str(a2, v9);
  if (v10 < 0)
    operator delete((void *)v9[8]);
  std::streambuf::~streambuf(v9);
  return std::ios::~ios(&v11);
}

void sub_1014C68E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E5F2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1014C68FC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  void *__p[2];
  __int128 v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  *(_OWORD *)__p = 0u;
  v13 = 0u;
  v2 = *(_QWORD *)(a1 + 2160);
  if (v2 != *(_QWORD *)(a1 + 2168))
    *(_QWORD *)(a1 + 2168) = v2;
  v3 = sub_1014BB438(*(_BYTE **)(a1 + 2304), 0x1Eu, (uint64_t)__p, (char **)(a1 + 2160));
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BB870);
  v4 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
  {
    v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 2168) - *(_QWORD *)(a1 + 2160)) >> 3);
    *(_DWORD *)buf = 134217984;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Got %zu historical records from db", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v7 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 2168) - *(_QWORD *)(a1 + 2160)) >> 3);
    v14 = 134217984;
    v15 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 1, "Got %zu historical records from db", (size_t)&v14);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::prepareHistoricalSessionData()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (v3 != 100)
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v6 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v17) = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Reteriving historical session from db failed with error : %u", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB870);
      v14 = 67109120;
      LODWORD(v15) = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 16, "Reteriving historical session from db failed with error : %u", &v14);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLWorkoutEffortManager::prepareHistoricalSessionData()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  if (__p[1])
  {
    *(void **)&v13 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_1014C6C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1014C6C9C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char out[40];

  if (result[286])
  {
    v1 = result;
    v2 = result[270];
    if (result[271] != v2)
    {
      v3 = 0;
      v4 = 8;
      do
      {
        memset(out, 0, 37);
        uuid_unparse((const unsigned __int8 *)(v2 + v4), out);
        objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", out, 4));
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v1[286] + 16))(v1[286]);
        ++v3;
        v2 = v1[270];
        v4 += 104;
      }
      while (0x4EC4EC4EC4EC4EC5 * ((v1[271] - v2) >> 3) > v3);
    }
  }
  return result;
}

void sub_1014C6E00(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  *(double *)(a1 + 2264) = *(float *)(a2 + 36);
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BB870);
  v3 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_QWORD *)(a1 + 2264);
    *(_DWORD *)buf = 134217984;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "WorkoutEffortManager, updating session summary with ML features, hrMax, %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v5 = *(_QWORD *)(a1 + 2264);
    v8 = 134217984;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "WorkoutEffortManager, updating session summary with ML features, hrMax, %f", COERCE_DOUBLE(&v8));
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::updateSessionMLFeatures(const CLWorkoutEffort::MLFeatures &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_1014C6FBC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  int v13;
  double v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  double v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  *(_QWORD *)(a1 + 2272) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 2224) = *(_OWORD *)a2;
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BB870);
  v3 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(float *)(a1 + 2272);
    v5 = *(_QWORD *)(a1 + 2224);
    v6 = *(_QWORD *)(a1 + 2232);
    *(_DWORD *)buf = 134218496;
    v20 = v4;
    v21 = 2048;
    v22 = v5;
    v23 = 2048;
    v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "updateSessionEstimatedEffort %f, %f, %f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v7 = *(float *)(a1 + 2272);
    v8 = *(_QWORD *)(a1 + 2224);
    v9 = *(_QWORD *)(a1 + 2232);
    v13 = 134218496;
    v14 = v7;
    v15 = 2048;
    v16 = v8;
    v17 = 2048;
    v18 = v9;
    LODWORD(v12) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "updateSessionEstimatedEffort %f, %f, %f", COERCE_DOUBLE(&v13), v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::updateSessionEstimatedEffort(const CLWorkoutEffort::Result &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
}

void sub_1014C71BC(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BB870);
  v2 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Inserting current session info in DB", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "Inserting current session info in DB", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::writeCurrentSessionToDb()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_1014BA65C(*(_QWORD *)(a1 + 2304), a1 + 2184);
}

void sub_1014C7358(_QWORD *a1)
{
  NSObject *v2;
  _OWORD *v3;
  _OWORD *i;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  char *v17;
  char out[40];
  _BYTE __dst[104];
  _OWORD v20[6];
  uint64_t v21;
  uint8_t buf[4];
  char *v23;

  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BB870);
  v2 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Updating user response in db", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    LOWORD(v20[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "Updating user response in db", v20, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::updateUserResponseInDb()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v3 = (_OWORD *)a1[270];
  for (i = (_OWORD *)a1[271]; v3 != i; v3 = (_OWORD *)((char *)v3 + 104))
  {
    v5 = *v3;
    v6 = v3[2];
    v20[1] = v3[1];
    v20[2] = v6;
    v20[0] = v5;
    v7 = v3[3];
    v8 = v3[4];
    v9 = v3[5];
    v21 = *((_QWORD *)v3 + 12);
    v20[4] = v8;
    v20[5] = v9;
    v20[3] = v7;
    v10 = a1[288];
    memmove(__dst, v3, 0x68uLL);
    if ((sub_1014BE358(v10, (uint64_t)__dst) & 1) == 0)
    {
      memset(out, 0, 37);
      uuid_unparse((const unsigned __int8 *)v20 + 8, out);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB870);
      v11 = qword_10229FFD8;
      if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v23 = out;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to update user response for session %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFD0 != -1)
          dispatch_once(&qword_10229FFD0, &stru_1021BB870);
        v16 = 136315138;
        v17 = out;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 16, "Failed to update user response for session %s", (const char *)&v16);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 0, "void CLWorkoutEffortManager::updateUserResponseInDb()", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
    }
  }
}

void sub_1014C76D4(uint64_t a1, int a2, double a3, double a4, double a5)
{
  uint64_t v7;
  NSObject *v8;
  float v9;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  int v25;

  if (a2 == 100)
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v8 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "WorkoutEffortManager, Got healthkit user response callback for workout", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB870);
      LOWORD(v18) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "WorkoutEffortManager, Got healthkit user response callback for workout", &v18, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::queryHealthKitForUserResponse()_block_invoke", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v9 = a5;
    *(float *)(*(_QWORD *)(v7 + 2160) + 104 * *(int *)(a1 + 48) + 96) = v9;
  }
  else
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BB870);
    v11 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v23 = v12;
      v24 = 1024;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "WorkoutEffortManager, Failed HKQuery for workout %@, with error %d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BB870);
      v15 = *(_QWORD *)(a1 + 32);
      v18 = 138412546;
      v19 = v15;
      v20 = 1024;
      v21 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "WorkoutEffortManager, Failed HKQuery for workout %@, with error %d", &v18, 18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortManager::queryHealthKitForUserResponse()_block_invoke", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

void sub_1014C79FC(id a1)
{
  qword_10229FFD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

_QWORD *sub_1014C7A28@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1F8uLL);
  result = sub_1014C7A80(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1014C7A6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1014C7A80(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021BB8A0;
  sub_1014B9CE0(a1 + 3, *a2, 0);
  return a1;
}

void sub_1014C7AC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1014C7AD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021BB8A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1014C7AE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021BB8A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1014C7B1C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1014C7B30()
{
  operator delete();
}

_QWORD *sub_1014C7B44(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021BB8F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1014C7B78(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021BB8F0;
  a2[1] = v2;
  return result;
}

void sub_1014C7B94(uint64_t a1, uint64_t a2)
{
  sub_1014C5400(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1014C7B9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1014C7BD8()
{
}

_QWORD *sub_1014C7BE4@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = sub_1014C7C3C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1014C7C28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1014C7C3C(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021BB970;
  sub_1014CA1B0(a1 + 3, *a2);
  return a1;
}

void sub_1014C7C78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1014C7C8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021BB970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1014C7CA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021BB970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1014C7CD4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1014C7CE4@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x58uLL);
  result = sub_1014C7D3C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1014C7D28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1014C7D3C(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021BB9C0;
  sub_1014B27D0(a1 + 3, *a2);
  return a1;
}

void sub_1014C7D78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1014C7D8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021BB9C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1014C7DA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021BB9C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1014C7DD4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

uint64_t sub_1014C7DE4(uint64_t a1, uint64_t a2)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a1 = _Q0;
  __asm { FMOV            V1.2S, #-1.0 }
  *(_QWORD *)(a1 + 16) = _D1;
  *(_WORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(_QWORD *)(a1 + 32) = off_1021BBAD8;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = off_1021BBB30;
  *(_OWORD *)(a1 + 88) = _Q0;
  sub_1014C9188(a1 + 128, 1, 1, 0.1, 1.2, 0.7);
  *(_QWORD *)(a1 + 240) = a2;
  return a1;
}

void sub_1014C7E84(__n128 *a1@<X0>, unint64_t *a2@<X1>, __n128 *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7;
  __n128 v8;
  float v9;
  NSObject *v10;
  unint64_t v11;
  float v12;
  double v13;
  float v14;
  double v15;
  double v16;
  NSObject *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  unint64_t v26;
  float v27;
  double v28;
  float v29;
  double v30;
  double v31;
  const char *v32;
  uint8_t *v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  const char *v40;
  uint8_t *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  unsigned __int32 v47;
  __n128 v48;
  float v49;
  unsigned __int32 v50;
  unsigned __int16 v51;
  int v52;
  unint64_t v53;
  __int16 v54;
  _BYTE v55[40];
  double v56;
  uint8_t buf[4];
  unint64_t v58;
  __int16 v59;
  _BYTE v60[40];
  double v61;

  v7 = (uint64_t)&a1[2];
  sub_1014C8F8C((uint64_t)&a1[2], a2, a4);
  v8 = v48;
  v8.n128_f32[0] = v49;
  if (v49 > 10.0)
    v8.n128_f32[0] = 10.0;
  if (v8.n128_f32[0] >= 1.0)
    v9 = v8.n128_f32[0];
  else
    v9 = 1.0;
  sub_1014C8F8C((uint64_t)&a1[5], a2, v8);
  a1[9].n128_u32[2] = v47;
  sub_1014C91D4((uint64_t)&a1[8], (float *)a2);
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BBA00);
  v10 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
  {
    v11 = *a2;
    sub_1014C90A8(v7, (uint64_t)a2);
    v13 = v12;
    v14 = sub_1014C913C((uint64_t)&a1[5], (uint64_t)a2);
    v15 = a1[11].n128_f32[0];
    v16 = a1[11].n128_f32[1];
    *(_DWORD *)buf = 134219264;
    v58 = v11;
    v59 = 2048;
    *(double *)v60 = v13;
    *(_WORD *)&v60[8] = 2048;
    *(double *)&v60[10] = v14;
    *(_WORD *)&v60[18] = 2048;
    *(double *)&v60[20] = *(float *)&v45;
    *(_WORD *)&v60[28] = 2048;
    *(double *)&v60[30] = v15;
    *(_WORD *)&v60[38] = 2048;
    v61 = v16;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "WorkoutEffortEstimator update model details, startTime, %f, estimateScoreBloodLactateHR, %f, estimateScoreBaseHR, %f, estimateScoreACDepletionHR, %f, amountDepletedHR, %f, acDepletionRegressionFloorHR, %f", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BBA00);
    v25 = qword_10229FFD8;
    v26 = *a2;
    sub_1014C90A8(v7, (uint64_t)a2);
    v28 = v27;
    v29 = sub_1014C913C((uint64_t)&a1[5], (uint64_t)a2);
    v30 = a1[11].n128_f32[0];
    v31 = a1[11].n128_f32[1];
    v52 = 134219264;
    v53 = v26;
    v54 = 2048;
    *(double *)v55 = v28;
    *(_WORD *)&v55[8] = 2048;
    *(double *)&v55[10] = v29;
    *(_WORD *)&v55[18] = 2048;
    *(double *)&v55[20] = *(float *)&v45;
    *(_WORD *)&v55[28] = 2048;
    *(double *)&v55[30] = v30;
    *(_WORD *)&v55[38] = 2048;
    v56 = v31;
    LODWORD(v42) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "WorkoutEffortEstimator update model details, startTime, %f, estimateScoreBloodLactateHR, %f, estimateScoreBaseHR, %f, estimateScoreACDepletionHR, %f, amountDepletedHR, %f, acDepletionRegressionFloorHR, %f", COERCE_DOUBLE(&v52), v42, v43, v44, v45, v46);
    v33 = (uint8_t *)v32;
    sub_100512490("Generic", 1, 0, 2, "CLWorkoutEffort::Result CLWorkoutEffortBasePhysiogicalEstimator::update(const CLWorkoutEffort::Input &)", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
  *a1 = v48;
  a1[1].n128_f32[0] = v9;
  a1[1].n128_u32[1] = v50;
  a1[1].n128_u16[4] = v51;
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BBA00);
  v17 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
  {
    v18 = *a2;
    v19 = a1[1].n128_u8[9];
    v20 = a1->n128_u64[0];
    v21 = a1->n128_i64[1];
    v22 = a1[1].n128_f32[0];
    v23 = *(_QWORD *)(a1[15].n128_u64[0] + 168);
    *(_DWORD *)buf = 134219264;
    v58 = v18;
    v59 = 1024;
    *(_DWORD *)v60 = v19;
    *(_WORD *)&v60[4] = 2048;
    *(_QWORD *)&v60[6] = v20;
    *(_WORD *)&v60[14] = 2048;
    *(_QWORD *)&v60[16] = v21;
    *(_WORD *)&v60[24] = 2048;
    *(double *)&v60[26] = v22;
    *(_WORD *)&v60[34] = 1024;
    *(_DWORD *)&v60[36] = v23;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "WorkoutEffortEstimatorBase update, updateStartTime, %f, isValid, %d, startTime, %f, endTime, %f, score, %f, workoutType, %d", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BBA00);
    v34 = *a2;
    v35 = a1[1].n128_u8[9];
    v36 = a1->n128_u64[0];
    v37 = a1->n128_i64[1];
    v38 = a1[1].n128_f32[0];
    v39 = *(_QWORD *)(a1[15].n128_u64[0] + 168);
    v52 = 134219264;
    v53 = v34;
    v54 = 1024;
    *(_DWORD *)v55 = v35;
    *(_WORD *)&v55[4] = 2048;
    *(_QWORD *)&v55[6] = v36;
    *(_WORD *)&v55[14] = 2048;
    *(_QWORD *)&v55[16] = v37;
    *(_WORD *)&v55[24] = 2048;
    *(double *)&v55[26] = v38;
    *(_WORD *)&v55[34] = 1024;
    *(_DWORD *)&v55[36] = v39;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 1, "WorkoutEffortEstimatorBase update, updateStartTime, %f, isValid, %d, startTime, %f, endTime, %f, score, %f, workoutType, %d", COERCE_DOUBLE(&v52), 54, v43, v44, v45, LODWORD(v46));
    v41 = (uint8_t *)v40;
    sub_100512490("Generic", 1, 0, 2, "CLWorkoutEffort::Result CLWorkoutEffortBasePhysiogicalEstimator::update(const CLWorkoutEffort::Input &)", "%s\n", v40);
    if (v41 != buf)
      free(v41);
  }
  v24 = a1[1];
  *a3 = *a1;
  a3[1] = v24;
}

void sub_1014C8388(uint64_t a1, double a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  double v8;
  uint8_t buf[4];
  double v10;

  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BBA00);
  v4 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WorkoutEffortEstimator reset, startTime, %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BBA00);
    v7 = 134217984;
    v8 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 0, "WorkoutEffortEstimator reset, startTime, %f", COERCE_DOUBLE(&v7));
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortBasePhysiogicalEstimator::reset(CFAbsoluteTime)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_1014C9098(a1 + 32, a2);
  sub_1014C9098(a1 + 80, a2);
  sub_1014C9668(a1 + 128, a2);
}

void sub_1014C8560(id a1)
{
  qword_10229FFD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

std::string *sub_1014C858C@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  std::string *result;

  result = (std::string *)sub_1015A2E04(a2, "");
  if (a1 < 5)
    return std::string::assign(a2, off_1021BBA40[a1]);
  return result;
}

void sub_1014C85D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1014C85F4(_DWORD *result, uint64_t a2)
{
  unsigned int v2;
  NSObject *v3;
  std::string *v4;
  uint64_t v5;
  std::string *p_buf;
  std::string *v7;
  std::string *v8;
  std::string buf;
  int v10;
  std::string *v11;
  std::string __p[68];

  if (a2 > 16)
  {
    if (a2 != 24)
    {
      if (a2 == 17)
      {
        v2 = 2;
        goto LABEL_10;
      }
      goto LABEL_9;
    }
LABEL_8:
    v2 = 1;
    goto LABEL_10;
  }
  if ((unint64_t)(a2 - 15) < 2)
    goto LABEL_8;
  if (a2 == 4)
  {
    v2 = 3;
    goto LABEL_10;
  }
LABEL_9:
  v2 = 0;
LABEL_10:
  if (v2 != *result)
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BBA20);
    v3 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
    {
      sub_1014C858C(v2, __p);
      v4 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? __p
         : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLWorkoutEffortEstimator, selecting %s model", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BBA20);
      v5 = qword_10229FFD8;
      sub_1014C858C(v2, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      v10 = 136315138;
      v11 = p_buf;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v5, 1, "CLWorkoutEffortEstimator, selecting %s model", (const char *)&v10);
      v8 = v7;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortEstimator::updateModelType(const CMWorkoutType)", "%s\n", (const char *)v8);
      if (v8 != __p)
        free(v8);
    }
    __asm { BR              X10 }
  }
  return result;
}

__n128 sub_1014C894C@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  int *v5;
  float v7;
  float v8;
  float v9;
  NSObject *v10;
  CFAbsoluteTime Current;
  int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  CFAbsoluteTime v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  NSObject *v28;
  uint64_t v29;
  __n128 result;
  __int128 v31;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  int v35;
  CFAbsoluteTime v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  double v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  uint8_t buf[4];
  CFAbsoluteTime v50;
  __int16 v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  double v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;

  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 72);
  v5 = a1 + 4;
  if (!*(_BYTE *)a2)
  {
LABEL_22:
    *((_BYTE *)a1 + 41) = 0;
    goto LABEL_23;
  }
  if (!sub_1014B1E94(*(_QWORD *)(a2 + 88)))
  {
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BBA20);
    v28 = qword_10229FFD8;
    if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
    {
      v29 = *(_QWORD *)(a2 + 88);
      *(_DWORD *)buf = 67109120;
      LODWORD(v50) = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortEstimator, did not pass isSupported check, workoutType, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFD0 != -1)
        dispatch_once(&qword_10229FFD0, &stru_1021BBA20);
      v32 = *(_QWORD *)(a2 + 88);
      v35 = 67109120;
      LODWORD(v36) = v32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "CLWorkoutEffortEstimator, did not pass isSupported check, workoutType, %d", &v35);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 2, "CLWorkoutEffort::Result CLWorkoutEffortEstimator::estimate(const CLWorkoutEffort::MLFeatures &)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
    goto LABEL_22;
  }
  sub_1014C85F4(a1, *(_QWORD *)(a2 + 88));
  v7 = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 1) + 16))(*((_QWORD *)a1 + 1), a2);
  v8 = 8.0;
  if (v7 <= 8.0)
    v8 = v7;
  if (v7 >= 1.0)
    v9 = v8;
  else
    v9 = 1.0;
  *((float *)a1 + 8) = v9;
  *((_BYTE *)a1 + 41) = 1;
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BBA20);
  v10 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_INFO))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v12 = *((unsigned __int8 *)a1 + 41);
    v13 = *((_QWORD *)a1 + 2);
    v14 = *((_QWORD *)a1 + 3);
    v15 = *((float *)a1 + 8);
    v16 = *(_QWORD *)(a2 + 88);
    v17 = *a1;
    *(_DWORD *)buf = 134219520;
    v50 = Current;
    v51 = 1024;
    v52 = v12;
    v53 = 2048;
    v54 = v13;
    v55 = 2048;
    v56 = v14;
    v57 = 2048;
    v58 = v15;
    v59 = 1024;
    v60 = v16;
    v61 = 1024;
    v62 = v17;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "WorkoutEffortEstimatorXgb update, updateStartTime, %f, isValid, %d, startTime, %f, endTime, %f, score, %f, workoutType, %d, modelType, %d", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BBA20);
    v18 = qword_10229FFD8;
    v19 = CFAbsoluteTimeGetCurrent();
    v20 = *((unsigned __int8 *)a1 + 41);
    v21 = *((_QWORD *)a1 + 2);
    v22 = *((_QWORD *)a1 + 3);
    v23 = *((float *)a1 + 8);
    v24 = *(_QWORD *)(a2 + 88);
    v25 = *a1;
    v35 = 134219520;
    v36 = v19;
    v37 = 1024;
    v38 = v20;
    v39 = 2048;
    v40 = v21;
    v41 = 2048;
    v42 = v22;
    v43 = 2048;
    v44 = v23;
    v45 = 1024;
    v46 = v24;
    v47 = 1024;
    v48 = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 1, "WorkoutEffortEstimatorXgb update, updateStartTime, %f, isValid, %d, startTime, %f, endTime, %f, score, %f, workoutType, %d, modelType, %d", COERCE_DOUBLE(&v35), 60);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "CLWorkoutEffort::Result CLWorkoutEffortEstimator::estimate(const CLWorkoutEffort::MLFeatures &)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
LABEL_23:
  result = *(__n128 *)v5;
  v31 = *((_OWORD *)v5 + 1);
  *a3 = *(_OWORD *)v5;
  a3[1] = v31;
  return result;
}

uint64_t sub_1014C8D74(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t result;
  const char *v11;
  uint8_t *v12;
  int v13;
  double v14;
  uint8_t buf[4];
  double v16;

  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BBA20);
  v4 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WorkoutEffortEstimator reset, startTime, %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BBA20);
    v13 = 134217984;
    v14 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 0, "WorkoutEffortEstimator reset, startTime, %f", COERCE_DOUBLE(&v13));
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortEstimator::reset(CFAbsoluteTime)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 32) = _Q0;
  *(_WORD *)(a1 + 40) = 1;
  result = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_DWORD *)a1 = 4;
  return result;
}

void sub_1014C8F60(id a1)
{
  qword_10229FFD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

uint64_t sub_1014C8F8C(uint64_t a1, unint64_t *a2, __n128 a3)
{
  a3.n128_u64[0] = *a2;
  if (*(double *)a2 != -1.0)
  {
    if (*(double *)(a1 + 8) == -1.0)
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 32))(a1, a3.n128_f64[0]);
    a3.n128_f32[0] = (*(float (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 40))(a1, a2);
    *(_QWORD *)(a1 + 16) = *a2;
    a3.n128_f32[0] = a3.n128_f32[0] + *(float *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = a3.n128_u32[0];
    ++*(_QWORD *)(a1 + 32);
    *(_BYTE *)(a1 + 40) = 1;
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 24))(a1, a3);
}

uint64_t sub_1014C9030@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  float v3;
  double v4;
  BOOL v5;

  v2 = *(_QWORD *)(result + 32);
  v3 = -1.0;
  if (v2)
    v3 = *(float *)(result + 24) / (float)v2;
  v4 = *(double *)(result + 16) + 2.56;
  *(_QWORD *)a2 = *(_QWORD *)(result + 8);
  *(double *)(a2 + 8) = v4;
  *(float *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = -1082130432;
  *(_BYTE *)(a2 + 24) = 1;
  v5 = v3 != -1.0 && *(_BYTE *)(result + 40) != 0;
  *(_BYTE *)(a2 + 25) = v5;
  return result;
}

uint64_t sub_1014C9098(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  *(double *)(result + 16) = a2;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

void sub_1014C90A8(uint64_t a1, uint64_t a2)
{
  float v2;

  v2 = *(float *)(a2 + 8) / *(float *)(a2 + 52);
  if (v2 >= 0.3 && v2 >= 0.7)
    powf(v2, 5.233);
}

float sub_1014C913C(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  BOOL v4;
  float result;

  v2 = *(float *)(a2 + 8) / *(float *)(a2 + 52);
  v3 = (float)(v2 * 17.4) + -0.8553;
  v4 = v2 < 0.3;
  result = 6.0;
  if (v4)
    v3 = 6.0;
  if (v3 >= 6.0)
    result = v3;
  if (result > 20.0)
    return 20.0;
  return result;
}

double sub_1014C9188(uint64_t a1, char a2, char a3, float a4, float a5, float a6)
{
  double result;

  *(_QWORD *)a1 = off_1021BBA78;
  *(float *)(a1 + 8) = a4;
  *(float *)(a1 + 12) = a5;
  *(_BYTE *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 17) = a3;
  *(float *)(a1 + 20) = a6;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(double *)(a1 + 96) = result;
  *(_WORD *)(a1 + 104) = 1;
  return result;
}

uint64_t sub_1014C91D4(uint64_t a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  if (*(double *)a2 != -1.0)
  {
    if (*(double *)(a1 + 80) == -1.0)
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 32))(a1, *(double *)a2);
    sub_1014C9370(a1, a2);
    v4 = *(float *)(a1 + 20);
    v5 = *(float *)(a1 + 48);
    v7 = *(float *)(a1 + 8);
    v6 = *(float *)(a1 + 12);
    if (v6 > v5)
      v6 = *(float *)(a1 + 48);
    if (v7 >= v6)
      v6 = *(float *)(a1 + 8);
    v8 = powf(fmaxf(v6, 0.0), (float)(v4 * 5.376) + -2.238);
    if (v5 >= v7)
    {
      v11 = *(float *)(a1 + 64);
      v12 = *(float *)(a1 + 52);
      if (v11 >= v12)
      {
        v15 = *(float *)(a1 + 68);
        v16 = fminf(fmaxf((float)((float)(v4 * 4.378) + 10.56) + (float)((float)((float)(v4 * 7.032) + -2.842) * v8), 6.0), 20.0)- v15;
        if (v16 > 0.2)
          v16 = 0.2;
        v14 = v15 + fmaxf(v16, 0.0);
        *(float *)(a1 + 68) = v14;
      }
      else
      {
        v13 = v12 - v11;
        if ((float)(v12 - v11) > 0.2)
          v13 = 0.2;
        v14 = v11 + fmaxf(v13, 0.0);
        *(float *)(a1 + 64) = v14;
      }
      *(float *)(a1 + 96) = v14;
    }
    else
    {
      v9 = *(float *)(a1 + 24) + *(float *)(a1 + 60);
      v10 = *(float *)(a1 + 52);
      if (v9 >= v10)
        v9 = *(float *)(a1 + 52);
      *(float *)(a1 + 96) = v9;
      *(float *)(a1 + 64) = v9;
      *(float *)(a1 + 68) = v10;
    }
    *(_QWORD *)(a1 + 88) = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 105) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

float sub_1014C9370(uint64_t a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float result;

  v4 = *(float *)(a1 + 20);
  *(float *)(a1 + 44) = v4;
  v5 = sub_1014B1E60((uint64_t)(a2 + 6));
  v6 = sub_1014B1E2C(v4 * v5, a2[9]);
  *(float *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 36) = 1062501089;
  v7 = (float)(v6 * 60.0) / 0.95;
  *(float *)(a1 + 40) = v7;
  v8 = sub_1014C947C(a1, a2, v6, 0.83, v7) + *(float *)(a1 + 28);
  *(float *)(a1 + 28) = v8;
  v9 = *(float *)(a1 + 44);
  v10 = v8 / *(float *)(a1 + 40);
  v11 = *(float *)(a1 + 8);
  if (v10 >= *(float *)(a1 + 12))
    v10 = *(float *)(a1 + 12);
  *(float *)(a1 + 48) = fmaxf(v10, 0.0);
  result = fminf(fmaxf((float)((float)(v9 * 4.378) + 10.56)+ (float)((float)((float)(v9 * 7.032) + -2.842) * powf(fmaxf(v11, 0.0), (float)(v9 * 5.376) + -2.238)), 6.0), 20.0);
  *(float *)(a1 + 52) = result;
  return result;
}

float sub_1014C947C(uint64_t a1, float *a2, float a3, float a4, float a5)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  float v18;
  float v19;
  int v20;
  float v21;

  v10 = a2[13];
  if (*(_BYTE *)(a1 + 17))
  {
    v11 = 65.0;
    if (a2[12] <= 65.0)
      v11 = a2[12];
    v12 = (v10 - a2[2]) / (v10 - v11);
    v13 = sub_10108B14C(v12, a2[11]) * 1.01;
    v14 = v13 * sub_1014B1E60((uint64_t)(a2 + 6));
  }
  else
  {
    v14 = 0.0;
  }
  v15 = sub_1014B1E2C(v14, a2[9]);
  if (*(_BYTE *)(a1 + 16))
  {
    v16 = a2[3] < 0.3 || (float)(a2[2] / v10) < a4;
    v17 = 0.0;
    if (!v16)
      v17 = 1.0;
  }
  else
  {
    v17 = 1.0;
  }
  if (v14 > 2.2 && (!*(_BYTE *)(a1 + 17) || a2[3] > 0.3))
  {
    v18 = *(float *)(a1 + 56) + 2.56;
    *(float *)(a1 + 56) = v18;
    if (v18 >= 1200.0)
      *(float *)(a1 + 60) = fminf((float)((float)(v18 + -1200.0) * 0.02336) / 60.0, 3.0);
  }
  v19 = 0.0;
  if (v15 <= a3 || v17 <= 0.0)
  {
    *(_DWORD *)(a1 + 72) = 0;
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v20 + 1;
    if (v20 >= 5)
    {
      v21 = fmaxf(v15 - a3, 0.0) * 2.56;
      if ((float)(a5 * 0.002) < v21)
        v21 = a5 * 0.002;
      return v21 * v17;
    }
  }
  return v19;
}

__n128 sub_1014C965C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 96);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

double sub_1014C9668(uint64_t a1, double a2)
{
  double result;

  *(double *)(a1 + 80) = a2;
  *(double *)(a1 + 88) = a2;
  *(_QWORD *)(a1 + 96) = 0xBF80000000000000;
  *(_WORD *)(a1 + 104) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  return result;
}

void sub_1014C9698()
{
  operator delete();
}

void sub_1014C96AC()
{
  operator delete();
}

_QWORD *sub_1014C96C0(_QWORD *result)
{
  *result = off_1021BBBA0;
  return result;
}

void sub_1014C96D4()
{
  operator delete();
}

uint64_t sub_1014C96EC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  float v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  const char *v17;
  uint8_t *v18;
  __int128 v19;
  _WORD v20[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  v19 = _Q0;
  *(_OWORD *)(a1 + 32) = _Q0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 24) = off_1021BBB30;
  sub_1014C9188(a1 + 72, 1, 1, 0.1, 1.2, 0.7);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = v19;
  *(_QWORD *)(a1 + 184) = off_1021BBAD8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_BYTE *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 428) = xmmword_101CC5AF0;
  *(_OWORD *)(a1 + 444) = xmmword_101CC5B00;
  *(_DWORD *)(a1 + 460) = -1082130432;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = v19;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)(a1 + 544) = _Q0;
  *(_DWORD *)(a1 + 560) = -1082130432;
  *(_QWORD *)(a1 + 568) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 576) = 0xBFF0000000000000;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 584) = _Q0;
  *(_WORD *)(a1 + 592) = 1;
  *(_DWORD *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  v12 = sub_1014B1E60(a3);
  v13 = *(_DWORD *)(a3 + 28);
  *(float *)(a1 + 428) = v12;
  *(_DWORD *)(a1 + 432) = v13;
  sub_1014C99F0(v14, a2, (uint64_t *)(a1 + 496));
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BBBC8);
  v15 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WorkoutEffortFeatureGenerator startSession, updating bodyMetrics and hrMax", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BBBC8);
    v20[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "WorkoutEffortFeatureGenerator startSession, updating bodyMetrics and hrMax", v20, 2);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "CLWorkoutEffortFeatureGenerator::CLWorkoutEffortFeatureGenerator(const CLMotionStateMediator_Type::WorkoutEvent &, const CLBodyMetrics &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  return a1;
}

void sub_1014C99CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004A4854((_QWORD *)(v1 + 376));
  sub_1004A4854((_QWORD *)(v1 + 328));
  _Unwind_Resume(a1);
}

void sub_1014C99F0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  v4 = *a2;
  v5 = a2[14];
  v6 = a2[16];
  *a3 = *a2;
  a3[1] = v4;
  a3[2] = v5;
  a3[3] = v6;
  a3[4] = 0;
  a3[5] = 0;
  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021BBBC8);
  v7 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    v9 = a3[2];
    *(_DWORD *)buf = 134218240;
    v19 = v8;
    v20 = 2048;
    v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WorkoutEffortFeatureGenerator, updating sessionFeatures startTime, %f,workoutType,%ld", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021BBBC8);
    v10 = *a3;
    v11 = a3[2];
    v14 = 134218240;
    v15 = v10;
    v16 = 2048;
    v17 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "WorkoutEffortFeatureGenerator, updating sessionFeatures startTime, %f,workoutType,%ld", COERCE_DOUBLE(&v14), 22);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEffortFeatureGenerator::updateSessionFeatures(const CLMotionStateMediator_Type::WorkoutEvent &, CLWorkoutEffort::SessionFeatures &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

void sub_1014C9BDC(uint64_t a1, uint64_t *a2)
{
  sub_1014C99F0(a1, a2, (uint64_t *)(a1 + 496));
}

double *sub_1014C9BE4(double *result, double a2)
{
  if (*result == -1.0)
    *result = a2;
  return result;
}

double sub_1014C9C00(double *a1, double result)
{
  if (*a1 != -1.0)
  {
    result = result - *a1 + a1[1];
    a1[1] = result;
    *a1 = -1.0;
  }
  return result;
}

float32x4_t sub_1014C9C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  float v7;
  double v8;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unint64_t v36;
  uint64x2_t v37;
  int v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  float32x4_t result;
  __n128 v43;

  v6 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 20) = v6;
  v7 = *(float *)(a2 + 8);
  v8 = *(float *)(a2 + 12);
  if (v8 > 0.39 && v7 >= 40.0 && v7 <= 220.0)
  {
    ++*(_DWORD *)(a1 + 16);
    v43.n128_u64[0] = *(_QWORD *)a2;
    v43.n128_f32[2] = v7;
    v11 = sub_1014B1ED0((_QWORD *)(a1 + 328), &v43);
    if (sub_1014B2078(a1 + 328) >= 0.5)
    {
      v12 = *(float *)(a3 + 24);
      if (v12 >= v11)
        v13 = *(float *)(a3 + 24);
      else
        v13 = v11;
      if (v12 == -1.0)
        v14 = v11;
      else
        v14 = v13;
      *(float *)(a3 + 24) = v14;
      v15 = v11 / *(float *)(a1 + 432);
      v16 = *(float *)(a1 + 304);
      v17 = *(_QWORD *)(a1 + 296);
      *(_QWORD *)(a1 + 296) = v17 + 1;
      v18 = (float)(v17 + 1);
      v19 = v16 + (float)((float)(v15 - v16) / v18);
      *(float *)(a1 + 304) = v19;
      v20 = *(float *)(a1 + 308) + (float)((float)(v15 - v16) * (float)(v15 - v19));
      *(float *)(a1 + 308) = v20;
      v21 = *(float *)(a3 + 4);
      if (*(float *)a3 >= v15)
        v22 = *(float *)a3;
      else
        v22 = v15;
      if (*(float *)a3 == -1.0)
        v23 = v15;
      else
        v23 = v22;
      if (v15 >= v21)
        v24 = *(float *)(a3 + 4);
      else
        v24 = v15;
      if (v21 == -1.0)
        v25 = v15;
      else
        v25 = v24;
      *(float *)a3 = v23;
      *(float *)(a3 + 4) = v25;
      *(float *)(a3 + 12) = v19;
      v26 = 0.0;
      if (v17 + 1 >= 2)
        v26 = v20 / (float)v17;
      *(float *)(a3 + 8) = sqrtf(v26);
      *(float *)(a3 + 16) = v23 - v25;
      if (v15 >= 0.9)
      {
        v27 = *(float *)(a1 + 288);
        v28 = v15 - v27;
        v29 = *(_QWORD *)(a1 + 280) + 1;
        *(_QWORD *)(a1 + 280) = v29;
        v30 = v27 + (float)((float)(v15 - v27) / (float)(unint64_t)v29);
        *(float *)(a1 + 288) = v30;
        *(float *)(a1 + 292) = *(float *)(a1 + 292) + (float)(v28 * (float)(v15 - v30));
      }
      if (v15 >= 0.83)
      {
        v33 = *(float *)(a1 + 272);
        v34 = v15 - v33;
        v31 = *(_QWORD *)(a1 + 264) + 1;
        *(_QWORD *)(a1 + 264) = v31;
        v32 = (float)(unint64_t)v31;
        v35 = v33 + (float)((float)(v15 - v33) / (float)(unint64_t)v31);
        *(float *)(a1 + 272) = v35;
        *(float *)(a1 + 276) = *(float *)(a1 + 276) + (float)(v34 * (float)(v15 - v35));
      }
      else
      {
        v31 = *(_QWORD *)(a1 + 264);
        v32 = (float)(unint64_t)v31;
      }
      v36 = *(_QWORD *)(a1 + 280);
      v37.i64[0] = v36;
      v37.i64[1] = v31;
      *(float32x2_t *)(a3 + 44) = vcvt_f32_f64(vmulq_f64(vcvtq_f64_u64(v37), (float64x2_t)vdupq_n_s64(0x40047AE147AE147BuLL)));
      *(float *)(a3 + 52) = (float)v36 / v18;
      *(float *)(a3 + 56) = v32 / v18;
    }
    v6 = *(_DWORD *)(a1 + 20);
  }
  *(float *)&v8 = (float)v6;
  *(float *)(a3 + 20) = (float)*(unsigned int *)(a1 + 16) / (float)v6;
  v38 = *(_DWORD *)(a2 + 84);
  v39 = (_QWORD *)(a1 + 248);
  v40 = (_QWORD *)(a1 + 256);
  if (v38 == 4)
    v40 = (_QWORD *)(a1 + 232);
  if (v38 != 6)
    v39 = v40;
  if (v38 == 8)
    v41 = (_QWORD *)(a1 + 240);
  else
    v41 = v39;
  ++*v41;
  result = vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 232))), vcvtq_f64_u64(*(uint64x2_t *)(a1 + 248))), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v8, 0));
  *(float32x4_t *)(a3 + 28) = result;
  return result;
}

float sub_1014C9ED8(uint64_t a1, unint64_t *a2, uint64_t a3, __n128 a4)
{
  float result;
  _BYTE v8[26];
  int v9;

  sub_1014C8F8C(a1 + 24, a2, a4);
  *(_DWORD *)(a1 + 96) = v9;
  sub_1014C91D4(a1 + 72, (float *)a2);
  *(_OWORD *)a3 = *(_OWORD *)v8;
  *(_OWORD *)(a3 + 10) = *(_OWORD *)&v8[10];
  result = *(float *)(a1 + 120);
  *(float *)(a3 + 32) = result;
  return result;
}

void sub_1014C9F48(uint64_t a1, uint64_t a2, float *a3)
{
  float v3;
  unsigned __int32 v9;
  float v10;
  float v11;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  __n128 v21;

  v3 = *(float *)(a2 + 8);
  if (*(float *)(a2 + 12) > 0.39 && v3 >= 40.0 && v3 <= 220.0)
  {
    sub_1014C90A8(a1 + 184, a2);
    v21.n128_u64[0] = *(_QWORD *)a2;
    v21.n128_u32[2] = v9;
    v10 = sub_1014B1ED0((_QWORD *)(a1 + 376), &v21);
    if (sub_1014B2078(a1 + 376) >= 0.5)
    {
      v11 = *(float *)(a1 + 320);
      v12 = *(_QWORD *)(a1 + 312);
      *(_QWORD *)(a1 + 312) = v12 + 1;
      v13 = v11 + (float)((float)(v10 - v11) / (float)(v12 + 1));
      *(float *)(a1 + 320) = v13;
      v14 = *(float *)(a1 + 324) + (float)((float)(v10 - v11) * (float)(v10 - v13));
      *(float *)(a1 + 324) = v14;
      v15 = a3[1];
      if (*a3 >= v10)
        v16 = *a3;
      else
        v16 = v10;
      if (*a3 == -1.0)
        v17 = v10;
      else
        v17 = v16;
      if (v10 >= v15)
        v18 = a3[1];
      else
        v18 = v10;
      if (v15 == -1.0)
        v19 = v10;
      else
        v19 = v18;
      *a3 = v17;
      a3[1] = v19;
      a3[2] = v13;
      v20 = 0.0;
      if (v12 + 1 >= 2)
        v20 = v14 / (float)v12;
      a3[3] = sqrtf(v20);
      a3[4] = v17 - v19;
    }
  }
}

__n128 sub_1014CA074@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double v7;
  double v8;
  double v9;
  __n128 v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  __int128 v17;

  v5 = *(double *)a2;
  if (*(double *)a2 == -1.0)
    goto LABEL_7;
  *(double *)(a1 + 504) = v5;
  v7 = (v5 - *(double *)(a1 + 496)) / 60.0;
  *(double *)(a1 + 528) = v7;
  v8 = v5 + *(double *)(a1 + 8) - *(double *)a1;
  v9 = *(double *)a1 == -1.0 ? *(double *)(a1 + 8) : v8;
  *(double *)(a1 + 536) = v7 - v9 / 60.0;
  sub_1014C9C2C(a1, (uint64_t)a2, a1 + 436);
  sub_1014C9F48(a1, (uint64_t)a2, (float *)(a1 + 544));
  sub_1014C9ED8(a1, a2, a1 + 568, v10);
  if (*(double *)a2 < *(double *)(a1 + 496) || *(float *)(a1 + 456) < 0.5)
LABEL_7:
    v11 = 0;
  else
    v11 = 1;
  *(_BYTE *)(a1 + 424) = v11;
  *(_QWORD *)(a3 + 176) = *(_QWORD *)(a1 + 600);
  v12 = *(_OWORD *)(a1 + 568);
  *(_OWORD *)(a3 + 128) = *(_OWORD *)(a1 + 552);
  *(_OWORD *)(a3 + 144) = v12;
  *(_OWORD *)(a3 + 160) = *(_OWORD *)(a1 + 584);
  v13 = *(_OWORD *)(a1 + 504);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 488);
  *(_OWORD *)(a3 + 80) = v13;
  v14 = *(_OWORD *)(a1 + 536);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a1 + 520);
  *(_OWORD *)(a3 + 112) = v14;
  v15 = *(_OWORD *)(a1 + 440);
  *(_OWORD *)a3 = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a3 + 16) = v15;
  result = *(__n128 *)(a1 + 456);
  v17 = *(_OWORD *)(a1 + 472);
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v17;
  return result;
}

void sub_1014CA184(id a1)
{
  qword_10229FFD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

_QWORD *sub_1014CA1B0(_QWORD *result, uint64_t a2)
{
  *result = off_1021BBBF8;
  result[1] = a2;
  return result;
}

void sub_1014CA1C4()
{
  operator delete();
}

uint64_t sub_1014CA244()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1003B55A8(v0, qword_10230F880);
  sub_1003B54C8(v0, (uint64_t)qword_10230F880);
  return Logger.init(subsystem:category:)(0xD00000000000001CLL, 0x80000001019DDA70, 0x6E65534E4F414C43, 0xEA00000000006573);
}

uint64_t sub_1014CA2BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1014CA2E0(a1, &byte_102311440);
}

uint64_t sub_1014CA2E4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x90))();
  *a2 = result;
  return result;
}

uint64_t sub_1014CA324(_QWORD *a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x98);
  v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t sub_1014CA364()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_requester);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_requester, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t sub_1014CA3AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_requester);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

void *sub_1014CA3FC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_requester, a1, 33, 0);
  return &j_j__swift_endAccess;
}

id sub_1014CA440()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CLAONSenseWiFiService()), "init");
  qword_1023140E8 = (uint64_t)result;
  return result;
}

id sub_1014CA470()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

uint64_t *sub_1014CA498()
{
  if (qword_10230F898 != -1)
    swift_once(&qword_10230F898, sub_1014CA440);
  return &qword_1023140E8;
}

id sub_1014CA4D8()
{
  if (qword_10230F898 != -1)
    swift_once(&qword_10230F898, sub_1014CA440);
  return (id)qword_1023140E8;
}

uint64_t sub_1014CA558()
{
  return 0;
}

uint64_t sub_1014CA564@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1014CA5A4(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0xB0);
  swift_bridgeObjectRetain(v3);
  return v4(v2, v3);
}

uint64_t sub_1014CA5F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_desc);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_desc, v4, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1014CA64C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_desc);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

void *sub_1014CA6A8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_desc, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_1014CA6F0@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xC0))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject(&unk_1021BBDE8, 32, 7);
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = sub_1014CC540;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t sub_1014CA76C(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t (*)(uint64_t), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject(&unk_1021BBDC0, 32, 7);
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1014CC510;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((swift_isaMask & **a2) + 0xC8);
  sub_1014CA85C(v3, v4);
  return v7(v6, v5);
}

uint64_t sub_1014CA804()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService__callback);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService__callback, v4, 0, 0);
  v2 = *v1;
  sub_1014CA85C(*v1, v1[1]);
  return v2;
}

uint64_t sub_1014CA85C(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_1014CA86C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService__callback);
  swift_beginAccess(v5, v9, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return sub_1014CA8C8(v6, v7);
}

uint64_t sub_1014CA8C8(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void *sub_1014CA8D8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService__callback, a1, 33, 0);
  return &j_j__swift_endAccess;
}

void sub_1014CA938(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  if (qword_10230F878 != -1)
    swift_once(&qword_10230F878, sub_1014CA244);
  v6 = type metadata accessor for Logger(0);
  sub_1003B54C8(v6, (uint64_t)qword_10230F880);
  v7 = swift_bridgeObjectRetain(a1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(18, -1);
    *(_DWORD *)v10 = 134218240;
    v17 = *(_QWORD *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(a1);
    *(_WORD *)(v10 + 12) = 1024;
    v16 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v10 + 14, v10 + 18);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "AONSense,onALFWiFiNotification,count,%ld,done,%{BOOL}d", (uint8_t *)v10, 0x12u);
    swift_slowDealloc(v10, -1, -1);

    v11 = *(_QWORD *)(a1 + 16);
    if (!v11)
      return;
  }
  else
  {

    swift_bridgeObjectRelease(a1);
    v11 = *(_QWORD *)(a1 + 16);
    if (!v11)
      return;
  }
  v12 = *(void (**)(uint64_t))((swift_isaMask & *v3) + 0xE8);
  v13 = *(_QWORD *)(type metadata accessor for ALWiFiNotification(0) - 8);
  v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  swift_bridgeObjectRetain(a1);
  do
  {
    v12(v14);
    v14 += v15;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease(a1);
}

void sub_1014CAB08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  double v40;
  char v41;
  double v42;
  double Current;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t (*v77)(char *, unint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  double v83;
  _QWORD *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  char v97;
  char *v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  void (*v113)(id);
  uint64_t v114;
  id v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141[12];
  __int128 v142;
  __int128 v143;
  __int128 v144;

  v2 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v131 = *(_QWORD *)(v2 - 8);
  v132 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v116 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ALWiFiNotification(0);
  v120 = *(_QWORD *)(v5 - 8);
  v121 = v5;
  __chkstk_darwin(v5);
  v119 = (char *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v130 = (uint64_t *)((char *)&v116 - v8);
  v9 = sub_1003B54E0(&qword_102300300);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ALTimeStamp(0, v10);
  v123 = *(_QWORD *)(v13 - 8);
  v124 = v13;
  __chkstk_darwin(v13);
  v122 = (char *)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1003B54E0(&qword_102300308);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for ALWiFiScanResult(0, v16);
  v19 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v21 = (char *)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v126 = (char *)&v116 - v24;
  v133 = a1;
  ALWiFiNotification.scanResult.getter(v23);
  v25 = v128;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v128) == 1)
  {
    sub_1003B562C((uint64_t)v18, &qword_102300308);
    if (qword_10230F878 != -1)
      swift_once(&qword_10230F878, sub_1014CA244);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_1003B54C8(v26, (uint64_t)qword_10230F880);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "AONSense,onEachNotfication,ScanResult,nil,return", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

  }
  else
  {
    v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v126, v18, v25);
    ALWiFiNotification.timestamp.getter(v31);
    v33 = v123;
    v32 = v124;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v12, 1, v124) == 1)
    {
      sub_1003B562C((uint64_t)v12, &qword_102300300);
      if (qword_10230F878 != -1)
        swift_once(&qword_10230F878, sub_1014CA244);
      v34 = type metadata accessor for Logger(0);
      v35 = sub_1003B54C8(v34, (uint64_t)qword_10230F880);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "AONSense,onEachNotfication,timestamp,nil,return", v38, 2u);
        swift_slowDealloc(v38, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v19 + 8))(v126, v128);
    }
    else
    {
      v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v122, v12, v32);
      v40 = COERCE_DOUBLE(ALTimeStamp.cfAbsoluteTimeSec.getter(v39));
      if ((v41 & 1) != 0)
        v42 = 0.0;
      else
        v42 = v40;
      Current = CFAbsoluteTimeGetCurrent();
      if (qword_10230F878 != -1)
        swift_once(&qword_10230F878, sub_1014CA244);
      v44 = type metadata accessor for Logger(0);
      v118 = sub_1003B54C8(v44, (uint64_t)qword_10230F880);
      sub_100195F08();
      sub_100195F08();
      sub_100195F08();
      sub_100195F08();
      v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 16))(v21, v126, v128);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(44, -1);
        *(_DWORD *)v48 = 68158720;
        LODWORD(v141[0]) = 2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v141, (char *)v141 + 4, v48 + 4, v48 + 8);
        v48[8] = 0;
        v48[9] = 8;
        v141[0] = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v141, &v141[1], v48 + 10, v48 + 18);
        v48[18] = 16;
        v48[19] = 4;
        LODWORD(v141[0]) = 3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v141, (char *)v141 + 4, v48 + 20, v48 + 24);
        v48[24] = 0;
        v48[25] = 8;
        v141[0] = Current - v42;
        v49 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v141, &v141[1], v48 + 26, v48 + 34);
        v48[34] = 0;
        v48[35] = 8;
        v50 = ALWiFiScanResult.accessPoints.getter(v49);
        v51 = *(double *)(v50 + 16);
        swift_bridgeObjectRelease(v50);
        v116 = *(void (**)(char *, uint64_t))(v19 + 8);
        v116(v21, v128);
        v141[0] = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v141, &v141[1], v48 + 36, v48 + 44);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "AONSense,onEachNotfication,ScanResult,time,%.*f,age,%.*f,aps,%ld", v48, 0x2Cu);
        swift_slowDealloc(v48, -1, -1);
      }
      else
      {
        v116 = *(void (**)(char *, uint64_t))(v19 + 8);
        v116(v21, v128);
      }

      v143 = 0u;
      v144 = 0u;
      v142 = 0u;
      memset(v141, 0, sizeof(v141));
      v52 = sub_1014CC114((uint64_t)v141);
      BYTE8(v144) = ALWiFiNotification.simulated.getter(v52) & 1;
      BYTE9(v144) = ALWiFiNotification.available.getter() & 1;
      v53 = ((uint64_t (*)(void))ALWiFiNotification.associatedMac.getter)();
      if ((v54 & 1) != 0)
      {
        v68 = Logger.logObject.getter(v53);
        v69 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v68, v69))
        {
          v70 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v70 = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "AONSense,associatedState,nil", v70, 2u);
          swift_slowDealloc(v70, -1, -1);
        }

        sub_1014CA2E0(&v139, &byte_102311440);
        v71 = (uint64_t)v125 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
        swift_beginAccess((char *)v125 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState, &v137, 33, 0);
        v72 = sub_100CF1B64(v71);
        sub_1014CC138(v72, (uint64_t)&v139);
        sub_100CF1B64((uint64_t)&v139);
        swift_endAccess(&v137);
      }
      else
      {
        v55 = v53;
        v56 = (uint64_t)v125 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
        swift_beginAccess((char *)v125 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState, &v134, 0, 0);
        sub_1014CA2E0(&v139, v56);
        v57 = sub_1014CC26C(&v139, v55);
        v58 = sub_100CF1B64((uint64_t)&v139);
        if (!v57)
        {
          v59 = nullsub_34(v55);
          sub_1014CC2B8((uint64_t)&v139, v59);
          swift_beginAccess(v56, &v137, 33, 0);
          sub_1014CC268(v56, (uint64_t)&v139);
          v60 = swift_endAccess(&v137);
          v61 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(v120 + 16))(v130, v133, v121, v60);
          v62 = Logger.logObject.getter(v61);
          v63 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v62, v63))
          {
            v64 = (uint8_t *)swift_slowAlloc(12, -1);
            *(_DWORD *)v64 = 134283521;
            v65 = ((uint64_t (*)(void))ALWiFiNotification.associatedMac.getter)();
            if ((v66 & 1) != 0)
              v67 = 0;
            else
              v67 = v65;
            (*(void (**)(uint64_t *, uint64_t))(v120 + 8))(v130, v121);
            *(_QWORD *)&v137 = v67;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, (char *)&v137 + 8, v64 + 4, v64 + 12);
            _os_log_impl((void *)&_mh_execute_header, v62, v63, "AONSense,associatedState,update,%{private}llx", v64, 0xCu);
            swift_slowDealloc(v64, -1, -1);
          }
          else
          {
            (*(void (**)(uint64_t *, uint64_t))(v120 + 8))(v130, v121);
          }

          v58 = sub_100CF1B9C((uint64_t)&v139);
        }
      }
      *((double *)&v142 + 1) = v42;
      v73 = ALWiFiScanResult.accessPoints.getter(v58);
      v117 = v73;
      v74 = *(_QWORD *)(v73 + 16);
      if (v74)
      {
        v127 = (char *)v125 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
        v75 = v132;
        v76 = v73 + ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80));
        v129 = *(_QWORD *)(v131 + 72);
        v130 = (uint64_t *)&v143;
        v77 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v131 + 16);
        do
        {
          v78 = v77(v4, v76, v75);
          v79 = ALWiFiScanSingleAccessPoint.ageSec.getter(v78);
          v80 = ALWiFiScanSingleAccessPoint.mac.getter();
          if ((v81 & 1) != 0)
            v80 = 0;
          v82 = nullsub_34(v80);
          if ((v79 & (unint64_t)&_mh_execute_header) != 0)
            v83 = 0.0;
          else
            v83 = *(float *)&v79;
          v137 = 0uLL;
          v138 = 0;
          v84 = sub_1014CC18C(&v137);
          v85 = ALWiFiScanSingleAccessPoint.rssidB.getter(v84);
          if ((v85 & (unint64_t)&_mh_execute_header) != 0)
            v86 = 0;
          else
            v86 = v85;
          v87 = ALWiFiScanSingleAccessPoint.channel.getter();
          if ((v87 & (unint64_t)&_mh_execute_header) != 0)
            v88 = 0;
          else
            v88 = v87;
          v89 = ALWiFiScanSingleAccessPoint.isAph.getter();
          v90 = ALWiFiScanSingleAccessPoint.isMoving.getter();
          sub_1014CC198((uint64_t)&v139, v82, &v137, v86, 0, v88, v89 & 1, v90 & 1, v83, v42 - v83);
          *(_QWORD *)&v137 = sub_100129380((uint64_t)&v139);
          v91 = sub_100129380((uint64_t)&v137);
          v92 = ((uint64_t (*)(void))ALWiFiNotification.associatedMac.getter)();
          if ((v93 & 1) == 0 && v91 == v92)
          {
            sub_1014CC260((uint64_t)&v139, 1);
            v94 = (uint64_t)v127;
            swift_beginAccess(v127, &v137, 33, 0);
            sub_1014CC268(v94, (uint64_t)&v139);
            swift_endAccess(&v137);
          }
          v95 = CFAbsoluteTimeGetCurrent();
          sub_1014CC1D8((uint64_t)&v139, v95);
          sub_1014CC1E0(v130, (uint64_t)&v139);
          v75 = v132;
          sub_100CF1B9C((uint64_t)&v139);
          (*(void (**)(char *, uint64_t))(v131 + 8))(v4, v75);
          v76 += v129;
          --v74;
        }
        while (v74);
        v73 = v117;
      }
      v96 = swift_bridgeObjectRelease(v73);
      ALWiFiNotification.associatedMac.getter(v96);
      if ((v97 & 1) == 0)
      {
        v98 = (char *)v125 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
        swift_beginAccess((char *)v125 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState, &v135, 0, 0);
        sub_1014CA2E0(&v139, v98);
        LOBYTE(v98) = sub_1014CC240((uint64_t)&v139);
        sub_100CF1B64((uint64_t)&v139);
        if ((v98 & 1) == 0)
        {
          v99 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 16))(v119, v133, v121);
          v100 = Logger.logObject.getter(v99);
          v101 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v100, v101))
          {
            v102 = (uint8_t *)swift_slowAlloc(12, -1);
            *(_DWORD *)v102 = 134283521;
            v103 = ALWiFiNotification.associatedMac.getter(v102);
            if ((v104 & 1) != 0)
              v105 = 0;
            else
              v105 = v103;
            (*(void (**)(char *, uint64_t))(v120 + 8))(v119, v121);
            v139 = v105;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v102 + 4, v102 + 12);
            _os_log_impl((void *)&_mh_execute_header, v100, v101, "The associatedState NOT set though associatedMac is valid %{private}llx", v102, 0xCu);
            swift_slowDealloc(v102, -1, -1);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v120 + 8))(v119, v121);
          }

        }
      }
      v106 = (char *)v125 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
      swift_beginAccess((char *)v125 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState, &v139, 0, 0);
      v107 = sub_100CF1B64((uint64_t)&v141[1]);
      v108 = sub_1014CA2E0(v107, v106);
      v109 = Logger.logObject.getter(v108);
      v110 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v109, v110))
      {
        v111 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v111 = 134217984;
        swift_beginAccess(v141, &v136, 0, 0);
        *(_QWORD *)&v137 = sub_1014CC21C(&v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, (char *)&v137 + 8, v111 + 4, v111 + 12);
        _os_log_impl((void *)&_mh_execute_header, v109, v110, "AONSense,onEachNotfication,data.scan.size,%ld", v111, 0xCu);
        swift_slowDealloc(v111, -1, -1);
      }

      v113 = (void (*)(id))(*(uint64_t (**)(void))((swift_isaMask & *v125) + 0xC0))();
      if (v113)
      {
        v114 = v112;
        v115 = objc_msgSend(objc_allocWithZone((Class)CLAONSenseWiFiNotification), "init");
        swift_beginAccess(v141, &v137, 1, 0);
        objc_msgSend(v115, "setData:", v141);
        v113(v115);
        sub_1014CA8C8((uint64_t)v113, v114);

      }
      (*(void (**)(char *, uint64_t))(v123 + 8))(v122, v124);
      v116(v126, v128);
      sub_1005B5FEC((uint64_t)v141);
    }
  }
}

void sub_1014CB874(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x1014CB87CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1014CB908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  double v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  __int128 v18;
  uint64_t v19;

  v5 = ALWiFiScanSingleAccessPoint.ageSec.getter(a1);
  v6 = ALWiFiScanSingleAccessPoint.mac.getter();
  if ((v7 & 1) != 0)
    v6 = 0;
  v8 = nullsub_34(v6);
  if ((v5 & (unint64_t)&_mh_execute_header) != 0)
    v9 = 0.0;
  else
    v9 = *(float *)&v5;
  v18 = 0uLL;
  v19 = 0;
  v10 = sub_1014CC18C(&v18);
  v11 = ALWiFiScanSingleAccessPoint.rssidB.getter(v10);
  if ((v11 & (unint64_t)&_mh_execute_header) != 0)
    v12 = 0;
  else
    v12 = v11;
  v13 = ALWiFiScanSingleAccessPoint.channel.getter();
  if ((v13 & (unint64_t)&_mh_execute_header) != 0)
    v14 = 0;
  else
    v14 = v13;
  v15 = ALWiFiScanSingleAccessPoint.isAph.getter();
  v16 = ALWiFiScanSingleAccessPoint.isMoving.getter();
  return sub_1014CC198(a2, v8, &v18, v12, 0, v14, v15 & 1, v16 & 1, v9, a3 - v9);
}

uint64_t sub_1014CB9E0(void *a1, float a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;

  v4 = sub_1003B54E0(&qword_102300318);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ALResultOptions(0, v5);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v12 = 0;
  sub_1014CBE78(a1, v9, LODWORD(a2));
  return sub_1003B562C((uint64_t)v7, &qword_102300318);
}

uint64_t sub_1014CBBF0(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double (*v10)(uint64_t, uint64_t);
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;

  v7 = sub_1003B54E0(&qword_102300318);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(double (**)(uint64_t, uint64_t))((swift_isaMask & *v3) + 0xC8);
  swift_retain(a3);
  v11 = v10(a2, a3);
  v12 = type metadata accessor for ALResultOptions(0, v11);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
  v16 = 1;
  sub_1014CBE78(a1, v13, 0x100000000uLL);
  return sub_1003B562C((uint64_t)v9, &qword_102300318);
}

uint64_t sub_1014CBE78(void *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  void *v4;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v4 = v3;
  v7 = *(uint64_t (**)(void))((swift_isaMask & *v3) + 0x90);
  v8 = v7();
  if (!v8)
  {
    v9 = type metadata accessor for ALFWiFiScanResultsRequester();
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v8 = ALFWiFiScanResultsRequester.init(queue:)(a1);
  }
  v10 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0x98))(v8);
  result = ((uint64_t (*)(uint64_t))v7)(v10);
  if (result)
  {
    v12 = result;
    v13 = swift_allocObject(&unk_1021BBE10, 24, 7);
    *(_QWORD *)(v13 + 16) = v4;
    v14 = v4;
    dispatch thunk of ALFWiFiScanResultsRequester.register(callback:intervalSec:)(sub_1014CC588, v13, a3 | ((HIDWORD(a3) & 1) << 32));
    swift_release(v12);
    return swift_release(v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1014CBF74()
{
  char *v0;
  char *v1;
  char *v2;
  objc_class *v3;
  objc_super v5;

  sub_1014CA2E0(&v0[OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState], &byte_102311440);
  *(_QWORD *)&v0[OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_requester] = 0;
  v1 = &v0[OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_desc];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v2 = &v0[OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService__callback];
  v3 = (objc_class *)type metadata accessor for CLAONSenseWiFiService();
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v5.receiver = v0;
  v5.super_class = v3;
  return objc_msgSendSuper2(&v5, "init");
}

id sub_1014CC080()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CLAONSenseWiFiService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

double sub_1014CC114(uint64_t a1)
{
  double result;

  *(_WORD *)a1 = -256;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  return result;
}

__n128 sub_1014CC138(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v2 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v2;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    result = *(__n128 *)(a2 + 32);
    v4 = *(_OWORD *)(a2 + 48);
    v5 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v4;
    *(_OWORD *)(a1 + 64) = v5;
    *(__n128 *)(a1 + 32) = result;
    *(_BYTE *)(a1 + 88) = 1;
  }
  return result;
}

_QWORD *sub_1014CC18C(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t sub_1014CC198(uint64_t result, uint64_t a2, __int128 *a3, int a4, int a5, int a6, char a7, char a8, double a9, double a10)
{
  __int128 v10;

  *(_QWORD *)result = a2;
  v10 = *a3;
  *(_QWORD *)(result + 24) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 8) = v10;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(result + 32) = a4;
  *(_DWORD *)(result + 36) = a5;
  *(_DWORD *)(result + 40) = a6;
  *(double *)(result + 48) = a9;
  *(double *)(result + 56) = a10;
  *(_BYTE *)(result + 64) = a7;
  *(_BYTE *)(result + 65) = a8;
  *(_DWORD *)(result + 68) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  return result;
}

uint64_t sub_1014CC1D8(uint64_t result, double a2)
{
  *(double *)(result + 80) = a2;
  return result;
}

uint64_t sub_1014CC1E0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = sub_100279DEC(a1, a2);
  }
  else
  {
    sub_100279D64((uint64_t)a1, a2);
    result = v3 + 88;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_1014CC21C(_QWORD *a1)
{
  return 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[1] - *a1) >> 3);
}

BOOL sub_1014CC240(uint64_t a1)
{
  return *(_BYTE *)(a1 + 88) && *(_DWORD *)(a1 + 40) > 0;
}

uint64_t sub_1014CC260(uint64_t result, char a2)
{
  *(_BYTE *)(result + 72) = a2;
  return result;
}

BOOL sub_1014CC26C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  if (!*((_BYTE *)a1 + 88))
    return 0;
  v3 = *a1;
  return sub_100129380((uint64_t)&v3) == a2;
}

uint64_t sub_1014CC2B8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 9999;
  *(_BYTE *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  return result;
}

uint64_t type metadata accessor for CLAONSenseWiFiService()
{
  return objc_opt_self(_TtC10CLAONSense21CLAONSenseWiFiService);
}

void type metadata accessor for CLWifiService_Type(uint64_t a1)
{
  sub_1014CC460(a1, &qword_102300348, (uint64_t)&unk_1021BBD00);
}

uint64_t sub_1014CC308(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_1014CC33C(uint64_t a1, uint64_t a2)
{
  return sub_1014CA2E0(a1, a2);
}

uint64_t sub_1014CC354(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_100CF1B64(a1);
  return sub_1014CA2E0(v3, a2);
}

uint64_t sub_1014CC380(uint64_t a1, uint64_t a2)
{
  sub_1014CC138(a1, a2);
  sub_100CF1B64(a2);
  return a1;
}

uint64_t sub_1014CC3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100CF1B64(a1);
  sub_1014CC138(v4, a2);
  sub_100CF1B64(a2);
  return a1;
}

uint64_t sub_1014CC3E8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1014CC408(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 96) = v3;
  return result;
}

void type metadata accessor for CLWifiService_Type.AssociationState(uint64_t a1)
{
  sub_1014CC460(a1, &qword_102300350, (uint64_t)&unk_1021BBD78);
}

void sub_1014CC460(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1014CC4A4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1014CC4C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1014CC4EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1014CC510(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_1014CC540(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_1014CC564()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1014CC588()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(v0 + 16)) + 0xE0))();
}

void sub_1014CC608(id a1)
{
  const void *v1;
  const void *v2;

  v1 = (const void *)MGCopyAnswer(CFSTR("InternalBuild"), 0);
  if (v1)
  {
    v2 = v1;
    if (CFEqual(v1, kCFBooleanTrue))
      byte_10230F8A0 = 1;
    CFRelease(v2);
  }
}

void sub_1014CC6A8(id a1)
{
  const void *v1;
  const void *v2;

  v1 = (const void *)MGCopyAnswer(CFSTR("DeviceClass"), 0);
  if (v1)
  {
    v2 = v1;
    if (CFEqual(v1, CFSTR("iPhone")))
      byte_10230F8B0 = 1;
    CFRelease(v2);
  }
}

void sub_1014CC744(id a1)
{
  const void *v1;
  const __CFString *Value;
  const void *v3;
  const __CFString *v4;
  const __CFString *v5;
  CFTypeID v6;
  CFTypeID v7;
  CFTypeID v8;
  const __CFString *v9;

  v1 = (const void *)_CFCopyServerVersionDictionary(a1);
  if (v1 || (v1 = (const void *)_CFCopySystemVersionDictionary()) != 0)
  {
    CFRelease(v1);
    Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v1, _kCFSystemVersionProductNameKey);
    v3 = (const void *)_kCFSystemVersionProductVersionKey;
    v4 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v1, _kCFSystemVersionProductVersionKey);
    v5 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v1, v3);
    if (!Value || (v6 = CFGetTypeID(Value), v6 != CFStringGetTypeID()))
      Value = CFSTR("<name>");
    if (!v4 || (v7 = CFGetTypeID(v4), v7 != CFStringGetTypeID()))
      v4 = CFSTR("<version>");
    v8 = CFGetTypeID(v5);
    if (v8 != CFStringGetTypeID())
      v5 = CFSTR("<build>");
    v9 = (const __CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@%@/%@"), Value, v4, v5);
  }
  else
  {
    v9 = CFSTR("<null>");
  }
  qword_10230F8C0 = (uint64_t)v9;
}

void sub_1014CC8AC(id a1)
{
  const __CFString *v1;
  size_t v2;
  _BYTE v3[128];

  v2 = 128;
  if (sysctlbyname("hw.model", v3, &v2, 0, 0))
    v1 = CFSTR("<unknown>");
  else
    v1 = (const __CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithCString:encoding:", v3, 4);
  qword_10230F8D0 = (uint64_t)v1;
}

id sub_1014CCB94(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onStopActiveLocationRequestTimerExpiry");
}

void sub_1014CCFC0(uint64_t a1, void *a2, void *a3)
{
  NSDate *v6;
  id v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  double v14;
  NSObject *v15;
  const char *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  _QWORD v28[4];
  __int128 v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  id buf;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  const char *v46;

  v6 = +[NSDate date](NSDate, "date");
  if (a3)
  {
    v7 = objc_msgSend(a3, "domain");
    if (objc_msgSend(v7, "isEqualToString:", kCLErrorDomainPrivate) && objc_msgSend(a3, "code") == (id)5)
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BBF20);
      v8 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
      {
        buf = (id)68289282;
        v35 = 2082;
        v36 = "";
        v37 = 2114;
        v38 = (const char *)a3;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate is disabled\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
      }
      objc_msgSend(*(id *)(a1 + 32), "fetchCurrentLocationWithHandler:", *(_QWORD *)(a1 + 56));
      goto LABEL_23;
    }
    v9 = objc_msgSend(a3, "domain");
    if (objc_msgSend(v9, "isEqualToString:", RTErrorDomain))
    {
      if (objc_msgSend(a3, "code") == (id)5)
      {
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021BBF20);
        v10 = qword_1022A0038;
        if (!os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
          goto LABEL_30;
        buf = (id)68289282;
        v35 = 2082;
        v36 = "";
        v37 = 2114;
        v38 = (const char *)a3;
        v11 = "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, location is not available, request "
              "new locations\", \"error\":%{public, location:escape_only}@}";
        goto LABEL_29;
      }
      if (objc_msgSend(a3, "code") == (id)6)
      {
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021BBF20);
        v10 = qword_1022A0038;
        if (!os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
          goto LABEL_30;
        buf = (id)68289282;
        v35 = 2082;
        v36 = "";
        v37 = 2114;
        v38 = (const char *)a3;
        v11 = "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, location estimation failed, request"
              " new locations\", \"error\":%{public, location:escape_only}@}";
LABEL_29:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&buf, 0x1Cu);
        goto LABEL_30;
      }
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BBF20);
      v26 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
      {
        buf = (id)68289282;
        v35 = 2082;
        v36 = "";
        v37 = 2114;
        v38 = (const char *)a3;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, error occurred.\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021BBF20);
      }
      v27 = qword_1022A0038;
      if (os_signpost_enabled((os_log_t)qword_1022A0038))
      {
        buf = (id)68289282;
        v35 = 2082;
        v36 = "";
        v37 = 2114;
        v38 = (const char *)a3;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #location fetchEstimatedLocationAtDate, error occurred.", "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, error occurred.\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
      }
    }
    else
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BBF20);
      v12 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
      {
        buf = (id)68289282;
        v35 = 2082;
        v36 = "";
        v37 = 2114;
        v38 = (const char *)a3;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, error occurred.\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021BBF20);
      }
      v13 = qword_1022A0038;
      if (os_signpost_enabled((os_log_t)qword_1022A0038))
      {
        buf = (id)68289282;
        v35 = 2082;
        v36 = "";
        v37 = 2114;
        v38 = (const char *)a3;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #location fetchEstimatedLocationAtDate, error occurred.", "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, error occurred.\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
LABEL_23:
    objc_msgSend(*(id *)(a1 + 32), "sendEstimatedLocationMetricsAtFirstAttemptForEstimatedLocation:estimationError:timeOfInterest:referenceTime:responseTime:", 0, a3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v6);
    return;
  }
LABEL_30:
  if (a2 && (objc_msgSend(a2, "horizontalAccuracy"), v14 < 15.0))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BBF20);
    v15 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v16 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", *(_QWORD *)(a1 + 40), 1, 4), "UTF8String");
      objc_msgSend(a2, "coordinate");
      v18 = v17;
      objc_msgSend(a2, "coordinate");
      v20 = v19;
      objc_msgSend(a2, "horizontalAccuracy");
      v22 = v21;
      v23 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", objc_msgSend(a2, "timestamp"), 1, 4), "UTF8String");
      buf = (id)68290307;
      v35 = 2082;
      v36 = "";
      v37 = 2082;
      v38 = v16;
      v39 = 1025;
      v40 = (int)v18;
      v41 = 1025;
      v42 = (int)v20;
      v43 = 2050;
      v44 = v22;
      v45 = 2082;
      v46 = v23;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, an estimated location\", \"date\":%{public, location:escape_only}s, \"lat\":%{private}d, \"lon\":%{private}d, \"accuracy\":\"%{public}f\", \"loc.date\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x3Cu);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    objc_msgSend(*(id *)(a1 + 32), "sendEstimatedLocationMetricsAtFirstAttemptForEstimatedLocation:estimationError:timeOfInterest:referenceTime:responseTime:", a2, 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v6);
  }
  else
  {
    objc_initWeak(&buf, *(id *)(a1 + 32));
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_1014CD72C;
    v28[3] = &unk_1021BBED8;
    objc_copyWeak(&v33, &buf);
    v25 = *(_QWORD *)(a1 + 48);
    v24 = *(_QWORD *)(a1 + 56);
    v31 = a2;
    v32 = v24;
    v29 = *(_OWORD *)(a1 + 32);
    v30 = v25;
    objc_msgSend((id)v29, "fetchCurrentLocationWithHandler:", v28);
    objc_destroyWeak(&v33);
    objc_destroyWeak(&buf);
  }
}

void sub_1014CD708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1014CD72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSDate *v6;
  NSObject *v7;
  uint64_t v8;
  NSDate *v9;
  NSObject *v10;
  uint64_t buf;
  __int16 v12;
  const char *v13;
  NSErrorUserInfoKey v14;
  const __CFString *v15;

  if (objc_loadWeak((id *)(a1 + 72)))
  {
    v6 = +[NSDate date](NSDate, "date");
    if (a2)
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BBF20);
      v7 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
      {
        buf = 68289026;
        v12 = 2082;
        v13 = "";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate new location arrives\"}", (uint8_t *)&buf, 0x12u);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "fetchEstimatedLocationAtDate:withReply:");
    }
    else
    {
      v9 = v6;
      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
      objc_msgSend(*(id *)(a1 + 32), "sendEstimatedLocationMetricsAfterLocationScanWithFirstEstimatedLocation:newLocation:secondEstimatedLocation:error:timeOfInterest:referenceTime:responseTime:", 0, 0, 0, a3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v9);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BBF20);
      v10 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
      {
        buf = 68289026;
        v12 = 2082;
        v13 = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate no location arrives\"}", (uint8_t *)&buf, 0x12u);
      }
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 64);
    v14 = NSLocalizedDescriptionKey;
    v15 = CFSTR("DurianLocationMonitor is invalidated");
    (*(void (**)(uint64_t, _QWORD, NSError *))(v8 + 16))(v8, 0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1)));
  }
}

id sub_1014CD9C0(uint64_t a1, void *a2, const char *a3)
{
  NSDate *v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  double v10;
  int v11;
  double v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  void (*v17)(void);
  NSObject *v18;
  const char *v19;
  double v20;
  int v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  const char *v41;

  v6 = +[NSDate date](NSDate, "date");
  if (a3)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BBF20);
    v7 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2114;
      v33 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate with fresh locations\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  if (a2)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BBF20);
    v8 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v9 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", *(_QWORD *)(a1 + 32), 1, 4), "UTF8String");
      objc_msgSend(a2, "coordinate");
      v11 = (int)v10;
      objc_msgSend(a2, "coordinate");
      v13 = (int)v12;
      objc_msgSend(a2, "horizontalAccuracy");
      v15 = v14;
      v16 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", objc_msgSend(a2, "timestamp"), 1, 4), "UTF8String");
      *(_DWORD *)buf = 68290307;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2082;
      v33 = v9;
      v34 = 1025;
      v35 = v11;
      v36 = 1025;
      v37 = v13;
      v38 = 2050;
      v39 = v15;
      v40 = 2082;
      v41 = v16;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, an estimated location with fresh locations\", \"date\":%{public, location:escape_only}s, \"lat\":%{private}d, \"lon\":%{private}d, \"accuracy\":\"%{public}f\", \"loc.date\":%{public, location:escape_only}s}", buf, 0x3Cu);
    }
    v17 = *(void (**)(void))(*(_QWORD *)(a1 + 72) + 16);
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BBF20);
    v18 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v19 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", *(_QWORD *)(a1 + 32), 1, 4), "UTF8String");
      objc_msgSend(*(id *)(a1 + 40), "coordinate");
      v21 = (int)v20;
      objc_msgSend(*(id *)(a1 + 40), "coordinate");
      v23 = (int)v22;
      objc_msgSend(*(id *)(a1 + 40), "horizontalAccuracy");
      v25 = v24;
      v26 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", objc_msgSend(*(id *)(a1 + 40), "timestamp"), 1, 4), "UTF8String");
      *(_DWORD *)buf = 68290307;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2082;
      v33 = v19;
      v34 = 1025;
      v35 = v21;
      v36 = 1025;
      v37 = v23;
      v38 = 2050;
      v39 = v25;
      v40 = 2082;
      v41 = v26;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate with fresh locations\", \"date\":%{public, location:escape_only}s, \"lat\":%{private}d, \"lon\":%{private}d, \"accuracy\":\"%{public}f\", \"loc.date\":%{public, location:escape_only}s}", buf, 0x3Cu);
    }
    v17 = *(void (**)(void))(*(_QWORD *)(a1 + 72) + 16);
  }
  v17();
  return objc_msgSend(*(id *)(a1 + 48), "sendEstimatedLocationMetricsAfterLocationScanWithFirstEstimatedLocation:newLocation:secondEstimatedLocation:error:timeOfInterest:referenceTime:responseTime:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), a2, a3, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64), v6);
}

void sub_1014CEE24(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1014D1770(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1014D2948(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1014D2A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

void sub_1014D2CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a9;
  sub_100259608(&a16);
  sub_10011A5A8(&a12);
  _Unwind_Resume(a1);
}

void sub_1014D2EF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10011A5A8(v1);
  _Unwind_Resume(a1);
}

void sub_1014D33E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1014D3420(uint64_t a1, unsigned int *a2, _QWORD *a3, void *a4)
{
  return _objc_msgSend(a4, "onDataProtectionNotification:data:", *a2, *a3);
}

void sub_1014D4F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_10011A5A8(&a9);
  sub_10011A5A8(&a11);
  sub_10011A5A8(&a13);
  _Unwind_Resume(a1);
}

void sub_1014D54C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a16;
  sub_100259608(&a21);
  sub_10011A5A8(&a19);
  _Unwind_Resume(a1);
}

void sub_1014D5868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

void sub_1014D5E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a16;
  sub_100259608(&a21);
  sub_10011A5A8(&a19);
  _Unwind_Resume(a1);
}

id sub_1014D6004(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onAnalyticsTimerFired:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
}

id sub_1014D674C(uint64_t a1, uint64_t a2)
{
  id v4;
  __int128 v5;
  _QWORD v7[5];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo");
  v7[1] = 3221225472;
  v5 = *(_OWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[2] = sub_1014D67DC;
  v7[3] = &unk_1021BBF88;
  v7[4] = a2;
  v8 = v5;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  return objc_msgSend(v4, "async:", v7);
}

void sub_1014D67DC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSDictionary *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16[8];
  _QWORD v17[8];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  id v25;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BBFD0);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "type"), "UTF8String");
    *(_DWORD *)buf = 68289539;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2049;
    v23 = v3;
    v24 = 2081;
    v25 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#rwl, send item metrics\", \"index\":%{private}ld, \"beaconType\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  v5 = *(void **)(a1 + 32);
  if (v5)
  {
    v6 = objc_msgSend(v5, "type");
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BBFD0);
    v6 = (id)SPBeaconTypeNone;
    v7 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#rwl, send metrics, unable to retrieve beacon information\"}", buf, 0x12u);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BBFD0);
    }
    v8 = qword_1022A0038;
    if (os_signpost_enabled((os_log_t)qword_1022A0038))
    {
      *(_DWORD *)buf = 68289026;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#rwl, send metrics, unable to retrieve beacon information", "{\"msg%{public}.0s\":\"#rwl, send metrics, unable to retrieve beacon information\"}", buf, 0x12u);
    }
  }
  v17[0] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 40), "decimateInteger:", *(_QWORD *)(a1 + 64), CFSTR("DurationBinned")));
  v16[1] = CFSTR("TransitsBinned");
  v17[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 40), "decimateInteger:", objc_msgSend(*(id *)(a1 + 48), "deviceJourneyCount")));
  v17[2] = CFSTR("Work");
  v16[2] = CFSTR("LOIType");
  v16[3] = CFSTR("ModelType");
  v17[3] = CFSTR("Commute");
  v17[4] = v6;
  v16[4] = CFSTR("ItemType");
  v16[5] = CFSTR("Priority");
  objc_msgSend(*(id *)(a1 + 40), "decimateDoulbe:", *(double *)(a1 + 72));
  v17[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v16[6] = CFSTR("PriorityBinned");
  v17[6] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 80));
  v16[7] = CFSTR("ParityRate");
  objc_msgSend(*(id *)(a1 + 40), "decimateDoulbe:", *(double *)(a1 + 88));
  v17[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v9 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 8);
  AnalyticsSendEvent((CLDurianLocationMonitor *)CFSTR("com.apple.locationd.moondragon.parityrate"), (SEL)v9, v10, v11, v12, v13, v14, v15, v16[0]);
}

void sub_1014D6BBC(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

id sub_1014D6CDC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_checkAudioStreamState");
}

id sub_1014D737C(uint64_t a1, unsigned int *a2, __int128 *a3, void *a4)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v4 = *a2;
  v6 = *a3;
  v7 = *((_QWORD *)a3 + 2);
  return objc_msgSend(a4, "_onDaemonStatusNotification:data:", v4, &v6);
}

void sub_1014D73B8(uint64_t a1, unsigned int *a2, __int16 *a3, void *a4)
{
  uint64_t v6;
  __int16 v7;
  _BYTE v8[8];
  void *__p;
  char v10;
  char v11;
  uint64_t v12;
  _QWORD v13[4];
  void **v14;

  v6 = *a2;
  v7 = *a3;
  sub_10031F08C(v8, (uint64_t)(a3 + 4));
  v12 = *((_QWORD *)a3 + 13);
  memset(v13, 0, 24);
  sub_10055A7B8(v13, *((_QWORD *)a3 + 14), *((_QWORD *)a3 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a3 + 15) - *((_QWORD *)a3 + 14)) >> 3));
  v13[3] = *((_QWORD *)a3 + 17);
  objc_msgSend(a4, "_onWifiServiceNotification:data:", v6, &v7);
  v14 = (void **)v13;
  sub_100279AA4(&v14);
  if (v11)
  {
    if (v10 < 0)
      operator delete(__p);
  }
}

void sub_1014D747C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_1005B5FEC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

id sub_1014D74B0(uint64_t a1, unsigned int *a2, _QWORD *a3, void *a4)
{
  return _objc_msgSend(a4, "_onDataProtectionNotification:data:", *a2, *a3);
}

id sub_1014D74C4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_checkAudioStreamState");
}

void sub_1014D74D0(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  _BYTE v7[8];
  uint64_t v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  uint64_t v15;
  int v16;

  v6 = *a2;
  v7[0] = *(_BYTE *)a3;
  sub_100985590((uint64_t)&v8, a3 + 8);
  v15 = *(_QWORD *)(a3 + 112);
  v16 = *(_DWORD *)(a3 + 120);
  objc_msgSend(a4, "_onBluetoothServiceNotification:data:", v6, v7);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
}

void sub_1014D756C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100985540((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1014D8134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD block[7];

  v6 = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1014D81B8;
  block[3] = &unk_10212BBA8;
  block[4] = a3;
  block[5] = a2;
  block[6] = *(_QWORD *)(a1 + 32);
  dispatch_async(v6, block);
}

void sub_1014D81B8(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  id v6;
  void *v7;
  double v8;
  id v9;
  NSObject *v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  id v16;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BC018);
    v2 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
    {
      v3 = *(void **)(a1 + 32);
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2114;
      v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #system fail to fetch visits\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BC018);
    }
    v4 = qword_1022A0038;
    if (os_signpost_enabled((os_log_t)qword_1022A0038))
    {
      v5 = *(void **)(a1 + 32);
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2114;
      v16 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #system fail to fetch visits", "{\"msg%{public}.0s\":\"#durian #system fail to fetch visits\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
    }
  }
  else
  {
    v6 = objc_msgSend(*(id *)(a1 + 40), "firstObject");
    if (v6)
    {
      v7 = v6;
      if (objc_msgSend(v6, "entry"))
      {
        -[NSDate timeIntervalSinceDate:](+[NSDate now](NSDate, "now"), "timeIntervalSinceDate:", objc_msgSend(v7, "entry"));
        if (v8 > 0.0)
        {
          if (objc_msgSend(v7, "location"))
          {
            v9 = objc_msgSend(objc_alloc((Class)CLVisit), "initWithVisit:", v7);
            if (qword_1022A0030 != -1)
              dispatch_once(&qword_1022A0030, &stru_1021BC018);
            v10 = qword_1022A0038;
            if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
            {
              v11 = 68289283;
              v12 = 0;
              v13 = 2082;
              v14 = "";
              v15 = 2113;
              v16 = v9;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #system fetched most recent visit\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
            }
            objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "delegate"), "updateSystemLoiType:isEntry:", objc_msgSend(objc_msgSend(v9, "_placeInference"), "userType"), objc_msgSend(v9, "hasDepartureDate") ^ 1);

          }
        }
      }
    }
  }
}

id sub_1014D8750(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  return _objc_msgSend(*(id *)(a1 + 32), "onVehicleStateNotification");
}

void sub_1014D8848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1014D8860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC018);
  v8 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349568;
    v22 = a2;
    v23 = 2050;
    v24 = a3;
    v25 = 2050;
    v26 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#durian received vehicle state notification - state %{public}lu; hints %{public}lu; operator state %{public}lu",
      buf,
      0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BC018);
    v15 = 134349568;
    v16 = a2;
    v17 = 2050;
    v18 = a3;
    v19 = 2050;
    v20 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 0, "#durian received vehicle state notification - state %{public}lu; hints %{public}lu; operator state %{public}lu",
      &v15,
      32);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "-[CLDurianSystemMonitor onVehicleStateNotification]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (a3 == 16)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BC018);
    v9 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#durian attempting to call into durian service to handle vehicular state", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BC018);
      LOWORD(v15) = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 0, "#durian attempting to call into durian service to handle vehicular state", &v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "-[CLDurianSystemMonitor onVehicleStateNotification]_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "delegate"), "onVehicularState");
  }
}

void sub_1014D8C68(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1014D8D88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

uint64_t sub_1014D8E90(float a1)
{
  double v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t result;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  double v10;

  v1 = a1;
  if (a1 <= 997.05)
    return 0;
  if (v1 <= 1991.55)
    return 1;
  if (a1 <= 3978.0)
    return 2;
  if (a1 <= 7981.5)
    return 3;
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC058);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
  {
    v5 = 68289283;
    v6 = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2049;
    v10 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian invalid Slope Mode Threshold raw value\", \"rawValue\":\"%{private}f\"}", (uint8_t *)&v5, 0x1Cu);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BC058);
  }
  v3 = qword_1022A0038;
  result = os_signpost_enabled((os_log_t)qword_1022A0038);
  if ((_DWORD)result)
  {
    v5 = 68289283;
    v6 = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2049;
    v10 = v1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian invalid Slope Mode Threshold raw value", "{\"msg%{public}.0s\":\"#durian invalid Slope Mode Threshold raw value\", \"rawValue\":\"%{private}f\"}", (uint8_t *)&v5, 0x1Cu);
    return 0;
  }
  return result;
}

uint64_t sub_1014D9078(float a1)
{
  return (int)(a1 / dbl_101CC5BF0[sub_1014D8E90(a1)]);
}

void sub_1014D90B0(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1014D9368(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

id sub_1014D9430(uint64_t a1, void *a2)
{
  id v4;
  _QWORD v6[5];
  id v7;

  v7 = +[RBSProcessPredicate predicateMatchingBundleIdentifier:](RBSProcessPredicate, "predicateMatchingBundleIdentifier:", CFSTR("com.apple.findmy"));
  objc_msgSend(a2, "setPredicates:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
  v4 = objc_alloc_init((Class)RBSProcessStateDescriptor);
  objc_msgSend(v4, "setValues:", 1);
  objc_msgSend(a2, "setStateDescriptor:", v4);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10020FD60;
  v6[3] = &unk_1021BC0A0;
  v6[4] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(a2, "setUpdateHandler:", v6);
}

void sub_1014D9590(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

const __CFString *sub_1014D95BC(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("<Invalid>");
  if (a1 == 2)
    v1 = CFSTR("Secondary");
  if (a1 == 1)
    return CFSTR("Primary");
  else
    return v1;
}

const __CFString *sub_1014D95E8(unsigned int a1)
{
  if (a1 > 2)
    return CFSTR("<Invalid>");
  else
    return off_1021BC298[(char)a1];
}

void sub_1014D99F8(id a1)
{
  qword_10230F8E0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLDurianServiceSilo"));
}

void sub_1014D9A70(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t *v8;
  _QWORD v9[2];
  uint8_t buf[1640];

  if (!objc_opt_class(ACAccountStore, v1))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BC278);
    v6 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "DurianService: not supported on this platform because Accounts.framework is not present", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BC278);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 0, "DurianService: not supported on this platform because Accounts.framework is not present", v9, 2, v9[0]);
    goto LABEL_30;
  }
  if (!objc_opt_class(RadiosPreferences, v2))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BC278);
    v7 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DurianService: not supported on this platform because AppSupport.framework is not present", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BC278);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 0, "DurianService: not supported on this platform because AppSupport.framework is not present", v9, 2, v9[0]);
    goto LABEL_30;
  }
  if (objc_opt_class(SPOwnerSession, v3))
    return;
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC278);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "DurianService: not supported on this platform because SPOwner.framework is not present", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BC278);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 0, "DurianService: not supported on this platform because SPOwner.framework is not present", v9, 2, v9[0]);
LABEL_30:
    v8 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "+[CLDurianService isSupported]_block_invoke", "%s\n", v5);
    if (v8 != buf)
      free(v8);
  }
LABEL_25:
  byte_10230F8F0 = 1;
}

id sub_1014DA63C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "findMyAppDidBackgroundOrExit");
}

id sub_1014DA644(uint64_t a1)
{
  NSObject *v2;
  id result;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC278);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#hawkeye #firmwareUpdate stopping UARP Packet Capture - by user\"}", (uint8_t *)v4, 0x12u);
  }
  result = (id)+[CLDurianSettings uarpPacketCaptureEnabled](CLDurianSettings, "uarpPacketCaptureEnabled");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "stopPacketCapture");
  return result;
}

void sub_1014E8AA0(id a1, BOOL a2)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
  {
    v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2)
      sub_1014EFC3C(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_1014E9058(id a1, BOOL a2)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
  {
    v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2)
      sub_1014EFC3C(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_1014E9C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_1014E9CE8(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  if (result[4] == a3)
  {
    v4 = result;
    objc_msgSend(*(id *)(*(_QWORD *)(result[6] + 8) + 40), "addObject:", a2);
    return objc_msgSend(objc_msgSend(*(id *)(v4[5] + 80), "objectForKey:", a2), "cancel");
  }
  return result;
}

void sub_1014E9F04(id a1)
{
  NSObject *v1;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC278);
  v1 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    v3 = 2082;
    v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian fetched beacons after first unlock\"}", (uint8_t *)v2, 0x12u);
  }
}

id sub_1014EB3D4(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  id v7;
  NSErrorUserInfoKey v8;
  const __CFString *v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  id v15;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC278);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289283;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2113;
    v15 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "uuid"), "description"), "substringToIndex:", 8);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #hawkeye starting serial number task\", \"item\":%{private, location:escape_only}@}", buf, 0x1Cu);
  }
  v5 = objc_msgSend(a2, "createFetchAISSerialNumberTask");
  if (v5)
    return objc_msgSend(*(id *)(a1 + 32), "performTask:forClient:onDevice:", v5, *(_QWORD *)(a1 + 40), a2);
  v7 = objc_alloc((Class)NSError);
  v8 = NSLocalizedDescriptionKey;
  v9 = CFSTR("Not supported for this device type");
  return objc_msgSend(*(id *)(a1 + 40), "didFetchHawkeyeSerialNumberFromDevice:serialNumber:error:", *(_QWORD *)(a1 + 48), +[NSData data](NSData, "data"), objc_msgSend(v7, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1)));
}

id sub_1014EB6C4(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  id v7;
  NSErrorUserInfoKey v8;
  const __CFString *v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  id v15;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC278);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289283;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2113;
    v15 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "uuid"), "description"), "substringToIndex:", 8);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #hawkeye starting current primary key task\", \"item\":%{private, location:escape_only}@}", buf, 0x1Cu);
  }
  v5 = objc_msgSend(a2, "createFetchCurrentPrimaryKeyTask");
  if (v5)
    return objc_msgSend(*(id *)(a1 + 32), "performTask:forClient:onDevice:", v5, *(_QWORD *)(a1 + 40), a2);
  v7 = objc_alloc((Class)NSError);
  v8 = NSLocalizedDescriptionKey;
  v9 = CFSTR("Not supported for this device type");
  return objc_msgSend(*(id *)(a1 + 40), "didFetchHawkeyeSerialNumberFromDevice:serialNumber:error:", *(_QWORD *)(a1 + 48), +[NSData data](NSData, "data"), objc_msgSend(v7, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1)));
}

id sub_1014EB9C4(uint64_t a1, void *a2)
{
  id v4;
  id v6;
  NSErrorUserInfoKey v7;
  const __CFString *v8;

  v4 = objc_msgSend(a2, "createFetchiCloudIdentifierTask");
  if (v4)
    return objc_msgSend(*(id *)(a1 + 32), "performTask:forClient:onDevice:", v4, *(_QWORD *)(a1 + 40), a2);
  v6 = objc_alloc((Class)NSError);
  v7 = NSLocalizedDescriptionKey;
  v8 = CFSTR("Not supported for this device type");
  return objc_msgSend(*(id *)(a1 + 40), "didFetchHawkeyeiCloudIdentifierFromDevice:iCloudIdentifier:error:", *(_QWORD *)(a1 + 48), +[NSData data](NSData, "data"), objc_msgSend(v6, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1)));
}

void sub_1014ED334(id a1, BOOL a2)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
  {
    v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2)
      sub_1014EFC70(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_1014ED364(id a1, BOOL a2)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
  {
    v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2)
      sub_1014EFC70(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

id sub_1014ED4E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performTask:forClient:onDevice:", +[CLDurianTask sendUARPMessageTaskWithPayload:](CLDurianTask, "sendUARPMessageTaskWithPayload:", *(_QWORD *)(a1 + 40)), 0, objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "deviceWithUUID:", objc_msgSend(*(id *)(a1 + 48), "uuid")));
}

void sub_1014EDB5C(id a1, BOOL a2)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
  {
    v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2)
      sub_1014EFC70(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

id sub_1014EECFC(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  id v7;
  NSErrorUserInfoKey v8;
  const __CFString *v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  id v17;

  v4 = objc_msgSend(a2, "createFetchAISAccessoryCategoryTask");
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC278);
  v5 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289539;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2113;
    v15 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "uuid"), "description"), "substringToIndex:", 8);
    v16 = 2114;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #posh starting accessory category task\", \"item\":%{private, location:escape_only}@, \"task\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (v4)
    return objc_msgSend(*(id *)(a1 + 32), "performTask:forClient:onDevice:", v4, *(_QWORD *)(a1 + 40), a2);
  v7 = objc_alloc((Class)NSError);
  v8 = NSLocalizedDescriptionKey;
  v9 = CFSTR("Not supported for this device type");
  return objc_msgSend(*(id *)(a1 + 40), "didFetchAISAccessoryCategoryFromDevice:accessoryCategory:error:", *(_QWORD *)(a1 + 48), 0, objc_msgSend(v7, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1)));
}

id sub_1014EF150(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  id v7;
  NSErrorUserInfoKey v8;
  const __CFString *v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  id v17;

  v4 = objc_msgSend(a2, "createFetchAISNetworkIdTask");
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC278);
  v5 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289539;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2113;
    v15 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "uuid"), "description"), "substringToIndex:", 8);
    v16 = 2114;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #posh starting network id task\", \"item\":%{private, location:escape_only}@, \"task\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (v4)
    return objc_msgSend(*(id *)(a1 + 32), "performTask:forClient:onDevice:", v4, *(_QWORD *)(a1 + 40), a2);
  v7 = objc_alloc((Class)NSError);
  v8 = NSLocalizedDescriptionKey;
  v9 = CFSTR("Not supported for this device type");
  return objc_msgSend(*(id *)(a1 + 40), "didFetchAISNetworkIDFromDevice:networkID:error:", *(_QWORD *)(a1 + 48), 0, objc_msgSend(v7, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1)));
}

id sub_1014EF390(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  id v7;
  NSErrorUserInfoKey v8;
  const __CFString *v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  id v17;

  v4 = objc_msgSend(a2, "createFetchAISFirmwareVersionTask");
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC278);
  v5 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289539;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2113;
    v15 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "uuid"), "description"), "substringToIndex:", 8);
    v16 = 2114;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #posh starting firmware version task\", \"item\":%{private, location:escape_only}@, \"task\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (v4)
    return objc_msgSend(*(id *)(a1 + 32), "performTask:forClient:onDevice:", v4, *(_QWORD *)(a1 + 40), a2);
  v7 = objc_alloc((Class)NSError);
  v8 = NSLocalizedDescriptionKey;
  v9 = CFSTR("Not supported for this device type");
  return objc_msgSend(*(id *)(a1 + 40), "didFetchAISFirmwareVersionFromDevice:firmwareVersion:error:", *(_QWORD *)(a1 + 48), 0, objc_msgSend(v7, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1)));
}

id sub_1014EF5D0(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  id v7;
  NSErrorUserInfoKey v8;
  const __CFString *v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  id v17;

  v4 = objc_msgSend(a2, "createFetchAISBatteryTypeTask");
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC278);
  v5 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289539;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2113;
    v15 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "uuid"), "description"), "substringToIndex:", 8);
    v16 = 2114;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #posh starting battery type task\", \"item\":%{private, location:escape_only}@, \"task\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (v4)
    return objc_msgSend(*(id *)(a1 + 32), "performTask:forClient:onDevice:", v4, *(_QWORD *)(a1 + 40), a2);
  v7 = objc_alloc((Class)NSError);
  v8 = NSLocalizedDescriptionKey;
  v9 = CFSTR("Not supported for this device type");
  return objc_msgSend(*(id *)(a1 + 40), "didFetchAISBatteryTypeFromDevice:batteryType:error:", *(_QWORD *)(a1 + 48), 0, objc_msgSend(v7, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1)));
}

id sub_1014EF810(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  id v7;
  NSErrorUserInfoKey v8;
  const __CFString *v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  id v17;

  v4 = objc_msgSend(a2, "createFetchAISBatteryLevelTask");
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC278);
  v5 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289539;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2113;
    v15 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "uuid"), "description"), "substringToIndex:", 8);
    v16 = 2114;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #posh starting battery level task\", \"item\":%{private, location:escape_only}@, \"task\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (v4)
    return objc_msgSend(*(id *)(a1 + 32), "performTask:forClient:onDevice:", v4, *(_QWORD *)(a1 + 40), a2);
  v7 = objc_alloc((Class)NSError);
  v8 = NSLocalizedDescriptionKey;
  v9 = CFSTR("Not supported for this device type");
  return objc_msgSend(*(id *)(a1 + 40), "didFetchAISBatteryLevelFromDevice:batteryLevel:error:", *(_QWORD *)(a1 + 48), 0, objc_msgSend(v7, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1)));
}

id sub_1014EFA50(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  id v7;
  NSErrorUserInfoKey v8;
  const __CFString *v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  id v17;

  v4 = objc_msgSend(a2, "createFetchAISSerialNumberTask");
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC278);
  v5 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289539;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2113;
    v15 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "uuid"), "description"), "substringToIndex:", 8);
    v16 = 2114;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #posh starting serial number task\", \"item\":%{private, location:escape_only}@, \"task\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (v4)
    return objc_msgSend(*(id *)(a1 + 32), "performTask:forClient:onDevice:", v4, *(_QWORD *)(a1 + 40), a2);
  v7 = objc_alloc((Class)NSError);
  v8 = NSLocalizedDescriptionKey;
  v9 = CFSTR("Not supported for this device type");
  return objc_msgSend(*(id *)(a1 + 40), "didFetchAISSerialNumberFromDevice:serialNumber:error:", *(_QWORD *)(a1 + 48), 0, objc_msgSend(v7, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1)));
}

void sub_1014EFBF8(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1014EFC24(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1014EFC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1014EFC24((void *)&_mh_execute_header, &_os_log_default, a3, "#durian Unable to signal SearchParty of firmware update state change!", a5, a6, a7, a8, 0);
  sub_1014EFC34();
}

void sub_1014EFC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1014EFC24((void *)&_mh_execute_header, &_os_log_default, a3, "#hawkeye Unable to signal SearchParty of firmware update state change!", a5, a6, a7, a8, 0);
  sub_1014EFC34();
}

id sub_1014F1154(uint64_t a1, void *a2)
{
  id result;
  __int128 v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSData *v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  id v25;
  _BYTE v26[128];

  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v16, v26, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v17;
    *(_QWORD *)&v5 = 68289282;
    v15 = v5;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(a2);
        v9 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v8);
        v10 = +[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", objc_msgSend(a2, "objectForKeyedSubscript:", v9, v15));
        if (v10)
        {
          objc_msgSend(*(id *)(a1 + 32), "_sendFirmwareAsset:assetData:", objc_msgSend(v9, "intValue"), v10);
        }
        else
        {
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_1021BC2F0);
          v11 = qword_1022A0038;
          if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
          {
            v12 = objc_msgSend(*(id *)(a1 + 32), "_firmwareAssetTypeToString:", objc_msgSend(v9, "intValue"));
            *(_DWORD *)buf = v15;
            v21 = 0;
            v22 = 2082;
            v23 = "";
            v24 = 2082;
            v25 = v12;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian FWUpdate - could not find asset on filesystem. Expected?\", \"assetType\":%{public, location:escape_only}s}", buf, 0x1Cu);
            if (qword_1022A0030 != -1)
              dispatch_once(&qword_1022A0030, &stru_1021BC2F0);
          }
          v13 = qword_1022A0038;
          if (os_signpost_enabled((os_log_t)qword_1022A0038))
          {
            v14 = objc_msgSend(*(id *)(a1 + 32), "_firmwareAssetTypeToString:", objc_msgSend(v9, "intValue"));
            *(_DWORD *)buf = v15;
            v21 = 0;
            v22 = 2082;
            v23 = "";
            v24 = 2082;
            v25 = v14;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian FWUpdate - could not find asset on filesystem. Expected?", "{\"msg%{public}.0s\":\"#durian FWUpdate - could not find asset on filesystem. Expected?\", \"assetType\":%{public, location:escape_only}s}", buf, 0x1Cu);
          }
        }
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v16, v26, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_1014F1F2C(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

id sub_1014F2134(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "delegate"), "maintenanceTimerFiredWithInterval:", -1.0);
}

id sub_1014F2698(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "releaseMaintenancePowerAssertionWithId:", *(unsigned int *)(a1 + 40));
}

void sub_1014F2A1C(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1014F370C(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

uint64_t sub_1014F3D3C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

NSDictionary *sub_1014F44E0(uint64_t a1)
{
  _QWORD v3[14];
  _QWORD v4[14];

  v3[0] = CFSTR("duration");
  v4[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  v3[1] = CFSTR("durationBin");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v3[2] = CFSTR("durians");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "devices"));
  v3[3] = CFSTR("leashable");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "leashable"));
  v3[4] = CFSTR("coex");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "coex"));
  v3[5] = CFSTR("discovery");
  v4[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "neededDiscovery"));
  v3[6] = CFSTR("tbm");
  v4[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  v3[7] = CFSTR("tbmBin");
  v4[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  v3[8] = CFSTR("assertion");
  objc_msgSend(*(id *)(a1 + 32), "assertionDuration");
  v4[8] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v3[9] = CFSTR("productName");
  v4[9] = objc_msgSend(*(id *)(a1 + 32), "deviceTypes");
  v3[10] = CFSTR("nearowner");
  v4[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64));
  v3[11] = CFSTR("nearownerPct");
  v4[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68));
  v3[12] = CFSTR("connectattempt");
  v4[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72));
  v3[13] = CFSTR("connectattemptPct");
  v4[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 76));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 14);
}

NSDictionary *sub_1014F5170(uint64_t a1)
{
  _QWORD v3[16];
  __int128 v4;
  NSNumber *v5;
  NSNumber *v6;
  NSNumber *v7;
  NSNumber *v8;
  id v9;
  NSNumber *v10;
  NSNumber *v11;
  NSNumber *v12;
  NSNumber *v13;
  id v14;
  NSNumber *v15;
  NSNumber *v16;
  NSNumber *v17;
  NSNumber *v18;

  v3[0] = CFSTR("outcome");
  v3[1] = CFSTR("doneCategory");
  v4 = *(_OWORD *)(a1 + 32);
  v5 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80), CFSTR("outcome"), CFSTR("doneCategory"), CFSTR("maintainers"));
  v3[3] = CFSTR("duration");
  v6 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 64));
  v3[4] = CFSTR("durationBin");
  v7 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 84));
  v3[5] = CFSTR("coex");
  v8 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 48), "coex"));
  v3[6] = CFSTR("productName");
  v9 = objc_msgSend(*(id *)(a1 + 56), "accessoryTypeName");
  v3[7] = CFSTR("heleConnect");
  v10 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 88));
  v3[8] = CFSTR("lastAdvBin");
  v11 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 92));
  v3[9] = CFSTR("lastGroupMaint");
  v12 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 96));
  v3[10] = CFSTR("lastClassicBin");
  v13 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 100));
  v3[11] = CFSTR("loiType");
  v14 = objc_msgSend(*(id *)(a1 + 48), "loiType");
  v3[12] = CFSTR("proactiveAttempts");
  v15 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", objc_msgSend(*(id *)(a1 + 56), "numProactiveAttempts"));
  v3[13] = CFSTR("proactiveConnects");
  v16 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", objc_msgSend(*(id *)(a1 + 56), "numProactiveConnects"));
  v3[14] = CFSTR("leashable");
  v17 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 104));
  v3[15] = CFSTR("lastObservation");
  v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(a1 + 72));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v4, v3, 16);
}

NSDictionary *sub_1014F5E40(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("proactive");
  v3[0] = &off_10221DF28;
  v2[0] = CFSTR("premature");
  v3[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

NSDictionary *sub_1014F623C(uint64_t a1)
{
  NSNumber *v2;
  uint64_t v3;
  _QWORD v5[4];
  _QWORD v6[4];

  v5[0] = CFSTR("lastObservation");
  v6[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(a1 + 40));
  v5[1] = CFSTR("numberMaterials");
  v6[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 48));
  v5[2] = CFSTR("isDrift");
  v2 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 56));
  v5[3] = CFSTR("deviceType");
  v3 = *(_QWORD *)(a1 + 32);
  v6[2] = v2;
  v6[3] = v3;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 4);
}

NSDictionary *sub_1014F64A4(uint64_t a1)
{
  _QWORD v3[4];
  _QWORD v4[2];
  __int128 v5;

  v3[0] = CFSTR("lastObservation");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(a1 + 48));
  v3[1] = CFSTR("numberBTConnectionAttempts");
  v4[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 56));
  v3[2] = CFSTR("connectionReason");
  v3[3] = CFSTR("deviceType");
  v5 = *(_OWORD *)(a1 + 32);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

NSDictionary *sub_1014F6700(uint64_t a1)
{
  _QWORD v3[4];
  _QWORD v4[2];
  __int128 v5;

  v3[0] = CFSTR("lastObservation");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(a1 + 48));
  v3[1] = CFSTR("driftMaterial");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(_BYTE *)(a1 + 56) == 0);
  v3[2] = CFSTR("connectionReason");
  v3[3] = CFSTR("deviceType");
  v5 = *(_OWORD *)(a1 + 32);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

NSDictionary *sub_1014F6B08(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _QWORD v14[19];
  _QWORD v15[11];
  __int128 v16;
  NSNumber *v17;
  NSNumber *v18;
  NSNumber *v19;
  NSNumber *v20;
  NSNumber *v21;
  NSNumber *v22;

  v14[0] = CFSTR("BOMAccelCount");
  v15[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "utAccelCount"));
  v14[1] = CFSTR("BOMSoundCount");
  v15[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "bomSoundCount"));
  v14[2] = CFSTR("bootR1Time");
  objc_msgSend(*(id *)(a1 + 32), "bootR1Time");
  v15[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v2);
  v14[3] = CFSTR("dualConnectionLeashedTime");
  objc_msgSend(*(id *)(a1 + 32), "dualLeashedTime");
  v15[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v3);
  v14[4] = CFSTR("dualConnectionTime");
  objc_msgSend(*(id *)(a1 + 32), "dualConnTime");
  v15[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v4);
  v14[5] = CFSTR("leashedTime");
  objc_msgSend(*(id *)(a1 + 32), "leashedTime");
  v15[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v5);
  v14[6] = CFSTR("multiLeashedTime");
  objc_msgSend(*(id *)(a1 + 32), "multiLeashedTime");
  v15[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v6);
  v14[7] = CFSTR("multiTime");
  objc_msgSend(*(id *)(a1 + 32), "multiTimeV2");
  v15[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v7);
  v14[8] = CFSTR("nearOwnerTime");
  objc_msgSend(*(id *)(a1 + 32), "nearOwnerTimeV2");
  v15[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v8);
  v14[9] = CFSTR("ownerPlaySoundLongCount");
  v15[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "ownerLongSoundCount"));
  v14[10] = CFSTR("ownerPlaySoundShortCount");
  v15[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "ownerShortSoundCount"));
  v14[11] = CFSTR("pairedDeviceFirmwareVersion");
  v14[12] = CFSTR("pairedDeviceID");
  v16 = *(_OWORD *)(a1 + 40);
  v14[13] = CFSTR("playSoundLongUTCount");
  v17 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "utLongSoundCount"));
  v14[14] = CFSTR("playSoundShortUTCount");
  v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "utShortSoundCount"));
  v14[15] = CFSTR("rangingTime");
  objc_msgSend(*(id *)(a1 + 32), "rangingTime");
  v19 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v9);
  v14[16] = CFSTR("singleConnectionTime");
  objc_msgSend(*(id *)(a1 + 32), "singleConnTime");
  v20 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v10);
  v14[17] = CFSTR("wildTime");
  objc_msgSend(*(id *)(a1 + 32), "wildTime");
  v21 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v11);
  v14[18] = CFSTR("observationDurationFW");
  objc_msgSend(*(id *)(a1 + 32), "lastClear");
  v22 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v12);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 19);
}

void sub_1014F7248(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

const __CFString *sub_1014F7274(int a1)
{
  const __CFString *result;

  if (a1 > 767)
  {
    if (a1 <= 771)
    {
      if (a1 == 768)
        return CFSTR("Posh Start Sound");
      if (a1 == 769)
        return CFSTR("Posh Stop Sound");
    }
    else
    {
      switch(a1)
      {
        case 772:
          return CFSTR("Posh Non-Owner Start Aggressive Advertising");
        case 794:
          return CFSTR("Posh Non-Owner Start Playing Short Sound");
        case 1028:
          return CFSTR("Posh Fetch Serial Number");
      }
    }
LABEL_24:
    if (a1 <= 766)
    {
      result = CFSTR("Acknowledge");
      switch(a1)
      {
        case 0:
          return result;
        case 1:
          result = CFSTR("Rose Init");
          break;
        case 2:
          result = CFSTR("Rose Ready");
          break;
        case 3:
          result = CFSTR("Rose Start Ranging");
          break;
        case 4:
          result = CFSTR("Rose Ranging Complete");
          break;
        case 5:
        case 9:
        case 16:
        case 17:
        case 20:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 33:
        case 35:
        case 41:
        case 44:
LABEL_94:
          result = CFSTR("Unknown");
          break;
        case 6:
          result = CFSTR("Rose Stop");
          break;
        case 7:
          result = CFSTR("Get Firmware Version");
          break;
        case 8:
          result = CFSTR("Stop Sound");
          break;
        case 10:
          result = CFSTR("Leashing");
          break;
        case 11:
          result = CFSTR("Set Max Connections");
          break;
        case 12:
          result = CFSTR("Get Multi Status");
          break;
        case 13:
          result = CFSTR("Set Obfuscated Identifier");
          break;
        case 14:
          result = CFSTR("Set Mutex");
          break;
        case 15:
          result = CFSTR("Set Near Owner Timeout");
          break;
        case 18:
          result = CFSTR("Get Firmware Version (Deprecated)");
          break;
        case 19:
          result = CFSTR("Unpair");
          break;
        case 21:
          result = CFSTR("Rose Set Paramaters");
          break;
        case 22:
          result = CFSTR("Rose Stop Ranging");
          break;
        case 23:
          result = CFSTR("Get User Stats v2");
          break;
        case 24:
          result = CFSTR("Get User Stats (Deprecated)");
          break;
        case 25:
          result = CFSTR("Get User Stats v1");
          break;
        case 32:
          result = CFSTR("Abort FWDL");
          break;
        case 34:
          result = CFSTR("Rose Error");
          break;
        case 36:
          result = CFSTR("Rose P2P Timestamp");
          break;
        case 37:
          result = CFSTR("Rose Debug P2P Timestamp");
          break;
        case 38:
          result = CFSTR("Set Tag Type");
          break;
        case 39:
          result = CFSTR("Get Battery Status");
          break;
        case 40:
          result = CFSTR("Play Sound Sequence");
          break;
        case 42:
          result = CFSTR("Set Wild Mode Configuration");
          break;
        case 43:
          result = CFSTR("Roll Wild Key");
          break;
        case 45:
          result = CFSTR("Set Absolute Wild Mode Configuration");
          break;
        default:
          switch(a1)
          {
            case 174:
              result = CFSTR("Fetch Current Key Index");
              break;
            case 175:
              result = CFSTR("Play Unauthorized Sound");
              break;
            case 177:
              result = CFSTR("Set Key Rotation Timeout");
              break;
            case 180:
              result = CFSTR("Dump Logs");
              break;
            case 181:
              result = CFSTR("Check Crashes");
              break;
            case 185:
              result = CFSTR("Induce Crash");
              break;
            case 195:
              result = CFSTR("Enable/Disable UT PlaySound Rate Limit");
              break;
            case 197:
              result = CFSTR("Set Central Reference Time");
              break;
            case 199:
              result = CFSTR("Set Accelerometeter Slope Mode Configuration");
              break;
            case 200:
              result = CFSTR("Set Accelerometer Orientation Mode Configuration");
              break;
            case 201:
              result = CFSTR("Get Accelerometer Slope Mode Configuration");
              break;
            case 202:
              result = CFSTR("Get Accelerometer Orientation Mode Configuration");
              break;
            case 203:
              result = CFSTR("Get Accelerometer Mode");
              break;
            case 209:
              result = CFSTR("Fetch ProductData AIS");
              break;
            case 210:
              result = CFSTR("Fetch ManufacturerName AIS");
              break;
            case 211:
              result = CFSTR("Fetch ModelName AIS");
              break;
            case 212:
              result = CFSTR("Fetch ModelColorCode AIS");
              break;
            case 213:
              result = CFSTR("Fetch AccessoryCategory AIS");
              break;
            case 214:
              result = CFSTR("Fetch AccessoryCapabilities AIS");
              break;
            case 215:
              result = CFSTR("Fetch FirmwareVersion AIS");
              break;
            case 216:
              result = CFSTR("Fetch FindMyVersion AIS");
              break;
            case 217:
              result = CFSTR("Fetch BatteryTyp AIS");
              break;
            case 218:
              result = CFSTR("Fetch BatteryLevel AIS");
              break;
            case 219:
              result = CFSTR("Send UARP message to accessory");
              break;
            case 220:
              result = CFSTR("Stop Unauthorized Sound");
              break;
            case 221:
              result = CFSTR("Fetch TX Power");
              break;
            default:
              goto LABEL_94;
          }
          break;
      }
    }
    else if (a1 <= 1791)
    {
      switch(a1)
      {
        case 767:
          result = CFSTR("NACK Response");
          break;
        case 768:
        case 769:
          goto LABEL_94;
        case 770:
          result = CFSTR("Non-Owner Command Response");
          break;
        case 771:
          result = CFSTR("Non-Owner Sound Complete");
          break;
        case 772:
          result = CFSTR("Non-Owner Start Aggressive Advertising");
          break;
        case 773:
          result = CFSTR("Non-Owner TxPower");
          break;
        case 774:
          result = CFSTR("Non-Owner Product Data");
          break;
        case 775:
          result = CFSTR("Non-Owner Manufacturer Name");
          break;
        case 776:
          result = CFSTR("Non-Owner Model Name");
          break;
        case 777:
          result = CFSTR("Non-Owner Accessory Category");
          break;
        case 778:
          result = CFSTR("Non-Owner Accessory Capabilities");
          break;
        case 779:
          result = CFSTR("Non-Owner Firmware Version");
          break;
        case 780:
          result = CFSTR("Non-Owner FindMy Vesion");
          break;
        case 781:
          result = CFSTR("Non-Owner Battery Type");
          break;
        case 782:
          result = CFSTR("Non-Owner Battery Level");
          break;
        default:
          switch(a1)
          {
            case 1024:
              result = CFSTR("Get Current Primary Key");
              break;
            case 1025:
              result = CFSTR("Get iCloud Identifier");
              break;
            case 1026:
              result = CFSTR("Get Current Primary Key Response");
              break;
            case 1027:
              result = CFSTR("Get iCloud Identifier Response");
              break;
            case 1028:
              result = CFSTR("Get Serial Number");
              break;
            case 1029:
              result = CFSTR("Get Serial Number Response");
              break;
            case 1030:
              result = CFSTR("Paired Owner Command Response");
              break;
            default:
              switch(a1)
              {
                case 1280:
                  result = CFSTR("Key Rotation");
                  break;
                case 1281:
                  result = CFSTR("Retrieve Logs");
                  break;
                case 1282:
                  result = CFSTR("Log Response");
                  break;
                case 1283:
                  result = CFSTR("Debug Command Response");
                  break;
                case 1284:
                  result = CFSTR("Reset");
                  break;
                case 1285:
                  result = CFSTR("UT Motion Config");
                  break;
                default:
                  goto LABEL_94;
              }
              break;
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 2048:
          result = CFSTR("Non-Owner Ranging Command Response");
          break;
        case 2049:
          result = CFSTR("Non-Owner Ranging Init");
          break;
        case 2050:
          result = CFSTR("Non-Owner Ranging Configure");
          break;
        case 2051:
          result = CFSTR("Non-Owner Ranging Start");
          break;
        case 2052:
          result = CFSTR("Non-Owner Ranging Stop");
          break;
        case 2053:
          result = CFSTR("Non-Owner Ranging Deinit");
          break;
        case 2054:
          result = CFSTR("Non-Owner Ranging Init Response");
          break;
        case 2055:
          result = CFSTR("Non-Owner Ranging Configure Response");
          break;
        case 2056:
          result = CFSTR("Non-Owner Ranging Complete");
          break;
        case 2057:
          result = CFSTR("Non-Owner Ranging Timestamps");
          break;
        case 2058:
          result = CFSTR("Non-Owner Ranging Error");
          break;
        case 2059:
          result = CFSTR("Non-Owner Ranging Deinit Complete");
          break;
        case 2060:
          result = CFSTR("Non-Owner Ranging Motion");
          break;
        case 2061:
          result = CFSTR("Play Unauthorized Short Sound");
          break;
        case 2062:
          result = CFSTR("Play Unauthorized Short Sound Completed");
          break;
        default:
          switch(a1)
          {
            case 1792:
              result = CFSTR("Ranging Command Response");
              break;
            case 1793:
              result = CFSTR("Ranging Init");
              break;
            case 1794:
              result = CFSTR("Ranging Configure");
              break;
            case 1795:
              result = CFSTR("Ranging Start");
              break;
            case 1796:
              result = CFSTR("Ranging Stop");
              break;
            case 1797:
              result = CFSTR("Ranging Deinit");
              break;
            case 1798:
              result = CFSTR("Ranging Init Response");
              break;
            case 1799:
              result = CFSTR("Ranging Configure Response");
              break;
            case 1800:
              result = CFSTR("Ranging Complete");
              break;
            case 1801:
              result = CFSTR("Ranging Timestamps");
              break;
            case 1802:
              result = CFSTR("Ranging Error");
              break;
            case 1803:
              result = CFSTR("Ranging Deinit Complete");
              break;
            case 1804:
              result = CFSTR("Ranging Motion");
              break;
            default:
              goto LABEL_94;
          }
          break;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 3:
        result = CFSTR("Posh Fetch Product Data");
        break;
      case 4:
        result = CFSTR("Posh Fetch Manufacturer Name");
        break;
      case 5:
        result = CFSTR("Posh Fetch Model Name");
        break;
      case 6:
        result = CFSTR("Posh Fetch Accessory Category");
        break;
      case 7:
        result = CFSTR("Posh Fetch Protocol Implementation ");
        break;
      case 8:
        result = CFSTR("Posh Fetch Accessory Capabilities");
        break;
      case 9:
        result = CFSTR("Posh Fetch Network Id");
        break;
      case 10:
        result = CFSTR("Posh Fetch Firmware Version ");
        break;
      case 11:
        result = CFSTR("Posh Fetch Battery Type");
        break;
      case 12:
        result = CFSTR("Posh Fetch Battery Level");
        break;
      default:
        goto LABEL_24;
    }
  }
  return result;
}

id sub_1014F9D98(uint64_t a1, void *a2, uint64_t a3)
{
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("<Core %u: "), objc_msgSend(a2, "unsignedIntValue"));
  objc_msgSend(*(id *)(a1 + 32), "appendString:", objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", a3, 1));
  return objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR(">, "));
}

void sub_101503D98(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

id sub_101503FDC(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[12];

  v4 = *a2;
  v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  v7 = a3[5];
  v12[4] = a3[4];
  v12[5] = v7;
  v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  v10 = a3[3];
  v12[2] = a3[2];
  v12[3] = v10;
  return objc_msgSend(a4, "onCompanionNotification:data:", v4, v12);
}

void sub_1015043B8(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_10150F014(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  _BYTE v9[20];
  __int16 v10;
  void *v11;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC538);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 296), "description"), "substringToIndex:", 8);
    v8 = 68289539;
    *(_WORD *)v9 = 2082;
    *(_QWORD *)&v9[2] = "";
    *(_WORD *)&v9[10] = 2113;
    *(_QWORD *)&v9[12] = v5;
    v10 = 2114;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #connection latency received callback\", \"item\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x26u);
  }
  if (a2)
  {
    if (objc_msgSend(a2, "code") == (id)45)
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BC538);
      v6 = qword_1022A0038;
      if (!os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
        goto LABEL_17;
      v8 = 68289026;
      *(_WORD *)v9 = 2082;
      *(_QWORD *)&v9[2] = "";
      v7 = "{\"msg%{public}.0s\":\"#durian #connection latency already updated\"}";
    }
    else
    {
      if (objc_msgSend(a2, "code") != (id)46)
        return;
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BC538);
      v6 = qword_1022A0038;
      if (!os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
        goto LABEL_17;
      v8 = 68289026;
      *(_WORD *)v9 = 2082;
      *(_QWORD *)&v9[2] = "";
      v7 = "{\"msg%{public}.0s\":\"#durian #connection latency different than requested\"}";
    }
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v8, 0x12u);
LABEL_17:
    objc_msgSend(*(id *)(a1 + 32), "clearLatencyTimeoutAndCancel:", 1, v8, *(_OWORD *)v9);
  }
}

id sub_10150F61C(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  NSObject *v4;
  id v5;
  _BYTE *v6;
  id v7;
  uint64_t v8;
  NSDictionary *v9;
  id v10;
  NSErrorUserInfoKey v12;
  const __CFString *v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  _BOOL4 v21;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 208))
    v3 = 0;
  else
    v3 = *(_QWORD *)(v2 + 216) != 0;
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC538);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 296), "description"), "substringToIndex:", 8);
    *(_DWORD *)buf = 68289539;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2113;
    v19 = v5;
    v20 = 1026;
    v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #latency timedout\", \"item\":%{private, location:escape_only}@, \"disconnect\":%{public}hhd}", buf, 0x22u);
  }
  v6 = *(_BYTE **)(a1 + 32);
  if (v6[224])
  {
    v7 = objc_alloc((Class)NSError);
    v8 = kCLErrorDomainPrivate;
    v12 = NSLocalizedDescriptionKey;
    v13 = sub_101536DEC(0xAuLL);
    v9 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
    v10 = objc_msgSend(v7, "initWithDomain:code:userInfo:", v8, 10, v9, v12);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "delegate"), "device:didPrepareForRangingWithError:", *(_QWORD *)(a1 + 32), v10);

    v6 = *(_BYTE **)(a1 + 32);
  }
  if (v3)
  {
    objc_msgSend(v6, "setDisconnectionReason:", CFSTR("LatencyTimeout"));
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "delegate"), "requestDisconnectionForDevice:", *(_QWORD *)(a1 + 32));
    v6 = *(_BYTE **)(a1 + 32);
  }
  return objc_msgSend(v6, "clearLatencyTimeoutAndCancel:", 0);
}

id sub_1015109DC(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  id v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC538);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 296), "description"), "substringToIndex:", 8);
    v4 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "identifier"), "description"), "substringToIndex:", 8);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 520);
    v8[0] = 68290051;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2113;
    v12 = v3;
    v13 = 2113;
    v14 = v4;
    v15 = 2113;
    v16 = v5;
    v17 = 2113;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian preempted task timed out\", \"item\":%{private, location:escape_only}@, \"periph\":%{private, location:escape_only}@, \"task\":%{private, location:escape_only}@, \"activetask\":%{private, location:escape_only}@}", (uint8_t *)v8, 0x3Au);
  }
  objc_msgSend(*(id *)(a1 + 32), "transitionToState:event:task:", 4, 11, objc_msgSend(*(id *)(a1 + 32), "activeTask"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 512), "device:didFailToCompleteTask:withError:andDisconnect:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 10, 1);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "removeObject:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "cancelTimeoutForTask:dictionary:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));
  objc_msgSend(*(id *)(a1 + 32), "failAllTasksWithError:", 10);
  objc_msgSend(*(id *)(a1 + 40), "complete");
  return objc_msgSend(*(id *)(a1 + 32), "logTaskCounts:", CFSTR("preemptedtimedout"));
}

id sub_101510C1C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  id v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BC538);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 296), "description"), "substringToIndex:", 8);
    v4 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "identifier"), "description"), "substringToIndex:", 8);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 520);
    v8[0] = 68290051;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2113;
    v12 = v3;
    v13 = 2113;
    v14 = v4;
    v15 = 2113;
    v16 = v5;
    v17 = 2113;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian task timed out\", \"item\":%{private, location:escape_only}@, \"periph\":%{private, location:escape_only}@, \"task\":%{private, location:escape_only}@, \"activetask\":%{private, location:escape_only}@}", (uint8_t *)v8, 0x3Au);
  }
  objc_msgSend(*(id *)(a1 + 32), "transitionToState:event:task:", 4, 11, objc_msgSend(*(id *)(a1 + 32), "activeTask"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 512), "device:didFailToCompleteTask:withError:andDisconnect:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 10, 1);
  objc_msgSend(*(id *)(a1 + 32), "failAllTasksWithError:", 10);
  return objc_msgSend(*(id *)(a1 + 32), "completeCurrentTask");
}

void sub_1015193DC(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

id sub_101519440()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 296), "description");
}

id sub_101519448(void *a1, const char *a2)
{
  return objc_msgSend(a1, "substringToIndex:", 8);
}

void sub_101519450()
{
  NSObject *v0;
  id v1;
  const char *v2;
  NSObject *v3;
  id v4;
  const char *v5;
  NSObject *v6;
  id v7;
  const char *v8;
  uint8_t buf[56];

  if (qword_1022A0030 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
    {
      v1 = sub_101519440();
      sub_101519448(v1, v2);
      sub_101519408();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian no timeout to cancel\", \"item\":%{private, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BC538);
    }
    v3 = qword_1022A0038;
    if (os_signpost_enabled((os_log_t)qword_1022A0038))
    {
      v4 = sub_101519440();
      sub_101519448(v4, v5);
      sub_101519408();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian no timeout to cancel", "{\"msg%{public}.0s\":\"#durian no timeout to cancel\", \"item\":%{private, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BC538);
    }
    v6 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
    {
      v7 = sub_101519440();
      sub_101519448(v7, v8);
      sub_101519408();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#durian no timeout to cancel\", \"item\":%{private, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Durian/CLDurianDevice.m", 3005, "-[CLDurianDevice cancelTimeoutForTask:dictionary:]");
LABEL_11:
    dispatch_once(&qword_1022A0030, &stru_1021BC538);
  }
}

void sub_101519A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  id *v29;
  id *v30;
  id *v31;

  objc_destroyWeak(v31);
  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_101519AB8(uint64_t a1)
{
  return objc_msgSend(objc_loadWeak((id *)(a1 + 32)), "recreateKeyReconciler");
}

id sub_101519AD0(uint64_t a1)
{
  NSObject *v2;
  id *v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  if (qword_1022A0210 != -1)
    dispatch_once(&qword_1022A0210, &stru_1021BC6F0);
  v2 = qword_1022A0218;
  if (os_log_type_enabled((os_log_t)qword_1022A0218, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLAvengerReconciler: got first unlock\"}", (uint8_t *)v5, 0x12u);
  }
  v3 = (id *)(a1 + 32);
  objc_msgSend(objc_loadWeak(v3), "recreateKeyReconciler");
  return objc_msgSend(objc_loadWeak(v3), "fetchAllUnknownBeaconsWithCompletion:", &stru_1021BC618);
}

void sub_101519BCC(id a1)
{
  NSObject *v1;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  if (qword_1022A0210 != -1)
    dispatch_once(&qword_1022A0210, &stru_1021BC6F0);
  v1 = qword_1022A0218;
  if (os_log_type_enabled((os_log_t)qword_1022A0218, OS_LOG_TYPE_DEBUG))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    v3 = 2082;
    v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAvengerReconciler: refetched unknown beacon due to first unlock\"}", (uint8_t *)v2, 0x12u);
  }
}

void sub_101519CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD block[7];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(NSObject **)(v3 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101519CFC;
  block[3] = &unk_10212BBA8;
  block[4] = a2;
  block[5] = a3;
  block[6] = v3;
  dispatch_async(v4, block);
}

id sub_101519CFC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  if (qword_1022A0210 != -1)
    dispatch_once(&qword_1022A0210, &stru_1021BC6F0);
  v2 = qword_1022A0218;
  if (os_log_type_enabled((os_log_t)qword_1022A0218, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v6[0] = 68289539;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2113;
    v10 = v3;
    v11 = 2113;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLAvengerReconciler: created reconciler\", \"reconciler\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", (uint8_t *)v6, 0x26u);
  }
  result = *(id *)(a1 + 32);
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) = result;
  return result;
}

id sub_101519DFC(uint64_t a1)
{
  return objc_msgSend(objc_loadWeak((id *)(a1 + 32)), "fetchAllUnknownBeaconsWithCompletion:", &stru_1021BC660);
}

void sub_101519F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD block[7];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(NSObject **)(v3 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101519F94;
  block[3] = &unk_10212BBA8;
  block[4] = a2;
  block[5] = a3;
  block[6] = v3;
  dispatch_async(v4, block);
}

id sub_101519F94(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  if (qword_1022A0210 != -1)
    dispatch_once(&qword_1022A0210, &stru_1021BC6F0);
  v2 = qword_1022A0218;
  if (os_log_type_enabled((os_log_t)qword_1022A0218, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v6[0] = 68289539;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2113;
    v10 = v3;
    v11 = 2113;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLAvengerReconciler: created reconciler\", \"reconciler\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", (uint8_t *)v6, 0x26u);
  }

  result = *(id *)(a1 + 32);
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) = result;
  return result;
}

void sub_10151A2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10151A2C4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD block[6];
  id v7;

  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10151A358;
  block[3] = &unk_1021BC6A8;
  objc_copyWeak(&v7, (id *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 40);
  block[4] = a2;
  block[5] = v5;
  dispatch_async(v4, block);
  objc_destroyWeak(&v7);
}

uint64_t sub_10151A358(uint64_t a1)
{
  objc_msgSend(objc_loadWeak((id *)(a1 + 48)), "didFetchUnknownBeacons:", *(_QWORD *)(a1 + 32));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10151A574(id a1)
{
  qword_1022A0218 = (uint64_t)os_log_create("com.apple.locationd.Core", "AvengerScanner");
}

void sub_10151A5A0(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

const __CFString *sub_10151A714(unsigned int a1)
{
  if (a1 > 2)
    return CFSTR("<Invalid>");
  else
    return off_1021BCA68[(char)a1];
}

void sub_10151AF24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 264);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10151AF7C;
  v4[3] = &unk_10212BB30;
  v4[4] = v2;
  v4[5] = a2;
  dispatch_async(v3, v4);
}

id sub_10151AF7C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didUpdatePersistentConnectionList:", *(_QWORD *)(a1 + 40));
}

id sub_10151AF88(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onGeoCountryConfigurationChanged:", objc_msgSend(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"), "countryCode"));
}

id sub_10151AFBC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "restartActiveConnectionAttempts");
}

void sub_10151BA2C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD block[6];
  char v6;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(NSObject **)(v3 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10151BA88;
  block[3] = &unk_102166D58;
  v6 = a2;
  block[4] = a3;
  block[5] = v3;
  dispatch_async(v4, block);
}

void sub_10151BA88(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  dispatch_time_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD block[5];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 48) && !*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BCA48);
    v11 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian simplebeacon completion\"}", buf, 0x12u);
    }
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BCA48);
    v2 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
    {
      v3 = *(unsigned __int8 *)(a1 + 48);
      v4 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v3;
      v19 = 2114;
      v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian simplebeacon completion error\", \"success\":%{public}d, \"error\":%{public, location:escape_only}@}", buf, 0x22u);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BCA48);
    }
    v5 = qword_1022A0038;
    if (os_signpost_enabled((os_log_t)qword_1022A0038))
    {
      v6 = *(unsigned __int8 *)(a1 + 48);
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v6;
      v19 = 2114;
      v20 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian simplebeacon completion error", "{\"msg%{public}.0s\":\"#durian simplebeacon completion error\", \"success\":%{public}d, \"error\":%{public, location:escape_only}@}", buf, 0x22u);
    }
    v8 = dispatch_time(0, 60000000000);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(NSObject **)(v9 + 264);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10151BD2C;
    block[3] = &unk_10212BB58;
    block[4] = v9;
    dispatch_after(v8, v10, block);
  }
}

id sub_10151BD2C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "hydrateBeacons");
}

id sub_10151BD34(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fetchAllUnknownBeaconsWithCompletion:", &stru_1021BC7C8);
}

uint64_t sub_10151BE6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10151BFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD block[7];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(NSObject **)(v2 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10151BFFC;
  block[3] = &unk_102180A50;
  block[4] = v2;
  block[5] = a2;
  block[6] = v3;
  dispatch_async(v4, block);
}

uint64_t sub_10151BFFC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "didFetchUnknownBeacons:", *(_QWORD *)(a1 + 40));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

id sub_10151C14C(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10151C1A4;
  v3[3] = &unk_102162918;
  v1 = *(void **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v1, "fetchAllUnknownBeaconsWithCompletion:", v3);
}

uint64_t sub_10151C1A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10151C1B0(uint64_t a1, void *a2, _BYTE *a3)
{
  id result;

  result = objc_msgSend(objc_msgSend(a2, "identifier"), "isEqual:", objc_msgSend(*(id *)(a1 + 32), "uuid"));
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

void sub_10151D9C8(uint64_t a1)
{
  NSObject *v1;
  _QWORD v2[4];
  __int128 v3;

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 264);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10151DA28;
  v2[3] = &unk_1021629E0;
  v3 = *(_OWORD *)(a1 + 40);
  dispatch_async(v1, v2);
}

uint64_t sub_10151DA28(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10151DAE4(uint64_t a1)
{
  NSObject *v1;
  _QWORD v2[4];
  __int128 v3;

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 264);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10151DB44;
  v2[3] = &unk_1021629E0;
  v3 = *(_OWORD *)(a1 + 40);
  dispatch_async(v1, v2);
}

uint64_t sub_10151DB44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

int64_t sub_10151E3B0(id a1, CLDurianDevice *a2, CLDurianDevice *a3)
{
  unint64_t v5;
  unint64_t v7;

  v5 = -[CLDurianDevice lastReconciliationTime](a2, "lastReconciliationTime");
  if (v5 < -[CLDurianDevice lastReconciliationTime](a3, "lastReconciliationTime")
    && -[CLDurianDevice lastReconciliationTime](a2, "lastReconciliationTime"))
  {
    return -1;
  }
  v7 = -[CLDurianDevice lastReconciliationTime](a2, "lastReconciliationTime");
  return v7 > -[CLDurianDevice lastReconciliationTime](a3, "lastReconciliationTime")
      || -[CLDurianDevice lastReconciliationTime](a2, "lastReconciliationTime") == 0;
}

id sub_10151E688(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "recheckDevicesAfterDiscovery");
}

id sub_101520570(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "evaluateConnectionStateForDevice:", *(_QWORD *)(a1 + 40));
}

void sub_101521100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD block[6];
  __int128 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10152116C;
  block[3] = &unk_1021681D8;
  block[4] = v2;
  block[5] = a2;
  v5 = *(_OWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  dispatch_async(v3, block);
}

id sub_10152116C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didFetchBeaconGroup:connectedDeviceAddress:device:state:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

id sub_10152294C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "performProactiveMaintenanceOnDevice:", *(_QWORD *)(a1 + 40));
}

id sub_101524E98(id *a1)
{
  NSObject *v2;
  id v3;
  id v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  id v10;
  __int16 v11;
  id v12;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BCA48);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(objc_msgSend(objc_msgSend(a1[4], "uuid"), "description"), "substringToIndex:", 8);
    v4 = objc_msgSend(objc_msgSend(objc_msgSend(a1[5], "identifier"), "description"), "substringToIndex:", 8);
    v6[0] = 68289539;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2113;
    v10 = v3;
    v11 = 2113;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #connection peripheral timed out\", \"item\":%{private, location:escape_only}@, \"periph\":%{private, location:escape_only}@}", (uint8_t *)v6, 0x26u);
  }
  objc_msgSend(a1[6], "failedToConnectToPossiblePeripheral:withErrorCode:", a1[5], -1);
  return objc_msgSend(*((id *)a1[6] + 28), "removeObjectForKey:", a1[5]);
}

id sub_101525290(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 232) = 2;
  return objc_msgSend(*(id *)(a1 + 32), "completeTokenFetchForDevice:", *(_QWORD *)(a1 + 40));
}

id sub_1015257B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "connectToDevice:withPeripheral:forcedTimeout:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0);
}

void sub_101527050(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  double v6;
  int v7;
  double v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  int v19;
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;

  if (a2)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BCA48);
    v4 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
      objc_msgSend(a2, "coordinate");
      v7 = (int)v6;
      objc_msgSend(a2, "coordinate");
      v9 = (int)v8;
      objc_msgSend(a2, "horizontalAccuracy");
      v11 = v10;
      v12 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", *(_QWORD *)(a1 + 40), 1, 4), "UTF8String");
      v19 = 68290563;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2113;
      v24 = v5;
      v25 = 1025;
      v26 = v7;
      v27 = 1025;
      v28 = v9;
      v29 = 2050;
      v30 = v11;
      v31 = 2082;
      v32 = v12;
      v33 = 2082;
      v34 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", objc_msgSend(a2, "timestamp"), 1, 4), "UTF8String");
      v13 = "{\"msg%{public}.0s\":\"#durian leash break last location updated\", \"item\":%{private, location:escape_only"
            "}@, \"lat\":%{private}d, \"lat\":%{private}d, \"accuracy\":\"%{public}f\", \"date\":%{public, location:escap"
            "e_only}s, \"loc.date\":%{public, location:escape_only}s}";
      v14 = v4;
      v15 = 70;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v19, v15);
    }
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BCA48);
    v16 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
      v19 = 68289283;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2113;
      v24 = v17;
      v13 = "{\"msg%{public}.0s\":\"#durian leash break last location update\", \"item\":%{private, location:escape_only}@}";
      v14 = v16;
      v15 = 28;
      goto LABEL_10;
    }
  }
  v18 = *(void **)(*(_QWORD *)(a1 + 48) + 64);
  if (v18 != a2)
  {

    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64) = a2;
  }
}

id sub_10152733C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "completeTokenFetchForDevice:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
}

id sub_1015279F4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  const char *v5;
  const char *v6;
  unsigned int v7;
  const char *v8;
  void *v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  id v17;
  NSObject *v18;
  id v19;
  uint64_t v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  id v25;
  __int16 v26;
  id v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BCA48);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
    v4 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activePeripheral"), "identifier"), "description"), "substringToIndex:", 8);
    if (objc_msgSend(*(id *)(a1 + 32), "isConnected"))
      v5 = "YES";
    else
      v5 = "NO";
    if (objc_msgSend(*(id *)(a1 + 32), "isTaskQueueEmpty"))
      v6 = "YES";
    else
      v6 = "NO";
    v7 = objc_msgSend(*(id *)(a1 + 32), "pendingDisconnect");
    LODWORD(v21) = 68290307;
    if (v7)
      v8 = "YES";
    else
      v8 = "NO";
    HIDWORD(v21) = 0;
    v22 = 2082;
    v23 = "";
    v24 = 2113;
    v25 = v3;
    v26 = 2113;
    v27 = v4;
    v28 = 2082;
    v29 = v5;
    v30 = 2082;
    v31 = v6;
    v32 = 2082;
    v33 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #disconnectbackstop backstop timed out, evaluating disconnection\", \"item\":%{private, location:escape_only}@, \"periph\":%{private, location:escape_only}@, \"isConnected\":%{public, location:escape_only}s, \"isTaskQueueEmpty\":%{public, location:escape_only}s, \"pendingDisconnect\":%{public, location:escape_only}s}", (uint8_t *)&v21, 0x44u);
  }
  v9 = *(void **)(a1 + 32);
  if (v9)
  {
    if ((objc_msgSend(v9, "pendingDisconnect") & 1) != 0)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "isConnected"))
      {
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021BCA48);
        v10 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
        {
          v11 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
          v21 = 68289283;
          v22 = 2082;
          v23 = "";
          v24 = 2113;
          v25 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #disconnectbackstop commanding disconnection backstop\", \"item\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x1Cu);
        }
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 240), "submitUnexpectedMissingBeaconMetrics:disconnected:", *(_QWORD *)(a1 + 32), 1, v21);
        objc_msgSend(*(id *)(a1 + 32), "setDisconnectionReason:", CFSTR("UnexpectedMissingBeacon"));
        objc_msgSend(*(id *)(a1 + 40), "requestDisconnectionForDevice:", *(_QWORD *)(a1 + 32));
      }
      else
      {
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021BCA48);
        v18 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
        {
          v19 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
          v21 = 68289283;
          v22 = 2082;
          v23 = "";
          v24 = 2113;
          v25 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #disconnectbackstop device already disconnected\", \"item\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x1Cu);
        }
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 168), "removeObjectForKey:", *(_QWORD *)(a1 + 48), v21);
      }
    }
    else
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BCA48);
      v16 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
      {
        v17 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
        v21 = 68289283;
        v22 = 2082;
        v23 = "";
        v24 = 2113;
        v25 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #disconnectbackstop pending disconnection cancelled\", \"item\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x1Cu);
      }
    }
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BCA48);
    v12 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
    {
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
      v21 = 68289283;
      v22 = 2082;
      v23 = "";
      v24 = 2113;
      v25 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #disconnectbackstop device is non-existent, nothing to disconnect\", \"item\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x1Cu);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BCA48);
    }
    v14 = qword_1022A0038;
    if (os_signpost_enabled((os_log_t)qword_1022A0038))
    {
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
      v21 = 68289283;
      v22 = 2082;
      v23 = "";
      v24 = 2113;
      v25 = v15;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #disconnectbackstop device is non-existent, nothing to disconnect", "{\"msg%{public}.0s\":\"#durian #disconnectbackstop device is non-existent, nothing to disconnect\", \"item\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x1Cu);
    }
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 248), "removeObjectForKey:", *(_QWORD *)(a1 + 48), v21);
}

id sub_1015288F0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleKeyFetchTimeoutForDevice:", *(_QWORD *)(a1 + 40));
}

void sub_1015297D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD block[4];
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101529840;
  block[3] = &unk_1021BC8C8;
  v5 = *(_OWORD *)(a1 + 40);
  v6 = a2;
  v7 = v2;
  v8 = *(_QWORD *)(a1 + 56);
  dispatch_async(v3, block);
}

id sub_101529840(uint64_t a1)
{
  double v2;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "intervalSinceLastSearchPartyKeyObservation");
  +[CLDurianMetricManager submitKeyFetchEvent:numberMaterials:isDrift:deviceType:](CLDurianMetricManager, "submitKeyFetchEvent:numberMaterials:isDrift:deviceType:", objc_msgSend(*(id *)(a1 + 48), "count"), 1, objc_msgSend(*(id *)(a1 + 40), "prettyBeaconType"), v2);
  return objc_msgSend(*(id *)(a1 + 56), "didFetchConnectionMaterial:criteria:forDevice:error:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), 0);
}

void sub_1015298C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD block[4];
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10152992C;
  block[3] = &unk_1021BC8C8;
  v5 = *(_OWORD *)(a1 + 40);
  v6 = a2;
  v7 = v2;
  v8 = *(_QWORD *)(a1 + 56);
  dispatch_async(v3, block);
}

id sub_10152992C(uint64_t a1)
{
  double v2;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "intervalSinceLastSearchPartyKeyObservation");
  +[CLDurianMetricManager submitKeyFetchEvent:numberMaterials:isDrift:deviceType:](CLDurianMetricManager, "submitKeyFetchEvent:numberMaterials:isDrift:deviceType:", objc_msgSend(*(id *)(a1 + 48), "count"), 0, objc_msgSend(*(id *)(a1 + 40), "prettyBeaconType"), v2);
  return objc_msgSend(*(id *)(a1 + 56), "didFetchConnectionMaterial:criteria:forDevice:error:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), 0);
}

id sub_1015299AC(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  return objc_msgSend(*(id *)(a1 + 40), "handleTokenFetchForDevice:onCondition:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_101529B38(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v4[4];
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_101529BA0;
  v4[3] = &unk_102150F38;
  v5 = *(_OWORD *)(a1 + 32);
  v2 = *(NSObject **)(v5 + 264);
  v3 = *(_QWORD *)(a1 + 48);
  v6 = a2;
  v7 = v3;
  dispatch_async(v2, v4);
}

id sub_101529BA0(uint64_t a1)
{
  double v2;
  id result;

  objc_msgSend(*(id *)(a1 + 32), "cancelTokenFetchTimeoutForDevice:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 40), "intervalSinceLastSearchPartyKeyObservation");
  +[CLDurianMetricManager submitKeyFetchEvent:numberMaterials:isDrift:deviceType:](CLDurianMetricManager, "submitKeyFetchEvent:numberMaterials:isDrift:deviceType:", objc_msgSend(*(id *)(a1 + 48), "count"), 0, objc_msgSend(*(id *)(a1 + 40), "prettyBeaconType"), v2);
  objc_msgSend(*(id *)(a1 + 32), "didFetchConnectionMaterial:criteria:forDevice:error:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), 0);
  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "containsObject:", objc_msgSend(*(id *)(a1 + 40), "uuid"));
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 32), "completeTokenFetchForDevice:", *(_QWORD *)(a1 + 40));
  return result;
}

void sub_101529C5C(uint64_t a1)
{
  unsigned int v2;
  NSObject *v3;
  id v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  id v9;
  __int16 v10;
  unsigned int v11;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "containsObject:", objc_msgSend(*(id *)(a1 + 40), "uuid"));
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BCA48);
  v3 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "uuid"), "description"), "substringToIndex:", 8);
    v5[0] = 68289539;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2113;
    v9 = v4;
    v10 = 1026;
    v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #connection new criteria\", \"item\":%{private, location:escape_only}@, \"maint\":%{public}hhd}", (uint8_t *)v5, 0x22u);
  }
  if (v2)
    objc_msgSend(*(id *)(a1 + 32), "completeTokenFetchForDevice:", *(_QWORD *)(a1 + 40));
}

void sub_10152B618(uint64_t a1, int a2)
{
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BCA48);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v8[0] = 68290051;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2113;
    v12 = v5;
    v13 = 2114;
    v14 = v6;
    v15 = 2049;
    v16 = v7;
    v17 = 1025;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian set current wild key index\", \"item\":%{private, location:escape_only}@, \"event\":%{public, location:escape_only}@, \"index\":%{private}lu, \"success\":%{private}hhd}", (uint8_t *)v8, 0x36u);
  }
}

void sub_10152B7DC(uint64_t a1, int a2)
{
  NSObject *v4;
  id v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BCA48);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
    v6 = *(_QWORD *)(a1 + 40);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2113;
    v11 = v5;
    v12 = 2049;
    v13 = v6;
    v14 = 1025;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian set key roll interval\", \"item\":%{private, location:escape_only}@, \"interval\":%{private}lu, \"success\":%{private}hhd}", (uint8_t *)v7, 0x2Cu);
  }
}

void sub_10152B9B0(uint64_t a1, int a2)
{
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  id v22;
  __int16 v23;
  int v24;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BCA48);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = objc_msgSend(*(id *)(a1 + 32), "uuid");
    v10[0] = 68290563;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2113;
    v14 = v5;
    v15 = 2049;
    v16 = v8;
    v17 = 2049;
    v18 = v6;
    v19 = 2049;
    v20 = v7;
    v21 = 2113;
    v22 = v9;
    v23 = 1025;
    v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian set wild configuration\", \"item\":%{private, location:escape_only}@, \"base\":%{private}lu, \"interval\":%{private}lu, \"fallback\":%{private}lu, \"deviceId\":%{private, location:escape_only}@, \"success\":%{private}hhd}", (uint8_t *)v10, 0x4Au);
  }
}

void sub_10152BBB8(uint64_t a1, int a2)
{
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BCA48);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
    v7 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v8[0] = 68290051;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2113;
    v12 = v5;
    v13 = 2049;
    v14 = v6;
    v15 = 2113;
    v16 = v7;
    v17 = 1025;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian set alignment uncertainty\", \"item\":%{private, location:escape_only}@, \"uncertainty\":\"%{private}f\", \"completionDate\":%{private, location:escape_only}@, \"success\":%{private}hhd}", (uint8_t *)v8, 0x36u);
  }
}

void sub_10152BD78(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BCA48);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
    v6 = *(_QWORD *)(a1 + 40);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2113;
    v11 = v5;
    v12 = 2050;
    v13 = v6;
    v14 = 2114;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian updated battery status\", \"item\":%{private, location:escape_only}@, \"batteryStatus\":%{public}ld, \"error\":%{public, location:escape_only}@}", (uint8_t *)v7, 0x30u);
  }
}

void sub_10152C054(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BCA48);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "uuid"), "description"), "substringToIndex:", 8);
    v6 = *(_QWORD *)(a1 + 40);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2113;
    v11 = v5;
    v12 = 2113;
    v13 = v6;
    v14 = 2113;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian updated beacon state\", \"item\":%{private, location:escape_only}@, \"state\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", (uint8_t *)v7, 0x30u);
  }
}

id sub_10152C3C0(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 240), "submitBeaconLocationMetric:type:timestampAdjusted:forDevice:", a2, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40));
}

uint64_t sub_10152C7B4(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  double v9;
  int v10;
  double v11;
  int v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t result;
  uint64_t v23;
  _BYTE v24[32];
  const char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  if (a2)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BCA48);
    v4 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "substringToIndex:", 8);
      v6 = *(_QWORD *)(a1 + 72);
      v7 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", *(_QWORD *)(a1 + 40), 1, 4), "UTF8String");
      v8 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", *(_QWORD *)(a1 + 48), 1, 4), "UTF8String");
      objc_msgSend(a2, "coordinate");
      v10 = (int)v9;
      objc_msgSend(a2, "coordinate");
      v12 = (int)v11;
      objc_msgSend(a2, "horizontalAccuracy");
      v23 = 68291075;
      *(_WORD *)v24 = 2082;
      *(_QWORD *)&v24[2] = "";
      *(_WORD *)&v24[10] = 2113;
      *(_QWORD *)&v24[12] = v5;
      *(_WORD *)&v24[20] = 2050;
      *(_QWORD *)&v24[22] = v6;
      *(_WORD *)&v24[30] = 2082;
      v25 = v7;
      LOWORD(v26) = 2082;
      *(_QWORD *)((char *)&v26 + 2) = v8;
      WORD5(v26) = 1025;
      HIDWORD(v26) = v10;
      LOWORD(v27) = 1025;
      *(_DWORD *)((char *)&v27 + 2) = v12;
      HIWORD(v27) = 2050;
      v28 = v13;
      LOWORD(v29) = 2082;
      *(_QWORD *)((char *)&v29 + 2) = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", objc_msgSend(a2, "timestamp"), 1, 4), "UTF8String");
      v14 = "{\"msg%{public}.0s\":\"#durian sendObservationForDevice includeLocation, YES, \", \"item\":%{private, locati"
            "on:escape_only}@, \"type\":%{public}ld, \"date\":%{public, location:escape_only}s, \"adjustedDate\":%{public"
            ", location:escape_only}s, \"lat\":%{private}d, \"lon\":%{private}d, \"accuracy\":\"%{public}f\", \"loc.date\""
            ":%{public, location:escape_only}s}";
      v15 = v4;
      v16 = 90;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v23, v16);
    }
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BCA48);
    v17 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      v18 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "substringToIndex:", 8);
      v19 = *(_QWORD *)(a1 + 72);
      v20 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", *(_QWORD *)(a1 + 40), 1, 4), "UTF8String");
      v21 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", *(_QWORD *)(a1 + 48), 1, 4), "UTF8String");
      v23 = 68290051;
      *(_WORD *)v24 = 2082;
      *(_QWORD *)&v24[2] = "";
      *(_WORD *)&v24[10] = 2113;
      *(_QWORD *)&v24[12] = v18;
      *(_WORD *)&v24[20] = 2050;
      *(_QWORD *)&v24[22] = v19;
      *(_WORD *)&v24[30] = 2082;
      v25 = v20;
      LOWORD(v26) = 2082;
      *(_QWORD *)((char *)&v26 + 2) = v21;
      v14 = "{\"msg%{public}.0s\":\"#durian sendObservationForDevice includeLocation, YES, location is nil.\", \"item\":%"
            "{private, location:escape_only}@, \"type\":%{public}ld, \"date\":%{public, location:escape_only}s, \"adjuste"
            "dDate\":%{public, location:escape_only}s}";
      v15 = v17;
      v16 = 58;
      goto LABEL_10;
    }
  }
  objc_msgSend(*(id *)(a1 + 56), "sendObservationForIdentifier:type:date:location:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40), a2, v23, *(_OWORD *)v24, *(_OWORD *)&v24[16], v25, v26, v27, v28, v29);
  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, a2);
  return result;
}

void sub_10152CDA8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BCA48);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "substringToIndex:", 8);
    v6 = *(_QWORD *)(a1 + 40);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2113;
    v11 = v5;
    v12 = 2113;
    v13 = v6;
    v14 = 2113;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian updated beacon observation\", \"item\":%{private, location:escape_only}@, \"observation\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", (uint8_t *)v7, 0x30u);
  }
}

id sub_10152D280(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "sendObservationForIdentifier:type:date:locationDate:includeLocation:locationHandler:", _NSConcreteStackBlock, 3221225472, sub_10152D2E8, &unk_1021BCA08, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
}

void sub_10152D2E8(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  id v9;
  __int16 v10;
  uint64_t v11;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BCA48);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "substringToIndex:", 8);
    v4 = *(_QWORD *)(a1 + 40);
    v5[0] = 68289539;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2113;
    v9 = v3;
    v10 = 2050;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #companion updating companion connection event\", \"item\":%{private, location:escape_only}@, \"type\":%{public}ld}", (uint8_t *)v5, 0x26u);
  }
}

void sub_10152D6A0(id a1)
{
  const __CFString *v1;
  const __CFString *v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v1 = (const __CFString *)MGCopyAnswer(CFSTR("RegionCode"), 0);
  if (v1)
  {
    v2 = v1;
    if (CFStringCompare(v1, CFSTR("KH"), 0) == kCFCompareEqualTo)
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BCA48);
      v3 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
      {
        v4[0] = 68289026;
        v4[1] = 0;
        v5 = 2082;
        v6 = "";
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian - DeviceSKU is Korea\"}", (uint8_t *)v4, 0x12u);
      }
      byte_10230F900 = 1;
    }
    CFRelease(v2);
  }
}

void sub_10152D7B4(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

id sub_10152DAA4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "initializeClientRequestsViewsWithZeroValues:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
  return objc_msgSend(*(id *)(a1 + 32), "submitClientRequestsEvent:client:scanType:", &off_10221DF70, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "StartMonitor"));
}

id sub_10152E3EC(uint64_t a1)
{
  return objc_msgSend(objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 16)), "onAggressiveScanEnded");
}

void sub_10152E408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v5;
  NSObject *v6;
  _QWORD block[6];
  id v8;

  v5 = (id *)(a1 + 32);
  v6 = objc_msgSend(objc_loadWeak((id *)(a1 + 32)), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10152E4AC;
  block[3] = &unk_1021BCAE0;
  objc_copyWeak(&v8, v5);
  block[4] = a2;
  block[5] = a3;
  dispatch_async(v6, block);
  objc_destroyWeak(&v8);
}

id sub_10152E4AC(uint64_t a1)
{
  id Weak;

  Weak = objc_loadWeak((id *)(a1 + 48));
  return _objc_msgSend(Weak, "scanCompletedWithError:totalRXTime:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

id sub_10152E4D4(uint64_t a1)
{
  id Weak;

  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 16));
  return _objc_msgSend(Weak, "onNotOptedInBOMScanEnded");
}

uint64_t sub_10152E814(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

id sub_10152EAAC(uint64_t a1)
{
  return objc_msgSend(objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 16)), "onAggressiveScanEnded");
}

id sub_10152EAC8(uint64_t a1)
{
  id Weak;

  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 16));
  return _objc_msgSend(Weak, "onUpdatedPowerState");
}

uint64_t sub_10152F7AC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_10152FA30(id a1)
{
  qword_1022A0218 = (uint64_t)os_log_create("com.apple.locationd.Core", "AvengerScanner");
}

void sub_101532C64(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1015345D8(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_101534D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_101534D94(uint64_t a1, void *a2)
{
  id Weak;
  void *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  id v22;
  __int16 v23;
  id v24;

  Weak = objc_loadWeak((id *)(a1 + 32));
  if (Weak)
  {
    if (a2)
    {
      v5 = Weak;
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BCBB0);
      v6 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
      {
        v7 = objc_msgSend(a2, "identifier");
        v8 = *(_QWORD *)(a1 + 40);
        v13 = 68290051;
        v15 = 2082;
        v14 = 0;
        v16 = "";
        v17 = 2113;
        v18 = v7;
        v19 = 2049;
        v20 = v8;
        v21 = 2113;
        v22 = objc_msgSend(v5, "lastObservedBeacon");
        v23 = 2049;
        v24 = objc_msgSend(v5, "lastObservedType");
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #companion notify connection update of companion device\", \"identifier\":%{private, location:escape_only}@, \"observedType\":%{private}ld, \"lastObservedIdentifier\":%{private, location:escape_only}@, \"lastObservedType\":%{private}ld}", (uint8_t *)&v13, 0x3Au);
      }
      v9 = objc_msgSend(v5, "lastObservedBeacon");
      if (v9 == objc_msgSend(a2, "identifier") && objc_msgSend(v5, "lastObservedType") == *(id *)(a1 + 40))
      {
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021BCBB0);
        v10 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
        {
          v13 = 68289026;
          v14 = 0;
          v15 = 2082;
          v16 = "";
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #companion duplicated connection update of companion device\"}", (uint8_t *)&v13, 0x12u);
        }
      }
      else if (objc_msgSend(v5, "lastObservedType") == (id)1 && *(_QWORD *)(a1 + 40) == 2)
      {
        objc_msgSend(objc_msgSend(v5, "deviceObservationDelegate"), "onObservationForDeviceWithIdentifier:type:date:", objc_msgSend(a2, "identifier"), 3, +[NSDate date](NSDate, "date"));
      }
      objc_msgSend(v5, "setLastObservedBeacon:", objc_msgSend(objc_msgSend(a2, "identifier"), "copy"));
      objc_msgSend(v5, "setLastObservedType:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BCBB0);
      v11 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
      {
        v13 = 68289026;
        v14 = 0;
        v15 = 2082;
        v16 = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #companion received nil beacon but got companion notification, ignoring\"}", (uint8_t *)&v13, 0x12u);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021BCBB0);
      }
      v12 = qword_1022A0038;
      if (os_signpost_enabled((os_log_t)qword_1022A0038))
      {
        v13 = 68289026;
        v14 = 0;
        v15 = 2082;
        v16 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #companion received nil beacon but got companion notification, ignoring", "{\"msg%{public}.0s\":\"#durian #companion received nil beacon but got companion notification, ignoring\"}", (uint8_t *)&v13, 0x12u);
      }
    }
  }
}

void sub_101535178(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_101535C00(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_101535E48(void *a1, char *a2)
{
  int v4;
  NSObject *v5;
  char *v6;
  const __CFString *v7;
  const __CFString *v8;
  id v9;
  __CFUserNotification *v10;
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoopSource *v12;
  __CFDictionary *v13;
  __CFRunLoop *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  id v24;

  if (qword_10230F920
    && (os_unfair_lock_lock((os_unfair_lock_t)&unk_10230F928),
        v4 = CFDictionaryContainsValue((CFDictionaryRef)qword_10230F920, a1),
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_10230F928),
        v4))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BCC10);
    v5 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2113;
      v24 = objc_msgSend(objc_msgSend(objc_msgSend(a1, "uuid"), "description"), "substringToIndex:", 8);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian skipping crash alert display, alert already pending\", \"item\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  else
  {
    v6 = a2 - 1;
    if ((unint64_t)(a2 - 1) > 3)
    {
      v8 = CFSTR("Crash logs were discovered on %@.");
      v7 = CFSTR("Durian Crash Logs Found");
    }
    else
    {
      v7 = off_1021BCC70[(_QWORD)v6];
      v8 = off_1021BCC90[(_QWORD)v6];
    }
    v9 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v7, kCFUserNotificationAlertHeaderKey);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", CFSTR("File a Radar"), kCFUserNotificationDefaultButtonTitleKey);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", CFSTR("Dismiss"), kCFUserNotificationAlternateButtonTitleKey);
    if (objc_msgSend(objc_msgSend(a1, "beacon"), "name"))
      objc_msgSend(v9, "setObject:forKeyedSubscript:", +[NSString stringWithValidatedFormat:validFormatSpecifiers:error:](NSString, "stringWithValidatedFormat:validFormatSpecifiers:error:", v8, CFSTR("%@"), 0, objc_msgSend(objc_msgSend(a1, "beacon"), "name")), kCFUserNotificationAlertMessageKey);
    v10 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, 0, (CFDictionaryRef)v9);

    if (v10)
    {
      RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v10, (CFUserNotificationCallBack)sub_1015363C0, 0);
      if (RunLoopSource)
      {
        v12 = RunLoopSource;
        os_unfair_lock_lock((os_unfair_lock_t)&unk_10230F928);
        v13 = (__CFDictionary *)qword_10230F920;
        if (!qword_10230F920)
        {
          qword_10230F920 = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, 0);
          qword_10230F930 = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, 0);
          v13 = (__CFDictionary *)qword_10230F920;
        }
        CFDictionaryAddValue(v13, v10, a1);
        CFDictionaryAddValue((CFMutableDictionaryRef)qword_10230F930, v10, a2);
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_10230F928);
        v14 = (__CFRunLoop *)sub_100193530();
        CFRunLoopAddSource(v14, v12, kCFRunLoopCommonModes);
        CFRelease(v12);
      }
      else
      {
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021BCC10);
        v17 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289026;
          v20 = 0;
          v21 = 2082;
          v22 = "";
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian Could not create runloop source for Durian crash log detected user notification\"}", buf, 0x12u);
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_1021BCC10);
        }
        v18 = qword_1022A0038;
        if (os_signpost_enabled((os_log_t)qword_1022A0038))
        {
          *(_DWORD *)buf = 68289026;
          v20 = 0;
          v21 = 2082;
          v22 = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian Could not create runloop source for Durian crash log detected user notification", "{\"msg%{public}.0s\":\"#durian Could not create runloop source for Durian crash log detected user notification\"}", buf, 0x12u);
        }
        CFRelease(v10);
      }
    }
    else
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BCC10);
      v15 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289026;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian Could not create client Durian crash log detected user notification\"}", buf, 0x12u);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021BCC10);
      }
      v16 = qword_1022A0038;
      if (os_signpost_enabled((os_log_t)qword_1022A0038))
      {
        *(_DWORD *)buf = 68289026;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian Could not create client Durian crash log detected user notification", "{\"msg%{public}.0s\":\"#durian Could not create client Durian crash log detected user notification\"}", buf, 0x12u);
      }
    }
  }
}

void sub_1015363C0(const void *a1, char a2)
{
  void *Value;
  char *v5;
  id v6;
  const __CFString *v7;
  NSURL *v8;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_10230F928);
  Value = (void *)CFDictionaryGetValue((CFDictionaryRef)qword_10230F920, a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10230F928);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10230F928);
  v5 = (char *)CFDictionaryGetValue((CFDictionaryRef)qword_10230F930, a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10230F928);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10230F928);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10230F920, a1);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10230F930, a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10230F928);
  if ((a2 & 3) == 0)
  {
    v6 = objc_msgSend(CFSTR("tap-to-radar://new"), "mutableCopy");
    objc_msgSend(v6, "appendString:", CFSTR("?Classification=Crash%2FHang%2FData%20Loss"));
    objc_msgSend(v6, "appendString:", CFSTR("&ComponentID=989467&ComponentName=B389%20SW&ComponentVersion=App"));
    if ((unint64_t)(v5 - 1) > 3)
      v7 = CFSTR("Crash logs found");
    else
      v7 = off_1021BCCB0[(_QWORD)(v5 - 1)];
    objc_msgSend(v6, "appendString:", -[NSString stringByAddingPercentEncodingWithAllowedCharacters:](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("&Title=[B389] %@ on %@"), v7, objc_msgSend(objc_msgSend(Value, "beacon"), "name")), "stringByAddingPercentEncodingWithAllowedCharacters:", +[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet")));
    objc_msgSend(v6, "appendFormat:", CFSTR("&Description=%@"), -[NSString stringByAddingPercentEncodingWithAllowedCharacters:](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ were found on %@ (%@)"), v7, objc_msgSend(objc_msgSend(Value, "beacon"), "name"), objc_msgSend(Value, "uuid")), "stringByAddingPercentEncodingWithAllowedCharacters:", +[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet")));
    v8 = +[NSURL URLWithString:](NSURL, "URLWithString:", v6);

    objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "openURL:configuration:completionHandler:", v8, 0, &stru_1021BCC30);
  }
}

void sub_1015365D0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  unsigned __int8 v4;
  int v5;
  double Current;
  const __CFString *v7;
  id v8;
  CFUserNotificationRef v9;
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoopSource *v11;
  __CFRunLoop *v12;
  NSObject *v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  NSObject *v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;

  if (+[CLDurianPlatform isInternalInstall](CLDurianPlatform, "isInternalInstall"))
  {
    if (byte_10230F910 == 1)
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BCC10);
      v2 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v3 = "{\"msg%{public}.0s\":\"#durian skipping surfacing beacon change popup, popup pending user interaction has a"
             "lready been surfaced; once dismissed a new popup will be displayed when appropriate\"}";
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, buf, 0x12u);
      }
    }
    else
    {
      v4 = +[CLDurianSettings allowBeaconsChangedPopup](CLDurianSettings, "allowBeaconsChangedPopup");
      v5 = +[CLDurianSettings beaconsChangedPopupBackoff](CLDurianSettings, "beaconsChangedPopupBackoff");
      Current = CFAbsoluteTimeGetCurrent();
      if ((v4 & 1) != 0)
      {
        if (vabdd_f64(Current, *(double *)&qword_102300838) > (double)v5)
        {
          byte_10230F910 = 1;
          if (a1 == 1)
            v7 = CFSTR("%lu of your Find My accessories has been removed. Have you recently unpaired any accessories or been removed from a shared accessory?");
          else
            v7 = CFSTR("%lu of your Find My accessories have been removed. Have you recently unpaired any accessories or been removed from a shared accessory?");
          v8 = objc_alloc_init((Class)NSMutableDictionary);
          objc_msgSend(v8, "setObject:forKeyedSubscript:", CFSTR("Find My Accessory List Changed"), kCFUserNotificationAlertHeaderKey);
          objc_msgSend(v8, "setObject:forKeyedSubscript:", CFSTR("No - File a Radar"), kCFUserNotificationDefaultButtonTitleKey);
          objc_msgSend(v8, "setObject:forKeyedSubscript:", CFSTR("Yes"), kCFUserNotificationAlternateButtonTitleKey);
          objc_msgSend(v8, "setObject:forKeyedSubscript:", +[NSString stringWithValidatedFormat:validFormatSpecifiers:error:](NSString, "stringWithValidatedFormat:validFormatSpecifiers:error:", v7, CFSTR("%lu"), 0, a1), kCFUserNotificationAlertMessageKey);
          v9 = CFUserNotificationCreate(kCFAllocatorDefault, 30.0, 0, 0, (CFDictionaryRef)v8);

          if (v9)
          {
            CFRetain(v9);
            RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v9, (CFUserNotificationCallBack)sub_101536BEC, 0);
            if (RunLoopSource)
            {
              v11 = RunLoopSource;
              v12 = (__CFRunLoop *)sub_100193530();
              CFRunLoopAddSource(v12, v11, kCFRunLoopCommonModes);
              CFRelease(v11);
              CFRelease(v9);
              return;
            }
            if (qword_1022A0030 != -1)
              dispatch_once(&qword_1022A0030, &stru_1021BCC10);
            v17 = qword_1022A0038;
            if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 68289026;
              v19 = 0;
              v20 = 2082;
              v21 = "";
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian could not create runloop source for durian beacon list updated user notification\"}", buf, 0x12u);
              if (qword_1022A0030 != -1)
                dispatch_once(&qword_1022A0030, &stru_1021BCC10);
            }
            v14 = qword_1022A0038;
            if (!os_signpost_enabled((os_log_t)qword_1022A0038))
              return;
            *(_DWORD *)buf = 68289026;
            v19 = 0;
            v20 = 2082;
            v21 = "";
            v15 = "#durian could not create runloop source for durian beacon list updated user notification";
            v16 = "{\"msg%{public}.0s\":\"#durian could not create runloop source for durian beacon list updated user notification\"}";
          }
          else
          {
            if (qword_1022A0030 != -1)
              dispatch_once(&qword_1022A0030, &stru_1021BCC10);
            v13 = qword_1022A0038;
            if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 68289026;
              v19 = 0;
              v20 = 2082;
              v21 = "";
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian could not create client durian beacon list changed user notification\"}", buf, 0x12u);
              if (qword_1022A0030 != -1)
                dispatch_once(&qword_1022A0030, &stru_1021BCC10);
            }
            v14 = qword_1022A0038;
            if (!os_signpost_enabled((os_log_t)qword_1022A0038))
              return;
            *(_DWORD *)buf = 68289026;
            v19 = 0;
            v20 = 2082;
            v21 = "";
            v15 = "#durian could not create client durian beacon list changed user notification";
            v16 = "{\"msg%{public}.0s\":\"#durian could not create client durian beacon list changed user notification\"}";
          }
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v15, v16, buf, 0x12u);
          return;
        }
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021BCC10);
        v2 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          v19 = 0;
          v20 = 2082;
          v21 = "";
          v3 = "{\"msg%{public}.0s\":\"#durian skipping surfacing beacon change popup, not enough time passed since last "
               "interaction with surfaced popup\"}";
          goto LABEL_27;
        }
      }
      else
      {
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021BCC10);
        v2 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          v19 = 0;
          v20 = 2082;
          v21 = "";
          v3 = "{\"msg%{public}.0s\":\"#durian skipping surfacing beacon change popup, popup default set to no\"}";
          goto LABEL_27;
        }
      }
    }
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BCC10);
    v2 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v3 = "{\"msg%{public}.0s\":\"#durian skipping surfacing beacon change popup\"}";
      goto LABEL_27;
    }
  }
}

void sub_101536BEC(uint64_t a1, char a2)
{
  id v2;
  NSURL *v3;

  if ((a2 & 3) != 0)
  {
    if ((a2 & 3) == 1)
    {
      qword_102300838 = CFAbsoluteTimeGetCurrent();
      byte_10230F910 = 0;
      sub_1015371A4(1);
    }
  }
  else
  {
    qword_102300838 = CFAbsoluteTimeGetCurrent();
    byte_10230F910 = 0;
    sub_1015371A4(0);
    v2 = objc_msgSend(CFSTR("tap-to-radar://new"), "mutableCopy");
    objc_msgSend(v2, "appendString:", CFSTR("?Title=Beacon%20List%20Change%20Detected"));
    objc_msgSend(v2, "appendString:", CFSTR("&Classification=Other%20Bug"));
    objc_msgSend(v2, "appendString:", CFSTR("&ComponentID=996130&ComponentName=Proximity&ComponentVersion=B389"));
    objc_msgSend(v2, "appendString:", CFSTR("&Reproducibility=I%20Didn't%20Try"));
    objc_msgSend(v2, "appendFormat:", CFSTR("&Description=%@"), objc_msgSend(CFSTR("Did you intend to remove any accessories from Find My, or were you recently removed from any shared items? Is there any other context around your recent usage of Find My or your Find My accessories that you can provide?"), "stringByAddingPercentEncodingWithAllowedCharacters:", +[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet")));
    v3 = +[NSURL URLWithString:](NSURL, "URLWithString:", v2);

    objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "openURL:configuration:completionHandler:", v3, 0, &stru_1021BCC50);
  }
}

NSString *sub_101536D20(void *a1)
{
  unsigned __int8 *v3;

  if ((unint64_t)objc_msgSend(a1, "length") < 0x10)
    return 0;
  v3 = (unsigned __int8 *)objc_msgSend(a1, "bytes");
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X"), *v3, v3[1], v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8], v3[9], v3[10], v3[11], v3[12], v3[13], v3[14], v3[15]);
}

uint64_t sub_101536DD8()
{
  uint64_t v0;

  v0 = mach_continuous_time();
  return TMConvertTicksToSeconds(v0);
}

const __CFString *sub_101536DEC(unint64_t a1)
{
  if (a1 > 0x2D)
    return CFSTR("Unknown");
  else
    return off_1021BCCD0[a1];
}

uint64_t sub_101536E10()
{
  if (qword_10230F918 != -1)
    dispatch_once(&qword_10230F918, &stru_1021BCBF0);
  return byte_10230F911;
}

void sub_101536E50(id a1)
{
  const __CFBoolean *v1;
  const __CFBoolean *v2;
  CFTypeID v3;

  v1 = (const __CFBoolean *)MGCopyAnswer(CFSTR("InternalBuild"), 0);
  if (v1)
  {
    v2 = v1;
    v3 = CFGetTypeID(v1);
    if (v3 == CFBooleanGetTypeID() && CFBooleanGetValue(v2) == 1)
      byte_10230F911 = 1;
    CFRelease(v2);
  }
}

uint64_t sub_101536EC0()
{
  return _os_feature_enabled_impl("BluetoothFeatures", "Sentinel");
}

void sub_10153700C(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_101537038(id a1, NSDictionary *a2, NSError *a3)
{
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  if (a3)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BCC10);
    v3 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian crash detection failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BCC10);
    }
    v4 = qword_1022A0038;
    if (os_signpost_enabled((os_log_t)qword_1022A0038))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian crash detection failed to open Tap To Radar", "{\"msg%{public}.0s\":\"#durian crash detection failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

uint64_t sub_1015371A4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  id v9;

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a1), CFSTR("userResponse"));
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BCC10);
  v3 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2114;
    v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #metrics send beacon list change event\", \"eventData\":%{public, location:escape_only}@}", (uint8_t *)v5, 0x1Cu);
  }
  return AnalyticsSendEvent(CFSTR("com.apple.proximity.airtag.beaconListMonitor"), v2);
}

void sub_1015372CC(id a1, NSDictionary *a2, NSError *a3)
{
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  if (a3)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BCC10);
    v3 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian beacon list changed failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BCC10);
    }
    v4 = qword_1022A0038;
    if (os_signpost_enabled((os_log_t)qword_1022A0038))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian beacon list changed failed to open Tap To Radar", "{\"msg%{public}.0s\":\"#durian beacon list changed failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

uint64_t sub_101537438(uint64_t result)
{
  *(_QWORD *)result = &off_1021BCE50;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101537450(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_101537474(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  float result;

  *(_QWORD *)a1 = &off_1021BCE50;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 28) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 16) = v6;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        return result;
LABEL_12:
      result = *(float *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = v3 | 8;
      *(float *)(a1 + 24) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 20) = v7;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_10153751C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "cyclingState", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cyclingStateSummary", *(_DWORD *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "motionType", *(_DWORD *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "distanceTraveledOverTimeWindow", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015375EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_87:
                v2 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 16) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 20) = v43;
LABEL_104:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_104;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101537B50(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 4u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  return result;
}

_QWORD *sub_101537C00(_QWORD *result)
{
  *result = &off_1021BCE88;
  *(_QWORD *)((char *)result + 156) = 0;
  return result;
}

void sub_101537C18(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_101537C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  char v10;
  char v11;
  int v12;
  char v13;

  *(_QWORD *)a1 = &off_1021BCE88;
  *(_QWORD *)(a1 + 156) = 0;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_QWORD *)(a1 + 156) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_QWORD *)(a2 + 156);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 24);
    v3 |= 4uLL;
    *(_QWORD *)(a1 + 156) = v3;
    *(_QWORD *)(a1 + 24) = v5;
    v2 = *(_QWORD *)(a2 + 156);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2uLL;
    *(_QWORD *)(a1 + 156) = v3;
    *(_QWORD *)(a1 + 16) = v6;
    v2 = *(_QWORD *)(a2 + 156);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_44;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x20uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 84) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x10uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *(_DWORD *)(a2 + 132);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 132) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *(_DWORD *)(a2 + 140);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 140) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *(_DWORD *)(a2 + 136);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 136) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  v7 = *(_DWORD *)(a2 + 48);
  v3 |= 0x80uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 48) = v7;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *(_DWORD *)(a2 + 128);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 128) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  v8 = *(_BYTE *)(a2 + 152);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 152) = v8;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  v9 = *(_DWORD *)(a2 + 148);
  v3 |= (unint64_t)&_mh_execute_header;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 148) = v9;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *(_DWORD *)(a2 + 144);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 144) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x400) == 0)
  {
LABEL_26:
    if ((v2 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x400uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x800uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  v10 = *(_BYTE *)(a2 + 153);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 153) = v10;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  v3 |= 0x800000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 112) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x400000) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x200000) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_34;
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x200000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x100000) == 0)
      goto LABEL_35;
    goto LABEL_70;
  }
LABEL_69:
  v11 = *(_BYTE *)(a2 + 155);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 155) = v11;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_35:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_36;
    goto LABEL_71;
  }
LABEL_70:
  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x100000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0)
      goto LABEL_37;
    goto LABEL_72;
  }
LABEL_71:
  v12 = *(_DWORD *)(a2 + 120);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 120) = v12;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x100) == 0)
      goto LABEL_38;
    goto LABEL_73;
  }
LABEL_72:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_38:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_39;
    goto LABEL_74;
  }
LABEL_73:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x40000) == 0)
      goto LABEL_40;
    goto LABEL_75;
  }
LABEL_74:
  v13 = *(_BYTE *)(a2 + 154);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 154) = v13;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_40:
    if ((v2 & 8) == 0)
      return *(float *)&v4;
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  if ((*(_QWORD *)(a2 + 156) & 8) == 0)
    return *(float *)&v4;
LABEL_76:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 156) = v3 | 8;
  *(_DWORD *)(a1 + 32) = v4;
  return *(float *)&v4;
}

